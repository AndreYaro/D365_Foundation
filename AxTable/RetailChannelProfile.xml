<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailChannelProfile</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailChannelProfile extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the channel profile.
    /// </summary>
    /// <param name="_showMessages">
    /// Whether to display validation messages.
    /// </param>
    /// <returns>
    /// The validation result.
    /// </returns>
    public boolean validateProfile(boolean _showMessages = true)
    {
        boolean isValid = true;

        switch (this.ChannelProfileType)
        {
            case RetailChannelProfileType::SharePointOnlineStore:
                isValid = this.validateSharePointChannelProfile(_showMessages);
                break;

            case RetailChannelProfileType::RetailServer:
                isValid = this.validateRetailServerProfile(_showMessages);

            default:
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRetailServerProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the Retail Server profile.
    /// </summary>
    /// <param name="_showMessages">
    /// Whether to display validation messages.
    /// </param>
    /// <returns>
    /// The validation result.
    /// </returns>
    private boolean validateRetailServerProfile(boolean _showMessages = true)
    {
        boolean isValid = true;
        int storeConnectUrlCount;
        int mediaBaseUrlCount;
        int cloudPOSUrlCount;
        RetailChannelProfileProperty profileProperty;
        boolean enforceHttps = !RetailUtilities::isRetailCDXBackwardCompatibilityEnabled();

        while select profileProperty
            where profileProperty.ChannelProfile == this.RecId
        {
            switch (profileProperty.Key)
            {
                case RetailServerProfilePropertyKey::InternalUrl:
                    storeConnectUrlCount++;
                    if (!RetailUtilities::validateUniformResourceLocator(profileProperty.Value, enforceHttps))
                    {
                        isValid = false;
                        if (_showMessages)
                        {
                            error(strFmt("@REX1631", profileProperty.Value));
                        }
                    }
                    break;

                case RetailServerProfilePropertyKey::MediaBaseUrl:
                    mediaBaseUrlCount++;
                    if (!RetailUtilities::validateUniformResourceLocator(profileProperty.Value, enforceHttps))
                    {
                        isValid = false;
                        if (_showMessages)
                        {
                            error(strFmt("@REX4040030", profileProperty.Value));
                        }
                    }
                    break;

                case RetailServerProfilePropertyKey::PrinterUrl:
                    if (!RetailUtilities::validateUniformResourceLocator(profileProperty.Value, enforceHttps))
                    {
                        isValid = false;
                        if (_showMessages)
                        {
                            error(strFmt("@REX4161290", profileProperty.Value));
                        }
                    }
                    break;

                case RetailServerProfilePropertyKey::DrawerUrl:
                    if (!RetailUtilities::validateUniformResourceLocator(profileProperty.Value, enforceHttps))
                    {
                        isValid = false;
                        if (_showMessages)
                        {
                            error(strFmt("@REX4161291", profileProperty.Value));
                        }
                    }
                    break;

                case RetailServerProfilePropertyKey::PaymentTerminalUrl:
                    if (!RetailUtilities::validateUniformResourceLocator(profileProperty.Value, enforceHttps))
                    {
                        isValid = false;
                        if (_showMessages)
                        {
                            error(strFmt("@REX4161292", profileProperty.Value));
                        }
                    }
                    break;

                case RetailServerProfilePropertyKey::CloudPOSUrl:
                    cloudPOSUrlCount++;
                    if (!RetailUtilities::validateUniformResourceLocator(profileProperty.Value, enforceHttps))
                    {
                        isValid = false;
                        if (_showMessages)
                        {
                            error(strFmt("@Retail:InvalidCloudPosUrl", profileProperty.Value));
                        }
                    }
                    break;
                case RetailServerProfilePropertyKey::HardwareStationUrl:
                    if (!RetailUtilities::isRetailCDXBackwardCompatibilityEnabled())
                    {
                        isValid = false;
                        if (_showMessages)
                        {
                            error(strFmt("@Retail:NonNMinusOneHardwareStationURLInsertionError", profileProperty.Value));
                        }
                    }
                    else
                    {
                        if (!RetailUtilities::validateUniformResourceLocator(profileProperty.Value, enforceHttps))
                        {
                            isValid = false;
                            if (_showMessages)
                            {
                                error(strFmt("@REX4161284", profileProperty.Value));
                            }
                        }
                    }
                    break;
                default:
                    isValid = false;
                    if (_showMessages)
                    {
                        error(strFmt("@REX1632", profileProperty.Key));
                    }
            }
        }

        if (storeConnectUrlCount != 1)
        {
            isValid = false;
            if (_showMessages)
            {
                error("@REX1633");
            }
        }

        if (mediaBaseUrlCount != 1)
        {
            isValid = false;
            if (_showMessages)
            {
                error("@REX4040029");
            }
        }

        if (cloudPOSUrlCount > 1)
        {
            isValid = false;
            if (_showMessages)
            {
                error("@Retail:MoreThanOneCloudPosUrl");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSharePointChannelProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the SharePoint channel profile.
    /// </summary>
    /// <param name="_showMessages">
    /// Whether to display validation messages.
    /// </param>
    /// <returns>
    /// The validation result.
    /// </returns>
    private boolean validateSharePointChannelProfile(boolean _showMessages = true)
    {
        boolean isValid = true;
        int catalogSCCount, publishingSCCount;
        RetailChannelProfileProperty profileProperty;

        while select profileProperty
            where profileProperty.ChannelProfile == this.RecId
        {
            switch (profileProperty.Key)
            {
                case RetailSPChannelProfilePropertyKey::CatalogSiteCollectionURL:
                    catalogSCCount++;
                    if (!DocuType::validateURL(profileProperty.Value))
                    {
                        isValid = false;
                        if (_showMessages)
                        {
                            error(strFmt("@RET4160427", profileProperty.Value));
                        }
                    }
                    break;

                case RetailSPChannelProfilePropertyKey::PublishingSiteCollectionURL:
                    publishingSCCount++;
                    if (!DocuType::validateURL(profileProperty.Value))
                    {
                        isValid = false;
                        if (_showMessages)
                        {
                            error(strFmt("@RET4160426", profileProperty.Value));
                        }
                    }
                    break;

                default:
                    isValid = false;
                    if (_showMessages)
                    {
                        error(strFmt("@RET4160425", profileProperty.Key));
                    }
            }
        }

        if (catalogSCCount != 1)
        {
            isValid = false;
            if (_showMessages)
            {
                error("@RET4160424");
            }
        }

        if (publishingSCCount < 1)
        {
            isValid = false;
            if (_showMessages)
            {
                error("@RET4160423");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailServerMediaBaseURL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Media Server URL for Retail Server Channel.
    /// </summary>
    /// <param name="_retailChannelProfileType">
    /// Type of channel to retrieve media server URL.
    /// </param>
    /// <returns>
    /// The Media URL of the channel.
    /// </returns>
    public static str getRetailServerMediaBaseURL(RetailChannelProfileType _retailChannelProfileType)
    {
        str retailServerMediaURL= null;

        RetailChannelProfileProperty profileProperty;
        RetailChannelProfile retailChannelProfile;

        while select RecId,ChannelProfileType from retailChannelProfile
            where retailChannelProfile.ChannelProfileType == _retailChannelProfileType
            join Key,Value from profileProperty
                where profileProperty.ChannelProfile == retailChannelProfile.RecId
        {
            if (profileProperty.Key == RetailServerProfilePropertyKey::MediaBaseUrl)
            {
                retailServerMediaURL= profileProperty.Value;
            }
        }

        return retailServerMediaURL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailServerCloudPOSUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Cloud POS URL for Retail Server Channel.
    /// </summary>
    /// <param name = "channelTableRecId">Retail channle RecId.</param>
    /// <returns>The Cloud POS Url of the channel.</returns>
    public static RetailCloudPOSUrl getRetailServerCloudPOSUrl(RecId channelTableRecId)
    {
        RetailChannelTableExt           channleTableExt;
        RetailChannelProfile            channelProfile;
        RetailChannelProfileProperty    channelProfileProperty;
        RetailCloudPOSUrl ret;

        select channelProfileProperty
            join channelProfile
            join channleTableExt
                where channelProfileProperty.ChannelProfile == channelProfile.RecId &&
                    channleTableExt.ChannelProfile == channelProfile.RecId &&
                    channleTableExt.Channel == channelTableRecId &&
                    channelProfileProperty.Key == RetailServerProfilePropertyKey::CloudPOSUrl;

        if (channelProfileProperty)
        {
            ret = channelProfileProperty.Value;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailServerUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Retail Server URL for retail server channel profile.
    /// </summary>
    /// <param name = "channelTableRecId">Retail channel RecId.</param>
    /// <returns>The Retail Server Url of the channel.</returns>
    public static RetailServerServiceBaseURL getRetailServerUrl(RecId channelTableRecId)
    {
        RetailChannelTableExt           channelTableExt;
        RetailChannelProfile            channelProfile;
        RetailChannelProfileProperty    channelProfileProperty;
        RetailServerServiceBaseURL      ret;

        select channelProfileProperty
            join channelProfile
            join channelTableExt
                where channelProfileProperty.ChannelProfile == channelProfile.RecId &&
                    channelTableExt.ChannelProfile == channelProfile.RecId &&
                    channelTableExt.Channel == channelTableRecId &&
                    channelProfileProperty.Key == RetailServerProfilePropertyKey::InternalUrl;

        if (channelProfileProperty)
        {
            ret = channelProfileProperty.Value;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record using the <c>_channelProfileRecId</c> parameter.
    /// </summary>
    /// <param name="_channelProfileRecId">
    /// The RecId for Retail channel profile.
    /// </param>
    /// <param name="_forUpdate">
    /// true if record is selected for update; otherwise, false.
    /// </param>
    /// <returns>
    /// The record that was found.
    /// </returns>
    public static RetailChannelProfile find(RecId _channelProfileRecId, boolean _forUpdate = false)
    {
        RetailChannelProfile   channelProfile;

        if (_channelProfileRecId)
        {
            channelProfile.selectForUpdate(_forUpdate);

            select firstOnly channelProfile
                where channelProfile.RecId == _channelProfileRecId;
        }

        return channelProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set default values for the record.
    /// </summary>
    public void initValue()
    {
        super();
        this.ChannelProfileType = RetailChannelProfileType::RetailServer;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET4160350</DeveloperDocumentation>
	<Label>@RET4160349</Label>
	<TitleField1>Name</TitleField1>
	<TitleField2>ChannelProfileType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>ChannelManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChannelProfileType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@RET607</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChannelProfileType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ChannelProfileName</Name>
			<Label>@RET4160343</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ChannelProfileType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>RetailChannelProfileType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailChannelProfileName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsSystemRecord</Name>
			<ExtendedDataType>RetailChannelProfileIsSystemRecord</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>