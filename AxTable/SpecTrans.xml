<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SpecTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SpecTrans extends common
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>custTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>CustTrans</c> record that associated with this record.
    /// </summary>
    /// <returns>
    /// The <c>CustTrans</c> record that is associated with this record.
    /// </returns>
    public CustTrans custTrans()
    {
        CustTrans custTrans;
        CustTransOpen custTransOpen;
        CustSettlement custSettlement;

        if (SpecTrans::isCompanyValid(this.RefCompany))
        {
            changecompany (this.RefCompany)
            {
                switch (this.RefTableId)
                {
                    case tableNum(CustTransOpen):
                        select firstonly RefRecId from custTransOpen
                            where custTransOpen.TableId == this.RefTableId
                               && custTransOpen.RecId == this.RefRecId
                        join custTrans
                            where custTrans.RecId == custTransOpen.RefRecId;

                        break;

                    case tableNum(CustSettlement):
                        select firstonly TransRecId from custSettlement
                            where custSettlement.TableId == this.RefTableId
                                && custSettlement.RecId == this.RefRecId
                        join custTrans
                            where custTrans.RecId == custSettlement.TransRecId;

                        break;
                }
            }
        }
        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTransOpen</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>CustTransOpen</c> record associated with this record.
    /// </summary>
    /// <returns>
    ///    The <c>CustTransOpen</c> record associated with this record.
    /// </returns>
    CustTransOpen custTransOpen()
    {
        CustTransOpen custTransOpen;

        if (SpecTrans::isCompanyValid(this.RefCompany))
        {
            changecompany(this.RefCompany)
            {
                select firstonly custTransOpen
                    where custTransOpen.TableId == this.RefTableId
                       && custTransOpen.RecId   == this.RefRecId;
            }
        }
        return custTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete(boolean skipLoop = false)
    {
        SpecTrans     specTrans;
        VendTransOpen vendTransOpen;
        //<RETAIL>
        CustInterestWriteOffUnPostedJournal custInterestWriteOffUnPostedJournal;
        CustTransMarkedOpenLine             custTransMarkedOpenLine;
        TaxWithholdTrans                    taxWithholdTrans;
        //</RETAIL>


        //<RETAIL>
        ttsbegin;
        //</RETAIL>

        super();

        //<RETAIL>
        if (this.SpecCompany && CompanyInfo::findDataArea(this.SpecCompany) && this.SpecTableId == tableNum(ledgerJournalTrans))
        {
            changecompany(this.SpecCompany)
            {
                delete_from custInterestWriteOffUnPostedJournal
                    where custInterestWriteOffUnPostedJournal.LedgerJournalTrans == this.SpecRecId;
            }
        }

        if (this.RefCompany && CompanyInfo::findDataArea(this.RefCompany))
        {
            changecompany(this.RefCompany)
            {
                delete_from taxWithholdTrans
                    where taxWithholdTrans.SpecTransId == this.RecId;

                delete_from custTransMarkedOpenLine
                    where custTransMarkedOpenLine.SpecTrans == this.RecId;
            }
        }
        ttscommit;
        //</RETAIL>
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPossibleCashDiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the amount of the cash discount for this record based on the given date and number of grace
    ///    days.
    /// </summary>
    /// <param name="_discDate">
    ///    The date used to determine the amount of the cash discount.
    /// </param>
    /// <param name="_discGraceDays">
    ///    The number of grace days used to determine the amount of the cash discount; optional.
    /// </param>
    /// <returns>
    ///    The amount of the cash discount.
    /// </returns>
    public CashDiscAmount getPossibleCashDiscAmount(TransDate _discDate, DiscGraceDays _discGraceDays = 0)
    {
        CashDiscAmount possibleCashDiscAmount;

        switch (this.RefTableId)
        {
            case tableNum(CustTransOpen):
                // Get the CustTransOpen record for this SpecTrans
                CustTransOpen custTransOpen = this.custTransOpen();
                CustTransCashDisc custTransCashDisc;

                if (SpecTrans::isCompanyValid(custTransOpen.company()))
                {
                    changecompany(custTransOpen.company())
                    {
                        custTransCashDisc = CustTransCashDisc::findByUseCashDisc(custTransOpen.TableId, custTransOpen.RecId, custTransOpen.UseCashDisc, _discDate, _discGraceDays);
                    }
                }

                possibleCashDiscAmount = custTransCashDisc.CashDiscAmount;

                break;

            case tableNum(VendTransOpen):
                // Get the VendTransOpen record for this SpecTrans
                VendTransOpen vendTransOpen = this.vendTransOpen();
                VendTransCashDisc vendTransCashDisc;

                if (SpecTrans::isCompanyValid(vendTransOpen.company()))
                {
                    changecompany(vendTransOpen.company())
                    {
                        vendTransCashDisc = VendTransCashDisc::findByUseCashDisc(vendTransOpen.TableId, vendTransOpen.RecId, vendTransOpen.UseCashDisc, _discDate, _discGraceDays);
                    }
                }

                possibleCashDiscAmount = vendTransCashDisc.CashDiscAmount;

                break;
        }

        return possibleCashDiscAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchSignBalance01</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the sign of the <c>Balance01</c> field of a <c>SpecTrans</c> record to match the given
    ///    amount.
    /// </summary>
    /// <param name="_remainAmountCashDisc">
    ///    The amount to which to match the sign.
    /// </param>
    public void switchSignBalance01(AmountCur _remainAmountCashDisc)
    {
        ;
        if (_remainAmountCashDisc < 0)
        {
            if ( this.Balance01 > 0)
            {
                this.Balance01 = -this.Balance01;
            }
        }
        else
        {
            if (this.Balance01 < 0)
            {
                this.Balance01 = -this.Balance01;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies that the specified field is valid.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    ///    The field ID of the field to validate.
    /// </param>
    /// <returns>
    ///    true if the field is valid; otherwise, false.
    /// </returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean isValid;
        ;

        isValid = super(_fieldIdToCheck);

        if (isValid)
        {
            switch (_fieldIdToCheck)
            {
                case (fieldNum(SpecTrans, CrossRate)) :
                    if (this.SpecTableId != tableNum(LedgerJournalTrans) &&
                        ((this.Payment != 0) ||
                         !SpecTrans::existMarkedPayment(this.company(), this.SpecTableId, this.SpecRecId)))
                    {
                        // should only be able to set cross rate if the SpecTrans record is a LedgerJournalTrans
                        // record && the current record is marked as the primary payment or the
                        // SpecTrans record was marked as the primary payment of another settlement
                        isValid = checkFailed("@SYS67735");
                    }
                    break;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>VendTrans</c> record that is associated with this record.
    /// </summary>
    /// <returns>
    /// The <c>VendTrans</c> record that is associated with this record.
    /// </returns>
    public VendTrans vendTrans()
    {
        VendTrans vendTrans;
        VendTransOpen vendTransOpen;
        VendSettlement vendSettlement;

        if (SpecTrans::isCompanyValid(this.RefCompany))
        {
            changecompany (this.RefCompany)
            {
                switch (this.RefTableId)
                {
                    case tableNum(VendTransOpen):
                        select firstonly RefRecId from vendTransOpen
                            where vendTransOpen.TableId == this.RefTableId
                               && vendTransOpen.RecId == this.RefRecId
                        join vendTrans
                            where vendTrans.RecId == vendTransOpen.RefRecId;

                        break;

                    case tableNum(VendSettlement):
                        select firstonly TransRecId from vendSettlement
                            where vendSettlement.TableId == this.RefTableId
                                && vendSettlement.RecId == this.RefRecId
                        join vendTrans
                            where vendTrans.RecId == vendSettlement.TransRecId;

                        break;
                }
            }
        }

        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTransOpen</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>VendTransOpen</c> record associated with this record.
    /// </summary>
    /// <returns>
    ///    The <c>VendTransOpen</c> record associated with this record.
    /// </returns>
    VendTransOpen vendTransOpen()
    {
        VendTransOpen vendTransOpen;

        if (SpecTrans::isCompanyValid(this.RefCompany))
        {
            changecompany(this.RefCompany)
            {
                select firstonly vendTransOpen
                    where vendTransOpen.TableId == this.RefTableId
                       && vendTransOpen.RecId == this.RefRecId;
            }
        }

        return vendTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>SpecTrans</c> table exists and displays an error if it
    /// does not exist.
    /// </summary>
    /// <param name="_specCompany">
    /// The spec company of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_specTableId">
    /// The spec table ID of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_specRecId">
    /// The spec record ID of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_refCompany">
    /// The reference company of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_refTableId">
    /// The reference table ID of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_refRecId">
    /// The reference record ID of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(
        CompanyId _specCompany,
        TableId _specTableId,
        RefRecId _specRecId,
        CompanyId _refCompany,
        TableId _refTableId,
        RefRecId _refRecId)
    {
        boolean ret = true;
        ;

        if (!SpecTrans::exist(_specCompany, _specTableId, _specRecId, _refCompany, _refTableId, _refRecId))
        {
            ret = checkFailed(strFmt(SpecTrans::txtNotExist(), _specCompany, _specTableId, _specRecId, _refCompany, _refTableId, _refRecId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistRefForMultipleSpec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the reference record has more than one <c>SpecTrans</c> record.
    /// </summary>
    /// <param name="_refCompany">
    /// The reference company of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_refTableId">
    /// The reference table ID of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_refRecId">
    /// The reference record ID of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <returns>
    /// true if the reference record has more than one <c>SpecTrans</c> record; otherwise, false.
    /// </returns>
    public static boolean checkExistRefForMultipleSpec(
        CompanyId _refCompany,
        TableId _refTableId,
        RefRecId _refRecId)
    {
        SpecTrans specTrans;

        select count(RecId) from specTrans
            where specTrans.RefCompany == _refCompany
                && specTrans.RefTableId == _refTableId
                && specTrans.RefRecId == _refRecId;

        return specTrans.RecId > 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryRunToRefTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>QueryRun</c> instance that contains a query for the <c>SpecTrans</c> table joined to
    ///    the table ID that is specified by the <paramref name="_refTableId" /> parameter.
    /// </summary>
    /// <param name="_specCompany">
    ///    The company for which to create a range on the <c>SpecCompany</c> field of the <c>SpecTrans</c>
    ///    table.
    /// </param>
    /// <param name="_specTableId">
    ///    The table ID for which to create a range on the <c>SpecTableId</c> field of the <c>SpecTrans</c>
    ///    table.
    /// </param>
    /// <param name="_specRecId">
    ///    The record ID for which to create a range on the <c>SpecRecId</c> field of the <c>SpecTrans</c>
    ///    table.
    /// </param>
    /// <param name="_refTableId">
    ///    The table ID to join from the <c>SpecTrans</c> table.
    /// </param>
    /// <returns>
    ///    A <c>QueryRun</c> instance with the query built from the <c>SpecTrans</c> table joined to the table
    ///    ID that is specified by the <paramref name="_refTableId" /> parameter.
    /// </returns>
    /// <remarks>
    ///    Replaces the <c>queryRunRefTable</c> method on the <c>Specification</c> class.
    /// </remarks>
    public static QueryRun createQueryRunToRefTable(CompanyId _specCompany, TableId _specTableId, RefRecId _specRecId, TableId _refTableId)
    {
        QueryRun queryRun;
        Query query;
        QueryBuildDataSource qbdsSpecTrans;
        QueryBuildDataSource qbdsRefTable;
        FieldId idRefRecId;
        ;

        query = new Query();

        qbdsSpecTrans = query.addDataSource(tableNum(SpecTrans));

        qbdsSpecTrans.addRange(fieldNum(SpecTrans, SpecCompany)).value(queryValue(_specCompany));
        qbdsSpecTrans.addRange(fieldNum(SpecTrans, SpecTableId)).value(queryValue(_specTableId));
        qbdsSpecTrans.addRange(fieldNum(SpecTrans, SpecRecId)).value(queryValue(_specRecId));

        qbdsRefTable = qbdsSpecTrans.addDataSource(_refTableId);

        // Get the fieldnum for the RecId for the RefTable
        idRefRecId = new DictField(_refTableId, fieldName2id(_refTableId, identifierStr(RecId))).id();
        qbdsRefTable.addLink(fieldNum(SpecTrans, RefRecId), idRefRecId);
        qbdsRefTable.joinMode(JoinMode::InnerJoin);

        queryRun = new QueryRun(query);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSetForSingleOriginator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs set based deletes of <c>SpecTrans</c> and related tables for a given originator of settlement.
    /// </summary>
    /// <param name = "_specDataAreaId"><c>DataAreaId</c> of the settlement originator.</param>
    /// <param name = "_specTableId"><c>TableId</c> of the settlement originator.</param>
    /// <param name = "_specRecId"><c>RecId</c> of the settlement originator.</param>
    public static void deleteSetForSingleOriginator(DataAreaId _specDataAreaId, RefTableId _specTableId, RefRecId _specRecId)
    {
        TmpDataAreaRecIdFilter specFilter;
        specFilter.RefDataAreaId = _specDataAreaId;
        specFilter.RefTableId = _specTableId;
        specFilter.RefRecId = _specRecId;
        specFilter.insert();

        SpecTransSetBasedDeleteProcessorParams params = SpecTransSetBasedDeleteProcessorParams::newParams(SpecTransSetBasedDeleteScenario::DeleteBySpec);
        params.setSpecFilter(specFilter);

        SpecTransSetBasedDeleteProcessor::construct().delete(params);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform set based delete of <c>SpecTrans</c> records that share the same <c>SpecCompany</c>,
    /// <c>SpecTableId</c>, and <c>SpecRecId</c> values.
    /// </summary>
    /// <param name="_filter">
    /// The <c>TmpDataAreaRecIdFilter</c> table contains records with field values for <c>SpecCompany</c>,
    /// <c>SpecTableId</c>, and <c>SpecRecId</c>.
    /// </param>
    public static void deleteSet(TmpDataAreaRecIdFilter _filter)
    {
        SpecTransSetBasedDeleteProcessorParams params = SpecTransSetBasedDeleteProcessorParams::newParams(SpecTransSetBasedDeleteScenario::DeleteBySpec);
        params.setSpecFilter(_filter);

        SpecTransSetBasedDeleteProcessor::construct().delete(params);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSetInternal_FindCompanies</Name>
				<Source><![CDATA[
    private static void deleteSetInternal_FindCompanies(
        Set _refCompanySet,
        Set _specCompanySet,
        TmpDataAreaRecIdFilter _filter,
        CompanyId _singleOriginatorCompany = '',
        RefTableId _singleOriginatorTableId = 0,
        RefRecId _singleOriginatorRecId = 0)
    {
        SpecTrans specTransByCompany;

        if (_singleOriginatorRecId)
        {
            while select RefCompany from specTransByCompany
                group by RefCompany, SpecCompany
                where specTransByCompany.SpecCompany == _singleOriginatorCompany
                    && specTransByCompany.SpecTableId == _singleOriginatorTableId
                    && specTransByCompany.SpecRecId   == _singleOriginatorRecId
            {
                _refCompanySet.add(specTransByCompany.RefCompany);
                _specCompanySet.add(specTransByCompany.SpecCompany);
            }
        }
        else
        {
            while select RefCompany from specTransByCompany
                group by RefCompany, SpecCompany
                exists join _filter
                    where specTransByCompany.SpecCompany == _filter.RefDataAreaId
                        && specTransByCompany.SpecTableId == _filter.RefTableId
                        && specTransByCompany.SpecRecId   == _filter.RefRecId
            {
                _refCompanySet.add(specTransByCompany.RefCompany);
                _specCompanySet.add(specTransByCompany.SpecCompany);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSetInternal_CustTransMarkedOpenLine</Name>
				<Source><![CDATA[
    private static void deleteSetInternal_CustTransMarkedOpenLine(
        TmpDataAreaRecIdFilter _filter,
        CompanyId _singleOriginatorCompany = '',
        RefTableId _singleOriginatorTableId = 0,
        RefRecId _singleOriginatorRecId = 0)
    {
        SpecTrans specTransToDelete;
        CustTransMarkedOpenLine custTransMarkedOpenLine;

        custTransMarkedOpenLine.skipDeleteActions(true);
        custTransMarkedOpenLine.skipDeleteMethod(true);

        if (_singleOriginatorRecId)
        {
            delete_from custTransMarkedOpenLine
                exists join specTransToDelete
                    where specTransToDelete.RecId == custTransMarkedOpenLine.SpecTrans
                        && specTransToDelete.SpecCompany == _singleOriginatorCompany
                        && specTransToDelete.SpecTableId == _singleOriginatorTableId
                        && specTransToDelete.SpecRecId == _singleOriginatorRecId;
        }
        else
        {
            delete_from custTransMarkedOpenLine
                exists join specTransToDelete
                    where specTransToDelete.RecId == custTransMarkedOpenLine.SpecTrans
                exists join _filter
                    where _filter.RefDataAreaId == specTransToDelete.SpecCompany
                        && _filter.RefTableId == specTransToDelete.SpecTableId
                        && _filter.RefRecId == specTransToDelete.SpecRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSetInternal_TaxWithholdTransExtensionTH</Name>
				<Source><![CDATA[
    private static void deleteSetInternal_TaxWithholdTransExtensionTH(
        TmpDataAreaRecIdFilter _filter,
        CompanyId _singleOriginatorCompany = '',
        RefTableId _singleOriginatorTableId = 0,
        RefRecId _singleOriginatorRecId = 0)
    {
        SpecTrans specTransToDelete;
        TaxWithholdTrans taxWithholdTrans;
        TaxWithholdTransExtensionTH taxWithholdTransExtensionTH;

        if (_singleOriginatorRecId)
        {
            delete_from taxWithholdTransExtensionTH
                exists join taxWithholdTrans
                    where taxWithholdTrans.RecId == taxWithholdTransExtensionTH.TaxWithholdTrans
                        && taxWithholdTrans.Posted == NoYes::No
                exists join specTransToDelete
                    where specTransToDelete.RecId == taxWithholdTrans.SpecTransId
                        && specTransToDelete.SpecCompany == _singleOriginatorCompany
                        && specTransToDelete.SpecTableId == _singleOriginatorTableId
                        && specTransToDelete.SpecRecId == _singleOriginatorRecId;
        }
        else
        {
            delete_from taxWithholdTransExtensionTH
                exists join taxWithholdTrans
                    where taxWithholdTrans.RecId == taxWithholdTransExtensionTH.TaxWithholdTrans
                        && taxWithholdTrans.Posted == NoYes::No
                exists join specTransToDelete
                    where specTransToDelete.RecId == taxWithholdTrans.SpecTransId
                exists join _filter
                    where _filter.RefDataAreaId == specTransToDelete.SpecCompany
                        && _filter.RefTableId == specTransToDelete.SpecTableId
                        && _filter.RefRecId == specTransToDelete.SpecRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSetInternal_TaxWithholdTrans</Name>
				<Source><![CDATA[
    private static void deleteSetInternal_TaxWithholdTrans(
        TmpDataAreaRecIdFilter _filter,
        CompanyId _singleOriginatorCompany = '',
        RefTableId _singleOriginatorTableId = 0,
        RefRecId _singleOriginatorRecId = 0)
    {
        SpecTrans specTransToDelete;
        TaxWithholdTrans taxWithholdTrans;

        taxWithholdTrans.skipDeleteActions(true);
        taxWithholdTrans.skipDeleteMethod(true);

        if (_singleOriginatorRecId)
        {
            delete_from taxWithholdTrans
                where taxWithholdTrans.Posted == NoYes::No
                exists join specTransToDelete
                    where specTransToDelete.RecId == taxWithholdTrans.SpecTransId
                        && specTransToDelete.SpecCompany == _singleOriginatorCompany
                        && specTransToDelete.SpecTableId == _singleOriginatorTableId
                        && specTransToDelete.SpecRecId == _singleOriginatorRecId;
        }
        else
        {
            delete_from taxWithholdTrans
                where taxWithholdTrans.Posted == NoYes::No
                exists join specTransToDelete
                    where specTransToDelete.RecId == taxWithholdTrans.SpecTransId
                exists join _filter
                    where _filter.RefDataAreaId == specTransToDelete.SpecCompany
                        && _filter.RefTableId  == specTransToDelete.SpecTableId
                        && _filter.RefRecId == specTransToDelete.SpecRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSetInternal_CustInterestWriteOffUnPostedJournal</Name>
				<Source><![CDATA[
    private static void deleteSetInternal_CustInterestWriteOffUnPostedJournal(
        TmpDataAreaRecIdFilter _filter,
        CompanyId _singleOriginatorCompany = '',
        RefTableId _singleOriginatorTableId = 0,
        RefRecId _singleOriginatorRecId = 0)
    {
        SpecTrans specTransToDelete;
        CustInterestWriteOffUnPostedJournal custInterestWriteOffUnPostedJournal;

        custInterestWriteOffUnPostedJournal.skipDeleteActions(true);
        custInterestWriteOffUnPostedJournal.skipDeleteMethod(true);

        if (_singleOriginatorRecId != 0)
        {
            if (_singleOriginatorTableId == tableNum(ledgerJournalTrans))
            {
                delete_from custInterestWriteOffUnPostedJournal
                    where custInterestWriteOffUnPostedJournal.DataAreaId == _singleOriginatorCompany
                        && custInterestWriteOffUnPostedJournal.LedgerJournalTrans == _singleOriginatorRecId             
                    exists join specTransToDelete
                        where specTransToDelete.SpecCompany == custInterestWriteOffUnPostedJournal.DataAreaId
                            && specTransToDelete.SpecTableId == tableNum(ledgerJournalTrans)
                            && specTransToDelete.SpecRecId   == custInterestWriteOffUnPostedJournal.LedgerJournalTrans;
            }
        }
        else
        {
            delete_from custInterestWriteOffUnPostedJournal
                exists join specTransToDelete
                    where specTransToDelete.SpecCompany == custInterestWriteOffUnPostedJournal.DataAreaId
                        && specTransToDelete.SpecTableId == tableNum(ledgerJournalTrans)
                        && specTransToDelete.SpecRecId   == custInterestWriteOffUnPostedJournal.LedgerJournalTrans             
                exists join _filter
                    where _filter.RefDataAreaId == custInterestWriteOffUnPostedJournal.DataAreaId
                        && _filter.RefTableId == tableNum(ledgerJournalTrans)
                        && _filter.RefRecId == custInterestWriteOffUnPostedJournal.LedgerJournalTrans;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSetInternal_SpecTrans</Name>
				<Source><![CDATA[
    private static void deleteSetInternal_SpecTrans(
        TmpDataAreaRecIdFilter _filter,
        CompanyId _singleOriginatorCompany = '',
        RefTableId _singleOriginatorTableId = 0,
        RefRecId _singleOriginatorRecId = 0)
    {
        SpecTrans specTransToDelete;

        specTransToDelete.skipDeleteActions(true);

        specTransToDelete.skipDatabaseLog(true);

        if (_singleOriginatorRecId)
        {
            delete_from specTransToDelete
                where specTransToDelete.SpecCompany == _singleOriginatorCompany
                    && specTransToDelete.SpecTableId == _singleOriginatorTableId
                    && specTransToDelete.SpecRecId == _singleOriginatorRecId;
        }
        else
        {
            delete_from specTransToDelete
                exists join _filter
                    where _filter.RefDataAreaId == specTransToDelete.SpecCompany
                        && _filter.RefTableId == specTransToDelete.SpecTableId
                        && _filter.RefRecId == specTransToDelete.SpecRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>SpecTrans</c> table exists.
    /// </summary>
    /// <param name="_specCompany">
    /// The spec company of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_specTableId">
    /// The spec table ID of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_specRecId">
    /// The spec record ID of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_refCompany">
    /// The reference company of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_refTableId">
    /// The reference table ID of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_refRecId">
    /// The reference record ID of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(
        CompanyId _specCompany,
        TableId _specTableId,
        RefRecId _specRecId,
        CompanyId _refCompany,
        TableId _refTableId,
        RefRecId _refRecId)
    {
        boolean found;
        ;

        found = (select firstonly crossCompany
                     RecId
                from
                     specTrans
                 where
                    specTrans.SpecCompany == _specCompany &&
                    specTrans.SpecTableId == _specTableId &&
                    specTrans.SpecRecId == _specRecId &&
                    specTrans.RefCompany == _refCompany &&
                    specTrans.RefTableId == _refTableId &&
                    specTrans.RefRecId == _refRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>SpecTrans</c> table exists.
    /// </summary>
    /// <param name="_refCompany">
    /// The reference company of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_refTableId">
    /// The reference table ID of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_refRecId">
    /// The reference record ID of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existByRef(
        CompanyId _refCompany,
        TableId _refTableId,
        RefRecId _refRecId)
    {
        boolean found;
        ;

        found = (select firstonly crossCompany
                     RecId
                from
                     specTrans
                 where
                    specTrans.RefCompany == _refCompany &&
                    specTrans.RefTableId == _refTableId &&
                    specTrans.RefRecId == _refRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existMarkedCurrencyDeal_RU</Name>
				<Source><![CDATA[
    public static boolean existMarkedCurrencyDeal_RU(CompanyId _specCompany, TableId _specTableId, RefRecId _specRecId)
    {
        SpecTrans       specTrans;
        VendTransOpen   vendTransOpen;
        VendTrans       vendTrans;
        VendTrans_W     vendTrans_W;

        select firstonly crossCompany RecId from specTrans
            where specTrans.SpecCompany == _specCompany &&
                  specTrans.SpecTableId == _specTableId &&
                  specTrans.SpecRecId   == _specRecId
        join TableId from vendTransOpen
            where vendTransOpen.DataAreaId == specTrans.RefCompany &&
                  vendTransOpen.TableId    == specTrans.RefTableId &&
                  vendTransOpen.RecId      == specTrans.RefRecId
        join TableId from vendTrans
            where vendTrans.RecId      == vendTransOpen.RefRecId   &&
                  vendTrans.AccountNum == vendTransOpen.AccountNum
        exists join vendTrans_W
            where vendTrans_W.VendTrans == vendTrans.RecId &&
                  vendTrans_W.BankCurrencyTransferId_RU;

        return specTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existMarkedFullSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a record in the <c>SpecTrans</c> table exists with the <c>FullSettlement</c>
    ///    field set to <c>NoYes::Yes</c>.
    /// </summary>
    /// <param name="_specCompany">
    ///    The spec company of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_specTableId">
    ///    The spec table ID of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_specRecId">
    ///    The spec record ID of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <returns>
    ///    true if a record exists; otherwise, false.
    /// </returns>
    public static boolean existMarkedFullSettlement(CompanyId _specCompany, TableId _specTableId, RefRecId _specRecId)
    {
        boolean found;
        SpecTrans specTrans;
        ;

        select firstonly crossCompany RecId from specTrans where
            specTrans.SpecCompany == _specCompany &&
            specTrans.SpecTableId == _specTableId &&
            specTrans.SpecRecId == _specRecId &&
            specTrans.FullSettlement == NoYes::Yes;

        if (specTrans.RecId != 0)
        {
            found = true;
        }
        else
        {
            found = false;
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existMarkedPayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a record in the <c>SpecTrans</c> table exists with the <c>Payment</c> field set
    ///    to Yes.
    /// </summary>
    /// <param name="_specCompany">
    ///    The spec company of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_specTableId">
    ///    The spec table ID of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_specRecId">
    ///    The spec record ID of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <returns>
    ///    true if a record in the <c>SpecTrans</c> table exists with the <c>Payment</c> field set to Yes;
    ///    otherwise, false.
    /// </returns>
    public static boolean existMarkedPayment(CompanyId _specCompany, TableId _specTableId, RefRecId _specRecId)
    {
        boolean found;
        SpecTrans specTrans;
        ;

        select firstonly crossCompany RecId from specTrans where
            specTrans.SpecCompany == _specCompany &&
            specTrans.SpecTableId == _specTableId &&
            specTrans.SpecRecId == _specRecId &&
            specTrans.Payment == NoYes::Yes;

        if (specTrans.RecId != 0)
        {
            found = true;
        }
        else
        {
            found = false;
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existOtherRefRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether additional <c>SpecTrans</c> records exist that contain the same Spec references.
    /// </summary>
    /// <param name="_specCompany">
    ///    The spec company of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_specTableId">
    ///    The spec table ID of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_specRecId">
    ///    The spec record ID of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_refCompany">
    ///    The reference company of the <c>SpecTrans</c> record.
    /// </param>
    /// <param name="_refTableId">
    ///    The reference table ID of the <c>SpecTrans</c> record.
    /// </param>
    /// <param name="_refRecId">
    ///    The reference record ID of the <c>SpecTrans</c> record.
    /// </param>
    /// <returns>
    ///    true if any records exist for the Spec references other than the passed in parameters; otherwise,
    ///    false.
    /// </returns>
    /// <remarks>
    ///    This method is used during the autosettle process to determine whether a transaction should be
    ///    autosettled.
    /// </remarks>
    public static boolean existOtherRefRecords(
        CompanyId   _specCompany,
        TableId     _specTableId,
        RecId       _specRecId,
        CompanyId   _refCompany,
        TableId     _refTableId,
        RefRecId    _refRecId)
    {
        boolean found;
        ;

        found = (select firstonly crossCompany RecId from specTrans
                    where specTrans.SpecCompany == _specCompany
                       && specTrans.SpecTableId == _specTableId
                       && specTrans.SpecRecId   == _specRecId
                       && !(specTrans.RefCompany  == _refCompany
                           && specTrans.RefTableId  == _refTableId
                           && specTrans.RefRecId    == _refRecId)).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>SpecTrans</c> table.
    /// </summary>
    /// <param name="_specCompany">
    ///    The spec company of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_specTableId">
    ///    The spec table ID of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_specRecId">
    ///    The spec record ID of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_refCompany">
    ///    The reference company of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_refTableId">
    ///    The reference table ID of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_refRecId">
    ///    The reference record ID of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when the system reads the record; optional.
    /// </param>
    /// <returns>
    ///    A record from the <c>SpecTrans</c> table; otherwise, an empty record.
    /// </returns>
    public static SpecTrans find(
        CompanyId _specCompany,
        TableId _specTableId,
        RefRecId _specRecId,
        CompanyId _refCompany,
        TableId _refTableId,
        RefRecId _refRecId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        SpecTrans specTrans;
        ;

        specTrans.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            specTrans.concurrencyModel(_concurrencyModel);
        }

        if (_specCompany != '' && _specTableId != 0 && _specRecId != 0 && _refCompany != '' && _refTableId != 0 && _refRecId != 0)
        {
            select firstonly crossCompany
                specTrans
                where
                    specTrans.SpecCompany == _specCompany &&
                    specTrans.SpecTableId == _specTableId &&
                    specTrans.SpecRecId == _specRecId &&
                    specTrans.RefCompany == _refCompany &&
                    specTrans.RefTableId == _refTableId &&
                    specTrans.RefRecId == _refRecId;
        }

        return specTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    internal static SpecTrans findByRecId(RefRecId _specTransRecId, boolean _forUpdate = false)
    {
        SpecTrans foundSpecTrans;

        if (_specTransRecId != 0)
        {
            foundSpecTrans.selectForUpdate(_forUpdate);
            select firstonly foundSpecTrans
                where foundSpecTrans.RecId == _specTransRecId;
        }

        return foundSpecTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>SpecTrans</c> table.
    /// </summary>
    /// <param name="_refCompany">
    /// The reference company of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_refTableId">
    /// The reference table ID of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_refRecId">
    /// The reference record ID of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>SpecTrans</c> table; otherwise, an empty record.
    /// </returns>
    public static SpecTrans findByRef(
        CompanyId _refCompany,
        TableId _refTableId,
        RefRecId _refRecId,
        boolean _forUpdate = false)
    {
        SpecTrans foundSpecTrans;
        ;

        if (_refCompany != '' && _refTableId != 0 && _refRecId != 0)
        {
            foundSpecTrans.selectForUpdate(_forUpdate);

            select firstonly crossCompany foundSpecTrans
                where foundSpecTrans.RefCompany == _refCompany &&
                    foundSpecTrans.RefTableId == _refTableId &&
                    foundSpecTrans.RefRecId == _refRecId;
        }

        return foundSpecTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySpec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>SpecTrans</c> table.
    /// </summary>
    /// <param name="_specCompany">
    /// The spec company of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_specTableId">
    /// The spec table ID of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_specRecId">
    /// The spec record ID of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>SpecTrans</c> table; otherwise, an empty record.
    /// </returns>
    public static SpecTrans findBySpec(CompanyId _specCompany,
        TableId _specTableId,
        RefRecId _specRecId,
        boolean _forUpdate = false)
    {
        SpecTrans foundSpecTrans;
        ;

        if (_specCompany != '' && _specTableId != 0 && _specRecId != 0)
        {
            foundSpecTrans.selectForUpdate(_forUpdate);

            select firstonly crossCompany foundSpecTrans
                where foundSpecTrans.SpecCompany == _specCompany &&
                    foundSpecTrans.SpecTableId == _specTableId &&
                    foundSpecTrans.SpecRecId == _specRecId;
        }

        return foundSpecTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMarkedVendPaymentGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds and returns a <c>VendTransOpen</c> record that is associated with a payment group and occurs
    ///    in the <c>SpecTrans</c> table.
    /// </summary>
    /// <param name="_invoiceAccount">
    ///    The invoice account in <c>VendTransOpen</c> to search for.
    /// </param>
    /// <param name="_custVendCompany">
    ///    The ID of the company that will be used for cross company queries.
    /// </param>
    /// <param name="_originator">
    ///    The originator record that identifies which spec to search for.
    /// </param>
    /// <returns>
    ///    A container that holds a <c>VendTransOpen</c> record.
    /// </returns>
    /// <remarks>
    ///    This will search for the first <c>VendTransOpen</c> record that has a marked
    ///    <c>VendPaymentGroup</c> value and is for the spec specified by values in the <paramref
    ///    name="_originator" /> parameter.
    /// </remarks>
    public static container findMarkedVendPaymentGroup(VendInvoiceAccount _invoiceAccount, CompanyId _custVendCompany, Common _originator)
    {
        VendTransOpen   vendTransOpen;
        VendTrans       vendTrans;
        SpecTrans       specTrans;

        select firstonly crosscompany vendTransOpen
            where vendTransOpen.AccountNum == _invoiceAccount &&
                vendTransOpen.DataAreaId == _custVendCompany
        join RecId from vendTrans
            where vendTrans.RecId == vendTransOpen.RefRecId &&
                    vendTrans.VendPaymentGroup != ''
        exists join RecId from specTrans
            where
                specTrans.RefTableId == vendTransOpen.TableId &&
                specTrans.RefRecId == vendTransOpen.RecId &&
                specTrans.RefCompany == vendTransOpen.DataAreaId &&
                specTrans.SpecCompany == _originator.company() &&
                specTrans.SpecTableId == _originator.TableId &&
                specTrans.SpecRecId == _originator.RecId;

        return [vendTransOpen];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNumberOfMarkedVendPaymentGroups</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Counts the number of records in the <c>SpecTrans</c> table associated with the given payment group.
    /// </summary>
    /// <param name="_vendPaymentGroup">
    ///    The group for which the number of occurrences should be counted.
    /// </param>
    /// <param name="_custVendCompany">
    ///    The company ID that will be used for cross company selection.
    /// </param>
    /// <returns>
    ///    The number of records in the <c>SpecTrans</c> table associated with the given payment group.
    /// </returns>
    static int findNumberOfMarkedVendPaymentGroups(VendPaymentGrouping _vendPaymentGroup, CompanyId _custVendCompany)
    {
        VendTransOpen   vendTransOpen;
        VendTrans       vendTrans;
        SpecTrans       specTrans;
        container       refCompany;

        refCompany = [_custVendCompany];

        select crosscompany:refCompany count(RecId) from vendTransOpen
            where vendTransOpen.DataAreaId == _custVendCompany
        exists join RecId from vendTrans
            where vendTrans.RecId == vendTransOpen.RefRecId &&
                    vendTrans.VendPaymentGroup == _vendPaymentGroup
        exists join RecId from specTrans
            where specTrans.RefTableId == tableNum(VendTransOpen) &&
                specTrans.RefRecId == vendTransOpen.RecId &&
                specTrans.RefCompany == vendTransOpen.DataAreaId;

        return int642int(vendTransOpen.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSpecTransCount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a count of the <c>SpecTrans</c> records that share the same <c>SpecCompany</c>,
    ///    <c>SpecTableId</c>, and <c>SpecRecId</c> values.
    /// </summary>
    /// <param name="_specCompany">
    ///    The company of the group of <c>SpecTrans</c> records for which to count records.
    /// </param>
    /// <param name="_specTableId">
    ///    The table ID of the group of <c>SpecTrans</c> records for which to count records.
    /// </param>
    /// <param name="_specRecId">
    ///    The record ID of the group of <c>SpecTrans</c> records for which to count records.
    /// </param>
    /// <returns>
    ///    The count of <c>SpecTrans</c> records.
    /// </returns>
    public static Integer getSpecTransCount(CompanyId _specCompany, TableId _specTableId, RefRecId _specRecId)
    {
        SpecTrans specTrans;
        ;

        select crossCompany count(RecId) from specTrans
            where specTrans.SpecCompany == _specCompany &&
                specTrans.SpecTableId == _specTableId &&
                specTrans.SpecRecId == _specRecId;

        return any2int(specTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptRemoveMarkedTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prompts the user with a dialog box to remove marked transactions and returns the result.
    /// </summary>
    /// <returns>
    ///    true if Yes is clicked in the dialog box; otherwise, false.
    /// </returns>
    public static boolean promptRemoveMarkedTransactions()
    {
        DialogButton response;
        ;

        response = Box::yesNo("@SYS24027", DialogButton::No, "@SYS17528", "@SYS29049");

        if (response == DialogButton::Yes)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the message to use when a specific record in the <c>SpecTrans</c> table does not exist.
    /// </summary>
    /// <returns>
    ///    The message that states a record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102243";
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForJournalNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete <c>SpecTrans</c> rows for a journal number.
    /// </summary>
    /// <param name = "_journalNum">The journal number identifies the <c>LedgerJournalTrans</c> rows and the <c>SpecTrans</c> rows.</param>
    public static void deleteForJournalNum(LedgerJournalId _journalNum)
    {
        LedgerJournalTrans ledgerJournalTrans;
        RefTableId ledgerJournalTransTableId;
        TmpDataAreaRecIdFilter settlementFilter;

        ledgerJournalTransTableId = tableNum(LedgerJournalTrans);

        insert_recordset settlementFilter (RefDataAreaId, RefTableId, RefRecId)
            select DataAreaId, ledgerJournalTransTableId, RecId from ledgerJournalTrans
                group by DataAreaId, RecId
                    where ledgerJournalTrans.JournalNum == _journalNum;

        SpecTrans::deleteSet(settlementFilter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBalanceForTaxWithholding_UK</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the settlement balance adjusted for tax withholding.
    /// </summary>
    /// <returns>
    /// The settlement amount that has been adjusted for tax withholding.
    /// </returns>
    public AmountCur getBalanceForTaxWithholding_UK()
    {
        return SpecTransManager::getSpecTransBalanceForTaxWithholding(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkedPaymentCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the payment currency.
    /// </summary>
    /// <param name="_specCompany">
    ///    The spec company of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_specTableId">
    ///    The spec table ID of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <param name="_specRecId">
    ///    The spec record ID of the <c>SpecTrans</c> record to find.
    /// </param>
    /// <returns>
    /// The currency that has been used for payment.
    /// </returns>
    public static KeyValue getMarkedPaymentCurrency(CompanyId _specCompany, TableId _specTableId, RefRecId _specRecId)
    {
        SpecTrans specTransPayment;

        select firstonly Code from specTransPayment where
            specTransPayment.SpecCompany == _specCompany &&
            specTransPayment.SpecTableId == _specTableId &&
            specTransPayment.SpecRecId == _specRecId &&
            specTransPayment.Payment == NoYes::Yes;

        return specTransPayment.Code;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentRequestTable</Name>
				<Source><![CDATA[
    public CFMPaymentRequestTable paymentRequestTable()
    {
        CFMPaymentRequestTable paymentRequest;

        if (this.RefTableId == tableNum(CFMPaymentRequestTable))
        {
            paymentRequest = CFMPaymentRequestTable::findRecID(this.RefRecId);
        }

        return paymentRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSpecSourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the spec source table identifier.
    /// </summary>
    /// <returns>The source table record identifier.</returns>
    internal RecId getSpecSourceRecId()
    {
        RecId recId;

        if (this.SpecTableId == tableNum(SpecContext))
        {
            SpecContext context = SpecContext::find(this.SpecRecId, this.SpecCompany);
            recId = context.SourceRecId;
        }
        else
        {
            recId = this.SpecRecId;
        }

        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSpecSourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the spec source table record identifier.
    /// </summary>
    /// <param name = "_specCompany">The company of the group of <c>SpecTrans</c> records.</param>
    /// <param name = "_specTableId">The table ID of the group of <c>SpecTrans</c> records.</param>
    /// <param name = "_specRecId">The record ID of the group of <c>SpecTrans</c> records.</param>
    /// <returns>The source table record identifier.</returns>
    internal static RecId findSpecSourceRecId(CompanyId _specCompany, TableId _specTableId, RefRecId _specRecId)
    {
        RecId recId;

        if (_specTableId == tablenum(SpecContext))
        {
            SpecTrans specTrans;

            select firstonly SpecCompany, SpecTableId, SpecRecId
                from specTrans
                where specTrans.SpecCompany == _specCompany
                    && specTrans.SpecTableId == _specTableId
                    && specTrans.SpecRecId == _specRecId;

            recId = specTrans.getSpecSourceRecId();
        }
        else
        {
            recId = _specRecId;
        }

        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSpecSourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the spec source table identifier.
    /// </summary>
    /// <returns>The source table identifier.</returns>
    internal TableId getSpecSourceTableId()
    {
        TableId tableId;

        if (this.SpecTableId == tableNum(SpecContext))
        {
            SpecContext context = SpecContext::find(this.SpecRecId, this.SpecCompany);
            tableId = context.SourceTableId;
        }
        else
        {
            tableId = this.SpecTableId;
        }

        return tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCompanyValid</Name>
				<Source><![CDATA[
    internal static boolean isCompanyValid(DataAreaId _company)
    {
        return _company != '' && xDataArea::exist(_company);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSpecSourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the spec source table identifier.
    /// </summary>
    /// <param name = "_specCompany">The company of the group of <c>SpecTrans</c> records.</param>
    /// <param name = "_specTableId">The table ID of the group of <c>SpecTrans</c> records.</param>
    /// <param name = "_specRecId">The record ID of the group of <c>SpecTrans</c> records.</param>
    /// <returns>The source table identifier.</returns>
    internal static TableId findSpecSourceTableId(CompanyId _specCompany, TableId _specTableId, RefRecId _specRecId)
    {
        TableId tableId;

        if (_specTableId == tablenum(SpecContext))
        {
            SpecTrans specTrans;

            select firstonly SpecCompany, SpecTableId, SpecRecId
                from specTrans
                where specTrans.SpecCompany == _specCompany
                    && specTrans.SpecTableId == _specTableId
                    && specTrans.SpecRecId == _specRecId;

                tableId = specTrans.getSpecSourceTableId();
        }
        else
        {
            tableId = _specTableId;
        }

        return tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the transaction is settlement.
    /// </summary>
    /// <param name = "_sourceTableId">The source table Id.</param>
    /// <param name = "_sourceRecId">The source recId.</param>
    /// <returns>
    /// True if the transaction is settlement, otherwise false
    /// </returns>
    internal static boolean isSettlement(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        SpecTrans   specTrans;
        RefTableId  specTableId ;
        RefRecId    specRecId;

        // Settlement sales order/purchase order or free text invoice
        if (_sourceTableId == tableNum(TaxEngineLedgerJournalTransHeader))
        {
            LedgerJournalTrans                  ledgerJournalTrans;
            TaxEngineLedgerJournalTransHeader   taxEngineLedgerJournalTransHeader;

            select firstonly ledgerJournalTrans
                join RecId from taxEngineLedgerJournalTransHeader
                    where taxEngineLedgerJournalTransHeader.RecId == _sourceRecId
                        && taxEngineLedgerJournalTransHeader.TableId == _sourceTableId
                        && ledgerJournalTrans.Voucher == taxEngineLedgerJournalTransHeader.Voucher
                        && ledgerJournalTrans.JournalNum == taxEngineLedgerJournalTransHeader.JournalNum;

            if (ledgerJournalTrans)
            {
                specTableId  = ledgerJournalTrans.TableId;
                specRecId = ledgerJournalTrans.RecId;
            }
        }
        else if (_sourceTableId == tableNum(CustInvoiceJour))
        {
            CustInvoiceJour  custInvoiceJour;

            custInvoiceJour = CustInvoiceJour::findRecId(_sourceRecId);
            // Sales order invoice open transaction for customer payment
            if (custInvoiceJour.SalesId)
            {
                SalesTable salesTable = custInvoiceJour.salesTable();
     
                specTableId = salesTable.TableId;
                specRecId = salesTable.RecId;
            }
            // Free text invoce open transaction for customer payment
            else
            {
                CustInvoiceTable custInvoiceTable = custInvoiceJour.custInvoiceTable();
     
                specTableId = custInvoiceTable.TableId;
                specRecId = custInvoiceTable.RecId;
            }
        }
        // Purchase order invoice open transaction for vendor payment
        else if (_sourceTableId == tableNum(VendInvoiceJour))
        {
            VendInvoiceJour     vendInvoiceJour;
            PurchTable          purchTable;

            vendInvoiceJour = VendInvoiceJour::findRecId(_sourceRecId);
            purchTable = PurchTable::find(VendInvoiceJour.PurchId);

            if (purchTable)
            {
                specTableId  = purchTable.TableId;
                specRecId = purchTable.RecId;
            }
        }
        else
        {
            specTableId = _sourceTableId;
            specRecId = _sourceRecId;
        }

        specTrans = SpecTrans::findBySpec(curext(), specTableId , specRecId);

        return specTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSpecRecId</Name>
				<Source><![CDATA[
    internal static void updateSpecRecId(
        CompanyId _specCompany,
        TableId _specTableId,
        RefRecId _specRecId,
        RefRecId _newSpecRecId)
    {
        SpecTrans specTrans = SpecTrans::findBySpec(_specCompany, _specTableId, _specRecId, true);

        ttsbegin;
        specTrans.SpecRecId = _newSpecRecId;
        specTrans.update();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS126930</DeveloperDocumentation>
	<Label>@SYS8956</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>RefRecId</TitleField1>
	<TitleField2>Code</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Bank</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Code</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Balance01</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS12227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Balance01</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscToTake</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Payment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ErrorCodePayment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CrossRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Specification</Name>
			<Label>@SYS8956</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Code</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpecTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpecRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FullSettlement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpecCompany</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefCompany</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SelectedDateUsedToCalcCashDisc</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Balance01</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS11660</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CashDiscToTake</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CashDiscAmount</ExtendedDataType>
			<Label>@sys128701</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Code</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KeyValue</ExtendedDataType>
			<Label>@SYS155</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CrossRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CrossExchRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ErrorCodePayment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ErrorCodePayment</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FullSettlement</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>FullSettlement</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS75399</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Payment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS828</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PaymentStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustVendPaymStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RefCompany</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS21707</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SelectedDateUsedToCalcCashDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SpecCompany</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SpecRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SpecTableId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SpecIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>SpecRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SpecTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SpecCompany</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefCompany</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RefIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>RefCompany</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>BankCodaAccountStatementLines</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS126929</EntityRelationshipRole>
			<RelatedTable>BankCodaAccountStatementLines</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankCodaAccountStatementLines</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>SpecTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecTableId</Name>
					<Field>SpecTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecRecId</Name>
					<Field>SpecRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecCompany</Name>
					<Field>SpecCompany</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS126928</EntityRelationshipRole>
			<RelatedTable>CustInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>SpecTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecCompany</Name>
					<Field>SpecCompany</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecRecId</Name>
					<Field>SpecRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecTableId</Name>
					<Field>SpecTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustSettlement</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS126923</EntityRelationshipRole>
			<RelatedTable>CustSettlement</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustSettlement</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>SpecTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefCompany</Name>
					<Field>RefCompany</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123523</EntityRelationshipRole>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>SpecTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecCompany</Name>
					<Field>SpecCompany</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecRecId</Name>
					<Field>SpecRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecTableId</Name>
					<Field>SpecTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTransOpen</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS126922</EntityRelationshipRole>
			<RelatedTable>CustTransOpen</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTransOpen_1</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>SpecTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefCompany</Name>
					<Field>RefCompany</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustVendPaymProposalLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS126927</EntityRelationshipRole>
			<RelatedTable>CustVendPaymProposalLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustVendPaymProposalLine</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>SpecTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecCompany</Name>
					<Field>SpecCompany</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecRecId</Name>
					<Field>SpecRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecTableId</Name>
					<Field>SpecTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerJournaltrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS126926</EntityRelationshipRole>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerJournaltrans</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>SpecTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecCompany</Name>
					<Field>SpecCompany</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecRecId</Name>
					<Field>SpecRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecTableId</Name>
					<Field>SpecTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123865</EntityRelationshipRole>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>SpecTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecCompany</Name>
					<Field>SpecCompany</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecTableId</Name>
					<Field>SpecTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecRecId</Name>
					<Field>SpecRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS126925</EntityRelationshipRole>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>SpecTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecCompany</Name>
					<Field>SpecCompany</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecRecId</Name>
					<Field>SpecRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecTableId</Name>
					<Field>SpecTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS126924</EntityRelationshipRole>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>SpecTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecCompany</Name>
					<Field>SpecCompany</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecRecId</Name>
					<Field>SpecRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecTableId</Name>
					<Field>SpecTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendSettlement</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS126923</EntityRelationshipRole>
			<RelatedTable>VendSettlement</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendSettlement</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>SpecTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefCompany</Name>
					<Field>RefCompany</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123524</EntityRelationshipRole>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>SpecTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecCompany</Name>
					<Field>SpecCompany</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecRecId</Name>
					<Field>SpecRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecTableId</Name>
					<Field>SpecTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTransOpen</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS126922</EntityRelationshipRole>
			<RelatedTable>VendTransOpen</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTransOpen_1</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>SpecTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefCompany</Name>
					<Field>RefCompany</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SpecContext</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123523</EntityRelationshipRole>
			<RelatedTable>SpecContext</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SpecTransExecution</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>SpecTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecCompany</Name>
					<Field>SpecCompany</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecRecId</Name>
					<Field>SpecRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecTableId</Name>
					<Field>SpecTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SpecTransCustomerOpen</Name>
			<RelatedTable>SpecTransCustomerOpen</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>SpecTransRecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SpecTransVendorOpen</Name>
			<RelatedTable>SpecTransVendorOpen</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>SpecTransRecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>