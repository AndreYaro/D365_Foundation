<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmTMCallListTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class smmTMCallListTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>busRelAccount</Name>
				<Source><![CDATA[
    smmBusRelAccount busRelAccount()
    {
        return smmBusRelTable::findByParty(this.Party).BusRelAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canActivityBeStored</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the activity can be stored.
    /// </summary>
    /// <returns>
    /// true if the activity can be stored; otherwise, false.
    /// </returns>
    /// <remarks>
    ///  Possible errors include the following:
    ///  <list type="bullet">
    ///   <item>
    ///   <description>The planned call date is not set.</description>
    ///   </item>
    ///   <item>
    ///   <description>No employee has been set as call responsible.</description>
    ///   </item>
    ///  </list>
    /// </remarks>
    public boolean canActivityBeStored()
    {
        if (this.CallPlannedDateTime == utcDateTimeNull())
        {
            return false;
        }

        if (!this.CallRespWorker)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPlannedDateTime</Name>
				<Source><![CDATA[
    boolean checkPlannedDateTime()
    {
        smmTMCallListGroup  smmTMCallListGroup;
        boolean             ret = true;

        smmTMCallListGroup=smmTMCallListGroup::find(this.CallListId);

        // Is planned date before call list start date or after call list end date
        if (this.CallPlannedDateTime < smmTMCallListGroup.FromDateTime || this.CallPlannedDateTime > smmTMCallListGroup.ToDateTime)
        {
            // Planned date must be in the call list period
            ret = checkFailed("@SYS89031");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeCallListTargetActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes target activity for the connected call list.
    /// </summary>
    /// <returns>
    /// The target activity that has been closed.
    /// </returns>
    public smmActivities closeCallListTargetActivity()
    {
        smmActivities   smmActivities;

        ttsbegin;

        if (this.CallbackActivityId)
        {
            smmActivities = smmActivities::find(this.CallbackActivityId, true);

            if (smmActivities && smmActivities.Closed != NoYes::Yes)
            {
                smmActivities.Closed = NoYes::Yes;

                smmActivities.modifiedField(fieldNum(smmActivities, Closed));

                smmActivities.update();
            }
        }

        ttscommit;

        return  smmActivities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactPersonName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Lookup contact person name in <see cref="T:ContactPerson" />.
    /// </summary>
    /// <returns>
    ///    Contact person name.
    /// </returns>
    display Name contactPersonName()
    {
        return ContactPerson::name(this.ContactPersonId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>countCallList</Name>
				<Source><![CDATA[
    display Counter countCallList()
    {
        smmTMCallListTable smmTMCallListTable;

        select count (RecId) from smmTMCallListTable
            where smmTMCallListTable.CallListId == this.CallListId;

        return any2int(smmTMCallListTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>countCallListCallback</Name>
				<Source><![CDATA[
    display Counter countCallListCallback()
    {
        smmTMCallListTable smmTMCallListTable;

        select count (RecId) from smmTMCallListTable
            where smmTMCallListTable.CallListId == this.CallListId  &&
                  smmTMCallListTable.CallStatus == smmTMCallStatus::CallBack;

        return any2int(smmTMCallListTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>countCallListCancelled</Name>
				<Source><![CDATA[
    display Counter countCallListCancelled()
    {
        smmTMCallListTable smmTMCallListTable;

        select count (RecId) from smmTMCallListTable
            where smmTMCallListTable.CallListId == this.CallListId  &&
                  smmTMCallListTable.CallStatus == smmTMCallStatus::Cancelled;

        return any2int(smmTMCallListTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>countCallListClosed</Name>
				<Source><![CDATA[
    display Counter countCallListClosed()
    {
        smmTMCallListTable smmTMCallListTable;

        select count (RecId) from smmTMCallListTable
            where smmTMCallListTable.CallListId == this.CallListId  &&
                  smmTMCallListTable.CallStatus == smmTMCallStatus::Closed;

        return any2int(smmTMCallListTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Create new activity from the current call list.
    /// </summary>
    /// <returns>
    ///    The new activity record.
    /// </returns>
    public smmActivities createNewActivity()
    {
        smmActivities   smmActivities;

        if (this.canActivityBeStored())
        {
            smmActivities = smmActivityCreate::createActivity(this);
        }
        return smmActivities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Delete a call list. If an activity is connected, this is deleted too. Additionally, if the call is not closed, the status on the campaign targets is updated. CRM log is also updated
    /// </summary>
    public void delete()
    {
        smmCampaignSelection    smmCampaignSelection;
        smmCampaignId           smmCampaignId;
        smmActivities           smmActivities;

        ttsbegin;

        // Is an activity attached to the call list
        if (this.CallbackActivityId)
        {
            // Delete the attached activity
            smmActivities = smmActivities::find(this.CallbackActivityId, true);
            smmActivities.delete(false);
        }

        ttscommit;

        super();

        // Log deletion in the CRM transaction log
        smmTransLog::initTrans(this, smmLogAction::delete);

        // Is the call is not closed, the status on the campaign targets should be updated
        if (this.CallStatus != smmTMCallStatus::Closed)
        {
            // Find campaign id
            smmCampaignId = smmTMCallListGroup::find(this.CallListId).campaignId();

            ttsbegin;

            // Find the corresponding campaign target
            select firstonly forupdate smmCampaignSelection where smmCampaignSelection.CampaignId      == smmCampaignId &&
                                                                  smmCampaignSelection.Party     == this.Party &&
                                                                  smmCampaignSelection.ContactPersonId == this.ContactPersonId;

            // Change status on the campaign target to "Not broadcasted"
            if (smmCampaignSelection)
            {
                smmCampaignSelection.BroadcastType = smmCampaignBroadcastType::NotBroadcasted;
                smmCampaignSelection.update(false);
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editContactPersonName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edit method for modifying contact person name. The new name is looked up in the <see cref="ContactPerson Table" />, and corresponding contact person id is inserted into this table.
    /// </summary>
    /// <param name="_set">
    ///    Should the record be updated?
    /// </param>
    /// <param name="_name">
    ///    The new name.
    /// </param>
    /// <returns>
    ///    The new name.
    /// </returns>
    edit smmTMCallListContactPersonName editContactPersonName(boolean _set, smmTMCallListContactPersonName _name)
    {
        #define.blank('')
        smmTMCallListContactPersonName name = _name;
        smmContactPersonId contactPersonId;

        if (_set)
        {
            if (name)
            {
                contactPersonId = this.ContactPersonId;
                this.ContactPersonId = ContactPerson::findNameParty(this.Party,_name).ContactPersonId;
                if (this.validateField(fieldNum(smmTMCallListTable,ContactPersonId)))
                {
                    if (this.ContactPersonId)
                    {
                        name = ContactPerson::find(this.ContactPersonId).personName();
                    }
                }
                else
                {
                    this.ContactPersonId = contactPersonId;
                }
            }
            else
            {
                this.ContactPersonId = #blank;
            }
        }
        else
        {
            name = this.contactPersonName();
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Insert new call list record. If activity can be stored (<see
    ///    cref="M:smmTMCallListTable.canActivityBeStored" />), and activity not already set, a new activity
    ///    is created for this call list.
    /// </summary>
    /// <param name="_isCalledFromBatch">
    ///    Called from batch job.
    /// </param>
    public void insert(boolean _isCalledFromBatch = false)
    {
        // Only create activity if required fields are specified
        if (this.canActivityBeStored() && !this.CallbackActivityId && smmParametersTable::find().TelemarketingTargetsCreateActivity != smmCreateActivity::AdvancedPrompt)
        {
            // Create follow up activity for the call list target
            this.CallbackActivityId = smmActivityCreate::createActivity(this, _isCalledFromBatch).ActivityNumber;
        }

        super();

        // Log insert in the CRM transaction log
        smmTransLog::initTrans(this, smmLogAction::insert);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return ID of the project (if any) connected to the call list.
    /// </summary>
    /// <returns>
    /// The project ID.
    /// </returns>
    display ProjId projId()
    {
        // Return id of the project (if any) connected to the call list
        return smmCampaignTable::findTMCallListId(this.CallListId).ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showContactPersonName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Get contact person name.
    /// </summary>
    /// <returns>
    ///    Contact person name.
    /// </returns>
    display smmTMCallListContactPersonName showContactPersonName()
    {
        // Return the name of the contact person
        return ContactPerson::find(this.ContactPersonId).personName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDirName</Name>
				<Source><![CDATA[
    display smmTMCallListContactFor showDirName()
    {
        // Return the name of the Party
        return DirPartyTable::findRec(this.Party).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDocHanIcon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the call list symbol for the current record.
    /// </summary>
    display container showDocHanIcon()
    {
        ImageReference  imgRef;
        str             imageName = identifierstr(Document);
        container       imgContainer;

        if (this.CallListId && this.DataAreaId && (select firstonly docuRef where docuRef.RefCompanyId  == this.DataAreaId &&
                                                                                  docuRef.RefTableId    == this.TableId    &&
                                                                                  docuRef.RefRecId      == this.RecId).RecId)
        {
            imageName = identifierstr(PlannedDocument);
        }

        imgRef = ImageReference::constructForSymbol(imageName);
        imgContainer = imgRef.pack();

        return imgContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showNumberOfOpenCalls</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Get number of open calls.
    /// </summary>
    /// <returns>
    ///    Number of open calls.
    /// </returns>
    display smmTMCallNumberOf showNumberOfOpenCalls()
    {
        return smmTMCallListTable::countCallListOpen(this.CallListId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPhoneNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the current user has the necessary right, the contact person's telephone number is retrieved.
    /// </summary>
    /// <returns>
    /// Phone number.
    /// </returns>
    display smmPhone showPhoneNumber()
    {
        DictTable dictTable = new DictTable(tableNum(ContactPerson));

        if (dictTable.rights() >= AccessType::View)
        {
            return ContactPerson::find(this.ContactPersonId).phone();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQuestionnaire</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Get questionnaire from this call list.
    /// </summary>
    /// <returns>
    ///    Questionnaire id.
    /// </returns>
    display KMCollectionId showQuestionnaire()
    {
        return smmTMCallListGroup::find(this.CallListId).kmCollectionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmCampaignId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Get campaign id from <see cref="smmCampaignTable Table" />.
    /// </summary>
    /// <returns>
    ///    the campaign id from <see cref="smmCampaignTable Table" />.
    /// </returns>
    display smmCampaignId smmCampaignId()
    {
        return smmCampaignTable::findTMCallListId(this.CallListId).CampaignId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the record.
    /// </summary>
    /// <param name="_activityHandling">
    ///    Update activities.
    /// </param>
    /// <param name="_templateActivity">
    ///    Template that will be used when new activities are created.
    /// </param>
    /// <remarks>
    ///    If activity handling is set, the activities are updated with the new record. Either the activity is
    ///    automatically updated with an activity created from the template activity, or the settings of the
    ///    updated record are transferred to the existing activity (if any). If the parameter is set to
    ///    "Advanced prompt", the template activity is never used.
    /// </remarks>
    public void update(boolean _activityHandling = true, smmActivities _templateActivity = null)
    {
        smmActivities       smmActivities;
        boolean             createActivity = false;
        boolean             advancePrompt;
        smmActivityId       oldActivityId;
        smmParametersTable  smmParametersTable;

        if (_activityHandling)
        {
            smmParametersTable = smmParametersTable::find();
            // Special case - if advance prompt
            if ( (this.CallStatus != smmTMCallStatus::CallBack && smmParametersTable.TelemarketingTargetsCreateActivity == smmCreateActivity::AdvancedPrompt) ||
                (this.CallStatus == smmTMCallStatus::CallBack && smmParametersTable.CallBackCreateActivity == smmCreateActivity::AdvancedPrompt))
            {
                advancePrompt  = true;
            }
            else
            {
                advancePrompt  = false;
            }

            // Is an activity already attached to the call list target
            if (this.CallbackActivityId)
            {
                ttsbegin;
                oldActivityId = (advancePrompt) ? this.orig().CallbackActivityId : this.CallbackActivityId;

                smmActivities = smmActivities::find(oldActivityId, true);

                // Is the required fields on the call list target (and if advance prompt and activity already attached)
                if (this.canActivityBeStored() && (!advancePrompt || oldActivityId == this.CallbackActivityId ))
                {
                    if (smmActivities)
                    {
                        // Is the employee still the same
                        if (smmActivities.ResponsibleWorker == this.CallRespWorker)
                        {
                            // Update fields on the CRM activity
                            smmActivities.updateFromCallListTarget(this);
                        }
                        else if (!advancePrompt)
                        // The responsible worker on the call list target is changed
                        {
                            // Delete the attached activity for the old worker
                            smmActivities.delete(false);
                            // Create a new activity for the new responsible
                            createActivity = true;
                        }
                    }
                }
                else
                {
                    if (smmActivities)
                    {
                        // Clear the link to old activity
                        if (!advancePrompt || !this.canActivityBeStored())
                        {
                            if (this.CallbackActivityId && !this.CallRespWorker && this.orig().CallRespWorker)
                            {
                                smmActivities.updateFromCallListTarget(this);
                            }

                            // Delete the attached activity
                            this.CallbackActivityId = '';
                        }

                        // If status is call back
                        if (this.CallStatus == smmTMCallStatus::CallBack)
                        {
                            // Close the old activity
                            smmActivities.Closed = NoYes::Yes;
                            smmActivities.validateField(fieldNum(smmActivities, Closed));
                            smmActivities.update();
                        }
                        else
                        {
                            smmActivities.delete(false);
                        }
                    }
                }

                ttscommit ;
            }
            else
            // Create follow up activity for the call list target if the target has a responsible employee
            if (this.CallRespWorker && !(this.CallStatus == smmTMCallStatus::Cancelled || this.CallStatus == smmTMCallStatus::Closed))
            {
                createActivity = true;
            }

            if (createActivity && (!advancePrompt || _templateActivity))
            {
                this.CallbackActivityId = smmActivityCreate::createActivity(this,false,_templateActivity).ActivityNumber;
            }
        }

        super();

        // Update the CRM transaction log
        smmTransLog::initTrans(this, smmLogAction::update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromAdvPromptActivity</Name>
				<Source><![CDATA[
    /* Call this before update for handling advanced prompt case.
       It should not be inside ttsbegin and ttscommit. */
    void updateFromAdvPromptActivity(smmTMCallListTable _orig = this.orig())
    {
        smmActivities       smmActivities;
        smmParametersTable  smmParameters;

        smmParameters = smmParametersTable::find();
        // If advanced prompt
        if ((this.CallStatus == smmTMCallStatus::CallBack
             && smmParameters.CallBackCreateActivity == smmCreateActivity::AdvancedPrompt)
             || (this.CallStatus != smmTMCallStatus::CallBack
             && smmParameters.TelemarketingTargetsCreateActivity == smmCreateActivity::AdvancedPrompt)
           )
        {
            // If responsible was changed or there was no activity attached earlier
            if ( this.canActivityBeStored() &&
                 ((this.CallRespWorker != _orig.CallRespWorker)
                 || (!_orig.CallbackActivityId))
               )
            {
                smmActivities           = smmActivityCreate::createActivity(this, false);
                this.CallbackActivityId = smmActivities.ActivityNumber;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <paramref name="_fieldIdToCheck" /> field is valid.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    ///    The field ID of the field to validate.
    /// </param>
    /// <returns>
    ///    true if the field is valid; otherwise, false.
    /// </returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(smmTMCallListTable,CallPlannedDateTime) :
                    ret = this.checkPlannedDateTime();
                    break;

                case fieldNum(smmTMCallListTable,Party) :
                    if (DirPartyTable::findRec(this.Party).type() != DirPartyType::Organization)
                    {
                        ret = checkFailed("@SYS136863");
                    }
                    break;

                case fieldNum(smmTMCallListTable,ContactPersonId) :
                    if ((this.Party) && (ContactPerson::find(this.ContactPersonId).ContactForParty != this.Party))
                    {
                        // Contact person "%1" must be attached to the Party "%2".
                        return checkFailed(strFmt("@SYS92799",this.ContactPersonId,DirPartyTable::findRec(this.Party).Name));
                    }
                    break;

                case fieldNum(smmTMCallListTable, CallRespWorker) :
                    if (this.CallRespWorker)
                    {
                        ret = ret && smmUtility::isValidWorkerInCurrentCompany(this.CallRespWorker);
                    }
                    break;

                case fieldNum(smmTMCallListTable, CallActualWorker) :
                    if (this.CallActualWorker)
                    {
                        ret = ret && smmUtility::isValidWorkerInCurrentCompany(this.CallActualWorker);
                    }
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that a <c>CallRespWorker</c> field and <c>CallActualWorker</c> field of the
    /// <c>smmTMCallListTable</c> table belongs to the current Legal Entity.
    /// </summary>
    /// <param name="validateWorkerOnly">
    /// A Boolean value that indicates whether only the worker has to be validated.
    /// </param>
    /// <returns>
    /// true if a worker belongs to current Legal Entity; otherwise, false.
    /// </returns>
    public boolean validateWrite(boolean validateWorkerOnly = false)
    {
        boolean ret = true;

        if (!validateWorkerOnly)
        {
            ret = super();

            ret = ret && this.checkPlannedDateTime();
        }

        if (this.CallRespWorker)
        {
            ret = ret && smmUtility::isValidWorkerInCurrentCompany(this.CallRespWorker);
        }

        if (this.CallActualWorker)
        {
            ret = ret && smmUtility::isValidWorkerInCurrentCompany(this.CallActualWorker);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addResponsibleForResponsibilities</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns responsibility for the call list records.
    /// </summary>
    /// <param name="_callListId">
    ///    A call list.
    /// </param>
    /// <param name="_employees">
    ///    A container that contains employees, and the number of records to be assigned to each employee.
    /// </param>
    /// <remarks>
    ///    The number of responsibilities to be assigned to each employee is specified as an argument (stored
    ///    in a container). Activities are also created. The user is prompted to create a corresponding
    ///    activity. This activity is used as template for all future activities.
    /// </remarks>
    public static void addResponsibleForResponsibilities(smmTMCallListID _callListId, container _employees)
    {
        #define.containerElementSize(2)

        smmTMCallListTable          smmTMCallListTable;
        RecId                       callListRecId;
        int                         numberOfresponsibilityAssigned;
        CrmWorkerRecId              worker;
        Counter                     counter          = 1;
        smmActivities               templateActivity = null;
        boolean                     activityHandling = false;

        // First worker are fetched from the container
        worker                          = conPeek(_employees, counter);

        // First workers number of responsibilities are fetched from the container
        numberOfresponsibilityAssigned  = conPeek(_employees, counter + 1);

        // Create activity for a first target and use it as a template activity
        while select forupdate smmTMCallListTable where smmTMCallListTable.CallListId == _callListId && smmTMCallListTable.CallRespWorker == 0
        {
            // Should more targets be assigned to worker
            if (numberOfresponsibilityAssigned == 0)
            {
                // Go to next (employee, number of targets) in the container
                counter = counter + #containerElementSize;

                // Next worker are fetched from the container
                worker                          = conPeek(_employees, counter);

                // Next workers number of responsibilities are fetched from the container
                numberOfresponsibilityAssigned  = conPeek(_employees, counter + 1);
            }

            if (counter < conLen(_employees))
            {
                // Assign employee to the target
                smmTMCallListTable.CallRespWorker = worker;

                if (smmTMCallListTable.canActivityBeStored())
                {
                    // Use the first created activity as a template activity for the remainder of the targets
                    templateActivity = smmTMCallListTable.createNewActivity();

                    // Is activity handling active (the user responded Yes to the first activity)
                    if (templateActivity)
                    {
                        activityHandling = true;
                        callListRecId = smmTMCallListTable.RecId;
                    }
                    else
                    {
                        // The user responded "No" to creating activities. Turn off activity handling
                        activityHandling = false;
                    }

                    break;
                }

                // Decrease the number of targets that should be assigned to the current worker
                numberOfresponsibilityAssigned--;
            }
        }

        try
        {
            ttsbegin;

            counter = 1;

            // First employee are fetched from the container
            worker                          = conPeek(_employees, counter);

            // First employees number of responsibilities are fetched from the container
            numberOfresponsibilityAssigned  = conPeek(_employees, counter + 1);

            // Traverse all targets that haven't a target assigned
            while select forupdate smmTMCallListTable where smmTMCallListTable.CallListId == _callListId && smmTMCallListTable.CallRespWorker == 0
            {
                // Should more targets be assigned to worker
                if (numberOfresponsibilityAssigned == 0)
                {
                    // Go to next (worker, number of targets) in the container
                    counter = counter + #containerElementSize;

                    // Next worker are fetched from the container
                    worker                          = conPeek(_employees, counter);

                    // Next workers number of responsibilities are fetched from the container
                    numberOfresponsibilityAssigned  = conPeek(_employees, counter + 1);
                }

                if (counter < conLen(_employees))
                {
                    // Assign employee to the target
                    smmTMCallListTable.CallRespWorker = worker;

                    if (smmTMCallListTable.RecId == callListRecId)
                    {
                        smmTMCallListTable.CallbackActivityId = templateActivity.ActivityNumber;
                        smmTMCallListTable.update(false);
                    }
                    else
                    {
                        // Update the call list target
                        smmTMCallListTable.update(activityHandling, templateActivity);
                    }

                    // Decrease the number of targets that should be assigned to the current worker
                    numberOfresponsibilityAssigned--;
                }
            }

            ttscommit;
        }
        catch
        {
            if (templateActivity)
            {
                ttsbegin;
                templateActivity = smmActivities::find(templateActivity.ActivityNumber,true);
                if (templateActivity)
                {
                    templateActivity.delete(false);
                }
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>countAlreadyAssignedTargets</Name>
				<Source><![CDATA[
    /// <summary>
    /// Count assigned records for a particular call list.
    /// </summary>
    /// <param name="_callListId">
    /// The call list ID.
    /// </param>
    /// <returns>
    /// Assigned records.
    /// </returns>
    public static Counter countAlreadyAssignedTargets(smmTMCallListID _callListId)
    {
        smmTMCallListTable smmTMCallListTable;

        select count (RecId) from smmTMCallListTable where smmTMCallListTable.CallListId               == _callListId &&
                                                           smmTMCallListTable.CallRespWorker    != 0;

        return any2int(smmTMCallListTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>countCallListOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find open records in call list.
    /// </summary>
    /// <param name="_callListId">
    /// The call list.
    /// </param>
    /// <returns>
    /// Open records.
    /// </returns>
    public static Counter countCallListOpen(smmTMCallListID _callListId)
    {
        smmTMCallListTable smmTMCallListTable;

        select count (RecId) from smmTMCallListTable
            where smmTMCallListTable.CallListId == _callListId  &&
                  smmTMCallListTable.CallStatus == smmTMCallStatus::Open;

        return any2int(smmTMCallListTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>countNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Count number of records with the given call list id. If a call list ID not set, then all call lists
    /// with a call list ID are counted.
    /// </summary>
    /// <param name="_callListId">
    /// A call list ID.
    /// </param>
    /// <returns>
    /// Number of records with the specified call list id.
    /// </returns>
    public static Counter countNumbers(smmTMCallListID _callListId)
    {
        smmTMCallListTable smmTMCallListTable;

        if (_callListId == '')
        {
            select count (RecId) from smmTMCallListTable where smmTMCallListTable.CallListId != '';
        }
        else
        {
            select count (RecId) from smmTMCallListTable where smmTMCallListTable.CallListId == _callListId;
        }

        return any2int(smmTMCallListTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>countNumbersOfUnassignedTargets</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Count number of records, with a specific call list id, not assigned to an employee.
    /// </summary>
    /// <param name="_callListId">
    ///    Call list id.
    /// </param>
    /// <returns>
    ///    Number of unassigned records.
    /// </returns>
    public static Counter countNumbersOfUnassignedTargets(smmTMCallListID _callListId)
    {
        smmTMCallListTable smmTMCallListTable;

        select count (RecId) from smmTMCallListTable where smmTMCallListTable.CallListId == _callListId && smmTMCallListTable.CallRespWorker == 0;

        return any2int(smmTMCallListTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static smmTMCallListTable find(smmTMCallListID _callListID, DirPartyRecId _party, ContactPersonId _contactPersonId, boolean _forupdate = false)
    {
        smmTMCallListTable smmTMCallListTable = null;

        if (_callListID && _party && _contactPersonId)
        {
            smmTMCallListTable.selectForUpdate(_forupdate);

            select firstonly smmTMCallListTable
                where smmTMCallListTable.CallListId == _callListID
                      && smmTMCallListTable.Party == _party
                      && smmTMCallListTable.ContactPersonId == _contactPersonId;
        }

        return smmTMCallListTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCallListContact</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds record from call list ID and contact person.
    /// </summary>
    /// <param name="_callListId">
    /// The ID of the call list.
    /// </param>
    /// <param name="_contactPersonId">
    /// The ID of the contact person.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// An <c>smmTMCallListTable</c> record.
    /// </returns>
    public static smmTMCallListTable findCallListContact(smmTMCallListID     _callListId,
                                                                ContactPersonId     _contactPersonId,
                                                                boolean             _forupdate = false)
    {
        smmTMCallListTable smmCallListTable = null;

        if (_callListId && _contactPersonId)
        {
            smmCallListTable.selectForUpdate(_forupdate);

            select firstonly smmCallListTable
                where smmCallListTable.CallListId       == _callListId &&
                      smmCallListTable.ContactPersonId  == _contactPersonId;
        }

        return smmCallListTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record with the specified record ID.
    /// </summary>
    /// <param name="_recId">
    /// A record ID.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// An <c>smmTMCallListTable</c> record.
    /// </returns>
    public static smmTMCallListTable findRec(RecId _recId, boolean _forupdate = false)
    {
        smmTMCallListTable smmTMCallListTable = null;

        if (_recId)
        {
            smmTMCallListTable.selectForUpdate(_forupdate);

            select firstonly smmTMCallListTable
                index hint RecId
                where smmTMCallListTable.RecId == _recId;
        }

        return smmTMCallListTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusCounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Counts records, sorted by status, for a call list.
    /// </summary>
    /// <param name="_callListID">
    /// The call list.
    /// </param>
    /// <returns>
    /// A container that contains the records in the following order: [1, open + callback + closed +
    /// canceled, open, callback, closed, canceled]
    /// </returns>
    /// <remarks>
    /// A record can have four possible statuses: Open, Call back, Closed, and Cancelled.
    /// </remarks>
    public static container statusCounts(smmTMCallListID _callListID)
    {
        int                     count1;
        int                     count2;
        int                     count3;
        int                     count4;
        smmTMCallListTable      smmTMCallListTableGraph;
        container               statusCon = conNull();

        while select CallListId, CallStatus from smmTMCallListTableGraph where smmTMCallListTableGraph.CallListId == _callListID
        {
            if (smmTMCallListTableGraph.CallStatus == smmTMCallStatus::Open)
            {
                count1++;
            }
            else
            if (smmTMCallListTableGraph.CallStatus == smmTMCallStatus::CallBack)
            {
                count2++;
            }
            else
            if (smmTMCallListTableGraph.CallStatus == smmTMCallStatus::Closed)
            {
                count3++;
            }
            else
            if (smmTMCallListTableGraph.CallStatus == smmTMCallStatus::Cancelled)
            {
                count4++;
            }
        }

        return conIns(statusCon, 1, count1 + count2 + count3 + count4, count1, count2, count3, count4);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCallListTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// The record is updated to "canceled". Reason and contact person is added to table.
    /// </summary>
    /// <param name="_callistId">
    /// A call list.
    /// </param>
    /// <param name="_contactId">
    /// The contact person.
    /// </param>
    /// <param name="_reasonId">
    /// The reason the record is canceled.
    /// </param>
    public static void updateCallListTable(smmTMCallListID _callistId, ContactPersonId _contactId, smmTMReasonId _reasonId)
    {
        smmTMCallListTable smmTMCallListTableUpdate;

        ttsbegin;

        smmTMCallListTableUpdate = smmTMCallListTable::findCallListContact(_callistId, _contactId, true);

        smmTMCallListTableUpdate.ReasonId             = _reasonId;
        smmTMCallListTableUpdate.CallStatus           = smmTMCallStatus::Cancelled;
        smmTMCallListTableUpdate.CallActualDateTime   = DateTimeUtil::getSystemDateTime();
        smmTMCallListTableUpdate.CallActualWorker     = smmUtility::getCurrentContactWorker();

        if (smmTMCallListTableUpdate.validateWrite())
        {
            smmTMCallListTableUpdate.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocuRefOnInsert</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(DocuRefExtension), delegatestr(DocuRefExtension, OnInsert))]
    static void DocuRefOnInsert(DocuRef _docuRef, RecId _interCompanyFromRecId)
    {
        if (_docuRef.RefTableId == tablenum(smmTMCallListTable))
        {
            changecompany(_docuRef.RefCompanyId)
            {
                smmTMCallListTable  smmTMCallListTable  = smmTMCallListTable::findRec(_docuRef.RefRecId);

                _docuRef.Party              = smmTMCallListTable.Party;
                _docuRef.ContactPersonId    = smmTMCallListTable.ContactPersonId;
                _docuRef.Author             = DirPersonUser::current().PersonParty;
                _docuRef.ActualCompanyId    = curext();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SmmTM</ConfigurationKey>
	<DeveloperDocumentation>@SYS124793</DeveloperDocumentation>
	<FormRef>smmTMCallListTable</FormRef>
	<Label>@SYS80303</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>CallListId</TitleField1>
	<TitleField2>Party</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>DateTimeIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>ListDirContactIdx</PrimaryIndex>
	<ReplacementKey>ListDirContactIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>smmActivities</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>smmActivities</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CallRespWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CallStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CallPlannedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CallActualDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CallActualDuration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CallActualWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CallListId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CallListId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Party</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ActualCall</Name>
			<Label>@SYS86428</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CallActualDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CallActualDuration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CallActualWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CallBackActivity</Name>
			<Label>@SYS80520</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CallbackActivityId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CallListId</Name>
			<Label>@SYS79892</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CallListId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CallPlaned</Name>
			<Label>@SYS86546</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CallPlannedDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ContactPerson</Name>
			<Label>@SYS81174</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CountCallList</Name>
			<Label>@ApplicationPlatform:SingleSpace</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>countCallList</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CountCallListCallback</Name>
			<Label>@ApplicationPlatform:SingleSpace</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>countCallListCallback</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CountCallListCancelled</Name>
			<Label>@ApplicationPlatform:SingleSpace</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>countCallListCancelled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CountCallListClosed</Name>
			<Label>@ApplicationPlatform:SingleSpace</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>countCallListClosed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CountCalllistOpened</Name>
			<Label>@ApplicationPlatform:SingleSpace</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>showNumberOfOpenCalls</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Directory</Name>
			<Label>@SYS111907</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Party</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EPMiniPage</Name>
			<Label>@SYS108232</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editContactPersonName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>showDirName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CallStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CallPlannedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CallRespWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS81042</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CallRespWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CallStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CallPlannedDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Questionaire</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>KMVirtualNetworkAnswerTableId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reason</Name>
			<Label>@SYS86426</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReasonId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Responsible</Name>
			<Label>@SYS67464</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CallRespWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>CallActualDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmTMCallActualDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>CallActualDuration</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmTMCallActualDuration</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CallActualWorker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>smmWorker</ExtendedDataType>
			<Label>@SYS2695</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CallbackActivityId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmActivityId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CallListId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmTMCallListID</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>CallPlannedDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmTMCallPlannedDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CallRespWorker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>smmTMCallResponsibleWorker</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CallStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>smmTMCallStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPersonId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>smmContactPersonId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>KMVirtualNetworkAnswerTableId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KMVirtualNetworkAnswerTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Party</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DirPartyRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReasonId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmTMReasonId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Activity</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CallbackActivityId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ListDirContactIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CallListId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Party</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ContactPersonId</DataField>
					<Optional>Yes</Optional>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HcmWorkerIdx1</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CallActualWorker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DateTimeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CallPlannedDateTime</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ContactIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ContactPersonId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CallListResponsibleEmplIDIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CallRespWorker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CallActualWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_smmTMCallListTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CallRespWorker</Name>
					<Field>CallRespWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CallRespWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_1_smmTMCallListTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CallActualWorker</Name>
					<Field>CallActualWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ContactPerson</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ContactPerson</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ContactPerson</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>smmTMCallListTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContactPersonId</Name>
					<SourceEDT>smmContactPersonId</SourceEDT>
					<Field>ContactPersonId</Field>
					<RelatedField>ContactPersonId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ContactPersonId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123523</EntityRelationshipRole>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DirAddressBookParty</Name>
			<RelatedTable>DirAddressBookPartyAllView</RelatedTable>
			<RelatedTableRole>DirAddressBookPartyAllView</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>smmTMCallListTable</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DirPartyTable_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DirPartyTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>IsPartyOf</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>IsTMCallListFor</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>KMVirtualNetworkAnswerTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>KMVirtualNetworkAnswerTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>KMVirtualNetworkAnswerTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmTMCallListTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>KMVirtualNetworkAnswerTableId</Name>
					<SourceEDT>KMVirtualNetworkAnswerTableId</SourceEDT>
					<Field>KMVirtualNetworkAnswerTableId</Field>
					<RelatedField>kmVirtualNetworkAnswerTableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ExecutedByIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmActivities</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmTMCallListTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CallbackActivityId</Name>
					<SourceEDT>smmActivityId</SourceEDT>
					<Field>CallbackActivityId</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>smmBusRelTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124782</EntityRelationshipRole>
			<RelatedTable>smmBusRelTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>smmLeadTable</Name>
			<EntityRelationshipRole>@SYS124784</EntityRelationshipRole>
			<RelatedTable>smmLeadTable</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>smmOpportunityTable</Name>
			<EntityRelationshipRole>@SYS124767</EntityRelationshipRole>
			<RelatedTable>smmOpportunityTable</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>smmQuotationCompetitorGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124768</EntityRelationshipRole>
			<RelatedTable>smmQuotationCompetitorGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmTMCallListGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmTMCallListGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>smmTMCallListGroup</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>smmTMCallListTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CallListId</Name>
					<SourceEDT>smmTMCallListID</SourceEDT>
					<Field>CallListId</Field>
					<RelatedField>CallListID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CallListdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmTMReasonGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmTMReasonGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmTMReasonGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmTMCallListTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonId</Name>
					<SourceEDT>smmTMReasonId</SourceEDT>
					<Field>ReasonId</Field>
					<RelatedField>ReasonId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ReasonIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123524</EntityRelationshipRole>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>