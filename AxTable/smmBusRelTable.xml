<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmBusRelTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class smmBusRelTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>abc</Name>
				<Source><![CDATA[
    display ABC abc()
    {
        return DirOrganization::find(this.Party).abc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canConvertToCustomer</Name>
				<Source><![CDATA[
    // Check if a prospect can be converted to customer or not
    public boolean canConvertToCustomer()
    {
        // Check license
        if (!smmLicense::custTableInsert())
        {
            // Not allowed to store data in Customer table
            return checkFailed("@SYS80669");
        }

        // Check for customer group on the business relation
        if (!this.CustGroup)
        {
            // Field '%1' must be filled in.
            return checkFailed(strFmt("@SYS26332", fieldPName(smmBusRelTable, CustGroup)));
        }

        if (DirPartyTableHelper::isCustomer(this.Party))
        {
            // The business relation cannot be converted to a customer
            return checkFailed("@SYS108838");
        }

        if (CustParameters::find().MandatoryTaxGroup && !this.TaxGroup)
        {
            // Field '%1' must be filled in.
            return checkFailed(strFmt("@SYS26332", fieldPName(smmBusRelTable, TaxGroup)));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canConvertToVendor</Name>
				<Source><![CDATA[
    // Check if a prospect can be converted to vendor or not
    public boolean canConvertToVendor()
    {
        SalesQuotationTable salesQuotationTable;

        // Check license
        if (!smmLicense::vendTableInsert())
        {
            // Insufficient rights
            return checkFailed("@SYS57330");
        }

        // Check for vendor group on the business relation
        if (!this.VendGroup)
        {
            // Field '%1' must be filled in.
            return checkFailed(strFmt("@SYS26332", fieldPName(smmBusRelTable, VendGroup)));
        }
        if (DirPartyTableHelper::isvendor(this.Party))
        {
            // The business relation cannot be converted to a vendor
            return checkFailed("@SYS81994");
        }

        select firstonly salesQuotationTable where salesQuotationTable.BusRelAccount == this.BusRelAccount;

        if (salesQuotationTable)
        {
            // Cannot convert to vendor as quotations exist for the prospect.
            return checkFailed("@SYS108811");
        }

        if (VendParameters::find().MandatoryTaxGroup && !this.TaxGroup)
        {
            //Field '%1' must be filled in.
            return checkFailed(strFmt("@SYS26332", fieldPName(smmBusRelTable, TaxGroup)));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateSalesQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a sales quotation can be created for the business relation.
    /// </summary>
    /// <returns>
    /// true if a sales quotation can be created for the business relation; otherwise, false.
    /// </returns>
    boolean canCreateSalesQuotation()
    {
        return smmBusRelTypeGroup::find(this.BusRelTypeId).TableType == smmBusRelTypeSourceTable::Relation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertActivities</Name>
				<Source><![CDATA[
    // Update activity references
    private void convertActivities(TableId _tableId, RecId _recId, TableId _newTableId, RecId _newRecId)
    {
        #OCCRetryCount
        smmActivityParentLinkTable activityParentLinkTable;
        smmActivityParentType parentType = conPeek(smmActivityParentLink::refTableId2ParentTypes(_newTableId),1);
        smmActivityParentRefTableId refTableId = smmActivityParentLink::parentType2RefTableId(parentType);
        try
        {
            ttsbegin;

            do
            {
                activityParentLinkTable = this.nextValidActivityParentLink(smmActivityParentType::BusRel,
                                                                    parentType,
                                                                    _recId,
                                                                    refTableId,
                                                                    _newRecId);
                if (activityParentLinkTable.RecId)
                {
                    smmActivityParentLinkTable activityParentLinkTableCopy;
                    activityParentLinkTableCopy.ActivityNumber = activityParentLinkTable.ActivityNumber;
                    activityParentLinkTableCopy.ParentType     = parentType;
                    activityParentLinkTableCopy.RefTableId     = refTableId;
                    activityParentLinkTableCopy.RefRecId       = _newRecId;
                    activityParentLinkTableCopy.PrimaryLink    = true;
                    activityParentLinkTableCopy.insert();
                }
            }
            while (activityParentLinkTable.RecId);

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextValidActivityParentLink</Name>
				<Source><![CDATA[
    private smmActivityParentLinkTable nextValidActivityParentLink(smmActivityParentType _parentType,
                                                                    smmActivityParentType _newParentType,
                                                                    smmActivityParentRefRecId _recId,
                                                                    smmActivityParentRefTableId _newRefTableId,
                                                                    smmActivityParentRefRecId _newRecId)
    {
        smmActivityParentLinkTable smmActivityParentLinkTable;
        smmActivityParentLinkTable smmActivityParentLinkTableLocal;
        smmActivities              smmActivities;

        select firstonly smmActivityParentLinkTable
                where smmActivityParentLinkTable.ParentType  == _parentType
                    && smmActivityParentLinkTable.RefRecId   == _recId
                    && smmActivityParentLinkTable.ActivityNumber
                exists join smmActivities
                    where smmActivityParentLinkTable.ActivityNumber == smmActivities.ActivityNumber
                notexists join smmActivityParentLinkTableLocal
                    where smmActivityParentLinkTableLocal.ParentType      == _newParentType
                        && smmActivityParentLinkTableLocal.RefTableId     == _newRefTableId
                        && smmActivityParentLinkTableLocal.RefRecId       == _newRecId
                        && smmActivityParentLinkTableLocal.ActivityNumber == smmActivityParentLinkTable.ActivityNumber;

        return smmActivityParentLinkTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertContacts</Name>
				<Source><![CDATA[
    // Update contact person references
    private void convertContacts(TableId _custVendTableId,CustVendAC _custVendAccount)
    {
        ContactPerson contactPerson;
        FieldId       accountFieldId;

        if (_custVendTableId == tableNum(CustTable))
        {
            accountFieldId = fieldNum(ContactPerson,CustAccount);
        }

        if (!this.Party || !_custVendAccount || !accountFieldId)
        {
            // Cannot connect contact persons to the new customer or vendor due to an error
            throw error("@SYS80274");
        }

        ttsbegin;

        // Update vendor account on all contact persons
        while select forupdate contactPerson where contactPerson.ContactForParty == this.Party
        {
            contactPerson.(accountFieldId) = _custVendAccount;
            contactPerson.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertResponsibilityAssignments</Name>
				<Source><![CDATA[
    // Update responsibility assignment references
    void convertResponsibilityAssignments(TableId _tableId,RecId _recId)
    {
        smmResponsibilitiesEmplTable    smmResponsibilitiesEmplTable;
        smmResponsibilityGroup          smmResponsibilityGroup;
        str                             msg;

        // Find if responsibilities are enabled for the new customer/vendor or not
        select firstonly smmResponsibilitiesEmplTable
            where smmResponsibilitiesEmplTable.RefTableId == this.TableId
                  && smmResponsibilitiesEmplTable.RefRecId == this.RecId
            join RecId from smmResponsibilityGroup
            where smmResponsibilityGroup.ResponsibilityId == smmResponsibilitiesEmplTable.ResponsibilityId
                  && ((_tableId == tableNum(CustTable) && !smmResponsibilityGroup.IsCust)
                      || (_tableId == tableNum(VendTable) && !smmResponsibilityGroup.IsVend));

        // If responsibility is not enabled
        if (smmResponsibilitiesEmplTable)
        {
            // Transfer of responsibility assignment(s) failed - Responsibility '%1' is not enabled for customers/vendors.
            msg = (_tableId == tableNum(CustTable)) ? "@SYS108814" : "@SYS112507" ;
            throw error(strFmt(msg,smmResponsibilitiesEmplTable.ResponsibilityId));
        }

        ttsbegin;

        update_recordset smmResponsibilitiesEmplTable
            setting RefTableId = _tableId, RefRecId = _recId
            where smmResponsibilitiesEmplTable.RefTableId == this.TableId
                  && smmResponsibilitiesEmplTable.RefRecId == this.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createConvertedBusRel</Name>
				<Source><![CDATA[
    // Store information for converted prospect
    void createConvertedBusRel(TableId _tableId,CustVendAC _account)
    {
        boolean skipCreateConvertedBusRel = false;

        smmBusRelTableConvert2CustomerContext convert2CustomerContext = smmBusRelTableConvert2CustomerContext::current();

        if (convert2CustomerContext
            && convert2CustomerContext.parmUpdateCustomer()
            && smmBusRelTablePersonUpdateReferencesFlight::instance().isEnabled())
        {
            skipCreateConvertedBusRel = smmConvertedBusRel::exist(_account);
        }

        if (!skipCreateConvertedBusRel)
        {
            smmConvertedBusRel convertedBusRel = this.initializeConvertedBusRel(_tableId, _account);

            convertedBusRel.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custAccount</Name>
				<Source><![CDATA[
    CustAccount custAccount()
    {
        return CustTable::findByPartyRecId(this.Party).AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customerGroup</Name>
				<Source><![CDATA[
    display smmCustomerGroup customerGroup()
    {
        return  CustGroup::find(this.CustGroup).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Delete record, and update CRM transaction log.
    /// </summary>
    public void delete()
    {
        // Check to see if the associated dimension attribute value has been used
        // in a way that would prevent deletion.
        if (!DimensionValidation::canDeleteEntityValue(this))
        {
            throw error(strFmt("@SYS134392", this.BusRelAccount));
        }

        if (!smmBusRelTableDeleteRelatedBusClassificationsFlight::instance().isEnabled() 
            || this.getBusRelTypeGroup().TableType == smmBusRelTypeSourceTable::B2BProspect)
        {
            smmBusRelSectorTable smmBusRelSectorTable;

            delete_from smmBusRelSectorTable where smmBusRelSectorTable.Party == this.Party;
        }

        smmProspectInstrumentationActivities prospectActivities = smmBusRelTable::instrumentationLogger().prospectActivities();

        using (SysInstrumentationActivityContext activityContext = prospectActivities.delete(this))
        {
            ttsbegin;

            // Update the associated dimension attribute value.
            DimensionAttributeValue::updateForEntityValueDelete(this);

            this.writeAndValidateCrossCompany(tableMethodStr(smmBusRelTable, delete));

            prospectActivities.logProspect(activityContext, this);

            super();

            DirPartyRelationship::removeLegalEntityRelationship(this.Party, DirSystemRelationshipType::Prospect);

            // Auto delete party at backend
            DirParty::autoDeleteParty(this.Party);

            // Write to CRM transaction log
            smmTransLog::initTrans(this, smmLogAction::delete);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBusRelTypeGroup</Name>
				<Source><![CDATA[
    private smmBusRelTypeGroup getBusRelTypeGroup()
    {
        return smmBusRelTypeGroup::find(this.BusRelTypeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteActivityParentLink</Name>
				<Source><![CDATA[
    private boolean deleteActivityParentLink()
    {
        smmActivityParentType parentType;
        RefRecId refRecId;

        if (this.BusRelTypeId == smmBusRelTypeGroup::getCustomerType())
        {
            parentType = smmActivityParentType::Customer;
            refRecId = CustTable::findByPartyRecId(this.Party).RecId;
        }
        else if (this.BusRelTypeId == smmBusRelTypeGroup::getVendorType())
        {
            parentType = smmActivityParentType::Vendor;
            refRecId = VendTable::findByPartyRecId(this.Party).RecId;
        }
        else
        {
            parentType = smmActivityParentType::BusRel;
            refRecId = this.RecId;
        }
        
        smmActivities currentSmmActivities;
        smmActivityParentLinkTable smmActivityParentLinkTable;
        select count(RecId) from currentSmmActivities
            where  currentSmmActivities.Closed == NoYes::No
        join RecId from smmActivityParentLinkTable
            where smmActivityParentLinkTable.ActivityNumber == currentSmmActivities.ActivityNumber &&
                smmActivityParentLinkTable.ParentType == parentType &&
                smmActivityParentLinkTable.RefRecId   == refRecId;

        if (currentSmmActivities.RecId > 0)
        {
            return checkFailed(strFmt("@SYS128564", tablePName(smmActivityParentLinkTable), "@SYS80847"));
        }
        else
        {
            while select ActivityNumber from currentSmmActivities where currentSmmActivities.Closed == NoYes::Yes
                join RecId from smmActivityParentLinkTable
                where smmActivityParentLinkTable.ActivityNumber == currentSmmActivities.ActivityNumber &&
                    smmActivityParentLinkTable.ParentType == parentType &&
                    smmActivityParentLinkTable.RefRecId   == refRecId
            {
                //We need to delete this prior to ValidateDelete.super since the DELETE ACTION is called out as soon as super is executed
                smmActivityParentLinkTable deleteParentLinkTable;
                delete_from deleteParentLinkTable where
                    deleteParentLinkTable.ActivityNumber == currentSmmActivities.ActivityNumber &&
                    deleteParentLinkTable.ParentType     == parentType     &&
                    deleteParentLinkTable.RefRecId       == refRecId;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>email</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the primary e-mail electronic address for the party of the business relation.
    /// </summary>
    /// <returns>
    /// The primary e-mail electronic address for the party of the business relation.
    /// </returns>
    display Email email()
    {
        LogisticsElectronicAddress electronicAddress;

        electronicAddress = DirParty::primaryElectronicAddress(this.Party, LogisticsElectronicAddressMethodType::Email);

        return electronicAddress ? electronicAddress.Locator : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>hoursOfBusiness</Name>
				<Source><![CDATA[
    display smmHoursOfBusiness hoursOfBusiness()
    {
        if (hasFieldAccess(this.TableId,fieldNum(smmBusRelTable,OpenToTime)) && hasFieldAccess(this.TableId,fieldNum(smmBusRelTable,OpenFromTime)))
        {
            return strFmt("@SYS110430",time2str(this.OpenFromTime,1,2),time2str(this.OpenToTime,1,2));
        }
        else
        {
            return "";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayB2bProspectStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to display the RetailB2BProspectStatus from the RetailSmmBusRelTable table if that table has a record
    /// that is associated with the smmBusRelTable via RecId. If a record does not exist in RetailSmmBusRelTable, then an
    /// RetailB2BProspectStatus::Unknown is returned, which has no label so the Form will display blank value instead of 'Pending'.
    /// </summary>
    /// <param name="_smmBusRelTable">
    /// The smmBusRelTable to to find associated records within RetailSmmBusRelTable table based on RecId.
    /// </param>
    /// <returns>
    /// If a record is found in RetailSmmBusRelTable, then its RetailB2BProspectStatus. Otherwise, RetailB2BProspectStatus::Unknown.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display RetailB2BProspectStatus displayB2bProspectStatus(smmBusRelTable _smmBusRelTable)
    {
        RetailSmmBusRelTable rsbrt;

        select firstonly B2BProspectStatus from rsbrt
            where rsbrt.smmBusRelTable == _smmBusRelTable.RecId;

        if (rsbrt)
        {
            return rsbrt.B2BProspectStatus;
        }
        else
        {
            // The 'Unknown' enum does not have a lable, so it will show up as a blank entry in the Form.
            // This is intential since not all smmBusRelTable records are B2B prospect type so they do not have
            // a 'Pending' status, which would be the default enum value if 'Unknown' was not available.
            return RetailB2BProspectStatus::Unknown;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromDirParty</Name>
				<Source><![CDATA[
    void initFromDirParty(DirParty _dirParty)
    {
        this.Party = _dirParty.getRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initialize values of a new record.
    /// </summary>
    public void initValue()
    {
        ttsbegin;

        smmParametersTable smmParametersTable = smmParametersTable::find();

        this.setMainContact();

        this.BusRelTypeId = smmParametersTable.BusRelTypeId;

        this.CustGroup      = smmParametersTable.CustGroup;
        this.VendGroup      = smmParametersTable.VendGroupId;

        this.DirectMail     = NoYes::Yes;

        this.OpenFromTime   = smmParametersTable.OpenFromTime;
        this.OpenToTime     = smmParametersTable.OpenToTime;

        this.Currency       = smmParametersTable.CurrencyCode;

        if (!this.Currency)
        {
            this.Currency   = Ledger::accountingCurrency(CompanyInfo::current());
        }

        this.Status         = smmParametersTable.BusRelStatus;

        ttscommit;

        super();
        this.Party = 0;            // Reset PartyId, it might be set when templates are used
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts an element into a table and updates the CRM transaction log.
    /// </summary>
    public void insert()
    {
        smmProspectInstrumentationActivities prospectActivities = smmBusRelTable::instrumentationLogger().prospectActivities();

        using (SysInstrumentationActivityContext activityContext = prospectActivities.insert(this))
        {
            ttsbegin;

            prospectActivities.logProspect(activityContext, this);

            super();

            // Insert the new search text, as long as it is not tied to a customer/vendor
            if (smmBusRelTypeGroup::find(this.BusRelTypeId).TableType == smmBusRelTypeSourceTable::Relation)
            {
                MCRFullTextSearch::insert(this);
            }

            DirPartyRelationship::createLegalEntityRelationship(this.Party, this.DataAreaId, DirSystemRelationshipType::Prospect);

            // Insert record in CRM transaction log
            smmTransLog::initTrans(this, smmLogAction::insert);

            // Create default location if using existing party
            LogisticsLocationDefaultAppUtil::createDefaultForExistingParty(this);

            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter))
                || isConfigurationkeyEnabled(configurationKeyNum(Retail)))
            {
                this.SysExtensionSerializerMap::postInsert();
            }

            this.writeAndValidateCrossCompany(tableMethodStr(smmBusRelTable, insert));

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainContactName</Name>
				<Source><![CDATA[
    display CrmWorkerRecId mainContactName()
    {
        return this.MainContactWorker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrives the primary postal city for the business relation's party.
    /// </summary>
    /// <returns>
    /// The primary postal city for the business relation's party.
    /// </returns>
    private LogisticsAddressCityName mcrCity()
    {
        return DirParty::primaryPostalAddress(this.Party).City;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrHasOpenQuote</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if this business relations record has an open quote.
    /// </summary>
    /// <returns>
    ///     <c>NoYes::Yes</c> if this business relations record has an open quote;
    ///     otherwise, <c>NoYes::No</c>.
    /// </returns>
    public display NoYes mcrHasOpenQuote()
    {
        SalesQuotationTable salesQuotationTable;
        select firstonly RecId from salesQuotationTable
            where  salesQuotationTable.BusRelAccount == this.BusRelAccount
            && (    salesQuotationTable.QuotationStatus == SalesQuotationStatus::Created
                ||  salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent);

        return salesQuotationTable.RecId != 0 ? NoYes::Yes : NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInitMCRFieldsFromCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads fields from the passed <c>CustTable</c> record to the <c>smmBusRelTable</c> record.
    /// </summary>
    /// <param name="_custTable">
    /// A record in the <c>CustTable</c> table.
    /// </param>
    public void mcrInitMCRFieldsFromCustomer(CustTable _custTable)
    {
        MCRsmmBusRelTable       mcrsmmBusRelTable;

        mcrsmmBusRelTable       = MCRsmmBusRelTable::find(this.RecId);
        if (mcrsmmBusRelTable)
        {
            mcrsmmBusRelTable.setCustTableFields(_custTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrIsListDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not the current prospect has
    ///     been deleted.
    /// </summary>
    /// <returns>
    /// true, if prospect has been deleted; otherwise, false.
    /// </returns>
    public boolean mcrIsListDeleted()
    {
        MCRsmmBusRelTable mcrsmmBusRelTable = MCRsmmBusRelTable::find(this.RecId);

        return (mcrSmmBusRelTable && mcrsmmbusrelTable.isListDeleted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrPackMCRsmmBusRelTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the prospect information.
    /// </summary>
    /// <param name="_mcrsmmBusRelTable">
    /// The prospect reference.
    /// </param>
    public void mcrPackMCRsmmBusRelTable(MCRsmmBusRelTable _mcrsmmBusRelTable)
    {
        _mcrsmmBusRelTable.smmBusRelTable = this.RecId;

        this.SysExtensionSerializerMap::packExtensionTable(_mcrsmmBusRelTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrsmmBusRelTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recovers MCR extension table
    /// </summary>
    /// <returns>
    /// A record of <c>MCRsmmBusRelTable</c>
    /// </returns>
    public MCRsmmBusRelTable mcrsmmBusRelTable()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(MCRsmmBusRelTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrStreet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrives the primary postal street for the business relation's party.
    /// </summary>
    /// <returns>
    /// The primary postal street for the business relation's party.
    /// </returns>
    private LogisticsAddressStreet mcrStreet()
    {
        return DirParty::primaryPostalAddress(this.Party).Street;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSynchDefaultContact</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the default contact which should
    /// be created when the user populates/updates the name fields
    /// on the business relation.
    /// </summary>
    private void mcrSynchDefaultContact()
    {
        ContactPerson   contactPerson;
        NumberSeq       numberSeq;

        ttsbegin;
        contactPerson = ContactPerson::findByPartyRecId(this.Party,true);

        if (!contactPerson)
        {
            numberSeq = NumberSeq::newGetNum(NumberSeqReference::findReference(extendedTypeNum(ContactPersonId)));

            if (!numberSeq)
            {
                throw error("@MCR25393");
            }
            contactPerson.ContactPersonId = numberSeq.num();
            contactPerson.initFromBusRel(this);
            contactPerson.MCRIsDefaultContact = NoYes::Yes;

            if (contactPerson.validateWrite())
            {
                contactPerson.write();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrUpdateTargetLists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates target list w/ cust account when a prospect gets converted to a customer.
    /// </summary>
    /// <param name="_busRelTable">
    /// The <c>smmBusRelTable</c> table record to find a target list.
    /// </param>
    /// <param name="_custTable">
    /// The <c>CustTable</c> table record to update the target list.
    /// </param>
    public void mcrUpdateTargetLists(smmBusRelTable  _busRelTable, CustTable _custTable)
    {
        MCRTargetList     mcrTargetList;
        // Update all target lists connected to this BusRelAccount
        ttsbegin;

        // Run through all quotation tables
        while select forupdate mcrTargetList
            where mcrTargetList.Party == _busRelTable.Party
        {
            // Set the CustAccount on the TargetList
            mcrTargetList.CustAccount = _custTable.AccountNum;
            mcrTargetList.Party = _custTable.Party;
            if (mcrTargetList.validateWrite())
            {
                mcrTargetList.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrZipCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrives the primary postal zipcode for the business relation's party.
    /// </summary>
    /// <returns>
    /// The primary postal zipcode for the business relation's party.
    /// </returns>
    private LogisticsAddressZipCodeId mcrZipCode()
    {
        return DirParty::primaryPostalAddress(this.Party).ZipCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name for the party of the business relation.
    /// </summary>
    /// <returns>
    /// The name for the party of the business relation.
    /// </returns>
    display DirPartyName name()
    {
        DirPartyTable   dirPartyTable;
        DirPartyName    partyName;
        boolean         isSet = false;

        if (this.hasRelatedTable(identifierStr(dirPartyTable)))
        {
            dirPartyTable = this.relatedTable(identifierStr(dirPartyTable)) as DirPartyTable;

            //Check to make sure the fields we are accessing are selected.
            if (dirPartyTable && dirPartyTable.isFieldDataRetrieved(fieldStr(DirPartyTable, Name)))
            {
                partyName = dirPartyTable.Name;
                isSet = true;
            }
        }

        //If we aren't joined to DirPartyTable or it isn't selected, then do a query to get it.
        if (!isSet)
        {
            partyName = DirPartyTable::getName(this.Party);
        }

        return partyName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the type of the party for the business relation.
    /// </summary>
    /// <returns>
    /// The type of the party for the business relation.
    /// </returns>
    DirPartyType partyType()
    {
        return DirPartyTable::findRec(this.Party).type();
    }

]]></Source>
			</Method>
			<Method>
				<Name>phone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the primary telephone for the party of the business relation.
    /// </summary>
    /// <returns>
    /// The primary telephone for the party of the business relation.
    /// </returns>
    display Phone phone()
    {
        LogisticsElectronicAddress electronicAddress;

        electronicAddress = DirParty::primaryElectronicAddress(this.Party, LogisticsElectronicAddressMethodType::Phone);

        return electronicAddress ? electronicAddress.Locator : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>phoneLocal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the local telephone or extension for the party of the business relation.
    /// </summary>
    /// <returns>
    /// The local telephone or extension for the party of the business relation.
    /// </returns>
    display PhoneLocal phoneLocal()
    {
        LogisticsElectronicAddress electronicAddress;

        electronicAddress = DirParty::primaryElectronicAddress(this.Party, LogisticsElectronicAddressMethodType::Phone);

        return electronicAddress ? electronicAddress.LocatorExtension : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>postalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the primary postal address for the party of the business relation.
    /// </summary>
    /// <returns>
    /// The primary postal address for the party party of the business relation.
    /// </returns>
    LogisticsPostalAddress postalAddress()
    {
        return DirParty::primaryPostalAddress(this.Party);
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewPaneTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gives the title on top of the preview pane.
    /// </summary>
    /// <returns>
    /// The title field of the preview pane.
    /// </returns>
    display Caption previewPaneTitle()
    {
        return strFmt("@SYS327590", this.BusRelAccount, this.name());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustomerFromBusinessRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a customer by using the specified business relation and sets the fields of the
    /// <c>CustTable</c> table by using the values from the specified business relation.
    /// </summary>
    /// <param name="_smmBusRelTable">
    /// The business relation.
    /// </param>
    /// <param name="_custAccount">
    /// The customer account.
    /// </param>
    /// <returns>
    /// The customer account of the inserted record.
    /// </returns>
    protected CustAccount createCustomerFromBusinessRelation(smmBusRelTable _smmBusRelTable, CustAccount _custAccount = '')
    {
        const str blank = '';

        if (!_smmBusRelTable.RecId)
        {
            return blank;
        }

        ttsbegin;

        CustTable custTable;

        smmBusRelTableConvert2CustomerContext convert2CustomerContext = smmBusRelTableConvert2CustomerContext::current();

        if (convert2CustomerContext
            && convert2CustomerContext.parmUpdateCustomer()
            && smmBusRelTablePersonUpdateReferencesFlight::instance().isEnabled())
        {
            custTable = CustTable::findByPartyRecId(_smmBusRelTable.Party, true);

            this.initCustomerRecordFromBusinessRelation(_smmBusRelTable, custTable);

            custTable.update();
        }
        else
        {
            // Insert customer, but don't update back on the business relation table
            boolean updateCRM = !isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter));

            custTable = this.initCustomerFromBusinessRelation(_smmBusRelTable, _custAccount);

            custTable.insert(DirPartyType::None, '', updateCRM);
        }

        ttscommit;

        return custTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustomerFromBusinessRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a customer by using the specified business relation and sets the fields of the
    /// <c>CustTable</c> table by using the values from the specified business relation.
    /// </summary>
    /// <param name="_smmBusRelTable">
    /// The business relation.
    /// </param>
    /// <param name="_custAccount">
    /// The customer account.
    /// </param>
    /// <returns>
    /// The initialized <c>CustTable</c> record.
    /// </returns>
    protected CustTable initCustomerFromBusinessRelation(smmBusRelTable _smmBusRelTable, CustAccount _custAccount)
    {
        CustTable custTable;
        custTable.clear();
        custTable.initValue();

        if (!_custAccount)
        {
            custTable.AccountNum = smmParameters::getNumber(smmNumbSeqUsed::Customer);
        }
        else
        {
            custTable.AccountNum = _custAccount;
        }

        if (custTable.AccountNum)
        {
            custTable.Party                 = _smmBusRelTable.Party;

            this.initCustomerRecordFromBusinessRelation(_smmBusRelTable, custTable);

            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
            {
                this.mcrInitMCRFieldsFromCustomer(custTable);
                custTable.Party = _smmBusRelTable.Party;
            }

            RetailSmmBusRelTable retailSmmBusRelTable = RetailSmmBusRelTable::findBySmmBusRelTableRefRecId(_smmBusRelTable.RecId);

            // Initialize mcrCustTable fields using default channel customer record
            CustTable channelDefaultCustomer = CustTable::find(RetailChannelTable::findByRecId(retailSmmBusRelTable.RetailChannel).DefaultCustAccount);
            RetailTransactionServiceCustomer::initCustTableUsingChannelDefaultCustomer(custTable, channelDefaultCustomer);
        }
        else
        {
            throw error("@SalesAndMarketing:ConvertToCustomerError");
        }

        return custTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustomerRecordFromBusinessRelation</Name>
				<Source><![CDATA[
    protected void initCustomerRecordFromBusinessRelation(smmBusRelTable _smmBusRelTable, CustTable _custTable)
    {
        _custTable.initFromCustGroup(CustGroup::find(_smmBusRelTable.CustGroup));

        if (_smmBusRelTable.CustGroup)
        {
            _custTable.CustGroup         = _smmBusRelTable.CustGroup;
        }

        if (_smmBusRelTable.Currency)
        {
            _custTable.Currency          = _smmBusRelTable.Currency;
        }

        if (_smmBusRelTable.DefaultDimension)
        {
            _custTable.DefaultDimension = _smmBusRelTable.DefaultDimension;
        }

        _custTable.CompanyIdSiret        = _smmBusRelTable.CompanyIdSiret;
        _custTable.CompanyNAFCode        = _smmBusRelTable.CompanyNAFCode;

        _custTable.Blocked               = _smmBusRelTable.Blocked;
        _custTable.OneTimeCustomer       = _smmBusRelTable.OneTimeRelation;
        _custTable.CreditMax             = _smmBusRelTable.CreditMax;
        _custTable.CreditRating          = _smmBusRelTable.CreditRating;
        _custTable.MandatoryCreditLimit  = _smmBusRelTable.MandatoryCreditLimit;
        _custTable.DlvTerm               = _smmBusRelTable.DlvTerm;
        _custTable.SalesCalendarId       = _smmBusRelTable.SalesCalendarId;
        _custTable.DlvMode               = _smmBusRelTable.DlvMode;
        _custTable.FreightZone           = _smmBusRelTable.FreightZone;
        _custTable.DestinationCodeId     = _smmBusRelTable.DestinationCodeId;

        if (_smmBusRelTable.InclTax)
        {
            _custTable.InclTax = _smmBusRelTable.InclTax;
        }

        if (_smmBusRelTable.TaxGroup)
        {
            _custTable.TaxGroup = _smmBusRelTable.TaxGroup;
        }

        _custTable.SegmentId             = _smmBusRelTable.Segment;
        _custTable.SubsegmentId          = _smmBusRelTable.Subsegment;
        _custTable.SalesDistrictId       = _smmBusRelTable.SalesDistrict;
        _custTable.CompanyChainId        = _smmBusRelTable.CompanyChain;
        _custTable.MainContactWorker     = _smmBusRelTable.MainContactWorker;
        _custTable.Memo                  = _smmBusRelTable.Memo;
        _custTable.LineOfBusinessId      = _smmBusRelTable.LineOfBusinessId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>smmBusRelTable</c> record from a <c>VendTable</c> record.
    /// </summary>
    /// <param name = "_type">The <c>smmBusRelTypeId</c> value.</param>
    /// <param name = "_vendTable">The <c>VendTable</c> record from which to initialize.</param>
    public void initFromVendTable(smmBusRelTypeId _type, VendTable _vendTable)
    {
        this.Party                = _vendTable.Party;
        this.BusRelTypeId         = _type;
        this.DefaultDimension     = _vendTable.DefaultDimension;
        this.LineOfBusinessId     = _vendTable.LineOfBusinessId;
        this.Currency             = _vendTable.Currency;
        this.CustGroup            = '';
        this.VendGroup            = _vendTable.VendGroup;
        this.TaxGroup             = _vendTable.TaxGroup;
        this.CompanyNAFCode       = _vendTable.CompanyNAFCode;
        this.CompanyIdSiret       = _vendTable.CompanyIdSiret;

        this.Blocked              = _vendTable.Blocked;
        this.OneTimeRelation      = _vendTable.OneTimeVendor;

        this.CreditMax            = _vendTable.CreditMax;
        this.CreditRating         = _vendTable.CreditRating;

        this.DlvTerm              = _vendTable.DlvTerm;
        this.DlvMode              = _vendTable.DlvMode;
        this.FreightZone          = _vendTable.FreightZone;
        this.DestinationCodeId    = _vendTable.DestinationCodeId;

        this.InclTax              = _vendTable.InclTax;

        this.FiscalCode           = _vendTable.FiscalCode;

        this.Segment              = _vendTable.SegmentId;
        this.Subsegment           = _vendTable.SubsegmentId;
        this.CompanyChain         = _vendTable.CompanyChainId;
        this.MainContactWorker    = _vendTable.MainContactWorker;
        this.Memo                 = _vendTable.Memo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeConvertedBusRel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an <c>smmConvertedBusRel</c> instance.
    /// </summary>
    /// <param name = "_tableId">The table id of the caller table.</param>
    /// <param name = "_account">The account number of the customer/vendor.</param>
    /// <returns>An <c>smmConvertedBusRel</c> instance.</returns>
    protected smmConvertedBusRel initializeConvertedBusRel(TableId _tableId, CustVendAC _account)
    {
        smmConvertedBusRel convertedBusRel;

        convertedBusRel.initFromBusRelTable(this);

        switch (_tableId)
        {
            case tableNum(CustTable) :
                convertedBusRel.CustAccount = _account;
                break;

            case tableNum(VendTable) :
                convertedBusRel.VendAccount = _account;
                break;
        }

        return convertedBusRel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>relation2Vendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a vendor from a specified business relation.
    /// </summary>
    /// <param name="_smmBusRelTable">
    /// The business relation vendor.
    /// </param>
    /// <param name="_vendAccount">
    /// The vendor account.
    /// </param>
    /// <returns>
    /// The vendor account of the inserted record.
    /// </returns>
    /// <remarks>
    /// The fields of the <c>VendTable</c> table are set with the values from the business relation.
    /// </remarks>
    private VendAccount relation2Vendor(smmBusRelTable _smmBusRelTable, VendAccount _vendAccount = '')
    {
        if (!_smmBusRelTable.RecId)
        {
            return '';
        }

        // Check that vend group is filled out on the business relation
        if (!_smmBusRelTable.VendGroup)
        {
            // Cannot convert to vendor because no vendor group is selected. Please select a vendor group in the General tab
            checkFailed("@SYS80328");

            return '';
        }

        ttsbegin;

        VendTable vendTable = null;
        vendTable.clear();
        vendTable.initValue();

        if (!_vendAccount)
        {
            if (smmBusRelTableVendGroupNumSeqInUseFlight::instance().isEnabled())
            {
                vendTable.initAccountNum(VendGroup::find(_smmBusRelTable.VendGroup));
            }
            else
            {
                vendTable.AccountNum  = smmParameters::getNumber(smmNumbSeqUsed::Vendor);      
            }
        }
        else
        {
            vendTable.AccountNum        = _vendAccount;
        }

        if (vendTable.AccountNum)
        {
            vendTable.initFromSmmBusRelTable(_smmBusRelTable);

            vendTable.Party             = _smmBusRelTable.Party;
            vendTable.initFromVendGroup(VendGroup::find(_smmBusRelTable.VendGroup));
            vendTable.InclTax           = _smmBusRelTable.InclTax;
            if (_smmBusRelTable.TaxGroup)
            {
                vendTable.TaxGroup = _smmBusRelTable.TaxGroup;
            }

            vendTable.insert();

            ttscommit;
        }
        else
        {
            ttsabort;
        }

        return vendTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Renames foreign keys in other tables according to the change of the corresponding primary key value
    /// in this table.
    /// </summary>
    /// <remarks>
    /// This method is needed to make sure that no duplicates are generated.
    /// </remarks>
    public void renamePrimaryKey()
    {
        Common originalRecord = this.orig();

        DimensionValueRenameV2 rename = DimensionValueRenameV2::construct(this, originalRecord);
        rename.syncRenamedValuePreSuper();

        super();

        rename.syncRenamedValuePostSuper();
        
        this.writeAndValidateCrossCompany(tableMethodStr(smmBusRelTable, renamePrimaryKey), 0, originalRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMainContact</Name>
				<Source><![CDATA[
    /// <summary>
    /// Uses the <c>smmUtility</c> class to set the main contact.
    /// </summary>
    private void setMainContact()
    {
        // Set main contact to the current employee logged on
        this.MainContactWorker = smmUtility::getCurrentContactWorker();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDocHanIcon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the icon that handles the document.
    /// </summary>
    /// <returns>
    /// The icon number.
    /// </returns>
    display smmDocIconNum showDocHanIcon()
    {
        #macrolib.resource

        if (this.Party && this.DataAreaId && (select firstonly docuRef where docuRef.RefCompanyId  == this.DataAreaId && docuRef.Party == this.Party).RecId)
        {
            return #RES_NODE_DOC;
        }

        return #RES_AM_NEW;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showEndTime</Name>
				<Source><![CDATA[
    display smmEndTimeAsString showEndTime()
    {
        if (hasFieldAccess(this.TableId,fieldNum(smmBusRelTable,OpenToTime)))
        {
            return time2str(this.OpenToTime,1,2);
        }
        else
        {
            return "";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showMainContactName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the name of the main contact.
    /// </summary>
    /// <returns>
    /// The name of the main contact.
    /// </returns>
    display EmplName showMainContactName()
    {
        DirPartyTable   partyTable;
        HcmWorker       hcmWorker;

        // Return the name of the main responsible

        select RecId from hcmWorker
                where hcmWorker.RecId == this.MainContactWorker
            join Name from partyTable
                where partyTable.RecId == hcmWorker.Person;

        return partyTable.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPartyMatchIcon</Name>
				<Source><![CDATA[
    display DirPartyMatchIcon showPartyMatchIcon()
    {
        return DirParty::showPartyMatchIcon(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showStartTime</Name>
				<Source><![CDATA[
    display smmStartTimeAsString showStartTime()
    {
        if (hasFieldAccess(this.TableId,fieldNum(smmBusRelTable,OpenFromTime)))
        {
            return time2str(this.OpenFromTime,1,2);
        }
        else
        {
            return "";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(boolean _updateMasterTables = true)
    {
        smmProspectInstrumentationActivities prospectActivities = smmBusRelTable::instrumentationLogger().prospectActivities();

        using (SysInstrumentationActivityContext activityContext = prospectActivities.update(this))
        {
            smmBusRelTable this_Orig = this.orig();

            ttsbegin;

            prospectActivities.logProspect(activityContext, this);

            super();

            smmBusRelTypeGroup busRelTypeGroup = smmBusRelTypeGroup::find(this.BusRelTypeId);

            // Update the new search text, as long as it is not tied to a customer/vendor
            this.updateMCRFullTextSearch(busRelTypeGroup);

            // Write to CRM transaction log
            smmTransLog::initTrans(this, smmLogAction::update);

            // Should the relation master table be updated
            this.updateMasterTables(_updateMasterTables, busRelTypeGroup);

            this.writeAndValidateCrossCompany(tableMethodStr(smmBusRelTable, update), 0, this_Orig, _updateMasterTables);

            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter))
                || isConfigurationkeyEnabled(configurationKeyNum(Retail)))
            {
                this.SysExtensionSerializerMap::postUpdate();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProspectFromCustomer</Name>
				<Source><![CDATA[
    internal boolean updateProspectFromCustomer(CustTable _customer)
    {
        boolean updateReferences;

        if (!_customer.RecId)
        {
            smmBusRelTableConvert2CustomerContext convert2CustomerContext = smmBusRelTableConvert2CustomerContext::current();

            SalesParameters salesParameters = SalesParameters::find();

            if (!convert2CustomerContext
                && salesParameters.isD365SalesQuotationLifecycleAndProspectIntegrationEnabled()
                && smmBusRelTableCreateCustomerUpdateReferencesFlight::instance().isEnabled())
            {
                smmBusRelTable this_Orig = this.orig();

                smmBusRelTypeGroup busRelTypeGroup = smmBusRelTypeGroup::find(this.BusRelTypeId);

                if (this.BusRelTypeId != this_Orig.BusRelTypeId)
                {
                    smmBusRelTypeGroup origBusRelTypeGroup = smmBusRelTypeGroup::find(this_Orig.BusRelTypeId);

                    if (busRelTypeGroup.TableType == smmBusRelTypeSourceTable::Customer
                        && origBusRelTypeGroup.TableType == smmBusRelTypeSourceTable::Relation)
                    {
                        updateReferences = true;
                    }
                }
            }
        }

        this.update(false);

        return updateReferences;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReferencesForConvertedProspect</Name>
				<Source><![CDATA[
    internal void updateReferencesForConvertedProspect(CustTable _customer, smmBusRelTypeId _smmBusRelTypeId)
    {
        if (_customer.AccountNum != this.BusRelAccount
            && smmBusRelCustomerMatchAccountFlight::instance().isEnabled()
            && SalesParameters::find().isD365SalesQuotationLifecycleAndProspectIntegrationEnabled())
        {
            throw error(strFmt("@SalesAndMarketing:ProspectCannotCreateCustomerNotSameAccountError", _customer.AccountNum, this.BusRelAccount));
        }

        smmProspectInstrumentationActivities prospectActivities = smmBusRelTable::instrumentationLogger().prospectActivities();

        using (SysInstrumentationActivityContext convertActivityContext = prospectActivities.updateReferencesForConvertedProspect())
        {
            convertActivityContext.addCustomProperty(tableStr(smmBusRelTable), int642Str(this.RecId));
            convertActivityContext.addCustomProperty(tableStr(CustTable), int642Str(_customer.RecId));

            if (_customer.RecId)
            {
                this.convert2CustomerOrVendor(_customer);

                boolean deleteAfterConversion = smmBusRelTypeGroup::find(_smmBusRelTypeId).DelBusRelTable;
                
                convertActivityContext.addCustomProperty('DelBusRelTable', int2str(deleteAfterConversion));

                if (deleteAfterConversion)
                {
                    this.delete();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMasterTables</Name>
				<Source><![CDATA[
    private void updateMasterTables(boolean _updateMasterTables, smmBusRelTypeGroup _busRelTypeGroup)
    {
        if (_updateMasterTables)
        {
            switch (_busRelTypeGroup.TableType)
            {
                case smmBusRelTypeSourceTable::Customer :
                    // Write relation information back to the customer
                    this.updateCustTable();
                    break;

                case smmBusRelTypeSourceTable::Vendor :
                    // Write relation information back to the vendor
                    this.updateVendTable();
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMCRFullTextSearch</Name>
				<Source><![CDATA[
    private void updateMCRFullTextSearch(smmBusRelTypeGroup _busRelTypeGroup)
    {
        
        if (_busRelTypeGroup.TableType == smmBusRelTypeSourceTable::Relation && !this.mcrIsListDeleted())
        {
            MCRFullTextSearch::update(this);
        }
        else
        {
            // If the relation is being assigned a customer or a vendor, then delete the search
            MCRFullTextSearch::delete(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates an entry in the <c>CustTable</c> table with the values from the <c>BusRelTable</c> table.
    /// </summary>
    protected void updateCustTable()
    {
        CustTable custTable = this.initCustTable();

        ttsbegin;

        if (custTable)
        {
            // Update customer , business relation should not be updated again in this call
            custTable.update(false,false);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an entry in the <c>CustTable</c> table for update using the values from the <c>BusRelTable</c> table.
    /// </summary>
    protected CustTable initCustTable()
    {
        // Find customer connected to the business relation
        CustTable custTable = CustTable::findByPartyRecId(this.Party, true);

        if (custTable)
        {
            // Update customer with information from business relation
            custTable.DefaultDimension      = this.DefaultDimension;
            custTable.LineOfBusinessId      = this.LineOfBusinessId;
            custTable.CustGroup             = this.CustGroup;
            custTable.CompanyNAFCode        = this.CompanyNAFCode;
            custTable.CompanyIdSiret        = this.CompanyIdSiret;

            custTable.Blocked               = this.Blocked;
            custTable.OneTimeCustomer       = this.OneTimeRelation;
            custTable.CreditMax             = this.CreditMax;
            custTable.CreditRating          = this.CreditRating;
            custTable.MandatoryCreditLimit  = this.MandatoryCreditLimit;
            custTable.DlvTerm               = this.DlvTerm;
            custTable.DlvMode               = this.DlvMode;
            custTable.FreightZone           = this.FreightZone;
            custTable.DestinationCodeId     = this.DestinationCodeId;

            custTable.InclTax               = this.InclTax;

            custTable.SalesDistrictId        = this.SalesDistrict;
            custTable.SegmentId              = this.Segment;
            custTable.SubsegmentId           = this.Subsegment;
            custTable.CompanyChainId         = this.CompanyChain;
            custTable.MainContactWorker      = this.MainContactWorker;
            custTable.Memo                   = this.Memo;

            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
            {
                this.mcrInitMCRFieldsFromCustomer(custTable);
            }
        }

        return custTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuotationJournals</Name>
				<Source><![CDATA[
    public void updateQuotationJournals(CustAccount _custAccount)
    {
        CustQuotationJour      custQuotationJour;

        // Update all quotation journals connected to the business relation
        ttsbegin;

        update_recordset custQuotationJour
            setting InvoiceAccount  = _custAccount,
                    OrderAccount    = _custAccount
            where custQuotationJour.BusRelAccount == this.BusRelAccount;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuotations</Name>
				<Source><![CDATA[
    public void updateQuotations(CustAccount _custAccount)
    {
        SalesQuotationTable     salesQuotationTable;
        SalesQuotationLine      salesQuotationLine;

        // Update all quotations connected to this BusRelAccount
        ttsbegin;

        // Run through all quotation tables
        while select forupdate salesQuotationTable where salesQuotationTable.BusRelAccount == this.BusRelAccount
        {
            this.assignCustomer(salesQuotationTable, _custAccount);
            salesQuotationTable.update(false);

            // Run through all quotation lines
            while select forupdate salesQuotationLine where salesQuotationLine.QuotationId == salesQuotationTable.QuotationId
            {
                // Set the CustAccount and CustGroup on the SalesQuotationLine
                salesQuotationLine.CustAccount  = _custAccount;
                salesQuotationLine.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns customer to quotation.
    /// </summary>
    /// <param name="_salesQuotationTable">
    /// A sales quotation header record wher the customer account fields needs to be changed
    /// </param>
    /// <param name="_custAccount">
    /// The new customer account.
    /// </param>
    protected void assignCustomer(SalesQuotationTable _salesQuotationTable, CustAccount _custAccount)
    {
        // Set the CustAccount on the SalesQuotationTable
        _salesQuotationTable.CustAccount     = _custAccount;
        _salesQuotationTable.InvoiceAccount  = _custAccount;
        _salesQuotationTable.BusRelAccount   = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReferences</Name>
				<Source><![CDATA[
    // When a prospect is converted to customer/vendor all references need to be updated to new customer/vendor
    public void updateReferences(TableId _tableId,RecId _recId,DataAreaId _dataAreaId,CustVendAC _account)
    {
        unchecked(Uncheck::XDS)
        {
            ttsbegin;

            if (this.RecId)
            {
                // update activity links
                this.convertActivities(this.TableId, this.RecId, _tableId, _recId);

                // Change the responsibility assignments from prospect to customer/vendor
                this.convertResponsibilityAssignments(_tableId,_recId);

                // Change the assignments of contactpersons from relation to customer/vendor
                if (_tableId != tableNum(VendTable))
                {
                    this.convertContacts(_tableId, _account);
                }

                // Transfer document from the relation to the new customer/vendor
                smmBusRelTable::transferDocuments(this.TableId, this.RecId, this.DataAreaId,  _tableId, _recId, _dataAreaId);

                // Update Source Type References on Lead and Opportunity records
                smmSourceType::updateSourceType(_tableId,this.RecId, _recId);

                // Customer specific references
                if (_tableId == tableNum(CustTable))
                {
                    // Find and update all quotations
                    this.updateQuotations(_account);

                    // Find and update all quotation journals
                    this.updateQuotationJournals(_account);
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>VendTable</c> table with values from the <c>BusRelTable</c> table.
    /// </summary>
    protected void updateVendTable()
    {
        ttsbegin;

        // Find vendor connected to the business relation
        VendTable vendTable = VendTable::findByPartyRecId(this.Party, true);

        if (vendTable)
        {
            vendTable.initFromSmmBusRelTable(this);
            
            vendTable.LineOfBusinessId  = this.LineOfBusinessId;
            vendTable.InclTax           = this.InclTax;

            // Update vendor. Business relation should not be update again in this call
            vendTable.update(false, false);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>url</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the primary UDL electronic address for the party of the business relation.
    /// </summary>
    /// <returns>
    /// The primary URL electronic address for the party of the business relation.
    /// </returns>
    display URL url()
    {
        LogisticsElectronicAddress electronicAddress;

        electronicAddress = DirParty::primaryElectronicAddress(this.Party, LogisticsElectronicAddressMethodType::URL);

        return electronicAddress ? electronicAddress.Locator : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = this.deleteActivityParentLink();
        
        ret = ret && this.writeAndValidateCrossCompany(tableMethodStr(smmBusRelTable, validateDelete));
        
        if (ret)
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldId)
    {
        smmBusRelTable busRelTableOrig = this.orig();

        boolean ret = super(_fieldId);

        if (ret)
        {
            switch (_fieldId)
            {
                case fieldNum(smmBusRelTable, CreditMax) :
                    if (this.CreditMax < 0)
                    {
                        // The credit maximum cannot be a negative amount
                        ret = checkFailed("@SYS69970");
                    }
                    break;

                case fieldNum(smmBusRelTable, MainContactWorker) :
                    if (this.MainContactWorker && !(CustTableAllowCrossCompanyEmployeeFlight::instance().isEnabled() && CustParameters::find().AllowCrossCompanyEmployee))
                    {
                        ret = ret && smmUtility::isValidWorkerInCurrentCompany(this.MainContactWorker);
                        ret = ret && this.writeAndValidateCrossCompany(tableMethodStr(smmBusRelTable, validateField), _fieldId);
                    }
                    break;

                case fieldNum(smmBusRelTable, OpenFromTime):
                case fieldNum(smmBusRelTable, OpenToTime):
                    // Check that open to time is not before open from time
                    if (this.OpenFromTime > this.OpenToTime)
                    {
                        // The Closing time you have selected is before the Opening time.
                        warning("@SYS99916");
                    }
                    break;

                case fieldNum(smmBusRelTable, BusRelTypeId) :
                    ret = ret && this.validateFieldBusRelTypeIdCurrentCompany(busRelTableOrig);
                    ret = ret && this.writeAndValidateCrossCompany(tableMethodStr(smmBusRelTable, validateField), _fieldId, busRelTableOrig);
                    break;

                case fieldNum(smmBusRelTable, Blocked) :
                    // payment is not a valid option for a business relation
                    if (this.Blocked == CustVendorBlocked::Payment)
                    {
                        ret = checkFailed(strFmt("@SYS137754", "@SYS316613"));
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldBusRelTypeIdCurrentCompany</Name>
				<Source><![CDATA[
    private boolean validateFieldBusRelTypeIdCurrentCompany(smmBusRelTable _busRelTableOrig)
    {
        if (this.BusRelTypeId && smmBusRelTypeGroup::find(this.BusRelTypeId).TableType != smmBusRelTypeSourceTable::Relation)
        {
            // Cannot create business relation of type customer/vendor directly.
            return checkFailed("@SYS111990");
        }

        if (this.RecId 
            && _busRelTableOrig.BusRelTypeId && smmBusRelTypeGroup::find(this.BusRelTypeId).TableType == smmBusRelTypeSourceTable::Relation
            && smmBusRelTypeGroup::find(_busRelTableOrig.BusRelTypeId).TableType != smmBusRelTypeSourceTable::Relation)
        {
            // Cannot change business relation of type customer/vendor.
            return checkFailed("@SYS121463");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///       Check if record is well-formed.
    ///
    ///    <list type="bullet">
    ///       <item>
    ///          <description>Customer/vendor relation must be ok.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>If customer account specified, CustGroup must be set.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>If vendor account specified, VendGroup must be set.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>Parent business relation cannot point to itself.
    ///          </description>
    ///       </item>
    ///    </list>
    /// </summary>
    /// <param name="validateWorkerOnly">
    /// value of validateWorkerOnly
    /// </param>
    /// <returns>
    ///    True, if record ok.
    /// </returns>
    public boolean validateWrite(boolean validateWorkerOnly = false)
    {
        boolean ret = true;

        if (!validateWorkerOnly)
        {
            ret = super();

            if (ret && (!this.BusRelAccount || !this.BusRelTypeId))
            {
                ret = false;
            }
        }

        if (this.MainContactWorker && !(CustTableAllowCrossCompanyEmployeeFlight::instance().isEnabled() && CustParameters::find().AllowCrossCompanyEmployee))
        {
            ret = ret && smmUtility::isValidWorkerInCurrentCompany(this.MainContactWorker);
            ret = ret && this.writeAndValidateCrossCompany(tableMethodStr(smmBusRelTable, validateWrite));
        }

        ret = ret && this.validateIntegration();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIntegration</Name>
				<Source><![CDATA[
    internal boolean validateIntegration()
    {
        if (this.IsIntegration == TradeIntegrationType::Dynamics365Sales)
        {
            SalesParameters salesParameters = SalesParameters::find();

            if (!salesParameters.isD365SalesQuotationLifecycleAndProspectIntegrationEnabled())
            {
                return checkFailed(strFmt("@SalesAndMarketing:ProspectDynamics365Error", this.BusRelAccount, "@SalesAndMarketing:smmProspectD365SalesFeatureName"));
            }

            if (!salesParameters.DefaultProspectTypeId)
            {
                return checkFailed(strFmt("@SalesAndMarketing:ProspectTypeIdNotConfiguredDynamics365Error", "@SCM:SalesD365SalesIntegrationTabCaption", "@SYS76213"));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendAccount</Name>
				<Source><![CDATA[
    VendAccount vendAccount()
    {
        return VendTable::findByPartyRecId(this.Party).AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNumbersequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the number sequence is correct.
    /// </summary>
    /// <returns>
    /// true, if number sequence ok; otherwise, false.
    /// </returns>
    /// <remarks>
    /// For example, the number sequence cannot be normal.
    /// </remarks>
    public static boolean checkNumbersequence()
    {
        NumberSequenceTable     numberseq;
        NumberSequenceReference numberSequenceReference;
        boolean                 ret = true;

        select firstonly NumberSequenceId from numberSequenceReference where
            numberSequenceReference.NumberSequenceDatatype == NumberSequenceDatatype::findByDatatypeId(extendedTypeNum(smmBusRelAccount)).RecId;

        if (numberSequenceReference)
        {
            numberseq = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId);

            if (numberseq)
            {
                if (numberseq.Manual)
                {
                    // Business relation number sequence must not be manual
                    ret = checkFailed("@SYS81360");
                }
            }
            else
            {
                // Number sequence on business relation is missing
                ret = checkFailed("@SYS81361");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convert2Customer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a business relation to a type customer.
    /// </summary>
    /// <param name="_smmBusRelTable">
    /// The record to convert.
    /// </param>
    /// <param name="custAccountNo">
    /// The customer account number.
    /// </param>
    /// <param name="showCustAccountDialog">
    /// A <c>Boolean</c> value that specifies whether to show a customer account dialog box; optional.
    /// </param>
    /// <returns>
    /// A <c>NoYes</c> enumeration value that indicates whether the record was converted.
    /// </returns>
    /// <remarks>
    /// This method finds the customer account by first using the number sequence setup. Second, the
    /// business relation is converted to a customer. Finally, the values from the <c>CustAccount</c> table
    /// are inserted to the new record. This method will throw an update exception if the update cannot be
    /// performed.
    /// </remarks>
    public static NoYes convert2Customer(smmBusRelTable _smmBusRelTable, CustAccount custAccountNo = '', boolean showCustAccountDialog = true)
    {
        //Added two arguments in this method. ( custAccountNo & showCustAccountDialog)
        //The argument custAccountNo is used to input the custAccountNo incase this method is called from EP and
        //the NumberSequence is manual.
        //The argument showCustAccountDialog is to be used when called from EP so that CustAccount dialog is not shown
        //There is an alternate provision of entering the CustAccount in EP

        #OCCRetryCount

        CustAccount custAccount;
        SalesParameters salesParameters = SalesParameters::find();

        // Is customer number sequence manual
        //Also checking for showCustAccountDialog so that the CustAccount dialog is not
        //shown when this variable is false.
        if (showCustAccountDialog
            && smmParameters::isNumberSequenceManual(extendedTypeNum(CustAccount))
            && !salesParameters.isD365SalesQuotationLifecycleAndProspectIntegrationEnabled())
        {
            // Open form for input of customer account number
            custAccount = smmUtility::openAccountNumDialog(smmAccountNumToCreate::CustAccount);

            // Exit function if no account number was specified
            if (!custAccount)
            {
                // Conversion to customer could not be completed
                error("@SYS81993");

                return NoYes::No;
            }
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            // Prevent converting BR's that are flagged as deleted
            if (_smmBusRelTable.mcrIsListDeleted())
            {
                error("@MCR26182");
                return NoYes::No;
            }
        }

        using (SysInstrumentationActivityContext activityContext = smmBusRelTable::instrumentationLogger().prospectActivities().convert2Customer())
        {
            boolean deleteCustomerWhenError;

            try
            {
                ttsbegin;

                if (salesParameters.isD365SalesQuotationLifecycleAndProspectIntegrationEnabled())
                {
                    custAccount = custAccountNo ? custAccountNo : _smmBusRelTable.BusRelAccount;
                }
                else if (!showCustAccountDialog && smmParameters::isNumberSequenceManual(extendedTypeNum(CustAccount)))
                {
                    custAccount = custAccountNo;
                }

                boolean splitTransaction = _smmBusRelTable.IsIntegration != TradeIntegrationType::Dynamics365Sales
                    && salesParameters.isD365SalesQuotationLifecycleAndProspectIntegrationEnabled()
                    && smmBusRelTableConvert2CustomerFlight::instance().isEnabled();

                if (splitTransaction)
                {
                    if (!CustTable::exist(custAccount))
                    {
                        using (smmBusRelTableConvert2CustomerContext context = smmBusRelTableConvert2CustomerContext::construct())
                        {
                            context.parmSkipAddCustVendLink(true);

                            // Convert the business relation to a customer
                            custAccount = _smmBusRelTable.createCustomerFromBusinessRelation(_smmBusRelTable, custAccount);
                        }

                        deleteCustomerWhenError = true;
                    }

                    // Commit transaction. In DualWrite CustTable record creation and use of the record when converting the prospect to customer must be in two transactions.
                    ttscommit;

                    ttsbegin;
                }
                else
                {
                    // Convert the business relation to a customer
                    custAccount = _smmBusRelTable.createCustomerFromBusinessRelation(_smmBusRelTable, custAccount);
                }

                activityContext.addCustomProperty('SplitTransaction', int2str(splitTransaction));
                activityContext.addCustomProperty('DeleteCustomerWhenError', int2str(deleteCustomerWhenError));

                if (custAccount)
                {
                    // Find the original business relation
                    smmBusRelTable smmBusRelTable = smmBusRelTable::find(_smmBusRelTable.BusRelAccount,true);

                    activityContext.addCustomProperty(tableStr(smmBusRelTable), int642Str(smmBusRelTable.RecId));

                    if (smmBusRelTable)
                    {
                        MCRFullTextSearch::delete(smmBusRelTable);
                    
                        CustTable custTable = CustTable::find(custAccount);

                        activityContext.addCustomProperty(tableStr(CustTable), int642Str(custTable.RecId));

                        smmBusRelTable.convert2CustOrVend(custTable);

                        boolean deleteAfterConversion = smmBusRelTypeGroup::find(_smmBusRelTable.BusRelTypeId).DelBusRelTable;

                        activityContext.addCustomProperty('DelBusRelTable', int2str(deleteAfterConversion));

                        if (deleteAfterConversion)
                        {
                            // Delete business relations record
                            smmBusRelTable.delete();
                        }
                        else
                        {
                            smmBusRelTable.update(false);
                        }
                        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
                        {
                            // Find and update all target lists
                            smmBusRelTable.mcrUpdateTargetLists(smmBusRelTable, custTable);
                        }
                    }
                }

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        smmBusRelTable::cleanUpConvert2Customer(_smmBusRelTable, custAccount, deleteCustomerWhenError);

                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    smmBusRelTable::cleanUpConvert2Customer(_smmBusRelTable, custAccount, deleteCustomerWhenError);

                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::Error)
            {
                smmBusRelTable::cleanUpConvert2Customer(_smmBusRelTable, custAccount, deleteCustomerWhenError);

                throw Exception::Error;
            }
        }

        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpConvert2Customer</Name>
				<Source><![CDATA[
    private static void cleanUpConvert2Customer(smmBusRelTable _smmBusRelTable, CustAccount _custAccount, boolean _deleteCustomerWhenError)
    {
        #OCCRetryCount

        SalesParameters salesParameters = SalesParameters::find();

        if (salesParameters.isD365SalesQuotationLifecycleAndProspectIntegrationEnabled()
            && _deleteCustomerWhenError)
        {
            using (SysInstrumentationActivityContext activityContext = smmBusRelTable::instrumentationLogger().prospectActivities().cleanUpConvert2Customer())
            {
                try
                {
                    ttsbegin;

                    activityContext.addCustomProperty(tableStr(smmBusRelTable), int642Str(_smmBusRelTable.RecId));

                    smmBusRelTable smmBusRelTable = smmBusRelTable::findRec(_smmBusRelTable.RecId, true);

                    if (!smmBusRelTable.isB2BProspect())
                    {
                        smmBusRelTable.BusRelTypeId = _smmBusRelTable.BusRelTypeId;
                        smmBusRelTable.update(false);
                    }

                    CustTable custTable = CustTable::find(_custAccount, true);

                    if (custTable)
                    {
                        activityContext.addCustomProperty(tableStr(CustTable), int642Str(custTable.RecId));

                        using (smmBusRelTableConvert2CustomerContext context = smmBusRelTableConvert2CustomerContext::construct())
                        {
                            context.parmSkipAddCustVendLink(true);

                            custTable.delete();
                        }
                    }

                    ttscommit;
                }
                catch (Exception::Deadlock)
                {
                    retry;
                }
                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        throw Exception::UpdateConflict;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convert2CustOrVend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the <c>CustVendTable</c> to either a customer or vendor.
    /// </summary>
    /// <param name = "_custVendTable">A <c>CustVendTable</c>.</param>
    protected void convert2CustOrVend(CustVendTable _custVendTable)
    {
        this.convert2CustomerOrVendor(_custVendTable);

        smmBusRelTypeId b2bProspectTypeId = smmBusRelTypeGroup::getB2BProspectType();

        // B2B prospects should remain with type B2B prospect even after being approved as a customer.
        // So we need to skip the logic below if the customer being created is related to a B2B prospect.
        if (this.BusRelTypeId != b2bProspectTypeId)
        {
            switch(_custVendTable.TableId)
            {
                case tableNum(CustTable):
                    this.BusRelTypeId = smmBusRelTypeGroup::getCustomerType();
                    this.VendGroup = '';
                    break;
             
                case tableNum(VendTable):
                    this.BusRelTypeId = smmBusRelTypeGroup::getVendorType();
                    this.CustGroup = '';
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convert2CustomerOrVendor</Name>
				<Source><![CDATA[
    private void convert2CustomerOrVendor(CustVendTable _custVendTable)
    {
        // Update references to new customer or vendor
        this.updateReferences(_custVendTable.TableId, _custVendTable.RecId, _custVendTable.DataAreaId, _custVendTable.AccountNum);
             
        // Store information for converted business relations
        this.createConvertedBusRel(_custVendTable.TableId, _custVendTable.AccountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convert2CustomerFromQuotation</Name>
				<Source><![CDATA[
    internal void convert2CustomerFromQuotation(SalesQuotationTable _salesQuotationTable, SalesQuotationTable _salesQuotationTableOrig)
    {
        if (smmBusRelTableUpdateReferencesFlight::instance().isEnabled())
        {
            smmBusRelTable prospect = smmBusRelTable::find(this.BusRelAccount);

            if (prospect)
            {
                prospect.IsIntegration = _salesQuotationTable.IsIntegration;

                smmBusRelTypeGroup busRelTypeGroup = smmBusRelTypeGroup::find(prospect.BusRelTypeId);

                if (busRelTypeGroup.TableType == smmBusRelTypeSourceTable::Relation)
                {
                    CustAccount customerAccountNumber = prospect.BusRelAccount;

                    CustTable customer = CustTable::find(customerAccountNumber);

                    if (customer && customer.Party != prospect.Party)
                    {
                        throw error(strFmt("@SalesAndMarketing:ProspectCannotConvertCustomerNotSamePartyError", prospect.BusRelAccount, customerAccountNumber));
                    }

                    using (smmBusRelTableConvert2CustomerContext context = smmBusRelTableConvert2CustomerContext::construct())
                    {
                        if (!smmBusRelTable::convert2Customer(prospect, customerAccountNumber, false))
                        {
                            throw error(strFmt("@SalesAndMarketing:ProspectCannotConvertCustomerFromQuotationError", prospect.BusRelAccount));
                        }
                    }
                }
                else if (_salesQuotationTable.IsIntegration == TradeIntegrationType::Dynamics365Sales
                    && !_salesQuotationTable.CustAccount
                    && smmBusRelTablePersonUpdateReferencesFlight::instance().isEnabled()
                    && this.partyType() == DirPartyType::Person
                    && _salesQuotationTable.isIntegrationOwnerDynamics365Sales()
                    && _salesQuotationTable.QuotationStatus == SalesQuotationStatus::Confirmed
                    && _salesQuotationTable.QuotationStatus != _salesQuotationTableOrig.QuotationStatus)
                {
                    using (smmBusRelTableConvert2CustomerContext context = smmBusRelTableConvert2CustomerContext::construct())
                    {
                        context.parmUpdateCustomer(true);

                        if (!smmBusRelTable::convert2Customer(prospect, _salesQuotationTable.BusRelAccount, false))
                        {
                            throw error(strFmt("@SalesAndMarketing:ProspectPersonCannotConvertCustomerFromQuotationError", prospect.BusRelAccount));
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isB2BProspect</Name>
				<Source><![CDATA[
    internal boolean isB2BProspect()
    {
        if (RetailB2BEcommerceFeature::isEnabled())
        {
            smmBusRelTypeId b2bType = smmBusRelTypeGroup::getB2BProspectType();

            return this.BusRelTypeId == b2bType;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convert2Vendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a business relation to a type vendor.
    /// </summary>
    /// <param name="_smmBusRelTable">
    /// The record to convert.
    /// </param>
    /// <returns>
    /// A <c>NoYes</c> enumeration value that indicates whether the record was converted.
    /// </returns>
    /// <remarks>
    /// First the vendor account is found, based on the number sequence setup. Then, the business relation
    /// is converted to vendor. Finally, the values from the <c>CustAccount</c> table are inserted into the
    /// new record.This method might throw an update exception if the update cannot be performed.
    /// </remarks>
    public static NoYes convert2Vendor(smmBusRelTable _smmBusRelTable)
    {
        #OCCRetryCount

        if (!_smmBusRelTable)
        {
            return NoYes::No;
        }

        VendAccount vendAccount = '';
        VendGroup   vendGroup = VendGroup::find(_smmBusRelTable.VendGroup);
        boolean isVendGroupNumberSeqSet = vendGroup.VendAccountNumSeq && smmBusRelTableVendGroupNumSeqInUseFlight::instance().isEnabled();
        boolean isVendGroupNumberSeqManual = isVendGroupNumberSeqSet && NumberSequenceTable::find(vendGroup.VendAccountNumSeq).Manual;
        
        if ((smmParameters::isNumberSequenceManual(extendedTypeNum(VendAccount))              
            && !isVendGroupNumberSeqSet) || isVendGroupNumberSeqManual)
        {
            if (isVendGroupNumberSeqManual)
            {
                vendAccount = smmUtility::openAccountNumVendGroupConsideredDialog(smmAccountNumToCreate::VendAccount, _smmBusRelTable.VendGroup);
            }
            else
            {
                vendAccount = smmUtility::openAccountNumDialog(smmAccountNumToCreate::VendAccount);
            }
            if (!vendAccount)
            {
                // Conversion to vendor could not be completed                                          
                error("@SYS81995");                     
                return NoYes::No;               
                }         
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            // Prevent converting BR's that are flagged as deleted
            if (_smmBusRelTable.mcrIsListDeleted())
            {
                error("@MCR26182");
                return NoYes::No;
            }
        }
        try
        {
            ttsbegin;

            // Convert the business relation to a vendor
            vendAccount = _smmBusRelTable.relation2Vendor(_smmBusRelTable, vendAccount);

            if (vendAccount)
            {
                // Find the original business relation
                smmBusRelTable smmBusRelTable = smmBusRelTable::find(_smmBusRelTable.BusRelAccount,true);

                if (smmBusRelTable)
                {
                    // Delete the search text as we don't use full text search for vendors
                    MCRFullTextSearch::delete(smmBusRelTable);
                    
                    VendTable vendTable = VendTable::find(vendAccount);
                    smmBusRelTable.convert2CustOrVend(VendTable);

                    boolean deleteAfterConversion = smmBusRelTypeGroup::find(_smmBusRelTable.BusRelTypeId).DelBusRelTable;

                    if (deleteAfterConversion)
                    {
                        // Delete business relations record
                        smmBusRelTable.delete();
                    }
                    else
                    {
                        smmBusRelTable.update(false);
                    }
                }
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFromCustVend</Name>
				<Source><![CDATA[
    // Delete business relation from customer/vendor
    static void deleteFromCustVend(TableId _tableId, DirPartyRecId _partyRecId)
    {
        smmBusRelTable  busRelTable;
        smmBusRelTypeId busRelTypeId;
        switch (_tableId)
        {
            case tableNum(CustTable) :
                busRelTypeId = smmBusRelTypeGroup::getCustomerType();
                break;

            case tableNum(VendTable) :
                busRelTypeId = smmBusRelTypeGroup::getVendorType();
                break;
        }
        if (busRelTypeId)
        {
            ttsbegin;
            busRelTable = smmBusRelTable::findByParty(_partyRecId, true);
            if (busRelTable && busRelTable.BusRelTypeId == busRelTypeId)
            {
                if (busRelTable.validateDelete())
                {
                    busRelTable.delete();
                }
                else
                {
                    throw Exception::Error;
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableConversionToCustomer</Name>
				<Source><![CDATA[
    //Called from EP to enable/disable the option for coversion of the business relation to a customer
    public static boolean enableConversionToCustomer(smmBusRelTable _smmBusRelTable)
    {
        boolean                 flag = false;
        smmBusRelTypeGroup      busRelTypeGroup = smmBusRelTypeGroup::find(_smmBusRelTable.BusRelTypeId);

        // Allow conversion to customer if not already a customer/vendor
        flag = _smmBusRelTable &&  (busRelTypeGroup.TableType != smmBusRelTypeSourceTable::Vendor) && !DirPartyTableHelper::isCustomer(_smmBusRelTable.Party);
        return flag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a business relation exists.
    /// </summary>
    /// <param name="_smmBusRelAccount">
    /// The business relation account to check.
    /// </param>
    /// <returns>
    /// true if relation exists; otherwise, false.
    /// </returns>
    public static boolean exist(smmBusRelAccount _smmBusRelAccount)
    {
        return _smmBusRelAccount && (select firstonly smmBusRelTable index hint AccountIdx where smmBusRelTable.BusRelAccount == _smmBusRelAccount).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the business relation by using the specified business relation account number.
    /// </summary>
    /// <param name="_busRelAccount">
    /// The business relation account.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that specifies whether to modify the record.
    /// </param>
    /// <returns>
    /// The business relation.
    /// </returns>
    public static smmBusRelTable find(smmBusRelAccount _busRelAccount, boolean _forupdate = false)
    {
        smmBusRelTable smmBusRelTable = null;

        if (_busRelAccount)
        {
            smmBusRelTable.selectForUpdate(_forupdate);

            select firstonly smmBusRelTable where smmBusRelTable.BusRelAccount == _busRelAccount;
        }

        return smmBusRelTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the business relation record from the party record ID.
    /// </summary>
    /// <param name="_partyRecId">
    /// The party record ID for this business relation.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to select the business relation entity for update.
    /// </param>
    /// <returns>
    /// The business relation entity whose party has the passed record ID.
    /// </returns>
    static smmBusRelTable findByParty(DirPartyRecId _partyRecId,
                                        boolean _forUpdate = false)
    {
        smmBusRelTable smmBusRelTable;

        if (_partyRecId)
        {
            if (_forUpdate)
                smmBusRelTable.selectForUpdate(_forUpdate);

            select firstonly smmBusRelTable
                where smmBusRelTable.Party == _partyRecId;
        }
        return smmBusRelTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the business relation from a customer account number.
    /// </summary>
    /// <param name="_custAccount">
    /// The customer account.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that specifies whether to modify the record.
    /// </param>
    /// <returns>
    /// The business relation.
    /// </returns>
    public static smmBusRelTable findCust(CustAccount _custAccount, boolean _forupdate = false)
    {
        smmBusRelTable  smmBusRelTable;
        CustTable       custTable;

        if (_custAccount)
        {
            smmBusRelTable.selectForUpdate(_forupdate);

            select firstonly smmBusRelTable join RecId from custTable
                where smmBusRelTable.Party == custTable.Party &&
                        custTable.AccountNum == _custAccount;
        }

        return smmBusRelTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findIncomingCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the business relation by using the specified telephone number and checks both the telephone
    /// number and mobile phone number.
    /// </summary>
    /// <param name="_phoneNumber">
    /// The telephone number to find in the business relation table.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that specifies whether to modify the record.
    /// </param>
    /// <returns>
    /// The business relation record
    /// </returns>
    public static smmBusRelTable findIncomingCaller(Phone _phoneNumber, boolean _forupdate = false)
    {
        DirPartyLocation        partyLocation;
        LogisticsElectronicAddress electronicAddress;
        smmBusRelTable          smmBusRelTable = null;

        if (_phoneNumber)
        {
            select RecId from electronicAddress
                    where electronicAddress.Locator == _phoneNumber &&
                    electronicAddress.Type == LogisticsElectronicAddressMethodType::Phone
                exists join partyLocation
                    where partyLocation.Location == electronicAddress.Location &&
                    partyLocation.IsPrimary == NoYes::Yes &&
                    partyLocation.IsPostalAddress == NoYes::No
            exists join smmBusRelTable
                    where smmBusRelTable.Party == partyLocation.Party;
            smmBusRelTable.selectForUpdate(_forupdate);
        }
        return smmBusRelTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the business relation by using the specified record ID.
    /// </summary>
    /// <param name="_recId">
    /// The record ID.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that specifies whether to modify the record.
    /// </param>
    /// <returns>
    /// The business relation.
    /// </returns>
    public static smmBusRelTable findRec(RecId _recId, boolean _forupdate = false)
    {
        smmBusRelTable smmBusRelTable = null;

        if (_recId)
        {
            smmBusRelTable.selectForUpdate(_forupdate);

            select firstonly smmBusRelTable where smmBusRelTable.RecId == _recId;
        }

        return smmBusRelTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find business relation by using the specified a vendor account.
    /// </summary>
    /// <param name="_vendAccount">
    /// The vendor account.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that specifies whether to modify the record.
    /// </param>
    /// <returns>
    /// The business relation.
    /// </returns>
    public static smmBusRelTable findVend(VendAccount _vendAccount, boolean _forupdate = false)
    {
        smmBusRelTable  smmBusRelTable;
        VendTable       vendTable;

        if (_vendAccount)
        {
            smmBusRelTable.selectForUpdate(_forupdate);

            select firstonly smmBusRelTable join RecId from vendTable
                where smmBusRelTable.Party == vendTable.Party &&
                      vendTable.AccountNum == _vendAccount;
        }

        return smmBusRelTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberSeqFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the number sequence form handler that can be used in the form creation of this entity to
    /// generate the number sequence related field.
    /// </summary>
    /// <param name="callerForm">
    /// The form that will be using the number sequence form handler to create the entity.
    /// </param>
    /// <param name="numberSequenceDatasource">
    /// The data source that contains the entity on the creation form.
    /// </param>
    /// <returns>
    /// The number sequence form handler that can be used in the form creation of the entity.
    /// </returns>
    public static NumberSeqFormHandler getNumberSeqFormHandler(ObjectRun callerForm, FormDataSource numberSequenceDatasource)
    {
        NumberSeqFormHandler numberSeqFormHandler;
        FormRun callerFormRun = callerForm as FormRun;

        DirNumberSequenceIProvider numberSequenceProvider = callerFormRun as DirNumberSequenceIProvider;

        if (numberSequenceProvider)
        {
            numberSeqFormHandler = numberSequenceProvider.getCurNumberSeqFormHandler();
        }

        if (!numberSeqFormHandler)
        {
            numberSeqFormHandler = NumberSeqFormHandler::newForm(smmParameters::numRefBusRelAccount().NumberSequenceId,
                                                                 callerForm,
                                                                 numberSequenceDatasource,
                                                                 fieldNum(smmBusRelTable, BusRelAccount)
                                                                );
        }
        return numberSeqFormHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrExistList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a BR exists based of the past list Id.
    /// </summary>
    /// <param name="_mcrSmmListId">
    /// The list ID of the <c>smmBusRelTable</c> record to select.
    /// </param>
    /// <returns>
    /// true if a BR exists based of the past list Id; otherwise, false.
    /// </returns>
    public static boolean mcrExistList(MCRSmmListId _mcrSmmListId)
    {
        smmBusRelTable      smmBusRelTable;
        MCRsmmBusRelTable   mcrsmmBusRelTable;

        if (_mcrSmmListId)
        {
            select firstonly RecId from smmBusRelTable
            exists join mcrsmmBusRelTable
                where mcrsmmBusRelTable.smmBusRelTable == smmBusRelTable.RecId
                && mcrsmmBusRelTable.ListId == _mcrSmmListId;

            if (smmBusRelTable)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrOpenCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the customer maintenance form.
    /// </summary>
    /// <param name="_smmBusRelTable">
    /// A record in the <c>smmBusRelTable</c> table.
    /// </param>
    /// <param name="_useParam">
    /// Whether or not to open the form.
    /// </param>
    /// <remarks>
    /// Moved from the conversion button that is on the BR form.
    /// Re-structed to use formRun rather then a menufunction object because need
    /// to call formRun.wait() so the system waits for the custtable form to be closed
    /// when converting relation to cust from the campaign form.  Need it to work
    /// this way because another form gets called aftewards and don't want the 2 forms
    /// popping at the same time.
    /// </remarks>
    public static void mcrOpenCustTable(smmBusRelTable _smmBusRelTable, boolean _useParam = true)
    {
        // Open the Customer table form if configured to do so
        if (_useParam && smmParameters::getBusRelOpenCustForm())
        {
            smmBusRelTable::mcrRunCustTable(_smmBusRelTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrRunCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the <c>CustTable</c> form for the passed <c>smmBusRelTable</c> record.
    /// </summary>
    /// <param name="_smmBusRelTable">
    /// The <c>smmBusRelTable</c> record for which this method opens the <c>CustTable</c> form.
    /// </param>
    private static void mcrRunCustTable(smmBusRelTable _smmBusRelTable)
    {
        Args           args = new Args();
        formRun        menuFunction;

        args.record(_smmBusRelTable);
        menuFunction = new MenuFunction(menuitemDisplayStr(CustTable), MenuItemType::Display).create(args);
        menuFunction.run();
        menuFunction.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>quickCreateSaveAndOpenLinks</Name>
				<Source><![CDATA[
    private static container quickCreateSaveAndOpenLinks()
    {
        container saveAndOpenLinks;
        saveAndOpenLinks += [menuitemDisplayStr(smmBusRelTableEdit), MenuItemType::Display];
        saveAndOpenLinks += [menuitemDisplayStr(SalesQuotationTableForNewFromBusRel), MenuItemType::Display];
        saveAndOpenLinks += [menuitemDisplayStr(SalesQuotationProjTableForNew), MenuItemType::Display];
        saveAndOpenLinks += [menuitemDisplayStr(smmLeadTableNew), MenuItemType::Display];
        saveAndOpenLinks += [menuitemDisplayStr(smmOpportunityTableNew), MenuItemType::Display];
        return saveAndOpenLinks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retreiveQuickCreateSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the metadata that is required for the quick create form.
    /// </summary>
    /// <returns>
    /// A container that contains the metadata that is required for the quick create form.
    /// </returns>
    public static container retreiveQuickCreateSettings()
    {
        container quickCreateSettings;
        quickCreateSettings += [smmBusRelTable::quickCreateSaveAndOpenLinks()];
        return quickCreateSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTree</Name>
				<Source><![CDATA[
    static void showTree(container con,FormTreeControl _fromTreeControl)
    {
        int i;
        smmBusRelAccount    busRelAccount;
        smmBusRelName       name;
        boolean             isParent;
        int                 parentIdx;
        int                 nodeId;
        ImageRes            imageRes    = 0;
        RecId               busRelRecId;
        RecId               parentRecId;
        Map                 treeRecId;

        treeRecId = new Map(typeName2Type(extendedTypeStr(RecId)),Types::Integer);

        // Clear all items in tree
        _fromTreeControl.deleteAll();

        for (i=1;i<=conLen(con);i++)
        {
            busRelAccount   = conPeek(conPeek(con,i),1);
            name            = conPeek(conPeek(con,i),2);
            isParent        = conPeek(conPeek(con,i),3);
            busRelRecId     = conPeek(conPeek(con,i),4);
            parentRecId     = conPeek(conPeek(con,i),5);

            if (busRelRecId)
            {
                parentIdx = _fromTreeControl.getItem(treeRecId.lookup(busRelRecId)).idx();
            }
            else
            {
                parentIdx = 0;
            }

            // %1, %2
            nodeId = SysFormTreeControl::addTreeItem(_fromTreeControl, busRelAccount + ', ' + name, parentIdx, busRelAccount, imageRes,isParent);
            treeRecId.insert(parentRecId,nodeId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferDocuments</Name>
				<Source><![CDATA[
    private static void transferDocuments(TableId _busRelTableId,RecId _busRelRecId,DataAreaId _busRelDataAreaId,
                                                 TableId _custVendTableId, RecId _custVendRecId, DataAreaId _custVendDataAreaId)
    {
        DocuRef         docuRef;

        ttsbegin;

        if (_busRelTableId && _busRelRecId && _busRelDataAreaId &&
            _custVendTableId && _custVendRecId && _custVendDataAreaId)
        {
            while select forupdate docuRef
                where docuRef.RefCompanyId  == _busRelDataAreaId &&
                      docuRef.RefRecId      == _busRelRecId &&
                      docuRef.RefTableId    == _busRelTableId
            {
                docuRef.RefRecId     = _custVendRecId;
                docuRef.RefTableId   = _custVendTableId;
                docuRef.RefCompanyId = _custVendDataAreaId;
                docuRef.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromCustTableSFA2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes sure that the business relation table is updated with the correct information.
    /// </summary>
    /// <param name="_custTable">
    /// The customer table record.
    /// </param>
    /// <param name="_custType">
    /// The customer type.
    /// </param>
    /// <param name="_checkNumberSequence">
    /// The check number sequence.
    /// </param>
    /// <param name="_checkLicense">
    /// The check license.
    /// </param>
    /// <param name="_insertLicense">
    /// The insert license.
    /// </param>
    /// <param name="_updateLicense">
    /// The update license.
    /// </param>
    /// <param name="_smmBusRelTable">
    /// The record to update.
    /// </param>
    // When a change is made directly in CustTable, either as an insert or an update,
    // this method is called to ensure that the business relation table is updated with
    // the correct information
    public static void updateFromCustTableSFA2(CustTable         _custTable,
                                                      smmBusRelTypeId   _custType               = '',
                                                      boolean           _checkNumberSequence    = true,
                                                      boolean           _checkLicense           = true,
                                                      boolean           _insertLicense          = false,
                                                      boolean           _updateLicense          = false,
                                                      smmBusRelTable    _smmBusRelTable         = null)
    {
        SmmUpdateBusRel     smmUpdateBusRel = SmmUpdateBusRel::construct();

        smmUpdateBusRel.parmTypeId(_custType);
        smmUpdateBusRel.parmCheckNumberSequence(_checkNumberSequence);
        smmUpdateBusRel.parmCheckLicense(_checkLicense);
        smmUpdateBusRel.parmInsertLicense(_insertLicense);
        smmUpdateBusRel.parmUpdateLicense(_updateLicense);

        if (!smmUpdateBusRel.init(tableNum(CustTable)))
        {
            return;
        }

        smmUpdateBusRel.updateFromCustTableSFA2(_custTable, _smmBusRelTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromVendTableSFA2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes sure that the business relation table is updated with the correct information.
    /// </summary>
    /// <param name="_vendTable">
    /// A vendor table record.
    /// </param>
    /// <param name="_vendType">
    /// The vendor type.
    /// </param>
    /// <param name="_checkNumberSequence">
    /// A Boolean value that specifies whether to check the number sequence.
    /// </param>
    /// <param name="_checkLicense">
    /// A Boolean value that specifies whether to check the license.
    /// </param>
    /// <param name="_insertLicense">
    /// A Boolean value that specifies whether to insert the license.
    /// </param>
    /// <param name="_updateLicense">
    /// A Boolean value that specifies whether to update the license.
    /// </param>
    /// <param name="_smmBusRelTable">
    /// The record update.
    /// </param>
    // When a change is made directly in VendTable, either as an insert or an update,
    // this method is called to ensure that the business relation table is updated with
    // the correct information
    public static void updateFromVendTableSFA2(VendTable         _vendTable,
                                                      smmBusRelTypeId   _vendType            = '',
                                                      boolean           _checkNumberSequence = true,
                                                      boolean           _checkLicense        = true,
                                                      boolean           _insertLicense       = false,
                                                      boolean           _updateLicense       = false,
                                                      smmBusRelTable    _smmBusRelTable      = null)
    {
        SmmUpdateBusRel     smmUpdateBusRel = SmmUpdateBusRel::construct();
        smmUpdateBusRel.parmTypeId(_vendType);
        smmUpdateBusRel.parmCheckNumberSequence(_checkNumberSequence);
        smmUpdateBusRel.parmCheckLicense(_checkLicense);
        smmUpdateBusRel.parmInsertLicense(_insertLicense);
        smmUpdateBusRel.parmUpdateLicense(_updateLicense);

        if (!smmUpdateBusRel.init(tableNum(VendTable)))
        {
            return;
        }

        smmUpdateBusRel.updateFromVendTableSFA2(_vendTable, _smmBusRelTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DirPartyTable</Name>
				<Source><![CDATA[
    public DirPartyTable DirPartyTable(DirPartyTable _relatedTable = null)
    {
        if (prmIsDefault(_relatedTable))
        {
            return this.setLink('DirPartyTable');
        }
        else
        {
            return this.setLink('DirPartyTable', _relatedTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocuRefOnInsert</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(DocuRefExtension), delegatestr(DocuRefExtension, OnInsert))]
    static void DocuRefOnInsert(DocuRef _docuRef, RecId _interCompanyFromRecId)
    {
        if (_docuRef.RefTableId == tablenum(smmBusRelTable))
        {
            changecompany(_docuRef.RefCompanyId)
            {
                _docuRef.Party              = smmBusRelTable::findRec(_docuRef.RefRecId).Party;
                _docuRef.Author             = DirPersonUser::current().PersonParty;
                _docuRef.ActualCompanyId    = curext();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packRetailSmmBusRelTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs retail related information.
    /// </summary>
    /// <param name="_retailSmmBusRelTable">
    /// The prospect reference.
    /// </param>
    internal void packRetailSmmBusRelTable(RetailSmmBusRelTable _retailSmmBusRelTable)
    {
        _retailSmmBusRelTable.smmBusRelTable = this.RecId;

        this.SysExtensionSerializerMap::packExtensionTable(_retailSmmBusRelTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailSmmBusRelTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recovers retail extension table
    /// </summary>
    /// <returns>
    /// A record of <c>RetailSmmBusRelTable</c>
    /// </returns>
    internal RetailSmmBusRelTable retailSmmBusRelTable()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(RetailSmmBusRelTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeAndValidateCrossCompany</Name>
				<Source><![CDATA[
    private boolean writeAndValidateCrossCompany(str _methodName, FieldId _fieldIdToCheck = 0, smmBusRelTable _busRelTableOrig = null, boolean _updateMasterTables = true)
    {
        boolean ret = true;
        
        SysDataSharingPolicy policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(curExt(), tableId2name(this.TableId));
        if (policy.RecId && policy.IsEnabled)
        {
            Query       query = SysDataSharingCrossCompanyValidatorQueryBuilder::buildQuery(this.orig(), policy.RecId);
            QueryRun    queryRun = new QueryRun(query);
        
            while (queryRun.Next())
            {
                smmBusRelTable companySmmBusRelTable = queryRun.get(this.TableId);
                DataAreaId company = companySmmBusRelTable.DataAreaId;

                if (companySmmBusRelTable.RecId && company)
                {
                    changecompany(company)
                    {
                        smmBusRelTable smmBusRelTable = smmBusRelTable::findRec(companySmmBusRelTable.RecId);
                        if (smmBusRelTable.RecId)
                        {
                            buf2Buf(this, smmBusRelTable);

                            switch (_methodName)
                            {
                                case tableMethodStr(smmBusRelTable, insert):
                                    if (smmBusRelTypeGroup::find(smmBusRelTable.BusRelTypeId).TableType == smmBusRelTypeSourceTable::Relation
                                        && !SysDataSharingPolicy::isSharingPolicyEnabledByCompanyAndTable(company, tableStr(MCRCustTableIndex)))
                                    {
                                        MCRFullTextSearch::insert(smmBusRelTable);
                                    }
                                        
                                    if (!SysDataSharingPolicy::isSharingPolicyEnabledByCompanyAndTable(company, tableStr(smmTransLog)))
                                    {
                                        smmTransLog::initTrans(smmBusRelTable, smmLogAction::insert);
                                    }
                                    break;

                                case tableMethodStr(smmBusRelTable, update):
                                    smmBusRelTypeGroup busRelTypeGroup = smmBusRelTypeGroup::find(smmBusRelTable.BusRelTypeId);

                                    // Update the new search text, as long as it is not tied to a customer/vendor
                                    smmBusRelTable.updateMCRFullTextSearch(busRelTypeGroup);

                                    // Write to CRM transaction log
                                    if (!SysDataSharingPolicy::isSharingPolicyEnabledByCompanyAndTable(company, tableStr(smmTransLog)))
                                    {
                                        smmTransLog::initTrans(smmBusRelTable, smmLogAction::update);
                                    }

                                    // Should the relation master table be updated
                                    smmBusRelTable.updateMasterTables(_updateMasterTables, busRelTypeGroup);
                                    break;

                                case tableMethodStr(smmBusRelTable, delete):
                                    if (!DimensionValidation::canDeleteEntityValue(smmBusRelTable))
                                    {
                                        throw error(strFmt("@SYS134392", smmBusRelTable.BusRelAccount));
                                    }

                                    // Update the associated dimension attribute value.
                                    DimensionAttributeValue::updateForEntityValueDelete(smmBusRelTable);

                                    if (!SysDataSharingPolicy::isSharingPolicyEnabledByCompanyAndTable(company, tableStr(smmTransLog)))
                                    {
                                        smmTransLog::initTrans(smmBusRelTable, smmLogAction::delete);
                                    }
                                    break;
                                case tableMethodStr(smmBusRelTable, renamePrimaryKey):
                                    // Both methods must be called even though there is no super() being wrapped in order to get all telemetry and update the records
                                    DimensionValueRenameV2 rename = DimensionValueRenameV2::construct(smmBusRelTable, _busRelTableOrig);
                                    rename.syncRenamedValuePreSuper();
                                    rename.syncRenamedValuePostSuper();
                                    break;
                                    
                                case tableMethodStr(smmBusRelTable, validateDelete):
                                    if (!SysDataSharingPolicy::isSharingPolicyEnabledByCompanyAndTable(company, tableStr(smmActivityParentLinkTable)))
                                    {
                                        if (!smmBusRelTable.deleteActivityParentLink())
                                        {
                                            return false;
                                        }
                                    }
                                    break;
                                case tableMethodStr(smmBusRelTable, validateField):
                                    if (!SysDataSharingPolicy::isSharingPolicyEnabledByCompanyAndTable(company, tableStr(smmBusRelTypeGroup))
                                        && _fieldIdToCheck == fieldNum(smmBusRelTable, BusRelTypeId)
                                        && !smmBusRelTable.validateFieldBusRelTypeIdCurrentCompany(_busRelTableOrig))
                                    {
                                        return false;
                                    }

                                    if (_fieldIdToCheck == fieldNum(smmBusRelTable, MainContactWorker))
                                    {
                                        ret = smmUtility::isValidWorkerInCurrentCompany(smmBusRelTable.MainContactWorker);
                                    }
                                    break;
                                case tableMethodStr(smmBusRelTable, validateWrite):
                                    ret = smmUtility::isValidWorkerInCurrentCompany(smmBusRelTable.MainContactWorker);
                                    break;
                                default:
                                    return true;
                            }
                        }
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBusRelAccountBeUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a prospect can be updated
    /// </summary>
    /// <param name = "_busRelAccount">The business relation account to check.</param>
    /// <param name = "_documentStatus">The document status</param>
    /// <returns>true if a prospect be updated; otherwise, false.</returns>
    public static boolean canBusRelAccountBeUpdated(smmBusRelAccount _busRelAccount,
        DocumentStatus _documentStatus = DocumentStatus::None)
    {
        CustVendorBlocked  isBlocked = smmBusRelTable::find(_busRelAccount).Blocked;
        boolean busRelAccountCanBeUpdated = (isBlocked != CustVendorBlocked::All);

        if (_documentStatus == DocumentStatus::Invoice      ||
            _documentStatus == DocumentStatus::PickingList  ||
            _documentStatus == DocumentStatus::PackingSlip  ||
            _documentStatus == DocumentStatus::ProjectPackingSlip  ||
            _documentStatus == DocumentStatus::FreeTextInvoice ||
            _documentStatus == DocumentStatus::Facture_RU)
        {
            busRelAccountCanBeUpdated = isBlocked == CustVendorBlocked::No;
        }

        return busRelAccountCanBeUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private static smmInstrumentationLogger instrumentationLogger()
    {
        return smmInstrumentationLogger::createLogger(tableStr(smmBusRelTable));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SmmCRM</ConfigurationKey>
	<DeveloperDocumentation>@SYS124724</DeveloperDocumentation>
	<FormRef>smmbusreltable</FormRef>
	<Label>@SYS80068</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>BusRelAccount</TitleField1>
	<TitleField2>Party</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>AccountIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DataSharingType>Duplicate</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>AccountIdx</PrimaryIndex>
	<ReplacementKey>AccountIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>smmCampaignSelection</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>smmCampaignSelection</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>MCRTargetList</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>MCRTargetList</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>SalesQuotationTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>SalesQuotationTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>smmActivityParentLinkTable</Name>
			<DeleteAction>CascadeRestricted</DeleteAction>
			<Relation></Relation>
			<Table>smmActivityParentLinkTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>smmBusRelDefaultLocation</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>smmBusRelDefaultLocation</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>smmConvertedBusRel</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>smmConvertedBusRel</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>smmResponsibilitiesEmplTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>smmResponsibilitiesEmplTable</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditMax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditRating</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MandatoryCreditLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FreightZone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesCalendarId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesDistrict</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Segment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Subsegment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyChain</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BusRelTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineOfBusinessId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BusRelAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Party</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesDistrict</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MainContactWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BusRelAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Party</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BusRelTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MainContactWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BusRelAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressLookup</Name>
			<Label>@SYS88672</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Party</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BusRelAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Blocked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OneTimeRelation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BusinessRelation</Name>
			<Label>@SYS80138</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BusRelTypeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BusinessRelationInformation</Name>
			<Label>@SYS80508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BusRelTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Party</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BusRelAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyChain</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MainContactWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Contact</Name>
			<Label>@SYS60248</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineOfBusinessId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Credit</Name>
			<Label>@SYS7084</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MandatoryCreditLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditRating</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditMax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Currency</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Delivery</Name>
			<Label>@SYS4508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FreightZone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTerm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DestinationCodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesCalendarId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DirectMail</Name>
			<Label>@SYS81334</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DirectMail</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EPContactBasic</Name>
			<Label>@SYS60248</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineOfBusinessId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EPContactNAF</Name>
			<Label>@SYS60248</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompanyIdSiret</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyNAFCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EPGeneralCharacteristics</Name>
			<Label>@SYS112249</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompanyChain</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesDistrict</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OpenToTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OpenFromTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EPGeneralClassification</Name>
			<Label>@SYS26267</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Segment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Subsegment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EPGeneralCredit</Name>
			<Label>@SYS7084</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MandatoryCreditLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditRating</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditMax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EPGeneralIdentification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BusRelTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MainContactWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EPIdentification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BusRelAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EPMainResponsible</Name>
			<Label>@SYS67464</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MainContactWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EPMiniPage</Name>
			<Label>@SYS108232</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BusRelTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesDistrict</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MainContactWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EPSetupDelivery</Name>
			<Label>@SYS4508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FreightZone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTerm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DestinationCodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesCalendarId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EPSetupMemo</Name>
			<Label>@SYS80402</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Memo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EPSetupTax</Name>
			<Label>@SYS28668</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InclTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EPStatusType</Name>
			<Label>@SYS15042</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BusRelTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Group</Name>
			<Label>@SYS3815</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>HoursOfBusiness</Name>
			<Label>@SYS79895</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OpenFromTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OpenToTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BusRelAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Party</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Log</Name>
			<Label>@SYS2515</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Imported</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createdDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>modifiedDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Memo</Name>
			<Label>@SYS80402</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Memo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OtherInfo</Name>
			<Label>@SYS114375</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Segment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Subsegment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineOfBusinessId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyChain</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesDistrict</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Memo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS80404</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BusRelAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyChain</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BusRelTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Imported</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MainContactWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OverviewDimensions</Name>
			<Label>@ApplicationPlatform:SingleSpace</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OverviewGeneralCharacteristics</Name>
			<Label>@SYS112249</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompanyChain</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesDistrict</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>showStartTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>showEndTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OverviewGeneralClassification</Name>
			<Label>@SYS26267</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Segment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Subsegment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OverviewGeneralCredit</Name>
			<Label>@SYS7084</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MandatoryCreditLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditRating</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditMax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OverviewSetupDelivery</Name>
			<Label>@SYS4508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FreightZone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTerm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DestinationCodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesCalendarId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OverviewSetupMemo</Name>
			<Label>@SYS80402</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Memo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OverviewSetupTax</Name>
			<Label>@SYS28668</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InclTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting</Name>
			<Label>@SYS3815</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>quickCreateDetails</Name>
			<Label>@SYS340108</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BusRelTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTerm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvMode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>quickCreateHeader</Name>
			<Label>@SYS340399</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BusRelAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>smmOpportunityEditProspectDetails</Name>
			<Label>@SYS110468</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>customerGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Segment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Subsegment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesDistrict</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>smmProspectListMoreInfo</Name>
			<Label>@SYS110470</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>mainContactName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyChain</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesDistrict</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>hoursOfBusiness</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SMSProfile</Name>
			<Label>@SYS100101</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DirectMail</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesDistrict</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Segment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Subsegment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS80398</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Tax</Name>
			<Label>@SYS28668</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InclTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WebCategoryBrowsing</Name>
			<Label>@SYS74258</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BusRelTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MainContactWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Blocked</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmRelationBlocked</ExtendedDataType>
			<EnumType>CustVendorBlocked</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BusRelAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmBusRelAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BusRelTypeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmBusRelTypeId</ExtendedDataType>
			<Label>@SYS82087</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompanyChain</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmChainId</ExtendedDataType>
			<Label>@SYS318283</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompanyIdSiret</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyIdSiret</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CompanyNAFCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyNAFRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CreditMax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCreditMaxMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CreditRating</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCreditRating</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Currency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DestinationCodeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmDestinationCodeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DirectMail</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmBusRelDirectMail</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmDlvModeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvTerm</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmDlvTermId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FiscalCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FiscalCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FreightZone</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmFreightZoneId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Imported</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS54697</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InclTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InclTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LineOfBusinessId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineOfBusinessId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MainContactWorker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>smmBusRelAccResponsibleWorker</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MandatoryCreditLimit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MandatoryCreditLimit</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>MCRPackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Memo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmBusRelMemo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OneTimeRelation</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmOneTimeRelation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>OpenFromTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmBusRelOpenFromTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>OpenToTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmBusRelOpenToTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Party</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DirPartyRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesCalendarId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesCalendarId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesDistrict</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmSalesDistrictId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Segment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmSegmentId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Status</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmStatusId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Subsegment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmSubsegmentId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
			<Label>@SYS318303</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsIntegration</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>TradeIntegrationType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Party</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Party</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DefaultDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CompanyNAFCodeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CompanyNAFCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AccountIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BusRelAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SalesManagementIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>MainContactWorker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BusRelTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BusRelTypeId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DirPartyMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Party</MapField>
					<MapFieldTo>Party</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Account</MapField>
					<MapFieldTo>BusRelAccount</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>MCRPackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CompanyNAFCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyNAFCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CompanyNAFCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CompanyNAFCode_smmBusRelTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CompanyNAFCode</Name>
					<Field>CompanyNAFCode</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>smmBusRelTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Currency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>Currency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmBusRelTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustGroup</Name>
					<SourceEDT>CustGroupId</SourceEDT>
					<Field>CustGroup</Field>
					<RelatedField>CustGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EntityRelationshipRole>@SYS123523</EntityRelationshipRole>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>IsCustOf</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>IsBusRelFor</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_smmBusRelTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DestinationCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DestinationCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DestinationCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmBusRelTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DestinationCodeId</Name>
					<SourceEDT>smmDestinationCodeId</SourceEDT>
					<Field>DestinationCodeId</Field>
					<RelatedField>DestinationCodeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DirAddressBookParty</Name>
			<RelatedTable>DirAddressBookPartyAllView</RelatedTable>
			<RelatedTableRole>DirAddressBookPartyAllView</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>smmBusRelTable</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DirPartyTable_FK</Name>
			<Cardinality>ZeroOne</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<RelatedTable>DirPartyTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DirPartyTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DirPartyTable_smmBusRelTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DirPartyView</Name>
			<EntityRelationshipRole>@SYS124637</EntityRelationshipRole>
			<RelatedTable>DirPartyView</RelatedTable>
			<RelatedTableRole>isPartyViewOf</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>IsBusRelFor</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DlvMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DlvMode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmBusRelTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvMode</Name>
					<SourceEDT>smmDlvModeId</SourceEDT>
					<Field>DlvMode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DlvTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DlvTerm</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmBusRelTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvTerm</Name>
					<SourceEDT>smmDlvTermId</SourceEDT>
					<Field>DlvTerm</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LineOfBusiness</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LineOfBusiness</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LineOfBusiness</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmBusRelTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LineOfBusinessId</Name>
					<SourceEDT>LineOfBusinessId</SourceEDT>
					<Field>LineOfBusinessId</Field>
					<RelatedField>LineOfBusinessId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MainContactWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_smmBusRelTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MainContactWorker</Name>
					<Field>MainContactWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmBusRelChainGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmBusRelChainGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmBusRelChainGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmBusRelTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CompanyChain</Name>
					<SourceEDT>smmChainId</SourceEDT>
					<Field>CompanyChain</Field>
					<RelatedField>ChainId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ChainIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmBusRelSalesDistrictGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmBusRelSalesDistrictGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmBusRelSalesDistrictGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmBusRelTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesDistrict</Name>
					<SourceEDT>smmSalesDistrictId</SourceEDT>
					<Field>SalesDistrict</Field>
					<RelatedField>SalesDistrictId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesDistrictIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmBusRelSegmentGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmBusRelSegmentGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmBusRelSegmentGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmBusRelTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Segment</Name>
					<SourceEDT>smmSegmentId</SourceEDT>
					<Field>Segment</Field>
					<RelatedField>SegmentId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SegmentIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmBusRelStatusGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmBusRelStatusGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmBusRelStatusGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmBusRelTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Status</Name>
					<SourceEDT>smmStatusId</SourceEDT>
					<Field>Status</Field>
					<RelatedField>StatusId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>smmBusRelSubSegmentGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124723</EntityRelationshipRole>
			<RelatedTable>smmBusRelSubSegmentGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>IsBusRelSegmentOf</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>IsBusRelFor</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Segment</Name>
					<Field>Segment</Field>
					<RelatedField>SegmentId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Subsegment</Name>
					<Field>Subsegment</Field>
					<RelatedField>SubsegmentId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmBusRelTypeGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmBusRelTypeGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>smmBusRelTypeGroup</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>smmBusRelTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BusRelTypeId</Name>
					<SourceEDT>smmBusRelTypeId</SourceEDT>
					<Field>BusRelTypeId</Field>
					<RelatedField>TypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmBusRelTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<SourceEDT>TaxGroup</SourceEDT>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmBusRelTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendGroup</Name>
					<SourceEDT>VendGroupId</SourceEDT>
					<Field>VendGroup</Field>
					<RelatedField>VendGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EntityRelationshipRole>@SYS123524</EntityRelationshipRole>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>IsVendOf</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>IsBusRelFor</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkCalendarTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WorkCalendarTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WorkCalendarTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmBusRelTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesCalendarId</Name>
					<SourceEDT>SalesCalendarId</SourceEDT>
					<Field>SalesCalendarId</Field>
					<RelatedField>CalendarId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CalendarIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DocuRef</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EntityRelationshipRole>@SYS123524</EntityRelationshipRole>
			<RelatedTable>DocuRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>IsDocumentOf</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>IsBusRelFor</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>