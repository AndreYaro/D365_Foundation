<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmBusRelRevenue</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class smmBusRelRevenue extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateTotalRevenue</Name>
				<Source><![CDATA[
    AmountMST calculateTotalRevenue(TransDate _fromDate, TransDate _toDate, boolean _update = true)
    {
        Query                   query;
        QueryBuildRange         qRange;
        smmBusRelRevenueTrans   busRelRevenueTrans;

        if (_update)
        {
            query = new Query(queryStr(custUpdateFinancials));

            qRange = query.dataSourceTable(tableNum(CustTable)).findRange(fieldNum(CustTable, Party));

            if (!qRange)
            {
                qRange = query.dataSourceTable(tableNum(CustTable)).addRange(fieldNum(CustTable, Party));
            }

            qRange.value(queryValue(this.Party));

            smmBusRelRevenue::updateFinancials(new QueryRun(query), _fromDate, _toDate);
        }

        select sum(AmountMST) from busRelRevenueTrans where busRelRevenueTrans.RefRecId == this.RecId && busRelRevenueTrans.FromDate >= _fromDate && busRelRevenueTrans.ToDate <= _toDate;

        return busRelRevenueTrans.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCustRevenue</Name>
				<Source><![CDATA[
    public static void calculateCustRevenue(TransDate _fromDate, TransDate _toDate,QueryRun _qRun = null, boolean _updateTotalRevenue = false)
    {
        CustInvoiceJour         custInvoiceJour;
        smmBusRelRevenueTrans   busRelrevenueTrans;
        smmBusRelRevenue        busRelRevenue;
        CustTable               custTable;
        CustInvoiceAccount      invoiceAccount  = '';
        Query                   query;
        QueryBuildDataSource    qCustDataSource;
        QueryBuildDataSource    qDataSource;
        QueryRun                qRun;
        int                     n;
        real                    revenue;

        ttsbegin;

        if (_qRun)
        {
            qCustDataSource = _qRun.query().dataSourceTable(tableNum(CustTable));
            n = qCustDataSource.rangeCount();
        }

        query = new Query();
        qDataSource = query.addDataSource(tableNum(CustInvoiceJour));
        qDataSource.addSortField(fieldNum(CustInvoiceJour, InvoiceAccount));
        qDataSource.addSortField(fieldNum(CustInvoiceJour, InvoiceDate));
        qDataSource.addRange(fieldNum(CustInvoiceJour, InvoiceDate)).value(queryValue(_fromDate) + '..' + queryValue(_toDate));
        qDataSource = qDataSource.addDataSource(tableNum(CustTable));
        qDataSource.addLink(fieldNum(CustInvoiceJour,InvoiceAccount), fieldNum(CustTable, AccountNum));

        while (n > 0)
        {
            qDataSource.addRange(qCustDataSource.range(n).field()).value(qCustDataSource.range(n).value());
            n --;
        }

        qRun = new QueryRun(query);

        while (qRun.next())
        {
            if (qRun.changed(tableNum(CustInvoiceJour)))
            {
                custInvoiceJour = qRun.get(tableNum(CustInvoiceJour));

                if (!invoiceAccount || invoiceAccount != custInvoiceJour.InvoiceAccount)
                {
                    custTable = qRun.get(tableNum(CustTable));

                    if (busRelrevenueTrans)
                    {
                        busRelrevenueTrans.update();
                    }

                    if (_updateTotalRevenue && busRelRevenue)
                    {
                        busRelRevenue.RevenueTotal = busRelRevenue.calculateTotalRevenue(_fromDate,_toDate,false);
                        busRelRevenue.update();
                    }

                    select firstonly forupdate busRelRevenue where busRelRevenue.Party == custTable.Party;

                    select forupdate busRelrevenueTrans order by FromDate
                        where busRelrevenueTrans.RefRecId == busRelRevenue.RecId &&
                              busRelrevenueTrans.FromDate >= _fromDate &&
                              busRelrevenueTrans.ToDate   <= _toDate;

                    invoiceAccount = custInvoiceJour.InvoiceAccount;
                }

                if (busRelrevenueTrans && custInvoiceJour.InvoiceDate >= busRelrevenueTrans.FromDate && custInvoiceJour.InvoiceDate <= busRelrevenueTrans.ToDate)
                {
                    revenue = CurrencyExchangeHelper::mstAmount(custInvoiceJour.SalesBalance, custInvoiceJour.CurrencyCode, custInvoiceJour.InvoiceDate, Currency::noYes2UnknownNoYes(custInvoiceJour.Triangulation));

                    busRelrevenueTrans.AmountMST += revenue;
                }
                else
                if (busRelrevenueTrans)
                {
                    busRelrevenueTrans.update();

                    while (busRelrevenueTrans && !(custInvoiceJour.InvoiceDate >= busRelrevenueTrans.FromDate && custInvoiceJour.InvoiceDate <= busRelrevenueTrans.ToDate))
                    {
                        next busRelrevenueTrans;
                    }

                    if (busRelrevenueTrans)
                    {
                        revenue = CurrencyExchangeHelper::mstAmount(custInvoiceJour.SalesBalance, custInvoiceJour.CurrencyCode, custInvoiceJour.InvoiceDate, Currency::noYes2UnknownNoYes(custInvoiceJour.Triangulation));

                        busRelrevenueTrans.AmountMST += revenue;
                    }
                }
            }
        }

        if (busRelrevenueTrans)
        {
            busRelrevenueTrans.update();
        }

        if (_updateTotalRevenue && busRelRevenue)
        {
            busRelRevenue.RevenueTotal = busRelRevenue.calculateTotalRevenue(_fromDate, _toDate, false);
            busRelRevenue.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateProjRevenue</Name>
				<Source><![CDATA[
    public static void calculateProjRevenue(TransDate _fromDate, TransDate _toDate,QueryRun _qRun = null,boolean _updateTotalRevenue = false)
    {
        ProjInvoiceJour         projInvoiceJour;
        CustInvoiceAccount      invoiceAccount  = '';
        smmBusRelRevenueTrans   busRelrevenueTrans;
        CustTable               custTable;
        smmBusRelRevenue        busRelRevenue;
        Query                   query;
        QueryBuildDataSource    qCustDataSource;
        QueryBuildDataSource    qDataSource;
        QueryRun                qRun;
        int                     n;
        real                    revenue;
        ttsbegin;

        if (_qRun)
        {
            qCustDataSource = _qRun.query().dataSourceTable(tableNum(CustTable));
            n = qCustDataSource.rangeCount();
        }

        query = new Query();
        qDataSource = query.addDataSource(tableNum(ProjInvoiceJour));
        qDataSource.addSortField(fieldNum(ProjInvoiceJour,InvoiceAccount));
        qDataSource.addSortField(fieldNum(ProjInvoiceJour,InvoiceDate));
        qDataSource.addRange(fieldNum(ProjInvoiceJour,InvoiceDate)).value(queryValue(_fromDate)+".."+queryValue(_toDate));
        qDataSource = qDataSource.addDataSource(tableNum(CustTable));
        qDataSource.addLink(fieldNum(ProjInvoiceJour,InvoiceAccount),fieldNum(CustTable,AccountNum));

        while (n>0)
        {
            qDataSource.addRange(qCustDataSource.range(n).field()).value(qCustDataSource.range(n).value());
            n --;
        }

        qRun = new QueryRun(query);
        while (qRun.next())
        {
            if (qRun.changed(tableNum(ProjInvoiceJour)))
            {
                projInvoiceJour = qRun.get(tableNum(ProjInvoiceJour));

                if (!invoiceAccount || invoiceAccount != projInvoiceJour.InvoiceAccount)
                {
                    custTable = qRun.get(tableNum(CustTable));

                    if (busRelrevenueTrans)
                    {
                        busRelrevenueTrans.update();
                    }
                    if (_updateTotalRevenue && busRelRevenue)
                    {
                        busRelRevenue.RevenueTotal = busRelRevenue.calculateTotalRevenue(_fromDate,_toDate,false);
                        busRelRevenue.update();
                    }

                    select forupdate firstonly busRelRevenue where busRelRevenue.Party == custTable.Party;
                    select forupdate busRelrevenueTrans order by FromDate where busRelrevenueTrans.RefRecId == busRelRevenue.RecId &&
                        busRelrevenueTrans.FromDate >= _fromDate &&
                        busRelrevenueTrans.ToDate <= _toDate;

                    invoiceAccount = projInvoiceJour.InvoiceAccount;
                }
                if (busRelrevenueTrans && projInvoiceJour.InvoiceDate >= busRelrevenueTrans.FromDate && projInvoiceJour.InvoiceDate <= busRelrevenueTrans.ToDate)
                {
                        revenue = CurrencyExchangeHelper::mstAmount(projInvoiceJour.SalesOrderbalance, projInvoiceJour.CurrencyId, projInvoiceJour.InvoiceDate, Currency::noYes2UnknownNoYes(projInvoiceJour.Triangulation));
                        busRelrevenueTrans.AmountMST += revenue;
                }
                else if (busRelrevenueTrans)
                {
                    busRelrevenueTrans.update();

                    while (busRelrevenueTrans && !(projInvoiceJour.InvoiceDate >= busRelrevenueTrans.FromDate && projInvoiceJour.InvoiceDate <= busRelrevenueTrans.ToDate))
                    {
                        next busRelrevenueTrans;
                    }
                    if (busRelrevenueTrans)
                    {
                        revenue = CurrencyExchangeHelper::mstAmount(projInvoiceJour.SalesOrderbalance, projInvoiceJour.CurrencyId, projInvoiceJour.InvoiceDate, Currency::noYes2UnknownNoYes(projInvoiceJour.Triangulation));
                        busRelrevenueTrans.AmountMST += revenue;
                    }
                }
            }
        }

        if (busRelrevenueTrans)
        {
            busRelrevenueTrans.update();
        }
        if (_updateTotalRevenue && busRelRevenue)
        {
            busRelRevenue.RevenueTotal = busRelRevenue.calculateTotalRevenue(_fromDate,_toDate,false);
            busRelRevenue.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFinancials</Name>
				<Source><![CDATA[
    public static void updateFinancials(QueryRun _qRun = null,TransDate _calcFromDate = dateNull(),TransDate _calcToDate = dateNull())
    {
        smmBusRelRevenueTrans       busRelRevenueTrans;
        CustTable                   custTable;
        smmBusRelRevenue            busRelRevenue;
        ProjPeriodLine              projPeriodLine;
        ProjPeriodId                projPeriodId;

        ttsbegin;

        projPeriodId = smmParametersTable::find().PeriodId;

        if (!_calcFromDate)
        {
            select firstonly PeriodFrom from projPeriodLine order by PeriodFrom where projPeriodLine.PeriodId == projPeriodId ;
            _calcFromDate = projPeriodLine.PeriodFrom;
        }
        if (!_calcToDate)
        {
            select firstonly PeriodTo from projPeriodLine order by PeriodTo desc where projPeriodLine.PeriodId == projPeriodId ;
            _calcToDate = projPeriodLine.PeriodTo;
        }
        while (_qRun.next())
        {
            if (_qRun.changed(tableNum(CustTable)))
            {
                custTable = _qRun.get(tableNum(CustTable));
                select forupdate firstonly busRelRevenue where busRelRevenue.Party == custTable.Party;
                if (!busRelRevenue)
                {
                    busRelRevenue.clear();
                    busRelRevenue.Party   = custTable.Party;
                    busRelRevenue.RevenueDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                    busRelRevenue.insert();
                }
                else
                {
                    busRelRevenue.RevenueDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                    busRelRevenue.RevenueTotal = 0;
                    busRelRevenue.update();
                }
                delete_from busRelRevenueTrans where busRelRevenueTrans.RefRecId == busRelRevenue.RecId && busRelRevenueTrans.FromDate >= _calcFromDate
                && busRelRevenueTrans.ToDate   <= _calcToDate;

                while select PeriodFrom, PeriodTo from projPeriodLine order by PeriodFrom
                    where projPeriodLine.PeriodId == projPeriodId && projPeriodLine.PeriodFrom >= _calcFromDate
                    &&    projPeriodLine.PeriodTo   <= _calcToDate
                {
                    busRelRevenueTrans.clear();
                    busRelRevenueTrans.RefRecId = busRelRevenue.RecId;
                    busRelRevenueTrans.FromDate = projPeriodLine.PeriodFrom;
                    busRelRevenueTrans.ToDate   = projPeriodLine.PeriodTo;
                    busRelRevenueTrans.insert();
                }
            }
        }

        // Update cust revenue
        smmBusRelRevenue::calculateCustRevenue(_calcFromDate, _calcToDate,_qRun,true);

        // Update proj revenue
        smmBusRelRevenue::calculateProjRevenue(_calcFromDate, _calcToDate,_qRun,true);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SmmCRM</ConfigurationKey>
	<DeveloperDocumentation>@SYS124672</DeveloperDocumentation>
	<FormRef>smmBusRelTable</FormRef>
	<Label>@SYS84832</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Party</TitleField1>
	<TitleField2>RevenueDate</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>Party</ClusteredIndex>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>Party</PrimaryIndex>
	<ReplacementKey>Party</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>smmBusRelRevenueTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>smmBusRelRevenueTrans</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Party</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RevenueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RevenueTotal</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Party</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Account</Name>
			<Label>@SYS36303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Party</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Bugdet</Name>
			<Label>@SYS80981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetYear</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetProbability</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Estimate</Name>
			<Label>@SYS54063</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EstimateYear</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Potential</Name>
			<Label>@SYS80403</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PotentialYear</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PotentialDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RevenueInfo</Name>
			<Label>@SYS84834</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RevenueTotal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RevenueDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Turnover</Name>
			<Label>@SYS79857</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TurnoverTotal</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>BudgetProbability</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmBusRelProbability</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BudgetYear</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmAmountMST</ExtendedDataType>
			<Label>@SYS80981</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>EstimateYear</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmAmountMST</ExtendedDataType>
			<Label>@SYS80984</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Party</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DirPartyRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PotentialDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmBusRelEconomicDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PotentialYear</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmAmountMST</ExtendedDataType>
			<Label>@SYS80743</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RevenueDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmRevenueDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RevenueTotal</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmAmountMST</ExtendedDataType>
			<Label>@SYS80919</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TurnoverTotal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmAmountMST</ExtendedDataType>
			<Label>@SYS80491</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Party</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Party</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EntityRelationshipRole>@SYS123670</EntityRelationshipRole>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>IsCustOf</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>IsBusRelFor</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DirPartyTable_FK</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>DirPartyTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>IsPartyOf</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>IsBusRelFor</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>smmBusRelTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EntityRelationshipRole>@SYS123670</EntityRelationshipRole>
			<RelatedTable>smmBusRelTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>IsBusRelFor</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>IsBusRelRevenueFor</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EntityRelationshipRole>@SYS123670</EntityRelationshipRole>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>IsVendTableOf</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>IsBusRelRevenueFor</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>