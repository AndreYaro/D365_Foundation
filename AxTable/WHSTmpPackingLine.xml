<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSTmpPackingLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSTmpPackingLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTmpPackLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>WHSTmpPackingLine</c> table based on the given values.
    /// </summary>
    /// <param name="_tmpPackingLine">
    /// The table buffer for the temp table.
    /// </param>
    /// <param name="_loadLine">
    /// The loadLine the tmpPackingLine is relating to.
    /// </param>
    /// <param name="_qty">
    /// The qty the tmpPackingLine.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventDimId of the tmpPackingLine.
    /// </param>
    /// <param name="_targetLicensePlate">
    /// The target license plate of the work that brought the inventory to the packing station.
    /// </param>
    /// <param name="_itemName">
    /// The name of the item.
    /// </param>
    /// <param name="_inventUOM">
    /// The invent unit of measure of the item.
    /// </param>
    /// <param name="_pickZoneId">
    /// The zone id of the pick location of the work that brought the inventory to the packig station.
    /// </param>
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the writePackingLine method. Extenders should move their logic to wrap the writeWHSTmpPackingLine method.', false, 30\9\2019)]
    protected void addTmpPackLine(
        WHSTmpPackingLine   _tmpPackingLine,
        WHSLoadLine         _loadLine,
        InventQty           _qty,
        InventDimId         _inventDimId,
        WHSLicensePlateId   _targetLicensePlate,
        ItemName            _itemName,
        UnitOfMeasureSymbol _inventUOM,
        WHSZoneId           _pickZoneId)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), _loadLine.ItemId);

        this.writeWHSTmpPackingLine(_tmpPackingLine, _loadLine, _qty, 0, _inventDimId, _targetLicensePlate, _itemName, _inventUOM, _pickZoneId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writePackingLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates a record in the <c>WHSTmpPackingLine</c> table based on the given values.
    /// </summary>
    /// <param name="_tmpPackingLine">
    /// The table buffer for the temp table.
    /// </param>
    /// <param name="_loadLine">
    /// The load Line the tmpPackingLine is relating to.
    /// </param>
    /// <param name="_qtyToPack">
    /// The handling quantity to pack.
    /// </param>
    /// <param name="_weightToPack">
    /// The weight to pack.
    /// </param>
    /// <param name="_inventDimId">
    /// The instance of <c>InventDimId</c> of the tmpPackingLine.
    /// </param>
    /// <param name="_targetLicensePlateId">
    /// The target license plate of the work that brought the inventory to the packing station.
    /// </param>
    /// <param name="_pickZoneId">
    /// The zone id of the pick location of the work that brought the inventory to the packig station.
    /// </param>
    protected void writePackingLine(
        WHSTmpPackingLine   _tmpPackingLine,
        WHSLoadLine         _loadLine,
        InventHandlingQty   _qtyToPack,
        WHSWeightToPack     _weightToPack,
        InventDimId         _inventDimId,
        WHSLicensePlateId   _targetLicensePlateId,
        WHSZoneId           _pickZoneId)
    {
        InventHandlingUnitId    handlingUnitId = WHSCatchWeightHelper::inventHandlingUnitId(_loadLine.ItemId);
        ItemName                itemName = EcoResProductTranslation::getNameOrDefaultName(InventTable::itemProduct(_loadLine.ItemId), currentUserLanguage());

        if (WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightHandlingWeightLogic(funcName(), _loadLine.ItemId, _weightToPack))
        {
            this.addTmpPackLine(_tmpPackingLine, _loadLine, _qtyToPack, _inventDimId, _targetLicensePlateId, itemName, handlingUnitId, _pickZoneId);
        }
        else
        {
            this.writeWHSTmpPackingLine(_tmpPackingLine, _loadLine, _qtyToPack, _weightToPack, _inventDimId, _targetLicensePlateId, itemName, handlingUnitId, _pickZoneId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeWHSTmpPackingLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates a record in the <c>WHSTmpPackingLine</c> table based on the given values.
    /// </summary>
    /// <param name="_tmpPackingLine">
    /// The table buffer for the temp table.
    /// </param>
    /// <param name="_loadLine">
    /// The loadLine the tmpPackingLine is relating to.
    /// </param>
    /// <param name="_qtyToPack">
    /// The handling quantity to pack.
    /// </param>
    /// <param name="_weightToPack">
    /// The weight to pack.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventDimId of the tmpPackingLine.
    /// </param>
    /// <param name="_targetLicensePlateId">
    /// The target license plate of the work that brought the inventory to the packing station.
    /// </param>
    /// <param name="_itemName">
    /// The parameter of type <c>ItemName</c>.
    /// </param>
    /// <param name="_handlingUnitId">
    /// The parameter of type <c>InventHandlingUnitId</c>.
    /// </param>
    /// <param name="_pickZoneId">
    /// The zone id of the pick location of the work that brought the inventory to the packig station.
    /// </param>
    /// <remarks>
    /// The method is an extension and is not meant to be called directly. Callers should call the writePackingLine method.
    /// </remarks>
    [Wrappable(true)]
    protected void writeWHSTmpPackingLine(
        WHSTmpPackingLine       _tmpPackingLine,
        WHSLoadLine             _loadLine,
        InventHandlingQty       _qtyToPack,
        WHSWeightToPack         _weightToPack,
        InventDimId             _inventDimId,
        WHSLicensePlateId       _targetLicensePlateId,
        ItemName                _itemName,
        InventHandlingUnitId    _handlingUnitId,
        WHSZoneId               _pickZoneId)
    {
        WHSCatchWeightTelemetryLogger::logCatchWeightConflictingQuantities(funcName(), _loadLine.ItemId, _qtyToPack, _weightToPack);
        
        _tmpPackingLine = this.modifyPackingLine(_tmpPackingLine, _loadLine, _qtyToPack, _weightToPack, _inventDimId, _targetLicensePlateId, _itemName, _handlingUnitId, _pickZoneId);

        _tmpPackingLine.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyPackingLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes or adjusts a packing line.
    /// </summary>
    /// <param name="_tmpPackingLine">
    /// The table buffer for the temp table.
    /// </param>
    /// <param name="_loadLine">
    /// The loadLine the tmpPackingLine is relating to.
    /// </param>
    /// <param name="_qtyToPack">
    /// The qty the tmpPackingLine.
    /// </param>
    /// <param name="_weightToPack">
    /// The weight to pack for a catch weight item.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventDimId of the tmpPackingLine.
    /// </param>
    /// <param name="_targetLicensePlateId">
    /// The target license plate of the work that brought the inventory to the packing station.
    /// </param>
    /// <param name="_itemName">
    /// The name of the item.
    /// </param>
    /// <param name="_handlingUnitId">
    /// The handling unit of measure of the item.
    /// </param>
    /// <param name="_pickZoneId">
    /// The zone id of the pick location of the work that brought the inventory to the packig station.
    /// </param>
    /// <returns>
    /// Returns <c>WHSTmpPackingLine</c> object.
    /// </returns>
    protected WHSTmpPackingLine modifyPackingLine(
        WHSTmpPackingLine       _tmpPackingLine,
        WHSLoadLine             _loadLine,
        InventHandlingQty       _qtyToPack,
        WHSWeightToPack         _weightToPack,
        InventDimId             _inventDimId,
        WHSLicensePlateId       _targetLicensePlateId,
        ItemName                _itemName,
        InventHandlingUnitId    _handlingUnitId,
        WHSZoneId               _pickZoneId)
    {
        if (WHSTmpPackingLine::existForLoadLine(_tmpPackingLine, _loadLine.RecId, _inventDimId, _handlingUnitId))
        {
            // Update existing tmpPackingLine
            _tmpPackingLine = this.adjustPackingLine(_tmpPackingLine, _loadLine, _qtyToPack, _weightToPack, _inventDimId, _targetLicensePlateId, _itemName, _handlingUnitId, _pickZoneId);
        }
        else
        {
            // create new tmpPackingLine
            _tmpPackingLine = this.initializePackingLine(_tmpPackingLine, _loadLine, _qtyToPack, _weightToPack, _inventDimId, _targetLicensePlateId, _itemName, _handlingUnitId, _pickZoneId);
        }

        return _tmpPackingLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTmpPackingLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a buffer in the <c>WHSTmpPackingLine</c> table based on the given values.
    /// </summary>
    /// <param name="_tmpPackingLine">
    /// The table buffer for the temp table.
    /// </param>
    /// <param name="_loadLine">
    /// The loadLine the tmpPackingLine is relating to.
    /// </param>
    /// <param name="_qty">
    /// The qty the tmpPackingLine.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventDimId of the tmpPackingLine.
    /// </param>
    /// <param name="_targetLicensePlate">
    /// The target license plate of the work that brought the inventory to the packing station.
    /// </param>
    /// <param name="_itemName">
    /// The name of the item.
    /// </param>
    /// <param name="_inventUOM">
    /// The invent unit of measure of the item.
    /// </param>
    /// <param name="_pickZoneId">
    /// The zone id of the pick location of the work that brought the inventory to the packig station.
    /// </param>
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the initializePackingLine method. Extenders should move their logic to wrap the initializeWHSTmpPackingLine method.', false, 30\9\2019)]
    protected void initializeTmpPackingLine(
        WHSTmpPackingLine   _tmpPackingLine,
        WHSLoadLine         _loadLine,
        InventQty           _qty,
        InventDimId         _inventDimId,
        WHSLicensePlateId   _targetLicensePlate,
        ItemName            _itemName,
        UnitOfMeasureSymbol _inventUOM,
        WHSZoneId           _pickZoneId)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), _loadLine.ItemId);

        this.initializeWHSTmpPackingLine(_tmpPackingLine, _loadLine, _qty, 0, _inventDimId, _targetLicensePlate, _itemName, _inventUOM, _pickZoneId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePackingLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a packing line from a load line.
    /// </summary>
    /// <param name="_tmpPackingLine">
    /// The packing line temp table.
    /// </param>
    /// <param name="_loadLine">
    /// The loadLine the tmpPackingLine is relating to.
    /// </param>
    /// <param name="_qtyToPack">
    /// A handling quantity to initialize the packing line with.
    /// </param>
    /// <param name="_weightToPack">
    /// A handling weight to initialize the packing line with.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventDimId of the packing line.
    /// </param>
    /// <param name="_targetLicensePlateId">
    /// The target license plate of the work that brought the inventory to the packing station.
    /// </param>
    /// <param name="_itemName">
    /// The name of the item.
    /// </param>
    /// <param name="_inventUOM">
    /// The invent unit of measure of the item.
    /// </param>
    /// <param name="_pickZoneId">
    /// The zone id of the pick location of the work that brought the inventory to the packig station.
    /// </param>
    /// <returns>
    /// The initialized packing line.
    /// </returns>
    final protected WHSTmpPackingLine initializePackingLine(
        WHSTmpPackingLine   _tmpPackingLine,
        WHSLoadLine         _loadLine,
        InventHandlingQty   _qtyToPack,
        WHSHandlingWeight   _weightToPack,
        InventDimId         _inventDimId,
        WHSLicensePlateId   _targetLicensePlateId,
        ItemName            _itemName,
        UnitOfMeasureSymbol _inventUOM,
        WHSZoneId           _pickZoneId)
    {
        if (WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightHandlingWeightLogic(funcName(), _loadLine.ItemId, _weightToPack))
        {
            this.initializeTmpPackingLine(_tmpPackingLine, _loadLine, _qtyToPack, _inventDimId, _targetLicensePlateId, _itemName, _inventUOM, _pickZoneId);
        }
        else
        {
            this.initializeWHSTmpPackingLine(_tmpPackingLine, _loadLine, _qtyToPack, _weightToPack, _inventDimId, _targetLicensePlateId, _itemName, _inventUOM, _pickZoneId);
        }

        return _tmpPackingLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeWHSTmpPackingLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a packing line from a load line.
    /// </summary>
    /// <param name="_tmpPackingLine">
    /// The packing line temp table.
    /// </param>
    /// <param name="_loadLine">
    /// The loadLine the tmpPackingLine is relating to.
    /// </param>
    /// <param name="_qtyToPack">
    /// A handling quantity to initialize the packing line with.
    /// </param>
    /// <param name="_weightToPack">
    /// A handling weight to initialize the packing line with.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventDimId of the packing line.
    /// </param>
    /// <param name="_targetLicensePlateId">
    /// The target license plate of the work that brought the inventory to the packing station.
    /// </param>
    /// <param name="_itemName">
    /// The name of the item.
    /// </param>
    /// <param name="_inventUOM">
    /// The invent unit of measure of the item.
    /// </param>
    /// <param name="_pickZoneId">
    /// The zone id of the pick location of the work that brought the inventory to the packig station.
    /// </param>
    /// <returns>
    /// The initialized packing line.
    /// </returns>
    /// <remarks>
    /// The method is an extension and is not meant to be called directly. Callers should call the initializePackingLine method.
    /// </remarks>
    [Wrappable(true)]
    protected void initializeWHSTmpPackingLine(
        WHSTmpPackingLine   _tmpPackingLine,
        WHSLoadLine         _loadLine,
        InventHandlingQty   _qtyToPack,
        WHSHandlingWeight   _weightToPack,
        InventDimId         _inventDimId,
        WHSLicensePlateId   _targetLicensePlateId,
        ItemName            _itemName,
        UnitOfMeasureSymbol _inventUOM,
        WHSZoneId           _pickZoneId)
    {
        WHSCatchWeightTelemetryLogger::logCatchWeightConflictingQuantities(funcName(), _loadLine.ItemId, _qtyToPack, _weightToPack);
        
        _tmpPackingLine.ShipmentId       = _loadLine.ShipmentId;
        _tmpPackingLine.ItemId           = _loadLine.ItemId;
        _tmpPackingLine.uom              = _inventUOM;
        _tmpPackingLine.ItemName         = _itemName;
        _tmpPackingLine.InventDimId      = _inventDimId;
        _tmpPackingLine.LoadLine         = _loadLine.RecId;
        _tmpPackingLine.ZoneId           = _pickZoneId;
        _tmpPackingLine.ToteId           = _targetLicensePlateId;

        _tmpPackingLine.Qty              = _qtyToPack;

        InventHandlingQty packedHandlingQty;
        WHSHandlingWeight packedHandlingWeight;

        [packedHandlingQty, packedHandlingWeight] = this.determinePackedQuantitiesFromPackingWorkOrContainer(_qtyToPack, _weightToPack, _targetLicensePlateId);
                
        _tmpPackingLine.QtyPacked        = packedHandlingQty;
        _tmpPackingLine.QtyRemaining     = _tmpPackingLine.Qty - _tmpPackingLine.QtyPacked;
        _tmpPackingLine.WeightToPack     = _weightToPack - packedHandlingWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determinePackedQuantitiesFromPackingWorkOrContainer</Name>
				<Source><![CDATA[
    private container determinePackedQuantitiesFromPackingWorkOrContainer(
        InventHandlingQty   _qtyToPack,
        WHSHandlingWeight   _weightToPack,
        WHSLicensePlateId   _targetLicensePlateId)
    {
        boolean isPackingWork;
        WHSWorkTable workTable;

        var currentWorkContext = WHSPopulateTmpPackingLineCurrentWorkContext::instance();
        if (currentWorkContext && currentWorkContext.currentWorkTable)
        {
            workTable = currentWorkContext.currentWorkTable;
            isPackingWork = workTable && workTable.WorkTransType == WHSWorkTransType::Packing;
        }
           
        // Handle packing work cases
        switch (true)
        {      
            // New case for open packing work - deduct only quantities from open containers (=containers in process of being packed),
            // quantities from closed containers will be handled by looping over through closed packing works (see case below)
            case isPackingWork && workTable.WorkStatus == WHSWorkStatus::Open:
                return this.calculatePackedQuantitiesFromOpenContainerLine(this.LoadLine);
           
            case isPackingWork && workTable.WorkStatus == WHSWorkStatus::Closed:
                return [_qtyToPack, _weightToPack];
        }

        // If not packing work, fall back to calculating packed quantities from container lines
        return this.calculatePackedQuantities();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeExistingTmpPackingLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an existing buffer in the <c>WHSTmpPackingLine</c> table based on the given values.
    /// </summary>
    /// <param name="_tmpPackingLine">
    /// The table buffer for the temp table.
    /// </param>
    /// <param name="_loadLine">
    /// The loadLine the tmpPackingLine is relating to.
    /// </param>
    /// <param name="_qty">
    /// The qty the tmpPackingLine.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventDimId of the tmpPackingLine.
    /// </param>
    /// <param name="_targetLicensePlate">
    /// The target license plate of the work that brought the inventory to the packing station.
    /// </param>
    /// <param name="_itemName">
    /// The name of the item.
    /// </param>
    /// <param name="_inventUOM">
    /// The invent unit of measure of the item.
    /// </param>
    /// <param name="_pickZoneId">
    /// The zone id of the pick location of the work that brought the inventory to the packig station.
    /// </param>
    /// <returns>
    /// The modified packing line.
    /// </returns>
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the adjustPackingLine method. Extenders should move their logic to wrap the adjustWHSTmpPackingLine method.', false, 30\9\2019)]
    protected WHSTmpPackingLine initializeExistingTmpPackingLine(
        WHSTmpPackingLine   _tmpPackingLine,
        WHSLoadLine         _loadLine,
        InventQty           _qty,
        InventDimId         _inventDimId,
        WHSLicensePlateId   _targetLicensePlate,
        ItemName            _itemName,
        UnitOfMeasureSymbol _inventUOM,
        WHSZoneId           _pickZoneId)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), _loadLine.ItemId);

        return this.adjustWHSTmpPackingLine(_tmpPackingLine, _loadLine, _qty, 0, _inventDimId, _targetLicensePlate, _inventUOM);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustPackingLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts an existing buffer in the <c>WHSTmpPackingLine</c> table based on the given values.
    /// </summary>
    /// <param name="_tmpPackingLine">
    /// The table buffer for the temp table.
    /// </param>
    /// <param name="_loadLine">
    /// The loadLine the tmpPackingLine is relating to.
    /// </param>
    /// <param name="_qtyToPack">
    /// A handling quantity to add to the tmpPackingLine.
    /// </param>
    /// <param name="_weightToPack">
    /// A handling weight to add to the tmpPackingLine.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventDimId of the tmpPackingLine.
    /// </param>
    /// <param name="_targetLicensePlateId">
    /// The target license plate of the work that brought the inventory to the packing station.
    /// </param>
    /// <param name="_itemName">
    /// The name of the item.
    /// </param>
    /// <param name="_handlingUnitId">
    /// The handling unit of measure of the item.
    /// </param>
    /// <param name="_pickZoneId">
    /// The zone id of the pick location of the work that brought the inventory to the packig station.
    /// </param>
    /// <returns>
    /// The modified packing line.
    /// </returns>
    final protected WHSTmpPackingLine adjustPackingLine(
        WHSTmpPackingLine       _tmpPackingLine,
        WHSLoadLine             _loadLine,
        InventHandlingQty       _qtyToPack,
        WHSHandlingWeight       _weightToPack,
        InventDimId             _inventDimId,
        WHSLicensePlateId       _targetLicensePlateId,
        ItemName                _itemName,
        InventHandlingUnitId    _handlingUnitId,
        WHSZoneId               _pickZoneId)
    {
        if (WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightHandlingWeightLogic(funcName(), _loadLine.ItemId, _weightToPack))
        {
            return this.initializeExistingTmpPackingLine(_tmpPackingLine, _loadLine, _qtyToPack, _inventDimId, _targetLicensePlateId, _itemName, _handlingUnitId, _pickZoneId);
        }

        return this.adjustWHSTmpPackingLine(_tmpPackingLine, _loadLine, _qtyToPack, _weightToPack, _inventDimId, _targetLicensePlateId, _handlingUnitId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustWHSTmpPackingLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts an existing buffer in the <c>WHSTmpPackingLine</c> table based on the given values.
    /// </summary>
    /// <param name="_tmpPackingLine">
    /// The table buffer for the temp table.
    /// </param>
    /// <param name="_loadLine">
    /// The loadLine the tmpPackingLine is relating to.
    /// </param>
    /// <param name="_qtyToPack">
    /// A handling quantity to add to the tmpPackingLine.
    /// </param>
    /// <param name="_weightToPack">
    /// A handling weight to add to the tmpPackingLine.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventDimId of the tmpPackingLine.
    /// </param>
    /// <param name="_targetLicensePlateId">
    /// The target license plate of the work that brought the inventory to the packing station.
    /// </param>
    /// <param name="_itemName">
    /// The name of the item.
    /// </param>
    /// <param name="_handlingUnitId">
    /// The handling unit of measure of the item.
    /// </param>
    /// <param name="_pickZoneId">
    /// The zone id of the pick location of the work that brought the inventory to the packig station.
    /// </param>
    /// <returns>
    /// The modified packing line.
    /// </returns>    
    /// <remarks>
    /// The method is an extension and is not meant to be called directly. Callers should call the adjustPackingLine method.
    /// </remarks>
    [Wrappable(true)]
    protected WHSTmpPackingLine adjustWHSTmpPackingLine(
        WHSTmpPackingLine       _tmpPackingLine,
        WHSLoadLine             _loadLine,
        InventHandlingQty       _qtyToPack,
        WHSHandlingWeight       _weightToPack,
        InventDimId             _inventDimId,
        WHSLicensePlateId       _targetLicensePlateId,
        InventHandlingUnitId    _handlingUnitId)
    {
        WHSCatchWeightTelemetryLogger::logCatchWeightConflictingQuantities(funcName(), _loadLine.ItemId, _qtyToPack, _weightToPack);
        
        _tmpPackingLine = WHSTmpPackingLine::findByLoadLineDimUOM(_tmpPackingLine, _loadLine.RecId, _inventDimId, _handlingUnitId, true);
        
        var currentWorkContext = WHSPopulateTmpPackingLineCurrentWorkContext::instance();
        if (currentWorkContext && currentWorkContext.currentWorkTable)
        {
            WHSWorkTable workTable = currentWorkContext.currentWorkTable;
            if (workTable && workTable.WorkTransType == WHSWorkTransType::Packing && workTable.WorkStatus == WHSWorkStatus::Closed)
            {
                _tmpPackingLine.QtyPacked += _qtyToPack;
            }
        }

        _tmpPackingLine.Qty            += _qtyToPack;
        _tmpPackingLine.QtyRemaining    = _tmpPackingLine.Qty - _tmpPackingLine.QtyPacked;
        _tmpPackingLine.WeightToPack   += _weightToPack;

        _tmpPackingLine.ToteId = _targetLicensePlateId != _tmpPackingLine.ToteId ? "@WAX402" : _tmpPackingLine.ToteId;

        return _tmpPackingLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyPacked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the qty of the tmpPackingLine that has been packed.
    /// </summary>
    /// <returns>
    /// The qty of the tmpPackingLine that has already been packed.
    /// </returns>
    public Qty calcQtyPacked()
    {
        InventHandlingQty packedHandlingQty;
        WHSHandlingWeight packedHandlingWeight;

        [packedHandlingQty, packedHandlingWeight] = this.calculatePackedQuantities();

        return packedHandlingQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePackedQuantities</Name>
				<Source><![CDATA[
    private container calculatePackedQuantities()
    {
        InventHandlingQty packedHandlingQty;
        WHSHandlingWeight packedHandlingWeight;

        [packedHandlingQty, packedHandlingWeight] = this.calculatePackedQuantitiesFromContainerLine(this.LoadLine);

        return this.calculatePackedQuantitiesFromSplitLoadReferences(this.LoadLine, packedHandlingQty, packedHandlingWeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePackedQuantitiesFromSplitLoadReferences</Name>
				<Source><![CDATA[
    private container calculatePackedQuantitiesFromSplitLoadReferences(
        WHSLoadLineRefRecId _loadLineRecId,
        InventHandlingQty   _packedHandlingQty,
        WHSHandlingWeight   _packedHandlingWeight)
    {
        InventHandlingQty packedHandlingQty = _packedHandlingQty;
        WHSHandlingWeight packedHandlingWeight = _packedHandlingWeight;

        if (WHSConfirmAndTransferInventoryAtPackingStationToggle::instance().isEnabled())
        {
            WHSSplitLoadReference loadReference = WHSSplitLoadReference::findByNewLoadLineReference(_loadLineRecId);

            if (loadReference.OldLoadLine)
            {
                InventHandlingQty localPackedHandlingQty;
                WHSHandlingWeight localPackedHandlingWeight;

                [localPackedHandlingQty, localPackedHandlingWeight] = this.calculatePackedQuantitiesFromContainerLine(loadReference.OldLoadLine);

                packedHandlingQty += localPackedHandlingQty;
                packedHandlingWeight += localPackedHandlingWeight;

                // In scenarios where the shipment has been split multiple times, traverse the WHSSplitLoadReference table and check there are any other closed containers to consider.
                [packedHandlingQty, packedHandlingWeight] = this.calculatePackedQuantitiesFromSplitLoadReferences(loadReference.OldLoadLine, packedHandlingQty, packedHandlingWeight);
            }
        }

        return [packedHandlingQty, packedHandlingWeight];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePackedQuantitiesFromOpenContainerLine</Name>
				<Source><![CDATA[
    private container calculatePackedQuantitiesFromOpenContainerLine(WHSLoadLineRefRecId _loadLineRefRecId)
    {
        WHSContainerLine    containerLine;
        WHSContainerTable   closedContainerTable;
        InventDim           inventDimCriteria;
        InventDimParm       inventDimParm;
        InventDim           inventDim;
        
        inventDimCriteria = InventDim::find(this.InventDimId);
        inventDimParm.initFromInventDim(inventDimCriteria);

        select firstonly sum(Qty), sum(CapturedWeight) from containerLine
            where containerLine.ItemId      == this.ItemId
            &&    containerLine.LoadLine    == _loadLineRefRecId
            &&    containerLine.UnitId      == this.uom
            #InventDimExistsJoin(containerLine.inventDimId, inventDim, inventDimCriteria, inventDimParm)
            notexists join closedContainerTable
                where closedContainerTable.ContainerId == containerLine.ContainerId
                   && closedContainerTable.ShipmentId == containerLine.ShipmentId
                   && closedContainerTable.ContainerStatus == WHSContainerStatus::Closed;

        return [containerLine.Qty, containerLine.CapturedWeight];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePackedQuantitiesFromContainerLine</Name>
				<Source><![CDATA[
    private container calculatePackedQuantitiesFromContainerLine(WHSLoadLineRefRecId _loadLineRefRecId)
    {
        WHSContainerLine    containerLine;
        InventDim           inventDimCriteria;
        InventDimParm       inventDimParm;
        InventDim           inventDim;
        
        inventDimCriteria = InventDim::find(this.InventDimId);
        inventDimParm.initFromInventDim(inventDimCriteria);

        
        select firstonly sum(Qty), sum(CapturedWeight) from containerLine
                where containerLine.ItemId      == this.ItemId
                &&    containerLine.LoadLine    == _loadLineRefRecId
                &&    containerLine.UnitId      == this.uom
                #InventDimExistsJoin(containerLine.inventDimId, inventDim, inventDimCriteria, inventDimParm);

        

        return [containerLine.Qty, containerLine.CapturedWeight];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyRemaining</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the qty of the tmpPackingLine has not been packed.
    /// </summary>
    /// <returns>
    /// The qty of the tmpPackingLine that has not yet been packed.
    /// </returns>
    public Qty calcQtyRemaining()
    {
        return this.Qty - this.calcQtyPacked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPackComplete</Name>
				<Source><![CDATA[
    display ImageRes displayPackComplete()
    {
        #ResAppl
        ImageRes    ret;

        if (!this.QtyRemaining)
        {
            ret = #ImageOverlayYes;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForLoadLine</Name>
				<Source><![CDATA[
    public static boolean existForLoadLine(
        WHSTmpPackingLine   _tmpPackingLine,
        RefRecId            _loadLineRecId,
        InventDimId         _inventDimId,
        UnitOfMeasureSymbol _uom)
    {
        WHSTmpPackingLine   tmpPackingLine;

        tmpPackingLine.setTmpData(_tmpPackingLine);

        select firstonly RecId from tmpPackingLine
            where tmpPackingLine.LoadLine       == _loadLineRecId
            &&    tmpPackingLine.InventDimId    == _inventDimId
            &&    tmpPackingLine.uom            == _uom;

        return tmpPackingLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLoadLineDimUOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the tmpPackingLine by the passed in parameters.
    /// </summary>
    /// <param name="_tmpPackingLine">
    /// The table buffer of the temp table.
    /// </param>
    /// <param name="_loadLineRecId">
    /// The load line recId the tmpPackingLine relates to.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventDimId of the tmpPackingLine.
    /// </param>
    /// <param name="_uom">
    /// The unit of measure of the tmpPackingLine.
    /// </param>
    /// <param name="_forUpdate">
    /// Determines if the record should be selected for update or not.
    /// </param>
    /// <returns>
    /// The selected tmpPackingLine record.
    /// </returns>
    public static WHSTmpPackingLine findByLoadLineDimUOM(
        WHSTmpPackingLine   _tmpPackingLine,
        WHSLoadLineRefRecId _loadLineRecId,
        InventDimId         _inventDimId,
        UnitOfMeasureSymbol _uom,
        boolean             _forUpdate = false)
    {
        WHSTmpPackingLine   tmpPackingLine;

        tmpPackingLine.setTmpData(_tmpPackingLine);

        tmpPackingLine.selectForUpdate(_forUpdate);

        select firstonly tmpPackingLine
            where tmpPackingLine.LoadLine       == _loadLineRecId
            &&    tmpPackingLine.InventDimId    == _inventDimId
            &&    tmpPackingLine.uom            == _uom;

        return tmpPackingLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasUnPackedLineForShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if any pack lines for the shipment have not yet been packed.
    /// </summary>
    /// <param name="_tmpPackingLine">
    /// The table buffer of the temp table.
    /// </param>
    /// <param name="_shipmentId">
    /// The shipment Id to filter by.
    /// </param>
    /// <returns>
    /// true if some lines have not been fully packed for the shipment; otherwise, false.
    /// </returns>
    public static boolean hasUnPackedLineForShipment(
        WHSTmpPackingLine   _tmpPackingLine,
        WHSShipmentId       _shipmentId)
    {
        select firstonly RecId from _tmpPackingLine
            where _tmpPackingLine.ShipmentId    == _shipmentId
            &&    _tmpPackingLine.QtyRemaining  >  0;

        return _tmpPackingLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPackingItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup method for showing the items available for packing.
    /// </summary>
    /// <param name = "_ctrl">The Item ID form control.</param>
    /// <param name = "_tmpPackingLine">A <c>WHSTmpPackingLine</c> buffer.</param>
    public static void lookupPackingItems(FormStringControl _ctrl, WHSTmpPackingLine _tmpPackingLine)
    {
        Query query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(tableNum(WHSTmpPackingLine));

        WHSTmpPackingLine tmpPackingLineLookupBuffer = WHSTmpPackingLine::buildTmpPackingLineLookupBuffer(_tmpPackingLine);

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(WHSTmpPackingLine), _ctrl);
        sysTableLookup.addLookupfield(fieldNum(WHSTmpPackingLine, ItemId));
        sysTableLookup.addLookupfield(fieldNum(WHSTmpPackingLine, ItemName));

        if (WHSPackItemIdLookupContext::instance().parmQueryFilter())
        {
            qbds.addRange(fieldNum(WHSTmpPackingLine, ItemId)).value(SysQuery::valueLikeAfter(WHSPackItemIdLookupContext::instance().parmQueryFilter()));
        }
        sysTableLookup.parmTmpBuffer(tmpPackingLineLookupBuffer);

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTmpPackingLineLookupBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>WHSTmpPackingLine</c> buffer for use as a lookup buffer.
    /// It is grouped by the ItemId and ItemName fields.
    /// </summary>
    /// <param name = "_tmpPackingLine"><c>WHSTmpPackingLine</c> record to build buffer from.</param>
    /// <returns>New <c>WHSTmpPackingLine</c> buffer.</returns>
    private static WHSTmpPackingLine buildTmpPackingLineLookupBuffer(WHSTmpPackingLine _tmpPackingLine)
    {
        WHSTmpPackingLine	localTmpPackingLine;
        WHSTmpPackingLine	localTmpPackingLineGrouped;

        localTmpPackingLine.setTmpData(_tmpPackingLine);

        while select ItemId, ItemName from localTmpPackingLine
            group by ItemId, ItemName
            where localTmpPackingLine.QtyRemaining != 0
        {
            localTmpPackingLineGrouped.ItemId = localTmpPackingLine.ItemId;
            localTmpPackingLineGrouped.ItemName = localTmpPackingLine.ItemName;
            localTmpPackingLineGrouped.insert();
        }

        return localTmpPackingLineGrouped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePackingLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the tmpPackingline table for the shipment.
    /// </summary>
    /// <param name="_shipmentId">
    /// The shipment Id of the shipment the table tmpPackingLine table is generated for. Optional.
    /// </param>
    /// <param name="_packStationLocation">
    /// Location of the packing station. Optional.
    /// </param>
    /// <returns>
    /// The table buffer of all create tmpPackingLines for the shipment.
    /// </returns>
    public static WHSTmpPackingLine populatePackingLines(WHSShipmentId _shipmentId = '', WMSLocation _packStationLocation = null)
    {
        WHSTmpPackingLine tmpPackingLine;

        if (_shipmentId && _packStationLocation)
        {
            WHSLoadLine     loadLine;
            WHSWorkTable    pickWorkTable;
            WHSWorkLine     pickWorkLine;

            WHSWorkTable    workTableLocal;
            WHSWorkId       lastSelectedWorkId;

            boolean isPackingEnabled = WHSPackingWorkLocationSetup::find(_packStationLocation.InventLocationId , _packStationLocation.wMSLocationId).isEnabled;            

            ttsbegin;

            while select loadLine
                where loadLine.ShipmentId == _shipmentId
                    join pickWorkLine
                    order by LoadLineRefRecId, WorkId
                    where pickWorkLine.QtyWork          >  0
                        && pickWorkLine.LoadLineRefRecId == loadLine.RecId
                        && ((pickWorkLine.WorkStatus == WHSWorkStatus::Closed && !isPackingEnabled)
                            || (isPackingEnabled))
                        && pickWorkLine.ContainerId  == ''
                    exists join  pickWorkTable
                        where pickWorkTable.WorkId     == pickWorkLine.WorkId
                            && pickWorkTable.WorkStatus != WHSWorkStatus::Combined
                            && pickWorkTable.WorkStatus != WHSWorkStatus::Cancelled
                            && (!isPackingEnabled
                                || (pickWorkTable.WorkTransType == WHSWorkTransType::Packing))
            {
                
                if (pickWorkLine.WorkId != lastSelectedWorkId)
                {
                    lastSelectedWorkId = pickWorkLine.WorkId;
                    workTableLocal = WHSWorkTable::find(pickWorkLine.WorkId);
                }

                WHSWorkLine putWorkLine = WHSTmpPackingLine::findPutWorkLine(pickWorkLine, _packStationLocation, workTableLocal.isOriginForConsolidatedWork(), isPackingEnabled);

                using (var currentWorkTableContext = WHSPopulateTmpPackingLineCurrentWorkContext::construct())
                {
                    if (isPackingEnabled)
                    {
                        currentWorkTableContext.currentWorkTable = workTableLocal;
                    }

                    WHSTmpPackingLine::createTmpPackingLine(tmpPackingLine, pickWorkLine, putWorkLine, loadLine);                
                }
            }

            if (WHSConfirmAndTransferInventoryAtPackingStationToggle::instance().isEnabled())
            {
                WHSSplitLoadReference splitLoadReference;
                
                while select loadLine
                    exists join splitLoadReference
                    where splitLoadReference.NewShipmentId == _shipmentId
                        && splitLoadReference.NewLoadLine == loadLine.RecId
                {
                    WHSTmpPackingLine::traverseSplitShipments(_shipmentId, _packStationLocation, tmpPackingLine, loadLine);
                }
            }

            ttscommit;
        }

        return tmpPackingLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPutWorkLine</Name>
				<Source><![CDATA[
    private static WHSWorkLine findPutWorkLine(
        WHSWorkLine _pickWorkLine,
        WMSLocation _packStationLocation,
        boolean     _isOriginForConsolidatedWork,
        boolean     _isPackingFeatureUsed = false)
    {
        WHSWorkLine putWorkLine;

        if (_isOriginForConsolidatedWork)
        {
            putWorkLine = WHSTmpPackingLine::findPutToPackConsolidatedWorkLine(_pickWorkLine, _packStationLocation);
        }
        else
        {
            WHSWorkTable workTable;

            select firstonly RecId, wmsLocationId, WorkId from putWorkLine
                where putWorkLine.WorkId			== _pickWorkLine.WorkId
                    && putWorkLine.WorkType			== WHSWorkType::Put
                    && (putWorkLine.WorkStatus		== WHSWorkStatus::Closed
                        || _isPackingFeatureUsed)
                    && putWorkLine.wmsLocationId	== _packStationLocation.wMSLocationId
                exists join workTable
                    where workTable.workId				== putWorkLine.WorkId
                        && workTable.InventLocationId	== _packStationLocation.inventLocationId;
        }

        return putWorkLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpPackingLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static void createTmpPackingLine(
        WHSTmpPackingLine   _tmpPackingLine,
        WHSWorkLine         _pickWorkLine, 
        WHSWorkLine         _putWorkLine,
        WHSLoadLine         _loadLine)
    {
        if (_putWorkLine.RecId != 0)
        {
            InventDim           inventDim;

            // If the workLine uses dim tracking we must use those values.
            if (_pickWorkLine.hasDimTracking())
            {
                WHSDimTracking dimTracking;

                while select dimTracking
                            where dimTracking.WorkId    == _pickWorkLine.WorkId
                            &&    dimTracking.LineNum   == _pickWorkLine.LineNum
                {
                    _tmpPackingLine.clear();

                    _tmpPackingLine.writePackingLineFromDimTracking(_tmpPackingLine, dimTracking, _pickWorkLine, _putWorkLine, _loadLine);
                }
            }
            else // For work that doesn't have dim tracking we can use workLine values
            {
                _tmpPackingLine.clear();

                _tmpPackingLine.writePackingLineFromPickWorkLine(_tmpPackingLine, _pickWorkLine, _putWorkLine, _loadLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>traverseSplitShipments</Name>
				<Source><![CDATA[
    private static void traverseSplitShipments(
        WHSShipmentId _shipmentId,
        WMSLocation _packStationLocation,
        WHSTmpPackingLine _tmpPackingLine,
        WHSLoadLine _loadLine)
    {
        WHSWorkTable    pickWorkTable;
        WHSWorkLine     pickWorkLine;

        WHSWorkTable    workTableLocal;
        WHSWorkId       lastSelectedWorkId;

        WHSSplitLoadReference splitLoadReference;
        WHSLoadLine splitLoadLine;

        while select splitLoadReference
            where splitLoadReference.NewShipmentId == _shipmentId
                join TableId from splitLoadLine
                where splitLoadLine.RecId == splitLoadReference.OldLoadLine
                    && splitLoadLine.ShipmentId == splitLoadReference.OldShipmentId
                    && splitLoadLine.ItemId == _loadLine.ItemId
                join pickWorkLine
                order by pickWorkLine.LoadLineRefRecId, pickWorkLine.WorkId
                where pickWorkLine.WorkId            == splitLoadReference.WorkId
                    && pickWorkLine.LineNum          == splitLoadReference.LineNum
                    && pickWorkLine.QtyWork          >  0
                    && pickWorkLine.LoadLineRefRecId == splitLoadLine.RecId
                    && pickWorkLine.WorkStatus       == WHSWorkStatus::Closed
                    && pickWorkLine.ContainerId      == ''
                exists join  pickWorkTable
                where pickWorkTable.WorkId     == pickWorkLine.WorkId
                    && pickWorkTable.WorkStatus != WHSWorkStatus::Combined
        {
            if (pickWorkLine.WorkId != lastSelectedWorkId)
            {
                lastSelectedWorkId = pickWorkLine.WorkId;
                workTableLocal = WHSWorkTable::find(pickWorkLine.WorkId);
            }

            WHSWorkLine putWorkLine = WHSTmpPackingLine::findPutWorkLine(pickWorkLine, _packStationLocation, workTableLocal.isOriginForConsolidatedWork());

            WHSTmpPackingLine::createTmpPackingLine(_tmpPackingLine, pickWorkLine, putWorkLine, _loadLine);
        }

        WHSSplitLoadReference loadReference = WHSSplitLoadReference::findByNewShipmentId(_shipmentId);

        if (loadReference.OldShipmentId)
        {
            WHSTmpPackingLine::traverseSplitShipments(loadReference.OldShipmentId, _packStationLocation, _tmpPackingLine, _loadLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceTargetLicensePlateIdWithOriginalToteIdForClosedPackingWork</Name>
				<Source><![CDATA[
    private WHSLicensePlateId replaceTargetLicensePlateIdWithOriginalToteIdForClosedPackingWork(WHSLicensePlateId _targetLicensePlateId, WHSWorkLine _pickWorkLine)
    {
        var currentPopulateTmpPackingLineCurrentWorkContext = WHSPopulateTmpPackingLineCurrentWorkContext::instance();
        if (currentPopulateTmpPackingLineCurrentWorkContext &&
            currentPopulateTmpPackingLineCurrentWorkContext.currentWorkTable &&
            currentPopulateTmpPackingLineCurrentWorkContext.currentWorkTable.WorkTransType == WHSWorkTransType::Packing &&
            currentPopulateTmpPackingLineCurrentWorkContext.currentWorkTable.WorkStatus == WHSWorkStatus::Closed)
        {
            InventDim pickWorkLineInventDim = _pickWorkLine.inventDim();
            _targetLicensePlateId = pickWorkLineInventDim.LicensePlateId;
        }

        return _targetLicensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writePackingLineFromDimTracking</Name>
				<Source><![CDATA[
    private void writePackingLineFromDimTracking(
        WHSTmpPackingLine   _tmpPackingLine,
        WHSDimTracking      _dimTracking,
        WHSWorkLine         _pickWorkLine,
        WHSWorkLine         _putWorkLine,
        WHSLoadLine         _loadLine)
    {
        WHSZoneId           pickZoneId = WMSLocation::find(_pickWorkLine.wmsLocationId, _loadLine.inventDim().InventLocationId).ZoneId;
        WHSLicensePlateId   targetlicensePlateIdId = WHSWorkTable::find(_putWorkLine.WorkId).TargetLicensePlateId;

        targetlicensePlateIdId = this.replaceTargetLicensePlateIdWithOriginalToteIdForClosedPackingWork(targetlicensePlateIdId, _pickWorkLine);

        InventDim inventDim = this.initializePackingLineInventDim(InventDim::find(_dimTracking.InventDimId), _putWorkLine, targetlicensePlateIdId);

        _tmpPackingLine.writePackingLine(_tmpPackingLine, _loadLine, _dimTracking.Qty, _dimTracking.CapturedWeight, inventDim.InventDimId, targetlicensePlateIdId, pickZoneId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writePackingLineFromPickWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates a record in the <c>WHSTmpPackingLine</c> table based on the given values.
    /// </summary>
    /// <param name="_tmpPackingLine">The packing line temp record.</param>
    /// <param name = "_pickWorkLine">The pick work line record.</param>
    /// <param name = "_putWorkLine">The put work line record.</param>
    /// <param name = "_loadLine">The load line record.</param>
    protected void writePackingLineFromPickWorkLine(
        WHSTmpPackingLine   _tmpPackingLine,
        WHSWorkLine         _pickWorkLine,
        WHSWorkLine         _putWorkLine,
        WHSLoadLine         _loadLine)
    {
        WHSZoneId           pickZoneId = WMSLocation::find(_pickWorkLine.wmsLocationId, _loadLine.inventDim().InventLocationId).ZoneId;
        WHSLicensePlateId   targetlicensePlateIdId = WHSWorkTable::find(_putWorkLine.WorkId).TargetLicensePlateId;
        
        targetlicensePlateIdId = this.replaceTargetLicensePlateIdWithOriginalToteIdForClosedPackingWork(targetlicensePlateIdId, _pickWorkLine);

        InventDim inventDim = this.initializePackingLineInventDim(_pickWorkLine.inventDim(), _putWorkLine, targetlicensePlateIdId);

        _tmpPackingLine.writePackingLine(_tmpPackingLine, _loadLine, _pickWorkLine.InventQtyWork, _pickWorkLine.CapturedWeight, inventDim.InventDimId, targetlicensePlateIdId, pickZoneId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePackingLineInventDim</Name>
				<Source><![CDATA[
    private InventDim initializePackingLineInventDim(InventDim _pickInventDim, WHSWorkLine _putWorkLine, WHSLicensePlateId _targetLicensePlateId)
    {
        InventDim inventDim = _pickInventDim;

        inventDim.wmsLocationId = _putWorkLine.wmsLocationId;
        inventDim.LicensePlateId = WMSLocation::find(inventDim.wmsLocationId, inventDim.InventLocationId).whsLocationIsLPControlled() ? _targetLicensePlateId : '';

        return InventDim::findOrCreate(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPutToPackConsolidatedWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the put work line with a packing location of the last work in which the work of the initial origin pick line
    /// was consolidated to.
    /// </summary>
    /// <param name = "_pickWorkLineInOriginWork">The origin pick work line</param>
    /// <param name="_packStationLocation">Location of the packing station.</param>
    /// <returns>A <c>WHSWorkLine</c> record for the put to pack consolidated work line.</returns>
    private static WHSWorkLine findPutToPackConsolidatedWorkLine(WHSWorkLine _pickWorkLineInOriginWork, WMSLocation _packStationLocation)
    {
        WHSWorkLine		putWorkLine;
        WHSWorkTable	workTable;

        WHSWorkId lastConsolidatedToWorkId = WHSWorkTable::findLastConsolidatedWork(_pickWorkLineInOriginWork).WorkId;

        select firstonly putWorkLine
			where putWorkLine.WorkType			== WHSWorkType::Put
				&& putWorkLine.WorkStatus		== WHSWorkStatus::Closed
                && putWorkLine.WorkId			== lastConsolidatedToWorkId
                && putWorkLine.wmsLocationId	== _packStationLocation.wMSLocationId
            exists join workTable
				where workTable.WorkId				== putWorkLine.WorkId
                    && workTable.InventLocationId	==	_packStationLocation.inventLocationId;

        return putWorkLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productImage</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethod]
    /// <summary>
    /// Displays the product image
    /// </summary>
    /// <returns>Product image reference.</returns>
    public display container productImage()
    {
        return InventTable::find(this.ItemId).productImage();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    public void write()
    {
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4467</DeveloperDocumentation>
	<Label>@WAX2325</Label>
	<ClusteredIndex>RecIdIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<PrimaryIndex>RecIdIdx</PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyPacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyRemaining</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ZoneId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UOM</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyPacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyRemaining</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ZoneId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UOM</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemName</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ItemName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LoadLine</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSLoadLineRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ProductQuantity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyPacked</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSQtyPacked</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyRemaining</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSQtyRemain</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipmentId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSShipmentId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ToteId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSToteId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UOM</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSUOM</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ZoneId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSZoneId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>WeightToPack</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWeightToPack</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RecIdIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UOM</Name>
					<Field>UOM</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLicensePlate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSLicensePlate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ToteId</Name>
					<SourceEDT>WHSToteId</SourceEDT>
					<Field>ToteId</Field>
					<RelatedField>LicensePlateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLoadLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSLoadLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LoadLine</Name>
					<Field>LoadLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSShipmentTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSShipmentTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShipmentId</Name>
					<SourceEDT>WHSShipmentId</SourceEDT>
					<Field>ShipmentId</Field>
					<RelatedField>ShipmentId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSZone</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSZone</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ZoneId</Name>
					<SourceEDT>WHSZoneId</SourceEDT>
					<Field>ZoneId</Field>
					<RelatedField>ZoneId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>