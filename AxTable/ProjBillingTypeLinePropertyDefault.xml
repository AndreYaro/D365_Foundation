<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBillingTypeLinePropertyDefault</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjBillingTypeLinePropertyDefault extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the line property default record corresponding to the given billing type.
    /// </summary>
    /// <param name = "_recId">
    ///    The record ID for the ProjBillingTypeLinePropertyDefault to retrieve.
    /// </param>
    /// <param name="_forUpdate">
    ///    Check if the record is being accessed for update.
    /// </param>
    /// <returns>
    ///     The billing type line property default record corresponding to the given type of project.
    /// \</returns>
    public static projBillingTypeLinePropertyDefault find(RecId _recId,  boolean _forupdate = false)
    {
        ProjBillingTypeLinePropertyDefault projBillingTypeLinePropertyDefault;

        projBillingTypeLinePropertyDefault.selectForUpdate(_forupdate);

        select firstonly projBillingTypeLinePropertyDefault
            where projBillingTypeLinePropertyDefault.RecId == _recId;

        return projBillingTypeLinePropertyDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBillingType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the line property default record corresponding to the given billing type.
    /// </summary>
    /// <param name = "_billingType">
    ///     The project type.
    /// </param>
    /// <param name="_forUpdate">
    ///    Check if the record is being accessed for update.
    /// </param>
    /// <returns>
    ///     The billing type line property default record corresponding to the given type of project.
    /// \</returns>
    public static projBillingTypeLinePropertyDefault findByBillingType(ProjBillingType _billingType,  boolean _forupdate = false)
    {
        ProjBillingTypeLinePropertyDefault projBillingTypeLinePropertyDefault;

        projBillingTypeLinePropertyDefault.selectForUpdate(_forupdate);

        select firstonly projBillingTypeLinePropertyDefault
            where projBillingTypeLinePropertyDefault.BillingType == _billingType;

        return projBillingTypeLinePropertyDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLinePropertyIDByBillingType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the line property Id corresponding to the default line property for the billing type.
    /// </summary>
    /// <param name = "_billingType">
    ///     The project type.
    /// </param>
    /// <returns>
    ///     The line property Id corresponding to the default value for the billing type
    /// </returns>
    public static ProjLinePropertyId getLinePropertyIDByBillingType(ProjBillingType _billingType)
    {
        ProjBillingTypeLinePropertyDefault projBillingTypeLinePropertyDefault;

        select firstonly LineProperty from projBillingTypeLinePropertyDefault
            where projBillingTypeLinePropertyDefault.BillingType == _billingType;

        ProjLineProperty projLineProperty = ProjLineProperty::findRecId(projBillingTypeLinePropertyDefault.LineProperty);
        
        return projLineProperty.LinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canFindLinePropertyIDForBillingType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the corresponding Line property id can be found for the passed in billing type
    /// </summary>
    /// <param name = "_billingType">
    ///     The project type.
    /// </param>
    /// <returns>
    ///     True if the line property id can be determined, false otherwise.
    /// </returns>
    public static boolean canFindLinePropertyIDForBillingType(ProjBillingType _billingType)
    {
        boolean found = false;
        ProjBillingTypeLinePropertyDefault projBillingTypeLinePropertyDefault;

        select firstonly LineProperty from projBillingTypeLinePropertyDefault
            where projBillingTypeLinePropertyDefault.BillingType == _billingType;

        if (ProjBillingTypeLinePropertyDefault.RecId != 0)
        {
            ProjLineProperty projLineProperty = ProjLineProperty::findRecId(projBillingTypeLinePropertyDefault.LineProperty);

            if (projLineProperty.RecId != 0)
            {
                found = true;
            }
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLineProperty</Name>
				<Source><![CDATA[
    protected boolean validateLineProperty()
    {
        boolean returnValue = true;

        // Verify Line Property exists
        ProjLineProperty ProjLineProperty = ProjLineProperty::findRecId(this.LineProperty);
        if (!ProjLineProperty)
        {
            returnValue = checkFailed("@SYS50154");
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBilingTypeAndLinePropertyMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the mapping between the billing type and line property.
    /// </summary>
    /// <returns>
    /// True if validation is passed; otherwise false.
    /// </returns>
    protected boolean validateBilingTypeAndLinePropertyMapping()
    {
        boolean returnValue = true;

        if (this.BillingType && this.LineProperty)
        {
            // Validate Billing Type with Line Property
            ProjLineProperty projLineProperty = ProjLineProperty::findRecId(this.LineProperty);
            switch(this.BillingType)
            {
                case ProjBillingType::Chargeable :
                    if (projLineProperty.ToBeInvoiced == NoYes::No)
                    {
                        returnValue = checkFailed("@proj:LinePropertyNotChargeable");
                    }
                    break;

                case ProjBillingType::NonChargeable :
                    if (projLineProperty.ToBeInvoiced == NoYes::Yes)
                    {
                        returnValue = checkFailed("@proj:LinePropertyChargeable");
                    }
                    break;

                case ProjBillingType::Complimentary :
                    if (projLineProperty.ToBeInvoiced == NoYes::No)
                    {
                        returnValue = checkFailed("@proj:LinePropertyNotChargeable");
                    }
                    if (projLineProperty.OnInvoice == NoYes::No)
                    {
                        returnValue = checkFailed("@proj:LinePropertyNotAllowZeroPriceOnInvoice");
                    }
                    break;
            }
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the record.
    /// </summary>
    /// <returns>
    /// True if validation is passed; otherwise false.
    /// </returns>
    public boolean validateWrite()
    {
        boolean returnValue = super();

        returnValue = returnValue && this.validateLineProperty();
        returnValue = returnValue && this.validateBilingTypeAndLInePropertyMapping();

        return returnValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@Proj:BillingTypeLinePropertyDefaultDevDoc</DeveloperDocumentation>
	<Label>@Proj:BillingTypeLinePropertyDefault</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>BillingType</TitleField1>
	<TitleField2>LineProperty</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>BillingTypeIdx</PrimaryIndex>
	<ReplacementKey>BillingTypeIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BillingType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineProperty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BillingType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineProperty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BillingType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BillingType</Name>
			<Mandatory>Yes</Mandatory>
			<EnumType>ProjBillingType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LineProperty</Name>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BillingTypeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BillingType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LineProperty</Name>
					<Field>LineProperty</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>