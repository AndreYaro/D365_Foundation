<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustInvoiceLine extends common
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountExclTax_W</Name>
				<Source><![CDATA[
    public AmountCur amountExclTax_W(AmountCur _amountCur = this.AmountCur,
                                     boolean _rounded = true,
                                     Tax _tax = null,
                                     boolean _isIncludeParent = false,
                                     CustInvoiceTable   _custInvoiceTable = null)
    {
        CustInvoiceTable custInvoiceTable;
        Percent cashDiscPercent;
        TaxBase taxOrigin;

        if (_custInvoiceTable)
        {
            custInvoiceTable = _custInvoiceTable.data();
        }
        else
        {
            custInvoiceTable = this.custInvoiceTable();
        }

        if (custInvoiceTable.InclTax && !TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            boolean taxLessCashDisc = TaxCashDiscountParametersHelper::isCashDiscDeductedBeforeTaxCalculation(custInvoiceTable.TableId, custInvoiceTable.RecId);

            if (taxLessCashDisc)
            {
                cashDiscPercent = CashDisc::find(custInvoiceTable.CashDiscCode).Percent;
            }

            // The calculation engine calculates the correct tax origin (amount excluding tax).
            if (_tax)
            {
                // try and get the origin from the tax instance.
                taxOrigin = _tax.getOriginForSourceLine(this.TableId, this.RecId, true, _amountCur);

                if (_amountCur)
                {
                    taxOrigin = abs(taxOrigin) * sign(_amountCur);
                }
            }

            // If we didn't get an origin, try and get the origin from Taxtrans because TaxUncommitted may be deleted after posting.
            if (!taxOrigin)
            {
                taxOrigin = TaxTrans::getOriginForSourceDocumentLine(tableNum(CustInvoiceTrans), this.SourceDocumentLine, true, _amountCur);

                if (_amountCur)
                {
                    // This will correct the sign for tax origin values required for base amount calculations
                    taxOrigin = abs(taxOrigin) * sign(_amountCur);
                }
            }

            // if we didn't get an origin, try and get the origin from TaxUncommitted.
            if (!taxOrigin)
            {
                taxOrigin = TaxUncommitted::getOriginForSourceLine(this.TableId, this.RecId, true, _amountCur);
            }

            if (taxOrigin)
            {
                if ((cashDiscPercent
                    || custInvoiceTable.discPercent())
                    && cashDiscPercent != 100
                    && custInvoiceTable.discPercent() != 100)
                {
                    taxOrigin = CurrencyExchangeHelper::amount(((taxOrigin / (1-cashDiscPercent/100)) / (1-custInvoiceTable.discPercent() / 100)), custInvoiceTable.CurrencyCode);
                }
            }
            // as a last resort - calculate an origin on the fly. This origin will not be correct in all scenarios.
            if (!taxOrigin)
            {
                taxOrigin = Tax::baseAmountExclTax(this.TaxGroup,
                                    this.TaxItemGroup,
                                    custInvoiceTable.DocumentDate ? custInvoiceTable.DocumentDate : custInvoiceTable.InvoiceDate,
                                    custInvoiceTable.CurrencyCode,
                                    _amountCur,
                                    TaxModuleType::FreeTxtInvoice,
                                    this.Quantity,
                                    '',
                                    '',
                                    TaxDirection::OutgoingTax,
                                    0,
                                    _rounded);
            }

            return taxOrigin;
        }

        if (_amountCur && TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            TransTaxInformation transTaxInformation;
            TransTaxInformationHelper transTaxInformationHelper = TransTaxInformationHelper::newHelper();
            transTaxInformation = transTaxInformationHelper.findTransTaxInformationByRecord(this);

            if (transTaxInformation.InclTax == NoYes::Yes)
            {
                CustInvoiceJour custInvoiceJour = custInvoiceTable.custInvoiceJour();
                ITaxDocument taxDocument;
                if (custInvoiceJour)
                {
                    taxDocument = TaxBusinessService::calculateTax(
                    TaxableDocumentObject::construct(
                        TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(custInvoiceJour)));

                    if (!taxDocument)
                    {
                        taxDocument = TaxBusinessService::calculateTax(
                        TaxableDocumentObject::construct(
                            TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(custInvoiceTable)));
                    }
                }
                else
                {
                    taxDocument = TaxBusinessService::calculateTax(
                    TaxableDocumentObject::construct(
                        TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(custInvoiceTable)));
                }
                if (taxDocument)
                {
                    ITaxDocumentLine taxDocumentLine = taxDocument.findLineByOrig(this.TableId, this.RecId);
                    if (taxDocumentLine)
                    {
                        return _amountCur - sign(_amountCur) * abs(taxDocumentLine.getInclTax().amountTransactionCurrency());
                    }
                }
            }
        }

        return _amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountCurrencyUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and sets the <c>AmountCur</c> field using the <c>Quantity</c> and <c>UnitPrice</c>
    /// values when we are updating the currency from the header to the lines.
    /// </summary>
    /// <param name="_currencyCode">
    /// The new currency code from the header.
    /// </param>
    /// <param name="_qty">
    /// Item quantity on the line.
    /// </param>
    /// <returns>
    /// The <c>AmountCur</c> value.
    /// </returns>
    public AmountCur calcLineAmountCurrencyUpdate(CurrencyCode _currencyCode, Qty _qty = this.Quantity)
    {
        CustInvoiceLineSalesPurchLine custInvoiceLineSalesPurchLine = this.salesPurchLineInterface();
        return custInvoiceLineSalesPurchLine.calcLineAmountCurrencyUpdate(_currencyCode, _qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and sets the <c>AmountCur</c> field using the <c>Quantity</c> and <c>UnitPrice</c>
    /// values.
    /// </summary>
    /// <param name="_qty">
    /// Item quantity on the line.
    /// </param>
    /// <returns>
    /// The <c>AmountCur</c> value.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmount(Qty _qty = this.Quantity)
    {
        return this.salesPurchLineInterface().calcLineAmount(_qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAgreementDimension_RU</Name>
				<Source><![CDATA[
    private boolean checkAgreementDimension_RU()
    {
        DimensionAttributeValueSetStorage dimAttrValueSetStorage;
        DimensionAttributeValue dimAttrValue;
        CustInvoiceTable custInvoiceTable;
        RecId dimAttrRecId = AgreementHeaderExt_RU::getAgreementDimensionAttribute();
        boolean ok = true;

        if (this.DefaultDimension && dimAttrRecId)
        {
            custInvoiceTable = this.custInvoiceTable();

            dimAttrValueSetStorage = DimensionAttributeValueSetStorage::find(this.DefaultDimension);
            dimAttrValue = DimensionAttributeValue::find(
                dimAttrValueSetStorage.getValueByDimensionAttribute(dimAttrRecId));

            if (dimAttrValue &&
                dimAttrValue.EntityInstance != custInvoiceTable.AgreementHeaderExt_RU)
            {
                ok = checkFailed(strFmt("@GLS220871",
                    dimAttrValue.getValue(), SalesAgreementHeaderExt_RU::find(custInvoiceTable.AgreementHeaderExt_RU).AgreementId));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCFOP_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// It validates if CFOP is present in CFOPMatrix with the correct attributes
    /// (Operation ID, Transaction Type, Direction and Location)
    /// </summary>
    /// <returns>
    /// It returns true if it is valid.
    /// </returns>
    public boolean checkCFOP_BR()
    {
        boolean ok = true;

        if (!this.cfopTable_BR && !this.ServiceInvoice_BR)
        {
            ok = checkFailed(strFmt("@SYS26332", fieldPName(CFOPTable_BR, cfopId)));
        }

        if (this.cfopTable_BR)
        {
            ok = ok && CFOPValidation_BR::validate(this);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCurrencyCode</Name>
				<Source><![CDATA[
    public void convertCurrencyCode(
        CurrencyCode currencyCode,
        TransDate exchRateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        CustInvoiceChangeCurrencyOption custInvoiceChangeCurrencyOption = CustInvoiceChangeCurrencyOption::CalculateWithNewRate)
    {
        MarkupTrans markupTrans;
        AmountCur rateAmount;
        CustBillingCodeVersion custBillingCodeVersion;
        CustBillingCodeRate billingCodeRate;
        CurrencyCode currencyCodeMST;
        // <GIN>
        CustInvoiceLineTaxExtensionIN custInvoiceLineTaxExtension;
        // </GIN>

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            rateAmount = realMin();
            currencyCodeMST = CompanyInfoHelper::standardCurrency();
        }

        ttsbegin;

        while select forupdate markupTrans
              index hint TableRecIdIdx
              where markupTrans.TransTableId == this.TableId &&
                    markupTrans.TransRecId == this.RecId &&
                   !markupTrans.IsDeleted
        {
            markupTrans.convertCurrencyCode(currencyCode);
            markupTrans.doUpdate();
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) &&
            custInvoiceChangeCurrencyOption == CustInvoiceChangeCurrencyOption::ResetToBillingCodeRate &&
            this.BillingCode != '')
        {
            //gets the amount from CustbillingCodeRate based on the selected billing code.
            custBillingCodeVersion = CustBillingCodeVersion::findByDate(this.CustBillingCode, this.custInvoiceTable().InvoiceDate);

            //Convert amount based on billing code currency if needed.
            if (custBillingCodeVersion)
            {
                select firstonly billingCodeRate
                where billingCodeRate.Currency == currencyCode
                && billingCodeRate.CustBillingCodeVersion == custBillingCodeVersion.RecId;

                if ( billingCodeRate )
                {
                    rateAmount = billingCodeRate.Amount;
                }
                else
                {
                    //if no amount is defined for the specified currency then the amount is calculated by conversion from master currency amount
                    select firstonly billingCodeRate
                    where billingCodeRate.Currency == currencyCodeMST
                    && billingCodeRate.CustBillingCodeVersion == custBillingCodeVersion.RecId;

                    if ( billingCodeRate )
                    {
                        rateAmount = CurrencyExchangeHelper::curAmount2CurAmount( billingCodeRate.Amount, currencyCode, currencyCodeMST, exchRateDate );
                        warning(strFmt("@SPS38",currencyCodeMST,currencyCode));
                    }
                    else
                    {
                        //if master currency amount is not defined.
                        error(strFmt("@SPS39", currencyCodeMST));
                    }
                }

                if ( rateAmount > realMin() )
                {
                    if ( custBillingCodeVersion.RateFieldSelector == RateField::UnitPrice )
                    {
                        this.UnitPrice = rateAmount;
                        this.calcLineAmountCurrencyUpdate(currencyCode);
                    }
                    else if ( custBillingCodeVersion.RateFieldSelector == RateField::LineAmount )
                    {
                        this.AmountCur = rateAmount;
                        this.UnitPrice = 0;
                    }
                }
            }
        }
        else
        {
            if (this.UnitPrice == 0)
            {
                this.AmountCur = CurrencyExchangeHelper::curAmount2CurAmount(this.AmountCur, this.custInvoiceTable().CurrencyCode, currencyCode, exchRateDate);
            }
            else
            {
                this.UnitPrice = ExchangeRateHelper::curPrice2CurPrice(this.UnitPrice, this.custInvoiceTable().CurrencyCode, currencyCode, exchRateDate);
                this.calcLineAmountCurrencyUpdate(currencyCode);
            }
        }

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            custInvoiceLineTaxExtension = CustInvoiceLineTaxExtensionIN::findByCustInvoiceLine(this.RecId, true);
            custInvoiceLineTaxExtension.MaximumRetailPrice = ExchangeRateHelper::curPrice2CurPrice(custInvoiceLineTaxExtension.MaximumRetailPrice, this.custInvoiceTable().CurrencyCode, currencyCode);
            custInvoiceLineTaxExtension.AssessableValueTransactionCurrency = this.getMiscChargesAmountPlusLineAmount_IN();
            this.SysExtensionSerializerMap::packExtensionTable(custInvoiceLineTaxExtension);
        }
        // </GIN>
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was previously created by using the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>

    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy _dimensionCopy = DimensionCopy::newFromTable(this,
                                                                      this.companyInfo().RecId
                                                                      )
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCopy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a copy of the current free text invoice line.
    /// </summary>
    /// <param name="_custInvoiceTable">
    /// The free text invoice document header.
    /// </param>
    /// <param name = "_copyLineItems">
    /// A list of line items such as notes and distributions that should be copied to the new line.
    /// </param>
    public void createCopy(CustInvoiceTable _custInvoiceTable, container _copyLineItems)
    {
        CustInvoiceLine custInvoiceLineCopy = this.data();

        custInvoiceLineCopy.LineNum = CustInvoiceLine::lastLineNum_W(this.ParentRecId) + 1;
        custInvoiceLineCopy.SourceDocumentLine = 0;

        custInvoiceLineCopy.insert();

        // Copy tax information to the new line.
        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            TransTaxInformationHelper::copyTransTaxInformation(this, custInvoiceLineCopy);
        }

        // Copy related data to the new line
        CustInvoiceLineAsset::copy(this, custInvoiceLineCopy);
        CustInvLineBillCodeCustomFieldBase::copy(this, custInvoiceLineCopy, _custInvoiceTable.InvoiceDate);
        CustInvoiceLine_W::copy(this, custInvoiceLineCopy);
        CustInvoiceLineTaxExtensionIN::copy(this, custInvoiceLineCopy);

        if (SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
        {
            Markup::copy(NoYes::No, this, custInvoiceLineCopy, false, _custInvoiceTable.CurrencyCode);
        }

        if (this.AmountCur < 0)
        {
            CustVendCreditInvoicingLine::copy(this, custInvoiceLineCopy);
        }

        if (_custInvoiceTable.ProjIntercompany != '')
        {
            CustInvoiceLineInterProj::copy(this, custInvoiceLineCopy);
        }

        if (conFind(_copyLineItems, CustFreeInvoiceCopyLineItemType::NotesAndAttachments) != 0)
        {
            Docu::copy(this, custInvoiceLineCopy);
        }

        if (conFind(_copyLineItems, CustFreeInvoiceCopyLineItemType::Distributions) != 0)
        {
            this.performCopyDistributions(custInvoiceLineCopy);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>performCopyDistributions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies <c>AccountingDistribution</c> from the current free text invoice line to the specified copy of <c>CustInvoiceLine</c> line.
    /// </summary>
    /// <param name = "_custInvoiceLineCopy"></param>
    private void performCopyDistributions(CustInvoiceLine _custInvoiceLineCopy)
    {
        AccountingDistribution accountingDistributionSource;
        AccountingDistribution accountingDistributionCopy;

        SourceDocumentLineRecId sourceDocumentLineRecId = _custInvoiceLineCopy.SourceDocumentLine;

        insert_recordset accountingDistributionCopy(
            AccountingDate, AccountingEvent, AccountingLegalEntity, AllocationFactor, AmountSource, FinalizeAccountingEvent,
            LedgerDimension, MonetaryAmount, Number, ParentDistribution, ReferenceDistribution, ReferenceRole,
            SourceDocumentHeader, SourceDocumentLine, TransactionCurrency, TransactionCurrencyAmount, Type)
            select
            AccountingDate, AccountingEvent, AccountingLegalEntity, AllocationFactor, AmountSource, FinalizeAccountingEvent,
            LedgerDimension, MonetaryAmount, Number, ParentDistribution, ReferenceDistribution, ReferenceRole,
            SourceDocumentHeader, sourceDocumentLineRecId, TransactionCurrency, TransactionCurrencyAmount, Type
            from accountingDistributionSource
            where accountingDistributionSource.SourceDocumentLine == this.SourceDocumentLine;

        // Source document line accounting status of the line and its copy should be the same.
        SourceDocumentLine::find(sourceDocumentLineRecId).updateSourceDocumentLineAccountingStatus(
            SourceDocumentLine::find(this.SourceDocumentLine).AccountingStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceLine_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets extension table record for current base table record.
    /// </summary>
    /// <returns>
    /// The extension table record.
    /// </returns>
    public CustInvoiceLine_W custInvoiceLine_W()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(CustInvoiceLine_W));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceLineTaxExtensionIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets extension table record for current base table record.
    /// </summary>
    /// <returns>
    /// The extension table record.
    /// </returns>
    public CustInvoiceLineTaxExtensionIN custInvoiceLineTaxExtensionIN()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(CustInvoiceLineTaxExtensionIN));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceLineCorrLink_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>CustInvoiceLineCorrLink_RU</c> record linked to current record.
    /// </summary>
    /// <param name="_forupdate">
    /// Specify true, should record be selected for update.
    /// </param>
    /// <returns>
    /// <c>CustInvoiceLineCorrLink_RU</c> record linked to current record.
    /// </returns>
    public CustInvoiceLineCorrLink_RU custInvoiceLineCorrLink_RU(boolean _forupdate = false)
    {
        return CustInvoiceLineCorrLink_RU::findCustInvoiceLine(this.RecId, _forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceTable</Name>
				<Source><![CDATA[
    public CustInvoiceTable custInvoiceTable(boolean _update = false)
    {
        return CustInvoiceTable::findRecId(this.ParentRecId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete(boolean _deleteLinked = true)
    {
        CustInvoiceLine invoiceLine;

        if (this.AssetId_RU && this.AmountCur > 0)
        {
            this.returnAssetBooksFromSale_RU();
        }

        super();

        if (_deleteLinked && this.CreditNoteInternalRef_PL)
        {
            while select forupdate invoiceLine
                where invoiceLine.ParentRecId == this.ParentRecId &&
                      invoiceLine.CreditNoteInternalRef_PL == this.CreditNoteInternalRef_PL
            {
                invoiceLine.delete(false);
            }
        }

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.TransitDocumentTransactionMap_IN::deleteTransitDocuments();
        }

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled()
            && CustRelatedInvoice::findByCustInvoice(this.ParentRecId).InvoiceAssociationType != InvoiceAssociationType::AdjustingInvoice)
        {
            this.markCurrentTaxDocumentTaxStatusDirty();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTaxAmount</Name>
				<Source><![CDATA[
    public display TaxAmount displayTaxAmount()
    {
        TaxAmount taxAmount = 0;
        TaxTrans taxTrans;
        CustInvoiceTrans custInvoiceTrans;
        CustInvoiceTable custInvoiceTable = this.custInvoiceTable();
        TaxUncommitted taxUncommitted;

        if (custInvoiceTable.InvoiceId)
        {
            // Use the source regulate tax amount from TaxTrans for posted invoice as it includes tax adjustments
            select sum(SourceRegulateAmountCur) from taxTrans
                        join LineNum, InvoiceId, InvoiceDate, RecId from custInvoiceTrans
                            where taxTrans.SourceRecId == custInvoiceTrans.RecId
                               && taxTrans.SourceTableId == custInvoiceTrans.TableId
                               && custInvoiceTrans.LineNum == this.LineNum
                               && custInvoiceTrans.InvoiceId == custInvoiceTable.InvoiceId
                               && custInvoiceTrans.InvoiceDate == custInvoiceTable.InvoiceDate;

            taxAmount = -taxTrans.SourceRegulateAmountCur;
        }
        else
        {
            // Get source regulate tax amount from TaxUncommitted for unposted invoice as it includes tax adjustments
            select sum(SourceRegulateAmountCur) from taxUncommitted
                where taxUncommitted.SourceTableId == tableNum(CustInvoiceLine)
                    && taxUncommitted.SourceRecId == this.RecId;

            taxAmount = -taxUncommitted.SourceRegulateAmountCur;
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the reason code.
    /// </summary>
    /// <param name="set">
    ///    Set to true if the reason code is set; otherwise, set to false.
    /// </param>
    /// <param name="_reasonCode">
    ///    The new reason code when <paramref name="set" /> is true.
    /// </param>
    /// <returns>
    ///    The reason code of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonCode editReasonCode(boolean set, ReasonCode _reasonCode)
    {
        ReasonCode reasonCode = strLRTrim(_reasonCode);
        int64 originalReasonRefRecID;
        FormDataSource formCustInvoiceLine;

        if (set)
        {
            // If the ReasonRefRecID is 0, then create a new ReasonTableRef record
            // otherwise, update the existing record.
            if (this.ReasonRefRecId == 0)
            {
                this.ReasonRefRecId = ReasonTableRef::createFromCode(reasonCode);
            }
            else
            {
                if (reasonCode != '')
                {
                    //
                    //The reasonCode value is not blank.
                    // Save the current ReasonRefRecID for comparision.
                    //
                    originalReasonRefRecID = this.ReasonRefRecId;
                    this.ReasonRefRecId = ReasonTableRef::updateCode(reasonCode, this.ReasonRefRecId);

                    if (this.ReasonRefRecId == originalReasonRefRecID)
                    {
                        //
                        // The reason code has changed but the referenced record ID has not.
                        // Get the current FormDataSource and set forceWrite() to true so that
                        // data validation (validateWrite()) is performed on the updated reason code.
                        //
                        formCustInvoiceLine = FormDataUtil::getFormDataSource(this);
                        if (formCustInvoiceLine)
                        {
                            formCustInvoiceLine.forceWrite(true);
                        }
                    }
                }
                else
                {
                    // The reasonCode is blank.
                    this.ReasonRefRecId = ReasonTableRef::updateCode(reasonCode, this.ReasonRefRecId);
                }
            }

            // Update the reason comment with the default comment value for the updated reason code.
            // A blank reasonCode will result in a blank comment because a blank reasonCode
            // will return an empty reasonTable buffer.
            //
            this.editReasonComment(true, ReasonTable::find(_reasonCode).Description);
        }
        else
        {
            reasonCode = ReasonTableRef::find(this.ReasonRefRecId).Reason;
        }

        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonComment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the reason comment.
    /// </summary>
    /// <param name="set">
    ///    Set to true if the reason comment is set; otherwise, set to false.
    /// </param>
    /// <param name="_reasonComment">
    ///    The new reason comment when <paramref name="set" /> is true.
    /// </param>
    /// <returns>
    ///    The reason comment of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonComment editReasonComment(boolean set, ReasonComment _reasonComment)
    {
        ReasonComment reasonComment = _reasonComment;

        if (set)
        {
            // If the ReasonRefRecID is 0, then create a new ReasonTableRef record
            // otherwise, update the existing record.
            if (this.ReasonRefRecId == 0)
            {
                this.ReasonRefRecId = ReasonTableRef::createFromComment(reasonComment);
            }
            else
            {
                this.ReasonRefRecId = ReasonTableRef::updateComment(reasonComment, this.ReasonRefRecId);
            }
        }
        else
        {
            reasonComment = ReasonTableRef::find(this.ReasonRefRecId).ReasonComment;
        }

        return reasonComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCustBillingCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the Billing code exists in the <c>CustInvoiceLine</c> table based on invoice.
    /// </summary>
    /// <param name="_custInvoiceTableRecId">
    /// A RecId of the <c>CustInvoiceTable</c> table.
    /// </param>
    /// <returns>
    /// true if billing code exist; otherwise false.
    /// </returns>
    public boolean existCustBillingCode(RefRecId _custInvoiceTableRecId)
    {
        CustInvoiceLine custInvoiceLineLocal;

        select firstonly RecId from custInvoiceLineLocal
                    where custInvoiceLineLocal.ParentRecId == _custInvoiceTableRecId
                        && custInvoiceLineLocal.BillingCode != '';

        return custInvoiceLineLocal.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsCorrLink_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there is link between this record and corrected record, e.g. this record is correcting record.
    /// </summary>
    /// <returns>
    /// True if link exists; Otherwise, false.
    /// </returns>
    public boolean existsCorrLink_RU()
    {
        return this.RecId &&
            (select firstonly RecId from custInvoiceLineCorrLink_RU
                where custInvoiceLineCorrLink_RU.CustInvoiceLineRecId == this.RecId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustBillingCodeLedgerAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the specified record in the <c>CustBillingCodeLedgerAccount</c> table.
    /// </summary>
    /// <param name = "_custBillingCodeVersion">
    ///     A record of the <c>CustBillingCodeVersion</c> table.
    /// </param>
    /// <returns>
    ///     A record in the <c>CustBillingCodeLedgerAccount</c> table.
    ///</returns>
    protected CustBillingCodeLedgerAccount getCustBillingCodeLedgerAccount(CustBillingCodeVersion _custBillingCodeVersion)
    {
        CustBillingCodeLedgerAccount custBillingCodeLedgerAccount;

        select firstonly custBillingCodeLedgerAccount
            order by custBillingCodeLedgerAccount.RecId
            where custBillingCodeLedgerAccount.CustBillingCodeVersion == _custBillingCodeVersion.RecId;

        return custBillingCodeLedgerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMiscChargesAmountPlusLineAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the Misc charges with the addition of line amount.
    /// </summary>
    /// <returns>
    /// Returns the amount.
    /// </returns>
    public Amount getMiscChargesAmountPlusLineAmount_IN()
    {
        return this.SalesPurchJournalLine::getMiscChargesAmountPlusLineAmount(this.TableId, this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasIndirectTaxFieldChanged_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether india indirect tax information has changed.
    /// </summary>
    /// <param name="_originalCustInvoiceLine">
    /// The original customer invoice line record.
    /// </param>
    /// <returns>
    /// A boolean value that indicates whether the tax information has changed.
    /// </returns>
    private boolean hasIndirectTaxFieldChanged_IN(CustInvoiceLine _originalCustInvoiceLine = this.orig())
    {
        CustInvoiceLine custInvoiceLine_orig  = _originalCustInvoiceLine ? _originalCustInvoiceLine : this.orig();
        CustInvoiceLineTaxExtensionIN custInvoiceLineTaxExtension_org;
        CustInvoiceLineTaxExtensionIN custInvoiceLineTaxExtension;
        boolean indirectTaxChanged = false;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            custInvoiceLineTaxExtension = this.custInvoiceLineTaxExtensionIN();
            custInvoiceLineTaxExtension_org = _originalCustInvoiceLine.custInvoiceLineTaxExtensionIN();

            indirectTaxChanged =
                (custInvoiceLineTaxExtension.AssessableValueTransactionCurrency != custInvoiceLineTaxExtension_org.AssessableValueTransactionCurrency) ||
                (custInvoiceLineTaxExtension.MaxRetailPricePerUnit != custInvoiceLineTaxExtension_org.MaxRetailPricePerUnit) ||
                (custInvoiceLineTaxExtension.MaximumRetailPrice != custInvoiceLineTaxExtension_org.MaximumRetailPrice);
        }
        return indirectTaxChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTaxChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether tax information has changed.
    /// </summary>
    /// <param name="_originalCustInvoiceLine">
    /// The original customer invoice line record.
    /// </param>
    /// <returns>
    /// A boolean value that indicates whether the tax information has changed.
    /// </returns>
    public boolean hasTaxChanged(CustInvoiceLine _originalCustInvoiceLine)
    {
        return
            (this.AccountingDistributionTemplate != _originalCustInvoiceLine.AccountingDistributionTemplate) ||
            (this.AmountCur != _originalCustInvoiceLine.AmountCur) ||
            (this.AssetBookId != _originalCustInvoiceLine.AssetBookId) ||
            (this.AssetId != _originalCustInvoiceLine.AssetId) ||
            (this.Quantity != _originalCustInvoiceLine.Quantity) ||
            (this.TaxGroup != _originalCustInvoiceLine.TaxGroup) ||
            (this.TaxItemGroup != _originalCustInvoiceLine.TaxItemGroup) ||
            (this.OverrideSalesTax != _originalCustInvoiceLine.OverrideSalesTax) ||
            (this.UnitPrice != _originalCustInvoiceLine.UnitPrice) ||
            (this.hasTaxChangedForTaxIntegration(_originalCustInvoiceLine))
            // <GIN>
            || this.hasIndirectTaxFieldChanged_IN(_originalCustInvoiceLine)
            // </GIN>
            ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTaxChangedForTaxIntegration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the tax information has changed for tax integration of tax calculation service.
    /// </summary>
    /// <param name = "_originalCustInvoiceLine">
    /// The original cust invoice line which is updated.
    /// </param>
    /// <returns>
    /// true if the tax information has changed; otherwise, false.
    /// </returns>
    private boolean hasTaxChangedForTaxIntegration(CustInvoiceLine _originalCustInvoiceLine)
    {
        CustInvoiceTable custInvoiceTable = this.custInvoiceTable();

        return (custInvoiceTable.isTaxIntegrationEnabled()
                && (TaxIntegrationUtils::isTaxIntegrationEnabledForTaxSolutionProvider()
                    && !LedgerDimensionFacade::areEqual(this.LedgerDimension, _originalCustInvoiceLine.LedgerDimension))
                || (this.ProjId != _originalCustInvoiceLine.ProjId)
                || (!DimensionDefaultFacade::areEqual(this.DefaultDimension, _originalCustInvoiceLine.DefaultDimension)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasWithholdTaxChanged_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether withhold tax information has changed.
    /// </summary>
    /// <param name="_originalCustInvoiceLine">
    /// The original customer invoice line record.
    /// </param>
    /// <returns>
    /// A boolean value that indicates whether the tax information has changed.
    /// </returns>
    public boolean hasWithholdTaxChanged_IN(CustInvoiceLine _originalCustInvoiceLine)
    {
        CustInvoiceLineTaxExtensionIN custInvoiceLineTaxExtension_org;
        CustInvoiceLineTaxExtensionIN custInvoiceLineTaxExtension;

        custInvoiceLineTaxExtension_org = CustInvoiceLineTaxExtensionIN::findByCustInvoiceLine(_originalCustInvoiceLine.RecId);
        custInvoiceLineTaxExtension = this.custInvoiceLineTaxExtensionIN();

        return this.hasTaxChanged(_originalCustInvoiceLine) ||
            (custInvoiceLineTaxExtension.TDSGroup != custInvoiceLineTaxExtension_org.TDSGroup) ||
            (custInvoiceLineTaxExtension.TCSGroup != custInvoiceLineTaxExtension_org.TCSGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasWHTChangedByOriCustInvLineTaxExt_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether withhold tax information has changed by origin value of <c> CustInvoiceLineTaxExtensionIN </c>.
    /// </summary>
    /// <param name="_originalCustInvoiceLine">
    /// The original customer invoice line record.
    /// </param>
    /// <param name="_originalCustInvoiceLineTaxExtensionIN">
    /// The original customer invoice line IN tax extension record.
    /// </param>
    /// <returns>
    /// A boolean value that indicates whether the tax information has changed.
    /// </returns>
    public boolean hasWHTChangedByOriCustInvLineTaxExt_IN(CustInvoiceLine _originalCustInvoiceLine, CustInvoiceLineTaxExtensionIN _originalCustInvoiceLineTaxExtensionIN)
    {
        CustInvoiceLineTaxExtensionIN custInvoiceLineTaxExtension;

        custInvoiceLineTaxExtension = this.custInvoiceLineTaxExtensionIN();

        return this.hasTaxChanged(_originalCustInvoiceLine) ||
            (custInvoiceLineTaxExtension.TDSGroup != _originalCustInvoiceLineTaxExtensionIN.TDSGroup) ||
            (custInvoiceLineTaxExtension.TCSGroup != _originalCustInvoiceLineTaxExtensionIN.TCSGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceTable</Name>
				<Source><![CDATA[
    public void initFromCustInvoiceTable(CustInvoiceTable custInvoiceTable)
    {
        this.TaxGroup = custInvoiceTable.TaxGroup;
        this.OverrideSalesTax = custInvoiceTable.OverrideSalesTax;
        this.TransactionCode = IntrastatParameters::find().DefaultSalePurchase;
        this.AccountingDistributionTemplate = custInvoiceTable.AccountingDistributionTemplate;
        this.Transport = custInvoiceTable.Transport;
        this.TransactionCode = custInvoiceTable.TransactionCode;
        this.Port = custInvoiceTable.Port;
        this.StatProcId = custInvoiceTable.StatProcId;

        // Take the dimensions directly from the header
        this.DefaultDimension = custInvoiceTable.DefaultDimension;

        // <GIN>
        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            CustInvoiceLineTaxExtensionIN custInvoiceLineTaxExtension = this.custInvoiceLineTaxExtensionIN();
            custInvoiceLineTaxExtension.tdsGroup = custInvoiceTable.tdsGroup_IN;
            custInvoiceLineTaxExtension.tcsGroup = custInvoiceTable.tcsGroup_IN;
            this.packCustInvoiceLineTaxExtensionIN(custInvoiceLineTaxExtension);
        }
        // </GIN>

        if (TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled()
            || BrazilParameters::isEnabled())
        {
            this.TaxWithholdGroup = custInvoiceTable.custTable_InvoiceAccount().TaxWithholdGroup_TH;
        }

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.cfopTable_BR = CFOPValidation_BR::construct(this).getDefaultCFOP();
            this.LedgerDimension = SalesPurchOperationType_BR::find(custInvoiceTable.SalesPurchOperationType_BR).LedgerDimension;
            this.setTaxGroupAndTaxItemGroupFields_BR();
        }
        // </GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceTrans_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes current <c>CustInvoiceLine</c> record with values from <c>CustInvoiceTrans</c> record
    /// when creating credit note
    /// </summary>
    /// <param name="_custInvoiceTrans">
    /// Source <c>CustInvoiceTrans</c> record
    /// </param>
    /// <param name="_custInvoiceTable">
    /// Source <c>CustInvoiceTable</c> record
    /// </param>
    public void initFromCustInvoiceTrans_W(CustInvoiceTrans _custInvoiceTrans,
                                            CustInvoiceTable _custInvoiceTable)
    {
        this.initValue();

        this.ParentRecId = _custInvoiceTable.RecId;
        this.Description = _custInvoiceTrans.Name;
        this.TaxGroup = _custInvoiceTrans.TaxGroup;
        this.OverrideSalesTax = _custInvoiceTrans.OverrideSalesTax;

        this.LedgerDimension = _custInvoiceTrans.LedgerDimension;
        this.DefaultDimension = _custInvoiceTrans.DefaultDimension;
        this.AmountCur = _custInvoiceTrans.LineAmount;
        this.TaxItemGroup = _custInvoiceTrans.TaxItemGroup;
        this.TaxWriteCode = _custInvoiceTrans.TaxWriteCode;
        this.AssetId = _custInvoiceTrans.AssetId;
        this.AssetBookId = _custInvoiceTrans.AssetBookId;
        this.ReasonRefRecId = ReasonTableRef::checkCreateInCompany(_custInvoiceTrans.ReasonRefRecId, _custInvoiceTrans.DataAreaId);

        //Intrastat
        this.OrigState = _custInvoiceTrans.OrigState;
        this.OrigCountryRegionId = _custInvoiceTrans.OrigCountryRegionId;
        this.Weight = _custInvoiceTrans.Weight;
        this.IntrastatCommodity = _custInvoiceTrans.IntrastatCommodity;
        this.Port = _custInvoiceTrans.Port;
        this.StatProcId = _custInvoiceTrans.StatProcId;
        this.TransactionCode = _custInvoiceTrans.TransactionCode;
        this.Transport = _custInvoiceTrans.Transport;
        
        if (FinTagConfiguration::isFinTagConfigurationSet(_custInvoiceTrans.DataAreaId)
            && AccountsReceivableFinTagFlight::instance().isEnabled())
        {
            this.FinTag = _custInvoiceTrans.FinTag;
        }

        if (_custInvoiceTable.InclTax)
        {
            this.AmountCur = this.AmountCur + _custInvoiceTrans.LineAmountTax;
        }
        else
        {
            this.TaxAmount = _custInvoiceTrans.TaxAmount;
        }

        this.InvoiceTxt = _custInvoiceTrans.Name;
        this.RefReturnInvoiceTrans_W = _custInvoiceTrans.RecId;

        this.Quantity = _custInvoiceTrans.Qty;
        this.UnitPrice = _custInvoiceTrans.SalesPrice;
        this.SalesUnit_RU = _custInvoiceTrans.SalesUnit;
        this.InvoiceGtd_RU = _custInvoiceTrans.inventDim().InventGtdId_RU;
        this.AssetId_RU = _custInvoiceTrans.custInvoiceTrans_RU().AssetId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.TaxAutogenerated = NoYes::Yes;
        this.Quantity = 1.00;

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            this.SalesUnit_RU = InventParameters::find().DefaultUnitId;
        }
        // </GEERU>
        // <GIN>
        if (TaxParameters::checkTaxParameters_IN() || TaxWithholdParameters_IN::checkTaxParameters())
        {
            this.SalesPurchJournalLine::initFromCompanyInformation();
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>SourceDocumentLine</c> records.
    /// </summary>
    public void insert()
    {
        // <GEERU>
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]);
        // <GMY>
        boolean countryRegion_MY = TaxGSTFeatureChecker_MY::isCountryRegionMY();
        // </GMY>
        if (countryRegion_RU)
        {
            ttsbegin;
        }
        // </GEERU>

        // <GMY>
        if (countryRegion_MY)
        {
            ttsbegin;
        }
        // </GMY>

        // Setting ProjTransID based on the project id selection
        if (this.ProjId && !this.ProjTransId)
        {
            this.ProjTransId = ProjParameters::newTransId();
        }

        if (!this.ProjId && this.ProjTransId)
        {
            this.ProjTransId = '';
        }

        // Insert and reference a source document line
        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);

        super();

        // <GMY>
        if (countryRegion_MY)
        {
            this.SysExtensionSerializerMap::postInsert();
            ttscommit;
        }

        // <GEERU>
        if (countryRegion_RU)
        {
            if (this.AssetId_RU && this.AmountCur > 0)
            {
                this.updateAssetBooksForSale_RU();
            }
            ttscommit;
        }
        // </GEERU>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.postInsert_BR();
        }
        // </GBR>

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled()
            && CustRelatedInvoice::findByCustInvoice(this.ParentRecId).InvoiceAssociationType != InvoiceAssociationType::AdjustingInvoice)
        {
            this.markCurrentTaxDocumentTaxStatusDirty();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromCustInvoiceLineTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the fields of <c>CustInvoiceLine</c> or <c>MarkupTrans</c> table, depending on the
    /// <c>InstanceRelationType</c> field.
    /// </summary>
    /// <param name="_custInvoiceLineTemplate">
    /// The record buffer of <c>CustInvoiceLineTemplate</c> table.
    /// </param>
    /// <param name="_custInvoiceTable">
    /// The record buffer of <c>CustInvoiceTable</c> table.
    /// </param>
    /// <param name="_custTable">
    /// The record buffer of <c>CustInvoiceTable</c> table.
    /// </param>
    /// <param name="_custRecurrenceInvoiceDefaultType">
    /// The default type for customer recurrence invoice setup.
    /// </param>
    /// <param name="_custBillingCodeRecId">
    /// The billing code recid if a billing code is selected in the template.
    /// </param>
    public void insertFromCustInvoiceLineTemplate(
        CustInvoiceLineTemplate _custInvoiceLineTemplate,
        CustInvoiceTable _custInvoiceTable,
        CustTable _custTable = null,
        CustRecurrenceInvoiceDefaultType _custRecurrenceInvoiceDefaultType = CustRecurrenceInvoiceDefaultType::InvoiceTemplate,
        RecId _custBillingCodeRecId = 0)
    {
        CustInvoiceStandardLineTemplate custInvoiceStandardLineTemplate;
        CustInvoiceMarkupTransTemplate custInvoiceMarkupTransTemplate;
        CustTable custTable;

        // <GIN>
        boolean isCountryRegionIN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        CustInvoiceLineTemplateTaxExtension_IN custInvoiceLnTplteTaxExtn;
        CustInvoiceLineTaxExtensionIN custInvoiceLineTaxExtensionIN;
        // </GIN>

        this.SourceDocumentLine = 0;
        this.CustInvoiceLineTemplate = _custInvoiceLineTemplate.RecId;
        if (_custInvoiceLineTemplate.getInstanceRelationType() == tableStr(CustInvoiceStandardLineTemplate))
        {
            custInvoiceStandardLineTemplate = _custInvoiceLineTemplate;

            if (!CustParameters::isBillingClassificationEnabled()
                || custInvoiceStandardLineTemplate.BillingCode == 0)
            {
                this.populateCustInvoiceLine(custInvoiceStandardLineTemplate, _custInvoiceTable);

                if (_custRecurrenceInvoiceDefaultType == CustRecurrenceInvoiceDefaultType::InvoiceTemplate)
                {
                    this.TaxItemGroup = custInvoiceStandardLineTemplate.TaxItemGroup;
                }
            }

            if (_custRecurrenceInvoiceDefaultType == CustRecurrenceInvoiceDefaultType::InvoiceTemplate)
            {
                this.TaxGroup = custInvoiceStandardLineTemplate.TaxGroup;
                this.OverrideSalesTax = custInvoiceStandardLineTemplate.OverrideSalesTax;
            }
            else
            {
                if (_custTable == null)
                {
                    custTable = CustTable::find(_custInvoiceTable.OrderAccount);
                }
                else
                {
                    custTable = _custTable;
                }

                if (custInvoiceStandardLineTemplate.TaxItemGroup)
                {
                    this.TaxItemGroup = custInvoiceStandardLineTemplate.TaxItemGroup;
                }
                else
                {
                    this.TaxItemGroup = MainAccountLegalEntity::findByMainAccountLegalEntity(
                            MainAccount::getMainAccountRecIdFromLedgerDimension(this.LedgerDimension), CompanyInfo::current()).TaxItemGroup;
                }

                this.TaxGroup = custTable.TaxGroup;
                this.OverrideSalesTax = custTable.OverrideSalesTax;
                this.TaxItemGroup = this.TaxItemGroup ? this.TaxItemGroup : Tax::taxItemGroup();
            }

            // <GIN>
            if (isCountryRegionIN)
            {
                custInvoiceLnTplteTaxExtn = CustInvoiceLineTemplateTaxExtension_IN::findByCustInvoiceLineTemplateRecId(_custInvoiceLineTemplate.RecId);
                custInvoiceLineTaxExtensionIN = CustInvoiceLineTaxExtensionIN::findByCustInvoiceLine(this.RecId);

                if (custInvoiceLnTplteTaxExtn)
                {
                    custInvoiceLineTaxExtensionIN.AssessableValueTransactionCurrency = custInvoiceLnTplteTaxExtn.AssessableValueTransactionCurrency;
                    custInvoiceLineTaxExtensionIN.MaximumRetailPrice = custInvoiceLnTplteTaxExtn.MaximumRetailPrice;
                    custInvoiceLineTaxExtensionIN.MaxRetailPricePerUnit = custInvoiceLnTplteTaxExtn.MaxRetailPricePerUnit;
                }
            }
            // </GIN>
            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                this.SalesUnit_RU = custInvoiceStandardLineTemplate.SalesUnit_RU;
                this.DefaultDimension = AgreementHeaderExt_RU::createAgreementDimension(_custInvoiceTable.AgreementHeaderExt_RU,
                    this.DefaultDimension);
            }
            // </GEERU>
            else
            {
                if (CustInvoiceDistributionTemplate::recordCountForTemplateLine(custInvoiceStandardLineTemplate.RecId) == 1)
                {
                    CustInvoiceDistributionTemplate custInvoiceDistributionTemplate;
                    select firstonly LedgerDimension from custInvoiceDistributionTemplate
                        where custInvoiceDistributionTemplate.CustInvoiceLineTemplate == custInvoiceStandardLineTemplate.RecId;

                    DimensionDefault dimensionDefault = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(custInvoiceDistributionTemplate.LedgerDimension);

                    if (dimensionDefault)
                    {
                        this.DefaultDimension = dimensionDefault;
                    }
                }
            }

            //<GMX>
            if (EInvoiceCFDIParameters_MX::isElectronicInvoiceEnabled())
            {
                this.PropertyNumber_MX = custInvoiceStandardLineTemplate.PropertyNumber_MX;
            }
            //</GMX>

            this.insert();

            // <GIN>
            //Insert record of CustInvoiceLineTaxExtensionIN when Free Text Invoice created by Free Text Invoice template.
            if (isCountryRegionIN)
            {
                custInvoiceLineTaxExtensionIN.CustInvoiceLine = this.RecId;
                custInvoiceLineTaxExtensionIN.insert();

                TransTaxInformationHelper::copyTransTaxInformation(_custInvoiceLineTemplate, this);
            }
            // </GIN>

            if (TaxIntegrationUtils::isTaxInformationEnabled())
            {
                TransTaxInformation transTaxInformation = TransTaxInformationHelper::newHelper().findTransTaxInformationByRecord(this);

                if (transTaxInformation)
                {
                    ttsbegin;
                    transTaxInformation.selectForUpdate(true);
                    TransTaxInformationHelper::initDefaultCustVendTaxInformation(transTaxInformation, _custTable);
                    transTaxInformation.update();
                    ttscommit;
                }
            }
        }
        else if (_custInvoiceLineTemplate.getInstanceRelationType() == tableStr(CustInvoiceMarkupTransTemplate))
        {
            custInvoiceMarkupTransTemplate = _custInvoiceLineTemplate;

            this.insertMarkupTrans(_custInvoiceTable, custInvoiceMarkupTransTemplate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromCustInvoiceLineTemplate_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the fields of <c>CustInvoiceLine</c> or <c>MarkupTrans</c> table, depending on the
    /// <c>InstanceRelationType</c> field.
    /// </summary>
    /// <param name="_custInvoiceLineTemplate">
    /// The record buffer of <c>CustInvoiceLineTemplate</c> table.
    /// </param>
    /// <param name="_custInvoiceTable">
    /// The record buffer of <c>CustInvoiceTable</c> table.
    /// </param>
    /// <param name="_custTable">
    /// The record buffer of <c>CustTable</c> table.
    /// </param>
    /// <param name="_custRecurrenceInvoiceDefaultType">
    /// The default type for customer recurrence invoice setup.
    /// </param>
    /// <returns>
    /// True if a <c>CustInvoiceLine</c> table record was inserted; othwerwise, false.
    /// </returns>
    /// <remarks>
    /// This method is mainly needed as a different method signature in syp needs to be different from the sys
    /// insertFromCustInvoiceLineTemplate method. Billing classification functionality is implemented here,
    /// which is public sector only, and than the sys version is called.
    /// </remarks>
    public boolean insertFromCustInvoiceLineTemplate_PSN(
        CustInvoiceLineTemplate _custInvoiceLineTemplate,
        CustInvoiceTable _custInvoiceTable,
        CustTable _custTable = null,
        CustRecurrenceInvoiceDefaultType _custRecurrenceInvoiceDefaultType = CustRecurrenceInvoiceDefaultType::InvoiceTemplate)
    {
        CustInvoiceStandardLineTemplate custInvoiceStandardLineTemplate;
        boolean insertSuccessful = true;

        if (CustParameters::isBillingClassificationEnabled()
            && _custInvoiceLineTemplate.getInstanceRelationType() == tableStr(CustInvoiceStandardLineTemplate))
        {
            custInvoiceStandardLineTemplate = _custInvoiceLineTemplate;

            this.populateCustInvoiceLine(custInvoiceStandardLineTemplate, _custInvoiceTable);

            if (custInvoiceStandardLineTemplate.BillingCode)
            {
                if (!this.populateBillingCodeFields(custInvoiceStandardLineTemplate, custInvoiceStandardLineTemplate.BillingCode, _custInvoiceTable.InvoiceDate))
                {
                    insertSuccessful = false;
                }
            }
        }

        // doing this whether or not billing classifications are enabled
        if (insertSuccessful)
        {
            this.insertFromCustInvoiceLineTemplate(_custInvoiceLineTemplate,
                                                    _custInvoiceTable,
                                                    _custTable,
                                                    _custRecurrenceInvoiceDefaultType);
        }

        return insertSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the fields of <c>MarkupTrans</c>
    /// </summary>
    /// <param name="_custInvoiceTable">
    /// The record buffer of <c>CustInvoiceTable</c> table.
    /// </param>
    /// <param name="_custInvoiceMarkupTransTemplate">
    /// The record buffer of <c>CustInvoiceMarkupTransTemplate</c> table.
    /// </param>
    private void insertMarkupTrans( CustInvoiceTable _custInvoiceTable,
                                    CustInvoiceMarkupTransTemplate _custInvoiceMarkupTransTemplate)
    {
        MarkupTrans markupTrans;

        markupTrans.initFromCustInvoiceTable(_custInvoiceTable);
        markupTrans.LineNum = _custInvoiceMarkupTransTemplate.LineNum;
        markupTrans.MarkupCategory = _custInvoiceMarkupTransTemplate.MarkupCategory;
        markupTrans.Txt = _custInvoiceMarkupTransTemplate.Description;
        markupTrans.TaxItemGroup = _custInvoiceMarkupTransTemplate.TaxItemGroup;
        markupTrans.MarkupCode = _custInvoiceMarkupTransTemplate.MarkupCode;
        markupTrans.Value = _custInvoiceMarkupTransTemplate.AmountCur;
        markupTrans.CustInvoiceLineTemplate = _custInvoiceMarkupTransTemplate.RecId;

        markupTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRealizedVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the table is realized vat for a disposal sale transaction.
    /// </summary>
    /// <returns>
    /// True if the record is realized vat, otherwise false.
    /// </returns>
    public display TaxUnrealizedIsRealizedVAT isRealizedVAT()
    {
        TaxTable taxTable;
        TaxGroupData taxGroupData;
        TaxOnItem taxOnItem;
        CustInvoiceLine custInvoiceLineLocal;

        select firstonly RecId from taxTable
            where (taxTable.TaxType_TH == TaxType_TH::Normal
                && taxTable.PaymentTaxCode == '')
                || taxTable.TaxType_TH == TaxType_TH::AverageRealized
            exists join taxGroupData
                where taxTable.TaxCode == taxGroupData.TaxCode
            exists join taxOnItem
                where taxTable.TaxCode == taxOnItem.TaxCode
            exists join custInvoiceLineLocal
                where taxGroupData.TaxGroup == custInvoiceLineLocal.TaxGroup
                    && taxOnItem.TaxItemGroup == custInvoiceLineLocal.TaxItemGroup
                    && custInvoiceLineLocal.RecId == this.RecId;

        return (taxTable.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReasonCodeMandatory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the reason code is mandatory for a disposal sale transaction.
    /// </summary>
    /// <returns>
    /// true if the reason code is mandatory; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This is a public method that is used to find records.
    /// </remarks>

    public boolean isReasonCodeMandatory()
    {
        boolean isReasonCodeMandatory;

        if (this.AssetId)
        {
            if (AssetParameters::find().DisposalSale == NoYes::Yes)
            {
                isReasonCodeMandatory=true;
            }
        }
        else
        {
            isReasonCodeMandatory=false;
        }
        return isReasonCodeMandatory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidProjCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>ProjCategoryId</c> field.
    /// </summary>
    /// <returns>
    /// True if the entered <c>ProjCategoryId</c> can be used; otherwise false.
    /// </returns>
    public boolean isValidProjCategoryId()
    {
        boolean isValid = true;
        ProjCategory projCategory;

        if (this.ProjCategoryId)
        {
            projCategory = ProjCategory::find(this.ProjCategoryId);
            if (projCategory.CategoryType != ProjCategoryType::Revenue)
            {
                return checkFailed(strFmt("@SYS54897", this.ProjCategoryId));
            }

            if (projCategory.SetupEstimate || projCategory.SetupSubscription)
            {
                return checkFailed("@SYS88806");
            }

            isValid = projCategory.validateIfInactiveAllowed();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidProjFundingSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>ProjFundingSource</c> field.
    /// </summary>
    /// <returns>
    /// True if the entered <c>ProjFundingSource</c> can be used; otherwise false.
    /// </returns>
    private boolean isValidProjFundingSource()
    {
        ProjInvoiceTable projInvoiceTable;
        ProjFundingSource projFundingSource;

        if (this.ProjFundingSource)
        {
            projInvoiceTable = ProjTable::find(this.ProjId).projInvoice();
            if (projInvoiceTable)
            {
                projFundingSource = ProjFundingSource::find(this.ProjFundingSource);
                if (!projFundingSource)
                {
                    return checkFailed("@SYS152805");
                }

                if (projFundingSource.ContractId != projInvoiceTable.ProjInvoiceProjId)
                {
                    return checkFailed("@SYS152804");
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidProjId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>ProjId</c> field.
    /// </summary>
    /// <returns>
    /// True if the entered <c>ProjId</c> can be used; otherwise false.
    /// </returns>
    public boolean isValidProjId()
    {
        if (this.ProjId)
        {
            if (!ProjTable::find(this.ProjId).status().activeInTreeRevenue())
            {
                return checkFailed("@SYS331058");
            }
            if (!ProjTable::find(this.ProjId).status().activeInTree())
            {
                return checkFailed(strFmt("@Proj:ProjectIsHeaderOrFinished", this.ProjId));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns line amount for <c>CustInvoiceLine</c>
    /// </summary>
    /// <returns>
    /// Line amount for <c>CustInvoiceLine</c>
    /// </returns>
    public AmountCur lineAmount_RU()
    {
        AmountCur lineAmount;
        TaxAmountCur taxAmount;
        CustInvoiceTable custInvoiceTable;
        CustInvoiceTrans custInvoiceTrans;
        CustInvoiceCalcTax_Table custInvoiceCalcTax;

        if (TaxParameters::find().TaxSpecPosting_RU)
        {
            custInvoiceTable = this.custInvoiceTable();
            lineAmount = this.AmountCur;

            if (!custInvoiceTable.InclTax)
            {
                custInvoiceTrans = CustInvoiceTrans::findBySourceDocumentLine(this.SourceDocumentLine);
                if (custInvoiceTrans)
                {
                    // During FTI posting tax is calculated and tax regulation is deleted before source document distribution. So we can't recalculate line tax amount, and we have to get it from custInvoiceTrans.TaxAmount
                    taxAmount = custInvoiceTrans.TaxAmount;
                }
                else
                {
                    // At amount distribution without FTI posting we just recalculate tax per line
                    custInvoiceCalcTax = CustInvoiceCalcTax::construct(this);
                    custInvoiceCalcTax.calcTax(lineAmount);
                    taxAmount = - custInvoiceCalcTax.tax().taxPrLine(tableNum(CustInvoiceLine), this.RecId);
                }

                lineAmount += taxAmount;
            }
        }
        else
        {
            custInvoiceTrans = CustInvoiceTrans::findBySourceDocumentLine(this.SourceDocumentLine);

            if (custInvoiceTrans && this.custInvoiceTable().InclTax)
            {
                // During FTI posting TaxUncommitted records no longer exist, so get the line amount from CustInvoiceTrans
                // which has already been calculated correctly
                lineAmount = custInvoiceTrans.LineAmount;
            }
            else
            {
                lineAmount = this.amountExclTax_W();
            }
        }

        return lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was previously created by using the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the specified dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when merging.
    /// Additionally, the entity specifier defaulting will be considered.
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )

        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        TaxItemGroup taxItemGroup;
        DialogButton res;
        // <GIN>
        CustInvoiceLineTaxExtensionIN custInvoiceLineTaxExtension;
        // </GIN>
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(CustInvoiceLine, Description):
                if (!this.InvoiceTxt)
                {
                    this.InvoiceTxt = this.Description;
                }
                else if (this.Description != "" && this.orig().Description != this.Description && this.Description != this.InvoiceTxt)
                {
                    res = Box::yesNoOnce("@SYS28003", "@SYS4009804", DialogButton::No);

                    if (res == DialogButton::Yes)
                    {
                        this.InvoiceTxt = this.Description;
                    }
                }
                break;
            case fieldNum(CustInvoiceLine, AssetId):
                if (this.AssetId)
                {
                    this.DefaultDimension = this.custInvoiceTable().DefaultDimension;
                    this.setDefaultDimensionForAssetChange();

                    // </GBR>
                    if (BrazilParameters::isEnabled())
                    {
                        this.ServiceInvoice_BR = false;
                    }
                    // </GBR>

                    this.assetBook().hasHalfYearDepreciation_CZ(AssetTransTypeJournal::DisposalSale, this.custInvoiceTable().InvoiceDate);
                }
                else
                {
                    this.DefaultDimension = this.custInvoiceTable().DefaultDimension;
                }
                break;
            case fieldNum(CustInvoiceLine, AssetBookId):
                if (this.AssetId)
                {
                    //
                    // Reset the default dimension to the default customer dimension before the
                    // before merging the Asset dimension. This is done to prevent dimensions unique to the
                    // previous Asset to be included with the chosen Asset.
                    //
                    this.DefaultDimension = this.custInvoiceTable().DefaultDimension;
                    this.setDefaultDimensionForAssetChange();
                }
                else
                {
                    this.DefaultDimension = this.custInvoiceTable().DefaultDimension;
                }
                break;
            case fieldNum(CustInvoiceLine, Quantity):
                if (this.UnitPrice != 0)
                {
                    //
                    // Only calculate the line aount when unit price exists.  This supports the scenario
                    // where the user only entered the line amount and did not specify a unit price.
                    //
                    this.calcLineAmount();
                }

                // <GIN>
                if (TaxParameters::checkTaxParameters_IN())
                {
                    custInvoiceLineTaxExtension = this.custInvoiceLineTaxExtensionIN();
                    custInvoiceLineTaxExtension.AssessableValueTransactionCurrency = this.getMiscChargesAmountPlusLineAmount_IN();
                    custInvoiceLineTaxExtension.MaximumRetailPrice = custInvoiceLineTaxExtension.calcMaximumRetailPrice();
                    this.packCustInvoiceLineTaxExtensionIN(custInvoiceLineTaxExtension);
                }
                // </GIN>
                break;
            case fieldNum(CustInvoiceLine, UnitPrice):
                this.calcLineAmount();

                // <GIN>
                if (TaxParameters::checkTaxParameters_IN())
                {
                    custInvoiceLineTaxExtension = this.custInvoiceLineTaxExtensionIN();
                    custInvoiceLineTaxExtension.AssessableValueTransactionCurrency = this.getMiscChargesAmountPlusLineAmount_IN();
                    custInvoiceLineTaxExtension.MaximumRetailPrice = custInvoiceLineTaxExtension.calcMaximumRetailPrice();
                    this.packCustInvoiceLineTaxExtensionIN(custInvoiceLineTaxExtension);
                }
                // </GIN>
                break;
            case fieldNum(CustInvoiceLine, AmountCur):
                if (this.AmountCur != this.UnitPrice * this.Quantity)
                {
                    this.UnitPrice = 0;
                }

                // <GIN>
                if (TaxParameters::checkTaxParameters_IN())
                {
                    custInvoiceLineTaxExtension = this.custInvoiceLineTaxExtensionIN();
                    custInvoiceLineTaxExtension.AssessableValueTransactionCurrency = this.getMiscChargesAmountPlusLineAmount_IN();
                    this.packCustInvoiceLineTaxExtensionIN(custInvoiceLineTaxExtension);
                }
                // </GIN>
                break;
            case fieldNum(CustInvoiceLine, LedgerDimension) :
                taxItemGroup = MainAccountLegalEntity::findByMainAccountLegalEntity(
                                    LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(this.LedgerDimension),
                                    CompanyInfo::current()).TaxItemGroup;
                this.TaxItemGroup = taxItemGroup ? taxItemGroup : TaxParameters::find().TaxItemGroup;
                break;

            case fieldNum(CustInvoiceLine, ProjId):
                this.setProjectAttributes();
                // Reset the default dimension to the default customer dimension
                // before merging the Project dimension. This is done to prevent dimensions unique to the
                // previous Project to be included with the chosen Project
                this.DefaultDimension = this.custInvoiceTable().DefaultDimension;

                // If public sector's billing code is specified we don't derive the main account from
                // default the ledger account
                this.setProjInvoiceLineLedgerDimension();
                break;

            case fieldNum(CustInvoiceLine, ProjCategoryId):
                ProjParameters projParameters = ProjParameters::find();
                if (projParameters.TaxItemGroupMethod == ProjTaxItemGroupMethod::Category)
                {
                    this.TaxItemGroup = ProjCategory::find(this.ProjCategoryId).TaxItemGroupId;
                }

                if (this.ProjCategoryId)
                {
                    boolean priceFound;
                    InvoiceUnitPrice newUnitPrice;
                    [newUnitPrice, priceFound] = ProjRevenueSalesPrice::findProjRevenueSalesPrice(this.ProjId, 0, this.ProjCategoryId, this.custInvoiceTable().CurrencyCode, this.custInvoiceTable().InvoiceDate);
                    if (newUnitPrice)
                    {
                        this.UnitPrice = newUnitPrice;
                        this.calcLineAmount();
                    }
                }
                else
                {
                    this.UnitPrice = 0;
                }

                if (!(isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && this.BillingCode) 
                    || this.ProjId)
                {
                    // If public sector's billing code is specified we don't derive the main account from
                    // default the ledger account
                    this.setProjInvoiceLineLedgerDimension();
                }
                // <GEERU>
                this.setAssetLedgerDimensions_RU();
                // <GEERU>
                break;

            // <GEERU>
            case fieldNum(CustInvoiceLine, ProjFundingSource):
                this.setProjInvoiceLineLedgerDimension();
                this.setAssetLedgerDimensions_RU();
                break;

            case fieldNum(CustInvoiceLine, AssetId_RU):
                this.setAssetLedgerDimensions_RU();
                break;
            // <GEERU>

            // <GBR>
            case fieldNum(CustInvoiceLine, cfopTable_BR):
                this.setTaxGroupAndTaxItemGroupFields_BR();
                break;

            case fieldNum(CustInvoiceLine, ServiceInvoice_BR):
                if (this.ServiceInvoice_BR)
                {
                    this.cfopTable_BR = 0;
                }
                else
                {
                    this.TaxServiceCode_BR = '';
                    this.cfopTable_BR = CFOPValidation_BR::construct(this).getDefaultCFOP();
                    if (this.cfopTable_BR)
                    {
                        this.setTaxGroupAndTaxItemGroupFields_BR();
                    }
                }
                break;
            // </GBR>

            case fieldNum(CustInvoiceLine, Consignment_MX):
                if(this.Consignment_MX)
                {
                    this.Description = 'Mercancías en Consignación';
                }
                else
                {
                    this.Description = this.orig().Description;
                }
                break;

            case fieldNum(CustInvoiceLine, Samples_MX):
                if(this.Samples_MX)
                {
                    this.Description = 'Samples';
                }
                else
                {
                    this.Description = this.orig().Description;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packCustInvoiceLine_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the cust invoice line information.
    /// </summary>
    /// <param name="_custInvoiceLine_W">
    /// The cust invoice line.
    /// </param>
    public void packCustInvoiceLine_W(CustInvoiceLine_W _custInvoiceLine_W)
    {
        _custInvoiceLine_W.CustInvoiceLine = this.RecId;

        this.SysExtensionSerializerMap::packExtensionTable(_custInvoiceLine_W);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packCustInvoiceLineTaxExtensionIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the cust invoice line information.
    /// </summary>
    /// <param name="_custInvoiceLineTaxExtensionIN">
    /// The cust invoice line.
    /// </param>
    public void packCustInvoiceLineTaxExtensionIN(CustInvoiceLineTaxExtensionIN _custInvoiceLineTaxExtensionIN)
    {
        _custInvoiceLineTaxExtensionIN.CustInvoiceLine = this.RecId;

        this.SysExtensionSerializerMap::packExtensionTable(_custInvoiceLineTaxExtensionIN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRateDate</Name>
				<Source><![CDATA[
    public AccountingDate parmExchangeRateDate()
    {
        return this.custInvoiceTable().InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceDocumentLine</Name>
				<Source><![CDATA[
    public SourceDocumentLine parmParentSourceDocumentLine()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumName</Name>
				<Source><![CDATA[
    public EnumName parmSourceDocLineTypeEnumName()
    {
        return enumStr(SourceDocumentLine_CustomerInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumValue</Name>
				<Source><![CDATA[
    public SourceDocumentTypeEnumValue parmSourceDocLineTypeEnumValue()
    {
        return SourceDocumentLine_CustomerInvoice::CustomerFreeTextInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeader</Name>
				<Source><![CDATA[
    public SourceDocumentHeader parmSourceDocumentHeader()
    {
        SourceDocumentHeader sourceDocumentHeader;

        sourceDocumentHeader = SourceDocumentHeader::find(this.custInvoiceTable().SourceDocumentHeader);

        return sourceDocumentHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBillingCodeFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the billing classification specific fields of <c>CustInvoiceLine</c>
    /// </summary>
    /// <param name="_custInvoiceStandardLineTemplate">
    /// The record buffer of <c>CustInvoiceLineTemplate</c> table.
    /// </param>
    /// <param name="_custBillingCodeRecId">
    /// The recid of the billing code in the template
    /// </param>
    /// <param name="_invoiceDate">
    /// The date on the generated invoice
    /// </param>
    /// <returns>
    /// True if no billing code is used, or the one used is valid.
    /// </returns>
    private boolean populateBillingCodeFields(CustInvoiceStandardLineTemplate _custInvoiceStandardLineTemplate,
                                      RecId _custBillingCodeRecId,
                                      InvoiceDate _invoiceDate)
    {
        boolean effectiveBillingCodeExist = true;
        boolean billingRateExist = true;
        CustBillingCodeVersion custBillingCodeVersion;
        CustBillingCodeLedgerAccount custBillingCodeLedgerAccount;
        CustBillingCodeRate custBillingCodeRate;
        CustBillingCodeRate custBillingCodeRateCompany;
        CustTable customer;
        AmountCur lineAmount;
        Ledger ledger = Ledger::find(Ledger::current());
        CurrencyExchangeRate exchangeRate;
        CustBillingCode custBillingCode = CustBillingCode::find(_custBillingCodeRecId);

        if (CustParameters::isBillingClassificationEnabled()
            && _custBillingCodeRecId != 0
            && _invoiceDate != dateNull())
        {
            custBillingCodeVersion = custBillingCodeVersion::findByDate(_custBillingCodeRecId, _invoiceDate);

            if (custBillingCodeVersion)
            {
                this.CustBillingCode = _custBillingCodeRecId;
                this.BillingCode = custBillingCode.BillingCode;
                this.Description = custBillingCode.Description;
                this.AmountDetails = custBillingCodeVersion.AmountDetails;
                this.InvoiceTxt = custBillingCode.Description;
                this.TaxItemGroup = custBillingCodeVersion.TaxItemGroupHeading;
                this.ProjId = custBillingCodeVersion.ProjId;
                this.ProjCategoryId = custBillingCodeVersion.ProjCategoryId;

                select firstonly custBillingCodeLedgerAccount
                                    order by custBillingCodeLedgerAccount.RecId
                                    where custBillingCodeLedgerAccount.CustBillingCodeVersion == custBillingCodeVersion.RecId;

                if (custBillingCodeLedgerAccount)
                {
                    this.LedgerDimension = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(custBillingCodeLedgerAccount.LedgerDimension);
                }

                custBillingCodeRate = CustBillingCodeRate::findByCustBillingCodeVersionCurrency(custBillingCodeVersion.RecId, this.custInvoiceTable().CurrencyCode);

                if (custBillingCodeRate.RecId != 0)
                {
                    if (custBillingCodeVersion.RateFieldSelector == RateField::LineAmount)
                    {
                        this.AmountCur = custBillingCodeRate.Amount;
                    }
                    else
                    {
                        this.UnitPrice = custBillingCodeRate.Amount;
                        this.AmountCur = this.UnitPrice * _custInvoiceStandardLineTemplate.Quantity;
                    }
                }
                else
                {
                    customer = CustTable::find(this.custInvoiceTable().OrderAccount);

                    // need to not have an exception when converting currencies, therefore do the check here
                    exchangeRate = ExchangeRateHelper::getVariableExchangeRate(CompanyInfoHelper::standardCurrency(),
                                                                            customer.Currency,
                                                                            ledger.DefaultExchangeRateType,
                                                                            this.custInvoiceTable().InvoiceDate,
                                                                            true);

                    if (exchangeRate)
                    {
                        custBillingCodeRateCompany = CustBillingCodeRate::findByCustBillingCodeVersionCurrency(custBillingCodeVersion.RecId, CompanyInfoHelper::standardCurrency());

                        if (custBillingCodeRateCompany.RecId != 0)
                        {
                            lineAmount = CurrencyExchangeHelper::curAmount2CurAmount(custBillingCodeRateCompany.Amount,
                                                                        CompanyInfoHelper::standardCurrency(),
                                                                        customer.Currency,
                                                                        _invoiceDate);

                            if (custBillingCodeVersion.RateFieldSelector == RateField::LineAmount)
                            {
                                this.AmountCur = lineAmount;
                            }
                            else
                            {
                                this.UnitPrice = lineAmount;
                                this.AmountCur = this.UnitPrice * _custInvoiceStandardLineTemplate.Quantity;
                            }
                        }
                        else
                        {
                            billingRateExist = false;
                        }
                    }
                    else
                    {
                        billingRateExist = false;
                    }
                }
            }
            else
            {
                effectiveBillingCodeExist = false;
            }
        }

        if (!effectiveBillingCodeExist)
        {
            warning("@SPS858");
        }
        else if (CustParameters::isBillingClassificationEnabled() && !billingRateExist)
        {
            warning(strFmt(
                    "@SYS321719",
                    ExchangeRateType::find(ledger.DefaultExchangeRateType).Name,
                    CompanyInfoHelper::standardCurrency(),
                    customer.Currency,
                    _invoiceDate));
        }

        return (effectiveBillingCodeExist && billingRateExist);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the fields of <c>CustInvoiceLine</c>
    /// </summary>
    /// <param name="_custInvoiceStandardLineTemplate">
    /// The record buffer of <c>CustInvoiceLineTemplate</c> table.
    /// </param>
    /// <param name="_custInvoiceTable">
    /// The record buffer of <c>CustInvoiceTable</c> table.
    /// </param>
    private void populateCustInvoiceLine(CustInvoiceStandardLineTemplate _custInvoiceStandardLineTemplate,
                                            CustInvoiceTable _custInvoiceTable)
    {
        ProjInvoiceId projContractId;

        this.AmountCur = _custInvoiceStandardLineTemplate.AmountCur;
        this.ParentRecId = _custInvoiceTable.RecId;
        this.LineNum = _custInvoiceStandardLineTemplate.LineNum;
        this.Description = _custInvoiceStandardLineTemplate.Description;
        this.LedgerDimension = _custInvoiceStandardLineTemplate.LedgerDimension;
        this.UnitPrice = _custInvoiceStandardLineTemplate.UnitPrice;
        this.InvoiceTxt = _custInvoiceStandardLineTemplate.LineTxt;
        this.Quantity = _custInvoiceStandardLineTemplate.Quantity;
        this.Weight = _custInvoiceStandardLineTemplate.Weight;
        this.DefaultDimension = _custInvoiceTable.DefaultDimension;
        this.OrigState = _custInvoiceStandardLineTemplate.OrigState;
        this.IntrastatCommodity = _custInvoiceStandardLineTemplate.IntrastatCommodity;
        this.Transport = _custInvoiceStandardLineTemplate.Transport;
        this.TransactionCode = _custInvoiceStandardLineTemplate.TransactionCode;
        this.Port = _custInvoiceStandardLineTemplate.Port;
        this.StatProcId = _custInvoiceStandardLineTemplate.StatProcId;
        this.ProjId = _custInvoiceStandardLineTemplate.ProjId;
        this.ProjCategoryId = _custInvoiceStandardLineTemplate.ProjCategoryId;
        this.AccountingDistributionTemplate = _custInvoiceStandardLineTemplate.AccountingDistributionTemplate;
        this.OrigCountryRegionId = _custInvoiceStandardLineTemplate.OrigCountryRegionId;

        if (this.ProjId && !this.ProjFundingSource)
        {
            projContractId = ProjTable::find(this.ProjId).ProjInvoiceProjId;
            this.ProjFundingSource = ProjFundingSource::getCustomerDefaultFundingSource(projContractId,
                                                                                       _custInvoiceTable.OrderAccount);
            if (!this.ProjFundingSource)
            {
                this.ProjFundingSource = ProjFundingSource::createFundingSource(projContractId, _custInvoiceTable.OrderAccount);
            }
            this.setProjInvoiceLineLedgerDimension();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInsert_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates Brazilian information on the <c>CustInvoiceTable</c> table after the execution of the <c>CustInvoiceLine.insert</c> method.
    /// </summary>
    public void postInsert_BR()
    {
        CustInvoiceTable custInvoiceTable;

        FiscalDocumentTextUpdate_BR::newFromRecord(this).updateTexts(FiscalDocumentTextType_BR::CFOP);

        custInvoiceTable = this.custInvoiceTable(true);
        if (!custInvoiceTable.FiscalDocumentType_BR)
        {
            custInvoiceTable.FiscalDocumentType_BR = CustFiscalDocumentType_BR::findFiscalDocumentType(
                                                        custInvoiceTable.InvoiceAccount,
                                                        custInvoiceTable.fiscalEstablishment(),
                                                        this.ServiceInvoice_BR ? ItemType::Service : ItemType::Item);

            custInvoiceTable.modifiedField(fieldNum(CustInvoiceTable, FiscalDocumentType_BR));

            custInvoiceTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preUpdate_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates Brazilian information on the <c>CustInvoiceTable</c> table before the execution of the <c>CustInvoiceLine.update</c> method.
    /// </summary>
    public void preUpdate_BR()
    {
        CustInvoiceTable custInvoiceTable;

        if (this.orig().cfopTable_BR != this.cfopTable_BR)
        {
            FiscalDocumentTextUpdate_BR::newFromRecord(this).updateTexts(FiscalDocumentTextType_BR::CFOP);
        }

        custInvoiceTable = this.custInvoiceTable(true);

        if (!custInvoiceTable.FiscalDocumentType_BR
            || this.orig().ServiceInvoice_BR != this.ServiceInvoice_BR)
        {
            custInvoiceTable.FiscalDocumentType_BR = CustFiscalDocumentType_BR::findFiscalDocumentType(
                                                        custInvoiceTable.InvoiceAccount,
                                                        custInvoiceTable.fiscalEstablishment(),
                                                        this.ServiceInvoice_BR ? ItemType::Service : ItemType::Item);
            custInvoiceTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptBillingCodeChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the Yes No dialog box to confirm the user intentions when billing code is changed.
    /// </summary>
    /// <returns>
    /// A dialog button that hold Yes or No selected by the user.
    /// </returns>
    public DialogButton promptBillingCodeChanged()
    {
        DialogButton dialogButton = DialogButton::Yes ;

        if ( this.BillingCode != ''
                && ( this.AmountCur != 0 || this.TaxItemGroup != '' || this.Description != '' )
                && this.BillingCode != this.orig().BillingCode )
        {
            dialogButton = Box::yesNo( "@SPS40", DialogButton::No );
        }

        return dialogButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptCreateFundingSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prompts the user if the funding source for the project contract and customer does not exist and
    /// then creates one if the user confirms.
    /// </summary>
    /// <remarks>
    /// After creating the funding source, this method also defaults it to the funding source table field.
    /// </remarks>
    public void promptCreateFundingSource()
    {
        ProjInvoiceId contractId = ProjTable::find(this.ProjId).ProjInvoiceProjId;
        CustAccount custAccount = this.custInvoiceTable().OrderAccount;

        // if no record exists, prompt the user
        if ( !ProjFundingSource::hasCustomerDefaultFundingSource(contractId, custAccount)
            && Box::yesNo("@SYS322651", DialogButton::Yes) == DialogButton::Yes)
        {
            // if yes, create funding source and default it
            this.ProjFundingSource = ProjFundingSource::createFundingSource(contractId, custAccount);
            this.setProjInvoiceLineLedgerDimension();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLineDistribution</Name>
				<Source><![CDATA[
    private void resetLineDistribution()
    {
        SourceDocumentLineAccountingStatus accountingStatus = SourceDocumentLine::find(this.SourceDocumentLine).AccountingStatus;

        if ( accountingStatus == SourceDocumentLineAccountingStatus::Canceled
            || accountingStatus == SourceDocumentLineAccountingStatus::Finalized)
        {
            return;
        }

        if (accountingStatus == SourceDocumentLineAccountingStatus::Completed)
        {
            SourceDocumentLineProcessor::submitSourceDocumentLineImplementation(this,
                false,
                SourceDocumentLineAccountingStatus::FullyDistributed);
        }

        SourceDocumentLineProcessor::submitSourceDocumentLineImplementation(this,
            false,
            SourceDocumentLineAccountingStatus::Draft);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetDistribution_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Removes and regenerates the distributions for the current document.
    /// </summary>
    /// <GEERU>
    public void resetDistribution_RU()
    {
        this.resetLineDistribution();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAssetLedgerDimensions_RU</Name>
				<Source><![CDATA[
    private void setAssetLedgerDimensions_RU()
    {
        if (this.AssetId_RU)
        {
            RAssetStandards standard = RAssetStandards::find(this.AssetId_RU, RAssetParameters::standardIdDefault());
            this.LedgerDimension = standard.assetLedgerDimension(standard.AssetStandardId, standard.PostingProfile,  RAssetTransType::DisposalSale);
            this.DefaultDimension = standard.defaultDimension(this.custInvoiceTable().InvoiceDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBillingCodeDefaults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>Description</c>, <c>LedgerAccount</c>, <c>TaxItemGroup</c>,
    /// and <c>Dimension</c> fields from the billing code table to the invoice line table buffer.
    /// </summary>
    /// <param name="_custBillingCode">
    /// The billing code record buffer.
    /// </param>
    public void setBillingCodeDefaults(CustBillingCode _custBillingCode)
    {
        CustBillingCodeLedgerAccount custBillingCodeLedgerAccount;
        CustBillingCodeVersion custBillingCodeVersion;

        custBillingCodeVersion = CustBillingCodeVersion::findByDate(_custBillingCode.RecId, this.custInvoiceTable().InvoiceDate);

        this.Description = _custBillingCode.Description;

        if (isConfigurationkeyEnabled(configurationKeyNum(LedgerBasicSalesTax)))
        {
            this.TaxItemGroup = custBillingCodeVersion.TaxItemGroupHeading;
        }

        this.AmountDetails = custBillingCodeVersion.AmountDetails;
        this.InvoiceTxt = _custBillingCode.Description;
        this.CustBillingCode = _custBillingCode.RecId;

        custBillingCodeLedgerAccount = this.getCustBillingCodeLedgerAccount(custBillingCodeVersion);

        if ( custBillingCodeLedgerAccount.RecId )
        {
            this.LedgerDimension = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(custBillingCodeLedgerAccount.LedgerDimension);
            if (custBillingCodeVersion.UseDimensionsFromLine)
            {
                this.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(
                    LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(custBillingCodeLedgerAccount.LedgerDimension),
                    this.DefaultDimension,
                    this.custInvoiceTable().DefaultDimension);
            }
            else
            {
                this.DefaultDimension = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(custBillingCodeLedgerAccount.LedgerDimension);
            }
        }
        else
        {
            this.LedgerDimension = 0;
            this.DefaultDimension = this.custInvoiceTable().DefaultDimension;
        }

        if (custBillingCodeVersion.ProjId && CustParameters::find().EnableProject)
        {
            this.ProjId = custBillingCodeVersion.ProjId;
            this.ProjCategoryId = custBillingCodeVersion.ProjCategoryId;
            this.setProjectAttributes();
            this.validateField(fieldNum(CustInvoiceLine, ProjId));

            if (!this.ProjFundingSource)
            {
                this.promptCreateFundingSource();
            }

            // default the ledger account
            this.setProjInvoiceLineLedgerDimension();
        }
        else
        {
            this.ProjId = "";
            this.ProjCategoryId = "";
            this.ProjFundingSource = 0;
            this.AssetId = "";
            this.AssetBookId = "";

            if (!custBillingCodeVersion.UseDimensionsFromLine)
            {
                this.DefaultDimension = 0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjectAttributes</Name>
				<Source><![CDATA[
    private void setProjectAttributes()
    {
        if (this.ProjId)
        {
            // default the category id from the parameter setup if empty
            if (!this.ProjCategoryId)
            {
                this.CustInvoiceLineMap::initProjCategoryId();
            }

            // default the funding source
            this.ProjFundingSource = ProjFundingSource::getCustomerDefaultFundingSource(ProjTable::find(this.ProjId).ProjInvoiceProjId,
                this.custInvoiceTable().OrderAccount);

            // clear out the asset fields
            this.AssetId = '';
            this.AssetBookId = '';

            boolean priceFound;
            InvoiceUnitPrice newUnitPrice;
            [newUnitPrice, priceFound] = ProjRevenueSalesPrice::findProjRevenueSalesPrice(this.ProjId, 0, this.ProjCategoryId, this.custInvoiceTable().CurrencyCode, this.custInvoiceTable().InvoiceDate);
            if (priceFound)
            {
                this.UnitPrice = newUnitPrice;
                this.calcLineAmount();
            }
        }
        else
        {
            this.ProjCategoryId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjInvoiceLineLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the main account of the project type invoice line by using the <c>ProjId</c>,
    /// <c>ProjCategoryId</c> and <c>ProjFundingSource</c> values.
    /// </summary>
    protected void setProjInvoiceLineLedgerDimension()
    {
        CustBillingCodeVersion custBillingCodeVersion;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            custBillingCodeVersion = CustBillingCodeVersion::findByDate(this.CustBillingCode, this.custInvoiceTable().InvoiceDate);
            if (this.getCustBillingCodeLedgerAccount(custBillingCodeVersion).RecId == 0 || this.ProjId)
            {
                this.setProjInvoiceLineLedgerDimensionBase();
            }
        }
        else
        {
            this.setProjInvoiceLineLedgerDimensionBase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDefaultLedgerDimensionFromProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if ledger dimension in line should default from project setting.
    /// </summary>
    /// <returns>The boolean value indicating if line ledger dimension should default based on project settings.</returns>
    public boolean shouldDefaultLedgerDimensionFromProject()
    {
        return this.ProjId && this.ProjCategoryId && this.ProjFundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjInvoiceLineLedgerDimensionBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Base method that sets the main account of the project type invoice line by using the <c>ProjId</c>,
    /// <c>ProjCategoryId</c> and <c>ProjFundingSource</c> values.
    /// </summary>
    protected void setProjInvoiceLineLedgerDimensionBase()
    {
        LedgerDimensionDefaultAccount defaultLedgerDimension;
        ProjTable projTable;
        ProjCategory projCategory;
        ProjFundingSource projFundingSource;

        if (this.shouldDefaultLedgerDimensionFromProject())
        {
            projTable = ProjTable::find(this.ProjId);
            projCategory = ProjCategory::find(this.ProjCategoryId);
            projFundingSource = ProjFundingSource::find(this.ProjFundingSource);

            defaultLedgerDimension = ProjectPosting::getProjectLedgerDimension(
                                    projTable,
                                    projCategory,
                                    projFundingSource,
                                    null);

            this.LedgerDimension = defaultLedgerDimension;

            this.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(projTable.DefaultDimension, this.DefaultDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxGroupAndTaxItemGroupFields_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set CustInvoiceLine.TaxGroup and CustInvoiceLine.TaxItemGroup based on <c>TaxesMatrix</c>
    /// </summary>
    public void setTaxGroupAndTaxItemGroupFields_BR()
    {
        TaxGroup taxGroup;
        TaxItemGroup taxItemGroup;

        [taxGroup, taxItemGroup] = TaxesMatrix_BR::findTaxGroupAndTaxItemGroup(this.cfopTable_BR,
                                                                               this.custInvoiceTable().SalesPurchOperationType_BR,
                                                                               SalesPurchTrntype_BR::FreeTextInvoice,
                                                                               CustVendType_BR::Customer,
                                                                               this.custInvoiceTable().InvoiceAccount,
                                                                               EcoResCategory::commodityCode(this.IntrastatCommodity),
                                                                               FiscalEstablishment_BR::find(this.custInvoiceTable().FiscalEstablishment_BR).fiscalEstablishmentGroup());

        this.TaxGroup = taxGroup ? taxGroup : CustInvoiceTable::findRecId(this.custInvoiceTable().RecId).TaxGroup;

        this.TaxItemGroup = taxItemGroup ? taxItemGroup : InventTable::find(EcoResCategory::commodityCode(this.IntrastatCommodity)).salesTaxItemGroupId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentLineStatus</Name>
				<Source><![CDATA[
    display SourceDocumentLineAccountingStatus sourceDocumentLineStatus()
    {
        SourceDocumentLine sourceDocumentLine;

        sourceDocumentLine = SourceDocumentLine::find(this.SourceDocumentLine);

        return sourceDocumentLine.AccountingStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxRecalculationNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether tax should be recalculated due to fields change of free text invoice line
    /// </summary>
    /// <param name="_originalCustInvoiceLine">
    /// The <c>CustInvoiceLine</c> record.
    /// </param>
    /// <returns>True if current line tax should be recalculated, otherwise false </returns>
    private boolean taxRecalculationNeeded(Common _originalCustInvoiceLine = this.orig())
    {
        CustInvoiceLine custInvoiceLine_Org = _originalCustInvoiceLine;

        return (this.AccountingDistributionTemplate != custInvoiceLine_Org.AccountingDistributionTemplate) ||
           (this.AmountCur                      != custInvoiceLine_Org.AmountCur)                      ||
           (this.AssetBookId                    != custInvoiceLine_Org.AssetBookId)                    ||
           (this.AssetId                        != custInvoiceLine_Org.AssetId)                        ||
           (this.Quantity                       != custInvoiceLine_Org.Quantity)                       ||
           (this.TaxGroup                       != custInvoiceLine_Org.TaxGroup)                       ||
           (this.TaxItemGroup                   != custInvoiceLine_Org.TaxItemGroup)                   ||
           (this.UnitPrice                      != custInvoiceLine_Org.UnitPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        CustInvoiceTable    custInvoiceTable;
        boolean             needsResetLineDistribution;

        // <GEERU>
        CustInvoiceLine this_orig = this.orig();
        // </GEERU>

        ttsbegin;

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.preUpdate_BR();
        }
        // </GBR>

        super();

        // <GMY>
        this.SysExtensionSerializerMap::postUpdate();
        // </GMY>

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::IsCompanyEnabled())
        {
            if (this.SalesPurchJournalLine::taxRecalculationNeeded(this_orig)
                && CustRelatedInvoice::findByCustInvoice(this.ParentRecId).InvoiceAssociationType != InvoiceAssociationType::AdjustingInvoice)
            {
                this.markCurrentTaxDocumentTaxStatusDirty();
                needsResetLineDistribution = true;
            }
        }
        // <GTE>

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (!DimensionDefaultFacade::areEqual(this.DefaultDimension, this_orig.DefaultDimension))
            {
                needsResetLineDistribution = true;
            }
        }
        // </GEERU>

        if (CustParameters::isBillingClassificationEnabled()
            && this.BillingCode != this_orig.BillingCode)
        {
            needsResetLineDistribution = true;
        }

        if (needsResetLineDistribution)
        {
            this.resetLineDistribution();
        }

        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);

        if (this_orig.FinTag != this.FinTag
            && FinTagConfiguration::isFinTagConfigurationSet(this.DataAreaId)
            && AccountsReceivableFinTagFlight::instance().isEnabled())
        {
            AccountingDistributionFinTagPropagator::updateForLine(this.SourceDocumentLine, this.FinTag);
        }

        custInvoiceTable = this.custInvoiceTable(true);

        if (custInvoiceTable.CovStatus)
        {
            custInvoiceTable.CovStatus= 0;
            custInvoiceTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markCurrentTaxDocumentTaxStatusDirty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Mark current tax status of <c> CustInvoiceTable </c> to dirty
    /// </summary>
    public void markCurrentTaxDocumentTaxStatusDirty()
    {
        TaxableDocumentDescriptor descriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(this.custInvoiceTable());
        ITaxableDocument taxableDocument = TaxableDocumentObject::construct(descriptor);
        TaxBusinessService::markTaxDocumentTaxStatus(taxableDocument, TaxDocumentCalculationLevel::Dirty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExcludeTaxFromInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates an invoice to ensure that tax is not excluded for the tax code
    /// if the tax is included for the invoice.
    /// </summary>
    /// <param name="_inclTax">
    /// A <c>NoYes</c> enumeration value that indicates whether tax is included for the invoice.
    /// </param>
    /// <returns>
    /// true if the invoice is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This functionality is only valid in Lithuanian and Hungarian country context.
    /// </remarks>
    public boolean validateExcludeTaxFromInvoice(InclTax _inclTax)
    {
        if (_inclTax && TaxTable::getExcludeFromInvoice(this.TaxGroup, this.TaxItemGroup))
        {
            return checkFailed(strFmt("@GLS112720",
                                        new DictType(extendedTypeNum(TaxExcludeFromInvoice)).label(),
                                        new DictType(extendedTypeNum(InclTax)).label()));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId p1)
    {
        boolean ret;

        ret = super(p1);

        if (ret)
        {
            switch (p1)
            {
                case fieldNum(CustInvoiceLine, LedgerDimension):
                    ret = MainAccount::checkTransactionAccount(this.LedgerDimension);
                    ret = ret && MainAccount::checkAllowPosting(LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.LedgerDimension).MainAccountId, LedgerPostingType::LedgerJournal, false, true, true);
                    break;
                case fieldNum(CustInvoiceLine,Weight):
                    if (this.Weight < 0)
                    ret = checkFailed("@SYS91969");
                    break;

                // Verify that the value model of derogatory book type is not used for disposal.
                case fieldNum(CustInvoiceLine,AssetBookId):
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR])
                        && AssetBookTable::find(this.AssetBookId).IsDerogatoryBook_FR)
                    {
                        // Derogatory tax model '%1' cannot be used for the asset disposal.
                        ret = checkFailed(strFmt("@SYS110636", this.AssetBookId));
                    }
                    if (this.ProjId)
                    {
                        ret = checkFailed("@SYS320967");
                    }

                    this.assetBook().hasHalfYearDepreciation_CZ(AssetTransTypeJournal::DisposalSale, this.custInvoiceTable().InvoiceDate);
                    break;

                case fieldNum(CustInvoiceLine, BillingCode):
                    if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                    {
                        if ( this.BillingCode != '')
                        {
                            if (!CustBillingCodeVersion::findByDate(CustBillingCode::findBillingCode(this.BillingCode).RecId, this.custInvoiceTable().InvoiceDate))
                            {
                                ret = checkFailed(strFmt("@SPS33", this.BillingCode));
                            }
                            if ( this.AssetId == '' )
                            {
                                //validates the billing code if it exist's in CustBillingCode table
                                if (!CustBillingClassificationCode::existBillingClassificationCode(
                                     CustInvoiceTable::findRecId(this.ParentRecId).CustBillingClassification,
                                     CustBillingCode::findBillingCode(this.BillingCode).RecId))
                                {
                                    this.BillingCode = this.orig().BillingCode;
                                    ret = checkFailed('The billing code is not available for the selected classification, or the billing classification is blank. Select a valid billing code.');
                                }
                            }
                            else
                            {
                                ret = checkFailed("@SPS207");
                            }
                        }
                    }
                    break;

                case fieldNum(CustInvoiceLine, AssetId_RU) :
                    if (this.AssetId_RU)
                    {
                        ret = ret && this.isValidAssetId_RU();
                    }
                    break;

                case fieldNum(CustInvoiceLine,AssetId):
                    if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                    {
                        if ( this.AssetId != '')
                        {
                            if ( this.BillingCode != '')
                            {
                                ret = checkFailed("@SPS206");
                            }
                        }
                    }
                    else
                    {
                        if (this.ProjId)
                        {
                            ret = checkFailed("@SYS320967");
                        }
                    }
                    break;
					
                    
                // Verify that project id should not be cleared once saved and project shouldn't be entered if asset fields are selected.
                case fieldNum(CustInvoiceLine, ProjId):
                    if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                    {
                        if (this.ProjId && ProjTable::find(this.ProjId).Status == ProjStatus::Completed)
                        {
                            ret = checkFailed(strFmt("@SPS796", ProjTable::find(this.ProjId).Stage()));
                            this.ProjId = '';
                            this.ProjCategoryId = '';
                        }
                    }

                    if (this.AssetId || this.AssetBookId)
                    {
                        ret = checkFailed("@SYS320967");
                    }
                    ret = ret && this.isValidProjId();
                    break;

                case fieldNum(CustInvoiceLine, ProjFundingSource):
                    ret = ret && this.isValidProjFundingSource();
                    break;

                case fieldNum(CustInvoiceLine, ProjCategoryId):
                    ret = ret && this.isValidProjCategoryId();
                    break;

                // <GBR>
                case fieldNum(CustInvoiceLine, cfopTable_BR):
                    ret = this.checkCFOP_BR();
                    break;
                // </GBR>

                case fieldNum(CustInvoiceLine, AccountingDistributionTemplate):
                    ret = PurchLine::isTemplateIdPresentInReferenceTable(this.AccountingDistributionTemplate);
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidAssetId_RU</Name>
				<Source><![CDATA[
    private boolean isValidAssetId_RU()
    {
        CustInvoiceLineMapping lineMapping;
        select firstonly RecId, ParentInvoiceLineRecId from lineMapping
            where lineMapping.CustInvoiceLineRecId == this.RecId;
        if (!lineMapping.RecId ||
           CustInvoiceLine::find(lineMapping.ParentInvoiceLineRecId).AssetId_RU != this.AssetId_RU)
        {
            return RAssetTable::find(this.AssetId_RU).isOkToSell(this.AmountCur < 0);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssetBooksForSale_RU</Name>
				<Source><![CDATA[
    private void updateAssetBooksForSale_RU()
    {
        if (RAssetTable::find(this.AssetId_RU).Status != RAssetStatus::Sold)    // for corrected FTI
        {
            RAssetTable::updateStatus(this.AssetId_RU, RAssetStatus::SoldInvoice);
            RAssetTable::updateCustInfo(this.AssetId_RU,
                                        this.custInvoiceTable().InvoiceAccount,
                                        '',
                                        this.custInvoiceTable().InvoiceId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnAssetBooksFromSale_RU</Name>
				<Source><![CDATA[
    private void returnAssetBooksFromSale_RU(RAssetIdOpen _assetId = this.AssetId_RU)
    {
        if (RAssetTable::find(_assetId).Status == RAssetStatus::SoldInvoice)
        {
            RAssetTable::updateStatus(_assetId, RAssetStatus::Open);
            RAssetTable::updateCustInfo(_assetId, '', '', '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultDimensionForAssetChange</Name>
				<Source><![CDATA[
    private void setDefaultDimensionForAssetChange()
    {
        this.DefaultDimension = this.mergeDimension(this.custInvoiceTable().DefaultDimension, AssetTable::find(this.AssetId).defaultDimension(this.AssetBookId));
        this.ProjId = '';
        this.ProjCategoryId = '';
        this.ProjFundingSource = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid;
        ReasonTable reasonTable;
        ReasonCode reasonCode;
        LedgerJournalACType offsetacttype;
        LedgerJournalACType acttype = LedgerJournalACType::Cust;
        LedgerJournalACType ledgerAccountType;
        boolean useOffsetAccountType = false;
        boolean errorFound = false;
        ProjValCheckTrans projValCheckTrans = new ProjValCheckTrans();

        isValid = super();

        if (!this.ParentRecId)
        {
            return checkFailed("@SYS342695");
        }

        if (this.RecId == 0 && !CustInvoiceTable::findRecId(this.ParentRecId).isEditable())
        {
            return checkFailed("@AccountsReceivable:ValidationForPostedFTILine");
        }

        if (this.RecId == 0
            && CustFreeTextInvoiceWorkFlowEditableFlight::instance().isEnabled()
            && CustInvoiceTable::isInActiveWorkflow(this.ParentRecId))
        {
            return checkFailed("@AccountsReceivable:ValidationForFTILineWhenWorkFlowIsSubmitted");
        }

        if (!this.LedgerDimension)
        {
            return checkFailed(strFmt("@SYS138912",''));
        }

        // <GEERU>
        if (isValid && SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            ttsbegin;

            if (this.orig().AssetId_RU &&
                this.orig().AssetId_RU != this.AssetId_RU &&
                this.orig().AmountCur > 0)
            {
                this.returnAssetBooksFromSale_RU(this.orig().AssetId_RU);
            }
            if (this.AssetId_RU)
            {
                if (abs(this.Quantity) != 1)
                {
                    isValid = checkFailed("@GLS116228");
                }

                if (!RAssetTable::find(this.AssetId_RU).RecId)
                {
                    isValid = checkFailed("@GLS116398");
                }

                if (isValid)
                {
                    isValid = this.isValidAssetId_RU();
                }

                if (isValid && this.orig().AssetId_RU != this.AssetId_RU && this.AmountCur > 0)
                {
                    this.updateAssetBooksForSale_RU();
                }
            }

            ttscommit;

            isValid = isValid && this.checkAgreementDimension_RU();
        }
        // </GEERU>

        if (isValid)
        {
            // Retrieve the Reason code from the reason reference table.
            reasonCode = ReasonTableRef::find(this.ReasonRefRecId).Reason;
        }

        if (isValid &&
            reasonCode)
        {
            // General validation if Reason code is used.
            reasonTable = ReasonTable::find(reasonCode);
            if (reasonTable.RecId == 0)
            {
                isValid = checkFailed(strFmt("@SYS112224", reasonCode, fieldPName(ReasonTable, Reason), tablePName(ReasonTable)));
            }
        }

        if (isValid &&
            reasonCode)
        {
            // Validate the Reason code for this line
            if (this.AssetId)
            {
                offsetacttype=LedgerJournalACType::FixedAssets;
                useOffsetAccountType = true;
            }
            acttype=LedgerJournalACType::Cust;
            ledgerAccountType = LedgerJournalACType::Ledger;

            if (!ReasonFormTable::checkReasonCodeForAccountType(this.ReasonRefRecId,acttype))
            {
                errorFound = true;
            }
            if (!errorFound && !ReasonFormTable::checkReasonCodeForAccountType(this.ReasonRefRecId,ledgerAccountType))
            {
                errorFound = true;
            }
            if (!errorFound && useOffsetAccountType && !(ReasonFormTable::checkReasonCodeForAccountType(this.ReasonRefRecId,offsetacttype)))
            {
                errorFound = true;
            }

            if (errorFound)
            {
                isValid = checkFailed("@SYS115522");
            }
        }

        // when GTE is not enabled
        // Verify if the tax info is mandatory, and the sales tax group and item tax group are missing,
        // prevent the user from saving the record.
        CustInvoiceTable custInvoiceTable = this.custInvoiceTable();
        if (isValid
            && !TaxSolutionScopeIntegrationUtil::IsCompanyEnabled()
            && !(this.TaxGroup && this.TaxItemGroup)
            && CustParameters::find().MandatoryItemTaxGroup
            && (!custInvoiceTable.isTaxIntegrationEnabled()
                || this.OverrideSalesTax))
        {
            isValid = checkFailed("@SYS113296");
        }

        if ( this.Quantity < 0 && this.UnitPrice < 0 )
        {
            isValid = checkFailed("@SYS130678");
        }

        if (isValid && this.ProjId)
        {
            isValid = projValCheckTrans.validateMandatory(this);
            isValid = isValid && this.isValidProjId();
            isValid = isValid && this.isValidProjCategoryId();
            isValid = isValid && this.isValidProjFundingSource();
        }

        // Verify that a tax code is derived for the given Tax Group and Tax Item Group.
        isValid = isValid
            && (CheckTaxGroups::Error != Tax::isValidTaxGroupIntersectionV2(
                                            this.TaxGroup,
                                            this.TaxItemGroup,
                                            custInvoiceTable.isTaxIntegrationEnabled()));

        if (isValid &&
            SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoHU]) &&
            this.custInvoiceTable().InclTax)
        {
            isValid = this.validateExcludeTaxFromInvoice(this.custInvoiceTable().InclTax);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLines_RU</Name>
				<Source><![CDATA[
    public static boolean checkLines_RU(RecId _recId)
    {
        CustInvoiceLine custInvoiceLine;
        boolean ret = true;
        RAssetStandards assetStandards;
        RAssetOperationType rAssetOperationType;
        while select custInvoiceLine
            where custInvoiceLine.ParentRecId == _recId
        {
            if (custInvoiceLine.AssetId_RU)
            {
                if (abs(custInvoiceLine.Quantity) != 1)
                {
                    ret = checkFailed("@GLS116228");
                }

                while select AssetStandardId from assetStandards
                    where assetStandards.AssetId == custInvoiceLine.AssetId_RU
                {
                    rAssetOperationType = RAssetOperationType::construct(RAssetTransType::DisposalSale,
                                                                         custInvoiceLine,
                                                                         custInvoiceLine.custInvoiceTable().InvoiceDate,
                                                                         assetStandards.AssetStandardId);

                    if (! rAssetOperationType.check())
                    {
                        return false;
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditNoteExist_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to check if a credit note exists and that it has not been cancelled.
    /// </summary>
    /// <param name="_recId">
    /// RecId of the original invoice.
    /// </param>
    /// <returns>
    /// True, if a credit note exists and if it has not been cancelled
    /// </returns>
    public static boolean creditNoteExist_W(RecId _recId)
    {
        CustInvoiceLine custInvoiceLine;
        CustRelatedInvoice custRelatedInvoice;

        if (_recId)
        {
            // Check if a credit note exists and that it has not been cancelled.
            select firstonly RecId from custInvoiceLine
                where custInvoiceLine.RefReturnInvoiceTrans_W == _recId
                notexists join custRelatedInvoice
                    where custRelatedInvoice.CustInvoice == custInvoiceLine.ParentRecId &&
                        (custRelatedInvoice.InvoiceAssociationType == InvoiceAssociationType::OriginalInvoice ||
                        custRelatedInvoice.InvoiceAssociationType == InvoiceAssociationType::AdjustingInvoice);
        }

        return custInvoiceLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(
        RecId recId,
        LineNum lineNum = naReal())
    {
        if (!recId)
            return false;

        if (lineNum == naReal())
        {
            return (select firstonly RecId from custInvoiceLine
                        index hint ParentRecIdIdx
                        where custInvoiceLine.ParentRecId == recId).RecId != 0;
        }

        return (select firstonly RecId from custInvoiceLine
                index hint ParentRecIdIdx
                where custInvoiceLine.ParentRecId == recId &&
                            custInvoiceLine.LineNum == lineNum).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CustInvoiceLine</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>CustInvoiceLine</c> record.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>CustInvoiceLine</c> table; otherwise, an empty record.
    /// </returns>
    public static CustInvoiceLine find(
        RecId _recId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustInvoiceLine custInvoiceLine;

        custInvoiceLine.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custInvoiceLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly custInvoiceLine
            where custInvoiceLine.RecId == _recId;

        return custInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCustnterestTransLineIdRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CustInvoiceLine</c> table.
    /// </summary>
    /// <param name="_custnterestTransLineIdRefRecId">
    /// The record ID of the <c>CustnterestTransLineIdRef_Invoice</c> record.
    /// </param>
    /// <param name="_forupdate">
    /// A boolean value that indicates whether to update the record.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>CustInvoiceLine</c> table; otherwise, an empty record.
    /// </returns>
    public static CustInvoiceLine findByCustnterestTransLineIdRef(RecId _custnterestTransLineIdRefRecId ,
                                                  boolean _forupdate = false,
                                                  ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustnterestTransLineIdRef_Invoice custInterestTransLineIdRef;
        CustInvoiceLine custInvoiceLine;

        custInterestTransLineIdRef.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custInterestTransLineIdRef.concurrencyModel(_concurrencyModel);
        }

        select firstonly custInvoiceLine
            exists join custInterestTransLineIdRef
                where custInterestTransLineIdRef.RecId == _custnterestTransLineIdRefRecId &&
                        custInvoiceLine.RecId == custInterestTransLineIdRef.CustInvoiceLine;

        return custInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByParentRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>CustInvoiceLine</c> record against <c>ParentRecId</c> field.
    /// </summary>
    /// <param name="_parentRecId">
    /// A <c>ParentRecId</c> record RecId.
    /// </param>
    /// <returns>
    /// A <c>CustInvoiceLine</c> record.
    /// </returns>
    static public CustInvoiceLine findByParentRecId(RefRecId _parentRecId)
    {
        CustInvoiceLine custInvoiceLine;

        select firstonly custInvoiceLine
            where custInvoiceLine.ParentRecId == _parentRecId;

        return custInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>CustInvoiceLine</c> record.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// The record ID of the <c>SourceDocumentLine</c> record to find.
    /// </param>
    /// <returns>
    /// A <c>CustInvoiceLine</c> record.
    /// </returns>
    static public CustInvoiceLine findBySourceDocumentLine(RefRecId _sourceDocumentLine)
    {
        CustInvoiceLine custInvoiceLine;

        select firstonly custInvoiceLine
            where custInvoiceLine.SourceDocumentLine == _sourceDocumentLine;

        return custInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCorrectedInvoiceLines_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates link between current <c>CustInvoiceLine</c> records and corrected invoice lines.
    /// </summary>
    /// <param name="_custInvoiceTable">
    /// <c>CustInvoiceTable</c> record for which lines links are created
    /// </param>
    static void initCorrectedInvoiceLines_RU(CustInvoiceTable _custInvoiceTable)
    {
        Query query;
        QueryRun queryRun;
        CustInvoiceLine invoiceLine;
        CustInvoiceTrans invoiceTrans;
        CustInvoiceJour invoiceJour;
        CustInvoiceTrans custInvoiceTrans;

        CustInvoiceLineCorrLink_RU corrLineLink;
        CustInvoiceJourCorrLink_RU corrJourLink;
        CustInvoiceJour origInvoiceJour = CustInvoiceJour::findFromCustTrans(_custInvoiceTable.CorrectedInvoiceId_RU,
                                                                              _custInvoiceTable.CorrectedInvoiceDate_RU,
                                                                              _custInvoiceTable.InvoiceAccount);

        if (! _custInvoiceTable.CorrectedInvoiceId_RU || ! _custInvoiceTable.CorrectedInvoiceDate_RU)
        {
            return;
        }

        ttsbegin;

        while select forupdate invoiceLine
            where invoiceLine.ParentRecId == _custInvoiceTable.RecId
        notexists join corrLineLink
            where corrLineLink.CustInvoiceLineRecId == invoiceLine.RecId
        exists join invoiceTrans
            where invoiceTrans.RecId == corrLineLink.CorrTransRecId
        exists join invoiceJour
            where invoiceJour.SalesId == invoiceTrans.SalesId
               && invoiceJour.InvoiceId == invoiceTrans.InvoiceId
               && invoiceJour.InvoiceDate == invoiceTrans.InvoiceDate
               && invoiceJour.NumberSequenceGroup == invoiceTrans.NumberSequenceGroup
               && invoiceJour.CurrencyCode == _custInvoiceTable.CurrencyCode
        exists join corrJourLink
            where corrJourLink.CorrJourRecId == origInvoiceJour.refOriginalInvoiceRecId_RU()
        {
            CustInvoiceLineCorrLink_RU::clearLinks(invoiceLine.RecId);

            query = CustVendInvoiceTrans::queryCorrectedTrans_RU(_custInvoiceTable.CorrectedInvoiceId_RU,
                                                                 _custInvoiceTable.CorrectedInvoiceDate_RU,
                                                                 _custInvoiceTable.InvoiceAccount,
                                                                 _custInvoiceTable.CurrencyCode,
                                                                 invoiceLine);

            query.dataSourceTable(tableNum(CustInvoiceTrans)).firstOnly(true);

            queryRun = new QueryRun(query);
            if (queryRun.next())
            {
                custInvoiceTrans = queryRun.get(tableNum(CustInvoiceTrans));
                CustInvoiceLineCorrLink_RU::createLink(invoiceLine.RecId, custInvoiceTrans.RecId);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum_W</Name>
				<Source><![CDATA[
    public static LineNum lastLineNum_W(RecId _recId)
    {
        CustInvoiceLine custInvoiceLine;

        if (_recId)
        {
            select maxof(LineNum) from custInvoiceLine
                where custInvoiceLine.ParentRecId == _recId;
        }

        return custInvoiceLine.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heard table.
    /// </summary>
    /// <returns>The recode for custInvoiceTable.</returns>
    public SalesPurchJournalTable salesPurchJournalTable()
    {
        return this.custInvoiceTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetBook</Name>
				<Source><![CDATA[
    public AssetBook assetBook()
    {
        AssetBook assetBook = AssetBook::find(this.AssetId, this.AssetBookId);

        return assetBook;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxModelDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize tax model doc line by this cust invoice record.
    /// </summary>
    /// <returns>The <c>TaxModelDocLineCustInvoiceImpl</c> object </returns>
    public TaxModelDocLineCustInvoiceImpl initTaxModelDocLine()
    {
        TaxModelDocLineCustInvoiceImpl taxModelDocLine;

        taxModelDocLine = TaxModelDocLineFactory::newTaxModelDocLine(this) as TaxModelDocLineCustInvoiceImpl;

        return taxModelDocLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxModelDocLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize tax model doc line by this cust invoice record for Indian.
    /// </summary>
    /// <returns>The <c>TaxModelDocLineCustInvoiceImpl_IN</c> object </returns>
    public TaxModelDocLineCustInvoiceImpl_IN initTaxModelDocLine_IN()
    {
        TaxModelDocLineCustInvoiceImpl_IN taxModelDocLine;

        taxModelDocLine = TaxModelDocLineFactory::newTaxModelDocLine(this) as TaxModelDocLineCustInvoiceImpl_IN;

        return taxModelDocLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDocumentRowDisplayString</Name>
				<Source><![CDATA[
    /// <summary>
    /// The callback method on tax engine tax document display
    /// </summary>
    /// <returns>The tax document display string.</returns>
    public TaxDocumentDisplayString getTaxDocumentRowDisplayString()
    {
        return strFmt("@ApplicationSuiteTaxEngineIntegration:CustInvoiceLineTaxDocumentRowDisplayFormat", this.LineNum, this.Description);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLineInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SalesPurchLineInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// The <c>SalesPurchLineInterface</c> object.
    /// </returns>
    public SalesPurchLineInterface salesPurchLineInterface()
    {
        return this.SalesPurchLine::salesPurchLineInterface();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS125066</DeveloperDocumentation>
	<Label>@SYS27201</Label>
	<SingularLabel>Customer invoice line</SingularLabel>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>Description</TitleField1>
	<TitleField2>AmountCur</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ParentRecIdIdx</ClusteredIndex>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>ParentRecIdIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustDirective_PSN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustDirective_PSN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustInvoiceLineAsset</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustInvoiceLineAsset</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustInvoiceLineMapping</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustInvoiceLineMapping</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustVendCreditInvoicingLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustVendCreditInvoicingLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>SourceDocumentLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SourceDocumentLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustInvLineBillCodeCustomFieldBase</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustInvLineBillCodeCustomFieldBase</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWriteCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAutogenerated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BillingCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AccountingDistributionTemplate</Name>
			<Label>@sys300391</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountingDistributionTemplate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS12227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesUnit_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AmountDetails</Name>
			<Label>@SPS37</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AmountDetails</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BillingCode</Name>
			<Label>@SPS21</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BillingCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustBillingCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Codes</Name>
			<Label>@SYS17782</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntrastatCommodity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Port</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatProcId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NGPCodesTable_FR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ComplementaryInvoice</Name>
			<Label>@GLS131</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustomDeclId_RU</Name>
			<Label>@GLS102305</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceGtd_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryName_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustomerFreeTextInvoiceLines</Name>
			<Label>@SYS27201</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParentRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceTxt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Data</Name>
			<Label>@SYS7403</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Weight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigCountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigState</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EInvoice</Name>
			<Label>@SYS100769</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EInvoiceAccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderLineReference_NO</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ElectronicInvoice_MX</Name>
			<Label>@SYS341961</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PropertyNumber_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalInformation_BR</Name>
			<Label>@GLS56</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CFOPTable_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxServiceCode_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceInvoice_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FixedAssets</Name>
			<Label>@SYS12578</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetBookId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other_PL</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PKWiUCode_PL</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Project</Name>
			<Label>@SYS80304</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjFundingSource</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reason</Name>
			<Label>@SYS107174</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReasonRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>References</Name>
			<Label>@SYS321051</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CorrectedCustInvoiceLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWriteCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideSalesTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAutogenerated</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SourceDocumentLine</Name>
			<Label>@sys132694</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WithholdingTax_BR</Name>
			<Label>@SYS7372</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdItemGroupHeading_TH</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CFDIInvoice_MX</Name>
			<Label>@SYS341123</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SATProductCode_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SATUnitCode_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SATTariffFraction_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SATCustomUnitOfMeasure_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SATCustomsQty_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Consignment_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Samples_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Brand_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FixedAssets_RU</Name>
			<Label>@SYS12578</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PeriodChargeInvoiceLineBase</Name>
			<Label>@SCM:MarkupPeriodChargeInvoiceLineBase</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PeriodChargeInvoiceLineBaseFromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodChargeInvoiceLineBaseToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigCountryRegionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemOrigCountryRegionId</ExtendedDataType>
			<FeatureClass>ItemOrigCountryRegionIdToggle</FeatureClass>
			<Label>@SYS27196</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AccountingDistributionTemplate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AccountingDistributionTemplateRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS12227</Label>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AmountDetails</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<ExtendedDataType>AmountDetails</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetBookId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetBookIdPurchSalesInvent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetIdOpen</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>RAsset</ConfigurationKey>
			<ExtendedDataType>RAssetIdOpen</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BillingCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BillingCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CFOPTable_BR</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CorrectedCustInvoiceLine</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountryName_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>LogisticsAddressCountryRegionShortName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CreditNoteInternalRef_PL</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CreditNoteInternalRef_W</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCurrencyCode</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustBillingCode</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BillingCodeRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustDirective_PSN</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustVendDirectiveRecId_PSN</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustInvoiceLineTemplate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryLocation</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LogisticsLocationRecId</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransactionTextLarge</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EInvoiceAccountCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EInvoiceAccountCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceGtd_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustFreeInvoiceGTDId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceTxt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Notes</ExtendedDataType>
			<Label>@SYS27050</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>IntrastatCommodity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatCommodityId</ExtendedDataType>
			<FeatureClass>IntrastatCommodityToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>NGPCodesTable_FR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NGPCodesTableFRId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigState</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemOrigStateId</ExtendedDataType>
			<FeatureClass>ItemOrigStateIdToggle</FeatureClass>
			<Label>@SYS73785</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ParentRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustInvoiceTableRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PKWiUCode_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlPKWiUCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Port</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatPortId</ExtendedDataType>
			<FeatureClass>IntrastatPortToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjFundingSource</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjFundingSourceRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PropertyNumber_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>MX</CountryRegionCodes>
			<ExtendedDataType>PropertyNumber_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Quantity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceQuantity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReasonRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ReasonRefRecID</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefReturnInvoiceTrans_W</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefReturnInvoiceTrans_W</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesUnit_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>SalesUnit</ExtendedDataType>
			<Label>@GLS100763</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ServiceInvoice_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<Label>@GLS60334</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentLine</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@sys132694</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StatProcId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatProcId</ExtendedDataType>
			<FeatureClass>IntrastatProcToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxAutogenerated</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAutoGenerated</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxServiceCode_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxServiceCodeId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWithholdGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdItemGroupHeading_TH</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdItemGroupId_TH</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWriteCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWriteCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransactionCodeId</ExtendedDataType>
			<FeatureClass>IntrastatTransactionCodeToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Transport</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransport</ExtendedDataType>
			<FeatureClass>IntrastatTransportToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UnitPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceUnitPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Weight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Weight</ExtendedDataType>
			<Label>@SYS69491</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderLineReference_NO</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OrderLineReference_NO</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemCodeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>DEL_IntrastatItemCodeId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SATProductCode_MX</Name>
			<ExtendedDataType>SATProductCode_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SATUnitCode_MX</Name>
			<ExtendedDataType>SATUnitCode_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Brand_MX</Name>
			<ExtendedDataType>BrandCode_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Consignment_MX</Name>
			<ExtendedDataType>Consignment_MX</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Samples_MX</Name>
			<ExtendedDataType>Samples_MX</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SATCustomUnitOfMeasure_MX</Name>
			<ExtendedDataType>SATCustomUnitOfMeasure_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SATCustomsQty_MX</Name>
			<ExtendedDataType>SATCustomsQty_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SATTariffFraction_MX</Name>
			<ExtendedDataType>SATTariffFraction_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CompanyLocation_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomerLocation_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomerTaxInformation_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomsTariffCodeTable_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExciseRecordType_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<EnumType>ExciseRecordType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExciseTariffCodes_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExciseType_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<EnumType>ExciseType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Exempt_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GTAServiceCategory_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<EnumType>GTAServiceCategory_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HSNCodeTable_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ITCCategory_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<EnumType>ITCCategory_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesTaxFormTypes_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ServiceAccountingCodeTable_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ServiceCodeTable_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AssessableValue_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaximumRetailPrice_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>MaximumRetailPrice_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaxRetailPricePerUnit_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>MaximumRetailPrice_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TCSGroup_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>TaxWithholdGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TDSGroup_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>TaxWithholdGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExternalInvoiceId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>CustomerExternalInvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideSalesTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntegrationOverrideSalesTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PeriodChargeInvoiceLineBaseFromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Markup</ConfigurationKey>
			<ExtendedDataType>MarkupPeriodChargeInvoiceLineBaseFromDate</ExtendedDataType>
			<FeatureClass>MarkupPeriodChargeFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PeriodChargeInvoiceLineBaseToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Markup</ConfigurationKey>
			<ExtendedDataType>MarkupPeriodChargeInvoiceLineBaseToDate</ExtendedDataType>
			<FeatureClass>MarkupPeriodChargeFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FinTag</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FinTagRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ParentRecIdIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ParentRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FK_DimensionAttributeValueSet_CustInvoic</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimensionAttributeValueCombinationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AccountingDistributionTemplateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountingDistributionTemplate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustInvoiceLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CorrectedCustInvoiceLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CFOPTable_BRIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CFOPTable_BR</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustDirective_PSNIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustDirective_PSN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Category</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConfirmedDlv</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExternalItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemBOMId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemRouteId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRCustVendAC</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCROrderLine2PriceHistoryRef</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRReceiptDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRShipDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSCalculationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWSalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchSalesUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>QtyOrdered</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RequiredDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RetailVariantId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StockedProduct</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SystemEntrySource</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitOfMeasure</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SourceDocumentLineImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TransitDocumentTransactionMap_IN</MappingTable>
			<Connections />
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>CustInvoiceLineMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ProjCategoryId</MapField>
					<MapFieldTo>ProjCategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CategoryId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
					<MapFieldTo>DeliveryLocation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IntrastatCommodity</MapField>
					<MapFieldTo>IntrastatCommodity</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>AmountCur</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OverrideSalesTax</MapField>
					<MapFieldTo>OverrideSalesTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
					<MapFieldTo>Quantity</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AccountingDistributionTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AccountingDistributionTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AccountingDistributionTemplate</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountingDistributionTemplate</Name>
					<Field>AccountingDistributionTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AssetBook</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125067</EntityRelationshipRole>
			<RelatedTable>AssetBook</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetBook</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetBookId</Name>
					<Field>AssetBookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetBookTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetBookTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetBookId</Name>
					<SourceEDT>AssetBookIdPurchSalesInvent</SourceEDT>
					<Field>AssetBookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BookIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<SourceEDT>AssetIdOpen</SourceEDT>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CFOPTable_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CFOPTable_BR</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CFOPTable_BR</Name>
					<Field>CFOPTable_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CustCurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustBillingCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustBillingCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustBillingCode</Name>
					<SourceEDT>BillingCodeRefRecId</SourceEDT>
					<Field>CustBillingCode</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustDirective_PSN</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CustDirective_PSN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustDirective_PSN</Name>
					<Field>CustDirective_PSN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInvoiceLine_Corrected</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CorrectedCustInvoiceLine</Name>
					<Field>CorrectedCustInvoiceLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ParentRecIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceLine_PL</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CustInvoiceLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CreditNoteInternalRef_PL</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CreditNoteInternalRef_PL</Name>
					<Field>CreditNoteInternalRef_PL</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInvoiceLineTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceLineTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustInvoiceLineTemplate</Name>
					<Field>CustInvoiceLineTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInvoiceTable_ParentRecId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceTable_ParentRecId</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>CustInvoiceLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParentRecId</Name>
					<SourceEDT>CustInvoiceTableRefRecId</SourceEDT>
					<Field>ParentRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceTrans_W</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceTrans_W</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefReturnInvoiceTrans_W</Name>
					<Field>RefReturnInvoiceTrans_W</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DeliveryLocation_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DeliveryLocation_FK</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryLocation</Name>
					<Field>DeliveryLocation</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatCommodity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IntrastatCommodity</Name>
					<Field>IntrastatCommodity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatPort</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatPort</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Port</Name>
					<SourceEDT>IntrastatPortId</SourceEDT>
					<Field>Port</Field>
					<RelatedField>PortId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PortIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatStatProc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatStatProc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StatProcId</Name>
					<SourceEDT>IntrastatProcId</SourceEDT>
					<Field>StatProcId</Field>
					<RelatedField>StatProcId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatProcIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransactionCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatTransactionCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransactionCode</Name>
					<SourceEDT>IntrastatTransactionCodeId</SourceEDT>
					<Field>TransactionCode</Field>
					<RelatedField>TransactionCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransportMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatTransportMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Transport</Name>
					<SourceEDT>IntrastatTransport</SourceEDT>
					<Field>Transport</Field>
					<RelatedField>TransPortCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransPortCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsAddressCountryRegion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressCountryRegion</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigCountryRegionId</Name>
					<SourceEDT>ItemOrigCountryRegionId</SourceEDT>
					<Field>OrigCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsAddressCountryRegion_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegionTranslation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressCountryRegion_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryName_RU</Name>
					<SourceEDT>LogisticsAddressCountryRegionShortName</SourceEDT>
					<Field>CountryName_RU</Field>
					<RelatedField>ShortName</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NGPCodesTable_FR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>NGPCodesTable_FR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Role>NGPCodesTable_FR</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NGPCodesTable_FR</Name>
					<Field>NGPCodesTable_FR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>OrigState</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123884</EntityRelationshipRole>
			<RelatedTable>LogisticsAddressState</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OrigState</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigCountryRegionId</Name>
					<Field>OrigCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigState</Name>
					<Field>OrigState</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<SourceEDT>ProjCategoryId</SourceEDT>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjFundingSource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjFundingSource</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjFundingSource</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjFundingSource_CustInvoiceLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjFundingSource</Name>
					<SourceEDT>ProjFundingSourceRefId</SourceEDT>
					<Field>ProjFundingSource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReasonTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ReasonTableRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonRefRecId</Name>
					<SourceEDT>ReasonRefRecID</SourceEDT>
					<Field>ReasonRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesUnit_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesUnit_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesUnit_RU</Name>
					<Field>SalesUnit_RU</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SourceDocumentLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDocumentLine</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CustInvoiceLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentLine</Name>
					<Field>SourceDocumentLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<SourceEDT>TaxGroup</SourceEDT>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<SourceEDT>TaxItemGroup</SourceEDT>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxServiceCode_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TaxServiceCode_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceLine_TaxServiceCode_BR</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxServiceCode_BR</Name>
					<Field>TaxServiceCode_BR</Field>
					<RelatedField>ServiceCodeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxServiceTariff</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TaxServiceTariff</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxServiceTariff</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceLine</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>ParentRecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableId</Name>
					<Field>TableId</Field>
					<RelatedField>ParentTableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxWithholdGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdGroupHeading_BR</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdGroupHeading_BR_CustinvoiceLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdGroup</Name>
					<Field>TaxWithholdGroup</Field>
					<RelatedField>TaxWithholdGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdItemGroupHeading_TH</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdItemGroupHeading_TH</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdItemGroupHeading_TH</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdItemGroupHeading_TH_CustInvoiceLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdItemGroupHeading_TH</Name>
					<Field>TaxWithholdItemGroupHeading_TH</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SATProductCode_MX</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>EInvoiceExtCodeTable_MX</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ExtCodeTableProductCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SATProductCode_MX</Name>
					<Field>SATProductCode_MX</Field>
					<RelatedField>CodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CodeType</Name>
					<RelatedField>CodeType</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SATUnitCode_MX</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>EInvoiceExtCodeTable_MX</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ExtCodeTableUnitCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SATUnitCode_MX</Name>
					<Field>SATUnitCode_MX</Field>
					<RelatedField>CodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CodeType</Name>
					<RelatedField>CodeType</RelatedField>
					<Value>2</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SATCustomUnitOfMeasure_MX</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>EInvoiceExtCodeTable_MX</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SATCustomUnitOfMeasure_MX</Name>
					<Field>SATCustomUnitOfMeasure_MX</Field>
					<RelatedField>CodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CodeType</Name>
					<RelatedField>CodeType</RelatedField>
					<Value>7</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SATTariffFraction_MX</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>EInvoiceExtCodeTable_MX</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SATTariffFraction_MX</Name>
					<Field>SATTariffFraction_MX</Field>
					<RelatedField>CodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CodeType</Name>
					<RelatedField>CodeType</RelatedField>
					<Value>6</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BrandTable_MX</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BrandTable_MX</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Brand_MX</Name>
					<Field>Brand_MX</Field>
					<RelatedField>BrandCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RAssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RAssetTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId_RU</Name>
					<SourceEDT>RAssetIdOpen</SourceEDT>
					<Field>AssetId_RU</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FinTag</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>FinTag</RelatedTable>
			<RelatedTableRole>FinTag</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceLine_FinTag</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FinTag</Name>
					<Field>FinTag</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>