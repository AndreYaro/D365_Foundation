<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomPosts_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustomPosts_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(CustomPosts_RU, PostId):
                this.PostId = strRem(this.PostId, ' ');
                if (strLen(this.PostId) != 8)
                {
                    ret = checkFailed(strFmt("@GLS114695", 8));
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
        public static boolean checkExist(VendAccount _partnerCode, CustomPostId_RU _postId)
    {
        if (!CustomPosts_RU::exist(_partnerCode, _postId))
        {
            return checkFailed(strFmt(CustomPosts_RU::txtNotExist(), _partnerCode, _postId));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether customs partner has single customs post.
    /// </summary>
    /// <param name="_partnerCode">
    /// The code identifying the customs partner.
    /// </param>
    /// <param name="_postId">
    /// The code identifying customs post.
    /// </param>
    /// <returns>
    /// True - if the customs partner has this customs post, false - otherwise.
    /// </returns>
    public static boolean exist(VendAccount _partnerCode, CustomPostId_RU _postId)
    {
        return _partnerCode && _postId
            && (select firstonly PostId from customPosts_RU
                where customPosts_RU.PartnerCode == _partnerCode
                   && customPosts_RU.PostId      == _postId).PostId != "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForSinglePartner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether customs post exists for a single customs partner.
    /// </summary>
    /// <param name="_postId">
    /// The code identifying customs post.
    /// </param>
    /// <returns>
    /// True - if the given customs post exists for single customs counteragent, false - otherwise.
    /// </returns>
    /// <remarks>
    /// Counts the number of customs counteragents that this customs post is related to and compares the value to one.
    /// </remarks>
    public static boolean existForSinglePartner(CustomPostId_RU _postId)
    {
        return (select count(RecId) from customPosts_RU where customPosts_RU.PostId == _postId).RecId == 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSinglePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether customs partner has single customs post.
    /// </summary>
    /// <param name="_partnerCode">
    /// The code identifying the customs partner.
    /// </param>
    /// <returns>
    /// True - if the customs partner has single customs post, false - otherwise.
    /// </returns>
    /// <remarks>
    /// Counts the number of customs posts that the given customs partner has and compares the value to one.
    /// </remarks>
    public static boolean existSinglePost(VendAccount _partnerCode)
    {
        return (select count (RecId) from customPosts_RU where customPosts_RU.PartnerCode == _partnerCode).RecId == 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a record from this table corresponding to given parameters, in a given mode.
    /// </summary>
    /// <param name="_partnerCode">
    /// The code identifying the customs partner.
    /// </param>
    /// <param name="_postId">
    /// The code identifying customs post.
    /// </param>
    /// <param name="_forUpdate">
    /// Determines whether the record returned will be in update mode.
    /// </param>
    /// <returns>
    /// The first record from this table corresponding to given parameters, in a given mode.
    /// </returns>
    public static CustomPosts_RU find(VendAccount _partnerCode, CustomPostId_RU _postId, boolean _forUpdate = false)
    {
        CustomPosts_RU  customPost;

        if (_partnerCode && _postId)
        {
            customPost.selectForUpdate(_forUpdate);

            select firstonly customPost
                where customPost.PartnerCode == _partnerCode
                   && customPost.PostId      == _postId;
        }

        return customPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSinglePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns partner's custom post if the given custom partner has only one post.
    /// </summary>
    /// <param name="_partnerCode">
    /// The code identifying the custom partner.
    /// </param>
    /// <returns>
    /// Partner's custom post Id if the partner has only one post.
    /// </returns>
    /// <remarks>
    /// Checkes whether the given customs partner has only one customs post and returns it.
    /// Returns '' value otherwise.
    /// </remarks>
    public static CustomPostId_RU getSinglePost(VendAccount _partnerCode)
    {
        if (CustomPosts_RU::existSinglePost(_partnerCode))
        {
            return (select firstonly PostId from customPosts_RU where customPosts_RU.PartnerCode == _partnerCode).PostId;
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>postPartnerCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up customs partner code by the given customs post if the post relates to a single partner.
    /// </summary>
    /// <param name="_postId">
    /// The code of the customs post.
    /// </param>
    /// <returns>
    /// Customs partner code if it is uniquely identified by customs post, blank value otherwise.
    /// </returns>
    /// <remarks>
    /// Checks whether the post is related to a single partner and returns partner's code then.
    /// Returns blank value otherwise.
    /// </remarks>
    public static VendAccount postPartnerCode(CustomPostId_RU _postId)
    {
        if (CustomPosts_RU::existForSinglePartner(_postId))
        {
            return (select firstonly PartnerCode from customPosts_RU where customPosts_RU.PostId == _postId).PartnerCode;
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "@GLS223717";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@GLS223722</DeveloperDocumentation>
	<FormRef>CustomPosts_RU</FormRef>
	<Label>@GLS223720</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>PartnerCode</TitleField1>
	<TitleField2>PostId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>CustomPostIdx</ClusteredIndex>
	<Modules>AccountsReceivable</Modules>
	<ReplacementKey>CustomPostIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PartnerCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PartnerCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS80392</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PartnerCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PartnerCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PartnerCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendAccountCustom_RU</ExtendedDataType>
			<Label>@GLS115111</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomPostId_RU</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CustomPostIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PartnerCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PostId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustomPartners_RU</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustomPartners_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>PartnerType_Extern</Name>
					<RelatedField>PartnerType</RelatedField>
					<ValueStr>CustomPartnerType_RU::Custom</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PartnerCode</Name>
					<Field>PartnerCode</Field>
					<RelatedField>PartnerCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PartnerIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustomPosts_RU</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>CustomPosts_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PartnerCode</Name>
					<Field>PartnerCode</Field>
					<RelatedField>PartnerCode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostId</Name>
					<Field>PostId</Field>
					<RelatedField>PostId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PartnerCode</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>PartnerCode</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>