<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TAMMerchandisingEvent</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TAMMerchandisingEvent extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createdRebatesExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Checks for existence of created rebates for a merchandising event.
    /// </summary>
    /// <returns>
    /// true if rebates were created for the merchandising event; otherwise, false.
    /// </returns>
    public boolean createdRebatesExist()
    {
        PdsRebateAgreement  pdsRebateAgreement;
        PdsRebateTable      pdsRebateTable;
        boolean             ret = false;

        //Only bill backs will create rebates
        if (this.MerchandisingEventCategory == MCRMerchandisingEventCategory::BillBack)
        {
            select firstonly RecId from pdsRebateTable
                exists join pdsRebateAgreement
                where pdsRebateAgreement.RecId == pdsRebateTable.PdsRebateAgreementRefRecId
                    &&  pdsRebateAgreement.tamMerchandisingEventID == this.MerchandisingEventID;
            if (pdsRebateTable.RecId)
            {
                ret = true;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultClaimPayTypeFromEventCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the claim payment type when event category is changed.
    /// </summary>
    protected void defaultClaimPayTypeFromEventCategory()
    {
        switch (this.MerchandisingEventCategory)
        {
            case MCRMerchandisingEventCategory::BillBack:
            case MCRMerchandisingEventCategory::LumpSum:
                this.ClaimPayType   = MCRClaimPayType::Cust;
                break;

            case MCRMerchandisingEventCategory::OffInvoice:
                this.ClaimPayType   = MCRClaimPayType::None;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the customer record associated with this merchandising event.
    /// </summary>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The customer record associated with this merchandising event.
    /// </returns>
    CustTable custTable(boolean _forUpdate = false)
    {
        return CustTable::find(this.PromotionCust, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     When a merchandising event's type is changed,
    ///     delete the rebate record if the type is no longer bill back.
    /// </summary>
    /// <param name="_fieldId">
    /// The ID of the field that is being modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        if (_fieldId == fieldNum(TAMMerchandisingEvent, MerchEventType))
        {
            TAMMerchandisingEventType merchEventType = TAMMerchandisingEventType::find(this.MerchEventType);
            this.MerchandisingEventCategory = merchEventType.MerchEventCategory;
            this.defaultClaimPayTypeFromEventCategory();
        }

        if (_fieldId == fieldNum(TAMMerchandisingEvent, MerchandisingEventCategory))
        {
            this.defaultClaimPayTypeFromEventCategory();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tamTradePromotion</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the trade promotion associated with this merchandising event.
    /// </summary>
    /// <returns>
    /// The trade promotion associated with this merchandising event.
    /// </returns>
    TAMTradePromotion tamTradePromotion()
    {
        TAMTradePromotion tamTradePromotion;
        tamTradePromotion    = TAMTradePromotion::find(this.PromotionID, this.PromotionCust);
        return tamTradePromotion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that merchandising events do not have any sales orders that have
    /// hit against the merchandising event.
    /// </summary>
    /// <returns>
    /// true if it is valid for the record to be deleted; otherwise, false.
    /// </returns>
    public boolean validateDelete()
    {
        boolean ret;
        MCRPriceHistory  priceHistory;

        ret = super();

        select firstonly RecId from priceHistory
                 where priceHistory.MerchandisingEventID == this.MerchandisingEventID;

        if (priceHistory && ret)
        {
            checkFailed("@MCR26268");
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the merchandising event based on merchandising event ID.
    /// </summary>
    /// <param name="_mcrMerchandisingEventID">
    /// The merchandising event ID of the merchandising event record that should be found.
    /// </param>
    /// <param name="_update">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The merchandising event for the merchandising event ID specified.
    /// </returns>
    public static TAMMerchandisingEvent find(MCRMerchandisingEventID _mcrMerchandisingEventID,
                                         boolean                _update = false)
    {
        TAMMerchandisingEvent    tamMerchandisingEvent;
        if (_mcrMerchandisingEventID)
        {
            tamMerchandisingEvent.selectForUpdate(_update);
            select firstonly tamMerchandisingEvent
                where tamMerchandisingEvent.MerchandisingEventID == _mcrMerchandisingEventID;
        }
        return tamMerchandisingEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMerchIDByItemCustPromo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the merchandising event based on the customer, trade allowance, and item.
    /// </summary>
    /// <param name="_promotionID">
    /// The <c>TAMPromotionId</c> for which to search the <c>TAMMerchandisingEvent</c> table.
    /// </param>
    /// <param name="_customer">
    /// The <c>CustAccount</c> for which to search the <c>TAMMerchandisingEvent</c> table.
    /// </param>
    /// <param name="_itemId">
    /// The <c>ItemId</c> for which to search the <c>TAMMerchandisingEvent</c> table.
    /// </param>
    /// <returns>
    /// The merchandising event that was found based on the customer, trade allowance, and item.
    /// </returns>
    public static TAMMerchandisingEvent findMerchIDByItemCustPromo(TAMPromotionID _promotionID, CustAccount _customer, ItemId _itemId)
    {
        TAMPromotionItem      tamPromotionItem;
        TAMPromotionCust      tamPromotionCust;
        TAMMerchandisingEvent    tamMerchandisingEvent;

        // Set the bill back lines merchandising event ID on the table.
        select ItemID, PromotionID from tamPromotionItem
        where tamPromotionItem.ItemID == _itemId
            && tamPromotionItem.PromotionID == _promotionID
        join * from tamMerchandisingEvent
            where tamMerchandisingEvent.PromotionID == _promotionID
        join * from tamPromotionCust
            where tamPromotionCust.PromotionID == _promotionID
            && tamPromotionCust.PromotionID == tamPromotionItem.PromotionID
            && tamPromotionCust.CustAccount == _customer;

        return tamMerchandisingEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefTAMDeduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows merchandising events given a deduction.
    /// </summary>
    /// <param name="_deduction">
    /// The deduction record to use to show the merchandising events.
    /// </param>
    /// <param name="_caller">
    /// The calling form object.
    /// </param>
    /// <param name="_parm">
    /// Parameter value that should be passed to the form.
    /// </param>
    public static void jumpRefTAMDeduction(
        TAMDeduction _deduction,
        Object      _caller,
        str         _parm = '')
    {
        Args            args;
        MenuFunction    menuFunction;
        args = new Args();
        args.caller(_caller);
        args.record(_deduction);
        args.parm(_parm);
        menuFunction = new MenuFunction(menuitemDisplayStr(TAMPromotionsManagmentMenu),
                                         MenuItemType::Display);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInvoiceAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows all merchandising events that match customer.
    /// </summary>
    /// <param name="_callingControl">
    /// The form control to apply the lookup ability to.
    /// </param>
    /// <param name="_custInvoiceAccount">
    ///  Promotions will only be shown that are associated with sales orders that use specified customer invoice account.
    /// </param>
    /// <param name="_promotionID">
    ///  The promotion ID in which to filter merchandising events.
    /// </param>
    /// <param name="_excludeOffInvoiceEvents">
    ///  When the parameter is true, off invoice events will be excluded from the lookup.
    /// </param>
    /// <param name="_excludeOneTimePromotions">
    /// When the parameter is true, one time promotions will be excluded from the lookup.
    /// </param>
    /// <remarks>
    ///   See TAMTradePromotion::lookupInvoiceAccount
    ///
    ///   Find all promotions that match merchandising events.
    ///   Find all sales orders with a customer account equal to _custInvoiceAccount.
    ///   Include all merchandising events with customer account equal to the customer account
    ///   of those sales orders.
    ///
    ///   Assume just these 4 sales orders exist.
    ///   Sales order: 1 Customer account: B  Invoice account: A
    ///   Sales order: 2 Customer account: A  Invoice account: C
    ///   Sales order: 3 Customer account: B  Invoice account: C
    ///   Sales order: 4 Customer account: B  Invoice account: B
    ///
    ///   Lookup invoice account A - return promotons for B.
    ///   Lookup invoice account B - return promotons for B.
    ///   Lookup invoice account C - return promotions for A and B.
    /// </remarks>
    public static void lookupInvoiceAccount(
        FormControl         _callingControl,
        CustInvoiceAccount  _custInvoiceAccount,
        TAMPromotionID      _promotionID,
        boolean             _excludeOffInvoiceEvents,
        boolean             _excludeOneTimePromotions)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    qbdstamMerchandisingEvent;
        QueryBuildDataSource    qbdstamMerchEventPricing;
        QueryBuildDataSource    qbdsSalesTable;
        QueryBuildDataSource    qbdstamTradePromotion;
        QueryBuildDataSource    qbdstamPromotionCust;

        sysTableLookup = SysTableLookup::newParameters(tableNum(TAMMerchandisingEvent), _callingControl);
        sysTableLookup.addLookupfield(fieldNum(TAMMerchandisingEvent, MerchandisingEventID));
        sysTableLookup.addLookupfield(fieldNum(TAMMerchandisingEvent, Description));
        sysTableLookup.addLookupfield(fieldNum(TAMMerchandisingEvent, MerchandisingEventCategory));
        sysTableLookup.addLookupfield(fieldNum(TAMMerchandisingEvent, PromotionCust));
        sysTableLookup.addLookupfield(fieldNum(TAMMerchandisingEvent, PromotionID));

        query = new Query();
        qbdstamMerchandisingEvent = query.addDataSource(tableNum(TAMMerchandisingEvent));

        if (_promotionID)
        {
            qbdstamMerchandisingEvent.addRange(fieldNum(TAMMerchandisingEvent, PromotionID)).
                value(SysQuery::value(_promotionID));
        }

        if (_excludeOffInvoiceEvents)
        {
            qbdstamMerchandisingEvent.addRange(fieldNum(TAMMerchandisingEvent, MerchandisingEventCategory)).
                value(SysQuery::valueNot(MCRMerchandisingEventCategory::OffInvoice));
        }

        // Filter SalesTable with invoice account
        if (_custInvoiceAccount)
        {
             // Join event with trade promotion by promotion Id
            qbdstamTradePromotion = qbdstamMerchandisingEvent.addDataSource(tableNum(TAMTradePromotion));
            qbdstamTradePromotion.relations(true);
            qbdstamTradePromotion.fetchMode(QueryFetchMode::One2One);

            qbdstamPromotionCust = qbdstamTradePromotion.addDataSource(tableNum(TAMPromotionCust));
            qbdstamPromotionCust.clearLinks();
            qbdstamPromotionCust.addLink(fieldNum(TAMPromotionCust, PromotionID), fieldNum(TAMTradePromotion, PromotionID));

            // Exist join trade promotion to sales table by account
            qbdsSalesTable = qbdstamPromotionCust.addDataSource(tableNum(SalesTable));
            qbdsSalesTable.joinMode(JoinMode::ExistsJoin);
            qbdsSalesTable.addLink(fieldNum(TAMPromotionCust, CustAccount), fieldNum(SalesTable, CustAccount));

            qbdsSalesTable.addRange(fieldNum(SalesTable, InvoiceAccount)).
                value(SysQuery::value(_custInvoiceAccount));
        }

        if (_excludeOneTimePromotions)
        {
            qbdstamMerchEventPricing =
                qbdstamMerchandisingEvent.addDataSource(tableNum(TAMMerchEventPricing));
            qbdstamMerchEventPricing.relations(true);
            qbdstamMerchEventPricing.fetchMode(QueryFetchMode::One2One);
            qbdstamMerchEventPricing.joinMode(JoinMode::NoExistsJoin);
            qbdstamMerchEventPricing.addRange(fieldNum(TAMMerchEventPricing, OneTimeLumpSum)).
                value(SysQuery::value(NoYes::Yes));
        }

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the currency code on the current merchandising event and its sub-tables.
    /// </summary>
    /// <param name="_currencyCode">
    /// The new currency code.
    /// </param>
    public void updateCurrencyCode(CurrencyCode _currencyCode)
    {
        PdsRebateAgreement      pdsRebateAgreement;
        PdsRebateAgreementLine  pdsRebateAgreementLine;

        if (this.MerchandisingEventID)
        {
            switch (this.MerchandisingEventCategory)
            {
                case MCRMerchandisingEventCategory::BillBack:
                    ttsBegin;

                    update_recordSet pdsRebateAgreement
                    setting
                        RebateCurrency = _currencyCode
                    where pdsRebateAgreement.TAMMerchandisingEventID == this.MerchandisingEventID;

                    update_recordSet pdsRebateAgreementLine
                        setting
                            Currency = _currencyCode
                        exists join pdsRebateAgreement
                            where pdsRebateAgreementLine.RebateAgreementRefRecId == pdsRebateAgreement.RecId
                            &&    pdsRebateAgreement.TAMMerchandisingEventID     == this.MerchandisingEventID;

                    ttsCommit;

                    break;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TAMPromotionsManagement</ConfigurationKey>
	<DeveloperDocumentation>@MCR25819</DeveloperDocumentation>
	<FormRef>TAMPromotionsManagmentMenu</FormRef>
	<Label>@MCR25819</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>MerchandisingEventID</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>PromotionID</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<CreatedTransactionId>Yes</CreatedTransactionId>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ModifiedTransactionId>Yes</ModifiedTransactionId>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>MerchID</PrimaryIndex>
	<ReplacementKey>MerchID</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>TAMMerchEventPricing</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TAMMerchEventPricing</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TAMPromotionCust</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TAMPromotionCust</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TAMPromotionFund</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TAMPromotionFund</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TAMPromotionItem</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TAMPromotionItem</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PromotionID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MerchandisingEventID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MerchandisingEventCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MerchandisingEventID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MerchEventType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PromotionID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MerchandisingEventCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MerchandisingEventID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PromotionCust</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MerchandiseCost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimensionOffsetAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClaimPayType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MerchandisingEventID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MerchEventType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MerchandisingEventCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MerchandiseCost</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ClaimPayType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>MCRClaimPayType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimensionOffsetAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@SYS11162</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MerchandiseCost</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@MCR26574</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MerchandisingEventCategory</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>MCRMerchandisingEventCategory</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MerchandisingEventID</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRMerchandisingEventID</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MerchEventType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMMerchEventType</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PromotionCust</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMPromotionCustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PromotionID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMPromotionID</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PromotionID</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>PromotionID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>MerchID</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>MerchandisingEventID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimensionAttributeValueCombinationIdx1</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerDimensionOffsetAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PromotionCust</Name>
					<SourceEDT>TAMPromotionCustAccount</SourceEDT>
					<Field>PromotionCust</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimensionOffsetAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimensionOffsetAccount</Name>
					<Field>LedgerDimensionOffsetAccount</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MerchEventType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TAMMerchandisingEventType</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MerchEventType</Name>
					<SourceEDT>TAMMerchEventType</SourceEDT>
					<Field>MerchEventType</Field>
					<RelatedField>TAMMerchEventType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TAMMerchEventType</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TAMTradePromotion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TAMTradePromotion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PromotionID</Name>
					<SourceEDT>TAMPromotionID</SourceEDT>
					<Field>PromotionID</Field>
					<RelatedField>PromotionID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>