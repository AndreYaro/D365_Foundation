<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrActivity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WrkCtrActivity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCompanyContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the legal entity that the activity is used for and throws an error if no company context could be established.
    /// </summary>
    /// <returns>
    /// The ID of the legal entity that the activity is used for.
    /// </returns>
    public CompanyId getCompanyContext()
    {
        CompanyId companyId = this.getCompanyContextNoThrow();

        if (!companyId || xDataArea::isVirtualCompany(companyId))
        {
            // No company context could be established based on the activity, so an error must be thrown
            throw error("@SYS327436");
        }

        return companyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyContextNoThrow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the legal entity that the activity is used for.
    /// </summary>
    /// <returns>
    /// The ID of the legal entity that the activity is used for.
    /// </returns>
    protected CompanyId getCompanyContextNoThrow()
    {
        switch (this.EntityType)
        {
            case WrkCtrActivityType::PCRouteOperation:
                WrkCtrPCRouteOperationActivity  wrkCtrPCRouteOperationActivity;
                PCTemplateComponent             pcTemplateComponent;
                CompanyInfo                     companyInfo;

                select firstonly DataArea from companyInfo
                    exists join pcTemplateComponent
                        where companyInfo.RecId == pcTemplateComponent.LegalEntity
                    exists join wrkCtrPCRouteOperationActivity
                        where wrkCtrPCRouteOperationActivity.TemplateComponent  == pcTemplateComponent.RecId
                           && wrkCtrPCRouteOperationActivity.Activity           == this.RecId;

                return companyInfo.DataArea;

            case WrkCtrActivityType::ProdRoute:
                WrkCtrProdRouteActivity wrkCtrProdRouteActivity;

                select firstonly RouteDataAreaId from wrkCtrProdRouteActivity
                    where wrkCtrProdRouteActivity.Activity == this.RecId;

                return wrkCtrProdRouteActivity.RouteDataAreaId;

            case WrkCtrActivityType::ProjForecastEmpl:
                WrkCtrProjForecastEmplActivity wrkCtrProjForecastEmplActivity;

                select firstonly ForecastEmplDataAreaId from wrkCtrProjForecastEmplActivity
                    where wrkCtrProjForecastEmplActivity.Activity == this.RecId;

                return wrkCtrProjForecastEmplActivity.ForecastEmplDataAreaId;

            case WrkCtrActivityType::RouteOpr:
                WrkCtrRouteOprActivity wrkCtrRouteOprActivity;

                select firstonly RouteOprDataAreaId from wrkCtrRouteOprActivity
                    where wrkCtrRouteOprActivity.Activity == this.RecId;

                return wrkCtrRouteOprActivity.RouteOprDataAreaId;

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                
                if (result.hasResult())
                {
                    return result.result();
                }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>WrkCtrActivity</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The ID of the activity record.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>WrkCtrActivity</c> table; otherwise, an empty record.
    /// </returns>
    static WrkCtrActivity find(RecId     _recId,
                               boolean   _forUpdate = false)
    {
        WrkCtrActivity   wrkCtrActivity;

        wrkCtrActivity.selectForUpdate(_forUpdate);

        if (_recId)
        {
            select firstonly wrkCtrActivity
                where wrkCtrActivity.RecId == _recId;
        }

        return wrkCtrActivity;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WrkCtr</ConfigurationKey>
	<DeveloperDocumentation>@SYS134889</DeveloperDocumentation>
	<FormRef>RouteOpr</FormRef>
	<Label>@SYS1695</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>EntityType</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>MasterPlanning</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>WrkCtrActivityRequirementSet</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WrkCtrActivityRequirementSet</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EntityType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EntityType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EntityType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>WrkCtrActivityType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>