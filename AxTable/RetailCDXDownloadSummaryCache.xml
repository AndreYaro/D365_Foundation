<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXDownloadSummaryCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailCDXDownloadSummaryCache</c> table is used as a cache, to save summarized CDX download session report. This data is used by charts in RetailIT workspace.
/// </summary>
public class RetailCDXDownloadSummaryCache extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateCDXSessionsSummaryData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds an aggregated summary of the download sessions history.
    /// </summary>
    /// <param name = "dataGroupRecId"> Reference to record ID of CDX data group.</param>
    /// <param name = "_contextId"> Reference to the cache context Id.</param>
    public static void populateCDXSessionsSummaryData(RetailCDXDataGroupRefRecId dataGroupRecId, SysDataCacheContextId _contextId)
    {
        RetailCDXDownloadSummaryCache retailCDXDownloadSessionsSummary;
        RetailCDXDownloadSession downloadSession;
        RetailCDXDownloadSessionDataStore downloadSessionDataStore;

        int LOOK_BACK_PERIOD_IN_DAYS = -6;
        utcdatetime startofDay = RetailCDXDownloadSummaryCache::getStartOfDate();

        delete_from retailCDXDownloadSessionsSummary where retailCDXDownloadSessionsSummary.DatagroupRecId == dataGroupRecId;

        // build a summary of the download session filesize and status for the past seven days.
        for (int i = LOOK_BACK_PERIOD_IN_DAYS; i <= 0; i++)
        {
            int64 fileSizeSum, totalSessionCount = 0;

            while select count(RecId), Status from downloadSessionDataStore
                group by downloadSessionDataStore.Status
                join sum(FileSize) from downloadSession
                    where downloadSession.CreatedDateTime >= DateTimeUtil::addDays(startofDay, i) &&
                        downloadSession.CreatedDateTime <= DateTimeUtil::addDays(startofDay, i+1) &&
                        downloadSession.RecId == downloadSessionDataStore.Session &&
                        downloadSessionDataStore.Status != RetailCDXDownloadSessionStatus::Canceled && // Filtering out cancelled sessions as it is not actionable.
                        (dataGroupRecId == 0 || downloadSession.DataGroup == dataGroupRecId) // if dataGroupRecId is 0 (i.e. if the data group filter value that came from the RetailITWorkspace is empty)
                                                                                             //the summary will be aggregated accross all datagroups otherwise summary will be aggregated per data group.
            {
                fileSizeSum += downloadSession.FileSize;
                totalSessionCount += downloadSession.RecId;

                switch (downloadSessionDataStore.Status)
                {
                    case RetailCDXDownloadSessionStatus::ApplyFailed:
                    case RetailCDXDownloadSessionStatus::CreateFailed:
                    case RetailCDXDownloadSessionStatus::DownloadFailed:
                        retailCDXDownloadSessionsSummary.FailedJobsCount += downloadSessionDataStore.RecId;
                        break;
                    case RetailCDXDownloadSessionStatus::Available:
                    case RetailCDXDownloadSessionStatus::Downloaded:
                    case RetailCDXDownloadSessionStatus::Requested:
                    case RetailCDXDownloadSessionStatus::Started:
                        retailCDXDownloadSessionsSummary.InprogressSessions += downloadSessionDataStore.RecId;
                        break;
                    case RetailCDXDownloadSessionStatus::Applied:
                    case RetailCDXDownloadSessionStatus::NoData:
                        retailCDXDownloadSessionsSummary.PassedJobsCount += downloadSessionDataStore.RecId;
                        break;
                }
            }

            retailCDXDownloadSessionsSummary.RunDate = DateTimeUtil::addDays(startofDay, i);
            retailCDXDownloadSessionsSummary.FileSize = fileSizeSum;
            retailCDXDownloadSessionsSummary.SysDataCacheContextId = _contextId;
            retailCDXDownloadSessionsSummary.DatagroupRecId = dataGroupRecId;
            retailCDXDownloadSessionsSummary.insert();

            // Clear the instance for the next record insertion
            retailCDXDownloadSessionsSummary.clear();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStartOfDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the begining of the current date time for filter.
    /// </summary>
    static utcdatetime getStartOfDate()
    {
        utcdatetime currentDate;
        currentDate = DateTimeUtil::utcNow();

        currentDate = DateTimeUtil::addMinutes(currentDate, -1 * DateTimeUtil::minute(currentDate));
        currentDate = DateTimeUtil::addHours(currentDate, -1 * DateTimeUtil::hour(currentDate));
        currentDate = DateTimeUtil::addSeconds(currentDate, -1 * DateTimeUtil::second(currentDate));

        return currentDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Modules>NotApplicable</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PassedJobsCount</Name>
			<AssetClassification>Customer Content</AssetClassification>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FailedJobsCount</Name>
			<AssetClassification>Customer Content</AssetClassification>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>RunDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FileSize</Name>
			<AssetClassification>Customer Content</AssetClassification>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InprogressSessions</Name>
			<AssetClassification>Customer Content</AssetClassification>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SysDataCacheContextId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysDataCacheContextId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DatagroupRecId</Name>
			<AssetClassification>Customer Content</AssetClassification>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings>
		<AxTableMapping>
			<MappingTable>SysDataSetCacheTableMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Id</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SysDataCacheContextId</MapField>
					<MapFieldTo>SysDataCacheContextId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailCDXDataGroup</Name>
			<RelatedTable>RetailCDXDataGroup</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DatagroupRecId</Name>
					<Field>DatagroupRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>