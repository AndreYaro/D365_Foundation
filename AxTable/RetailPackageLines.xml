<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPackageLines</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailPackageLines extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkItemDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether item dimensions are valid.
    /// </summary>
    /// <returns>
    /// true if all dimensions are valid; otherwise, false.
    /// </returns>
    public boolean checkItemDim()
    {
        boolean ok;

        ok = InventTable::checkConfig(this.ItemId,this.inventDim().ConfigId);
        ok = ok && InventTable::checkSize(this.ItemId,this.inventDim().InventSizeId);
        ok = ok && InventTable::checkColor(this.ItemId,this.inventDim().InventColorId);
        ok = ok && InventTable::checkStyle(this.ItemId,this.inventDim().InventStyleId);
        ok = ok && InventTable::checkProductVersion(this.ItemId,this.inventDim().InventVersionId);
        ok = ok && this.inventDim().validateWriteInventDimCombination(this.ItemId);

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromTmpInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in <c>RetailPackageLines</c> table from the temporary item table.
    /// </summary>
    /// <param name="_packageId">
    /// Identification of the package.
    /// </param>
    /// <param name="_tmpInventTable">
    /// An instance of <c>TmpInventTable</c> table.
    /// </param>
    /// <param name="_productsToAdd">
    /// An instance of <c>RetailCreateLinesFromProductsToAdd</c> class.
    /// </param>
    public void createFromTmpInventTable(RetailPackageId _packageId,
        TmpRetailProductsToAdd _tmpInventTable,
        RetailCreateLinesFromProductsToAdd _productsToAdd = null)
    {
        int64               lineRecId;
        MapIterator         mapLinesIterator;
        RetailPackageLines  tmpPackageLines;
        Set lineSet = new Set(Types::Int64);
        Map mapLines;

        if (_productsToAdd)
        {
            mapLines = _productsToAdd.mapLines(); //retrieves all the loaded lines to Add product
        }

        ttsBegin;
        while select _tmpInventTable
        {
            try
            {
                if (mapLines && mapLines.exists(_tmpInventTable.RecId)) //check wheather the line already exists on Add product
                {
                    lineRecID = mapLines.lookup(_tmpInventTable.RecId); //find purchLine record ID through keyvalue.

                    select forUpdate tmpPackageLines
                        where tmpPackageLines.RecId == lineRecId;

                    if (tmpPackageLines.RecId &&
                        (tmpPackageLines.InventDimId != _tmpInventTable.InventDim || tmpPackageLines.Qty != _tmpInventTable.Quantity))
                    {
                        if (tmpPackageLines.validateWrite())
                        {
                            tmpPackageLines.InventDimId = _tmpInventTable.InventDim;
                            tmpPackageLines.Qty = _tmpInventTable.Quantity;
                            tmpPackageLines.update();
                        }
                        else
                        {
                            error("@RET490477") ;
                        }
                    }
                    lineSet.add(tmpPackageLines.RecId);
                }
                else
                {
                    this.clear();
                    this.PackageId                  = _packageId;
                    this.ItemId                     = InventTable::findByProduct(_tmpInventTable.EcoResProduct).ItemId;
                    this.InventDimId                = _tmpInventTable.InventDim;
                    this.Qty                        = _tmpInventTable.Quantity;
                    this.itemIdChanged();
                    if (this.validateWrite())
                    {
                        this.insert();
                    }

                    _tmpInventTable.delete();
                    lineSet.add(this.RecId);
                }
            }
            catch (Exception::Error)
            {
                lineSet.add(this.RecId);
                checkFailed("@SYS18447");
            }
        }

        if (mapLines)
        {
            // add lines which are selected on the Add product form .
            mapLinesIterator = new MapIterator(mapLines);

            while (mapLinesIterator.more())
            {
                try
                {
                    if (!lineSet.in(mapLinesIterator.value()))
                    {
                        select forupdate tmpPackageLines
                            where tmpPackageLines.RecId == mapLinesIterator.value();

                        setPrefix(strFmt("@SYS24300", tmpPackageLines.ItemId));

                        if (tmpPackageLines.validateDelete())
                        {
                            tmpPackageLines.delete();
                        }
                        else
                        {
                            throw error("@RET490478");
                        }
                    }
                }
                catch (Exception::Error)
                {
                    checkFailed("@SYS18447");
                }
                mapLinesIterator.next();
            }
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultNonEmptyProductDimension</Name>
				<Source><![CDATA[
    private void defaultNonEmptyProductDimension(InventDim _target, InventTable _inventTable)
    {
        Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (enum.moveNext())
        {
            InventProductDimension productDim = enum.current() as InventProductDimension;
            FieldId fieldId = productDim.parmInventDimFieldId();
            if (!_target.(fieldId))
            {
                _target.(fieldId) = productDim.parmDefaultValueForItem(_inventTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the inventory dimension values from the items table.
    /// </summary>
    /// <param name="inventTable">
    /// An instance of the <c>InventTable</c> table.
    /// </param>
    public void initFromInventTable(InventTable inventTable)
    {
        InventDim           inventDim = this.inventDim();
        InventTableModule   inventTableModule = InventTableModule::find(this.ItemId, ModuleInventPurchSales::Purch);

        RetailTracer::Info('Replenishment', funcName(), 'Initialising dimension values for the package from item %1.', inventTable.itemId);

        inventDim.InventLocationId  = inventTable.purchInventLocationId(inventDim.InventLocationId);
        inventDim.InventSiteId      = InventLocation::find(inventDim.InventLocationId).InventSiteId;

        this.defaultNonEmptyProductDimension(inventDim, inventTable);        

        this.InventDimId            = InventDim::findOrCreate(inventDim).InventDimId;

        this.Qty                    = this.Qty
                                    ? this.Qty
                                    : inventTable.purchStandardQty();

        this.PurchUnit              = inventTableModule.UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>InventDim</c> table.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InventDim</c> table; otherwise, an empty record.
    /// </returns>
    public InventDim inventDim(boolean _forUpdate = false)
    {
        return InventDim::find(this.InventDimId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>InventTable</c> table.
    /// </summary>
    /// <param name="itemId">
    /// The ID number of the item.
    /// </param>
    /// <param name="update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InventTable</c> table; otherwise, an empty record.
    /// </returns>
    public InventTable inventTable(ItemId     itemId = this.ItemId,
                            boolean    update = false)
    {
        return InventTable::find(itemId, update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemIdChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the inventory dimension values from the items table.
    /// </summary>
    public void itemIdChanged()
    {
        this.initFromInventTable(this.inventTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the item.
    /// </summary>
    /// <returns>
    /// The item name.
    /// </returns>
    display ItemNameDisplay itemName()
    {
        return InventTable::find(this.ItemId).itemName(this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemNameGrid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the item.
    /// </summary>
    /// <returns>
    /// The item name.
    /// </returns>
    display ItemNameDisplayGrid itemNameGrid()
    {
        return this.itemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        ;
        if (! super())
            return false;

        if (! this.checkItemDim())
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailPackageLines</c> table.
    /// </summary>
    /// <param name="_packageId">
    /// The ID number of the package.
    /// </param>
    /// <param name="_itemId">
    /// The ID number of the item.
    /// </param>
    /// <param name="_inventDimId">
    /// The ID number of the dimensions for the item.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailPackageLines</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailPackageLines find(RetailPackageId _packageId,
                                       ItemId       _itemId,
                                       InventDimId  _inventDimId,
                                       boolean _forUpdate = false)
    {
        RetailPackageLines  packageLines;
        InventDim inventDim, productInventDim;

        // Find the invent dim id which uses only product dimensions
        inventDim = inventDim::find(_inventDimId);
        productInventDim.initFromInventDim(inventDim, InventDimMetaDataCache::dimProductDimEnabledFieldList());
        productInventDim = inventDim::findDim(productInventDim);

        if (_packageId && _itemId && productInventDim)
        {
            packageLines.selectForUpdate(_forUpdate);

            select firstonly packageLines
                index hint LineIdx
                where packageLines.PackageId   == _packageId &&
                      packageLines.ItemId      == _itemId    &&
                      packageLines.InventDimId == productInventDim.inventDimId;
        }

        return packageLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustEnableDimField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified dimension setup is valid and active for package line.
    /// </summary>
    /// <param name="inventDimGroupFieldSetup">
    /// An instance of the <c>InventDimGroupFieldSetup</c> class.
    /// </param>
    /// <param name="dimFieldId">
    /// Specifies a dimension field ID for which record is to be found.
    /// </param>
    /// <returns>
    /// true if the dimension is valid and active; otherwise, false.
    /// </returns>
    public static NoYes mustEnableDimField(InventDimGroupFieldSetup  inventDimGroupFieldSetup, fieldId  dimFieldId)
    {
        if (!dimFieldId)
        {
            return NoYes::No;
        }

        if (!inventDimGroupFieldSetup.isActive()
            || !inventDimGroupFieldSetup.isProductDimension()
            || !inventDimGroupFieldSetup.isPrimaryStockingEnabled())
        {
            return NoYes::No;
        }

        return NoYes::Yes;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET260581</DeveloperDocumentation>
	<Label>@RET4398</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>PackageId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>LineIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Merchandising</Modules>
	<PrimaryIndex>LineIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PackageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VariantId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PackageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Information</Name>
			<Label>@SYS60385</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VariantId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PackageId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailPackageId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchUnit</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchUnit</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VariantId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailVariantId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PackageId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PurchUnit</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventDimCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDimCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VariantId</Name>
					<SourceEDT>RetailVariantId</SourceEDT>
					<Field>VariantId</Field>
					<RelatedField>RetailVariantId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailPackageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailPackageTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PackageId</Name>
					<SourceEDT>RetailPackageId</SourceEDT>
					<Field>PackageId</Field>
					<RelatedField>PackageId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PackageIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchUnit</Name>
					<Field>PurchUnit</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>