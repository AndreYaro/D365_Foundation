<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventModelGroupItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
#ISOCountryRegionCodes
public class InventModelGroupItem extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>inventoriedPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>InventTableInventoriedPolicy</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>InventTableInventoriedPolicy</c> class.
    /// </returns>
    public InventTableInventoriedPolicy inventoriedPolicy()
    {
        return InventTableInventoriedPolicy::newInventModelGroupItem(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventoriedPolicyNoThrow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>InventTableInventoriedPolicy</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>InventTableInventoriedPolicy</c> class.
    /// </returns>
    private InventTableInventoriedPolicy inventoriedPolicyNoThrow()
    {
        //we create inventoriedPolicy instance here instead of calling InventTableInventoriedPolicy::newInventModelGroupItem
        //because we want to control behavior of modelGroup method -> we don't want it to throw exception if no model group assigned
        InventTableInventoriedPolicy    inventTableInventoriedPolicy;

        inventTableInventoriedPolicy = InventTableInventoriedPolicy::construct();
        inventTableInventoriedPolicy.parmInventModelGroupItem(this);
        inventTableInventoriedPolicy.parmInventModelGroup(this.modelGroupNoThrow());
        inventTableInventoriedPolicy.parmProductRecId(InventTable::itemProduct(this.ItemId));
        inventTableInventoriedPolicy.parmItemId(this.ItemId);

        return inventTableInventoriedPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modelGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an item model group for an item.
    /// </summary>
    /// <returns>
    ///    An item model group.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The specified item has no item model group assigned.
    /// </exception>
    public InventModelGroup modelGroup()
    {
        if (this.ModelGroupId == '')
        {
            throw error(strFmt("@SYS313291", fieldPName(InventModelGroupItem, ModelGroupId)));
        }

        return this.modelGroupNoThrow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modelGroupNoThrow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an item model group for an item.
    /// </summary>
    /// <returns>
    ///    An item model group.
    /// </returns>
    public InventModelGroup modelGroupNoThrow()
    {
        InventModelGroup inventModelGroup;

        if (this.ModelGroupId == '')
        {
            return inventModelGroup;
        }

        select firstonly crosscompany inventModelGroup
            where inventModelGroup.ModelGroupId == this.ModelGroupId
               && inventModelGroup.DataAreaId   == this.ModelGroupDataAreaId;

        // It is possible that the record has not been found because of the behavior of crosscompany queries with regard to
        // restricted user rights in some companies. In this case we will try to query the table without crosscompany
        // keyword but within the desired company context.
        if (inventModelGroup.RecId == 0)
        {
            changecompany (xDataArea::findNonVirtualCompany(this.ModelGroupDataAreaId))
            {
                inventModelGroup = null;

                select firstonly inventModelGroup
                    where inventModelGroup.ModelGroupId == this.ModelGroupId;
            }
        }

        return inventModelGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret = super(_fieldName, _arrayIndex);

        //perform validation only if changing real record (not template)
        //we cannot validate when template because we need real InventTable record to do that
        if (!SysRecordTemplate::isTemplateEditFormRecord(this))
        {
            switch (_fieldName)
            {
                case fieldStr(InventModelGroupItem, ModelGroupId):

                    if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
                    {
                        if (RetailKit::existByProductMaster(InventTable::find(this.ItemId).Product) && !InventModelGroup::find(this.ModelGroupId).StockedProduct)
                        {
                            // 'Non stock inventory model group can not be assigned to a kit product'
                            ret = checkFailed("@REX4520658");
                        }
                    }

                    ret = ret && this.inventoriedPolicyNoThrow().validateFieldValue(_fieldName, _arrayIndex);

                    break;
            }

            ret = ret && this.modelGroupNoThrow().inventModelType().validateFieldInventModelGroupItem(this, _fieldName, _arrayIndex);

            ret = ret && this.validateCrossCompany(tableMethodStr(InventModelGroupItem, validateFieldValue), _fieldName, _arrayIndex);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCrossCompany</Name>
				<Source><![CDATA[
    private boolean validateCrossCompany(str _methodName, FieldName _fieldName = '', int _arrayIndex = 1)
    {
        boolean ret = true;
        if (InventTableDataSharingFeature::isEnabled())
        {
            InventTable inventTable = InventTable::find(this.ItemId);
            DataAreaId dataAreaId = curExt();
            SysDataSharingPolicy policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(curExt(), tableId2name(inventTable.TableId));
            if (policy.RecId && policy.IsEnabled)
            {
                Query       query = SysDataSharingCrossCompanyValidatorQueryBuilder::buildQuery(inventTable, policy.RecId);
                QueryRun    queryRun = new QueryRun(query);
        
                while (queryRun.Next())
                {
                    InventTable companyInventTable = queryRun.get(inventTable.TableId);
                    DataAreaId company = companyInventTable.DataAreaId;

                    if (companyInventTable && company && company != curExt())
                    {
                        changecompany(company)
                        {
                            InventModelGroupItem inventModelGroupItem = InventModelGroupItem::findByItemIdLegalEntity(companyInventTable.ItemId, company);
                            if (inventModelGroupItem.RecId)
                            {
                                buf2Buf(this, inventModelGroupItem);
                                inventModelGroupItem.ItemDataAreaId = company;
                                inventModelGroupItem.ModelGroupDataAreaId = company;

                                switch (_methodName)
                                {
                                    case tableMethodStr(InventModelGroupItem, validateFieldValue):
                                        if (_fieldName == fieldStr(InventModelGroupItem, ModelGroupId) 
                                            && !inventModelGroupItem.inventoriedPolicyNoThrow().validateFieldValue(_fieldName, _arrayIndex))
                                        {
                                            return false;
                                        }

                                        if (!inventModelGroupItem.modelGroupNoThrow().inventModelType().validateFieldInventModelGroupItem(inventModelGroupItem, _fieldName, _arrayIndex))
                                        {
                                            return false;
                                        }
                                        break;
                                    case tableMethodStr(InventModelGroupItem, validateWrite):
                                        if (!inventModelGroupItem.modelGroupNoThrow().inventModelType().validateWriteInventModelGroupItem(inventModelGroupItem))
                                        {
                                            return false;
                                        }

                                        break;
                                    
                                    default:
                                        return true;
                                }
                            }
                        }
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        InventModelGroup modelGroup;
        boolean ret = super();
        if (ret)
        {
            modelGroup = this.modelGroupNoThrow();
        }

        //perform validation only if changing real record (not template)
        //we cannot validate when template because we need real InventTable record to do that
        if (modelGroup && !SysRecordTemplate::isTemplateEditFormRecord(this))
        {
            InventTable inventTable = InventTable::find(this.ItemId);

            // Note that the standard pdsIsCWItem method should NOT be used here, since that relies on data that might not have been created yet
            // Instead the PdsCWProduct field must be read directly from the Product
            if (ret
                && EcoResProduct::find(inventTable.Product).PdsCWProduct
                && !modelGroup.isStocked())
            {
                ret = checkFailed("@PDS1441");
            }

            InventModelType inventModelType = modelGroup.inventModelType();

            if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) 
                && inventTable.isItemInventoryOwnerActivated()
                && !inventModelType.isInventoryOwnerAllowed())
            {
                ret = checkFailed("@Consignment:MessageValidation_ItemModelGroupId");
            }

            ret = ret && inventModelType.validateWriteInventModelGroupItem(this);

            if (ret && WHSInventEnabled::exist(this.ItemId))
            {
                if (modelGroup.ReserveByDate)
                {
                    ret = checkFailed("@WAX5372");
                }

                if (ret && !modelGroup.isStocked())
                {
                    ret = checkFailed("@WAX5667");
                }

                // Display a warning if two vendor approval methods are enabled for a single released product.
                if (ret
                &&  this.orig().ModelGroupId                    != this.ModelGroupId
                    &&  modelGroup.PdsVendorCheckItem           != PdsVendorCheckItem::NoCheck
                &&  WHSParameters::find().EnableVendFilters     == NoYes::Yes)
                {
                    warning("@WAX5492");
                }
            }

            if (modelGroup.NegativePhysical
                && WHSCatchWeightHelper::isCatchWeightProduct(inventTable.Product)
                && EcoResStorageDimensionGroup::find(EcoResStorageDimensionGroupItem::findByItem(inventTable.DataAreaId, inventTable.ItemId).StorageDimensionGroup).IsWarehouseWHSEnabled)
            {
                // If the item is catch weight enabled and its storage dimension group is warehousing enabled, physical negative inventory cannot be enabled.
                ret = checkFailed("@WAX:Error_NegativeInventoryNotAllowedForWHSCWItems");
            }

            ret = ret && this.validateCrossCompany(tableMethodStr(InventModelGroupItem, validateWrite));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByItemIdLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an <c>InventModelGroupItem</c> record.
    /// </summary>
    /// <param name="_itemId">
    /// An item ID.
    /// </param>
    /// <param name="_itemDataAreaId">
    /// A company ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// An <c>InventModelGroupItem</c> record.
    /// </returns>
    public static InventModelGroupItem findByItemIdLegalEntity(ItemId _itemId, DataAreaId _itemDataAreaId = curExt2dataareaid(tableNum(InventTable)), boolean _forUpdate = false)
    {
        InventModelGroupItem inventModelGroupItem;

        inventModelGroupItem.selectForUpdate(_forUpdate);

        select firstonly inventModelGroupItem
            where inventModelGroupItem.ItemId           == _itemId
               && inventModelGroupItem.ItemDataAreaId   == _itemDataAreaId;

        return inventModelGroupItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modelGroupByItemIdLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an item model group for an item.
    /// </summary>
    /// <param name="_itemId">
    /// An item ID.
    /// </param>
    /// <param name="_itemDataAreaId">
    /// A company ID.
    /// </param>
    /// <returns>
    /// An item model group.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The specified item has no item model group assigned to it.
    /// </exception>
    public static InventModelGroup modelGroupByItemIdLegalEntity(ItemId _itemId, DataAreaId _itemDataAreaId = curExt2dataareaid(tableNum(InventTable)))
    {
        InventModelGroup inventModelGroup;
        InventModelGroupItem inventModelGroupItem;

        if (_itemId)
        {
            inventModelGroupItem = InventModelGroupItem::findByItemIdLegalEntity(_itemId, _itemDataAreaId);

            if (!inventModelGroupItem.ModelGroupId && isConfigurationkeyEnabled(configurationKeyNum(Retail)))
            {
                throw error(strFmt("@RET260824", fieldPName(InventModelGroupItem, ModelGroupId), _itemId));
            }

            inventModelGroup = inventModelGroupItem.modelGroup();
        }
        return inventModelGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modelGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an item model group ID for an item.
    /// </summary>
    /// <param name="_itemId">
    ///    An item ID.
    /// </param>
    /// <param name="_dataAreaId">
    ///    A company ID.
    /// </param>
    /// <returns>
    ///    An item model group ID.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The specified item has no item model group assigned.
    /// </exception>
    public static InventModelGroupId modelGroupId(ItemId _itemId, DataAreaId _dataAreaId)
    {
        InventModelGroupItem inventModelGroupItem;

        if (_itemId)
        {
            select firstonly ModelGroupId from inventModelGroupItem
                where   inventModelGroupItem.ItemId         == _itemId
                    &&  inventModelGroupItem.ItemDataAreaId == _dataAreaId;

            if (inventModelGroupItem.ModelGroupId == '')
            {
                throw error(strFmt("@SYS313291", fieldPName(InventModelGroupItem, ModelGroupId)));
            }
        }

        return inventModelGroupItem.ModelGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateModelGroupForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns item model group to an item.
    /// </summary>
    /// <param name="_itemId">
    /// An item ID.
    /// </param>
    /// <param name="_itemDataAreaId">
    /// An item company ID.
    /// </param>
    /// <param name="_modelGroupId">
    /// An item model group ID.
    /// </param>
    /// <param name="_modelGroupDataAreaId">
    /// An item model group company ID.
    /// </param>
    public static void updateModelGroupForItem(
        ItemId              _itemId,
        DataAreaId          _itemDataAreaId,
        InventModelGroupId  _modelGroupId,
        DataAreaId          _modelGroupDataAreaId)
    {
        InventModelGroupItem    modelGroupItem;

        ttsbegin;
        modelGroupItem  = InventModelGroupItem::findByItemIdLegalEntity(_itemId, _itemDataAreaId, true);

        if (!modelGroupItem.RecId)
        {
            modelGroupItem.ItemId           = _itemId;
            modelGroupItem.ItemDataAreaId   = _itemDataAreaId;
        }
        modelGroupItem.ModelGroupId         = _modelGroupId;
        modelGroupItem.ModelGroupDataAreaId = _modelGroupDataAreaId;
        modelGroupItem.write();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStandardCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the item is standard cost based.
    /// </summary>
    /// <param name="_itemId">
    ///     An item ID.
    /// </param>
    /// <returns>True if item is standard cost based; otherwise, false.</returns>
    public static boolean isStandardCost(ItemId _itemId)
    {
        var inventModelGroupItem = InventModelGroupItem::findByItemIdLegalEntity(_itemId);
        return inventModelGroupItem.ModelGroupId
            && inventModelGroupItem.modelGroup().InventModel == InventModel::StdCost;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS313292</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<FormRef>EcoResProductDetailsExtended</FormRef>
	<Label>@SYS322103</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemDataAreaId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ItemIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<ReplacementKey>ItemIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModelGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModelGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModelGroupDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS343731</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ModelGroupDataAreaId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<Label>@SYS343735</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ModelGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventModelGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemDataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemModelGroupIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ModelGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ModelGroupDataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemDataAreaIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ModelGroupId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventModelGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventModelGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventModelGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventModelGroup_InventModelGroupItem</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ModelGroupDataAreaId</Name>
					<Field>ModelGroupDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ModelGroupId</Name>
					<Field>ModelGroupId</Field>
					<RelatedField>ModelGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventTable</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>InventTable_InventModelGroupItem</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemDataAreaId</Name>
					<Field>ItemDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTableExpanded</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventTableExpanded</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemDataAreaId</Name>
					<Field>ItemDataAreaId</Field>
					<RelatedField>DataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventItemIdLookupSimpleView</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventItemIdLookupSimpleView</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemDataAreaId</Name>
					<Field>ItemDataAreaId</Field>
					<RelatedField>DataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>