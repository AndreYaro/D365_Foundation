<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanningStage</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetPlanningStage extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        public void delete()
    {
        BudgetPlanningStageTranslation::deleteForBudgetPlanningStage(this.RecId);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBudgetPlanningStageName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the budget planning stage name.
    /// </summary>
    /// <returns>
    /// The budget planning stage name to display.
    /// </returns>
    public display BudgetPlanningStageName displayBudgetPlanningStageName()
    {
        return BudgetPlanningStageTranslation::getLocalizedName(this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in the <c>BudgetPlanningStage</c> table.
    /// </summary>
    /// <param name="_description">
    /// The description for the budget planning stage; optional.
    /// </param>
    public void insert(Description _description = '')
    {
        super();

        // Create translation information
        BudgetPlanningStageTranslation::createOrUpdateTranslation(this.RecId, this.Name, this.Description);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
        public void update()
    {
        super();

        // Update translation information
        BudgetPlanningStageTranslation::createOrUpdateTranslation(this.RecId, this.Name, this.Description);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
        public boolean validateDelete()
    {
        boolean                     isValid;
        BudgetPlanningWorkflowStage budgetPlanningWorkflowStage;

        isValid = super();

        if (isValid && this.RecId)
        {
            select firstOnly RecId from budgetPlanningWorkflowStage
                    where budgetPlanningWorkflowStage.BudgetPlanningStage == this.RecId;

            if (budgetPlanningWorkflowStage)
            {
                //Validating if the budget planning stage is being referenced on budget planning workflow table.
                isValid = checkFailed(
                            strFmt("@GLS70641",
                            BudgetPlanningWorkflowTranslation::getLocalizedName(
                                                    budgetPlanningWorkflowStage.BudgetPlanningWorkflow
                                                    )));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(FieldId _fieldIdToCheck)
    {
        System.Text.RegularExpressions.Match regExMatch;
        boolean                              isValid;

        isValid = super(_fieldIdToCheck);

        if (isValid)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(BudgetPlanningStage, Name) :
                    // Verify that Name doesn't contain bad special character like <>:"/\|?*
                    // other characters used in the regular expression are part of regex syntax.
                    regExMatch = System.Text.RegularExpressions.Regex::Match(this.Name, @'^[^<>:"/\\|?*]*$');

                    if (!regExMatch.get_Success())
                    {
                        isValid = checkFailed("@GLS150007");
                    }
                    break;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>BudgetPlanStage</c> table; if not,
    /// an error message is displayed.
    /// </summary>
    /// <param name="_budgetPlanningStageRecId">
    /// The record ID of the <c>BudgetPlanStage</c> record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(BudgetPlanningStageRecId _budgetPlanningStageRecId)
    {
        boolean isExisting = true;

        if (!BudgetPlanningStage::exist(_budgetPlanningStageRecId))
        {
            isExisting = checkFailed(strFmt(BudgetPlanningStage::txtNotExist(), _budgetPlanningStageRecId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified record exists in the <c>BudgetPlanningStage</c> table.
    /// </summary>
    /// <param name="_budgetPlanningStageRecId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false .
    /// </returns>
    public static boolean exist(BudgetPlanningStageRecId _budgetPlanningStageRecId)
    {
        return (BudgetPlanningStage::find(_budgetPlanningStageRecId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BudgetPlanningStage</c> table.
    /// </summary>
    /// <param name="_budgetPlanningStageRecId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanningStage</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanningStage find(
        BudgetPlanningStageRecId _budgetPlanningStageRecId,
        boolean                  _forupdate = false,
        ConcurrencyModel         _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanningStage budgetPlanningStage;

        budgetPlanningStage.selectForUpdate(_forupdate);

        if (_budgetPlanningStageRecId)
        {
            if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanningStage.concurrencyModel(_concurrencyModel);
            }

             select firstonly budgetPlanningStage
                where budgetPlanningStage.RecId == _budgetPlanningStageRecId;
        }

        return budgetPlanningStage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BudgetPlanningStage</c> table.
    /// </summary>
    /// <param name="_budgetPlanningStageName">
    /// The name of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanningStage</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanningStage findByName(
        BudgetPlanningStageName _budgetPlanningStageName,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanningStage budgetPlanningStage;

        if (_budgetPlanningStageName)
        {
            budgetPlanningStage.selectForUpdate(_forupdate);

            if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanningStage.concurrencyModel(_concurrencyModel);
            }

             select firstonly budgetPlanningStage
                where budgetPlanningStage.Name == _budgetPlanningStageName;
        }

        return budgetPlanningStage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@GLS70200</DeveloperDocumentation>
	<FormRef>BudgetPlanningConfigurationStage</FormRef>
	<Label>@GLS70199</Label>
	<SingularLabel>@GLS70078</SingularLabel>
	<TableGroup>Group</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>Budget</Modules>
	<ReplacementKey>NameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>BudgetPlanHeader</Name>
			<DeleteAction>CascadeRestricted</DeleteAction>
			<Relation></Relation>
			<Table>BudgetPlanHeader</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS55776</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanningStageDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanningStageName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>