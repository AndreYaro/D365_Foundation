<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEInvoiceAggregatedStatement_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailEInvoiceAggregatedStatement_MX extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailEInvoiceAggregatedStatement_MX</c> table.
    /// </summary>
    /// <param name="_aggregatedStatementId">
    /// The  aggregated statement id to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailEInvoiceAggregatedStatement_MX</c> table; otherwise, an empty record.
    /// </returns>
    internal static RetailEInvoiceAggregatedStatement_MX find(RetailEInvoiceAggregatedStatementId_MX _aggregatedStatementId, boolean _forUpdate = false)
    {
        RetailEInvoiceAggregatedStatement_MX aggregatedStatement;

        if (_aggregatedStatementId)
        {
            aggregatedStatement.selectForUpdate(_forUpdate);

            select firstonly aggregatedStatement
                where aggregatedStatement.AggregatedStatementId == _aggregatedStatementId;
        }

        return aggregatedStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailEInvoiceAggregatedStatement_MX</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record Id of the aggregated statement journal to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailEInvoiceAggregatedStatement_MX</c> table; otherwise, an empty record.
    /// </returns>
    internal static RetailEInvoiceAggregatedStatement_MX findRecId(RecId _recId, boolean _forUpdate = false)
    {
        RetailEInvoiceAggregatedStatement_MX aggregatedStatement;

        if (_recId)
        {
            aggregatedStatement.selectForUpdate(_forUpdate);

            select firstonly aggregatedStatement
                where aggregatedStatement.RecId == _recId;
        }

        return aggregatedStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePeriodOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates period overlap.
    /// </summary>
    /// <param name = "_period">
    /// The period.
    /// </param>
    /// <param name = "_baseDate">
    /// The base date.
    /// </param>
    /// <returns>
    /// true if no overlapping; otherwise, false.
    /// </returns>
    internal static boolean validatePeriodOverlap(RetailEInvoicePeriod_MX _period, Date _baseDate)
    {
        RetailEInvoicePeriodDatesCalculator_MX periodDatesCalculator = RetailEInvoicePeriodDatesCalculator_MX::calculate(_period, _baseDate);
        RetailEInvoiceAggregatedStatement_MX aggregatedStatement;

        select firstonly RecId from aggregatedStatement
            where aggregatedStatement.AggregationPeriodStart <= periodDatesCalculator.getPeriodEnd()
                && aggregatedStatement.AggregationPeriodEnd >= periodDatesCalculator.getPeriodStart();

        if (aggregatedStatement)
        {
            return checkFailed("@SYS95861");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastPostedStatementJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the last posted statement journal.
    /// </summary>
    /// <param name="_throwOnEmpty">
    /// A Boolean value that indicates whether to throw exception if there is no record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailStatementJour</c> table.
    /// </returns>
    internal RetailStatementJour getLastPostedStatementJour(boolean _throwOnEmpty = true)
    {
        RetailEInvoiceAggregatedStatementRelation_MX aggregatedStatementRelation;
        RetailStatementJour statement;

        select firstonly statement order by PostedDateTime desc
            exists join aggregatedStatementRelation
                where aggregatedStatementRelation.AggregatedStatementId == this.AggregatedStatementId
                    && aggregatedStatementRelation.StatementId == statement.statementId;

        if (_throwOnEmpty && !statement)
        {
            throw error(error::missingRecord(tablePName(RetailStatementJour)));
        }

        return statement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTotalExclPrepayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the aggregated statement sales total excluding prepayment.
    /// </summary>
    /// <param name = "_isReturn">
    /// Defines if use return amount.
    /// </param>
    /// <returns>
    /// The aggregated statement sales total excluding prepayment.
    /// </returns>
    internal RetailSalesAmount salesTotalExclPrepayment(boolean _isReturn)
    {
        RetailSalesAmount amount;
        QueryRun qr = this.getTotalsQueryRun();
        while (qr.next())
        {
            amount += qr.get(tableNum(RetailStatementJourExt)).salesTotalExclPrepayment(_isReturn);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subTotalExclPrepayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the aggregated statement sales total before discount and tax excluding prepayment.
    /// </summary>
    /// <param name = "_isReturn">
    /// Defines if use return amount.
    /// </param>
    /// <returns>
    /// The aggregated statement sales total before discount and tax excluding prepayment.
    /// </returns>
    internal RetailSalesAmount subTotalExclPrepayment(boolean _isReturn)
    {
        RetailSalesAmount amount;
        QueryRun qr = this.getTotalsQueryRun();
        while (qr.next())
        {
            amount += qr.get(tableNum(RetailStatementJourExt)).subTotalExclPrepayment(_isReturn);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discAmountExclPrepayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the aggregated statement discount excluding prepayment.
    /// </summary>
    /// <param name = "_isReturn">
    /// Defines if use return amount.
    /// </param>
    /// <returns>
    /// The aggregated statement discount excluding prepayment.
    /// </returns>
    internal RetailDiscAmount discAmountExclPrepayment(boolean _isReturn)
    {
        RetailDiscAmount amount;
        QueryRun qr = this.getTotalsQueryRun();
        while (qr.next())
        {
            amount += qr.get(tableNum(RetailStatementJourExt)).discAmountExclPrepayment(_isReturn);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discAmountWithoutTaxExclPrepayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the aggregated statement discount without tax excluding prepayment.
    /// </summary>
    /// <param name = "_isReturn">
    /// Defines if use return amount.
    /// </param>
    /// <returns>
    /// The aggregated statement discountwithout tax  excluding prepayment.
    /// </returns>
    internal RetailDiscAmount discAmountWithoutTaxExclPrepayment(boolean _isReturn)
    {
        RetailSalesAmount amount;
        QueryRun qr = this.getTotalsQueryRun();
        while (qr.next())
        {
            amount += qr.get(tableNum(RetailStatementJourExt)).discAmountWithoutTaxExclPrepayment(_isReturn);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the store with the specified store ID from the <c>RetailStoreTable</c> table.
    /// </summary>
    /// <returns>
    /// The store name.
    /// </returns>
    [SysClientCacheDataMethod]
    internal display RetailStoreName storeName()
    {
        return RetailStoreTable::find(this.StoreId).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefToStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens form with statement journals used in aggregation.
    /// </summary>
    internal void jumpRefToStatement()
    {
        Args args = new Args();
        args.record(this);

        new MenuFunction(menuitemDisplayStr(RetailStatementJour), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalsQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets query run object to count aggregated totals.
    /// </summary>
    /// <returns>The query run object.</returns>
    private QueryRun getTotalsQueryRun()
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(RetailStatementJourExt));

        qbds = qbds.addDataSource(tableNum(RetailEInvoiceAggregatedStatementRelation_MX));
        qbds.addRange(fieldNum(RetailEInvoiceAggregatedStatementRelation_MX, AggregatedStatementId)).value(this.AggregatedStatementId);
        qbds.addLink(fieldNum(RetailStatementJourExt, statementId), fieldNum(RetailEInvoiceAggregatedStatementRelation_MX, statementId));
        qbds.joinMode(JoinMode::ExistsJoin);

        return new QueryRun(query);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<CountryRegionCodes>MX</CountryRegionCodes>
	<DeveloperDocumentation>@RetailEInvoiceCFDI:AggregatedRetailStatementDevDoc</DeveloperDocumentation>
	<Label>@RetailEInvoiceCFDI:AggregatedRetailStatement</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>AggregatedStatementId</TitleField1>
	<TitleField2>StoreId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>TransactionsAndOrders</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AggregatedStatementId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS11696</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AggregatedStatementId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StoreId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AggregationPeriod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AggregatedStatementId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailEInvoiceAggregatedStatementId_MX</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StoreId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailSalesAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>PostedDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RetailStatementPostedDateTime</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AggregationPeriod</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>RetailEInvoicePeriod_MX</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PostedDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailPostedDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AggregationPeriodStart</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>PeriodStart</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AggregationPeriodEnd</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>PeriodEnd</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AggregatedStatementIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AggregatedStatementId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AggergationPeriodDatesIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AggregationPeriodStart</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AggregationPeriodEnd</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailStoreTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailStoreTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StoreId</Name>
					<SourceEDT>RetailStoreId</SourceEDT>
					<Field>StoreId</Field>
					<RelatedField>StoreNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StoreNumIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>