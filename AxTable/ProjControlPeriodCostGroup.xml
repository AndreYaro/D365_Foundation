<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjControlPeriodCostGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjControlPeriodCostGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkActual</Name>
				<Source><![CDATA[
    display ImageRes checkActual(ProjControlPeriodCostGroup _projControlPeriodCostGroup)
    {
        #resAppl

        if (_projControlPeriodCostGroup.ErrorText == '')
        {
            return #ImageOk;
        }
        else
        {
            return #ImageWarning;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCTCMethod</Name>
				<Source><![CDATA[
    boolean checkCTCMethod(ForecastModelId _modelId)
    {
        if ((this.ctcMethod == ProjControlPeriodCostGroupCTCMethod::RemainingEstimate) ||
           (this.ctcMethod == ProjControlPeriodCostGroupCTCMethod::TotBudgetMinusActual))
        {
            if (!_modelId)
            {
                return checkFailed("@SYS76154");
            }
        }

        if (this.ctcMethod == ProjControlPeriodCostGroupCTCMethod::WorkProgressPercentage)
        {
            if (!ProjControlWBS::doesWBSExistForProjTable(ProjTable::find(this.ProjId)))
            {
                return checkFailed(strFmt("@SYS4006498", this.ProjId));
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costType</Name>
				<Source><![CDATA[
    display ProjCostType costType()
    {
        return ProjControlCostGroup::find(this.ControlId, this.CostGroupId).CostType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromControlCostGroup</Name>
				<Source><![CDATA[
    public void initFromControlCostGroup(ProjControlCostGroup projControlCostGroup)
    {
        this.ControlId      = projControlCostGroup.ControlId;
        this.CostGroupId    = projControlCostGroup.CostGroupId;
        this.CompletePct    = projControlCostGroup.CompletePct;
        this.ctcMethod      = ProjControlPeriodCostGroupCTCMethod::TotalEstimate;//Total cost - Actual
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert(NoYes _recalculate = NoYes::No)
    {
        ProjControlPeriodTable   projControlPeriodTable;

        ttsbegin;

        super();

        if (_recalculate)
        {
            projControlPeriodTable = this.projControlPeriod(true);

            projControlPeriodTable.Recalculated = NoYes::Yes;

            projControlPeriodTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        ProjPeriodFrom prevPeriodFrom;
        ProjControlVersion prevVersion;
        ProjControlPeriodCostGroup prevCostGroup;
        ProjControlPeriodTable      projControlPeriodTableLocal;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ProjControlPeriodCostGroup, ctcMethod):
                switch (this.ctcMethod)
                {
                    case ProjControlPeriodCostGroupCTCMethod::TotalEstimateActual://Set cost to complete to zero
                        this.setCTCToZero();
                        break;

                    case ProjControlPeriodCostGroupCTCMethod::TotalEstimate://Total cost - Actual
                        projControlPeriodTableLocal = ProjControlPeriodTable::findLastPosted(this.ProjId, this.ControlId);
                        prevPeriodFrom = projControlPeriodTableLocal.PeriodFrom;
                        prevVersion = projControlPeriodTableLocal.Version;

                        if (prevPeriodFrom && prevVersion)
                        {
                            this.totalCostMinusActual(
                                ProjControlPeriodCostGroup::prevCostGroup(this.ProjId,
                                    this.ControlId,
                                    prevPeriodFrom,
                                    prevVersion,
                                    this.CostGroupId));
                        }
                        else //there is no previous posted transaction
                        {
                            // check if the first estimate is reversed
                            prevCostGroup=ProjControlPeriodCostGroup::prevCostGroup(this.ProjId,
                                this.ControlId,
                                this.PeriodFrom,
                                this.Version - 1,
                                this.CostGroupId);

                            if (prevCostGroup
                            && prevCostGroup.projControlPeriod().PeriodStatus ==ProjControlPeriodStatus::Reversal)
                            {
                                this.totalCostMinusActual(prevCostGroup); //copy from the reversal transaction
                            }
                        }
                        break;

                    case ProjControlPeriodCostGroupCTCMethod::RemainingEstimate://Remaining budget
                        this.remainingBudget();
                        break;

                    case ProjControlPeriodCostGroupCTCMethod::WorkProgressPercentage:
                    case ProjControlPeriodCostGroupCTCMethod::TotBudgetMinusActual://Total budget - Actual
                        this.totalBudgetMinusActual();
                        break;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>negActuelCostAmount</Name>
				<Source><![CDATA[
    display ProjActualCostAmount negActuelCostAmount()
    {
        return -this.ActuelCostAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>negActuelCostUnit</Name>
				<Source><![CDATA[
    display ProjActualCostUnit negActuelCostUnit()
    {
        return -this.ActuelCostUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodTo</Name>
				<Source><![CDATA[
    display ProjPeriodTo periodTo()
    {
        return this.projControlPeriod().PeriodTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projControlPeriod</Name>
				<Source><![CDATA[
    public ProjControlPeriodTable projControlPeriod(boolean _selectedForUpdate  = false)
    {
        return ProjControlPeriodTable::find(this.ProjId, this.ControlId, this.PeriodFrom, this.Version, _selectedForUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainingBudget</Name>
				<Source><![CDATA[
    void remainingBudget()
    {
        //Remaining budget
        this.ctcCostAmount = this.ForecastCostAmount +
                                this.CommittedCostAmount +
                                this.CommittedPeriodEndCostAmount +
                                this.ActualPeriodEndCostAmount;

        this.ctcCostUnit = this.ForecastCostUnit +
                            this.CommittedCostUnit +
                            this.CommittedPeriodEndCostUnit +
                            this.ActualPeriodEndCostUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCTCToZero</Name>
				<Source><![CDATA[
    void setCTCToZero()
    {
        //Set cost to complete to zero
        this.ctcCostAmount     = 0;
        this.ctcCostUnit       = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmount</Name>
				<Source><![CDATA[
    edit ProjControlTotalCost totalAmount(
        boolean                      _set,
        ProjControlPeriodCostGroup   _projControlPeriodCostGroup,
        AmountMST                    _amountMST)
    {
        if (_set)
        {
            _projControlPeriodCostGroup.ctcCostAmount = _amountMST - _projControlPeriodCostGroup.ActuelCostAmount;
        }

        return _projControlPeriodCostGroup.ctcCostAmount + _projControlPeriodCostGroup.ActuelCostAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalBudgetMinusActual</Name>
				<Source><![CDATA[
    void totalBudgetMinusActual()
    {
        //Total budget - Actual
        this.ctcCostAmount = max(0, this.ForecastCostAmount - this.ActuelCostAmount);
        this.ctcCostUnit   = max(0, this.ForecastCostUnit - this.ActuelCostUnit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCostAmount</Name>
				<Source><![CDATA[
    public ProjControlTotalCost totalCostAmount()
    {
        return this.ctcCostAmount + this.ActuelCostAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCostMinusActual</Name>
				<Source><![CDATA[
    void totalCostMinusActual(ProjControlPeriodCostGroup prevCostGroup)
    {
        this.ctcCostAmount = (prevCostGroup.ctcCostAmount + prevCostGroup.ActuelCostAmount) - this.ActuelCostAmount;
        this.ctcCostUnit = (prevCostGroup.ctcCostUnit + prevCostGroup.ActuelCostUnit) - this.ActuelCostUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCostMinusActualRecalc</Name>
				<Source><![CDATA[
    void totalCostMinusActualRecalc()
    {
        AmountMST               pAmoutTotal;
        UnitQty                 pUnitTotal;

        pAmoutTotal = this.orig().ActuelCostAmount + this.orig().ctcCostAmount;
        pUnitTotal = this.orig().ActuelCostUnit + this.orig().ctcCostUnit;

        //Total cost - Actual
        this.ctcCostAmount = pAmoutTotal - this.ActuelCostAmount;
        this.ctcCostUnit = pUnitTotal - this.ActuelCostUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalEstimateTotalCost</Name>
				<Source><![CDATA[
    display ProjTotalEstimateTotalCost totalEstimateTotalCost()
    {
        return this.CommittedCostAmount + this.CommittedPeriodEndCostAmount + this.ActualPeriodEndCostAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalEstimateTotalQty</Name>
				<Source><![CDATA[
    display ProjTotalEstimateTotalQty totalEstimateTotalQty()
    {
        return this.CommittedCostUnit + this.CommittedPeriodEndCostUnit + this.ActualPeriodEndCostUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalQty</Name>
				<Source><![CDATA[
    edit ProjUnitQtyTotal totalQty(
        boolean                      _set,
        ProjControlPeriodCostGroup   _projControlPeriodCostGroup,
        UnitQty                      _qty)
    {
        if (_set)
        {
            _projControlPeriodCostGroup.ctcCostUnit = _qty - _projControlPeriodCostGroup.ActuelCostUnit;
        }

        return _projControlPeriodCostGroup.ctcCostUnit + _projControlPeriodCostGroup.ActuelCostUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(boolean _updateRecalculate  = true)
    {
        ProjControlPeriodTable   projControlPeriodTable;

        ttsbegin;

        super();

        if (_updateRecalculate)
        {
            projControlPeriodTable = this.projControlPeriod(true);

            projControlPeriodTable.Recalculated  = NoYes::Yes;

            projControlPeriodTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTotalContract</Name>
				<Source><![CDATA[
    public static boolean checkTotalContract(ProjControlPeriodTable _projControlPeriodTable)
    {
        ProjControlPeriodCostGroup      projControlPeriodCostGroup;
        boolean                         ret = true;

        select sum(Contract) from projControlPeriodCostGroup
            where projControlPeriodCostGroup.ProjId == _projControlPeriodTable.ProjId &&
                projControlPeriodCostGroup.ControlId == _projControlPeriodTable.ControlId &&
                projControlPeriodCostGroup.PeriodFrom == _projControlPeriodTable.PeriodFrom &&
                projControlPeriodCostGroup.Version == _projControlPeriodTable.Version;

        if (projControlPeriodCostGroup.Contract != _projControlPeriodTable.totalContract())
        {
            return checkFailed("@SYS300938");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTotalEstimateCTC</Name>
				<Source><![CDATA[
    public static boolean checkTotalEstimateCTC(
        ProjId            _projId,
        ProjControlId     _controlId,
        ProjPeriodFrom    _periodFrom,
        Integer           _version,
        ProjMsgLevel      _infoMsgType = ProjMsgLevel::None)
    {
        ProjControlPeriodCostGroup      projControlPeriodCostGroup;
        boolean                         ret;

        ret = false;

        while select forupdate projControlPeriodCostGroup
            where projControlPeriodCostGroup.ProjId == _projId &&
                projControlPeriodCostGroup.ControlId == _controlId &&
                projControlPeriodCostGroup.PeriodFrom == _periodFrom &&
                projControlPeriodCostGroup.Version == _version &&
                projControlPeriodCostGroup.ctcMethod == ProjControlPeriodCostGroupCTCMethod::TotalEstimate//Total cost - Actual
        {
            if (projControlPeriodCostGroup.ctcCostAmount < projControlPeriodCostGroup.totalEstimateTotalCost())
            {
                switch (_infoMsgType)
                {
                    case ProjMsgLevel::Info :
                        info(strfmt("@SYS117303",
                            projControlPeriodCostGroup.ctcCostAmount,
                            projControlPeriodCostGroup.totalEstimateTotalCost(),
                            projControlPeriodCostGroup.ProjId,
                            projControlPeriodCostGroup.CostGroupId));
                        break;

                    case ProjMsgLevel::Warning :
                        warning(strfmt("@SYS117303",
                            projControlPeriodCostGroup.ctcCostAmount,
                            projControlPeriodCostGroup.totalEstimateTotalCost(),
                            projControlPeriodCostGroup.ProjId,
                            projControlPeriodCostGroup.CostGroupId));
                        break;

                    case ProjMsgLevel::Error :
                        error(strfmt("@SYS117303",
                            projControlPeriodCostGroup.ctcCostAmount,
                            projControlPeriodCostGroup.totalEstimateTotalCost(),
                            projControlPeriodCostGroup.ProjId,
                            projControlPeriodCostGroup.CostGroupId));
                }

                ret = true;
            }

            if (projControlPeriodCostGroup.ctcCostUnit < projControlPeriodCostGroup.totalEstimateTotalQty())
            {
                switch (_infoMsgType)
                {
                    case ProjMsgLevel::Info :
                        info(strfmt("@SYS117311",
                            projControlPeriodCostGroup.ctcCostUnit,
                            projControlPeriodCostGroup.totalEstimateTotalQty(),
                            projControlPeriodCostGroup.ProjId,
                            projControlPeriodCostGroup.CostGroupId));
                        break;

                    case ProjMsgLevel::Warning :
                        warning(strfmt("@SYS117311",
                            projControlPeriodCostGroup.ctcCostUnit,
                            projControlPeriodCostGroup.totalEstimateTotalQty(),
                            projControlPeriodCostGroup.ProjId,
                            projControlPeriodCostGroup.CostGroupId));
                        break;

                    case ProjMsgLevel::Error :
                        error(strfmt("@SYS117311",
                            projControlPeriodCostGroup.ctcCostUnit,
                            projControlPeriodCostGroup.totalEstimateTotalQty(),
                            projControlPeriodCostGroup.ProjId,
                            projControlPeriodCostGroup.CostGroupId));
                }

                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorTxt</Name>
				<Source><![CDATA[
    public static boolean errorTxt(ProjId               _projId,
                                                 ProjControlId        _controlId,
                                                 ProjControlVersion   _version,
                                                 ProjTransDate        _periodFrom)
    {
        return (select projControlPeriodCostGroup
                    where projControlPeriodCostGroup.ProjId     == _projId     &&
                          projControlPeriodCostGroup.ControlId  == _controlId  &&
                          projControlPeriodCostGroup.Version    == _version    &&
                          projControlPeriodCostGroup.PeriodFrom == _periodFrom &&
                          projControlPeriodCostGroup.ErrorText).RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ProjControlPeriodCostGroup find(ProjId            _projId,
                                                  ProjControlId     _controlId,
                                                  ProjPeriodFrom    _periodFrom,
                                                  Integer           _version,
                                                  ProjCostGroupId   _costGroupId,
                                                  boolean           _forUpdate = false)
    {
        ProjControlPeriodCostGroup projControlPeriodCostGroup = null;

        projControlPeriodCostGroup.selectForUpdate(_forUpdate);

        if (_projId && _controlId && _periodFrom && _version && _costGroupId)
        {
            select firstonly reverse projControlPeriodCostGroup
                where projControlPeriodCostGroup.ProjId      == _projId     &&
                      projControlPeriodCostGroup.ControlId   == _controlId  &&
                      projControlPeriodCostGroup.PeriodFrom  == _periodFrom &&
                      projControlPeriodCostGroup.Version     == _version    &&
                      projControlPeriodCostGroup.CostGroupId == _costGroupId;
        }

        return projControlPeriodCostGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevCostGroup</Name>
				<Source><![CDATA[
    public static ProjControlPeriodCostGroup prevCostGroup(ProjId _projId, ProjControlId _controlId, ProjPeriodFrom _prevPeriodFrom, ProjControlVersion _prevVersion, ProjCostGroupId _costGroupId)
    {
        ProjControlPeriodCostGroup  prevCostGroup;

        if (_prevPeriodFrom)
        {
            select firstonly reverse ctcCostAmount, ActuelCostAmount, ctcCostUnit, ActuelCostUnit, ctcMethod from prevCostGroup where
                prevCostGroup.ProjId == _projId &&
                prevCostGroup.ControlId == _controlId &&
                prevCostGroup.PeriodFrom == _prevPeriodFrom &&
                prevCostGroup.Version == _prevVersion &&
                prevCostGroup.CostGroupId == _costGroupId;
        }

        return prevCostGroup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124976</DeveloperDocumentation>
	<FormRef>ProjControlPeriodCostGroup</FormRef>
	<Label>@SYS54265</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ProjId</TitleField1>
	<TitleField2>CostGroupId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ProjCtrlPerVerGroupIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>ProjCtrlPerVerGroupIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ControlId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Version</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActuelCostAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CTCCostAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ActualAfterPeriodEnd</Name>
			<Label>@SYS33313</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActualPeriodEndCostAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActualPeriodEndCostUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS74396</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CTCMethod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Committed</Name>
			<Label>@SYS58089</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CommittedCostAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CommittedCostUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CommittedAfterPeriodEnd</Name>
			<Label>@SYS58089</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CommittedPeriodEndCostAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CommittedPeriodEndCostUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Contract</Name>
			<Label>@SYS54592</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Contract</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CostAmount</Name>
			<Label>@SYS3058</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActuelCostAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CTCCostAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>totalAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Current</Name>
			<Label>@SYS10562</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActuelCostAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActuelCostAmountCapitalized</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActuelCostUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Error</Name>
			<Label>@SYS8500</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>errorText</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Forecast</Name>
			<Label>@SYS102639</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ForecastCostAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForecastCostUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>periodTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Version</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ControlId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Quantity</Name>
			<Label>@SYS59970</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActuelCostUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CTCCostUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>totalQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RemainingCost</Name>
			<Label>@SYS54597</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CTCCostAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CTCCostUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompletePct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodFrom</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ActualPeriodEndCostAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS116509</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ActualPeriodEndCostUnit</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitQty</ExtendedDataType>
			<Label>@SYS117298</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ActuelCostAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS89889</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ActuelCostAmountCapitalized</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS76942</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ActuelCostUnit</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitQty</ExtendedDataType>
			<Label>@SYS76943</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CommittedCostAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS116507</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CommittedCostUnit</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitQty</ExtendedDataType>
			<Label>@SYS117299</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CommittedPeriodEndCostAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS116511</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CommittedPeriodEndCostUnit</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitQty</ExtendedDataType>
			<Label>@SYS117300</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CompletePct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS50074</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Contract</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS54592</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ControlId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjControlId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CostGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCostGroupId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CTCCostAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS54267</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CTCCostUnit</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjUnitQty</ExtendedDataType>
			<Label>@SYS89888</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CTCMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjControlPeriodCostGroupCTCMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>errorText</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ForecastCostAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS116515</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ForecastCostUnit</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitQty</ExtendedDataType>
			<Label>@SYS57685</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ForecastPeriodCostAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS116515</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ForecastPeriodCostUnit</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitQty</ExtendedDataType>
			<Label>@SYS57685</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PeriodFrom</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjPeriodFrom</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjWipId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS78777</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Version</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjControlVersion</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PeriodEndForecastCostUnit</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitQty</ExtendedDataType>
			<Label>@SYS57685</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PeriodEndForecastCostAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS116515</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProjCtrlPerVerGroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ControlId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PeriodFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Version</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CostGroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>ProjControlCostGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124899</EntityRelationshipRole>
			<RelatedTable>ProjControlCostGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CostGroupId</Name>
					<Field>CostGroupId</Field>
					<RelatedField>CostGroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ControlId</Name>
					<Field>ControlId</Field>
					<RelatedField>ControlId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjControlPeriod</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124941</EntityRelationshipRole>
			<RelatedTable>ProjControlPeriodTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ControlId</Name>
					<Field>ControlId</Field>
					<RelatedField>ControlId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PeriodFrom</Name>
					<Field>PeriodFrom</Field>
					<RelatedField>PeriodFrom</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Version</Name>
					<Field>Version</Field>
					<RelatedField>Version</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>