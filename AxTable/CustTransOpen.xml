<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustTransOpen</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustTransOpen extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>custTrans</Name>
				<Source><![CDATA[
    public CustTrans custTrans()
    {
        return this.transOpenData().custVendTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTransOpenInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>VendDocumentLineInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// The <c>VendDocumentLineInterface</c> object.
    /// </returns>
    public CustVendTransOpenInterface custVendTransOpenInterface()
    {
        return this.CustVendTransOpen::custVendTransOpenInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        MCRPaymSchedLink mcrPaymSchedLink;

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            ttsbegin;
            mcrPaymSchedLink = MCRPaymSchedLink::findCustTransOpen(this.RecId, true);
            // If a link record exists, clear out th recID before deletion.
            // Do not want to delete the link, as it is still used
            //  after the custTransOpen record is gone.
            if (mcrPaymSchedLink)
            {
                mcrPaymSchedLink.CustTransOpenRefRecId = 0;
                mcrPaymSchedLink.update();
            }
            ttscommit;
        }
        ttsbegin;
        if (CFMParameters::isPaymentRequestsEnabled())
        {
            CFMPaymentRequestTable::setOutdatedBySource(CFMPaymentRequestSourceType::CustInvoice, this.RecId, true);
        }

        super();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispAmountCur</Name>
				<Source><![CDATA[
    display AmountCur dispAmountCur()
    {
        return this.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalendarDerivation_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an object of <c>PaymCalendarIDerivationSource</c> related to this transaction.
    /// </summary>
    /// <returns>
    /// An instance of <c>PaymCalendarIDerivationSource</c> for this transaction.
    /// </returns>
    public PaymCalendarIDerivationSource getCalendarDerivation_BR()
    {
        CustInvoiceJour custInvoiceJour;
        CustTrans custTrans;

        select firstonly custInvoiceJour
            exists join custTrans
            where custInvoiceJour.InvoiceId == custTrans.Invoice
                && custInvoiceJour.InvoiceAccount == custTrans.AccountNum
                && custInvoiceJour.InvoiceDate == custTrans.TransDate
                && custInvoiceJour.LedgerVoucher == custTrans.Voucher
                && custTrans.RecId == this.RefRecId;

        return PaymCalendarSourceCustInvoiceJournal::newCalendarSource(custInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashDiscAlreadyTaken</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cash discount amount taken for the current open transaction in the transaction currency.
    /// </summary>
    /// <returns>
    /// The cash discount amount taken in the transaction currency.
    /// </returns>
    public CashDiscAmount getCashDiscAlreadyTaken()
    {
        CustSettlement custSettlement;

        changecompany(this.company())
        {
            select sum(UtilizedCashDisc) from custSettlement
                where custSettlement.TransRecId == this.RefRecId
                   && custSettlement.DueDate == this.DueDate
                   && custSettlement.CanBeReversed == true;
        }

        return custSettlement.UtilizedCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashDiscAmountToTake</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the cash discount amount to take for the current open transaction in the transaction currency.
    /// </summary>
    /// <param name="_cashDiscGranted">
    ///    The discount amount granted for the current open transaction.
    /// </param>
    /// <returns>
    ///    The cash discount amount to take in the transaction currency.
    /// </returns>
    public CashDiscAmount getCashDiscAmountToTake(CashDiscAmount _cashDiscGranted)
    {
        CashDiscAmount cashDiscToTake;
        CustVendCashDiscountHelper cashDiscountHelper;

        cashDiscountHelper = CustVendCashDiscountHelper::construct(this);
        cashDiscountHelper.parmFullCashDiscountForTier(_cashDiscGranted);
        cashDiscToTake = cashDiscountHelper.determineCashDiscForOpenAmount();

        return cashDiscToTake;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrevSettledAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount already settled for the current open transaction in the transaction currency.
    /// </summary>
    /// <returns>
    /// The amount already settled in the transaction currency.
    /// </returns>
    public AmountCur getPrevSettledAmount()
    {
        CustSettlement custSettlement;

        changecompany(this.company())
        {
            select sum(SettleAmountCur) from custSettlement
                where custSettlement.TransRecId == this.RefRecId
                && custSettlement.DueDate == this.DueDate
                && custSettlement.CanBeReversed == true;
        }

        return custSettlement.SettleAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithhold_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the entire tax withholding amount - tcs or tds amount - paid amount.
    /// </summary>
    /// <param name="_custTransOpen">
    ///    The <c>_custTransOpen</c> buffer to find witholding tax amount.
    /// </param>
    /// <returns>
    /// Returns amount based on calcuation.
    /// </returns>
    public AmountCur getTaxWithhold_IN(CustTransOpen _custTransOpen)
    {
        TaxWithholdAmountCur taxWithholdAmountCur;
        CustTrans custTransLoc;
        CustTransOpen custTransOpenLoc;
        TaxInformationCustTable_IN taxInformationCustTable_IN;

        // Need to find buffer of CustTrans as we require Voucher through which we can identify the TDS/TCS calculated on the invoice, this fix was added to fix the Partial payment when TCS calculated.
        select Voucher from custTransLoc
            where custTransLoc.AccountNum == _custTransOpen.AccountNum
               && custTransLoc.RecId == _custTransOpen.RefRecId;

        // Need to find buffer as TaxWithholdAmountOrigin_IN is zero due to onlyfetchActive is yes and TaxWithholdAmountOrigin_IN is not used in design
        select TaxWithholdAmountOrigin_IN from custTransOpenLoc where custTransOpenLoc.RecId == _custTransOpen.RecId;
        taxInformationCustTable_IN = CustTable::find(_custTransOpen.AccountNum).getTaxInformationCustTable_IN();

        if (taxInformationCustTable_IN.tcsGroup)
        {
            taxWithholdAmountCur = TaxWithholdTrans_IN::taxWithholdAmountCur(TaxWithholdCodeType_IN::TCS, custTransLoc.Voucher, custTransLoc.TransDate);

            return (custTransOpenLoc.TaxWithholdAmountOrigin_IN + abs(taxWithholdAmountCur) - _custTransOpen.paymentAmount());
        }

        return _custTransOpen.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        CurrencyExchangeHelper currencyExchangeHelper;
        CustTrans custTrans;

        if (this.validateWrite())
        {
            this.CollectionLetter = NoYes::Yes;

            if (TaxParameters::find().CashDiscOnInvoice)
            {
                this.UseCashDisc = UseCashDisc::Never;
            }
            else
            {
                this.UseCashDisc = CustTable::find(this.AccountNum).UseCashDisc;
            }

            if (Ledger::reportingCurrency()
                && this.ReportingCurrencyAmount == 0)
            {
                select firstonly CurrencyCode, AmountCur, ReportingCurrencyCrossRate, ExchRate, ExchRateSecond, ReportingCurrencyExchRate, ReportingCurrencyExchRateSecondary
                    from custTrans
                        where custTrans.RecId == this.RefRecId;

                currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
                        Ledger::current(),
                        this.TransDate);
                currencyExchangeHelper.parmExchangeRate1(custTrans.ExchRate);
                currencyExchangeHelper.parmExchangeRate2(custTrans.ExchRateSecond);

                if (custTrans.ReportingCurrencyCrossRate != 0)
                {                  
                    currencyExchangeHelper.parmReportingExchangeRate1(custTrans.ReportingCurrencyCrossRate);
                }
                else
                {
                    currencyExchangeHelper.parmReportingExchangeRate1(custTrans.ReportingCurrencyExchRate);
                    currencyExchangeHelper.parmReportingExchangeRate2(custTrans.ReportingCurrencyExchRateSecondary);
                }

                if (currencyExchangeHelper.parmReportingExchangeRate1() != 0)
                {
                    this.ReportingCurrencyAmount = currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(
                        custTrans.CurrencyCode,
                        this.AmountCur);               
                }
            }

            if (this.AmountCur || this.AmountMST)
                super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interestAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the total interest amount for the current open invoice.
    /// </summary>
    /// <returns>
    ///    The total interest amount of the current open invoice.
    /// </returns>

    display AmountCur interestAmount()
    {
        AmountCur interestAmount;
        CustInterestJour custInterestJour;
        CustInterestTrans custInterestTrans;

        while select InterestAmount, CurrencyCode from custInterestTrans
        where custInterestTrans.CustTransId == this.RefRecId
                && custInterestTrans.DueDate == this.DueDate
                && (custInterestTrans.AdjustmentStatus == CustInterestAdjustmentStatus::None
                    || custInterestTrans.AdjustmentStatus == CustInterestAdjustmentStatus::ReInstate)
        exists join custInterestJour
        where custInterestJour.InterestNote == custInterestTrans.InterestNote
                && custInterestJour.AccountNum == this.AccountNum
                && custInterestJour.Status == PrintPostCancel::Posted
        {
            interestAmount += custInterestTrans.InterestAmount;
        }

        return interestAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interestAmountPerDay_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the interest amount per day for a given amount.
    /// </summary>
    /// <returns>
    /// Interest amount per day.
    /// </returns>
    display FinInterestAmount_BR interestAmountPerDay_BR()
    {
        CustInterestSetup_BR interestSetup;
        FinInterestAmount_BR amount;

        if (this.InterestCode_BR)
        {
            interestSetup = CustInterestSetup_BR::find(this.InterestCode_BR);
            amount = InterestCalculator_BR::interestAmountPerDay(interestSetup, this.AmountMST);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interestAmountPerMonth_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the interest amount per month for a given amount.
    /// </summary>
    /// <returns>
    /// Interest amount per month.
    /// </returns>
    display FinInterestAmount_BR interestAmountPerMonth_BR()
    {
        CustInterestSetup_BR interestSetup;
        FinInterestAmount_BR amount;

        if (this.InterestCode_BR)
        {
            interestSetup = CustInterestSetup_BR::find(this.InterestCode_BR);
            amount = InterestCalculator_BR::interestAmountPerMonth(interestSetup, this.AmountMST);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interestFine_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the totals of interest and fine amounts
    /// </summary>
    /// <returns>
    /// Sum of interest and fine amounts
    /// </returns>
    /// <exception cref="Exception::Error">
    /// When no right exists for the interest and fine fields
    /// </exception>
    display InterestAmountCur interestFine_BR()
    {
        InterestAmountCur interest;

        if (!hasFieldAccess(tableNum(CustTransOpen), fieldNum(CustTransOpen, InterestAmountPaymCur_BR), AccessType::View) ||
            !hasFieldAccess(tableNum(CustTransOpen), fieldNum(CustTransOpen, FineAmountPaymCur_BR), AccessType::View))
        {
            throw error("@SYS57330"); // Insufficient rights
        }

        interest = this.InterestAmountPaymCur_BR + this.FineAmountPaymCur_BR;

        return (interest);
    }

]]></Source>
			</Method>
			<Method>
				<Name>interestPctPerMonth_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the interest percentage per month.
    /// </summary>
    /// <returns>
    /// Interest percentage per month.
    /// </returns>
    display InterestPct_BR interestPctPerMonth_BR()
    {
        CustInterestSetup_BR interestSetup;
        InterestPct_BR pct;

        if (this.InterestCode_BR)
        {
            interestSetup = CustInterestSetup_BR::find(this.InterestCode_BR);
            pct = InterestCalculator_BR::interestPctPerMonth(interestSetup);
        }

        return pct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextCashDiscAmount</Name>
				<Source><![CDATA[
    display CashDiscAmount nextCashDiscAmount()
    {
        return CustTransCashDisc::findCashDisc(this.TableId, this.RecId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())).CashDiscAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextCashDiscDate</Name>
				<Source><![CDATA[
    display CashDiscdate nextCashDiscDate()
    {
        return CustTransCashDisc::findCashDisc(this.TableId, this.RecId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())).CashDiscdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of the payment amount for an open invoice.
    /// </summary>
    /// <returns>
    /// The total payment amount of the current open invoice.
    /// </returns>
    public display AmountCur paymentAmount()
    {
        CustSettlement custSettlement;

        // Joining between CustSettlement and CustTransOpen by skipping
        // the relationship with CustTrans for performance reasons.
        select sum(SettleAmountCur) from custSettlement
            where custSettlement.AccountNum == this.AccountNum
                && custSettlement.TransCompany == this.DataAreaId
                && custSettlement.TransRecId == this.RefRecId
                && custSettlement.CanBeReversed == NoYes::Yes;

        return custSettlement.SettleAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainAmountCashDisc</Name>
				<Source><![CDATA[
    AmountCur remainAmountCashDisc(DiscDate _discDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                   DiscGraceDays _discGraceDays = 0)
    {
        return this.transOpenData().remainAmountCashDisc(_discDate, _discGraceDays);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCashDisc</Name>
				<Source><![CDATA[
    // There is a similar method in Table.Method VendTransOpen.setCashDisc
    void setCashDisc(TransDate _transDate,
                     DiscGraceDays _graceDays = 0)
    {
        CustTransCashDisc custTransCashDisc;

        custTransCashDisc = CustTransCashDisc::findByUseCashDisc(
                                this.TableId,
                                this.RecId,
                                this.UseCashDisc,
                                _transDate,
                                _graceDays);

        if (custTransCashDisc.RecId && custTransCashDisc.CashDiscDue == CashDiscDue::CashDisc)
        {
            this.CashDiscDate = custTransCashDisc.CashDiscdate;
            this.PossibleCashDisc = custTransCashDisc.CashDiscAmount;
        }
        else
        {
            this.CashDiscDate = dateNull();
            this.PossibleCashDisc = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tcsTDSAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Method is used to return TDS Amount or TCS amount
    /// </summary>
    /// <param name="_custTransOpen">
    ///    The <c>_custTransOpen</c> buffer used to find TCS or TDS amount.
    /// </param>
    /// <returns>
    ///    Returns amount based on TCS amount or TDS amount is posted.
    /// </returns>
    display AmountCur tcsTDSAmount_IN(CustTransOpen _custTransOpen)
    {
        if (_custTransOpen.tcsAmount_IN)
        {
            return _custTransOpen.tcsAmount_IN;
        }
        else if (_custTransOpen.tdsAmount_IN)
        {
            return _custTransOpen.tdsAmount_IN;
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transOpenData</Name>
				<Source><![CDATA[
    public CustTransOpenData transOpenData()
    {
        return CustVendTransOpenData::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpostedInterestAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Select the unposted interest amount for an open invoice that has a status of created.
    /// </summary>
    /// <param name="_custTransOpen">
    ///    The current instance of the <c>CustTransOpen</c> table.
    /// </param>
    /// <returns>
    ///    The unposted interest amount for an open invoice.
    /// </returns>

    display AmountCur unpostedInterestAmount(CustTransOpen _custTransOpen)
    {
        AmountCur unpostedInterestAmount;
        CustInterestJour custInterestJour;
        CustInterestTrans custInterestTrans;

        select firstonly InterestAmount, CurrencyCode from custInterestTrans
        where custInterestTrans.CustTransId == _custTransOpen.RefRecId
                && custInterestTrans.InterestCalculate == NoYes::Yes
                && custInterestTrans.DueDate == _custTransOpen.DueDate
        exists join custInterestJour
        where custInterestTrans.InterestNote == custInterestJour.InterestNote
                && custInterestJour.AccountNum == _custTransOpen.AccountNum
                && custInterestJour.Status == PrintPostCancel::Created;

        unpostedInterestAmount = custInterestTrans.InterestAmount;

        return unpostedInterestAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpostedPaymentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Identifies any unposted payment for the current open invoice.
    /// </summary>
    /// <returns>
    ///    A Boolean value indicating whether an unposted payment is present for an open invoice or not.
    /// </returns>

    display NoYes unpostedPaymentAmount()
    {
        boolean hasSpecTrans;
        NoYes hasUnpostedPayment = NoYes::No;

        hasSpecTrans = SpecTrans::existByRef(this.company(), tableNum(CustTransOpen), this.RecId);

        if (hasSpecTrans)
        {
            hasUnpostedPayment = NoYes::Yes;
        }

        return hasUnpostedPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    void update()
    {
        CustTransOpen firstCustTransOpen;
        CustTrans custTrans;
        TransDate tmpPaymDate;
        ProjInvoiceJour projInvoiceJour;
        ProjProposalJour projProposalJour;
        int generalBuffer;
        str individualBuffer;
        CustTransOpen this_Orig = this.orig();
        CurrencyExchangeHelper currencyExchangeHelper;

        ttsbegin;
        if (this.DueDate != this.orig().DueDate)
        {
            select RecId from firstCustTransOpen
                order by DueDate
                where firstCustTransOpen.RefRecId == this.RefRecId;

            // if it is the custTransOpen with the lowest dueDate
            if (this.RecId == firstCustTransOpen.RecId)
            {
                select forupdate custTrans
                    where custTrans.RecId == this.RefRecId;

                custTrans.DueDate = this.DueDate;

                custTrans.update();

                // We need to update the records in the ProjTransPosting corresponding to the voucher number
                // in the CustTrans
                // We need to also update the buffer dates to the due date

                // Get the project parameters - general buffer days
                generalBuffer = ProjParameters::find().ForecastBufferDays;

                // Get the individual buffer
                projInvoiceJour = ProjInvoiceJour::find(custTrans.Invoice, custTrans.TransDate);
                projProposalJour = ProjProposalJour::find(projInvoiceJour.ProposalId);
                if (projProposalJour.FundingSource != 0)
                {
                    individualBuffer = ProjFundingSource::find(projProposalJour.FundingSource).IndividualBuffer;
                }

                // Expected due date =
                // Due date + project params (general buffer days) + individual buffer days
                tmpPaymDate = custTrans.DueDate + any2int(individualBuffer) + any2int(generalBuffer);

                // Update proj trans posting
                CustVoucher::updateProjTransPosting (tmpPaymDate, custTrans.Voucher, ProjPaymentStatus::ExpectedPayment);

                CustBillOfExchangeJour::updateDueDate(custTrans.BillOfExchangeID, custTrans.DueDate);
            }

            CustTransCashDisc::updateCashDiscountDueDate(this);
        }

        if (Ledger::reportingCurrency()
            && (this_Orig.AmountMST != this.AmountMST
                && this_Orig.ReportingCurrencyAmount == this.ReportingCurrencyAmount))
        {
            // update when Mst amount has been changed, but reporting has not
            select firstonly CurrencyCode, AmountCur, ReportingCurrencyCrossRate, ExchRate, ExchRateSecond, ReportingCurrencyExchRate, ReportingCurrencyExchRateSecondary
                from custTrans
                    where custTrans.RecId == this.RefRecId;

            currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
                        Ledger::current(),
                        this.TransDate);
            currencyExchangeHelper.parmExchangeRate1(custTrans.ExchRate);
            currencyExchangeHelper.parmExchangeRate2(custTrans.ExchRateSecond);

            if (custTrans.ReportingCurrencyCrossRate != 0)
            {                               
                currencyExchangeHelper.parmReportingExchangeRate1(custTrans.ReportingCurrencyCrossRate);
            }
            else
            {
                currencyExchangeHelper.parmReportingExchangeRate1(custTrans.ReportingCurrencyExchRate);
                currencyExchangeHelper.parmReportingExchangeRate2(custTrans.ReportingCurrencyExchRateSecondary);
            }

            this.ReportingCurrencyAmount = currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(
                custTrans.CurrencyCode,
                this.AmountCur);
        }

        this.CovStatus = 0;

        if (this.validateWrite())
        {
            if (CFMParameters::isPaymentRequestsEnabled() && this.AmountCur != this.orig().AmountCur)
            {
                CFMPaymentRequestTable::setOutdatedBySource(CFMPaymentRequestSourceType::CustInvoice, this.RecId, this.AmountCur == 0);
            }

            super();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldProcessForLedgerCov</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should process for cash flow forecasting.
    /// </summary>
    /// <returns>true when the open customer transaction should be processed; otherwise false.</returns>
    protected boolean shouldProcessForLedgerCov()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerCov</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates cash flow forecasts for the <c>CustTransOpen</c> record.
    /// </summary>
    /// <param name = "_ledgerCoverage">The cash flow forecasting calculations.</param>
    public void updateLedgerCov(LedgerCoverage _ledgerCoverage)
    {
        LedgerCoverage ledgerCoverage = _ledgerCoverage;
        CustTrans custTrans = this.custTrans();

        if (!this.shouldProcessForLedgerCov())
        {
            return;
        }

        ledgerCoverage.init(this);

        CustVendTransOpenLedgerCovType custVendTransOpenLedgerCovType = CustVendTransOpenLedgerCovType::newForDocument(ledgerCoverage, custTrans, this);
        custVendTransOpenLedgerCovType.updateLedgerCov();

        ledgerCoverage.endCov();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDueDate</Name>
				<Source><![CDATA[
    private boolean validateDueDate()
    {
        CustTrans custTrans;
        CustDirectDebitMandate custDirectDebitMandate;
        CustPrenotificationDays prenotificationDays;
        boolean ret = true;
        // <GEEPL>
        #isoCountryRegionCodes
        // </GEEPL>

        if (CustDirectDebitMandate::isTransactionSepa(this.DataAreaId, this.RefRecId))
        {
            select custDirectDebitMandate
            join TransDate from custTrans
                where custTrans.DirectDebitMandate == custDirectDebitMandate.RecId
                    && custTrans.RecId == this.RefRecId;

            if (custDirectDebitMandate.getStatus() == CustMandateStatus::New)
            {
                prenotificationDays = custDirectDebitMandate.PrenotificationDaysFirst;
            }
            else
            {
                prenotificationDays = custDirectDebitMandate.PrenotificationDaysRecurring;
            }

            if (this.DueDate < custTrans.TransDate + prenotificationDays)
            {
                // "The invoice date %1 plus the %2 pre-notification days is later than the due date %3."
                ret = checkFailed(strFmt("@SYS4002545",
                                        this.TransDate,
                                        prenotificationDays,
                                        this.DueDate));
            }
        }
        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            ret = OverdueJournalSettings_W::canDueDateBeModified(
                this,
                this.DueDate,
                this.orig().DueDate);
        }
        // </GEEPL>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean validateField(FieldId p1)
    {
        boolean ret;

        ret = super(p1);

        if (ret)
        {
            switch (p1)
            {
                case (fieldNum(CustTransOpen, CollectionLetterCode)):
                    CustCollectionLetterCodeOrderedList custCollectionLetterCodeOrderedList = CustCollectionLetterCodeOrderedList::newFromOrder();

                    if (custCollectionLetterCodeOrderedList.indexOf(this.CollectionLetterCode) >= custCollectionLetterCodeOrderedList.indexOf(CustCollectionLetterCode::All))
                    {
                        ret = checkFailed(strFmt("@SYS77955", this.CollectionLetterCode));
                    }
                    break;

                case (fieldNum(CustTransOpen,CashDiscDate)):
                    if (this.CashDiscDate > this.DueDate)
                    {
                        ret = checkFailed("@SYS50863");
                    }
                    break;

                case (fieldNum(CustTransOpen,PossibleCashDisc)):
                    if (abs(this.PossibleCashDisc) > abs(this.AmountCur))
                    {
                        ret = checkFailed("@SYS50866");
                    }
                    break;

                // <GBR>
                case (fieldNum(CustTransOpen,InterestAmount_BR)):
                    if (this.InterestAmount_BR < 0)
                    {
                        ret = checkFailed("@GLS931");
                        break;
                    }
                    break;

                case (fieldNum(CustTransOpen, FineAmount_BR)):
                    if (this.FineAmount_BR < 0 )
                    {
                        ret = checkFailed ("@GLS1233");
                        break;
                    }
                    break;
                // </GBR>

                case (fieldNum(CustTransOpen,DueDate)) :
                    ret = this.validateDueDate();
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean ret;

        if (!this.DueDate)
        {
            this.DueDate = this.TransDate;
        }

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(RecId _custTransOpenId )
    {
        boolean ret = true;

        if (!CustTransOpen::exist(_custTransOpenId))
        {
            ret = checkFailed(strFmt(CustTransOpen::txtNotExist(), _custTransOpenId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(RecId _custTransOpenId )
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     custTransOpen
                 where
                     custTransOpen.RecId == _custTransOpenId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static CustTransOpen find(
        RecId _custTransOpenId ,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustTransOpen custTransOpen;

        custTransOpen.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custTransOpen.concurrencyModel(_concurrencyModel);
        }

        select firstonly custTransOpen
            index hint recid
            where custTransOpen.RecId == _custTransOpenId;

        return custTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDueDate</Name>
				<Source><![CDATA[
    static CustTransOpen findDueDate(RecId _custTransRecId,
                                     DueDate _dueDate,
                                     boolean _forUpdate = false)
    {
        CustTransOpen custTransOpen;

        if (_dueDate)
        {
            custTransOpen.selectForUpdate(_forUpdate);

            select firstonly custTransOpen
                where custTransOpen.DueDate == _dueDate
                && custTransOpen.RefRecId == _custTransRecId;
        }
        return custTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRefId</Name>
				<Source><![CDATA[
    static CustTransOpen findRefId(RecId _custTransRecId,
                                   boolean _forUpdate = false,
                                   boolean _selectLocked = false)
    {
        CustTransOpen custTransOpen;

        if (_custTransRecId)
        {
            custTransOpen.selectForUpdate(_forUpdate);
            custTransOpen.selectLocked(_selectLocked);

            select firstonly custTransOpen
                where custTransOpen.RefRecId == _custTransRecId;
        }
        return custTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstDueRecIdByInvoice</Name>
				<Source><![CDATA[
    // Gets the RecId of the earliest (by due date) CustTransOpen record
    // whose CustTrans parent record has the Invoice specified by the
    // _custTransInvoice parameter.

    public static RecId getFirstDueRecIdByInvoice(InvoiceId _custTransInvoice)
    {
        CustTrans custTrans;
        CustTransOpen custTransOpen;

        select firstonly crosscompany RecId from custTransOpen
        order by DueDate asc
        exists join custTrans
        where custTrans.RecId == custTransOpen.RefRecId
              && custTrans.Invoice == _custTransInvoice;

        return custTransOpen.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastUpdatedCollectionLetter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the last updated Collection Letter for this custTransOpen.
    /// </summary>
    /// <param name = "_enforceRecordLevelSecurity"> Enable record level security. Default: false. </param>
    /// <param name = "_includeReversedCollectionLetters"> If set to false this method will not take into account collection letters that have a corresponding
    /// record in the <c>TransactionReversalTrans</c> table. Default: false. </param>
    /// <returns><c>CustCollectionLetterJour</c> buffer.</returns>
    CustCollectionLetterJour lastUpdatedCollectionLetter(boolean _enforceRecordLevelSecurity = false, boolean _includeReversedCollectionLetters = false)
    {
        Query q = new Query();
        QueryBuildDataSource collectionLetterJourDS = q.addDataSource(tableNum(CustCollectionLetterJour));
        q.recordLevelSecurity(_enforceRecordLevelSecurity);

        collectionLetterJourDS.addRange(fieldNum(CustCollectionLetterJour, Status)).value(SysQuery::valueNot(PrintPostCancel::Canceled));
        collectionLetterJourDS.addOrderByField(fieldNum(CustCollectionLetterJour, CreatedDateTime), SortOrder::Descending);
        collectionLetterJourDS.addOrderByField(fieldNum(CustCollectionLetterJour, CollectionLetterDate), SortOrder::Descending);
        collectionLetterJourDS.firstOnly(true);

        QueryBuildDataSource collectionLetterTransDS = collectionLetterJourDS.addDataSource(tableNum(CustCollectionLetterTrans));
        collectionLetterTransDS.relations(true);
        collectionLetterTransDS.joinMode(JoinMode::ExistsJoin);
        collectionLetterTransDS.addRange(fieldNum(CustCollectionLetterTrans, CustTransId)).value(SysQuery::value(this.RefRecId));
        collectionLetterTransDS.addRange(fieldNum(CustCollectionLetterTrans, CustTransOpenRecId)).value(SysQuery::value(this.RecId));
        collectionLetterTransDS.addRange(fieldNum(CustCollectionLetterTrans, CollectionLetterIssued)).value(SysQuery::value(NoYes::Yes));

        if (CustParameters::find().CollectionLetterCodeUpdate == CustPostedPrinted::Posting)
        {
            collectionLetterJourDS.addRange(fieldNum(CustCollectionLetterJour, Updated)).value(SysQuery::valueNot(dateNull()));
        }
        else
        {
            collectionLetterJourDS.addRange(fieldNum(CustCollectionLetterJour, JournalPrinted)).value(SysQuery::value(NoYes::Yes));
        }

        if (!_includeReversedCollectionLetters)
        {
            // Do not exsists join with TransactionReversalTrans
            QueryBuildDataSource transactionReversalTransDS = collectionLetterJourDS.addDataSource(tableNum(TransactionReversalTrans));
            transactionReversalTransDS.joinMode(JoinMode::NoExistsJoin);
            transactionReversalTransDS.addLink(fieldNum(CustCollectionLetterJour, RecId), fieldNum(TransactionReversalTrans, RefRecId));
            transactionReversalTransDS.addRange(fieldNum(TransactionReversalTrans, RefTableId)).value(SysQuery::value(tableNum(CustCollectionLetterJour)));
        }

        QueryRun qr = new QueryRun(q);
        qr.next();

        CustCollectionLetterJour custCollectionLetterJour = qr.get(tableNum(CustCollectionLetterJour));

        return custCollectionLetterJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsCreditTransactionsForCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether credit transactions exist for a customer.
    /// </summary>
    /// <param name = "_custTable">The <c>CustTable</c> table buffer.</param>
    /// <returns>true if the credit transactions exist for the customer; otherwise false</returns>
    public static boolean existsCreditTransactionsForCustomer(CustTable _custTable)
    {
        CustTransOpen custTransOpen;

        select firstonly RecId from custTransOpen
            where custTransOpen.AccountNum == _custTable.AccountNum
                && custTransOpen.AmountCur < 0;

        return (custTransOpen.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastUpdatedCollectionLetterCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the last updated Collection Letter code for this custTransOpen.
    /// </summary>
    /// <param name = "_enforceRecordLevelSecurity"> Enable record level security. Default: false. </param>
    /// <param name = "_includeReversedCollectionLetters"> If set to false this method will not take into account collection letters that have a corresponding
    /// record in the <c>TransactionReversalTrans</c> table. Default: false. </param>
    /// <returns>CustCollectionLetterCode.</returns>
    public CustCollectionLetterCode lastUpdatedCollectionLetterCode(boolean _enforceRecordLevelSecurity = false, boolean _includeReversedCollectionLetters = false)
    {
        CustCollectionLetterTrans collectionLetterTrans;
        CollectionLetterNum collectionLetterNum = this.lastUpdatedCollectionLetter(_enforceRecordLevelSecurity, _includeReversedCollectionLetters).CollectionLetterNum;
        
        collectionLetterTrans.recordLevelSecurity(_enforceRecordLevelSecurity);
        
        select firstOnly CollectionLetterCode from collectionLetterTrans
            where collectionLetterTrans.CollectionLetterNum == collectionLetterNum
                && collectionLetterTrans.CollectionLetterIssued == NoYes::Yes
                && collectionLetterTrans.CustTransOpenRecId == this.RecId;
        
        return collectionLetterTrans.CollectionLetterCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);
        
        switch(_fieldId)
        {
            case fieldNum(CustTransOpen, CollectionLetter):
                var custTransLocal = this.custTrans();
                
                if (custTransLocal.CollectionLetter == NoYes::No && this.CollectionLetter == NoYes::Yes)
                {
                    custTransLocal.selectForUpdate(true);
                    ttsBegin;
                    custTransLocal.CollectionLetter = this.CollectionLetter;
                    custTransLocal.update();
                    ttsCommit;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>originalBalance</Name>
				<Source><![CDATA[
    [Hookable(false), SysClientCacheDataMethod]
    internal display AmountCur originalBalance()
    {
        CustSettlementSumByOpenTransView settlementAmount;

        select firstonly SettleAmountCur from settlementAmount
            where settlementAmount.TransRecId == this.RefRecId
                && settlementAmount.TransOpen == this.RecId
                && settlementAmount.AccountNum == this.AccountNum;

        return settlementAmount.SettleAmountCur + this.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originalBalanceMST</Name>
				<Source><![CDATA[
    [Hookable(false), SysClientCacheDataMethod]
    internal display AmountMST originalBalanceMST()
    {
        CustSettlementSumByOpenTransView settlementAmount;

        select firstonly SettleAmountMST from settlementAmount
            where settlementAmount.TransRecId == this.RefRecId
                && settlementAmount.TransOpen == this.RecId
                && settlementAmount.AccountNum == this.AccountNum;

        return settlementAmount.SettleAmountMST + this.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isZeroAmount</Name>
				<Source><![CDATA[
    public boolean isZeroAmount()
    {
        if (this.AmountCur == 0 && this.AmountMST == 0 && this.ReportingCurrencyAmount == 0)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransClosed</Name>
				<Source><![CDATA[
    public boolean isTransClosed()
    {
        CustTrans custTrans = this.custTrans();
        if (custTrans.RecId && custTrans.Closed != dateNull())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS125135</DeveloperDocumentation>
	<Label>@SYS1864</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>AccountNum</TitleField1>
	<TitleField2>TransDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>AccountDateIdx</ClusteredIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustTransCashDisc</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustTransCashDisc</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustTransOpenLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustTransOpenLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS12227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportingCurrencyAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BankLCExportGroup</Name>
			<Label>@SYS316286</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankLCExportLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BillOfExchange</Name>
			<Label>@SYS69795</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankDiscNoticeDeadline</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CashDiscount</Name>
			<Label>@SYS4376</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashDiscDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PossibleCashDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseCashDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscountLedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Due</Name>
			<Label>@SYS14021</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DueDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExchangeAdjustment</Name>
			<Label>@SYS55328</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExchAdjUnrealized</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchAdjUnrealizedReporting</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Interest</Name>
			<Label>@SYS10770</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LastInterestDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InterestAndFine</Name>
			<Label>@GLS1236</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FineAmount_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FineAmountPaymCur_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FineCode_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestAmount_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestAmountPaymCur_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestCode_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InterestAndFineAmounts</Name>
			<Label>@GLS1236</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FineAmount_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestAmount_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Miscellaneous</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FineAmount_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FineAmountPaymCur_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestAmount_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestAmountPaymCur_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS15217</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WithholdingTax_IN</Name>
			<Label>@SYS33817</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdAmountOrigin_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TDSAmount_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TCSAmount_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Collections</Name>
			<Label>@SYS21751</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CollectionLetter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CollectionLetterCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCurDebCred</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountMST</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMSTDebCred</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>BankDiscNoticeDeadline</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankDiscNoticeDeadline</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankLCExportLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankLCLineRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CashDiscDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCashDiscDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CashDiscountLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@SYS75407</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DueDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DueDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchAdjUnrealized</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMSTDebCred</ExtendedDataType>
			<Label>@SYS67834</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchAdjUnrealizedReporting</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustExchAdjustment</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FineAmount_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>FineAmount_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FineAmountPaymCur_BR</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>FineAmount_BR</ExtendedDataType>
			<Label>@GLS1265</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FineCode_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>CustFineCode_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InterestAmount_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>FinInterestAmount_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InterestAmountPaymCur_BR</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>FinInterestAmount_BR</ExtendedDataType>
			<Label>@GLS1264</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InterestCode_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>CustInterestCode_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LastInterestDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustLastInterestDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PossibleCashDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCashDiscAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustTransRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReportingCurrencyAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMSTSecondary</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SettledLinePercent_IN</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SettledTotalAmount_IN</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>AmountCurDebCred</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SettlementPriorityCashDiscDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS10042</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxWithholdAmountOrigin_IN</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS21950</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TCSAmount_IN</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>TaxWithholdAmountCur</ExtendedDataType>
			<Label>@GLS5471</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TDSAmount_IN</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>TaxWithholdAmountCur</ExtendedDataType>
			<Label>@GLS5470</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseCashDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>UseCashDisc</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CollectionLetter</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>CustCollectionLetter</ConfigurationKey>
			<HelpText>@SYS17367</HelpText>
			<Label>@SYS13960</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CollectionLetterCode</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@SYS75417</HelpText>
			<Label>@SYS75418</Label>
			<EnumType>CustCollectionLetterCode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CovStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CovStatus</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxDistribution</Name>
			<EnumType>PaymSchedTaxDistribution</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RefRecIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AccountDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FK_DimensionAttributeValueCombination_Cu</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>CashDiscountLedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BankLCExportLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>BankLCExportLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DueDate</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>DueDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AccountDueDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DueDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CovStatus</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<ConfigurationKey>CashFlowForecasting</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CovStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CustVendTransOpen</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccountNum</MapField>
					<MapFieldTo>AccountNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AmountCur</MapField>
					<MapFieldTo>AmountCur</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AmountMST</MapField>
					<MapFieldTo>AmountMST</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankDiscNoticeDeadline</MapField>
					<MapFieldTo>BankDiscNoticeDeadline</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankLCLine</MapField>
					<MapFieldTo>BankLCExportLine</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscDate</MapField>
					<MapFieldTo>CashDiscDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscountLedgerDimension</MapField>
					<MapFieldTo>CashDiscountLedgerDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DataArea</MapField>
					<MapFieldTo>DataAreaId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DueDate</MapField>
					<MapFieldTo>DueDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EPBarCodeInfo_BR</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchAdjUnrealized</MapField>
					<MapFieldTo>ExchAdjUnrealized</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchAdjUnrealizedReporting</MapField>
					<MapFieldTo>ExchAdjUnrealizedReporting</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FineAmountPaymCur_BR</MapField>
					<MapFieldTo>FineAmountPaymCur_BR</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FineAmount_BR</MapField>
					<MapFieldTo>FineAmount_BR</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FineCode_BR</MapField>
					<MapFieldTo>FineCode_BR</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterestAmountPaymCur_BR</MapField>
					<MapFieldTo>InterestAmountPaymCur_BR</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterestAmount_BR</MapField>
					<MapFieldTo>InterestAmount_BR</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterestCode_BR</MapField>
					<MapFieldTo>InterestCode_BR</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LastInterestDate</MapField>
					<MapFieldTo>LastInterestDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PossibleCashDisc</MapField>
					<MapFieldTo>PossibleCashDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RefRecId</MapField>
					<MapFieldTo>RefRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReportingCurrencyAmount</MapField>
					<MapFieldTo>ReportingCurrencyAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Tax1099Amount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Tax1099StateAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxDistribution</MapField>
					<MapFieldTo>TaxDistribution</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdAmountOrigin_IN</MapField>
					<MapFieldTo>TaxWithholdAmountOrigin_IN</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdStatus_IN</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TCSAmount_IN</MapField>
					<MapFieldTo>TCSAmount_IN</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TDSAmount_IN</MapField>
					<MapFieldTo>TDSAmount_IN</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ThirdPartyBankAccountId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UseCashDisc</MapField>
					<MapFieldTo>UseCashDisc</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>BankBillOfExchangeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125136</EntityRelationshipRole>
			<RelatedTable>CustBillOfExchangeJour</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BankBillOfExchangeTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustTransOpen</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>CustAccount</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankLCExportLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankLCExportLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankLCExportLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankLCExportLine_CustTransOpen</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankLCExportLine</Name>
					<Field>BankLCExportLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CashDiscountLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CashDiscountLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustTransOpen</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CashDiscountLedgerDimension</Name>
					<Field>CashDiscountLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustCollectionLetterJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125137</EntityRelationshipRole>
			<RelatedTable>CustCollectionLetterJour</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustCollectionLetterJour</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustTransOpen</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustFineSetup_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustFineSetup_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FineCode_BR</Name>
					<Field>FineCode_BR</Field>
					<RelatedField>FineCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>FineCode</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInterestSetup_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInterestSetup_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InterestCode_BR</Name>
					<Field>InterestCode_BR</Field>
					<RelatedField>InterestCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InterestCode</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125138</EntityRelationshipRole>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceJour</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustTransOpen</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>InvoiceAccount</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceTable</Name>
			<EntityRelationshipRole>@SYS125138</EntityRelationshipRole>
			<RelatedTable>CustInvoiceTable</RelatedTable>
			<RelatedTableRole>CustInvoiceTable</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>CustTransOpen</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>InvoiceAccount</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123513</EntityRelationshipRole>
			<RelatedTable>CustTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustTrans_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustTransOpen</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<SourceEDT>CustTransRefRecId</SourceEDT>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTransEPRemit_BR</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>CustTransEPRemit_BR</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>CustTransOpenRefRecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTransOpen</Name>
			<EntityRelationshipRole>@SYS123513</EntityRelationshipRole>
			<RelatedTable>CustTransOpen</RelatedTable>
			<RelatedTableRole>CustTransOpen</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>CustTransOpen</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjTable</Name>
			<EntityRelationshipRole>@SYS125139</EntityRelationshipRole>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableRole>ProjTable</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>CustTransOpen</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>CustAccount</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesQuotationTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesQuotationTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesQuotationTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustTransOpen</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>InvoiceAccount</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125140</EntityRelationshipRole>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>SalesTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustTransOpen</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>InvoiceAccount</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>