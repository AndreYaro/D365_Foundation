<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatVendorCatalog</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CatVendorCatalog extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canEnableDisableAutoApproval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether workflow auto approval can be enabled for the record.
    /// </summary>
    /// <param name="_isEnable">
    /// A Boolean value that indicates whether the button is enabled.
    /// </param>
    /// <returns>
    /// true if the button can be enabled; otherwise, false.
    /// </returns>
    public boolean canEnableDisableAutoApproval(boolean _isEnable)
    {
        boolean enable = false;

        if (this.isDeleted && !this.isPendingWorkflowsExist())
        {
            enable = false;
        }
        else
        {
            if (_isEnable)
            {
                enable = this.IsAutomatedApprovalEnabled != CatVendorCatalogAutomatedApproval::Enabled;
            }
            else
            {
                enable = this.IsAutomatedApprovalEnabled != CatVendorCatalogAutomatedApproval::Disabled;
            }
        }
        return enable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>catalogCreatedDate</Name>
				<Source><![CDATA[
    display CatVendorDate catalogCreatedDate()
    {
        return DateTimeUtil::date(this.CreatedDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>catalogStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the catalog status property name.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>CatVendorImportStatus</c> data type.
    /// </returns>
    display CatVendorImportStatus catalogStatus()
    {
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;

        select firstonly LastImportStatus from catVendorCatalogMaintenanceRequest order by catVendorCatalogMaintenanceRequest.CreatedDateTime desc
        where catVendorCatalogMaintenanceRequest.VendorCatalog == this.RecId;

        return catVendorCatalogMaintenanceRequest.LastImportStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>catalogSubmitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the catalog submitted property name.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>Date</c> data type.
    /// </returns>
    display CatVendorDate catalogSubmitted()
    {
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;

        select firstonly CreatedDateTime from catVendorCatalogMaintenanceRequest order by catVendorCatalogMaintenanceRequest.CreatedDateTime desc
        where catVendorCatalogMaintenanceRequest.VendorCatalog == this.RecId;

        return DateTimeUtil::date(catVendorCatalogMaintenanceRequest.CreatedDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>catalogSubmittedBy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the catalog submitted by property name.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>Name</c> data type.
    /// </returns>
    display CatVendorCatalogUploadedBy catalogSubmittedBy()
    {
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;

        select firstonly CreatedBy from catVendorCatalogMaintenanceRequest order by catVendorCatalogMaintenanceRequest.CreatedDateTime desc
        where catVendorCatalogMaintenanceRequest.VendorCatalog == this.RecId;

        return catVendorCatalogMaintenanceRequest.CreatedBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the file name property.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>CatVendorCatalogDescription</c> data type.
    /// </returns>
    display Filename fileName()
    {
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;

        select firstonly FileName from catVendorCatalogMaintenanceRequest order by catVendorCatalogMaintenanceRequest.CreatedDateTime desc
        where catVendorCatalogMaintenanceRequest.VendorCatalog == this.RecId;

        return catVendorCatalogMaintenanceRequest.FileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileSize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the property name.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>CatVendorCatalogDescription</c> data type.
    /// </returns>
    display CatVendorCatalogCMRFileSize fileSize()
    {
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;

        select firstonly FileSize from catVendorCatalogMaintenanceRequest order by catVendorCatalogMaintenanceRequest.CreatedDateTime desc
        where catVendorCatalogMaintenanceRequest.VendorCatalog == this.RecId;

        return catVendorCatalogMaintenanceRequest.FileSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    display CatVendorCatalogDescription getDescription()
    {
        return this.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastModifiedDate</Name>
				<Source><![CDATA[
    display CatVendorDate getLastModifiedDate()
    {
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;
        CatVendorCatalog                    catVendorCatalog;

        select ModifiedDateTime from catVendorCatalog

        outer join  firstonly CreatedDateTime from catVendorCatalogMaintenanceRequest
            order by catVendorCatalogMaintenanceRequest.CreatedDateTime desc

            where catVendorCatalogMaintenanceRequest.VendorCatalog == catVendorCatalog.RecId
              && catVendorCatalog.RecId == this.RecId;

        if (catVendorCatalog.ModifiedDateTime >= catVendorCatalogMaintenanceRequest.CreatedDateTime)
        return DateTimeUtil::date(catVendorCatalog.ModifiedDateTime);

        return DateTimeUtil::date(catVendorCatalogMaintenanceRequest.CreatedDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUploadedDate</Name>
				<Source><![CDATA[
    display CatVendorDate getUploadedDate()
    {
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;

        select firstonly CreatedDateTime from catVendorCatalogMaintenanceRequest order by catVendorCatalogMaintenanceRequest.CreatedDateTime desc
        where catVendorCatalogMaintenanceRequest.VendorCatalog == this.RecId;

        return DateTimeUtil::date(catVendorCatalogMaintenanceRequest.CreatedDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.IsAutomatedApprovalEnabled = CatVendorCatalogAutomatedApproval::Disabled;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (CatVendorCatalog::exist(this.VendorParty,this.Name))
        {
             throw error("@SYS305442");
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPendingWorkflowsExist</Name>
				<Source><![CDATA[
    private boolean isPendingWorkflowsExist()
    {
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;
        WorkflowTrackingStatusTable         workflowTrackingStatusTable;
        boolean                             pendingWorkflowsExist = false;

        select recId from catVendorCatalogMaintenanceRequest
                where catVendorCatalogMaintenanceRequest.VendorCatalog == this.RecId
            join firstOnly RecId from workflowTrackingStatusTable
                where workflowTrackingStatusTable.ContextRecId   == catVendorCatalogMaintenanceRequest.RecId &&
                      workflowTrackingStatusTable.ContextTableId == catVendorCatalogMaintenanceRequest.TableId &&
                      workflowTrackingStatusTable.TrackingStatus != WorkflowTrackingStatus::Cancelled &&
                      workflowTrackingStatusTable.TrackingStatus != WorkflowTrackingStatus::Completed;

        pendingWorkflowsExist = (workflowTrackingStatusTable.RecId);

        return pendingWorkflowsExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceValidFrom</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the value of the <c>PriceValidFromDate</c> field.
    /// </summary>
    /// <returns>
    ///    The value of the <c>PriceValidFromDate</c> field.
    /// </returns>
    display CatVendorDate priceValidFrom()
    {
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;

        select firstonly PriceValidFromDate from catVendorCatalogMaintenanceRequest order by catVendorCatalogMaintenanceRequest.CreatedDateTime desc
        where catVendorCatalogMaintenanceRequest.VendorCatalog == this.RecId;

        return catVendorCatalogMaintenanceRequest.PriceValidFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceValidTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the property name.
    /// </summary>
    /// <returns>
    /// An instance of the <c>CatVendorCatalogDescription</c> data type.
    /// </returns>
    display CatVendorDate priceValidTo()
    {
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;

        select firstonly PriceValidToDate from catVendorCatalogMaintenanceRequest order by catVendorCatalogMaintenanceRequest.CreatedDateTime desc
        where catVendorCatalogMaintenanceRequest.VendorCatalog == this.RecId;

        return catVendorCatalogMaintenanceRequest.PriceValidToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalFailed</Name>
				<Source><![CDATA[
    display CatCatalogTotalFailed totalFailed()
    {
        CatVendorCatalogMaintenanceRequest catVendorCatalogMaintenanceRequest;

        select count(RecId) from catVendorCatalogMaintenanceRequest
            where catVendorCatalogMaintenanceRequest.VendorCatalog == this.RecId
                  && catVendorCatalogMaintenanceRequest.LastImportStatus == CatVendorImportStatus::Failed;

        return int642int(catVendorCatalogMaintenanceRequest.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalInProcess</Name>
				<Source><![CDATA[
    display CatCatalogTotalInProcess totalInProcess()
    {
        CatVendorCatalogMaintenanceRequest catVendorCatalogMaintenanceRequest;

        select count(RecId) from catVendorCatalogMaintenanceRequest
            where catVendorCatalogMaintenanceRequest.VendorCatalog == this.RecId
                  && (catVendorCatalogMaintenanceRequest.LastImportStatus == CatVendorImportStatus::New
                      || catVendorCatalogMaintenanceRequest.LastImportStatus == CatVendorImportStatus::Inprogress
                      || catVendorCatalogMaintenanceRequest.LastImportStatus == CatVendorImportStatus::PendingApproval);

        return int642int(catVendorCatalogMaintenanceRequest.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalSucceeded</Name>
				<Source><![CDATA[
    display CatCatalogTotalSucceeded totalSucceeded()
    {
        CatVendorCatalogMaintenanceRequest catVendorCatalogMaintenanceRequest;

        select count(RecId) from catVendorCatalogMaintenanceRequest
            where catVendorCatalogMaintenanceRequest.VendorCatalog == this.RecId
                  && catVendorCatalogMaintenanceRequest.LastImportStatus == CatVendorImportStatus::Succeeded;

        return int642int(catVendorCatalogMaintenanceRequest.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalSucceededWarnings</Name>
				<Source><![CDATA[
    display CatCatalogTotalSucceessWarnings totalSucceededWarnings()
    {
        CatVendorCatalogMaintenanceRequest catVendorCatalogMaintenanceRequest;

        select count(RecId) from catVendorCatalogMaintenanceRequest
            where catVendorCatalogMaintenanceRequest.VendorCatalog == this.RecId
                  && catVendorCatalogMaintenanceRequest.LastImportStatus == CatVendorImportStatus::Succeeded_Warnings;

        return int642int(catVendorCatalogMaintenanceRequest.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalUploaded</Name>
				<Source><![CDATA[
    display CatCatalogTotalUploaded totalUploaded()
    {
        CatVendorCatalogMaintenanceRequest catVendorCatalogMaintenanceRequest;

        select count(RecId) from catVendorCatalogMaintenanceRequest
            where catVendorCatalogMaintenanceRequest.VendorCatalog == this.RecId;

        return int642int(catVendorCatalogMaintenanceRequest.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendorPartyName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the property name.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>DirPartyName</c> data type.
    /// </returns>
    display CatVendorName vendorPartyName()
    {
        DirPartyTable  dirPartyTable;
        DirPartyName   dirPartyName;

        if (this.VendorParty)
        {
            select firstonly Name from dirPartyTable where dirPartyTable.RecId == this.VendorParty;
            dirPartyName = dirPartyTable.Name;
        }
        else
        {
            this.VendorParty = VendTable::find(DirPersonUserEx::vendAccount(DirPersonUser::current())).Party;
            dirPartyName = DirPartyTable::findRec(this.VendorParty).Name;
        }

        return dirPartyName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record with the given <c>RefRecId</c> _vendorParty and <c>CatVendorCatalogName</c> _catalaogName exists.
    /// </summary>
    /// <param  name='_vendorParty'>
    /// An instance of the <c>RefRecId</c> data type.
    /// </param>
    /// <param  name='_catalaogName'>
    /// An instance of the <c>CatVendorCatalogName</c> data type.
    /// </param>
    /// <returns>
    /// <c>true</c> if the record was found; otherwise, <c>false</c>.
    /// </returns>
    public static boolean checkExist(RefRecId _vendorParty, CatVendorCatalogName _catalaogName)
    {
        if (!CatVendorCatalog::exist(_vendorParty, _catalaogName))
        {
            return checkFailed(strfmt(CatVendorCatalog::txtNotExist(), _vendorParty));
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>CatVendorCatalog</c> table exists.
    /// </summary>
    /// <param name="_vendorParty">
    ///    The <c>RefRecId</c> data type of the record to check for existence.
    /// </param>
    /// <param name="_catalaogName">
    ///    The <c>CatVendorCatalogName</c> data type of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the record was found; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _vendorParty, CatVendorCatalogName _catalaogName)
    {
        return (CatVendorCatalog::find(_vendorParty, _catalaogName).VendorParty != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record with the given <c>RefRecId</c> _vendorParty and <c>CatVendorCatalogName</c> _catalaogName.
    /// </summary>
    /// <param  name='_vendorParty'>
    /// An instance of the <c>RefRecId</c> data type.
    /// </param>
    /// <param  name='_catalaogName'>
    /// An instance of the <c>CatVendorCatalogName</c> data type.
    /// </param>
    /// <param  name='_forUpdate'>
    /// An instance of the <c>boolean</c> data type.
    /// </param>
    /// <param  name='_concurrencyModel'>
    /// An instance of the <c>ConcurrencyModel</c> data type.
    /// </param>
    /// <returns>
    /// An instance of the <c>CatVendorCatalog</c> data type.
    /// </returns>
    public static CatVendorCatalog find(RefRecId             _vendorParty,
                                        CatVendorCatalogName _catalaogName,
                                        boolean              _forUpdate = false,
                                        ConcurrencyModel     _concurrencyModel = ConcurrencyModel::Auto)
    {
        CatVendorCatalog  catVendorCatalog;

        if (_vendorParty && _catalaogName)
        {
            if (_forUpdate)
            {
                catVendorCatalog.selectForUpdate(_forUpdate);

                if (_concurrencyModel != ConcurrencyModel::Auto)
                {
                    catVendorCatalog.concurrencyModel(_concurrencyModel);
                }
            }

            catVendorCatalog.selectLocked(_forUpdate);

            select firstonly catVendorCatalog where catVendorCatalog.VendorParty == _vendorParty && catVendorCatalog.Name == _catalaogName;
        }

        return catVendorCatalog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static CatVendorCatalog findRecId(recId _recId, boolean _update = false)
    {
        CatVendorCatalog catVendorCatalog;

        if (_recId)
        {
            catVendorCatalog.selectForUpdate(_update);
            select firstonly catVendorCatalog where catVendorCatalog.RecId == _recId;
        }

        return catVendorCatalog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendorExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a vendor exists for a catalog.
    /// </summary>
    /// <param name="_catalogID">
    /// The record ID of the <c>CatVendorCatalog</c> record.
    /// </param>
    /// <returns>
    /// true if a vendor exists; otherwise, false.
    /// </returns>
    public static boolean isVendorExist(RefRecId _catalogID)
    {
        CatVendorCatalog    catVendorCatalog;
        VendTable           vendTable;

        Select crossCompany recId,VendorParty from catVendorCatalog
                where catVendorCatalog.RecId == _catalogID
            join firstOnly recId from vendTable
                where vendTable.Party == catVendorCatalog.VendorParty;

        return (vendTable ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static str txtNotExist()
    {
        return "@SYS135593";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ProcEssentials</ConfigurationKey>
	<DeveloperDocumentation>@SYS320621</DeveloperDocumentation>
	<Label>@SYS135599</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>VendorParty</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProcurementAndSourcing</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>NameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CatVendorCatalogMaintenanceRequest</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CatVendorCatalogMaintenanceRequest</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CatVendorReleaseCatalog</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CatVendorReleaseCatalog</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DateDeleted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>isDeleted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>isAutomatedApprovalEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorParty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorParty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Miscellaneous</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DateDeleted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>isDeleted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>isAutomatedApprovalEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorParty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SchemaInfo</Name>
			<Label>@SYS135609</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DateDeleted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CatVendorDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CatVendorCatalogDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>isAutomatedApprovalEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CatVendorCatalogAutomatedApproval</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>isDeleted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS330304</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CatVendorCatalogName</ExtendedDataType>
			<Label>@SYS136511</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendorParty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS191122</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendorParty</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DirPartyTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VendorParty</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DirPartyTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DirPartyTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DirPartyTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>DirPartyTable_CatVendorCatalog</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendorParty</Name>
					<Field>VendorParty</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>