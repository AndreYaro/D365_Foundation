<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EUSalesList</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EUSalesList extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    boolean check(boolean toInfolog = true, str prefix = getPrefix())
    {
        boolean ok = true;
        container   error;
        #ISOCountryRegionCodesEuro_W

        this.Log = '';

        if (! this.vatNum)
        {
            error += [Exception::Warning, "@SYS58774"+'\t'+prefix+'\t'+"@SYS74693"];
        }

        if (this.CountryRegionId)
        {
            boolean isInEU;

            if (FeatureStateProvider::isFeatureEnabled(IntrastatCountryRegionStateFeature::instance()))
            {
                IntrastatExternalCode intrastatCode = subStr(this.VATNum, 1, 2);
                if (intrastatCode && match('^[a-zA-Z]*$', intrastatCode))
                {
                    IntrastatStateParameters intrastatStateParameters;
                    select firstonly CountryRegionType from intrastatStateParameters
                        where intrastatStateParameters.IntrastatCode == intrastatCode
                            && intrastatStateParameters.CountryRegionId == this.CountryRegionId;

                    if (intrastatStateParameters)
                    {
                        isInEU = intrastatStateParameters.CountryRegionType == CountryRegionType::EU;
                    }
                    else
                    {
                        isInEU = IntrastatCountryRegionParameters::isInEU(this.CountryRegionId);
                    }
                }
                else
                {
                    isInEU = IntrastatCountryRegionParameters::isInEU(this.CountryRegionId);
                }
            }
            else
            {
                isInEU = IntrastatCountryRegionParameters::isInEU(this.CountryRegionId);
            }

            if (!this.Listcode && isInEU)
            {
                error += [Exception::Warning, "@SYS58774"+'\t'+prefix+'\t'+strFmt("@SYS18906",this.Invoice)];
            }

            if (this.Listcode && !isInEU)
            {
                error += [Exception::Warning, "@SYS58774"+'\t'+prefix+'\t'+strFmt("@SYS21353",this.CountryRegionId)];
            }

            if (!TaxCountryRegionParameters::find(this.CountryRegionId).SalesTaxCode
                && conFind(#EuropeanUnionCountries, this.CountryRegionId))
            {
                error += [Exception::Warning, "@SYS58774"+'\t'+prefix+'\t'+strFmt("@SYS58808",this.CountryRegionId)];
            }
        }
        else
        {
            error += [Exception::Warning, "@SYS58774"+'\t'+prefix+'\t'+"@SYS74694"];
        }

        if (this.InvestmentAmountMST || this.NotAssignedAmountMST)
        {
            error += [Exception::Warning, "@SYS58774"+'\t'+prefix+'\t'+ "@SYS339954"];
        }

        if (conLen(error))
        {
            if (toInfolog)
            {
                InfoLogExtension::showMessagesFromContainer(error);
            }

            this.Log = Info::infoCon2Str(error);
            ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearReferences</Name>
				<Source><![CDATA[
    /*
        Clear reference from journals to EUSalesList
    */
    void clearReferences()
    {
        CustInvoiceJour    custInvoiceJour;
        ProjInvoiceJour    projInvoiceJour;
        CustSettlement     custSettlement;
        CustTrans          custSettlementTrans;
        VendInvoiceJour    vendInvoiceJour;
        VendSettlement     vendSettlement;
        VendTrans          vendSettlementTrans;
        InventTransferJour inventTransferJour;

        ttsbegin;

        if (!this.IsSettlement)
        {
            select forupdate firstonly custInvoiceJour
                where custInvoiceJour.euSalesList   == this.DispatchId &&
                      custInvoiceJour.InvoiceId     == this.Invoice;

            if (custInvoiceJour.RecId)
            {
                custInvoiceJour.euSalesList = '';
                custInvoiceJour.update();
            }

            select forupdate firstonly projInvoiceJour
                where projInvoiceJour.euSalesList   == this.DispatchId &&
                      projInvoiceJour.ProjInvoiceId == this.Invoice;

            if (projInvoiceJour.RecId)
            {
                projInvoiceJour.euSalesList = '';
                projInvoiceJour.update();
            }

            select forupdate firstonly RecId, euSalesList from  vendInvoiceJour
                where vendInvoiceJour.euSalesList   == this.DispatchId &&
                      vendInvoiceJour.InvoiceId     == this.Invoice;

            if (vendInvoiceJour.RecId)
            {
                vendInvoiceJour.euSalesList = '';
                vendInvoiceJour.update();
            }

            select forupdate firstonly RecId, euSalesList from inventTransferJour
                where inventTransferJour.euSalesList == this.DispatchId
                    && inventTransferJour.TransferId == this.Invoice;

            if (inventTransferJour.RecId)
            {
                inventTransferJour.euSalesList = '';
                inventTransferJour.update();
            }			
        }
        else
        {
            select forupdate firstonly custSettlement
                where custSettlement.euSalesList == this.DispatchId
            exists join custSettlementTrans
                where custSettlementTrans.RecId   == custSettlement.TransRecId
                   && custSettlementTrans.Invoice == this.Invoice;

            if (custSettlement.RecId)
            {
                custSettlement.euSalesList = '';
                custSettlement.update();
            }

            select forupdate firstonly RecId, euSalesList from vendSettlement
                where vendSettlement.euSalesList == this.DispatchId
            exists join vendSettlementTrans
                where vendSettlementTrans.RecId    == vendSettlement.TransRecId
                    && vendSettlementTrans.Invoice == this.Invoice;

            if (vendSettlement.RecId)
            {
                vendSettlement.euSalesList = '';
                vendSettlement.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTable</Name>
				<Source><![CDATA[
    CustTable custTable(boolean _update = false)
    {
        return CustTable::find(this.AccountNum, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ttsbegin;
        this.clearReferences();
        super();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        #ISOCountryRegionCodes

        CustTable   custTable;
        VendTable   vendTable;

        boolean isCountryRegionES = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]);

        super(_fieldId);
        
        switch (_fieldId)
        {
            case fieldNum(EUSalesList, TransDate):
                this.setQuarterAndYear();
                break;

            case fieldNum(EUSalesList, AccountNum):
                if (this.Direction == ModuleSalesPurch::Sales)
                {
                    custTable               = this.custTable();
                    this.vatNum             = custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, this.TransDate);
                    this.CountryRegionId    = custTable.postalAddress().CountryRegionId;
                }
                else
                {
                    vendTable               = this.vendTable();
                    this.vatNum             = vendTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, this.TransDate);
                    this.CountryRegionId    = vendTable.postalAddress().CountryRegionId;
                }

                break;
            
            case fieldNum(EUSalesList, Direction):
                this.AccountNum      = "";
                this.vatNum          = "";
                this.CountryRegionId = "";
                if (isCountryRegionES && this.Direction == ModuleSalesPurch::Purch)
                {
                    this.DeliveryCode_ES = TaxReport349DeliveryCode::NormalDelivery;
                }
                break;
            
            case fieldNum(EUSalesList, AmountMST):
                if (isCountryRegionES && this.AmountMST == 0)
                {
                    this.DeliveryCode_ES = TaxReport349DeliveryCode::NormalDelivery;
                }
                break;
            
            case fieldNum(EUSalesList, Listcode):
                if (isCountryRegionES && (this.Listcode == Listcode::TriangularEUTrade || this.Listcode == Listcode::TriangularProductionOnToll))
                {
                    this.DeliveryCode_ES = TaxReport349DeliveryCode::NormalDelivery;
                }
                break;

            case fieldNum(EUSalesList, Corrected):
                if (isCountryRegionES && this.Corrected && !this.CorrectionYear)
                {
                    this.initItemCorrectionsControls();
                }
                break;
            
            case fieldNum(EUSalesList, CorrectedServices):
                if (isCountryRegionES && this.CorrectedServices && !this.CorrectionYearServices)
                {
                    this.initServiceCorrectionsControls();
                }
                break;
            
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQuarter</Name>
				<Source><![CDATA[
    void setQuarter()
    {
        this.TransQuarter = EUSalesList::date2Quarter(this.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQuarterAndYear</Name>
				<Source><![CDATA[
    void setQuarterAndYear()
    {
        this.setQuarter();
        this.setYear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setYear</Name>
				<Source><![CDATA[
    void setYear()
    {
        this.TransYear = year(this.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean validateField(FieldId p1)
    {
        boolean ret;

        ret = super(p1);

        if (ret)
        {
            switch (p1)
            {
                case fieldNum(EUSalesList, vatNum)  :   ret = TaxVATNumTable::checkVATNum(this.vatNum, this, p1);
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        #ISOCountryRegionCodes
        boolean ret;
        ret     = super();

        setPrefix("@SYS38561");

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
        {
            if (this.Corrected)
            {
                setPrefix("@SYS15649");
                if (this.CorrectionPeriod == EUSalesListCorrectionPeriod_ES::Month
                        && (this.CorrectionMonthOrQuarter < MonthsOfYear::January
                            || this.CorrectionMonthOrQuarter > MonthsOfYear::December)
                    || this.CorrectionPeriod == EUSalesListCorrectionPeriod_ES::Quarter
                        && (this.CorrectionMonthOrQuarter < QuarterOfYear::Q1
                            || this.CorrectionMonthOrQuarter > QuarterOfYear::Q4))
                {
                    ret = checkFailed("@SYS335866");
                }
            }

            if (this.CorrectedServices)
            {
                setPrefix("@SYS35620");
                if (this.CorrectionPeriodServices == EUSalesListCorrectionPeriod_ES::Month
                        && (this.CorrectionMonthOrQuarterServices < MonthsOfYear::January
                            || this.CorrectionMonthOrQuarterServices > MonthsOfYear::December)
                    || this.CorrectionPeriodServices == EUSalesListCorrectionPeriod_ES::Quarter
                        && (this.CorrectionMonthOrQuarterServices < QuarterOfYear::Q1
                            || this.CorrectionMonthOrQuarterServices > QuarterOfYear::Q4))
                {
                    ret = checkFailed("@SYS335866");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTable</Name>
				<Source><![CDATA[
    public VendTable vendTable(boolean _update = false)
    {
        return VendTable::find(this.AccountNum, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(ListStatus status, ListDispatchId dispatchId, ListSeqNum seqNum )
    {
        boolean ret = true;
        ;

        if (!EUSalesList::exist(status, dispatchId, seqNum))
        {
            ret = checkFailed(strFmt(EUSalesList::txtNotExist(), status, dispatchId, seqNum));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>date2Quarter</Name>
				<Source><![CDATA[
    static Quarter date2Quarter(date _date)
    {
        int     intQuarter = date2Qtr(_date);
        Quarter quarter;

        switch (intQuarter)
        {
            case 1:
                quarter = Quarter::Q1;
                break;
            case 2:
                quarter = Quarter::Q2;
                break;
            case 3:
                quarter = Quarter::Q3;
                break;
            case 4:
                quarter = Quarter::Q4;
                break;
        }

        return quarter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(ListStatus status, ListDispatchId dispatchId, ListSeqNum seqNum )
    {
        boolean found;
        ;

        found = (select firstonly
                     RecId
                from
                     euSalesList
                 where
                     euSalesList.Status == status &&
                    euSalesList.DispatchId == dispatchId &&
                    euSalesList.SeqNum == seqNum).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>EUSalesList</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EUSalesList</c> table; otherwise, an empty record.
    /// </returns>
    public static EUSalesList find(
        RecId                   _recId,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        EUSalesList euSalesList;

        euSalesList.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            euSalesList.concurrencyModel(_concurrencyModel);
        }

        select firstonly euSalesList
            where
                euSalesList.RecId == _recId;

        return euSalesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDispatch</Name>
				<Source><![CDATA[
    public static EUSalesList findByDispatch(
        ListStatus status,
        ListDispatchId dispatchId,
        ListSeqNum seqNum ,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        EUSalesList euSalesList;

        euSalesList.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            euSalesList.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            euSalesList
            where
            euSalesList.Status == status &&
                    euSalesList.DispatchId == dispatchId &&
                    euSalesList.SeqNum == seqNum;

        return euSalesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxAllSeqNum</Name>
				<Source><![CDATA[
    static ListSeqNum maxAllSeqNum()
    {
        return (select maxof(SeqNum) from euSalesList).SeqNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxNum</Name>
				<Source><![CDATA[
    static  ListSeqNum  maxNum(ListDispatchId  dispatchId)
    {
        return (select maxof(SeqNum) from euSalesList
                    where euSalesList.DispatchId == dispatchId).SeqNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveListCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the proper the List code value based on the passed in Country region id.
    /// </summary>
    /// <param name="_deliveryCountryRegionId">
    /// The <c>LogisticsAddressCountryRegionId</c> for the delivery country/region.
    /// </param>
    /// <param name="_payerCountryRegionId">
    /// The <c>LogisticsAddressCountryRegionId</c> for the paying country/region, it is used to AP/AR and sale quotation transaction.
    /// </param>
    /// <param name="_custVendOrderAccount">
    /// OBSOLETE - The order account.
    /// </param>
    /// <param name="_custVendInvoiceAccount">
    /// OBSOLETE - The invoice account.
    /// </param>
    /// <returns>
    /// A <c>ListcodeId</c> value.
    /// </returns>
    /// <remarks>
    /// Note - The _payerCountryRegionId, _custVendOrderAccount and _custVendInvoiceAccount parameters
    /// are no longer used in determining the return value.
    /// </remarks>
    static ListcodeId resolveListCode(LogisticsAddressCountryRegionId  _deliveryCountryRegionId,
                                      LogisticsAddressCountryRegionId  _payerCountryRegionId   = '',
                                      CustVendAC                       _custVendOrderAccount   = '',
                                      CustVendAC                       _custVendInvoiceAccount = '')
    {
        ListcodeId  listcodeId;

        // _deliveryCountryRegionId is actually the suppliers country/region in AP scenarios.
        if (IntrastatCountryRegionParameters::isCountryRegionInEU(_deliveryCountryRegionId, _payerCountryRegionId))
        {
            listcodeId  = Listcode::EUTrade;
        }
        else
        {
            listcodeId  = Listcode::IncludeNot;
        }

        return listcodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveListCodeByCountryState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the proper the List code value based on the passed in the delivery address id and payer address.
    /// </summary>
    /// <param name = "_deliveryPostalAddress">
    /// The <c>LogisticsPostalAddress</c> for the delivery address.
    /// </param>
    /// <param name = "_payerPostalAddress">
    /// The <c>LogisticsPostalAddress</c> for the payer address.
    /// </param>
    /// <returns>
    /// A <c>ListcodeId</c> value.
    /// </returns>
    public static ListcodeId resolveListCodeByCountryState(LogisticsPostalAddress _deliveryPostalAddress, LogisticsPostalAddress _payerPostalAddress = null)
    {
        ListcodeId listCodeId;

        if (FeatureStateProvider::isFeatureEnabled(IntrastatCountryRegionStateFeature::instance()))
        {
            if (IntrastatCountryRegionParameters::isCountryRegionStateInEU(_deliveryPostalAddress, _payerPostalAddress))
            {
                listcodeId = Listcode::EUTrade;
            }
            else
            {
                listcodeId = Listcode::IncludeNot;
            }
        }
        else
        {
            listCodeId = EUSalesList::resolveListCode(LogisticsPostalAddress::findRecId(_deliveryPostalAddress.RecId).CountryRegionId,
                LogisticsPostalAddress::findRecId(_payerPostalAddress.RecId).CountryRegionId);
        }

        return listCodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS103259";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initItemCorrectionsControls</Name>
				<Source><![CDATA[
    private void initItemCorrectionsControls()
    {
        this.CorrectionYear              = year(this.TransDate);
        this.CorrectionPeriod            = EUSalesListCorrectionPeriod_ES::Month;
        this.CorrectionMonthOrQuarter    = mthOfYr(this.TransDate);
        this.TaxRep349AmountMstPrev      = this.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initServiceCorrectionsControls</Name>
				<Source><![CDATA[
    private void initServiceCorrectionsControls()
    {
        this.CorrectionYearServices              = year(this.TransDate);
        this.CorrectionPeriodServices            = EUSalesListCorrectionPeriod_ES::Month;
        this.CorrectionMonthOrQuarterServices    = mthOfYr(this.TransDate);
        this.TaxRep349AmountMstPrevServices      = this.ServiceAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxID_lookup</Name>
				<Source><![CDATA[
    public static TaxRegistration taxID_lookup(FormReferenceControl _formControl)
    {
        Query query = EUSalesList::getTaxIdQuery();

        SysReferenceTableLookup lookUp = SysReferenceTableLookup::newParameters(tableNum(TaxRegistration), _formControl);
        lookUp.addLookupfield(fieldNum(TaxRegistration, RegistrationNumber));
        lookUp.addLookupfield(fieldNum(TaxRegistration, TaxRegistrationTypeApplicabilityRule));

        lookUp.parmQuery(query);
        return lookUp.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxIdQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares query for finding the tax registration numbers according to TaxRegistrationType TAXID and CompanyInfo.
    /// </summary>
    /// <returns>
    /// An instance of a user-defined <c>Query</c> class.
    /// </returns>
    internal static Query getTaxIdQuery()
    {
        Query query = new Query();
        QueryBuildDataSource qbdsRegistrationNumber;
        QueryBuildDataSource qbdsTaxRegistrationLegislationTypes;
        QueryBuildDataSource qbdsDirPartyLocation;

        CompanyInfo companyInfo = CompanyInfo::find();

        query.validTimeStateDateRange(dateNull(), dateMax());

        qbdsRegistrationNumber = query.addDataSource(tableNum(TaxRegistration));

        qbdsTaxRegistrationLegislationTypes = qbdsRegistrationNumber.addDataSource(tableNum(TaxRegistrationLegislationTypes));
        qbdsTaxRegistrationLegislationTypes.joinMode(JoinMode::InnerJoin);
        qbdsTaxRegistrationLegislationTypes.relations(false);
        qbdsTaxRegistrationLegislationTypes.addLink(
            fieldNum(TaxRegistration, TaxRegistrationTypeApplicabilityRule),
            fieldNum(TaxRegistrationLegislationTypes, TaxRegistrationTypeApplicabilityRule));
        qbdsTaxRegistrationLegislationTypes.addRange(
            fieldNum(TaxRegistrationLegislationTypes, TaxRegistrationTypesList))
            .value(queryValue(TaxRegistrationTypesList::TAXID));

        qbdsDirPartyLocation = qbdsRegistrationNumber.addDataSource(tableNum(DirPartyLocation));
        qbdsDirPartyLocation.joinMode(JoinMode::InnerJoin);
        qbdsDirPartyLocation.relations(false);
        qbdsDirPartyLocation.addLink(
            fieldNum(TaxRegistration, DirPartyLocation),
            fieldNum(DirPartyLocation, RecId));
        qbdsDirPartyLocation.addRange(fieldNum(DirPartyLocation, Party)).value(queryValue(companyInfo.RecId));

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ForeignTrade</ConfigurationKey>
	<DeveloperDocumentation>@SYS123468</DeveloperDocumentation>
	<FormRef>EUSalesList</FormRef>
	<Label>@SYS17928</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>DispatchId</TitleField1>
	<TitleField2>SeqNum</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>DispatchIdx</ClusteredIndex>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>DispatchIdx</PrimaryIndex>
	<ReplacementKey>DispatchIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DispatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SeqNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Listcode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DispatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SeqNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsSettlement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectedServices</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Listcode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Invoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Direction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvestmentAmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceAmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NotAssignedAmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Corrected</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Log</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Correction</Name>
			<Label>@SYS4768</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CorrectionSign</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectionYear</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectionPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectionMonthOrQuarter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxRep349AmountMstPrev</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectionDeclarationType_BE</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectionListcode_FI</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CorrectionReasonGroup_HU</Name>
			<Label>@GLS112057</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CorrectionWrongRegNum_HU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectionWrongAmount_HU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectionWrongPeriod_HU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CorrectionServices</Name>
			<Label>@SYS38561</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CorrectionSignServices</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectionYearServices</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectionPeriodServices</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectionMonthOrQuarterServices</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxRep349AmountMstPrevServices</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeliveryCode</Name>
			<Label>@SYS4083090</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryCode_ES</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DispatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SeqNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference_LV</Name>
			<Label>@SYS15217</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ClosingDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxExemptNumber</Name>
			<Label>@SYS8946</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TimeOfCreation</Name>
			<Label>@SYS26433</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransYear</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransQuarter</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AccountInformation</Name>
			<Label>@SYS120808</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CorrectionCountry_FI</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectionVATNum_FI</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxID</Name>
			<Label>@SYS125640</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxReportingCurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS313151</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ClosingDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>LV</CountryRegionCodes>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@GLS113239</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Corrected</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Correct</ExtendedDataType>
			<Label>@SYS23175</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CorrectedServices</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>ES</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS35620</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CorrectionDeclarationType_BE</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<FeatureClass>EUSalesListByTaxId_BEToggle</FeatureClass>
			<Label>@SYS96725</Label>
			<EnumType>MonthQuarter</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CorrectionMonthOrQuarter</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EUSalesListCorrectionMonthOrQuarter_ES</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CorrectionMonthOrQuarterServices</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EUSalesListCorrectionMonthOrQuarter_ES</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CorrectionPeriod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>EUSalesListCorrectionPeriod_ES</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CorrectionPeriodServices</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>EUSalesListCorrectionPeriod_ES</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CorrectionSign</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>ES</CountryRegionCodes>
			<EnumType>TaxRep349Sign</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CorrectionSignServices</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>ES</CountryRegionCodes>
			<EnumType>TaxRep349Sign</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CorrectionWrongAmount_HU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CorrectionWrongAmount_HU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CorrectionWrongPeriod_HU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CorrectionWrongPeriod_HU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CorrectionWrongRegNum_HU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CorrectionWrongRegNum_HU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CorrectionYear</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>ES</CountryRegionCodes>
			<ExtendedDataType>TaxRep349Year</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CorrectionYearServices</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>ES</CountryRegionCodes>
			<ExtendedDataType>TaxRep349Year</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountryRegionId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsAddressCountryRegionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DeliveryCode_ES</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxReport349DeliveryCode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Direction</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS68014</Label>
			<EnumType>ModuleSalesPurch</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DispatchId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ListDispatchId</ExtendedDataType>
			<FeatureClass>EUSalesListToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvestmentAmountMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS313157</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Invoice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsSettlement</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS10163</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Listcode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ListcodeId</ExtendedDataType>
			<EnumType>Listcode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Log</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NotAssignedAmountMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS313155</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OriginalRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>LV</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SeqNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ListSeqNum</ExtendedDataType>
			<Label>@SYS13864</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ServiceAmountMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS313153</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ListStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxRep349AmountMstPrev</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>ES</CountryRegionCodes>
			<ExtendedDataType>TaxRep349AmountMSTPrev</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxRep349AmountMstPrevServices</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>ES</CountryRegionCodes>
			<ExtendedDataType>TaxRep349AmountMSTPrev</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS7354</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransQuarter</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EUSalesListQuarter</ExtendedDataType>
			<FeatureClass>EUSalesListToggle</FeatureClass>
			<EnumType>Quarter</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TransYear</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EUSalesListYear</ExtendedDataType>
			<FeatureClass>EUSalesListToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VATNum</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VATNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CorrectionCountry_FI</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>FI</CountryRegionCodes>
			<ExtendedDataType>LogisticsAddressCountryRegionId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Label>@SYP4881569</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CorrectionListcode_FI</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>FI</CountryRegionCodes>
			<ExtendedDataType>ListcodeId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Label>@SYP4881571</Label>
			<Visible>No</Visible>
			<EnumType>Listcode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CorrectionVATNum_FI</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>FI</CountryRegionCodes>
			<ExtendedDataType>VATNum</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Label>@SYP4881567</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxRegistrationRecId</ExtendedDataType>
			<FeatureClass>EUSalesListReportingByTaxIdToggle</FeatureClass>
			<Label>@SYS969</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxReportingCurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<FeatureClass>EUSalesListReportingByTaxIdToggle</FeatureClass>
			<Label>@EUSalesListCommon:TaxReportingCurrency</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DispatchIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DispatchId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SeqNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustTable_AccountNum</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Direction</Name>
					<Field>Direction</Field>
					<ValueStr>ModuleSalesPurch::Sales</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EUSalesList</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EUSalesList</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OriginalRecId</Name>
					<Field>OriginalRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsAddressCountryRegion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryRegionId</Name>
					<SourceEDT>LogisticsAddressCountryRegionId</SourceEDT>
					<Field>CountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable_AccountNum</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Direction</Name>
					<Field>Direction</Field>
					<ValueStr>ModuleSalesPurch::Purch</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsAddressCountryRegionFI</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressCountryRegionFI</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EUSalesList</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CorrectionCountry_FI</Name>
					<SourceEDT>LogisticsAddressCountryRegionId</SourceEDT>
					<Field>CorrectionCountry_FI</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxID</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TaxRegistration</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxRegistration</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxRegistration_TaxInformation_IN</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxID</Name>
					<Field>TaxID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecID</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReportingCurrencyCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxReportingCurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>TaxReportingCurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>