<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetBookInUseForPosting</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetBookInUseForPosting extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findByAssetIdAndBookId</Name>
				<Source><![CDATA[
    internal static AssetBookInUseForPosting findByAssetIdAndBookId(
        AssetId _assetId,
        AssetBookId _assetBookId,
        boolean _forUpdate = false)
    {
        AssetBookInUseForPosting AssetBookInUseForPosting;

        if (!_assetId || !_assetBookId)
        {
            return AssetBookInUseForPosting;
        }

        AssetBookInUseForPosting.selectForUpdate(_forUpdate);

        select firstonly AssetBookInUseForPosting
            where AssetBookInUseForPosting.AssetId == _assetId
               && AssetBookInUseForPosting.BookId == _assetBookId;

        return AssetBookInUseForPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAssetBooksInSingleUseForJournal</Name>
				<Source><![CDATA[
    internal static void deleteAssetBooksInSingleUseForJournal(LedgerJournalId _journalNum)
    {
        try
        {
            ttsbegin;

            AssetBookInUseForPosting assetBookInUseForPosting;

            delete_from assetBookInUseForPosting
                where assetBookInUseForPosting.JournalNum == _journalNum;

            ttscommit;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= 2)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAssetBooksInSingleUse</Name>
				<Source><![CDATA[
    internal static void deleteAssetBooksInSingleUse()
    {
        try
        {
            ttsbegin;

            AssetBookInUseForPosting assetBookInUseForPosting;

            delete_from assetBookInUseForPosting;

            ttscommit;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= 2)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAssetBooksInSingleUseForAssetBook</Name>
				<Source><![CDATA[
    internal static void deleteAssetBooksInSingleUseForAssetBook(AssetId _assetId, AssetBookId _bookId)
    {
        try
        {
            ttsbegin;

            AssetBookInUseForPosting assetBookInUseForPosting;

            delete_from assetBookInUseForPosting
                where assetBookInUseForPosting.AssetId == _assetId &&
                    assetBookInUseForPosting.BookId == _bookId;

            ttscommit;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= 2)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecordsForAssetBookInSingleUse</Name>
				<Source><![CDATA[
    internal static void insertRecordsForAssetBookInSingleUse(RecId _batchJobId, LedgerJournalId _journalNum)
    {
        LedgerJournalTrans_Asset ledgerJournalTransAsset;
        LedgerJournalTrans ledgerJournalTrans;
        AssetBookInUseForPosting assetBookInUseForPosting;
        NoYes noYes = NoYes::Yes;

        ttsbegin;

        insert_recordset assetBookInUseForPosting (AssetId, BookId, AssetBookInSingleUse, BatchJobId, JournalNum)
        select AssetId, BookId, noYes, _batchJobId, _journalNum
            from ledgerJournalTransAsset
            group by AssetId, BookId
            join ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == _journalNum
                && ledgerJournalTrans.RecId == ledgerJournalTransAsset.RefRecId
                && ledgerJournalTransAsset.TransType == AssetTransTypeJournal::Depreciation;

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@FixedAssets:FA_MessageDeveloper_AssetBookInUseForPosting</DeveloperDocumentation>
	<Label>@FixedAssets:FA_TableTitle_AssetBookInUseForPosting</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>FixedAssets</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BookId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetBookId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AssetBookInSingleUse</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AssetBookInSingleUse</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BatchJobId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerJournalId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AssetIdBookIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AssetId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BookId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>AssetBook</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>AssetBook</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BookId</Name>
					<Field>BookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>