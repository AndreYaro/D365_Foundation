<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResReferenceValue</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResReferenceValue extends EcoResValue
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>compareTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares the current record against a specified record value.
    /// </summary>
    /// <param name="_value">
    /// The specified <c>EcoResValue</c> value.
    /// </param>
    /// <returns>
    /// A <c>0</c> if the records are the same; otherwise <c>-1</c>.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The records are not the same type.
    /// </exception>
    public int compareTo(EcoResValue _value)
    {
        int                     ret = -1;
        EcoResReferenceValue    argValue;

        //validates the type and throws an error if they are not the same
        super(_value);

        argValue = _value as EcoResReferenceValue;

        if (this.RefRecId == argValue.RefRecId
            && this.RefTableId == argValue.RefTableId
            && this.RefFieldId == argValue.RefFieldId)
        {
            ret = 0; // 0 is true for this method
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStringValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string representation of the current record.
    /// </summary>
    /// <returns>
    /// The string representation of the current record.
    /// </returns>
    public str getStringValue()
    {
        str ret = "";

        ret = strFmt('%1', this.getValue());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the current record.
    /// </summary>
    /// <returns>
    /// The value of the specified field for the specified record.
    /// </returns>
    public anytype getValue()
    {
        if (this.RefTableId && this.RefFieldId && this.RefRecId)
        {
            return EcoResReferenceValue::findValueByFieldAndRecId(
                this.RefTableId,
                this.RefFieldId,
                this.RefRecId);
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcDuplicate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the current record.
    /// </summary>
    /// <returns>
    /// The <c>RefRecId</c> value of the duplicated record.
    /// </returns>
    public RefRecId pcDuplicate()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcGetStringValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the string representation of the current record that is compatible with the product
    /// configuration.
    /// </summary>
    /// <returns>
    /// The string representation of the current record.
    /// </returns>
    public str pcGetStringValue()
    {
        super();
        return this.getStringValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReferenceValueFromForeignKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>EcoResReferenceValue</c> record by using the specified field ID and optional
    /// value.
    /// </summary>
    /// <param name="_tableId">
    /// The ID of the table to reference.
    /// </param>
    /// <param name="_fieldId">
    /// The ID of the field to reference.
    /// </param>
    /// <param name="_fieldValue">
    /// An optional value that is used to find the record to reference.
    /// </param>
    public void setReferenceValueFromForeignKey(TableId _tableId, FieldId _fieldId, anytype _fieldValue = null)
    {
        TableId     foreignTable;
        FieldId     foreignField;
        RefRecId    foreignRecId;
        DictRelation relation = EcoResReferenceValue::getRelationOnField(_tableId, _fieldId);

        if (relation)
        {
            foreignTable  = relation.externTable();
            foreignField  = relation.lineExternTableValue(1);
            foreignRecId = (!_fieldValue ? 0
                        : EcoResReferenceValue::findRecIdByFieldAndValue(foreignTable, foreignField, _fieldValue));

            this.RefTableId = foreignTable;
            this.RefFieldId = foreignField;
            this.RefRecId   = foreignRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record occurs in the <c>EcoResReferenceValue</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The ID of the record to find.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (EcoResReferenceValue::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>EcoResReferenceValue</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>EcoResReferenceValue</c> table; otherwise, an empty record.
    /// </returns>
    public static EcoResReferenceValue find(RefRecId _recId, boolean _forupdate = false)
    {
        EcoResReferenceValue record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecIdByFieldAndValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record for a specified table, field, and value.
    /// </summary>
    /// <param name="_tableId">
    /// The ID of the table to search.
    /// </param>
    /// <param name="_fieldId">
    /// The ID of the field to find.
    /// </param>
    /// <param name="_fieldValue">
    /// The value to find.
    /// </param>
    /// <returns>
    /// The ID of a record for the specified table, field, and value.
    /// </returns>
    /// <remarks>
    /// This method can only be used on a Unique Key field.
    /// </remarks>
    public static RefRecId findRecIdByFieldAndValue(TableId _tableId, FieldId _fieldId, anytype _fieldValue)
    {
        Common referenceRecord;

        Query q = new Query();
        QueryBuildDataSource qbds = q.addDataSource(_tableId);
        QueryBuildRange qbr = qbds.addRange(_fieldId);
        QueryRun qr;

        qbr.value(queryValue(_fieldValue));
        qr = new QueryRun(q);
        qr.next();
        referenceRecord = qr.getNo(1);

        return referenceRecord.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findValueByFieldAndRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a value for a specified table, field, and record.
    /// </summary>
    /// <param name="_tableId">
    /// The ID of the table to search.
    /// </param>
    /// <param name="_fieldId">
    /// The ID of the field that contains the value to find.
    /// </param>
    /// <param name="_recId">
    /// The ID of the record to find.
    /// </param>
    /// <returns>
    /// The value of the specified field, record, and table.
    /// </returns>
    public static anytype findValueByFieldAndRecId(TableId _tableId, FieldId _fieldId, RefRecId _recId)
    {
        Common referenceRecord;
        FieldId recIdFieldId = fieldNum(Common, recId);

        Query q = new Query();
        QueryBuildDataSource qbds = q.addDataSource(_tableId);
        QueryBuildRange qbr = qbds.addRange(recIdFieldId);
        QueryRun qr;

        qbr.value(queryValue(_recId));
        qr = new QueryRun(q);
        qr.next();
        referenceRecord = qr.getNo(1);

        return referenceRecord.(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelationOnField</Name>
				<Source><![CDATA[
        private static DictRelation getRelationOnField(TableId _tableId, FieldId _fieldId)
    {
        DictField fkField = new DictField(_tableId, _fieldId);
        DictRelation relation = new DictRelation(_tableId);

        // first search table relations. if none, set to EDT relation
        relation.loadFieldRelation(_fieldId);
        if (relation.externTable() == 0)
        {
            relation = fkField.relationObject();
        }

        return relation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readFromHashAndValue</Name>
				<Source><![CDATA[
    public EcoResValue readFromHashAndValue(boolean _forupdate = false)
    {
        EcoResReferenceValue ecoResReferenceValue;

        ecoResReferenceValue.selectForUpdate(_forupdate);
        select firstonly ecoResReferenceValue
            where ecoResReferenceValue.SHA1HashHex  == this.hashValue()
                && ecoResReferenceValue.RefFieldId  == this.RefFieldId
                && ecoResReferenceValue.RefRecId    == this.RefRecId
                && ecoResReferenceValue.RefTableId  == this.RefTableId;

        return ecoResReferenceValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hashKey</Name>
				<Source><![CDATA[
    protected str hashKey()
    {
        return strFmt('%1~%2~%3~', this.RefFieldId, this.RefRecId, this.RefTableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueFieldId</Name>
				<Source><![CDATA[
    public FieldId valueFieldId()
    {
        return fieldNum(EcoResReferenceValue, RefTableId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@RET5751</DeveloperDocumentation>
	<Label>@RET5750</Label>
	<TitleField1>RefTableId</TitleField1>
	<TitleField2>RefRecId</TitleField2>
    <AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Extends>EcoResValue</Extends>
	<Modules>ProductInformationManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefFieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefFieldId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FieldId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResAttribute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResAttribute</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResValue1_100472</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EcoResValue</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>