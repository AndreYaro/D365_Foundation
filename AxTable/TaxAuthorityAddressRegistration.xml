<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxAuthorityAddressRegistration</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxAuthorityAddressRegistration extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findByTaxAuthority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>TaxAuthorityRegistrationAddress</c> record.
    /// </summary>
    /// <param name = "_taxAuthority">The tax authority.</param>
    /// <param name = "_forUpdate">If true, then read the record for updating.</param>
    /// <returns>a <c>TaxAuthorityRegistrationAddress</c> record.</returns>
    public static TaxAuthorityAddressRegistration findByTaxAuthority(TaxAuthority _taxAuthority, boolean _forUpdate = false)
    {
        TaxAuthorityAddressRegistration taxAuthorityAddressRegistration;

        taxAuthorityAddressRegistration.selectForUpdate(_forUpdate);

        if (_taxAuthority)
        {
            select firstonly taxAuthorityAddressRegistration
                where taxAuthorityAddressRegistration.TaxAuthority == _taxAuthority;
        }

        return taxAuthorityAddressRegistration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpReferenceTaxRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Look up tax registration number.
    /// </summary>
    /// <param name="_formControl">
    ///     The control on which to perform lookup.
    /// </param>
    /// <param name="_LogisticsLocationRecId">
    ///     Show lookup based on the selected location.
    /// </param>
    /// <returns>
    ///     Returns a <c>TaxRegistration</c> buffer.
    /// </returns>
    public static TaxRegistration lookUpReferenceTaxRegistration(
        FormReferenceControl _formControl,
        RecId _LogisticsLocationRecId)
    {
        LogisticsPostalAddress address;

        if (_LogisticsLocationRecId)
        {
            address = LogisticsPostalAddress::findRecId(_LogisticsLocationRecId);
        }
        return TaxAuthorityAddressRegistration::lookUpTaxRegistrationWithAddress(_formControl, address);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpTaxRegistrationWithAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Look up tax registration number.
    /// </summary>
    /// <param name="_formControl">
    ///     The control on which to perform lookup.
    /// </param>
    /// <param name="_logisticsPostalAddress">
    ///     Show lookup based on the selected location.
    /// </param>
    /// <returns>
    ///     Returns a <c>TaxRegistration</c> buffer.
    /// </returns>
    public static TaxRegistration lookUpTaxRegistrationWithAddress(
        FormReferenceControl _formControl,
        LogisticsPostalAddress _logisticsPostalAddress)
    {
        SysReferenceTableLookup             lookUp;
        Query                               query = new Query();
        QueryBuildDataSource                qbdsRegistrationNumber;
        QueryBuildDataSource                qbdsTaxRegistrationLegislationTypes;
        QueryBuildDataSource                qbdsDirPartyLocation;
        QueryBuildDataSource                qbdsTaxRegistrationTypeApplicabilityRule;
        

        lookUp = SysReferenceTableLookup::newParameters(tableNum(TaxRegistration), _formControl);
        lookUp.addLookupfield(fieldNum(TaxRegistration, RegistrationNumber));
        lookUp.addLookupfield(fieldNum(TaxRegistration, TaxRegistrationTypeApplicabilityRule));

        query.validTimeStateDateRange(dateNull(), dateMax());
        qbdsRegistrationNumber = query.addDataSource(tableNum(TaxRegistration));
        qbdsTaxRegistrationLegislationTypes = qbdsRegistrationNumber.addDataSource(tableNum(TaxRegistrationLegislationTypes));
        qbdsTaxRegistrationLegislationTypes.joinMode(JoinMode::InnerJoin);
        qbdsTaxRegistrationLegislationTypes.relations(false);
        qbdsTaxRegistrationLegislationTypes.addLink(
            fieldNum(TaxRegistration, TaxRegistrationTypeApplicabilityRule),
            fieldNum(TaxRegistrationLegislationTypes, TaxRegistrationTypeApplicabilityRule));
        qbdsTaxRegistrationLegislationTypes.addRange(
            fieldNum(TaxRegistrationLegislationTypes, TaxRegistrationTypesList))
            .value(queryValue(TaxRegistrationTypesList::TAXID));
        

        CompanyInfo companyInfo = CompanyInfo::find();
        
        qbdsDirPartyLocation = qbdsRegistrationNumber.addDataSource(tableNum(DirPartyLocation));
        qbdsDirPartyLocation.joinMode(JoinMode::InnerJoin);
        qbdsDirPartyLocation.relations(false);
        qbdsDirPartyLocation.addLink(
            fieldNum(TaxRegistration, DirPartyLocation),
            fieldNum(DirPartyLocation, RecId));
        qbdsDirPartyLocation.addRange(fieldNum(DirPartyLocation, Party)).value(queryValue(companyInfo.RecId));
        qbdsDirPartyLocation.addRange(fieldNum(DirPartyLocation, IsPostalAddress)).value(queryValue(NoYes::Yes));
        
        if (_logisticsPostalAddress.CountryRegionId)
        {
            QueryBuildDataSource qbdsTaxRegistrationRule = qbdsRegistrationNumber.addDataSource(tableNum(TaxRegistrationTypeApplicabilityRule));
            qbdsTaxRegistrationRule.joinMode(JoinMode::InnerJoin);
            qbdsTaxRegistrationRule.relations(false);
            qbdsTaxRegistrationRule.addLink(
                fieldNum(TaxRegistration, TaxRegistrationTypeApplicabilityRule),
                fieldNum(TaxRegistrationTypeApplicabilityRule, RecId));
            qbdsTaxRegistrationRule.addRange(fieldNum(TaxRegistrationTypeApplicabilityRule, CountryRegionId)).value(queryValue(_logisticsPostalAddress.CountryRegionId));
            
        }

        lookUp.parmQuery(query);

        return lookUp.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayNumberSequenceGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the number sequence group by TaxId.
    /// </summary>
    /// <param name = "_taxAuthorityAddressRegistration">The <c>TaxAuthorityAddressRegistration</c> line.</param>
    /// <returns>Number sequence group id.</returns>
    public display str displayNumberSequenceGroupId(TaxAuthorityAddressRegistration _taxAuthorityAddressRegistration)
    {
        return TaxRegistration::find(_taxAuthorityAddressRegistration.TaxId).NumberSequenceGroupId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<DeveloperDocumentation>@Tax_SettlementForTaxId:TaxAuthorityAddressRegistrationDevelopmentDocument</DeveloperDocumentation>
	<Label>@Tax_SettlementForTaxId:TaxAuthorityAddressRegistration</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Reference</TableGroup>
	<TitleField1>TaxAuthority</TitleField1>
	<TitleField2>TaxID</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxAuthorityRegistration</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxAuthority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxAuthority</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>TaxAuthority</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxID</Name>
			<ExtendedDataType>TaxRegistrationRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxAuthorityRegistrationIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxAuthority</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxAuthorityAddress</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxAuthorityAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxAuthorityAddress</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxAuthorityRegistrationAddress_TaxAuthorityAddress</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxAuthority</Name>
					<Field>TaxAuthority</Field>
					<RelatedField>TaxAuthority</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxID</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TaxRegistration</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxID</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxAuthorityRegiatrstionAddress_TaxID</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxID</Name>
					<Field>TaxID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>