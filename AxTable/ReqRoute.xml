<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqRoute</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqRoute extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>RecId</c> value of the activity that represents this record.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c> value of the activity that represents this record.
    /// </returns>
    public RefRecId activity()
    {
        RouteOpr                routeOpr;
        WrkCtrRouteOprActivity  wrkCtrRouteOprActivity;

        select firstonly Activity
        from             wrkCtrRouteOprActivity
        exists join      routeOpr
        where            wrkCtrRouteOprActivity.RouteOpr                == routeOpr.RecId
                         && wrkCtrRouteOprActivity.RouteOprDataAreaId   == routeOpr.DataAreaId
                         && routeOpr.RecId                              == this.RouteOprRefRecId;

        return wrkCtrRouteOprActivity.Activity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWrkCtrId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the ID of the resource used on the planned production route.
    /// </summary>
    /// <returns>
    ///     The ID of the resource used on the planned production route.
    /// </returns>
    public display WrkCtrIdDisplay displayWrkCtrId()
    {
        WrkCtrId        wrkCtrId;
        Set             scheduledResources              = this.scheduledResources();
        SetEnumerator   scheduledResourcesEnumerator    = scheduledResources.getEnumerator();

        while (scheduledResourcesEnumerator.moveNext())
        {
            if (wrkCtrId)
            {
                return "@SYS134532";
            }

            wrkCtrId = scheduledResourcesEnumerator.current();
        }

        return wrkCtrId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFirstOpr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates whether the current operation is a starting route operation.
    /// </summary>
    /// <returns>
    /// true if the record contains a starting operation; otherwise, false.
    /// </returns>
    public boolean isFirstOpr()
    {
        ReqRoute reqRoute;
        ReqRoute reqRoutePrev;

        select firstonly OprNum from reqRoute
            order by OprNum
            where   reqRoute.RefId          == this.RefId
                &&  reqRoute.PlanVersion    == this.PlanVersion
        notexists join reqRoutePrev
            where   reqRoutePrev.OprNumNext     == reqRoute.OprNum
                &&  reqRoutePrev.RefId          == this.RefId
                &&  reqRoutePrev.PlanVersion    == this.PlanVersion;

        return this.OprNum == reqRoute.OprNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsNext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next requirement route operation of this operation.
    /// </summary>
    /// <param name="_priority">
    /// The priority of the next operation in the route. The default is <c>RouteOprPriority::Primary</c>.
    /// </param>
    /// <returns>
    /// The next requirement reoute operation or an empty buffer if there is none (this is the last operation).
    /// </returns>
    public ReqRoute pdsNext(RouteOprPriority _priority = RouteOprPriority::Primary)
    {
        ReqRoute            reqRoute;

        if (this.OprNumNext)
        {
            select firstOnly reqRoute
                where reqRoute.PlanVersion      == this.PlanVersion
                    && reqRoute.RefId           == this.RefId
                    && reqRoute.OprPriority     == _priority
                    && reqRoute.OprNum          == this.OprNumNext;
        }

        return reqRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsPrev</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the previous requirement route operation of this operation.
    /// </summary>
    /// <param name="_priority">
    /// The priority of the previous operation in the route. The default is <c>RouteOprPriority::Primary</c>.
    /// </param>
    /// <returns>
    /// The previous requirement route operation or an empty buffer if there is none (this is the first operation).
    /// </returns>
    public ReqRoute pdsPrev(RouteOprPriority _priority = RouteOprPriority::Primary)
    {
        ReqRoute            reqRoute;

        if (this.OprNum)
        {
            select firstOnly reqRoute
                where reqRoute.PlanVersion      == this.PlanVersion
                    && reqRoute.RefId           == this.RefId
                    && reqRoute.OprPriority     == _priority
                    && reqRoute.OprNumNext      == this.OprNum;
        }

        return reqRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfCanBeSequenced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the route is allowed to be sequenced.
    /// </summary>
    /// <param name="_sequenceGroupId">
    /// The ID of the sequence group for which to determine if the item is applicable.
    /// </param>
    /// <returns>
    /// true if the route is allowed to be sequenced; otherwise, false.
    /// </returns>
    /// <remarks>
    /// In order to be sequenced the following conditions apply:
    /// <list type="bullet">
    /// <item>
    /// <description>There must be process time</description>
    /// </item>
    /// <item>
    /// <description>It must refer to a batch order</description>
    /// </item>
    /// <item>
    /// <description>The item must have a sequence value assigned</description>
    /// </item>
    /// <item>
    /// <description>The route is not allowed to contain any branches.</description>
    /// </item>
    /// </list>
    /// </remarks>
    public boolean pmfCanBeSequenced(PMFSequenceGroupId _sequenceGroupId)
    {
        ReqPO   reqPO;
        boolean ret = false;

        if (this.refRouteOpr().ProcessTime > 0)
        {
            reqPO = reqPO::find(this.PlanVersion, this.RefId);
            if (reqPO.RefType == ReqRefType::PmfPlannedProdBatch)
            {
                if (PMFSequenceItemTable::existForItem(_sequenceGroupId, reqPO.itemId))
                {
                    if (!ReqRoute::routeContainsBranches(this.RefId, this.PlanVersion))
                    {
                        ret = true;
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PMFSequencedResources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the IDs of the scheduled resources for this operation that also are sequenced.
    /// </summary>
    /// <returns>
    /// A set of resource IDs scheduled for this operation that also have a sequencing ID.
    /// </returns>
    public Set PMFSequencedResources()
    {
        WrkCtrCapRes    wrkCtrCapRes;
        WrkCtrTable     wrkCtrTable;
        Set             scheduledResources = new Set(Types::String);

        while select WrkCtrId from wrkCtrCapRes
            group by WrkCtrId
            where wrkCtrCapRes.RefId                  == this.RefId
               && wrkCtrCapRes.RefType                == WrkCtrCapRefType::PlannedOrder
               && wrkCtrCapRes.PlanVersion            == this.PlanVersion
               && wrkCtrCapRes.OprNum                 == this.OprNum
               && wrkCtrCapRes.OprPriority            == this.OprPriority
            exists join wrkCtrTable
                where wrkCtrTable.WrkCtrId            == wrkCtrCapRes.WrkCtrId
                    && wrkCtrTable.PMFSequenceGroupId != ""
        {
            scheduledResources.add(wrkCtrCapRes.WrkCtrId);
        }

        return scheduledResources;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refRouteOpr</Name>
				<Source><![CDATA[
    public RouteOpr refRouteOpr()
    {
        RouteOpr routeOpr;

        select routeOpr
            where routeOpr.RecId == this.RouteOprRefRecId;

        return routeOpr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeGroup</Name>
				<Source><![CDATA[
    public RouteGroup routeGroup(boolean _forUpdate = false)
    {
        return this.refRouteOpr().routeGroup(_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduledResources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the IDs of the resources that are used on the planned production route.
    /// </summary>
    /// <returns>
    /// The collection of the IDs of the resources that are used on a planned production route.
    /// </returns>
    public Set scheduledResources()
    {
        WrkCtrCapRes    wrkCtrCapRes;
        Set             scheduledResources = new Set(Types::String);

        while select WrkCtrId from wrkCtrCapRes
            group by WrkCtrId
            where wrkCtrCapRes.RefId        == this.RefId
               && wrkCtrCapRes.RefType      == WrkCtrCapRefType::PlannedOrder
               && wrkCtrCapRes.PlanVersion  == this.PlanVersion
               && wrkCtrCapRes.OprNum       == this.OprNum
               && wrkCtrCapRes.OprPriority  == this.OprPriority
        {
            scheduledResources.add(wrkCtrCapRes.WrkCtrId);
        }

        return scheduledResources;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accError</Name>
				<Source><![CDATA[
    public static Percent accError(
        RefRecId               _reqPlanVersionRefRecId,
        InventTransRefId       _refId,
        OprNum                 _oprNum
        )
    {
        Percent tmpAcc;

        if (_oprNum)
        {
            tmpAcc = (select reqRoute
                         where reqRoute.PlanVersion    == _reqPlanVersionRefRecId   &&
                               reqRoute.RefId          == _refId       &&
                               reqRoute.OprNum         == _oprNum      &&
                               reqRoute.OprPriority    == RouteOprPriority::Primary).AccError;
        }

        if (! tmpAcc)
        {
            tmpAcc = ReqRoute::findFirst(_reqPlanVersionRefRecId,_refId).AccError;
        }

        return tmpAcc > 0 ? tmpAcc : 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRefId</Name>
				<Source><![CDATA[
    static void deleteRefId(
        RefRecId            _reqPlanVersionRefRecId,
        InventTransRefId    _refNum
        )
    {
        ReqRoute reqRoute;

        ttsbegin;

        delete_from reqRoute
            where reqRoute.PlanVersion            == _reqPlanVersionRefRecId &&
                  reqRoute.RefId                  == _refNum;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record exists in the <c>ReqRoute</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        return _recId &&
               (select reqRoute
                    where reqRoute.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static ReqRoute find(
        RefRecId               _reqPlanVersionRefRecId,
        InventTransRefId       _refId,
        OprNum                 _oprNum,
        RouteOprPriority       _oprPriority,
        boolean                _forUpdate = false
        )
    {
        ReqRoute reqRoute;

        reqRoute.selectForUpdate(_forUpdate);

        if (_refId && _oprNum && _reqPlanVersionRefRecId)
        {
            select firstonly reqRoute
                where reqRoute.PlanVersion      == _reqPlanVersionRefRecId &&
                      reqRoute.RefId            == _refId        &&
                      reqRoute.OprNum           == _oprNum       &&
                      reqRoute.OprPriority      == _oprPriority;
        }

        return reqRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirst</Name>
				<Source><![CDATA[
    static ReqRoute findFirst(
        RefRecId                  _reqPlanVersionRefRecId,
        InventTransRefId          _refId,
        boolean                   _forUpdate = false)
    {
        ReqRoute reqRoute;

        reqRoute.selectForUpdate(_forUpdate);

        if (_refId && _reqPlanVersionRefRecId)
        {
            select firstonly reqRoute
                order by Level desc, OprNum
                where reqRoute.PlanVersion  == _reqPlanVersionRefRecId  &&
                      reqRoute.RefId        == _refId                   &&
                      reqRoute.OprPriority  == RouteOprPriority::Primary;
        }

        return reqRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLast</Name>
				<Source><![CDATA[
    static ReqRoute findLast(
        RefRecId               _reqPlanVersionRefRecId,
        InventTransRefId       _refId,
        boolean                _forUpdate = false)
    {
        ReqRoute reqRoute;

        reqRoute.selectForUpdate(_forUpdate);

        if (_refId && _reqPlanVersionRefRecId)
        {
            select firstonly reqRoute
                order by Level, OprNum desc
                where reqRoute.PlanVersion            == _reqPlanVersionRefRecId    &&
                      reqRoute.RefId                  == _refId                     &&
                      reqRoute.OprPriority            == RouteOprPriority::Primary;
        }

        return reqRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ReqRoute</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The specified record if found; otherwise, an empty buffer.
    /// </returns>
    public static ReqRoute findRecId(
        RecId   _recId,
        boolean _forUpdate = false)
    {
        ReqRoute reqRoute;

        if (_recId)
        {
            reqRoute.selectForUpdate(_forUpdate);

            select firstonly reqRoute
                where reqRoute.RecId == _recId;
        }

        return reqRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReqTransBOM</Name>
				<Source><![CDATA[
    public static ReqRoute findReqTransBOM(
        ReqTrans _reqTransBOM,
        boolean  _forupdate = false)
    {
        ReqRoute    reqRoute;

        if (_reqTransBOM.OprNum)
        {
            reqRoute = ReqRoute::find(_reqTransBOM.PlanVersion,_reqTransBOM.RefId,_reqTransBOM.OprNum,RouteOprPriority::Primary,_forupdate);
        }

        if (! reqRoute.RecId)
        {
            reqRoute = ReqRoute::findFirst(_reqTransBOM.PlanVersion,_reqTransBOM.RefId,_forupdate);
        }

        return reqRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeContainsBranches</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a route contains branches.
    /// </summary>
    /// <param name="_refId">
    /// The planned order reference id for which to determine branching.
    /// </param>
    /// <param name="_planVersion">
    /// The planned order version for which to determine branching.
    /// </param>
    /// <returns>
    /// true if the route contains branches; otherwise, false.
    /// </returns>
    public static boolean routeContainsBranches(InventRefId _refId, RefRecId _planVersion)
    {
        ReqRoute reqRoute;

        while select OprNumNext, OprPriority, count(RecId)
            from reqRoute
            group by OprNumNext, OprPriority
            where reqRoute.RefId == _refId
               && reqRoute.PlanVersion == _planVersion
        {
            if (reqRoute.RecId > 1)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || ReqEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Req</ConfigurationKey>
	<DeveloperDocumentation>@SYS124128</DeveloperDocumentation>
	<Label>@SYS25473</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>RefId</TitleField1>
	<TitleField2>OprNum</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RefIdx</ClusteredIndex>
	<Modules>MasterPlanning</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>RefIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>PMFSeqReqRouteChanges</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PMFSeqReqRouteChanges</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ReqRouteJob</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ReqRouteJob</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprPriority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprNumNext</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlanVersion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprPriority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Calculation</Name>
			<Label>@SYS7895</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OprNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprPriority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSC</Name>
			<Label>@PSC78</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PMFSequenced</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Route</Name>
			<Label>@SYS4190</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OprId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Level</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ErrorPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccError</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprNumNext</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Scheduling</Name>
			<Label>@SYS21838</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RouteOprRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RouteRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinkType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AccError</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteAccErrorPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ErrorPct</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteErrorPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SchedFromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>FromTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SchedFromTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Level</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteLevel</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LinkType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SchedJobLinkType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OprId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteOprId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>OprNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OprNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>OprNumNext</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OprNumNext</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OprPriority</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RouteOprPriority</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PlanVersion</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PMFSequenced</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PMFSequenced</ExtendedDataType>
			<EnumType>boolean</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RefId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RouteOprRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RouteOprRefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RouteRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RouteRefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SchedToDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>ToTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SchedToTime</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RefIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PlanVersion</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OprNum</DataField>
					<Optional>Yes</Optional>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OprPriority</DataField>
					<Optional>Yes</Optional>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PlanRefRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PlanVersion</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RouteOprRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PlanLevelIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PlanVersion</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Level</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OprNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OprPriority</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>RouteMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>OprNum</MapField>
					<MapFieldTo>OprNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OprNumNext</MapField>
					<MapFieldTo>OprNumNext</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OprId</MapField>
					<MapFieldTo>OprId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Level</MapField>
					<MapFieldTo>Level</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AccError</MapField>
					<MapFieldTo>AccError</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OprPriority</MapField>
					<MapFieldTo>OprPriority</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ErrorPct</MapField>
					<MapFieldTo>ErrorPct</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinkType</MapField>
					<MapFieldTo>LinkType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RefId</MapField>
					<MapFieldTo>RefId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PlanVersion</MapField>
					<MapFieldTo>PlanVersion</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JobPayType</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>Formula</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReqTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>RefType_Extern</Name>
					<RelatedField>RefType</RelatedField>
					<ValueStr>ReqRefType::PmfPlannedProdBatch</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefId</Name>
					<Field>RefId</Field>
					<RelatedField>RefId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PlanVersion</Name>
					<Field>PlanVersion</Field>
					<RelatedField>PlanVersion</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReqPlanVersion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ReqPlanVersion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PlanVersion</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PlannedRoute</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PlanVersion</Name>
					<Field>PlanVersion</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReqTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124129</EntityRelationshipRole>
			<RelatedTable>ReqTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>NetRequirement</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RequirementRoute</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>RefType_Extern</Name>
					<RelatedField>RefType</RelatedField>
					<ValueStr>ReqRefType::BOMPlannedOrder</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefId</Name>
					<Field>RefId</Field>
					<RelatedField>RefId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PlanVersion</Name>
					<Field>PlanVersion</Field>
					<RelatedField>PlanVersion</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Route</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Route</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RouteRefRecId</Name>
					<Field>RouteRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RouteOpr</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RouteOpr</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RouteOprRefRecId</Name>
					<Field>RouteOprRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RouteOprTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RouteOprTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OprId</Name>
					<Field>OprId</Field>
					<RelatedField>OprId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>OprIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>