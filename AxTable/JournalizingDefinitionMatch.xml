<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalizingDefinitionMatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JournalizingDefinitionMatch extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDuplicateRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether there are any duplicate records.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// A duplicate record exists for the current record.
    /// </exception>
    private void checkDuplicateRecord()
    {
        boolean                     isValid = true;
        JournalizingDefinitionMatch localJournalizingDefinitionMatch;

        select RecId from localJournalizingDefinitionMatch
            where localJournalizingDefinitionMatch.DimensionHierarchy == this.DimensionHierarchy &&
                  localJournalizingDefinitionMatch.LedgerDimension == this.LedgerDimension &&
                  localJournalizingDefinitionMatch.JournalizingDefinitionVersion == this.JournalizingDefinitionVersion &&
                  localJournalizingDefinitionMatch.RecId != this.RecId;

        if (localJournalizingDefinitionMatch.RecId)
        {
            throw error(strFmt("@SYS341688", LedgerDimensionFacade::getDisplayValueForLedgerDimension(this.LedgerDimension), this.JournalizingDefinitionPriority));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLedgerDimenison</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether there is an empty segment in the <c>LedgerDimensionAccount</c> object that is
    /// not present in the generated ledger dimension account; if there is an empty segment, an error
    /// message is displayed.
    /// </summary>
    /// <param name="_ledgerDimension">
    /// The ledger dimension to validate.
    /// </param>
    /// <returns>
    /// true if the ledger dimension is valid; otherwise, false.
    /// </returns>
    private boolean checkLedgerDimenison(LedgerDimensionAccount _ledgerDimension)
    {
        boolean                           isValid = true;
        boolean                           useBudgetDimensions;
        JournalizingDefinition            journalizingDefinition;
        JournalizingDefinitionVersion     journalizingDefinitionVersion;
        JournalizingDefinitionMatchDetail journalizingDefinitionMatchDetail;

        select JournalizingDefinitionModuleValue from journalizingDefinition
            exists join journalizingDefinitionVersion
            where journalizingDefinitionVersion.JournalizingDefinition == journalizingDefinition.RecId &&
                  journalizingDefinitionVersion.RecId == this.JournalizingDefinitionVersion;

        useBudgetDimensions = journalizingDefinition.JournalizingDefinitionModuleValue == JournalizingDefinitionModuleId::Budget;

        while select LedgerDimension from journalizingDefinitionMatchDetail
        where journalizingDefinitionMatchDetail.JournalizingDefinitionMatch == this.RecId
        {
            if (JournalizingDefinitionMatch::isDimensionMissing(_ledgerDimension, journalizingDefinitionMatchDetail.LedgerDimension, this.DimensionHierarchy, useBudgetDimensions))
            {
                isValid = checkFailed("@SYS300369");
                break;
            }
        }
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a date effective delete if the server cache has the <c>CreateNewTimePeriod</c> value;
    /// otherwise, performs a simple delete.
    /// </summary>
    public void delete()
    {
        super();
        JournalizingDefinitionCache::clearScope(JournalizingDefinitionCacheScope::GetSystemGeneratedEntries);
        JournalizingMainAccDimensionListProvider::clearCache();
        if (isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration)))
        {
            PayrollMainAccDimensionListProvider::clearCache();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.JournalizingDefinitionPriority = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a date effective insert if the server cache has the <c>CreateNewTimePeriod</c> value;
    /// otherwise, performs a simple insert.
    /// </summary>
    public void insert()
    {
        super();
        JournalizingDefinitionCache::clearScope(JournalizingDefinitionCacheScope::GetSystemGeneratedEntries);
        JournalizingMainAccDimensionListProvider::clearCache();
        if (isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration)))
        {
            PayrollMainAccDimensionListProvider::clearCache();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch ( _fieldId )
        {
            case fieldNum(JournalizingDefinitionMatch, LedgerDimension):
                if (this.LedgerDimension)
                {
                    this.DimensionHierarchy = DimensionAttributeValueCombination::find(this.LedgerDimension).AccountStructure;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a date effective update if the server cache has the <c>CreateNewTimePeriod</c> value;
    /// otherwise, performs a simple update.
    /// </summary>
    public void update()
    {
        super();
        JournalizingDefinitionCache::clearScope(JournalizingDefinitionCacheScope::GetSystemGeneratedEntries);
        JournalizingMainAccDimensionListProvider::clearCache();
        if (isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration)))
        {
            PayrollMainAccDimensionListProvider::clearCache();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch ( _fieldIdToCheck )
        {
            case fieldNum(JournalizingDefinitionMatch, LedgerDimension):
                this.checkLedgerDimenison(this.LedgerDimension);
                break;

            case fieldNum(JournalizingDefinitionMatch, DimensionHierarchy):
                if (!LedgerStructure::exist(Ledger::current(), this.DimensionHierarchy))
                {
                    ret = checkFailed(strFmt("@SYS329070", DimensionHierarchy::find(this.DimensionHierarchy).Name));
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = true;

        if (this.LedgerDimension)
        {
            ret = this.checkLedgerDimenison(this.LedgerDimension);
        }

        this.checkDuplicateRecord();

        ret = super() && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified ledger account occurs in the table for a specific journalizing
    /// definition.
    /// </summary>
    /// <param name="_journalizingDefinitionVersionId">
    /// The record ID of the journalizing definition version to check for occurrence.
    /// </param>
    /// <param name="_ledgerDimensionAccount">
    /// The ledger dimension account number to check for occurrence .
    /// </param>
    /// <returns>
    /// true if the ledger account exists for the journalizing definition in the table; otherwise, false.
    /// </returns>
    public static boolean exist(JournalizingDefinitionVersionId _journalizingDefinitionVersionId,
                                LedgerDimensionAccount _ledgerDimensionAccount)
    {
        boolean found;

        found = (select firstonly RecId from journalizingDefinitionMatch
                    where
                        journalizingDefinitionMatch.JournalizingDefinitionVersion == _journalizingDefinitionVersionId &&
                        journalizingDefinitionMatch.LedgerDimension == _ledgerDimensionAccount).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>JournalizingDefinitionMatch</c> table by using the specified
    ///    natural key, journalizing definition ID, and ledger account.
    /// </summary>
    /// <param name="_journalizingDefinitionVersionId">
    ///    The journalizing definition version ID to find.
    /// </param>
    /// <param name="_ledgerDimensionAccount">
    ///    The ledger dimension account number to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use.
    /// </param>
    /// <returns>
    ///    A <c>JournalizingDefinitionMatch</c> buffer.
    /// </returns>
    public static JournalizingDefinitionMatch find(
        JournalizingDefinitionVersionId _journalizingDefinitionVersionId,
        LedgerDimensionAccount _ledgerDimensionAccount,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        JournalizingDefinitionMatch journalizingDefinitionMatch;

        journalizingDefinitionMatch.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            journalizingDefinitionMatch.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            journalizingDefinitionMatch
            where
                journalizingDefinitionMatch.JournalizingDefinitionVersion == _journalizingDefinitionVersionId &&
                journalizingDefinitionMatch.LedgerDimension == _ledgerDimensionAccount;

        return journalizingDefinitionMatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record that has the specified record ID in the <c>JournalizingDefinitionMatch</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use.
    /// </param>
    /// <returns>
    ///    The specified record in the <c>JournalizingDefinitionMatch</c> table.
    /// </returns>
    public static JournalizingDefinitionMatch findByRecId(
        recId _recId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        JournalizingDefinitionMatch journalizingDefinitionMatch;

        journalizingDefinitionMatch.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            journalizingDefinitionMatch.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            journalizingDefinitionMatch
            where
            journalizingDefinitionMatch.RecId == _recId;

        return journalizingDefinitionMatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDimensionMissing</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether there is an empty segment in the specified <c>LedgerDimensionAccount</c> object
    /// that is not present in another <c>LedgerDimensionAccount</c> object.
    /// </summary>
    /// <param name="_matchLedgerDimension">
    ///    The first ledger dimension account to be matched.
    /// </param>
    /// <param name="_generatedledgerDimension">
    ///    The generated ledger dimension account to be matched.
    /// </param>
    /// <param name="_matchDimensionHierarchyId">
    ///    The record ID of account structure that is used in match account.
    /// </param>
    /// <param name="_useBudgetDimensions">
    ///    A Boolean value that indicates whether to budget dimensions for validation.
    /// </param>
    /// <param name="_throwError">
    ///    A Boolean value that indicates whether to cause an error if a segment is missing.
    /// </param>
    /// <returns>
    ///    true if there are no empty segments in the <paramref name="_generatedledgerDimension" /> parameter
    ///    that are not present in <paramref name="_matchLedgerDimension" /> parameter; otherwise, false.
    /// </returns>
    public static boolean isDimensionMissing(LedgerDimensionAccount  _matchLedgerDimension,
                                             LedgerDimensionAccount  _generatedledgerDimension,
                                             RefRecId                _matchDimensionHierarchyId,
                                             boolean                 _useBudgetDimensions,
                                             boolean                 _throwError = false)
    {
        boolean                                 ret = false;
        DimensionAttributeValueGroupCombination dimensionAttributeValueGroupCombination;
        DimensionAttributeValueGroup            dimensionAttributeValueGroup;
        DimensionAttributeLevelValue            dimensionAttributeLevelValue;
        DimensionHierarchyLevel                 dimensionHierarchyLevel;
        DimensionAttributeValue                 dimensionAttributeValue;
        DimensionHierarchyLevel                 matchDimensionHierarchyLevel;
        DimensionAttributeValueGroupCombination matchDimensionAttributeValueGroupCombination;
        DimensionAttributeValueGroup            matchDimensionAttributeValueGroup;
        DimensionAttributeLevelValueView        matchDimensionAttributeLevelValueView;
        BudgetPrimaryLedgerDimensionAttribute   budgetPrimaryLedgerDimensionAttribute;
        RefRecId                                generatedDimensionHierarchyId;
        DimensionConstraintNode                 dimensionConstraintNode;

        if (_generatedledgerDimension)
        {
            generatedDimensionHierarchyId = DimensionAttributeValueCombination::find(_generatedledgerDimension).AccountStructure;

            while select RecId from dimensionConstraintNode
                where dimensionConstraintNode.IsOptional == NoYes::No
                join  dimensionHierarchyLevel
                    where dimensionHierarchyLevel.RecId == dimensionConstraintNode.DimensionHierarchyLevel
                    && dimensionHierarchyLevel.DimensionHierarchy == generatedDimensionHierarchyId
                         notexists join dimensionAttributeValueGroupCombination
                            where dimensionAttributeValueGroupCombination.DimensionAttributeValueCombination == _generatedledgerDimension
                            join RecId from dimensionAttributeValueGroup
                                where dimensionAttributeValueGroup.RecId == dimensionAttributeValueGroupCombination.DimensionAttributeValueGroup
                                    join RecId from dimensionAttributeLevelValue
                                        where dimensionAttributeLevelValue.DimensionAttributeValueGroup == dimensionAttributeValueGroup.RecId
                                            join RecId from dimensionAttributeValue
                                                where dimensionAttributeValue.RecId == dimensionAttributeLevelValue.DimensionAttributeValue
                                                && dimensionAttributeValue.DimensionAttribute == dimensionHierarchyLevel.DimensionAttribute
            {
                if (_useBudgetDimensions)
                {
                    select DimensionAttribute
                        from  budgetPrimaryLedgerDimensionAttribute
                        where budgetPrimaryLedgerDimensionAttribute.DimensionAttribute == dimensionHierarchyLevel.DimensionAttribute;

                    if (!budgetPrimaryLedgerDimensionAttribute.RecId)
                    {
                        if (_throwError)
                        {
                            infolog.clear();
                            checkFailed(strFmt("@SYS329991",DimensionAttribute::find(dimensionHierarchyLevel.DimensionAttribute).localizedName()));
                        }
                        ret = true;
                        break;
                    }
                }
                else
                {
                    if (_matchLedgerDimension)
                    {
                        select DimensionAttribute from matchDimensionHierarchyLevel
                            where matchDimensionHierarchyLevel.DimensionAttribute == dimensionHierarchyLevel.DimensionAttribute
                            && matchDimensionHierarchyLevel.DimensionAttribute == dimensionHierarchyLevel.DimensionAttribute
                                join RecId from matchDimensionAttributeValueGroup where
                                    matchDimensionAttributeValueGroup.DimensionHierarchy == matchDimensionHierarchyLevel.DimensionHierarchy
                                    join RecId from matchDimensionAttributeValueGroupCombination where
                                         matchDimensionAttributeValueGroupCombination.DimensionAttributeValueGroup == matchDimensionAttributeValueGroup.RecId &&
                                         matchDimensionAttributeValueGroupCombination.DimensionAttributeValueCombination == _matchLedgerDimension
                                            outer join DisplayValue from matchDimensionAttributeLevelValueView where
                                                matchDimensionAttributeLevelValueView.ValueCombinationRecId == _matchLedgerDimension &&
                                                matchDimensionAttributeLevelValueView.DimensionAttribute == matchDimensionHierarchyLevel.DimensionAttribute;
                    }
                    else
                    {
                        select RecId from matchDimensionHierarchyLevel
                            where matchDimensionHierarchyLevel.DimensionHierarchy == _matchDimensionHierarchyId &&
                                  matchDimensionHierarchyLevel.DimensionAttribute == dimensionHierarchyLevel.DimensionAttribute;
                    }

                    if (!matchDimensionHierarchyLevel.RecId)
                    {
                        if (_throwError)
                        {
                            infolog.clear();
                            checkFailed(strFmt("@SYS300370",DimensionAttribute::find(dimensionHierarchyLevel.DimensionAttribute).localizedName()));
                        }
                        ret = true;
                        break;
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAccountStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the journalizing definitions that can be assigned as linked journalizing
    /// definitions.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The form string control object in which to perform the lookup.
    /// </param>
    /// <returns>
    /// The buffer of the selected record.
    /// </returns>
    public static Common lookupAccountStructure(FormReferenceControl _formReferenceControl)
    {
        Query query = new Query();

        QueryBuildDataSource dsDimensionHierarchy;
        QueryBuildDataSource dsLedgerStructure;

        str ledgerRecId = int642str(Ledger::current());

        SysReferenceTableLookup sysReferenceTableLookup = SysReferenceTableLookup::newParameters(tableNum(DimensionHierarchy), _formReferenceControl, true);

        dsDimensionHierarchy = query.addDataSource(tableNum(DimensionHierarchy));

        dsDimensionHierarchy.addRange(fieldNum(DimensionHierarchy, StructureType)).value(int2str(enum2int(DimensionHierarchyType::AccountStructure)));
        dsDimensionHierarchy.addRange(fieldNum(DimensionHierarchy, DeletedVersion)).value(queryValue(0));
        dsDimensionHierarchy.addRange(fieldNum(DimensionHierarchy, IsDraft)).value(int2str(0));
        dsDimensionHierarchy.addRange(fieldNum(DimensionHierarchy, IsSystemGenerated)).value(int2str(0));

        dsLedgerStructure = dsDimensionHierarchy.addDataSource(tableNum(LedgerStructure));
        dsLedgerStructure.joinMode(JoinMode::ExistsJoin);
        dsLedgerStructure.addLink(fieldNum(DimensionHierarchy, RecId), fieldNum(LedgerStructure, DimensionHierarchy));
        dsLedgerStructure.addRange(fieldNum(LedgerStructure, Ledger)).value(ledgerRecId);

        sysReferenceTableLookup.parmQuery(query);
        sysReferenceTableLookup.addLookupfield(fieldNum(DimensionHierarchy, Name));
        sysReferenceTableLookup.addLookupfield(fieldNum(DimensionHierarchy, Description));
        return sysReferenceTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS344928</DeveloperDocumentation>
	<FormRef>JournalizingDefinition</FormRef>
	<Label>@SYS132640</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>LedgerDimension</TitleField1>
	<TitleField2>JournalizingDefinitionPriority</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>AccountingFoundation</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>JournalizingDefinitionMatchIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>JournalizingDefinitionMatchDetail</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>JournalizingDefinitionMatchDetail</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionPriority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionPriority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionVersion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionHierarchy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS132153</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionPriority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionPriority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionVersion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionHierarchy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DimensionHierarchy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS310383</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>JournalizingDefinitionPriority</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JournalizingDefinitionPriority</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>JournalizingDefinitionVersion</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JournalizingDefinitionVersionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionAccount</ExtendedDataType>
			<Label>@SYS132154</Label>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>JournalizingDefinitionMatchIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerDimension</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>JournalizingDefinitionVersion</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DimensionHierarchy</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimensionHierarchyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DimensionHierarchy</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttributeValueCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>JournalizingDefinitionMatch</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionHierarchy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionHierarchy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DimensionHierarchy</Name>
					<Field>DimensionHierarchy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JournalizingDefinitionVersion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JournalizingDefinitionVersion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Parent</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>Child</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalizingDefinitionVersion</Name>
					<Field>JournalizingDefinitionVersion</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>