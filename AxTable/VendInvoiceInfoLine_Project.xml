<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceInfoLine_Project</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendInvoiceInfoLine_Project extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the activity number is valid.
    /// </summary>
    /// <returns>
    /// true if the activity number is valid; otherwise, false.
    /// </returns>
    private boolean checkActivity()
    {
        boolean ret = true;

        if (this.ProjActivityNumber)
        {
            changeCompany (this.ProjDataAreaId)
            {
                ret = ProjActivityHelper::validateProjActivityParentLinkV2(this.ProjId, this.ProjActivityNumber);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the project category is valid.
    /// </summary>
    /// <returns>
    /// true if the project category is valid; otherwise, false.
    /// </returns>
    private boolean checkProjCategoryId()
    {
        ProjCategory        projCategory;
        boolean             ret = true;
        VendInvoiceInfoLine infoLine;

        if (this.ProjCategoryId)
        {
            infoLine = this.getVendInvoiceInfoLine();
            changeCompany (this.ProjDataAreaId)
            {
                projCategory = ProjCategory::find(this.ProjCategoryId);

                if (!projCategory)
                {
                    return false;
                }
                if (projCategory.CategoryType == ProjCategoryType::None     ||
                projCategory.CategoryType == ProjCategoryType::Revenue)
                {
                    ret = checkFailed(strFmt("@SYS54897",this.ProjCategoryId));
                }

                if (this.isIntercompany())
                {
                    // Intercompany lines can use either expenses or hour categories only
                    if (projCategory.CategoryType == ProjCategoryType::Item)
                    {
                        ret = checkFailed(strFmt("@SYS54897",this.ProjCategoryId));
                    }
                }
                else if (infoLine.ItemId && projCategory.CategoryType != ProjCategoryType::Item)
                {
                    ret = checkFailed(strFmt("@SYS54897",this.ProjCategoryId));
                }

                ret = ret && projCategory.validateIfInactiveAllowed();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the project ID is valid.
    /// </summary>
    /// <returns>
    /// true if the project ID is valid; otherwise, false.
    /// </returns>
    private boolean checkProjId()
    {
        boolean     checkProjId = true;
        ProjTable   projTable;

        if (this.ProjId)
        {
            changeCompany (this.ProjDataAreaId)
            {
                projTable = ProjTable::find(this.ProjId);

                if (!projTable)
                {
                    return false;
                }

                checkProjId = checkProjId && projTable.checkActiveInTree();

                if (checkProjId && projTable.Type == ProjType::Time)
                {
                    checkProjId = checkFailed(strFmt("@SYS53011", ProjType::Time));
                }

                if (checkProjId)
                {
                    checkProjId = projTable.status().validateWritePurchTable();
                }
            }
        }

        return checkProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReqActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether project activity is required.
    /// </summary>
    /// <returns>
    /// True if project activity is required; otherwise, false.
    /// </returns>
    public boolean checkReqActivity()
    {
        boolean                     ret = true;

        changeCompany (this.ProjDataAreaId)
        {
            RequireActivity requireActivity = ProjTable::checkRequireActivity(this.ProjId, tableNum(VendInvoiceInfoLine_Project), this.ProjCategoryId);
            if (requireActivity && !this.ProjActivityNumber)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedProjCatetoryId</Name>
				<Source><![CDATA[
    private void fieldModifiedProjCatetoryId()
    {
        VendInvoiceInfoLine vendInvoiceInfoLine = this.getVendInvoiceInfoLine();
        changeCompany (this.ProjDataAreaId)
        {
            this.ProjLinePropertyId = ProjLinePropertySetup::findLinePropertyId(this.ProjId, this.ProjCategoryId);

            if (vendInvoiceInfoLine.ItemId && this.ProjCategoryId)
            {
                this.ProjTaxItemGroupId = ProjParameters::TaxItemGroupItem(this.ProjCategoryId, vendInvoiceInfoLine.ItemId);
            }
            else
            {
                this.ProjTaxItemGroupId = ProjCategory::find(this.ProjCategoryId).TaxItemGroupId;
            }
        }

        if (this.Resource && this.isItemBased())
        {
            this.Resource = 0;
        }

        this.setProjSalesPrice(vendInvoiceInfoLine);
        if (this.isIntercompany())
        {
            this.setTransferPrice(vendInvoiceInfoLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActualCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the actual cost price of the line, excluding recoverable taxes.
    /// </summary>
    /// <param name="_vendInvoiceLine">
    /// The <c>VendInvoiceInfoLine</c> related to this line; optional.
    /// </param>
    /// <returns>
    /// The actual cost price, in the vendor invoice line currency.
    /// </returns>
    public AmountCur getActualCostPrice(VendInvoiceInfoLine _vendInvoiceLine = null)
    {
        VendInvoiceInfoLine infoLine = _vendInvoiceLine;
        Qty                 qty;

        if (!infoLine)
        {
            infoLine =  this.getVendInvoiceInfoLine();
        }

        qty = _vendInvoiceLine.ReceiveNow;
        if (qty == 0)
        {
            qty = 1;
        }

        return SourceDocumentLineItem::newFromSourceDocumentLineImplementation(infoLine)
                .parmSourceDocumentAmountMap()
                .lookup(MonetaryAmount::ExtendedPrice)
                .parmAmount() / qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActualCostPriceMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the actual cost price of the line, excluding recoverable taxes, in the company's accouting currency..
    /// </summary>
    /// <param name="_vendInvoiceLine">
    /// The <c>VendInvoiceInfoLine</c> related to this line; optional.
    /// </param>
    /// <returns>
    /// The actual cost price, in the company's accounting currency.
    /// </returns>
    public AmountMST getActualCostPriceMST(VendInvoiceInfoLine _vendInvoiceLine = null)
    {
        VendInvoiceInfoLine infoLine = _vendInvoiceLine;

        if (!infoLine)
        {
            infoLine = this.getVendInvoiceInfoLine();
        }

        CostPrice costPrice;

        // For intercompany transactions the exchange rate should consider <c>TransDate</c>
        // and calculates <c>costPrice</c> when pending vendor invoice is created for different currency other than accounting currency.
        if (this.isIntercompany() && ProjPendingVendInvTransdateForInterCompanyFlight::instance().isEnabled())
        {
            costPrice = ExchangeRateHelper::mstPrice(this.getActualCostPrice(infoLine), infoLine.currencyCode, infoLine.vendInvoiceInfoTable().TransDate);
        }
        else
        {
            costPrice = ExchangeRateHelper::mstPrice(this.getActualCostPrice(infoLine), infoLine.currencyCode);
        }
        return costPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendInvoiceInfoLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the parent <c>VendInvoiceInfoLine</c> record.
    /// </summary>
    /// <returns>
    /// Parent <c>VendInvoiceInfoLine</c> record.
    /// </returns>
    public VendInvoiceInfoLine  getVendInvoiceInfoLine()
    {
        VendInvoiceInfoLine infoLine;

        if (FormDataUtil::isFormDataSource(this))
        {
            infoLine = FormDataUtil::getFormDataSource(this).cursor().joinParent();
        }

        if (!infoLine || infoLine.RecId != this.VendInvoiceInfoLineRefRecId)
        {
            infoLine = VendInvoiceInfoLine::findRecId(this.VendInvoiceInfoLineRefRecId);
        }

        return infoLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>VendInvoiceInfoLine_Project</c> fields from the project activity record.
    /// </summary>
    /// <param name="_projActivity">
    /// The project activity record to initialize from.
    /// </param>
    private void initFromProjActivity(ProjActivity _projActivity)
    {
        if (!_projActivity || !_projActivity.CategoryDefault ||
            ProjCategory::find(_projActivity.CategoryDefault).CategoryType != ProjCategoryType::Item)
        {
            return;
        }

        this.ProjCategoryId = _projActivity.CategoryDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjDataAreaId</Name>
				<Source><![CDATA[
    private void initFromProjDataAreaId()
    {
        CustTable                   custTable;
        InterCompanyTradingPartner  tradingPartner;

        this.ProjId = '';
        this.ProjActivityNumber = '';
        this.ProjCategoryId = '';
        this.ProjLinePropertyId = '';
        this.ProjSalesUnitId = 0;
        this.ProjSalesPrice = 0;
        this.ProjTaxGroupId = '';
        this.ProjTaxItemGroupId = '';
        this.ProjSalesCurrencyId = '';

        if (this.isIntercompany())
        {
            tradingPartner = InterCompanyTradingPartner::findTradingCustomer(this.DataAreaId, this.ProjDataAreaId);
            custTable = CustTable::findByPartyRecId(tradingPartner.CustomerParty);

            if (custTable.Currency)
            {
                this.TransferCurrency = custTable.Currency;
                this.setTransferPrice();
            }
        }
        else
        {
            this.TransferPrice = 0;
            this.TransferCurrency = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>VendInvoiceInfoLine_Project</c> fields from the project record.
    /// </summary>
    /// <param name="_projTable">
    /// The project record to initialize from.
    /// </param>
    private void initFromProjTable(ProjTable _projTable)
    {
        changeCompany (this.ProjDataAreaId)
        {
            this.ProjDataAreaId = _projTable.dataAreaId;
            this.ProjLinePropertyId = ProjLinePropertySetup::findLinePropertyId(this.ProjId, this.ProjCategoryId);
            this.ProjSalesCurrencyId = _projTable.currencyId();
            this.ProjTaxGroupId = ProjParameters::taxGroupInvoice(this.ProjId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>VendInvoiceInfoLine_Project</c> table field values.
    /// </summary>
    /// <param name="_purchLine">
    /// A <c>PurchLine</c> table buffer to use to set <c>VendInvoiceInfoLine_Project</c> field values.
    /// </param>
    public void initFromPurchLine(PurchLine _purchLine)
    {
        //project Identification
        this.ProjDataAreaId = _purchLine.dataAreaId;
        this.ProjId = _purchLine.ProjId;
        this.ProjActivityNumber = _purchLine.ActivityNumber;
        this.ProjCategoryId = _purchLine.ProjCategoryId;
        this.ProjLinePropertyId = _purchLine.ProjLinePropertyId;
        this.Resource = ResourceFacade::findOrCreateByWorker(_purchLine.ProjWorker);

        //sales price
        this.ProjSalesCurrencyId = _purchLine.ProjSalesCurrencyId;
        this.ProjSalesPrice = _purchLine.ProjSalesPrice;

        //sales tax
        this.ProjTaxGroupId = _purchLine.ProjTaxGroupId;
        this.ProjTaxItemGroupId = _purchLine.ProjTaxItemGroupId;
        this.ProjSalesUnitId = UnitOfMeasure::findBySymbol(_purchLine.ProjSalesUnitId).RecId;

        //Transaction
        if (ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
        {
            this.ProjTransId = ProjParameters::newTransId();
        }
        else
        {
            this.ProjTransId = _purchLine.ProjTransId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBudgetReservationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the vendor invoice project line from a budget reservation line.
    /// </summary>
    /// <param name="_budgetReservationLine">
    /// The <c>BudgetReservationLine_PSN</c> record buffer from which to initialize the <c>VendInvoiceInfoLine_Project</c> table record.
    /// </param>
    public void initFromBudgetReservationLine(BudgetReservationLine_PSN  _budgetReservationLine)
    {
        this.ProjId = _budgetReservationLine.ProjId;
        this.ProjActivityNumber = _budgetReservationLine.ActivityNumber;
        this.ProjCategoryId = _budgetReservationLine.ProjCategoryId;
        this.ProjLinePropertyId = _budgetReservationLine.ProjLinePropertyId;
        this.Resource = ResourceFacade::findOrCreateByWorker(_budgetReservationLine.ProjWorker);
        this.ProjSalesCurrencyId = _budgetReservationLine.ProjSalesCurrencyId;
        this.ProjSalesUnitId = UnitOfMeasure::findBySymbol(_budgetReservationLine.ProjSalesUnitId).RecId;
        this.ProjTaxGroupId = _budgetReservationLine.ProjTaxGroupId;
        this.ProjTaxItemGroupId = _budgetReservationLine.ProjTaxItemGroupId;
        this.ProjSalesPrice = _budgetReservationLine.ProjSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.ProjDataAreaId = curext();
        if (!this.ProjCategoryId)
        {
            this.ProjCategoryId = ProjParameters::find().ItemCategory;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (!this.ProjTransId)
        {
            this.ProjTransId = ProjParameters::newTransId();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIntercompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the line is related to a project in another legal entity.
    /// </summary>
    /// <returns>
    /// true if the line is related to a project in another legal entity; false otherwise.
    /// </returns>
    public boolean isIntercompany()
    {
        return (this.ProjDataAreaId && this.ProjDataAreaId != this.dataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the line is related to an item.
    /// </summary>
    /// <param name="_parentLine">
    /// Parent <c>VendInvoiceInfoLine</c> record.
    /// </param>
    /// <returns>
    /// true if the line is related to an item; otherwise, false.
    /// </returns>
    public boolean isItemBased(VendInvoiceInfoLine _parentLine = null)
    {
        boolean             retVal            = false;
        VendInvoiceInfoLine parentInvoiceLine = _parentLine;
        ProjCategory        category;

        if (prmisDefault(_parentLine))
        {
            parentInvoiceLine = this.getVendInvoiceInfoLine();
        }

        if (parentInvoiceLine.ItemId)
        {
            retVal = true;
        }
        else if (this.ProjCategoryId)
        {
            category = ProjCategory::find(this.ProjCategoryId);
            if (category.CategoryType == ProjCategoryType::Item)
            {
                retVal = true;
            }
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupActivityNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup method for the activity number.
    /// </summary>
    /// <param name="_formControl">
    /// Form control where the activity field is selected.
    /// </param>
    /// <param name="_filterStr">
    /// String to filter the records.
    /// </param>
    public void lookupActivityNumber(FormControl _formControl, str _filterStr)
    {
        changeCompany (this.ProjDataAreaId)
        {
            if (ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
            {
                HierarchyTreeTable::lookupHierarchyTree(_formControl, ProjTable::find(this.ProjId), NoYes::Yes);
            }
            else
            {
                HierarchyTreeTable::lookupHierarchyTree(_formControl, ProjTable::find(this.ProjId), ProjParameters::find().BlockParentActivitySelection);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup for project category ID.
    /// </summary>
    /// <param name="_formControl">
    /// The form control where the category is selected.
    /// </param>
    /// <param name="_filterStr">
    /// A string to filter the records.
    /// </param>
    public void lookupCategoryId(FormControl _formControl, str _filterStr)
    {
        Query                   query;
        SysTableLookup          sysTableLookup = new SysTableLookup();
        ProjCategoryLookup      projCategoryLookup;

        sysTableLookup = SysTableLookup::newParameters(tableNum(ProjCategory), _formControl);

        sysTableLookup.addLookupfield(fieldNum(ProjCategory, CategoryId));
        sysTableLookup.addLookupfield(fieldNum(ProjCategory, Name));
        sysTableLookup.addLookupfield(fieldNum(ProjCategory, CategoryType));

        changecompany(this.ProjDataAreaId)
        {
            projCategoryLookup = new ProjCategoryLookup();
            projCategoryLookup.parmIsIntercompany(this.isIntercompany());

            query = projCategoryLookup.buildQuery(this.TableId, this.ProjId, this.Resource, null, this);
        }

        if (this.isIntercompany())
        {
            query.allowCrossCompany(true);
            query.addCompanyRange(SysQuery::value(this.ProjDataAreaId));
        }

        sysTableLookup.addSelectionField(fieldNum(ProjCategory, CategoryId));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupLinePropertyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup for line property ID.
    /// </summary>
    /// <param name="_formControl">
    /// The form control where the line property is selected.
    /// </param>
    /// <param name="_filterStr">
    /// A string to filter the records.
    /// </param>
    public void lookupLinePropertyId(FormControl _formControl, str _filterStr)
    {
        Query                   query;
        SysTableLookup          sysTableLookup;

        query = new Query();
        if (this.ProjDataAreaId != curext())
        {
            query.allowCrossCompany(true);
            query.addCompanyRange(SysQuery::value(this.ProjDataAreaId));
        }
        query.addDataSource(tableNum(ProjLineProperty));

        sysTableLookup = SysTableLookup::newParameters(tableNum(ProjLineProperty), _formControl);
        sysTableLookup.addLookupfield(fieldNum(ProjLineProperty, LinePropertyId));
        sysTableLookup.addLookupfield(fieldNum(ProjLineProperty, Name));
        sysTableLookup.addSelectionField(fieldNum(ProjLineProperty, LinePropertyId));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupProjDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup for project data area ID.
    /// </summary>
    /// <param name="_formControl">
    /// The form control where the project data area ID is selected.
    /// </param>
    /// <param name="_filterStr">
    /// A string to filter the records.
    /// </param>
    public void lookupProjDataAreaId(FormControl _formControl, str _filterStr)
    {
        Query                   query;
        SysTableLookup          sysTableLookup;
        LedgerInterCompany      ledgerInterCompany;
        QueryBuildDataSource    queryBuildDataSource;

        sysTableLookup = SysTableLookup::newParameters(tableNum(CompanyInfo), _formControl);
        sysTableLookup.addLookupfield(fieldNum(CompanyInfo, DataArea));
        sysTableLookup.setLabel("@SYS318577");
        sysTableLookup.addLookupfield(fieldNum(CompanyInfo, Name));

        query = new Query();
        queryBuildDataSource = query.addDataSource(tableNum(CompanyInfo));
        queryBuildDataSource.addOrderByField(fieldNum(CompanyInfo, DataArea), SortOrder::Ascending);
        queryBuildDataSource.addRange(fieldNum(CompanyInfo, DataArea)).value(curext());

        while select DestinationCompany from ledgerInterCompany
            where ledgerInterCompany.OriginatingCompany == curExt()
        {
            queryBuildDataSource.addRange(fieldNum(CompanyInfo, DataArea)).value(ledgerInterCompany.DestinationCompany);
        }

        sysTableLookup.addSelectionField(fieldNum(CompanyInfo, DataArea));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupProjId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup for project ID.
    /// </summary>
    /// <param name="_formControl">
    /// The form control where the project ID is selected.
    /// </param>
    /// <param name="_filterStr">
    /// A string to filter the records.
    /// </param>
    public void lookupProjId(FormControl _formControl, str _filterStr)
    {
        if (this.ProjDataAreaId)
        {
            changecompany(this.ProjDataAreaId)
            {
                ProjOpsManagementLogger logger = ProjOpsManagementLogger::createLogger(tableStr(VendInvoiceInfoLine_Project));
                using (var activityContext = logger.projOpsManagementActivity().projTableLookupContext())
                {
                    Query query = ProjTableLookup::buildQueryWithRanges(conNull());
                    QueryBuildDataSource qbdsProject = Query.dataSourceNo(1);

                    qbdsProject.addRange(fieldNum(ProjProjectLookup, Type)).value(SysQuery::valueNot(ProjType::Time));
                    qbdsProject.addOrderByField(fieldNum(ProjProjectLookup, ProjId), SortOrder::Ascending);

                    QueryBuildDataSource statusTypeRuleDS = qbdsProject.addDataSource(tableNum(ProjStatusTypeRule));
                    statusTypeRuleDS.linkFields(fieldStr(ProjProjectLookup, Type), fieldStr(ProjStatusTypeRule, ProjType));
                    statusTypeRuleDS.linkFields(fieldStr(ProjProjectLookup, Status), fieldStr(ProjStatusTypeRule, ProjStatus));
                    statusTypeRuleDS.joinMode(JoinMode::ExistsJoin);
                    statusTypeRuleDS.addRange(fieldNum(ProjStatusTypeRule, ProjStatusRule)).value(SysQuery::value(ProjStatusRule::CreateItemTask));

                    SysTableLookup sysTableLookup = ProjTableLookup::createLookup(_formControl, query);

                    sysTableLookup.performFormLookup();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        VendInvoiceInfoLine     vendInvoiceInfoLine;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(VendInvoiceInfoLine_Project, ProjActivityNumber):
                this.initFromProjActivity(ProjActivity::find(this.ProjActivityNumber));
                this.fieldModifiedProjCatetoryId();
                break;

            case fieldNum(VendInvoiceInfoLine_Project, ProjCategoryId):
                this.fieldModifiedProjCatetoryId();
                break;

            case fieldNum(VendInvoiceInfoLine_Project, ProjDataAreaId):
                this.initFromProjDataAreaId();
                break;

            case fieldNum(VendInvoiceInfoLine_Project, ProjId):
                vendInvoiceInfoLine = this.getVendInvoiceInfoLine();
                this.setProjCategoryId(vendInvoiceInfoLine);
                this.setProjSalesUnitId(vendInvoiceInfoLine);
                this.setProjSalesPrice(vendInvoiceInfoLine);
                changeCompany (this.ProjDataAreaId)
                {
                    this.initFromProjTable(ProjTable::find(this.ProjId));
                }
                if (this.isIntercompany())
                {
                    this.setTransferPrice();
                }
                break;

            case fieldNum(VendInvoiceInfoLine_Project, Resource):
            case fieldNum(VendInvoiceInfoLine_Project, ProjSalesCurrencyId):
            case fieldNum(VendInvoiceInfoLine_Project, TransferCurrency):
                vendInvoiceInfoLine = this.getVendInvoiceInfoLine();
                this.setProjSalesPrice(vendInvoiceInfoLine);
                if (this.isIntercompany())
                {
                    this.setTransferPrice(vendInvoiceInfoLine);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project category field.
    /// </summary>
    /// <param name="_vendInvoiceInfoLine">
    /// The <c>VendInvoiceInfoLine</c> record that corresponds to the <c>VendInvoiceInfoLine_Project</c>
    /// record.
    /// </param>
    public void setProjCategoryId(VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        InventTable     inventTable;
        ProjCategoryId  projCategoryId;

        if (_vendInvoiceInfoLine.ItemId)
        {
            inventTable = InventTable::find(_vendInvoiceInfoLine.ItemId);
            this.ProjCategoryId = inventTable.ProjCategoryId ? inventTable.ProjCategoryId : this.ProjCategoryId;
            if (inventTable.ProjCategoryId)
            {
                this.fieldModifiedProjCatetoryId();
            }
        }

        if (!inventTable.ProjCategoryId && _vendInvoiceInfoLine.ProcurementCategory)
        {
            projCategoryId = ProjCategory::getDefaultProjectGlobalCategory(_vendInvoiceInfoLine.ProcurementCategory);
            this.ProjCategoryId = projCategoryId ? projCategoryId : this.ProjCategoryId;
            if (projCategoryId)
            {
                this.fieldModifiedProjCatetoryId();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project sales price field.
    /// </summary>
    /// <param name="_vendInvoiceInfoLine">
    /// The <c>VendInvoiceInfoLine</c> record that corresponds to the <c>VendInvoiceInfoLine_Project</c>
    /// record.
    /// </param>
    public void setProjSalesPrice(VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        // In case of project operations integration sales price comes from CE through integration (advanced) journal.
        if (ProjProjectOperationsIntegrationFeatureHelper::isProcurementIntegrationEnabledWithProjOps())
        {
            this.ProjSalesPrice = 0;
            return;
        }
        Price actualCostPrice;
        PurchLine purchLine = _vendInvoiceInfoLine.purchLine();
        TransDate transDate = _vendInvoiceInfoLine.vendInvoiceInfoTable().updateDate();

        changeCompany (this.ProjDataAreaId)
        {
            if (this.verifyCostPriceEqualsSalesPrice(_vendInvoiceInfoLine))
            {
                if (this.isIntercompany())
                {
                    actualCostPrice = this.TransferPrice;
                    if (purchLine)
                    {
                        actualCostPrice = this.calculateActualCostPrice(purchLine, actualCostPrice);
                    }

                    this.ProjSalesPrice = ExchangeRateHelper::curPrice2CurPrice(actualCostPrice, this.TransferCurrency, this.ProjSalesCurrencyId, transDate);
                }
                else
                {
                    if (_vendInvoiceInfoLine.PurchPrice)
                    {
                        actualCostPrice = _vendInvoiceInfoLine.PurchPrice;
                        if (purchLine)
                        {
                            actualCostPrice = this.calculateActualCostPrice(purchLine, actualCostPrice);
                        }

                        this.ProjSalesPrice = ExchangeRateHelper::curPrice2CurPrice(actualCostPrice,
                                                _vendInvoiceInfoLine.currencyCode,
                                                this.ProjSalesCurrencyId,
                                                transDate);
                    }
                    else
                    {
                        this.setProjCostSalesPriceFromPriceSetup(_vendInvoiceInfoLine);
                    }
                }
            }
            else 
            {
                this.setProjCostSalesPriceFromTransactionSetup(_vendInvoiceInfoLine, transDate);
            }       
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateActualCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates actual cost price value.
    /// </summary>
    /// <param name="_purchLine">
    /// Parent <c>PurchLine</c> record.
    /// </param>
    /// <param name="_actualCostPrice">
    /// Parent <c>Price</c> value.
    /// </param>
    /// <returns>
    /// returns calculated actual cost price value.
    /// </returns>
    private Price calculateActualCostPrice(PurchLine _purchLine, Price _actualCostPrice)
    {
        return (_purchLine.LineDisc || _purchLine.LinePercent) ?
            ProjectSourceDocumentLineItemHelper::getCostPriceWithDiscountApplied(_actualCostPrice, _purchLine.LineDisc, _purchLine.LinePercent):
            _actualCostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjCostSalesPriceFromTransactionSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates actual cost price based on category type.
    /// </summary>
    /// <param name = "_vendInvoiceInfoLine">The vendor invoice info line value.</param>
    /// <param name = "_transDate">Transaction date to calculate correct exchange rate.</param>
    private void setProjCostSalesPriceFromTransactionSetup(VendInvoiceInfoLine _vendInvoiceInfoLine, TransDate _transDate)
    {
        if (this.ProjCategoryId
                && !(!ProjParameters::find().DefaultCostPriceAsSalesPrice
                && _vendInvoiceInfoLine.BudgetReservationLine_PSN
                && PublicSectorUtils::isBudgetReservationEnabled()))
        {
            boolean priceFound;
            ProjCategory category = ProjCategory::find(this.ProjCategoryId);
            ProjPriceParameters priceParams;
            Price actualCostPrice;
            PurchLine purchLine = _vendInvoiceInfoLine.purchLine();
                
            switch (category.CategoryType)
            {
                case ProjCategoryType::Item:
                    InventTable inventTable = _vendInvoiceInfoLine.inventTable();
                    PurchTable purchTable = _vendInvoiceInfoLine.purchTable();
                    boolean modelPriceFound;
                    boolean salesPriceFound;
                    actualCostPrice = _vendInvoiceInfoLine.PurchPrice;
                    if (purchLine)
                    {
                        actualCostPrice = this.calculateActualCostPrice(purchLine, actualCostPrice);
                    }

                    if (this.checkInventTableSetup(inventTable, purchTable, purchLine))
                    {
                        InventTableModule inventTableModule = InventTableModule::find(_vendInvoiceInfoLine.ItemId, ModuleInventPurchSales::Purch);
                        this.ProjSalesPrice = inventTableModule.updateSalesPrice(inventTable, inventTableModule, actualCostPrice);
                        modelPriceFound = true;
                    }
                    else
                    {
                        // If the invoice is related to PO then sales price should not be zero since sales price will be taken from PO while invoicing.
                        if (!purchLine.ProcurementCategory)
                        {
                            this.ProjSalesPrice = 0;
                        }

                        if (inventTable)
                        {
                            PriceMarkup         markUpDummy;
                            PriceUnit           salesUnitDummy;
                            ProjTable projTable = ProjTable::find(this.ProjId);
                            [this.ProjSalesPrice,
                                    salesUnitDummy,
                                    markUpDummy] = _vendInvoiceInfoLine.inventTable().salesPriceAgreement(
                                                        _transDate,
                                                        _vendInvoiceInfoLine.inventDim(),
                                                        _vendInvoiceInfoLine.ReceiveNow,
                                                        inventTable.inventUnitId(),
                                                        projTable.CustAccount,
                                                        this.ProjSalesCurrencyId ? this.ProjSalesCurrencyId : projTable.currencyId(),
                                                        ProjTable::findPriceGroup(projTable.ProjId));
                            salesPriceFound = this.ProjSalesPrice != 0;
                        }
                    }

                    // If a sales agreement price is found, it already uses project sales currency
                    if (_vendInvoiceInfoLine.CurrencyCode != this.ProjSalesCurrencyId && !salesPriceFound)
                    {
                        this.ProjSalesPrice =  ExchangeRateHelper::curPrice2CurPrice(modelPriceFound ? this.ProjSalesPrice : actualCostPrice,
                                                    _vendInvoiceInfoLine.currencyCode,
                                                    this.ProjSalesCurrencyId,
                                                    _transDate,
                                                    true);
                    }
                    break;

                case ProjCategoryType::Cost:
                    actualCostPrice = this.isIntercompany() ? this.TransferPrice : _vendInvoiceInfoLine.PurchPrice;
                    if (purchLine)
                    {
                        actualCostPrice = this.calculateActualCostPrice(purchLine, actualCostPrice);
                    }

                    priceParams = ProjCostSalesPrice::constructPriceParametersForFindCostSalesPrice(
                                    this.ProjId,
                                    this.Resource,
                                    this.ProjCategoryId,
                                    actualCostPrice,
                                    this.isIntercompany() ? this.TransferCurrency : _vendInvoiceInfoLine.currencyCode,
                                    this.ProjSalesCurrencyId,
                                    _transDate);
                    [this.ProjSalesPrice, priceFound] = ProjCostSalesPrice::findCostSalesPriceByPriceParameters(priceParams);
                    break;

                case ProjCategoryType::Hour:
                    actualCostPrice = this.isIntercompany() ? this.TransferPrice : _vendInvoiceInfoLine.PurchPrice;
                    if (purchLine)
                    {
                        actualCostPrice = this.calculateActualCostPrice(purchLine, actualCostPrice);
                    }

                    AmountMST costPriceMst;
                    costPriceMst = ExchangeRateHelper::mstPrice(actualCostPrice,
                                        this.isIntercompany() ? this.TransferCurrency : _vendInvoiceInfoLine.currencyCode, _transDate);
                    priceParams = ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
                                        this.ProjId,
                                        this.Resource,
                                        this.ProjCategoryId,
                                        this.ProjLinePropertyId,
                                        costPriceMst,
                                        this.ProjSalesCurrencyId);
                    [this.ProjSalesPrice, priceFound] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(priceParams);
                    break;

                default:
                    this.setProjCostSalesPriceFromPriceSetup(_vendInvoiceInfoLine);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventTableSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the type of transaction from invent table.
    /// </summary>
    /// <param name="_inventTable">
    /// A specified <c>InventTable</c> buffer that contains the parameters to check transaction type.
    /// </param>
    /// <param name="_purchTable">
    /// A specified <c>PurchTable</c> buffer that contains the parameters to check project sales item requirement.
    /// </param>
    /// <param name="_purchLine">
    /// A specified <c>PurchLine</c> buffer that contains the parameters to check project sales item requirement.
    /// </param>
    /// <returns>
    /// true if sales price model is contribution ratio, sales price model basic is purch price and project sales item requirement; otherwise false.
    /// </returns>
    private boolean checkInventTableSetup(InventTable _inventTable, PurchTable _purchTable, PurchLine _purchLine)
    {
        return (_inventTable &&
            _inventTable.SalesPriceModelBasic == SalesPriceModelBasic::PurchPrice &&
            _inventTable.SalesModel != SalesPriceModel::None &&
            !(_inventTable.SalesModel == SalesPriceModel::Contributionratio && _inventTable.SalesContributionRatio >= 100) &&
            (!_purchTable || !_purchTable.isProjectSalesItemReqPO()) &&
            (!_purchLine || !_purchLine.getProjCreditNoteSource().purchTable().isProjectSalesItemReqPO()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjSalesUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project sales unit field.
    /// </summary>
    /// <param name="_vendInvoiceInfoLine">
    /// The <c>VendInvoiceInfoLine</c> record that corresponds to the <c>VendInvoiceInfoLine_Project</c>
    /// record.
    /// </param>
    public void setProjSalesUnitId(VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        if (_vendInvoiceInfoLine.isNonPO() && _vendInvoiceInfoLine.PurchUnit && !this.ProjSalesUnitId)
        {
            this.ProjSalesUnitId = UnitOfMeasure::findBySymbol(_vendInvoiceInfoLine.PurchUnit).RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransferPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the transfer price field.
    /// </summary>
    /// <param name="_infoline">
    /// The <c>VendInvoiceInfoLine</c> record associated with this line.
    /// </param>
    public void setTransferPrice(VendInvoiceInfoLine _infoline = null)
    {
        ProjTable                   projTable;
        ProjCategory                projCategory;
        VendInvoiceInfoLine         infoLine = _infoline;
        CostPrice                   costPrice;

        if (!infoLine)
        {
            infoLine = this.getVendInvoiceInfoLine();
        }

        costPrice = this.getActualCostPriceMST(infoLine);

        select crossCompany RecId from projTable
        where projTable.ProjId      == this.ProjId &&
                projTable.dataAreaId  == this.ProjDataAreaId;

        select crossCompany RecId from projCategory
        where projCategory.CategoryId == this.ProjCategoryId &&
                projCategory.dataAreaId == this.ProjDataAreaId;

        this.TransferPrice = ProjTransferPrice::findTransferPrice(this.Resource,
                                                              this.ProjDataAreaId,
                                                              projTable.RecId,
                                                              projCategory.RecId,
                                                              this.ProjLinePropertyId,
                                                              DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                              curext(),
                                                              this.TransferCurrency,
                                                              0,
                                                              costPrice,
                                                              ExchangeRateHelper::curPrice2CurPrice(this.ProjSalesPrice, this.ProjSalesCurrencyId, this.TransferCurrency),
                                                              ProjTransferPriceTransType::VendInvoiceLine);
        this.setProjSalesPrice(infoLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(VendInvoiceInfoLine_Project, ProjActivityNumber):
                ret = ret && this.checkActivity();
                break;
            case fieldNum(VendInvoiceInfoLine_Project, ProjCategoryId):
                ret = ret && this.checkProjCategoryId();
                break;
            case fieldNum(VendInvoiceInfoLine_Project, ProjId):
                ret = ret && this.checkProjId();
                break;
            case fieldNum(VendInvoiceInfoLine_Project, ProjLinePropertyId):
            changeCompany (this.ProjDataAreaId)
                {
                    ret = ret && ProjLineProperty::exist(this.ProjLinePropertyId);
                }
                break;
            case fieldNum(VendInvoiceInfoLine_Project, ProjTaxGroupId):
            if (this.ProjTaxGroupId)
                {
                    changeCompany(this.ProjDataAreaId)
                    {
                        ret = ret && TaxGroupHeading::checkExist(this.ProjTaxGroupId);
                    }
                }
                break;
            case fieldNum(VendInvoiceInfoLine_Project, ProjTaxItemGroupId):
            if (this.ProjTaxItemGroupId)
                {
                    changeCompany(this.ProjDataAreaId)
                    {
                        ret = ret && TaxItemGroupHeading::checkExist(this.ProjTaxItemGroupId);
                    }
                }
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean             ret;
        ProjValCheckTrans   projValCheckTrans;

        ret = super();

        if (ret && !this.checkProjId())
        {
            ret = false;
        }

        if (ret && !this.checkProjCategoryId())
        {
            ret = false;
        }

        if (ret)
        {
            projValCheckTrans = new ProjValCheckTrans();
            if (!projValCheckTrans.validateMandatory(this))
            {
                ret = false;
            }
        }

        if (ret && !this.checkActivity())
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>VendInvoiceInfoLine_Project</c> record is located in the table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID to check.
    /// </param>
    /// <returns>
    ///    true if the <c>VendInvoiceInfoLine_Project</c> record is located in the table; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        return (select firstonly RecId from vendInvoiceInfoLine_Project
                where vendInvoiceInfoLine_Project.RecId == _recId
           ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds and returns the specified record in the <c>VendInvoiceInfoLine_Project</c> table for the
    ///    given record ID.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that determines whether the record should be selected for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    A <c>ConcurrencyModel</c> value that specifies the locking scheme; optional.
    /// </param>
    /// <returns>
    ///    A <c>VendInvoiceInfoLine_Project</c> table record if one exists; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    ///    If the record does not exist, an empty <c>VendInvoiceInfoLine_Project</c> table record is returned.
    /// </remarks>
    public static VendInvoiceInfoLine_Project find(RecId _recId,
    boolean _forUpdate = false,
    ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendInvoiceInfoLine_Project vendInvoiceInfoLine_Project;
        vendInvoiceInfoLine_Project.selectForUpdate(_forUpdate);

        if (_recId)
        {
            if (_forUpdate)
            {
                if (_concurrencyModel != ConcurrencyModel::Auto)
                {
                    vendInvoiceInfoLine_Project.concurrencyModel(_concurrencyModel);
                }
            }

            select firstonly vendInvoiceInfoLine_Project
            where vendInvoiceInfoLine_Project.RecId == _recId;
        }

        return vendInvoiceInfoLine_Project;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByVendInvoiceInfoLineRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the specified record in the <c>VendInvoiceInfoLine_Project</c> table for the
    /// given <c>VendInvoiceInfoLineRefrecord ID </c>value.
    /// </summary>
    /// <param name="_vendInvoiceInfoLineRefRecId">
    /// The <c>VendInvoiceInfoLineRefrecord ID </c>value to check.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that determines whether the record should be selected for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A <c>ConcurrencyModel</c> value that specifies the locking scheme; optional.
    /// </param>
    /// <returns>
    /// A <c>VendInvoiceInfoLine_Project</c> table record if one exists; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    /// If the record does not exist, an empty <c>VendInvoiceInfoLine_Project</c> table record is returned.
    /// </remarks>
    public static VendInvoiceInfoLine_Project findByVendInvoiceInfoLineRefRecId(
    VendInvoiceInfoLineRefRecId _vendInvoiceInfoLineRefRecId,
    boolean _forUpdate = false,
    ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendInvoiceInfoLine_Project vendInvoiceInfoLine_Project;
        vendInvoiceInfoLine_Project.selectForUpdate(_forUpdate);

        if (_vendInvoiceInfoLineRefRecId)
        {
            if (_forUpdate)
            {
                if (_concurrencyModel != ConcurrencyModel::Auto)
                {
                    vendInvoiceInfoLine_Project.concurrencyModel(_concurrencyModel);
                }
            }

            select firstonly vendInvoiceInfoLine_Project
            where vendInvoiceInfoLine_Project.VendInvoiceInfoLineRefRecId == _vendInvoiceInfoLineRefRecId;
        }

        return vendInvoiceInfoLine_Project;
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanyExemptTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method calculates the Intercompany exemption tax amounts that needs to be posted on to the intercompany accounts.
    /// </summary>
    /// <param name="_vendInvoiceInfoLine">
    /// The <c>VendInvoiceInfoLine</c> record for which the intercompany exemption tax is calculated.
    /// </param>
    /// <param name="_salesCurrency">
    /// The <c>CurrencyCode</c> to which the current amount needs to be changed.
    /// </param>
    /// <returns>
    /// Calculated intercompany exemption tax.
    /// </returns>
    public static TaxAmountCur intercompanyExemptTax(VendInvoiceInfoLine _vendInvoiceInfoLine, CurrencyCode _salesCurrency)
    {
        TaxUncommitted          taxUncommitted;

        select sum(TaxInCostPriceRegulated) from taxUncommitted
            where   taxUncommitted.SourceRecId == _vendInvoiceInfoLine.RecId &&
                taxUncommitted.SourceTableId == _vendInvoiceInfoLine.TableId &&
                taxUncommitted.TaxGroup == _vendInvoiceInfoLine.TaxGroup &&
                taxUncommitted.TaxItemGroup == _vendInvoiceInfoLine.TaxItemGroup &&
                taxUncommitted.TaxInCostPriceRegulated != 0;

        // taxUncommitted.TaxInCostPriceRegulated is always in the vendor invoice line currency. So taking the vendor invoice line currency code to convert to transfer currency.
        TaxAmountCur intercompanyExemptTax = CurrencyExchangeHelper::curAmount2CurAmount(taxUncommitted.TaxInCostPriceRegulated,
                                                                            _vendInvoiceInfoLine.CurrencyCode,
                                                                            _salesCurrency,
                                                                            _vendInvoiceInfoLine.vendInvoiceInfoTable().TransDate);
        return intercompanyExemptTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjCostSalesPriceFromPriceSetup</Name>
				<Source><![CDATA[
    private void setProjCostSalesPriceFromPriceSetup(VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        boolean		priceFound;

        if (this.ProjId && !_vendInvoiceInfoLine.ItemId)
        {
            ProjCategoryType projCategoryType = ProjCategory::find(this.ProjCategoryId).CategoryType;
            ProjPriceParameters priceParams;
            PurchLine purchLine = _vendInvoiceInfoLine.purchLine();
            Price actualCostPrice = _vendInvoiceInfoLine.PurchPrice;
            if (purchLine)
            {
                actualCostPrice = (purchLine.LineDisc || purchLine.LinePercent) ?
                    ProjectSourceDocumentLineItemHelper::getCostPriceWithDiscountApplied(actualCostPrice, purchLine.LineDisc, purchLine.LinePercent):
                    actualCostPrice;
            }

            switch (projCategoryType)
            {
                case ProjCategoryType::Cost :

                    if (!this.isIntercompany())
                    {
                        priceParams = ProjCostPriceExpense::constructPriceParametersForFindCostPrice(
                            this.ProjId,
                            this.Resource,
                            this.ProjCategoryId);
                        _vendInvoiceInfoLine.PurchPrice = ProjCostPriceExpense::findCostPriceByPriceParameters(priceParams);

                        _vendInvoiceInfoLine.LineAmount = _vendInvoiceInfoLine.calcLineAmountForced();
                    }

                    priceParams = ProjCostSalesPrice::constructPriceParametersForFindCostSalesPrice(
                        this.ProjId,
                        this.Resource,
                        this.ProjCategoryId,
                        actualCostPrice,
                        _vendInvoiceInfoLine.currencyCode,
                        this.ProjSalesCurrencyId);
                    [this.ProjSalesPrice, priceFound] = ProjCostSalesPrice::findCostSalesPriceByPriceParameters(priceParams);
                    break;

                case ProjCategoryType::Hour :
                    priceParams = ProjHourCostPrice::constructPriceParametersForFindCostPrice(
                        this.ProjId,
                        this.Resource,
                        this.ProjCategoryId,
                        this.ProjLinePropertyId);
                    _vendInvoiceInfoLine.PurchPrice = ProjHourCostPrice::findCostPriceByPriceParameters(priceParams);

                    _vendInvoiceInfoLine.LineAmount = _vendInvoiceInfoLine.calcLineAmountForced();
                    AmountMST costPriceMst = ExchangeRateHelper::mstPrice(actualCostPrice, _vendInvoiceInfoLine.currencyCode);

                    priceParams = ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
                        this.ProjId,
                        this.Resource,
                        this.ProjCategoryId,
                        this.ProjLinePropertyId,
                        costPriceMst,
                        this.ProjSalesCurrencyId);
                    [this.ProjSalesPrice, priceFound] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(priceParams);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromVendInvoiceInfoLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new record in the <c>VendInvoiceInfoLine_project</c> table, based on the existing
    /// <c>VendInvoiceInfoLine</c> record.
    /// </summary>
    /// <param name="_vendInvoiceInfoLine">
    /// The <c>VendInvoiceInfoLine</c> record to create a <c>VendInvoiceInfoLine_project</c> record.
    /// </param>
    /// <param name="_purchId">
    /// A Purchase order value.
    /// </param>
    /// <param name="_procurementCategory">
    /// A Procurement category value.
    /// </param>
    public static void createFromVendInvoiceInfoLine(VendInvoiceInfoLine _vendInvoiceInfoLine,
                                                    PurchId _purchId = '',
                                                    PurchCategory _procurementCategory = 0)
    {
        VendInvoiceInfoLine_project vendInvoiceInfoLine_project;
        vendInvoiceInfoLine_project.VendInvoiceInfoLineRefRecId = _vendInvoiceInfoLine.RecId;
        vendInvoiceInfoLine_project.ProjId                      = PurchTable::find(_purchId).ProjId;
        vendInvoiceInfoLine_project.ProjDataAreaId              = curExt();
        ProjCategoryId projCategoryId                           = ProjCategory::getDefaultProjectGlobalCategory(_procurementCategory);
        vendInvoiceInfoLine_project.ProjCategoryId	            = projCategoryId ? projCategoryId : ProjParameters::find().ItemCategory;
        vendInvoiceInfoLine_project.ProjLinePropertyId          = ProjLinePropertySetup::findLinePropertyId(vendInvoiceInfoLine_project.ProjId, vendInvoiceInfoLine_project.ProjCategoryId);
        if (_vendInvoiceInfoLine.ItemId && vendInvoiceInfoLine_project.ProjCategoryId)
        {
            vendInvoiceInfoLine_project.ProjTaxItemGroupId = ProjParameters::TaxItemGroupItem(vendInvoiceInfoLine_project.ProjCategoryId, _vendInvoiceInfoLine.ItemId);
        }
        else
        {
            vendInvoiceInfoLine_project.ProjTaxItemGroupId = ProjCategory::find(vendInvoiceInfoLine_project.ProjCategoryId).TaxItemGroupId;
        }
        vendInvoiceInfoLine_project.ProjSalesCurrencyId         = _vendInvoiceInfoLine.currencyCode;

        if(_purchId && VendInvInfoLineProjCreationOnImportFlight::instance().isEnabled())
        {
            PurchLine purchLine;
            if (_vendInvoiceInfoLine.PurchaseLineLineNumber)
            {
                purchLine = PurchLine::find(_purchId, _vendInvoiceInfoLine.PurchaseLineLineNumber);
            }
            else
            {
                purchLine = PurchLine::find(_purchId);
            }
            
            if(purchLine)
            {
                vendInvoiceInfoLine_project.initFromPurchLine(purchLine);
            }
        }
        vendInvoiceInfoLine_project.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromVendInvoiceInfoLineTemplate</Name>
				<Source><![CDATA[
    public static void createFromVendInvoiceInfoLineTemplate(VendInvoiceInfoLine _vendInvoiceInfoLine, VendInvoiceStandardLineTemplate _vendInvoiceStandardLineTemplate)
    {
        VendInvoiceInfoLine_project vendInvoiceInfoLine_project;
        vendInvoiceInfoLine_project.VendInvoiceInfoLineRefRecId = _vendInvoiceInfoLine.RecId;
        vendInvoiceInfoLine_project.ProjId                      = _vendInvoiceStandardLineTemplate.ProjId;
        vendInvoiceInfoLine_project.ProjDataAreaId              = curExt();
        ProjCategoryId projCategoryId                           = _vendInvoiceStandardLineTemplate.ProjCategoryId ? _vendInvoiceStandardLineTemplate.ProjCategoryId : ProjCategory::getDefaultProjectGlobalCategory(_vendInvoiceStandardLineTemplate.ProcurementCategory);
        vendInvoiceInfoLine_project.ProjCategoryId	            = projCategoryId ? projCategoryId : ProjParameters::find().ItemCategory;
        vendInvoiceInfoLine_project.ProjLinePropertyId          = ProjLinePropertySetup::findLinePropertyId(vendInvoiceInfoLine_project.ProjId, vendInvoiceInfoLine_project.ProjCategoryId);
        if (_vendInvoiceInfoLine.ItemId && vendInvoiceInfoLine_project.ProjCategoryId)
        {
            vendInvoiceInfoLine_project.ProjTaxItemGroupId = ProjParameters::TaxItemGroupItem(vendInvoiceInfoLine_project.ProjCategoryId, _vendInvoiceInfoLine.ItemId);
        }
        else
        {
            vendInvoiceInfoLine_project.ProjTaxItemGroupId = ProjCategory::find(vendInvoiceInfoLine_project.ProjCategoryId).TaxItemGroupId;
        }
        vendInvoiceInfoLine_project.ProjSalesCurrencyId         = _vendInvoiceInfoLine.currencyCode;

        vendInvoiceInfoLine_project.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>VendInvoiceInfoLine_Project</c> record is located in the table.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    ///    The record ID to check.
    /// </param>
    /// <returns>
    ///    true if the <c>VendInvoiceInfoLine_Project</c> record is located in the table; otherwise, false.
    /// </returns>
    public static boolean existsForInvoice(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        VendInvoiceInfoLine         vendInvoiceInfoLine;
        VendInvoiceInfoLine_Project vendInvoiceInfoLine_Project;
        
        select firstonly RecId from vendInvoiceInfoLine
            where vendInvoiceInfoLine.ParmId == _vendInvoiceInfoTable.ParmId
               && vendInvoiceInfoLine.TableRefId == _vendInvoiceInfoTable.TableRefId
        join RecId from vendInvoiceInfoLine_Project
            where vendInvoiceInfoLine_Project.VendInvoiceInfoLineRefRecId == vendInvoiceInfoLine.RecId
               && vendInvoiceInfoLine_Project.ProjId;
        
        if (vendInvoiceInfoLine_Project.RecId)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyCostPriceEqualsSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// When cost price is set to sales price by default, this method
    /// checks if a vendor invoice line has a project type of Item.
    /// </summary>
    /// <param name = "_vendInvoiceInfoLine">
    /// <c>vendInvoiceInfoLine</c> table buffer.
    /// </param>
    /// <returns>
    /// true if cost price should be set as sales price; otherwise, false.
    /// </returns>
    private boolean verifyCostPriceEqualsSalesPrice(VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        return !_vendInvoiceInfoLine.ItemId &&
            this.ProjId &&
            ProjCategory::isProjCategoryTypeItem(this.ProjCategoryId) &&
            ProjParameters::find().DefaultCostPriceAsSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromVendInvoiceInfoLineFromEntity</Name>
				<Source><![CDATA[
    public static void createFromVendInvoiceInfoLineFromEntity(VendInvoiceInfoLine _vendInvoiceInfoLine,
                                                    PurchId _purchId = '',
                                                    PurchCategory _procurementCategory = 0)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable = VendInvoiceInfoTable::findTableRefId(_vendInvoiceInfoLine.TableRefId);
        if(PurchTable::find(_purchId).ProjId
            && (VendInvoiceInfoLine_Project::findByVendInvoiceInfoLineRefRecId(_vendInvoiceInfoLine.RecId).RecId == 0)
            && VendInvInfoLineProjCreationOnImportFlight::instance().isEnabled())
        {
            VendInvoiceInfoLine_Project::createFromVendInvoiceInfoLine(_vendInvoiceInfoLine, _purchId, _procurementCategory);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS128424</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@SYS128423</Label>
	<TableGroup>TransactionLine</TableGroup>
	<TitleField1>ProjId</TitleField1>
	<TitleField2>ProjCategoryId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>VendInvoiceInfoLineRefRecIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjLinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceInfoLineRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS89920</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjLinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectSalesTax</Name>
			<Label>@SYS67871</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTaxItemGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesPrice</Name>
			<Label>@SYS5755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjSalesCurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransferPrice</Name>
			<Label>@SYS4005093</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransferCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransferPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IntercompanyBilled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>boolean</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjActivityNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjActivityNumber</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS6114</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjDataAreaId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<Label>@Proj:ProjectCompany</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjLinePropertyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjSalesCurrencyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Label>@SYS56480</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProjSalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesPriceCost</ExtendedDataType>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjSalesUnitId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS190813</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxItemGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxItemGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjItemTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransferCurrency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransferPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS11770</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendInvoiceInfoLineRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>VendInvoiceInfoLineRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>HcmWorkerRecId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Resource</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ResourceRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RoleId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>PSASchedRoleId</ExtendedDataType>
			<FeatureClass>ProjProjectOperationsSubcontractLineIntegrationToggle</FeatureClass>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VendInvoiceInfoLineRefRecIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VendInvoiceInfoLineRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>IntercompanyBilledIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IntercompanyBilled</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ActivityNumberIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjActivityNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjDataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>VendDocumentLineProjectMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>VendDocumentLineRefRecId</MapField>
					<MapFieldTo>VendInvoiceInfoLineRefRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjActivityNumber</MapField>
					<MapFieldTo>ProjActivityNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCategoryId</MapField>
					<MapFieldTo>ProjCategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjLinePropertyId</MapField>
					<MapFieldTo>ProjLinePropertyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTransId</MapField>
					<MapFieldTo>ProjTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjSalesCurrencyId</MapField>
					<MapFieldTo>ProjSalesCurrencyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjSalesPrice</MapField>
					<MapFieldTo>ProjSalesPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTaxGroupId</MapField>
					<MapFieldTo>ProjTaxGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTaxItemGroupId</MapField>
					<MapFieldTo>ProjTaxItemGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjSalesUnitId</MapField>
					<MapFieldTo>ProjSalesUnitId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjSalesCurrencyId</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>ProjSalesCurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjItemTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjItemTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTransId</Name>
					<SourceEDT>ProjItemTransId</SourceEDT>
					<Field>ProjTransId</Field>
					<RelatedField>ProjTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjLinePropertyId</Name>
					<Field>ProjLinePropertyId</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjSalesUnitId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjSalesUnitId</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>VendInvoiceInfoLine_Project</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjSalesUnitId</Name>
					<Field>ProjSalesUnitId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjActivityNumber</Name>
					<Field>ProjActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxGroupId</Name>
					<Field>ProjTaxGroupId</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxItemGroupId</Name>
					<Field>ProjTaxItemGroupId</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TransferCurrency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TransferCurrency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransferCurrency</Name>
					<Field>TransferCurrency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendInvoiceInfoLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendInvoiceInfoLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceInfoLineRefRecId</Name>
					<SourceEDT>VendInvoiceInfoLineRefRecId</SourceEDT>
					<Field>VendInvoiceInfoLineRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TableRefIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Resource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>