<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportingTaxComponent_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxReportingTaxComponent_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>componentName</Name>
				<Source><![CDATA[
    /// <summary>
    /// To display component description based on component.
    /// </summary>
    /// <returns>
    /// Returns the description of associated component.
    /// </returns>
    display Name componentName()
    {
        return TaxComponentTable_IN::find(this.TaxComponentTable_IN).Name;
    }
]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether specified record exists in <c>TaxReportingTaxComponent_IN</c> table and displays a message when record does not exists.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecId</c> value of the record for which to check
    /// </param>
    /// <returns>
    /// true if specified record exists, otherwise false
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;

        if (_recId && !TaxReportingTaxComponent_IN::exist(_recId))
        {
            ret = checkFailed(strFmt("@SYS102169", _recId));
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>TaxReportingTaxComponent_IN</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>TaxReportingTaxComponent_IN</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        return _recId && (select firstonly RecId from taxReportingTaxComponent_IN
                                    where taxReportingTaxComponent_IN.RecId == _recId).RecId != 0;
    }
]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// To return the specififed record from TaxReportingTaxComponent_IN table
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>TaxReportingTaxComponent_IN</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The specified record in the <c>TaxReportingTaxComponent_IN</c> table; otherwise, an empty record.
    /// </returns>
    public static TaxReportingTaxComponent_IN find(
        RecId _recId,
        boolean _forUpdate = false)
    {
        TaxReportingTaxComponent_IN taxReportingTaxComponent;

        taxReportingTaxComponent.selectForUpdate(_forUpdate);

        if (_recId)
        {
            select firstonly taxReportingTaxComponent
                where taxReportingTaxComponent.RecId == _recId;
        }

        return taxReportingTaxComponent;
    }
]]></Source>
			</Method>
			<Method>
				<Name>findByTaxReportingAggregrateCategory_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TaxReportingTaxComponent_IN</c> table.
    /// </summary>
    /// <param name="_taxReportingAggregrateCategoryRecId">
    /// The record ID of the <c>TaxReportingAggregrateCategory</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The specified record in the <c>TaxReportingTaxComponent_IN</c> table; otherwise, an empty record.
    /// </returns>
    static TaxReportingTaxComponent_IN findByTaxReportingAggregrateCategory_IN(RecId _taxReportingAggregrateCategoryRecId,
                          boolean _forUpdate = false)
    {
        TaxReportingTaxComponent_IN taxReportingTaxComponent;

        taxReportingTaxComponent.selectForUpdate(_forUpdate);

        select firstonly taxReportingTaxComponent
            where taxReportingTaxComponent.TaxReportingAggregrateCategory_IN == _taxReportingAggregrateCategoryRecId;

        return taxReportingTaxComponent;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@SYP4860208</DeveloperDocumentation>
	<Label>@SYP4860206</Label>
	<TitleField1>Description</TitleField1>
	<TitleField2>TaxReportingAggregrateCategory_IN</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>Tax</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxReportingAggregrateCategory_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxComponentTable_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ComponentGroup</Name>
			<Label>@GLS5087</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxComponentTable_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxComponentTable_IN</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxComponentRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxReportingAggregrateCategory_IN</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxComponentTable_IN</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TaxComponentTable_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxComponentTable_IN</Name>
					<Field>TaxComponentTable_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxReportingAggregrateCategory_IN</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TaxReportingAggregrateCategory_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxReportingAggregrateCategory_IN</Name>
					<Field>TaxReportingAggregrateCategory_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>