<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VehicleModelTable_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VehicleModelTable_W extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record exists in the <c>VehicleModelTable_W</c> table; if not,
    ///    an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>VehicleModelTable_W</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;

        if (!VehicleModelTable_W::exist(_recId))
        {
            ret = checkFailed(strfmt(VehicleModelTable_W::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a description of the record in the <c>VehicleModelTable_W</c> table with the specified vehicle model.
    /// </summary>
    /// <param name="_model">
    ///    The vehicle model of the <c>VehicleModelTable_W</c> record.
    /// </param>
    /// <returns>
    ///    A description of the record in the <c>VehicleModelTable_W</c> table.
    /// </returns>
    public static Description description(VehicleModel_W _model)
    {
        VehicleModelTable_W vehicleModelTable = VehicleModelTable_W::findByModel(_model);

        return vehicleModelTable.Description ?
               vehicleModelTable.Description :
               _model;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record is located in the <c>VehicleModelTable_W</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>VehicleModelTable_W</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        boolean found;

        found = (select firstonly RecId from vehicleModelTable_W
                     where vehicleModelTable_W.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>VehicleModelTable_W</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>VehicleModelTable_W</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>VehicleModelTable_W</c> table; otherwise, an empty record.
    /// </returns>
    public static VehicleModelTable_W find(
        RecId              _recId,
        boolean            _forupdate = false,
        ConcurrencyModel   _concurrencyModel = ConcurrencyModel::Auto)
    {
        VehicleModelTable_W vehicleModelTable_W;

        vehicleModelTable_W.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vehicleModelTable_W.concurrencyModel(_concurrencyModel);
        }

        select firstonly vehicleModelTable_W
            where vehicleModelTable_W.RecId == _recId;

        return vehicleModelTable_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByModel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record in the <c>VehicleModelTable_W</c> table with the specified vehicle model.
    /// </summary>
    /// <param name="_model">
    ///    The vehicle model of the <c>VehicleModelTable_W</c> record to find.
    /// </param>
    /// <returns>
    ///    A record in the <c>VehicleModelTable_W</c> table; otherwise, an empty record.
    /// </returns>
    public static VehicleModelTable_W findByModel(VehicleModel_W _model)
    {
        VehicleModelTable_W vehicleModelTable;

        if (_model)
        {
            select firstonly vehicleModelTable
                where vehicleModelTable.VehicleModel == _model;
        }

        return vehicleModelTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>RU,LT,LV</CountryRegionCodes>
	<FormRef>VehicleModelTable_W</FormRef>
	<Label>@GLS111075</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>VehicleModel</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ModelIdx</ClusteredIndex>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>ModelIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VehicleModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VehicleModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VehicleModel</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VehicleModel</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VehicleModel</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VehicleModel_W</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ModelIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VehicleModel</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>