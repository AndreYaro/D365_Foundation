<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxRegistration</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxRegistration extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDuplicate_RU</Name>
				<Source><![CDATA[
    private boolean checkDuplicate_RU()
    {
        DirPartyTable dirPartyTable = DirPartyTable::findRec(DirPartyLocation::findRec(this.DirPartyLocation).Party);
        INN_RU        inn           = dirPartyTable.partyINNasOfDate_RU();
        KPPU_RU       kpp           = dirPartyTable.partyKPPasOfDate_RU();
        boolean       ret           = true;

        switch (TaxRegistrationLegislationTypes::findByTaxRegistrationTypeAppRule(this.TaxRegistrationTypeApplicabilityRule).TaxRegistrationTypesList)
        {
            case TaxRegistrationTypesList::KPP:
                kpp = this.RegistrationNumber;
                break;
            case TaxRegistrationTypesList::INN:
                inn = this.RegistrationNumber;
                break;
        }

        if (TaxRegistration::existsDuplicateINNKPP_RU(this.DirPartyLocation, inn, kpp))
        {
            ret = checkFailed(strFmt("@GLS223699", inn, kpp));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSNILS_RU</Name>
				<Source><![CDATA[
    private boolean checkSNILS_RU()
    {
        str         payINNPFwithoutCS;
        int         i, totalSum, j, remainder;

        boolean checkFormat(str _string)
        {
            if (strlen(_string) != 14 || substr(_string, 4, 1) != '-' ||
                substr(_string, 8, 1) != '-')
            {
                return false;
            }
            if (substr(_string, 12, 1) != ' ')
            {
                return checkFailed("@GLS223698");
            }
            _string = strrem(_string, '- ');
            if (strlen(_string) != 11)
            {
                return false;
            }

            for (i = 1; i <= 11; i++)
            {
                if (int2str(str2int(substr(_string, i, 1))) != substr(_string, i, 1))
                {
                    return false;
                }
            }
            return true;
        }
        ;

        totalSum = 0;
        j        = 9;

        if (this.RegistrationNumber)
        {
            if (checkFormat(this.RegistrationNumber))
            {
                payINNPFwithoutCS = strdel(this.RegistrationNumber, 12, 3);
                if (payINNPFwithoutCS >= '001-001-999')
                {
                    payINNPFwithoutCS = strrem(payINNPFwithoutCS, '-');
                    for (i = 1; i <= strlen(payINNPFwithoutCS); i++)
                    {
                        totalSum += str2int(substr(payINNPFwithoutCS, i, 1)) * j;
                        j--;
                    }
                    remainder = totalSum div 101;
                    if ((totalSum - 101 * remainder) != str2int(strdel(this.RegistrationNumber, 1, 12)))
                    {
                        if ((totalSum - 101 * remainder == 0 || totalSum - 101 * remainder == 100) &&
                            str2int(strdel(this.RegistrationNumber, 1, 12)) == 0)
                        {
                            return true;
                        }
                        else
                        {
                            return checkFailed("@GLS223700");
                        }
                    }
                }
            }
            else
            {
                return checkFailed("@GLS223703");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesRecordExistWithRegistrationNumber</Name>
				<Source><![CDATA[
    private boolean doesRecordExistWithRegistrationNumber()
    {
        TaxRegistration taxRegistrationLocal;
        TaxRegistrationTypeApplicabilityRule taxRegistrationTypeApplicabilityRule;
        TaxRegistrationTypeCountryId countryRegionId;
        date minDateCheck = dateNull();
        date maxDateCheck = maxDate();

        countryRegionId = this.showCountryId();

        select firstonly validTimeState(minDateCheck, maxDateCheck) RecId from taxRegistrationLocal
            where taxRegistrationLocal.RegistrationNumber == this.RegistrationNumber
                && taxRegistrationLocal.RecId != this.RecId
        exists join taxRegistrationTypeApplicabilityRule
            where taxRegistrationTypeApplicabilityRule.RecId == taxRegistrationLocal.TaxRegistrationTypeApplicabilityRule
                && taxRegistrationTypeApplicabilityRule.CountryRegionId == countryRegionId;

        return taxRegistrationLocal != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextValidFromDate</Name>
				<Source><![CDATA[
    private date getNextValidFromDate()
    {
        TaxRegistration taxRegistrationLocal;
        date startDate = dateNull();
        date endDate = maxDate();
        date returnDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        // The new ValidFrom will be ValidFrom + 1 from the previous record,
        // when the last record did not have ValidTo specified (never).
        // Otherwise, the new ValidFrom is the ValidTo + 1 from the previous transaction.
        select firstOnly validTimeState(startDate, endDate) ValidFrom, ValidTo
            from taxRegistrationLocal
            order by ValidFrom desc
            where taxRegistrationLocal.RecId != this.RecId
                && taxRegistrationLocal.DirPartyLocation == this.DirPartyLocation
                && TaxRegistrationLocal.TaxRegistrationTypeApplicabilityRule ==
                    this.TaxRegistrationTypeApplicabilityRule;

        if (taxRegistrationLocal)
        {
            if (taxRegistrationLocal.ValidTo == maxDate())
            {
                returnDate = taxRegistrationLocal.ValidFrom + 1;
            }
            else
            {
                returnDate = taxRegistrationLocal.ValidTo + 1;
            }
        }

        return returnDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.ValidFrom = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the <c>modifiedField</c> method to allow for assignment of the next valid date for the
    /// <c>ValidFrom</c> column when tax Registration rule value is modified.
    /// </summary>
    /// <param name="_fieldId">
    /// The ID that identifies the field that has been modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        #ISOCountryRegionCodes
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(TaxRegistration, TaxRegistrationTypeApplicabilityRule) :
                if (this.TaxRegistrationTypeApplicabilityRule)
                {
                    this.ValidFrom = this.getNextValidFromDate();
                }
                break;
            case fieldNum(TaxRegistration, RegistrationNumber) :
                TaxRegistrationTypeApplicabilityRule registrationRule = TaxRegistrationTypeApplicabilityRule::find(this.TaxRegistrationTypeApplicabilityRule);
                TaxRegistrationLegislationTypes taxRegistrationLegislationTypes = TaxRegistrationLegislationTypes::findByTaxRegistrationTypeAppRule(registrationRule.RecId);

                if (this.RegistrationNumber
                    && this.RegistrationNumber != this.orig().RegistrationNumber
                    && taxRegistrationLegislationTypes.TaxRegistrationTypesList == TaxRegistrationTypesList::UID)
                {
                    TaxEnterpriseBranchNumber_BE::validateVatNumUIDAccordance(this.RegistrationNumber, DirPartyLocation::findRec(this.DirPartyLocation).Party);
                    
                    CompanyInfo companyInfo;

                    select firstonly forupdate companyInfo
                        where companyInfo.RecId == DirPartyLocation::findRec(this.DirPartyLocation).Party;

                    if (companyInfo && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBE], companyInfo.DataArea))
                    {
                        companyInfo.CoRegNum = strKeep(this.RegistrationNumber, '0123456789.');
                        companyInfo.doUpdate();
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCountryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the country ID for a tax registration rule.
    /// </summary>
    /// <returns>
    /// The country ID; otherwise, a blank value.
    /// </returns>
    public display TaxRegistrationTypeCountryId showCountryId()
    {
        return TaxRegistrationTypeApplicabilityRule::find(this.TaxRegistrationTypeApplicabilityRule).CountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCountryIdISOCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the country ID for a tax registration rule. And return ISO code of country.
    /// </summary>
    /// <returns>
    /// The country ID ISO code; otherwise, a blank value.
    /// </returns>
    public display TaxRegistrationTypeCountryId showCountryIdISOCode()
    {
        LogisticsAddressCountryRegionId id = TaxRegistrationTypeApplicabilityRule::find(this.TaxRegistrationTypeApplicabilityRule).CountryRegionId;

        return LogisticsAddressCountryRegion::find(id).ISOcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the format mask that is based on the information specified for a tax registration rule.
    /// </summary>
    /// <returns>
    /// The format mask; otherwise, a blank value.
    /// </returns>
    public display TaxRegistrationFormat showFormat()
    {
        return TaxRegistrationTypeApplicabilityRule::find(this.TaxRegistrationTypeApplicabilityRule).Format;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTaxAuthority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax authority name that is based on the information specified for a tax registration
    /// rule.
    /// </summary>
    /// <returns>
    /// The tax authority name; otherwise, a blank value.
    /// </returns>
    public display TaxAuthority showTaxAuthority()
    {
        return TaxRegistrationTypeApplicabilityRule::find(this.TaxRegistrationTypeApplicabilityRule).TaxRegistrationAuthority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        #ISOCountryRegionCodes

        boolean isValid = super();

        if (isValid)
        {
            TaxRegistrationTypeApplicabilityRule registrationRule = TaxRegistrationTypeApplicabilityRule::find(this.TaxRegistrationTypeApplicabilityRule);
            LogisticsAddressCountryRegion registrationRuleCountryRegion = LogisticsAddressCountryRegion::find(registrationRule.CountryRegionId);
            boolean primaryAddressTaxRegistrationNumber = registrationRule.IsPrimaryAddressRestricted;

            if (registrationRule.RecId
                && (this.orig().RegistrationNumber != this.RegistrationNumber
                || this.orig().TaxRegistrationTypeApplicabilityRule != this.TaxRegistrationTypeApplicabilityRule))
            {
                if (strLen(registrationRule.Format)
                    && strLen(this.RegistrationNumber) != strLen(registrationRule.Format))
                {
                    isValid = checkFailed(strFmt("@GLS220931", this.RegistrationNumber, strLen(registrationRule.Format), registrationRule.Format));
                }

                if (isValid && !TaxRegistration::doesValueMatchMask(this.RegistrationNumber, registrationRule.Format))
                {
                    isValid = checkFailed(strFmt("@RegistrationNumbers:TheRegistrationNumberIsInvalid", registrationRule.Format));
                }

                if (isValid && registrationRule.IsRegistrationNumberUnique
                    && registrationRuleCountryRegion.isoCode != #IsoRU)
                {
                    if (this.doesRecordExistWithRegistrationNumber())
                    {
                        this.RegistrationNumber = this.orig().RegistrationNumber;
                        isValid = checkFailed(strFmt("@RegistrationNumbers:RegistrationNumberMustBeUnique",
                            TaxRegistrationType::find(registrationRule.TaxRegistrationType).TaxRegstrationType, registrationRule.CountryRegionId));
                    }
                }

                if (isValid && !registrationRule.IsRegistrationNumberUpdateable)
                {
                    if (strLen(strRTrim(this.orig().RegistrationNumber)) > 0
                        && this.orig().RegistrationNumber != this.RegistrationNumber
                        && this.RecId)
                    {
                        this.RegistrationNumber = this.orig().RegistrationNumber;
                        isValid = checkFailed(strFmt("@RegistrationNumbers:TheRegistrationNumberCannotBeUpdated",
                            TaxRegistrationType::find(registrationRule.TaxRegistrationType).TaxRegstrationType, registrationRule.CountryRegionId));
                    }
                }

                TaxRegistrationLegislationTypes taxRegistrationLegislationTypes = TaxRegistrationLegislationTypes::findByTaxRegistrationTypeAppRule(registrationRule.RecId);

                if (isValid
                    && taxRegistrationLegislationTypes.TaxRegistrationTypesList == TaxRegistrationTypesList::UID
                    && this.RegistrationNumber
                    && this.RegistrationNumber != this.orig().RegistrationNumber
                    && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCH])
                    && registrationRuleCountryRegion.isoCode == #isoCH)
                {
                    isValid = TaxRegistration::checkUID_CH(this.RegistrationNumber);
                    if (! isValid)
                    {
                        this.RegistrationNumber = this.orig().RegistrationNumber;
                    }
                }

                if (isValid
                    && taxRegistrationLegislationTypes.TaxRegistrationTypesList == TaxRegistrationTypesList::UID
                    && this.RegistrationNumber
                    && this.RegistrationNumber != this.orig().RegistrationNumber
                    && registrationRuleCountryRegion.isoCode == #isoBE)
                {
                    isValid = TaxEnterpriseBranchNumber_BE::checkEnterPriseNumber(this.RegistrationNumber);
                }

                if (isValid
                    && taxRegistrationLegislationTypes.TaxRegistrationTypesList == TaxRegistrationTypesList::BranchId
                    && this.RegistrationNumber
                    && this.RegistrationNumber != this.orig().RegistrationNumber
                    && registrationRuleCountryRegion.isoCode == #isoBE)
                {
                    isValid = TaxEnterpriseBranchNumber_BE::checkBranchNumber(this.RegistrationNumber);
                }

                if (isValid
                    && taxRegistrationLegislationTypes.TaxRegistrationTypesList == TaxRegistrationTypesList::TAXID
                    && this.RegistrationNumber
                    && this.RegistrationNumber != this.orig().RegistrationNumber)
                {
                    TaxRegistrationNumber tmpRegistrationNumber = this.RegistrationNumber;

                    #ISOCountryRegionCodesEuro_W
                    if (conFind(#EuropeanUnionCountries, registrationRuleCountryRegion.ISOcode)
                        || conFind(#EuropeanFreeTradeAssociationCountries, registrationRuleCountryRegion.ISOcode))
                    {
                        TaxCode taxCode = TaxCountryRegionParameters::find(registrationRule.CountryRegionId).SalesTaxCode;
                        tmpRegistrationNumber = TaxVATNumTable::stripVATNum(tmpRegistrationNumber , taxCode);
                    }

                    isValid = TaxVATNumValidate::construct(registrationRule.CountryRegionId).validateVATNum(tmpRegistrationNumber);
                    if (!isValid)
                    {
                        this.RegistrationNumber = this.orig().RegistrationNumber;
                    }
                }

                if (isValid
                    && this.orig().RegistrationNumber == ''
                    && this.RegistrationNumber
                    && this.DirPartyLocation
                    && registrationRule.IsPrimaryAddressRestricted
                    && DirPartyLocation::findRec(this.DirPartyLocation).IsPrimaryTaxRegistration == NoYes::No)
                {
                    isValid = isValid && checkFailed(strFmt("@RegistrationNumbers:TheRegistrationTypeAppliesOnlyToPrimaryAddress",
                        TaxRegistrationType::find(registrationRule.TaxRegistrationType).TaxRegstrationType,
                        registrationRule.CountryRegionId));
                }

                if (isValid
                    && this.RegistrationNumber
                    && taxRegistrationLegislationTypes
                    && taxRegistrationLegislationTypes.TaxRegistrationTypesList == TaxRegistrationTypesList::INN )
                {
                    isValid = CompanyInfoHelper::checkInn_RU(this.RegistrationNumber);
                    if (! isValid)
                    {
                        this.RegistrationNumber = this.orig().RegistrationNumber;
                    }
                }

                if (isValid
                    && this.RegistrationNumber
                    && taxRegistrationLegislationTypes
                    && taxRegistrationLegislationTypes.TaxRegistrationTypesList == TaxRegistrationTypesList::SNILS )
                {
                    isValid = this.checkSNILS_RU();
                    if (! isValid)
                    {
                        this.RegistrationNumber = this.orig().RegistrationNumber;
                    }
                }

                if (isValid
                    && this.RegistrationNumber
                    && taxRegistrationLegislationTypes
                    && (taxRegistrationLegislationTypes.TaxRegistrationTypesList == TaxRegistrationTypesList::INN || taxRegistrationLegislationTypes.TaxRegistrationTypesList == TaxRegistrationTypesList::KPP))
                {
                    isValid = this.checkDuplicate_RU();
                    if (! isValid)
                    {
                        this.RegistrationNumber = this.orig().RegistrationNumber;
                    }
                }
                else if (registrationRule.IsRegistrationNumberUnique && this.doesRecordExistWithRegistrationNumber())
                {
                    this.RegistrationNumber = this.orig().RegistrationNumber;
                    isValid = checkFailed(strFmt("@RegistrationNumbers:RegistrationNumberMustBeUnique",
                        TaxRegistrationType::find(registrationRule.TaxRegistrationType).TaxRegstrationType,
                        registrationRule.CountryRegionId));
                }
            }

            if (isValid
                // <GEERU>
                && ! primaryAddressTaxRegistrationNumber
                // </GEERU>
                && this.orig().RegistrationNumber == ''
                && this.RegistrationNumber
                && this.DirPartyLocation
                && DirPartyLocation::findRec(this.DirPartyLocation).IsPrimary == NoYes::No)
            {
                info("@GLS221062");
            }

            if (isValid
                && (!this.RecId || this.orig().TaxRegistrationTypeApplicabilityRule != this.TaxRegistrationTypeApplicabilityRule)
                && registrationRuleCountryRegion.ISOcode == #isoRu
                && this.existRegistrationWithSameTypeRestrictAndRegCategory(this.TaxRegistrationTypeApplicabilityRule))
            {
                warning("@RegistrationNumbers:SameRegCategoryForTaxRegistationExists");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegNumFromJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the tax registration number.
    /// </summary>
    /// <param name = "_tableId">Table Id of a journal.</param>
    /// <param name = "_recId">Record If of a journal.</param>
    /// <param name="_transDate">
    ///    The date on which to find the tax registration number.
    /// </param>
    /// <returns>
    ///    The tax registration number.
    /// </returns>
    /// <remarks>
    ///    The method first tries to get Tax registration number via <c>TaxDocumentRowTransaction</c> table if Multiple Tax IDs are set up.
    ///    Otherwise, it calls <c>getCompanyTaxRegNum_W</c> method.
    /// </remarks>
    public static TaxRegistrationNumber getTaxRegNumFromJournal(
        RefTableId _tableId,
        RefRecId _recId,
        TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        TaxDocumentRowTransaction taxDocRowTransaction;

        switch(_tableId)
        {
            case tableNum(CustInvoiceJour):
            case tableNum(CustPackingSlipJour):
            case tableNum(VendInvoiceJour):
            case tableNum(VendPackingSlipJour):
            case tableNum(InventTransferJour):
                select firstonly TaxID from taxDocRowTransaction
                    where taxDocRowTransaction.TransactionJourHeaderRecId == _recId
                        && taxDocRowTransaction.TransactionJourHeaderTableId == _tableId;
                break;

            case tableNum(ProjInvoiceJour):
                // Cost
                taxDocRowTransaction = TaxRegistration::getTaxDocRowTransByProjInvoiceJour(tableNum(TaxEngineProjCostJourHeader), _recId);

                // Empl
                if (!taxDocRowTransaction)
                {
                    taxDocRowTransaction = TaxRegistration::getTaxDocRowTransByProjInvoiceJour(tableNum(TaxEngineProjEmplJourHeader), _recId);
                }

                // Item
                if (!taxDocRowTransaction)
                {
                    taxDocRowTransaction = TaxRegistration::getTaxDocRowTransByProjInvoiceJour(tableNum(TaxEngineProjItemJourHeader), _recId);
                }

                // ItemSO
                if (!taxDocRowTransaction)
                {
                    taxDocRowTransaction = TaxRegistration::getTaxDocRowTransByProjInvoiceJour(tableNum(TaxEngineProjItemSOJourHeader), _recId);
                }

                // OnAcct
                if (!taxDocRowTransaction)
                {
                    taxDocRowTransaction = TaxRegistration::getTaxDocRowTransByProjInvoiceJour(tableNum(TaxEngineProjOnAcctJourHeader), _recId);
                }

                // Revenue
                if (!taxDocRowTransaction)
                {
                    taxDocRowTransaction = TaxRegistration::getTaxDocRowTransByProjInvoiceJour(tableNum(TaxEngineProjRevenueJourHeader), _recId);
                }

                // RevenueSub
                if (!taxDocRowTransaction)
                {
                    taxDocRowTransaction = TaxRegistration::getTaxDocRowTransByProjInvoiceJour(tableNum(TaxEngineProjRevenueSubJourHeader), _recId);
                }

                break;
        }

        TaxRegistrationNumber regNum;

        if (taxDocRowTransaction.TaxID)
        {
            regNum = TaxRegistration::find(taxDocRowTransaction.TaxID).RegistrationNumber;
        }
        else if (FeatureStateProvider::isFeatureEnabled(CompanyTaxRegistrationFeature::instance()))
        {
            TaxRegNumFromJournalContract contract = TaxRegNumFromJournalContract::construct(
                _recId,
                _tableId,
                _transDate);
            regNum = TaxRegistration::getTaxRegNumFromJournalTaxIdByContract(contract);
        }
        else
        {
            regNum = TaxRegistration::getCompanyTaxRegNum_W(_transDate);
        }

        return regNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegNumFromJournalTaxIdByContract</Name>
				<Source><![CDATA[
    public static TaxRegistrationNumber getTaxRegNumFromJournalTaxIdByContract(TaxRegNumFromJournalContract _contract)
    {
        TaxRegistrationNumber regNum;

        regNum = TaxRegistration::getTaxRegNumFromJournalTaxId(_contract.parmTableId(), _contract.parmRecId());

        if (!regNum)
        {
            regNum = TaxRegistration::getCompanyTaxRegNum_W(_contract.parmTransDate());
        }

        return regNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegNumFromJournalTaxId</Name>
				<Source><![CDATA[
    public static TaxRegistrationNumber getTaxRegNumFromJournalTaxId(RefTableId _tableId, RefRecId _recId)
    {
        TaxRegistration taxRegistration;
        TaxRegistrationRecId taxId;

        switch(_tableId)
        {
            case tableNum(CustInvoiceJour):
                taxId = CustInvoiceJour::findRecId(_recId).TaxID;
                break;

            case tableNum(CustPackingSlipJour):
                taxId = CustPackingSlipJour::findRecId(_recId).TaxID;
                break;

            case tableNum(VendInvoiceJour):
                taxId = VendInvoiceJour::findRecId(_recId).TaxID;
                break;

            case tableNum(VendPackingSlipJour):
                taxId = VendPackingSlipJour::findRecId(_recId).TaxID;
                break;

            case tableNum(InventTransferJour):
                taxId = InventTransferJour::findRecId(_recId).TaxID;
                break;

            case tableNum(ProjInvoiceJour):
                taxId = ProjInvoiceJour::findRecId(_recId).TaxID;
                break;

            default:
                taxId = 0;
                break;
        }

        if (taxId)
        {
            taxRegistration = TaxRegistration::find(taxId);
        }

        return taxRegistration.RegistrationNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDocRowTransByProjInvoiceJour</Name>
				<Source><![CDATA[
    private static TaxDocumentRowTransaction getTaxDocRowTransByProjInvoiceJour(RefTableId _tableId, RefRecId _recId)
    {
        Common refTable = DictTable::construct(tableId2name(_tableId)).makeRecord();
 
        TaxDocumentRowTransaction taxDocRowTransLoc;

        const FieldName projInvoiceJourFieldName = 'ProjInvoiceJour';

        FieldId projInvoiceJourFieldId = fieldName2Id(_tableId, projInvoiceJourFieldName);

        if (projInvoiceJourFieldId)
        {
            select firstonly TaxID from taxDocRowTransLoc
                exists join refTable
                where refTable.(projInvoiceJourFieldId) == _recId
                    && refTable.RecId == taxDocRowTransLoc.TransactionJourHeaderRecId
                    && refTable.TableId == taxDocRowTransLoc.TransactionJourHeaderTableId;
        }
 
        return taxDocRowTransLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyTaxRegNum_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the company tax registration number.
    /// </summary>
    /// <param name="_transDate">
    ///    The date on which to find the tax registration number.
    /// </param>
    /// <param name="_fieldIdToCheck">
    ///    The id of the field in the <c>CompanyInfo</c> table to check before searching in the <c>TaxRegistration</c> table.
    /// </param>
    /// <returns>
    ///    The company tax registration number.
    /// </returns>
    /// <remarks>
    ///    The method first checks if the field with fieldId passed as the parameter is filled in the <c>CompanyInfo</c> table.
    ///    If yes, the method returns the value of this field. Otherwise if the current country context relates to the Western Europe,
    ///    tries to find tax registration number in the <c>TaxRegistration</c> table.
    /// </remarks>
    public static TaxRegistrationNumber getCompanyTaxRegNum_W(TransDate  _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                              FieldId    _fieldIdToCheck = fieldNum(CompanyInfo, VATNum))
    {
        CompanyInfo     companyInfo = CompanyInfo::find();
        VATNum          ret;

        ret = companyInfo.(_fieldIdToCheck);

        if (! ret && TaxRegistration::useTAXIDRegNum_W())
        {
            ret = TaxRegistration::legislationRegistrationValue(companyInfo.RecId,
                                                                TaxRegistrationTypesList::TAXID,
                                                                _transDate ? _transDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                                companyInfo.postalAddress().RecId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTAXIDRegNumFromInvoiceJour_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the tax registration number corresponding to the customer invoice journal.
    /// </summary>
    /// <param name="_custInvoiceJour">
    ///    <c>CustInvoiceJour</c> record, for which tax registration number has to be found.
    /// </param>
    /// <returns>
    ///    Tax registration number corresponding to the customer invoice journal passed as a parameter.
    /// </returns>
    /// <remarks>
    ///    By default the method returns VAT number stored in the invoice journal. But if it is empty, the method tries to find
    ///    tax registration number of type TAXID which is bound to the invoice address and is effective on the invoice date.
    /// </remarks>
    public static TaxRegistrationNumber getTAXIDRegNumFromInvoiceJour_W(CustInvoiceJour  _custInvoiceJour)
    {
        TaxRegistrationNumber   ret = _custInvoiceJour.VATNum;

        if (! ret && TaxRegistration::useTAXIDRegNum_W())
        {
            ret = TaxRegistration::legislationRegistrationValue(_custInvoiceJour.custTable_InvoiceAccount().Party,
                                                                TaxRegistrationTypesList::TAXID,
                                                                _custInvoiceJour.InvoiceDate,
                                                                _custInvoiceJour.InvoicePostalAddress);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUID_CH</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Checks if entered Swiss VAT Number (UID) is correct.
    /// </summary>
    /// <param name="_taxRegistrationNumber">
    ///  Value to be checked.
    /// </param>
    /// <returns>
    ///  True if check succeed, otherwise false.
    /// </returns>
    /// <remarks>
    ///  Numbers in entered value checked modulo 11.
    /// </remarks>
    public static boolean checkUID_CH(TaxRegistrationNumber _taxRegistrationNumber)
    {
        boolean     ret;
        int         i, checkValue;
        str         numericPart;
        container   weight = [5,4,3,2,7,6,5,4,1];

        if (strStartsWith(_taxRegistrationNumber, 'ADM') ||
            strStartsWith(_taxRegistrationNumber, 'CHE'))
        {
            if (match('<:a:a:a\\-:d:d:d\\.:d:d:d\\.:d:d:d', _taxRegistrationNumber))
            {
                numericPart = subStr(strKeep(_taxRegistrationNumber, '1234567890'), 1, 9);

                for (i = 1; i <= strLen(numericPart); i++)
                {
                    checkValue += str2int(subStr(numericPart, i, 1)) * conPeek(weight, i);
                }

                if (checkValue mod 11 == 0)
                {
                    ret = true;
                }
                else
                {
                    ret = checkFailed("@SYS4004045");
                }
            }
            else
            {
                ret = checkFailed("@SYS4004046");
            }
        }
        else
        {
            ret = checkFailed("@SYS4004047");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentTaxRegistrationFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>ValidFrom</c> value for the specified tax legislative number.
    /// </summary>
    /// <param name="_party">
    /// The party record ID for which tax legislative number will be found.
    /// </param>
    /// <param name="_type">
    /// The legislative registration type.
    /// </param>
    /// <returns>
    /// The <c>ValidFrom</c> value for found tax registration record.
    /// </returns>
    public static date currentTaxRegistrationFromDate(
        DirPartyRecId            _party,
        TaxRegistrationTypesList _type)
    {
        date                                 validFromDate;
        TaxRegistrationTypeId                taxRegistrationTypeId = TaxRegistrationLegislationTypes::getTaxRegistrationTypeApplicabilityRule(_type, DirPartyTable::findRec(_party).baseType()).TaxRegistrationTypeApplicabilityRule;
        DirPartyLocation                     dirPartyLocation;
        LogisticsPostalAddress               logisticsPostalAddress;
        TaxRegistrationTypeApplicabilityRule rule;
        utcDateTime minDateCheck = DateTimeUtil::minValue();
        utcDateTime maxDateCheck = DateTimeUtil::maxValue();

        if (taxRegistrationTypeId)
        {
            select firstonly validTimeState(minDateCheck, maxDateCheck) RecId from dirPartyLocation
                where dirPartyLocation.Party                    == _party &&
                      dirPartyLocation.IsPostalAddress          == NoYes::Yes &&
                      dirPartyLocation.IsPrimaryTaxRegistration == NoYes::Yes
            exists join logisticsPostalAddress
                where logisticsPostalAddress.Location == dirPartyLocation.Location
            exists join rule
                where rule.CountryRegionId == logisticsPostalAddress.CountryRegionId &&
                      rule.RecId           == taxRegistrationTypeId;

            if (dirPartyLocation.RecId)
            {
                validFromDate = TaxRegistration::findDirPartyLocationOnDate(dirPartyLocation.RecId, taxRegistrationTypeId, false, ConcurrencyModel::Auto, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())).ValidFrom;
            }
        }

        return validFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForCountryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a record in <c>TaxRegistration</c> table for a specified country id.
    /// </summary>
    /// <param name="_dirPartyLocation">
    /// The ID of the address for which the delete will be done.
    /// </param>
    /// <param name="_addressCountryId">
    /// The ID of the country for which the delete will be done.
    /// </param>
    public static void deleteForCountryId(
        RefRecId _dirPartyLocation,
        LogisticsAddressCountryRegionId _addressCountryId)
    {
        TaxRegistration taxRegistration;
        DirPartyLocation dirPartyLocation;
        TaxRegistrationTypeApplicabilityRule taxRegistrationTypeApplicabilityRule;

        if (_dirPartyLocation && _addressCountryId)
        {
            ttsbegin;
            delete_from taxRegistration
                exists join dirPartyLocation
                    where dirPartyLocation.Location == _dirPartyLocation
                exists join taxRegistrationTypeApplicabilityRule
                    where taxRegistrationTypeApplicabilityRule.RecId == taxRegistration.TaxRegistrationTypeApplicabilityRule
                        && taxRegistrationTypeApplicabilityRule.CountryRegionId == _addressCountryId
                        && taxRegistration.DirPartyLocation == dirPartyLocation.RecId;
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesValueMatchMask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified value follows a specified mask.
    /// </summary>
    /// <param name="_value">
    /// The value to validate against the mask.
    /// </param>
    /// <param name="_registrationFormat">
    /// The format to validate the value by.
    /// </param>
    /// <returns>
    /// true if the value matches the mask; otherwise, false.
    /// </returns>
    /// <remarks>
    /// All the characters must match, except for a mask character of '#', which allows for 0-9, ampersand,
    /// and A-Z.
    /// </remarks>
    public static boolean doesValueMatchMask(TaxRegistrationNumber _value, TaxRegistrationFormat _registrationFormat)
    {
        #DEFINE.SymbolNumerals('#')
        #DEFINE.SymbolLetters('&')
        #DEFINE.FirstNumeral('0')
        #DEFINE.LastNumeral('9')
        #DEFINE.FirstLetter('A')
        #DEFINE.LastLetter('Z')

        int strLength;
        int i;
        char maskChar;
        char valueChar;

        // No mask -- allow any value
        if (!_registrationFormat)
        {
            return true;
        }

        // Value must be same length as the mask
        strLength = strLen(_value);
        if (strLength != strLen(_registrationFormat))
        {
            return false;
        }

        // Ensure each character matches the literal mask character or is appropriate for the wildcard (number/letter) specified
        for (i = 1; i <= strLength; i++)
        {
            maskChar = subStr(_registrationFormat, i, 1);
            valueChar = subStr(_value, i, 1);

            switch (maskChar)
            {
                case #SymbolNumerals:
                    if ((valueChar < #FirstNumeral) || (valueChar > #LastNumeral))
                    {
                        return false;
                    }
                    break;

                case #SymbolLetters:
                    if (maskChar != valueChar
                        && ((valueChar < #FirstLetter) || (valueChar > #LastLetter))
                        && ((valueChar < #FirstNumeral) || (valueChar > #LastNumeral)))
                    {
                        return false;
                    }
                    break;

                default:
                    if (valueChar != maskChar)
                    {
                        return false;
                    }
                    break;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsDuplicateINNKPP_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether one more DirPartyLocation exists with linked spcified INN and KPP.
    /// </summary>
    /// <param name="_dirPartyLocationRecId">
    /// Record id of current DirPartyLocation table, this record will be omitted by search.
    /// </param>
    /// <param name="_inn">
    /// The value of INN.
    /// </param>
    /// <param name="_kpp">
    /// The value of KPP.
    /// </param>
    /// <returns>
    /// true if duplicate exists; otherwise false.
    /// </returns>
    public static boolean existsDuplicateINNKPP_RU(DirPartyLocationRecId _dirPartyLocationRecId, INN_RU _inn, KPPU_RU _kpp)
    {
        TaxRegistration taxRegistrationINN, taxRegistrationKPP;
        TaxRegistrationLegislationTypes legislationTypeINN, legislationTypeKPP;

        date minDateCheck = dateNull();
        date maxDateCheck = maxDate();

        if (_kpp)
        {
            select firstonly validTimeState(minDateCheck, maxDateCheck) RecId, DirPartyLocation from taxRegistrationINN
                where taxRegistrationINN.RegistrationNumber == _inn
                   && taxRegistrationINN.DirPartyLocation   != _dirPartyLocationRecId
                exists join legislationTypeINN
                    where legislationTypeINN.TaxRegistrationTypeApplicabilityRule == taxRegistrationINN.TaxRegistrationTypeApplicabilityRule
                       && legislationTypeINN.TaxRegistrationTypesList             == TaxRegistrationTypesList::INN
            exists join taxRegistrationKPP
                where taxRegistrationKPP.DirPartyLocation   == taxRegistrationINN.DirPartyLocation
                   && taxRegistrationKPP.RegistrationNumber == _kpp
                    exists join legislationTypeKPP
                        where legislationTypeKPP.TaxRegistrationTypeApplicabilityRule == taxRegistrationKPP.TaxRegistrationTypeApplicabilityRule
                           && legislationTypeKPP.TaxRegistrationTypesList             == TaxRegistrationTypesList::KPP;
        }
        else
        {
            select firstonly validTimeState(minDateCheck, maxDateCheck) RecId, DirPartyLocation from taxRegistrationINN
                where taxRegistrationINN.RegistrationNumber == _inn
                   && taxRegistrationINN.DirPartyLocation   != _dirPartyLocationRecId
                exists join legislationTypeINN
                    where legislationTypeINN.TaxRegistrationTypeApplicabilityRule == taxRegistrationINN.TaxRegistrationTypeApplicabilityRule
                       && legislationTypeINN.TaxRegistrationTypesList             == TaxRegistrationTypesList::INN
            notexists join taxRegistrationKPP
                where taxRegistrationKPP.DirPartyLocation   == taxRegistrationINN.DirPartyLocation
                    exists join legislationTypeKPP
                        where legislationTypeKPP.TaxRegistrationTypeApplicabilityRule == taxRegistrationKPP.TaxRegistrationTypeApplicabilityRule
                           && legislationTypeKPP.TaxRegistrationTypesList             == TaxRegistrationTypesList::KPP;
        }

        return taxRegistrationINN != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>TaxRegistration</c> table that has a specified record ID.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <param name="_minDate">
    /// The minimum date for which to perform the search.
    /// </param>
    /// <param name="_maxDate">
    /// The maximum date for which to perform the search.
    /// </param>
    /// <returns>
    /// A record in the <c>TaxRegistration</c> table.
    /// </returns>
    public static TaxRegistration find(
        RecId               _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto,
        date                _minDate = dateNull(),
        date                _maxDate = maxDate())

    {
        TaxRegistration taxRegistration;

        taxRegistration.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxRegistration.concurrencyModel(_concurrencyModel);
        }

        select firstonly validTimeState(_minDate, _maxDate) taxRegistration
            where taxRegistration.RecId == _recId;

        return taxRegistration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDirPartyLocationOnDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TaxRegistration</c> table for the specified party location and tax registration type.
    /// </summary>
    /// <param name="_dirPartyLocationRecId">
    /// The record ID of party location.
    /// </param>
    /// <param name="_taxRegistrationTypeId">
    /// The tax registration type to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when it reads the record; optional.
    /// </param>
    /// <param name="_date">
    /// The date for which to perform the search.
    /// </param>
    /// <returns>
    /// The record with required tax registration type for given party location.
    /// </returns>
    public static TaxRegistration findDirPartyLocationOnDate(
        DirPartyLocationRecId   _dirPartyLocationRecId,
        TaxRegistrationTypeId   _taxRegistrationTypeId,
        boolean                 _forUpdate        = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto,
        date                    _date             = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))

    {
        TaxRegistration  taxRegistration;

        taxRegistration.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxRegistration.concurrencyModel(_concurrencyModel);
        }

        select firstonly validTimeState(_date) taxRegistration
            where taxRegistration.TaxRegistrationTypeApplicabilityRule == _taxRegistrationTypeId
               && taxRegistration.DirPartyLocation                     == _dirPartyLocationRecId;

        return taxRegistration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistrationFromCust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the registration number for a specified customer from the <c>TaxRegistration</c> table.
    /// </summary>
    /// <param name="_custAcc">
    /// The ID of the customer.
    /// </param>
    /// <param name="_invoiceDate">
    /// The starting date for which to perform the search.
    /// </param>
    /// <param name="_regTypeRecId">
    /// The ID of the <c>TaxRegistrationType</c> table.
    /// </param>
    /// <returns>
    /// The registration associated to the customer.
    /// </returns>
    public static TaxRegistration getTaxRegistrationFromCust(CustAccount   _custAcc,
                                                                         TransDate     _invoiceDate,
                                                                         RecId         _regTypeRecId)
    {
        DirPartyTable                           dirPartyTable;
        DirPartyLocation                        dirPartyLocation;
        TaxRegistration                         taxRegistration;
        CustTable                               custTable;
        TaxRegistrationTypeApplicabilityRule    taxRegistrationTypeApplicabilityRule;
        TaxRegistrationType                     taxRegistrationType;

        select firstonly validTimeState(_invoiceDate) RegistrationNumber from taxRegistration
            exists join taxRegistrationTypeApplicabilityRule
            where taxRegistration.TaxRegistrationTypeApplicabilityRule == taxRegistrationTypeApplicabilityRule.RecId
                exists join taxRegistrationType
                where taxRegistrationTypeApplicabilityRule.TaxRegistrationType == taxRegistrationType.RecId
                    && taxRegistrationType.RecId == _regTypeRecId
                        exists join dirPartyLocation
                        where taxRegistration.DirPartyLocation == dirPartyLocation.RecId
                           && dirPartyLocation.IsPrimary == NoYes::Yes
                            exists join dirPartyTable
                            where dirPartyLocation.Party == dirPartyTable.RecId
                                exists join custTable
                                where custTable.Party == dirPartyTable.RecId
                                    && custTable.AccountNum == _custAcc;

        return taxRegistration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistrationNumberFromCust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the registration number for a specified customer from the <c>TaxRegistration</c> table.
    /// </summary>
    /// <param name="_custAcc">
    /// The ID of the customer.
    /// </param>
    /// <param name="_invoiceDate">
    /// The starting date for which to perform the search.
    /// </param>
    /// <param name="_regTypeRecId">
    /// The ID of the <c>TaxRegistrationType</c> table.
    /// </param>
    /// <returns>
    /// The registration number associated to the customer.
    /// </returns>
    public static TaxRegistrationNumber getTaxRegistrationNumberFromCust(CustAccount   _custAcc,
                                                                         TransDate     _invoiceDate,
                                                                         RecId         _regTypeRecId)
    {
        return TaxRegistration::getTaxRegistrationFromCust(_custAcc, _invoiceDate, _regTypeRecId).RegistrationNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>legislationRegistrationValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the value of legislative tax registration number.
    /// </summary>
    /// <param name="_party">
    /// The party record ID for which tax legislative number will be found.
    /// </param>
    /// <param name="_type">
    /// The legislative registration type.
    /// </param>
    /// <param name="_date">
    /// The date for which to obtain the information.
    /// </param>
    /// <param name="_logisticsPostalAddressRecId">
    /// The record ID of address; optional.
    /// </param>
    /// <returns>
    /// The value of specified tax registration number.
    /// </returns>
    public static TaxRegistrationNumber legislationRegistrationValue(
        DirPartyRecId _party,
        TaxRegistrationTypesList _type,
        date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        LogisticsPostalAddressRecId _logisticsPostalAddressRecId = 0)
    {
        TaxRegistration taxRegistration;
        PartyTypeRestriction typeRestriction;

        if (DirPartyTable::findRec(_party).baseType() == DirPartyBaseType::Organization)
        {
            typeRestriction = PartyTypeRestriction::Organization;
        }
        else
        {
            typeRestriction = PartyTypeRestriction::Person;
        }

        taxRegistration = TaxRegistration::findTaxRegistrationFoundByTypeRestriction(
            _type,
            typeRestriction,
            _date,
            _party,
            _logisticsPostalAddressRecId);

        if (!taxRegistration)
        {
            taxRegistration = TaxRegistration::findTaxRegistrationFoundByTypeRestriction(
                _type,
                PartyTypeRestriction::None,
                _date,
                _party,
                _logisticsPostalAddressRecId);
        }

        return taxRegistration.RegistrationNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxRegistrationFoundByTypeRestriction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a <c>TaxRegistration</c> record by relevant conditions.
    /// </summary>
    /// <param name = "_type"> Registration category.</param>
    /// <param name = "_typeRestriction">Restriction type.</param>
    /// <param name = "_date">Date.</param>
    /// <param name = "_party">Party reference.</param>
    /// <param name = "_logisticsPostalAddressRecId">Address reference.</param>
    /// <returns> Returns the <c>TaxRegistration</c> record matching the conditions.</returns>
    private static TaxRegistration findTaxRegistrationFoundByTypeRestriction(
        TaxRegistrationTypesList _type,
        PartyTypeRestriction _typeRestriction,
        TransDate _date,
        DirPartyRecId _party,
        LogisticsPostalAddressRecId _logisticsPostalAddressRecId)
    {
        TaxRegistration taxRegistration;

        Set rulesSet = TaxRegistrationLegislationTypes::getApplicabilityRulesSetMatchingRegistrationTypes(
            _type,
            _typeRestriction);

        taxRegistration =  TaxRegistration::findTaxRegistrationByRuleSet(
            rulesSet,
            _date,
            _party,
            _logisticsPostalAddressRecId);

        if (!taxRegistration && _type != TaxRegistrationTypesList::TAXID)
        {
            rulesSet = TaxRegistrationLegislationTypes::getApplicabilityRulesSetMatchingRegistrationTypes(
                _type,
                _typeRestriction,
                '');

            taxRegistration = TaxRegistration::findTaxRegistrationByRuleSet(
                rulesSet,
                _date,
                _party,
                _logisticsPostalAddressRecId);
        }

        return taxRegistration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxRegistrationByRuleSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a <c>TaxRegistration</c> record by relevant conditions.
    /// </summary>
    /// <param name = "_rulesSet"> Set of applicability rules.</param>
    /// <param name = "_date"> Date.</param>
    /// <param name = "_party"> Party reference.</param>
    /// <param name = "_logisticsPostalAddressRecId"> Address reference.</param>
    /// <returns> Returns the <c>TaxRegistration</c> record matching the conditions.</returns>
    private static TaxRegistration findTaxRegistrationByRuleSet(
        Set _rulesSet,
        TransDate _date,
        DirPartyRecId _party,
        LogisticsPostalAddressRecId _logisticsPostalAddressRecId)
    {
        TaxRegistration taxRegistration;

        SetEnumerator setEnumerator = _rulesSet.getEnumerator();

        while (setEnumerator.moveNext())
        {
            RefRecId applicabilityRuleRefRecId = setEnumerator.current();

            DirPartyLocation dirPartyLocation = TaxRegistration::findDirPartyLocationByRule(
                applicabilityRuleRefRecId,
                _party,
                _logisticsPostalAddressRecId);

            if (dirPartyLocation)
            {
                select firstonly validTimeState(_date) RegistrationNumber from taxRegistration
                    where taxRegistration.TaxRegistrationTypeApplicabilityRule == applicabilityRuleRefRecId
                        && taxRegistration.DirPartyLocation  == dirPartyLocation.recId;

                if (taxRegistration)
                {
                    break;
                }
            }
        }

        return taxRegistration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDirPartyLocationByRule</Name>
				<Source><![CDATA[
    private static DirPartyLocation findDirPartyLocationByRule(
        RefRecID _applicabilityRuleRecId,
        DirPartyRecId _party,
        LogisticsPostalAddressRecId _logisticsPostalAddressRecId = 0)
    {
        DirPartyLocation dirPartyLocation;
        LogisticsPostalAddress logisticsPostalAddress;

        TaxRegistrationTypeApplicabilityRule rule = TaxRegistrationTypeApplicabilityRule::find(_applicabilityRuleRecId);

        if (rule.IsPrimaryAddressRestricted || !_logisticsPostalAddressRecId)
        {
            select firstOnly dirPartyLocation
                where dirPartyLocation.Party == _party
                    && dirPartyLocation.IsPostalAddress == NoYes::Yes
                    && dirPartyLocation.IsPrimaryTaxRegistration == NoYes::Yes
            exists join logisticsPostalAddress
                where logisticsPostalAddress.Location == dirPartyLocation.Location
                    && logisticsPostalAddress.CountryRegionId == rule.CountryRegionId;
        }
        else if (_logisticsPostalAddressRecId)
        {
            select firstOnly dirPartyLocation
                where dirPartyLocation.Party == _party
                    && dirPartyLocation.IsPostalAddress == NoYes::Yes
            exists join logisticsPostalAddress
                where logisticsPostalAddress.Location == dirPartyLocation.Location
                    && logisticsPostalAddress.recId == _logisticsPostalAddressRecId;
        }

        return dirPartyLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillRegistrationIdFieldNumByCategoryMap</Name>
				<Source><![CDATA[
    private static Map fillRegistrationIdFieldNumByCategoryMap()
    {
        Map fieldNumMap = new Map(Types::Container,Types::Integer);

        fieldNumMap.insert([tableNum(CompanyInfo), TaxRegistrationTypesList::TAXID], fieldNum(CompanyInfo, VatNum));
        fieldNumMap.insert([tableNum(CustTable), TaxRegistrationTypesList::TAXID], fieldNum(CustTable, VatNum));
        fieldNumMap.insert([tableNum(VendTable), TaxRegistrationTypesList::TAXID], fieldNum(VendTable, VatNum));
        fieldNumMap.insert([tableNum(LvOtherClients), TaxRegistrationTypesList::TAXID], fieldNum(LvOtherClients, VatNum));

        return fieldNumMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>obsoleteRegistrationIdFieldNumByCategory</Name>
				<Source><![CDATA[
    private static FieldId obsoleteRegistrationIdFieldNumByCategory(TableId                  _tableId,
                                                                    TaxRegistrationTypesList _type)
    {
        Map fieldNumMap;
        #define.obsoleteFieldNumContainerName('obsolteFieldIds')

        SysGlobalObjectCache cache = ClassFactory.globalObjectCache();
        container cacheContainer = cache.find(tableStr(TaxRegistration), [#obsoleteFieldNumContainerName]);

        if (cacheContainer)
        {
            fieldNumMap = Map::create(cacheContainer);
        }
        else
        {
            fieldNumMap = TaxRegistration::fillRegistrationIdFieldNumByCategoryMap();
            cacheContainer = fieldNumMap.pack();
            cache.insert(tableStr(TaxRegistration), [#obsoleteFieldNumContainerName], cacheContainer);
        }

        Container key = [_tableId, _type];
        FieldId fieldId;

        if (fieldNumMap.exists(key))
        {
            fieldId = fieldNumMap.lookup(key);
        }

        return fieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getObsoleteRegistrationId</Name>
				<Source><![CDATA[
    public static TaxRegistrationNumber getObsoleteRegistrationId(
        Common                   _cursor,
        TaxRegistrationTypesList _type)
    {
        TaxRegistrationNumber regNumber;
        FieldId fieldId = TaxRegistration::obsoleteRegistrationIdFieldNumByCategory(_cursor.TableId, _type);

        if (fieldId)
        {
            regNumber = any2Str(_cursor.(fieldId));
        }

        return regNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns registration number for primary address of the given party on a date.
    /// </summary>
    /// <param name = "_party">Cusraor of <c>DirPartyMap</c> type.</param>
    /// <param name = "_type">Type of requeried registration number.</param>
    /// <param name = "_date">Date on which to get registration number,  by default today.</param>
    /// <returns>Registration number for primary address of the given party on a date.</returns>
    public static TaxRegistrationNumber getPrimaryRegistrationNumber(
        DirPartyMap              _party,
        TaxRegistrationTypesList _type,
        date                     _date  = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        TaxRegistrationNumber registrationNumber = TaxRegistration::getObsoleteRegistrationId(_party, _type);

        if (!registrationNumber)
        {
            registrationNumber = TaxRegistration::getPrimaryAddressTaxRegistration(_party,
                                                                                   _type,
                                                                                   _date).RegistrationNumber;
        }

        return registrationNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistrationFromInvoiceJour_TH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax registration number from invoice journal.
    /// </summary>
    /// <param name="_invoiceJour">
    /// Table of <c>CustInvoiceJour</c>, <c>VendInvoiceJour</c>, <c>ProjInvoiceJour</c> or <c>CzCustAdvanceInvoiceTable</c>.
    /// </param>
    /// <returns>
    /// Tax registration table.
    /// </returns>
    public static TaxRegistration getTaxRegistrationFromInvoiceJour_TH(Common _invoiceJour)
    {
        DirPartyLocation            dirPartyLocation;
        TaxRegistration             taxRegistration;
        TransDate                   transDate;

        CustInvoiceJour             custInvoiceJour;
        VendInvoiceJour             vendInvoiceJour;
        ProjInvoiceJour             projInvoiceJour;
        CzCustAdvanceInvoiceTable   custAdvanceInvoiceTable;

        CustTable                   custInvoiceAccount;
        VendTable                   vendInvoiceAccount;
        LogisticsPostalAddress      logisticsPostalAddress;
        VendInvoiceJourExtensionTH  vendInvoiceJourExtensionTH;

        if (_invoiceJour.TableId == tableNum(CustInvoiceJour))
        {
            custInvoiceJour = _invoiceJour;
            custInvoiceAccount = custInvoiceJour.custTable_InvoiceAccount();

            if (custInvoiceJour.InvoicePostalAddress)
            {
                logisticsPostalAddress = logisticsPostalAddress::findRecId(custInvoiceJour.InvoicePostalAddress);
            }
            else
            {
                logisticsPostalAddress = custInvoiceAccount.InvoiceAddress();
            }

            dirPartyLocation = DirPartyLocation::findByPartyLocation(
                custInvoiceAccount.Party,
                logisticsPostalAddress.Location);

            transDate = custInvoiceJour.InvoiceDate;
        }
        else if (_invoiceJour.TableId == tableNum(VendInvoiceJour))
        {
            vendInvoiceJour             = _invoiceJour;
            vendInvoiceAccount          = vendInvoiceJour.vendTable_InvoiceAccount();
            vendInvoiceJourExtensionTH  = vendInvoiceJour.vendInvoiceJourExtensionTH();

            if (vendInvoiceJourExtensionTH.InvoicePostalAddress)
            {
                logisticsPostalAddress = logisticsPostalAddress::findRecId(vendInvoiceJourExtensionTH.InvoicePostalAddress);
            }
            else
            {
                logisticsPostalAddress = vendInvoiceJour.vendTable_InvoiceAccount().InvoiceAddress();
            }

            dirPartyLocation = DirPartyLocation::findByPartyLocation(
                vendInvoiceAccount.Party,
                logisticsPostalAddress.Location);

            transDate = vendInvoiceJour.InvoiceDate;
        }
        else if (_invoiceJour.TableId == tableNum(ProjInvoiceJour))
        {
            projInvoiceJour     = _invoiceJour;
            custInvoiceAccount  = CustTable::find(projInvoiceJour.InvoiceAccount);

            if (projInvoiceJour.DeliveryPostalAddress)
            {
                logisticsPostalAddress = logisticsPostalAddress::findRecId(projInvoiceJour.DeliveryPostalAddress);
            }
            else
            {
                logisticsPostalAddress = custInvoiceAccount.InvoiceAddress();
            }

            dirPartyLocation = DirPartyLocation::findByPartyLocation(
                custInvoiceAccount.Party,
                logisticsPostalAddress.Location);

            transDate = projInvoiceJour.InvoiceDate;
        }
        else if (_invoiceJour.TableId == tableNum(CzCustAdvanceInvoiceTable))
        {
            custAdvanceInvoiceTable = _invoiceJour;
            custInvoiceAccount = custAdvanceInvoiceTable.custTable_InvoiceAccount();

            if (custAdvanceInvoiceTable.PostalAddress)
            {
                logisticsPostalAddress = logisticsPostalAddress::findRecId(custAdvanceInvoiceTable.PostalAddress);
            }
            else
            {
                logisticsPostalAddress = custInvoiceAccount.InvoiceAddress();
            }

            dirPartyLocation = DirPartyLocation::findByPartyLocation(custInvoiceAccount.Party, logisticsPostalAddress.Location);

            transDate = custAdvanceInvoiceTable.InvoiceDate;
        }

        if (transDate && dirPartyLocation)
        {
            select firstOnly validTimeState(transDate) taxRegistration
                where taxRegistration.DirPartyLocation == dirPartyLocation.RecId;
        }

        return taxRegistration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTAXIDRegNum_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the alternative value for the customer tax exempt number in the invoice can be used.
    /// </summary>
    /// <returns>
    /// true, the alternative value for the customer tax exempt number in the invoice can be used; otherwise, false.
    /// </returns>
    public static boolean useTAXIDRegNum_W()
    {
        #IsoCountryRegionCodes

        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoAT,#isoBE,#isoDK,#isoFI,#isoFR,#isoDE,#isoIS,#isoIE,#isoIT,#isoNL,#isoNO,#isoES,#isoSE,#isoCH,#isoGB, #isoHU]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistrationNumber_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the primary registration number of company address
    /// </summary>
    /// <param name = "_locationRecId">Location of company address</param>
    /// <param name = "_countryRegionId">Country region id</param>
    /// <returns>The primary company address registration number</returns>
    public static TaxRegistrationNumber getTaxRegistrationNumber_JP(
        LogisticsLocationRecId _locationRecId,
        LogisticsAddressCountryRegionId _countryRegionId)
    {
        TaxRegistration taxRegistration;
        TaxRegistrationTypeApplicabilityRule taxRegistrationTypeApplicabilityRule;
        DirPartyLocation dirPartyLocation;

        EffectiveDate effectiveDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());

        select firstOnly validTimeState(effectiveDate) RegistrationNumber from taxRegistration
            exists join dirPartyLocation
                where dirPartyLocation.Location == _locationRecId
                    && taxRegistration.DirPartyLocation == dirPartyLocation.RecId
            exists join taxRegistrationTypeApplicabilityRule
                where taxRegistrationTypeApplicabilityRule.IsPrimaryAddressRestricted == true
                    && taxRegistrationTypeApplicabilityRule.CountryRegionId == _countryRegionId
                    && taxRegistrationTypeApplicabilityRule.RecId == taxRegistration.TaxRegistrationTypeApplicabilityRule;

        return taxRegistration.RegistrationNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountOfTaxRegistrationNumber_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the count of primary registration number of company address
    /// </summary>
    /// <param name = "_locationRecId">Location of company address</param>
    /// <param name = "_countryRegionId">Country region id</param>
    /// <returns>The count of primary company address registration number</returns>
    public static int64 getCountOfTaxRegistrationNumber_JP(
        LogisticsLocationRecId _locationRecId,
        LogisticsAddressCountryRegionId _countryRegionId)
    {
        TaxRegistration taxRegistration;
        TaxRegistrationTypeApplicabilityRule taxRegistrationTypeApplicabilityRule;
        DirPartyLocation dirPartyLocation;

        EffectiveDate effectiveDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());

        select validTimeState(effectiveDate) count(RecId) from taxRegistration
            exists join dirPartyLocation
                where dirPartyLocation.Location == _locationRecId
                    && taxRegistration.DirPartyLocation == dirPartyLocation.RecId
            exists join taxRegistrationTypeApplicabilityRule
                where taxRegistrationTypeApplicabilityRule.IsPrimaryAddressRestricted == true
                    && taxRegistrationTypeApplicabilityRule.CountryRegionId == _countryRegionId
                    && taxRegistrationTypeApplicabilityRule.RecId == taxRegistration.TaxRegistrationTypeApplicabilityRule;

        return taxRegistration.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsPostalAddress_onValidatingFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles <c>LogisticsPostalAddress</c> record vailidate write event.
    /// </summary>
    /// <param name="_sender">The <c>LogisticsPostalAddress</c> record to validate.</param>
    /// <param name="_e">The data event arguments.</param>
    [DataEventHandler(tableStr(LogisticsPostalAddress), DataEventType::ValidatingFieldValue)]
    public static void LogisticsPostalAddress_onValidatingFieldValue(Common _sender, DataEventArgs _e)
    {
        DirPartyLocation dirPartyLocation;
        TaxRegistration  taxRegistration;
        LogisticsPostalAddress logisticsPostalAddress = _sender;

        ValidateFieldValueEventArgs validateFieldValueEventArgs = _e;

        if (logisticsPostalAddress && validateFieldValueEventArgs.parmValidateResult())
        {
            switch (validateFieldValueEventArgs.parmFieldName())
            {
                case fieldstr(LogisticsPostalAddress, CountryRegionId):
                    if (logisticsPostalAddress.CountryRegionId != logisticsPostalAddress.orig().CountryRegionId)
                    {
                        select firstonly RecId from dirPartyLocation
                            where dirPartyLocation.Location == logisticsPostalAddress.Location
                            exists join taxRegistration
                                where taxRegistration.DirPartyLocation == dirPartyLocation.RecId;

                        if (dirPartyLocation.RecId)
                        {
                            validateFieldValueEventArgs.parmValidateResult(checkFailed("@RegistrationNumbers:TheCountryCannotBeChangedBecauseTheAddressContainsRegistrationIDs"));
                        }
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        switch (_fieldIdToCheck)
        {
            case fieldNum(TaxRegistration, Issuer) :
                ret = true;
                break;
            default:
                ret = super(_fieldIdToCheck);
        }

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(TaxRegistration, TaxRegistrationTypeApplicabilityRule) :
                    if (!this.checkRuleCountry())
                    {
                        error("@RegistrationNumbers:OnlyRegistrationTypesForCountriesOfTheCurrentAddressAndTheCurrentCompanyCanBeUsed");
                        ret = false;
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryTaxRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>TaxRegistration</c> cursor of given for the given party on a date.
    /// </summary>
    /// <param name = "_party">Cusraor of <c>DirPartyMap</c> type.</param>
    /// <param name = "_type">Type of requeried registration number.</param>
    /// <param name = "_countryRegionId">Region for which given type should applyed to find Tax registration rule</param>
    /// <param name = "_date">Date on which to get registration number, by default today.</param>
    /// <param name = "_logisticsPostalAddressRecId">Reference to a postal address, if omitted then primary address is used.</param>
    /// <returns>The <c>TaxRegistration</c> record of the given for the given party on a date.</returns>
    public static TaxRegistration categoryTaxRegistration(
        DirPartyRecId                   _party,
        TaxRegistrationTypesList        _type,
        LogisticsAddressCountryRegionId _countryRegionId,
        date                            _date  = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        LogisticsPostalAddressRecId     _logisticsPostalAddressRecId = 0)
    {
        TaxRegistrationTypeId                taxRegistrationTypeId;
        DirPartyLocation                     dirPartyLocation;
        LogisticsPostalAddress               logisticsPostalAddress;
        TaxRegistration                      taxRegistration;
        TaxRegistrationTypeApplicabilityRule rule;

        taxRegistrationTypeId = TaxRegistrationLegislationTypes::getTaxRegistrationTypeApplicabilityRule(_type,
                                                                                                         DirPartyTable::findRec(_party).baseType(),
                                                                                                         _countryRegionId).TaxRegistrationTypeApplicabilityRule;

        if (taxRegistrationTypeId)
        {
            rule = TaxRegistrationTypeApplicabilityRule::find(taxRegistrationTypeId);

            if (rule.IsPrimaryAddressRestricted || !_logisticsPostalAddressRecId)
            {
                select firstOnly RecId from dirPartyLocation
                    where dirPartyLocation.Party           == _party
                       && dirPartyLocation.IsPostalAddress == NoYes::Yes
                       && dirPartyLocation.IsPrimaryTaxRegistration == NoYes::Yes
                    exists join logisticsPostalAddress
                        where logisticsPostalAddress.Location == dirPartyLocation.Location
                           && logisticsPostalAddress.CountryRegionId == rule.CountryRegionId;
            }
            else if (_logisticsPostalAddressRecId)
            {
                select firstOnly RecId from dirPartyLocation
                    where dirPartyLocation.Party           == _party
                       && dirPartyLocation.IsPostalAddress == NoYes::Yes
                    exists join logisticsPostalAddress
                        where logisticsPostalAddress.Location == dirPartyLocation.Location
                           && logisticsPostalAddress.recId    == _logisticsPostalAddressRecId;
            }

            if (dirPartyLocation)
            {
                select firstonly validTimeState(_date) taxRegistration
                    where taxRegistration.TaxRegistrationTypeApplicabilityRule == taxRegistrationTypeId
                       && taxRegistration.DirPartyLocation                     == dirPartyLocation.recId;
            }
        }

        return taxRegistration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryAddressTaxRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>TaxRegistration</c> cursor for primary address of the given party on a date.
    /// </summary>
    /// <param name = "_party">Cusraor of <c>DirPartyMap</c> type.</param>
    /// <param name = "_type">Type of requeried registration number.</param>
    /// <param name = "_date">Date on which to get registration number,  by default today.</param>
    /// <returns>The <c>TaxRegistration</c> record for primary address of the given party on a date.</returns>
    public static TaxRegistration getPrimaryAddressTaxRegistration(
        DirPartyMap              _party,
        TaxRegistrationTypesList _type,
        date                     _date  = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        TaxRegistration taxRegistration;
        LogisticsPostalAddress postalAddress = DirParty::primaryPostalAddress(_party.Party);
        if (postalAddress)
        {
            taxRegistration = TaxRegistration::categoryTaxRegistration(_party.Party,
                                                                       _type,
                                                                       postalAddress.CountryRegionId,
                                                                       _date,
                                                                       postalAddress.recId);
        }
        return taxRegistration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleCountry</Name>
				<Source><![CDATA[
    private boolean checkRuleCountry()
    {
        boolean ret;
        TaxRegistrationTypeCountryId countryId = this.showCountryId();

        if (countryId == CompanyInfo::find().postalAddress().CountryRegionId ||
            countryId == LogisticsPostalAddress::findByLocation(DirPartyLocation::findRec(this.DirPartyLocation).Location).CountryRegionId)
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateTaxRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find or create tax registration
    /// </summary>
    /// <returns>
    /// Return the tax registration record, if exist the record, else create a new record and return it.
    /// </returns>
    public static TaxRegistration findOrCreateTaxRegistration()
    {
        TaxRegistration taxRegistration = TaxRegistration::getPrimaryAddressTaxRegistration(CompanyInfo::find(),
             TaxRegistrationTypesList::TAXID);

        if (!taxRegistration && CompanyInfo::find().CoRegNum)
        {
            LogisticsPostalAddress postalAddress = CompanyInfo::find().postalAddress();
            DirPartyTable dirPartyTable = DirPartyTable::findRec(CompanyInfo::current());
            DirPartyLocation dirPartyLocation = DirPartyLocation::findByPartyLocation(dirPartyTable.RecId, postalAddress.Location);
            TaxRegistrationTypeId TaxRegistrationTypeApplicabilityRule = TaxRegistrationLegislationTypes::getTaxRegistrationTypeApplicabilityRule(TaxRegistrationTypesList::TAXID,
                dirPartyTable.baseType(),
                postalAddress.CountryRegionId).TaxRegistrationTypeApplicabilityRule;

            if (!TaxRegistrationTypeApplicabilityRule && postalAddress)
            {
                RecId registrationTypeId = TaxRegistrationType::createTaxRegistrationType(TaxRegistrationTypeContants::TaxRegistrationType, TaxRegistrationTypeContants::Description);

                RecId taxRegistrationTypeApplicabilityRuleId = TaxRegistrationTypeApplicabilityRule::createTaxRegistrationTypeRules(
                    registrationTypeId,
                    postalAddress.CountryRegionId,
                    PartyTypeRestriction::None,
                    NoYes::No,
                    NoYes::No);

                TaxRegistrationLegislationTypes taxRegistrationLegislationTypes;

                taxRegistrationLegislationTypes.TaxRegistrationTypesList = TaxRegistrationTypesList::TAXID;
                taxRegistrationLegislationTypes.TaxRegistrationTypeApplicabilityRule = taxRegistrationTypeApplicabilityRuleId;
                taxRegistrationLegislationTypes.insert();

                TaxRegistrationTypeApplicabilityRule = taxRegistrationLegislationTypes.TaxRegistrationTypeApplicabilityRule;
            }

            if (TaxRegistrationTypeApplicabilityRule && dirPartyLocation)
            {
                taxRegistration.TaxRegistrationTypeApplicabilityRule = TaxRegistrationTypeApplicabilityRule;
                taxRegistration.DirPartyLocation = dirPartyLocation.RecId;
                taxRegistration.RegistrationNumber = CompanyInfo::find().CoRegNum;
                taxRegistration.ValidFrom = dateNull();
                taxRegistration.ValidTo = maxDate();
                taxRegistration.insert();
            }
        }

        return taxRegistration;

    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateCurrentTaxRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new or updates the current <c>TaxRegistration</c> record at a given <c>DirPartyLocation</c> having the specified tax registration type and number.
    /// </summary>
    /// <param name = "dirPartyLocationRecId">The <c>DirPartyLocation</c> record id.</param>
    /// <param name = "taxRegistrationType">The tax registration type.</param>
    /// <param name = "registrationNumber">The registration number.</param>
    /// <param name = "effectiveDate">The date used to search or create the current record.</param>
    /// <returns>The <c>TaxRegistration</c> record.</returns>
    public static TaxRegistration createOrUpdateCurrentTaxRegistration(
        DirPartyLocationRecId       dirPartyLocationRecId,
        TaxRegistrationTypesList    taxRegistrationType,
        str                         registrationNumber,
        date                        effectiveDate)
    {
        DirPartyLocation dirPartyLocation = DirPartyLocation::findRec(DirPartyLocationRecId);
        DirPartyTable dirPartyTable = DirPartyTable::findRec(dirPartyLocation.Party);
        LogisticsPostalAddress logisticsPostalAddress = LogisticsPostalAddress::findByLocation(dirPartyLocation.Location);

        TaxRegistrationLegislationTypes taxRegistrationLegislationType = TaxRegistrationLegislationTypes::getTaxRegistrationTypeApplicabilityRule(
            taxRegistrationType,
            dirPartyTable.baseType(),
            logisticsPostalAddress.CountryRegionId);

        if (!taxRegistrationLegislationType)
        {
            throw error(strFmt("@RegistrationNumbers:TaxRegistrationLegislationTypeNotFound"));
        }

        TaxRegistrationTypeApplicabilityRule rule = TaxRegistrationTypeApplicabilityRule::find(taxRegistrationLegislationType.TaxRegistrationTypeApplicabilityRule);

        if (!rule)
        {
            throw error(strFmt("@RegistrationNumbers:TaxRegistrationTypeApplicabilityRuleNotFound"));
        }

        TaxRegistration taxRegistration = TaxRegistration::findDirPartyLocationOnDate(
            dirPartyLocationRecId,
            rule.RecId,
            false, // forUpdate
            ConcurrencyModel::Auto,
            effectiveDate);

        if (taxRegistration && strCmp(taxRegistration.RegistrationNumber,registrationNumber) == 0)
        {
            return taxRegistration;
        }

        ttsbegin;

        if (taxRegistration && rule.IsRegistrationNumberUpdateable)
        {
            taxRegistration.selectForUpdate(true);
            taxRegistration.RegistrationNumber = registrationNumber;
            taxRegistration.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
            if (taxRegistration.validateWrite())
            {
                taxRegistration.update();
            }
            else
            {
                throw error(strFmt("@SYS319214"));
            }
        }
        else
        {
            taxRegistration.clear();
            taxRegistration.validTimeStateUpdateMode(ValidTimeStateUpdate::CreateNewTimePeriod);
            taxRegistration.DirPartyLocation = dirPartyLocationRecId;
            taxRegistration.TaxRegistrationTypeApplicabilityRule = rule.RecId;
            taxRegistration.RegistrationNumber = registrationNumber;
            taxRegistration.ValidFrom = effectiveDate;
            taxRegistration.ValidTo = maxDate();
            if (taxRegistration.validateWrite())
            {
                taxRegistration.insert();
            }
            else
            {
                throw error(strFmt("@SYS319214"));
            }
        }

        ttscommit;

        return taxRegistration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryDirPartyLocationTaxRegistrationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a query with records from <c>TaxRegistration</c> by <c>DirPartyLocation</c> and <c>TaxRegistrationTypesList</c>.
    /// </summary>
    /// <param name = "dirPartyLocationRecId">The <c>DirPartyLocation</c> record id.</param>
    /// <param name = "taxRegistrationType">The tax registration type.</param>
    /// <param name = "validFrom">Tax registration valid from date.</param>
    /// <param name = "validTo">Tax registration valid to date.</param>
    /// <returns>The query.</returns>
    public static Query queryDirPartyLocationTaxRegistrationType(
        DirPartyLocationRecId        dirPartyLocationRecId,
        TaxRegistrationTypesList     taxRegistrationType,
        date                         validFrom = dateNull(),
        date                         validTo = maxDate())
    {
        DirPartyLocation dirPartyLocation = DirPartyLocation::findRec(DirPartyLocationRecId);
        DirPartyTable dirPartyTable = DirPartyTable::findRec(dirPartyLocation.Party);
        LogisticsPostalAddress logisticsPostalAddress = LogisticsPostalAddress::findByLocation(dirPartyLocation.Location);
        
        TaxRegistrationLegislationTypes taxRegistrationLegislationType = TaxRegistrationLegislationTypes::getTaxRegistrationTypeApplicabilityRule(
            taxRegistrationType,
            dirPartyTable.baseType(),
            logisticsPostalAddress.CountryRegionId);

        TaxRegistrationTypeApplicabilityRule rule = TaxRegistrationTypeApplicabilityRule::find(taxRegistrationLegislationType.TaxRegistrationTypeApplicabilityRule);

        Query query = new Query();
        query.validTimeStateDateRange(validFrom, validTo);
        QueryBuildDataSource qbd = query.addDataSource(tableNum(TaxRegistration));
        qbd.addRange(fieldNum(TaxRegistration, DirPartyLocation)).value(queryValue(dirPartyLocationRecId));
        qbd.addRange(fieldNum(TaxRegistration, TaxRegistrationTypeApplicabilityRule)).value(queryValue(rule.RecId));
        qbd.addSortField(fieldNum(TaxRegistration, ValidFrom), SortOrder::Ascending);
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryRegistrationNumberByTableRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the primary registration number of specified party.
    /// </summary>
    /// <param name = "_tableId">TableId of party</param>
    /// <param name = "_recId">RecId of party</param>
    /// <param name = "_type">Required type of registration</param>
    /// <param name = "_dateTime">Date on which to get UID, by default today.</param>
    /// <returns><c>EnterpriseCode</c> for primary address of the given party on a date.</returns>
    public static EnterpriseCode getPrimaryRegistrationNumberByTableRef(
        RefTableId _tableId,
        RefRecId _recId,
        TaxRegistrationTypesList _type = TaxRegistrationTypesList::TAXID,
        date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        DirPartyMap party;
        switch (_tableId)
        {
            case tableNum(CustTable):
                party = CustTable::findRecId(_recId);
                break;
            case tableNum(VendTable):
                party = VendTable::findRecId(_recId);
                break;
            case tableNum(CompanyInfo):
                party = CompanyInfo::findRecId(_recId);
                break;
            default:
                throw error("@SYS104799");
        }
        return TaxRegistration::getPrimaryRegistrationNumber(party, _type, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existRegistrationWithSameTypeRestrictAndRegCategory</Name>
				<Source><![CDATA[
    private boolean existRegistrationWithSameTypeRestrictAndRegCategory(RefRecId _refRule)
    {
        TaxRegistration taxRegistration;
        TaxRegistrationLegislationTypes legislationType;
        TaxRegistrationTypeApplicabilityRule applicabilityRule;

        select firstonly RecId from taxRegistration
            where taxRegistration.DirPartyLocation == this.DirPartyLocation
                && taxRegistration.RecId != this.RecId
                && taxRegistration.TaxRegistrationTypeApplicabilityRule != _refRule
        exists join applicabilityRule
            where applicabilityRule.RecId == taxRegistration.TaxRegistrationTypeApplicabilityRule
                && applicabilityRule.PartyTypeRestriction == TaxRegistrationTypeApplicabilityRule::find(_refRule).PartyTypeRestriction
        exists join legislationType
            where legislationType.TaxRegistrationTypeApplicabilityRule == applicabilityRule.RecId
                && legislationType.TaxRegistrationTypesList == TaxRegistrationLegislationTypes::findByTaxRegistrationTypeAppRule(_refRule).TaxRegistrationTypesList;

        return taxRegistration.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryAddressRestrictedTaxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the primary registration number of party.
    /// </summary>
    /// <param name = "_party">The party for which the registration number is sought.</param>
    /// <param name = "_type">the tax registration type.</param>
    /// <param name = "_transDateTime"> The date and time for which the tax registration number should be found; optional.</param>
    /// <returns>The primary company address registration number.</returns>
    public static TaxRegistration getPrimaryAddressRestrictedTaxRegistrationNumber(
        DirPartyMap _party,
        TaxRegistrationTypesList _type,
        TransDateTime _transDateTime = DateTimeUtil::utcNow())
    {
        TaxRegistration taxRegistration;
        LogisticsPostalAddress postalAddress = DirParty::primaryPostalAddress(_party.Party, _transDateTime);

        if (postalAddress)
        {
            TaxRegistrationTypeApplicabilityRule taxRegistrationTypeApplicabilityRule;
            DirPartyLocation dirPartyLocation;

            PartyTypeRestriction partyTypeRestriction = 
                _party.baseType() == DirPartyBaseType::Organization ? PartyTypeRestriction::Organization : PartyTypeRestriction::Person;

            select firstOnly validTimeState(_transDateTime) taxRegistration
                exists join dirPartyLocation
                    where dirPartyLocation.Location == postalAddress.Location
                        && taxRegistration.DirPartyLocation == dirPartyLocation.RecId
                exists join taxRegistrationTypeApplicabilityRule
                    where taxRegistrationTypeApplicabilityRule.IsPrimaryAddressRestricted == true
                        && taxRegistrationTypeApplicabilityRule.CountryRegionId == postalAddress.CountryRegionId
                        && taxRegistrationTypeApplicabilityRule.RecId == taxRegistration.TaxRegistrationTypeApplicabilityRule
                        && taxRegistrationTypeApplicabilityRule.PartyTypeRestriction == partyTypeRestriction;

            if (!taxRegistration)
            {
                select firstOnly validTimeState(_transDateTime) taxRegistration
                    exists join dirPartyLocation
                        where dirPartyLocation.Location == postalAddress.Location
                            && taxRegistration.DirPartyLocation == dirPartyLocation.RecId
                    exists join taxRegistrationTypeApplicabilityRule
                        where taxRegistrationTypeApplicabilityRule.IsPrimaryAddressRestricted == true
                            && taxRegistrationTypeApplicabilityRule.CountryRegionId == postalAddress.CountryRegionId
                            && taxRegistrationTypeApplicabilityRule.RecId == taxRegistration.TaxRegistrationTypeApplicabilityRule
                            && taxRegistrationTypeApplicabilityRule.PartyTypeRestriction == PartyTypeRestriction::None;
            }
        }
        return taxRegistration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyCounteryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets counterparty tax registration country/region according to the record of <c>TaxRegistration</c>.
    /// </summary>
    /// <param name = "_recId">The record ID of the <c>TaxRegistration</c> record.</param>
    /// <returns>The counterparty tax registration country/region.</returns>
    public static LogisticsAddressCountryRegionId getPartyCounteryRegionId(RefRecId _recId)
    {
        LogisticsAddressCountryRegionId ret;
        if (_recId)
        {
            TaxRegistration taxRegistration = TaxRegistration::find(_recId);
            if (taxRegistration)
            {
                TaxRegistrationTypeApplicabilityRule taxRegistrationTypeApplicabilityRule =
                    TaxRegistrationTypeApplicabilityRule::find(taxRegistration.TaxRegistrationTypeApplicabilityRule);
                ret = taxRegistrationTypeApplicabilityRule.CountryRegionId;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@RegistrationNumbers:TaxRegistrationTableDevDoc</DeveloperDocumentation>
	<Label>@RegistrationNumbers:RegistrationNumbers</Label>
	<TitleField1>DirPartyLocation</TitleField1>
	<TitleField2>TaxRegistrationTypeApplicabilityRule</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<Modules>Tax</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<ValidTimeStateFieldType>Date</ValidTimeStateFieldType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DirPartyLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RegistrationNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RegistrationNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Main</Name>
			<Label>@GLS220858</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxRegistrationTypeApplicabilityRule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>showTaxAuthority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RegistrationNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Issuer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IssueDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS2952</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisregardNumberSequenceGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Number</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxRegistrationTypeApplicabilityRule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>showCountryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RegistrationNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Section</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Issuing</Name>
			<Label>@RegistrationNumbers:Issuing</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>showTaxAuthority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Issuer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IssueDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Depreciation_JP</Name>
			<Label>@SYS67341</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DepreciationMethod_JP</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RegistrationNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DirPartyLocation</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RegistrationNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxRegistrationNumber</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxRegistrationTypeApplicabilityRule</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxRegistrationTypeId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidFromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidToDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Issuer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RegNumIssuer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>IssueDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RegNumIssueDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Section</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RegNumSection</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DepreciationMethod_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>JP</CountryRegionCodes>
			<EnumType>DepreciationMethod_JP</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NumberSequenceGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@RegistrationNumbers:TaxRegistrationNumberSequenceGroupDescription</HelpText>
			<Label>@SYS54850</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DisregardNumberSequenceGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@RegistrationNumbers:DisregardNumSeqGroupHelpText</HelpText>
			<Label>@RegistrationNumbers:DisregardNumSeqGroupLabel</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxRegistration</Name>
			<AlternateKey>Yes</AlternateKey>
			<ValidTimeStateKey>Yes</ValidTimeStateKey>
			<ValidTimeStateMode>Gap</ValidTimeStateMode>
			<Fields>
				<AxTableIndexField>
					<DataField>DirPartyLocation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxRegistrationTypeApplicabilityRule</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxRegistrationRule</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxRegistrationTypeApplicabilityRule</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RegistrationNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DirPartyLocation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DirPartyLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>DirPartyLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DirPartyLocation</Name>
					<Field>DirPartyLocation</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxRegistrationTypeApplicabilityRule</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxRegistrationTypeApplicabilityRule</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxRegistrationTypeApplicabilityRule</Name>
					<Field>TaxRegistrationTypeApplicabilityRule</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RegNumIssuerTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RegNumIssuerTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Issuer</Name>
					<Field>Issuer</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>NumberSequenceGroupId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>NumberSequenceGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>NumberSequenceGroupId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxAuthorityAddressRegistration_NumberSequenceGroupId</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NumberSequenceGroupId</Name>
					<Field>NumberSequenceGroupId</Field>
					<RelatedField>numberSequenceGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>