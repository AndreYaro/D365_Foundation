<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpServiceTaxPeriodicHeader_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TmpServiceTaxPeriodicHeader_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createVendorJournalTransactions</Name>
				<Source><![CDATA[
    public boolean createVendorJournalTransactions(TmpServiceTaxPeriodicHeader_IN     _tmpServiceTaxPeriodicHeader,
                                                   TmpServiceTaxPeriodicLine_IN       _tmpServiceTaxPeriodicLine)
    {
        date                        transDateLoc;
        VendTrans                   vendTrans;
        VendTransOpen               vendTransOpen;
        LedgerJournalTrans          ledgerJournalTrans;
        TaxTrans                    taxTransLoc, taxTransSum;
        TaxTrans_IN                 taxTrans;
        Voucher                     voucherLoc;
        boolean                     hasRelatedVoucher = true;
        ;

        if (!_tmpServiceTaxPeriodicHeader.Date)
        {
            transDateLoc = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
        else
        {
            transDateLoc = _tmpServiceTaxPeriodicHeader.Date;
        }

        while select RecId, Voucher, TransDate, AccountNum from vendTrans
            where vendTrans.AccountNum      == _tmpServiceTaxPeriodicHeader.gtaVendor
               && vendTrans.TransDate       <= transDateLoc
               && vendTrans.TransType       != LedgerTransType::Purch
        {
            vendTransOpen = VendTransOpen::findRefId(vendTrans.RecId);
            if (!vendTransOpen)
            {
                continue ;
            }

            hasRelatedVoucher = true;
            voucherLoc = TaxSettlement_IN::determineRelatedVoucher(vendTrans.Voucher, vendTrans.TransDate);
            if (!voucherLoc)
            {
                voucherLoc = vendTrans.Voucher;
                hasRelatedVoucher = false;
            }

            while select taxTransLoc
                where taxTransLoc.Voucher == voucherLoc
            {
                select firstonly RefRecId, AbatementAmount, AbatementCertificateNumber from taxTrans
                    where taxTrans.RefRecId        == taxTransLoc.RecId
                       && taxTrans.AbatementAmount != 0;

                if (taxTrans.AbatementAmount                    &&
                    voucherLoc                                  &&
                    !taxTrans.AbatementCertificateNumber)
                {
                    _tmpServiceTaxPeriodicLine.TaxAmount =0;
                    select firstonly TaxItemGroup, TaxGroup, Voucher from taxTransLoc
                        where taxTransLoc.RecId   == taxTrans.RefRecId;

                    while select TaxCode, TaxDirection, TaxOrigin, TaxAmount from taxTransSum
                        where taxTransSum.TaxItemGroup == taxTransLoc.TaxItemGroup
                           && taxTransSum.TaxGroup     == taxTransLoc.TaxGroup
                           && taxTransSum.Voucher      == voucherLoc
                    {
                        if (TaxTable::find(taxTransSum.TaxCode).TaxType_IN == TaxType_IN::ServiceTax    &&
                            (taxTransSum.TaxDirection                      == TaxDirection::OutgoingTax &&
                             taxTransSum.TaxOrigin                         == TaxOrigin::Tax ))
                        {
                            _tmpServiceTaxPeriodicLine.TaxAmount += abs(taxTransSum.TaxAmount);
                        }
                    }

                    if (hasRelatedVoucher)
                    {
                        select ledgerJournalTrans
                            where ledgerJournalTrans.Voucher  == vendTrans.Voucher;
                    }
                    else
                    {
                        select firstonly AccountType, AmountCurCredit, AmountCurDebit, OffsetAccountType from ledgerJournalTrans
                            where ledgerJournalTrans.Voucher  == taxTransLoc.Voucher;
                    }

                    if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
                        && ledgerJournalTrans.AmountCurCredit)
                    {
                        _tmpServiceTaxPeriodicLine.TransactionAmount = ledgerJournalTrans.AmountCurCredit;
                    }
                    if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend
                        && ledgerJournalTrans.AmountCurDebit)
                    {
                        _tmpServiceTaxPeriodicLine.TransactionAmount =  ledgerJournalTrans.AmountCurDebit;
                    }
                    if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
                        && ledgerJournalTrans.AmountCurDebit)
                    {
                        _tmpServiceTaxPeriodicLine.TransactionAmount = - ledgerJournalTrans.AmountCurDebit;
                    }
                    if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend
                        && ledgerJournalTrans.AmountCurCredit)
                    {
                        _tmpServiceTaxPeriodicLine.TransactionAmount =  - ledgerJournalTrans.AmountCurCredit;
                    }

                    if (_tmpServiceTaxPeriodicLine.TransactionAmount >0)
                    {
                        _tmpServiceTaxPeriodicLine.TaxAmount = abs(_tmpServiceTaxPeriodicLine.TaxAmount);
                    }
                    else
                    {
                        _tmpServiceTaxPeriodicLine.TaxAmount = - _tmpServiceTaxPeriodicLine.TaxAmount;
                    }

                    _tmpServiceTaxPeriodicLine.Voucher       = voucherLoc;
                    _tmpServiceTaxPeriodicLine.Date          = vendTrans.TransDate;
                    _tmpServiceTaxPeriodicLine.VendorAccount = vendTrans.AccountNum;
                    _tmpServiceTaxPeriodicLine.Source        = ServiceTax_IN::Voucher;
                    _tmpServiceTaxPeriodicLine.insert();
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendorPurchTransactions</Name>
				<Source><![CDATA[
    public boolean createVendorPurchTransactions(TmpServiceTaxPeriodicHeader_IN     _tmpServiceTaxPeriodicHeader,
                                                 TmpServiceTaxPeriodicLine_IN       _tmpServiceTaxPeriodicLine)
    {
        date                        transDateLoc;
        VendTrans                   vendTrans;
        VendTransOpen               vendTransOpen;
        TaxTrans                    taxTransLoc,taxTransSum;
        TaxTrans_IN                 taxTrans;
        VendInvoiceTrans            vendInvoiceTrans;
        InventTransId               tmpInventTransId;
        ;

        if (!_tmpServiceTaxPeriodicHeader.Date)
        {
            transDateLoc = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
        else
        {
            transDateLoc = _tmpServiceTaxPeriodicHeader.Date;
        }
        while select RecId, Voucher, TransDate, AccountNum from vendTrans
            where vendTrans.AccountNum      == _tmpServiceTaxPeriodicHeader.gtaVendor
               && vendTrans.TransDate       <= transDateLoc
               && vendTrans.TransType       == LedgerTransType::Purch
        {
            vendTransOpen = VendTransOpen::findRefId(vendTrans.RecId);

            if (!vendTransOpen)
            {
                continue ;
            }

            while select RecId, TaxItemGroup, TaxGroup, InventTransId from taxTransLoc
                where taxTransLoc.Voucher == vendTrans.Voucher
            {
                while select InventTransId, LineAmount from vendInvoiceTrans
                    where vendInvoiceTrans.InventTransId    == taxTransLoc.InventTransId
                       && vendInvoiceTrans.InventTransId    != tmpInventTransId
                {
                    select firstonly AbatementAmount, AbatementCertificateNumber from taxTrans
                       where taxTrans.AbatementAmount   != 0
                          && taxTrans.RefRecId          == taxTransLoc.RecId;

                    if (taxTrans.AbatementAmount    &&
                        vendTrans.Voucher           &&
                        !taxTrans.AbatementCertificateNumber )
                    {
                        _tmpServiceTaxPeriodicLine.TaxAmount =0;
                        while select TaxCode, TaxDirection, TaxAmount from taxTransSum
                            where taxTransSum.TaxItemGroup     == taxTransLoc.TaxItemGroup
                               && taxTransSum.TaxGroup         == taxTransLoc.TaxGroup
                               && taxTransSum.Voucher          == vendTrans.Voucher
                               && taxTransSum.InventTransId    == vendInvoiceTrans.InventTransId
                        {
                            if (TaxTable::find(taxTransSum.TaxCode).TaxType_IN == TaxType_IN::ServiceTax &&
                                taxTransSum.TaxDirection                       == TaxDirection::OutgoingTax)
                            {
                                _tmpServiceTaxPeriodicLine.TaxAmount += taxTransSum.TaxAmount;
                            }
                        }

                        _tmpServiceTaxPeriodicLine.TransactionAmount    = vendInvoiceTrans.LineAmount;
                        if (_tmpServiceTaxPeriodicLine.TransactionAmount < 0 )
                        {
                            _tmpServiceTaxPeriodicLine.TaxAmount = _tmpServiceTaxPeriodicLine.TaxAmount * -1;
                        }
                        else
                        {
                            _tmpServiceTaxPeriodicLine.TaxAmount = abs(_tmpServiceTaxPeriodicLine.TaxAmount);
                        }
                        _tmpServiceTaxPeriodicLine.Voucher              = vendTrans.Voucher;
                        _tmpServiceTaxPeriodicLine.Date                 = vendTrans.TransDate;
                        _tmpServiceTaxPeriodicLine.VendorAccount        = vendTrans.AccountNum;
                        _tmpServiceTaxPeriodicLine.Source               = ServiceTax_IN::PurchaseOrder;
                        _tmpServiceTaxPeriodicLine.InventTransId        = taxTransLoc.InventTransId;
                        tmpInventTransId                                = taxTransLoc.InventTransId;

                        if (_tmpServiceTaxPeriodicLine.TaxAmount)
                            _tmpServiceTaxPeriodicLine.insert();
                    }
                }
            }
        }
            return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendorTransactions</Name>
				<Source><![CDATA[
    public static void createVendorTransactions(TmpServiceTaxPeriodicHeader_IN      _tmpServiceTaxPeriodicHeader,
                                                TmpServiceTaxPeriodicLine_IN        _tmpServiceTaxPeriodicLine)
    {
        ;

        delete_from _tmpServiceTaxPeriodicLine;

        switch (_tmpServiceTaxPeriodicHeader.Source)
        {
            case ServiceTax_IN::PurchaseOrder :
                _tmpServiceTaxPeriodicHeader.createVendorPurchTransactions(_tmpServiceTaxPeriodicHeader, _tmpServiceTaxPeriodicLine);
                break;

            case ServiceTax_IN::Voucher :
                _tmpServiceTaxPeriodicHeader.createVendorJournalTransactions(_tmpServiceTaxPeriodicHeader, _tmpServiceTaxPeriodicLine);
                break;

            case  ServiceTax_IN::All :
                _tmpServiceTaxPeriodicHeader.createVendorJournalTransactions(_tmpServiceTaxPeriodicHeader, _tmpServiceTaxPeriodicLine);
                _tmpServiceTaxPeriodicHeader.createVendorPurchTransactions(_tmpServiceTaxPeriodicHeader, _tmpServiceTaxPeriodicLine);
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorTransactions</Name>
				<Source><![CDATA[
    public static void updateVendorTransactions(TmpServiceTaxPeriodicHeader_IN      _tmpServiceTaxPeriodicHeader,
                                                TmpServiceTaxPeriodicLine_IN        _tmpServiceTaxPeriodicLine)
    {
        TaxTrans_IN     taxTrans;
        TaxTrans        taxTransLoc;
        ;

        ttsbegin;
        while select _tmpServiceTaxPeriodicLine
            where _tmpServiceTaxPeriodicLine.Mark == NoYes::Yes
        {
            while select taxTransLoc
                where taxTransLoc.Voucher == _tmpServiceTaxPeriodicLine.Voucher
            {
                if (taxTransLoc.SourceTableId == tablenum(LedgerJournalTrans))
                {
                    select forupdate taxTrans
                        where taxTrans.RefRecId == taxTransLoc.RecId ;

                    taxTrans.AbatementCertificateNumber = _tmpServiceTaxPeriodicHeader.AbatementCertificateNumber;
                    taxTrans.update();
                }

                if ((taxTransLoc.SourceTableId == tablenum(VendInvoiceJour)) ||
                    (taxTransLoc.SourceTableId == tablenum(PurchLine)))
                {
                    while select RecId, InventTransId, Voucher from taxTransLoc
                        where taxTransLoc.InventTransId     == _tmpServiceTaxPeriodicLine.InventTransId
                           && taxTransLoc.Voucher           == _tmpServiceTaxPeriodicLine.Voucher
                    {
                        while select forupdate taxTrans
                            where taxTrans.RefRecId == taxTransLoc.RecId
                        {
                            taxTrans.AbatementCertificateNumber = _tmpServiceTaxPeriodicHeader.AbatementCertificateNumber;
                            taxTrans.update();
                        }
                    }
                }
            }
        }

        delete_from _tmpServiceTaxPeriodicLine
            where _tmpServiceTaxPeriodicLine.Mark == NoYes::Yes ;

        _tmpServiceTaxPeriodicHeader.AbatementCertificateNumber = ' ';
        _tmpServiceTaxPeriodicHeader.update();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<Label>@GLS6052</Label>
	<TitleField1>GTAVendor</TitleField1>
	<TitleField2>Source</TitleField2>
	<ClusteredIndex></ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<PrimaryIndex></PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CertificateDetails</Name>
			<Label>@GLS6065</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AbatementCertificateNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SYS40</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Date</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Select</Name>
			<Label>@SYS11584</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GTAVendor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Source</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AbatementCertificateNumber</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>DocumentNum</ExtendedDataType>
			<Label>@GLS5355</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>Date</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GTAVendor</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<Label>@GLS6050</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Source</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>ServiceTax_IN</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>GTAVendor</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>GTAVendor</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>