<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetGroupZakat_SA</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetGroupZakat_SA extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
        public static boolean checkExist(AssetGroupNameZakat_SA  _groupName)
    {
        boolean ret = true;

        if (!AssetGroupZakat_SA::exist(_groupName))
        {
            ret = checkFailed(strfmt(AssetGroupZakat_SA::txtNotExist(), _groupName));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the table.
    /// </summary>
    /// <param name="_groupName">
    /// The group name of the <c>AssetGroupZakat_SA</c> table record.
    /// </param>
    /// <returns>
    /// true if the rule exits; otherwise, false.
    /// </returns>
    public static boolean exist(AssetGroupNameZakat_SA _groupName)
    {
        return (_groupName
            && (select firstonly RecId
                    from assetGroupZakat_SA
                        where assetGroupZakat_SA.GroupName == _groupName).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in <c>AssetGroupZakat_SA</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>AssetGroupZakat_SA</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>AssetGroupZakat_SA</c> table; otherwise, an empty record.
    /// </returns>
    public static AssetGroupZakat_SA find(
        RecId               _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetGroupZakat_SA  assetGroup;

        assetGroup.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            assetGroup.concurrencyModel(_concurrencyModel);
        }

        select firstonly assetGroup
            where assetGroup.RecId == _recId;

        return assetGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByGroupName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the <c>AssetGroupZakat_SA</c> table by the specified group name.
    /// </summary>
    /// <param name="_groupName">
    /// The group name of the <c>AssetGroupZakat_SA</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>AssetGroupZakat_SA</c> table; otherwise, an empty record.
    /// </returns>
    public static AssetGroupZakat_SA findByGroupName(
        AssetGroupNameZakat_SA  _groupName,
        boolean                 _forUpdate        = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetGroupZakat_SA  assetGroup;

        if (_groupName != '')
        {
            assetGroup.selectForUpdate(_forUpdate);
            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                assetGroup.concurrencyModel(_concurrencyModel);
            }
            select firstonly assetGroup
                where assetGroup.GroupName == _groupName;
        }

        return assetGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "@SYS322393";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>SA</CountryRegionCodes>
	<DeveloperDocumentation>@SYS322153</DeveloperDocumentation>
	<Label>@SYS321603</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>GroupName</TitleField1>
	<TitleField2>GroupType</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>FixedAssets</Modules>
	<ReplacementKey>GroupIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>AssetDepreciationZakat_SA</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>AssetDepreciationZakat_SA</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>LedgerJournalTransZakat_SA</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>LedgerJournalTransZakat_SA</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GroupName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GroupName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AssetGroup</Name>
			<Label>@SYS136007</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GroupName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GroupName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetGroupNameZakat_SA</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GroupType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetGroupTypeZakat_SA</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>GroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>GroupName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>