<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSReceiptDetails</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSReceiptDetails extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createOrUpdateReceiptDetailsHandlingQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///	Creates or updates receipt details record depending on if one already exists.
    /// </summary>
    /// <param name="_receiptId">
    ///	The receipt identification number of the record we are inserting or updating.
    /// </param>
    /// <param name="_inventDimId">
    ///	The inventory dimension identification number of the record we are inserting or updating.
    /// </param>
    /// <param name="_inventHandlingQty">
    ///	The inventory unit handling qty of the record we are inserting or updating.
    /// </param>
    /// <param name="_capturedWeight">
    ///	The weight tied to the receipt details record. Will only be filled if item is not catch weight tag tracked and capturing non-aggregate weight.
    /// </param>
    /// <param name="_itemId">
    ///	The item identification number.
    /// </param>
	[Hookable(false)]
    internal static void createOrUpdateReceiptDetailsHandlingQty(
        WHSReceiptId		_receiptId,
        InventDimId			_inventDimId,
        InventHandlingQty	_inventHandlingQty,
        WHSCapturedWeight	_capturedWeight,
        ItemId				_itemId)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightHandlingWeightLogic(funcName(), _itemId, _capturedWeight))
        {
            WHSReceiptDetails::createOrUpdateReceiptDetailsInclCapturedWeight(_receiptId, _inventDimId, _inventHandlingQty, _capturedWeight);
        }
        else
        {
            WHSReceiptDetails::createOrUpdateReceiptDetails(_receiptId, _inventDimId, _inventHandlingQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateReceiptDetailsInclCapturedWeight</Name>
				<Source><![CDATA[
    private static void createOrUpdateReceiptDetailsInclCapturedWeight(
        WHSReceiptId		_receiptId,
        InventDimId			_inventDimId,
        InventHandlingQty	_inventHandlingQty,
        WHSCapturedWeight	_capturedWeight)
	{
        WHSReceiptDetails   receiptDetails;

        ttsbegin;

        receiptDetails = WHSReceiptDetails::find(_receiptId, _inventDimId, true);

        if (receiptDetails.RecId != 0)
        {
            receiptDetails.InventQty		+= _inventHandlingQty;
            receiptDetails.CapturedWeight	+= _capturedWeight;
            receiptDetails.update();
        }
        else
        {
            receiptDetails.ReceiptId		= _receiptId;
            receiptDetails.InventDimId		= _inventDimId;
            receiptDetails.InventQty		= _inventHandlingQty;
            receiptDetails.CapturedWeight	= _capturedWeight;
            receiptDetails.insert();
        }

        ttscommit;
	}

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateReceiptDetails</Name>
				<Source><![CDATA[
	/// <summary>
    /// Creates or updates receipt details record depending on if one already exists.
    /// </summary>
    /// <param name="_receiptId">
    /// The receipt identification number of the record we are inserting or updating.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventory dimension identification number of the record we are inserting or updating.
    /// </param>
    /// <param name="_inventQty">
    /// The inventory unit qty of the record we are inserting or updating.
    /// </param>
    public static void createOrUpdateReceiptDetails(
        WHSReceiptId    _receiptId,
        InventDimId     _inventDimId,
        InventQty       _inventQty)
    {
        WHSReceiptDetails::createOrUpdateReceiptDetailsInclCapturedWeight(_receiptId, _inventDimId, _inventQty, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a specific <c>whsReceiptDetails</c> record exists.
    /// </summary>
    /// <param name="_receiptId">
    /// Receipt id of the record.
    /// </param>
    /// <param name="_inventDimId">
    /// Inventory dimension id of the record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(
        WHSReceiptId    _receiptId,
        InventDimId     _inventDimId)
    {
        return _receiptId && _inventDimId &&
               (select firstonly RecId from whsReceiptDetails
                    where whsReceiptDetails.ReceiptId   == _receiptId
                    &&    whsReceiptDetails.InventDimId == _inventDimId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByReceiptIdLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a specific <c>whsReceiptDetails</c> record exists with a receipt id and licence plate id.
    /// </summary>
    /// <param name="_receiptId">
    /// Receipt id of the record.
    /// </param>
    /// <param name="_licensePlateId">
    /// License plate id of the record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean existByReceiptIdLicensePlate(
        WHSReceiptId        _receiptId,
        WHSLicensePlateId   _licensePlateId)
    {
        WHSReceiptDetails   receiptDetails;
        InventDim           inventDim;

        if (_receiptId)
        {
            select firstonly RecId from receiptDetails
                where receiptDetails.ReceiptId == _receiptId
                exists join inventDim
                    where inventDim.InventDimId == receiptDetails.InventDimId
                        && inventDim.LicensePlateId == _licensePlateId;
        }

        return receiptDetails.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSReceiptDetails</c> record with given parameters.
    /// </summary>
    /// <param name="_receiptId">
    /// Receipt id of the record.
    /// </param>
    /// <param name="_inventDimId">
    /// Inventory dimension id of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSReceiptDetails find(
        WHSReceiptId    _receiptId,
        InventDimId     _inventDimId,
        boolean         _forupdate = false)
    {
        WHSReceiptDetails    receiptDetails;

        if (_receiptId && _inventDimId)
        {
            receiptDetails.selectForUpdate(_forupdate);

            select firstonly receiptDetails
                where receiptDetails.ReceiptId == _receiptId
                    && receiptDetails.InventDimId == _inventDimId;
        }

        return receiptDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSReceiptDetails</c> record by id.
    /// </summary>
    /// <param name="_receiptDetailsRecId">
    /// Id of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    [Hookable(false)]
    public static WHSReceiptDetails findByRecId(WHSReceiptDetailsRecId _receiptDetailsRecId, boolean _forupdate = false)
    {
        WHSReceiptDetails receiptDetails;

        if (_receiptDetailsRecId)
        {
            receiptDetails.selectForUpdate(_forupdate);

            select firstonly receiptDetails
                where receiptDetails.RecId == _receiptDetailsRecId;
        }

        return receiptDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCapturedWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the captured weight.
    /// </summary>
    /// <param name = "_receiptDetailsRecId">Id of the record</param>
    /// <param name = "capturedWeight">Weight to be incremented on the receipt.</param>
    [Hookable(false)]
    internal static void updateCapturedWeight(WHSReceiptDetailsRecId _receiptDetailsRecId, WHSCapturedWeight capturedWeight)
    {
        ttsbegin;

        WHSReceiptDetails receiptDetails = WHSReceiptDetails::findByRecId(_receiptDetailsRecId, true);

        if (receiptDetails)
        {
            receiptDetails.CapturedWeight += capturedWeight;
            receiptDetails.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX5542</DeveloperDocumentation>
	<Label>@WAX5541</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ReceiptId</TitleField1>
	<TitleField2>InventDimId</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ReceiptIdInventDimIdIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>Inventory</Modules>
	<ReplacementKey>ReceiptIdInventDimIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReceiptId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReceiptId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReceiptId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReceiptId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSReceiptId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CapturedWeight</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCapturedWeight</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReceiptIdInventDimIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ReceiptId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>