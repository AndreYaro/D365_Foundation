<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxAgent</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxAgent extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>address</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the address of tax agent.
    /// </summary>
    /// <returns>
    /// Returns the address of tax agent.
    /// </returns>
    display LogisticsAddressing address()
    {
        return DirParty::primaryPostalAddress(this.Party).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the specified record of table <c>TaxAgent</c>.
    /// </summary>
    public void delete()
    {
        DirPartyRelationship        dirPartyRelationship;
        DirRelationshipTypeTable    dirRelationshipTypeTable;

        ttsbegin;

        // Auto delete party at backend
        DirParty::autoDeleteParty(this.Party);

        dirRelationshipTypeTable = DirRelationshipTypeTable::findBySystemType(DirSystemRelationshipType::Agent);

        // delete existing assignment
        delete_from dirPartyRelationship
            where dirPartyRelationship.RelationshipTypeId   ==  dirRelationshipTypeTable.RelationshipTypeId
                && dirPartyRelationship.ChildParty          ==  this.Party;

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays sales tax agent name.
    /// </summary>
    /// <returns>
    ///    Name of sales tax agent.
    /// </returns>
    public display Name name()
    {
        return DirPartyTable::findRec(this.Party).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
        public static boolean checkExist(TaxAgentId _agentId)
    {
        boolean ret = true;

        if (!TaxAgent::exist(_agentId))
        {
            ret = checkFailed(strFmt(TaxAgent::txtNotExist(), _agentId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether <c>TaxAgent</c> existed.
    /// </summary>
    /// <param name="_agentId">
    /// The field AgentId of table <c>TaxAgent</c> used to find the specified record.
    /// </param>
    /// <returns>
    /// True if the record existed, otherwise false.
    /// </returns>
    public static boolean exist(TaxAgentId _agentId)
    {
        TaxAgent   taxAgent;

        select firstonly RecId from taxAgent
            where taxAgent.AgentId == _agentId;

        return (taxAgent.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds <c>TaxAgent</c> record according to RecId.
    /// </summary>
    /// <param name="_recId">
    ///     Record Id
    /// </param>
    /// <param name="_forUpdate">
    ///     Indicates whether selected record can be updated.
    /// </param>
    /// <param name="_concurrencyModel">
    ///     Currency model
    /// </param>
    /// <returns>
    ///     Record of <c>TaxAgent</c>.
    /// </returns>
    public static TaxAgent find(
        RecId               _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxAgent   taxAgent;

        if (_recId)
        {
            taxAgent.selectForUpdate(_forUpdate);
            if (_forUpdate
                && _concurrencyModel != ConcurrencyModel::Auto)
            {
                taxAgent.concurrencyModel(_concurrencyModel);
            }

            select firstonly taxAgent
                where taxAgent.RecId == _recId;
        }

        return taxAgent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAgentId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a record that link to a specified sales tax agent.
    /// </summary>
    /// <param name = "_agentId">
    ///     Specifies the sales tax agent.
    /// </param>
    /// <param name = "_forUpdate">
    ///     Specifies if sales tax agent is selected for update.
    /// </param>
    /// <param name = "_concurrencyModel">
    ///     Specifies the concurrency model.
    /// </param>
    /// <returns>
    ///    If found, returns the record in the <c>TaxAgent</c>; otherwise, returns an empty record..
    /// </returns>
    public static TaxAgent findByAgentId(
        TaxAgentId          _agentId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxAgent   taxAgent;

        if (_agentId)
        {
            taxAgent.selectForUpdate(_forUpdate);
            if (_forUpdate
                    && _concurrencyModel != ConcurrencyModel::Auto)
            {
                taxAgent.concurrencyModel(_concurrencyModel);
            }

            select firstonly taxAgent
                where taxAgent.AgentId == _agentId;
        }

        return taxAgent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPartyRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a record that link to a specified party of <c>TaxAgent</c>.
    /// </summary>
    /// <param name = "_partyRecId">
    ///     Specifies the party.
    /// </param>
    /// <param name = "_forUpdate">
    ///     Specifies if sales tax agent is selected for update.
    /// </param>
    /// <param name = "_concurrencyModel">
    ///     Specifies the concurrency model.
    /// </param>
    /// <returns>
    ///    If found, returns the record in the <c>TaxAgent</c>; otherwise, returns an empty record..
    /// </returns>
    public static TaxAgent findByPartyRecId(
        DirPartyRecId    _partyRecId,
        boolean          _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxAgent   taxAgent;

        if (_partyRecId)
        {
            taxAgent.selectForUpdate(_forUpdate);
            if (_forUpdate
                    && _concurrencyModel != ConcurrencyModel::Auto)
            {
                taxAgent.concurrencyModel(_concurrencyModel);
            }

            select firstonly taxAgent
                where taxAgent.Party == _partyRecId;
        }

        return taxAgent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        static TxtNotExist txtNotExist()
    {
        // Tax agent %1 does not exist.
        return "@SYS4082740";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TaxThailandGovCertification</ConfigurationKey>
	<CountryRegionCodes>TH</CountryRegionCodes>
	<DeveloperDocumentation>@SYS4082709</DeveloperDocumentation>
	<Label>@SYS4082708</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>AgentId</TitleField1>
	<TitleField2>Party</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Tax</Modules>
	<ReplacementKey>AgentIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Party</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxRegNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Party</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgentId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgentId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxRegNum</Name>
			<Label>@SYS70359</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxRegNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AgentId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAgentId</ExtendedDataType>
			<Label>@SYS4082739</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Party</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DirPartyRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxRegNum</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CompanyCoRegNum</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PartyIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Party</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AgentIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AgentId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DirPartyMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Party</MapField>
					<MapFieldTo>Party</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Account</MapField>
					<MapFieldTo>AgentId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DirPartyTable</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>DirPartyTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>