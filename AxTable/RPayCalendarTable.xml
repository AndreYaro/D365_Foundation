<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayCalendarTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RPayCalendarTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromTimeTable</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void initFromTimeTable()
    {
        ;
        this.Holiday = RPayTimeTable::find(this.PayTimeId).Holiday;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
        public void initValue()
    {
        super();
        this.PayCalendarType = RPayCalendarType::Other;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(FieldId _fieldId)
    {
        boolean ret;
        ;

        ret = super(_fieldId);
        if (ret)
        {
            switch (_fieldId)
            {
                case fieldNum (RPayCalendarTable, PayCalendarType):
                    if (this.PayCalendarType != RPayCalendarType::Other)
                    {
                        if ((select rPayCalendarTable
                                 where rpayCalendarTable.PayCalendarType == this.PayCalendarType &&
                                       rpayCalendarTable.RecId           != this.RecId).RecId)
                        {
                             ret = checkFailed("@RUP426");
                        }
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;
        ;
        ret = super();
        if (ret)
        {
            if (this.PayCalendarType != RPayCalendarType::Other)
            {
                if (! this.PayTimeId)
                {
                    ret = checkFailed("@RUP427");
                }

                if (RPayTimeTable::find(this.PayTimeId).PeriodType == RPayPeriodType::Period)
                {
                    ret = checkFailed("@RUP995");
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static boolean checkExist(CalendarId   _calendarId)
    {
        if (_calendarId   && ! RPayCalendarTable::exist(_calendarId))
        {
            return checkFailed(strFmt(RPayCalendarTable::txtNotExist(),_calendarId));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static boolean exist(RPayCalendarId _payCalendarId)
    {
        return _payCalendarId &&
            (select rpayCalendarTable index hint CalendarIdx
                where rpayCalendarTable.CalendarId == _payCalendarId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static RPayCalendarTable find(RPayCalendarId _calendarId, boolean _forUpdate = false)
    {
        RPayCalendarTable payCalendarTable;
        ;
        payCalendarTable.selectForUpdate(_forUpdate);

        if (_calendarId)
        {
            select firstonly payCalendarTable index hint CalendarIdx
                where payCalendarTable.CalendarId == _calendarId;
        }

        return payCalendarTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCalendarType</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static RPayCalendarTable findCalendarType(RPayCalendarType _rPayCalendarType)
    {
        RPayCalendarTable payCalendarTable;
        ;
        select firstonly payCalendarTable
           where payCalendarTable.PayCalendarType == _rPayCalendarType;

        return payCalendarTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalendarId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static RPayCalendarId getCalendarId(RPayVacationDuration _vacationDuration)
    {
        RPayCalendarId rPayCalendarId;
        ;
        switch (_vacationDuration)
        {
            case RPayVacationDuration::WorkDays:
                rPayCalendarId = RPayCalendarTable::findCalendarType(RPayCalendarType::SixDay).CalendarId;
                break;
            case RPayVacationDuration::CalendarDays:
                rPayCalendarId = RPayCalendarTable::findCalendarType(RPayCalendarType::SevenDays).CalendarId;
                break;
        }

        return rPayCalendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hoursToDay</Name>
				<Source><![CDATA[
        #define.Value4(4)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static real hoursToDay(real _hours)
    {
        int sign;
        ;
        sign = _hours > 0 ? 1 : -1;

        if (abs(_hours) > #Value4)
        {
            return 1 * sign;
        }

        if (_hours != 0)
        {
            return 0.5 * sign;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mthWorkDays</Name>
				<Source><![CDATA[
        #TimeConstants
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static real mthWorkDays(RPayCalendarId       _payCalendarId,
                                          ReportPeriod_RU      _payPeriod = RPayParameters::payPeriod(),
                                          RPayCalendarTimeCode _payCalendarTimeCode = '')
    {
        real      res = 0;
        TransDate currentDate;
        ;
        if (RPayCalendarTimeTable::find(_payCalendarTimeCode).PayTblTimeTypeCalc == RPayTblTimeTypeCalc::Hours)
        {
            return res;
        }

        for (currentDate = mkDate(1,mthOfYr(_payPeriod),year(_payPeriod)); currentDate <= endmth(_payPeriod) ; currentDate ++)
        {
            res += RPayCalendarTable::hoursToDay(RPayCalendarDate::calcDefinedSeconds(_payCalendarId, currentDate, _payCalendarTimeCode)/#SecondsPerHour);
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mthWorkDaysTimeGroup</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static real mthWorkDaysTimeGroup(RPayCalendarId    _payCalendarId,
                                                   ReportPeriod_RU   _payPeriod = RPayParameters::payPeriod(),
                                                   RpayTimeGroupCode _payTimeGroupCode = '')

    {
        real                res;
        RPayTimeGroupMember rPayTimeGroupMember;
        ;
        while select PayCalendarTimeCode from rPayTimeGroupMember
            where rPayTimeGroupMember.TimeGroup == _payTimeGroupCode
        {
            res += RPayCalendarTable::mthWorkDays(_payCalendarId,
                                                  _payPeriod,
                                                  rPayTimeGroupMember.PayCalendarTimeCode);
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mthWorkHours</Name>
				<Source><![CDATA[
        #timeConstants
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static real mthWorkHours(RPayCalendarId       _payCalendarId,
                                    ReportPeriod_RU      _payPeriod = RPayParameters::payPeriod(),
                                    RPayCalendarTimeCode _payCalendarTimeCode = '')
    {
        real      res;
        TransDate currentDate;
        ;
        for (currentDate = mkDate(1,mthOfYr(_payPeriod),year(_payPeriod)); currentDate <= endmth(_payPeriod) ; currentDate ++)
        {
            res += RPayCalendarDate::calcDefinedSeconds(_payCalendarId, currentDate, _payCalendarTimeCode)/#SecondsPerHour;
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mthWorkHoursTimeGroup</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static real mthWorkHoursTimeGroup(RPayCalendarId    _payCalendarId,
                                                    ReportPeriod_RU   _payPeriod = RPayParameters::payPeriod(),
                                                    RpayTimeGroupCode _payTimeGroupCode = '')

    {
        real                res = 0;
        RPayTimeGroupMember rPayTimeGroupMember;
        ;
        while select PayCalendarTimeCode from rPayTimeGroupMember
            where rPayTimeGroupMember.TimeGroup == _payTimeGroupCode
        {
            res += RPayCalendarTable::mthWorkHours(_payCalendarId,
                                                   _payPeriod,
                                                   rPayTimeGroupMember.PayCalendarTimeCode);
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodWorkDays</Name>
				<Source><![CDATA[
        #timeConstants
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static real periodWorkDays(RPayCalendarId          _payCalendarId,
                                             TransDate               _startDate,
                                             TransDate               _endDate,
                                             RPayCalendarTimeCode    _payCalendarTimeCode)
    {
        real            res = 0;
        TransDate       currentDate;
        ;
        if (RPayCalendarTimeTable::find(_payCalendarTimeCode).PayTblTimeTypeCalc == RPayTblTimeTypeCalc::Hours)
        {
            return res;
        }

        for (currentDate = _startDate; currentDate <= _endDate ; currentDate ++)
        {
            res += RPayCalendarTable::hoursToDay(RPayCalendarDate::calcDefinedSeconds(_payCalendarId, currentDate, _payCalendarTimeCode)/#SecondsPerHour);
        }
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodWorkDaysGroup</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static real periodWorkDaysGroup(RPayCalendarId    _payCalendarId,
                                                  TransDate         _startDate,
                                                  TransDate         _endDate,
                                                  RpayTimeGroupCode _payTimeGroupCode)
    {
        real                res = 0;
        RPayTimeGroupMember rPayTimeGroupMember;
        ;
        while select PayCalendarTimeCode from  rPayTimeGroupMember
            where rPayTimeGroupMember.TimeGroup == _payTimeGroupCode
        {
            res += RPayCalendarTable::periodWorkDays(_payCalendarId,
                                                     _startDate,
                                                     _endDate,
                                                     rPayTimeGroupMember.PayCalendarTimeCode);
        }
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodWorkHours</Name>
				<Source><![CDATA[
        #timeConstants
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static real periodWorkHours(RPayCalendarId          _payCalendarId,
                                       TransDate               _startDate,
                                       TransDate               _endDate,
                                       RPayCalendarTimeCode    _payCalendarTimeCode)
    {
        real            res;
        TransDate       currentDate;
        ;
        for (currentDate = _startDate; currentDate <= _endDate ; currentDate ++)
        {
            res += RPayCalendarDate::calcDefinedSeconds(_payCalendarId, currentDate, _payCalendarTimeCode)/#SecondsPerHour;
        }
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodWorkHoursGroup</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static real periodWorkHoursGroup(RPayCalendarId    _payCalendarId,
                                                   TransDate         _startDate,
                                                   TransDate         _endDate,
                                                   RpayTimeGroupCode _payTimeGroupCode)
    {
        real                res;
        RPayTimeGroupMember rPayTimeGroupMember;
        ;
        while select PayCalendarTimeCode from rPayTimeGroupMember
            where rPayTimeGroupMember.TimeGroup == _payTimeGroupCode
        {
            res += RPayCalendarTable::periodWorkHours(_payCalendarId,
                                                      _startDate,
                                                      _endDate,
                                                      rPayTimeGroupMember.PayCalendarTimeCode);
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        private static TxtNotExist txtNotExist()
    {
        return "@RUP119";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>RPayHRMCommon</ConfigurationKey>
	<DeveloperDocumentation>@GLS105240</DeveloperDocumentation>
	<FormRef>RPayCalendarTable</FormRef>
	<Label>@GLS105240</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>CalendarId</TitleField1>
	<TitleField2>Name</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>CalendarIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Obsolete</Modules>
	<PrimaryIndex>CalendarIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>RHRMEmplTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>RHRMEmplTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RPayCalendarDate</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RPayCalendarDate</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalendarId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Calendar</Name>
			<Label>@SYS11839</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalendarId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DEL_BaseCalendar</Name>
			<Label>@SYS25929</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PayCalendarType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayTimeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Holiday</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConvertingFactor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>T13HoursPerDay</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalendarId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayCalendarId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConvertingFactor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayRateCode</ExtendedDataType>
			<Label>@RUP2409</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Holiday</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@RUP988</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CalendarName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PayCalendarType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RPayCalendarType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PayTimeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayTimeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>T13HoursPerDay</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HoursPerDay</ExtendedDataType>
			<Label>@RUP2691</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CalendarIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CalendarId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RPayRateTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RPayRateTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ConvertingFactor</Name>
					<SourceEDT>RPayRateCode</SourceEDT>
					<Field>ConvertingFactor</Field>
					<RelatedField>PayRate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PayRateIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RPayTimeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RPayTimeTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PayTimeId</Name>
					<SourceEDT>RPayTimeId</SourceEDT>
					<Field>PayTimeId</Field>
					<RelatedField>PayTimeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TimeIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>