<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvAdminCustomFields</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TrvAdminCustomFields extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        TrvAdminCustomFieldsCacheHelper::clearAdminCustomFieldsCacheValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();
        TrvAdminCustomFieldsCacheHelper::clearAdminCustomFieldsCacheValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHeaderTransactionField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the current row is a header field.
    /// </summary>
    /// <returns>
    /// true if the current row is a header field; otherwise, false.
    /// </returns>
    private boolean isHeaderTransactionField()
    {
        return this.RefTableId == tableNum(TrvExpTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the label for the field or display method that is available to the administrator for customization.
    /// </summary>
    /// <returns>
    ///     The label for the field or display method.
    /// </returns>
    public display LabelString label()
    {
        str retval = '';

        if (this.RefFieldId && this.RefTableId && this.MethodName == '')
            return fieldid2pname(this.RefTableId, this.RefFieldId);

        if (this.RefTableId && this.MethodName)
        {
            if (this.RefTableId == tablenum(TrvExpTrans))
            {
                switch (this.MethodName)
                {
                    case tablemethodstr(TrvExpTrans, editExchRate):
                        retval = "@SYS4955";
                        break;

                    case tablemethodstr(TrvExpTrans, editCity):
                        retval = "@SYS22249";
                        break;

                    case tablemethodstr(TrvExpTrans, editZipCode):
                        retval = "@SYS12463";
                        break;

                    case tablemethodstr(TrvExpTrans, calcTaxAmount):
                        retval = "@SYS123412";
                        break;
                }
            }
        }

        return retval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        TrvAdminCustomFields trvAdminCustomFields;

        super();

        // On changing the "Tax-related fields", change all appropriate entries
        if (
            this.MethodName &&
            this.RefTableId &&
            this.MethodName == tablemethodstr(TrvExpTrans, calcTaxAmount) &&
            this.RefTableId == tablenum(TrvExpTrans)
        )
        {
            ttsbegin;

            trvAdminCustomFields = TrvAdminCustomFields::find(tablenum(TrvExpTrans), fieldnum(TrvExpTrans, TaxIncluded), true);
            if (trvAdminCustomFields)
            {
                trvAdminCustomFields.Visibility = this.Visibility;
                trvAdminCustomFields.update();
            }

            trvAdminCustomFields = TrvAdminCustomFields::find(tablenum(TrvExpTrans), fieldnum(TrvExpTrans, CorrectedTaxAmount), true);
            if (trvAdminCustomFields)
            {
                trvAdminCustomFields.Visibility = this.Visibility;
                trvAdminCustomFields.update();
            }

            trvAdminCustomFields = TrvAdminCustomFields::find(tablenum(TrvExpTrans), fieldnum(TrvExpTrans, NetTransactionAmount), true);
            if (trvAdminCustomFields)
            {
                trvAdminCustomFields.Visibility = this.Visibility;
                trvAdminCustomFields.update();
            }

            trvAdminCustomFields = TrvAdminCustomFields::find(tablenum(TrvExpTrans), fieldnum(TrvExpTrans, TaxGroup), true);
            if (trvAdminCustomFields)
            {
                trvAdminCustomFields.Visibility = this.Visibility;
                trvAdminCustomFields.update();
            }

            trvAdminCustomFields = TrvAdminCustomFields::find(tablenum(TrvExpTrans), fieldnum(TrvExpTrans, TaxItemGroup), true);
            if (trvAdminCustomFields)
            {
                trvAdminCustomFields.Visibility = this.Visibility;
                trvAdminCustomFields.update();
            }

            ttscommit;
        }

        TrvAdminCustomFieldsCacheHelper::clearAdminCustomFieldsCacheValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCountryAndTaxFieldsVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the country or region field is set to display when the visibility of the tax related
    /// field is set to Display.
    /// </summary>
    /// <returns>
    /// true if the validation was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This methods throws a warning message if validation fails.
    /// </remarks>
    public boolean validateCountryAndTaxFieldsVisibility()
    {
        boolean isCountryRegionDoNotDisplay = false;

        if (this.MethodName)
        {
            switch (this.MethodName)
            {
                case tablemethodstr(TrvExpTrans, calcTaxAmount):
                    if (this.Visibility == TrvFieldVisibility::Display)
                    {
                        if (TrvAdminCustomFields::find(tablenum(TrvExpTrans), fieldnum(TrvExpTrans, CountryRegion), false).Visibility != TrvFieldVisibility::Display)
                        {
                            isCountryRegionDoNotDisplay = true;
                        }
                    }
                    break;
            }
        }

        if (isCountryRegionDoNotDisplay)
        {
            return checkFailed("@SYS345012");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = ret && this.validateCountryAndTaxFieldsVisibility();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAdminCustomizableDisplayMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container which contains the default field state for the admin customizable display methods.
    /// </summary>
    /// <returns>A container which contains the default field state for the admin customizable display methods.</returns>
    public static container defaultAdminCustomizableDisplayMethods()
    {
        return [[tablenum(TrvExpTrans), tablemethodstr(TrvExpTrans, editExchRate), TrvFieldVisibility::Display],
                [tablenum(TrvExpTrans), tablemethodstr(TrvExpTrans, editCity), TrvFieldVisibility::DoNotDisplay],
                [tablenum(TrvExpTrans), tablemethodstr(TrvExpTrans, editZipCode), TrvFieldVisibility::DoNotDisplay],
                [tablenum(TrvExpTrans), tablemethodstr(TrvExpTrans, calcTaxAmount), TrvFieldVisibility::DoNotDisplay]
               ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAdminCustomizableHeaderDataFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a container that contains the default field state for the admin customizable header fields.
    /// </summary>
    /// <returns>
    /// A container that contains the default field state for the admin customizable header fields.
    /// </returns>
    public static container defaultAdminCustomizableHeaderDataFields()
    {
        return [ [tablenum(TrvExpTable), fieldnum(TrvExpTable, Txt2), TrvFieldVisibility::Display],
                 [tablenum(TrvExpTable), fieldnum(TrvExpTable, Destination), TrvFieldVisibility::Display],
                 [tablenum(TrvExpTable), fieldnum(TrvExpTable, Txt1), TrvFieldVisibility::DoNotDisplay],
                 [tablenum(TrvExpTable), fieldnum(TrvExpTable, InterCompanyLE), TrvFieldVisibility::DoNotDisplay],
                 [tablenum(TrvExpTable), fieldnum(TrvExpTable, ProjId), TrvFieldVisibility::DoNotDisplay],
                 [tablenum(TrvExpTable), fieldnum(TrvExpTable, CustAccount), TrvFieldVisibility::DoNotDisplay],
                 [tablenum(TrvExpTable), fieldnum(TrvExpTable, VendAccount), TrvFieldVisibility::DoNotDisplay],
                 [tablenum(TrvExpTable), fieldnum(TrvExpTable, DefaultDimension), TrvFieldVisibility::DoNotDisplay],
                 [tablenum(TrvExpTable), fieldnum(TrvExpTable, PreApprovalNumber), TrvFieldVisibility::DoNotDisplay]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAdminCustomizableTransDataFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a container that contains the default field state for the admin customizable transaction data
    /// fields.
    /// </summary>
    /// <returns>
    /// A container that contains the default field state for the admin customizable transaction data
    /// fields.
    /// </returns>
    public static container defaultAdminCustomizableTransDataFields()
    {
        return [    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, ProjId), TrvFieldVisibility::Display],
                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, InterCompanyLE), TrvFieldVisibility::Display],
                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, MerchantId), TrvFieldVisibility::Display],
                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, DeduktionBreakfest), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, DeduktionLunch), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, DeduktionDinner), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, Deduktion), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, Description), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, TaxGroup), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, TaxItemGroup), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, AdditionalInformation), TrvFieldVisibility::Display],
                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, ReimburseAmt), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, InvoiceAmt), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, NetTransactionAmount), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, MileageFromAddress), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, MileageToAddress), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, BusinessPurpose), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, DefaultDimension), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, EntertainmentLocation), TrvFieldVisibility::DoNotDisplay],

                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, ReceiptRequired), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, Reason), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, CountryRegion), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, AddressState), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, TicketNumber), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, TicketClass), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, TicketUsed), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, TaxIncluded), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, CorrectedTaxAmount), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, BillIssuedTo), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, ReceiptNumber), TrvFieldVisibility::DoNotDisplay],

                    // hotel additional fields
                    [tablenum(TrvEnhancedHotelData), fieldnum(TrvEnhancedHotelData, CheckInDate), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedHotelData), fieldnum(TrvEnhancedHotelData, CheckOutDate), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedHotelData), fieldnum(TrvEnhancedHotelData, FolioNumber), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedHotelData), fieldnum(TrvEnhancedHotelData, GuestName), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedHotelData), fieldnum(TrvEnhancedHotelData, GuestNumber), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedHotelData), fieldnum(TrvEnhancedHotelData, NoShowIndicator), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedHotelData), fieldnum(TrvEnhancedHotelData, TotalRoomNights), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedHotelData), fieldnum(TrvEnhancedHotelData, TotalRoomRent), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedHotelData), fieldnum(TrvEnhancedHotelData, TotalTaxAmount), TrvFieldVisibility::DoNotDisplay],


                     // car rental additional fields
                    [tablenum(TrvEnhancedCarRentalData), fieldnum(TrvEnhancedCarRentalData, CarRentalCheckOutDate), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedCarRentalData), fieldnum(TrvEnhancedCarRentalData, CheckOutLocation), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedCarRentalData), fieldnum(TrvEnhancedCarRentalData, DailyRentalRate), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedCarRentalData), fieldnum(TrvEnhancedCarRentalData, DaysRented), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedCarRentalData), fieldnum(TrvEnhancedCarRentalData, MonthlyRentalRate), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedCarRentalData), fieldnum(TrvEnhancedCarRentalData, RegularMileageCharges), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedCarRentalData), fieldnum(TrvEnhancedCarRentalData, RenterName), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedCarRentalData), fieldnum(TrvEnhancedCarRentalData, ReservationNumber), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedCarRentalData), fieldnum(TrvEnhancedCarRentalData, ReturnDate), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedCarRentalData), fieldnum(TrvEnhancedCarRentalData, ReturnLocation), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedCarRentalData), fieldnum(TrvEnhancedCarRentalData, TotalMiles), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedCarRentalData), fieldnum(TrvEnhancedCarRentalData, VehicleClass), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedCarRentalData), fieldnum(TrvEnhancedCarRentalData, WeeklyRentalRate), TrvFieldVisibility::DoNotDisplay],

                    // flight additional fields
                    [tablenum(TrvEnhancedItineraryData), fieldnum(TrvEnhancedItineraryData, DepartureDate), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedItineraryData), fieldnum(TrvEnhancedItineraryData, DomesticIndicator), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedItineraryData), fieldnum(TrvEnhancedItineraryData, ExchangeTicketNumber), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedItineraryData), fieldnum(TrvEnhancedItineraryData, IssuingCarrier), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedItineraryData), fieldnum(TrvEnhancedItineraryData, NumberOfLegs), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedItineraryData), fieldnum(TrvEnhancedItineraryData, OriginalTicketNumber), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedItineraryData), fieldnum(TrvEnhancedItineraryData, PassengerName), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedItineraryData), fieldnum(TrvEnhancedItineraryData, TicketIssueDate), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedItineraryData), fieldnum(TrvEnhancedItineraryData, TravelAgencyCode), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedItineraryData), fieldnum(TrvEnhancedItineraryData, TravelAgencyInvoiceNumber), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedItineraryData), fieldnum(TrvEnhancedItineraryData, TravelAgencyName), TrvFieldVisibility::DoNotDisplay],
                    [tablenum(TrvEnhancedTripLegDetail), fieldnum(TrvEnhancedTripLegDetail, ServiceClass), TrvFieldVisibility::DoNotDisplay]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAdminTransDataSplitFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a container that contains the default field state for the split related fields.
    /// </summary>
    /// <returns>
    /// A container that contains the default field state for the admin customizable transaction data
    /// fields.
    /// </returns>
    public static container defaultAdminTransDataSplitFields()
    {
        return [    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, ProjId), TrvFieldVisibility::Display],
                    [tablenum(TrvExpTrans), fieldnum(TrvExpTrans, InterCompanyLE), TrvFieldVisibility::Display]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TrvAdminCustomFields</c> table [by using the specified table
    /// ID and method name.
    /// </summary>
    /// <param name="_tableId">
    /// The ID of the table.
    /// </param>
    /// <param name="_fieldId">
    /// The ID of the field.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_companyInfoRecId">
    /// A record ID that specifies the legal entity to which the <c>TrvAdminCustomFields</c> record belongs.
    /// </param>
    /// <returns>
    /// A record in the <c>TrvAdminCustomFields</c> table; otherwise, an empty record.
    /// </returns>
    public static TrvAdminCustomFields find(RefTableId _tableId, RefFieldId _fieldId, boolean _forupdate = false, CompanyInfoRecId _companyInfoRecId = CompanyInfo::current())
    {
        TrvAdminCustomFields trvAdminCustomFields;

        if (_fieldId && _tableId)
        {
            trvAdminCustomFields.selectForUpdate(_forupdate);
            select firstonly trvAdminCustomFields where
                trvAdminCustomFields.RefFieldId == _fieldId &&
                trvAdminCustomFields.RefTableId == _tableId &&
                trvAdminCustomFields.LegalEntity == _companyInfoRecId;
        }

        return trvAdminCustomFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDisplayMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>TrvAdminCustomFields</c> record for the specified table ID and method name.
    /// </summary>
    /// <param name="_tableId">
    /// The ID of the table.
    /// </param>
    /// <param name="_methodName">
    /// The name of the display or edit method.
    /// </param>
    /// <param name="_forupdate">
    /// Indicates whether the record is needed for update; optional.
    /// </param>
    /// <param name="_companyInfoRecId">
    /// A record ID that specifies the legal entity to which the <c>TrvAdminCustomFields</c> record belongs.
    /// </param>
    /// <returns>
    /// The <c>TrvAdminCustomFields</c> record.
    /// </returns>
    public static TrvAdminCustomFields findDisplayMethod(RefTableId _tableId, identifierName _methodName, boolean _forupdate = false, CompanyInfoRecId _companyInfoRecId = CompanyInfo::current())
    {
        TrvAdminCustomFields trvAdminCustomFields;

        if (_tableId && _methodName)
        {
            trvAdminCustomFields.selectForUpdate(_forupdate);
            select firstonly trvAdminCustomFields where
                trvAdminCustomFields.MethodName == _methodName &&
                trvAdminCustomFields.RefTableId == _tableId &&
                trvAdminCustomFields.LegalEntity == _companyInfoRecId;
        }

        return trvAdminCustomFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTableId</Name>
				<Source><![CDATA[
    private static TrvAdminCustomFields findTableId(RefTableId _tableId, CompanyInfoRecId _companyInfoRecId = CompanyInfo::current())
    {
        TrvAdminCustomFields trvAdminCustomFields;

        TrvAdminCustomFields::initialize();

        if (_tableId)
        {
            select trvAdminCustomFields where
                trvAdminCustomFields.RefTableId == _tableId &&
                trvAdminCustomFields.LegalEntity == _companyInfoRecId;
        }

        return trvAdminCustomFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TrvAdminCustomFields</c> records for the given legal entity.
    /// </summary>
    /// <param name="_companyInfoRecId">
    /// A record ID that specifies the legal entity to which the <c>TrvAdminCustomFields</c> record belongs.
    /// </param>
    /// <returns>
    /// The <c>TrvAdminCustomFields</c> records for the given legal entity.
    /// </returns>
    public static TrvAdminCustomFields getAllFields(CompanyInfoRecId _companyInfoRecId = CompanyInfo::current())
    {
        TrvAdminCustomFields trvAdminCustomFields;

        TrvAdminCustomFields::initialize();

        select trvAdminCustomFields
            where  trvAdminCustomFields.LegalEntity == _companyInfoRecId &&
                    ((trvAdminCustomFields.RefTableId == tableNum(TrvExpTable)) ||
                     (trvAdminCustomFields.RefTableId == tableNum(TrvExpTrans)) ||
                     (trvAdminCustomFields.RefTableId == tableNum(TrvEnhancedCarRentalData)) ||
                     (trvAdminCustomFields.RefTableId == tableNum(TrvEnhancedHotelData)) ||
                     (trvAdminCustomFields.RefTableId == tableNum(TrvEnhancedItineraryData)) ||
                     (trvAdminCustomFields.RefTableId == tableNum(TrvEnhancedTripLegDetail)));

        return trvAdminCustomFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TrvAdminCustomFields</c> records for the expense header table.
    /// </summary>
    /// <param name="_companyInfoRecId">
    /// A record ID that specifies the legal entity to which the <c>TrvAdminCustomFields</c> record belongs.
    /// </param>
    /// <returns>
    /// The <c>TrvAdminCustomFields</c> records for the expense header table.
    /// </returns>
    public static TrvAdminCustomFields getHeaderFields(CompanyInfoRecId _companyInfoRecId = CompanyInfo::current())
    {
        return TrvAdminCustomFields::findTableId(tablenum(TrvExpTable), _companyInfoRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets all the <c>TrvAdminCustomFields</c> records for the Expense transaction tables.
    /// </summary>
    /// <param name="_companyInfoRecId">
    ///     Specifies the legal entity to which the <c>TrvAdminCustomFields</c> record should belong to
    /// </param>
    /// <returns>
    ///     The <c>TrvAdminCustomFields</c> records for the Expense transaction tables.
    /// </returns>
    /// <remarks>
    ///     The Expense transaction tables include <c>TrvExpTrans</c>, <c>TrvEnhancedCarRentalData</c>, <c>TrvEnhancedHotelData</c>, <c>TrvEnhancedItineraryData</c>, <c>TrvEnhancedTripLegDetail</c>.
    /// </remarks>
    public static TrvAdminCustomFields getTransactionFields(CompanyInfoRecId _companyInfoRecId = CompanyInfo::current())
    {
        TrvAdminCustomFields trvAdminCustomFields;

        TrvAdminCustomFields::initialize();

        select trvAdminCustomFields
            where  trvAdminCustomFields.LegalEntity == _companyInfoRecId &&
                ((trvAdminCustomFields.RefTableId == tablenum(TrvExpTrans)) ||
                    (trvAdminCustomFields.RefTableId == tablenum(TrvEnhancedCarRentalData)) ||
                    (trvAdminCustomFields.RefTableId == tablenum(TrvEnhancedHotelData)) ||
                    (trvAdminCustomFields.RefTableId == tablenum(TrvEnhancedItineraryData)) ||
                    (trvAdminCustomFields.RefTableId == tablenum(TrvEnhancedTripLegDetail)));

        return trvAdminCustomFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionSplitFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///		Get split related transaction fields.
    /// </summary>
    /// <param name = "_companyInfoRecId">
    ///		Company info <c>RecId</c>.
	/// </param>
    /// <returns>
    ///		<c>TrvAdminCustomFields</c> table buffer containing split related fields.
	/// </returns>
    public static TrvAdminCustomFields getTransactionSplitFields(CompanyInfoRecId _companyInfoRecId = CompanyInfo::current())
    {
        TrvAdminCustomFields trvAdminCustomFields;

        TrvAdminCustomFields::initializeAdminFields(TrvAdminCustomFields::defaultAdminTransDataSplitFields(), _companyInfoRecId);

        select trvAdminCustomFields
            where trvAdminCustomFields.LegalEntity == _companyInfoRecId &&
                ((trvAdminCustomFields.RefTableId == tableNum(TrvExpTrans)) && 
                    (trvAdminCustomFields.RefFieldId == fieldNum(TrvExpTrans, ProjId)) ||
                    (trvAdminCustomFields.RefFieldId == fieldNum(TrvExpTrans, IntercompanyLE)));

        return trvAdminCustomFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the fields and display methods.
    /// </summary>
    /// <param name="_companyInfoRecId">
    /// A record ID that specifies the legal entity to which the <c>TrvAdminCustomFields</c> record belongs.
    /// </param>
    public static void initialize(CompanyInfoRecId _companyInfoRecId = CompanyInfo::current())
    {
        container defaultAdminCustomizableTransDataFields;
        container defaultAdminCustomizableHeaderDataFields;
        container defaultAdminCustomizableDisplayMethodFields;

        defaultAdminCustomizableHeaderDataFields    = TrvAdminCustomFields::defaultAdminCustomizableHeaderDataFields();
        defaultAdminCustomizableTransDataFields     = TrvAdminCustomFields::defaultAdminCustomizableTransDataFields();
        defaultAdminCustomizableDisplayMethodFields = TrvAdminCustomFields::defaultAdminCustomizableDisplayMethods();

        ttsbegin;

        if (!TrvAdminCustomFields::isHeaderDataAdminFieldsInitialized(conLen(defaultAdminCustomizableHeaderDataFields), _companyInfoRecId))
        {
            // Initialize the header fields
            TrvAdminCustomFields::initializeAdminFields(defaultAdminCustomizableHeaderDataFields, _companyInfoRecId);
        }

        if (!TrvAdminCustomFields::isTransDataAdminFieldsInitialized(conLen(defaultAdminCustomizableTransDataFields), _companyInfoRecId))
        {
            // Initialize the transaction fields
            TrvAdminCustomFields::initializeAdminFields(defaultAdminCustomizableTransDataFields, _companyInfoRecId);
        }

        if (!TrvAdminCustomFields::isDisplayMethodAdminFieldsInitialized(conLen(defaultAdminCustomizableDisplayMethodFields), _companyInfoRecId))
        {
            // Initialize display methods
            TrvAdminCustomFields::initializeAdminDisplayMethods(defaultAdminCustomizableDisplayMethodFields, _companyInfoRecId);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeAdminDisplayMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the admin customizable display methods described in the container.
    /// </summary>
    /// <param name="_adminDisplayMethodFields">A container which contains admin customizable display method state.</param>
    /// <param name="_companyInfoRecId">The Company to initialize for.</param>
    private static void initializeAdminDisplayMethods(container _adminDisplayMethodFields, CompanyInfoRecId _companyInfoRecId)
    {
        container adminCustomizableFieldInfo;
        int containerIndex;

        for (containerIndex = 1; containerIndex <= conLen(_adminDisplayMethodFields); containerIndex++)
        {
            adminCustomizableFieldInfo = conPeek(_adminDisplayMethodFields, containerIndex);

            Debug::assert(conLen(adminCustomizableFieldInfo) == 3);

            TrvAdminCustomFields::initializeDisplayMethod(conPeek(adminCustomizableFieldInfo, 1),
                                                    conPeek(adminCustomizableFieldInfo, 2),
                                                    conPeek(adminCustomizableFieldInfo, 3),
                                                    _companyInfoRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeAdminFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the admin customizable fields that are described in the specified container.
    /// </summary>
    /// <param name="adminFields">
    /// A container that contains the admin customizable field state.
    /// </param>
    /// <param name="_companyInfoRecId">
    /// The company for which to initialize.
    /// </param>
    private static void initializeAdminFields(container adminFields, CompanyInfoRecId _companyInfoRecId)
    {
        container adminCustomizableFieldInfo;
        int containerIndex;

        for (containerIndex = 1; containerIndex <= conLen(adminFields); containerIndex++)
        {
            adminCustomizableFieldInfo = conPeek(adminFields, containerIndex);

            Debug::assert(conLen(adminCustomizableFieldInfo) == 3);

            TrvAdminCustomFields::initializeField(conPeek(adminCustomizableFieldInfo, 1),
                                                    conPeek(adminCustomizableFieldInfo, 2),
                                                    conPeek(adminCustomizableFieldInfo, 3),
                                                    _companyInfoRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDisplayMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a display method in the <c>TrvAdminCustomFields</c> table.
    /// </summary>
    /// <param name="_tableId">
    /// The table to which the display method belongs.
    /// </param>
    /// <param name="_methodName">
    /// The name of the display method.
    /// </param>
    /// <param name="_trvFieldVisibility">
    /// The visibility of the display method in Enterprise Portal.
    /// </param>
    /// <param name="_companyInfoRecId">
    /// The legal entity in which the display method is to be initialized.
    /// </param>
    /// <param name="_showInForm">
    /// A Boolean value that indicates whether the display method should be shown in a display fields form.
    /// </param>
    public static void initializeDisplayMethod(RefTableId _tableId,
                                                 identifierName _methodName,
                                                 TrvFieldVisibility _trvFieldVisibility,
                                                 CompanyInfoRecId _companyInfoRecId = CompanyInfo::current(),
                                                 NoYes _showInForm = NoYes::Yes)
    {
        TrvAdminCustomFields trvAdminCustomFields;

        select firstOnly RecId from trvAdminCustomFields where
            trvAdminCustomFields.RefTableId == _tableId &&
            trvAdminCustomFields.MethodName == _methodName &&
            trvAdminCustomFields.LegalEntity == _companyInfoRecId;

        if (_tableId && _methodName && trvAdminCustomFields.RecId == 0)
        {
            ttsbegin;
            trvAdminCustomFields.MethodName = _methodName;
            trvAdminCustomFields.RefTableId = _tableId;
            trvAdminCustomFields.Visibility = _trvFieldVisibility;
            trvAdminCustomFields.ShowInForm = _showInForm;
            trvAdminCustomFields.LegalEntity = _companyInfoRecId;
            trvAdminCustomFields.insert();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a field in the <c>TrvAdminCustomFields</c> table.
    /// </summary>
    /// <param name="_tableId">
    /// The table to which the field belongs.
    /// </param>
    /// <param name="_fieldId">
    /// The ID of the field to initialize.
    /// </param>
    /// <param name="_trvFieldVisibility">
    /// The visibility of the field in Enterprise Portal.
    /// </param>
    /// <param name="_companyInfoRecId">
    /// The legal entity in which the field is to be initialized.
    /// </param>
    /// <param name="_showInForm">
    /// A Boolean value that indicates whether the field should be shown in a display fields form.
    /// </param>
    public static void initializeField(RefTableId _tableId,
                                        RefFieldId _fieldId,
                                        TrvFieldVisibility _trvFieldVisibility,
                                        CompanyInfoRecId _companyInfoRecId = CompanyInfo::current(),
                                        NoYes _showInForm = NoYes::Yes)
    {
        TrvAdminCustomFields trvAdminCustomFields;

        select firstOnly RecId from trvAdminCustomFields where
            trvAdminCustomFields.RefTableId == _tableId &&
            trvAdminCustomFields.RefFieldId == _fieldId &&
            trvAdminCustomFields.LegalEntity == _companyInfoRecId;

        if (_tableId && _fieldId && trvAdminCustomFields.RecId == 0)
        {
            ttsbegin;
            trvAdminCustomFields.RefFieldId = _fieldId;
            trvAdminCustomFields.RefTableId = _tableId;
            trvAdminCustomFields.Visibility = _trvFieldVisibility;
            trvAdminCustomFields.ShowInForm = _showInForm;
            trvAdminCustomFields.LegalEntity = _companyInfoRecId;

            trvAdminCustomFields.insert();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InsertOrUpdateSelectedFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the selected fields into the specified legal entity.
    /// </summary>
    /// <param name="_trvAdminCustomFields">
    /// A buffer that contains the fields to copy.
    /// </param>
    /// <param name="_selectedLegalEntity">
    /// The legal entity into which the selected fields are copied.
    /// </param>
    public static void InsertOrUpdateSelectedFields(TrvAdminCustomFields _trvAdminCustomFields, CompanyInfoRecId _selectedLegalEntity)
    {
        TrvAdminCustomFields    trvAdminCustomFieldsTarget;
        RefRecId    legalEntity = _trvAdminCustomFields.LegalEntity;

        //If we insert only header fields, the initialize method of table wont create
        //the default transfields when the parent form is opened from _selectedLegalEntity
        //so we create all default fields for _selectedLegalEntity first and then update them with current LE values
        TrvAdminCustomFields::initialize(_selectedLegalEntity);

        ttsbegin;

        trvAdminCustomFieldsTarget.skipDataMethods(true);

        delete_from trvAdminCustomFieldsTarget
            exists join _trvAdminCustomFields where
                trvAdminCustomFieldsTarget.RefTableId == _trvAdminCustomFields.RefTableId &&
                trvAdminCustomFieldsTarget.RefFieldId == _trvAdminCustomFields.RefFieldId  &&
                trvAdminCustomFieldsTarget.Visibility == _trvAdminCustomFields.Visibility &&
                trvAdminCustomFieldsTarget.ShowInForm == _trvAdminCustomFields.ShowInForm &&
                trvAdminCustomFieldsTarget.MethodName == _trvAdminCustomFields.MethodName &&
                trvAdminCustomFieldsTarget.LegalEntity == _selectedlegalEntity;

        insert_recordset trvAdminCustomFieldsTarget (RefTableId, RefFieldId, MethodName, ShowInForm, Visibility, LegalEntity)
            select RefTableId, RefFieldId, MethodName, ShowInForm, Visibility, _selectedLegalEntity
                from _trvAdminCustomFields where _trvAdminCustomFields.LegalEntity == legalEntity;

        ttscommit;

        TrvAdminCustomFieldsCacheHelper::clearAdminCustomFieldsCacheValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAdminFieldsInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if Admin customizable fields are initialized
    /// </summary>
    /// <param name="_expectedAdminCustomFieldsCount">
    ///     Specifies the expected number of admin custom fields in the table in case where admin custom fields are initialized
    /// </param>
    /// <param name="_companyInfoRecId">
    ///     Specifies the legal entity to check
    /// </param>
    /// <returns>
    ///     true if admin customizable fields are initialized; otherwise, false.
    /// </returns>
    public static boolean isAdminFieldsInitialized(int _expectedAdminCustomFieldsCount,CompanyInfoRecId _companyInfoRecId = CompanyInfo::current())
    {
        TrvAdminCustomFields trvAdminCustomFields;

        select count(RecId) from trvAdminCustomFields
            where trvAdminCustomFields.LegalEntity == _companyInfoRecId;

        return (trvAdminCustomFields.RecId == _expectedAdminCustomFieldsCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHeaderDataAdminFieldsInitialized</Name>
				<Source><![CDATA[
	/// <summary>
    /// Checks if header admin customizable fields are initialized.
    /// </summary>
    /// <param name = "_expectedAdminCustomFieldsCount">
    /// Specifies the expected number of header admin custom fields in the table in case where header admin custom fields are initialized.
	/// </param>
    /// <param name = "_companyInfoRecId">
    /// Specifies the legal entity to check.
	/// </param>
    /// <returns>
    ///  True if header admin customizable fields are initialized; otherwise, false.
	/// </returns>
    public static boolean isHeaderDataAdminFieldsInitialized(int _expectedAdminCustomFieldsCount, CompanyInfoRecId _companyInfoRecId = CompanyInfo::current())
    {
        TrvAdminCustomFields trvAdminCustomFields;

        select count(RecId) from trvAdminCustomFields
            where trvAdminCustomFields.LegalEntity == _companyInfoRecId
                && trvAdminCustomFields.RefTableId == tablenum(TrvExpTable);

        return (trvAdminCustomFields.RecId == _expectedAdminCustomFieldsCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransDataAdminFieldsInitialized</Name>
				<Source><![CDATA[
	/// <summary>
    /// Checks if transaction data admin customizable fields are initialized.
    /// </summary>
    /// <param name = "_expectedAdminCustomFieldsCount">
    /// Specifies the expected number of transaction data admin custom fields in the table in case where header admin custom fields are initialized.
	/// </param>
    /// <param name = "_companyInfoRecId">
    /// Specifies the legal entity to check.
	/// </param>
    /// <returns>
    /// True if transaction data admin customizable fields are initialized; otherwise, false.
	/// </returns>
    public static boolean isTransDataAdminFieldsInitialized(int _expectedAdminCustomFieldsCount, CompanyInfoRecId _companyInfoRecId = CompanyInfo::current())
    {
        TrvAdminCustomFields trvAdminCustomFields;

        select count(RecId) from trvAdminCustomFields
            where trvAdminCustomFields.LegalEntity == _companyInfoRecId
                && trvAdminCustomFields.MethodName == ''
                && (trvAdminCustomFields.RefTableId == tableNum(TrvExpTrans)
                    || trvAdminCustomFields.RefTableId == tableNum(TrvEnhancedHotelData)
                    || trvAdminCustomFields.RefTableId == tableNum(TrvEnhancedCarRentalData)
                    || trvAdminCustomFields.RefTableId == tableNum(TrvEnhancedItineraryData)
                    || trvAdminCustomFields.RefTableId == tableNum(TrvEnhancedTripLegDetail));

        return (trvAdminCustomFields.RecId == _expectedAdminCustomFieldsCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDisplayMethodAdminFieldsInitialized</Name>
				<Source><![CDATA[
	/// <summary>
    /// Checks if display method admin customizable fields are initialized.
    /// </summary>
    /// <param name = "_expectedAdminCustomFieldsCount">
    /// Specifies the expected number of display method admin custom fields in the table in case where header admin custom fields are initialized.
	/// </param>
    /// <param name = "_companyInfoRecId">
    /// Specifies the legal entity to check.
	/// </param>
    /// <returns>
    /// True if display method admin customizable fields are initialized; otherwise, false.
	/// </returns>
    public static boolean isDisplayMethodAdminFieldsInitialized(int _expectedAdminCustomFieldsCount, CompanyInfoRecId _companyInfoRecId = CompanyInfo::current())
    {
        TrvAdminCustomFields trvAdminCustomFields;

        select count(RecId) from trvAdminCustomFields
            where trvAdminCustomFields.LegalEntity == _companyInfoRecId
                && trvAdminCustomFields.MethodName != ''
                && trvAdminCustomFields.RefTableId == tablenum(TrvExpTrans);

        return (trvAdminCustomFields.RecId == _expectedAdminCustomFieldsCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllFieldsInTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the visibility of all fields and display methods in the <c>TrvAdminCustomFields</c> table.
    /// </summary>
    /// <param name="_tableId">
    ///     The ID of the table.
    /// </param>
    /// <param name="_value">
    ///     The <c>TrvFieldVisibility</c> value.
    /// </param>
    public static void setAllFieldsInTable(RefTableId _tableId, TrvFieldVisibility _value)
    {
        TrvAdminCustomFields trvAdminCustomFields;

        if (_tableId)
        {
            ttsbegin;

            trvAdminCustomFields.skipDataMethods(true);
            update_recordset trvAdminCustomFields
                setting Visibility = _value
                where trvAdminCustomFields.RefTableId == _tableId
                   && trvAdminCustomFields.LegalEntity == CompanyInfo::current();

            ttscommit;

            TrvAdminCustomFieldsCacheHelper::clearAdminCustomFieldsCacheValues();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllHeaderFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visibility state of all the header related fields.
    /// </summary>
    /// <param name="_value">
    /// The <c>TrvFieldVisibility</c> value.
    /// </param>
    public static void setAllHeaderFields(TrvFieldVisibility _value)
    {
        TrvAdminCustomFields::setAllFieldsInTable(tablenum(TrvExpTable), _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllTransactionFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visibility state of all the transaction related fields.
    /// </summary>
    /// <param name="_value">
    /// The <c>TrvFieldVisibility</c> value.
    /// </param>
    public static void setAllTransactionFields(TrvFieldVisibility _value)
    {
        TrvAdminCustomFields::setAllFieldsInTable(tablenum(TrvExpTrans), _value);
        TrvAdminCustomFields::setAllFieldsInTable(tablenum(TrvEnhancedCarRentalData), _value);
        TrvAdminCustomFields::setAllFieldsInTable(tablenum(TrvEnhancedHotelData), _value);
        TrvAdminCustomFields::setAllFieldsInTable(tablenum(TrvEnhancedItineraryData), _value);
        TrvAdminCustomFields::setAllFieldsInTable(tablenum(TrvEnhancedTripLegDetail), _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adminCustomizableDisplayMethodsSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a set of display method names available.
    /// </summary>
    /// <returns>
    /// Set of string type containing method names.
    /// </returns>
    public static Set adminCustomizableDisplayMethodsSet()
    {
        int         containerIndex;
        Set         adminCustomizableDisplayMethodsSet      = new Set(Types::String);
        container   adminDisplayMethodsContainer            = TrvAdminCustomFields::defaultAdminCustomizableDisplayMethods();
        container   adminCustomizableMethodInfo;

        for (containerIndex = 1; containerIndex <= conlen(adminDisplayMethodsContainer); containerIndex++)
        {
            adminCustomizableMethodInfo = conPeek(adminDisplayMethodsContainer, containerIndex);
            adminCustomizableDisplayMethodsSet.add(conPeek(adminCustomizableMethodInfo, 2));
        }

        return adminCustomizableDisplayMethodsSet;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Trv</ConfigurationKey>
	<DeveloperDocumentation>@SYS124869</DeveloperDocumentation>
	<Label>@SYS118146</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>Visibility</TitleField1>
	<TitleField2>RefTableId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>TrvAdminCustomFieldsIdx</ClusteredIndex>
	<Modules>Expense</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>TrvAdminCustomFieldsIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>label</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Visibility</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>label</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Visibility</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefFieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MethodName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS108846</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MethodName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RefFieldIdRelation</Name>
			<Label>@SYS130306</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefFieldId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TrvAdminCustomFields</Name>
			<Label>@SYS118146</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>label</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Visibility</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LegalEntity</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MethodName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IdentifierName</ExtendedDataType>
			<Label>@SYS330806</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefFieldId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefFieldId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ShowInForm</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Visibility</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TrvFieldVisibility</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TrvAdminCustomFieldsIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LegalEntity</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefFieldId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MethodName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RefTableIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CompanyInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LegalEntity</Name>
					<Field>LegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>