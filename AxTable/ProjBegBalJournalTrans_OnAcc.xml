<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBegBalJournalTrans_OnAcc</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjBegBalJournalTrans_OnAcc extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkFundingLimits</Name>
				<Source><![CDATA[
    private boolean checkFundingLimits()
    {
        ProjTrans   orginalProjTrans;
        ProjTrans   newProjTrans;
        boolean     retValue = true;

        if (this.orig())
        {
            // Revert the original reservations
            orginalProjTrans = ProjTrans::construct(this.orig());
            if (orginalProjTrans)
            {
                ProjFundingLimitTrackingManager::updateUsingProjTrans(orginalProjTrans, ProjFundingLimitTrackingAction::Release);
            }
        }

        // Check new reservatioons
        newProjTrans = ProjTrans::construct(this);
        if (!ProjFundingEngine::isAmountWithinFundingLimits(newProjTrans, newProjTrans.fundingSource(), newProjTrans.transTurnover()))
        {
            retValue = checkFailed("@SYS344241");
        }

        if (this.orig())
        {
            // Re-instate the original reservations
            if (orginalProjTrans)
            {
                ProjFundingLimitTrackingManager::updateUsingProjTrans(orginalProjTrans, ProjFundingLimitTrackingAction::Allocate);
            }
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjTransPosting</Name>
				<Source><![CDATA[
    protected ProjTransPosting createProjTransPosting(ProjLedgerPostingLine _line, ProjCostSales _costSales, DebitCredit _debitCredit)
    {
        ProjFundingSource       projFundingSource;
        ProjTransPosting        projTransPosting;
        ProjLedgerUpdate        projLedgerUpdate;

        projTransPosting.ProjTransDate      = this.ProjTransDate;

        projTransPosting.ProjId             = this.ProjId;
        projTransPosting.ProjType           = ProjTable::find(this.ProjId).Type;
        projTransPosting.ProjTransType      = ProjTransType::OnAccount;
        projTransPosting.TransId            = this.TransId;
        projTransPosting.TransactionOrigin  = ProjOrigin::BeginningBalance;
        projTransPosting.ProjFundingSource  = this.ProjFundingSource;

        projTransPosting.CostSales          = _costSales;

        if (_debitCredit == DebitCredit::Credit)
        {
            projTransPosting.AmountMst  =  -1 * this.ProjSalesAmount;
        }
        else
        {
            projTransPosting.AmountMst  = this.ProjSalesAmount;
        }

        projTransPosting.LedgerTransDate    = this.TransDate;
        projTransPosting.Voucher            = this.Voucher;
        projTransPosting.PostingType        = _line.parmLedgerPostingType();

        projTransPosting.LedgerOrigin       = ProjOrigin::BeginningBalance;

        projTransPosting.LedgerDimension = _line.parmLedgerAccount();

        projFundingSource = ProjFundingSource::find(this.ProjFundingSource);
        projTransPosting.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(this.DefaultDimension, projFundingSource.DefaultDimension);

        projLedgerUpdate = new ProjLedgerUpdate();
        projLedgerUpdate.setPaymentDateStatus(projTransPosting);

        return projTransPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ProjTrans   projTrans = ProjTrans::construct(this);
        ProjFundingLimitTrackingManager::updateUsingProjTrans(projTrans, ProjFundingLimitTrackingAction::Release);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates a voucher number.
    /// </summary>
    /// <param name="_journalNameId">
    ///    The journal ID associated with the selected record.
    /// </param>
    public void generateVoucher(JournalNameId _journalNameId)
    {
        NumberSeq                       numberSeq;
        NumberSequenceTable             numberSequenceTableVoucher  = ProjJournalName::find(_journalNameId).getNumberSequenceTable();
        ProjBegBalJournalTrans_OnAcc    projBegBalJournalTrans_OnAcc;

        select firstonly projBegBalJournalTrans_OnAcc where projBegBalJournalTrans_OnAcc.JournalId == this.JournalId;
        if (projBegBalJournalTrans_OnAcc)
        {
             this.Voucher = projBegBalJournalTrans_OnAcc.Voucher ;
        }
        else
        {
            numberSeq = NumberSeq::newGetVoucherFromCode(numberSequenceTableVoucher.NumberSequence);
            this.Voucher = numberSeq.voucher();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerPostingLines</Name>
				<Source><![CDATA[
    public ProjLedgerPostingLines getLedgerPostingLines()
    {
        ProjLedgerPostingLines  ret;
        ProjLedgerPostingLine   costDebit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine   costCredit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine   saleDebit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine   saleCredit = ProjLedgerPostingLine::construct(LedgerPostingType::None);

        LedgerPostingType               ledgerPostingType;
        LedgerDimensionDefaultAccount   ledgerAccount;
        ProjCategoryId                  projCategoryId;

        switch (ProjTable::find(this.ProjId).Type)
        {
            case ProjType::TimeMaterial:
            case ProjType::FixedPrice:
                if (ProjTable::find(this.ProjId).projGroup().InvoicePosting == ProjLedgerStatusOnAcc::Operations)
                {
                    costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                    costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                    saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                    saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::ProjOnAccount);
                }

                if (ProjTable::find(this.ProjId).projGroup().InvoicePosting == ProjLedgerStatusOnAcc::BalanceSheet)
                {
                    costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                    costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                    saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                    saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::ProjWIPInvoicedOnAccount);
                }

                break;
        }

        ret = new ProjLedgerPostingLines();

        ret.parmCostCredit(costCredit);
        ret.parmCostDebit(costDebit);
        ret.parmSaleCredit(saleCredit);
        ret.parmSaleDebit(saleDebit);

        if (!ret)
        {
            return ret;
        }

        if (ret.parmCostDebit())
        {
            ledgerPostingType = ret.parmCostDebit().parmLedgerPostingType();
            ledgerAccount = ProjPosting::getLedgerDimensionLedgerPostingType(ledgerPostingType, this.ProjId, projCategoryId, this.ProjFundingSource);
            ret.parmCostDebit().parmLedgerAccount(ledgerAccount);
        }

        if (ret.parmCostCredit())
        {
            ledgerPostingType = ret.parmCostCredit().parmLedgerPostingType();
            ledgerAccount = ProjPosting::getLedgerDimensionLedgerPostingType(ledgerPostingType, this.ProjId, projCategoryId, this.ProjFundingSource);
            ret.parmCostCredit().parmLedgerAccount(ledgerAccount);
        }

        if (ret.parmSaleDebit())
        {
            ledgerPostingType = ret.parmSaleDebit().parmLedgerPostingType();
            ledgerAccount = ProjPosting::getLedgerDimensionLedgerPostingType(ledgerPostingType, this.ProjId, projCategoryId, this.ProjFundingSource);
            ret.parmSaleDebit().parmLedgerAccount(ledgerAccount);
        }

        if (ret.parmSaleCredit())
        {
            ledgerPostingType = ret.parmSaleCredit().parmLedgerPostingType();
            ledgerAccount = ProjPosting::getLedgerDimensionLedgerPostingType(ledgerPostingType, this.ProjId, projCategoryId, this.ProjFundingSource);
            ret.parmSaleCredit().parmLedgerAccount(ledgerAccount);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBegBalJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the appropriate fields in a beginning balance journal line with the values of the
    ///    corresponding fields of the specified beginning balance journal line.
    /// </summary>
    /// <param name="_projBegBalJournalTrans_OnAcc">
    ///    The beginning balance journal line to use for initialization.
    /// </param>
    public void initFromBegBalJournalTrans(ProjBegBalJournalTrans_OnAcc _projBegBalJournalTrans_OnAcc)
    {
        this.JournalId              = _projBegBalJournalTrans_OnAcc.JournalId;
        this.LineNum                = _projBegBalJournalTrans_OnAcc.LineNum;
        this.Voucher                = _projBegBalJournalTrans_OnAcc.Voucher;

        this.ProjId                 = _projBegBalJournalTrans_OnAcc.ProjId;

        this.Txt                    = _projBegBalJournalTrans_OnAcc.Txt;

        this.ProjSalesAmount        = _projBegBalJournalTrans_OnAcc.ProjSalesAmount;
        this.SalesPrice             = _projBegBalJournalTrans_OnAcc.SalesPrice;

        this.CurrencyId             = _projBegBalJournalTrans_OnAcc.CurrencyId;
        this.ProjTaxGroupId         = _projBegBalJournalTrans_OnAcc.ProjTaxGroupId;
        this.ProjTaxItemGroupId     = _projBegBalJournalTrans_OnAcc.ProjTaxItemGroupId;

        this.TransDate              = _projBegBalJournalTrans_OnAcc.TransDate;
        this.ProjTransDate          = _projBegBalJournalTrans_OnAcc.ProjTransDate;

        this.TransId                = ProjParameters::newTransId();

        this.ProjFundingSource      = _projBegBalJournalTrans_OnAcc.ProjFundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ProjTrans   projTrans;

        if (this.LineNum == 0)
        {
            this.LineNum = ProjBegBalJournalTrans_OnAcc::nextLineNum(this.JournalId);
        }

        super();

        projTrans = ProjTrans::construct(this);
        ProjFundingLimitTrackingManager::updateUsingProjTrans(projTrans, ProjFundingLimitTrackingAction::Allocate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        ProjTable           projTable;
        ProjFundingSource   projFundingSource;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ProjBegBalJournalTrans_OnAcc, ProjTransDate) :
            case fieldNum(ProjBegBalJournalTrans_OnAcc, SalesPrice) :
            case fieldNum(ProjBegBalJournalTrans_OnAcc, CurrencyId) :
                this.setSalesAmount();
                break;

            case fieldNum(ProjBegBalJournalTrans_OnAcc, ProjId):
                projTable = ProjTable::find(this.ProjId);
                this.CurrencyId = projTable.currencyId();
                this.ProjFundingSource = 0;
                if (projTable.DefaultDimension != 0)
                {
                    this.DefaultDimension = projTable.DefaultDimension;
                }
                if (ProjFundingSource::numberOfFundingSources(projTable.ProjInvoiceProjId) == 1)
                {
                    select firstonly RecId from projFundingSource where projFundingSource.ContractId == projTable.ProjInvoiceProjId;
                    this.ProjFundingSource = projFundingSource.RecId;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjLedger</Name>
				<Source><![CDATA[
    private boolean postProjLedger()
    {
        ProjTrans               projTrans;
        ProjTransPosting        projTransPosting;
        ProjLedgerPostingLines  projLedgerPostingLines;
        ProjLedgerPostingLine   line;
        boolean                 ret = false;

        boolean                 postPL;
        boolean                 postWIP;
        boolean                 postPayroll;

        ProjJournalTable        projJournalTable = this.projJournalTable();

        postPL                  = projJournalTable.PostPL;
        postWIP                 = projJournalTable.PostWIP;
        postPayroll             = projJournalTable.PostPayroll;

        projLedgerPostingLines = this.getLedgerPostingLines();

        if (!projLedgerPostingLines)
        {
            return false;
        }

        if (!projLedgerPostingLines.parmCostDebit())
        {
            return false;
        }

        if (!projLedgerPostingLines.parmCostCredit())
        {
            return false;
        }

        if (!projLedgerPostingLines.parmSaleDebit())
        {
            return false;
        }

        if (!projLedgerPostingLines.parmSaleCredit())
        {
            return false;
        }

        if (projLedgerPostingLines.parmCostDebit().parmLedgerPostingType() == LedgerPostingType::None
            && projLedgerPostingLines.parmCostCredit().parmLedgerPostingType() == LedgerPostingType::None
            && projLedgerPostingLines.parmSaleDebit().parmLedgerPostingType() == LedgerPostingType::None
            && projLedgerPostingLines.parmSaleCredit().parmLedgerPostingType() == LedgerPostingType::None)
        {
            throw Global::error(strFmt("@SYS309460", enum2str(ProjTransType::OnAccount), this.ProjSalesAmount, this.ProjTransDate));
        }

        ttsbegin;
        //Cost debit
        line = projLedgerPostingLines.parmCostDebit();
        line.filter(postPL, postWIP, postPayroll);
        if (line.parmLedgerPostingType() != LedgerPostingType::None)
        {
            projTransPosting = this.createProjTransPosting(line, ProjCostSales::Cost, DebitCredit::Debit);
            projTransPosting.insert();
        }

        //Cost credit
        line = projLedgerPostingLines.parmCostCredit();
        line.filter(postPL, postWIP, postPayroll);
        if (line.parmLedgerPostingType() != LedgerPostingType::None)
        {
            projTransPosting = this.createProjTransPosting(line, ProjCostSales::Cost, DebitCredit::Credit);
            projTransPosting.insert();
        }

        //Sale debit
        line = projLedgerPostingLines.parmSaleDebit();
        line.filter(postPL, postWIP, postPayroll);
        if (line.parmLedgerPostingType() != LedgerPostingType::None)
        {
            projTransPosting = this.createProjTransPosting(line, ProjCostSales::Sales, DebitCredit::Debit);
            projTransPosting.insert();
        }

        //Sale credit
        line = projLedgerPostingLines.parmSaleCredit();
        line.filter(postPL, postWIP, postPayroll);
        if (line.parmLedgerPostingType() != LedgerPostingType::None)
        {
            projTransPosting = this.createProjTransPosting(line, ProjCostSales::Sales, DebitCredit::Credit);
            projTransPosting.insert();
        }

        projTrans = ProjTrans::construct(this);
        ProjFundingLimitTrackingManager::updateUsingProjTrans(projTrans, ProjFundingLimitTrackingAction::Release);
        ProjFundingEngine::updateFundingLimits(ProjTrans::construct(this), this.ProjFundingSource, this.ProjSalesAmount);

        ret = true;
        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates related project transactions.
    /// </summary>
    /// <returns>
    /// true if the posting completes successfully; otherwise, false.
    /// </returns>
    protected boolean postProjTransaction()
    {
        boolean ret = false;

        ttsbegin;

        this.postProjTransaction_ProjOnAccTrans();

        this.postProjTransaction_ProjOnAccTransSale();

        ret = true;

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransaction_ProjOnAccTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>ProjOnAccTrans</c> record.
    /// </summary>
    protected void postProjTransaction_ProjOnAccTrans()
    {
        ProjOnAccTrans projOnAccTrans = this.postProjTransaction_InitializeProjOnAccTrans();

        projOnAccTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransaction_InitializeProjOnAccTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProjOnAccTrans</c> record.
    /// </summary>
    /// <returns>
    /// An initialized <c>ProjOnAccTrans</c> table buffer.
    /// </returns>
    protected ProjOnAccTrans postProjTransaction_InitializeProjOnAccTrans()
    {
        ProjOnAccTrans projOnAccTrans;
        projOnAccTrans.TransDate            = this.ProjTransDate;
        projOnAccTrans.ProjID               = this.ProjId;

        projOnAccTrans.TransId              = this.TransId;
        projOnAccTrans.Description          = this.Txt;
        projOnAccTrans.TransactionOrigin    = ProjOrigin::BeginningBalance;
        projOnAccTrans.CurrencyId           = this.CurrencyId;
        projOnAccTrans.TaxGroupId           = this.ProjTaxGroupId;
        projOnAccTrans.TaxItemGroupId       = this.ProjTaxItemGroupId;

        // The data entry field does not allow for this field to be entered. It is assumed to be 1
        projOnAccTrans.Qty                  = 1;
        projOnAccTrans.DefaultDimension     = this.DefaultDimension;

        return projOnAccTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransaction_ProjOnAccTransSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>ProjOnAccTransSale</c> record.
    /// </summary>
    protected void postProjTransaction_ProjOnAccTransSale()
    {
        ProjOnAccTransSale projOnAccTransSale = this.postProjTransaction_InitializeProjOnAccTransSale();

        projOnAccTransSale.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransaction_InitializeProjOnAccTransSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProjOnAccTransSale</c> record.
    /// </summary>
    /// <returns>
    /// An initialized <c>ProjOnAccTransSale</c> table buffer.
    /// </returns>
    protected ProjOnAccTransSale postProjTransaction_InitializeProjOnAccTransSale()
    {
        ProjOnAccTransSale projOnAccTransSale;
        ProjFundingSource projFundingSource = ProjFundingSource::find(this.ProjFundingSource);

        projOnAccTransSale.TransId              = this.TransId;
        projOnAccTransSale.LedgerTransdate      = this.ProjTransDate;
        projOnAccTransSale.Amount               = this.SalesPrice;
        projOnAccTransSale.LedgerSalesAmount    = this.ProjSalesAmount;
        projOnAccTransSale.FundingSource        = this.ProjFundingSource;

        projOnAccTransSale.TransStatus   = ProjTransStatus::Invoiced;
        projOnAccTransSale.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(this.DefaultDimension, projFundingSource.DefaultDimension);

        return projOnAccTransSale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTrans</Name>
				<Source><![CDATA[
    public boolean postTrans()
    {
        boolean ret = false;

        ttsbegin;

        ret = this.postProjLedger();
        ret = ret && this.postProjTransaction();

        if (!ret)
        {
            throw Global::error(strFmt("@SYS309460", enum2str(ProjTransType::OnAccount), this.ProjSalesAmount, this.ProjTransDate));
        }
        else
        {
            ttscommit;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the project journal in which the journal line is contained.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether the record should be read for update; optional.
    /// </param>
    /// <returns>
    ///    The desired project journal.
    /// </returns>
    public ProjJournalTable projJournalTable(boolean _forUpdate = false)
    {
        return ProjJournalTable::find(this.JournalId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTrans</Name>
				<Source><![CDATA[
    public void reverseTrans()
    {
        this.SalesPrice = this.SalesPrice * -1;
        this.ProjSalesAmount = this.ProjSalesAmount * -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesAmount</Name>
				<Source><![CDATA[
    private void setSalesAmount()
    {
        if (this.ProjTransDate && this.SalesPrice && this.CurrencyId)
        {
            this.ProjSalesAmount = CurrencyExchangeHelper::amountCur2MST(this.SalesPrice, this.CurrencyId, this.exchRateSales(), this.ProjTransDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ProjTrans   projTransOriginal;
        ProjTrans   projTransNew;

        projTransOriginal = ProjTrans::construct(this.orig());
        ProjFundingLimitTrackingManager::updateUsingProjTrans(projTransOriginal, ProjFundingLimitTrackingAction::Release);

        super();

        projTransNew = ProjTrans::construct(this);
        ProjFundingLimitTrackingManager::updateUsingProjTrans(projTransNew, ProjFundingLimitTrackingAction::Allocate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum (ProjBegBalJournalTrans_OnAcc, ProjId):
                if (!ProjTable::isBegBalRuleDefined(this.ProjId))
                {
                    ret = checkFailed(strFmt("@SYS135526", ProjTable::find(this.ProjId).Stage()));
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret && this.ProjFundingSource && this.ProjId && ProjFundingSource::find(this.ProjFundingSource).ContractId != ProjTable::find(this.ProjId).ProjInvoiceProjId)
        {
            ret = checkFailed("@SYS152804");
        }

        // Validate limits
        ret = ret && this.checkFundingLimits();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified record exists in the <c>ProjBegBalJournalTrans_OnAcc</c> table; if
    ///    not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;

        if (!ProjBegBalJournalTrans_OnAcc::exist(_recId))
        {
            ret = checkFailed(strFmt(ProjBegBalJournalTrans_OnAcc::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>ProjBegBalJournalTrans_OnAcc</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record.
    /// </param>
    /// <returns>
    ///    true if the record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     projBegBalJournalTrans_OnAcc
                 where
                     projBegBalJournalTrans_OnAcc.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a specified record in the <c>ProjBegBalJournalTrans_OnAcc</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>ProjBegBalJournalTrans_OnAcc</c> table; otherwise, an empty record.
    /// </returns>
    public static ProjBegBalJournalTrans_OnAcc find(
        RecId _recId,
        boolean                 _forupdate = false)
    {
        ProjBegBalJournalTrans_OnAcc projBegBalJournalTrans_OnAcc;

        projBegBalJournalTrans_OnAcc.selectForUpdate(_forupdate);

        select firstonly
                projBegBalJournalTrans_OnAcc
            where
                projBegBalJournalTrans_OnAcc.RecId == _recId;

        return projBegBalJournalTrans_OnAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the message to use when a specific record in the <c>ProjBegBalJournalTrans_OnAcc</c> table
    ///    does not exist.
    /// </summary>
    /// <returns>
    ///    The message that indicates a record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the next line number for the journal transaction line.
    /// </summary>
    /// <returns>
    /// An integer that indicates the next line number for a new transaction line.
    /// </returns>
    public static LineNum nextLineNum(ProjJournalId _projJournalId)
    {
        ProjBegBalJournalTrans_OnAcc begBalJournalTrans;

        select maxof(LineNum) from begBalJournalTrans where begBalJournalTrans.JournalId == _projJournalId;

        return begBalJournalTrans.LineNum + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the exchange rate to use for the sales amounts that are reported by this transaction
    /// based on the transaction date.
    /// </summary>
    /// <param name="_transDate">
    /// The date to use to find the exchange rate. Defaults to the transaction date; optional.
    /// </param>
    /// <returns>
    /// The exchange rate to use for the sales amounts that are reported by this transaction.
    /// </returns>
    public ExchRate exchRateSales(TransDate   _transDate  = this.ProjTransDate)
    {
        if (ProjInvoiceCurrency::exist(ProjTable::find(this.ProjId).ProjInvoiceProjId, this.CurrencyId))
        {
            return ProjInvoiceCurrency::find(ProjTable::find(this.ProjId).ProjInvoiceProjId, this.CurrencyId).ExchRate;
        }

        return ExchangeRateHelper::exchRate(this.CurrencyId, _transDate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124922</DeveloperDocumentation>
	<Label>@SYS135521</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>ProjId</TitleField1>
	<TitleField2>CurrencyId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS80470</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimensions</Name>
			<Label>@SYS80374</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FundingSourceRefId</Name>
			<Label>@SYS128116</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjFundingSource</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncludeInFutureBilling</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTaxItemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeInFutureBilling</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS135525</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjJournalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjFundingSource</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS128116</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProjSalesAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesAmount</ExtendedDataType>
			<Label>@SYS10074</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxItemGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxItemGroup</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ProjTransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesPriceCost</ExtendedDataType>
			<Label>@SYS13754</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JournalTransDate</ExtendedDataType>
			<Label>@SYS16658</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Txt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransTxt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LineIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VoucherIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjFundingSourceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjFundingSource</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjBegBalJournalTrans_OnAcc</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyId</Name>
					<SourceEDT>ProjSalesCurrencyCode</SourceEDT>
					<Field>CurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FundingSource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjFundingSource</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjFundingSource</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjFundingSource_ProjBegBalJournalTrans_OnAcc</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjFundingSource</Name>
					<Field>ProjFundingSource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjJournalTable_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjBegBalJournalTrans_OnAcc</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalId</Name>
					<SourceEDT>ProjJournalId</SourceEDT>
					<Field>JournalId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>JournalIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>projJournalTxt</Name>
			<EntityRelationshipRole>@SYS124924</EntityRelationshipRole>
			<RelatedTable>ProjJournalTxt</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Txt</Name>
					<Field>Txt</Field>
					<RelatedField>Txt</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjBegBalJournalTrans_OnAcc</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjBegBalJournalTrans_OnAcc</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxGroupId</Name>
					<SourceEDT>ProjTaxGroup</SourceEDT>
					<Field>ProjTaxGroupId</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxItemGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjBegBalJournalTrans_OnAcc</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxItemGroupId</Name>
					<SourceEDT>ProjTaxItemGroup</SourceEDT>
					<Field>ProjTaxItemGroupId</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>