<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCSubComponentControl</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PCSubComponentControl extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    public void accept(PCModelVisitor _visitor)
    {
        PCExpressionConstraint expressionConstraint;

        expressionConstraint = this.getConstraint();

        _visitor.visitStart(this);

        if (expressionConstraint.RecId != 0)
        {
            expressionConstraint.accept(_visitor);
        }

        _visitor.visitEnd(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConstraint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the associated constraint if one exists.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value indicates whether to select for update; optional.
    /// </param>
    /// <returns>
    /// An expression constraint.
    /// </returns>
    public PCExpressionConstraint getConstraint(boolean _forUpdate = false)
    {
        PCSubComponentControlConstraint subComponentControlConstraint;
        PCExpressionConstraint          expressionConstraint;

        expressionConstraint.selectForUpdate(_forUpdate);

        select firstonly expressionConstraint
            join TableId from subComponentControlConstraint
                where   subComponentControlConstraint.ExpressionConstraint  == expressionConstraint.RecId
                &&      subComponentControlConstraint.SubComponentControl   == this.RecId;

        return expressionConstraint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>PCSubComponentControl</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (PCSubComponentControl::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PCSubComponentControl</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PCSubComponentControl</c> table; otherwise, an empty record.
    /// </returns>
    public static PCSubComponentControl find(RefRecId _recId, boolean _forupdate = false)
    {
        PCSubComponentControl record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySubComponentAndModifierType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record based on the record ID of a related sub component and a modifier type.
    /// </summary>
    /// <param name="_subComponentRecId">
    /// The record ID of a sub component.
    /// </param>
    /// <param name="_subComponentModifierType">
    /// A modifier type.
    /// </param>
    /// <param name="_selectForUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCSubComponentControl</c> table; otherwise, an empty record.
    /// </returns>
    public static PCSubComponentControl findBySubComponentAndModifierType(
        PCSubComponentRecId         _subComponentRecId,
        PCSubComponentModifierType  _subComponentModifierType,
        boolean                     _selectForUpdate = true)
    {
        PCSubComponentControl record;

        record.selectForUpdate(_selectForUpdate);

        select firstonly record
            where   record.SubComponent == _subComponentRecId
            &&      record.Modifier     == _subComponentModifierType;

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PC</ConfigurationKey>
	<DeveloperDocumentation>@GLS180184</DeveloperDocumentation>
	<Label>@GLS180183</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Modifier</TitleField1>
	<TitleField2>SubComponent</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>SubComponentModifierIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SubComponent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Modifier</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Modifier</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubComponent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SubComponent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Modifier</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Modifier</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>PCSubComponentModifierType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SubComponent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PCSubComponentRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SubComponentModifierIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SubComponent</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Modifier</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PCSubComponent</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PCSubComponent</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SubComponent</Name>
					<SourceEDT>PCSubComponentRecId</SourceEDT>
					<Field>SubComponent</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>