<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqIntercompanyPlanningGroupAllocKeys</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqIntercompanyPlanningGroupAllocKeys extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assignAllAllocationKeys</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns all allocation keys from the company associated to the planning group member.
    /// </summary>
    /// <param name="_groupMember">
    /// A planning group member to which the allocation keys are assigned.
    /// </param>
    public static void assignAllAllocationKeys(ReqInterCompanyPlanningGroupMember _groupMember)
    {
        ForecastItemAllocation                  itemAllocation;
        ReqIntercompanyPlanningGroupAllocKeys   assignmentBuf;
        CompanyInfo                             companyInfo;
        RefRecId                                memberRecId = _groupMember.RecId;

        if (!_groupMember.RecId)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        companyInfo = companyInfo::findRecId(_groupMember.LegalEntity);

        assignmentBuf.skipDeleteActions(true);
        assignmentBuf.skipDeleteMethod(true);

        changeCompany(companyInfo.dataarea)
        {
            insert_recordset assignmentBuf
            (
                ForecastItemAllocationId,
                ForecastItemAllocationIdDataAreaId,
                ReqIntercompanyPlanningGroupMember
            )
            select allocateId, dataAreaId, memberRecId from itemAllocation
                notexists join assignmentBuf
                    where itemAllocation.AllocateId == assignmentBuf.ForecastItemAllocationId
                        && itemAllocation.dataAreaId == assignmentBuf.ForecastItemAllocationIdDataAreaId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignAllocationKeys</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns a list of allocation keys to a planning group member.
    /// </summary>
    /// <param name="_recordList">
    /// A list of <c>ForecastItemAllocation</c> record buffers.
    /// </param>
    /// <param name="_groupMember">
    /// A planning group member to which the allocation keys are assigned.
    /// </param>
    public static void assignAllocationKeys(List _recordList, ReqInterCompanyPlanningGroupMember _groupMember)
    {
        ListEnumerator                          le;
        ForecastItemAllocation                  itemAllocation;
        ReqIntercompanyPlanningGroupAllocKeys   assignmentBuf;
        CompanyInfo                             companyInfo;

        if (!_recordList || !_groupMember.RecId)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        companyInfo = companyInfo::findRecId(_groupMember.LegalEntity);
        le          = _recordList.getEnumerator();

        ttsBegin;
        while (le.moveNext())
        {
            itemAllocation = le.current();

            assignmentBuf.clear();
            assignmentBuf.ForecastItemAllocationId              = itemAllocation.AllocateId;
            assignmentBuf.ForecastItemAllocationIdDataAreaId    = companyInfo.DataArea;
            assignmentBuf.ReqIntercompanyPlanningGroupMember    = _groupMember.RecId;
            assignmentBuf.insert();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unassignAllAllocationKeys</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unassigns all allocation keys from a planning group member.
    /// </summary>
    /// <param name="_groupMember">
    /// A planning group member for which the allocation keys are unassigned.
    /// </param>
    public static void unassignAllAllocationKeys(ReqInterCompanyPlanningGroupMember _groupMember)
    {
        ReqIntercompanyPlanningGroupAllocKeys   unAssignmentBuf;

        if (!_groupMember.RecId)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        ttsbegin;
        delete_from unAssignmentBuf
                where unAssignmentBuf.ReqIntercompanyPlanningGroupMember == _groupMember.RecId;
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unassignAllocationKeys</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unassigns a list of allocation keys from a planning group member.
    /// </summary>
    /// <param name="_recordList">
    /// A list of <c>ForecastItemAllocation</c> record buffers.
    /// </param>
    /// <param name="_groupMember">
    /// A planning group member from which the allocation keys are being unassigned.
    /// </param>
    public static void unassignAllocationKeys(List _recordList, ReqInterCompanyPlanningGroupMember _groupMember)
    {
        ListEnumerator                          le;
        ForecastItemAllocation                  itemAllocation;
        ReqIntercompanyPlanningGroupAllocKeys   unAssignmentBuf;
        CompanyInfo                             companyInfo;

        if (!_recordList || !_groupMember.RecId)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        companyInfo = companyInfo::findRecId(_groupMember.LegalEntity);
        le          = _recordList.getEnumerator();

        ttsBegin;
        while (le.moveNext())
        {
            itemAllocation = le.current();

            delete_from unAssignmentBuf
                where unAssignmentBuf.ReqIntercompanyPlanningGroupMember == _groupMember.RecId
                    && unAssignmentBuf.ForecastItemAllocationIdDataAreaId == companyInfo.DataArea
                    && unAssignmentBuf.ForecastItemAllocationId == itemAllocation.AllocateId;
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || ReqEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ReqDemandPlanning</ConfigurationKey>
	<DeveloperDocumentation>@DMP1066</DeveloperDocumentation>
	<Label>@DMP1067</Label>
	<TitleField1>ReqIntercompanyPlanningGroupMember</TitleField1>
	<TitleField2>ForecastItemAllocationId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>MasterPlanning</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ForecastItemAllocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForecastItemAllocationIdDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqIntercompanyPlanningGroupMember</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AllocationKey</Name>
			<Label>@SYS26222</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ForecastItemAllocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForecastItemAllocationIdDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PlanningGroup</Name>
			<Label>@SYS334932</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqIntercompanyPlanningGroupMember</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ForecastItemAllocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ForecastItemAllocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ForecastItemAllocationIdDataAreaId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SelectableDataArea</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReqIntercompanyPlanningGroupMember</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyPlanningGroupMemberRefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CoverIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ReqIntercompanyPlanningGroupMember</DataField>
					<Optional>Yes</Optional>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ForecastItemAllocationIdDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ForecastItemAllocationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AllocKey</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ForecastItemAllocationIdDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ForecastItemAllocationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ForecastItemAllocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ForecastItemAllocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ForecastItemAllocationIdDataAreaId</Name>
					<Field>ForecastItemAllocationIdDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ForecastItemAllocationId</Name>
					<Field>ForecastItemAllocationId</Field>
					<RelatedField>AllocateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AllocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReqIntercompanyPlanningGroupMember</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ReqIntercompanyPlanningGroupMember</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReqIntercompanyPlanningGroupMember</Name>
					<Field>ReqIntercompanyPlanningGroupMember</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>