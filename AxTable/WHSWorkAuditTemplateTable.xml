<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkAuditTemplateTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWorkAuditTemplateTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>evaluateWorkAuditBreak</Name>
				<Source><![CDATA[
    static boolean evaluateWorkAuditBreak(WHSWorkAuditTemplateId _workAuditTemplateId,
                                          WHSWorkTable _workTable,
                                          WHSMenuItemName _menuItem,
                                          WHSAuditBreakEvent _auditBreakEvent = WHSAuditBreakEvent::Completion,
                                          WHSWorkGroupingId _workGroupingId = '',
                                          WHSWorkId _pickPackTargetWorkId = '')
    {
        boolean ret;
        WHSWorkAuditTemplateTable workAuditTemplateTable = WHSWorkAuditTemplateTable::find(_workAuditTemplateId);

        if (workAuditTemplatetable.RecId != 0)
        {
            WHSWorkGrouping     workGrouping;
            WHSWorkTable        tmpWorkTable;
            WHSRFMenuItemTable  menuItemTable = WHSRFMenuItemTable::find(_menuItem);

            switch (workAuditTemplateTable.AuditBreakEvent)
            {
                case WHSAuditBreakEvent::Completion:
                    if (_auditBreakEvent == WHSAuditBreakEvent::Prior)
                    {
                        break;
                    }

                    if (menuItemTable.MenuItemDirectedBy == WHSMenuItemDirectedBy::SystemGrouping    ||
                        menuItemTable.MenuItemDirectedBy == WHSMenuItemDirectedBy::UserGrouping)
                    {
                        select firstOnly WorkId from workGrouping
                            order by LineNum desc
                            where workGrouping.WorkGroupingId    == _workGroupingId      &&
                                  workGrouping.WorkId            != _workTable.WorkId;

                        tmpWorkTable = WHSWorkTable::find(workGrouping.WorkId);

                        ret = _workTable.(workAuditTemplateTable.AuditBreakFieldNum) != tmpWorkTable.(workAuditTemplateTable.AuditBreakFieldNum)  ||
                              tmpWorkTable.RecId == 0;
                    }
                    else
                    {
                        ret = true;
                    }
                    break;

                case WHSAuditBreakEvent::Prior:
                    if (_auditBreakEvent != WHSAuditBreakEvent::Prior)
                    {
                        break;
                    }

                    if (menuItemTable.MenuItemDirectedBy == WHSMenuItemDirectedBy::SystemGrouping    ||
                        menuItemTable.MenuItemDirectedBy == WHSMenuItemDirectedBy::UserGrouping)
                    {
                        select firstOnly WorkId from workGrouping
                            order by LineNum desc
                            where workGrouping.WorkGroupingId    == _workGroupingId      &&
                                  workGrouping.WorkId            != _workTable.WorkId;

                        tmpWorkTable = WHSWorkTable::find(workGrouping.WorkId);

                        ret = _workTable.(workAuditTemplateTable.AuditBreakFieldNum) != tmpWorkTable.(workAuditTemplateTable.AuditBreakFieldNum)  ||
                              tmpWorkTable.RecId == 0;
                    }
                    else if (menuItemTable.PickPack)
                    {
                        select firstOnly tmpWorkTable
                            order by WorkInProcessUTCDateTime desc
                            where tmpWorkTable.CombinedWorkId    != ''                       &&
                                  tmpWorkTable.CombinedWorkId    == _pickPackTargetWorkId    &&
                                  tmpWorkTable.WorkId            != _workTable.WorkId;

                        if (tmpWorkTable.RecId == 0)
                        {
                            tmpWorkTable = WHSWorkTable::find(_pickPackTargetWorkId);
                        }

                        ret = _workTable.(workAuditTemplateTable.AuditBreakFieldNum) != tmpWorkTable.(workAuditTemplateTable.AuditBreakFieldNum)  ||
                              tmpWorkTable.RecId == 0;
                    }
                    else
                    {
                        ret = true;
                    }
                    break;

                    case WHSAuditBreakEvent::StatusChange:
                        if (_auditBreakEvent == WHSAuditBreakEvent::Prior)
                        {
                            break;
                        }

                        WHSWorkLine workLine;
                        if (workAuditTemplateTable.AuditBreakFieldNum == fieldNum(WHSWorkTable, ShipmentId))
                        {
                            WHSShipmentTable shipmentTable;
                            select firstOnly RecId from workLine
                                where workLine.WorkId == _workTable.WorkId
                                   && workLine.ShipmentId
                                exists join shipmentTable
                                    where shipmentTable.ShipmentId      == workLine.ShipmentId
                                       && shipmentTable.ShipmentStatus  != workAuditTemplateTable.EnumValue;

                            ret = !workLine.RecId;
                        }
                        else if (workAuditTemplateTable.AuditBreakFieldNum == fieldNum(WHSWorkTable, LoadId))
                        {
                            WHSLoadTable loadTable;
                            select firstOnly RecId from workLine
                                where workLine.WorkId == _workTable.WorkId
                                   && workLine.LoadId
                                exists join loadTable
                                    where loadTable.LoadId      == workLine.LoadId
                                       && loadTable.LoadStatus  != workAuditTemplateTable.EnumValue;

                            ret = !workLine.RecId;
                        }
                        break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks if a specific <c>whsWorkAuditTemplateTable</c> record exists.
	/// </summary>
	/// <param name="_templateId">
	/// Work audit template id of the record.
	/// </param>
	/// <returns>
	/// True if the record exists.
	/// </returns>
    public static boolean exist(WHSWorkAuditTemplateId _templateId)
    {
        return _templateId &&
            (select firstonly RecId from whsWorkAuditTemplateTable
                where whsWorkAuditTemplateTable.WorkAuditTemplateId == _templateId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds a specific <c>WHSWorkAuditTemplateTable</c> record with given parameters.
	/// </summary>
	/// <param name="_templateId">
	/// Work audit template id of the record.
	/// </param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    public static WHSWorkAuditTemplateTable find(WHSWorkAuditTemplateId _templateId, boolean _forupdate = false)
    {
        WHSWorkAuditTemplateTable   templateTable;

        if (_templateId)
        {
            templateTable.selectForUpdate(_forupdate);

            select firstonly templateTable
                where templateTable.WorkAuditTemplateId == _templateId;
        }

        return templateTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextTemplateLine</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds next template line which has closest higher sequence number.
	/// </summary>
	/// <param name="_tempId">
	/// Work audit template id of the line.
	/// </param>
	/// <param name="_seqNum">
	/// Sequence number of the line.
	/// </param>
	/// <returns>
	/// The next template line which has closest higher sequence number.
	/// </returns>
    static WHSWorkAuditTemplateLine getNextTemplateLine(WHSWorkAuditTemplateId _tempId, WHSAuditSeqNum _seqNum = 0)
    {
        WHsWorkAuditTemplateLine templateLine;

        if (_seqNum)
        {
            select firstOnly templateLine
                order By AuditSeqNum
                where templateLine.WorkAuditTemplateId   == _tempId &&
                      templateLine.AuditSeqNum            > _seqNum;
        }
        else
        {
            select firstOnly templateLine
                order By AuditSeqNum
                where templateLine.WorkAuditTemplateId == _tempId;
        }

        return templateLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4486</DeveloperDocumentation>
	<FormRef>WHSWorkAuditTemplate</FormRef>
	<Label>@WAX4189</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>WorkAuditTemplateId</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>WorkAuditTemplateIdIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>WorkAuditTemplateIdIdx</PrimaryIndex>
	<ReplacementKey>WorkAuditTemplateIdIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>WHSRFMenuItemTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>WHSRFMenuItemTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>WHSWorkAuditTemplateLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WHSWorkAuditTemplateLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AuditBreakField</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AuditBreakFieldNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AuditDisplayLabel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AuditBreakEvent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkAuditTemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkAuditBreakStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EnumValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkAuditTemplateId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AuditBreakField</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AuditBreakFieldNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AuditDisplayLabel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AuditBreakEvent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkAuditTemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkAuditBreakStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EnumValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AuditBreakEvent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSAuditBreakEvent</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AuditBreakField</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAuditBreakField</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AuditBreakFieldNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAuditBreakFieldNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AuditDisplayLabel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAuditDisplayLabel</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>EnumValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSEnumValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkAuditBreakStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkAuditBreakStatus</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkAuditTemplateId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkAuditTemplateId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WorkAuditTemplateIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkAuditTemplateId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>