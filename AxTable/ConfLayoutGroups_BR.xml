<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConfLayoutGroups_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ConfLayoutGroups_BR extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkRegisterType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if there is at least one line that do not have a Register type field
    /// </summary>
    /// <returns>
    /// True if there is no line without Register type field; false otherwise.
    /// </returns>
    /// <remarks>
    /// It does not enforce that the Layout group has lines and which type of lines. It depends only on the existing lines.
    /// Lines with two Register type fields should not be a false positive.
    /// </remarks>
    public boolean checkRegisterType()
    {
        #ConfMacros_BR

        ConfLayoutLines_BR  confLayoutLines;
        ConfLayoutFields_BR confLayoutFields;

        if (this.ConfRegisterType == NoYes::No)
        {
            return false;
        }

        select count(RecId) from confLayoutLines
            where   confLayoutLines.LayoutGroupId   == this.LayoutGroupId
        notexists join confLayoutFields
            where   confLayoutFields.LayoutGroupId  == confLayoutLines.LayoutGroupId
                &&  confLayoutFields.LayoutLineNum  == confLayoutLines.LayoutLineNum
                &&  confLayoutFields.FieldName      == #RegisterType;

        return (confLayoutLines.RecId == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>confLayoutGroupLookup</Name>
				<Source><![CDATA[
    static void confLayoutGroupLookup(
                    FormStringControl        _lookupCtrl,
                    BankFormat               _bankFormat
                                            )
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(ConfLayoutGroups_BR), _lookupCtrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(ConfLayoutGroups_BR));
        QueryBuildRange         queryBuildRangeGroupType;

        if ((_bankFormat == BankFormat::Export) || (_bankFormat == BankFormat::ReturnFormat))
        {
            queryBuildRangeGroupType = queryBuildDataSource.addRange(
                _bankFormat == BankFormat::ReturnFormat ? fieldNum(ConfLayoutGroups_BR, ConfLayoutImport) : fieldNum(ConfLayoutGroups_BR, ConfLayoutExport));
            queryBuildRangeGroupType.value(queryValue(NoYes::Yes));
        }

        sysTableLookup.addLookupfield(fieldNum(ConfLayoutGroups_BR, LayoutGroupId));
        sysTableLookup.addLookupfield(fieldNum(ConfLayoutGroups_BR, LayoutGroupName));
        sysTableLookup.addLookupfield(fieldNum(ConfLayoutGroups_BR, LayoutType));
        sysTableLookup.addLookupfield(fieldNum(ConfLayoutGroups_BR, ConfGroupId));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static ConfLayoutGroups_BR find(ConfLayoutGroupId_BR _groupId, boolean _forUpdate = false)
    {
        ConfLayoutGroups_BR layout;

        layout.selectForUpdate(_forUpdate);

        select firstonly layout
            where layout.LayoutGroupId == _groupId;

        return layout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ConfLayoutGroups_BR, DelimitedBy) :
                if (this.DelimitedBy != ConfDelimiters_BR::Other)
                {
                    this.DelimiterChars = '';
                }
                break;
            case fieldNum(ConfLayoutGroups_BR, LayoutType) :
                if (this.LayoutType != ConfLayoutTypesChoice_BR::Delimited)
                {
                    this.DelimitedBy   = ConfDelimiters_BR::Tab;
                    this.Textqualifier = ConfText_qualifier_BR::None;
                    this.DelimiterChars = '';
                }
                break;
        }

        this.setDelimitedByAlias();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDelimitedByAlias</Name>
				<Source><![CDATA[
    private void setDelimitedByAlias()
    {
        #ConfMacros_BR
        switch (this.DelimitedBy)
        {
            case ConfDelimiters_BR::Tab:
                this.ConfDelimitedByAlias = #Tab1;
                break;

            case ConfDelimiters_BR::Semicolon:
                this.ConfDelimitedByAlias = #SemiColon;
                break;

            case ConfDelimiters_BR::Comma:
                this.ConfDelimitedByAlias = #Comma;
                break;

            case ConfDelimiters_BR::Space:
                this.ConfDelimitedByAlias = #Space1;
                break;

            case ConfDelimiters_BR::Other:
                this.ConfDelimitedByAlias = this.DelimiterChars;
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>BR</CountryRegionCodes>
	<DeveloperDocumentation>@GLS64021</DeveloperDocumentation>
	<FormRef>ConfLayoutGroups_BR</FormRef>
	<Label>@GLS986</Label>
	<TitleField1>LayoutGroupId</TitleField1>
	<TitleField2>LayoutGroupName</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>LayoutGroupIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Bank</Modules>
	<PrimaryIndex>LayoutGroupIdx</PrimaryIndex>
	<ReplacementKey>LayoutGroupIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LayoutGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LayoutGroupName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LayoutType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FileStructure</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DelimitedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DelimiterChars</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Textqualifier</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LayoutGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LayoutGroupName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LayoutType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Textqualifier</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DelimitedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DelimiterChars</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FileStructure</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LayoutGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExtraLayoutInfo</Name>
			<Label>@GLS986</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FileStructure</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LayoutGroups</Name>
			<Label>@GLS986</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LayoutGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LayoutGroupName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LayoutType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Textqualifier</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DelimitedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DelimiterChars</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfLayoutExport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfLayoutImport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfRegisterType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConfDelimitedByAlias</Name>
			<AliasFor>DelimitedBy</AliasFor>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ConfDelimitedByAlias_BR</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConfGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfGroupId_BR</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ConfLayoutExport</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfLayoutExport_BR</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ConfLayoutImport</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfLayoutImport_BR</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ConfRegisterType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfRegisterType_BR</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DelimitedBy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfDelimited_BR</ExtendedDataType>
			<EnumType>ConfDelimiters_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DelimiterChars</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfDelimiterChars</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FileStructure</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>ConfFileStructure_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LayoutGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfLayoutGroupId_BR</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LayoutGroupName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LayoutType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfLayoutType_BR</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<EnumType>ConfLayoutTypesChoice_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Textqualifier</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfTextQualifier_BR</ExtendedDataType>
			<EnumType>ConfText_qualifier_BR</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LayoutGroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LayoutGroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>ConfTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ConfTable_BR</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ConfTable_BR</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ConfLayoutGroups_BR</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ConfGroupId</Name>
					<Field>ConfGroupId</Field>
					<RelatedField>ConfGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>EPRetOccCodes_BR</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>EPRetOccCodes_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LayoutGroupId</Name>
					<Field>LayoutGroupId</Field>
					<RelatedField>LayoutGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>