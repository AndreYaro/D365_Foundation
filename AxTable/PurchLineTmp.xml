<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchLineTmp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchLineTmp extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initforEPandCheckPurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills this table with the purchase orders associated with the selected payment.
    /// </summary>
    /// <param name="_vendTrans">
    /// A <c>VendTrans</c> record that is used as a range to get the purchase order for a payment.
    /// </param>
    public void initforEPandCheckPurchaseOrder(VendTransRefRecId _vendTrans)
    {
        VendTrans vendTrans;
        VendInvoiceJour vendInvJour;
        VendSettlement vendSettlement;
        PurchLineHistory localPurchLineHistory;
        PurchLine localPurchLine;
        PurchTableVersion purchTableVersion;

        delete_from this;
        
        TmpDataAreaRecIdFilter dataAreaFilter;

        insert_recordset dataAreaFilter (RefDataAreaId)
            select OffsetCompany from vendSettlement
                group by vendSettlement.OffsetCompany
                where vendSettlement.TransRecId == _vendTrans
                    && vendSettlement.CanBeReversed == NoYes::Yes;

        while select dataAreaFilter
        {
            DataAreaId company = dataAreaFilter.RefDataAreaId;

            changecompany(company)
            {
                this.clear();
                insert_recordset this (PurchId, LineNumber, ItemId, PurchQty, PurchPrice, DiscAmount, DiscPercent, LineAmount)
                select PurchId, LineNumber, ItemId, PurchQty, PurchPrice, DiscAmount, DiscPercent, LineAmount from localPurchLine
                    exists join purchTableVersion
                        where purchTableVersion.PurchId == localPurchLine.PurchId
                            && purchTableVersion.PurchIdDataAreaId == company
                            && purchTableVersion.IsArchived == NoYes::No
                    exists join vendInvJour
                        where vendInvJour.PurchId == purchTableVersion.PurchId
                    exists join vendTrans
                        where vendTrans.Invoice == vendInvJour.InvoiceId
                    exists join vendSettlement
                        where vendSettlement.TransRecId == _vendTrans
                            && vendSettlement.CanBeReversed == NoYes::Yes
                            && vendSettlement.OffsetTransVoucher == vendInvJour.LedgerVoucher
                            && vendSettlement.OffsetTransVoucher == vendTrans.Voucher;

                insert_recordset this (PurchId, LineNumber, ItemId, PurchQty, PurchPrice, DiscAmount, DiscPercent, LineAmount)
                select PurchId, LineNumber, ItemId, PurchQty, PurchPrice, DiscAmount, DiscPercent, LineAmount from localPurchLineHistory
                    exists join purchTableVersion
                        where purchTableVersion.PurchId == localPurchLineHistory.PurchId
                            && purchTableVersion.PurchIdDataAreaId == company
                            && purchTableVersion.IsArchived == NoYes::Yes
                            && localPurchLineHistory.ValidFrom <= purchTableVersion.VersionDateTime
                            && localPurchLineHistory.ValidTo >= purchTableVersion.VersionDateTime
                    exists join vendInvJour
                        where vendInvJour.PurchId == purchTableVersion.PurchId
                    exists join vendTrans
                        where vendTrans.Invoice == vendInvJour.InvoiceId
                    exists join vendSettlement
                        where vendSettlement.TransRecId == _vendTrans
                            && vendSettlement.CanBeReversed == NoYes::Yes
                            && vendSettlement.OffsetTransVoucher == vendInvJour.LedgerVoucher
                            && vendSettlement.OffsetTransVoucher == vendTrans.Voucher;

            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>initforPromissoryNotePurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills this table with the purchase orders associated with the selected payment.
    /// </summary>
    /// <param name="_vendTrans">
    /// A promissory note that is used as a range to get purchase order for a payment.
    /// </param>
    public void initforPromissoryNotePurchaseOrder(VendTrans _vendTrans)
    {
        VendPromissoryNoteInvoice vendPromissoryNoteInvoice;
        VendInvoiceJour vendInvJour;
        PurchLineHistory localPurchLineHistory;
        PurchLine localPurchLine;
        PurchTableVersion purchTableVersion;
        utcdatetime versionDateTime;

        delete_from this;

        while select crossCompany InvoiceVoucher from vendPromissoryNoteInvoice
            where vendPromissoryNoteInvoice.PromissoryNoteId == _vendTrans.PromissoryNoteID
                && vendPromissoryNoteInvoice.InvoiceAccountNum == _vendTrans.AccountNum
        {
            while select crossCompany purchTableVersion
                exists join vendInvJour
                    where vendInvJour.LedgerVoucher == vendPromissoryNoteInvoice.InvoiceVoucher
                        && vendInvJour.DataAreaId == _vendTrans.LastSettleCompany
                        && vendInvJour.InvoiceAccount == _vendTrans.AccountNum
                        && purchTableVersion.PurchIdDataAreaId == _vendTrans.LastSettleCompany
                        && purchTableVersion.PurchId == vendInvJour.PurchId
            {
                if (purchTableVersion.IsArchived)
                {
                    versionDateTime = purchTableVersion.VersionDateTime;
                    while select crossCompany validTimeState(versionDateTime) PurchId, LineNumber, ItemId, PurchQty, PurchPrice, DiscAmount, DiscPercent, LineAmount from localPurchLineHistory
                        where localPurchLineHistory.PurchId == purchTableVersion.PurchId
                            && localPurchLineHistory.DataAreaId == purchTableVersion.PurchIdDataAreaId
                    {
                        this.insertPurchLine(localPurchLineHistory);
                    }
                }
                else
                {
                    while select crossCompany PurchId, LineNumber, ItemId, PurchQty, PurchPrice, DiscAmount, DiscPercent, LineAmount from localPurchLine
                        where localPurchLine.PurchId == purchTableVersion.PurchId
                            && localPurchLine.DataAreaId == purchTableVersion.PurchIdDataAreaId
                    {
                        this.insertPurchLine(localPurchLineHistory);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLineMap</Name>
				<Source><![CDATA[
    protected void initFromPurchLineMap(PurchLineMap _purchLine)
    {
        this.PurchId = _purchLine.PurchId;
        this.LineNumber = _purchLine.LineNumber;
        this.ItemId = _purchLine.ItemId;
        this.PurchQty = _purchLine.PurchQty;
        this.PurchPrice = _purchLine.PurchPrice;
        this.DiscAmount = _purchLine.DiscAmount;
        this.DiscPercent = _purchLine.DiscPercent;
        this.LineAmount = _purchLine.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPurchLine</Name>
				<Source><![CDATA[
    protected void insertPurchLine(PurchLineMap _purchLine)
    {
        this.initFromPurchLineMap(_purchLine);
        this.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@SYS9664</Label>
	<TableType>TempDB</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DiscAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PurchDiscAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DiscPercent</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PurchDiscPercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ItemIdSmall</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmount</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PurchLineAmount</ExtendedDataType>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LineNumber</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TradeLineNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PurchIdBase</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PurchPrice</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PurchPrice</ExtendedDataType>
			<Label>@SYS11770</Label>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PurchQty</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PurchOrderedQty</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>