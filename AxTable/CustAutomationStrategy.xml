<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAutomationStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustAutomationStrategy extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findByLine</Name>
				<Source><![CDATA[
    internal static CustAutomationStrategy findByLine(CustAutomationStrategyLine _line, NoYes _forUpdate = NoYes::No)
    {
        CustAutomationStrategy strategy;

        strategy.selectForUpdate(_forUpdate);

        select firstonly strategy
            where strategy.RecId == _line.ParentRecId;

        return strategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    internal static CustAutomationStrategy findByName(CustAutomationStrategyName _name, NoYes _forUpdate = NoYes::No)
    {
        CustAutomationStrategy strategy;

        strategy.selectForUpdate(_forUpdate);

        select firstonly strategy
            where strategy.StrategyName == _name;

        return strategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>swapHierarchyUp</Name>
				<Source><![CDATA[
    internal void swapHierarchyUp()
    {
        CustAutomationStrategy strategy;

        select firstonly forupdate * from strategy
        order by Hierarchy desc
            where strategy.Hierarchy < this.Hierarchy;

        if (strategy.RecId)
        {
            this.swapHierarchyValues(strategy);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>swapHierarchyDown</Name>
				<Source><![CDATA[
    internal void swapHierarchyDown()
    {
        CustAutomationStrategy strategy;

        select firstonly forupdate * from strategy
        order by Hierarchy asc
            where strategy.Hierarchy > this.Hierarchy;

        if (strategy.RecId)
        {
            this.swapHierarchyValues(strategy);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>swapHierarchyValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Given a <c>CustAutomationStrategy</c> swap the hierarchy values with the current <c>CustAutomationStrategy</c>.
    /// </summary>
    /// <param name = "_strategy">The <c>CustAutomationStrategy</c> to swap hierarchy values with.</param>
    private void swapHierarchyValues(CustAutomationStrategy _strategy)
    {
        CustAutomationHierarchy tmpHierarchy = _strategy.Hierarchy;
        _strategy.Hierarchy = this.Hierarchy;
        this.Hierarchy = tmpHierarchy;

        ttsbegin;

        _strategy.selectForUpdate(NoYes::Yes);
        this.selectForUpdate(NoYes::Yes);

        _strategy.update();
        this.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    [Hookable(False)]
    public boolean validateDelete()
    {
        boolean ret = super();
    
        if (this.doesScheduledCriteriaExistForStrategy())
        {
            ret = checkFailed("@CustAutomation:DeleteProcessForStrategy");
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesScheduledCriteriaExistForStrategy</Name>
				<Source><![CDATA[
    private NoYes doesScheduledCriteriaExistForStrategy()
    {
        CustAutomationCriteria criteria;
        ProcessScheduleOccurrence scheduleOccurrence;
        utcdatetime currentDate = DateTimeUtil::getSystemDateTime();

        select firstonly RecId from criteria
            where criteria.StrategyName == this.StrategyName
            join scheduleOccurrence
                where scheduleOccurrence.RecId == criteria.ProcessScheduleOccurrence
                    && scheduleOccurrence.ScheduledDateTime >= currentDate;

        return criteria.RecId ? NoYes::Yes : NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderStrategyHierarchy</Name>
				<Source><![CDATA[
    private void orderStrategyHierarchy()
    {
        CustAutomationStrategy strategy;

        update_recordset strategy
            setting Hierarchy = strategy.Hierarchy - 1
            where strategy.Hierarchy > this.Hierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    [Hookable(False)]
    public void delete()
    {
        super();

        this.orderStrategyHierarchy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (this.PoolId == "" || this.StrategyName == "")
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    [Hookable(False)]
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case (fieldNum(CustAutomationStrategy, CustExclude)) :
                this.resetExcludeFromProcessChange();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetExcludeFromProcessChange</Name>
				<Source><![CDATA[
    private void resetExcludeFromProcessChange()
    {
        if (this.CustExclude == CustAutomationExcludeBy::None)
        {
            this.CustExcludeAmount = 0;
        }  
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void insert()
    {
        #OCCRetryCount
        CustAutomationStrategy strategy;

        try
        {
            this.setHierarchy();
            super();
        }

        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::UpdateConflictNotRecovered;
            }
            else
            {
                this.setHierarchy();
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.setHierarchy();

        this.CustExclude = CustAutomationExcludeBy::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHierarchy</Name>
				<Source><![CDATA[
    private void setHierarchy()
    {
        CustAutomationStrategy strategy;

        select maxof(Hierarchy) from strategy;
        this.Hierarchy = strategy.Hierarchy + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesPredunningExistForStrategy</Name>
				<Source><![CDATA[
    internal static boolean doesPredunningExistForStrategy(RefRecId _parentRecId)
    {
        CustAutomationStrategyLine strategyLine;

        select firstonly RecId from strategyLine
            where strategyLine.ParentRecId == _parentRecId
                && strategyLine.Predunning == NoYes::Yes;

        return strategyLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesPredictionExistForStrategy</Name>
				<Source><![CDATA[
    internal static boolean doesPredictionExistForStrategy(RefRecId _recId)
    {
        CustAutomationStrategy strategy;

        select firstonly RecId from strategy
            where strategy.RecId == _recId
                && strategy.Prediction == NoYes::Yes;

        return strategy.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@CustAutomation:CustAutomationStrategyDocumentation</DeveloperDocumentation>
	<FormRef>CustAutomationStrategySetup</FormRef>
	<Label>@CustAutomation:Strategy</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>StrategyName</TitleField1>
	<TitleField2>PoolId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>StrategyName</ClusteredIndex>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>StrategyName</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>CustAutomationStrategy</Relation>
			<Table>CustAutomationStrategyLine</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction3</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>CustAutomationStrategy</Relation>
			<Table>CustAutomationManualAssignment</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction4</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>CustAutomationStrategy</Relation>
			<Table>CustAutomationInvoice</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StrategyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PoolId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Hierarchy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Prediction</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StrategyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PoolId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Hierarchy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StrategyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Hierarchy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StrategyName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustAutomationStrategyName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PoolId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCollectionsPoolId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CustExclude</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustAutomationExcludeBy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CustExcludeAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>QuietDays</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustAutomationDays</ExtendedDataType>
			<Label>@CustAutomation:QuietDays</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Hierarchy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustAutomationHierarchy</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Prediction</Name>
			<AssetClassification>Customer content</AssetClassification>
			<Label>@CustAutomation:UsePrediction</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>StrategyName</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>StrategyName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CollectionPool</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>PoolId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustCollectionsPool</Name>
			<RelatedTable>CustCollectionsPool</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PoolId</Name>
					<Field>PoolId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>