<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustSettlementTransactionPriority</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustSettlementTransactionPriority extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>decreasePriority</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Decreases the priority of the selected transaction type.
    /// </summary>
    /// <returns>
    ///    true if the priority is decreased; otherwise, false.
    /// </returns>
    private boolean decreasePriority()
    {
        boolean                             ret;
        int                                 newPriority;
        CustSettlementTransactionPriority   swappedTransaction;
        #Define.MinPriority(0)
        if (this.Priority == #MinPriority)
        {
            ret = false;
        }
        else
        {
            newPriority = this.Priority - 1;
            // get the transaction to be swapped by its priority
            swappedTransaction = CustSettlementTransactionPriority::findByPriority(newPriority, true);

            // update the records
            this.swapPriority(this, swappedTransaction, newPriority);
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>increasePriority</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Increases the priority of the selected transaction type.
    /// </summary>
    /// <returns>
    ///    true if the priority is increased; otherwise, false.
    /// </returns>
    private boolean increasePriority()
    {
        boolean                           ret;
        int                               newPriority;
        CustSettlementTransactionPriority swappedTransaction;
        
        int maxPriority = CustSettlementTransactionPriority::getMaxCustSettlementTransPriority();

        if (this.Priority == maxPriority)
        {
            ret = false;
        }
        else
        {
            newPriority = this.Priority + 1;
            // get the transaction to be swapped by its priority
            swappedTransaction = CustSettlementTransactionPriority::findByPriority(newPriority, true);

            // update the records
            this.swapPriority(this, swappedTransaction, newPriority);
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>swapPriority</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Swaps the priorities of the records.
    /// </summary>
    /// <param name="_currCustSettlementTransactionPriority">
    ///    A <c>CustSettlementTransactionPriority</c> type value that indicates the record.
    /// </param>
    /// <param name="_newCustSettlementTransactionPriority">
    ///    A <c>CustSettlementTransactionPriority</c> value that indicates the records with to swap the
    ///    priority.
    /// </param>
    /// <param name="_newPriority">
    ///    A <c>CustSettlementTransPriority</c> value that indicates the new priority to assign.
    /// </param>
    private void swapPriority(CustSettlementTransactionPriority _currCustSettlementTransactionPriority,
    CustSettlementTransactionPriority _newCustSettlementTransactionPriority,
    CustSettlementTransPriority _newPriority)
    {
        ttsbegin;
        _newCustSettlementTransactionPriority.Priority = _currCustSettlementTransactionPriority.Priority;
        _currCustSettlementTransactionPriority.Priority = _newPriority;

        _newCustSettlementTransactionPriority.update();
        _currCustSettlementTransactionPriority.selectForUpdate(true);
        _currCustSettlementTransactionPriority.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
        public static boolean checkExist(recId _recId)
    {
        boolean ret = true;

        if (!CustSettlementTransactionPriority::exist(_recId))
        {
            ret = checkFailed(strfmt(CustSettlementTransactionPriority::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates records that represent each transaction type and its default priority.
    /// </summary>
    /// <remarks>
    ///    This method is intended only to be called by internal code.
    /// </remarks>
    public static void createData()
    {
        CustSettlementTransactionPriority custSettlementTransactionPriority;

        select firstonly custSettlementTransactionPriority;
        // if table is empty inserts record
        if (custSettlementTransactionPriority.RecId == 0)
        {
            ttsbegin;
            CustSettlementTransactionPriority::createDataAll();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates records taht represent each transaction type and its default priority.
    /// </summary>
    protected static void createDataAll()
    {
        CustSettlementTransactionPriority::createDataInvoices();
        CustSettlementTransactionPriority::createDataInterestNotes();
        CustSettlementTransactionPriority::createDataCollectionLetters();
        CustSettlementTransactionPriority::createDataPaymentFee();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataInvoices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates invoices data.
    /// </summary>
    private static void createDataInvoices()
    {
        CustSettlementTransactionPriority custSettlementTransactionPriority;

        custSettlementTransactionPriority.clear();
        custSettlementTransactionPriority.TransactionType = CustSettlementTrans::Invoices;
        custSettlementTransactionPriority.Priority        = CustSettlementTransactionPriority::custSettlementTransPriority().lookup(CustSettlementTrans::Invoices);
        custSettlementTransactionPriority.Company         = curext();
        custSettlementTransactionPriority.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataInterestNotes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates interest notes data.
    /// </summary>
    private static void createDataInterestNotes()
    {
        CustSettlementTransactionPriority custSettlementTransactionPriority;

        custSettlementTransactionPriority.clear();
        custSettlementTransactionPriority.TransactionType = CustSettlementTrans::InterestNotes;
        custSettlementTransactionPriority.Priority        = CustSettlementTransactionPriority::custSettlementTransPriority().lookup(CustSettlementTrans::InterestNotes);
        custSettlementTransactionPriority.Company         = curext();
        custSettlementTransactionPriority.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataCollectionLetters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates collection letters data.
    /// </summary>
    private static void createDataCollectionLetters()
    {
        CustSettlementTransactionPriority custSettlementTransactionPriority;

        custSettlementTransactionPriority.clear();
        custSettlementTransactionPriority.TransactionType = CustSettlementTrans::CollectionLetters;
        custSettlementTransactionPriority.Company         = curext();
        custSettlementTransactionPriority.Priority        = CustSettlementTransactionPriority::custSettlementTransPriority().lookup(CustSettlementTrans::CollectionLetters);
        custSettlementTransactionPriority.insert();
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataPaymentFee</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates payment fee data.
    /// </summary>
    private static void createDataPaymentFee()
    {
        CustSettlementTransactionPriority custSettlementTransactionPriority;

        custSettlementTransactionPriority.clear();
        custSettlementTransactionPriority.TransactionType = CustSettlementTrans::PaymentFee;
        custSettlementTransactionPriority.Priority        = CustSettlementTransactionPriority::custSettlementTransPriority().lookup(CustSettlementTrans::PaymentFee);
        custSettlementTransactionPriority.Company         = curext();
        custSettlementTransactionPriority.insert();
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxCustSettlementTransPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// The maximum <c>CustSettlementTrans</c> priority.
    /// </summary>
    /// <returns>
    /// The maximum priority.
    /// </returns>
    protected static int getMaxCustSettlementTransPriority()
    {

        Map custSettlementTransPriority = CustSettlementTransactionPriority::custSettlementTransPriority();

        int maxPriority;
        int currentPriority;
        MapIterator mi = new MapIterator(custSettlementTransPriority);
        while (mi.more())
        {
            currentPriority = mi.value();
            if (currentPriority > maxPriority)
            {
                maxPriority = currentPriority;
            }

            mi.next();
        }

        return maxPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custSettlementTransPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// The customer settlement transaction priority.
    /// </summary>
    /// <returns>
    /// The relationship between the <c>CustSettlementTrans</c> enumeration and the priority.
    /// </returns>
    protected static Map custSettlementTransPriority()
    {
        Map custSettlementTransPriority = new Map(Types::Enum, Types::Integer);

        custSettlementTransPriority.insert(CustSettlementTrans::PaymentFee, 0);
        custSettlementTransPriority.insert(CustSettlementTrans::CollectionLetters, 1);
        custSettlementTransPriority.insert(CustSettlementTrans::InterestNotes, 2);
        custSettlementTransPriority.insert(CustSettlementTrans::Invoices, 3);

        return custSettlementTransPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>CustSettlementTransactionPriority</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>CustSettlementPriority</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     custSettlementTransactionPriority
                 where
                     custSettlementTransactionPriority.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CustSettlementTransactionPriority</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>CustSettlementTransactionPriority</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record of the <c>CustSettlementTransactionPriority</c> table; otherwise, an empty buffer.
    /// </returns>
    public static CustSettlementTransactionPriority find(
    recId _recId,
    boolean _forupdate = false,
    ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustSettlementTransactionPriority custSettlementTransactionPriority;

        custSettlementTransactionPriority.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custSettlementTransactionPriority.concurrencyModel(_concurrencyModel);
        }

        select firstonly custSettlementTransactionPriority
            where custSettlementTransactionPriority.RecId == _recId;

        return custSettlementTransactionPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPriority</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CustSettlementTransactionPriority</c> table by the attribute
    ///    priority.
    /// </summary>
    /// <param name="_custSettlementTransPriority">
    ///    A <c>CustSettlementTransPriority</c> type value that indicates the transaction priority to be found.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record of the <c>CustSettlementTransactionPriority</c> table; otherwise, an empty buffer.
    /// </returns>
    public static CustSettlementTransactionPriority findByPriority(
    CustSettlementTransPriority _custSettlementTransPriority,
    boolean _forUpdate = false)
    {
        CustSettlementTransactionPriority custSettlementTransactionPriority;

        custSettlementTransactionPriority.selectForUpdate(_forUpdate);

        select firstonly custSettlementTransactionPriority
            where custSettlementTransactionPriority.Priority == _custSettlementTransPriority;

        return custSettlementTransactionPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTransType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CustSettlementTransactionPriority</c> table by the transaction
    ///    type.
    /// </summary>
    /// <param name="_custSettlementTransType">
    ///    A <c>CustSettlementTransType</c> type value that indicates the transaction type to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record of the <c>CustSettlementTransactionPriority</c> table; otherwise, an empty buffer.
    /// </returns>
    public static CustSettlementTransactionPriority findByTransType(
    CustSettlementTransType _custSettlementTransType,
    boolean _forUpdate = false)
    {
        CustSettlementTransactionPriority custSettlementTransactionPriority;

        custSettlementTransactionPriority.selectForUpdate(_forUpdate);

        select firstonly custSettlementTransactionPriority
            where custSettlementTransactionPriority.TransactionType == _custSettlementTransType;

        return custSettlementTransactionPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderedTransactionTypes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the list of transaction types in the order of their current priority.
    /// </summary>
    /// <param name="_isAscending">
    ///    A Boolean value that indicates whether to retrieve the records in ascending order of priority;
    ///    optional.
    /// </param>
    /// <returns>
    ///    A list that contains transaction types.
    /// </returns>
    /// <remarks>
    ///    This method also creates records in <c>CustSettlementTransactionPriority</c> table if it is empty.
    /// </remarks>
    public static List getOrderedTransactionTypes(boolean _isAscending = false)
    {
        CustSettlementTransactionPriority   custSettlementTransactionPriority;
        List                                listTransTypes = new List(Types::Enum);
        Query                               query = new Query();
        QueryBuildDataSource                qbds;
        QueryRun                            qRun;

        select firstonly custSettlementTransactionPriority;

        // if table is empty insert records
        if (custSettlementTransactionPriority.RecId == 0)
        {
            CustSettlementTransactionPriority::createData();
        }
        query.addDataSource(tablenum(CustSettlementTransactionPriority));
        qbds = query.dataSourceNo(1);

        if (_isAscending)
        {
            qbds.addSortField(fieldnum(CustSettlementTransactionPriority, Priority), SortOrder::Ascending);
        }
        else
        {
            qbds.addSortField(fieldnum(CustSettlementTransactionPriority, Priority), SortOrder::Descending);
        }
        qRun = new QueryRun(query);
        while (qRun.next())
        {
            custSettlementTransactionPriority = qRun.get(tablenum(CustSettlementTransactionPriority)) as CustSettlementTransactionPriority;
            listTransTypes.addEnd(custSettlementTransactionPriority.TransactionType);
        }
        return listTransTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "@SYS102195";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePriorityOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the priority of the given transaction type.
    /// </summary>
    /// <param name="_custSettlementTransType">
    ///    A <c>CustSettlementTransType</c> type value that indicates the transaction type.
    /// </param>
    /// <param name="_isIncrease">
    ///    A Boolean value that indicates whether to increase or decrease the priority.
    /// </param>
    /// <returns>
    ///    true if the transaction type priority is updated; otherwise, false.
    /// </returns>
    public static boolean updatePriorityOrder(CustSettlementTransType _custSettlementTransType,
    boolean _isIncrease)
    {
        boolean                             ret;
        CustSettlementTransactionPriority   custSettlementTransactionPriority;

        // Get the table buffer of the transaction to update
        custSettlementTransactionPriority = CustSettlementTransactionPriority::findByTransType(_custSettlementTransType, true);
        Debug::assert(custSettlementTransactionPriority.RecId != 0);
        // Call the required method
        if (_isIncrease)
        {
            ret = custSettlementTransactionPriority.increasePriority();
        }
        else
        {
            ret = custSettlementTransactionPriority.decreasePriority();
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS326950</DeveloperDocumentation>
	<Label>@SYS131721</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>TransactionType</TitleField1>
	<TitleField2>Priority</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>Bank</Modules>
	<ReplacementKey>SettlementPriorityIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Priority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Company</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Priority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SettlementPriority</Name>
			<Label>@SYS131721</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Priority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Company</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Company</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Priority</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustSettlementTransPriority</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransactionType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustSettlementTransType</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<EnumType>CustSettlementTrans</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SettlementPriorityIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Company</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransactionType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Priority</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>DataArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Company</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<Field>Company</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>