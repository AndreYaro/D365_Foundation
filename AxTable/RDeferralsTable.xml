<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RDeferralsTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RDeferralsTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        // Check to see if the associated dimension attribute value has been used
        // in a way that would prevent deletion.
        if (!DimensionValidation::canDeleteEntityValue(this))
        {
            throw error(strFmt("@SYS134392", this.DeferralsId));
        }

        ttsbegin;
        // Update the associated dimension attribute value.
        DimensionAttributeValue::updateForEntityValueDelete(this);

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPurchBookVATOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if Purchase Book of VAT operations exists.
    /// </summary>
    /// <returns>True, if book exists, othervise false.</returns>
    public boolean existPurchBookVATOperations()
    {
        boolean                             ret;
        PurchBookVATProcessLogTransOper_RU  purchBookVATProcessLogTransOper;
        RDeferralsTrans                     rDeferralsTrans;
        RDeferralsBookId                    defaultBookId = RDeferralsParameters::find().DeferralsBookIdDefault;

        select firstonly RecId from purchBookVATProcessLogTransOper
            where purchBookVATProcessLogTransOper.CanceledRefRecId == 0
        join RecId from rDeferralsTrans
            where rDeferralsTrans.DeferralsBookId == defaultBookId    &&
                  rDeferralsTrans.DeferralsId     == this.DeferralsId &&
                  rDeferralsTrans.RecId           == purchBookVATProcessLogTransOper.rDeferralsTransRecId;

        ret = purchBookVATProcessLogTransOper.RecId != 0;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.AcquisitionDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        super();

        this.vatRefundingMethod = RDeferralsParameters::find().vatRefundingMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets table label.
    /// </summary>
    /// <returns><c>TableLabel</c> object.</returns>
    display TableLabel tableLabel()
    {
        DictTable   dictTable = new DictTable(this.RefTableId);

        return this.RefTableId ? dictTable.label() : "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(RDeferralsTable, vatRefundingMethod):

                ret = RDeferralsParameters::checkVATRefundingMethod(this.vatRefundingMethod);

                if (this.existPurchBookVATOperations())
                {
                    ret = checkFailed("@GLS114362");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(RDeferralsId  _deferralsId)
    {
        if (_deferralsId && !(select rDeferralsTable
                                  where rDeferralsTable.DeferralsId == _deferralsId).RecId)
        {
            return checkFailed(strFmt("@GLS103796", _deferralsId));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if record exists.
    /// </summary>
    /// <param name = "_deferralsId"><c>RDeferralsId</c> object.</param>
    /// <returns>True, if deferral exists, othervise false.</returns>
    public static boolean exist(RDeferralsId  _deferralsId)
    {
        return _deferralsId && (select RecId from rDeferralsTable
                                    where rDeferralsTable.DeferralsId == _deferralsId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existVatRefundingMethodProportial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if deferral exists with Proportional VAT refunding method.
    /// </summary>
    /// <returns>True, if deferral exists with Proportional VAT refunding method, othervise false.</returns>
    public static boolean existVatRefundingMethodProportial()
    {
        return (select firstonly RecId from rDeferralsTable
                    where rDeferralsTable.vatRefundingMethod == RDeferralsVATRefundingMethod::Proportional).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds record.
    /// </summary>
    /// <param name = "_deferralsId"> Deferral ID.</param>
    /// <param name = "_forUpdate">Selection mode.</param>
    /// <returns><c>RDeferralsTable</c> object.</returns>
    public static RDeferralsTable find(RDeferralsId  _deferralsId,
                                              boolean       _forUpdate = false)
    {
        RDeferralsTable deferralsTable;

        if (_deferralsId)
        {
            deferralsTable.selectForUpdate(_forUpdate);

            select firstonly deferralsTable
                where deferralsTable.DeferralsId == _deferralsId;
        }
        return deferralsTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record of <c>RDeferralsTable</c> table for the specified ledger dimension.
    /// </summary>
    /// <param name="_ledgerDimension">
    /// The ledger dimension which is used to find deferrals record.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing <c>RDeferralsTable</c> table.
    /// </returns>
    public static RDeferralsTable findByLedgerDimension(
        LedgerDimensionAccount  _ledgerDimension,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        RDeferralsTable                     deferralsTable;
        DimensionAttributeValueCombination  ledgerDimension;

        deferralsTable.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            deferralsTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly deferralsTable
            join RecId from ledgerDimension where
                ledgerDimension.DisplayValue == deferralsTable.DeferralsId &&
                ledgerDimension.RecId == _ledgerDimension;

        return deferralsTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromSource</Name>
				<Source><![CDATA[
    public static RDeferralsTable findFromSource(
        RefTableId     _refTableId,
        RefRecId       _refRecId,
        RefRecId       _profitTableRecId,
        boolean        _forUpdate = false)
    {
        RDeferralsTable deferralsTable;

        if (_profitTableRecId || _refRecId || _refTableId)
        {
            deferralsTable.selectForUpdate(_forUpdate);
            select firstonly deferralsTable index SourceProfitIdx
                where deferralsTable.rTax25ProfitTable == _profitTableRecId
                   && deferralsTable.RefTableId        == _refTableId
                   && deferralsTable.RefRecId          == _refRecId;
        }

        return deferralsTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDeferralsNumberSeq</Name>
				<Source><![CDATA[
    public static NumberSeq initDeferralsNumberSeq()
    {
        return NumberSeq::newGetNum(RDeferralsParameters::numRefDeferralsId(), true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDeferrals</Name>
				<Source><![CDATA[
    public static void lookupDeferrals(FormControl _ctrl,
                                              TransDate   _runDate,
                                              CompanyId   _company = curext())
    {
        Args                      args;
        FormRun                   formRun;
        FormRun                   ctrlFormRun;
        FormDataSource            ctrl_ds;

        SegmentedEntryControl     segmentedEntryControl;
        FormStringControl         formStringControl;

        if (!_company)
        {
            _company = curext();
        }

        if (SysDataArea::checkAccessible(_company))
        {
            changecompany(_company)
            {
                args = new Args();
                args.name(formStr(RDeferralsLookup));
                args.caller(_ctrl);
                ctrlFormRun = _ctrl.formRun();
                ctrl_ds     = ctrlFormRun.dataSource();

                args.parm(queryValue(_runDate));

                formRun = classfactory.formRunClass(args);

                formRun.init();

                if (_ctrl is FormStringControl)
                {
                    formStringControl = _ctrl as FormStringControl;
                    formStringControl.performFormLookup(formRun);
                }
                else if (_ctrl is SegmentedEntryControl)
                {
                    segmentedEntryControl = _ctrl as SegmentedEntryControl;
                    segmentedEntryControl.performFormLookup(formRun);
                }
                else
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusIsClosed</Name>
				<Source><![CDATA[
    public static boolean statusIsClosed(RDeferralsId _deferralsId)
    {
        return (select firstonly RecId from rDeferralsBook
                     where rDeferralsBook.DeferralsId == _deferralsId).RecId != 0 &&
               (select firstonly RecId from rDeferralsBook
                     where rDeferralsBook.DeferralsId == _deferralsId &&
                           rDeferralsBook.Status      == RDeferralsStatus::Open ||
                           rDeferralsBook.Status      == RDeferralsStatus::Scheduled).RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    public void renamePrimaryKey()
    {
        DimensionValueRenameV2 rename = DimensionValueRenameV2::construct(this, this.orig());
        rename.syncRenamedValuePreSuper();

        super();

        rename.syncRenamedValuePostSuper();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@GLS103666</DeveloperDocumentation>
	<FormRef>RDeferralsTable</FormRef>
	<Label>@GLS103666</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>DeferralsId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RDeferralsIdx</ClusteredIndex>
	<Modules>RDeferrals</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>RDeferralsIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>RDeferralsBook</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>RDeferralsBook</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeferralsId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeferralsId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CreatingDeferral</Name>
			<Label>@GLS104009</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AcquisitionDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeferralsId</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeferralsId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS7576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Notes</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS15217</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>tableLabel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RTax25ProfitTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VATRefundingMethod</Name>
			<Label>@GLS114357</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VATRefundingMethod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AcquisitionDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RDeferralsAcquisitionDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeferralsId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RDeferralsId</ExtendedDataType>
			<GroupPrompt>@SYS13864</GroupPrompt>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RDeferralsName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Notes</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Notes</ExtendedDataType>
			<Label>@SYS53151</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RTax25ProfitTable</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RTax25ProfitTableRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VATRefundingMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RDeferralsVATRefundingMethod</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RDeferralsIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>DeferralsId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceProfitIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RTax25ProfitTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>RAssetStandards</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RAssetStandards</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetStandards</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RDeferralsTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RAssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RAssetTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RDeferralsTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RPayAverageEarnValue</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RPayAverageEarnValue</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RTax25ProfitTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RTax25ProfitTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RTax25ProfitTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RDeferralsTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RTax25ProfitTable</Name>
					<Field>RTax25ProfitTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>