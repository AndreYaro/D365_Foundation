<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgPayStatConfig</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JmgPayStatConfig extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates transactions for the <c>JmgPayStatConfig</c> record.
    /// </summary>
    /// <remarks>
    /// Transactions are created in the <c>JmgPayStatTrans</c> table.
    /// </remarks>
    void createTrans()
    {
        JmgPayEvents    jmgPayEvents;
        JmgPayStatTrans jmgPayStatTrans;
        date            periodStart;
        date            periodEnd;
        ProjPeriodLine  projPeriodLine;
        JmgPayStatTrans adjustments;

        // Save adjustments:
        // BP: All pay stat records should be included, when saving adjustments.
        adjustments.setTmp();

        while select jmgPayStatTrans
            where jmgPayStatTrans.PayStatGroupId    == this.PayStatGroupId  &&
                  jmgPayStatTrans.PayCostType       == this.PayCostType     &&
                  jmgPayStatTrans.Adjustment       != 0
        {
            adjustments.data(jmgPayStatTrans);
            adjustments.insert();
        }

        this.deleteTrans();

        // Find first period to start from
        projPeriodLine = ProjPeriodLine::findFirstPeriodLine(this.ProjPeriodId);

        if (!projPeriodLine)
        {
            return;
        }
        periodStart     = projPeriodLine.PeriodFrom;
        periodEnd       = projPeriodLine.PeriodTo;

        ttsbegin;
        while (periodStart <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
        {
            Set  handledWorkers = new Set(Types::Int64);

            while select sum(PaySeconds), Worker from jmgPayEvents
                group by Worker
                where jmgPayEvents.PayCostType == this.PayCostType &&
                      jmgPayEvents.ProfileDate >= periodStart      &&
                      jmgPayEvents.ProfileDate <= periodEnd
            {
                select sum(Adjustment)
                    from adjustments
                    where adjustments.Worker        == jmgPayEvents.Worker  &&
                          adjustments.FromDate      >= periodStart          &&
                          adjustments.FromDate      <= periodEnd;

                jmgPayStatTrans.clear();
                jmgPayStatTrans.PaySeconds      = jmgPayEvents.PaySeconds;
                jmgPayStatTrans.Adjustment      = adjustments.Adjustment;
                jmgPayStatTrans.Worker          = jmgPayEvents.Worker;
                jmgPayStatTrans.PayCostType     = this.PayCostType;
                jmgPayStatTrans.PayStatGroupId  = this.PayStatGroupId;
                jmgPayStatTrans.FromDate        = periodStart;
                jmgPayStatTrans.ToDate          = periodEnd;
                jmgPayStatTrans.insert();

                handledWorkers.add(jmgPayStatTrans.Worker);
            }

            while select sum(Adjustment)
                from adjustments
                group by Worker
                where adjustments.FromDate      >= periodStart &&
                      adjustments.FromDate      <= periodEnd
            {
                if (!handledWorkers.in(adjustments.Worker))
                {
                    jmgPayStatTrans.clear();
                    jmgPayStatTrans.PaySeconds      = 0;
                    jmgPayStatTrans.Adjustment      = adjustments.Adjustment;
                    jmgPayStatTrans.Worker          = adjustments.Worker;
                    jmgPayStatTrans.PayCostType     = this.PayCostType;
                    jmgPayStatTrans.PayStatGroupId  = this.PayStatGroupId;
                    jmgPayStatTrans.FromDate        = periodStart;
                    jmgPayStatTrans.ToDate          = periodEnd;
                    jmgPayStatTrans.insert();
                }
            }

            projPeriodLine = ProjPeriodLine::findNextFromPeriodTo(this.ProjPeriodId, periodEnd);

            if (!projPeriodLine)
            {
                break;
            }
            periodStart = projPeriodLine.PeriodFrom;
            periodEnd   = projPeriodLine.PeriodTo;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete transactions for the <c>JmgPayStatConfig</c> record.
    /// </summary>
    /// <remarks>
    /// Transactions are deleted from the <c>JmgPayStatTrans</c> record.
    /// </remarks>
    void deleteTrans()
    {
        JmgPayStatTrans jmgPayStatTrans;

        delete_from jmgPayStatTrans
            where jmgPayStatTrans.PayCostType    == this.PayCostType &&
                  jmgPayStatTrans.PayStatGroupId == this.PayStatGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the description of the pay type that is associated with the <c>JmgPayStatConfig</c>
    /// record.
    /// </summary>
    /// <returns>
    /// The description of the pay type.
    /// </returns>
    public display JmgDescription description()
    {
        JmgPayTable     jmgPayTable;

        if (hasTableAccess(tablenum(JmgPayTable)))
        {
            jmgPayTable = JmgPayTable::find(this.PayCostType);
            return jmgPayTable.Description;
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>JmgPayStatConfig</c> record from the database, based on a group ID and pay cost type.
    /// </summary>
    /// <param name="_groupId">
    /// The group ID to search for.
    /// </param>
    /// <param name="_payCostType">
    /// The pay cost type to search for.
    /// </param>
    /// <param name="_forUpdate">
    /// true if the selected record must be selected for update; otherwise, false.
    /// </param>
    /// <returns>
    /// A <c>JmgPayStatConfig</c> record from the database, based on a group ID and pay cost type.
    /// </returns>
    public static JmgPayStatConfig find(JmgPayStatGroupId _groupId, JmgPayCostType _payCostType, boolean _forUpdate = false)
    {
        JmgPayStatConfig    ret;

        ret.selectForUpdate(_forUpdate);
        ret.selectLocked(_forUpdate);

        if (_groupId && _payCostType)
        {
            select firstonly ret
                where ret.PayStatGroupId    == _groupId &&
                      ret.PayCostType       == _payCostType;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payEventsFlexCorStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the earliest date where a pay event has been created.
    /// </summary>
    /// <returns>
    /// The earliest date where a pay event has been created.
    /// </returns>
    public static JmgProfileDate payEventsFlexCorStart()
    {
        return (select minof(ProfileDate) from jmgPayEvents).ProfileDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>JmgPayroll</ConfigurationKey>
	<DeveloperDocumentation>@SYS317279</DeveloperDocumentation>
	<Label>@SYS39123</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>PayStatGroupId</TitleField1>
	<TitleField2>PayCostType</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>TypeGroupUnitIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>TypeGroupUnitIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PayStatGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayCostType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Setup</Name>
			<Label>@SYS2186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjPeriodId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayCostType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayStatGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjustDays</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AdjustDays</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgAdjustDays</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PayCostType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgPayCostType</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PayStatGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgPayStatGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjPeriodId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjPeriodId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProjPeriodTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjPeriodId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TypeGroupUnitIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PayStatGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PayCostType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjPeriodId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JmgPayStatGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgPayStatGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PayStatGroupId</Name>
					<Field>PayStatGroupId</Field>
					<RelatedField>PayStatGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JmgPayTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgPayTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PayCostType</Name>
					<Field>PayCostType</Field>
					<RelatedField>PayCostType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjPeriodTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjPeriodTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjPeriodTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>JmgPayStatConfig</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjPeriodId</Name>
					<Field>ProjPeriodId</Field>
					<RelatedField>PeriodId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PeriodIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>