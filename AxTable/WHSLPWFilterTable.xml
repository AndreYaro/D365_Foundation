<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLPWFilterTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSLPWFilterTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initQueries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialized the filter query.
    /// </summary>
    public void initQueries()
    {
        QueryRun queryRun = this.defaultFilterQueryRun();

        if (queryRun)
        {
            this.lpwFilterQuery = queryRun.pack();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFilterQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default query run.
    /// </summary>
    /// <returns>The default query run.</returns>
    public QueryRun defaultFilterQueryRun()
    {
        switch (this.lpwFilterType)
        {
            case WHSLPWFilterType::Load:
                return new QueryRun(queryStr(WHSLPWFilterLoad));

            case WHSLPWFilterType::SalesOrder:
                return TMSLoadBuildWorkbenchForm::createNewQueryRun(TMSLoadBuildSupplyDemandType::Sales);

            case WHSLPWFilterType::PurchOrder:
                return TMSLoadBuildWorkbenchForm::createNewQueryRun(TMSLoadBuildSupplyDemandType::Purchase);

            case WHSLPWFilterType::TransferOrder:
                return TMSLoadBuildWorkbenchForm::createNewQueryRun(TMSLoadBuildSupplyDemandType::TransferIssue);

            case WHSLPWFilterType::Shipment:
                return TMSLoadBuildWorkbenchForm::createNewQueryRun(TMSLoadBuildSupplyDemandType::Shipment);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.initQueries();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        if (_fieldId == fieldNum(WHSLPWFilterTable, lpwFilterType))
        {
            this.initQueries();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a specific <c>whslpwFilterTable</c> record exists.
    /// </summary>
    /// <param name="_filterCode">
    /// Filter code of the record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    static boolean exist(WHSLPWFilterCode _filterCode)
    {
        return _filterCode && (select firstonly RecId from whslpwFilterTable
                 where whslpwFilterTable.lpwFilterCode == _filterCode).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSLPWFilterTable</c> record with given parameters.
    /// </summary>
    /// <param name="_filterCode">
    /// Filter code of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSLPWFilterTable find(WHSLPWFilterCode   _filterCode,
                                         boolean            _forupdate = false)
    {
        WHSLPWFilterTable    filterTable;

        if (_filterCode)
        {
            filterTable.selectForUpdate(_forupdate);

            select firstonly filterTable
                where filterTable.lpwFilterCode == _filterCode;
        }

        return filterTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4406</DeveloperDocumentation>
	<FormRef>WHSLPWFilterTable</FormRef>
	<Label>@WAX3701</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>LPWFilterCode</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>LPWFilterCodeIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>LPWFilterCodeIdx</PrimaryIndex>
	<ReplacementKey>LPWFilterCodeIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LPWFilterCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LPWFilterQuery</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LPWFilterType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LPWFilterCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LPWFilterQuery</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LPWFilterType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LPWFilterCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LPWFilterCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLPWFilterCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>LPWFilterQuery</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLPWFilterQuery</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LPWFilterType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSLPWFilterType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LPWFilterCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LPWFilterCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>