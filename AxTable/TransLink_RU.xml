<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransLink_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TransLink_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcOrigCostValue</Name>
				<Source><![CDATA[
public static container calcOrigCostValue(InventTransOriginId _inventTransOriginId)
{
InventTrans  inventTrans, inventTransSec;
TransLink_RU link;

InventQty    qty;
CostAmount   value;
CostAmount   valueSecCur;

// avoid config key check
select firstonly RecId from link
    where link.RefTableId == tableNum(InventTrans);

if (link)
{
    select sum(Qty),
           sum(CostAmountPosted),
           sum(CostAmountAdjustment),
           sum(CostAmountSecCurPosted_RU),
           sum(CostAmountSecCurAdjustment_RU) from inventTrans
        where  ((inventTrans.StatusReceipt == StatusReceipt::Purchased && inventTrans.StatusIssue == StatusIssue::None)
               || (inventTrans.StatusReceipt == StatusReceipt::None && inventTrans.StatusIssue == StatusIssue::Sold))
               && inventTrans.PackingSlipReturned == 0
    exists join link
        where link.RefPri                      == inventTrans.RecId
    exists join inventTransSec
        where inventTransSec.InventTransOrigin == _inventTransOriginId &&
              inventTransSec.RecId             == link.RefSec;

    qty         = inventTrans.Qty;
    value       = inventTrans.costValue();
    valueSecCur = inventTrans.costValueSecCur_RU();
}

return [ qty, value, valueSecCur ];
}

]]></Source>
			</Method>
			<Method>
				<Name>canReverse</Name>
				<Source><![CDATA[
static boolean canReverse(TableId _tableId, RecId _recId)
{
TransLink_RU link;
;

select firstonly RecId from link
    where link.RefTableId == _tableId &&
          link.RefPri     == _recId;

return link.RecId == 0;
}

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
public static void create(TableId _tableId,
                              RecId   _pri,
                              RecId   _sec,
                              TransLinkType_RU  _linkType   = TransLinkType_RU::Original,
                              NoYes             _reversed   = NoYes::No,
                              container         _origData       = connull(),
                              TransDate         _accountingDate = datenull())
    {
        TransLink_RU link, originalLink;

        if (_tableId &&
            _sec     &&
          ! TransLink_RU::exist(_tableId, _pri, _sec))
        {
            ttsbegin;

            link.RefTableId = _tableId;
            link.RefPri         = _pri ? _pri : _sec;
            link.RefSec     = _sec;
            link.TransLinkType  = _linkType;
            link.Reversed       = _reversed;
            link.OrigData       = _origData;
            link.AccountingDate = _accountingDate;
            link.Last           = true;

            select firstonly originalLink
                where originalLink.RefSec     == link.RefPri &&
                      originalLink.RefTableId == _tableId;

            link.ReversalGroup  = originalLink.RecId         ?
                                  originalLink.ReversalGroup :
                                  link.RefPri;
            link.insert();

            update_recordset originalLink
                setting Last = false
                where originalLink.RefTableId    == _tableId           &&
                      originalLink.ReversalGroup == link.ReversalGroup &&
                      originalLink.Last          == true               &&
                      originalLink.RecId         != link.RecId;

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReversal</Name>
				<Source><![CDATA[
public static void createReversal(TableId   _tableId,
                                      RefRecId  _pri,
                                      RefRecId  _sec,
                                      TransDate _accountingDate = datenull())
    {
        boolean      reversed;
        TransLink_RU link = TransLink_RU::findSec(_tableId, _pri, true);

        if (!link)
        {
            TransLink_RU::create(_tableId,
                                 _pri,
                                 _pri,
                                 TransLinkType_RU::Original,
                                 NoYes::No,
                                 connull(),
                                 _accountingDate);

            link = TransLink_RU::findSec(_tableId, _pri, true);
        }

        reversed = link.Reversed;

        link.Reversed = NoYes::Yes;
        link.update();

        TransLink_RU::create(_tableId,
                             _pri,
                             _sec,
                             reversed                 ?
                             TransLinkType_RU::Revoke :
                             TransLinkType_RU::Storno,
                             ! reversed,
                             connull(),
                             _accountingDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
public static boolean exist(TableId _refTableId,
                               RecId   _refPri,
                               RecId   _refSec)
{
TransLink_RU link;

select firstonly RecId from link
    where link.RefTableId == _refTableId &&
          link.RefPri     == _refPri     &&
          link.RefSec     == _refSec;

return link.RecId != 0;
}

]]></Source>
			</Method>
			<Method>
				<Name>existInventTransOrig</Name>
				<Source><![CDATA[
public static boolean existInventTransOrig(InventTransOriginId _inventTransOriginId)
{
InventTrans  inventTrans;
TransLink_RU link;

// avoid config key check
select firstonly RecId from link
    where link.RefTableId == tableNum(InventTrans);

if (link)
{
    // for specified lot find InventTrans that has been linked as 'secondary' (link.RefSec == inventTrans.RecId);
    // i.e. if such RuTransLink exists, then it's RefPri points to original InventTrans
    select firstonly RecId from inventTrans
        where inventTrans.InventTransOrigin == _inventTransOriginId
    exists join link
        where link.RefTableId               == tableNum(InventTrans) &&
              link.RefSec                   == inventTrans.RecId;
}

return inventTrans.RecId != 0;
}

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
public static TransLink_RU find(TableId _refTableId,
                                   RecId   _refPri,
                                   RecId   _refSec,
                                   boolean _forUpdate = false)
{
TransLink_RU link;

link.selectForUpdate(_forUpdate);

select link
    where link.RefTableId == _refTableId &&
          link.RefPri     == _refPri     &&
          link.RefSec     == _refSec;

return link;
}

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransOrig</Name>
				<Source><![CDATA[
public static InventTrans findInventTransOrig(InventTransOriginId _inventTransOriginId)
{
InventTrans  inventTransOrig, inventTransCur;
TransLink_RU link;

// avoid config key check
select firstonly RecId from link
    where link.RefTableId == tableNum(InventTrans);

if (link)
{
    // firstonly is for perfomance reasons only
    // other method is needed if all original InventTrans are required
    select firstonly inventTransOrig
    exists join link
        where link.RefTableId                   == tableNum(InventTrans) &&
              link.RefPri                       == inventTransOrig.RecId
    exists join inventTransCur
        where inventTransCur.InventTransOrigin  == _inventTransOriginId  &&
              inventTransCur.RecId              == link.RefSec;
}

return inventTransOrig;
}

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransStornoRef</Name>
				<Source><![CDATA[
public static void findInventTransStornoRef(InventTrans _inventTransCur,
                                               Set         _refSet)
{
#define.Even (0)
#define.Odd  (1)
#define.Mixed(2)

Set         parentRefSet = new Set(extendedTypeId2Type(extendedTypeNum(RecId)));
Set         childRefSet  = new Set(extendedTypeId2Type(extendedTypeNum(RecId)));
SetIterator refSetIterator;

int          curRank = TransLink_RU::inventTransStornoRefRank(_inventTransCur, childRefSet, parentRefSet);

switch (curRank)
{
    case #Mixed :
        break;

    case #Even  :
        // loop through parent records
        refSetIterator = new SetIterator(parentRefSet);

        while (refSetIterator.more())
        {
            _refSet.add(refSetIterator.value());

            refSetIterator.next();
        }
        break;

    case #Odd   :
        // loop through child records
        refSetIterator = new SetIterator(childRefSet);

        while (refSetIterator.more())
        {
            _refSet.add(refSetIterator.value());

            refSetIterator.next();
        }
        break;
}
}

]]></Source>
			</Method>
			<Method>
				<Name>findOrig</Name>
				<Source><![CDATA[
public static Common findOrig(Common _trans)
{
TransLink_RU link;
Common       ret = _trans.data();

select firstonly ret
exists join link
    where link.RefTableId == _trans.TableId &&
          link.RefSec     == _trans.RecId   &&
          link.RefPri     == ret.RecId;

return ret;
}

]]></Source>
			</Method>
			<Method>
				<Name>findSec</Name>
				<Source><![CDATA[
public static TransLink_RU findSec(TableId _refTableId,
                                      RecId   _refSec,
                                      boolean _forUpdate = false)
{
TransLink_RU link;

link.selectForUpdate(_forUpdate);

select firstonly link
    where link.RefTableId == _refTableId &&
          link.RefSec     == _refSec;

return link;
}

]]></Source>
			</Method>
			<Method>
				<Name>inventTransStornoRefRank</Name>
				<Source><![CDATA[
public static int inventTransStornoRefRank(InventTrans _inventTrans,
                                              Set         _childRefSet  = new Set(extendedTypeId2Type(extendedTypeNum(RecId))),
                                              Set         _parentRefSet = new Set(extendedTypeId2Type(extendedTypeNum(RecId))))
{
#define.Even (0)
#define.Odd  (1)
#define.Mixed(2)

int          ret = #Even;
int          tmpRet;
Set          retSet = new Set(Types::Integer);

InventTrans   inventTransRef;
TransLink_RU  link;

// parent records
while select RecId from inventTransRef
    where inventTransRef.Storno_RU           !=   _inventTrans.Storno_RU
exists join link
    where link.RefTableId == tableNum(InventTrans) &&
          link.RefPri     == inventTransRef.RecId &&
          link.RefSec     == _inventTrans.RecId
{
    _parentRefSet.add(inventTransRef.RecId);
}

if (_parentRefSet.elements() > 1)
{
    retSet.add(#Mixed);
}
else
{
    // child records
    select inventTransRef
        where inventTransRef.Storno_RU !=   _inventTrans.Storno_RU &&
              inventTransRef.Qty       == - _inventTrans.Qty
    exists join link
        where link.RefTableId          ==   tableNum(InventTrans)  &&
              link.RefPri              ==   _inventTrans.RecId  &&
              link.RefSec              ==   inventTransRef.RecId;

    while (inventTransRef && tmpRet != #Mixed && retSet.elements() <= 1)
    {
        _childRefSet.add(inventTransRef.RecId);

        tmpRet = TransLink_RU::inventTransStornoRefRank(inventTransRef);
        retSet.add(tmpRet);
        next inventTransRef;
    }
}

switch (retSet.elements())
{
    case 0  :
        break;

    case 1  :
        ret = new SetIterator(retSet).value();
        // if not #Mixed, then swap #Odd and #Even
        switch (ret)
        {
            case #Even :
                ret = #Odd;
                break;

            case #Odd  :
                ret = #Even;
                break;
        }
        break;

    default :
        ret = #Mixed;
}

return ret;
}

]]></Source>
			</Method>
			<Method>
				<Name>merge</Name>
				<Source><![CDATA[
public static void merge(Common _transFrom,
                                    Common _transTo)
    {
        TransLink_RU link;
        Set linksToMerge = new Set (Types::Container); //[RecId, RecId]
        SetEnumerator linkEnumerator;
        RecId recIdPri, recIdSec;

        ttsbegin;

        while select RefPri, RefSec from link
            where link.RefTableId == _transFrom.TableId &&
                 (link.RefPri     == _transFrom.RecId ||
                  link.RefSec     == _transFrom.RecId)
        {
            if (link.RefPri == _transFrom.RecId)
            {
                // copying original
                linksToMerge.add([_transTo.RecId, link.RefSec]);
            }
            else
            {
                // copying reverse
                linksToMerge.add([link.RefPri, _transTo.RecId]);
            }
            }

        delete_from link
            where link.RefTableId == _transFrom.TableId &&
                 (link.RefPri     == _transFrom.RecId ||
                  link.RefSec     == _transFrom.RecId);

        linkEnumerator = linksToMerge.getEnumerator();

        while (linkEnumerator.moveNext())
        {
           [recIdPri, recIdSec] =  linkEnumerator.current();
           transLink_RU::create(_transFrom.TableId, recIdPri, recIdSec);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remove</Name>
				<Source><![CDATA[
public static void remove(TableId _tableId,
                      RecId   _recId)
{
TransLink_RU link;

if (_tableId && _recId)
{
    ttsbegin;

    delete_from link
        where link.RefTableId == _tableId &&
             (link.RefPri == _recId ||
              link.RefSec == _recId);

    ttscommit;
}
}

]]></Source>
			</Method>
			<Method>
				<Name>rpayGetReverseInCon</Name>
				<Source><![CDATA[
public static container rpayGetReverseInCon(Common    _trans,
                                        container _con = conNull())
{
TransLink_RU link;
Common       common = _trans.data();
container    con    = _con;
;

while select common
exists join link
    where link.RefTableId == _trans.TableId &&
          link.RefPri     == _trans.RecId   &&
          link.RefSec     == common.RecId   &&
          link.RefSec     != link.RefPri
{
    con = conPoke(con, conLen(con)+1,common.RecId);
    con = TransLink_RU::rpayGetReverseInCon(common, con);
}

return con;
}

]]></Source>
			</Method>
			<Method>
				<Name>rpayRemove</Name>
				<Source><![CDATA[
public static void rpayRemove(RefTableId _refTableId, RefRecId _refSec)
{
TransLink_RU transLinkPri;
TransLink_RU transLinkSec;
TransLink_RU transLink;

ttsbegin;
select forupdate firstonly transLinkSec
    where transLinkSec.RefTableId == _refTableId &&
          transLinkSec.RefSec     == _refSec
    join forupdate transLinkPri
            where transLinkPri.RefTableId == _refTableId &&
                  transLinkPri.RefSec     == transLinkSec.RefPri &&
                  transLinkPri.RefPri     == transLinkSec.RefPri;

if (transLinkSec)
{
    transLinkSec.delete();

    select firstonly transLink
        where transLink.RefTableId == _refTableId &&
              transLink.RefPri     == transLinkPri.RefPri &&
              transLink.RecId      != transLinkPri.RecId;

    if (!transLink)
    {
        transLinkPri.delete();
    }
}

ttscommit;
}

]]></Source>
			</Method>
			<Method>
				<Name>split</Name>
				<Source><![CDATA[
/// <summary>
    /// Splits <c>TransLink_RU</c> records related to the splitted <c>InventTrans</c> record.
    /// </summary>
    /// <param name="_oldTrans">
    /// The splitted <c>InventTrans</c> record.
    /// </param>
    /// <param name="_newTrans">
    /// The new part of the splitted <c>InventTrans</c> record.
    /// </param>
    /// <param name="_splitOnlyReversalLink">
    /// If true, related TransLink_RU records are splitted only for links where splitted <c>InventTrans</c> record is reversal.
    /// </param>
    public static void split(Common  _oldTrans,
                                    Common  _newTrans,
                                    boolean _splitOnlyReversalLink = false)
    {
        TransLink_RU link;
        RecId        origTransRecId = TransLink_RU::findOrig(_oldTrans).RecId;

        if (origTransRecId)
        {
        // reversal transaction is being split - add link _newTrans-->original
            TransLink_RU::create(_oldTrans.TableId, origTransRecId, _newTrans.RecId);
        }

        if (_splitOnlyReversalLink)
            return;

        // original transaction is being split - add link(s) reversal(s)-->_newTrans
        while select RefSec from link
            where link.RefTableId == _oldTrans.TableId &&
                  link.RefPri     == _oldTrans.RecId
        {
            TransLink_RU::create(_newTrans.TableId, _newTrans.RecId, link.RefSec);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a transaction link of the certain link type.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID of the transaction table buffer.
    /// </param>
    /// <param name="_reversalGroup">
    /// The group ID of the reversal sequence.
    /// </param>
    /// <param name="_linkType">
    /// The link type being searched for.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean parameter specifying whether the record should be selected for update.
    /// </param>
    /// <returns>
    /// A transaction link of the certain link type.
    /// </returns>

    public static TransLink_RU findByType(RefTableId        _tableId,
                                          SysInt64          _reversalGroup,
                                          TransLinkType_RU  _linkType,
                                          boolean           _forUpdate = false)
    {
        TransLink_RU link;

        link.selectForUpdate(_forUpdate);

        select firstonly link
            index hint RefGroupIdx
            where link.RefTableId    == _tableId       &&
                  link.ReversalGroup == _reversalGroup &&
                  link.TransLinkType == _linkType;

        return link;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the original transaction link in the reversal sequence.
    /// </summary>
    /// <param name="_trans">
    /// A table buffer with correction transaction.
    /// </param>
    /// <returns>
    /// A table buffer with original transaction.
    /// </returns>

    public static Common getOriginal(Common _trans)
    {
        RefRecId recIdOrig;
        Common   ret            = _trans.data();
        RefRecId reversalGroup  = TransLink_RU::findSec(_trans.TableId, _trans.RecId).ReversalGroup;

        if (reversalGroup)
        {
            recIdOrig = TransLink_RU::findByType(_trans.TableId, reversalGroup, TransLinkType_RU::Original).RefSec;
            if (! recIdOrig)
            {
                recIdOrig = TransLink_RU::findByType(_trans.TableId, reversalGroup, TransLinkType_RU::Correction).RefSec;
            }

            select firstonly ret where ret.RecId == recIdOrig;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLedgerCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a link between original and corrective ledger transactions.
    /// </summary>
    /// <param name="_trans">
    /// The corrective or original transaction.
    /// </param>
    /// <param name="_sourceTrans">
    /// The original transaction.
    /// </param>
    ///
    static void postLedgerCorrection(Common     _trans,
                                            Common     _sourceTrans  = null)
    {
        LedgerTransLink_RU ledgerTransLink;
        ;

        ledgerTransLink = prmIsDefault(_sourceTrans)             ?
                          LedgerTransLink_RU::newTrans(_trans)   :
                          LedgerTransLink_RU::newTrans(_trans, _sourceTrans);
        ledgerTransLink.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLedgerReverse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a link between original and reversal ledger transactions.
    /// </summary>
    /// <param name="_trans">
    /// The corrective or original transaction.
    /// </param>
    /// <param name="_sourceTrans">
    /// The original transaction.
    /// </param>

    static void postLedgerReverse(Common     _trans,
                                         Common     _sourceTrans  = null)
    {
        LedgerTransLink_RU ledgerTransLink;
        ;

        if (! _trans)
        {
            ledgerTransLink = LedgerTransLink_RU::newTrans(_sourceTrans);
        }
        else
        {
            ledgerTransLink = prmIsDefault(_sourceTrans)             ?
                              LedgerTransLink_RU::newTrans(_trans)   :
                              LedgerTransLink_RU::newTrans(_trans, _sourceTrans);
        }

        ledgerTransLink.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGeneralJourTransLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a link between original and reversal General Journal transactions.
    /// </summary>
    /// <param name="_voucher">
    /// Voucher of original transaction.
    /// </param>
    /// <param name="_transDate">
    /// TransDate of original transaction.
    /// </param>
    /// <param name="_voucherCorr">
    /// Voucher of correction transaction.
    /// </param>
    /// <param name="_transDateCorr">
    /// TransDate of correction transaction.
    /// </param>
    public static void createGeneralJourTransLink(Voucher _voucher,
        TransDate _transDate,
        Voucher _voucherCorr = _voucher,
        TransDate _transDateCorr = dateNull())
    {
        GeneralJournalEntry entry;
        GeneralJournalAccountEntry accountEntry;

        while select TableId from entry
            where entry.SubledgerVoucher == _voucher &&
                    entry.AccountingDate == _transDate
            join LedgerAccount, PostingType, LedgerDimension from accountEntry
                where accountEntry.GeneralJournalEntry == entry.RecId
        {
            GeneralJournalAccountEntry accountEntryCorrCheck;
            GeneralJournalEntry entryCorr;

            select count(RecId) from accountEntryCorrCheck
                where accountEntryCorrCheck.LedgerAccount == accountEntry.LedgerAccount &&
                      accountEntryCorrCheck.PostingType == accountEntry.PostingType
                exists join entryCorr
                    where entryCorr.RecId == accountEntryCorrCheck.GeneralJournalEntry &&
                        entryCorr.SubledgerVoucher == _voucherCorr &&
                        ((entryCorr.AccountingDate != entry.AccountingDate && !_transDateCorr) ||
                        (entryCorr.AccountingDate == _transDateCorr && _transDateCorr));

            if (accountEntryCorrCheck.RecId > 0)
            {
                GeneralJournalAccountEntry accountEntryCorr;

                select firstonly RecId from accountEntryCorr
                    where accountEntryCorr.LedgerAccount == accountEntry.LedgerAccount &&
                        accountEntryCorr.PostingType == accountEntry.PostingType &&
                        (accountEntryCorrCheck.RecId == 1 ||
                        accountEntryCorr.LedgerDimension == accountEntry.LedgerDimension)
                exists join entryCorr
                    where entryCorr.RecId == accountEntryCorr.GeneralJournalEntry &&
                        entryCorr.SubledgerVoucher == _voucherCorr &&
                        ((entryCorr.AccountingDate != entry.AccountingDate && !_transDateCorr) ||
                        (entryCorr.AccountingDate == _transDateCorr && _transDateCorr));

                if (accountEntryCorr)
                {
                    if (!TransLink_RU::findSec(accountEntry.TableId, accountEntry.RecId))
                    {
                        TransLink_RU::create(accountEntry.TableId, accountEntry.RecId, accountEntry.RecId);
                    }

                    TransLink_RU::create(tableNum(GeneralJournalAccountEntry),
                        accountEntry.RecId,
                        accountEntryCorr.RecId,
                        TransLinkType_RU::Correction);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@GLS112469</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>RefTableId</TitleField1>
	<TitleField2>RefPri</TitleField2>
	<ClusteredIndex>RefRecIdIdx</ClusteredIndex>
	<Modules>APARShared</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefPri</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefSec</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefPri</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefSec</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Misc</Name>
			<Label>@SYS73543</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefPri</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefSec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigData</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReversalGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reversed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransLinkType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountingDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Last</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>OrigData</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KeyData</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefPri</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefSec</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReversalGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysInt64</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Reversed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Reversed</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransLinkType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TransLinkType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AccountingDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS56521</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Last</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LastReversal</ExtendedDataType>
			<EnumType>boolean</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RefRecIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefSec</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefPri</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>GroupTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ReversalGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransLinkType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RefGroupIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReversalGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CommonPri</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Common</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CommonPri</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>CommonPri_TransLink_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefPri</Name>
					<Field>RefPri</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CommonSec</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Common</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CommonSec</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>CommonSec_TransLink_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefSec</Name>
					<Field>RefSec</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RAssetTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RAssetTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefSec</Name>
					<Field>RefSec</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RDeferralsTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RDeferralsTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefSec</Name>
					<Field>RefSec</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>