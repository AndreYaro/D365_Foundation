<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResAttributeGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResAttributeGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>EcoResAttributeGroup</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>EcoResAttributeGroup</c> table; otherwise, an empty record.
    /// </returns>
    public static EcoResAttributeGroup find(RefRecId _recId, boolean _forUpdate = false)
    {
        EcoResAttributeGroup record;

        if (_recId)
        {
            record.selectForUpdate(_forUpdate);

            select firstonly record
                where record.RecId == _recId;
        }

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the attribute group record in the <c>EcoResAttributeGroup</c> table
    /// by the specified name.
    /// </summary>
    /// <param name="_name">
    /// The name of the attribute group record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///  Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>EcoResAttributeGroup</c> table; otherwise, an empty record.
    /// </returns>
    public static EcoResAttributeGroup findByName(Name _name, boolean _forUpdate = false)
    {
        EcoResAttributeGroup ecoResAttributeGroup;

        if (_name)
        {
            ecoResAttributeGroup.selectForUpdate(_forUpdate);

            select ecoResAttributeGroup
            where ecoResAttributeGroup.Name == _name;
        }

        return ecoResAttributeGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the attribute group before attempting to delete it.
    /// </summary>
    /// <returns>True if validation passes and attribute group is okay to delete. Otherwise, false.</returns>
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        // Validate that the attribute group selected for deletion is not currently the set attribute group under Commerce Parameters.
        // If it is, then we need to prevent deletion and display an error message indicating the reason.
        if (ret && isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            RetailParameters retailParameters = RetailParameters::find();
            if (retailParameters && retailParameters.CustomerAttributeGroup == this.RecId)
            {
                error(strFmt('@Retail:AttrGroupDeletionErrorMsg', this.Name));
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@RET261076</DeveloperDocumentation>
	<FormRef>EcoResAttributeGroup</FormRef>
	<Label>@RET261069</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Name</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>AttributeGroupIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AttributeGroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>