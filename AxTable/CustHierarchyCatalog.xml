<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustHierarchyCatalog</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustHierarchyCatalog extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bulkUpdateCatalogInNodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates all nodes replacing the assigned CatalogId by a given catalog.
    /// </summary>
    /// <param name = "_custHierarchyId">The Customer Hierarchy Id.</param>
    /// <param name = "_oldCatalog">The old Catalog RecId to be replaced.</param>
    /// <param name = "_newCatalog">The new catalog RecId to be assigned.</param>
    public static void bulkUpdateCatalogInNodes(CustHierarchyId _custHierarchyId, CatalogRefRecId _oldCatalog, CatalogRefRecId _newCatalog)
    {
        CustHierarchyNode chNodes;

        ttsbegin;
        update_recordset chNodes
            setting CustHierarchyCatalogRefRecId = _newCatalog
            where chNodes.CustHierarchyId == _custHierarchyId &&
                  chNodes.CustHierarchyCatalogRefRecId == _oldCatalog;
        ttscommit;
        
        info::addMessage(Exception::Info, strFmt("@Retail:RetailCustHierarchyCatalogBulkReplaceMessageLabel", _custHierarchyId, _oldCatalog, _newCatalog));
    }

]]></Source>
			</Method>
			<Method>
				<Name>bulkUpdateAllCatalogInNodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates all nodes by a given catalog.
    /// </summary>
    /// <param name = "_custHierarchyId">The Customer Hierarchy Id.</param>
    /// <param name = "_newCatalog">The new catalog RecId to be assigned.</param>
    public static void bulkUpdateAllCatalogInNodes(CustHierarchyId _custHierarchyId, CatalogRefRecId _newCatalog)
    {
        CustHierarchyNode chNodes;

        ttsbegin;
        update_recordset chNodes
            setting CustHierarchyCatalogRefRecId = _newCatalog
            where chNodes.CustHierarchyId == _custHierarchyId;
        ttscommit;
        
        info::addMessage(Exception::Info, strFmt("@Retail:RetailCustHierarchyCatalogBulkAssignmentMessageLabel", _custHierarchyId, _newCatalog));
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustHierarchyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of the Customer Hierarchy.
    /// </summary>
    /// <returns>
    /// The name of the Customer Hierarchy.
    /// </returns>
    display public str CustHierarchyName()
    {
        CustHierarchy custHierarchyLocal;
        select firstonly custHierarchyLocal 
            where custHierarchyLocal.CustHierarchyId == this.CustHierarchyId;

        return custHierarchyLocal.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CatalogName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a name of the catalog.
    /// </summary>
    /// <param name="_languageId">
    /// The ID of a language for which a name is retrieved.
    /// </param>
    /// <returns>
    /// A name of the catalog, if defined.
    /// </returns>
    display public CatalogName CatalogName(LanguageId _languageId = SystemParameters::getSystemLanguageId())
    {
        CatalogTranslation translation = CatalogTranslation::find(this.CatalogRefRecId, _languageId);
        return translation.FriendlyName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CatalogId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Id of the catalog.
    /// </summary>
    /// <param name = "_set">boolean to decide if the value is going to be set.</param>
    /// <param name = "_catalogId">The CatalogId.</param>
    /// <returns>
    ///    The Id of the catalog, if defined.
    /// </returns>
    edit public RetailCatalogId CatalogId(boolean _set, RetailCatalogId _catalogId)
    {
        Catalog localCatalog = Catalog::find(this.CatalogRefRecId);
        return localCatalog.CatalogId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in Customer Hierarchy Catalog table.
    /// </summary>
    /// <param name="recId">
    /// the record identifier.
    /// </param>
    /// <param name="_forUpdate">
    /// if we want to update the row.
    /// </param>
    /// <param name="_disableCache">
    /// Whether to disable cache for the buffer returned.
    /// </param>
    /// <returns>
    /// a customer hierarchy catalog record.
    /// </returns>
    public static CustHierarchyCatalog find(RecId recId, boolean _forUpdate = false, boolean _disableCache = false)
    {
        CustHierarchyCatalog custHierarchyCatalog;

        // Remarks: Cache setting is set per buffer. Therefore, if disabled,
        // the cache is only going to be disabled for that buffer and not for every subsequent buffer.
        custHierarchyCatalog.disableCache(_disableCache);

        custHierarchyCatalog.selectForUpdate(_forUpdate);

        select firstonly custHierarchyCatalog
            where custHierarchyCatalog.RecId == recId;

        return custHierarchyCatalog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the pair Catalog / Customer hierarchy already exists in <c>CustHierarchyCatalog</c> table.
    /// </summary>
    /// <param name = "_catalogRefRecId">The record id from the catalog.</param>
    /// <param name = "_custHierarchyId">The customer hierarchy Id.</param>
    /// <returns>A boolean indicating if the record already exists.</returns>
    public static boolean exist(CatalogRefRecId _catalogRefRecId, CustHierarchyId _custHierarchyId)
    {
        CustHierarchyCatalog custHierarchyCatalog;

        select firstonly custHierarchyCatalog
            where custHierarchyCatalog.CatalogRefRecId == _catalogRefRecId 
               && custHierarchyCatalog.CustHierarchyId == _custHierarchyId;

        return (custHierarchyCatalog.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>FindByCatalogId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find Customer hierarchy Catalog by catalogId.
    /// </summary>
    /// <param name = "_retailCatalogId">Unique id for catalog.</param>
    /// <returns>Customer hierarchy Catalog record.</returns>
    public static CustHierarchyCatalog FindByCatalogId(RetailCatalogId _retailCatalogId)
    {
        CustHierarchyCatalog custHierarchyCatalog;
        Catalog catalog = Catalog::FindByCatalogId(_retailCatalogId);

        select firstonly custHierarchyCatalog where custHierarchyCatalog.CatalogRefRecId == catalog.RecId;

        return custHierarchyCatalog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCatalogPriorityInUse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if a priority is already in use by a catalog on the current customer hierarchy.
    /// </summary>
    /// <returns>True if the priority is already assigned to a catalog. False otherwise.</returns>
    public boolean isCatalogPriorityInUse()
    {
        CustHierarchyCatalog localCustHierarchyCatalog;
        boolean isPriorityInUse = false;

        // Verifies if the current priority being assigned to the catalog is already taken in the customer hierarchy
        select localCustHierarchyCatalog 
            where localCustHierarchyCatalog.CustHierarchyId == this.CustHierarchyId
               && localCustHierarchyCatalog.Priority == this.Priority
               && localCustHierarchyCatalog.RecId != this.RecId;

        if (localCustHierarchyCatalog)
        {
            isPriorityInUse = true;
        }

        return isPriorityInuse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a record on <c>CustHierarchyCatalog</c> table.
    /// </summary>
    public void update()
    {
        if (!this.CatalogRefRecId)
        {
            Info::addMessage(Exception::Error, "@Retail:RetailCustHierarchyCatalogIdEmptyError");
        }
        else if (this.isCatalogPriorityInUse())
        {
            Info::addMessage(Exception::Error, "@Retail:RetailCustHierarchyCatalogPriorityInUse");
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record on <c>CustHierarchyCatalog</c> table.
    /// </summary>
    public void insert()
    {
        if (!this.CatalogRefRecId)
        {
            Info::addMessage(Exception::Error, "@Retail:RetailCustHierarchyCatalogIdEmptyError");
        }
        else if (this.isCatalogPriorityInUse())
        {
            Info::addMessage(Exception::Error, "@Retail:RetailCustHierarchyCatalogPriorityInUse");
        }
        else
        {
            super();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a record on <c>CustHierarchyCatalog</c> table.
    /// </summary>
    public void delete()
    {
        CustHierarchyNode custHierarchyNodeLocal;

        // Remove catalog from customer hierarchy users.
        update_recordset custHierarchyNodeLocal
            setting CustHierarchyCatalogRefRecId = 0
            where custHierarchyNodeLocal.CustHierarchyId == this.CustHierarchyId
               && custHierarchyNodeLocal.CustHierarchyCatalogRefRecId == this.RecId;

        // Delete catalog from customer hierarchy
        super();

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@Retail:CustomerHierarchyCatalogLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<PrimaryIndex>CustHierarchyCatalogIdx</PrimaryIndex>
	<ReplacementKey>CustHierarchyPriorityIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustHierarchyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Priority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustHierarchyId</Name>
			<ExtendedDataType>CustHierarchyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CatalogRefRecId</Name>
			<ExtendedDataType>CatalogRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Priority</Name>
			<ExtendedDataType>RetailPriority</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CustHierarchyCatalogIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CustHierarchyId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CatalogRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustHierarchyPriorityIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CustHierarchyId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Priority</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustHierarchy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustHierarchy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustHierarchyId</Name>
					<Field>CustHierarchyId</Field>
					<RelatedField>CustHierarchyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Catalog</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Catalog</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CatalogRefRecId</Name>
					<Field>CatalogRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>