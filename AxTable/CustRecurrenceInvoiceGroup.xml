<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustRecurrenceInvoiceGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustRecurrenceInvoiceGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the <c>RecurrenceInvoice</c> table buffer based on <c>CustRecurrenceInvoiceGroup</c> table
    /// record ID.
    /// </summary>
    /// <param name="workflowType">
    /// The workflow type.
    /// </param>
    /// <returns>
    /// true if at least one recurrence invoice found and the <c>WorkflowApprovalState</c> field on the
    /// <c>CustRecurrenceInvoiceGroup</c> table is equal to the
    /// <c>CustFreeInvoiceWFApprovalState::NotSubmitted</c> enumeration value; otherwise, false.
    /// </returns>
    public boolean canSubmitToWorkflow(str workflowType = '')
    {
        RecurrenceInvoice recurrenceInvoice;
        boolean ret;

        if (!this.Posted)
        {
            select firstonly CustRecurrenceInvoiceGroup, CustInvoiceTable, RecId from recurrenceInvoice
                where recurrenceInvoice.CustRecurrenceInvoiceGroup == this.RecId;

            if (recurrenceInvoice.CustInvoiceTable)
            {
                ret = true;
            }
        }

        return ret && this.WorkflowApprovalState == CustFreeInvoiceWFApprovalState::NotSubmitted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateFacture</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether any facture can be updated on the recurring invoices group.
    /// </summary>
    /// <returns>
    /// false if all the recurring invoices are posted and completely factured; otherwise returns true .
    /// </returns>
    public boolean canUpdateFacture()
    {
        RecurrenceInvoice recurrenceInvoice;
        CustInvoiceTable custInvoiceTable;
        CustInvoiceJour custInvoiceJour;
        CustInvoiceJour_RU custInvoiceJour_RU;

        // Non-posted FTIs exist
        select firstOnly RecId from recurrenceInvoice
            where recurrenceInvoice.CustRecurrenceInvoiceGroup == this.RecId
        join custInvoiceTable
            where custInvoiceTable.RecId == recurrenceInvoice.CustInvoiceTable &&
                  custInvoiceTable.Posted == NoYes::No;
        if (recurrenceInvoice.RecId)
            return true;

        // Non-factured invoices exist among posted invoices for current FTIs
        select firstOnly RecId from recurrenceInvoice
            where recurrenceInvoice.CustRecurrenceInvoiceGroup == this.RecId
        join InvoiceId, InvoiceDate, numberSequenceGroup from custInvoiceTable
            where custInvoiceTable.RecId == recurrenceInvoice.CustInvoiceTable &&
                  custInvoiceTable.Posted == NoYes::Yes
        join RecId from custInvoiceJour
            where custInvoiceJour.InvoiceId == custInvoiceTable.InvoiceId &&
                  custInvoiceJour.InvoiceDate == custInvoiceTable.InvoiceDate &&
                  custInvoiceJour.numberSequenceGroup == custInvoiceTable.numberSequenceGroup &&
                  custInvoiceJour.SalesId == ''
         exists join custInvoiceJour_RU
            where custInvoiceJour_RU.CustInvoiceJour == custInvoiceJour.RecId
                && custInvoiceJour_RU.FacturedFully_RU == NoYes::No;

        if (recurrenceInvoice.RecId)
            return true;

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    // </GEERU

    public boolean validateDelete()
    {
        boolean ret;
        RecurrenceInvoice recurrenceInvoice;
        RecurrenceInvoice recurrenceInvoiceDifferentGroup;
        DialogButton dialogButton;

        // Select the maximum date of the recurrence invoice based on recurrence setup and current recurrence group.
        select maxof(RecurrenceInvoiceDate), CustRecurrenceInvoice from recurrenceInvoice
            group by recurrenceInvoice.CustRecurrenceInvoice
            where recurrenceInvoice.CustRecurrenceInvoiceGroup == this.RecId;

        // Select the maximum date of the recurrence invoice based on recurrence setup and different recurrence group.
        select maxof(RecurrenceInvoiceDate) from recurrenceInvoiceDifferentGroup
            where recurrenceInvoiceDifferentGroup.CustRecurrenceInvoice == recurrenceInvoice.CustRecurrenceInvoice
            && recurrenceInvoiceDifferentGroup.CustRecurrenceInvoiceGroup != this.RecId;

        // If any future invoice found; system will not delete the selected recurrence group.
        if (recurrenceInvoiceDifferentGroup.RecurrenceInvoiceDate > recurrenceInvoice.RecurrenceInvoiceDate)
        {
            warning("@SYS318908");
            ret = false;
        }
        else
        {
            dialogButton = Box::yesNo("@SYS328391", DialogButton::No);

            if (dialogButton == DialogButton::Yes)
            {
				if (this.doPostedTransactionsExist())
                {
                    this.deleteUnpostedTransactionsAndUpdateInvoiceGroupToPosted();
                    ret = false;
                }
				else
                {
                    ret = true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteUnpostedTransactionsAndUpdateInvoiceGroupToPosted</Name>
				<Source><![CDATA[
	/// <summary>
    /// Delete all unposted transactions for <c>CustRecurrenceInvoiceGroup</c> and update Posted to yes.
    /// </summary>
    internal void deleteUnpostedTransactionsAndUpdateInvoiceGroupToPosted()
    {
        RecurrenceInvoice invoice;
        CustInvoiceTable custInvoice;

        delete_from invoice
            where invoice.CustRecurrenceInvoiceGroup == this.RecId
            exists join custInvoice
                where custInvoice.RecId == invoice.CustInvoiceTable
                    && custInvoice.Posted == NoYes::No;

        ttsbegin; 
		this.selectForUpdate(true);
        this.Posted = NoYes::Yes;
        this.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doPostedTransactionsExist</Name>
				<Source><![CDATA[
	/// <summary>
    /// Determine whether posted transactions exist for this <c>CustRecurrenceInvoiceGroup</c>.
    /// </summary>
    /// <returns>true if posted transactions exist, otherwise false.</returns>
    internal boolean doPostedTransactionsExist()
    {
        RecurrenceInvoice invoice;
        CustInvoiceTable custInvoice;

        select firstonly RecId from invoice
            where invoice.CustRecurrenceInvoiceGroup == this.RecId
            exists join custInvoice
                where custInvoice.RecId == invoice.CustInvoiceTable
					&& custInvoice.Posted == NoYes::Yes;

        return invoice.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteUnpostedTransactions</Name>
				<Source><![CDATA[
	internal void deleteUnpostedTransactions()
    {
        RecurrenceInvoice invoice;
        CustInvoiceTable custInvoice;

		delete_from invoice 
			where invoice.CustRecurrenceInvoiceGroup == this.RecId
			exists join custInvoice
                where custInvoice.RecId == invoice.CustInvoiceTable
					&& custInvoice.Posted == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>CustRecurrenceInvoiceGroup</c> table.
    /// </summary>
    /// <param name="_custRecurrenceInvoiceGroupRecId">
    /// The unique ID of the record to find.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(recId _custRecurrenceInvoiceGroupRecId)
    {
        boolean ret = true;

        if (!CustRecurrenceInvoiceGroup::exist(_custRecurrenceInvoiceGroupRecId))
        {
            ret = checkFailed(strFmt(CustRecurrenceInvoiceGroup::txtNotExist(), _custRecurrenceInvoiceGroupRecId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>CustRecurrenceInvoiceGroup</c> table exists.
    /// </summary>
    /// <param name="_custRecurrenceInvoiceGroupRecId">
    /// The Record ID of the <c>CustInvoiceTemplate</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _custRecurrenceInvoiceGroupRecId)
    {
        boolean found;

        found = (select firstonly RecId from custRecurrenceInvoiceGroup
                    where custRecurrenceInvoiceGroup.RecId == _custRecurrenceInvoiceGroupRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific record in the <c>CustRecurrenceInvoiceGroup</c> table.
    /// </summary>
    /// <param name="_custRecurrenceInvoiceGroupRecId">
    /// The unique ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A <c>CustRecurrenceInvoiceGroup</c> table buffer.
    /// </returns>
    public static CustRecurrenceInvoiceGroup find(
        RecId _custRecurrenceInvoiceGroupRecId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustRecurrenceInvoiceGroup custRecurrenceInvoiceGroup;

        custRecurrenceInvoiceGroup.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custRecurrenceInvoiceGroup.concurrencyModel(_concurrencyModel);
        }

        select firstonly custRecurrenceInvoiceGroup
            where custRecurrenceInvoiceGroup.RecId == _custRecurrenceInvoiceGroupRecId;

        return custRecurrenceInvoiceGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkflowActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether workflow is active for the customer recurrence invoice group.
    /// </summary>
    /// <param name="_custRecurrenceInvoiceGroupId">
    /// The record ID of the <c>CustRecurrenceInvoiceGroup</c> table.
    /// </param>
    /// <returns>
    /// true if workflow is active for the customer recurrence invoice group; otherwise, false.
    /// </returns>
    public static boolean isWorkflowActive(RecId _custRecurrenceInvoiceGroupId)
    {
        SysWorkflowTable sysWorkflowTable;
        WorkflowVersionTable workflowVersionTable;
        CustRecurrenceInvoiceGroup custRecurrenceInvoiceGroup;
        boolean isWorkflowActive;

        custRecurrenceInvoiceGroup = custRecurrenceInvoiceGroup::find(_custRecurrenceInvoiceGroupId);

        if (custRecurrenceInvoiceGroup)
        {
            if (custRecurrenceInvoiceGroup.WorkflowApprovalState == CustFreeInvoiceWFApprovalState::NotSubmitted)
            {
                workflowVersionTable = Workflow::findWorkflowConfigToActivateForType(workFlowTypeStr(CustRecurrenceInvoiceType), CustRecurrenceInvoiceGroup.RecId, tableNum(CustRecurrenceInvoiceGroup));

                if (workflowVersionTable)
                {
                    // Workflow is activated for the customer recurrence invoice group record.
                    isWorkflowActive = true;
                }
            }
            else
            {
                select firstOnly RecId from sysWorkflowTable
                    where sysWorkflowTable.ContextRecId == _custRecurrenceInvoiceGroupId
                        && sysWorkflowTable.ContextTableId == tableNum(CustRecurrenceInvoiceGroup);

                if (sysWorkflowTable)
                {
                    // Workflow is active on the customer recurrence invoice group record.
                    isWorkflowActive = true;
                }
            }
        }

        return isWorkflowActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfRecurrenceInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total number of the <c>RecurrenceInvoice</c> for a single
    /// <c>CustRecurrenceInvoiceGroup</c> record.
    /// </summary>
    /// <param name="_custRecurrenceInvoiceGroupRecId">
    /// A record ID of the <c>CustRecurrenceInvoiceGroup</c> table.
    /// </param>
    /// <returns>
    /// The total number of the <c>RecurrenceInvoice</c> for a single <c>CustRecurrenceInvoiceGroup</c>
    /// record.
    /// </returns>
    public static int numOfRecurrenceInvoice(RecId _custRecurrenceInvoiceGroupRecId)
    {
        RecurrenceInvoice recurrenceInvoice;
        int numOfLines;

        numOfLines = any2int((select count(RecId) from recurrenceInvoice
                                where recurrenceInvoice.CustRecurrenceInvoiceGroup == _custRecurrenceInvoiceGroupRecId).RecId);

        return numOfLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkflowState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>WorkflowApprovalState</c> and <c>WorkflowApprovalStatus</c> fields of the
    /// <c>CustRecurrenceInvoiceGroup</c> table, depending on the workflow events that occurred.
    /// </summary>
    /// <param name="_custRecurrenceInvoiceGroupRecId">
    /// The record ID of the table that is associated with the workflow.
    /// </param>
    /// <param name="_recurrenceInvoiceWorkflowState">
    /// The workflow state to set.
    /// </param>
    /// <remarks>
    /// The method is called from the workflow event handler classes
    /// </remarks>
    public static void setWorkflowState(RecId _custRecurrenceInvoiceGroupRecId, CustFreeInvoiceWFApprovalState _recurrenceInvoiceWorkflowState)
    {
        CustRecurrenceInvoiceGroup custRecurrenceInvoiceGroup;

        ttsbegin;

        custRecurrenceInvoiceGroup = CustRecurrenceInvoiceGroup::find(_custRecurrenceInvoiceGroupRecId, true);
        custRecurrenceInvoiceGroup.WorkflowApprovalState = _recurrenceInvoiceWorkflowState;

        switch (_recurrenceInvoiceWorkflowState)
        {
            case CustFreeInvoiceWFApprovalState::Submitted:
                custRecurrenceInvoiceGroup.WorkflowApprovalStatus = CustFreeInvoiceWFApprovalStatus::Submitted;
                break;

            case CustFreeInvoiceWFApprovalState::NotSubmitted:
                custRecurrenceInvoiceGroup.WorkflowApprovalStatus = CustFreeInvoiceWFApprovalStatus::Draft;
                break;

            case CustFreeInvoiceWFApprovalState::PendingComplete:
                custRecurrenceInvoiceGroup.WorkflowApprovalStatus = CustFreeInvoiceWFApprovalStatus::PendingCompletion;
                break;

            case CustFreeInvoiceWFApprovalState::Completed:
                custRecurrenceInvoiceGroup.WorkflowApprovalStatus = CustFreeInvoiceWFApprovalStatus::Completed;
                break;

            case CustFreeInvoiceWFApprovalState::PendingApproval:
                custRecurrenceInvoiceGroup.WorkflowApprovalStatus = CustFreeInvoiceWFApprovalStatus::PendingApproval;
                break;

            case CustFreeInvoiceWFApprovalState::Approved:
            case CustFreeInvoiceWFApprovalState::WorkflowCompleted:
                custRecurrenceInvoiceGroup.WorkflowApprovalStatus = CustFreeInvoiceWFApprovalStatus::Approved;
                break;

            case CustFreeInvoiceWFApprovalState::Returned:
                custRecurrenceInvoiceGroup.WorkflowApprovalStatus = CustFreeInvoiceWFApprovalStatus::Rejected;
                break;

            case CustFreeInvoiceWFApprovalState::ChangeRequest:
                custRecurrenceInvoiceGroup.WorkflowApprovalStatus = CustFreeInvoiceWFApprovalStatus::ChangeRequested;
                break;

            case CustFreeInvoiceWFApprovalState::PendingCancellation:
                custRecurrenceInvoiceGroup.WorkflowApprovalStatus = CustFreeInvoiceWFApprovalStatus::PendingCancellation;
                break;

            default:
                break;
        }

        custRecurrenceInvoiceGroup.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS318864</DeveloperDocumentation>
	<FormRef>custrecurrenceInvoicegroup</FormRef>
	<Label>@SYS318858</Label>
	<TableGroup>Worksheet</TableGroup>
	<TitleField1>RecurrenceInvoiceId</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>AccountsReceivable</Modules>
	<ReplacementKey>RecurrenceInvoiceIdIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>RecurrenceInvoice</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RecurrenceInvoice</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecurrenceInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Posted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkflowApprovalStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecurrenceInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecurrenceInvoiceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RecurrenceInvoice</Name>
			<Label>@SYS318922</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecurrenceInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkflowApprovalState</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Posted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkflowApprovalStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkflowPreview</Name>
			<Label>@SYS54744</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecurrenceInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Posted</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Posted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS22361</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RecurrenceInvoiceId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RecurrenceInvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkflowApprovalState</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>CustFreeInvoiceWFApprovalState</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkflowApprovalStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustFreeInvoiceWFApprovalStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>GenerationDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS318853</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InvoiceDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS57610</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RecurrenceInvoiceIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RecurrenceInvoiceId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>