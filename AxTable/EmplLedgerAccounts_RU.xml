<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EmplLedgerAccounts_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EmplLedgerAccounts_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId p1)
    {
        boolean ret = super(p1);

        if (ret)
        {
            switch (p1)
            {
                case (fieldNum(EmplLedgerAccounts_RU, SummaryLedgerDimension)) :
                    ret = MainAccount::checkAllowPosting(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(this.SummaryLedgerDimension));
                    break;

                case (fieldNum(EmplLedgerAccounts_RU,Num)) :
                    if ((this.AccountCode == TableGroupAll::Table    ||
                         this.AccountCode == TableGroupAll::GroupId) &&
                        ! this.Num)
                    {
                        ret = checkFailed("@SYS24729");
                    }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (ret &&
            (this.AccountCode == TableGroupAll::Table || this.AccountCode == TableGroupAll::GroupId) &&
            ! this.Num)
        {
           ret = checkFailed("@SYS24729");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionAttrNamesForCheck</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns set of dimension attributed
    /// </summary>
    /// <param name="_employeeId_RU">
    ///   Employee ID
    /// </param>
    /// <param name="_emplPostingProfile">
    ///  Posting profile
    /// </param>
    /// <returns>
    ///   Set of names of dimension atributes
    /// </returns>
    /// <exception cref="Exception::Error">
    ///   Posting profile not found
    /// </exception>
    //Get the set of dimension attribute names to checking in settlement
    public static Set dimensionAttrNamesForCheck(
        EmployeeId_RU           _employeeId_RU,
        EmplPostingProfile_RU   _emplPostingProfile = '')
    {
        EmplLedgerAccounts_RU emplLedgerAccounts;
        EmployeeGroupId_RU    emplGroupId;
        EmplPostingProfile_RU emplPostingProfile = _emplPostingProfile;

        if (!emplPostingProfile)
        {
            emplPostingProfile = EmplParameters_RU::find().PostingProfile;
            if (!emplPostingProfile)
            {
                throw error("@GLS103502");
            }
        }

        emplLedgerAccounts = EmplLedgerAccounts_RU::findByProfile(emplPostingProfile, TableGroupAll::Table, _employeeId_RU);

        if (!emplLedgerAccounts)
        {
            emplGroupId = HcmWorkerGroup_RU::findByEmployeeId(_employeeId_RU).EmployeeGroupId;
            if (emplGroupId)
            {
                emplLedgerAccounts = EmplLedgerAccounts_RU::findByProfile(emplPostingProfile, TableGroupAll::GroupId, emplGroupId);
            }
        }

        if (!emplLedgerAccounts)
        {
            emplLedgerAccounts = EmplLedgerAccounts_RU::findByProfile(emplPostingProfile, TableGroupAll::All);
        }

        if (emplLedgerAccounts.DimensionHierarchy && DimensionHierarchy::exist(emplLedgerAccounts.DimensionHierarchy))
        {
            return DimensionHierarchyHelper::dimensionAttrExt_RU(DimensionHierarchy::find(emplLedgerAccounts.DimensionHierarchy).RecId);
        }

        return new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existProfile</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Does the profile exist in the table
    /// </summary>
    /// <param name="_emplPostingProfile">
    ///   profile
    /// </param>
    /// <param name="_accountCode">
    ///   type of association
    /// </param>
    /// <param name="_key">
    ///   employee or group ID
    /// </param>
    /// <returns>
    ///  true if exists
    /// </returns>
    public static boolean existProfile(EmplPostingProfile_RU  _emplPostingProfile,
                                              TableGroupAll          _accountCode,
                                              EmployeeId_RU          _key = '')
    {
        EmplLedgerAccounts_RU emplLedgerAccounts;

        if (_emplPostingProfile && _accountCode)
        {
            if (_key)
            {
                select firstonly emplLedgerAccounts
                    where emplLedgerAccounts.PostingProfile == _emplPostingProfile
                       && emplLedgerAccounts.Num            == _key
                       && emplLedgerAccounts.AccountCode    == _accountCode;
            }
            else
            {
                select firstonly emplLedgerAccounts
                    where emplLedgerAccounts.PostingProfile == _emplPostingProfile
                       && emplLedgerAccounts.AccountCode    == _accountCode;
            }
        }
        return _emplPostingProfile && _accountCode && emplLedgerAccounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>EmplLedgerAccounts_RU</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The RecId of the EmplLedgerAccounts_RU record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>EmplLedgerAccounts_RU</c> table; otherwise, an empty record.
    /// </returns>
    public static EmplLedgerAccounts_RU find(
        RecId              _recId,
        boolean            _forupdate = false,
        ConcurrencyModel   _concurrencyModel = ConcurrencyModel::Auto)
    {
        EmplLedgerAccounts_RU emplLedgerAccounts;

        emplLedgerAccounts.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            emplLedgerAccounts.concurrencyModel(_concurrencyModel);
        }

        select firstonly emplLedgerAccounts
            where emplLedgerAccounts.RecId == _recId;

        return emplLedgerAccounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProfile</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Finds record by a profile
    /// </summary>
    /// <param name="_emplPostingProfile">
    ///   posting profile
    /// </param>
    /// <param name="_accountCode">
    ///   account code
    /// </param>
    /// <param name="_key">
    ///   employee ID
    /// </param>
    /// <param name="_forUpdate">
    ///  select for update
    /// </param>
    /// <returns>
    ///  record found
    /// </returns>
    public static EmplLedgerAccounts_RU findByProfile(EmplPostingProfile_RU  _emplPostingProfile,
                                                      TableGroupAll          _accountCode,
                                                      EmployeeId_RU          _key = '',
                                                      boolean                _forUpdate = false)
    {
        EmplLedgerAccounts_RU emplLedgerAccounts;

        if (_emplPostingProfile)
        {
            emplLedgerAccounts.selectForUpdate(_forUpdate);

            if (_key)
            {
                select firstonly emplLedgerAccounts
                    where emplLedgerAccounts.PostingProfile == _emplPostingProfile
                       && emplLedgerAccounts.Num            == _key
                       && emplLedgerAccounts.AccountCode    == _accountCode;
            }
            else
            {
                select firstonly emplLedgerAccounts
                    where emplLedgerAccounts.PostingProfile == _emplPostingProfile
                       && emplLedgerAccounts.AccountCode    == _accountCode;
            }
        }
        return emplLedgerAccounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Summary ledger account
    /// </summary>
    /// <param name="_employeeId">
    ///  ID of employee
    /// </param>
    /// <param name="_emplPostingProfile">
    ///  Posting profile
    /// </param>
    /// <param name="_showErrors">
    ///   show errors
    /// </param>
    /// <returns>
    ///   Account
    /// </returns>
    /// <exception cref="Exception::Error">
    ///   Throws exception if account can not be found
    /// </exception>

    public static LedgerDimensionDefaultAccount summaryLedgerDimension(
        EmployeeId_RU          _employeeId,
        EmplPostingProfile_RU  _emplPostingProfile  = '',
        boolean                _showErrors          = true)
    {
        LedgerDimensionDefaultAccount   defaultAccount;
        EmployeeGroupId_RU              emplGroupId;
        EmplPostingProfile_RU           emplPostingProfile = _emplPostingProfile;

        if (!emplPostingProfile)
        {
            emplPostingProfile = EmplParameters_RU::find().PostingProfile;
        }

        if (emplPostingProfile)
        {
            defaultAccount = EmplLedgerAccounts_RU::findByProfile(emplPostingProfile, TableGroupAll::Table, _employeeId).SummaryLedgerDimension;

            if (!defaultAccount)
            {
                emplGroupId = HcmWorkerGroup_RU::findByEmployeeId(_employeeId).EmployeeGroupId;
                if (emplGroupId)
                {
                    defaultAccount = EmplLedgerAccounts_RU::findByProfile(emplPostingProfile, TableGroupAll::GroupId, emplGroupId).SummaryLedgerDimension;
                }
            }

            if (!defaultAccount)
            {
                defaultAccount = EmplLedgerAccounts_RU::findByProfile(emplPostingProfile, TableGroupAll::All).SummaryLedgerDimension;
            }
        }
        else
        {
            warning("@GLS103502");
        }

        if (!defaultAccount && _showErrors)
        {
            throw error(strFmt("@GLS103501", _employeeId, emplPostingProfile));
        }

        return defaultAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS27773";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>CZ,EE,HU,LT,LV,PL,RU</CountryRegionCodes>
	<DeveloperDocumentation>@GLS103499</DeveloperDocumentation>
	<FormRef>EmplPosting_RU</FormRef>
	<Label>@GLS103499</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>PostingProfile</TitleField1>
	<TitleField2>SummaryLedgerDimension</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>ProfileAccountIdx</ClusteredIndex>
	<Modules>Expense</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>ProfileAccountIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SummaryLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Num</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Num</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Num</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionHierarchy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LedgerPosting</Name>
			<Label>@SYS3881</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SummaryLedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DimensionHierarchy</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS79305</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Num</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Num</ExtendedDataType>
			<Label>@SYS112248</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EmplPostingProfile_RU</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SummaryLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@SYS11733</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SumLedgerDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SummaryLedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimensionHierarchyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DimensionHierarchy</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProfileAccountIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PostingProfile</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Num</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionHierarchy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionHierarchy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionHierarchy</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EmplLedgerAccounts_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DimensionHierarchy</Name>
					<Field>DimensionHierarchy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>EmplLedger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EmplLedger_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EmplLedger</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>EmplLedgerAccounts_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile</Name>
					<SourceEDT>EmplPostingProfile_RU</SourceEDT>
					<Field>PostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>EmployeeTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EmployeeTable_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EmployeeTable_RU</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>EmplLedgerAccounts_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>AdvHolder_Extern</Name>
					<RelatedField>AdvHolder</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Num</Name>
					<Field>Num</Field>
					<RelatedField>EmployeeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountCode</Name>
					<Field>AccountCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>HcmWorkerGroup_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorkerGroup_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorkerGroup_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EmplLedgerAccounts_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Num</Name>
					<Field>Num</Field>
					<RelatedField>EmployeeGroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountCode</Name>
					<Field>AccountCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SummaryLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SumLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EmplLedgerAccounts_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SummaryLedgerDimension</Name>
					<Field>SummaryLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>