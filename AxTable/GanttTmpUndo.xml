<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GanttTmpUndo</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class GanttTmpUndo extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFieldValueStr</Name>
				<Source><![CDATA[
    public str getFieldValueStr()
    {
        GanttTableField ganttTableField;
        if (!this.RefTableId || !this.RefFieldId)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        ganttTableField = GanttTableField::newFieldData(this.RefTableId, this.RefFieldId);

        return GanttTableField::fieldValue2Str(ganttTableField, this.getGanttFieldValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGanttFieldValue</Name>
				<Source><![CDATA[
    public anytype getGanttFieldValue()
    {
        anytype         value;
        Types           valueType;
        SysDictField    sysDictField;

        if (!this.RefTableId || !this.RefFieldId)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        sysDictField = new SysDictField(this.RefTableId, this.RefFieldId);

        valueType = sysDictField.baseType();

        switch (valueType)
        {
            case Types::Guid:

                value = this.ValueGuid;
                break;

            case Types::String:
            case Types::RString:
            case Types::VarString:

                value = this.ValueStr;
                break;

            case Types::Integer:
                //need to distinguish between true integers and times
                if (isTypeTime(sysDictField.typeName()))
                {
                    value = this.ValueTime;
                }
                else
                {
                    value = this.ValueInt;
                }
                break;

            case Types::Int64:

                value = this.ValueInt64;
                break;

            case Types::Real:

                value = this.ValueReal;
                break;

            case Types::Date:

                value = this.ValueDate;
                break;

            case Types::UtcDateTime:

                value = this.ValueDateTime;
                break;

            case Types::Enum:

                value = this.ValueEnum;
                break;

            case Types::Container:
                value = this.ValueCon;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReferences</Name>
				<Source><![CDATA[
    public void initReferences(tableId  _refTableId,
                               fieldId  _refFieldId,
                               RecId    _refRecId)
    {
        this.RefTableId = _refTableId;
        this.RefFieldId = _refFieldId;
        this.RefRecId   = _refRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldName</Name>
				<Source><![CDATA[
    public FieldName modifiedFieldName()
    {
        return fieldid2name(this.RefTableId, this.RefFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldValueStr</Name>
				<Source><![CDATA[
    public void setFieldValueStr(str _strValue)
    {
        SysDictField    sysDictField;
        Types           valueType;
        anytype         anyValue;

        DictEnum        dictEnum;

        if (!this.RefTableId || !this.RefFieldId)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        sysDictField    = new SysDictField(this.RefTableId, this.RefFieldId);
        valueType       = sysDictField.baseType();

        switch (valueType)
        {
            case Types::Guid:

                anyValue = str2guid(_strValue);
                break;

            case Types::String:
            case Types::RString:
            case Types::VarString:

                anyValue = _strValue;
                break;

            case Types::Integer:
                //need to distinguish between true integers and times
                if (isTypeTime(sysDictField.typeName()))
                {
                    anyValue = str2time(_strValue);
                }
                else
                {
                    anyValue = str2int(_strValue);
                }
                break;

            case Types::Int64:

                anyValue = str2int64(_strValue);
                break;

            case Types::Real:

                anyValue = str2num(_strValue);
                break;

            case Types::Date:

                anyValue = str2date(_strValue, GanttTableField::date2StrSequence());
                break;

            case Types::UtcDateTime:

                anyValue = str2datetime(_strValue, GanttTableField::date2StrSequence());
                break;

            case Types::Enum:

                dictEnum  = new DictEnum(sysDictField.enumId());
                anyValue  = dictEnum.name2Value(_strValue);
                break;

            case Types::Container:
                anyValue = str2con(_strValue);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        this.setGanttFieldValue(anyValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGanttFieldValue</Name>
				<Source><![CDATA[
    public void setGanttFieldValue(anytype _anyValue)
    {
        Types           valueType;
        SysDictField    sysDictField;

        if (!this.RefTableId || !this.RefFieldId)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        sysDictField    = new SysDictField(this.RefTableId, this.RefFieldId);
        valueType       = sysDictField.baseType();

        switch (valueType)
        {
            case Types::Guid:

                this.ValueGuid = _anyValue;
                break;

            case Types::String:
            case Types::RString:
            case Types::VarString:

                this.ValueStr = _anyValue;
                break;

            case Types::Integer:
                //need to distinguish between true integers and times
                if (isTypeTime(sysDictField.typeName()))
                {
                    this.ValueTime = _anyValue;
                }
                else
                {
                    this.ValueInt = _anyValue;
                }
                break;

            case Types::Int64:

                this.ValueInt64 = _anyValue;
                break;

            case Types::Real:

                this.ValueReal = _anyValue;
                break;

            case Types::Date:

                this.ValueDate = _anyValue;
                break;

            case Types::UtcDateTime:

                this.ValueDateTime = _anyValue;
                break;

            case Types::Enum:

                this.ValueEnum  = _anyValue;
                break;

            case Types::Container:
                this.ValueCon = _anyValue;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@SYS14794</Label>
	<ClusteredIndex></ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<PrimaryIndex></PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ModificationAction</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>GanttModificationAction</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ModificationId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>GanttModificationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefFieldId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FieldId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TTSId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>GanttTTSId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>ValueCon</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KeyData</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValueDate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SchedDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ValueEnum</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>ValueGuid</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SysGuid</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ValueInt</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ValueInt64</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ValueReal</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RealBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ValueStr</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>GanttUndoString</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>ValueTime</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SchedTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ValueDateTime</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SchedDateTime</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TTSIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TTSId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ModificationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>