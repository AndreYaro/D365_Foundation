<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustInvoiceTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountDisc_RU</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountDisc_RU(CustInvoiceJour _custInvoiceJour)
    {
        return InventPosting::accountItemLedgerDimensionFromParameters(
            this.buildAccountItemLedgerDimensionParameter(
                InventAccountType::SalesDisc,
                _custInvoiceJour,
                this.inventDim()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountSales_RU</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountSales_RU(CustInvoiceJour _custInvoiceJour)
    {
        if (this.LedgerDimension)
        {
            return this.LedgerDimension;
        }

        return InventPosting::accountItemLedgerDimensionFromParameters(
            this.buildAccountItemLedgerDimensionParameter(
                InventAccountType::SalesRevenue,
                _custInvoiceJour,
                this.inventDim()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountDiscAmount</Name>
				<Source><![CDATA[
    AmountCur amountDiscAmount()
    {
        return this.lineAmountPreSubOfDiscAmount() - this.lineAmountPreSubOfDiscPercent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountDiscPercentInclTax</Name>
				<Source><![CDATA[
    AmountCur amountDiscPercentInclTax()
    {
        return this.lineAmountPreSubOfDiscPercentInclTax() - this.lineAmountInclTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountExclTax</Name>
				<Source><![CDATA[
    AmountCur amountExclTax(AmountCur _amountCur)
    {
        Percent cashDiscPercent;

        if (TaxCashDiscountParametersHelper::isCashDiscDeductedBeforeTaxCalculation(this.custInvoiceJour().TableId, this.custInvoiceJour().RecId))
        {
            cashDiscPercent = CashDisc::find(this.custInvoiceJour().CashDiscCode).Percent;
        }

        return Tax::baseAmountExclTax(this.TaxGroup,
                                      this.TaxItemGroup,
                                      this.InvoiceDate,
                                      this.CurrencyCode,
                                      _amountCur,
                                      TaxModuleType::Sales,
                                      this.Qty,
                                      this.SalesUnit,
                                      this.ItemId,
                                      TaxDirection::OutgoingTax,
                                      cashDiscPercent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcContributionMargin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the contribution margin for the currently selected <c>CustInvoiceTrans</c> record.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// A <c>CustInvoiceJour</c> record to use when calculating the contribution margin; optional.
    /// </param>
    /// <returns>
    /// The <c>SalesContributionMargin</c> value for the currently selected <c>CustInvoiceTrans</c> record.
    /// </returns>
    SalesContributionMargin calcContributionMargin(CustInvoiceJour _custInvoiceJour = null)
    {
        SalesCostValue salesCostValue;
        CustInvoiceJour custInvoiceJour = _custInvoiceJour;

        if (prmisDefault(_custInvoiceJour))
        {
            custInvoiceJour = this.custInvoiceJour();
        }

        if (custInvoiceJour.ExchRate)
        {
            salesCostValue = this.costValue();

            return (this.LineAmount - CurrencyExchangeHelper::curAmount(salesCostValue, this.CurrencyCode, this.InvoiceDate, Currency::noYes2UnknownNoYes(custInvoiceJour.Triangulation), custInvoiceJour.ExchRate, custInvoiceJour.ExchRateSecondary))
                                                          // <GBR>
                                                          + this.taxAmountIncludedCur_BR()
                                                          // </GBR>
                                                          ;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcContributionRatio</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the contribution ratio for the currently selected <c>CustInvoiceTrans</c> record.
    /// </summary>
    /// <param name="_contributionMargin">
    /// The <c>SalesContributionMargin</c> value to use when calculating the contribution margin; optional.
    /// </param>
    /// <returns>
    /// The <c>SalesContributionRatio</c> value for the currently selected <c>CustInvoiceTrans</c> record.
    /// </returns>
    SalesContributionRatio calcContributionRatio(SalesContributionMargin _contributionMargin = 0)
    {
        SalesContributionMargin contributionMargin = _contributionMargin;

        if (prmisDefault(_contributionMargin))
        {
            contributionMargin = this.calcContributionMargin();
        }

        if (this.LineAmount)
        {
            return (contributionMargin / this.LineAmount) * 100;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>commissionLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount commissionLedgerDimension(CustInvoiceJour _custInvoiceJour)
    {
        // <GEERU>
        #isoCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return InventPosting::accountItemLedgerDimensionFromParameters(
                this.buildAccountItemLedgerDimensionParameter(
                    InventAccountType::SalesCommission,
                    _custInvoiceJour,
                    this.inventDim()));
        }
        else
        {
            // </GEERU>
            return InventPosting::accountItemLedgerDimensionFromParameters(
                this.buildAccountItemLedgerDimensionParameter(
                    InventAccountType::SalesCommission,
                    _custInvoiceJour));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>commissionOffsetLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount commissionOffsetLedgerDimension(CustInvoiceJour _custInvoiceJour)
    {
        return InventPosting::accountItemLedgerDimensionFromParameters(
            this.buildAccountItemLedgerDimensionParameter(
                InventAccountType::SalesCommissionOffsetAccount,
                _custInvoiceJour,
                this.inventDim()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAccountItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting account ledger dimension for an item.
    /// </summary>
    /// <param name = "_accountType">An inventory account type.</param>
    /// <param name = "_busRelAccount">A prospect.</param>
    /// <param name = "_custGroupId">A customer group id.</param>
    /// <param name = "_inventDim">An inventory dimension.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingAccountItemLedgerDimensionParameters buildAccountItemLedgerDimensionParameter(InventAccountType _accountType, CustInvoiceJour _custInvoiceJour, InventDim _inventDim = null)
    {
        return InventPostingAccountItemLedgerDimensionParameters::newFromParameters(
            _accountType,
            this.ItemId,
            this.inventTable().itemGroupId(),
            this.SalesCategory,
            _custInvoiceJour.OrderAccount,
            _custInvoiceJour.CustGroup,
            this.TaxGroup,
            _inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>contributionMargin</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display SalesContributionMargin contributionMargin()
    {
        return this.calcContributionMargin();
    }

]]></Source>
			</Method>
			<Method>
				<Name>contributionMarginMST</Name>
				<Source><![CDATA[
    display SalesContributionMarginMST contributionMarginMST()
    {
        SalesCostValue salesCostValue;

        salesCostValue = this.costValue();

        return this.LineAmountMST - salesCostValue
              // <GBR>
              + this.taxAmountIncludedMST_BR()
              // </GBR>
              ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCompanyCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Dispalys current accounting currency.
    /// </summary>
    /// <returns>
    /// The accounting currency code.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display CurrencyCode displayCompanyCurrencyCode()
    {
        return Ledger::accountingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>contributionRatio</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display SalesContributionRatio contributionRatio()
    {
        return this.calcContributionRatio();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set that to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was previously instantiated with the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>

    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy _dimensionCopy = DimensionCopy::newFromTable(this,
                                                                      this.companyInfo().RecId
                                                                      )
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costValue</Name>
				<Source><![CDATA[
    display SalesCostValue costValue()
    {
        return -this.inventCostAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoicedItemPreviewPaneTitle</Name>
				<Source><![CDATA[
    public display Caption custInvoicedItemPreviewPaneTitle()
    {
        return strFmt("@SYS327590", this.ItemId, this.inventTable().itemName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceJour</Name>
				<Source><![CDATA[
    CustInvoiceJour custInvoiceJour(boolean _update = false)
    {
        if (this.ParentRecId)
        {
            return CustInvoiceJour::findRecId(this.ParentRecId, _update);
        }

        return CustInvoiceJour::findFromCustInvoiceTrans(this.SalesId,this.InvoiceId,this.InvoiceDate,this.NumberSequenceGroup,_update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceLineProjCategoryId</Name>
				<Source><![CDATA[
    display ProjCategoryId custInvoiceLineProjCategoryId()
    {
        CustInvoiceTable custInvoiceTable;
        CustInvoiceLine custInvoiceLine;

        custInvoiceTable = this.custInvoiceJour().custInvoiceTable();

        select ProjCategoryId from custInvoiceLine
            where custInvoiceLine.ParentRecId == custInvoiceTable.RecId &&
                custInvoiceLine.LineNum == this.LineNum;

        return custInvoiceLine.ProjCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceLineProjId</Name>
				<Source><![CDATA[
    display ProjId custInvoiceLineProjId()
    {
        CustInvoiceTable custInvoiceTable;
        CustInvoiceLine custInvoiceLine;

        custInvoiceTable = this.custInvoiceJour().custInvoiceTable();

        select ProjId from custInvoiceLine
            where custInvoiceLine.ParentRecId == custInvoiceTable.RecId &&
                custInvoiceLine.LineNum == this.LineNum;

        return custInvoiceLine.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceTrans_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustInvoiceTrans_BR</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CustInvoiceTrans_BR</c> record associated with the current record.
    /// </returns>
    public CustInvoiceTrans_BR custInvoiceTrans_BR()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(CustInvoiceTrans_BR));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceTrans_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustInvoiceTrans_IN</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CustInvoiceTrans_IN</c> record associated with the current record.
    /// </returns>
    public CustInvoiceTrans_IN custInvoiceTrans_IN()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(CustInvoiceTrans_IN));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceTrans_Intrastat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves <c>CustInvoiceTrans_Intrastat</c> extension table record.
    /// </summary>
    /// <returns>
    /// The extension table record related to current record.
    /// </returns>
    public CustInvoiceTrans_Intrastat custInvoiceTrans_Intrastat()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(CustInvoiceTrans_Intrastat));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceTrans_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustInvoiceTrans_RU</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CustInvoiceTrans_RU</c> record associated with the current record.
    /// </returns>
    public CustInvoiceTrans_RU custInvoiceTrans_RU()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(CustInvoiceTrans_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceTrans_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustInvoiceTrans_W</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CustInvoiceTrans_W</c> record associated with the current record.
    /// </returns>
    public CustInvoiceTrans_W custInvoiceTrans_W()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(CustInvoiceTrans_W));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTable_InvoiceAccount</Name>
				<Source><![CDATA[
    CustTable custTable_InvoiceAccount()
    {
        return this.custInvoiceJour().custTable_InvoiceAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddress</Name>
				<Source><![CDATA[
    display LogisticsAddressing deliveryAddress()
    {
        return LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets delivery date of the <c>CustPackingSlipTrans</c> table.
    /// </summary>
    /// <param name="_custInvoiceTrans">
    ///    The <c>CustInvoiceTrans</c> buffer.
    /// </param>
    /// <returns>
    /// Delivery date of the <c>CustPackingSlipTrans</c> table.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display SalesShippingDate deliveryDate(CustInvoiceTrans _custInvoiceTrans)
    {
        TransDate deliveryDate;
        CustPackingSlipTrans custPackingSlipTrans;
        NumberOfRecords oneSubLines = 1;

        if (CustPackingSlipTrans::subLines(_custInvoiceTrans) == oneSubLines)
        {
            select firstonly custPackingSlipTrans
                where custPackingSlipTrans.InvoiceTransRefRecId == _custInvoiceTrans.RecId;

            deliveryDate = custPackingSlipTrans.custPackingslipJour().DeliveryDate;
        }

        return deliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax amount for the posted invoice.
    /// </summary>
    /// <returns>
    /// The tax amount for the posted invoice.
    /// </returns>
    public display TaxAmount displayTaxAmount()
    {
        TaxAmount taxAmount = 0;
        TaxTrans taxTrans;
        CustInvoiceJour custInvoiceJour = this.custInvoiceJour();

        if (this.InvoiceId)
        {
            // Use the source regulate tax amount from TaxTrans for posted invoice
            select sum(SourceRegulateAmountCur) from taxTrans
                where taxTrans.SourceRecId == this.RecId
                    && taxTrans.TransDate == custInvoiceJour.InvoiceDate
                    && taxTrans.Voucher == custInvoiceJour.LedgerVoucher;

            taxAmount = -taxTrans.SourceRegulateAmountCur;
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTaxWithholdAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the tax withhold amount.
    /// </summary>
    /// <returns>
    /// The amount of the reporting currency.
    /// </returns>
    display AmountCur displayTaxWithholdAmount_IN()
    {
        TaxWithholdTrans_IN taxWithholdTransLoc; // for Header level display, not Grid.
        AmountCur amountCur;

        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            select firstonly sum(TaxWithholdAmountCur), TaxType
                from taxWithholdTransLoc group by TaxType
                   where taxWithholdTransLoc.Invoice == this.InvoiceId
                      && taxWithholdTransLoc.LineNum == this.LineNum;

            switch (taxWithholdTransLoc.TaxType)
            {
                case TaxWithholdCodeType_IN::TCS :
                    amountCur = abs(taxWithholdTransLoc.TaxWithholdAmountCur);
                    break;

                case TaxWithholdCodeType_IN::TDS:
                    amountCur = -abs(taxWithholdTransLoc.TaxWithholdAmountCur);
                    break;
            }
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets PackingSlipId of the <c>CustPackingSlipTrans</c> table.
    /// </summary>
    /// <param name="_custInvoiceTrans">
    ///    The <c>CustInvoiceTrans</c> buffer.
    /// </param>
    /// <returns>
    /// PackingSlipId of the <c>CustPackingSlipTrans</c> table.
    /// </returns>
    public Num documentId(CustInvoiceTrans _custInvoiceTrans)
    {
        Num documentId;
        CustPackingSlipTrans custPackingSlipTrans;
        NumberOfRecords oneSubLines = 1;
        NumberOfRecords zeroSubLines = 0;

        switch (CustPackingSlipTrans::subLines(this))
        {
            case zeroSubLines:
                documentId = '';
                break;

            case oneSubLines:
                select firstonly PackingSlipId from custPackingSlipTrans
                    where custPackingSlipTrans.InvoiceTransRefRecId == _custInvoiceTrans.RecId;
                documentId = custPackingSlipTrans.PackingSlipId;
                break;

            //More than one journal line attached to the parm line
            default:
                documentId = '*';
                break;
        }

        return documentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDomesticSalesTaxGroup_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits the domestic sales tax group for the export sales.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the domestic sales tax group value has been modified.
    /// </param>
    /// <param name="_domesticSalesTaxGroup">
    /// The new domestic sales tax group value for the export sales.
    /// </param>
    /// <returns>
    /// The domestic sales tax group value for the export sales.
    /// </returns>
    /// <remarks>
    /// This method will not set the new domestic sales tax group value for the export sales if the new value is not a valid sales tax group.
    /// </remarks>
    public edit PlSalesDomesticTaxGroup editDomesticSalesTaxGroup_PL(boolean _set, PlSalesDomesticTaxGroup _domesticSalesTaxGroup)
    {
        #isoCountryRegionCodes
        ExportSalesInvoiceLineDomesticTaxGroup exportSalesInvoiceLineDomesticTaxGroup;
        PlSalesDomesticTaxGroup domesticSalesTaxGroup;

        if (isConfigurationkeyEnabled(configurationKeyNum(LedgerBasicSalesTax)) &&
            SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            if (_set)
            {
                if (!_domesticSalesTaxGroup || TaxGroupHeading::checkExist(_domesticSalesTaxGroup))
                {
                    update_recordset exportSalesInvoiceLineDomesticTaxGroup
                        setting
                            DomesticSalesTaxGroup = _domesticSalesTaxGroup
                        where exportSalesInvoiceLineDomesticTaxGroup.CustInvoiceTrans == this.RecId;

                    domesticSalesTaxGroup = _domesticSalesTaxGroup;
                }
            }
            else
            {
                domesticSalesTaxGroup = ExportSalesInvoiceLineDomesticTaxGroup::findDomesticSalesTaxGroup(this.RecId);
            }
        }

        return domesticSalesTaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    display CustExchRate exchRate()
    {
        return this.custInvoiceJour().ExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsCorrLink_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there is link between this record and corrected record, e.g. this record is corrected record.
    /// </summary>
    /// <returns>
    /// True if link exists; Otherwise, false.
    /// </returns>
    public boolean existsCorrLink_RU()
    {
        return this.RecId &&
            (select firstonly RecId from custInvoiceTransCorrLink_RU
                where custInvoiceTransCorrLink_RU.TransRecId == this.RecId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fullyFactured_RU</Name>
				<Source><![CDATA[
    display FacturedFully_RU fullyFactured_RU()
    {
        if (this.Qty)
        {
            return this.custInvoiceTrans_RU().FacturedQty_RU == this.Qty;
        }
        else
        {
            return this.custInvoiceTrans_RU().FacturedFully_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIndirectTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the <c>sum SourceRegulateAmountCur</c> value for the custinvoicetrans.
    /// </summary>
    /// <returns>
    /// The <c>sum SourceRegulateAmountCur</c> value for the custinvoicetrans.
    /// </returns>
    ///
    display AmountCur getIndirectTax()
    {
        return TaxTrans::getTaxAmountIncludedInInvoice_IN(this.TableId, this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the <c>ItemType</c> value for the item.
    /// </summary>
    /// <returns>
    /// The <c>ItemType</c> value for the item.
    /// </returns>
    display ItemType getItemType()
    {
        return InventTable::find(this.ItemId).ItemType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>grossAmount</Name>
				<Source><![CDATA[
    display AmountCur grossAmount()
    {
        return this.LineAmount + this.SumLineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>grossAmountInclTax</Name>
				<Source><![CDATA[
    display AmountCur grossAmountInclTax()
    {
        AmountCur grossAmount=0;

        if (this.Qty)
        {
            grossAmount = PriceDisc::price2Amount(this.SalesPrice,
                                                  this.PriceUnit,
                                                  0.0,
                                                  this.Qty, // sales deliver now
                                                  this.Qty, // sales qty
                                                  this.SalesMarkup,
                                                  0.0,
                                                  this.CurrencyCode,
                                                  this.grossAmount());
        }

        return grossAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>grossAmountMST</Name>
				<Source><![CDATA[
    display AmountMST grossAmountMST()
    {
        return this.LineAmountMST + this.SumLineDiscMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceJour</Name>
				<Source><![CDATA[
    // Need to format the address for free text invoices.
    void initFromCustInvoiceJour(CustInvoiceJour _custInvoiceJour)
    {
        // <GEEHU>
        #ISOCountryRegionCodes
        // </GEEHU>

        this.SalesId = _custInvoiceJour.SalesId;
        this.InvoiceId = _custInvoiceJour.InvoiceId;
        this.InvoiceDate = _custInvoiceJour.InvoiceDate;
        this.NumberSequenceGroup = _custInvoiceJour.NumberSequenceGroup;
        this.CurrencyCode = _custInvoiceJour.CurrencyCode;
        this.ParentRecId = _custInvoiceJour.RecId;
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            // Set Delivery address, name, and mode.
            this.DeliveryPostalAddress = _custInvoiceJour.DeliveryPostalAddress;
            this.mcrDeliveryName = _custInvoiceJour.DeliveryName;
            this.mcrDlvMode = _custInvoiceJour.DlvMode;
        }

        // <GEEHU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            this.IntrastatFulfillmentDate_HU = _custInvoiceJour.IntrastatFulfillmentDate_HU;
        }
        // </GEEHU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies data from the specified table to the <c>CustInoiceTrans</c> table.
    /// </summary>
    /// <param name="_custInvoiceLine">
    ///    The <c>CustInvoiceTrans</c> buffer from which to copy data.
    /// </param>
    /// <param name="_tax">
    /// Instance of <c>Tax</c> class
    /// </param>
    public void initFromCustInvoiceLine(CustInvoiceLine _custInvoiceLine,
                                        Tax _tax = null)
    {
        //<GEERU>
        #ISOCountryRegionCodes
        InventDim inventDim; // GTD for free text invoice
        CustInvoiceTrans_RU custInvoiceTrans_RU;
        // </GEERU>

        //<GEEU>
        CustInvoiceTrans_W custInvoiceTransLoc_W;
        CustInvoiceTrans_W custInvoiceTrans_W;
        //</GEEU>

        // <GIN>
        CustInvoiceTrans_IN custInvoiceTrans_IN;
        TransTaxInformation transTaxInformation;
        boolean isCountryRegionIN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        // </GIN>

        CustInvoiceLine_W custInvoiceLine_W;

        this.LineNum = _custInvoiceLine.LineNum;
        this.Qty = _custInvoiceLine.Quantity;
        this.Name = _custInvoiceLine.InvoiceTxt;
        this.TaxGroup = _custInvoiceLine.TaxGroup;
        this.OverrideSalesTax = _custInvoiceLine.OverrideSalesTax;
        this.SalesPrice = _custInvoiceLine.UnitPrice;

        //<GIN>
        if (isCountryRegionIN)
        {
            transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(_custInvoiceLine);
        }
        //</GIN>

        // <GEEU><GEERU>
        this.LineAmount = _custInvoiceLine.amountExclTax_W(_custInvoiceLine.AmountCur, true, _tax);
        // </GEEU></GEERU>

        this.LedgerDimension = _custInvoiceLine.LedgerDimension;
        this.DefaultDimension = _custInvoiceLine.DefaultDimension;
        this.TaxItemGroup = _custInvoiceLine.TaxItemGroup;
        this.TaxAmount = _custInvoiceLine.TaxAmount;
        this.TaxWriteCode = _custInvoiceLine.TaxWriteCode;
        this.AssetId = _custInvoiceLine.AssetId;
        this.AssetBookId = _custInvoiceLine.AssetBookId;
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            this.BillingCode = _custInvoiceLine.BillingCode;
        }

        this.ReasonRefRecId = ReasonTableRef::checkCreateInCompany(_custInvoiceLine.ReasonRefRecId, this.DataAreaId);
        this.InventDimId = InventDim::inventDimIdBlank();

        //Intrastat
        this.OrigState = _custInvoiceLine.OrigState;
        this.OrigCountryRegionId= _custInvoiceLine.OrigCountryRegionId;
        this.Weight = _custInvoiceLine.Weight;
        this.IntrastatCommodity = _custInvoiceLine.IntrastatCommodity;
        this.ngpCodesTable_FR = _custInvoiceLine.ngpCodesTable_FR;
        this.Port = _custInvoiceLine.Port;
        this.StatProcId = _custInvoiceLine.StatProcId;
        this.TransactionCode = _custInvoiceLine.TransactionCode;
        this.Transport = _custInvoiceLine.Transport;

        if (_custInvoiceLine.custInvoiceTable().eInvoiceLineSpec == NoYes::Yes)
        {
            this.eInvoiceAccountCode = _custInvoiceLine.eInvoiceAccountCode;

            if (_custInvoiceLine.OrderLineReference_NO && CustTable::isCustPublic_NO(_custInvoiceLine.custInvoiceTable().InvoiceAccount))
            {
                this.OrderLineReference_NO = _custInvoiceLine.OrderLineReference_NO;
            }
        }

        this.SourceDocumentLine = _custInvoiceLine.SourceDocumentLine;

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            inventDim.InventGtdId_RU = _custInvoiceLine.InvoiceGtd_RU;
            this.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;
            this.PriceUnit = _custInvoiceLine.UnitPrice;
            this.SalesUnit = _custInvoiceLine.SalesUnit_RU;
            custInvoiceTrans_RU = this.custInvoiceTrans_RU();
            custInvoiceTrans_RU.AssetId_RU = _custInvoiceLine.AssetId_RU;
            this.packCustInvoiceTrans_RU(custInvoiceTrans_RU);
        }
        // </GEERU>

        // <GEEU>
        if (CustInvoiceTrans_W::isLegalEntityInCountryRegion())
        {
            custInvoiceTrans_W = this.custInvoiceTrans_W();

            // These _W fields are used in RU as well
            custInvoiceTrans_W.RefReturnInvoiceTrans_W = _custInvoiceLine.RefReturnInvoiceTrans_W;
            this.LineAmount = _custInvoiceLine.amountExclTax_W(_custInvoiceLine.AmountCur, true, _tax);

            custInvoiceTrans_W.CreditNoteInternalRef_W = _custInvoiceLine.CreditNoteInternalRef_PL;

            custInvoiceTrans_W.pkWiUCode_PL = _custInvoiceLine.pkWiUCode_PL;

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL, #isoCZ])
                && custInvoiceTrans_W.RefReturnInvoiceTrans_W)
            {
                select pkWiUCode_PL from custInvoiceTransLoc_W
                    where custInvoiceTransLoc_W.CustInvoiceTrans == custInvoiceTrans_W.RefReturnInvoiceTrans_W;

                custInvoiceTrans_W.pkWiUCode_PL = custInvoiceTransLoc_W.pkWiUCode_PL;
            }

            this.packCustInvoiceTrans_W(custInvoiceTrans_W);
        }
        // </GEEU>

        // <GIN>
        if (isCountryRegionIN)
        {
            custInvoiceTrans_IN = this.custInvoiceTrans_IN();

            if (TaxWithholdParameters_IN::checkTaxParameters()
                || TaxParameters::checkTaxParameters_IN())
            {
                custInvoiceTrans_IN.RegistrationLocation_IN = transTaxInformation.CompanyLocation;
                custInvoiceTrans_IN.CompanyLocation_IN = transTaxInformation.CompanyLocation;
            }
            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                CustInvoiceLineTaxExtensionIN custInvoiceLineTaxExtensionIN = _custInvoiceLine.custInvoiceLineTaxExtensionIN();
                custInvoiceTrans_IN.tdsGroup_IN = custInvoiceLineTaxExtensionIN.tdsGroup;
                custInvoiceTrans_IN.tcsGroup_IN = custInvoiceLineTaxExtensionIN.tcsGroup;
                custInvoiceTrans_IN.AssessableValue_IN = custInvoiceLineTaxExtensionIN.AssessableValueTransactionCurrency;
            }
            if (TaxParameters::checkTaxParameters_IN())
            {
                custInvoiceTrans_IN.TaxInformation_IN = transTaxInformation.TaxInformation;
                custInvoiceTrans_IN.ExciseRecordType_IN = transTaxInformation.ExciseRecordType;
                custInvoiceTrans_IN.ExciseTariffCodes_IN = transTaxInformation.ExciseTariffCodes;
                custInvoiceTrans_IN.ExciseType_IN = transTaxInformation.ExciseType;
                custInvoiceTrans_IN.CustomsTariffCodeTable_IN = transTaxInformation.CustomsTariffCode;
                custInvoiceTrans_IN.ServiceCodeTable_IN = transTaxInformation.ServiceCode;
                custInvoiceTrans_IN.SalesTaxFormTypes_IN = transTaxInformation.SalesTaxFormTypes;
            }

            this.packCustInvoiceTrans_IN(custInvoiceTrans_IN);
        }
        // </GIN>

        // <GMY>
        if (TaxGSTFeatureChecker_MY::isCountryRegionMY())
        {
            custInvoiceTrans_W = this.custInvoiceTrans_W();
            custInvoiceLine_W = _custInvoiceLine.custInvoiceLine_W();

            custInvoiceTrans_W.RefInvoiceID_MY = custInvoiceLine_W.RefInvoiceId_MY;
            custInvoiceTrans_W.RefInvoiceDate_MY = custInvoiceLine_W.RefInvoiceDate_MY;

            this.packCustInvoiceTrans_W(custInvoiceTrans_W);
        }
        // </GMY>

        if (TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled()
            || BrazilParameters::isEnabled())
        {
            this.TaxWithholdGroup_TH = _custInvoiceLine.TaxWithholdGroup;
            this.TaxWithholdItemGroupHeading_TH = _custInvoiceLine.TaxWithholdItemGroupHeading_TH;
        }

        if (MarkupPeriodChargeFeature::instance().isEnabled())
        {
            this.PeriodChargeInvoiceLineBaseFromDate = _custInvoiceLine.PeriodChargeInvoiceLineBaseFromDate;
            this.PeriodChargeInvoiceLineBaseToDate = _custInvoiceLine.PeriodChargeInvoiceLineBaseToDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    void initFromLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans_Asset ledgerJournalTrans_Asset;

        ledgerJournalTrans_Asset = _ledgerJournalTrans.findLedgerJournalTransAssetSibling();
        this.LineNum = _ledgerJournalTrans.LineNum;
        this.Qty = _ledgerJournalTrans.Qty;
        this.Name = _ledgerJournalTrans.Txt;
        this.TaxGroup = _ledgerJournalTrans.TaxGroup;
        this.DefaultDimension = _ledgerJournalTrans.DefaultDimension;
        this.TaxItemGroup = _ledgerJournalTrans.TaxItemGroup;
        this.TaxWriteCode = TaxTable::find(_ledgerJournalTrans.TaxCode).PrintCode;
        this.AssetId = ledgerJournalTrans_Asset.AssetId;
        this.AssetBookId = ledgerJournalTrans_Asset.BookId;

        LedgerJournalTransTaxExtension ledgerJournalTransTaxExtension = _ledgerJournalTrans.ledgerJournalTransTaxExtension();
        if (ledgerJournalTransTaxExtension)
        {
            this.OverrideSalesTax = ledgerJournalTransTaxExtension.OverrideSalesTax;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTrans_RU</Name>
				<Source><![CDATA[
    public void initFromLedgerJournalTrans_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        TaxCalculation taxCalculation;
        CustInvoiceTrans_RU custInvoiceTrans_RU;

        int sign = this.LineAmount >= 0 ? 1 : -1;
        TaxTrans taxTrans;
        TaxAmount lineAmountTax;
        TaxAmount taxAmountAdd;
        UnknownNoYes journalInclTax = _ledgerJournalTrans.ledgerJournalTable().LedgerJournalInclTax ?
                                          UnknownNoYes::Yes :
                                          UnknownNoYes::No;

        this.Name = _ledgerJournalTrans.Txt;
        this.TaxGroup = _ledgerJournalTrans.TaxGroup;
        this.DiscAmount = _ledgerJournalTrans.CashDiscAmount;
        this.TaxItemGroup = _ledgerJournalTrans.TaxItemGroup;

        lineAmountTax = Tax::taxTotalVoucherDateRecId_RU(_ledgerJournalTrans.Voucher,
                                                         _ledgerJournalTrans.TransDate,
                                                         _ledgerJournalTrans.RecId);
        if (lineAmountTax)
        {
            if (journalInclTax == UnknownNoYes::No)
            {
                taxAmountAdd = lineAmountTax;
                lineAmountTax = 0;
            }
            select taxTrans
                where taxTrans.Voucher == _ledgerJournalTrans.Voucher &&
                      taxTrans.TransDate == _ledgerJournalTrans.TransDate &&
                      (taxTrans.SourceRecId == _ledgerJournalTrans.RecId ||
                       taxTrans.SourceRecId == 0) &&
                      taxTrans.TaxOrigin != TaxOrigin::TaxReversed &&
                      taxTrans.TaxOrigin != TaxOrigin::Transfer;

            this.initFromTaxTrans_RU(taxTrans);
        }
        else
        {
            taxCalculation = LedgerJournalTrans::getTaxInstance(_ledgerJournalTrans.JournalNum, _ledgerJournalTrans.Voucher, _ledgerJournalTrans.Invoice, false, _ledgerJournalTrans);
            lineAmountTax = sign * taxCalculation.totalTaxAmountSingleLineIncludeUseTax(_ledgerJournalTrans.TableId, _ledgerJournalTrans.RecId, false);

            if (journalInclTax == UnknownNoYes::No)
            {
                taxAmountAdd = lineAmountTax;
                lineAmountTax = 0;
            }

            this.initFromTaxWorkTrans_RU(taxCalculation.tmpTaxWorkTrans(),
                                            _ledgerJournalTrans.TableId,
                                            _ledgerJournalTrans.RecId);
        }

        custInvoiceTrans_RU = this.custInvoiceTrans_RU();

        custInvoiceTrans_RU.vatAmount_RU = custInvoiceTrans_RU.vatAmount_RU * sign;
        custInvoiceTrans_RU.vatAmountMST_RU = custInvoiceTrans_RU.vatAmountMST_RU * sign;
        custInvoiceTrans_RU.ExciseAmount_RU = custInvoiceTrans_RU.ExciseAmount_RU * sign;
        custInvoiceTrans_RU.ExciseAmountMST_RU = custInvoiceTrans_RU.ExciseAmountMST_RU * sign;

        this.packCustInvoiceTrans_RU(custInvoiceTrans_RU);

        this.TaxAmount = lineAmountTax + taxAmountAdd;
        this.LineAmountTax = lineAmountTax;

        this.LineAmount = this.LineAmount - lineAmountTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRBOSalesTrans</Name>
				<Source><![CDATA[
    void initFromRBOSalesTrans(RetailTransactionSalesTrans salesTrans, CustAccount _custAccount, CurrencyCode _currency)
    {
        TaxItemGroupHeading tTaxItemGroupHeading;
        TaxGroupHeading tTaxGroupHeading;
        TaxOnItem tTaxOnItem;
        TaxGroupData tTaxGroupData;
        TaxWriteCode pTaxWriteCode;

        this.NumberSequenceGroup = CustTable::find(_custAccount).NumberSequenceGroup;

        // InvoiceId is set in the run method of RetailStatementPostNew. If this is called from other place invoiceId needs to be set in
        this.InvoiceDate = salesTrans.TransDate;
        this.InventTransId = salesTrans.InventTransId;
        this.InventDimId = salesTrans.InventDimId;
        this.ItemId = salesTrans.ItemId;
        this.LineNum = salesTrans.LineNum;
        this.Name = salesTrans.itemName();

        this.RetailCategory = EcoResProductCategory::findRetailCategoryByItem(salesTrans.ItemId);

        this.SalesId = salesTrans.TransactionId;
        this.CurrencyCode = _currency ? _currency : RetailStoreTable::find(salesTrans.Store).Currency; //*
        this.SalesUnit = salesTrans.Unit ? salesTrans.Unit : InventTableModule::find(salesTrans.ItemId,ModuleInventPurchSales::Sales).UnitId; // missing in salestrans

        this.TaxGroup = CustTable::find(_custAccount).TaxGroup;
        this.TaxItemGroup = salesTrans.TaxGroup;

        this.TaxAmount = -salesTrans.TaxAmount;
        this.TaxAmountMST = CurrencyExchangeHelper::mstAmount(this.TaxAmount, this.CurrencyCode, salesTrans.TransDate);

        this.Qty = -salesTrans.Qty;
        if (this.Qty != 0 && salesTrans.NetPrice != 0)
            this.DiscPercent = (( salesTrans.PeriodicDiscAmount + salesTrans.LineDscAmount ) / salesTrans.NetPrice ) * (100 / -salesTrans.Qty) ; // SalesDiscountPercentage

        this.LinePercent = this.DiscPercent;
        this.SumLineDisc = ( salesTrans.PeriodicDiscAmount + salesTrans.LineDscAmount );
        this.SumLineDiscMST = CurrencyExchangeHelper::mstAmount(this.SumLineDisc, this.CurrencyCode, salesTrans.TransDate);

        while select TaxItemGroup from tTaxItemGroupHeading
        exists join tTaxOnItem // get the possible tax codes. if they are in the taxGroupHeader then we add to string
        where tTaxItemGroupHeading.TaxItemGroup == tTaxOnItem.TaxItemGroup &&
                tTaxItemGroupHeading.TaxItemGroup == this.TaxItemGroup
        {
            select tTaxGroupHeading exists join tTaxGroupData
            where tTaxGroupHeading.TaxGroup == tTaxGroupData.TaxGroup &&
                    tTaxGroupHeading.TaxGroup == this.TaxGroup &&
                    tTaxGroupData.TaxCode == tTaxOnItem.TaxCode;

            pTaxWriteCode += tTaxGroupHeading ? TaxTable::find(tTaxGroupData.TaxCode).PrintCode : "" ;
        }

        this.TaxWriteCode = pTaxWriteCode;

        this.PriceUnit = salesTrans.UnitQty;

        this.SalesPrice = salesTrans.NetPrice; // SOPrice;

        this.QtyPhysical = 0;
        this.PartDelivery = 0;

        this.DefaultDimension = salesTrans.DefaultDimension ; //RetailStoreTable::find(salesTrans.store).dimension;

        if (this.Qty < 0)
        {
            this.TransactionCode = IntrastatParameters::find().DefaultCreditNote;
        }
        else
        {
            this.TransactionCode = IntrastatParameters::find().DefaultSalePurchase;
        }
        this.DlvDate = salesTrans.TransDate;

        // LineAmount changed - Begin
        this.LineAmount = -(salesTrans.NetAmount);
        this.LineAmountMST = CurrencyExchangeHelper::mstAmount(this.LineAmount, this.CurrencyCode, salesTrans.TransDate);
        // LineAmount changed - End

        this.LineAmountTax = -salesTrans.TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLine</Name>
				<Source><![CDATA[
    void initFromSalesLine(SalesLine salesLine,SalesParmLine _salesParmLine = null)
    {
        // <GIN>
        ReturnDispositionCode returnDispositionCodeLoc;
        SalesLine salesLineICompany;
        SalesLine salesLineOriginal;
        InventRefTransId inventRefId;
        SalesLine_IN salesLine_IN;
        CustInvoiceTrans_IN custInvoiceTrans_IN;
        // </GIN>
        // <GEERU>
        InventDim inventDim;
        CustInvoiceTrans_RU custInvoiceTrans_RU;
        // </GEERU>

        // <GEEU>
        CustInvoiceTrans_W custInvoiceTrans_W;
        // </GEEU>

        SalesTable salesTable;
        #ISOCountryRegionCodes

        SalesLine_W salesLine_W;

        CustInvoiceTrans_Intrastat custInvoiceTrans_Intrastat;

        if (SysExtensionSerializerExtensionMap::isExtensionEnabled(tableNum(CustInvoiceTrans_Intrastat)))
        {
            custInvoiceTrans_Intrastat = this.custInvoiceTrans_Intrastat();
        }

        this.OrigSalesId = salesLine.SalesId;
        this.InventTransId = salesLine.InventTransId;
        this.InventDimId = salesLine.InventDimId;
        this.ItemId = salesLine.ItemId;
        this.SalesCategory = salesLine.SalesCategory;
        this.StockedProduct = salesLine.StockedProduct;
        this.LineNum = salesLine.LineNum;
        this.ExternalItemId = salesLine.ExternalItemId;
        this.Name = salesLine.Name;
        this.TaxItemGroup = salesLine.TaxItemGroup;
        this.TaxGroup = salesLine.TaxGroup;
        this.OverrideSalesTax = salesLine.OverrideSalesTax;
        this.CurrencyCode = salesLine.CurrencyCode;
        this.SalesUnit = salesLine.SalesUnit;
        this.PriceUnit = salesLine.PriceUnit;
        this.Qty = salesLine.SalesDeliverNow;
        this.SalesPrice = salesLine.effectiveSalesPrice();
        this.SalesMarkup = salesLine.SalesMarkup;
        this.DiscPercent = salesLine.discPercent();
        this.DiscAmount = salesLine.discAmount();
        this.LineDisc = salesLine.LineDisc;
        this.LinePercent = salesLine.LinePercent;
        this.MultiLnDisc = salesLine.MultiLnDisc;
        this.MultiLnPercent = salesLine.MultiLnPercent;
        this.LedgerDimension = salesLine.ledgerDimensionSales();

        if (FinTagConfiguration::isFinTagConfigurationSet(salesLine.DataAreaId) && SalesOrderFinTagFeature::isEnabled())
        {
            this.FinTag = salesLine.FinTag;
        }

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            custInvoiceTrans_RU = this.custInvoiceTrans_RU();
            custInvoiceTrans_RU.AssetId_RU = salesLine.AssetId_RU;
            custInvoiceTrans_RU.AlcoholLicenseSeriesNum_RU = _salesParmLine.AlcoholLicenseSeriesNum_RU;
            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
            {
                custInvoiceTrans_RU.MCRGiftCardAmount = salesLine.mcrSalesLine().GiftCardAmount_RU;
            }
            this.packCustInvoiceTrans_RU(custInvoiceTrans_RU);
        }
        // </GEERU>
        this.SalesGroup = salesLine.SalesGroup;
        this.QtyPhysical = 0;
        this.PartDelivery = 0;
        this.DefaultDimension = salesLine.DefaultDimension;
        this.TransactionCode = salesLine.TransactionCode;
        this.Transport = salesLine.Transport;
        this.Port = salesLine.Port;
        this.StatProcId = salesLine.StatProcId;
        this.IntrastatCommodity = salesLine.IntrastatCommodity;
        this.OrigCountryRegionId = salesLine.OrigCountryRegionId;
        this.OrigState = salesLine.OrigStateId;
        this.LineHeader = salesLine.LineHeader;
        this.DlvDate = salesLine.deliveryDate();
        this.CustomerLineNum = salesLine.CustomerLineNum;
        this.DeliveryType = salesLine.DeliveryType;
        this.InventRefType = salesLine.InventRefType;
        this.InventRefId = salesLine.InventRefId;
        this.InventRefTransId = salesLine.InventRefTransId;
        this.InterCompanyInventTransId = salesLine.InterCompanyInventTransId;

        this.PdsCWQty = salesLine.PdsCWInventDeliverNow;
        this.PdsCWQtyPhysical = 0;

        if (ReverseChargeParameters_W::find().Enabled)
        {
            if (this.TaxGroup == ReverseChargeParameters_W::find().SalesTaxGroup)
            {
                this.ReverseCharge_W = NoYes::Yes;

                this.ReverseChargeSalesList = ReverseChargeItemGroup_W::find(
                    ReverseCharge_W::findGroupByItemCategoryStatic(
                        ReverseChargePurchSales_W::Sales,
                        this.ItemId,
                        this.SalesCategory)).SalesList;
            }
        }
        if (SalesTable::find(salesLine.SalesId).eInvoiceLineSpec == NoYes::Yes)
        {
            this.eInvoiceAccountCode = salesLine.eInvoiceAccountCode;

            if (salesLine.OrderLineReference_NO && CustTable::isCustPublic_NO(SalesTable::find(salesLine.SalesId).InvoiceAccount))
            {
                this.OrderLineReference_NO = salesLine.OrderLineReference_NO;
            }
        }

        if (salesLine.returnItem())
        {
            this.ReturnDispositionCodeId = salesLine.ReturnDispositionCodeId;
            this.ReturnArrivalDate = salesLine.ReturnArrivalDate;
            this.ReturnClosedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        // <GIN>
        TransTaxInformation transTaxInformation;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            custInvoiceTrans_IN = this.custInvoiceTrans_IN();

            transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(salesLine);

            custInvoiceTrans_IN.TaxInformation_IN = transTaxInformation.TaxInformation;
            custInvoiceTrans_IN.RegistrationLocation_IN = transTaxInformation.CompanyLocation;
            custInvoiceTrans_IN.DirectSettlement_IN = transTaxInformation.ExciseDirectSettlement;
            custInvoiceTrans_IN.ExciseRecordType_IN = transTaxInformation.ExciseRecordType;
            custInvoiceTrans_IN.ExciseTariffCodes_IN = transTaxInformation.ExciseTariffCodes;
            custInvoiceTrans_IN.ExciseType_IN = transTaxInformation.ExciseType;
            custInvoiceTrans_IN.CustomsTariffCodeTable_IN = transTaxInformation.CustomsTariffCode;
            custInvoiceTrans_IN.ServiceCodeTable_IN = transTaxInformation.ServiceCode;
            custInvoiceTrans_IN.CompanyLocation_IN = transTaxInformation.CompanyLocation;
            custInvoiceTrans_IN.SalesTaxFormTypes_IN = transTaxInformation.SalesTaxFormTypes;
            custInvoiceTrans_IN.dsa_in = transTaxInformation.ExciseDSA;

            this.packCustInvoiceTrans_IN(custInvoiceTrans_IN);
        }

        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            salesLine_IN = salesLine.salesLine_IN();

            custInvoiceTrans_IN.tdsGroup_IN = salesLine_IN.tdsGroup;
            custInvoiceTrans_IN.tcsGroup_IN = salesLine_IN.tcsGroup;
            custInvoiceTrans_IN.TaxWithholdReturn_IN = salesLine.InventRefId;
            custInvoiceTrans_IN.CreditNoteDate_IN = salesLine_IN.CreditNoteDate;
            custInvoiceTrans_IN.TaxWithholdVoucher_IN = salesLine_IN.TaxWithholdVoucher;
            custInvoiceTrans_IN.TaxWithholdLineNum_IN = salesLine_IN.TaxWithholdLineNum;
            custInvoiceTrans_IN.CompanyLocation_IN = transTaxInformation.CompanyLocation;

            returnDispositionCodeLoc = ReturnDispositionCode::find(salesLine.ReturnDispositionCodeId);

            if (!custInvoiceTrans_IN.TaxWithholdReturn_IN
                && (returnDispositionCodeLoc.DispositionAction == DispositionAction::ReplaceScrap
                || returnDispositionCodeLoc.DispositionAction == DispositionAction::Scrap
                || InventModelGroup::find(InventTable::find(salesLine.ItemId).modelGroupId()).QuarantineControl))
            {
                if (salesLine.InterCompanyInventTransId)
                {
                    changecompany(SalesTable::find(salesLine.SalesId).InterCompanyCompanyId)
                    {
                        select firstonly InventTransIdReturn
                            from salesLineICompany
                            where salesLineICompany.InventRefTransId == salesLine.InterCompanyInventTransId;
                        if (salesLineICompany)
                        {
                            inventRefId = SalesLine::findInventTransId(salesLineICompany.InventTransIdReturn).InventRefTransId;
                        }
                    }
                    select firstonly InventTransId
                        from salesLineOriginal
                        where salesLineOriginal.InterCompanyInventTransId == inventRefId;
                    if (salesLineOriginal)
                    {
                        custInvoiceTrans_IN.TaxWithholdReturn_IN = SalesLine::findInventTransId(salesLineOriginal.InventTransId).SalesId;
                    }
                }
                else
                {
                    custInvoiceTrans_IN.TaxWithholdReturn_IN = SalesLine::findInventTransId(salesLine.InventTransIdReturn).SalesId;
                }
            }

            this.packCustInvoiceTrans_IN(custInvoiceTrans_IN);
        }
        // </GIN>

        if (isConfigurationkeyEnabled(configurationKeyNum(TradeMultiShipTo)))
        {
            this.DeliveryPostalAddress = salesLine.DeliveryPostalAddress;
            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
            {
                // Delivery address, name, and mode format
                this.mcrDeliveryName = salesLine.DeliveryName;
                this.mcrDlvMode = salesLine.DlvMode;
            }
        }
        else
        {
            salesTable = salesLine.salesTable();
            this.DeliveryPostalAddress = salesTable.DeliveryPostalAddress;
            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
            {
                // Delivery address, name, and mode format
                this.mcrDeliveryName = salesTable.DeliveryName;
                this.mcrDlvMode = salesTable.DlvMode;
            }
        }

        if (TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled() || BrazilParameters::isEnabled())
        {
            this.TaxWithholdGroup_TH = salesLine.TaxWithholdGroup;
            this.TaxWithholdItemGroupHeading_TH = salesLine.TaxWithholdItemGroupHeading_TH;
        }
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (salesLine.InvoiceGTDId_RU)
            {
                inventDim.InventGtdId_RU = salesLine.InvoiceGTDId_RU;
                this.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;
            }
            custInvoiceTrans_RU = this.custInvoiceTrans_RU();
            custInvoiceTrans_RU.CountryRegionName_RU = salesLine.CountryRegionName_RU;
            this.packCustInvoiceTrans_RU(custInvoiceTrans_RU);
        }
        // </GEERU>

        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoEE, #isoHU, #isoLT, #isoLV, #isoPL, #isoRU]))
        {
            custInvoiceTrans_W = this.custInvoiceTrans_W();
            this.setRefReturnInvoiceTrans(salesLine, custInvoiceTrans_W);
            custInvoiceTrans_W.CreditNoteInternalRef_W = salesLine.CreditNoteInternalRef_PL;
            this.packCustInvoiceTrans_W(custInvoiceTrans_W);
        }
        this.ReasonRefRecId = salesLine.CreditNoteReasonCode;
        // </GEEU>

        // <GEEPL>
        if (this.RecId && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            TaxServiceTariff::insertTaxServiceTariffForNewParent(salesLine.TableId, salesLine.RecId, this.TableId, this.RecId);
        }
        // </GEEPL>

        // <GEELT>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
        {
            custInvoiceTrans_W = this.custInvoiceTrans_W();
            custInvoiceTrans_W.StatisticValue_LT = salesLine.StatisticValue_LT;
            this.packCustInvoiceTrans_W(custInvoiceTrans_W);
        }
        // </GEELT>

        // <GEEHU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            this.IntrastatFulfillmentDate_HU = salesLine.IntrastatFulfillmentDate_HU;
        }
        // </GEEHU>

        // <GEECZ>
        if (SysExtensionSerializerExtensionMap::isExtensionEnabled(tableNum(CustInvoiceTrans_Intrastat)))
        {
            custInvoiceTrans_Intrastat.SpecialMovement_CZ = salesLine.salesLine_Intrastat().SpecialMovement_CZ;
            this.packCustInvoiceTrans_Intrastat(custInvoiceTrans_Intrastat);
        }
        // </GEECZ>
        // <GMY>
        if (TaxGSTFeatureChecker_MY::isCountryRegionMY())
        {
            custInvoiceTrans_W = this.custInvoiceTrans_W();

            salesLine_W = salesLine.salesLine_W();
            custInvoiceTrans_W.RefInvoiceId_MY = salesLine_W.RefInvoiceId_MY;
            custInvoiceTrans_W.RefInvoiceDate_MY = salesLine_W.RefInvoiceDate_MY;

            this.packCustInvoiceTrans_W(custInvoiceTrans_W);
        }
        // </GMY>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBR]))
        {
            SalesParmLine_BR salesParmLineBR = _salesParmLine.salesParmLine_BR();
            CustInvoiceTrans_BR custInvoiceTransBR = this.custInvoiceTrans_BR();
            custInvoiceTransBR.ICMSSTCollectionPaymentMode = salesParmLineBR.ICMSSTCollectionPaymentMode;
            custInvoiceTransBR.ICMSSTCollectionPaymentNumber = salesParmLineBR.ICMSSTCollectionPaymentNumber;
            custInvoiceTransBR.RespWithholdoingICMSST = salesParmLineBR.RespWithholdingICMSST;
            custInvoiceTransBR.NfeVbcstretVicmsstretTagsReported = salesParmLineBR.NfeVbcstretVicmsstretTagsReported;
            this.packCustInvoiceTrans_BR(custInvoiceTransBR);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLineForeignTradeCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>CustInvoiceTrans</c> record from the <c>SalesLineForeignTradeCategory</c> record.
    /// </summary>
    /// <param name="_salesLineForeignTradeCategory">
    ///    The <c>SalesLineForeignTradeCategory</c> record from which to initialize the
    ///    <c>CustInvoiceTrans</c> record.
    /// </param>
    public void initFromSalesLineForeignTradeCategory(SalesLineForeignTradeCategory _salesLineForeignTradeCategory)
    {
        this.ngpCodesTable_FR = _salesLineForeignTradeCategory.ngpCodesTable_FR;
        this.Weight = _salesLineForeignTradeCategory.UnitWeight * this.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxTrans_RU</Name>
				<Source><![CDATA[
    public void initFromTaxTrans_RU(TaxTrans _taxTrans)
    {
        this.CustVendInvoiceTrans::initFromTaxTrans_RU(_taxTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxWorkTrans_RU</Name>
				<Source><![CDATA[
    public void initFromTaxWorkTrans_RU(TmpTaxWorkTrans _taxWorkTrans,
                                        RefTableId _sourceTableId,
                                        RefRecId _sourceRecId = 0,
                                        InventTransId _inventTransId = "")
    {
        this.CustVendInvoiceTrans::initFromTaxWorkTrans_RU(_taxWorkTrans,
                                                           _sourceTableId,
                                                           _sourceRecId,
                                                           _inventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLineCreationSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the next unique LineCreationSequenceNumber per InvoiceId and InvoiceData.
    /// </summary>
    /// <returns>Next unique LineCreationSequenceNumber</returns>
    public CustInvoiceLineCreationSequenceNumber nextLineCreationSequence()
    {
        #isoCountryRegionCodes

        if (CustParameters::canUseNonSequentialLineNumbersWhenPostingCustomerInvoiceLines())
        {
            return xGlobal::randomPositiveInt32();
        }

        CustInvoiceLineCreationSequenceNumber currentLineCreationSequenceNumber = 0;
        CustInvoiceTrans custInvoiceTrans;

        select maxof(LineCreationSequenceNumber)
            from custInvoiceTrans
            where custInvoiceTrans.InvoiceId == this.InvoiceId
                && custInvoiceTrans.InvoiceDate == this.InvoiceDate;
            
        if (custInvoiceTrans)
        {
            currentLineCreationSequenceNumber = custInvoiceTrans.LineCreationSequenceNumber;
        }

        return (currentLineCreationSequenceNumber + 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        CustInvoiceTrans_IN custInvoiceTrans_IN;
        CustInvoiceTrans_RU custInvoiceTrans_RU;
        CustInvoiceTrans_W custInvoiceTrans_W;
        RecId recId;
        boolean isPacked;

        //<GEERU>
        #isoCountryRegionCodes
        //</GEERU>

        #OCCRetryCount

        try
        {
            ttsbegin;
            
            this.LineCreationSequenceNumber = this.LineCreationSequenceNumber ? this.LineCreationSequenceNumber : this.nextLineCreationSequence();
            super();

            if (this.RecId != 0)
            {
                // clear the pre-allocated base.RecId otherwise the extension.BaseRecId
                // will be set during the pack and base.RecId and extension.BaseRecId being
                // the same will ultimately cause the extension insert to be skipped
                recId = this.RecId;
                this.RecId = 0;

                // clear extension.BaseRecId otherwise base.RecId and extension.BaseRecId being
                // the same will ultimately cause the extension insert to be skipped

                // <GIN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    custInvoiceTrans_IN = this.custInvoiceTrans_IN();
                    custInvoiceTrans_IN.CustInvoiceTrans = 0;
                    this.packCustInvoiceTrans_IN(custInvoiceTrans_IN);
                    isPacked = true;
                }
                // </GIN>

                //<GEERU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                {
                    custInvoiceTrans_RU = this.custInvoiceTrans_RU();
                    custInvoiceTrans_RU.CustInvoiceTrans = 0;
                    this.packCustInvoiceTrans_RU(custInvoiceTrans_RU);
                    isPacked = true;
                }
                //</GEERU>

                // <GEEU>
                if (CustInvoiceTrans_W::isLegalEntityInCountryRegion())
                {
                    custInvoiceTrans_W = this.custInvoiceTrans_W();
                    custInvoiceTrans_W.CustInvoiceTrans = 0;
                    this.packCustInvoiceTrans_W(custInvoiceTrans_W);
                    isPacked = true;
                }
                // </GEEU>

                // <GMY>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMY]))
                {
                    custInvoiceTrans_W = this.custInvoiceTrans_W();
                    custInvoiceTrans_W.CustInvoiceTrans = 0;
                    this.packCustInvoiceTrans_W(custInvoiceTrans_W);
                    isPacked = true;
                }
                // </GMY>

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBR]))
                {
                    CustInvoiceTrans_BR custInvoiceTransBR = this.custInvoiceTrans_BR();
                    custInvoiceTransBR.CustInvoiceTrans = 0;
                    this.packCustInvoiceTrans_BR(custInvoiceTransBR);
                    isPacked = true;
                }

                if (SysExtensionSerializerExtensionMap::isExtensionEnabled(tableNum(CustInvoiceTrans_Intrastat)))
                {
                    CustInvoiceTrans_Intrastat custInvoiceTrans_Intrastat = this.custInvoiceTrans_Intrastat();
                    custInvoiceTrans_Intrastat.CustInvoiceTrans = 0;
                    this.packCustInvoiceTrans_Intrastat(custInvoiceTrans_Intrastat);
                    isPacked = true;
                }

                // reset base.RecId now that extension.BaseRecId is cleared and packed
                this.RecId = recId;
            }

            if (isPacked)
            {
                this.SysExtensionSerializerMap::postInsert();
            }

            ttscommit;
        }
        catch(Exception::DuplicateKeyException)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::DuplicateKeyException;
            }
            else
            {
                this.LineCreationSequenceNumber = 0;
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanySourceTable</Name>
				<Source><![CDATA[
    Common interCompanySourceTable(boolean _interCompanySource = true)
    {
        if (_interCompanySource)
        {
            return PurchLine::findInventTransId(this.InterCompanyInventTransId).purchTable();
        }
        else
        {
            return PurchLine::findInventTransId(this.InventRefTransId).purchTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the cost amount of the journal line.
    /// </summary>
    /// <returns>
    /// The cost amount of the journal line.
    /// </returns>
    display SalesCostValue inventCostAmount()
    {
        InventTransOriginId inventTransOriginId;
        SalesCostValue salesCostValue;
        InventTable inventTable;

        if (this.isStocked())
        {
            inventTransOriginId = InventTransOrigin::findByInventTransId(this.InventTransId).RecId;
            salesCostValue = InventTransInvoice::costAmount(inventTransOriginId, this.InvoiceId, this.InvoiceDate);
        }
        else
        {
            // The cost is 0 for category based lines.
            if (!this.isCategoryBased())
            {
                // Return the price per unit with the quantity in inventory units.
                inventTable = this.inventTable();
                salesCostValue = - inventTable.costPcsPrice(this.InventDimId, null, null, this.InvoiceDate)
                    * EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                        this.ItemId,
                        this.InventDimId,
                        this.Qty,
                        this.SalesUnit,
                        inventTable.inventUnitId(),
                        NoYes::Yes);                        
            }
        }
        return salesCostValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    InventDim inventDim(boolean _update = false)
    {
        return InventDim::find(this.InventDimId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationId</Name>
				<Source><![CDATA[
    display InventLocationId inventLocationId()
    {
        return this.inventDim().InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQty</Name>
				<Source><![CDATA[
    InventQty inventQty()
    {
        InventTransOriginId inventTransOriginId = InventTransOrigin::findByInventTransId(this.InventTransId).RecId;

        return InventTransInvoice::qtySold(inventTransOriginId, this.InvoiceId, this.InvoiceDate)
             + InventTransInvoice::qtyPurchased(inventTransOriginId, this.InvoiceId, this.InvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQtyToDelivery_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates Qty which availiable for delivery in Inventory units.
    /// </summary>
    /// <returns>
    /// Inventory quantity.
    /// </returns>
    display ProductQuantity inventQtyToDelivery_RU()
    {
        GoodsInRouteJour_RU goodsInRouteJour;
        GoodsInRouteTrans_RU goodsInRouteTrans;
        CustInvoiceJour custInvoiceJour;
        Qty inventQtySum;

        while select InventQty from goodsInRouteTrans
            where goodsInRouteTrans.InventTransId == this.InventTransId
            join Cancel from goodsInRouteJour
                where goodsInRouteJour.GoodsInRouteId == goodsInRouteTrans.GoodsInRouteId
            exists join custInvoiceJour
                where custInvoiceJour.RecId == goodsInRouteJour.InvoiceRecId
                   && custInvoiceJour.InvoiceId == this.InvoiceId
                   && custInvoiceJour.InvoiceDate == this.InvoiceDate
                   && custInvoiceJour.NumberSequenceGroup == this.NumberSequenceGroup
                   && custInvoiceJour.SalesId == this.SalesId
        {
            inventQtySum += goodsInRouteJour.Cancel ? -goodsInRouteTrans.InventQty : goodsInRouteTrans.InventQty;
        }

        return this.InventQty - inventQtySum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSiteId</Name>
				<Source><![CDATA[
    display InventSiteId inventSiteId()
    {
        return this.inventDim().InventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    InventTable inventTable(ItemId _itemId = this.ItemId,
                            boolean _update = false)
    {
        return InventTable::find(_itemId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    display CustInvoiceAccount invoiceAccount()
    {
        return this.custInvoiceJour().InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryBased</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the journal line is category based.
    /// </summary>
    /// <returns>
    ///    true if the journal line is category based; otherwise, false.
    /// </returns>
    boolean isCategoryBased()
    {
        return !this.ItemId && this.SalesCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExportTrans_RU</Name>
				<Source><![CDATA[
    boolean isExportTrans_RU()
    {
        TaxGroupData taxGroupData;
        TaxOnItem taxOnItem;
        TaxTable taxTable;

        select firstonly RecId from taxTable
            where taxTable.TaxType_W == TaxType_W::VATZero &&
                  taxTable.DomesticMarketTaxCode_RU
        exists join taxGroupData
            where taxGroupData.TaxGroup == this.TaxGroup &&
                  taxGroupData.TaxCode == taxTable.TaxCode
        exists join taxOnItem
            where taxOnItem.TaxItemGroup == this.TaxItemGroup &&
                  taxOnItem.TaxCode == taxTable.TaxCode;

        return taxTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInterCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not the record is intercompany.
    /// </summary>
    /// <returns>true if it is intercompany; otherwise false.</returns>
    public boolean isInterCompany()
    {
        boolean isInterCompany;
        CustInvoiceJour custInvoiceJour = this.custInvoiceJour();

        if (custInvoiceJour)
        {
            isInterCompany = (custInvoiceJour.InterCompanyCompanyId != '');
        }
        else
        {
            isInterCompany = (this.salesLine().salesTable().InterCompanyCompanyId != '');
        }

        return isInterCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStocked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the journal line is tracked in inventory.
    /// </summary>
    /// <returns>
    ///    true if the journal line is tracked in inventory; otherwise, false.
    /// </returns>
    public boolean isStocked()
    {
        return this.StockedProduct == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransferFromCurrentCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the items are transferred from the current company or from the intercompany
    /// company.
    /// </summary>
    /// <returns>
    /// true if the transfer is from the current company; otherwise, false.
    /// </returns>
    boolean isTransferFromCurrentCompany()
    {
        return this.Qty >= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId_W</Name>
				<Source><![CDATA[
    public ItemId itemId_W()
    {
        return this.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    display ItemNameDisplay itemName()
    {
        return InventTable::find(this.ItemId).itemName(this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns item name for current <c>CustInvoiceTrans</c> line
    /// </summary>
    /// <returns>
    /// Item name for current <c>CustInvoiceTrans</c> line
    /// </returns>
    /// <remarks>
    /// If item id is not specified, name is taken from sales category
    /// </remarks>
    display ItemNameDisplay itemName_RU()
    {
        return this.ItemId ?
               InventTable::find(this.ItemId).itemName(this.inventDim()) :
               (this.SalesCategory ?
                EcoResCategory::find(this.SalesCategory).Name :
                this.Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountInclTax</Name>
				<Source><![CDATA[
    display LineAmount lineAmountInclTax()
    {
        return this.LineAmount + this.LineAmountTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountPreAddOfSalesMarkup</Name>
				<Source><![CDATA[
    display AmountCur lineAmountPreAddOfSalesMarkup()
    {
        AmountCur lineAmountPreAddOfSalesMarkup;

        lineAmountPreAddOfSalesMarkup = this.lineAmountPreAddOfSalesMarkupInclTax();

        if (this.custInvoiceJour().InclTax)
        {
            lineAmountPreAddOfSalesMarkup = this.amountExclTax(lineAmountPreAddOfSalesMarkup);
        }

        return lineAmountPreAddOfSalesMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountPreAddOfSalesMarkupInclTax</Name>
				<Source><![CDATA[
    display AmountCur lineAmountPreAddOfSalesMarkupInclTax()
    {
        AmountCur lineAmountPreAddOfSalesMarkup;

        if (this.Qty)
        {
            lineAmountPreAddOfSalesMarkup = PriceDisc::price2Amount(this.SalesPrice,
                                                                    this.PriceUnit,
                                                                    0.0,
                                                                    this.Qty, // sales deliver now
                                                                    this.Qty, // sales qty
                                                                    0.0,
                                                                    0.0,
                                                                    this.CurrencyCode,
                                                                    this.LineAmount);
        }

        return lineAmountPreAddOfSalesMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountPreSubOfDiscAmount</Name>
				<Source><![CDATA[
    display AmountCur lineAmountPreSubOfDiscAmount()
    {
        AmountCur lineAmountPreSubOfDiscAmount;

        lineAmountPreSubOfDiscAmount = this.lineAmountPreSubOfDiscAmountInclTax();

        if (this.custInvoiceJour().InclTax)
        {
            lineAmountPreSubOfDiscAmount = this.amountExclTax(lineAmountPreSubOfDiscAmount);
        }

        return lineAmountPreSubOfDiscAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountPreSubOfDiscAmountInclTax</Name>
				<Source><![CDATA[
    display AmountCur lineAmountPreSubOfDiscAmountInclTax()
    {
        AmountCur lineAmountPreSubOfDiscAmount;

        if (this.Qty)
        {
            lineAmountPreSubOfDiscAmount = PriceDisc::price2Amount(this.SalesPrice,
                                                                   this.PriceUnit,
                                                                   0.0,
                                                                   this.Qty, // sales deliver now
                                                                   this.Qty, // sales qty
                                                                   this.SalesMarkup,
                                                                   0.0,
                                                                   this.CurrencyCode,
                                                                   this.LineAmount);
        }

        return lineAmountPreSubOfDiscAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountPreSubOfDiscPercent</Name>
				<Source><![CDATA[
    display AmountCur lineAmountPreSubOfDiscPercent()
    {
        AmountCur lineAmountPreSubOfDiscPercent;

        lineAmountPreSubOfDiscPercent = this.lineAmountPreSubOfDiscPercentInclTax();

        if (this.custInvoiceJour().InclTax)
        {
            lineAmountPreSubOfDiscPercent = this.amountExclTax(lineAmountPreSubOfDiscPercent);
        }

        return lineAmountPreSubOfDiscPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountPreSubOfDiscPercentInclTax</Name>
				<Source><![CDATA[
    display AmountCur lineAmountPreSubOfDiscPercentInclTax()
    {
        AmountCur lineAmountPreSubOfDiscPercent;

        if (this.Qty)
        {
            lineAmountPreSubOfDiscPercent = PriceDisc::price2Amount(this.SalesPrice,
                                                                    this.PriceUnit,
                                                                    this.DiscAmount,
                                                                    this.Qty, // sales deliver now
                                                                    this.Qty, // sales qty
                                                                    this.SalesMarkup,
                                                                    0.0,
                                                                    this.CurrencyCode,
                                                                    this.LineAmount);
        }

        return lineAmountPreSubOfDiscPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInitFromSalesParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>custinvoicetrans</c> from <c>salesparmline</c>.
    /// </summary>
    /// <param name="_salesParmLine">
    /// <c>salesParmLine</c> record used in the initalization.
    /// </param>
    /// <remarks>
    /// Special pricing ID may change at time of invoicing.
    /// </remarks>
    public void mcrInitFromSalesParmLine(SalesParmLine _salesParmLine)
    {
        MCRSalesParmLine mcrSalesParmLine;

        mcrSalesParmLine = _salesParmLine.mcrSalesParmLine();

        // Pricing values that might have changed by running special pricing
        this.SalesPrice = mcrSalesParmLine.SalesPrice;
        this.SalesMarkup = mcrSalesParmLine.SalesMarkup;
        this.LineDisc = mcrSalesParmLine.LineDisc;
        this.LinePercent = mcrSalesParmLine.LinePercent;
        this.MultiLnDisc = mcrSalesParmLine.MultiLnDisc;
        this.MultiLnPercent = mcrSalesParmLine.MultiLnPercent;

        // Similar to SalesLine.discPercent()
        this.DiscPercent = PriceDisc::discPercent(SalesParameters::find().Disc,
                                                        mcrSalesParmLine.LinePercent,
                                                        mcrSalesParmLine.MultiLnPercent);
        // Similar to SalesLine.discAmount()
        this.DiscAmount = PriceDisc::discAmount(SalesParameters::find().Disc,
                                                        mcrSalesParmLine.LineDisc,
                                                        mcrSalesParmLine.MultiLnDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrQtyInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the invoiced quantity from the <c>InventTrans</c> table.
    /// </summary>
    /// <returns>
    /// The invoiced quantity from the inventory transaction.
    /// </returns>
    public InventQty mcrQtyInvoice()
    {
        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;

        select sum(Qty) from inventTrans
            where inventTrans.StatusIssue == StatusIssue::Sold 
            && inventTrans.StatusReceipt == StatusReceipt::None
            join RecId, InventTransId from inventTransOrigin
            where inventTrans.InventTransOrigin == inventTransOrigin.RecId
            && inventTransOrigin.InventTransId == this.InventTransId;

        return abs(inventTrans.Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrQtyInvoicePerBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the invoiced quantity for the passed <c>InventBatchId</c>.
    /// </summary>
    /// <param name="_batchID">
    /// The <c>InventBatchId</c> for which this method retrieves the invoice quantity.
    /// </param>
    /// <returns>
    /// The quantity invoiced for the passed <c>InventBatchId</c>.
    /// </returns>
    public InventQty mcrQtyInvoicePerBatch(InventBatchId _batchID)
    {
        InventTrans inventTrans;
        InventDim inventDim;
        InventTransOrigin inventTransOrigin;

        select sum(Qty) from inventTrans
            where inventTrans.StatusIssue == StatusIssue::Sold 
            && inventTrans.StatusReceipt == StatusReceipt::None
            join * from inventTransOrigin
            where inventTrans.InventTransOrigin == inventTransOrigin.RecId
            && inventTransOrigin.InventTransId == this.InventTransId
            join * from inventDim
            where inventDim.InventDimId == inventTrans.InventDimId
            && inventDim.InventBatchId == _batchID;

        return abs(inventTrans.Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrQtyInvoicePerBatchPriceMatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the invoiced quantity for the passed <c>SalesLine</c> object with a price match.
    /// </summary>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> object for which this method retrieves the invoiced quantity.
    /// </param>
    /// <returns>
    /// The invoiced quantity for the passed <c>SalesLine</c> object.
    /// </returns>
    public InventQty mcrQtyInvoicePerBatchPriceMatch(SalesLine _salesLine)
    {
        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;
        InventDim inventDim;
        InventQty qty, reduceQty;
        MCRCustCreditTable mcrCustCreditTable;
        CustInvoiceTrans custInvoiceTrans;

        mcrCustCreditTable = MCRCustCreditTable::findByInventTransID(_salesLine.InventTransId);
        if (mcrCustCreditTable)
        {
            return mcrCustCreditTable.CreditQty;
        }

        select sum(Qty) from inventTrans
            where inventTrans.StatusIssue == StatusIssue::Sold 
            && inventTrans.StatusReceipt == StatusReceipt::None
            join * from inventTransOrigin
            where inventTrans.InventTransOrigin == inventTransOrigin.RecId
            && inventTransOrigin.InventTransId == this.InventTransId
            join * from inventDim
            where inventDim.InventDimId == inventTrans.InventDimId
            && inventDim.InventBatchId == _salesLine.inventDim().InventBatchId;

        qty = abs(inventTrans.Qty);

        while select SalesId,InventTransId from custInvoiceTrans
            where custInvoiceTrans.SalesId == _salesLine.salesTable().mcrReturnSalesTable().OriginalSalesId
            join CreditQty, InventTransID from mcrCustCreditTable
            where mcrCustCreditTable.InventTransID == custInvoiceTrans.InventTransId
            && ((mcrCustCreditTable.CreditQty - mcrCustCreditTable.CreditedQty) > 0)
        {
            reduceQty += abs(mcrCustCreditTable.CreditQty);
        }

        return qty - reduceQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was previously instantiated with the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the specified dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when merging.
    /// Additionally, the entity specifier defaulting will be considered.
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )

        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderAccount</Name>
				<Source><![CDATA[
    display CustAccount orderAccount()
    {
        return this.custInvoiceJour().OrderAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packCustInvoiceTrans_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the <c>CustInvoiceTrans_BR</c> record associated with the current record.
    /// </summary>
    /// <param name="_custInvoiceTrans_IN">
    /// The <c>CustInvoiceTrans_BR</c> record.
    /// </param>
    public void packCustInvoiceTrans_BR(CustInvoiceTrans_BR _custInvoiceTrans_BR)
    {
        _custInvoiceTrans_BR.CustInvoiceTrans = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_custInvoiceTrans_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packCustInvoiceTrans_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the <c>CustInvoiceTrans_IN</c> record associated with the current record.
    /// </summary>
    /// <param name="_custInvoiceTrans_IN">
    /// The <c>CustInvoiceTrans_IN</c> record.
    /// </param>
    public void packCustInvoiceTrans_IN(CustInvoiceTrans_IN _custInvoiceTrans_IN)
    {
        _custInvoiceTrans_IN.CustInvoiceTrans = this.RecId;

        this.SysExtensionSerializerMap::packExtensionTable(_custInvoiceTrans_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packCustInvoiceTrans_Intrastat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs <c>CustInvoiceTrans_Intrastat</c> extension table record.
    /// </summary>
    /// <param name="_custInvoiceTrans_Intrastat">
    /// The extension table record to pack.
    /// </param>
    public void packCustInvoiceTrans_Intrastat(CustInvoiceTrans_Intrastat _custInvoiceTrans_Intrastat)
    {
        this.SysExtensionSerializerMap::packExtensionTable(_custInvoiceTrans_Intrastat);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packCustInvoiceTrans_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the <c>CustInvoiceTrans_RU</c> record associated with the current record.
    /// </summary>
    /// <param name="_custInvoiceTrans_RU">
    /// The <c>CustInvoiceTrans_RU</c> record.
    /// </param>
    public void packCustInvoiceTrans_RU(CustInvoiceTrans_RU _custInvoiceTrans_RU)
    {
        _custInvoiceTrans_RU.CustInvoiceTrans = this.RecId;

        this.SysExtensionSerializerMap::packExtensionTable(_custInvoiceTrans_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packCustInvoiceTrans_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the <c>CustInvoiceTrans_W</c> record associated with the current record.
    /// </summary>
    /// <param name="_custInvoiceTrans_W">
    /// The <c>CustInvoiceTrans_W</c> record.
    /// </param>
    public void packCustInvoiceTrans_W(CustInvoiceTrans_W _custInvoiceTrans_W)
    {
        _custInvoiceTrans_W.CustInvoiceTrans = this.RecId;

        this.SysExtensionSerializerMap::packExtensionTable(_custInvoiceTrans_W);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packingSlipId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets PackingSlipId of the <c>CustPackingSlipTrans</c> table.
    /// </summary>
    /// <param name="_custInvoiceTrans">
    ///    The <c>CustInvoiceTrans</c> buffer.
    /// </param>
    /// <returns>
    /// PackingSlipId of the <c>CustPackingSlipTrans</c> table.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display PackingSlipId packingSlipId(CustInvoiceTrans _custInvoiceTrans)
    {
        return this.documentId(_custInvoiceTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packingSlipIdAndDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets PackingSlipId and delivery date in a container of the <c>CustPackingSlipTrans</c> table.
    /// </summary>
    /// <param name="_custInvoiceJour">
    ///    The <c>CustInvoiceJour</c> buffer.
    /// </param>
    /// <returns>
    /// Container of the packingSlipId and DeliveryDate of <c>CustPackingSlipTrans</c> table.
    /// </returns>
    public container packingSlipIdAndDate(CustInvoiceJour _custInvoiceJour)
    {
        Num documentId;
        CustPackingSlipTrans custPackingSlipTrans;
        NumberOfRecords oneSubLines = 1;
        NumberOfRecords zeroSubLines = 0;
        TransDate deliveryDate;
        CustInvoiceTrans custInvoiceTransLoc;
        container conPackingSlipIdDate;

        while select custInvoiceTransLoc
            where custInvoiceTransLoc.SalesId == _custInvoiceJour.SalesId
        {
            switch (CustPackingSlipTrans::subLines(custInvoiceTransLoc))
            {
                case zeroSubLines:
                    documentId = '';
                    deliveryDate = dateNull();
                    break;

                case oneSubLines:
                    select firstonly custPackingSlipTrans
                        where custPackingSlipTrans.InvoiceTransRefRecId == custInvoiceTransLoc.RecId;
                    documentId = custPackingSlipTrans.PackingSlipId;
                    deliveryDate = custPackingSlipTrans.custPackingslipJour().DeliveryDate;
                    break;

                default:
                    documentId = '*'; //More than one journal line attached to the parm line
                    deliveryDate = dateNull();
                    break;
            }
            conPackingSlipIdDate += [custInvoiceTransLoc.RecId, documentId, deliveryDate];
        }

        return conPackingSlipIdDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRateDate</Name>
				<Source><![CDATA[
    public AccountingDate parmExchangeRateDate()
    {
        return this.getExchangeRateDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumName</Name>
				<Source><![CDATA[
    public EnumName parmSourceDocLineTypeEnumName()
    {
        return enumStr(SourceDocumentLine_CustomerInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumValue</Name>
				<Source><![CDATA[
    public SourceDocumentTypeEnumValue parmSourceDocLineTypeEnumValue()
    {
        return SourceDocumentLine_CustomerInvoice::CustomerInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the date used as the basis for calculating the exchange rate.
    /// </summary>
    /// <param name="_date">
    ///    Exchange date specified for calculating the exchange rate.
    /// </param>
    /// <returns>
    /// A date.
    /// </returns>
    public AccountingDate getExchangeRateDate(date _date = dateNull())
    {
        return _date == dateNull() ? this.custInvoiceJour().InvoiceDate : _date;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyToDelivery_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates Qty which availiable for delivery in catch weight units.
    /// </summary>
    /// <returns>
    /// CW quantity.
    /// </returns>
    display PdsCWInventQty pdsCWQtyToDelivery_RU()
    {
        GoodsInRouteJour_RU goodsInRouteJour;
        GoodsInRouteTrans_RU goodsInRouteTrans;
        CustInvoiceJour custInvoiceJour;
        Qty pdsCWQtySum;

        while select PdsCWQty from goodsInRouteTrans
            where goodsInRouteTrans.InventTransId == this.InventTransId
            join Cancel from goodsInRouteJour
                where goodsInRouteJour.GoodsInRouteId == goodsInRouteTrans.GoodsInRouteId
            exists join custInvoiceJour
                where custInvoiceJour.RecId == goodsInRouteJour.InvoiceRecId
                   && custInvoiceJour.InvoiceId == this.InvoiceId
                   && custInvoiceJour.InvoiceDate == this.InvoiceDate
                   && custInvoiceJour.NumberSequenceGroup == this.NumberSequenceGroup
                   && custInvoiceJour.SalesId == this.SalesId
        {
            pdsCWQtySum += goodsInRouteJour.Cancel ? -goodsInRouteTrans.PdsCWQty : goodsInRouteTrans.PdsCWQty;
        }

        return this.PdsCWQty - pdsCWQtySum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight unit for the item.
    /// </summary>
    /// <returns>
    /// The catch weight unit for the item.
    /// </returns>
    public display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceAfterDisc_PL</Name>
				<Source><![CDATA[
    display Amount priceAfterDisc_PL()
    {
        return CurrencyExchangeHelper::amount((this.SalesPrice - this.DiscAmount) * (1 - this.DiscPercent / 100), this.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity to be displayed
    /// </summary>
    /// <param name="_custInvoiceTrans">
    /// The customer invoice transaction.
    /// </param>
    /// <returns>
    /// Calculated sales quantity.
    /// </returns>
    [SysObsoleteAttribute('This method is obsolete.', false, 30\6\2020)]
    public display SalesQty calculateQuantity(CustInvoiceTrans _custInvoiceTrans)
    {        
        SalesLine   salesLine = _custInvoiceTrans.salesLine();
        Qty         salesQty = salesLine.invoicedInTotal() - EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                                                    _custInvoiceTrans.ItemId,
                                                    _custInvoiceTrans.InventDimId,
                                                    salesLine.mcrReturnedInventInTotal(),
                                                    InventTable::find(_custInvoiceTrans.ItemId).inventUnitId(),
                                                    _custInvoiceTrans.SalesUnit);
        
        CustInvoiceTrans custInvoiceSum;
        select count(RecId) from custInvoiceSum
            where custInvoiceSum.InventTransId == _custInvoiceTrans.InventTransId;

        if (custInvoiceSum.RecId > 1)
        {
            select sum(Qty) from custInvoiceSum
                where custInvoiceSum.InventTransId == _custInvoiceTrans.InventTransId;

            if (salesQty > custInvoiceSum.Qty)
            {
                salesQty = custInvoiceSum.Qty;
            }
        }

        return salesQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty_W</Name>
				<Source><![CDATA[
    public Qty qty_W()
    {
        return this.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyDelivered_RU</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display SalesQty qtyDelivered_RU()
    {
        InventTransOriginId transOriginId = InventTransOrigin::findByInventTransId(this.custInvoiceTrans_RU().InventTransIdDelivery_RU).RecId;
        InventTransIdSum inventTransIdSum = InventTransIdSum::newTransOriginId(transOriginId);
        return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
            this.ItemId,
            this.InventDimId,
            -inventTransIdSum.financial(),
            this.inventTable().inventUnitId(),
            this.SalesUnit,
            NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyDeliveryReturned_RU</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display SalesQty qtyDeliveryReturned_RU()
    {
        InventTransOriginId transOriginId = InventTransOrigin::findByInventTransId(this.custInvoiceTrans_RU().InventTransIdDelivery_RU).RecId;
        InventTransIdSum inventTransIdSum = InventTransIdSum::newTransOriginId(transOriginId);

        return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
            this.ItemId,
            this.InventDimId,
            inventTransIdSum.purchased(),
            this.inventTable().inventUnitId(),
            this.SalesUnit,
            NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyRemainReturnCreditNote</Name>
				<Source><![CDATA[
    SalesQty qtyRemainReturnCreditNote()
    {
        return this.Qty - SalesLine::remainReturnLotQtyAllCreditNote(this.InventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyToDelivery_RU</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display ProductQuantity qtyToDelivery_RU()
    {
        GoodsInRouteJour_RU goodsInRouteJour;
        GoodsInRouteTrans_RU goodsInRouteTrans;
        CustInvoiceJour custInvoiceJour;
        Qty salesQtySum;

        while select SalesQty from goodsInRouteTrans
            where goodsInRouteTrans.InventTransId == this.InventTransId
            join Cancel from goodsInRouteJour
                where goodsInRouteJour.GoodsInRouteId == goodsInRouteTrans.GoodsInRouteId
            exists join custInvoiceJour
                where custInvoiceJour.RecId == goodsInRouteJour.InvoiceRecId
                   && custInvoiceJour.InvoiceId == this.InvoiceId
                   && custInvoiceJour.InvoiceDate == this.InvoiceDate
                   && custInvoiceJour.NumberSequenceGroup == this.NumberSequenceGroup
                   && custInvoiceJour.SalesId == this.SalesId
        {
            salesQtySum += goodsInRouteJour.Cancel ? -goodsInRouteTrans.SalesQty : goodsInRouteTrans.SalesQty;
        }

        return this.Qty - salesQtySum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refAdjustedTransRecId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets adjusted line record id.
    /// </summary>
    /// <returns>
    /// Adjusted line record id.
    /// </returns>
    public RefRecId refAdjustedTransRecId_RU()
    {
        return CustInvoiceTransCorrLink_RU::findCustInvoiceTrans(this.RecId).CorrTransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculating line amount for the return of items.
    /// </summary>
    /// <param name="_returnQty">
    ///     The quantity of items being returned.
    /// </param>
    /// <returns>
    ///     The calculated line amount for the return of items.
    /// </returns>
    public LineAmount returnLineAmount(Qty _returnQty)
    {
        LineAmount returnAmount;

        if (_returnQty)
        {
            returnAmount = PriceDisc::price2Amount(this.SalesPrice,
                                                   this.PriceUnit,
                                                   this.DiscAmount,
                                                   _returnQty,
                                                   this.Qty,
                                                   this.SalesMarkup,
                                                   this.DiscPercent,
                                                   this.CurrencyCode,
                                                   this.LineAmount,
                                                   false);
        }

        return returnAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLine</Name>
				<Source><![CDATA[
    SalesLine salesLine(boolean _update = false)
    {
        return SalesLine::findInventTransId(this.InventTransId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesUnitTxt</Name>
				<Source><![CDATA[
    display UnitOfMeasureReportingText salesUnitTxt()
    {
        CustInvoiceJour custInvoiceJour = this.custInvoiceJour();

        if (custInvoiceJour)
        {
            return UnitOfMeasureReportingTranslation::unitOfMeasureReportingText(
                UnitOfMeasure::unitOfMeasureIdBySymbol(this.SalesUnit),
                custInvoiceJour.LanguageId);
        }

        if (this.SalesId)
        {
            return UnitOfMeasureReportingTranslation::unitOfMeasureReportingText(
                UnitOfMeasure::unitOfMeasureIdBySymbol(this.SalesUnit),
                SalesTable::find(this.SalesId).LanguageId);
        }

        return UnitOfMeasureReportingTranslation::unitOfMeasureReportingText(
            UnitOfMeasure::unitOfMeasureIdBySymbol(this.SalesUnit),
            CompanyInfo::languageId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLinenum</Name>
				<Source><![CDATA[
    void setLinenum(LineNum _lineNum)
    {
        this.LineNum = _lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountIncludedCur_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total tax included amount in document currency
    /// </summary>
    /// <returns>
    /// Returns total tax included amount;
    /// </returns>
    public TaxAmount taxAmountIncludedCur_BR()
    {
        TaxTrans taxTrans;
        TaxTable taxTable;

        if (!BrazilParameters::isEnabled())
        {
            return 0;
        }

        select sum(TaxAmountCur)
            from taxTrans
                where taxTrans.SourceTableId == this.TableId
                   && taxTrans.SourceRecId == this.RecId
                join TaxCode, IncludedTax_BR from taxTable
                where taxTrans.TaxCode == taxTable.TaxCode
                   && taxTable.IncludedTax_BR == NoYes::Yes;

        return taxTrans.TaxAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountIncludedMST_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total tax included amount in company currency
    /// </summary>
    /// <returns>
    /// Returns total tax included amount;
    /// </returns>
    public TaxAmount taxAmountIncludedMST_BR()
    {
        TaxTrans taxTrans;
        TaxTable taxTable;

        if (!BrazilParameters::isEnabled())
        {
            return 0;
        }

        select sum(TaxAmount)
            from taxTrans
                where taxTrans.SourceTableId == this.TableId
                   && taxTrans.SourceRecId == this.RecId
                join TaxCode, IncludedTax_BR from taxTable
                where taxTrans.TaxCode == taxTable.TaxCode
                   && taxTable.IncludedTax_BR == NoYes::Yes;

        return taxTrans.TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unit_W</Name>
				<Source><![CDATA[
    SalesUnit unit_W()
    {
        return this.SalesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ttsbegin;

        super();

        this.SysExtensionSerializerMap::postUpdate();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCommission</Name>
				<Source><![CDATA[
    void updateCommission(LedgerVoucher _ledgerVoucher,
                                 CustInvoiceJour _custInvoiceJour)
    {
        Commission commission;

        if (this.CommissCalc == NoYes::Yes)
        {
            return;
        }
        commission = Commission::newCommission(_ledgerVoucher, _custInvoiceJour, this);
        commission.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatType_RU</Name>
				<Source><![CDATA[
    public VATType_RU vatType_RU()
    {
        return FactureTrans_RU::taxType2VATType(TaxTable::find(TaxTable::vatCode_RU(this.TaxGroup, this.TaxItemGroup)).TaxType_W);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(TradeInventTransId _inventTransId)
    {
        return _inventTransId && (select firstonly RecId from custInvoiceTrans
                    where custInvoiceTrans.InventTransId == _inventTransId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSalesId</Name>
				<Source><![CDATA[
    static boolean existSalesId(SalesId _salesId)
    {
        return _salesId && (select firstonly RecId from custInvoiceTrans
                    where custInvoiceTrans.SalesId == _salesId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCustInvoiceLineRefId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a specific <c>CustInvoiceTrans</c> record.
    /// </summary>
    /// <param name="_custInvoiceLineIdRefRecId">
    ///    The record ID of the <c>CustInvoiceLineIdRef</c> record.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that determines whether to select the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    A value that is used when the table is not automatically concurrent; optional.
    /// </param>
    /// <returns>
    ///    A <c>CustInvoiceTrans</c> table buffer.
    /// </returns>

    public static CustInvoiceTrans findByCustInvoiceLineRefId(
        CustInvoiceLineIdRefRecId _custInvoiceLineIdRefRecId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustInvoiceTrans custInvoiceTrans;

        custInvoiceTrans.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custInvoiceTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly custInvoiceTrans
            where custInvoiceTrans.CustInvoiceLineIdRef == _custInvoiceLineIdRefRecId;

        return custInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CustInvoiceTrans</c> table.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    ///    The record ID of the <c>SourceDocumentLine</c> record.
    /// </param>
    /// <returns>
    ///    A <c>CustInvoiceTrans</c> record.
    /// </returns>
    static public CustInvoiceTrans findBySourceDocumentLine(RefRecId _sourceDocumentLine)
    {
        CustInvoiceTrans custInvoiceTrans;

        select firstonly custInvoiceTrans
            where custInvoiceTrans.SourceDocumentLine == _sourceDocumentLine;

        return custInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustInvoiceTrans</Name>
				<Source><![CDATA[
    static CustInvoiceTrans findCustInvoiceTrans(SalesId _salesId,
                                                    InvoiceId _invoiceId,
                                                    InvoiceDate _invoiceDate,
                                                    NumberSequenceGroupId _numberSeqGrp,
                                                    InventTransId _inventTransId)
    {
        CustInvoiceTrans custInvoiceTrans;

        select custInvoiceTrans
               index hint InvoiceIdx
               where custInvoiceTrans.SalesId == _salesId &&
                        custInvoiceTrans.InvoiceId == _invoiceId &&
                        custInvoiceTrans.InvoiceDate == _invoiceDate &&
                        custInvoiceTrans.NumberSequenceGroup == _numberSeqGrp &&
                        custInvoiceTrans.InventTransId == _inventTransId;

        return custInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustInvoiceTransFromTaxTrans_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the <c>CustInvoiceTrans</c> table.
    /// </summary>
    /// <param name="_salesId">
    /// The sales order id.
    /// </param>
    /// <param name="_invoiceId">
    /// The invoice id.
    /// </param>
    /// <param name="_invoiceDate">
    /// The invoice date.
    /// </param>
    /// <param name="_numberSeqGrp">
    /// The number sequence group id.
    /// </param>
    /// <param name="_lineNum">
    /// The line number.
    /// </param>
    /// <returns>
    /// The record in the <c>CustInvoiceTrans</c> table.
    /// </returns>
    static CustInvoiceTrans findCustInvoiceTransFromTaxTrans_IN(SalesId _salesId,
                                                                InvoiceId _invoiceId,
                                                                InvoiceDate _invoiceDate,
                                                                NumberSequenceGroupId _numberSeqGrp,
                                                                LineNum _lineNum)
    {
        CustInvoiceTrans custInvoiceTrans;

        select custInvoiceTrans
               index hint InvoiceIdx
               where custInvoiceTrans.SalesId == _salesId &&
                        custInvoiceTrans.InvoiceId == _invoiceId &&
                        custInvoiceTrans.InvoiceDate == _invoiceDate &&
                        custInvoiceTrans.NumberSequenceGroup == _numberSeqGrp &&
                        custInvoiceTrans.LineNum == _lineNum;

        return custInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFacture_RU</Name>
				<Source><![CDATA[
    public static CustInvoiceTrans findFacture_RU(FactureTrans_RU _trans,
                                                         boolean _forupdate = false)
    {
        CustInvoiceTrans ret;

        ret.selectForUpdate(_forupdate);

        if (_trans &&
            _trans.Module == FactureModule_RU::Cust &&
            _trans.FactureLineType == FactureLineType_RU::InvoiceLine)
        {
            select firstonly ret
                where ret.LineNum == _trans.InvoiceLineNum &&
                      ret.InvoiceDate == _trans.InvoiceDate &&
                      ret.InvoiceId == _trans.InvoiceId &&
                      ret.SalesId == _trans.SalesPurchId &&
                      ret.NumberSequenceGroup == _trans.NumberSequenceGroup;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransid</Name>
				<Source><![CDATA[
    static CustInvoiceTrans findInventTransid(TradeInventTransId _inventTransId,
                                              boolean _update = false )
    {
        CustInvoiceTrans custInvoiceTrans;

        if (_inventTransId)
        {
            custInvoiceTrans.selectForUpdate(_update);

            select firstonly custInvoiceTrans
                where custInvoiceTrans.InventTransId == _inventTransId;
        }

        return custInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOriginalTrans_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns container holding chain of corrected invoice trans records
    /// </summary>
    /// <param name="_custInvoiceTrans">
    /// <c>CustInvoiceTrans</c> record for which original lines looked for.
    /// </param>
    /// <returns>
    /// Container holding chain of corrected invoice trans records
    /// </returns>
    static container findOriginalTrans_RU(CustInvoiceTrans _custInvoiceTrans)
    {
        CustInvoiceTrans custInvoiceTransOriginal;
        CustInvoiceTransCorrLink_RU corrLink;

        if (! _custInvoiceTrans.existsCorrLink_RU())
        {
            return conNull();
        }

        select firstonly custInvoiceTransOriginal
            join TableId from corrLink
            where custInvoiceTransOriginal.RecId == corrLink.CorrTransRecId &&
                  corrLink.TransRecId == _custInvoiceTrans.RecId;

        return [custInvoiceTransOriginal] + CustInvoiceTrans::findOriginalTrans_RU(custInvoiceTransOriginal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static CustInvoiceTrans findRecId(RecId recId,
                                      boolean update = false )
    {
        CustInvoiceTrans custInvoiceTrans;

        if (recId)
        {
            custInvoiceTrans.selectForUpdate(update);

            select firstonly custInvoiceTrans
                where custInvoiceTrans.RecId== recId;
        }

        return custInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderedQty_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ordered quantity.
    /// </summary>
    /// <param name="_salesId">
    /// The sales id.
    /// </param>
    /// <param name="_inventTransId">
    /// The invent trans id.
    /// </param>
    /// <returns>
    /// The ordered quantity.
    /// </returns>
    public static real getOrderedQty_IN(SalesId _salesId,
                                        InventTransId _inventTransId)
    {
        CustInvoiceTrans custInvoiceTrans;

        select sum(Qty) from custInvoiceTrans
            where custInvoiceTrans.SalesId == _salesId &&
                    custInvoiceTrans.InventTransId == _inventTransId;

        return custInvoiceTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReceive_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets received quantity.
    /// </summary>
    /// <param name="_salesId">
    /// The sales id.
    /// </param>
    /// <param name="_invoiceId">
    /// The invoice id.
    /// </param>
    /// <param name="_inventTransId">
    /// The invent trans id.
    /// </param>
    /// <returns>
    /// The received quantity.
    /// </returns>
    public static real getReceive_IN(SalesId _salesId,
                                    InvoiceId _invoiceId,
                                    InventTransId _inventTransId)
    {
        CustInvoiceTrans custInvoiceTrans;

        select sum(Qty) from custInvoiceTrans
            where custInvoiceTrans.SalesId == _salesId &&
                    custInvoiceTrans.InvoiceId == _invoiceId &&
                    custInvoiceTrans.InventTransId == _inventTransId;

        return custInvoiceTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the number of lines that are associated with the specified invoice transaction.
    /// </summary>
    /// <param name="_invoiceId">
    ///    The <c>InvoiceId</c> field of a customer transaction.
    /// </param>
    /// <param name="_transDate">
    ///    The transaction date of an invoice.
    /// </param>
    /// <returns>
    ///    The number of lines that are associated with an invoice transaction.
    /// </returns>

    public static Counter numOfLines(InvoiceId _invoiceId, TransDate _transDate)
    {
        return any2int((select count(RecId) from custInvoiceTrans
        where custInvoiceTrans.InvoiceId == _invoiceId && custInvoiceTrans.InvoiceDate == _transDate).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateIntrastatFulfillDatePackingSlip_HU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the packing slip transaction with the <c>IntrastatFulfillmentDate_HU</c> value.
    /// </summary>
    /// <param name="_custInvoiceTrans">
    ///     A <c>CustInvoiceTrans</c> table buffer.
    /// </param>
    public static void updateIntrastatFulfillDatePackingSlip_HU(CustInvoiceTrans _custInvoiceTrans)
    {
        CustPackingSlipTrans custPackingSlipTrans;
        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;

        select firstonly PackingSlipId from inventTrans
            where inventTrans.InventTransOrigin == inventTransOrigin.RecId &&
                  inventTransOrigin.InventTransId == _custInvoiceTrans.InventTransId;

        if (inventTrans.PackingSlipId)
        {
            ttsbegin;
            select firstonly forupdate custPackingSlipTrans
                where custPackingSlipTrans.PackingSlipId == inventTrans.PackingSlipId &&
                      custPackingSlipTrans.InventTransId == _custInvoiceTrans.InventTransId;
            if (custPackingSlipTrans)
            {
                custPackingSlipTrans.IntrastatFulfillmentDate_HU = _custInvoiceTrans.IntrastatFulfillmentDate_HU;
                custPackingSlipTrans.doUpdate();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.TransitDocumentTransactionMap_IN::deleteTransitDocuments();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsRebateCustInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the corresponding <c>PdsRebateCustInvoiceTrans</c> record to current record.
    /// If missing, the record is created.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The <c>PdsRebateCustInvoiceTrans</c> table record.
    /// </returns>
    public PdsRebateCustInvoiceTrans pdsRebateCustInvoiceTrans(boolean _forUpdate = false)
    {
        PdsRebateCustInvoiceTrans pdsRebateCustInvoiceTrans;
        SalesLine salesLine;
        SalesTable salesTable;

        pdsRebateCustInvoiceTrans = PdsRebateCustInvoiceTrans::findByCustInvoiceTransRecId(this.RecId, _forUpdate);

        if (!pdsRebateCustInvoiceTrans)
        {
            salesLine = this.salesLine();

            if (salesLine)
            {
                salesTable = salesLine.salesTable();
            }

            if (salesTable && salesLine)
            {
                pdsRebateCustInvoiceTrans.initFromSalesTableSalesLine(salesTable, salesLine);
            }

            pdsRebateCustInvoiceTrans.CustInvoiceTransRecId = this.RecId;

            ttsBegin;

            pdsRebateCustInvoiceTrans.insert();

            ttsCommit;
        }

        return pdsRebateCustInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountMST_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the tax amount in account currency.
    /// </summary>
    /// <returns>
    /// The tax amount in account currency.
    /// </returns>
    public display AmountMST taxAmountMST_MY()
    {
        // <GMY>
        return CurrencyExchangeHelper::amountCur2MST(this.displayTaxAmount(), this.CurrencyCode);
        // </GMY>
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineNumber_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets line number of a cust invoice trans line
    /// </summary>
    /// <returns>
    /// Line number of the cust invoice trans line
    /// </returns>
    public int64 getLineNumber_MY()
    {
        // <GMY>
        CustInvoiceTrans	custInvoiceTransGetLineNumber;

        select count(RecId) from custInvoiceTransGetLineNumber
            where custInvoiceTransGetLineNumber.SalesId == this.SalesId
                && custInvoiceTransGetLineNumber.InvoiceDate == this.InvoiceDate
                && custInvoiceTransGetLineNumber.InvoiceId == this.InvoiceId
                && custInvoiceTransGetLineNumber.LineNum			<= this.LineNum;

        return custInvoiceTransGetLineNumber.RecId * TaxGSTHelper_MY::LineNumberInterval;
        // </GMY>
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocuRefNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find related DocuRef note.
    /// </summary>
    /// <returns>Related DocuRef note.</returns>
    public Notes getDocuRefNote()
    {
        return DocuRef::findTableIdRecId(curExt(), this.TableId, this.RecId).Notes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkupTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all <c>MarkupTrans</c> records linked with current record.
    /// </summary>
    /// <returns><c>RecordLinkList</c> containing all found records.</returns>
    [ERTableName(tableStr(MarkupTrans))]
    public RecordLinkList getMarkupTransactions()
    {
        MarkupTrans markupTrans;
        RecordLinkList recordList = new RecordLinkList();

        while select markupTrans
            where markupTrans.TransTableId == this.TableId
            && markupTrans.TransRecId == this.RecId
        {
            recordList.ins(markupTrans);
        }

        return recordList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all <c>TaxTrans</c> records linked with current record.
    /// </summary>
    /// <returns><c>RecordLinkList</c> containing all found records.</returns>
    [ERTableName(tableStr(TaxTrans))]
    public RecordLinkList getTaxTransactions()
    {
        TaxTrans taxTrans;
        RecordLinkList recordList = new RecordLinkList();

        while select taxTrans
            where taxTrans.SourceTableId == this.TableId
            && taxTrans.SourceRecId == this.RecId
        {
            recordList.ins(taxTrans);
        }

        return recordList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendInvoiceTransInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CustVendInvoiceTransInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// The <c>CustVendInvoiceTransInterface</c> object.
    /// </returns>
    public CustVendInvoiceTransInterface custVendInvoiceTransInterface()
    {
        return this.CustVendInvoiceTrans::CustVendInvoiceTransInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRefReturnInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the original invoice reference for which credit notes are created.
    /// </summary>
    /// <param name = "_salesLine">
    ///     This is the <c>SalesLine</c> which will be picked for current sales Order
    /// </param>
    /// <param name = "_custInvoiceTrans_W">
    ///     This is the <c>CustInvoiceTrans_W</c> object where we need to keep the original invoice reference
    ///  </param>
    internal void setRefReturnInvoiceTrans(SalesLine _salesLine, CustInvoiceTrans_W _custInvoiceTrans_W)
    {
        _custInvoiceTrans_W.RefReturnInvoiceTrans_W = _salesLine.RefReturnInvoiceTrans_W;
        if(_salesLine.RefReturnInvoiceTrans_W != 0 && FeatureStateProvider::isFeatureEnabled(CustCreditNoteRefReturnInvoiceFlight_PL::instance()))
        {
            RefReturnInvoiceTrans_W recId = _salesLine.RefReturnInvoiceTrans_W;
            CustInvoiceTrans_W prevCustInvoiceTrans_W = CustInvoiceTrans_W::findByCustInvoiceTrans(recId);
            if(prevCustInvoiceTrans_W.CreditNoteInternalRef_W != 0)
            {
                CustInvoiceTrans_W originalCustInvoice = CustInvoiceTrans_W::findByCreditNoteInternalRef(prevCustInvoiceTrans_W.CreditNoteInternalRef_W);
                if(originalCustInvoice)
                {
                    _custInvoiceTrans_W.RefReturnInvoiceTrans_W = originalCustInvoice.RefReturnInvoiceTrans_W;
                }
            }
            
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124457</DeveloperDocumentation>
	<Label>@SYS27200</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustVendCreditInvoicingTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustVendCreditInvoicingTrans</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS12227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmountTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AmountInDefaultCurrency</Name>
			<Label>@SYS84859</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineAmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmountTaxMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BillingCode</Name>
			<Label>@SPS21</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BillingCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Commission</Name>
			<Label>@SYS2489</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CommissCalc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CommissAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CommissAmountMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customer</Name>
			<Label>@SYS302</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeliveryAddress</Name>
			<Label>@SYS7924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>deliveryAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Discount</Name>
			<Label>@SYS11829</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DiscPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLnPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLnDisc</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DiscountAmount</Name>
			<Label>@SYS10946</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SumLineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumLineDiscMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EInvoice</Name>
			<Label>@SYS100769</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EInvoiceAccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderLineReference_NO</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExportSalesInvoiceLine</Name>
			<Label>@GLS222108</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrigSalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmountTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>contributionMargin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>contributionRatio</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExportSalesInvoiceLineDetail</Name>
			<Label>@GLS222107</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>editDomesticSalesTaxGroup_PL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigSalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExternalReference</Name>
			<Label>@SYS21697</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomerLineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FixedAssets</Name>
			<Label>@SYS12578</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetBookId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ForeignTrade</Name>
			<Label>@SYS27650</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Port</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatProcId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatLineAmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatDispatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryRegionOfShipment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StateOfShipment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatCommodity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Weight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigCountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigState</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatFulfillmentDate_HU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StockedProduct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventPackaging</Name>
			<Label>@SYS72995</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoice</Name>
			<Label>@SYS12128</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>numberSequenceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Item</Name>
			<Label>@SYS7407</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MCRDelivery</Name>
			<Label>@SYS4508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MCRDeliveryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRDlvMode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Name_W</Name>
			<Label>@AccountsReceivable:PersonName</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NGPCode</Name>
			<Label>@SYS331020</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NGPCodesTable_FR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OLAP</Name>
			<Label>@SYS25984</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OLAPCostValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OrderLines</Name>
			<Label>@SYS508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrigSalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineHeader</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCW</Name>
			<Label>@PDS72</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWRemain</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWQtyPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting</Name>
			<Label>@SYS5943</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reason</Name>
			<Label>@SYS107174</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReasonRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS15217</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventRefType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RetailCategory</Name>
			<Label>@RET5714</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetailCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Return</Name>
			<Label>@SYS101133</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReturnClosedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnArrivalDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnDispositionCodeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reversal</Name>
			<Label>@SYS8776</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReversedRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReverseCharge</Name>
			<Label>@SYS118818</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReverseCharge_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReverseChargeSalesList</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesQuantity</Name>
			<Label>@SYS11990</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PartDelivery</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Remain</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxAutogenerated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWriteCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideSalesTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SourceDocumentLine</Name>
			<Label>@SYS132694</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterCompanyInventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WithholdingTax</Name>
			<Label>@SYS7372</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdGroup_TH</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdItemGroupHeading_TH</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PeriodChargeInvoiceLineBase</Name>
			<Label>@SCM:MarkupPeriodChargeInvoiceLineBase</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PeriodChargeInvoiceLineBaseFromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodChargeInvoiceLineBaseToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWithholdGroup_TH</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>TH,SA,GB,IE,BR</CountryRegionCodes>
			<ExtendedDataType>TaxWithholdGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InterCompanyInventTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetBookId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetBookIdPurchSalesInvent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetIdOpen</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BillingCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BillingCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CommissAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CommissAmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CommissAmountMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CommissAmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CommissCalc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CommissCalc</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountryRegionOfShipment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AddressCountryRegionId</ExtendedDataType>
			<Label>@SYS86850</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustInvoiceLineIdRef</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustInvoiceLineIdRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CustomerLineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustLineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DeliveryType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeLineDlvTypeId</ExtendedDataType>
			<EnumType>TradeLineDlvType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DiscAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesDiscAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DiscPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesDiscPercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DlvDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesShippingDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EInvoiceAccountCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EInvoiceAccountCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExternalItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesExternalItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntrastatDispatchId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatDispatchId</ExtendedDataType>
			<FeatureClass>IntrastatDispatchIdToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>IntrastatFulfillmentDate_HU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatFulfillmentDate_HU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventRefId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventRefTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventRefTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventRefType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventRefType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeInventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InvoiceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<GroupPrompt>@SYS7402</GroupPrompt>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustInvoiceId</ExtendedDataType>
			<GroupPrompt>@SYS13864</GroupPrompt>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>IntrastatCommodity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatCommodityId</ExtendedDataType>
			<FeatureClass>IntrastatCommodityToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Label>@SYS7407</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS6928</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmountMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS84859</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmountTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineAmountTax</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmountTaxMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineAmountTaxMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesLineDisc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LineHeader</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineHeader</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LinePercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesLinePercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRDeliveryName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustName</ExtendedDataType>
			<Label>@SYS22058</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRDlvMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustDlvModeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MultiLnDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesMultiLnDisc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MultiLnPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesMultiLnPercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemFreeTxtBase</ExtendedDataType>
			<Label>@SYS6303</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>NGPCodesTable_FR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NGPCodesTableFRId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>numberSequenceGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NumberSequenceGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OLAPCostValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesCostValue</ExtendedDataType>
			<Label>@SYS8556</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigCountryRegionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemOrigCountryRegionId</ExtendedDataType>
			<FeatureClass>ItemOrigCountryRegionIdToggle</FeatureClass>
			<Label>@SYS27196</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigSalesId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesIdOrig</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigState</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemOrigStateId</ExtendedDataType>
			<FeatureClass>ItemOrigStateIdToggle</FeatureClass>
			<Label>@SYS73785</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ParentRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PartDelivery</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PartDelivery</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQtyPhysical</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWRemain</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS147</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Port</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatPortId</ExtendedDataType>
			<FeatureClass>IntrastatPortToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesInvoicedQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyPhysical</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesQty</ExtendedDataType>
			<Label>@SYS14578</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReasonRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ReasonRefRecID</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Remain</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesQty</ExtendedDataType>
			<Label>@SYS7108</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainBefore</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesQty</ExtendedDataType>
			<Label>@SYS8459</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RetailCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Retail</ConfigurationKey>
			<ExtendedDataType>RetailCategory</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReturnArrivalDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnArrivalDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReturnClosedDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnClosedDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReturnDispositionCodeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnDispositionCodeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReversedRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS330318</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesCategory</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CommissSalesGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesMarkup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesMarkup</ExtendedDataType>
			<Label>@SYS8371</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesPrice</ExtendedDataType>
			<Label>@SYS11770</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentLine</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS132694</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>StatLineAmountMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatLineAmountMST</ExtendedDataType>
			<FeatureClass>IntrastatLineAmountMSTToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StatProcId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatProcId</ExtendedDataType>
			<FeatureClass>IntrastatProcToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StockedProduct</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeStockedProduct</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SumLineDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesSumLineDiscAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SumLineDiscMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesSumLineDiscAmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmountMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmount</ExtendedDataType>
			<Label>@SYS60764</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxAutogenerated</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAutoGenerated</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdItemGroupHeading_TH</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdItemGroupId_TH</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWriteCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWriteCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransactionCodeId</ExtendedDataType>
			<FeatureClass>IntrastatTransactionCodeToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Transport</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransport</ExtendedDataType>
			<FeatureClass>IntrastatTransportToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Weight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Weight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReverseCharge_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxReverseCharge</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReverseChargeSalesList</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS118786</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderLineReference_NO</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OrderLineReference_NO</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReverseChargeApplies_UK</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<CountryRegionCodes>GB</CountryRegionCodes>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemCodeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>DEL_IntrastatItemCodeId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LineCreationSequenceNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustInvoiceLineCreationSequenceNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefCommReportTrans_RU</Name>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StateOfShipment</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsAddressStateId</ExtendedDataType>
			<Label>@AccountsReceivable:StateProvinceOfShipment</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PeriodChargeInvoiceLineBaseFromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Markup</ConfigurationKey>
			<ExtendedDataType>MarkupPeriodChargeInvoiceLineBaseFromDate</ExtendedDataType>
			<FeatureClass>MarkupPeriodChargeFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PeriodChargeInvoiceLineBaseToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Markup</ConfigurationKey>
			<ExtendedDataType>MarkupPeriodChargeInvoiceLineBaseToDate</ExtendedDataType>
			<FeatureClass>MarkupPeriodChargeFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FinTag</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FinTagRecId</ExtendedDataType>
			<FeatureClass>SalesOrderFinTagFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideSalesTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntegrationOverrideSalesTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalCharge</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InvoiceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>numberSequenceGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Qty</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>QtyPhysical</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LedgerDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DefaultDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxWithholdItemGroupHeading_THIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxWithholdItemGroupHeading_TH</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>EcoResCategoryIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RetailCategory</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>MCRInvoiceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>MCRCallCenter</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InvoiceId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustInvoiceLineIdRefIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustInvoiceLineIdRef</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustInvoiceTransCreationSequenceIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InvoiceId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineCreationSequenceNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventDimIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DeliveryPostalAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ParentRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ParentRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SalesLineInvoice</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>CashFlowForecasting</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>OrigSalesId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CurrencyCodeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>CustVendInvoiceTrans</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Category_RU</MapField>
					<MapFieldTo>SalesCategory</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension_RU</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Dimension_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DiscAmount_JP</MapField>
					<MapFieldTo>DiscAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DiscPercent_JP</MapField>
					<MapFieldTo>DiscPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EmplLineType_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExciseAmountMST_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExciseAmount_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExciseValue_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExternalItemId_RU</MapField>
					<MapFieldTo>ExternalItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FacturedFully_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FacturedQty_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FactureId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FactureModule</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IntrastatFulfillmentDate_HU</MapField>
					<MapFieldTo>IntrastatFulfillmentDate_HU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventQty</MapField>
					<MapFieldTo>InventQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceDate</MapField>
					<MapFieldTo>InvoiceDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceNum</MapField>
					<MapFieldTo>InvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmountMST</MapField>
					<MapFieldTo>LineAmountMST</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmountMST_JP</MapField>
					<MapFieldTo>LineAmountMST</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmountMST_W</MapField>
					<MapFieldTo>LineAmountMST</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum_RU</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineType_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Name_JP</MapField>
					<MapFieldTo>Name</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Name_RU</MapField>
					<MapFieldTo>Name</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceGroupId_RU</MapField>
					<MapFieldTo>numberSequenceGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ParentRecId</MapField>
					<MapFieldTo>ParentRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
					<MapFieldTo>SalesPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price_RU</MapField>
					<MapFieldTo>SalesPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchInternalInvoiceId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>Qty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>QtyPhysical</MapField>
					<MapFieldTo>QtyPhysical</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RefCommReportTrans_RU</MapField>
					<MapFieldTo>RefCommReportTrans_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId_RU</MapField>
					<MapFieldTo>SalesId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchOrigId_JP</MapField>
					<MapFieldTo>OrigSalesId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchPrice_JP</MapField>
					<MapFieldTo>SalesPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StockedProduct</MapField>
					<MapFieldTo>StockedProduct</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxAmountMST_JP</MapField>
					<MapFieldTo>TaxAmountMST</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxAmountMST_W</MapField>
					<MapFieldTo>TaxAmountMST</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxAmount_JP</MapField>
					<MapFieldTo>TaxAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxAmount_RU</MapField>
					<MapFieldTo>TaxAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup_RU</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup_RU</MapField>
					<MapFieldTo>TaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransactionCode</MapField>
					<MapFieldTo>TransactionCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Unit</MapField>
					<MapFieldTo>SalesUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Unit_RU</MapField>
					<MapFieldTo>SalesUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATAmountMST_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATAmount_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATValue_RU</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>FormletterJournalTrans</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Category</MapField>
					<MapFieldTo>SalesCategory</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InternalJournalId</MapField>
					<MapFieldTo>InvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JournalId</MapField>
					<MapFieldTo>InvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceGroup</MapField>
					<MapFieldTo>numberSequenceGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderId</MapField>
					<MapFieldTo>SalesId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrigOrderId</MapField>
					<MapFieldTo>OrigSalesId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>InvoiceDate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>InterCompanyTrans</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InterCompanyInventTransId</MapField>
					<MapFieldTo>InterCompanyInventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventRefId</MapField>
					<MapFieldTo>InventRefId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventRefTransId</MapField>
					<MapFieldTo>InventRefTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventRefType</MapField>
					<MapFieldTo>InventRefType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StockedProduct</MapField>
					<MapFieldTo>StockedProduct</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransQty</MapField>
					<MapFieldTo>Qty</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>IntrastatTransferMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>IntrastatCommodity</MapField>
					<MapFieldTo>IntrastatCommodity</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IntrastatExclude</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IntrastatTransferMap</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IntraUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceId</MapField>
					<MapFieldTo>InvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MarkupPct</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NetWeightByUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NGPCodesTable_FR</MapField>
					<MapFieldTo>NGPCodesTable_FR</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrigCountryRegionId</MapField>
					<MapFieldTo>OrigCountryRegionId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrigState</MapField>
					<MapFieldTo>OrigState</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Port</MapField>
					<MapFieldTo>Port</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StatProcId</MapField>
					<MapFieldTo>StatProcId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransactionCode</MapField>
					<MapFieldTo>TransactionCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Transport</MapField>
					<MapFieldTo>Transport</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Weight</MapField>
					<MapFieldTo>Weight</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>InventTrackingCustJournalTrans</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JournalId</MapField>
					<MapFieldTo>InvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesUnit</MapField>
					<MapFieldTo>SalesUnit</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PlFiscalDocumentTrans</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Name</MapField>
					<MapFieldTo>Name</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SourceDocumentLineImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TransitDocumentTransactionMap_IN</MappingTable>
			<Connections />
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CategoryId</MapField>
					<MapFieldTo>SalesCategory</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
					<MapFieldTo>Qty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchUnit</MapField>
					<MapFieldTo>SalesUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
					<MapFieldTo>InvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>InvoiceDate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TaxReportDomesticCustVendInvoiceTrans_IT</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceDate</MapField>
					<MapFieldTo>InvoiceDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceId</MapField>
					<MapFieldTo>InvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmountCur</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmountMST</MapField>
					<MapFieldTo>LineAmountMST</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ParentRecId</MapField>
					<MapFieldTo>ParentRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>Qty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>SalesId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Weight</MapField>
					<MapFieldTo>Weight</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetBookTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetBookTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetBookId</Name>
					<SourceEDT>AssetBookIdPurchSalesInvent</SourceEDT>
					<Field>AssetBookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BookIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<SourceEDT>AssetIdOpen</SourceEDT>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CommissionSalesGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CommissionSalesGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesGroup</Name>
					<SourceEDT>CommissSalesGroup</SourceEDT>
					<Field>SalesGroup</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CustCurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoice</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceId</Name>
					<SourceEDT>CustInvoiceId</SourceEDT>
					<Field>InvoiceId</Field>
					<RelatedField>InvoiceId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceJour_1</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>CustInvoiceTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceId</Name>
					<Field>InvoiceId</Field>
					<RelatedField>InvoiceId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceDate</Name>
					<Field>InvoiceDate</Field>
					<RelatedField>InvoiceDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>numberSequenceGroup</Name>
					<Field>numberSequenceGroup</Field>
					<RelatedField>numberSequenceGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInvoiceJour_ParentRecId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceJour_ParentRecId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParentRecId</Name>
					<SourceEDT>RefRecId</SourceEDT>
					<Field>ParentRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InvoiceNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceLineIdRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceLineIdRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceLineIdRef</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustInvoiceLineIdRef</Name>
					<Field>CustInvoiceLineIdRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceSalesLink</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceSalesLink</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceSalesLink</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CustInvoiceTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<Field>SalesId</Field>
					<RelatedField>salesId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceId</Name>
					<Field>InvoiceId</Field>
					<RelatedField>invoiceId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceDate</Name>
					<Field>InvoiceDate</Field>
					<RelatedField>invoiceDate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceTrans_Reversal</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReversedRecId</Name>
					<Field>ReversedRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DeliveryPostalAddress_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DeliveryPostalAddress_FK</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailCategory</Name>
					<Field>RetailCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatCommodity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IntrastatCommodity</Name>
					<Field>IntrastatCommodity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatPort</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatPort</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Port</Name>
					<SourceEDT>IntrastatPortId</SourceEDT>
					<Field>Port</Field>
					<RelatedField>PortId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PortIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatStatProc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatStatProc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StatProcId</Name>
					<SourceEDT>IntrastatProcId</SourceEDT>
					<Field>StatProcId</Field>
					<RelatedField>StatProcId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatProcIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransactionCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatTransactionCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransactionCode</Name>
					<SourceEDT>IntrastatTransactionCodeId</SourceEDT>
					<Field>TransactionCode</Field>
					<RelatedField>TransactionCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransportMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatTransportMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Transport</Name>
					<SourceEDT>IntrastatTransport</SourceEDT>
					<Field>Transport</Field>
					<RelatedField>TransPortCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransPortCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim_InventDimId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventDim_InventDimId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable_ItemId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin_InterCmpInvTransId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOrigin_InterCmpInvTransId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InterCompanyInventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InterCompanyInventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransOrigin_InventTransId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOrigin_InventTransId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsAddressCountryRegion_RegionId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressCountryRegion_RegionId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigCountryRegionId</Name>
					<SourceEDT>ItemOrigCountryRegionId</SourceEDT>
					<Field>OrigCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsAddressCountryRegion_Shipment</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressCountryRegion_Shipment</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryRegionOfShipment</Name>
					<SourceEDT>AddressCountryRegionId</SourceEDT>
					<Field>CountryRegionOfShipment</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MCRDlvMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DlvMode</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCRDlvMode</Name>
					<Field>MCRDlvMode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NGPCodesTable_FR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>NGPCodesTable_FR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Role>NGPCodesTable_FR</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NGPCodesTable_FR</Name>
					<Field>NGPCodesTable_FR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NumberSequenceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>NumberSequenceGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>numberSequenceGroup</Name>
					<SourceEDT>NumberSequenceGroupId</SourceEDT>
					<Field>numberSequenceGroup</Field>
					<RelatedField>numberSequenceGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>groupId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReasonTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ReasonTableRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonRefRecId</Name>
					<SourceEDT>ReasonRefRecID</SourceEDT>
					<Field>ReasonRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReturnDispositionCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ReturnDispositionCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReturnDispositionCodeId</Name>
					<SourceEDT>ReturnDispositionCodeId</SourceEDT>
					<Field>ReturnDispositionCodeId</Field>
					<RelatedField>DispositionCodeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DispositionCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesCategory</Name>
					<Field>SalesCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTable_OrigSalesId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesTable_OrigSalesId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigSalesId</Name>
					<SourceEDT>SalesIdOrig</SourceEDT>
					<Field>OrigSalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTable_SalesId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesTable_SalesId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<SourceEDT>SalesId</SourceEDT>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesUnit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesUnit</Name>
					<Field>SalesUnit</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentLine</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>SourceDocumentLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDocumentLine</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CustInvoiceTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentLine</Name>
					<Field>SourceDocumentLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<SourceEDT>TaxGroup</SourceEDT>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<SourceEDT>TaxItemGroup</SourceEDT>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxWithholdGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdGroup_TH</Name>
					<SourceEDT>TaxWithholdGroup</SourceEDT>
					<Field>TaxWithholdGroup_TH</Field>
					<RelatedField>TaxWithholdGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxWithholdGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>taxWithholdItemGroupHeading_TH</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdItemGroupHeading_TH</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdItemGroupHeading_TH</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdItemGroupHeading_TH_CustInvoiceTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdItemGroupHeading_TH</Name>
					<Field>TaxWithholdItemGroupHeading_TH</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CommReportTransItem_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CommReportTransItem_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefCommReportTrans_RU</Name>
					<Field>RefCommReportTrans_RU</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsAddressState_Shipment</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressState</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressState</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StateOfShipment</Name>
					<Field>StateOfShipment</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryRegionOfShipment</Name>
					<Field>CountryRegionOfShipment</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionStateIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FinTag</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FinTag</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>FinTag</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FinTag</Name>
					<Field>FinTag</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>