<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportLines</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxReportLines extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxBookType</Name>
				<Source><![CDATA[
    private TaxBookType_ES getTaxBookType(TaxTrans _taxTrans)
    {
        switch (_taxTrans.TaxDirection)
        {
            case TaxDirection::IncomingTax:
            case TaxDirection::TaxExemptPurchase:
            case TaxDirection::UseTax:
                return TaxBookType_ES::IncomingTax;

            case TaxDirection::OutgoingTax:
            case TaxDirection::TaxExemptSales:
                return TaxBookType_ES::OutgoingTax;
        }

        // This error should not normally be thrown as the consumer of the getTaxBookType() method
        // is supposed to filter TaxTrans records only by values from the switch statement.
        throw error(Error::wrongUseOfFunction(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFiscalInfoFromCustVendInvoiceJour</Name>
				<Source><![CDATA[
    private void initFiscalInfoFromCustVendInvoiceJour(
        CustVendInvoiceJour _custVendInvoiceJour,
        CustVendAC          _custVendAccount = _custVendInvoiceJour.InvoiceAccount)
    {
        CustVendTable   custVendTable;
        ModuleCustVend  moduleCustVend =
            _custVendInvoiceJour.TableId == tablenum(VendInvoiceJour) ? ModuleCustVend::Vend : ModuleCustVend::Cust;

        if (_custVendInvoiceJour.vatNum)
        {
            // Fill VAT number from the transaction if possible
            this.vatNum = _custVendInvoiceJour.vatNum;
        }
        else
        {
            // Otherwise fill VAT number from the counteragent.
            custVendTable = CustVendTable::findModule(moduleCustVend, _custVendAccount);
            this.vatNum = custVendTable.CustVendTable::getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _custVendInvoiceJour.InvoiceDate);
        }

        if (this.vatNum)
        {
            // Fill Name from the table with VAT numbers if possible.
            this.Name = (select firstonly Name from taxVatNumTable where taxVatNumTable.vatNum == this.vatNum).Name;
        }

        if (!this.Name)
        {
            // Otherwise fill Name from the counteragent.

            if (!custVendTable.RecId)
            {
                custVendTable = CustVendTable::findModule(moduleCustVend, _custVendAccount);
            }

            this.Name = custVendTable.name();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFiscalInfoFromCustVendTrans</Name>
				<Source><![CDATA[
    private void initFiscalInfoFromCustVendTrans(
        CustVendTrans   _custVendTrans,
        CustVendAC      _custVendAccount = _custVendTrans.AccountNum)
    {
        CustVendTable   custVendTable;
        ModuleCustVend  moduleCustVend = _custVendTrans.TableId == tablenum(CustTrans) ? ModuleCustVend::Cust : ModuleCustVend::Vend;

        if (moduleCustVend == ModuleCustVend::vend)
        {
            VendTrans vendTransLocal = VendTrans::find(_custVendTrans.OffsetRecid);
            if (vendTransLocal.Invoice)
            {
                this.VATNum = VendInvoiceJour::findFromVendTrans(vendTransLocal.Invoice, this.InvoiceDate, vendTransLocal.AccountNum, false, vendTransLocal.Voucher).VATNum;
            }
        }
        else
        {
            CustTrans custTransLocal = CustTrans::find(_custVendTrans.OffsetRecid);
            if (custTransLocal.Invoice)
            {
                this.VATNum = CustInvoiceJour::findFromCustTrans(custTransLocal.Invoice, this.InvoiceDate, custTransLocal.AccountNum, false, custTransLocal.Voucher).VATNum;
            }
        }

        if (!this.VATNum)
        {
            custVendTable = CustVendTable::findModule(moduleCustVend, _custVendAccount);
            this.VATNum = custVendTable.CustVendTable::getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _custVendTrans.TransDate);        
        }

        if (this.VATNum)
        {
            // Fill Name from the VAT numbers table.
            this.Name = (select firstonly Name from taxVatNumTable
                            where taxVatNumTable.VATNum == this.VATNum).Name;
        }

        if (!this.Name)
        {
            // Otherwise fill Name from the counteragent.
            this.Name = custVendTable.name();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportLine</Name>
				<Source><![CDATA[
    public void initReportLine(TaxTrans _taxTrans, TaxBookTaxCodes _taxBookTaxCodes)
    {
        BankAccountTrans                    bankAccountTrans;
        ProjTransPosting                    projTransPosting;
        ProjInvoiceJour                     projInvoiceJour;
        LedgerJournalTrans                  ledgerJournalTrans;

        CustTrans                           custTrans;
        VendTrans                           vendTrans;
        CustInterestJour                    custInterestJour;
        DimensionAttributeValueCombination  dimAttrValueCombo;
        VendInvoiceJour                     vendInvoiceJour;
        CustInvoiceJour                     custInvoiceJour;
        LedgerDimensionAccount              ledgerDimension;

        this.TaxCode        = _taxBookTaxCodes.TaxCode;
        this.TaxCodeEq      = _taxBookTaxCodes.TaxCodeEq;
        this.Voucher        = _taxTrans.Voucher;
        this.TransDate      = _taxTrans.TransDate;
        this.TaxBookType    = this.getTaxBookType(_taxTrans);

        switch (_taxTrans.Source)
        {
            case TaxModuleType::SalesInvoice,
                 TaxModuleType::FreeTxtInvoice,
                 TaxModuleType::Sales,
                 TaxModuleType::CustCollectionLetter:

                select firstonly AccountNum, Invoice, Voucher, TableId, RecId from custTrans
                    where  custTrans.Voucher    == this.Voucher
                        && custTrans.TransDate  == this.TransDate;

                custInvoiceJour = CustInvoiceJour::findFromCustTransVoucher(custTrans.Invoice, custTrans.Voucher, _taxTrans.TransDate, custTrans.AccountNum);
                this.initFiscalInfoFromCustVendInvoiceJour(custInvoiceJour, custTrans.AccountNum);
                this.DocumentNum = custTrans.Invoice;
                this.InvoiceDate = custInvoiceJour.DocumentDate ? custInvoiceJour.DocumentDate : custInvoiceJour.InvoiceDate;
                this.SourceTableId = custTrans.TableId;
                this.SourceRecId   = custTrans.RecId;
                break;

            case TaxModuleType::CustInterestNote:

                select firstonly AccountNum, TableId, RecId from custTrans
                    where  custTrans.Voucher    == this.Voucher
                        && custTrans.TransDate  == this.TransDate;

                this.vatNum = CustTable::find(custTrans.AccountNum).getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, custTrans.TransDate);
                this.Name = (select Name from taxVatNumTable where taxVatNumTable.vatNum == this.vatNum).Name;

                custInterestJour = CustInterestJour::findByVoucher(custTrans.AccountNum, this.Voucher, this.TransDate);
                this.DocumentNum = custInterestJour.InterestNote;
                this.SourceTableId = custTrans.TableId;
                this.SourceRecId   = custTrans.RecId;
                break;

            case TaxModuleType::PurchInvoice,
                 TaxModuleType::Purch:

                vendTrans = this.getVendTrans();
                vendInvoiceJour = VendInvoiceJour::findFromVendTransVoucher(vendTrans.Invoice, vendTrans.Voucher, _taxTrans.TransDate, vendTrans.AccountNum);
                this.initFiscalInfoFromCustVendInvoiceJour(vendInvoiceJour, vendTrans.AccountNum);
                this.DocumentNum = vendTrans.Invoice;
                this.InvoiceDate = vendInvoiceJour.DocumentDate;
                this.SourceTableId = vendTrans.TableId;
                this.SourceRecId   = vendTrans.RecId;
                break;

            case TaxModuleType::Voucher:

                if (_taxTrans.TaxOrigin == TaxOrigin::Payment)
                {
                    this.initReportLineFromSourceTable(_taxTrans);
                }
                else
                {
                    vendTrans = this.getVendTrans();

                    if (vendTrans.AccountNum)
                    {
                        vendInvoiceJour = VendInvoiceJour::findFromVendTransVoucher(vendTrans.Invoice, vendTrans.Voucher, _taxTrans.TransDate, vendTrans.AccountNum);
                        this.initFiscalInfoFromCustVendInvoiceJour(vendInvoiceJour, vendTrans.AccountNum);
                        this.DocumentNum = vendTrans.Invoice;
                        this.InvoiceDate = vendInvoiceJour.DocumentDate;
                        this.SourceTableId = vendTrans.TableId;
                        this.SourceRecId   = vendTrans.RecId;
                    }
                    else
                    {
                        select firstonly AccountNum, Invoice, Voucher, TableId, RecId from custTrans
                            where  custTrans.Voucher    == this.Voucher
                                && custTrans.TransDate  == this.TransDate;

                        if (custTrans.AccountNum)
                        {
                            custInvoiceJour = CustInvoiceJour::findFromCustTransVoucher(custTrans.Invoice, custTrans.Voucher, _taxTrans.TransDate, custTrans.AccountNum);
                            this.initFiscalInfoFromCustVendInvoiceJour(custInvoiceJour, custTrans.AccountNum);
                            this.DocumentNum = custTrans.Invoice;
                            this.SourceTableId = custTrans.TableId;
                            this.SourceRecId   = custTrans.RecId;
                        }
                        else
                        {
                            select firstonly ProjId, TableId, RecId from projTransPosting
                                where  projTransPosting.Voucher       == this.Voucher
                                    && projTransPosting.ProjTransDate == this.TransDate;

                            if (projTransPosting.ProjId)
                            {
                                select firstonly ProjInvoiceId, vatNum, InvoiceAccount from projInvoiceJour
                                    where  projInvoiceJour.LedgerVoucher    == this.Voucher
                                        && projInvoiceJour.InvoiceDate      == this.TransDate;

                                this.initFiscalInfoFromCustVendInvoiceJour(projInvoiceJour);
                                this.DocumentNum = projInvoiceJour.ProjInvoiceId;
                                this.SourceTableId = projInvoiceJour.TableId;
                                this.SourceRecId   = projInvoiceJour.RecId;
                            }
                            else
                            {
                                select firstonly AccountId, TableId, RecId from bankAccountTrans
                                    where  bankAccountTrans.Voucher   == this.Voucher
                                        && bankAccountTrans.TransDate == this.TransDate;

                                if (!bankAccountTrans.AccountId)
                                {
                                    ledgerDimension = TaxTransGeneralJournalAccountEntry::getLedgerDimensionForTaxTrans(_taxTrans.RecId, TaxTransRelationshipType::TransactionLineAccount);

                                    select firstonly vatNumJournal, Invoice, TableId, RecId from ledgerJournalTrans
                                        where ledgerJournalTrans.Voucher    == _taxTrans.Voucher      &&
                                              ledgerJournalTrans.TransDate  == _taxTrans.TransDate
                                        join RecId from dimAttrValueCombo where
                                            dimAttrValueCombo.RecId == ledgerJournalTrans.LedgerDimension &&
                                            dimAttrValueCombo.RecId == ledgerDimension;

                                    this.vatNum         = ledgerJournalTrans.vatNumJournal;
                                    this.Name           = (select Name from taxVatNumTable where taxVatNumTable.vatNum == this.vatNum).Name;
                                    this.DocumentNum    = ledgerJournalTrans.Invoice;
                                    this.SourceTableId = ledgerJournalTrans.TableId;
                                    this.SourceRecId   = ledgerJournalTrans.RecId;
                                }
                                else
                                {
                                    this.SourceTableId = bankAccountTrans.TableId;
                                    this.SourceRecId   = bankAccountTrans.RecId;
                                }
                            }
                        }
                    }
                }
                break;

            case TaxModuleType::Project,
                 TaxModuleType::ProjectInvoice:

                select firstonly ProjId, TableId, RecId from projTransPosting
                   where  projTransPosting.Voucher         == this.Voucher
                       && projTransPosting.LedgerTransDate == this.TransDate;

                if (projTransPosting.ProjId)
                {
                    select firstonly ProjInvoiceId, vatNum, InvoiceAccount from projInvoiceJour
                        where  projInvoiceJour.LedgerVoucher    == this.Voucher
                            && projInvoiceJour.InvoiceDate      == this.TransDate;

                    this.initFiscalInfoFromCustVendInvoiceJour(projInvoiceJour);
                    this.DocumentNum = projInvoiceJour.ProjInvoiceId;
                    this.SourceTableId = projTransPosting.TableId;
                    this.SourceRecId   = projTransPosting.RecId;
                }

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTrans</Name>
				<Source><![CDATA[
    private VendTrans getVendTrans()
    {
        VendTrans vendTrans;

        select firstonly AccountNum, Invoice, Voucher, TableId, RecId from vendTrans
            where  vendTrans.Voucher == this.Voucher
                && vendTrans.TransDate == this.TransDate;

        if (!vendTrans)
        {
            LedgerJournalVoucherChanged ledgerJournalVoucherChanged;

            select firstonly FromDate, FromVoucher from ledgerJournalVoucherChanged
                where ledgerJournalVoucherChanged.ToDate == this.TransDate
                    && ledgerJournalVoucherChanged.ToVoucher == this.Voucher;

            if (ledgerJournalVoucherChanged)
            {
                select firstonly AccountNum, Invoice, Voucher, TableId, RecId from vendTrans
                    where  vendTrans.Voucher == ledgerJournalVoucherChanged.FromVoucher
                        && vendTrans.TransDate == ledgerJournalVoucherChanged.FromDate;
            }
        }

        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        #TaxReport340

        boolean isValid = super();

        if (strupr(this.OperationType) != #OperationType_Rent && (this.PropertyTaxNumber || this.SituationCode))
        {
            isValid = checkFailed("@GLS3800245");
        }
        if (strupr(this.OperationType) == #OperationType_Rent &&
            (this.SituationCode == TaxReportSituationCode_ES::None ||
                (this.SituationCode != TaxReportSituationCode_ES::Option3 && !this.PropertyTaxNumber)))
        {
            isValid = checkFailed("@GLS3800264");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportLineFromSourceTable</Name>
				<Source><![CDATA[
    private void initReportLineFromSourceTable(TaxTrans _taxTrans)
    {
        CustInvoiceJour custInvoiceJour;
        VendInvoiceJour vendInvoiceJour;
        CustTrans       custTrans;
        VendTrans       vendTrans;
        VendPromissoryNoteTrans     vendPromissoryNoteTrans;
        CustBillOfExchangeTrans     custBillOfExchangeTrans;

        switch (_taxTrans.SourceTableId)
        {
            case tablenum(CustInvoiceJour):
                custInvoiceJour = CustInvoiceJour::findRecId(_taxTrans.SourceRecId);
                this.initFiscalInfoFromCustVendInvoiceJour(custInvoiceJour);
                this.DocumentNum   = custInvoiceJour.InvoiceId;
                this.InvoiceDate   = custInvoiceJour.InvoiceDate;
                this.SourceTableId = custInvoiceJour.TableId;
                this.SourceRecId   = custInvoiceJour.RecId;
                break;

            case tablenum(VendInvoiceJour):
                vendInvoiceJour = VendInvoiceJour::findRecId(_taxTrans.SourceRecId);
                this.initFiscalInfoFromCustVendInvoiceJour(vendInvoiceJour);
                this.DocumentNum   = vendInvoiceJour.InvoiceId;
                this.InvoiceDate   = vendInvoiceJour.InvoiceDate;
                this.SourceTableId = vendInvoiceJour.TableId;
                this.SourceRecId   = vendInvoiceJour.RecId;
                break;

            case tablenum(VendTrans):
                vendTrans = VendTrans::find(_taxTrans.SourceRecId);
                if (vendTrans.Invoice)
                {
                    this.DocumentNum = vendTrans.Invoice;
                }
                else
                {
                    this.DocumentNum = VendTrans::find(vendTrans.OffsetRecid).Invoice;
                    this.InvoiceDate = VendTrans::find(vendTrans.OffsetRecid).TransDate;
                }
                if (!this.DocumentNum)
                {
                    select firstonly Voucher, VendAccount , PromissoryNoteId , TransDate
                        from vendPromissoryNoteTrans
                        where vendPromissoryNoteTrans.PromissoryNoteId == vendTrans.PromissoryNoteID &&
                              vendPromissoryNoteTrans.VendAccount      == vendTrans.AccountNum &&
                              vendPromissoryNoteTrans.Status           == CustVendNegInstStatus::Drawn;

                    if (vendPromissoryNoteTrans)
                    {
                        select firstonly Invoice, TableId, RecId, OffsetRecid
                            from vendTrans
                            where vendTrans.AccountNum  == vendPromissoryNoteTrans.VendAccount &&
                                  vendTrans.Voucher     ==  vendPromissoryNoteTrans.Voucher &&
                                  vendTrans.PromissoryNoteID == vendPromissoryNoteTrans.PromissoryNoteId &&
                                  vendTrans.TransDate   == vendPromissoryNoteTrans.TransDate;

                        if (vendTrans.Invoice)
                        {
                            this.DocumentNum = vendTrans.Invoice;
                        }
                        else
                        {
                            this.DocumentNum = VendTrans::find(vendTrans.OffsetRecid).Invoice;
                            this.InvoiceDate = VendTrans::find(vendTrans.OffsetRecid).TransDate;
                        }
                    }
                }
    
                this.initFiscalInfoFromCustVendTrans(vendTrans);

                this.SourceTableId = vendTrans.TableId;
                this.SourceRecId   = vendTrans.RecId;
                break;

            case tablenum(CustTrans):
                custTrans = CustTrans::find(_taxTrans.SourceRecId);
                if (custTrans.Invoice)
                {
                    this.DocumentNum = custTrans.Invoice;
                }
                else
                {
                    this.DocumentNum = CustTrans::find(custTrans.OffsetRecid).Invoice;
                    this.InvoiceDate = CustTrans::find(custTrans.OffsetRecid).TransDate;
                }
                if (!this.DocumentNum)
                {
                    select firstonly Voucher, CustAccount , BillOfExchangeId , TransDate
                        from custBillOfExchangeTrans
                        where custBillOfExchangeTrans.BillOfExchangeId == custTrans.BillOfExchangeId &&
                              custBillOfExchangeTrans.CustAccount      == custTrans.AccountNum &&
                              custBillOfExchangeTrans.Status           == custVendNegInstStatus::Drawn;

                    if (custBillOfExchangeTrans)
                    {
                        select firstonly Invoice, TableId, RecId, OffsetRecid
                            from custTrans
                            where custTrans.AccountNum == custBillOfExchangeTrans.CustAccount &&
                                  custTrans.Voucher    ==  custBillOfExchangeTrans.Voucher &&
                                  custTrans.BillOfExchangeId == custBillOfExchangeTrans. BillOfExchangeId &&
                                  custTrans.TransDate  == custBillOfExchangeTrans.TransDate;

                        if (custTrans.Invoice)
                        {
                            this.DocumentNum = custTrans.Invoice;
                        }
                        else
                        {
                            this.DocumentNum = CustTrans::find(custTrans.OffsetRecid).Invoice;
                            this.InvoiceDate = CustTrans::find(custTrans.OffsetRecid).TransDate;
                        }
                    }
                }

                this.initFiscalInfoFromCustVendTrans(custTrans);

                this.SourceTableId = custTrans.TableId;
                this.SourceRecId   = custTrans.RecId;
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<CountryRegionCodes>ES</CountryRegionCodes>
	<DeveloperDocumentation>@SYS324804</DeveloperDocumentation>
	<FormRef>TaxReportLines</FormRef>
	<Label>@SYS91782</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>DocumentNum</TitleField1>
	<TitleField2>Name</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportRecord</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxInCostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Excluded</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CashCollectables</Name>
			<Label>@GLS3800254</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashCollectable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashInvoiceYear</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Document</Name>
			<Label>@SYS21873</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EquivalenceCharge</Name>
			<Label>@SYS91787</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxCodeEq</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxBaseEq</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxValueEq</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmountEq</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReportRecord</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Excluded</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MainCompanyAddress</Name>
			<Label>@SYS91788</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OperationType</Name>
			<Label>@GLS3800247</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OperationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS15217</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SaleOfProperty</Name>
			<Label>@GLS3800239</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AmountPropertyVAT</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS22729</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxBase</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxInCostPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Source</Name>
			<Label>@SYS11258</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxBookType</Name>
			<Label>@SYS91798</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxBookType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Tenant</Name>
			<Label>@GLS3800253</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PropertyTaxNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SituationCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>UnpaidInvoice</Name>
			<Label>@SYS75280</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UnpaidInvoiceAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountPropertyVAT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@GLS3800240</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CashCollectable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@GLS3800255</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CashInvoiceYear</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxReport347CashInvoiceYear</ExtendedDataType>
			<Label>@GLS3800249</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocumentNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocumentNumLarge</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Excluded</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS3800251</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OperationType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxReportOperationType_ES</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PropertyTaxNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxPropertyNumber_ES</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReportRecord</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxReportRecord</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SituationCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxReportSituationCode_ES</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SourceTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmountEq</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmount</ExtendedDataType>
			<Label>@SYS91783</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxBase</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxBaseEq</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBase</ExtendedDataType>
			<Label>@SYS91789</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxBookType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxBookType_ES</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxCodeEq</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxCode</ExtendedDataType>
			<Label>@SYS91779</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxValueEq</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxValue</ExtendedDataType>
			<Label>@SYS91784</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UnpaidInvoiceAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS117286</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VATNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VATNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InvoiceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxInCostPrice</Name>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
			<Label>@SYS24596</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReportVoucherDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxReportLines</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceTableId</Name>
					<Field>SourceTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceRecId</Name>
					<Field>SourceRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>TaxReportTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SpanishTaxReportTable</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>SpanishTaxReportDetailsTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxTable_TaxCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxCode</Name>
					<SourceEDT>TaxCode</SourceEDT>
					<Field>TaxCode</Field>
					<RelatedField>TaxCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxTable_TaxCodeEq</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxTable_TaxCodeEq</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxCodeEq</Name>
					<SourceEDT>TaxCode</SourceEDT>
					<Field>TaxCodeEq</Field>
					<RelatedField>TaxCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxReportLines</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceTableId</Name>
					<Field>SourceTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceRecId</Name>
					<Field>SourceRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>