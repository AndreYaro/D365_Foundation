<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjWBSLock</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjWBSLock extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLock</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a WBS lock for the given hierarchy and assigns the given form as owner.
    /// </summary>
    /// <param name="_wbsFormInstanceId">
    ///    The wbs form id which will receive the lock ownership.
    /// </param>
    /// <param name="_hierarchyId">
    ///    The hierarchy id of the WBS hierarchy for which to create a lock.
    /// </param>
    /// <remarks>
    /// Pre-condition: the lock must not exist.
    /// </remarks>
    public static void createLock(ProjWBSFormInstanceId _wbsFormInstanceId, HierarchyIdBase _hierarchyId)
    {
        ProjWBSLock projWBSLock;

        projWBSLock.HierarchyId       = _hierarchyId;
        projWBSLock.UserId            = curUserId();
        projWBSLock.wbsFormInstanceId = _wbsFormInstanceId;
        ttsbegin;
        projWBSLock.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>ProjWBSLock</c> table.
    /// </summary>
    /// <param name="_hierarchyId">
    ///    The hierarchy id for the wbs lock record.
    /// </param>
    /// <param name="_wbsFormInstanceId">
    ///    The wbs form id for the wbs lock record.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>ProjWBSLock</c> table; otherwise, an empty record.
    /// </returns>
    public static ProjWBSLock find(HierarchyIdBase _hierarchyId, ProjWBSFormInstanceId _wbsFormInstanceId, boolean _forUpdate = false)
    {
        ProjWBSLock projWBSLock;

        if (_hierarchyId && _wbsFormInstanceId)
        {
            if (_forUpdate)
            {
                projWBSLock.selectForUpdate(_forUpdate);
            }

            select firstonly projWBSLock
            where projWBSLock.HierarchyId == _hierarchyId
                  && projWBSLock.wbsFormInstanceId == _wbsFormInstanceId;
        }

        return projWBSLock;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByHierarchyId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>ProjWBSLock</c> table.
    /// </summary>
    /// <param name="_hierarchyId">
    ///    The hierarchy id for the wbs lock record.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>ProjWBSLock</c> table; otherwise, an empty record.
    /// </returns>
    public static ProjWBSLock findByHierarchyId(HierarchyIdBase _hierarchyId, boolean _forUpdate = false)
    {
        ProjWBSLock projWBSLock;

        if (_hierarchyId)
        {
            if (_forUpdate)
            {
                projWBSLock.selectForUpdate(_forUpdate);
            }

            select firstonly projWBSLock
            where projWBSLock.HierarchyId == _hierarchyId;
        }

        return projWBSLock;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasWBSLock</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the given form id has the lock for the given WBS hierarchy.
    /// </summary>
    /// <param name="_wbsFormInstanceId">
    ///    The wbs form id for which to check whether it owns the lock.
    /// </param>
    /// <param name="_hierarchyId">
    ///    The hierarchy id of the WBS hierarchy for which to check ownership.
    /// </param>
    /// <returns>
    ///    Whether the given form has the WBS lock for the given WBS hierarchy.
    /// </returns>
    public static boolean hasWBSLock(ProjWBSFormInstanceId _wbsFormInstanceId, HierarchyIdBase _hierarchyId)
    {
        if (ProjWBSLock::find(_hierarchyId, _wbsFormInstanceId))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWBSLocked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the given WBS hierarchy is locked already.
    /// </summary>
    /// <param name="_hierarchyId">
    ///    The hierarchy id of the WBS hierarchy.
    /// </param>
    /// <returns>
    ///    Whether the given WBS hierarchy is locked.
    /// </returns>
    public static boolean isWBSLocked(HierarchyIdBase _hierarchyId)
    {
        if (ProjWBSLock::findByHierarchyId(_hierarchyId))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWBSLockedByAnotherForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the given WBS hierarchy is locked by a form other than the given one.
    /// </summary>
    /// <param name="_wbsFormInstanceId">
    ///    The wbs form id for which to check whether it owns the lock.
    /// </param>
    /// <param name="_hierarchyId">
    ///    The hierarchy id of the WBS hierarchy.
    /// </param>
    /// <returns>
    ///    Whether the given WBS hierarchy is locked by a form other than the given one.
    /// </returns>
    public static boolean isWBSLockedByAnotherForm(ProjWBSFormInstanceId _wbsFormInstanceId, HierarchyIdBase _hierarchyId)
    {
        ProjWBSLock projWBSLock = ProjWBSLock::findByHierarchyId(_hierarchyId);

        return (projWBSLock && projWBSLock.WBSFormInstanceId != _wbsFormInstanceId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS4008992</DeveloperDocumentation>
	<Label>@SYS4008991</Label>
	<TitleField1>HierarchyId</TitleField1>
	<TitleField2>UserId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProjectManagementAndAccounting</Modules>
	<ReplacementKey>HierarchyIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HierarchyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HierarchyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@RET18</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HierarchyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WBSFormInstanceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HierarchyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HierarchyIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserId</Name>
			<AssetClassification>End User Identifiable Information (EUII)</AssetClassification>
			<ExtendedDataType>ProjUserId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>WBSFormInstanceId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ProjWBSFormInstanceId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>HierarchyIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>HierarchyId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Hierarchy</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>Hierarchy</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HierarchyId</Name>
					<Field>HierarchyId</Field>
					<RelatedField>HierarchyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>HierarchyIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UserInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UserInfo</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UserId</Name>
					<Field>UserId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>