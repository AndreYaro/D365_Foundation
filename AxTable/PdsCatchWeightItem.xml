<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsCatchWeightItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PdsCatchWeightItem extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        this.clearCacheAcrossAOSes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        this.clearCacheAcrossAOSes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return  [
            // [field that needs defaulting,
            //      [fields that affect the default value]]

            [fieldNum(PdsCatchWeightItem, PdsCWMin),
                [fieldNum(PdsCatchWeightItem, PdsCWUnitId)]],

            [fieldNum(PdsCatchWeightItem, PdsCWMax),
                [fieldNum(PdsCatchWeightItem, PdsCWUnitId)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(PdsCatchWeightItem, PdsCWMin):
                this.PdsCWMin = 0;
                break;

            case fieldNum(PdsCatchWeightItem, PdsCWMax):
                this.PdsCWMax = 0;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>nominalQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the nominal quantity of the catch weight item stated in the inventory unit.
    /// </summary>
    /// <returns>
    /// The nominal weight of the catch weight item stated in the inventory unit.
    /// </returns>
    public display PdsNominalQty nominalQty()
    {
        if (this.PdsCWUnitId && this.ItemId)
        {
            return UnitOfMeasureConverter::convert(
                1.0,
                UnitOfMeasure::unitOfMeasureIdBySymbol(this.PdsCWUnitId),
                UnitOfMeasure::unitOfMeasureIdBySymbol(
                    InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent).UnitId),
                NoYes::No,
                InventTable::itemProduct(this.ItemId),
                NoYes::No);
        }

        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsValidateUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a record may be updated.
    /// </summary>
    /// <returns>
    /// true if a record can be updated; otherwise, false .
    /// </returns>
    /// <remarks>
    /// The method will check if there are open transactions, sales quotations, BOMS, Formulas,
    /// co-byproducts, or inventory for the item.
    /// </remarks>
    private boolean pdsValidateUpdate()
    {
        boolean                 ret = true;

        if (ret && pmfTableHasChanged(this))
        {
            //Check for Sales Quotations
            if (ret && SalesQuotationLine::existItemId(this.ItemId))
            {
                ret = checkFailed("@PDS1254");
            }

            ret = ret && PdsCatchWeightItem::checkInventory(this.ItemId);
            ret = ret && PdsCatchWeightItem::checkBOMVersion(this.ItemId);
            ret = ret && PdsCatchWeightItem::checkBOM(this.ItemId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            ret = PdsCatchWeightItem::checkInventory(this.ItemId);
        }

        if (ret)
        {
            ret = PdsCatchWeightItem::checkBOMVersion(this.ItemId);
        }

        if (ret)
        {
            ret = PdsCatchWeightItem::checkBOM(this.ItemId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;
        InventTableModule   inventTaleModule    = InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent);

        ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            if (_fieldName == fieldStr(PdsCatchWeightItem,PdsCWUnitId))
            {
                if (!UnitOfMeasureConverter::canBeConverted(
                                            UnitOfMeasure::unitOfMeasureIdBySymbol(this.PdsCWUnitId),
                                            UnitOfMeasure::unitOfMeasureIdBySymbol(inventTaleModule.UnitId),
                                            InventTable::itemProduct(this.ItemId)))
                {
                    ret = checkFailed("@PDS186");
                }

                if (ret && UnitOfMeasure::findBySymbol(this.PdsCWUnitId).DecimalPrecision > 0)
                {
                    ret = checkFailed("@PDS308");
                }

                //this record may not be saved so we cannot check if it is a cw item using the WHSCatchWeightFeature class since it depends on existence of this record.
                if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
                {
                    WHSInventTable whsInventTable = WHSInventTable::find(this.ItemId);

                    if (ret && whsInventTable.RecId 
                        && whsInventTable.UOMSeqGroupId
                        && this.PdsCWUnitId
                        && this.PdsCWUnitId != WHSUOMSeqGroupTable::lowestUnitSequenceLine(whsInventTable.UOMSeqGroupId).UnitId)
                    {
                        ret = checkFailed(strFmt("@WAX:Error_SeqGroupUnitDoesNotMatchCWItemUnit", this.ItemId));
                    }
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQuantitySetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the quantity setup is correct.
    /// </summary>
    /// <returns>
    /// true if the quantity setup is correct; otherwise, false .
    /// </returns>
    private boolean validateQuantitySetup()
    {
        boolean             ret         = true;
        InventQty           convertQty  = this.nominalQty();

        if (ret && this.PdsCWMin > convertQty)
        {
            ret = checkFailed("@PDS187");
        }

        if (ret && this.PdsCWMax < convertQty)
        {
            ret = checkFailed("@PDS188");
        }

        if (ret && (this.PdsCWMin <= 0))
        {
            // mininum catch weight value cannot be zero or negative
            ret = checkFailed(strFmt("@SYS331080", "@PRO424"));
        }

        if (ret && (this.PdsCWMax <= 0))
        {
            // maximum catch weight value cannot be zero or negative
            ret = checkFailed(strFmt("@SYS331080", "@PRO423"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        if (!this.RecId
            && !EcoResProduct::find(InventTable::itemProduct(this.ItemId)).PdsCWProduct)
        {
            ret = checkFailed("@SCM:CannotSetCatchWeightInfoForNonCatchWeightProducts");
        }

        if (InventModelGroupItem::findByItemIdLegalEntity(this.ItemId).modelGroupNoThrow().NegativePhysical
            && EcoResStorageDimensionGroup::find(EcoResStorageDimensionGroupItem::findByItem(this.DataAreaId, this.ItemId).StorageDimensionGroup).IsWarehouseWHSEnabled)
        {
            // If the item's item model group has physical negative inventory enabled and its storage dimension group is warehousing enabled, the item cannot be catch weight enabled.
            ret = checkFailed("@WAX:Error_NegativeInventoryNotAllowedForWHSCWItems");
        }

        ret = super() && this.validateQuantitySetup();

        if (this.RecId)
        {
            ret = ret && this.pdsValidateUpdate();
        }
        else
        {
            ret = ret && PdsCatchWeightItem::pdsValidateCreate(this.ItemId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an item is related to a <c>BOM</c> or a <c>Formula</c> line record.
    /// </summary>
    /// <param name="_itemId">
    /// An <c>ItemId</c> value that specifies a catch weight item.
    /// </param>
    /// <returns>
    /// true if the specified item is related to a <c>BOM</c> or a <c>Formula</c> line record; otherwise,
    /// false .
    /// </returns>
    private static boolean checkBOM(ItemId _itemId)
    {
        BOM         bom;
        boolean     ret = true;

        select firstonly bomId, RecId
            from bom
            where bom.ItemId == _itemId;

        if (bom.RecId)
        {
            ret = checkFailed(strFmt("@PDS262", bom.bomId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBOMVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an item has a <c>BOM</c> or a <c>Formula</c> version record.
    /// </summary>
    /// <param name="_itemId">
    /// An <c>ItemId</c> value that specifies a catch weight item.
    /// </param>
    /// <returns>
    /// true if the specified item has a <c>BOM</c> or a <c>Formula</c> version record; otherwise, false .
    /// </returns>
    private static boolean checkBOMVersion(ItemId _itemId)
    {
        BOMVersion  bomVersion;
        boolean     ret = true;

        select firstonly RecId
            from bomVersion
            where bomVersion.ItemId == _itemId;

        if (bomVersion.RecId)
        {
            ret = checkFailed("@PDS261");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an item has existing inventory or not.
    /// </summary>
    /// <param name="_itemId">
    /// An <c>ItemId</c> value that specifies a catch weight item.
    /// </param>
    /// <returns>
    /// true if the specified item does not have existing inventory; otherwise, false .
    /// </returns>
    private static boolean checkInventory(ItemId _itemId)
    {
        boolean     ret = true;
        InventSum   inventSum;

        select firstonly RecId
            from inventSum
            where  inventSum.ItemId                 == _itemId
                && (inventSum.PostedQty             != 0
                    || inventSum.PostedValue        != 0
                    || inventSum.PhysicalValue      != 0
                    || inventSum.Deducted           != 0
                    || inventSum.Picked             != 0
                    || inventSum.Received           != 0
                    || inventSum.Registered         != 0
                    || inventSum.ReservPhysical     != 0
                    || inventSum.ReservOrdered      != 0
                    || inventSum.OnOrder            != 0
                    || inventSum.Arrived            != 0
                    || inventSum.Ordered            != 0
                    || inventSum.QuotationReceipt   != 0
                    || inventSum.QuotationIssue     != 0);

        if (inventSum.RecId)
        {
            ret = checkFailed("@PDS119");
        }

        if (ret && InventTrans::openTransactionsExist(_itemId))
        {
            ret = checkFailed("@PDS120");
        }

        if (   ret
            && WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled()
            && WHSInventReserve::itemHasReservations(_itemId))
        {
            ret = checkFailed("@WHSInventory:PdsCatchWeightItem_CheckInventory_TransactionExists");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a catch weight record exists for the item.
    /// </summary>
    /// <param name="_itemId">
    /// An <c>ItemId</c> value that specifies a catch weight item.
    /// </param>
    /// <returns>
    /// true if record a exists; otherwise, false.
    /// </returns>
    public static boolean exist(ItemId  _itemId)
    {
        if (_itemId &&
            #PdsCatchWeightEnabled)
        {
            if (PdsCatchWeightItemCacheSGOCFlight::instance().isEnabled())
            {
                SysGlobalObjectCache cache = classFactory.globalObjectCache();
                container key = [curExt(), _itemId];
                str scope = PdsCatchWeightItem::cacheScope();

                container result = cache.find(scope, key);
                if (!result)
                {
                    result = [PdsCatchWeightItem::existInternal(_itemId)];
                    cache.insert(scope, key, result);
                }
                return conPeek(result, 1);
            }
            return PdsCatchWeightItem::existInternal(_itemId);
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existInternal</Name>
				<Source><![CDATA[
    private static boolean existInternal(ItemId _itemId)
    {
        return _itemId
               && (select firstonly pdsCatchWeightItem
                        where pdsCatchWeightItem.ItemId == _itemId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheScope</Name>
				<Source><![CDATA[
    private static str cacheScope()
    {
        return tableStr(PdsCatchWeightItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheKey</Name>
				<Source><![CDATA[
    private container cacheKey()
    {
        return [this.DataAreaId, this.ItemId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCacheAcrossAOSes</Name>
				<Source><![CDATA[
    private void clearCacheAcrossAOSes()
    {
        if (PdsCatchWeightItemCacheSGOCFlight::instance().isEnabled())
        {
            // Ensure cache is populated to ensure data is removed on all AOSes
            PdsCatchWeightItem::exist(this.ItemId);

            SysGlobalObjectCache cache = classFactory.globalObjectCache();
            cache.remove(PdsCatchWeightItem::cacheScope(), this.cacheKey());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>PdsCatchWeightItem</c> record for the provided item ID.
    /// </summary>
    /// <param name="_itemId">
    /// An <c>ItemId</c> value that specifies a catch weight item.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to return a record which is selected for update.
    /// </param>
    /// <returns>
    /// A <c>PdsCatchWeightItem</c> record if found; otherwise, null .
    /// </returns>
    public static PdsCatchWeightItem find(
        ItemId      _itemId,
        boolean     _forUpdate = false)
    {
        PdsCatchWeightItem  pdsCatchWeightItem;

        pdsCatchWeightItem.selectForUpdate(_forUpdate);

        if (_itemId)
        {
            select firstonly pdsCatchWeightItem
                where pdsCatchWeightItem.ItemId == _itemId;
        }

        return pdsCatchWeightItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWErrorMsg</Name>
				<Source><![CDATA[
    public static SysInfoLogStr pdsCWErrorMsg(
        ItemId _itemId,
        PdsCWInventQty _qty)
    {
        PdsCatchWeightItem cwItem;

        cwItem = PdsCatchWeightItem::find(_itemId);

        return strFmt("@PDS85", cwItem.PdsCWMin * _qty, cwItem.PdsCWMax * _qty, cwItem.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWErrorMsgForUnit</Name>
				<Source><![CDATA[
    public static SysInfoLogStr pdsCWErrorMsgForUnit(
        ItemId                      _itemId,
        PdsCWInventQty              _qty,
        UnitOfMeasureSymbol         _unitID)
    {
        PdsCatchWeightItem cwItem;
        UnitOfMeasureConverter_Product unitOfMeasureConverter =  UnitOfMeasureConverter_Product::construct();

        cwItem = PdsCatchWeightItem::find(_itemId);
        unitOfMeasureConverter.parmFromUnitOfMeasure(UnitOfMeasure::unitOfMeasureIdBySymbol(InventTableModule::find(_itemId,
                                    ModuleInventPurchSales::Invent).UnitId));
        unitOfMeasureConverter.parmToUnitOfMeasure(UnitOfMeasure::unitOfMeasureIdBySymbol(_unitID));
        unitOfMeasureConverter.parmProduct(InventTable::itemProduct(_itemId));

        return strFmt(
            "@PDS85",
            unitOfMeasureConverter.convertValue(cwItem.PdsCWMin) * _qty,
            unitOfMeasureConverter.convertValue(cwItem.PdsCWMax) * _qty,
            cwItem.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWIsValidQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates if the specified combination of quantities for the item are valid.
    /// </summary>
    /// <param name="_itemId">
    ///     The ID of the item to use in the validation.
    /// </param>
    /// <param name="_qty">
    ///     The inventory quantity to validate.
    /// </param>
    /// <param name="_cwQty">
    ///     The catch-weight quantity to validate.
    /// </param>
    /// <returns>
    ///     true if the quantities are valid for the specified item.
    /// </returns>
    /// <remarks>
    /// The _isNegative argument has become obsolete.
    /// </remarks>
    public static boolean pdsCWIsValidQty(
        ItemId          _itemId,
        InventQty       _qty,
        PdsCWInventQty  _cwQty)
    {
        if (!PdsCatchWeightItem::exist(_itemId))
        {
            return false;
        }

        return PdsCatchWeight::validateQty(
            _itemId,
            _qty,
            UnitOfMeasure::unitOfMeasureIdBySymbol(InventTableModule::find(_itemId, ModuleInventPurchSales::Invent).UnitId),
            _cwQty,
            false); // silent check
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight unit for a specified item.
    /// </summary>
    /// <param name="_itemId">
    /// An <c>ItemId</c> value that specifies a catch weight item.
    /// </param>
    /// <returns>
    /// The catch weight unit for the specified item.
    /// </returns>
    public static PdsCWUnitId pdsCWUnitId(ItemId _itemId)
    {
        PdsCatchWeightItem  pdsCatchWeightItem;

        if (_itemId)
        {
            select firstonly PdsCWUnitId
                from pdsCatchWeightItem
                where pdsCatchWeightItem.ItemId == _itemId;
        }

        return pdsCatchWeightItem.PdsCWUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsValidateCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a record may be created.
    /// </summary>
    /// <param name="_itemId">
    /// An <c>ItemId</c> value that specifies a catch weight item.
    /// </param>
    /// <returns>
    /// true if the specified record may be created; otherwise, false .
    /// </returns>
    /// <remarks>
    /// This method checks to see whether there are open transactions, BOMS, Formulas, co-byproducts or
    /// inventory for the item.
    /// </remarks>
    public static boolean pdsValidateCreate(ItemId _itemId)
    {
        boolean     ret = true;
        InventTable inventTable;

        //Check for Sales Quotations
        if (ret && SalesQuotationLine::existItemId(_itemId))
        {
            ret = checkFailed("@PDS1254");
        }

        ret = ret && PdsCatchWeightItem::checkInventory(_itemId);
        ret = ret && PdsCatchWeightItem::checkBOMVersion(_itemId);
        ret = ret && PdsCatchWeightItem::checkBOM(_itemId);

        if (ret)
        {
            inventTable = InventTable::find(_itemId);
            ret = inventTable.pdsCWCheckItemType();

            if (ret && inventTable.PmfProductType == PmfProductType::MainItem)
            {
                ret = checkFailed("@PDS112");
            }

            if (ret)
            {
                ret = inventTable.pdsCWCheckBatchNumGroupId() && inventTable.pdsCWCheckSerialNumGroupId();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>compareInterCompanyCatchWeightQuantities</Name>
				<Source><![CDATA[
    internal static void compareInterCompanyCatchWeightQuantities(ItemId _itemId, DataAreaId _interCompanyDataAreaId)
    {
        PdsCWQtyHighest fromPdsCWMax;
        PdsCWQtyLowest fromPdsCWMin;
        PdsNominalQty fromPdsCWNominal;

        changeCompany (_interCompanyDataAreaId)
        {
            PdsCatchWeightItem fromCatchWeightItem = PdsCatchWeightItem::find(_itemId);
            fromPdsCWMax = fromCatchWeightItem.PdsCWMax;
            fromPdsCWMin = fromCatchWeightItem.PdsCWMin;
            fromPdsCWNominal = fromCatchWeightItem.nominalQty();
        }

        PdsCatchWeightItem toCatchWeightItem = PdsCatchWeightItem::find(_itemId);

        if (fromPdsCWMax != toCatchWeightItem.PdsCWMax
            || fromPdsCWMin != toCatchWeightItem.PdsCWMin
            || fromPdsCWNominal != toCatchWeightItem.nominalQty())
        {
            throw error("@SCM:IntercompanyCatchWeightQtyError");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PdsCatchWeight</ConfigurationKey>
	<DeveloperDocumentation>@PDS1071</DeveloperDocumentation>
	<FormRef>EcoResProductDetailsExtended</FormRef>
	<Label>@PRO440</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>PdsCWUnitId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ItemId</ClusteredIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>ItemId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWMax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWMin</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CatchWeight</Name>
			<Label>@PRO446</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWMax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWMin</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Label>@SYS14428</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWMax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWQtyHighest</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWMin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWQtyLowest</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsCWUnitId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWUnitId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemId</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsCWUnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsCWUnitId</Name>
					<Field>PdsCWUnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>