<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxRegistrationNumbers_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxRegistrationNumbers_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        if (this.RegistrationType != TaxRegistrationType_IN::Company)
        {
            this.IsGlobal = true;
        }
        this.RefCompanyId = this.IsGlobal ? '' : curext();
        this.CreatedCompanyId = curExt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ExciseNumSequenceRef_IN    exciseNumSeqRef;
        DefermentSchedule_IN       defermentSchedule;

        Global::handleEncryptedTablePreInsert(this);
        super();
        Global::handleEncryptedTablePostInsert(this);

        if (this.TaxType == TaxType_IN::Excise && this.RegistrationType == TaxRegistrationType_IN::Company)
        {
            ttsbegin;
            exciseNumSeqRef.TaxRegistrationNumberTable = this.RecId;
            exciseNumSeqRef.Reference = ExciseReference_IN::PLA;
            exciseNumSeqRef.insert();

            exciseNumSeqRef.TaxRegistrationNumberTable = this.RecId;
            exciseNumSeqRef.Reference = ExciseReference_IN::RG23AI;
            exciseNumSeqRef.insert();

            exciseNumSeqRef.TaxRegistrationNumberTable = this.RecId;
            exciseNumSeqRef.Reference = ExciseReference_IN::RG23AII;
            exciseNumSeqRef.insert();

            exciseNumSeqRef.TaxRegistrationNumberTable = this.RecId;
            exciseNumSeqRef.Reference = ExciseReference_IN::RG23CI;
            exciseNumSeqRef.insert();

            exciseNumSeqRef.TaxRegistrationNumberTable = this.RecId;
            exciseNumSeqRef.Reference = ExciseReference_IN::RG23CII;
            exciseNumSeqRef.insert();

            exciseNumSeqRef.TaxRegistrationNumberTable = this.RecId;
            exciseNumSeqRef.Reference = ExciseReference_IN::RG23D;
            exciseNumSeqRef.insert();

            exciseNumSeqRef.TaxRegistrationNumberTable = this.RecId;
            exciseNumSeqRef.Reference = ExciseReference_IN::DSA;
            exciseNumSeqRef.insert();

            exciseNumSeqRef.TaxRegistrationNumberTable = this.RecId;
            exciseNumSeqRef.Reference = ExciseReference_IN::Excise;
            exciseNumSeqRef.insert();
            ttscommit;
        }

        if (this.TaxType == TaxType_IN::VAT && this.RegistrationType == TaxRegistrationType_IN::Company)
        {
            ttsbegin;
            defermentSchedule.TaxRegistrationNumberTable = this.RecId;
            defermentSchedule.Allocation                 = Allocation_IN::FixedQuantity;
            defermentSchedule.PaymentPer                 = PaymentPer_IN::Months;
            defermentSchedule.Change                     = 1;
            defermentSchedule.NumberOfDeferment          = 1;
            defermentSchedule.TaxType                    = TaxType_IN::VAT;
            defermentSchedule.insert();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        Global::handleEncryptedTablePreUpdate(this);
        super();
        Global::handleEncryptedTablePostUpdate(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the field information.
    /// </summary>
    /// <param name="_fieldId">
    /// The field id.
    /// </param>
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);
        switch (_fieldId)
        {
            case fieldnum(TaxRegistrationNumbers_IN, IsGlobal) :
            this.RefCompanyId = this.IsGlobal ? '' : curext();
            break;

            case fieldnum(TaxRegistrationNumbers_IN, RegistrationType) :
            if (this.RegistrationType != TaxRegistrationType_IN::Company)
            {
                this.IsGlobal = true;
                this.RefCompanyId = '';
            }
            break;
        }

        if (!this.CreatedCompanyId && this.RefCompanyId)
        {
            this.CreatedCompanyId = this.RefCompanyId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean             ret;
        TaxInformation_IN   taxInformation;
        ret = super();

        if (ret && this.TaxType != TaxType_IN::None)
        {
            select firstonly tin, SalesTaxRegistrationNumber, ManECCRegistrationNumberTable, TraderECCRegistrationNumberTable, stcRegistrationNumberTable, iecRegistrationNumberTable
             from taxInformation
                where (taxInformation.tin == this.RecId
                    || taxInformation.SalesTaxRegistrationNumber       == this.RecId
                    || taxInformation.ManECCRegistrationNumberTable    == this.RecId
                    || taxInformation.TraderECCRegistrationNumberTable == this.RecId
                    || taxInformation.stcRegistrationNumberTable       == this.RecId
                    || taxInformation.iecRegistrationNumberTable       == this.RecId);

            if (taxInformation)
            {
                ret = checkFailed(strfmt("@GLS5083", this.RegistrationNumber));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateECCAndSTCNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the current registration number is a valid ECC and STC code or not.
    /// </summary>
    /// <returns>
    /// Returns true if the current registration number is a valid ECC and STC code otherwise, false.
    /// </returns>
    public boolean validateECCAndSTCNumber()
    {
        boolean ret = true;
        ;

        #define.alphabets('ABCDEFGHIJKLMNOPQRSTUVWXYZ')
        #define.numbers('0123456789')
        #COSNumbers
        #define.13(13)
        #define.15(15)

        if ((strkeep(substr(this.RegistrationNumber, #1, #5), #alphabets)  != substr(this.RegistrationNumber, #1, #5))    ||
            (strkeep(substr(this.RegistrationNumber, #6, #4), #numbers)    != substr(this.RegistrationNumber, #6, #4))    ||
            (strlen(this.RegistrationNumber) != #15)                                                                      ||
            (strkeep(substr(this.RegistrationNumber, #10, #3), #alphabets) != substr(this.RegistrationNumber, #10, #3))   ||
            (strkeep(substr(this.RegistrationNumber, #13, #3), #numbers)   != substr(this.RegistrationNumber, #13, #3)))
        {
            if (this.TaxType == TaxType_IN::Excise)
            {
                ret = checkFailed(strfmt("@GLS5084", "@GLS5005"));
            }
            else if (this.TaxType == TaxType_IN::ServiceTax)
            {
                ret = checkFailed(strfmt("@GLS5084", "@SYS25500"));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIECNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the current registration number is a valid IEC code or not.
    /// </summary>
    /// <returns>
    /// Returns true if the current registration number is a valid IEC code; otherwise, false.
    /// </returns>
    public boolean validateIECNumber()
    {
        boolean ret = true;

        #define.alphanumeric('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ')
        #COSNumbers

        if ((strkeep(substr(this.RegistrationNumber, #1, #10), #alphanumeric) != substr(this.RegistrationNumber, #1, #10)) ||
           (strlen(this.RegistrationNumber) != #10))
        {
            ret = checkFailed(strfmt("@TaxGST:IECNumberValidation", "@GLS5007", #10));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the current registration number is a valid TIN and sales tax code or not.
    /// </summary>
    /// <returns>
    /// Returns true if the current registration number is a valid TIN and sales tax code; otherwise, false.
    /// </returns>
    public boolean validateTIN()
    {
        boolean ret = true;

        #define.numbers('0123456789')
        #COSNumbers

        if ((strkeep(substr(this.RegistrationNumber, #1, #11), #numbers)    != substr(this.RegistrationNumber, #1, #11))    ||
            (strlen(this.RegistrationNumber) != #11))
        {
            if (this.TaxType == TaxType_IN::VAT)
            {
                ret = checkFailed(strfmt("@GLS5086", "@GLS5004"));
            }
            else if (this.TaxType == TaxType_IN::SalesTax)
            {
                ret = checkFailed(strfmt("@GLS5086", "@SYS5878"));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateGSTRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the current registration number is a valid GST code or not.
    /// </summary>
    /// <returns>
    /// true if the current registration number is a valid GST code; otherwise, false.
    /// </returns>
    public boolean validateGSTRegistrationNumber()
    {
        boolean ret = true;

        if (this.Type == GSTType_IN::GSTIN && !this.checkGSTINNumber())
        {
            ret = checkFailed("@TaxGST:GSTNumberValidation");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkGSTINNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the current GSTIN number is a valid GSTIN code or not.
    /// </summary>
    /// <returns>
    /// true if the current GSTIN number is a valid GSTIN code; otherwise, false.
    /// </returns>
    public boolean checkGSTINNumber()
    {
        /*
        GSTIN format:
            1. State code (2 digit): 2 numeric.
            2. PAN number (10 digit): 4 alpha + 1 alphanumeric + 4 numeric + 1 alpha.
            3. Entity code (1 digit): 1-9 or 1 alpha.
            4: Blank (1 digit): Z, 1-9, A, B, D, E-J. Currently Z is by default.
            5. Check sum (1 digit): alphanumeric.
        */
        const str MatchPattern = @'^\d{2}[a-zA-Z]{4}[0-9a-zA-Z]{1}\d{4}[a-zA-Z]{1}[1-9a-zA-Z]{1}[1-9aAbBdDe-jE-JzZ]{1}[0-9a-zA-Z]{1}$';
        System.Text.RegularExpressions.Match matchedGSTIN = System.Text.RegularExpressions.Regex::Match(this.RegistrationNumber, MatchPattern);
        return matchedGSTIN.get_Success();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            switch (this.TaxType)
            {
                case TaxType_IN::Excise:
                case TaxType_IN::ServiceTax:
                    ret = ret && this.validateECCAndSTCNumber();
                    break;

                case TaxType_IN::Customs:
                    ret = ret && this.validateIECNumber();
                    break;

                case TaxType_IN::VAT:
                case TaxType_IN::SalesTax:
                    ret = ret && this.validateTIN();
                    break;

                case TaxType_IN::GST:
                    ret = ret && this.validateGSTRegistrationNumber();

                default:
                    break;
            }
        }

        TaxRegistrationNumbers_IN existedTaxRegistrationNumbersIn =
            TaxRegistrationNumbers_IN::findByNaturalKey(this.RegistrationType, this.TaxType, this.RegistrationNumber);
        if (existedTaxRegistrationNumbersIn.RecId != this.RecId
            && existedTaxRegistrationNumbersIn.IsGlobal == NoYes::No
            && existedTaxRegistrationNumbersIn.RefCompanyId != curext())
        {
            ret = ret && checkFailed(strFmt("@Tax:RegistrationNumberDuplicateError",
                tableId2PName(existedTaxRegistrationNumbersIn.TableId),
                tableStr(TaxRegistrationNumbers_IN),
                this.RegistrationNumber,
                existedTaxRegistrationNumbersIn.CreatedCompanyId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>TaxRegistrationNumberTable_IN</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>TaxRegistrationNumberTable_IN</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    static public boolean exist(recId _recId)
    {
        if (_recId)
        {
            return (select firstonly RecId from taxRegistrationNumbers_IN
                    where taxRegistrationNumbers_IN.RecId  == _recId).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>TaxRegistrationNumbers_IN</c> table exists for the specified registrationNumber, TaxType and registrationType.
    /// </summary>
    /// <param name="_registrationNumber">
    /// Registration number for IN tax.
    /// </param>
    /// <param name="_taxType">
    /// Tax Type for different IN taxes.
    /// </param>
    /// <param name="_registrationType">
    /// Registration Type of company,customer or vendor.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existRegistrationNumber(TaxRegistrationNumber_IN  _registrationNumber,
                                                  TaxType_IN                _taxType,
                                                  TaxRegistrationType_IN    _registrationType)
    {
        ;

        return _registrationNumber &&
            (select firstonly RecId from taxRegistrationNumbers_IN
                where taxRegistrationNumbers_IN.RegistrationNumber  == _registrationNumber
                   && taxRegistrationNumbers_IN.TaxType             == _taxType
                   && taxRegistrationNumbers_IN.RegistrationType    == _registrationType).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existRegistrationNumberByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>TaxRegistrationNumbers_IN</c> table exists for the specified registrationNumber
    /// </summary>
    /// <param name="_registrationNumber">
    /// Registration number for IN tax.
    /// </param>
    /// <returns>
    /// Return boolean based on the matched condition.
    /// </returns>
    public static boolean existRegistrationNumberByRecId(TaxRegistrationNumberRecId_IN  _registrationNumber)
    {
        return _registrationNumber &&
            (select firstonly RecId from taxRegistrationNumbers_IN
                where taxRegistrationNumbers_IN.RecId == _registrationNumber).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTaxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>TaxRegistrationNumbers_IN</c> table exists for the specified registrationNumber
    /// </summary>
    /// <param name="_registrationNumber">
    /// Registration number for IN tax.
    /// </param>
    /// <returns>
    /// Return boolean based on the matched condition.
    /// </returns>

    public static boolean existTaxRegistrationNumber(TaxRegistrationNumber_IN  _registrationNumber)
    {
        ;

        return _registrationNumber &&
            (select firstonly RecId from taxRegistrationNumbers_IN
                where taxRegistrationNumbers_IN.RegistrationNumber == _registrationNumber).RecId       != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TaxRegistrationNumberTable_IN</c> table by record ID.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>TaxRegistrationNumberTable_IN</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>TaxRegistrationNumberTable_IN</c> table; otherwise, an empty record.
    /// </returns>
    public static TaxRegistrationNumbers_IN find(
        recId   _recId,
        boolean _forUpdate = false)
    {
        TaxRegistrationNumbers_IN taxRegistrationNumbers;

        if (_recId)
        {
            if (_forUpdate)
            {
                taxRegistrationNumbers.selectForUpdate(_forUpdate);
            }

            select taxRegistrationNumbers
                where taxRegistrationNumbers.RecId == _recId;
        }

        return taxRegistrationNumbers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByNaturalKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TaxRegistrationNumbers_IN</c> table.
    /// </summary>
    /// <param name="_registrationType">
    /// The tax registration type of the <c>TaxRegistrationNumbers_IN</c> record to find.
    /// </param>
    /// <param name="_taxType">
    /// The tax type of the <c>TaxRegistrationNumbers_IN</c> record to find.
    /// </param>
    /// <param name="_registrationNumber">
    /// The tax registration number of the <c>TaxRegistrationNumbers_IN</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>TaxRegistrationNumbers_IN</c> table; otherwise, an empty record.
    /// </returns>
    public static TaxRegistrationNumbers_IN findByNaturalKey(
        TaxRegistrationType_IN   _registrationType,
        TaxType_IN               _taxType,
        TaxRegistrationNumber_IN _registrationNumber,
        boolean                  _forUpdate = false)
    {
        TaxRegistrationNumbers_IN taxRegistrationNumbers;

        if (_registrationNumber)
        {
            taxRegistrationNumbers.selectForUpdate(_forUpdate);

            select firstonly taxRegistrationNumbers
                where taxRegistrationNumbers.RegistrationType == _registrationType
                   && taxRegistrationNumbers.TaxType          == _taxType
                   && taxRegistrationNumbers.RegistrationNumber == _registrationNumber;
        }

        return taxRegistrationNumbers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates a tax registration number.
    /// </summary>
    /// <param name = "taxRegistrationNumber">The tax registration number.</param>
    /// <returns>The inserted or found tax registration number.</returns>
    public static TaxRegistrationNumbers_IN findOrCreate(TaxRegistrationNumbers_IN taxRegistrationNumber)
    {
        TaxRegistrationNumbers_IN result;

        result = TaxRegistrationNumbers_IN::findByNaturalKey(
            taxRegistrationNumber.RegistrationType,
            taxRegistrationNumber.TaxType,
            taxRegistrationNumber.RegistrationNumber);

        if (!result)
        {
            taxRegistrationNumber.insert();
            result = taxRegistrationNumber;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTaxType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the TaxRegistrationNumbers_IN table for the specified registrationNumber, TaxType.
    /// </summary>
    /// <param name="_registrationNumber">
    /// Registration number for IN tax.
    /// </param>
    /// <param name="_taxType">
    /// Tax Type for different IN taxes.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <returns>
    /// A buffer containing TaxRegistrationNumbers_IN table.
    /// </returns>
    public static TaxRegistrationNumbers_IN findByTaxType(
        TaxRegistrationNumber_IN  _registrationNumber,
        TaxType_IN                _taxType,
        boolean                   _forUpdate = false)
    {
        TaxRegistrationNumbers_IN taxRegistrationNumberTable;

        if (_registrationNumber)
        {
            taxRegistrationNumberTable.selectForUpdate(_forUpdate);

            select firstonly taxRegistrationNumberTable
                index hint RegistrationNumberTaxTypeIdx
                where taxRegistrationNumberTable.RegistrationNumber == _registrationNumber
                   && taxRegistrationNumberTable.TaxType            == _taxType;
        }

        return taxRegistrationNumberTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the tax registration number.
    /// </summary>
    /// <param name="_taxType">
    /// The tax type.
    /// </param>
    /// <param name="_registrationNumber">
    /// The registration number.
    /// </param>
    /// <returns>
    /// The description of the tax registration number.
    /// </returns>
    public static Description getDescription(
        TaxType_IN               _taxType,
        TaxRegistrationNumber_IN _registrationNumber)

    {
        TaxRegistrationNumbers_IN taxRegistrationNumbers;

        select Name from taxRegistrationNumbers
                where taxRegistrationNumbers.RegistrationNumber == _registrationNumber
                   && taxRegistrationNumbers.TaxType            == _taxType
                   && taxRegistrationNumbers.RegistrationType   == TaxRegistrationType_IN::Company;

        return taxRegistrationNumbers.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRegistrationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the registration type of the tax registration number..
    /// </summary>
    /// <param name="_record">
    /// The record information.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxRegistrationType_IN</c> class.
    /// </returns>
    public static TaxRegistrationType_IN getRegistrationType(Common     _record)
    {
        TaxRegistrationType_IN      registrationType;

        switch (_record.TableId)
        {
            case tablenum(CompanyInfo) :
            case tablenum(TaxLedgerAccountSetup_IN) :
            case tablenum(LedgerJournalTrans) :
            case tablenum(PurchLine):
            case tablenum(SalesLine):
            case tablenum(CustInvoiceLine):
            case tablenum(InventJournalTrans):
                registrationType = TaxRegistrationType_IN::Company;
                break;

            case tablenum(CustTable) :
                registrationType = TaxRegistrationType_IN::Customers;
                break;

            case tablenum(VendTable) :
                registrationType = TaxRegistrationType_IN::Vendors;
                break;

            default:
                registrationType = TaxRegistrationType_IN::Company;
                break;
        }

        return registrationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRegistrationTypeAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the registration type address of the tax registration number.
    /// </summary>
    /// <param name="_tableId">
    /// The table id.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxRegistrationType_IN</c> class.
    /// </returns>
    public static TaxRegistrationType_IN getRegistrationTypeAddress(RefTableId _tableId)
    {
        TaxRegistrationType_IN registrationType;

        switch (_tableId)
        {
            case tablenum(CompanyInfo) :
                registrationType = TaxRegistrationType_IN::Company;
                break;

            case tablenum(CustTable) :
                registrationType = TaxRegistrationType_IN::Customers;
                break;

            case tablenum(VendTable) :
                registrationType = TaxRegistrationType_IN::Vendors;
                break;

            default:
                break;
        }

        return registrationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRegistrationTypeByParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns TaxRegistrationType_IN enum according to DirPartyTable record's record type.
    /// </summary>
    /// <param name="_dirPartyRecId">
    /// RecId of the DirPartyTable record.
    /// </param>
    /// <returns>
    /// The TaxRegistrationType_IN enum value.
    /// </returns>
    public static TaxRegistrationType_IN getRegistrationTypeByParty(DirPartyRecId _dirPartyRecId)
    {
        TaxRegistrationType_IN  taxType;

        if (DirPartyTableHelper::isCustomer(_dirPartyRecId))
        {
            taxType = TaxRegistrationType_IN::Customers;
        }
        else if (DirPartyTableHelper::isvendor(_dirPartyRecId))
        {
            taxType = TaxRegistrationType_IN::Vendors;
        }
        else
        {
            taxType = TaxRegistrationType_IN::Company;
        }

        return taxType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Open TaxRegistrationNumberTable_IN Main Form when use do right click goto main table for the selected Registration number.
    /// </summary>
    /// <param name="_registrationNumber">
    /// Registration number for withholding tax.
    /// </param>
    /// <param name="_taxType">
    /// Tax Type for different IN taxes.
    /// </param>
    /// <param name="_record">
    /// Record buffer to set args.record().
    /// </param>
    public static void jumpRef(
        TaxRegistrationNumber_IN    _registrationNumber,
        TaxType_IN                  _taxType,
        Common                      _record)
    {
        Args    args = new Args();

        args.record(_record);
        args.parm(_registrationNumber);
        args.parmEnumType(enumnum(TaxType_IN));
        args.parmEnum(_taxType);
        new MenuFunction(menuitemdisplaystr(TaxRegistrationNumberTable_IN), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceTaxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// To generate customized lookup reference when user select tax registration field for IN taxInformation tab.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// Link the _formReferenceControl to lookup method.
    /// </param>
    /// <param name="_taxType">
    /// Tax Type for different IN taxes.
    /// </param>
    /// <param name="_common">
    /// common buffer to set args.record().
    /// </param>
    /// <returns>
    /// The buffer of table TaxRegistrationNumbers_IN.
    /// </returns>
    public static TaxRegistrationNumbers_IN lookupReferenceTaxRegistrationNumber(
        FormReferenceControl    _formReferenceControl,
        TaxType_IN              _taxType,
        Common                  _common)
    {
        Args                        args = new Args();
        FormRun                     formRun;
        TaxRegistrationNumbers_IN   taxRegistrationNumbers_IN;

        args.name(formstr(TaxRegistrationNumberLookup_IN));
        args.parmEnum(_taxType);
        args.caller(_formReferenceControl);
        args.record(_common);

        formRun = classfactory.formRunClass(args);

        formRun.init();

        _formReferenceControl.performFormLookup(formRun);

        taxRegistrationNumbers_IN = formRun.selectRecordModeSelectedRecord() as TaxRegistrationNumbers_IN;

        return taxRegistrationNumbers_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup registration number.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The form reference control.
    /// </param>
    /// <param name="_taxType">
    /// The tax type.
    /// </param>
    /// <param name="_registrationNumberType">
    /// The registration number type.
    /// </param>
    /// <returns>
    /// The registration number.
    /// </returns>
    public static Common lookupRegistrationNumber(FormReferenceControl  _formReferenceControl,
                                                TaxType_IN              _taxType,
                                                TaxRegistrationType_IN  _registrationNumberType)
    {
        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tablenum(TaxRegistrationNumbers_IN), _formReferenceControl);
        Query                   query           = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        queryBuildDataSource    = query.addDataSource(tablenum(TaxRegistrationNumbers_IN));
        queryBuildRange         = queryBuildDataSource.addRange(fieldnum(TaxRegistrationNumbers_IN, TaxType));
        queryBuildRange.value(queryValue(_taxType));
        queryBuildRange         = queryBuildDataSource.addRange(fieldnum(TaxRegistrationNumbers_IN, RegistrationType));
        queryBuildRange.value(queryValue(_registrationNumberType));

        sysTableLookup.addLookupfield(fieldnum(TaxRegistrationNumbers_IN, RegistrationNumber));
        sysTableLookup.addLookupfield(fieldnum(TaxRegistrationNumbers_IN, Name));
        sysTableLookup.parmQuery(query);
        return sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupRegistrationNumberValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup the registration number value of the tax registration number.
    /// </summary>
    /// <param name="_formControl">
    /// The form control.
    /// </param>
    /// <param name="_taxType">
    /// The tax type.
    /// </param>
    /// <param name="_registrationNumberType">
    /// The registration number type.
    /// </param>
    public static void lookupRegistrationNumberValue(FormControl                _formControl,
                                                     TaxType_IN                 _taxType,
                                                     TaxRegistrationType_IN     _registrationNumberType)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tablenum(TaxRegistrationNumbers_IN), _formControl);
        Query                   query           = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        queryBuildDataSource    = query.addDataSource(tablenum(TaxRegistrationNumbers_IN));
        queryBuildRange         = queryBuildDataSource.addRange(fieldnum(TaxRegistrationNumbers_IN, TaxType));
        queryBuildRange.value(queryValue(_taxType));
        queryBuildRange         = queryBuildDataSource.addRange(fieldnum(TaxRegistrationNumbers_IN, RegistrationType));
        queryBuildRange.value(queryValue(_registrationNumberType));

        sysTableLookup.addLookupfield(fieldnum(TaxRegistrationNumbers_IN, RegistrationNumber));
        sysTableLookup.addLookupfield(fieldnum(TaxRegistrationNumbers_IN, Name));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTaxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// To generate customized lookup when user select tax registration field for IN taxInformation tab.
    /// </summary>
    /// <param name="_formControl">
    /// Link the _formControl to lookup method.
    /// </param>
    /// <param name="_taxType">
    /// Tax Type for different IN taxes.
    /// </param>
    /// <param name="_common">
    /// common buffer to set args.record().
    /// </param>
    public static void lookupTaxRegistrationNumber(
        FormControl _formControl,
        TaxType_IN  _taxType,
        Common      _common)
    {
        Args                 args = new Args();
        FormRun              formRun;
        FormReferenceControl formReferenceControl;

        args.name(formstr(TaxRegistrationNumberLookup_IN));
        args.parmEnum(_taxType);
        args.caller(_formControl);
        args.record(_common);

        formRun = classfactory.formRunClass(args);

        formRun.init();

        if (_formControl is FormReferenceControl)
        {
            formReferenceControl = _formControl as FormReferenceControl;
            formReferenceControl.performFormLookup(formRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCustomerGSTRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the TaxRegistrationNumbers_IN table record for the specified customer GST registrationNumber.
    /// </summary>
    /// <param name="_registrationNumber">
    /// Registration number for IN tax.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A buffer containing TaxRegistrationNumbers_IN table record.
    /// </returns>
    public static RefRecId findByCustomerGSTRegistrationNumber(TaxRegistrationNumber_IN  _registrationNumber, boolean _forUpdate = false)
    {
        return TaxRegistrationNumbers_IN::findByNaturalKey(TaxRegistrationType_IN::Customers, TaxType_IN::GST, _registrationNumber, _forUpdate).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCompanyGSTRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the TaxRegistrationNumbers_IN table record for the specified company GST registrationNumber.
    /// </summary>
    /// <param name="_registrationNumber">
    /// Registration number for IN tax.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A buffer containing TaxRegistrationNumbers_IN table record.
    /// </returns>
    public static RefRecId findByCompanyGSTRegistrationNumber(TaxRegistrationNumber_IN  _registrationNumber, boolean _forUpdate = false)
    {
        return TaxRegistrationNumbers_IN::findByNaturalKey(TaxRegistrationType_IN::Company, TaxType_IN::GST, _registrationNumber, _forUpdate).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsGSTNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the _gstRegNoRecId number in EcommerceLookupQuery_IN.
    /// </summary>
    /// <param name = "_party">The _party.</param>
    /// <param name = "_gstRegNoRecId">The _gstRegNoRecId number.</param>
    /// <returns>Return true/false.</returns>
    public static boolean existsGSTNumber(DirPartyRecId _party, RefRecId _gstRegNoRecId)
    {
        boolean ret = false;
        QueryRun    queryRun;
        Query query = new Query(queryStr(EcommerceLookupQuery_IN));
        query.dataSourceTable(tableNum(DirPartyPostalAddressView)).addRange(fieldNum(DirPartyPostalAddressView, Party)).value(queryValue(_party));
        query.dataSourceTable(tableNum(TaxRegistrationNumbers_IN)).addRange(fieldNum(TaxRegistrationNumbers_IN, Recid)).value(queryValue(_gstRegNoRecId));

        queryRun = new QueryRun(query);
        if (queryRun.next())
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationLookupGST</Name>
				<Source><![CDATA[
    /// <summary>
    /// To generate customized lookup reference
    /// </summary>
    /// <param name="_formReferenceControl">
    /// Link the _formReferenceControl to lookup method.
    /// </param>
    /// <param name="_party">
    /// common buffer to set args.record().
    /// </param>
    /// <returns>
    /// The buffer of table TaxRegistrationNumbers_IN.
    /// </returns>
    static public common locationLookupGST(
        FormReferenceControl      _formReferenceControl,
        DirPartyRecId             _party)
    {
        Query query = new Query(queryStr(EcommerceLookupQuery_IN));
        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tablenum(TaxRegistrationNumbers_IN), _formReferenceControl);

        query.dataSourceTable(tableNum(DirPartyPostalAddressView)).addRange(fieldNum(DirPartyPostalAddressView, Party)).value(queryValue(_party));
        sysTableLookup.addLookupfield(fieldnum(TaxRegistrationNumbers_IN, RegistrationNumber));
        sysTableLookup.addLookupfield(fieldnum(TaxRegistrationNumbers_IN, Name));

        sysTableLookup.parmQuery(query);

        return sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editUserPassword</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to encrypt or decrypt the user password.
    /// </summary>
    /// <param name = "_set">Indicates whether to encrypt or decrypt the field True = encrypt and False = decrypt</param>
    /// <param name = "_value">The value to encrypt.</param>
    /// <returns>The decrypted value of the field.</returns>
    public edit str editUserPassword(boolean _set, str _value)
    {
        return Global::editEncryptedField(this, _value, fieldNum(TaxRegistrationNumbers_IN, EncryptedUserPassword), _set);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editClientId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encrypts or decrypts the client Id.
    /// </summary>
    /// <param name = "_set">Indicates whether to encrypt or decrypt the field: true = encrypt and false = decrypt.</param>
    /// <param name = "_value">The value to encrypt.</param>
    /// <returns>The decrypted value of the field.</returns>
    public edit str editClientId(boolean _set, str _value)
    {
        return Global::editEncryptedField(this, _value, fieldNum(TaxRegistrationNumbers_IN, EncryptedClientId), _set);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editClientSecret</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encrypts or decrypts the client secret.
    /// </summary>
    /// <param name = "_set">Indicates whether to encrypt or decrypt the field: true = encrypt and false = decrypt.</param>
    /// <param name = "_value">The value to encrypt.</param>
    /// <returns>The decrypted value of the field.</returns>
    public edit str editClientSecret(boolean _set, str _value)
    {
        return Global::editEncryptedField(this, _value, fieldNum(TaxRegistrationNumbers_IN, EncryptedClientSecret), _set);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSessionEncryptionKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decrypts the Session Encryption Key.
    /// </summary>
    /// <returns>The decrypted value of the field.</returns>
    public str getSessionEncryptionKey()
    {
        return Global::editEncryptedField(this, '', fieldNum(TaxRegistrationNumbers_IN, EncryptedSEK), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editAccessToken</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encrypts or decrypts the access token.
    /// </summary>
    /// <param name = "_set">Indicates whether to encrypt or decrypt the field: true = encrypt and false = decrypt.</param>
    /// <param name = "_value">The value to encrypt.</param>
    /// <returns>The decrypted value of the field.</returns>
    public str editAccessToken(boolean _set, str _value)
    {
        if (_set)
        {
            this.reread();
            Global::editEncryptedField(this, _value, fieldNum(TaxRegistrationNumbers_IN, EncryptedAccessToken), true);

            ttsbegin;
            this.selectForUpdate(true);
            this.write();
            ttscommit;
        }

        return Global::editEncryptedField(this, '', fieldNum(TaxRegistrationNumbers_IN, EncryptedAccessToken), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editSessionEncryptionKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encrypts or decrypts the Session Encryption Key.
    /// </summary>
    /// <param name = "_set">Indicates whether to encrypt or decrypt the field: true = encrypt and false = decrypt.</param>
    /// <param name = "_value">The value to encrypt.</param>
    /// <returns>The decrypted value of the field.</returns>
    public str editSessionEncryptionKey(boolean _set, str _value)
    {
        if (_set)
        {
            this.reread();
            Global::editEncryptedField(this, _value, fieldNum(TaxRegistrationNumbers_IN, EncryptedSEK), true);

            ttsbegin;
            this.selectForUpdate(true);
            this.write();
            ttscommit;
        }

        return Global::editEncryptedField(this, '', fieldNum(TaxRegistrationNumbers_IN, EncryptedSEK), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCertificate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets certificate for data encryption.
    /// </summary>
    /// <returns>The certificate for data encryption.</returns>
    public System.Security.Cryptography.X509Certificates.X509Certificate2 getCertificate()
    {
        System.Security.Cryptography.X509Certificates.X509Certificate2 certificate;

        if (SystemParameters::find().UseAdvCertificateStore)
        {
            certificate = KeyVaultCertificateHelper::getDigitalCertificate(this.KeyVaultCertificateRef);
        }
        else
        {
            certificate = DigitalCertificateManager::getDigitalCertificate(this.CertificateSubject);
        }

        return certificate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a user name.
    /// </summary>
    /// <returns>
    /// A user name.
    /// </returns>
    public str getUserName()
    {
        if (SystemParameters::find().UseAdvCertificateStore)
        {
            return KeyVaultCertificateHelper::getManualSecretValue(this.UserNameKeyVaultRef, false);
        }
        else
        {
            return this.UserName;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserPassword</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a user password.
    /// </summary>
    /// <returns>
    /// A user password.
    /// </returns>
    public str getUserPassword()
    {
        if (SystemParameters::find().UseAdvCertificateStore)
        {
            return KeyVaultCertificateHelper::getManualSecretValue(this.UserPasswordKeyVaultRef, false);
        }
        else
        {
            return this.editUserPassword(false, '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClientId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a client id.
    /// </summary>
    /// <returns>
    /// A client id.
    /// </returns>
    public str getClientId()
    {
        if (SystemParameters::find().UseAdvCertificateStore)
        {
            return KeyVaultCertificateHelper::getManualSecretValue(this.ClientIdKeyVaultRef, false);
        }
        else
        {
            return this.editClientId(false, '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClientSecret</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a client secret.
    /// </summary>
    /// <returns>
    /// A client secret.
    /// </returns>
    public str getClientSecret()
    {
        if (SystemParameters::find().UseAdvCertificateStore)
        {
            return KeyVaultCertificateHelper::getManualSecretValue(this.ClientSecretKeyVaultRef, false);
        }
        else
        {
            return this.editClientSecret(false, '');
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@GLS63776</DeveloperDocumentation>
	<FormRef>TaxRegistrationNumberTable_IN</FormRef>
	<Label>@GLS5082</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>RegistrationNumber</TitleField1>
	<TitleField2>TaxType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>Tax</Modules>
	<ReplacementKey>RegistrationNumberTaxTypeIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RegistrationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RegistrationNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RegistrationNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CompanyId</Name>
			<Label>@SYS16939</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefCompanyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS41042</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Enterprise</Name>
			<Label>@SYS55442</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsGlobal</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RegistrationNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RegistrationType</Name>
			<Label>@SYS81228</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RegistrationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxType</Name>
			<Label>@SYS33553</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GST</Name>
			<Label>@TaxGST:GST</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BusinessVerticals</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NameOfTaxablePerson</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TurnOver</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EInvoice</Name>
			<Label>@SYP4881698</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UserNameKeyVaultRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserPasswordKeyVaultRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClientIdKeyVaultRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClientSecretKeyVaultRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KeyVaultCertificateRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateSubject</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EncryptedUserPassword</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EncryptedClientId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EncryptedClientSecret</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EncryptedAccessToken</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EncryptedSEK</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccessTokenExpiryDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BankAccount</Name>
			<Label>@SYS1517</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultBankAccountId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsGlobal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS71475</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RefCompanyId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SelectableDataArea</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RegistrationNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxRegistrationNumber_IN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RegistrationType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxRegistrationType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BusinessVerticals</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@TaxGST:HelpTextOfBusinessVertical</HelpText>
			<Label>@TaxGST:BusinessVerticals</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NameOfTaxablePerson</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<HelpText>@TaxGST:HelpTextOfNameOfTaxablePerson</HelpText>
			<Label>@TaxGST:NameOfTaxablePerson</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TurnOver</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<HelpText>@TaxGST:HelpTextOfTurnOver</HelpText>
			<Label>@SYS79857</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Type</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>GSTType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserName</Name>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>UserRequestAccountNumber</ExtendedDataType>
			<FeatureClass>EInvoice_IN_Feature</FeatureClass>
			<Label>@Tax_INOnlineInvoicing:UserName</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>UserNameKeyVaultRef</Name>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<FeatureClass>EInvoice_IN_Feature</FeatureClass>
			<Label>@Tax_INOnlineInvoicing:UserName</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>EncryptedUserPassword</Name>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>CryptoBlob</ExtendedDataType>
			<FeatureClass>EInvoice_IN_Feature</FeatureClass>
			<Label>@Tax_INOnlineInvoicing:UserPassword</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>UserPasswordKeyVaultRef</Name>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<FeatureClass>EInvoice_IN_Feature</FeatureClass>
			<Label>@Tax_INOnlineInvoicing:UserPassword</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>EncryptedClientId</Name>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>CryptoBlob</ExtendedDataType>
			<FeatureClass>EInvoice_IN_Feature</FeatureClass>
			<Label>@Tax_INOnlineInvoicing:ClientId</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ClientIdKeyVaultRef</Name>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<FeatureClass>EInvoice_IN_Feature</FeatureClass>
			<Label>@Tax_INOnlineInvoicing:ClientId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>EncryptedClientSecret</Name>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>CryptoBlob</ExtendedDataType>
			<FeatureClass>EInvoice_IN_Feature</FeatureClass>
			<Label>@Tax_INOnlineInvoicing:ClientSecret</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ClientSecretKeyVaultRef</Name>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<FeatureClass>EInvoice_IN_Feature</FeatureClass>
			<Label>@Tax_INOnlineInvoicing:ClientSecret</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CertificateSubject</Name>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>DigitalCertificateSubject</ExtendedDataType>
			<FeatureClass>EInvoice_IN_Feature</FeatureClass>
			<Label>@Tax_INOnlineInvoicing:Certificate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>KeyVaultCertificateRef</Name>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>KeyVaultCertificateRef</ExtendedDataType>
			<FeatureClass>EInvoice_IN_Feature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>EncryptedAccessToken</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>CryptoBlob</ExtendedDataType>
			<FeatureClass>EInvoice_IN_Feature</FeatureClass>
			<Label>@Tax_INOnlineInvoicing:AccessToken</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>AccessTokenExpiryDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<FeatureClass>EInvoice_IN_Feature</FeatureClass>
			<Label>@Tax_INOnlineInvoicing:AccessTokenExpiry</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>EncryptedSEK</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>CryptoBlob</ExtendedDataType>
			<FeatureClass>EInvoice_IN_Feature</FeatureClass>
			<Label>@Tax_INOnlineInvoicing:SEK</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultBankAccountId</Name>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
			<FeatureClass>DynamicQRCodeFeature_IN</FeatureClass>
			<HelpText>@TaxGST:TaxRegistrationNumber_DefaultBankAccountHelp</HelpText>
			<Label>@TaxGST:TaxRegistrationNumber_DefaultBankAccount</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CreatedCompanyId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SelectableDataArea</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RegistrationNumberTaxTypeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RegistrationType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RegistrationNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BusinessVerticalsTable_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BusinessVerticalsTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BusinessVerticals</Name>
					<Field>BusinessVerticals</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UserNameKeyVaultRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>KeyVaultCertificateTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UserNameKeyVaultRef</Name>
					<Field>UserNameKeyVaultRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UserPasswordKeyVaultRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>KeyVaultCertificateTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UserPasswordKeyVaultRef</Name>
					<Field>UserPasswordKeyVaultRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ClientIdKeyVaultRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>KeyVaultCertificateTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ClientIdKeyVaultRef</Name>
					<Field>ClientIdKeyVaultRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ClientSecretKeyVaultRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>KeyVaultCertificateTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ClientSecretKeyVaultRef</Name>
					<Field>ClientSecretKeyVaultRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>KeyVaultCertificateTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>KeyVaultCertificateTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>KeyVaultCertificateRef</Name>
					<Field>KeyVaultCertificateRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BankAccountTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultBankAccountId</Name>
					<Field>DefaultBankAccountId</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>