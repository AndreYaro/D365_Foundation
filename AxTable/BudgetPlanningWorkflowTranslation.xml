<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanningWorkflowTranslation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetPlanningWorkflowTranslation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a <c>BudgetPlanningWorkflowTranslation</c> record.
    /// </summary>
    /// <param name="_allowSystemLanguageChange">
    /// A Boolean value that indicates whether to delete the record when the language ID is equal to the
    /// system language ID.
    /// </param>
    public void delete(boolean _allowSystemLanguageChange = false)
    {
        if (_allowSystemLanguageChange ||
            this.Name != BudgetPlanningWorkflow::find(this.BudgetPlanningWorkflow).Name)
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a <c>BudgetPlanningWorkflowTranslation</c> record.
    /// </summary>
    /// <param name="_allowSystemLanguageChange">
    /// A Boolean value that indicates whether to insert the record when the language ID is equal to the
    /// system language ID.
    /// </param>
    public void insert(boolean _allowSystemLanguageChange = false)
    {
        if (this.validateWrite(_allowSystemLanguageChange))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets a default <c>LanguageId</c> value.
    /// </summary>
    public void setDefaultLanguage()
    {
        this.LanguageId = SystemParameters::getSystemLanguageId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a <c>BudgetPlanningWorkflowTranslation</c> record.
    /// </summary>
    /// <param name="_allowSystemLanguageChange">
    /// A Boolean value that indicates whether to update the record when the language ID is equal to the
    /// system language ID.
    /// </param>
    public void update(boolean _allowSystemLanguageChange = false)
    {
        if (this.validateWrite(_allowSystemLanguageChange))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean isValid = super(_fieldIdToCheck);

        if (isValid)
        {
            if (this.LanguageId == SystemParameters::getSystemLanguageId())
            {
                isValid = checkFailed("@GLS150186");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the name of a <c>BudgetPlanningWorkflow</c> record is not being used.
    /// </summary>
    /// <param name="_allowSystemLanguageChange">
    /// A Boolean value that indicates whether to write the record when the language ID is equal to the
    /// system language ID.
    /// </param>
    /// <returns>
    /// true if validation passes; Otherwise, false .
    /// </returns>
    public boolean validateWrite(boolean _allowSystemLanguageChange = false)
    {
        BudgetPlanningWorkflow budgetPlanningWorkflow;
        boolean                isValid;

        isValid = super();

        if (isValid)
        {
            if (!_allowSystemLanguageChange &&
                this.LanguageId == SystemParameters::getSystemLanguageId())
            {
                isValid = checkFailed("@GLS150186");
            }
            else
            {
                // Ensure the budget planning workflow name isn't already in use
                select firstonly RecId from budgetPlanningWorkflow
                    where budgetPlanningWorkflow.Name  == this.Name &&
                        budgetPlanningWorkflow.RecId != this.BudgetPlanningWorkflow;

                if (budgetPlanningWorkflow)
                {
                    return checkFailed("@GLS150059");
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>BudgetPlanningWorkflowTranslation</c> table and shows an infolog message if record does not exist.
    /// </summary>
    /// <param name="_budgetPlanningWorkflowTranslationRecId">
    /// The value of the <c>BudgetPlanningWorkflowTranslation</c> record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(BudgetPlanningWorkflowTranslationRecId _budgetPlanningWorkflowTranslationRecId)
    {
        boolean isExisting = true;

        if (!BudgetPlanningWorkflowTranslation::exist(_budgetPlanningWorkflowTranslationRecId))
        {
            isExisting = checkFailed(strfmt(BudgetPlanningWorkflowTranslation::txtNotExist(), tableId2Name(tablenum(BudgetPlanningWorkflowTranslation))));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates a budget planning workflow translation record.
    /// </summary>
    /// <param name="_budgetPlanningWorkflowRecId">
    /// The record ID of the <c>BudgetPlanningWorkflow</c> record.
    /// </param>
    /// <param name="_name">
    /// The specified budget planning workflow name value.
    /// </param>
    /// <param name="_description">
    /// The specified budget planning workflow description value.
    /// </param>
    /// <param name="_languageId">
    /// The specified <c>LanguageId</c> value.
    /// </param>
    public static void createOrUpdateTranslation(
        BudgetPlanningWorkflowRecId       _budgetPlanningWorkflowRecId,
        Name                              _name,
        BudgetPlanningWorkflowDescription _description = '',
        LanguageId                        _languageId = '')
    {
        BudgetPlanningWorkflowTranslation budgetPlanningWorkflowTranslation;
        LanguageId                        languageId = _languageId;

        if (!_languageId)
        {
            languageId = SystemParameters::systemLanguageId();
        }

        // If system language found then create or update BudgetPlanningWorkflowTranslation
        if (languageId)
        {
            ttsbegin;

            budgetPlanningWorkflowTranslation = BudgetPlanningWorkflowTranslation::
                findByBudgetPlanningWorkflowLanguage(_budgetPlanningWorkflowRecId, languageId, true);

            if (budgetPlanningWorkflowTranslation.RecId)
            {
                budgetPlanningWorkflowTranslation.Name        = _name;
                budgetPlanningWorkflowTranslation.Description = _description;
                budgetPlanningWorkflowTranslation.update(true);
            }
            else
            {
                budgetPlanningWorkflowTranslation.BudgetPlanningWorkflow = _budgetPlanningWorkflowRecId;
                budgetPlanningWorkflowTranslation.Name                   = _name;
                budgetPlanningWorkflowTranslation.Description            = _description;
                budgetPlanningWorkflowTranslation.LanguageId             = languageId;
                budgetPlanningWorkflowTranslation.insert(true);
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForBudgetPlanningWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all the <c>BudgetPlanningWorkflowTranslation</c> records that are associated to a
    /// <c>BudgetPlanningWorkflow</c> record.
    /// </summary>
    /// <param name="_budgetPlanningWorkflowRecId">
    /// The record ID of a <c>BudgetPlanPriority</c> record.
    /// </param>
    public static void deleteForBudgetPlanningWorkflow(BudgetPlanningWorkflowRecId _budgetPlanningWorkflowRecId)
    {
        BudgetPlanningWorkflowTranslation budgetPlanningWorkflowTranslation;

        budgetPlanningWorkflowTranslation.skipDeleteMethod(true);
        budgetPlanningWorkflowTranslation.skipDeleteActions(true);

        delete_from budgetPlanningWorkflowTranslation
            where budgetPlanningWorkflowTranslation.BudgetPlanningWorkflow == _budgetPlanningWorkflowRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a record ID exists in the <c>BudgetPlanningWorkflowTranslation</c> table.
    /// </summary>
    /// <param name="_budgetPlanningWorkflowTranslationRecId">
    /// The value of the <c>BudgetPlanningWorkflowTranslation</c> record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false .
    /// </returns>
    public static boolean exist(BudgetPlanningWorkflowTranslationRecId _budgetPlanningWorkflowTranslationRecId)
    {
        BudgetPlanningWorkflowTranslation budgetPlanningWorkflowTranslation;

        return _budgetPlanningWorkflowTranslationRecId && (select firstonly RecId from budgetPlanningWorkflowTranslation
                    where budgetPlanningWorkflowTranslation.RecId == _budgetPlanningWorkflowTranslationRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>BudgetPlanningWorkflowTranslation</c> table that is based on a specified
    /// record ID value.
    /// </summary>
    /// <param name="_budgetPlanningWorkflowTranslationRecId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A <c>BudgetPlanningWorkflowTranslation</c> record.
    /// </returns>
    public static BudgetPlanningWorkflowTranslation find(
        BudgetPlanningWorkflowTranslationRecId _budgetPlanningWorkflowTranslationRecId,
        boolean                                _forUpdate = false,
        ConcurrencyModel                       _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanningWorkflowTranslation budgetPlanningWorkflowTranslation;

        if (_budgetPlanningWorkflowTranslationRecId)
        {
            budgetPlanningWorkflowTranslation.selectForUpdate(_forUpdate);

            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanningWorkflowTranslation.concurrencyModel(_concurrencyModel);
            }

            select firstonly budgetPlanningWorkflowTranslation
                where budgetPlanningWorkflowTranslation.RecId == _budgetPlanningWorkflowTranslationRecId;
        }

        return budgetPlanningWorkflowTranslation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBudgetPlanningWorkflowLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>BudgetPlanningWorkflowTranslation</c> table that is based on the specified
    /// <c>BudgetPlanningWorkflow</c> and <c>LanguageId</c> values.
    /// </summary>
    /// <param name="_budgetPlanningWorkflowRecId">
    /// The value of the <c>BudgetPlanningWorkflow</c> field to find.
    /// </param>
    /// <param name="_languageId">
    /// The value of the <c>LanguageId</c> field to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A <c>BudgetPlanningWorkflowTranslation</c> record.
    /// </returns>
    public static BudgetPlanningWorkflowTranslation findByBudgetPlanningWorkflowLanguage(
        BudgetPlanningWorkflowRecId _budgetPlanningWorkflowRecId,
        LanguageIdAll               _languageId,
        boolean                     _forUpdate = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanningWorkflowTranslation budgetPlanningWorkflowTranslation;

        if (_budgetPlanningWorkflowRecId && _languageId)
        {
            budgetPlanningWorkflowTranslation.selectForUpdate(_forUpdate );

            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanningWorkflowTranslation.concurrencyModel(_concurrencyModel);
            }

            select firstonly budgetPlanningWorkflowTranslation
                where BudgetPlanningWorkflowTranslation.BudgetPlanningWorkflow == _budgetPlanningWorkflowRecId &&
                        BudgetPlanningWorkflowTranslation.LanguageId           == _languageId;
        }

        return budgetPlanningWorkflowTranslation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWorkflowTranslationByLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>BudgetPlanningWorkflowTranslation</c> table that is based on the specified
    /// <c>BudgetPlanningWorkflow</c> and <c>LanguageId</c> values.
    /// </summary>
    /// <param name="_budgetPlanningWorkflowRecId">
    /// The record ID of a budget planning workflow for which a name is retrieved.
    /// </param>
    /// <param name="_languageId">
    /// The ID of a language that a name is retrieved.
    /// </param>
    /// <param name="_translationFieldId">
    /// The field ID of a localized field that is retrieved.
    /// </param>
    /// <returns>
    /// A <c>BudgetPlanningWorkflowTranslation</c> record.
    /// </returns>
    public static BudgetPlanningWorkflowTranslation findWorkflowTranslationByLanguage(
        BudgetPlanningWorkflowRecId _budgetPlanningWorkflowRecId,
        LanguageId                  _languageId,
        fieldId                     _translationFieldId)
    {
        BudgetPlanningWorkflowTranslation budgetPlanningWorkflowTranslation;
        LanguageId                        systemLanguageId;

        if (_budgetPlanningWorkflowRecId)
        {
            budgetPlanningWorkflowTranslation = BudgetPlanningWorkflowTranslation::findByBudgetPlanningWorkflowLanguage(
                _budgetPlanningWorkflowRecId,
                _languageId);

            if (!budgetPlanningWorkflowTranslation.RecId || !budgetPlanningWorkflowTranslation.(_translationFieldId))
            {
                // no translation record or no value provided - fallback to system language
                systemLanguageId = SystemParameters::getSystemLanguageId();

                if (systemLanguageId != _languageId)
                {
                    budgetPlanningWorkflowTranslation = BudgetPlanningWorkflowTranslation::findByBudgetPlanningWorkflowLanguage(
                        _budgetPlanningWorkflowRecId,
                        systemLanguageId);
                }
            }
        }

        return budgetPlanningWorkflowTranslation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocalizedName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a localized <c>Name</c> field of the <c>BudgetPlanningWorkflowTranslation</c> table.
    /// </summary>
    /// <param name="_budgetPlanningWorkflowRecId">
    /// The ID of a budget planning workflow for which a name is retrieved.
    /// </param>
    /// <returns>
    /// The localized name of a budget planning workflow.
    /// </returns>
    public static BudgetPlanningWorkflowName getLocalizedName(BudgetPlanningWorkflowRecId _budgetPlanningWorkflowRecId)
    {
        BudgetPlanningWorkflowName budgetPlanningWorkflowName;

        budgetPlanningWorkflowName = BudgetPlanningWorkflowTranslation::findByBudgetPlanningWorkflowLanguage(
                                                _budgetPlanningWorkflowRecId,
                                                currentUserLanguage()
                                                ).Name;
        if (!budgetPlanningWorkflowName)
        {
            budgetPlanningWorkflowName = BudgetPlanningWorkflowTranslation::findByBudgetPlanningWorkflowLanguage(
                                                    _budgetPlanningWorkflowRecId,
                                                    SystemParameters::getSystemLanguageId()
                                                    ).Name;
        }

        // Fall back to Name if no localized name found
        if (!budgetPlanningWorkflowName)
        {
            budgetPlanningWorkflowName = BudgetPlanningWorkflow::find(_budgetPlanningWorkflowRecId).Name;
        }

        return budgetPlanningWorkflowName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>Name</c> field of the <c>BudgetPlanningWorkflowTranslation</c> table.
    /// </summary>
    /// <param name="_budgetPlanningWorkflowRecId">
    /// The ID of a budget planning workflow for which a name is retrieved.
    /// </param>
    /// <param name="_languageId">
    /// The ID of a language that a name is retrieved.
    /// </param>
    /// <returns>
    /// The name of a budget planning workflow.
    /// </returns>
    public static Name getName(
        BudgetPlanningWorkflowRecId _budgetPlanningWorkflowRecId,
        LanguageId                  _languageId)
    {
        BudgetPlanningWorkflowTranslation budgetPlanningWorkflowTranslation;

        budgetPlanningWorkflowTranslation = BudgetPlanningWorkflowTranslation::findWorkflowTranslationByLanguage(
            _budgetPlanningWorkflowRecId,
            _languageId,
            fieldNum(BudgetPlanningWorkflowTranslation, Name)
            );

        return budgetPlanningWorkflowTranslation.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddDefaultLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a default language ID filter for a specified query.
    /// </summary>
    /// <param name="_query">
    /// The query that is extended to include the default language ID filter.
    /// </param>
    /// <param name="_dataSourceName">
    /// The name of the specified data source for which to add the range.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The query does not contain the specified data source or the <c>BudgetPlanningWorkflow</c> data
    /// source.
    /// </exception>
    public static void queryAddDefaultLanguage(Query _query, str _dataSourceName = '')
    {
        QueryBuildDataSource qbdsBudgetPlanningWorkflowTranslation;

        if (_dataSourceName)
        {
            qbdsBudgetPlanningWorkflowTranslation = _query.dataSourceName(_dataSourceName);
        }
        else
        {
            qbdsBudgetPlanningWorkflowTranslation = _query.dataSourceTable(tableNum(BudgetPlanningWorkflowTranslation));
        }

        if (!qbdsBudgetPlanningWorkflowTranslation)
        {
            throw error(Error::wrongUseOfFunction(tableStaticMethodStr(BudgetPlanningWorkflowTranslation, queryAddDefaultLanguage)));
        }

        qbdsBudgetPlanningWorkflowTranslation.addRange(fieldNum(BudgetPlanningWorkflowTranslation, LanguageId))
            .value(queryValue(SystemParameters::getSystemLanguageId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddUserLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a user language ID filter for a specified query.
    /// </summary>
    /// <param name="_query">
    /// The query that is extended to include the company language ID filter.
    /// </param>
    /// <param name="_dataSourceName">
    /// The name of the specified data source for which to add the range.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The query does not contain the specified data source or the <c>BudgetPlanningWorkflow</c> data
    /// source.
    /// </exception>
    public static void queryAddUserLanguage(Query _query, str _dataSourceName = '')
    {
        QueryBuildDataSource qbdsBudgetPlanningWorkflowTranslation;

        if (_dataSourceName)
        {
            qbdsBudgetPlanningWorkflowTranslation = _query.dataSourceName(_dataSourceName);
        }
        else
        {
            qbdsBudgetPlanningWorkflowTranslation = _query.dataSourceTable(tableNum(BudgetPlanningWorkflowTranslation));
        }

        if (!qbdsBudgetPlanningWorkflowTranslation)
        {
            throw error(Error::wrongUseOfFunction(tableStaticMethodStr(BudgetPlanningWorkflowTranslation, queryAddDefaultLanguage)));
        }

        qbdsBudgetPlanningWorkflowTranslation.addRange(fieldNum(BudgetPlanningWorkflowTranslation, LanguageId))
            .value(queryValue(currentUserLanguage()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS321009";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@GLS150121</DeveloperDocumentation>
	<Label>@GLS150120</Label>
	<SingularLabel>@GLS150131</SingularLabel>
	<TableGroup>Group</TableGroup>
	<TitleField1>BudgetPlanningWorkflow</TitleField1>
	<TitleField2>LanguageId</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>BudgetPlanningWorkflowTranslationIdx</ClusteredIndex>
	<Modules>Budget</Modules>
	<ReplacementKey>BudgetPlanningWorkflowTranslationIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningWorkflow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningWorkflow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningWorkflow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS312922</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningWorkflow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetPlanningWorkflow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanningWorkflowRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanningWorkflowDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LanguageIdAll</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanningWorkflowName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BudgetPlanningWorkflowTranslationIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BudgetPlanningWorkflow</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LanguageId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>NameLanguageTableIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LanguageId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetPlanningWorkflow</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>BudgetPlanningWorkflow</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetPlanningWorkflow</Name>
					<Field>BudgetPlanningWorkflow</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LanguageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LanguageTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LanguageId</Name>
					<SourceEDT>LanguageIdAll</SourceEDT>
					<Field>LanguageId</Field>
					<RelatedField>LanguageId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Key</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>