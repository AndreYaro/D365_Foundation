<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSRFAutoConfirm</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSRFAutoConfirm extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(WHSRFAutoConfirm, AutoConfirm):
                    if (this.AutoConfirm
                        && (this.LocVerification
                        || this.VerifyQty
                        || this.ProductConfirmation
                        || this.PieceByPieceConfirmation
                        || this.LPVerification
                        || this.BatchVerification
                        || this.SerialVerification
                        || this.ShowPickDetails))
                    {
                        ret = checkFailed("@SYP4980007");
                    }
                    break;

                case fieldNum(WHSRFAutoConfirm, LocVerification):
                case fieldNum(WHSRFAutoConfirm, VerifyQty):
                    if (this.AutoConfirm
                        && (this.LocVerification
                        || this.VerifyQty))
                    {
                        ret = checkFailed("@SYP4980007");
                    }
                    else if (this.VerifyQty
                         &&  this.PieceByPieceConfirmation)
                    {
                        ret = checkFailed("@WAX:PieceByPieceQuantityVerificationError");
                    }
                    break;

                case fieldNum(WHSRFAutoConfirm, ProductConfirmation):
                    if (this.AutoConfirm && this.ProductConfirmation)
                    {
                        ret = checkFailed("@SYP4980007");
                    }
                    else if (this.ProductConfirmation
                        && this.WorkType != WHSWorkType::None
                        && this.WorkType != WHSWorkType::Pick
                        && this.WorkType != WHSWorkType::Put
                        && this.WorkType != WHSWorkType::Count)
                    {
                        ret = checkFailed("@WAX:ProductConfirmationWorkTypeError");
                    }
                    else if (!this.ProductConfirmation
                        && this.PieceByPieceConfirmation)
                    {
                        ret = checkFailed("@WAX:PieceByPieceProductConfirmationError");
                    }
                    break;

                case fieldNum(WHSRFAutoConfirm, WorkType):
                    if (this.ProductConfirmation
                        && this.WorkType != WHSWorkType::None
                        && this.WorkType != WHSWorkType::Pick
                        && this.WorkType != WHSWorkType::Put
                        && this.WorkType != WHSWorkType::Count)
                    {
                        ret = checkFailed("@WAX:ProductConfirmationWorkTypeError");
                    }
                    else if (this.WorkType != WHSWorkType::Pick)
                    {
                        if (this.MaxPieceConfirmation)
                        {
                            ret = checkFailed("@WAX:MaxPieceConfirmWorkTypeError");
                        }
                        else if (this.BatchVerification
                             ||  this.SerialVerification
                             ||  this.LPVerification)
                        {
                            ret = checkFailed("@WAX:BatchLPWorkTypeRFConfirmError");
                        }
                    }
                    break;

                case fieldNum(WHSRFAutoConfirm, PieceByPieceConfirmation):
                    ret = this.validatePieceByPieceConfirmation();
                    break;

                case fieldNum(WHSRFAutoConfirm, MaxPieceConfirmation):
                    if (!this.PieceByPieceConfirmation 
                        && this.MaxPieceConfirmation)
                    {
                        ret = checkFailed("@WAX:PieceByPieceMaximumPiecesError");
                    }
                    else if (this.WorkType != WHSWorkType::Pick
                            && this.MaxPieceConfirmation)
                    {
                        ret = checkFailed("@WAX:MaxPieceConfirmWorkTypeError");
                    }
                    break;

                case fieldNum(WHSRFAutoConfirm, LPVerification):
                case fieldNum(WHSRFAutoConfirm, BatchVerification):
                case fieldNum(WHSRFAutoConfirm, SerialVerification):
                    ret = this.validateLPSerialAndBatchFields();
                    break;

                case fieldNum(WHSRFAutoConfirm, ShowPickDetails):
                    ret = this.validateShowPickDetails();
                    break;
                
                default:
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLPSerialAndBatchFields</Name>
				<Source><![CDATA[
    private boolean validateLPSerialAndBatchFields()
    {
        boolean ret = true;

        if (this.LPVerification
        ||  this.BatchVerification
        ||  this.SerialVerification)
        {
            if (this.AutoConfirm)
            {
                ret = checkFailed("@SYP4980007");
            }
            else if (this.WorkType != WHSWorkType::Pick)
            {
                ret = checkFailed("@WAX:BatchSerialLPWorkTypeRFConfirmError");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePieceByPieceConfirmation</Name>
				<Source><![CDATA[
    private boolean validatePieceByPieceConfirmation()
    {
        boolean ret = true;

        if (this.PieceByPieceConfirmation)
        {
            if (this.AutoConfirm)
            {
                ret = checkFailed("@SYP4980007");
            }
                        
            if (!(this.WorkType  == WHSWorkType::Pick
                || this.WorkType == WHSWorkType::Count))
            {
                ret = checkFailed("@WAX:PieceByPieceWorkTypeError");
            }

            if (ret
                && !this.validateGroupPick())
            {
                ret = checkFailed('@WAX:Error_WHSRFMenuItemTable_GroupPickPiecePickingNotAllowed');
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateShowPickDetails</Name>
				<Source><![CDATA[
    private boolean validateShowPickDetails()
    {
        boolean ret = true;

        if (this.ShowPickDetails)
        {
            if (this.WorkType != WHSWorkType::Pick)
            {
                ret = checkFailed("@WAX:ShowPickDetailsWorkTypeError");
            }

            if (this.AutoConfirm)
            {
                ret = checkFailed("@SYP4980007");
            }

            if (this.ProductConfirmation == NoYes::No
                && this.LocVerification == NoYes::No
                && this.BatchVerification == NoYes::No
                && this.SerialVerification == NoYes::No)
            {
                ret = checkFailed("@WAX:ShowPickDetailsErrorProdcutLocSerialOrBatchConfirmShouldBeEnabled");
            }

            if (this.VerifyQty || this.PieceByPieceConfirmation)
            {
                ret = checkFailed("@WAX:ShowPickDetailsErrorQtyAndPieceByPieceNotAllowed");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static WHSRFAutoConfirm find(WHSMenuName _menuItem,
                                         WHSWorkType _workType,
                                         boolean     _forupdate = false)
    {
        WHSRFAutoConfirm    autoconfirm;

        if (_menuItem && _workType)
        {
            autoconfirm.selectForUpdate(_forUpdate);

            select firstonly autoConfirm
                   where autoConfirm.MenuItemName   == _menuItem
                      && autoConfirm.WorkType       == _workType;
        }
        return autoconfirm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAutoConfirmationEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the Auto Confirmation is enabled for the related menu item
    /// and work type.
    /// </summary>
    /// <param name="_menuItem">
    /// The current menu item name
    /// </param>
    /// <param name="_workType">
    /// The current work type
    /// </param>
    /// <returns>
    /// true if a <c>WHSRFAutoConfirm</c> record matching the criteria was found and AutoConfirm is Yes
    /// </returns>
    public static boolean isAutoConfirmationEnabled(WHSMenuItemName _menuItem, WHSWorkType _workType)
    {
        return WHSRFAutoConfirm::find(_menuItem, _workType).AutoConfirm == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLocationConfirmationEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the Location Confirmation is enabled for the related menu item
    /// and work type.
    /// </summary>
    /// <param name="_menuItem">
    /// The current menu item name
    /// </param>
    /// <param name="_workType">
    /// The current work type
    /// </param>
    /// <returns>
    /// true if a <c>WHSRFAutoConfirm</c> record matching the criteria was found and LocVerification is Yes
    /// </returns>
    public static boolean isLocationConfirmationEnabled(WHSMenuItemName _menuItem, WHSWorkType _workType)
    {
        return WHSRFAutoConfirm::find(_menuItem, _workType).LocVerification == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductConfirmationEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the Product Confirmation is enabled for the related menu item
    /// and work type.
    /// </summary>
    /// <param name="_menuItem">
    /// The current menu item name
    /// </param>
    /// <param name="_workType">
    /// The current work type
    /// </param>
    /// <returns>
    /// true if a <c>WHSRFAutoConfirm</c> record matching the criteria was found and ProductConfirmation is Yes
    /// </returns>
    public static boolean isProductConfirmationEnabled(WHSMenuItemName _menuItem, WHSWorkType _workType)
    {
        return WHSRFAutoConfirm::find(_menuItem, _workType).ProductConfirmation == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVerifyQtyConfirmationEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the VerifyQty Confirmation is enabled for the related menu item
    /// and work type.
    /// </summary>
    /// <param name="_menuItem">
    /// The current menu item name
    /// </param>
    /// <param name="_workType">
    /// The current work type
    /// </param>
    /// <returns>
    /// true if a <c>WHSRFAutoConfirm</c> record matching the criteria was found and VerifyQty is Yes
    /// </returns>
    public static boolean isVerifyQtyConfirmationEnabled(WHSMenuItemName _menuItem, WHSWorkType _workType)
    {
        return WHSRFAutoConfirm::find(_menuItem, _workType).VerifyQty == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchConfirmationEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the batch confirmation is enabled for the related menu item and work type.
    /// </summary>
    /// <param name = "_menuItem">
    /// The current menu item name.
    /// </param>
    /// <param name = "_workType">
    /// The current work type.
    /// </param>
    /// <returns>
    /// true if a <c>WHSRFAutoConfirm</c> record matching the criteria was found and batch confirmation is yes; otherwise, false
    /// </returns>
    public static boolean isBatchConfirmationEnabled(WHSMenuItemName _menuItem, WHSWorkType _workType)
    {
        return WHSRFAutoConfirm::find(_menuItem, _workType).BatchVerification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSerialConfirmationEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean isSerialConfirmationEnabled(WHSMenuItemName _menuItem, WHSWorkType _workType)
    {
        return WHSRFAutoConfirm::find(_menuItem, _workType).SerialVerification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLPConfirmationEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the LP confirmation is enabled for the related menu item and work type.
    /// </summary>
    /// <param name = "_menuItem">
    /// The current menu item name.
    /// </param>
    /// <param name = "_workType">
    /// The current work type.
    /// </param>
    /// <returns>
    /// true if a <c>WHSRFAutoConfirm</c> record matching the criteria was found and LP confirmation is yes; otherwise, false
    /// </returns>
    public static boolean isLPConfirmationEnabled(WHSMenuItemName _menuItem, WHSWorkType _workType)
    {
        return WHSRFAutoConfirm::find(_menuItem, _workType).LPVerification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPieceByPieceConfirmationEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the piece by piece confirmation is enabled for the related menu item
    /// and work type.
    /// </summary>
    /// <param name="_menuItem">
    /// The current menu item name.
    /// </param>
    /// <param name="_workType">
    /// The current work type.
    /// </param>
    /// <returns>
    /// true if a <c>WHSRFAutoConfirm</c> record matching the criteria was found and ProductConfirmation is yes; otherwise, false.
    /// </returns>
    public static boolean isPieceByPieceConfirmationEnabled(WHSMenuItemName _menuItem, WHSWorkType _workType)
    {
        return WHSRFAutoConfirm::find(_menuItem, _workType).PieceByPieceConfirmation == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxPieceConfirmation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the max number of pieces that need to be scanned for piece by piece.
    /// </summary>
    /// <param name = "_menuItem">
    /// The current menu item name.
    /// </param>
    /// <param name = "_workType">
    /// The current work type.
    /// </param>
    /// <returns>
    /// The maximum number of pieces to confirm.
    /// </returns>
    public static WHSMaxPieceConfirmation getMaxPieceConfirmation(WHSMenuItemName _menuItem, WHSWorkType _workType)
    {
        return WHSRFAutoConfirm::find(_menuItem, _workType).MaxPieceConfirmation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(WHSRFAutoConfirm, PieceByPieceConfirmation):
                if (!this.PieceByPieceConfirmation && this.MaxPieceConfirmation)
                {
                    this.MaxPieceConfirmation = 0;
                }
                else if (this.PieceByPieceConfirmation)
                {
                    this.VerifyQty           = NoYes::No;
                    this.ProductConfirmation = NoYes::Yes;
                }
                break;

            case fieldNum(WHSRFAutoConfirm, WorkType):
                if (this.WorkType != WHSWorkType::Pick)
                {
                    this.MaxPieceConfirmation = 0;
                }
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSetWorkTemplateMaxPieceConfirmation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if it is possible to set the max piece confirmation field.
    /// </summary>
    /// <returns>
    /// true if field max piece confirmation should be enabled; otherwise false.
    /// </returns>
    public boolean canSetWorkTemplateMaxPieceConfirmation()
    {
        return this.WorkType == WHSWorkType::Pick
            && this.PieceByPieceConfirmation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();
    
        if (ret && this.ShowPickDetails)
        {
            ret = this.validateShowPickDetails();

            if (!WHSRFAutoConfirm::canShowPickDetailsConfirmationBasedOnDirectedBy(this.MenuItemName))
            {
                ret = checkFailed("@WAX:ShowPickDetailsErrorUnsupportedMenuItemDirectedByValue");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateGroupPick</Name>
				<Source><![CDATA[
    private boolean validateGroupPick()
    {
        if (this.PieceByPieceConfirmation == NoYes::Yes
            && this.WorkType == WHSWorkType::Pick)
        {
            WHSRFMenuItemTable menuItem = WHSRFMenuItemTable::find(this.MenuItemName);

            if (menuItem.GroupPick
                && menuItem.isFieldVisibleGroupPick())
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canShowPickDetailsConfirmationBasedOnDirectedBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the show pick details confirmation can be displayed or not.
    /// </summary>
    /// <param name="_menuItemName">
    ///  The mobile device menu item name.
    /// </param>
    /// <returns>
    /// true if show pick details confirmation can be displayed; otherwise false
    /// </returns>
    public static boolean canShowPickDetailsConfirmationBasedOnDirectedBy(WHSMenuItemName _menuItemName)
    {
        boolean ret;
        WHSRFMenuItemTable menuItemTable = WHSRFMenuItemTable::find(_menuItemName);

        if (menuItemTable
            && (menuItemTable.MenuItemDirectedBy == WHSMenuItemDirectedBy::UserDirected
                || menuItemTable.MenuItemDirectedBy == WHSMenuItemDirectedBy::SystemDirected
                || menuItemTable.MenuItemDirectedBy == WHSMenuItemDirectedBy::UserGrouping
                || menuItemTable.MenuItemDirectedBy == WHSMenuItemDirectedBy::SystemGrouping))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4426</DeveloperDocumentation>
	<Label>@WAX1295</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>MenuItemName</TitleField1>
	<TitleField2>WorkType</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>MenuItemNameWorkTypeIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>MenuItemNameWorkTypeIdx</PrimaryIndex>
	<ReplacementKey>MenuItemNameWorkTypeIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MenuItemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoConfirm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocVerification</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MenuItemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MenuItemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoConfirm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocVerification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VerifyQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductConfirmation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PieceByPieceConfirmation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxPieceConfirmation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LPVerification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BatchVerification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SerialVerification</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutoConfirm</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAutoConfirm</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LocVerification</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLocVerification</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MenuItemName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMenuItemName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VerifyQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSVerifyQty</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>WHSWorkType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProductConfirmation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSProductConfirmation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PieceByPieceConfirmation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPieceByPieceConfirmation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>MaxPieceConfirmation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMaxPieceConfirmation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LPVerification</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLPVerification</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BatchVerification</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSBatchVerification</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ShowPickDetails</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSShowPickDetails</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SerialVerification</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSSerialVerification</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>MenuItemNameWorkTypeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>MenuItemName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WorkType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>WHSRFMenuItemTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSRFMenuItemTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MenuItemName</Name>
					<SourceEDT>WHSMenuItemName</SourceEDT>
					<Field>MenuItemName</Field>
					<RelatedField>MenuItemName</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>