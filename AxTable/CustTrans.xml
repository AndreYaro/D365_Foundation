<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.CashManagement.Instrumentation;

public class CustTrans extends common
{


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>agreementDocumentTitle_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Document title of the Agreement for this transaction.
    /// </summary>
    /// <returns>
    /// The Document title of the Agreement.
    /// </returns>
    public display AgreementDocumentTitle agreementDocumentTitle_RU()
    {
        return AgreementHeader::find(AgreementHeaderExt_RU::findByDefaultDimension(this.DefaultDimension).AgreementHeader).DocumentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Agreement Id from the DefaultDimension of this transaction.
    /// </summary>
    /// <returns>
    /// The Agreement Id.
    /// </returns>
    public display AgreementId_RU agreementId_RU()
    {
        return AgreementHeaderExt_RU::findByDefaultDimension(this.DefaultDimension).AgreementId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditCompanyBankAccountId</Name>
				<Source><![CDATA[
    public boolean allowEditCompanyBankAccountId()
    {
        return this.BillOfExchangeID == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditThirdPartyBankAccountId</Name>
				<Source><![CDATA[
    public boolean allowEditThirdPartyBankAccountId()
    {
        return this.BillOfExchangeID == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountExchAdj</Name>
				<Source><![CDATA[
    public display AmountMST amountExchAdj()
    {
        return this.transData().amountExchAdj();
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountExchAdjReportingCurrency</Name>
				<Source><![CDATA[
    public display AmountMSTSecondary amountExchAdjReportingCurrency()
    {
        return this.transData().amountExchAdjReportingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankCurrencyTransferId_RU</Name>
				<Source><![CDATA[
    public BankCurrencyTransferId_RU bankCurrencyTransferId_RU()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSettle_RU</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display NoYes canSettle_RU()
    {
        return (select firstonly RecId from custTransOpen
                    where custTransOpen.AccountNum == this.AccountNum &&
                          ((this.AmountMST > 0 && custTransOpen.AmountMST < 0) ||
                           (this.AmountMST < 0 && custTransOpen.AmountMST > 0))).RecId > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearingLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount clearingLedgerDimension()
    {
        return CustLedgerAccounts::clearingLedgerDimension(this.AccountNum, this.PostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearingPeriod</Name>
				<Source><![CDATA[
    public display ClearingPeriod clearingPeriod()
    {
        return CustTable::find(this.AccountNum).clearingPeriod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>commPrepaymUsedAmount_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows amount of prepayment which is already included into reports for principal.
    /// </summary>
    /// <returns>
    /// Amount of prepayment which is already included into reports for principal.
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    display public AmountMST commPrepaymUsedAmount_RU()
    {
        return this.CustVendTrans::getCommPrepaymentUsedAmount_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was previously instantiated using the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>
    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy _dimensionCopy = DimensionCopy::newFromTable(this, this.companyInfo().RecId)
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceJour_RU</Name>
				<Source><![CDATA[
    public CustInvoiceJour custInvoiceJour_RU(boolean _forupdate = false)
    {
        CustInvoiceJour custInvoiceJour;

        custInvoiceJour.selectForUpdate(_forupdate);

        select firstonly custInvoiceJour
            where custInvoiceJour.InvoiceAccount == this.AccountNum &&
                  custInvoiceJour.InvoiceDate == this.TransDate &&
                  custInvoiceJour.InvoiceId == this.Invoice &&
                  custInvoiceJour.LedgerVoucher == this.Voucher;

        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTableName</Name>
				<Source><![CDATA[
    public display CustName custTableName()
    {
        DirPartyTable partyTable;
        CustTable custTable;
        select firstonly Party from custTable
            where custTable.AccountNum == this.AccountNum
            join Name from partyTable
                where partyTable.RecId == custTable.Party;

        return partyTable.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTrans_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustTrans_W</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CustTrans_W</c> record.
    /// </returns>
    public CustTrans_W custTrans_W()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(CustTrans_W));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTransExtensionTH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the extension information of current customer transaction.
    /// </summary>
    /// <returns>
    /// Returns the extension information of current customer transaction.
    /// </returns>
    public CustTransExtensionTH custTransExtensionTH()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(CustTransExtensionTH));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispAmountCur</Name>
				<Source><![CDATA[
    public display AmountCur dispAmountCur()
    {
        return this.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispConsId_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays consolidation invoice Id for this transaction.
    /// </summary>
    /// <returns>
    /// Consolidation invoice Id.
    /// </returns>
    public display CustVendConsId_JP dispConsId_JP()
    {
        return this.CustVendTrans::getConsId_JP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAccountingExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ExchRate field in a format ready to be displayed on a form.
    /// </summary>
    /// <returns>
    /// The ExchRate field in a format ready to be displayed on a form.
    /// </returns>
    public display ExchRate displayAccountingExchangeRate()
    {
        ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), this.CurrencyCode);

        return exchangeRateHelper.displayStoredExchangeRate(this.ExchRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayLastInterestDate</Name>
				<Source><![CDATA[
    public display DueDate displayLastInterestDate()
    {
        CustTransDetails custTransDetails = new CustTransDetails(this);

        return custTransDetails.lastInterestDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTaxBranchDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the tax branch code depending on the default dimension.
    /// </summary>
    /// <returns>
    /// Returns tax branch code getted by default dimension.
    /// </returns>
    public display TaxBranchCode displayTaxBranchDimension()
    {
        return TaxBranchType::getTBDisplayValueByDefaultDimension(this.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTransactionCurAmountCredit_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for the Transaction Currency Amount Credit.
    /// </summary>
    /// <returns>
    /// Transaction Currency Amount Credit.
    /// </returns>
    public display LedgerAmountCurCredit_CN displayTransactionCurAmountCredit_JP()
    {
        if (LedgerShowDebCredController_CN::isShowCustDRsCRsFeatureEnabled_JP())
        {
            return LedgerShowDebCredRecord_CN::constructFromRecord(this).transactionCurrencyCreditAmount();
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTransactionCurAmountCredit_Global</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the credit amount for a transaction using the Show Debit/Credit functionality.
    /// </summary>
    /// <returns>The credit amount for the transaction.</returns>
    /// <remarks>
    /// The Show Debit/Credit functionality is only enabled in certain country/region contexts.
    /// This display method uses global metadata to allow this functionality to display values
    /// when cross-company data from outside Show Debit/Credit feature country/regions is included.
    /// </remarks>
    public display AmountCurCredit displayTransactionCurAmountCredit_Global()
    {
        return LedgerShowDebCredRecord_CN::constructFromRecord(this).transactionCurrencyCreditAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTransactionCurAmountDebit_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for the Transaction Currency Amount Debit.
    /// </summary>
    /// <returns>
    /// Transaction Currency Amount Debit.
    /// </returns>
    public display LedgerAmountCurDebit_CN displayTransactionCurAmountDebit_JP()
    {
        if (LedgerShowDebCredController_CN::isShowCustDRsCRsFeatureEnabled_JP())
        {
            return LedgerShowDebCredRecord_CN::constructFromRecord(this).transactionCurrencyDebitAmount();
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTransactionCurAmountDebit_Global</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the debit amount for a transaction using the Show Debit/Credit functionality.
    /// </summary>
    /// <returns>The debit amount for the transaction.</returns>
    /// <remarks>
    /// The Show Debit/Credit functionality is only enabled in certain country/region contexts.
    /// This display method uses global metadata to allow this functionality to display values
    /// when cross-company data from outside Show Debit/Credit feature country/regions is included.
    /// </remarks>
    public display AmountCurDebit displayTransactionCurAmountDebit_Global()
    {
        return LedgerShowDebCredRecord_CN::constructFromRecord(this).transactionCurrencyDebitAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayUtilizedCashDisc</Name>
				<Source><![CDATA[
    public display CustCashDiscAmount displayUtilizedCashDisc()
    {
        CustVendTransDetails custVendTransDetails;
        custVendTransDetails = new CustVendTransDetails(this);

        return custVendTransDetails.utilizedCashDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTaxExternalInvoiceId_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for the tax external invoice id.
    /// </summary>
    /// <returns>
    /// Tax external invoice id.
    /// </returns>
    public display TaxExternalMultiInvoiceId_CN displayTaxExternalInvoiceId_CN()
    {
        // <GCN>
        #Characters

        int externalInvoiceCount;
        TaxExternalMultiInvoiceId_CN taxExternalMultiInvoiceId;
        TaxIntgrExportDocumentOperationView_CN taxIntgrExportDocumentOperationView_CN;

        while select ExternalInvoiceId from taxIntgrExportDocumentOperationView_CN
            where taxIntgrExportDocumentOperationView_CN.InvoiceId == this.Invoice
        {
            if (taxIntgrExportDocumentOperationView_CN.ExternalInvoiceId)
            {
                if (externalInvoiceCount != 0)
                {
                    taxExternalMultiInvoiceId += #comma;
                }

                taxExternalMultiInvoiceId += taxIntgrExportDocumentOperationView_CN.ExternalInvoiceId;

                externalInvoiceCount += 1;
            }
        }

        externalInvoiceCount = 0;

        return taxExternalMultiInvoiceId;
        // </GCN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymModeDiscGraceDays</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the number of grace days used to determine the cash discount.
    /// </summary>
    /// <param name = "_custTransOpen">
    ///     A <c>CustTransOpen</c> table buffer.
    /// </param>
    /// <returns>
    ///     The number of grace days.
    /// </returns>
    protected DiscGraceDays getPaymModeDiscGraceDays(CustTransOpen _custTransOpen)
    {
        return CustPaymModeTable::find(this.PaymMode).DiscGraceDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDateModified</Name>
				<Source><![CDATA[
    // The method recalculates the due date and the cash disc date of all belonging CustTransOpen
    // and the cash disc date of all belonging CustTransCashDisc.
    // The recalculation is based on transferred TransDate.
    public void documentDateModified(TransDate _transDate)
    {
        CustTransOpen custTransOpen;
        CustTable custTable;
        CustInvoiceJour custInvoiceJour;
        CustTransCashDisc custTransCashDisc;
        CashDisc cashDisc;

        ttsbegin;

        while select forupdate custTransOpen
              where custTransOpen.RefRecId == this.RecId
        {
            custTransOpen.DueDate = _transDate;
            custInvoiceJour = CustInvoiceJour::findFromCustTransVoucher(this.Invoice, this.Voucher, this.TransDate, this.AccountNum);
            if (custInvoiceJour && custInvoiceJour.Payment)
            {
                custTransOpen.DueDate = PaymTerm::find(custInvoiceJour.Payment).due(custTransOpen.DueDate, custInvoiceJour.PaymDayId);
            }
            if (!custInvoiceJour)
            {
                custTable = CustTable::find(this.AccountNum);
                if (custTable && custTable.PaymTermId)
                {
                    custTransOpen.DueDate = PaymTerm::find(custTable.PaymTermId).due(custTransOpen.DueDate, custTable.PaymDayId);
                }
            }

            cashDisc = CashDisc::find(this.CashDiscCode);
            while select forupdate custTransCashDisc
                  where custTransCashDisc.RefTableId == custTransOpen.TableId &&
                        custTransCashDisc.RefRecId == custTransOpen.RecId
            {
                if (cashDisc &&
                    custTransCashDisc.CashDiscDue == CashDiscDue::CashDisc)
                {
                    custTransCashDisc.CashDiscdate = CashDisc::cashDiscDate(cashDisc.CashDiscCode, _transDate);
                    cashDisc = CashDisc::find(cashDisc.CashDiscCodeNext);
                }
                else if (custTransCashDisc.CashDiscDue == CashDiscDue::Due)
                {
                    custTransCashDisc.CashDiscdate = custTransOpen.DueDate;
                }
                custTransCashDisc.update();
            }
            custTransOpen.setCashDisc(cashDisc.discDate(_transDate),
                                      this.getPaymModeDiscGraceDays(custTransOpen));

            custTransOpen.update();

            ProjProposalJour projProposalJour;
            ProjInvoiceJour projInvoiceJour;

            if (Project::Enabled())
            {
                select ProposalId from projInvoiceJour
                    where projInvoiceJour.LedgerVoucher   == this.Voucher
                        && projInvoiceJour.InvoiceAccount == this.AccountNum
                        && projInvoiceJour.InvoiceDate    == this.TransDate;
                
                projProposalJour = ProjProposalJour::find(projInvoiceJour.ProposalId, true);

                if (projProposalJour)
                {
                    projProposalJour.DueDate = custTransOpen.DueDate;
                    projProposalJour.update();
                }
            }

            CustBillOfExchangeJour::updateDueDate(this.BillOfExchangeID, custTransOpen.DueDate);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateCurToMst</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the exchange rate from the transaction currency to the monetary standard (MST) currency.
    /// </summary>
    /// <returns>
    /// The exchange rate for the transaction.
    /// </returns>
    /// <remarks>
    /// The method returns the <c>ExchRate</c> field if there is no triangulation. If there is
    /// triangulation this returns the <c>ExchRateSecond</c> field divided by the <c>ExchRate</c> field.
    /// </remarks>
    public ExchRate exchRateCurToMst()
    {
        ExchRate combinedRate;

        Debug::assert(this.ExchRate != 0);

        if (this.CurrencyCode == Ledger::accountingCurrency(CompanyInfo::findDataArea(this.company()).RecId))
        {
            return 100.0;
        }
        else if (this.ExchRateSecond == 0)
        {
            // if no triangulation the ExchRateSecond will be zero, just use ExchRate.
            combinedRate = this.ExchRate;
        }
        else if (this.ExchRate != 0)
        {
            combinedRate = (this.ExchRateSecond / this.ExchRate) * 100;
        }

        return combinedRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpenSettlementRecID_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>CustSettlement</c> table.
    /// </summary>
    /// <param name="_settled">
    /// A Boolean value that determines whether the transaction is settled.
    /// </param>
    void findOpenSettlementRecID_BR(boolean _settled)
    {
        CustTransOpen custTransOpen;
        CustSettlement custSettlement;

        if (_settled)
        {
            while select TransRecId from custSettlement
                where custSettlement.TransRecId == this.RecId
            {
                CustTransEPRemit_BR::SetEpremitVal(this.PaymMode, custSettlement.RecId , _settled);
            }
        }
        else
        {
            while select RefRecId from custTransOpen
                where custTransOpen.RefRecId == this.RecId
            {
                CustTransEPRemit_BR::SetEpremitVal(this.PaymMode, custTransOpen.RecId , _settled);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalEstablishmentId_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the fiscal establishment of the current transaction.
    /// </summary>
    /// <returns>
    /// The <c>FiscalEstablishmentId_BR</c> of the fiscal establishment.
    /// </returns>
    public display FiscalEstablishmentId_BR fiscalEstablishmentId_BR()
    {
        if (this.TransType != LedgerTransType::Project)
        {
            return FiscalEstablishment_BR::find(
                CustInvoiceJour::findFromCustTransVoucher(
                    this.Invoice,
                    this.Voucher,
                    this.TransDate,
                    this.AccountNum).custInvoiceJour_BR().FiscalEstablishment_BR).FiscalEstablishmentId;
        }
        else
        {
            return FiscalDocument_BR::findByVoucherAndDate(this.Voucher, this.TransDate).FiscalEstablishment;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBillingClassification</Name>
				<Source><![CDATA[
    public display BillingClassification getBillingClassification()
    {
        return CustBillingClassification::find(this.CustBillingClassification).BillingClassification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentExtension_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustTransPayment_BR</c> table record
    /// </summary>
    /// <param name="_packNewExtensionTable">
    /// A Boolean value that indicates whether to pack new extension table record; optional
    /// </param>
    /// <returns>
    /// A record in the <c>CustTransPayment_BR</c> table; otherwise, an empty record.
    /// </returns>
    public CustTransPayment_BR getPaymentExtension_BR(boolean _packNewExtensionTable = true)
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(CustTransPayment_BR), _packNewExtensionTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPostingProfile</Name>
				<Source><![CDATA[
    public void initFromPostingProfile(CustPostingProfile _custPostingProfile)
    {
        CustLedger custLedger;
        CustPostingProfile custPostingProfile = _custPostingProfile;

        if (! custPostingProfile)
        {
            custPostingProfile = CustParameters::find().PostingProfile;
        }

        custLedger = CustLedger::find(custPostingProfile);

        if (! custLedger)
        {
            throw error(strFmt("@SYS27773",custPostingProfile));
        }

        this.Settlement = custLedger.Settlement;
        this.Interest = custLedger.Interest;
        this.CollectionLetter = custLedger.CollectionLetter;
        this.PostingProfileClose = custLedger.PostingProfileClose;
        this.PostingProfile = custLedger.PostingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRBOTransactionTable</Name>
				<Source><![CDATA[
    void initFromRBOTransactionTable(RetailTransactionId _transactionId, RetailStoreId _storeId, RetailTerminalId _terminalId)
    {
        PaymTerm paymTerm;
        RetailTransactionTable transactionTable;

        transactionTable = RetailTransactionTable::find(_transactionId,_storeId,_terminalId, false);

        if (transactionTable)
        {
            paymTerm = transactionTable.payment(false);

            this.PaymMethod = paymTerm.PaymMethod;
            this.CashPayment = paymTerm.Cash;
            //this.deliveryMode = salesTable.dlvMode;
            //this.cashDiscCode = salesTable.cashDisc;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the current record into the <c>CustTrans</c> table.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// The currency of the current record is empty.
    /// </exception>
    public void insert()
    {
        #ISOCountryRegionCodes

        if (this.CurrencyCode == '')
        {
            throw error(strFmt('%1 %2', tableId2name(this.TableId), "@SYS23229"));
        }

        if (this.OrderAccount == '')
        {
            this.OrderAccount = this.AccountNum;
        }

        if (this.AmountCur == this.SettleAmountCur && this.AmountMST == this.SettleAmountMST)
        {
            this.Closed = this.TransDate;
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            CustTrans_W custTrans_W = this.custTrans_W();
            if (!custTrans_W.DefaultDimensionReporting_RU)
            {
                custTrans_W.DefaultDimensionReporting_RU = this.DefaultDimension;
                this.packCustTrans_W(custTrans_W);
            }
        }

        ttsbegin;

        CustVendTransReportingCurrencyInitializer initializer = CustVendTransReportingCurrencyInitializer::newForTransaction(this);

        CurrencyCode transactionReportingCurrency = initializer.getReportingCurrencyForTransaction();

        if (transactionReportingCurrency != ''
            && this.ReportingCurrencyAmount == 0.0
            && this.ReportingCurrencyCrossRate == 0.0)
        {
            initializer.calculateReportingCurrencyAmount();
        }

        if (CustConsInvoiceType_JP::isCustConsInvoiceEnabled())
        {
            this.CustVendTrans::initConsInvoice_JP();
        }

        super();

        if (BrazilParameters::isEnabled())
        {
            CustTransPayment_BR custTransPayment_BR = this.getPaymentExtension_BR();
            custTransPayment_BR.paymspecModified_BR(this.PaymMode, this.PaymSpec);
            this.packExtensionTable(custTransPayment_BR);
            if (custTransPayment_BR.CustTrans == 0)
            {
                this.SysExtensionSerializerMap::postInsert();
            }
            else
            {
                this.SysExtensionSerializerMap::postUpdate();
            }
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoTH]))
        {
            this.SysExtensionSerializerMap::postInsert();
        }
        smmTransLog::initTrans(this, smmLogAction::insert);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            CustTrans_IN::insertFromCustTrans(this);
        }

        if (LedgerParameters::find().UsePrecalcData_RU)
        {
            RLedgerTurnoverType::updatePrecalcData(this, RLedgerTurnoverSheetType::CustTurnover);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN, #isoRU, #isoJP, #isoPL]))
        {
            this.SysExtensionSerializerMap::postInsert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventProfileType_RU</Name>
				<Source><![CDATA[
    InventProfileType_RU inventProfileType_RU()
    {
        return InventProfileType_RU::General;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditNote</Name>
				<Source><![CDATA[
    public boolean isCreditNote()
    {
        boolean ret = false;

        if (this.AmountCur < 0 && this.Invoice)
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInterest</Name>
				<Source><![CDATA[
    public boolean isInterest()
    {
        return (this.TransType == LedgerTransType::Interest);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoice</Name>
				<Source><![CDATA[
    public boolean isInvoice()
    {
        return ((this.AmountCur >= 0 && this.Invoice) || this.TransType == LedgerTransType::CollectionLetter ||
                (this.BillOfExchangeStatus == CustVendNegInstStatus::None && !this.TransType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isParentOrAdjustingInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the <c>CustTrans</c> table is a parent or adjusting invoice.
    /// </summary>
    /// <returns>
    /// true if the transaction is a parent or adjusting invoice; otherwise, false.
    /// </returns>
    public boolean isParentOrAdjustingInvoice()
    {
        boolean ret;
        CustInvoiceTable custInvoiceTable;
        CustInvoiceTable correctedCustInvoiceTable;

        if (isConfigurationkeyEnabled(configurationKeyNum(FreeTextInvoiceCorrection)))
        {
            if ((this.Invoice) && (this.TransType == LedgerTransType::Cust))
            {
                custInvoiceTable = CustInvoiceJour::findFromCustTrans(
                    this.Invoice,
                    this.TransDate,
                    this.AccountNum).custInvoiceTable();

                if (CustRelatedInvoice::doesParentInvoiceExist(custInvoiceTable.RecId))
                {
                    correctedCustInvoiceTable = CustInvoiceTable::findRecId(
                        CustRelatedInvoice::findByParentCustInvoiceInvoiceType(
                        custInvoiceTable.RecId, InvoiceAssociationType::CorrectedInvoice).CustInvoice);

                    // parent's invoice, corrected invoice is posted
                    if (!correctedCustInvoiceTable.isEditable())
                    {
                        ret = true;
                    }
                }
                else if (CustRelatedInvoice::doesInvoiceExistForType(custInvoiceTable.RecId, InvoiceAssociationType::AdjustingInvoice))
                {
                    ret = true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPayment</Name>
				<Source><![CDATA[
    public boolean isPayment()
    {
        boolean ret = true;

        if (this.Invoice ||
            this.TransType == LedgerTransType::Interest ||
            this.TransType == LedgerTransType::ExchAdjustment ||
            this.TransType == LedgerTransType::CollectionLetter ||
            this.TransType == LedgerTransType::AdvanceAdjustment_RU ||
            (this.BillOfExchangeStatus == CustVendNegInstStatus::None && !this.TransType))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReimbursement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the debit transaction is of reimbursement type.
    /// </summary>
    /// <returns>
    /// true if the debit transaction is of reimbursement type; otherwise, false .
    /// </returns>
    public boolean isReimbursement()
    {
        SubledgerVoucherGeneralJournalEntry localSubledgerVoucherGeneralJournalEntry;
        GeneralJournalAccountEntry localGeneralJournalAccountEntry;
        boolean isReimbursementType;

        while select PostingType
            from localGeneralJournalAccountEntry
                exists join localSubledgerVoucherGeneralJournalEntry
                where localSubledgerVoucherGeneralJournalEntry.GeneralJournalEntry == localGeneralJournalAccountEntry.GeneralJournalEntry &&
                        localSubledgerVoucherGeneralJournalEntry.Voucher == this.Voucher &&
                        localSubledgerVoucherGeneralJournalEntry.VoucherDataAreaId == this.DataAreaId &&
                        localSubledgerVoucherGeneralJournalEntry.AccountingDate == this.TransDate
        {
            isReimbursementType = true;

            if (localGeneralJournalAccountEntry.PostingType != LedgerPostingType::CustReimbursement)
            {
                isReimbursementType = false;
                break;
            }
        }

        return isReimbursementType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSettled_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies whether the customer transaction is settled.
    /// </summary>
    /// <returns>
    /// True if the customer transaction is settled; false otherwise.
    /// </returns>
    boolean isSettled_BR()
    {
        return CustSettlement::exist(this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransForConsInvoice_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether this transaction is for consolidated invoice.
    /// </summary>
    /// <returns>
    /// Returns true when opposite transaction is for SO and related with consolidated invoice.
    /// Otherwise, returns false.
    /// </returns>
    /// <remarks>
    /// <c>LedgerTransType::Payment</c> is used when canceling payment.
    /// </remarks>
    public boolean isTransForConsInvoice_JP()
    {
        CustTrans custTrans;
        CustTrans_W custTrans_W;

        select firstOnly CustConsInvoice_JP from custTrans_W
            exists join custTrans
                where custTrans.RecId == this.OffsetRecid
                    && (custTrans.TransType == LedgerTransType::Sales
                        || custTrans.TransType == LedgerTransType::Payment)
                    && custTrans_W.CustTrans == custTrans.RecId;

        if (custTrans_W.CustConsInvoice_JP == 0 && TaxConsInvoice_JP::isTaxDifferencePostingOnConsInvoiceEnabled(true))
        {
            CustTrans custTransDiff;
            CustTrans_W custTrans_WDiff;
            CustConsInvoice_JP custConsInvoice_JP;

            select firstonly CustConsInvoice_JP from custTrans_WDiff
                join custTransDiff
                join custConsInvoice_JP
                    where custConsInvoice_JP.PostedCustTrans == custTransDiff.RecId
                        && custTrans_WDiff.CustTrans == custTransDiff.RecId
                        && custTransDiff.RecId == this.OffsetRecId;

            return custTrans_WDiff.CustConsInvoice_JP != 0;
        }

        return custTrans_W.CustConsInvoice_JP != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>languageId</Name>
				<Source><![CDATA[
    public display LanguageId languageId()
    {
        DirPartyTable partyTable;
        CustTable custTable;
        select firstonly Party from custTable
                    where custTable.AccountNum == this.AccountNum
                join LanguageId from partyTable
                    where partyTable.RecId == custTable.Party;
        return partyTable.LanguageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastUpdatedCollectionLetter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the last updated Collection Letter for this custTrans.
    /// </summary>
    public CustTransOpenLastUpdatedCollectionLetter lastUpdatedCollectionLetter()
    {
        CustParameters custParameters = CustParameters::find();
        CustTransOpenLastUpdatedCollectionLetter lastUpdatedView;
        CustCollectionLetterJour custCollectionLetterJour;

        select maxof(LastCollectionLetterJourDate), maxof(LastCollectionLetterCode), maxof(LastCollectionLetterNum) from lastUpdatedView
            group by lastUpdatedView.CustTransId
                where lastUpdatedView.CustTransId == this.RecId
                    && ((custParameters.CollectionLetterCodeUpdate == CustPostedPrinted::Posting && lastUpdatedView.Updated != dateNull())
                    || (custParameters.CollectionLetterCodeUpdate == CustPostedPrinted::Printed && lastUpdatedView.JournalPrinted))
                join TableId, RecId from custCollectionLetterJour
                    where custCollectionLetterJour.CollectionLetterNum == lastUpdatedView.LastCollectionLetterNum;

        return lastUpdatedView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastUpdatedCollectionLetterOld</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the last updated Collection Letter for this custTrans.
    /// </summary>
    /// <param name = "_enforceRecordLevelSecurity"> Enable record level security. Default: false </param>
    /// <param name = "_includeReversedCollectionLetters"> If set to false this method will not take into account collection letters that have a corresponding
    /// record in the TransactionReversalTrans table. Default: false</param>
    public CustCollectionLetterJour lastUpdatedCollectionLetterOld(boolean _enforceRecordLevelSecurity = false, boolean _includeReversedCollectionLetters = false)
    {
        CustCollectionLetterJour custCollectionLetterJour;

        Query q = new Query();
        QueryBuildDataSource collectionLetterJourDS = q.addDataSource(tableNum(CustCollectionLetterJour));
        q.recordLevelSecurity(_enforceRecordLevelSecurity);

        collectionLetterJourDS.addRange(fieldNum(CustCollectionLetterJour, Status)).value(SysQuery::valueNot(PrintPostCancel::Canceled));
        collectionLetterJourDS.addOrderByField(fieldNum(CustCollectionLetterJour, CollectionLetterDate), SortOrder::Descending);
        collectionLetterJourDS.firstOnly(true);

        QueryBuildDataSource collectionLetterTransDS = collectionLetterJourDS.addDataSource(tableNum(CustCollectionLetterTrans));
        collectionLetterTransDS.relations(true);
        collectionLetterTransDS.joinMode(JoinMode::ExistsJoin);
        collectionLetterTransDS.addRange(fieldNum(CustCollectionLetterTrans, CustTransId)).value(SysQuery::value(this.RecId));
        collectionLetterTransDS.addRange(fieldNum(CustCollectionLetterTrans, CustTransOpenRecId)).value(SysQuery::value(0));
        collectionLetterTransDS.addRange(fieldNum(CustCollectionLetterTrans, CollectionLetterIssued)).value(SysQuery::value(NoYes::Yes));

        if (CustParameters::find().CollectionLetterCodeUpdate == CustPostedPrinted::Posting)
        {
            collectionLetterJourDS.addRange(fieldNum(CustCollectionLetterJour, Updated)).value(SysQuery::valueNot(dateNull()));
        }
        else
        {
            collectionLetterJourDS.addRange(fieldNum(CustCollectionLetterJour, JournalPrinted)).value(SysQuery::value(NoYes::Yes));
        }

        if (!_includeReversedCollectionLetters)
        {
            // Do not exsists join with TransactionReversalTrans
            QueryBuildDataSource transactionReversalTransDS = collectionLetterJourDS.addDataSource(tableNum(TransactionReversalTrans));
            transactionReversalTransDS.joinMode(JoinMode::NoExistsJoin);
            transactionReversalTransDS.addLink(fieldNum(CustCollectionLetterJour, RecId), fieldNum(TransactionReversalTrans, RefRecId));
            transactionReversalTransDS.addRange(fieldNum(TransactionReversalTrans, RefTableId)).value(SysQuery::value(tableNum(CustCollectionLetterJour)));
        }

        QueryRun qr = new QueryRun(q);
        qr.next();

        custCollectionLetterJour = qr.get(tableNum(CustCollectionLetterJour));

        return custCollectionLetterJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastUpdatedInterest</Name>
				<Source><![CDATA[
    public CustInterestJour lastUpdatedInterest(boolean enforceRecordLevelSecurity = false)
    {
        CustInterestJour custInterestJour;
        CustInterestTrans custInterestTrans;
        TransactionReversalTrans transactionReversalTrans;

        custInterestJour.recordLevelSecurity(enforceRecordLevelSecurity);

        select firstonly forceplaceholders forcenestedloop forceselectorder TableId from custInterestTrans
            where custInterestTrans.CustTransId == this.RecId
               && custInterestTrans.InterestCalculate == NoYes::Yes
        join custInterestJour
            order by ToDate desc
            where custInterestJour.InterestNote == custInterestTrans.InterestNote &&
                  custInterestJour.Updated != dateNull()
        notexists join transactionReversalTrans
        where transactionReversalTrans.RefTableId == custInterestJour.TableId
           && transactionReversalTrans.RefRecId == custInterestJour.RecId;

        return custInterestJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrIsDeduction</Name>
				<Source><![CDATA[
    public boolean mcrIsDeduction()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(TAMPromotionsManagement)))
        {
            if (this.TransType == LedgerTransType::Payment)
            {
                TAMDeduction tamDeduction;

                select firstonly RecId from tamDeduction
                    where tamDeduction.CustTransRecId == this.RecId;

                return tamDeduction.RecId;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a dimension set that holds the merged combination of the current defaultDimension field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set that should be merged with the current defaultDimension field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set that should be merged with the current defaultDimension field on this table; optional
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object previously instantiated using the current
    /// buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current defaultDimension field on this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when merging. Additional the entity specifier defaulting will be taken
    /// into consideration
    /// </remarks>
    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )

        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum (CustTrans, PaymMode):
                this.PaymModeMap::modifiedPaymMode();
                if (BrazilParameters::isEnabled())
                {
                    this.findOpenSettlementRecID_BR(this.isSettled_BR());
                }
                break;

            case fieldNum (CustTrans, DirectDebitMandate):
                this.ThirdPartyBankAccountId = CustDirectDebitMandate::find(this.DirectDebitMandate).BankAccount;
                break;

            case fieldNum (CustTrans, CollectionLetterCode):
                // When there is only one CustTransOpen for this CustTrans
                // then its collection letter code is updated with the CustTrans new collection letter code
                if (this.countOpenTrans() == 1)
                {
                    ttsbegin;
                    var custTransOpen = CustTransOpen::findRefId(this.RecId, true);
                    custTransOpen.CollectionLetterCode = this.CollectionLetterCode;
                    custTransOpen.doUpdate();
                    ttscommit;
                }
                break;

            case fieldNum (CustTrans, CollectionLetter):
                ttsbegin;
                
                CustTransOpen custTransOpen;

                while select forupdate custTransOpen
                    where custTransOpen.RefRecId == this.RecId
                        && custTransOpen.AccountNum == this.AccountNum
                {
                    custTransOpen.CollectionLetter = this.CollectionLetter;
                    custTransOpen.doUpdate();
                }
                ttscommit;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>open</Name>
				<Source><![CDATA[
    public display OpenPosting open()
    {
        OpenPosting hasOpenAmount;

        if (SettlementUtility::hasOpenAmountCur(this.AmountCur, this.SettleAmountCur))
        {
            hasOpenAmount = NoYes::Yes;
        }
        else
        {
            hasOpenAmount = NoYes::No;
        }

        return hasOpenAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originalPaymTrans_RU</Name>
				<Source><![CDATA[
    public CustTrans originalPaymTrans_RU(boolean _checkJournal = true,
                                          CustTrans _custTrans = this)
    {
        CustVendTransPostingLog_RU custVendTransPostingLog;
        CustTrans custTrans,originalTrans;
        Originaldocuments originaldocuments = Originaldocuments::construct(this);

        if (_checkJournal)
        {
            originaldocuments.findFromCustTrans();
            if (originaldocuments.numTrans_RU())
            {
                return this;
            }
        }
        if (this.Correct)
        {
            select firstonly OffSetRecId from custVendTransPostingLog index hint TransIdx
                where custVendTransPostingLog.TransRecId == this.RecId &&
                       custVendTransPostingLog.PostingLogType == CustVendTransPostingLogType_RU::Prepayment &&
                       custVendTransPostingLog.RefTableId == this.TableId;
            if (! custVendTransPostingLog.RecId)
            {
                return this;
            }
            custTrans = CustTrans::find(custVendTransPostingLog.OffSetRecId);
        }
        else
        {
            select firstonly custTrans index hint AccountDateIdx
                where custTrans.AccountNum == this.AccountNum &&
                      custTrans.TransDate == this.TransDate &&
                      custTrans.Voucher == this.Voucher &&
                      custTrans.Correct == NoYes::Yes;
            if (! custTrans.RecId)
            {
                return this;
            }
        }
        if (_custTrans.RecId != custTrans.RecId)
        {
            originalTrans = custTrans.originalPaymTrans_RU(_checkJournal,this);
        }
        else
        {
            originalTrans = this.Correct ? custTrans : this;
        }
        return originalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packCustTrans_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the <c>CustTrans_W</c> associated with the current record.
    /// </summary>
    /// <param name="_custTrans_W">
    /// The <c>CustTrans_W</c> record.
    /// </param>
    public void packCustTrans_W(CustTrans_W _custTrans_W)
    {
        _custTrans_W.CustTrans = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_custTrans_W);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packExtensionTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs a <c>SysExtensionSerializerExtensionMap</c> extension table's buffer inside the
    /// record's internal cache.
    /// </summary>
    /// <param name="_sysExtensionSerializerExtensionTableMap">
    /// <c>SysExtensionSerializerExtensionMap</c> to be packed.
    /// </param>
    /// <returns>
    /// true if success; otherwise false.
    /// </returns>
    public boolean packExtensionTable(SysExtensionSerializerExtensionMap _sysExtensionSerializerExtensionTableMap)
    {
        return this.SysExtensionSerializerMap::packExtensionTable(_sysExtensionSerializerExtensionTableMap.data());
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentTerms</Name>
				<Source><![CDATA[
    public display CustPaymTermId paymentTerms(CustTrans _custTrans)
    {
        CustInvoiceJour custInvoiceJour;
        ProjInvoiceJour projInvoiceJour;
        CustPaymTermId paymentTerm;

        switch (_custTrans.TransType)
        {
            // return the payment term for the appropriate record type.

            case LedgerTransType::Cust :
            case LedgerTransType::Sales :
                custInvoiceJour = CustInvoiceJour::findFromCustTrans(_custTrans.Invoice, _custTrans.TransDate, _custTrans.AccountNum);
                return custInvoiceJour.Payment;
            case LedgerTransType::Project :
                projInvoiceJour = ProjInvoiceJour::find(_custTrans.Invoice, _custTrans.TransDate);
                return projInvoiceJour.Payment;
        }

        // if the custTrans record isn't based on the CustInvoiceJour or the ProjInvoiceJour then
        // there is no payment term so return an empty payment term.
        return paymentTerm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentTermsListPage</Name>
				<Source><![CDATA[
    public display PaymTermId paymentTermsListPage(CustTrans _custTrans)
    {
        CustInvoiceJour custInvoiceJour;
        ProjInvoiceJour projInvoiceJour;
        CustPaymTermId paymentTerm;

        switch (_custTrans.TransType)
        {
            // return the payment term for the appropriate record type.

            case LedgerTransType::Cust :
            case LedgerTransType::Sales :
                custInvoiceJour = CustInvoiceJour::findFromCustTrans(_custTrans.Invoice, _custTrans.TransDate, _custTrans.AccountNum);
                return custInvoiceJour.Payment;
            case LedgerTransType::Project :
                projInvoiceJour = ProjInvoiceJour::find(_custTrans.Invoice, _custTrans.TransDate);
                return projInvoiceJour.Payment;
        }

        // if the custTrans record isn't based on the CustInvoiceJour or the ProjInvoiceJour then
        // there is no payment term so return an empty payment term.
        return paymentTerm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>possibleCashDisc</Name>
				<Source><![CDATA[
    public display CustCashDiscAmount possibleCashDisc(TransDate _transDate = this.TransDate)
    {
        CustVendTransDetails custVendTransDetails = new CustTransDetails(this, _transDate);

        return custVendTransDetails.possibleCashDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepaidNetAmount</Name>
				<Source><![CDATA[
    public display AmountCur prepaidNetAmount()
    {
        return (-this.AmountCur) - this.prepaidTaxAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepaidTaxAmount</Name>
				<Source><![CDATA[
    public display AmountCur prepaidTaxAmount()
    {
        TaxTrans taxTrans;

        if (!this.Prepayment)
        {
            return 0;
        }

        select sum(SourceTaxAmountCur) from taxTrans
            where taxTrans.Voucher == this.Voucher &&
                  taxTrans.TransDate == this.TransDate &&
                  !(taxTrans.TaxOrigin == TaxOrigin::TaxReversed ||
                  taxTrans.TaxOrigin == TaxOrigin::Transfer);

        return -taxTrans.SourceTaxAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewPaneTitle</Name>
				<Source><![CDATA[
    public display Caption previewPaneTitle()
    {
        return strFmt("@SYS327590", this.AccountNum, this.custTableName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceJour_MX</Name>
				<Source><![CDATA[
    public ProjInvoiceJour projInvoiceJour_MX(boolean _forupdate = false)
    {
        ProjInvoiceJour projInvoiceJour;
        
        projInvoiceJour.selectForUpdate(_forupdate);
        
        select firstonly projInvoiceJour
            where projInvoiceJour.InvoiceAccount    == this.AccountNum &&
                  projInvoiceJour.InvoiceDate       == this.TransDate &&
                  projInvoiceJour.LedgerVoucher     == this.Voucher;
        
        return projInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCustInvoiceJour</Name>
				<Source><![CDATA[
    public Query queryCustInvoiceJour(boolean _update = false)
    {
        return SysQuery::queryFromTableRelation(this, tableNum(CustInvoiceJour), _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCustVendSettlement</Name>
				<Source><![CDATA[
    public Query queryCustVendSettlement(boolean _update = false)
    {
        return SysQuery::queryFromTableRelation(this, tableNum(CustSettlement), _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCustVendTransOpen</Name>
				<Source><![CDATA[
    Query queryCustVendTransOpen(boolean _update = false)
    {
        return SysQuery::queryFromTableRelation(this, tableNum(CustTransOpen), _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryProjInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>Query</c> object that is used to iterate over related <c>ProjInvoiceJour</c> table
    /// records.
    /// </summary>
    /// <param name="_update">
    /// A Boolean value that determines whether the records are selected for update; optional.
    /// </param>
    /// <returns>
    /// A <c>Query</c> object that is used to iterate over related <c>ProjInvoiceJour</c> table records.
    /// </returns>
    public Query queryProjInvoiceJour(boolean _update = false)
    {
        return SysQuery::queryFromTableRelation(this, tableNum(ProjInvoiceJour), _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainAmountCur</Name>
				<Source><![CDATA[
    public display AmountCur remainAmountCur()
    {
        return this.transData().remainAmountCur();
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainAmountMST</Name>
				<Source><![CDATA[
    public display AmountMST remainAmountMST()
    {
        return this.transData().remainAmountMST();
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainAmountReportingCurrency</Name>
				<Source><![CDATA[
    public display AmountMSTSecondary remainAmountReportingCurrency()
    {
        return this.transData().remainAmountReportingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetAmountsToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the transaction amounts to what they were on the specified date.
    /// </summary>
    /// <param name="_resetDate">
    /// The date on which resetting the transaction amounts will be based.
    /// </param>
    /// <remarks>
    /// The amount of any settlements after the specified date are added back to the transaction.
    /// </remarks>
    public void resetAmountsToDate(TransDate _resetDate)
    {
        this.transactionPerDate(_resetDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversed</Name>
				<Source><![CDATA[
    public display boolean reversed()
    {
        return TransactionReversalTrans::findTransactionReversalTrans(tableNum(CustTrans), this.RecId).Reversed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settledPrepaidAmountCur</Name>
				<Source><![CDATA[
    public AmountCur settledPrepaidAmountCur(NoYes _onlySelectPrePayment = NoYes::Yes)
    {
        CustTrans custTrans;
        CustSettlement custSettlement;
        AmountCur prepaidAmountCur;
        CompanyId offsetCompany = curext();

        while select OffsetCompany, OffsetRecid, SettleAmountCur from custSettlement
            where custSettlement.TransRecId == this.RecId
        {
            if (custSettlement.OffsetCompany)
            {
                offsetCompany = custSettlement.OffsetCompany;
            }
            else
            {
                offsetCompany = curext();
            }

            changecompany(offsetCompany)
            {
                // This is necessary to clear the DataAreaId in order to get
                // data from other companies.
                custTrans = null;

                if (_onlySelectPrePayment)
                {
                    select custTrans
                        where custTrans.RecId == custSettlement.OffsetRecid
                        && custTrans.Prepayment == NoYes::Yes;
                }
                else
                {
                    // By including the TransType check, credit notes are excluded
                    select custTrans
                        where custTrans.RecId == custSettlement.OffsetRecid
                        && (custTrans.TransType == LedgerTransType::Payment
                        || custTrans.Prepayment == NoYes::Yes);
                }

                if (custTrans)
                {
                    prepaidAmountCur += custSettlement.SettleAmountCur;
                }
            }
        }

        return prepaidAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount summaryLedgerDimension(CustPostingProfile _postingProfile = this.PostingProfile)
    {
        return CustLedgerAccounts::summaryLedgerDimension(this.AccountNum, _postingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>traceNum</Name>
				<Source><![CDATA[
    public display TraceNum traceNum()
    {
        return TransactionReversalTrans::findTransactionReversalTrans(tableNum(CustTrans), this.RecId).TraceNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionPerDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the transaction amounts to what they were on the specified date.
    /// </summary>
    /// <param name="_resetDate">
    /// The date on which to base resetting the transaction amounts.
    /// </param>
    public void transactionPerDate(TransDate _resetDate)
    {
        CustSettlement custSettlement;

        select sum(SettleAmountCur), sum(SettleAmountMST), sum(ExchAdjustment)
            from custSettlement
            where custSettlement.TransRecId == this.RecId &&
                custSettlement.TransDate > _resetDate;

        this.SettleAmountCur -= custSettlement.SettleAmountCur;
        this.SettleAmountMST -= custSettlement.SettleAmountMST;
        this.ExchAdjustment -= custSettlement.ExchAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transData</Name>
				<Source><![CDATA[
    public CustTransData transData()
    {
        return CustVendTransData::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transOpen</Name>
				<Source><![CDATA[
    public CustTransOpen transOpen(
        DueDate _dueDate = dateNull(),
        boolean _forUpdate = false
        )
    {
        CustTransOpen custTransOpen;

        custTransOpen.selectForUpdate(_forUpdate);

        if (_dueDate == dateNull())
        {
            select custTransOpen where custTransOpen.RefRecId == this.RecId;
        }
        else
        {
            select custTransOpen
                where custTransOpen.RefRecId == this.RecId &&
                      custTransOpen.DueDate == _dueDate;
        }

        return custTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        #ISOCountryRegionCodes;
        CustTrans custTrans_Orig = this.orig();

        ttsbegin;

        if (CustConsInvoiceType_JP::isCustConsInvoiceEnabled())
        {
            CustTrans_W custTrans_W = this.custTrans_W();
            if (custTrans_W.CustConsInvoice_JP < 0)
            {
                // If the field CustConsInvoice_JP less than 0, the update is called by cancel action,
                // sets reference id with 0 to release related transaction.
                custTrans_W.CustConsInvoice_JP = 0;
                this.packCustTrans_W(custTrans_W);
            }
            else
            {
                // Consolidated invoice reference will be updated here for transaction of payment.
                this.CustVendTrans::initConsInvoice_JP();
            }
        }

        this.SysExtensionSerializerMap::postUpdate();

        super();

        if (this.DocumentDate && this.DocumentDate != custTrans_Orig.DocumentDate)
        {
            this.documentDateModified(this.DocumentDate);
        }
        else if (!this.DocumentDate && custTrans_Orig.DocumentDate)
        {
            this.documentDateModified(this.TransDate);
        }

        smmTransLog::initTrans(this, smmLogAction::update);

        if (CustConsInvoiceType_JP::isCustConsInvoiceEnabled())
        {
            this.CustVendTrans::settleAmountMSTModified_JP();
        }

        if (BrazilParameters::isEnabled())
        {
            if (this.PaymMode != custTrans_Orig.PaymMode)
            {
                this.findOpenSettlementRecID_BR(this.isSettled_BR());
            }
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN, #isoRU, #isoJP]))
        {
            this.SysExtensionSerializerMap::postUpdate();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(CustTrans, CollectionLetterCode) :
                    CustCollectionLetterCodeOrderedList custCollectionLetterCodeOrderedList = CustCollectionLetterCodeOrderedList::newFromOrder();

                    if (custCollectionLetterCodeOrderedList.indexOf(this.CollectionLetterCode) >= custCollectionLetterCodeOrderedList.indexOf(CustCollectionLetterCode::All))
                    {
                        ret = checkFailed(strFmt("@SYS77955", this.CollectionLetterCode));
                    }
                    break;

                case fieldNum(CustTrans, CompanyBankAccountId) :
                    if (!this.allowEditCompanyBankAccountId())
                    {
                        ret = checkFailed("@SYS88327");
                    }
                    else
                    {
                        if (this.CompanyBankAccountId)
                        {
                            ret = BankAccountTable::checkIsActive(this.CompanyBankAccountId, this.TransDate);
                        }
                    }
                    break;

                case fieldNum(CustTrans, TransDate) :
                    if (this.CompanyBankAccountId)
                    {
                        ret = BankAccountTable::checkIsActive(this.CompanyBankAccountId, this.TransDate);
                    }
                    break;

                case fieldNum(CustTrans, ThirdPartyBankAccountId) :
                    if (!this.allowEditThirdPartyBankAccountId())
                    {
                        ret = checkFailed("@SYS88328");
                    }
                    else if (ret && !this.validateThirdPartyBankAccountId())
                    {
                        ret = checkFailed(strFmt("@AccountsReceivable:CustTransBankAccNotExists", this.ThirdPartyBankAccountId, this.AccountNum));
                    }
                    break;

                case fieldNum(CustTrans, ExchRate) :
                    if (this.ExchRate == 0.0)
                    {
                        ret = checkFailed("@SYS62407");
                    }
                    break;

                case fieldNum(CustTrans, DirectDebitMandate) :
                    if (this.BillOfExchangeID)
                    {
                        var customerBank = CustDirectDebitMandate::find(this.DirectDebitMandate, false).BankAccount;

                        if (this.ThirdPartyBankAccountId != customerBank)
                        {
                            ret = checkFailed(strFmt("@SYS4002532", customerBank, this.ThirdPartyBankAccountId));
                        }
                    }
                    break;

                case fieldNum(CustTrans, PaymReference) :
                    BankChequeNum bankChequeNum = LedgerJournalTrans::findByCustVendTrans(this).BankChequeNum;
                    if (bankChequeNum && bankChequeNum != this.PaymReference)
                    {
                        ret = checkFailed(strFmt("@CashManagement:ErrorChangePaymReference", bankChequeNum));
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceMST</Name>
				<Source><![CDATA[
    public static AmountMST balanceMST(CustAccount _custAccount)
    {
        CustTrans custTrans;

        select sum(AmountMST), sum(SettleAmountMST) from custTrans
            where custTrans.AccountNum == _custAccount;

        return (custTrans.AmountMST - custTrans.SettleAmountMST);
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the balance in reporting currency for the specified customer account.
    /// </summary>
    /// <param name = "_custAccount">
    /// Customer account number.
    /// </param>
    /// <returns>
    /// The balance for the specified customer account in reporting currency.
    /// </returns>
    public static AmountMSTSecondary balanceReportingCurrency(CustAccount _custAccount)
    {
        CustTrans custTrans;

        select sum(ReportingCurrencyAmount), sum(SettleAmountReporting) from custTrans
            where custTrans.AccountNum == _custAccount;

        return (custTrans.ReportingCurrencyAmount - custTrans.SettleAmountReporting);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSettlementOutsideCashDiscDate</Name>
				<Source><![CDATA[
    public static AmountCur calcSettlementOutsideCashDiscDate(
        RecId _recId,
        TransDate _cashDiscDate)
    {
        AmountCur amountCur = 0;
        CustSettlement custSettlementFieldList;
        CustTrans custTransFieldList;
        DiscGraceDays discGraceDays;

        while select OffsetCompany, OffsetRecid, SettleAmountCur from custSettlementFieldList
            where custSettlementFieldList.TransRecId == _recId
        {
            changecompany(custSettlementFieldList.OffsetCompany)
            {
                select TransDate, PaymMode from custTransFieldList
                    where custTransFieldList.RecId == custSettlementFieldList.OffsetRecid;

                if (custTransFieldList.TransDate > _cashDiscDate)
                {
                    discGraceDays = CustPaymModeTable::discGraceDays(custTransFieldList.PaymMode);

                    if (date2num(custTransFieldList.TransDate) > date2num(_cashDiscDate) + discGraceDays)
                    {
                        amountCur += custSettlementFieldList.SettleAmountCur;
                    }
                }
            }
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfCanBeSettled_RU</Name>
				<Source><![CDATA[
    public static boolean checkIfCanBeSettled_RU(CustTrans _custTransDebet,
                                                        CustTrans _custTransCredit,
                                                        TransDate _settlementDate,
                                                        boolean _checkPostingLog = true,
                                                        DimSettlementType_RU _dimSettlementType = DimSettlementType_RU::None)
    {
        #ISOCountryRegionCodes
        boolean ret = true;

        CustInvoiceJour jourDebet,
                        jourCredit,
                        jourOriginal;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            if (_custTransDebet.Invoice)
            {
                if (_custTransDebet.Invoice)
                {
                    ret = SalesBookTable_RU::checkIfCanBeSettled_RU(_custTransDebet, _custTransCredit, _settlementDate);
                }

                if (_custTransCredit.Invoice)
                {
                    ret = ret && SalesBookTable_RU::checkIfCanBeSettled_RU(_custTransCredit, _custTransDebet, _settlementDate);

                    jourCredit = _custTransCredit.custInvoiceJour_RU();
                    if (jourCredit.correctionType_RU() == FactureCorrectionType_RU::Revision && jourCredit.creditNote())
                    {
                        jourOriginal = CustInvoiceJour::findRecId(jourCredit.refOriginalInvoiceRecId_RU());
                        if (_custTransDebet.Invoice)
                        {
                            jourDebet = _custTransDebet.custInvoiceJour_RU();
                        }

                        if (! _custTransDebet.Invoice ||
                            ((jourDebet.correctionType_RU() != FactureCorrectionType_RU::Revision ||
                              jourDebet.refOriginalInvoiceRecId_RU() != jourOriginal.RecId) &&
                              jourDebet.RecId != jourOriginal.RecId))
                        {
                            if (jourOriginal.custTrans().remainAmountMST())
                            {
                                ret = checkFailed("@SYS4081864");
                            }
                        }
                    }
                }

                if (_custTransDebet.Prepayment)
                {
                    ret = ret && PurchBookTable_RU::checkIfCanBeSettled_RU(_custTransCredit, _custTransDebet, _settlementDate);
                }

                if (_custTransCredit.Prepayment)
                {
                    ret = ret && PurchBookTable_RU::checkIfCanBeSettled_RU(_custTransDebet, _custTransCredit, _settlementDate);
                }
            }

            if (_custTransCredit.Invoice)
            {
                ret = ret && SalesBookTable_RU::checkIfCanBeSettled_RU(_custTransCredit, _custTransDebet, _settlementDate);
            }

            if (_custTransDebet.Prepayment)
            {
                ret = ret && PurchBookTable_RU::checkIfCanBeSettled_RU(_custTransCredit, _custTransDebet, _settlementDate);
            }

            if (_custTransCredit.Prepayment)
            {
                ret = ret && PurchBookTable_RU::checkIfCanBeSettled_RU(_custTransDebet, _custTransCredit, _settlementDate);
            }
        }

        if (_checkPostingLog)
        {
            if (!AllowSettleSameCustVendTransOnSameDate_RUFlight::instance().isEnabled())
            {
                ret = ret && ! CustVendTransPostingLog_RU::exist(_settlementDate,
                                                             _custTransDebet.TableId,
                                                             _custTransDebet.RecId,
                                                             _custTransCredit.RecId,
                                                             _custTransDebet.company(),
                                                             _custTransCredit.company());
            }
        }

        if (_dimSettlementType != DimSettlementType_RU::None)
        {
            ret = ret && CustVendSettle::checkTransDimension_RU(_custTransDebet, _custTransCredit, _dimSettlementType);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustTransTypeForReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks <c>CustTrans</c> on trans type
    /// </summary>
    /// <param name = "_custTrans">Current <c>CustTrans</c></param>
    /// <returns>
    /// true if trans type is from specified values; otherwise, false.
    /// </returns>
    protected boolean checkCustTransTypeForReversal()
    {
        return (this.TransType == LedgerTransType::ExchAdjustment ||
            this.TransType == LedgerTransType::AdvanceAdjustment_RU ||
            this.TransType == LedgerTransType::Interest ||
            this.TransType == LedgerTransType::CollectionLetter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks <c>CustTrans</c> on being reversible.
    /// </summary>
    /// <param name = "_custTrans">Current <c>CustTrans</c> table buffer.</param>
    /// <returns>true if input parameter can be reversed; otherwise, false.</returns>
    public static boolean checkReversal(CustTrans _custTrans)
    {
        boolean ret = false;
        CustTransDetails custTransDetails = new CustTransDetails(_custTrans);
        TransactionReversalTrans transactionReversalTrans;
        CustTransOpen custTransOpen;
        VendTrans vendTrans;

        custTransDetails.setCustVendTrans(_custTrans);
        transactionReversalTrans = TransactionReversalTrans::findTransactionReversalTrans(tableNum(CustTrans), _custTrans.RecId);

        if (_custTrans.SettleAmountCur)
        {
            if (transactionReversalTrans.Reversed)
            {
                ret = true;
            }
        }
        else
        {
            if (!transactionReversalTrans.Reversed || transactionReversalTrans.Original)
            {
                ret = true;
            }
        }

        if (_custTrans.BillOfExchangeID ||
            _custTrans.checkCustTransTypeForReversal() ||
            !_custTrans.Approved ||
            _custTrans.BankLCExportLine != 0)
        {
            ret = false;
        }

        if (ret)
        {
            custTransOpen = _custTrans.transOpen();
            ret = !SpecTrans::existByRef(custTransOpen.company(), tableNum(CustTransOpen), custTransOpen.RecId);
        }

        if (ret)
        {
            ret = _custTrans.CustVendTrans::checkMultiTransByVoucherDate();
        }

        if (ret)
        {
            // if there is a custTrans on the same voucher and it is settled, do not allow reversal
            select firstonly RecId, SettleAmountCur from vendTrans
                where vendTrans.Voucher == _custTrans.Voucher
                   && vendTrans.TransDate == _custTrans.TransDate;

            if (vendTrans.RecId && (vendTrans.SettleAmountCur != 0))
            {
                // check if the settled amount is set because it was reversed
                if (!transactionReversalTrans.Reversed)
                {
                    ret = false;
                }
            }
        }

        if (ret && CustTrans::isCashRegisterTrans_W(_custTrans))
        {
            ret = false;
        }

        if (ret)
        {
            TAMDeductionUpdateHistory tamDeductionUpdateHistory;
            select firstonly tamDeductionUpdateHistory
                where tamDeductionUpdateHistory.CustTransRecId == _custTrans.RecId;
            if (tamDeductionUpdateHistory.TAMDeductionUpdateType == TAMDeductionUpdateType::Deny)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCashRegisterTrans_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks <c>CustTrans</c> on being cash register transaction.
    /// </summary>
    /// <param name = "_custTrans">Current <c>CustTrans</c></param>
    /// <returns>True - if input parameter is cash transaction, false - otherwise.</returns>
    public static boolean isCashRegisterTrans_W(CustTrans _custTrans)
    {
        CashRegisterFiscalTrans_W cashRegisterFiscalTrans = CashRegisterFiscalTrans_W::findCustTrans(_custTrans);
        if (cashRegisterFiscalTrans)
        {
            return CashRegisterProcessingBase::isEnabled(CashRegister_W::find(cashRegisterFiscalTrans.CashRegister).ProcessingClassId);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chkCustTransReorg</Name>
				<Source><![CDATA[
    public static boolean chkCustTransReorg(
        TableId _tableId,
        RecId _recId,
        CustAccount _custAccount)
    {
        SpecTrans specTrans;
        CustTransOpen custTransOpen;
        CustTrans custTransLocal;
        CurrencyCode currencyCodeLocal = '';
        RecId controlId;
        Voucher voucherLocal;
        boolean cfmPaymentRequestsEnabled = CFMParameters::isPaymentRequestsEnabled();

        // This is called in the context of changecompany which explains the use of curext() for SpecCompany
        while select forceselectorder crossCompany Code, Balance01 from specTrans
            where specTrans.SpecTableId == _tableId
                && specTrans.SpecRecId == _recId
                && specTrans.SpecCompany == curext()
            join AmountCur from custTransOpen
                where custTransOpen.TableId == specTrans.RefTableId
                    && custTransOpen.RecId == specTrans.RefRecId
                    && custTransOpen.DataAreaId == specTrans.RefCompany
            join CurrencyCode, AmountCur, Invoice, BillOfExchangeID, Voucher from custTransLocal
                where custTransLocal.RecId == custTransOpen.RefRecId
                    && custTransLocal.AccountNum == _custAccount
        {
            if (specTrans.Code != currencyCodeLocal)
            {
                if (currencyCodeLocal)
                {
                    return false;
                }
                currencyCodeLocal = custTransLocal.CurrencyCode;
            }
            if (custTransLocal.RecId != controlId)
            {
                if (!controlId)
                {
                    controlId = custTransLocal.RecId;
                }
                else
                {
                    return false;
                }
            }

            if (custTransLocal.Voucher != voucherLocal)
            {
                if (!voucherLocal)
                {
                    voucherLocal = custTransLocal.Voucher;
                }
                else
                {
                    return false;
                }
            }

            if (custTransOpen.AmountCur != specTrans.Balance01)
            {
                return false;
            }
        }

        if (cfmPaymentRequestsEnabled && CFMPaymentRequestTable::existByHeader(CFMPaymentRequestSourceType::CustInvoice, custTransLocal.RecId))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custEndBalanceMSTPostingProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the accounting currency customer balance for the provided posting profile through the given end date.
    /// </summary>
    /// <param name="_custAccount">
    /// The customer account.
    /// </param>
    /// <param name="_postingProfile">
    /// The posting profile.
    /// </param>
    /// <param name="_endDate">
    /// The end date range.
    /// </param>
    /// <returns>
    /// The accounting currency customer balance for the provided posting profile through the given end date.
    /// </returns>
    public static AmountMST custEndBalanceMSTPostingProfile(CustAccount _custAccount, CustPostingProfile _postingProfile, TransDate _endDate)
    {
        CustTrans custTrans;

        select sum (AmountMST) from custTrans
            where custTrans.AccountNum == _custAccount
                && custTrans.PostingProfile == _postingProfile
                && custTrans.TransDate <= _endDate;

        return custTrans.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custStartBalanceMSTPostingProfile</Name>
				<Source><![CDATA[
    public static AmountMST custStartBalanceMSTPostingProfile(CustAccount _custAccount, CustPostingProfile _postingProfile, TransDate _startDate )
    {
        CustTrans custTrans;

        select sum (AmountMST) from custTrans
            where custTrans.AccountNum == _custAccount &&
                    custTrans.PostingProfile == _postingProfile &&
                    custTrans.TransDate < _startDate;

        return custTrans.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForSubledgerJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified subledger voucher is used by a customer subledger journal
    /// transaction.
    /// </summary>
    /// <param name="_subledgerVoucher">
    /// The subledger voucher.
    /// </param>
    /// <param name="_subledgerVoucherDataAreaId">
    /// The subledger voucher data area ID.
    /// </param>
    /// <param name="_accountingDate">
    /// The accounting date.
    /// </param>
    /// <param name="_reverseExistCheck">
    /// A Boolean value that indicates whether to reverse the exist check; optional.
    /// </param>
    /// <returns>
    /// true if the subledger voucher is used by a customer subledger voucher transaction; otherwise, false.
    /// </returns>
    public static boolean existForSubledgerJournal(
        Voucher _subledgerVoucher,
        SelectableDataArea _subledgerVoucherDataAreaId,
        TransDate _accountingDate,
        boolean _reverseExistCheck = false)
    {
        CustTrans custTrans;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherLink;
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        AccountingEvent accountingEvent;
        SubledgerJournalAccountEntry subledgerJournalAccountEntry;
        SubledgerJournalEntry subledgerJournalEntry;

        changecompany(_subledgerVoucherDataAreaId)
        {
            select RecId from custTrans
                where custTrans.Voucher == _subledgerVoucher
                    && custTrans.TransDate == _accountingDate
            exists join accountingEvent
                where accountingEvent.RecId == custTrans.AccountingEvent
            exists join subledgerJournalEntry
                where subledgerJournalEntry.AccountingEvent == accountingEvent.RecId
            exists join subledgerJournalAccountEntry
                where subledgerJournalAccountEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId
            exists join generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == subledgerJournalAccountEntry.GeneralJournalAccountEntry
            exists join generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.Ledger == Ledger::current()
            exists join subledgerVoucherLink
                where subledgerVoucherLink.GeneralJournalEntry == generalJournalEntry.RecId
                    && subledgerVoucherLink.AccountingDate == custTrans.TransDate
                    && subledgerVoucherLink.Voucher == custTrans.Voucher
                    && subledgerVoucherLink.VoucherDataAreaId == custTrans.DataAreaId;

            if (_reverseExistCheck)
            {
                return custTrans == null;
            }
            else
            {
                return custTrans != null;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static CustTrans find(
        RecId _recId,
        boolean _forUpdate = false)
    {
        CustTrans custTrans;

        if (_recId)
        {
            custTrans.selectForUpdate(_forUpdate);

            select firstonly custTrans
                where custTrans.RecId == _recId;
        }

        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>CustTrans</c> record in the given company.
    /// </summary>
    /// <param name="_companyId">
    /// The company in which to look for the record.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the record to look for.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the returned <c>CustTrans</c> is selected for update; optional.
    /// </param>
    /// <returns>
    /// The <c>CustTrans</c> record.
    /// </returns>
    public static CustTrans findByCompany(
        CompanyId _companyId,
        RecId _recId,
        boolean _forupdate = false)
    {
        CustTrans custTrans;

        changecompany(_companyId)
        {
            custTrans = CustTrans::find(_recId, _forupdate);
        }

        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>CustTrans</c> record in the given company.
    /// </summary>
    /// <param name="_voucher">
    /// The <c>Voucher</c> for which to search.
    /// </param>
    /// <returns>
    /// A <c>CustTrans</c> record.
    /// </returns>
    public static CustTrans findByVoucher(
        Voucher _voucher)
    {
        CustTrans custTrans;

        if (_voucher)
        {
            select firstonly custTrans
                where custTrans.Voucher == _voucher;
        }

        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromInvoice</Name>
				<Source><![CDATA[
    public static CustTrans findFromInvoice(
        InvoiceId _invoiceId,
        CustAccount _custAccount = "",
        boolean _forUpdate = false)
    {
        CustTrans custTrans;

        custTrans.selectForUpdate(_forUpdate);

        if (_custAccount)
        {
            select firstonly custTrans
                where custTrans.Invoice == _invoiceId
                    && custTrans.AccountNum == _custAccount;
        }
        else
        {
            select firstonly custTrans
                where custTrans.Invoice == _invoiceId;
        }

        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByJournalNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>CustTrans</c> record in the given JournalBatch.
    /// </summary>
    /// <param name="_JournalNum">
    /// The <c>Journal Batch Number</c> for which to search.
    /// </param>
    /// <param name="_forUpdate">
    /// Determines whether the returned <c>CustTrans</c> is selected for update; optional.
    /// </param>
    /// <returns>
    /// A <c>CustTrans</c> record.
    /// </returns>
    internal static CustTrans findByJournalNumber(
        LedgerJournalId _JournalNum,
        boolean _forUpdate = false)
    {
        CustTrans custTrans;
        custTrans.selectForUpdate(_forUpdate);

        LedgerJournalTrans ledgerJournalTrans;

        select firstOnly custTrans
                join ledgerJournalTrans
                    where custTrans.RecId == ledgerJournalTrans.CustTransId
                        && ledgerJournalTrans.JournalNum == _JournalNum;

        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpenTransFromInvoice</Name>
				<Source><![CDATA[
    internal static CustTrans findOpenTransFromInvoice(
        InvoiceId _invoiceId,
        CustAccount _custAccount = "",
        boolean _forUpdate = false)
    {
        CustTrans custTrans;

        custTrans.selectForUpdate(_forUpdate);

        if (_custAccount)
        {
            select firstonly custTrans
                where custTrans.Invoice == _invoiceId
                    && custTrans.AccountNum == _custAccount
                    && custTrans.Closed == dateNull();
        }
        else
        {
            select firstonly custTrans
                where custTrans.Invoice == _invoiceId
                    && custTrans.Closed == dateNull();
        }

        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRefVoucher_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// To find the <c> CustTrans </c> based on given voucher.
    /// </summary>
    /// <param name="_voucher">
    /// Voucher number is used to find the record.
    /// </param>
    /// <returns>
    /// Bufer of <c> CustTrans </c>.
    /// </returns>
    public static CustTrans findRefVoucher_IN(Voucher _voucher)
    {
        CustTrans custTrans;
        CustTrans_W custTrans_W;

        if (_voucher)
        {
            select firstonly custTrans
                    where custTrans.Voucher == _voucher
                exists join custTrans_W
                    where
                      custTrans_W.AdvancePayment_IN == NoYes::Yes &&
                      CustTrans_W.CustTrans == custTrans.RecId;
        }

        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVoucherDate</Name>
				<Source><![CDATA[
    public static CustTrans findVoucherDate(
        Voucher _voucher,
        TransDate _transDate)
    {
        CustTrans custTrans;

        if (_voucher && _transDate)
        {
            select firstonly custTrans
                where custTrans.Voucher == _voucher &&
                      custTrans.TransDate == _transDate;
        }

        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVoucherDateType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>CustTrans</c> table record for a given voucher, transaction, and transaction type.
    /// </summary>
    /// <param name="_voucher">
    /// The <c>Voucher</c> to search for.
    /// </param>
    /// <param name="_transDate">
    /// The <c>TransDate</c> to search for.
    /// </param>
    /// <param name="_transType">
    /// The <c>TransType</c> to search for.
    /// </param>
    /// <returns>
    /// Returns a <c>CustTrans</c> table record if found.
    /// </returns>
    public static CustTrans findVoucherDateType(
        Voucher _voucher,
        TransDate _transDate,
        LedgerTransType _transType)
    {
        CustTrans custTrans;

        if (_voucher && _transDate)
        {
            select firstonly custTrans
                where custTrans.Voucher == _voucher &&
                      custTrans.TransDate == _transDate &&
                      custTrans.TransType == _transType;
        }

        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLCRelatedTransToBeReversed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether there is any Letter of Credit-related <c>CustTrans</c> to reverse.
    /// </summary>
    /// <param name="_custTable">
    /// The customer to check.
    /// </param>
    /// <returns>
    /// true if there is a Letter of Credit-related <c>CustTrans</c> record to reverse; otherwise, false.
    /// </returns>
    public static boolean hasLCRelatedTransToBeReversed(CustTable _custTable)
    {
        boolean ret = false;
        SpecTrans specTransLocal;
        CustSettlement custSettlementLocal;
        CustTrans custTransLocal;

        if (BankLCExportFeatureChecker::checkBankLCExportEnabled())
        {
            select firstonly RecId from specTransLocal
                where specTransLocal.SpecCompany == _custTable.company()
                    && specTransLocal.SpecTableId == _custTable.TableId
                    && specTransLocal.SpecRecId == _custTable.RecId
                exists join RecId from custSettlementLocal
                    where custSettlementLocal.TableId == specTransLocal.RefTableId
                        && custSettlementLocal.RecId == specTransLocal.RefRecId
                exists join RecId from custTransLocal
                    where custTransLocal.RecId == custSettlementLocal.TransRecId
                        && custTransLocal.AccountNum == custSettlementLocal.AccountNum
                        && custTransLocal.DataAreaId == custSettlementLocal.TransCompany
                        && custTransLocal.BankLCExportLine != 0;
            if (specTransLocal.RecId != 0)
            {
                // Letter of Credit related transaction could not be reversed.
                checkFailed("@SYS321799");
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustBalance</Name>
				<Source><![CDATA[
    public static AmountMST initCustBalance(CustVendAC _custVendAC)
    {
        CustTrans custTrans;

        select sum (AmountMST) from custTrans
            where custTrans.AccountNum == _custVendAC;

        return custTrans.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrFindFromVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>CustTrans</c> record based on the passed parameters.
    /// </summary>
    /// <param name="_voucher">
    /// The <c>Voucher</c> object used to find the appropriate <c>CustTrans</c> record.
    /// </param>
    /// <param name="_custAccount">
    /// The customer's account number used to find the appropriate <c>CustTrans</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean that determines whether to select the record for update.
    /// </param>
    /// <returns>
    /// The <c>CustTrans</c> record found from the passed parameters.
    /// </returns>
    public static CustTrans mcrFindFromVoucher(
        Voucher _voucher,
        CustAccount _custAccount = "",
        boolean _forUpdate = false)
    {
        CustTrans custTrans;

        custTrans.selectForUpdate(_forUpdate);

        if (_custAccount)
        {
            select firstonly custTrans
                where custTrans.Voucher == _voucher
                && custTrans.AccountNum == _custAccount;
        }
        else
        {
            select firstonly custTrans
                where custTrans.Voucher == _voucher;
        }

        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepaymentTrans_RU</Name>
				<Source><![CDATA[
    public static RecordSortedList prepaymentTrans_RU(CustTrans _originalCustTrans, RecordSortedList _recordSortedList = null)
    {
        RecordSortedList rsl;
        CustVendTransPostingLog_RU custVendTransPostingLog;
        CustTrans custTrans;

        if (! _recordSortedList)
        {
            rsl = new RecordSortedList(tableNum(CustTrans));
            rsl.sortOrder(fieldNum(CustTrans, RecId));
        }
        else
        {
            rsl = _recordSortedList;
        }

        rsl.ins(_originalCustTrans);

        if (_originalCustTrans.Correct)
        {
            while select custTrans
                where custTrans.AccountNum == _originalCustTrans.AccountNum &&
                      custTrans.TransDate == _originalCustTrans.TransDate &&
                      custTrans.Voucher == _originalCustTrans.Voucher &&
                      custTrans.Correct == NoYes::No
            {
                if (rsl.find(custTrans))
                    continue;

                rsl = CustTrans::prepaymentTrans_RU(custTrans, rsl);
            }
        }
        else
        {
            while select TransRecId from custVendTransPostingLog
                where custVendTransPostingLog.OffSetRecId == _originalCustTrans.RecId &&
                      custVendTransPostingLog.PostingLogType == CustVendTransPostingLogType_RU::Prepayment &&
                      custVendTransPostingLog.RefTableId == _originalCustTrans.TableId
            {
                custTrans = CustTrans::find(custVendTransPostingLog.TransRecId);
                rsl = CustTrans::prepaymentTrans_RU(custTrans, rsl);
            }
        }

        return rsl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTransact</Name>
				<Source><![CDATA[
    public static boolean reverseTransact(
        Common _common,
        LedgerVoucher _parentLedgerVoucher = null,
        SettleDatePrinc _datePrinciple = SettleDatePrinc::DateOfPayment,
        TransDate _saveDate = dateNull(),
        boolean _useDatePrinciple = true,
        Voucher _paymentVoucher = '',
        boolean _shouldDecrementMandateUsageCount = false)
    {
        LedgerVoucher reversalLedgerVoucher;
        CustReversePosting custReversePosting;
        LedgerVoucherGroup ledgerVoucherGroup;
        SettleDatePrinc datePrinciple;
        #ISOCountryRegionCodes
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        TransDate transDate = CustTrans::reverseTransactDetermineTransDate(_common, _datePrinciple, _saveDate);
        str account = CustTrans::reverseTransactDetermineAccount(_common);

        ttsbegin;

        ledgerVoucherGroup = LedgerVoucherGroup::construct();

        custReversePosting = CustVendReversePosting::construct(_common, ledgerVoucherGroup);
        custReversePosting.parmTransDate(transDate);
        custReversePosting.parmShouldDecrementMandateUsageCount(_shouldDecrementMandateUsageCount);
        if (! TaxParameters::find().ReverseSettlementDatePrinciple_W
         && ! countryRegion_RU)
        {
            custReversePosting.parmDatePrinciple(_datePrinciple);
        }
        if (countryRegion_RU)
        {
            datePrinciple = custReversePosting.parmDatePrinciple();
        }
        if (_parentLedgerVoucher != null)
        {
            custReversePosting.parmParentVoucher(_parentLedgerVoucher.lastVoucher());
        }
        if (countryRegion_RU &&
            ! _useDatePrinciple)
        {
            custReversePosting.parmDatePrinciple(_datePrinciple);
            custReversePosting.parmSaveDate_W(_saveDate);
        }

        if (BrazilParameters::isEnabled())
        {
            custReversePosting.parmPaymentVoucher_BR(_paymentVoucher);
        }

        custReversePosting.updateNow();
        if (countryRegion_RU)
        {
            custReversePosting.parmDatePrinciple(datePrinciple);
        }

        // Validate and post the ledger voucher group for reverse settlement
        ledgerVoucherGroup.end();

        if (countryRegion_RU)
        {
            CustVendReversePostingLog_RU::createTransLink(custReversePosting.parmReversePostingLogSet_RU());
        }

        // if the _parentLedgerVoucher was passed is not null this means that this reversal is being done in the
        // same database transactions as the some other transaction, and these transaction must be linked.
        // The _parentLedgerVoucher is null this means that the reversal is not being done as part of a larger
        // transaction, this is not an error.
        if (_parentLedgerVoucher != null && _parentLedgerVoucher.parmCompanyId() == curext())
        {
            reversalLedgerVoucher = ledgerVoucherGroup.findLedgerVoucher(curext(), custReversePosting.findNumberSequenceCodeByCompany(curext()));

            if (reversalLedgerVoucher != null)
            {
                reversalLedgerVoucher.createVoucherLinks(_parentLedgerVoucher.lastVoucher(), _parentLedgerVoucher.lastTransDate());
            }
        }

        TransactionLog::create(TransactionLogType::CustTransEdit, strFmt("@SYS70279", account));
        ledgerVoucherGroup.createTransactionLog(TransactionLogType::CustTransEdit, "@SYS91317");

        ttscommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTransactDetermineAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the account for the reverse transaction.
    /// </summary>
    /// <param name = "_common">The buffer that will be reversed.</param>
    /// <returns>The account for the buffer that will be reversed.</returns>
    protected static str reverseTransactDetermineAccount(Common _common)
    {
        str ret;

        switch (_common.TableId)
        {
            case tableNum(CustTable) :
                CustTable custTable = _common;
                ret = custTable.AccountNum;
                break;

            case tableNum(LedgerJournalTrans) :
                LedgerJournalTrans ledgerJournalTrans = _common;
                ret = ledgerJournalTrans.parmAccount();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTransactDetermineTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the transaction date for the reverse transaction.
    /// </summary>
    /// <param name = "_common">The buffer that will be reversed.</param>
    /// <param name = "_datePrinciple">The date principle.</param>
    /// <param name = "_saveDate">The save date.</param>
    /// <returns>The transaction date for the reversed transaction.</returns>
    protected static TransDate reverseTransactDetermineTransDate(
        Common _common,
        SettleDatePrinc _datePrinciple = SettleDatePrinc::DateOfPayment,
        TransDate _saveDate = dateNull())
    {
        TransDate ret;

        switch (_common.TableId)
        {
            case tableNum(CustTable) :
                CustTable custTable = _common;
                ret = custTable.getSettleDate(_datePrinciple, _saveDate);
                break;

            case tableNum(LedgerJournalTrans) :
                LedgerJournalTrans ledgerJournalTrans = _common;
                ret = ledgerJournalTrans.TransDate;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Settles customer invoices and payments.
    /// </summary>
    /// <param name = "_specTransExecutionContext">Used to identify and process marked invoices and payments.</param>
    /// <param name = "_parameters">Used for additional settlement parameters.</param>
    /// <returns>True</returns>
    public static boolean settleTransaction(
        SpecTransExecutionContext _specTransExecutionContext,
        CustTransSettleTransactionParameters _parameters)
    {
        boolean settleTransactionResult;

        CustTrans::logSettleTransaction();

        if (!CustTransSettleTransactionFeature::isEnabled())
        {
            _specTransExecutionContext.transferSpecContextToSourceContext();

            settleTransactionResult = CustTrans::settleTransact(
                _specTransExecutionContext.parmSource(),
                _parameters.ledgerVoucher,
                _parameters.balancePostingProfile,
                _parameters.saveDatePrinciple,
                _parameters.saveDate,
                _parameters.dimSettlementType,
                _parameters.parentCustTrans);
        }
        else
        {
            settleTransactionResult = CustTrans::settleTransactionPrivate(
                _specTransExecutionContext.parmAccountNum(),
                _specTransExecutionContext.parmSpecContext(),
                _parameters.ledgerVoucher,
                _parameters.balancePostingProfile,
                _parameters.saveDatePrinciple,
                _parameters.saveDate,
                _parameters.dimSettlementType,
                _parameters.parentCustTrans);
        }

        return settleTransactionResult;

    }

]]></Source>
			</Method>
			<Method>
				<Name>logSettleTransaction</Name>
				<Source><![CDATA[
    private static void logSettleTransaction()
    {
        CashManagementEventSource eventSource = CashManagementEventSource::Log;
        eventSource.EventWriteCustTransSettleTransactionCalled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleTransact</Name>
				<Source><![CDATA[
    [SysObsoleteAttribute('This method is obsolete. Use CustTrans::settleTransaction instead. For more information: https://go.microsoft.com/fwlink/?linkid=2087184', false, 30\6\2020)]
    public static boolean settleTransact(
        CustTable _custTable,
        LedgerVoucher _ledgerVoucher = null,
        boolean _balancePostingProfile = true,
        SettleDatePrinc _saveDatePrinciple = SettleDatePrinc::DateOfPayment,
        TransDate _saveDate = dateNull()
        ,DimSettlementType_RU _dimSettlementType = DimSettlementType_RU::None
        ,CustTrans _parentCustTrans = null)
    {
        CustTrans::logSettleTransact();

        return CustTrans::settleTransactionPrivate(
            _custTable.AccountNum, 
            _custTable, 
            _ledgerVoucher, 
            _balancePostingProfile, 
            _saveDatePrinciple, 
            _saveDate, 
            _dimSettlementType, 
            _parentCustTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleTransactionPrivate</Name>
				<Source><![CDATA[
    private static boolean settleTransactionPrivate(        
        CustAccount _accountNum,
        Common _offsetVoucherTable,
        LedgerVoucher _ledgerVoucher = null,
        boolean _balancePostingProfile = true,
        SettleDatePrinc _saveDatePrinciple = SettleDatePrinc::DateOfPayment,
        TransDate _saveDate = dateNull(),
        DimSettlementType_RU _dimSettlementType = DimSettlementType_RU::None,
        CustTrans _parentCustTrans = null)
    {
        #OCCRetryCount
        LedgerVoucher ledgerVoucher = _ledgerVoucher;
        CustTrans custTrans;
        CustTransData custTransData;

        try
        {
            ttsbegin;

            custTransData = custTrans.transData();
            // set the datePrinciple and selected date variable before calling updateOffsetVoucher.
            // These variables are used in the updateOffsetVoucher method.
            custTransData.parmDatePrinciple(_saveDatePrinciple);
            custTransData.parmSelectedDate(_saveDate);
            custTransData.updateOffsetVoucher(
                SettlementType::SelectedTransact,
                ledgerVoucher,
                _offsetVoucherTable,
                _balancePostingProfile,
                _dimSettlementType,
                _parentCustTrans);

            TransactionLog::create(TransactionLogType::CustTransEdit, strFmt("@SYS70279", _accountNum));

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logSettleTransact</Name>
				<Source><![CDATA[
    private static void logSettleTransact()
    {
        //CustTrans::settleTransact is obsolete.
        Debug::assert(true);

        CashManagementEventSource eventSource = CashManagementEventSource::Log;
        eventSource.EventWriteCustTransSettleTransactCalled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>openOriginalInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the original invoice form based on the transaction type.
    /// </summary>
    public void openOriginalInvoice(Object caller)
    {
        var args = new Args(caller);

        switch (this.TransType)
        {
            case LedgerTransType::CollectionLetter:
                args.record(CustCollectionLetterJour::find(this.lastUpdatedCollectionLetter().LastCollectionLetterNum, this.AccountNum));
                args.menuItemName(menuItemDisplayStr(CustCollectionLetterNoteAction));
                break;

            case LedgerTransType::Interest:
                args.record(CustInterestJour::findByVoucher(this.AccountNum, this.Voucher, this.TransDate));
                args.menuItemName(menuItemDisplayStr(CustInterestNoteAction));
                break;

            case LedgerTransType::Cust:
                args.record(CustInvoiceTable::findPostedInvoice(this.AccountNum, this.Invoice, this.TransDate));
                args.menuItemName(menuItemDisplayStr(CustFreeInvoice));
                break;

            case LedgerTransType::Sales:
                args.record(CustInvoiceJour::findFromCustTrans(this.Invoice, this.TransDate, this.AccountNum));
                args.menuItemName(menuItemDisplayStr(CustInvoiceJournal_Action));
                break;

            case LedgerTransType::Project:
                args.record(ProjInvoiceJour::find(this.Invoice, this.TransDate));
                args.menuItemName(menuItemDisplayStr(ProjInvoiceJournal));
                break;

            case LedgerTransType::Transfer ,LedgerTransType::None:
                args.record(LedgerJournalTrans::findJournalForVoucher(this.Voucher, this.TransDate));
                args.menuItemName(menuItemDisplayStr(LedgerJournalTable3CustOpenInvListPg));
                break;

            default:
                break;
        }

        if (args.menuItemName())
        {
            MenuFunction::runCalled(args.menuItemName(), MenuItemType::Display, false, args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        if (CustPaymModeTable::find(this.PaymMode).IsSEPA
            && this.AmountCur >= 0)
        {
            CustDirectDebitMandate::validateMandate(this.DirectDebitMandate, true, true, true, this);
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>countOpenTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the custTransOpen RecId based on the AccountNum and RecId of the CustTrans
    /// </summary>
    /// <returns>
    /// Returns the RecId of the custTransOpenTable.
    /// </returns>
    public int64 countOpenTrans()
    {
        CustTransOpen custTransOpen;
        
        select count(RecId) from custTransOpen
            where custTransOpen.RefRecId == this.RecId
                && custTransOpen.AccountNum == this.AccountNum;
        
        return custTransOpen.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>agedByTransactionDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Aged by transaction due date.
    /// </summary>
    /// <param name = "_agedBy">Identifies how the aging was determined.</param>
    /// <returns>The aging transaction due date.</returns>
    public TransDate agedByTransactionDueDate(DateTransactionDuedate _agedBy)
    {
        TransDate transactionAgeDate;

        switch (_agedBy)
        {
            case DateTransactionDuedate::DocumentDate:
                transactionAgeDate = this.DocumentDate;
                break;

            case DateTransactionDuedate::DueDate:
                transactionAgeDate = this.DueDate;
                break;

            case DateTransactionDuedate::TransactionDate:
                transactionAgeDate = this.TransDate;
                break;
        }

        return transactionAgeDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTransInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CustVendTransInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>The <c>CustVendTransInterface</c> object.</returns>
    public CustVendTransInterface custVendTransInterface()
    {
        return this.CustVendTrans::custVendTransInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deEcritureLib_FR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the text from the transaction.
    /// </summary>
    /// <returns>
    /// A text from <c>CustTrans</c> record if found, or from connected <c>TransactionLog</c> record if found, or N/A.
    /// </returns>
    /// <remarks>
    /// This method is used for Data Export for France.
    /// </remarks>
    public display TransTxt deEcritureLib_FR()
    {
        TransTxt txt = this.Txt ? this.Txt : TransactionLog::find(this.createdTransactionId).Txt;

        return txt ? txt : "@SYS180118";
    }

]]></Source>
			</Method>
			<Method>
				<Name>deJournalLib_FR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the type from connected <c>TransactionLog</c> record in French.
    /// </summary>
    /// <returns>
    /// The string containing a transaction type.
    /// </returns>
    /// <remarks>
    /// This method is used for Data Export for France.
    /// </remarks>
    public display TransTxt deJournalLib_FR()
    {
        TransTxt ret;

        LedgerJournalTrans ledgerJournalTrans = LedgerJournalTrans::findJournalForVoucher(this.Voucher, this.TransDate);

        if (ledgerJournalTrans)
        {
            LedgerJournalTable ledgerJournalTable = LedgerJournalTable::find(ledgerJournalTrans.JournalNum);
            if (ledgerJournalTable)
            {
                ret = ledgerJournalTable.ledgerJournalName().Name;
            }
        }

        if (!ret)
        {
            if (this.TransType)
            {
                ret = SysLabel::labelId2String(new DictEnum(enumNum(LedgerTransType)).index2LabelId(this.TransType), 'fr');
            }
            else
            {
                ret = SysLabel::labelId2String(new DictEnum(enumNum(TransactionLogType)).index2LabelId(TransactionLog::find(this.createdTransactionId).Type), 'fr');
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deLedgerAccount_FR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays Ledger account in a format for GDPdU export.
    /// </summary>
    /// <returns>
    /// A ledger account if it doesn't have financial dimensions set,
    /// otherwise ledger account with financial dimensions split by dimensions separator.
    /// </returns>
    /// <remarks>
    /// This method is used for Data Export for France.
    /// </remarks>
    public display LedgerAccount deLedgerAccount_FR()
    {
        return LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(
            CustLedgerAccounts::summaryLedgerDimension(this.AccountNum, this.PostingProfile, false));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deLedgerAccountName_FR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays Ledger account name in a format for GDPdU export.
    /// </summary>
    /// <returns>
    /// A ledger account name.
    /// </returns>
    /// <remarks>
    /// This method is used for Data Export for France.
    /// </remarks>
    public display AccountName deLedgerAccountName_FR()
    {
        return MainAccount::findByMainAccountId(this.deLedgerAccount_FR()).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateThirdPartyBankAccountId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates third party bank account id.
    /// </summary>
    /// <returns>
    ///     true if the bank account exists for the customer; otherwise, false.
    /// </returns>
    protected boolean validateThirdPartyBankAccountId()
    {
        return CustBankAccount::checkBankAccountReference(this.AccountNum, this.ThirdPartyBankAccountId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingCombinedExchangeRate</Name>
				<Source><![CDATA[
    internal ReportingCurrencyExchRate getReportingCombinedExchangeRate()
    {
        return this.custVendTransInterface().getReportingCombinedExchangeRate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingExchangeRate1</Name>
				<Source><![CDATA[
    internal ReportingCurrencyExchRate getReportingExchangeRate1()
    {
        return this.custVendTransInterface().getReportingExchangeRate1();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingExchangeRate2</Name>
				<Source><![CDATA[
    internal ReportingCurrencyExchRate getReportingExchangeRate2()
    {
        return this.custVendTransInterface().getReportingExchangeRate2();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExchangeHelperReportingExchRate</Name>
				<Source><![CDATA[
    internal void setExchangeHelperReportingExchRate(CurrencyExchangeHelper _currencyHelper)
    {
        this.custVendTransInterface().setExchangeHelperReportingExchRate(_currencyHelper);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS125119</DeveloperDocumentation>
	<FormRef>CustTrans</FormRef>
	<Label>@SYS6077</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>Voucher</TitleField1>
	<TitleField2>TransDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>AccountDateIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<CreatedTransactionId>Yes</CreatedTransactionId>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ModifiedTransactionId>Yes</ModifiedTransactionId>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustTrans_W</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustTrans_W</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustDispute</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustDispute</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustSettlement</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustSettlement</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustTransIdRef</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustTransIdRef</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>LedgerCov</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LedgerCov</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettleAmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashPayment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ControlNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Interest</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetRecid</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedExchRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Agreement_RU</Name>
			<Label>@SYS332501</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>agreementId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>agreementDocumentTitle_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS12227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchRateSecond</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportingCurrencyAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportingCurrencyCrossRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportingCurrencyExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportingCurrencyExchRateSecondary</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Bank</Name>
			<Label>@SYS22173</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompanyBankAccountId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ThirdPartyBankAccountId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BankLCExportGroup</Name>
			<Label>@SYS316286</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankLCExportLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BillingClassification</Name>
			<Label>@SPS337</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustBillingClassification</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BillOfExchange</Name>
			<Label>@SYS69795</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BillOfExchangeID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BillOfExchangeSeqNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BillOfExchangeStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankRemittanceFileId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CaseMoreInformation</Name>
			<Label>@SYS314356</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettleAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CashDiscount</Name>
			<Label>@SYS4376</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashDiscCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CollectionLetter</Name>
			<Label>@SYS13960</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CollectionLetter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CollectionLetterCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Consession</Name>
			<Label>@RET1007</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustomerTransactions</Name>
			<Label>@SYS6077</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustTransReferenceVoucher_IN</Name>
			<Label>@GLS222673</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS342338</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Document</Name>
			<Label>@SYS101280</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExchangeAdjustment</Name>
			<Label>@SYS55328</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustExchAdjustmentUnrealized</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustExchAdjustmentRealized</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchAdjustment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportingExchAdjustmentRealized</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportingExchAdjustmentUnrealized</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchAdjustmentReporting</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExchangeRates</Name>
			<Label>@SYS55328</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LastExchAdj</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastExchAdjVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastExchAdjRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastExchAdjRateReporting</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoice</Name>
			<Label>@SYS12128</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Invoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Approver</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Approved</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxInvoiceSalesId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Ledger</Name>
			<Label>@SYS13356</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Correct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MCRCustCredit</Name>
			<Label>@MCR25230</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MCRPaymOrderID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Misc</Name>
			<Label>@SYS73543</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSpec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymReference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Prepayment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CancelledPayment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankCentralBankPurposeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankCentralBankPurposeText</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DirectDebitMandate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSchedId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymMan</Name>
			<Label>@SYS57540</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Project</Name>
			<Label>@SYS80304</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceProject</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reason</Name>
			<Label>@SYS107174</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReasonRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Retail</Name>
			<Label>@RET4572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetailCustTrans</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailStoreId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailTerminalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailTransactionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Settlement</Name>
			<Label>@SYS10163</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SettleAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettleAmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastSettleVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastSettleAccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastSettleCompany</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastSettleDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Settlement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettleAmountReporting</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SettlementStatus</Name>
			<Label>@SYS21685</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Closed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfileClose</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustAutomation</Name>
			<Label>@CustAutomation:Automation</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustAutomationExclude</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAutomationPredunningSent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAutomationPredictionSent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CFDI_MX</Name>
			<Label>@Mexico:EInvoice_CFDITableGroup</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SettleAmount_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfileClose</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPostingProfile</ExtendedDataType>
			<HelpText>@AccountsReceivable:PostingProfileClose_HelpText</HelpText>
			<Label>@SYS18742</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AccountingEvent</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCurDebCred</ExtendedDataType>
			<CorrectionFlagField>Correct</CorrectionFlagField>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountMST</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMSTDebCred</ExtendedDataType>
			<HelpText>@AccountsReceivable:AmountMST_HelpText</HelpText>
			<CorrectionFlagField>Correct</CorrectionFlagField>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Approved</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Approved</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Approver</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>HcmApprover</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankCentralBankPurposeCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>NO</CountryRegionCodes>
			<ExtendedDataType>BankCentralBankPurposeCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankCentralBankPurposeText</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>NO</CountryRegionCodes>
			<ExtendedDataType>BankCentralBankPurposeText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankLCExportLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankLCLineRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankRemittanceFileId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankRemittanceFileIdCust</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BillOfExchangeID</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustBillOfExchangeID</ExtendedDataType>
			<HelpText>@AccountsReceivable:BillOfExchangeID_HelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>BillOfExchangeSeqNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendNegInstSeqNum</ExtendedDataType>
			<HelpText>@AccountsReceivable:BillOfExchangeSeqNum_HelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BillOfExchangeStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustBillOfExchangeStatus</ExtendedDataType>
			<EnumType>CustVendNegInstStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CancelledPayment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Cancelled</ExtendedDataType>
			<Label>@SYS85760</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CashDiscCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CashDiscCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CashDiscBaseDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CashDiscBaseDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CashPayment</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS24551</Label>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>Closed</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<HelpText>@AccountsReceivable:Closed_HelpText</HelpText>
			<Label>@SYS22065</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CollectionLetter</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>CustCollectionLetter</ConfigurationKey>
			<HelpText>@AccountsReceivable:CollectionLetter_HelpText</HelpText>
			<Label>@SYS13960</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CollectionLetterCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@AccountsReceivable:ValidCollectionLetterCode_HelpText</HelpText>
			<Label>@SYS75418</Label>
			<EnumType>CustCollectionLetterCode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompanyBankAccountId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
			<GroupPrompt>@SYS13342</GroupPrompt>
			<HelpText>@AccountsReceivable:CompanyBankAccountId_HelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ControlNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LogisticsBasic</ConfigurationKey>
			<ExtendedDataType>Num</ExtendedDataType>
			<Label>@SYS24557</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Correct</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Correct</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustBillingClassification</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@AccountsReceivable:BillingClassification_HelpText</HelpText>
			<Label>@SPS371</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CustExchAdjustmentRealized</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustExchAdjustmentRealized</ExtendedDataType>
			<HelpText>@AccountsReceivable:CustExchAdjustmentRealized_HelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CustExchAdjustmentUnrealized</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustExchAdjustmentUnrealized</ExtendedDataType>
			<HelpText>@AccountsReceivable:CustExchAdjustmentUnrealized_HelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryMode</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustDlvModeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DirectDebitMandate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustDirectDebitMandateRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DocumentDate</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocumentDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocumentNum</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocumentNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DueDate</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DueDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EUROTriangulation</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EUROTriangulation</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchAdjustment</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustExchAdjustment</ExtendedDataType>
			<HelpText>@AccountsReceivable:ExchAdjustment_HelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchAdjustmentReporting</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustExchAdjustment</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchRate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExchRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchRateSecond</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExchrateSecondary</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FixedExchRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FixedExchRate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Interest</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustInterestCalculate</ExtendedDataType>
			<HelpText>@AccountsReceivable:Interest_HelpText</HelpText>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Invoice</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InvoiceProject</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<IsObsolete>Yes</IsObsolete>
			<Label>@SYS50055</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LastExchAdj</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS128752</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LastExchAdjRate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExchRate</ExtendedDataType>
			<Label>@SYS98723</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LastExchAdjRateReporting</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyExchangeRate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LastExchAdjVoucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Label>@SYS98724</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LastSettleAccountNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Label>@SYS107392</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LastSettleCompany</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyId</ExtendedDataType>
			<Label>@SYS107393</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LastSettleDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS22069</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LastSettleVoucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Label>@SYS22848</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRPaymOrderID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRPaymOrderId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OffsetRecid</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustTransRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Label>@SYS22016</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU,IN,JP,BR</CountryRegionCodes>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymId</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymId</ExtendedDataType>
			<HelpText>@AccountsReceivable:PaymId_HelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PaymMethod</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS828</Label>
			<EnumType>NetCurrent</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymMode</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPaymMode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymReference</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPaymReference</ExtendedDataType>
			<HelpText>@AccountsReceivable:PaymReference_HelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymSpec</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPaymSpec</ExtendedDataType>
			<HelpText>@AccountsReceivable:PaymSpec_HelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPostingProfile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Prepayment</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@AccountsReceivable:Prepayment_HelpText</HelpText>
			<Label>@SYS59473</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReasonRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ReasonRefRecID</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReportingCurrencyAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMSTSecondary</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReportingCurrencyExchRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReportingCurrencyExchRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReportingCurrencyExchRateSecondary</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReportingCurrencyExchRateSecondary</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReportingCurrencyCrossRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyExchangeRate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReportingExchAdjustmentRealized</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustExchAdjustmentRealized</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReportingExchAdjustmentUnrealized</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustExchAdjustmentUnrealized</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RetailCustTrans</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCustTrans</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailStoreId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailTerminalId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTerminalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailTransactionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTransactionId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SettleAmountCur</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS13383</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SettleAmountMST</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS11660</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SettleAmountReporting</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMSTSecondary</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Settlement</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustAutoSettlement</ExtendedDataType>
			<HelpText>@AccountsReceivable:Settlement_HelpText</HelpText>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxInvoiceSalesId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>MX</CountryRegionCodes>
			<ExtendedDataType>TaxInvoiceSalesId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ThirdPartyBankAccountId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankThirdPartyAccountId</ExtendedDataType>
			<GroupPrompt>@SYS302</GroupPrompt>
			<HelpText>@AccountsReceivable:ThirdPartyBankAccountId_HelpText</HelpText>
			<Label>@SYS88297</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@AccountsReceivable:TransType_HelpText</HelpText>
			<EnumType>LedgerTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Txt</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransactionTextLarge</ExtendedDataType>
			<HelpText>@AccountsReceivable:Txt_HelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<HelpText>@AccountsReceivable:Voucher_HelpText</HelpText>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymSchedId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymSchedId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymTermId</Name>
			<ExtendedDataType>PaymTermId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CustAutomationExclude</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@CustAutomation:ExcludeFromAutomation</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CustAutomationPredunningSent</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CustAutomationPredictionSent</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SettleAmount_MX</Name>
			<CountryRegionCodes>MX</CountryRegionCodes>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<FeatureClass>IncludeOnlyPPDAmountsInSettlementTotal_MXFeature</FeatureClass>
			<HelpText>@MexicoCFDI:SettleAmountHelp</HelpText>
			<Label>@SYS11660</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InvoiceAccountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Invoice</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FK_DimensionAttributeValueSet_CustTrans</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AccountDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BillofExchangeStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VoucherDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BillOfExchangeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>BillOfExchangeID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PaymIdDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>PaymId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustBillingClassificationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CustBillingClassification</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ClosedDateAccountNum</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Closed</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CompanyAccount</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InvoiceAccountDateVoucher</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Invoice</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RetailTransactionIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>RetailTransactionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>MCRPaymOrderIDIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>MCRPaymOrderID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PaymReferenceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>PaymReference</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>MCRPaymOrderIdInvoiceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>MCRPaymOrderID</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Invoice</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RetailTransactionId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InvoiceTransFilterIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>AmountMST</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DataAreaId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AccountingEventIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountingEvent</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CustVendTrans</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccountingEvent</MapField>
					<MapFieldTo>AccountingEvent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AccountNum</MapField>
					<MapFieldTo>AccountNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AmountCur</MapField>
					<MapFieldTo>AmountCur</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AmountMST</MapField>
					<MapFieldTo>AmountMST</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Approved</MapField>
					<MapFieldTo>Approved</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Approver</MapField>
					<MapFieldTo>Approver</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Arrival</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankCentralBankPurposeCode</MapField>
					<MapFieldTo>BankCentralBankPurposeCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankCentralBankPurposeText</MapField>
					<MapFieldTo>BankCentralBankPurposeText</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankLCLine</MapField>
					<MapFieldTo>BankLCExportLine</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankRemittanceFileId</MapField>
					<MapFieldTo>BankRemittanceFileId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CancelledPayment_JP</MapField>
					<MapFieldTo>CancelledPayment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscBaseDate</MapField>
					<MapFieldTo>CashDiscBaseDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscCode</MapField>
					<MapFieldTo>CashDiscCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Closed</MapField>
					<MapFieldTo>Closed</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CompanyBankAccountId</MapField>
					<MapFieldTo>CompanyBankAccountId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Correct</MapField>
					<MapFieldTo>Correct</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustBillingClassification</MapField>
					<MapFieldTo>CustBillingClassification</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustVendNegInstId_JP</MapField>
					<MapFieldTo>BillOfExchangeID</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DataArea</MapField>
					<MapFieldTo>DataAreaId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentDate</MapField>
					<MapFieldTo>DocumentDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentNum</MapField>
					<MapFieldTo>DocumentNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DueDate</MapField>
					<MapFieldTo>DueDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EPPaymentType_BR</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EPPaymentWay_BR</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EUROTriangulation</MapField>
					<MapFieldTo>EUROTriangulation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchAdjustment</MapField>
					<MapFieldTo>ExchAdjustment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchAdjustmentRealized</MapField>
					<MapFieldTo>CustExchAdjustmentRealized</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchAdjustmentReporting</MapField>
					<MapFieldTo>ExchAdjustmentReporting</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchAdjustmentUnrealized</MapField>
					<MapFieldTo>CustExchAdjustmentUnrealized</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRate</MapField>
					<MapFieldTo>ExchRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRateSecond</MapField>
					<MapFieldTo>ExchRateSecond</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FixedExchRate</MapField>
					<MapFieldTo>FixedExchRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Invoice</MapField>
					<MapFieldTo>Invoice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceProject</MapField>
					<MapFieldTo>InvoiceProject</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceReleaseDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LastExchAdj</MapField>
					<MapFieldTo>LastExchAdj</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LastExchAdjRate</MapField>
					<MapFieldTo>LastExchAdjRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LastExchAdjRateReporting</MapField>
					<MapFieldTo>LastExchAdjRateReporting</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LastExchAdjVoucher</MapField>
					<MapFieldTo>LastExchAdjVoucher</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LastSettleAccountNum</MapField>
					<MapFieldTo>LastSettleAccountNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LastSettleCompany</MapField>
					<MapFieldTo>LastSettleCompany</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LastSettleDate</MapField>
					<MapFieldTo>LastSettleDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LastSettleVoucher</MapField>
					<MapFieldTo>LastSettleVoucher</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Mandate</MapField>
					<MapFieldTo>DirectDebitMandate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRPaymOrderID</MapField>
					<MapFieldTo>MCRPaymOrderID</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NegInstId</MapField>
					<MapFieldTo>BillOfExchangeID</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NegInstSeqNum</MapField>
					<MapFieldTo>BillOfExchangeSeqNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NegInstStatus</MapField>
					<MapFieldTo>BillOfExchangeStatus</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OffsetRecId</MapField>
					<MapFieldTo>OffsetRecid</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
					<MapFieldTo>OrderAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymId</MapField>
					<MapFieldTo>PaymId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymMode</MapField>
					<MapFieldTo>PaymMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymReference</MapField>
					<MapFieldTo>PaymReference</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymSpec</MapField>
					<MapFieldTo>PaymSpec</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymTermId</MapField>
					<MapFieldTo>PaymTermId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PostingProfile</MapField>
					<MapFieldTo>PostingProfile</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Prepayment</MapField>
					<MapFieldTo>Prepayment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReasonRefRecId</MapField>
					<MapFieldTo>ReasonRefRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReleaseDateComment</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReportingCurrencyAmount</MapField>
					<MapFieldTo>ReportingCurrencyAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReportingCurrencyCrossRate</MapField>
					<MapFieldTo>ReportingCurrencyCrossRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReportingCurrencyExchRate</MapField>
					<MapFieldTo>ReportingCurrencyExchRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReportingCurrencyExchRateSecondary</MapField>
					<MapFieldTo>ReportingCurrencyExchRateSecondary</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReportingExchAdjustmentRealized</MapField>
					<MapFieldTo>ReportingExchAdjustmentRealized</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReportingExchAdjustmentUnrealized</MapField>
					<MapFieldTo>ReportingExchAdjustmentUnrealized</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RetailCustTrans</MapField>
					<MapFieldTo>RetailCustTrans</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SettleAmountCur</MapField>
					<MapFieldTo>SettleAmountCur</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SettleAmountMST</MapField>
					<MapFieldTo>SettleAmountMST</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SettleAmountReporting</MapField>
					<MapFieldTo>SettleAmountReporting</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SettleAmount_MX</MapField>
					<MapFieldTo>SettleAmount_MX</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Settlement</MapField>
					<MapFieldTo>Settlement</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SettleTax1099Amount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SettleTax1099StateAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Tax1099Amount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Tax1099Fields</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Tax1099RecId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Tax1099State</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Tax1099StateAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxInvoiceId</MapField>
					<MapFieldTo>TaxInvoiceSalesId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ThirdPartyBankAccountId</MapField>
					<MapFieldTo>ThirdPartyBankAccountId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransType</MapField>
					<MapFieldTo>TransType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Txt</MapField>
					<MapFieldTo>Txt</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendPaymentGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Voucher</MapField>
					<MapFieldTo>Voucher</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PaymModeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PaymMode</MapField>
					<MapFieldTo>PaymMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymSpec</MapField>
					<MapFieldTo>PaymSpec</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AccountingEvent</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AccountingEvent</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AccountingEvent</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountingEvent</Name>
					<Field>AccountingEvent</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankAccountTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CompanyBankAccountId</Name>
					<SourceEDT>CompanyBankAccountId</SourceEDT>
					<Field>CompanyBankAccountId</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankCentralBankPurpose</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BankCentralBankPurpose</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankCentralBankPurposeCode</Name>
					<SourceEDT>BankCentralBankPurposeCode</SourceEDT>
					<Field>BankCentralBankPurposeCode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankLCExportLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankLCExportLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankLCExportLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankLCExportLine_CustTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankLCExportLine</Name>
					<Field>BankLCExportLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BankRemittanceFilesCust</Name>
			<EntityRelationshipRole>@SYS125120</EntityRelationshipRole>
			<RelatedTable>BankRemittanceFilesCust</RelatedTable>
			<RelatedTableRole>BankRemittanceFilesCust</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>CustTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankRemittanceFileId</Name>
					<Field>BankRemittanceFileId</Field>
					<RelatedField>FileId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CashDisc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CashDisc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CashDiscCode</Name>
					<SourceEDT>CashDiscCode</SourceEDT>
					<Field>CashDiscCode</Field>
					<RelatedField>CashDiscCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CustCurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustBillingClassification</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustBillingClassification</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustBillingClassification</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustBillingClassification_CustTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustBillingClassification</Name>
					<Field>CustBillingClassification</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustBillOfExchangeJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustBillOfExchangeJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BillOfExchangeID</Name>
					<SourceEDT>CustBillOfExchangeID</SourceEDT>
					<Field>BillOfExchangeID</Field>
					<RelatedField>BillOfExchangeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BillOfExchangeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustBillOfExchangeTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125121</EntityRelationshipRole>
			<RelatedTable>CustBillOfExchangeTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustBillOfExchangeTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BillOfExchangeID</Name>
					<Field>BillOfExchangeID</Field>
					<RelatedField>BillOfExchangeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>CustAccount</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>Voucher</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>TransDate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustCollectionLetterJour</Name>
			<EntityRelationshipRole>@SYS125122</EntityRelationshipRole>
			<RelatedTable>CustCollectionLetterJour</RelatedTable>
			<RelatedTableRole>CustCollectionLetterJour</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>CustTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>Updated</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>LedgerVoucher</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustDirectDebitMandate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustDirectDebitMandate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DirectDebitMandate</Name>
					<Field>DirectDebitMandate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustExchRateAdjustment</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125123</EntityRelationshipRole>
			<RelatedTable>CustExchRateAdjustment</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustExchRateAdjustment</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>createdTransactionId</Name>
					<Field>createdTransactionId</Field>
					<RelatedField>createdTransactionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInterestJour</Name>
			<EntityRelationshipRole>@SYS125124</EntityRelationshipRole>
			<RelatedTable>CustInterestJour</RelatedTable>
			<RelatedTableRole>CustInterestJour</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>CustTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>FeeVoucher</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>Updated</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125125</EntityRelationshipRole>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceJour</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Invoice</Name>
					<Field>Invoice</Field>
					<RelatedField>InvoiceId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>InvoiceAccount</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>InvoiceDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>LedgerVoucher</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustLedger_PostingProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustLedger_PostingProfile</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile</Name>
					<SourceEDT>CustPostingProfile</SourceEDT>
					<Field>PostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PostingIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustLedger_PostingProfileClose</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustLedger_PostingProfileClose</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfileClose</Name>
					<SourceEDT>CustPostingProfile</SourceEDT>
					<Field>PostingProfileClose</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PostingIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustPaymentModeSpec</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125126</EntityRelationshipRole>
			<RelatedTable>CustPaymModeSpec</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustPaymentModeSpec</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymMode</Name>
					<Field>PaymMode</Field>
					<RelatedField>PaymMode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymSpec</Name>
					<Field>PaymSpec</Field>
					<RelatedField>Specification</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustPaymModeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125116</EntityRelationshipRole>
			<RelatedTable>CustPaymModeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustPaymModeTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymMode</Name>
					<SourceEDT>CustPaymMode</SourceEDT>
					<Field>PaymMode</Field>
					<RelatedField>PaymMode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable_AccountNum</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable_AccountNum</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable_LastSettleAccountNum</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable_LastSettleAccountNum</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LastSettleAccountNum</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>LastSettleAccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable_OrderAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrderAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>OrderAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTrans</Name>
			<EntityRelationshipRole>@SYS123513</EntityRelationshipRole>
			<RelatedTable>CustTrans</RelatedTable>
			<RelatedTableRole>CustTrans</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>CustTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>TransDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>Voucher</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTrans_OffsetRecid</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTrans_OffsetRecid</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsetRecid</Name>
					<SourceEDT>CustTransRefRecId</SourceEDT>
					<Field>OffsetRecid</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTransVoucher</Name>
			<RelatedTable>CustTrans</RelatedTable>
			<RelatedTableRole>CustTransVoucher</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>CustTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>Voucher</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DataArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LastSettleCompany</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<Field>LastSettleCompany</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DlvMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryMode</Name>
					<SourceEDT>CustDlvModeId</SourceEDT>
					<Field>DeliveryMode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>FactureJourAmountDifference_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FactureJour_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>FactureJourAmountDifference_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>FactureType_Extern</Name>
					<RelatedField>FactureType</RelatedField>
					<ValueStr>FactureType_RU::AmoutDifference</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<RelatedField>Module</RelatedField>
					<ValueStr>FactureModule_RU::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>CustVendInvoiceAccount</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>Voucher</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>FactureDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>CustVendTransRecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>FactureJourPrepayment_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FactureJour_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>FactureJourPrepayment_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>FactureType_Extern</Name>
					<RelatedField>FactureType</RelatedField>
					<ValueStr>FactureType_RU::Prepayment</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<RelatedField>Module</RelatedField>
					<ValueStr>FactureModule_RU::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>CustVendInvoiceAccount</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>Voucher</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>FactureDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Approver_CustTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Approver</Name>
					<Field>Approver</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125127</EntityRelationshipRole>
			<RelatedTable>ProjInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjInvoiceJour</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>LedgerVoucher</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>InvoiceAccount</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>InvoiceDate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReasonRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125128</EntityRelationshipRole>
			<RelatedTable>ReasonTableRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReasonRef</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonRefRecId</Name>
					<SourceEDT>ReasonRefRecID</SourceEDT>
					<Field>ReasonRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailStoreTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailStoreTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailStoreId</Name>
					<SourceEDT>RetailStoreId</SourceEDT>
					<Field>RetailStoreId</Field>
					<RelatedField>StoreNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailTerminalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailTerminalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailTerminalId</Name>
					<SourceEDT>RetailTerminalId</SourceEDT>
					<Field>RetailTerminalId</Field>
					<RelatedField>terminalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailTransactionTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailTransactionTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailTransactionId</Name>
					<SourceEDT>RetailTransactionId</SourceEDT>
					<Field>RetailTransactionId</Field>
					<RelatedField>transactionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ThirdPartyBankAccountId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123560</EntityRelationshipRole>
			<RelatedTable>CustBankAccount</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ThirdPartyBankAccountId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>CustAccount</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ThirdPartyBankAccountId</Name>
					<Field>ThirdPartyBankAccountId</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TmpBankPaym2Invoice</Name>
			<EntityRelationshipRole>@SYS125129</EntityRelationshipRole>
			<RelatedTable>TmpBankPaym2Invoice</RelatedTable>
			<RelatedTableRole>TmpBankPaym2Invoice</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>CustTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>InvoiceTransDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>InvoiceVoucher</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PaymSchedId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PaymSched</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymSchedId</Name>
					<SourceEDT>PaymSchedId</SourceEDT>
					<Field>PaymSchedId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PaymTermId</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>PaymTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymTermId</Name>
					<Field>PaymTermId</Field>
					<RelatedField>PaymTermId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>