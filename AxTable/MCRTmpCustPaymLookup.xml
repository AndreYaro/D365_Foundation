<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRTmpCustPaymLookup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MCRTmpCustPaymLookup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCards</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds cards to the lookup.
    /// </summary>
    /// <param name="_mcrTmpCustPaymLookup">
    /// Temporary table to be populated with all card retail payments.
    /// </param>
    /// <param name="_channel">
    ///     Channel used to filter out card types for other channels.
    /// </param>
    /// <remarks>
    /// Call center does not accept loyalty,
    ///     so do not add them.
    /// </remarks>
    public static void addCards(MCRTmpCustPaymLookup  _mcrTmpCustPaymLookup,
                                        RetailChannelRecId _channel)
    {
        RetailStoreTenderTypeTable      retailStoreTenderTypeTable;
        RetailStoreTenderTypeCardTable  retailStoreTenderTypeCardTable;
        RetailTenderTypeCardTable       retailTenderTypeCardTable;

        ttsBegin;

        insert_recordset _mcrTmpCustPaymLookup
            (RetailStoreTenderTypeId,
             RetailTenderTypeName,
             RetailCardTypeId)
        select tenderTypeId, Name from retailStoreTenderTypeTable
            where retailStoreTenderTypeTable.function == RetailTenderFunction::Card
               && retailStoreTenderTypeTable.Channel == _channel
            join cardTypeId from retailStoreTenderTypeCardTable
                where retailStoreTenderTypeCardTable.tenderTypeId == retailStoreTenderTypeTable.tenderTypeId
                   && retailStoreTenderTypeCardTable.Channel == retailStoreTenderTypeTable.Channel
            exists join retailTenderTypeCardTable
                where retailTenderTypeCardTable.cardTypeId == retailStoreTenderTypeCardTable.cardTypeId;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCreditCards</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds credit cards to the lookup.
    /// </summary>
    /// <param name="_mcrTmpCustPaymLookup">
    /// Temporary table to be populated with all non card retail payments.
    /// </param>
    /// <param name="_channel">
    /// Channel used to filter out card types for other channels.
    /// </param>
    public static void addCreditCards(MCRTmpCustPaymLookup  _mcrTmpCustPaymLookup,
                                                RetailChannelRecId _channel)
    {
        RetailStoreTenderTypeTable      retailStoreTenderTypeTable;
        RetailStoreTenderTypeCardTable  retailStoreTenderTypeCardTable;
        RetailTenderTypeCardTable       retailTenderTypeCardTable;

        ttsBegin;

        insert_recordset _mcrTmpCustPaymLookup
            (RetailStoreTenderTypeId,
             RetailTenderTypeName,
             RetailCardTypeId)
            select tenderTypeId, Name from retailStoreTenderTypeTable
                where retailStoreTenderTypeTable.function == RetailTenderFunction::Card
                   && retailStoreTenderTypeTable.Channel == _channel
                join cardTypeId from retailStoreTenderTypeCardTable
                    where retailStoreTenderTypeCardTable.tenderTypeId == retailStoreTenderTypeTable.tenderTypeId
                       && retailStoreTenderTypeCardTable.Channel == retailStoreTenderTypeTable.Channel
                exists join retailTenderTypeCardTable
                    where retailTenderTypeCardTable.cardTypeId == retailStoreTenderTypeCardTable.cardTypeId
                       && (retailTenderTypeCardTable.cardTypes == RetailCardTypesBase::CorporateCard
                       || retailTenderTypeCardTable.cardTypes == RetailCardTypesBase::InternationalKreditcard);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNonCards</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add only credit cards to the lookup.
    /// </summary>
    /// <param name="_mcrTmpCustPaymLookup">
    /// Temporary table to be populated with all non card retail payments.
    /// </param>
    /// <param name="_channel">
    /// Channel used to filter out card types for other channels.
    /// </param>
    /// <param name="_allowOnAccount">
    /// Boolean that determines whether the payment method is allowed to be 'on account'.
    /// </param>
    public static void addNonCards(MCRTmpCustPaymLookup  _mcrTmpCustPaymLookup,
                                        RetailChannelRecId _channel,
                                        boolean _allowOnAccount)
    {
        RetailStoreTenderTypeTable retailStoreTenderTypeTable;
        boolean commercePaymentsEnabled = RetailCommercePaymentsFeatureHelper::commercePaymentsEnabledForOrderThroughContext();

        ttsBegin;

        while select tenderTypeId, Name, function, posOperation, Channel from retailStoreTenderTypeTable
            where retailStoreTenderTypeTable.function != RetailTenderFunction::Card
                && retailStoreTenderTypeTable.Channel == _channel
        {
            if ((_allowOnAccount || retailStoreTenderTypeTable.function != RetailTenderFunction::Customer) &&
                (!commercePaymentsEnabled || retailStoreTenderTypeTable.isAvailableForCommercePayment()))
            {
                _mcrTmpCustPaymLookup.clear();
                _mcrTmpCustPaymLookup.RetailStoreTenderTypeId = retailStoreTenderTypeTable.tenderTypeId;
                _mcrTmpCustPaymLookup.RetailTenderTypeName = retailStoreTenderTypeTable.name;
                _mcrTmpCustPaymLookup.insert();
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOnAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds on account payments to the lookup.
    /// </summary>
    /// <param name="_mcrTmpCustPaymLookup">
    /// Temporary table to be populated with all on account retail payments.
    /// </param>
    /// <param name="_channel">
    ///     Channel used to filter out card types for other channels.
    /// </param>
    /// <param name="_allowOnAccount">
    ///     Boolean that determines whether the payment method is allowed to be 'on account'.
    /// </param>
    public static void addOnAccount(MCRTmpCustPaymLookup  _mcrTmpCustPaymLookup,
                                            RetailChannelRecId _channel,
                                            boolean _allowOnAccount)
    {
        RetailStoreTenderTypeTable      retailStoreTenderTypeTable;

        ttsBegin;

        if (_allowOnAccount)
        {
            insert_recordset _mcrTmpCustPaymLookup
                (RetailStoreTenderTypeId,
                 RetailTenderTypeName)
                select tenderTypeId, Name from retailStoreTenderTypeTable
                    where retailStoreTenderTypeTable.function == RetailTenderFunction::Customer
                       && retailStoreTenderTypeTable.Channel == _channel;
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupApplicableTenderTypeReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add different records to lookup table based on the referenced table.
    /// </summary>
    /// <param name = "_mcrTmpCustPaymLookup">The lookup table to update.</param>
    /// <param name = "_mcrCustPaymTable">The custumer payment table.</param>
    public static void lookupApplicableTenderTypeReferences(
                                        MCRTmpCustPaymLookup  _mcrTmpCustPaymLookup,
                                        MCRCustPaymTable _mcrCustPaymTable)
    {
        boolean allowOnAccount = MCRCustTable::findByCustAccount(_mcrCustPaymTable.CustAccount).AllowOnAccount;
        switch (_mcrCustPaymTable.RefTableId)
        {
            case tableNum(LedgerJournalTrans):
                MCRTmpCustPaymLookup::addCreditCards(_mcrTmpCustPaymLookup, _mcrCustPaymTable.Channel);
                break;
            case tableNum(MCRInstallmentPlanSalesTable):
            case tableNum(MCRContinuityCustHeader):
                MCRTmpCustPaymLookup::addCreditCards(_mcrTmpCustPaymLookup, _mcrCustPaymTable.Channel);
                MCRTmpCustPaymLookup::addOnAccount(_mcrTmpCustPaymLookup, _mcrCustPaymTable.Channel, allowOnAccount);
                break;
            default :
                MCRTmpCustPaymLookup::addCards(_mcrTmpCustPaymLookup, _mcrCustPaymTable.Channel);
                MCRTmpCustPaymLookup::addNonCards(_mcrTmpCustPaymLookup, _mcrCustPaymTable.Channel, allowOnAccount);
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>MCRCallCenter</ConfigurationKey>
	<DeveloperDocumentation>@SYS55132</DeveloperDocumentation>
	<Label>@SYS55132</Label>
	<TitleField1>RetailStoreTenderTypeId</TitleField1>
	<TitleField2>RetailTenderTypeName</TitleField2>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Lookup</Name>
			<Label>@SYS40186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetailStoreTenderTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailTenderTypeName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailCardTypeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailCardTypeId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RetailCardTypeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailStoreTenderTypeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreTenderTypeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailTenderTypeName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTenderTypeName</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>