<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDiscountMixAndMatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailDiscountMixAndMatch extends RetailPeriodicDiscount
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts and copies a new record from the <c>mixAndMatchId</c> field to another.
    /// </summary>
    /// <param name="_original">
    /// The current instance of the <c>RetailMixAndMatchTable</c> table.
    /// </param>
    /// <remarks>
    /// Copies all the data except for the <c>mixAndMatchId</c> field from one line to another.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// When trying to copy a line from the same <c>mixAndMatchId</c> field.
    /// </exception>
    public void copyFrom(RetailDiscountMixAndMatch _original)
    {
        RetailDiscountLineMixAndMatch  rboMixAndMatchLine;
        RetailDiscountLineMixAndMatch  rboMixAndMatchLineNew;
        RetailMixAndMatchLineGroups    mixAndMatchLineGroup, mixAndMatchLineGroupNew;

        ttsbegin;
        this.copyDiscountOfferInfo(_original);

        // update mix and match discount related fields
        this.NumberOfTimesApplicable = _original.NumberOfTimesApplicable;
        this.MixAndMatchDiscountType = _original.MixAndMatchDiscountType;
        this.DealPriceValue          = _original.DealPriceValue;
        this.DiscountAmountValue     = _original.DiscountAmountValue;
        this.NoOfLeastExpensiveLines = _original.NoOfLeastExpensiveLines;
        this.LeastExpensiveMode      = _original.LeastExpensiveMode;

        this.update();

        while select rboMixAndMatchLine
            where rboMixAndMatchLine.OfferId == _original.OfferId
        {
            rboMixAndMatchLineNew.clear();
            rboMixAndMatchLineNew.data(rboMixAndMatchLine);
            rboMixAndMatchLineNew.initValue();
            rboMixAndMatchLineNew.OfferId = this.OfferId;
            rboMixAndMatchLineNew.insert();

            rboMixAndMatchLineNew.copyGroupMemberLineInternal(rboMixAndMatchLine.groupMemberLine(), true);
            rboMixAndMatchLineNew.copyRetailDiscountApplicabilityRuleInternal(rboMixAndMatchLine);
        }

        // copy mix and match line group
        while select mixAndMatchLineGroup
            where mixAndMatchLineGroup.mixAndMatchId == _original.OfferId
        {
            mixAndMatchLineGroupNew.clear();
            mixAndMatchLineGroupNew.data(mixAndMatchLineGroup);
            mixAndMatchLineGroupNew.initValue();
            mixAndMatchLineGroupNew.mixAndMatchId = this.OfferId;
            mixAndMatchLineGroupNew.insert();
        }

        this.copyDiscountPriceGroups(_original.OfferId);
        ttscommit;

        this.refreshDS();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.PeriodicDiscountType = RetailDiscountOfferTypeBase::MixAndMatch;

        // only Exclusive is allowed on mix & match offer, setting explicitly
        this.ConcurrencyMode = RetailDiscountConcurrency::Exclusive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRBODiscountOfferTableEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the allow edit property for the data source fields.
    /// </summary>
    /// <param name="_enabled">
    /// A Boolean value that indicates whether the data source is editable or not.
    /// </param>
    public void setRBODiscountOfferTableEnabled(boolean _enabled)
    {
        if (FormDataUtil::isFormDataSource(this))
        {
            this.setTableFieldsEnabled(FormDataUtil::getFormDataSource(this), this.TableId, _enabled);
            this.setRBODiscountOfferParentTableEnabled(_enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailDiscountMixAndMatch</c> table.
    /// </summary>
    /// <param name="_mixAndMatchId">
    /// The current value of the <c>MixAndMatchId</c> field.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailDiscountMixAndMatch</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailDiscountMixAndMatch find(RetailMixAndMatchId _mixAndMatchId, boolean _forUpdate = false)
    {
        RetailDiscountMixAndMatch mixAndMatchTable;

        if (_mixAndMatchId)
        {
            mixAndMatchTable.selectForUpdate(_forUpdate);

            select firstonly mixAndMatchTable where mixAndMatchTable.OfferId == _mixAndMatchId;
        }

        return mixAndMatchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEnable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the discount can be enabled.
    /// </summary>
    /// <returns>
    /// true if the discount can be enabled; otherwise, false.
    /// </returns>
    public boolean validateEnable()
    {
        boolean ret;
        RetailMixAndMatchLineGroups lineGroup;

        ret = super();

        if (this.Status == RetailDisabledEnabled::Enabled)
        {
            ret = ret && this.ValidateLineGroup() &&
                this.ValidateMixMatchLines() &&
                this.ValidateAllLineGroupsAreUsed();
        }

        if (this.DealPriceValue && this.MixAndMatchCountNonDiscountItems == NoYes::Yes)
        {
            this.promptAndWriteValidationLog(
                RetailPricingValidationMessageSeverity::Error,
                "@Retail:MixAndMatchContainsDealPriceLinesWhenCountNonDiscountItemsIsTrue");
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateAllLineGroupsAreUsed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if each line group of a mix and match discount is used by at least one discount line.
    /// </summary>
    /// <returns>
    /// A boolean value to indicate if all line group of the discount are used.
    /// True if this this is not a mix and match discount or if all lines groups are used.
    /// False otherwise.
    /// </returns>
    private boolean ValidateAllLineGroupsAreUsed()
    {
        boolean ret = true;

        if (this.PeriodicDiscountType == RetailDiscountOfferTypeBase::MixAndMatch || this.PeriodicDiscountType == RetailDiscountOfferTypeBase::LeastExpensiveFavorRetailer)
        {
            RetailMixAndMatchLineGroups     mixAndMatchLineGroups;
            RetailDiscountLineMixAndMatch   discountLineMixAndMatch;

            select firstonly RecId from mixAndMatchLineGroups
                where mixAndMatchLineGroups.mixAndMatchId == this.OfferId
                notexists join discountLineMixAndMatch
                where discountLineMixAndMatch.OfferId == this.OfferId
                && mixAndMatchLineGroups.mixAndMatchLineGroup == discountLineMixAndMatch.linegroup;

            if (mixAndMatchLineGroups.RecId)
            {
                this.promptAndWriteValidationLog(
                    RetailPricingValidationMessageSeverity::Error,
                    "@RetailDiscount:DiscountLineGroupNotUsed");
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateLineGroup</Name>
				<Source><![CDATA[
    private boolean ValidateLineGroup()
    {
        boolean isValid = true;
        int     sumOfItemNeeded = 0;
        RetailDiscountLineMixAndMatch  discountLineMM;

        // at least 2 items for all the distinct line groups in use
        while select numberOfItemsNeeded from discountLineMM
                   group by lineGroup, numberOfItemsNeeded
                   where discountLineMM.OfferId == this.OfferId
        {
            sumOfItemNeeded += discountLineMM.numberOfItemsNeeded;
        }

        if (sumOfItemNeeded <= 1)
        {
            this.promptAndWriteValidationLog(
                RetailPricingValidationMessageSeverity::Error,
                "@RetailDiscount:MultipleItemsAndQuantitiesRequiredForMixAndMatchDiscount");
            isValid = false;
        }

        // validate least expensive number
        if (this.MixAndMatchDiscountType == RetailMixAndMatchDiscountType::LeastExpensive)
        {
            if (this.NoOfLeastExpensiveLines < 1 || this.NoOfLeastExpensiveLines >= sumOfItemNeeded)
            {
                this.promptAndWriteValidationLog(
                    RetailPricingValidationMessageSeverity::Error,
                    "@Retail:MixMatchNumOfLeaseExpensive");
                isValid = false;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateMixMatchLines</Name>
				<Source><![CDATA[
    private boolean ValidateMixMatchLines()
    {
        boolean isValid = true;
        RetailDiscountLineMixAndMatch discountLineMixAndMatch;
        RetailDiscountLineMixAndMatch discountLineCheck;

        // validate each line has a line group
        select firstOnly RecId from discountLineMixAndMatch
            where !discountLineMixAndMatch.lineGroup && discountLineMixAndMatch.OfferId == this.OfferId;

        if (discountLineMixAndMatch)
        {
            this.promptAndWriteValidationLog(
                RetailPricingValidationMessageSeverity::Error,
                "@REX4520708");
            isValid = false;
        }

        // validate per line group per configuration
        if (this.MixAndMatchDiscountType == RetailMixAndMatchDiscountType::LineSpec)
        {
            select firstonly RecId from discountLineMixAndMatch
                exists join discountLineCheck
                where discountLineMixAndMatch.OfferId == this.OfferId
                && discountLineMixAndMatch.OfferId == discountLineCheck.OfferId
                && discountLineMixAndMatch.lineGroup == discountLineCheck.lineGroup
                && (discountLineMixAndMatch.discountType != discountLineCheck.discountType
                    || discountLineMixAndMatch.DiscountPercentOrValue != discountLineCheck.DiscountPercentOrValue);

            if (discountLineMixAndMatch)
            {
                this.promptAndWriteValidationLog(
                    RetailPricingValidationMessageSeverity::Error,
                    "@Retail:MixMatchLineGroupDiffConfig");
                isValid = false;
            }

            // validate if both types in line, exclusive and best only
            select firstonly RecId from discountLineMixAndMatch
                where discountLineMixAndMatch.OfferId == this.OfferId
            && discountLineMixAndMatch.discountType == RetailDealPriceDiscountPctBase::DealPrice;

            select firstonly RecId from discountLineCheck
                where discountLineCheck.OfferId == this.OfferId
            && discountLineCheck.discountType == RetailDealPriceDiscountPctBase::DiscountPct;

            if (discountLineMixAndMatch && discountLineCheck && this.ConcurrencyMode == RetailDiscountConcurrency::Compounded)
            {
                this.promptAndWriteValidationLog(
                    RetailPricingValidationMessageSeverity::Error,
                    "@Retail:MixMatchLineMultiCofigConcurrency");
                isValid = false;
            }

            if (discountLineMixAndMatch && this.MixAndMatchCountNonDiscountItems)
            {
                this.promptAndWriteValidationLog(
                    RetailPricingValidationMessageSeverity::Error,
                    "@Retail:IncludeNonDiscountableProductsWarning");
                isValid = false;
            }
        }
        else if (this.MixAndMatchDiscountType == RetailMixAndMatchDiscountType::LeastExpensive && this.LeastExpensiveMode == RetailLeastExpensiveMode::FavorRetailer)
        {
            select minof(numberOfItemsNeeded) from discountLineMixAndMatch where discountLineMixAndMatch.OfferId == this.OfferId;

            if (discountLineMixAndMatch.numberOfItemsNeeded < this.NoOfLeastExpensiveLines)
            {
                this.promptAndWriteValidationLog(
                    RetailPricingValidationMessageSeverity::Error,
                    "@Retail:LeastExpensiveFavorRetailerLineGroupQuantityWarning");
                isValid = false;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);
        switch (_fieldId)
        {
            case fieldNum(RetailDiscountMixAndMatch, LeastExpensiveMode):
                if (this.LeastExpensiveMode == RetailLeastExpensiveMode::FavorRetailer)
                {
                    this.PeriodicDiscountType = RetailDiscountOfferTypeBase::LeastExpensiveFavorRetailer;
                }
                else
                {
                    this.PeriodicDiscountType = RetailDiscountOfferTypeBase::MixAndMatch;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExcludeDiscountLines</Name>
				<Source><![CDATA[
    protected void validateExcludeDiscountLines()
    {
        boolean ret;

        RetailDiscountLineMixAndMatch discountLine;
        RetailDiscountLineMixAndMatch discountLineToValidate;
        RetailGroupMemberLine groupMemberLineToValidate;
        RetailGroupMemberLine groupMemberLine;

        while select discountLineToValidate
            where discountLineToValidate.OfferId == this.OfferId
            && discountLineToValidate.LineType == RetailDiscountLineIncludeExcludeTypeBase::Exclude
        {
            ret = false;
            groupMemberLineToValidate = discountLineToValidate.groupMemberLine();

            while select discountLine
               where discountLine.OfferId == this.OfferId
                && discountLine.LineType == RetailDiscountLineIncludeExcludeTypeBase::Include
                && discountLine.lineGroup == discountLineToValidate.lineGroup
                && discountLine.LineNum != discountLineToValidate.LineNum
            {
                groupMemberLine = discountLine.groupMemberLine();

                // Set return value to true if given group member line is a subset of current group member line.
                if (RetailGroupMemberLine::isSubset(groupMemberLineToValidate, groupMemberLine))
                {
                    ret = true;
                    break;
                }
            }
        
            // Display a warning if none of the included discount lines include the products in excluded discount lines.
            if (!ret)
            {
                this.promptAndWriteValidationLog(
                    RetailPricingValidationMessageSeverity::Warning,
                    "@Retail:ProductsInExcludeLinesNotPresentInIncludeLinesWarning");
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (ret && RetailDiscountLeastExpensiveValidateErrorFlight::instance().isEnabled()
            && this.LeastExpensiveMode == RetailLeastExpensiveMode::FavorRetailer && this.MixAndMatchDiscountType != RetailMixAndMatchDiscountType::LeastExpensive)
        {
            ret = checkFailed("@Retail:DiscountTypeHasWrongLeastExpensiveModeError");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET6373</DeveloperDocumentation>
	<Label>@RET6372</Label>
	<CacheLookup>NotInTTS</CacheLookup>
	<Extends>RetailPeriodicDiscount</Extends>
	<Modules>Merchandising</Modules>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DealPriceValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscountAmountValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MixAndMatchDiscountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NoOfLeastExpensiveLines</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>numberOfTimesApplicable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LeastExpensiveMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GeneratesBundleId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Restrictions</Name>
			<Label>@RET3156</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>numberOfTimesApplicable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DealPriceValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDealPriceValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DiscountAmountValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDiscountAmountValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MixAndMatchCountNonDiscountItems</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@Retail:IncludeNonDiscountableProducts</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MixAndMatchDiscountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailMixAndMatchDiscount</ExtendedDataType>
			<EnumType>RetailMixAndMatchDiscountType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NoOfLeastExpensiveLines</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailNoOfLeastExpensiveLines</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>numberOfTimesApplicable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailNumberOfTimesApplicable</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LeastExpensiveMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailLeastExpensiveMode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GeneratesBundleId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailMixAndMatchGeneratesBundleId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailPeriodicDiscount1_100522</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>RetailPeriodicDiscount</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>