<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResReleaseProductLegalEntityLog</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResReleaseProductLegalEntityLog extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>existByReleaseProductLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>EcoResReleaseProductLegalEntityLog</c>
    /// table.
    /// </summary>
    /// <param name="_releaseProductLegalEntityRecId">
    /// An ID of a record in the <c>EcoResReleaseProductLegalEntity</c> table.
    /// </param>
    /// <returns>
    /// true if the specified record exists in the <c>EcoResReleaseProductLegalEntityLog</c> table;
    /// otherwise, false.
    /// </returns>
    public static boolean existByReleaseProductLegalEntity(RefRecId _releaseProductLegalEntityRecId)
    {
        EcoResReleaseProductLegalEntityLog  ecoResReleaseProductLegalEntityLog;

        select firstonly RecId from ecoResReleaseProductLegalEntityLog
            where ecoResReleaseProductLegalEntityLog.ReleaseProductLegalEntity == _releaseProductLegalEntityRecId;

        return (ecoResReleaseProductLegalEntityLog.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByReleaseProductLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>EcoResReleaseProductLegalEntityLog</c> table.
    /// </summary>
    /// <param name="_releaseProductLegalEntityRecId">
    /// An ID of a record in the <c>EcoResReleaseProductLegalEntity</c> table.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>EcoResReleaseProductLegalEntityLog</c> table if it exists; otherwise, an empty
    /// record.
    /// </returns>
    public static EcoResReleaseProductLegalEntityLog findByReleaseProductLegalEntity(
        RefRecId    _releaseProductLegalEntityRecId,
        boolean     _forUpdate = false)
    {
        EcoResReleaseProductLegalEntityLog  ecoResReleaseProductLegalEntityLog;

        ecoResReleaseProductLegalEntityLog.selectForUpdate(_forUpdate);

        select firstonly ecoResReleaseProductLegalEntityLog
            where ecoResReleaseProductLegalEntityLog.ReleaseProductLegalEntity == _releaseProductLegalEntityRecId;

        return ecoResReleaseProductLegalEntityLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInfolog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an Infolog is stored for a product that will be released in a legal entity in a
    /// release session.
    /// </summary>
    /// <param name="_releaseSessionRecId">
    /// A release session ID.
    /// </param>
    /// <param name="_productRecId">
    /// A product ID.
    /// </param>
    /// <param name="_legalEntityRecId">
    /// A legal entity ID.
    /// </param>
    /// <returns>
    /// true if an Infolog is stored for a product that will be released in a legal entity in a release
    /// session; otherwise, false.
    /// </returns>
    public static boolean hasInfolog(
        EcoResReleaseSessionRecId   _releaseSessionRecId,
        EcoResProductRecId          _productRecId,
        RefRecId                    _legalEntityRecId)
    {
        EcoResReleaseSessionProduct         ecoResReleaseSessionProduct;
        EcoResReleaseProductLegalEntity     ecoResReleaseProductLegalEntity;

        ecoResReleaseSessionProduct         = EcoResReleaseSessionProduct::findByReleaseSessionProduct(
            _releaseSessionRecId,
            _productRecId);
        ecoResReleaseProductLegalEntity     = EcoResReleaseProductLegalEntity::findByReleaseSessionProductLegalEntity(
            ecoResReleaseSessionProduct.RecId,
            _legalEntityRecId);

        return EcoResReleaseProductLegalEntityLog::existByReleaseProductLegalEntity(ecoResReleaseProductLegalEntity.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveInfologData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates a record in the <c>EcoResReleaseProductLegalEntityLog</c> table with a new
    /// Infolog data.
    /// </summary>
    /// <param name="_releaseProductLegalEntityRecId">
    /// An ID of a record in the <c>EcoResReleaseProductLegalEntity</c> table.
    /// </param>
    /// <param name="_infologData">
    /// A packed Infolog.
    /// </param>
    public static void saveInfologData(
        RefRecId    _releaseProductLegalEntityRecId,
        InfologData _infologData)
    {
        EcoResReleaseProductLegalEntityLog  ecoResReleaseProductLegalEntityLog;

        ttsbegin;

        ecoResReleaseProductLegalEntityLog =
            EcoResReleaseProductLegalEntityLog::findByReleaseProductLegalEntity(_releaseProductLegalEntityRecId, true);

        ecoResReleaseProductLegalEntityLog.ReleaseProductLegalEntity    = _releaseProductLegalEntityRecId;
        ecoResReleaseProductLegalEntityLog.InfologData                  = _infologData;
        ecoResReleaseProductLegalEntityLog.write();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInfolog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the Infolog data that is stored for a product that will be released in a legal entity in a
    /// release session.
    /// </summary>
    /// <param name="_releaseSessionRecId">
    /// A release session ID.
    /// </param>
    /// <param name="_productRecId">
    /// A product ID.
    /// </param>
    /// <param name="_legalEntityRecId">
    /// A legal entity ID.
    /// </param>
    public static void showInfolog(
        EcoResReleaseSessionRecId   _releaseSessionRecId,
        EcoResProductRecId          _productRecId,
        RefRecId                    _legalEntityRecId)
    {
        EcoResReleaseSessionProduct         ecoResReleaseSessionProduct;
        EcoResReleaseProductLegalEntity     ecoResReleaseProductLegalEntity;
        EcoResReleaseProductLegalEntityLog  ecoResReleaseProductLegalEntityLog;

        ecoResReleaseSessionProduct         = EcoResReleaseSessionProduct::findByReleaseSessionProduct(
            _releaseSessionRecId,
            _productRecId);
        ecoResReleaseProductLegalEntity     = EcoResReleaseProductLegalEntity::findByReleaseSessionProductLegalEntity(
            ecoResReleaseSessionProduct.RecId,
            _legalEntityRecId);
        ecoResReleaseProductLegalEntityLog  = EcoResReleaseProductLegalEntityLog::findByReleaseProductLegalEntity(
            ecoResReleaseProductLegalEntity.RecId);

        infolog.import(ecoResReleaseProductLegalEntityLog.InfologData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS314045</DeveloperDocumentation>
	<Label>@SYS313968</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ReleaseProductLegalEntity</TitleField1>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>EcoResReleaseProductLegalEntityIdx</ClusteredIndex>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>EcoResReleaseProductLegalEntityIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReleaseProductLegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InfologData</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReleaseProductLegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>InfologData</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InfologData</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReleaseProductLegalEntity</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>EcoResReleaseProductLegalEntityIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ReleaseProductLegalEntity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResReleaseProductLegalEntity</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EcoResReleaseProductLegalEntity</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResReleaseProductLegalEntity</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>EcoResReleaseProductLegalEntity_EcoResReleaseProductLegalEntityLog</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReleaseProductLegalEntity</Name>
					<Field>ReleaseProductLegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>