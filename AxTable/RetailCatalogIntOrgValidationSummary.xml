<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCatalogIntOrgValidationSummary</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailCatalogIntOrgValidationSummary extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayValidationResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the symbols associated with value..
    /// </summary>
    /// <returns>
    /// Container containing image reference.
    /// </returns>
    /// <remarks>
    /// This value is used as an index to find the icon to display.
    /// </remarks>
    public display container displayValidationResult()
    {
        ImageReference  imageReference;
        container       imageContainer;

        switch (this.ErrorType)
        {
            case RetailCatalogValidationError::Error:
                imageReference = ImageReference::constructForSymbol('Error');
                break;

            case RetailCatalogValidationError::None:
                imageReference = ImageReference::constructForSymbol('FieldCorrect');
                break;

            case RetailCatalogValidationError::Warning:
                imageReference = ImageReference::constructForSymbol('Warning');
                break;
        }

        if (imageReference)
        {
            imageContainer = imageReference.pack();
        }

        return imageContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates a record for the specific retail catalog channel.
    /// </summary>
    /// <param name="_catalogId">
    /// The catalog rec id.
    /// </param>
    /// <param name="_errorType">
    /// The error type.
    /// </param>
    /// <param name="_errorMessage">
    /// The error mesage.
    /// </param>
    /// <param name="_catalogIntOrgId">
    /// The retail catalog channel id. If no value is provided this will create rows for every channel from the specified catalog.
    /// </param>
    public static void addError(CatalogRefRecId _catalogId, RetailCatalogValidationError _errorType, str _errorMessage, RefRecId _catalogIntOrgId = 0)
    {
        RetailCatalogInternalOrg catalogIntOrg;

        ttsbegin;

        if (_catalogIntOrgId)
        {
            RetailCatalogIntOrgValidationSummary::create(_catalogId, _catalogIntOrgId, _errorType, _errorMessage);
        }
        else
        {
            while select RecId from catalogIntOrg
                  where catalogIntOrg.Catalog == _catalogId
            {
                RetailCatalogIntOrgValidationSummary::create(_catalogId, catalogIntOrg.RecId, _errorType, _errorMessage);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>areAnyWarnings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for the warnings in the <c>RetailCatalogIntOrgValidationSummary</c>.
    /// </summary>
    /// <param name="_catalogId">
    /// Value of <c>CatalogRefRecId</c> which determines which record to be selected for checking the warnings.
    /// </param>
    /// <returns>
    /// Returns true if warnings exists, otherwise false.
    /// </returns>
    public static boolean areAnyWarnings(CatalogRefRecId _catalogId)
    {
        boolean ret;
        RetailCatalogIntOrgValidationSummary summary;

        select count(RecId) from summary
        group by Catalog, CatalogInternalOrg
        where summary.Catalog == _catalogId &&
                summary.ErrorType == RetailCatalogValidationError::Warning;

        if (summary.RecId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a summary of the validation results based on the number of products, and the errors encountered.
    /// </summary>
    /// <param name="_catalogId">
    /// The catalog rec id for which to build the summary.
    /// </param>
    public static void buildSummary(CatalogRefRecId _catalogId)
    {
        RetailCatalogIntOrgProductValidation catalogIntOrgProduct, catalogIntOrgProductWithErrors;
        RetailCatalogInternalOrg catalogIntOrg;
        CatalogProduct catalogProduct;
        RetailCatalogIntOrgValidationSummary existingError;
        Catalog catalogLocal = Catalog::find(_catalogId);

        boolean isMultipleCatalogsFeatureEnabled = FeatureStateProvider::isFeatureEnabled(ChannelMultipleCatalogsFeature::instance());
        boolean isCatalogTargetB2B = (isMultipleCatalogsFeatureEnabled && (catalogLocal.CatalogTarget == RetailCatalogTarget::B2B));

        ttsBegin;
        while select RecId from catalogIntOrg
                where catalogIntOrg.Catalog == _catalogId
        {
            select firstonly existingError
                where existingError.Catalog == _catalogId && existingError.CatalogInternalOrg == catalogIntOrg.RecId;

            // ignore green and yellow if we have channel related errors.
            if (!existingError)
            {
                // number of products to be published.
                select count(Product) from catalogProduct
                group by catalog
                    where catalogProduct.Catalog == _catalogId
                notExists join catalogIntOrgProductWithErrors
                    where catalogIntOrgProductWithErrors.Catalog == catalogProduct.Catalog &&
                        catalogIntOrgProductWithErrors.CatalogInternalOrg == catalogIntOrg.RecId &&
                        catalogIntOrgProductWithErrors.CatalogProduct == catalogProduct.RecId &&
                        catalogIntOrgProductWithErrors.ErrorType == RetailCatalogValidationError::Error;

                // if we have any products that we will publish
                if (catalogProduct.Product)
                {
                    if (!isCatalogTargetB2B)
                    {
                        RetailCatalogIntOrgValidationSummary::create(
                        _catalogId,
                        catalogIntOrg.RecId,
                        RetailCatalogValidationError::None,
                        "@RET490219",
                        catalogProduct.Product);
                    }
                }

                // number of warnings
                select count(CatalogProduct) from catalogIntOrgProduct
                group by Catalog, CatalogInternalOrg
                where catalogIntOrgProduct.Catalog == _catalogId &&
                      catalogIntOrgProduct.CatalogInternalOrg == catalogIntOrg.RecId &&
                      catalogIntOrgProduct.ErrorType == RetailCatalogValidationError::Warning;
                if (catalogIntOrgProduct.CatalogProduct > 0)
                {
                    RetailCatalogIntOrgValidationSummary::create(
                        _catalogId,
                        catalogIntOrg.RecId,
                        RetailCatalogValidationError::Warning,
                        "@RET490221",
                        catalogIntOrgProduct.CatalogProduct);
                }
            }

            // number of errors
            select count(CatalogProduct) from catalogIntOrgProduct
            group by Catalog, CatalogInternalOrg
            where catalogIntOrgProduct.Catalog == _catalogId &&
                  catalogIntOrgProduct.CatalogInternalOrg == catalogIntOrg.RecId &&
                  catalogIntOrgProduct.ErrorType == RetailCatalogValidationError::Error;

            if (catalogIntOrgProduct.CatalogProduct > 0)
            {
                RetailCatalogIntOrgValidationSummary::create(
                    _catalogId,
                    catalogIntOrg.RecId,
                    RetailCatalogValidationError::Error,
                    "@RET490220",
                    catalogIntOrgProduct.CatalogProduct);
            }
            else
            {
                // If there are no product errors
                if (isCatalogTargetB2B)
                {
                    RetailCatalogIntOrgValidationSummary::create(
                        _catalogId,
                        catalogIntOrg.RecId,
                        RetailCatalogValidationError::None,
                        "@RET490219",
                        catalogProduct.Product);
                }
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clean</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clens previous results.
    /// </summary>
    /// <param name="_catalogId">
    /// The catalog rec id.
    /// </param>
    public static void clean(CatalogRefRecId _catalogId)
    {
        RetailCatalogIntOrgValidationSummary validationSummary;

        ttsBegin;

        delete_from validationSummary
        where validationSummary.Catalog == _catalogId;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
        private static void create(CatalogRefRecId _catalogId, RefRecId _catalogIntOrgId, RetailCatalogValidationError _errorType, str _errorMessage, RetailProductCount productCount = 0)
    {
        RetailCatalogIntOrgValidationSummary summary;
        summary.initValue();
        summary.Catalog = _catalogId;
        summary.CatalogInternalOrg = _catalogIntOrgId;
        summary.ErrorType = _errorType;
        summary.ErrorMessage = _errorMessage;
        summary.ProductCount = productCount;
        summary.LastValidationDateTime = DateTimeUtil::getSystemDateTime();
        summary.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET490218</DeveloperDocumentation>
	<Label>@RET490217</Label>
	<TitleField1>Catalog</TitleField1>
	<TitleField2>CatalogInternalOrg</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>Merchandising</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ErrorType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductCount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ErrorMessage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Catalog</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CatalogInternalOrg</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastValidationDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Catalog</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ErrorMessage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ErrorType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CatalogInternalOrg</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastValidationDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductCount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Catalog</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CatalogInternalOrg</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ErrorMessage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCatalogValidationErrorMessage</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ErrorType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailCatalogValidationError</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>LastValidationDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DateTimeExecuted</ExtendedDataType>
			<Label>@RET490299</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProductCount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailProductCount</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CatalogIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Catalog</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CatalogInternalOrgIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CatalogInternalOrg</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Catalog</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>Catalog</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Catalog</Name>
					<Field>Catalog</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CatalogInternalOrg</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailCatalogInternalOrg</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CatalogInternalOrg</Name>
					<Field>CatalogInternalOrg</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>