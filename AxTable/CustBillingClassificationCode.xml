<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustBillingClassificationCode</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustBillingClassificationCode extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update all <c>SettlementPriority</c> value of the <c>CustBillingClassificationCode</c> table based on selected <c>CustBillingClassification</c> record  that have lower priority value than the deleted <c>CustBillingClassificationCode</c> record.
    /// </summary>
    public void delete()
    {
        CustBillingClassificationCode  custBillingClassificationCodeDelete;

        ttsbegin;
        super();

        // updates lower billing codes priority.
        update_recordset custBillingClassificationCodeDelete
        setting SettlementPriority = custBillingClassificationCodeDelete.SettlementPriority - 1
        where custBillingClassificationCodeDelete.SettlementPriority >= this.SettlementPriority
        && custBillingClassificationCodeDelete.CustBillingClassification == this.CustBillingClassification;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLowestSettlementPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the lowest priority of billing codes based on billing classification.
    /// </summary>
    /// <param name="_custBillingClassification">
    /// The <c>RefRecId</c> value that corresponds to the record ID field.
    /// </param>
    /// <returns>
    /// A <c>SettlementPriority</c> field of the <c>CustBillingClassificationCode</c> table.
    /// </returns>

    public Priority getLowestSettlementPriority(RefRecId _custBillingClassification)
    {
        CustBillingClassificationCode custBillingClassificationCodeLocal;

        select maxof(SettlementPriority) from custBillingClassificationCodeLocal
        where custBillingClassificationCodeLocal.CustBillingClassification == _custBillingClassification;
        // lowest priority of billing codes based on billing classification.
        return custBillingClassificationCodeLocal.SettlementPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Associates a billing code record to billing classification with lowest priority.
    /// </summary>
    void insert()
    {
        if (!this.RecId)
        {
            // set Settlement priority to lowest priority of billing code based on billing classification.
            this.SettlementPriority = this.getLowestSettlementPriority(this.CustBillingClassification) + 1;
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the priority of Billing code based on billing classification.
    /// </summary>
    /// <param name="_custBillingClassification">
    /// The <c>RefRecId</c> value that corresponds to the record ID field.
    /// </param>
    /// <param name="_directionUp">
    /// A boolean value that specifies whether to increase or decrease the priority of billing code.
    /// </param>

    public void updatePriority(RefRecId _custBillingClassification, boolean _directionUp)
    {
        CustBillingClassificationCode   custBillingClassificationCodelocal;
        SettlementPriority              changeSelectedPriority;
        SettlementPriority              totalSettlementPriority;

        switch (_directionUp)
        {
            case true :
                changeSelectedPriority = this.SettlementPriority - 1;
                break;
            case false :
                changeSelectedPriority = this.SettlementPriority + 1;
                break;
        }
        totalSettlementPriority = changeSelectedPriority + this.SettlementPriority;

        // updates settlement priority.
        update_recordset custBillingClassificationCodelocal
        setting SettlementPriority = totalSettlementPriority - custBillingClassificationCodelocal.SettlementPriority
        where ((custBillingClassificationCodelocal.SettlementPriority == this.SettlementPriority
        || custBillingClassificationCodelocal.SettlementPriority == changeSelectedPriority)
        && custBillingClassificationCodelocal.CustBillingClassification == this.CustBillingClassification);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    boolean validateDelete()
    {
        boolean isValid;

        isValid = super();

        if (isValid && this.RecId && CustBillingCode::isUsedByInvoice(this.CustBillingCode))
        {
            throw error("@SPS368");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        CustBillingClassificationCode   custBillingClassificationCodeLocal;
        boolean                         ret = true;

        switch (_fieldIdToCheck)
        {
            case fieldnum(CustBillingClassificationCode, CustBillingCode) :
                if (this.CustBillingCode)
                {
                    select firstonly RecId from custBillingClassificationCodeLocal
                        where custBillingClassificationCodeLocal.CustBillingCode == this.CustBillingCode;
                    if (custBillingClassificationCodeLocal.RecId)
                    {
                        ret = checkFailed(strfmt("@SPS646", CustBillingCode::find(this.CustBillingCode).BillingCode));
                    }
                }
                break;
        }
        if (ret)
        {
            ret = super(_fieldIdToCheck);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>CustBillingClassificationCode</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The unique ID of the record to find.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;

        if (!CustBillingClassificationCode::exist(_recId))
        {
            ret = checkFailed(strfmt(CustBillingClassificationCode::txtNotExist(), _recId));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>CustBillingClassificationCode</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The unique ID of the record to find.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        boolean existBillingClassificationCode;

        existBillingClassificationCode = (select firstonly
                    RecId
                from
                    custBillingClassificationCode
                where
                    custBillingClassificationCode.RecId == _recId).RecId != 0;

        return existBillingClassificationCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBillingClassificationCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine whether the specified <c>BillingCode</c> field is associated to the selected <c>CustBillingClassification</c> record.
    /// </summary>
    /// <param name="_custBillingClassification">
    /// The <c>RecId</c> value of <c>CustBillingClassification</c> table.
    /// </param>
    /// <param name="_custBillingCode">
    /// The <c>RecId</c> value of <c>CustBillingClassificationCode</c> table.
    /// </param>
    /// <returns>
    /// true if <c>BillingCode</c> value is associated to the <c>CustBillingClassification</c> record;otherwise, false.
    /// </returns>
    // This method is a part of TU2 and TU1 is not checked in due to high Ids issue.
    public static boolean existBillingClassificationCode(RefRecId _custBillingClassification,
    RefRecId _custBillingCode)
    {
        boolean existBillingClassificationCode;

        existBillingClassificationCode = (select firstonly RecId from custBillingClassificationCode
                                            where custBillingClassificationCode.CustBillingClassification == _custBillingClassification
                                                && custBillingClassificationCode.CustBillingCode == _custBillingCode).RecId != 0;

        return existBillingClassificationCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Finds a specific <c>CustBillingClassificationCode</c> record.
    /// </summary>
    /// <param name="_recId">
    /// The unique ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean that determines whether to read the record for updating; optional.
    /// </param>
    /// <returns>
    /// A <c>CustBillingClassificationCode</c> table buffer.
    /// </returns>
    public static CustBillingClassificationCode find(
        recId   _recId,
        boolean _forUpdate = false)
    {
        CustBillingClassificationCode custBillingClassificationCode;

        if (_recId)
        {
            custBillingClassificationCode.selectForUpdate(_forUpdate);

            select firstonly custBillingClassificationCode
                index hint recid
                where custBillingClassificationCode.RecId == _recId;
        }
        return custBillingClassificationCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySettlementPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CustBillingClassificationCode</c> table record by <c>SettlementPriority</c> field value.
    /// </summary>
    /// <param name="_settlementPrioriy">
    /// The settlement priority of billing class.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional
    /// </param>
    /// <returns>
    /// A record in the <c>CustBillingClassificationCode</c> table; otherwise, an empty record.
    /// </returns>
    public static CustBillingClassificationCode findBySettlementPriority(
        SettlementPriority   _settlementPriority,
        boolean _forUpdate = false)
    {
        CustBillingClassificationCode custBillingClassificationCode;

        if (_settlementPriority > 0)
        {
            custBillingClassificationCode.selectForUpdate(_forUpdate);

            select firstonly custBillingClassificationCode
                where custBillingClassificationCode.SettlementPriority == _settlementPriority;
        }

        return custBillingClassificationCode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PublicSector</ConfigurationKey>
	<DeveloperDocumentation>@SPS2509</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<FormRef>CustBillingClassification</FormRef>
	<Label>@SPS369</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>CustBillingClassification</TitleField1>
	<TitleField2>CustBillingCode</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>AccountsReceivable</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustBillingClassification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustBillingCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustBillingClassification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustBillingCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SettlementPriority</Name>
			<Label>@SPS357</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SettlementPriority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustBillingClassification</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustBillingCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SPS21</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SettlementPriority</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SettlementPriority</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BillingClassCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CustBillingCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BillingClassCodePriorityIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SettlementPriority</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustBillingClassification</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>CustBillingClassification</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustBillingClassification</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustBillingClassification_CustBillingClassificationCode</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustBillingClassification</Name>
					<Field>CustBillingClassification</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustBillingCode</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>CustBillingCode</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustBillingCode</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>CustBillingCode_CustBillingClassificationCode</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustBillingCode</Name>
					<Field>CustBillingCode</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>