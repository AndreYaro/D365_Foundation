<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchRFQLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountConsumptionLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount accountConsumptionLedgerDimension()
    {
        // <GEERU>
        #IsoCountryRegionCodes
        // </GEERU>
        PurchRFQTable purchRFQTable = this.purchRFQTable();
        // <GEERU>
        #IsoCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return InventPosting::accountItemLedgerDimensionFromParameters(
                this.buildAccountItemLedgerDimensionParameter(
                    purchRFQTable,
                    InventAccountType::PurchConsump,
                    InventTable::find(this.ItemId).itemGroupId(),
                    this.inventDim()));
        }
        else
        {
            // </GEERU>
            return InventPosting::accountItemLedgerDimensionFromParameters(
                this.buildAccountItemLedgerDimensionParameter(
                    purchRFQTable,
                    InventAccountType::PurchConsump,
                    InventTable::find(this.ItemId).itemGroupId()));
            // <GEERU>
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountReceiptLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount accountReceiptLedgerDimension()
    {
        PurchRFQTable purchRFQTable = this.purchRFQTable();
        // <GEERU>
        #IsoCountryRegionCodes
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return InventPosting::accountItemLedgerDimensionFromParameters(
                this.buildAccountItemLedgerDimensionParameter(
                    purchRFQTable,
                    InventAccountType::PurchReceipt,
                    InventTable::find(this.ItemId).itemGroupId(),
                    this.inventDim()));
        }
        // </GEERU>
        // <GCN>
        if (InventPostingExtendParm_CN::checkExtendParmEnabled())
        {
            return InventPosting::accountItemExtendParmFromParameter_CN(
                this.buildAccountItemLedgerDimensionParameter(
                    purchRFQTable,
                    InventAccountType::PurchReceipt,
                    this.inventTable().itemGroupId(),
                    null,
                    InventPostingExtendParm_CN::constructInventDim(this.inventDim()).parmInventSiteId()));
        }
        // </GCN>
        return InventPosting::accountItemLedgerDimensionFromParameters(
            this.buildAccountItemLedgerDimensionParameter(
                purchRFQTable,
                InventAccountType::PurchReceipt,
                InventTable::find(this.ItemId).itemGroupId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAccountItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting account ledger dimension for an item.
    /// </summary>
    /// <param name="_purchRFQTable">A request for quotation.</param>
    /// <param name="_inventAccountType">An inventory account type.</param>
    /// <param name="_itemGroupId">An item group Id.</param>
    /// <param name="_inventDim">An inventory dimension.</param>
    /// <param name="_siteRelation">An inventory site relation.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingAccountItemLedgerDimensionParameters buildAccountItemLedgerDimensionParameter(
        PurchRFQTable _purchRFQTable,
        InventAccountType _inventAccountType,
        ItemGroupId _itemGroupId,
        InventDim _inventDim = null,
        InventSiteRelation_CN _siteRelation = '')
    {
        return InventPostingAccountItemLedgerDimensionParameters::newFromParameters(
            _inventAccountType,
            this.ItemId,
            _itemGroupId,
             0,
            _purchRFQTable.VendAccount,
            _purchRFQTable.vendTable().VendGroup,
            this.TaxGroup,
            _inventDim,
            _siteRelation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>alternateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the alternate request for quotation line for the current line.
    /// </summary>
    /// <returns>
    /// The record of the <c>PurchRFQLine</c> table;
    /// </returns>
    public PurchRFQLine alternateLine()
    {
        PurchRFQLine purchRFQLine;

        if (this.RecId)
        {
            select firstonly purchRFQLine
                where purchRFQLine.RFQCaseLineRefRecId == this.RFQCaseLineRefRecId
                    && purchRFQLine.IsAlternate == NoYes::Yes
                    && purchRFQLine.RFQId == this.RFQId;
        }

        return purchRFQLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>alternativeRFQLines</Name>
				<Source><![CDATA[
    boolean alternativeRFQLines()
    {
        PurchRFQTable   purchRFQTable;
        PurchRFQLine    purchRFQLine;
        PurchRFQCaseId  caseId;

        caseId = this.purchRFQTable().rfqCaseId;
        select firstonly RecId from purchRFQTable
            where purchRFQTable.rfqCaseId == caseId &&
                  purchRFQTable.rfqId     != this.rfqId
                exists join purchRFQLine
                    where purchRFQLine.rfqCaseLineRefRecId == this.rfqCaseLineRefRecId;
        return purchRFQTable.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>alternativeRFQs</Name>
				<Source><![CDATA[
    display PurchRFQAlternativeRFQs alternativeRFQs()
    {
        PurchRFQTable       purchRFQTable;
        PurchRFQTable       rfqTable;

        select count (RecId) from purchRFQTable
            exists join rfqTable
            where rfqTable.rfqCaseId == purchRFQTable.rfqCaseId
               && rfqTable.rfqId     == this.rfqId;

        return purchRFQTable.RecId > 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur amountExclTax(AmountCur amountCur, Qty  qty, TransDate transDate, Tax _tax = null, boolean _skipRounding = false, boolean _useRoundedTaxOrigin = true)
    {
        return this.salesPurchLineInterface().amountExclTax(amountCur, qty, transDate, _tax, _skipRounding, _useRoundedTaxOrigin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>attachmentCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the number of attached documents that are associated with the current <c>PurchRFQLine</c>
    /// record.
    /// </summary>
    /// <returns>
    /// The number of attached documents that are associated with the current <c>PurchRFQLine</c> record.
    /// </returns>
    public display PurchRFQDocumentCount attachmentCount()
    {
        return (select  count(RecId)
                from    docuRef
                where   docuRef.RefCompanyId == this.DataAreaId  &&
                        docuRef.RefTableId   == this.TableId     &&
                        docuRef.RefRecId     == this.RecId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGrossAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcGrossAmount(Qty    qty   = this.PurchQty)
    {
        return this.salesPurchLineInterface().calcGrossAmount(qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGrossAmountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur  calcGrossAmountExclTax(Qty  qty = this.PurchQty, TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null)
    {
        return this.salesPurchLineInterface().calcGrossAmountExclTax(qty, this.taxDate(transDate), _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmount(Qty  qty = this.PurchQty)
    {
        return this.salesPurchLineInterface().calcLineAmount(qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmountExclTax(Qty         _qty          = this.PurchQty,
                                           TransDate   _transDate    = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                           Tax         _tax          = null,
                                           boolean     _skipRounding = false)
    {
        return this.salesPurchLineInterface().calcLineAmountExclTax(_qty, _transDate, _tax, _skipRounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountForced</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmountForced(Qty _qty = this.PurchQty, PriceDiscPolicyCheckPolicy _checkPolicy = null)
    {
        return this.salesPurchLineInterface().calcLineAmountForced(_qty, _checkPolicy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineDiscExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public DiscAmount calcLineDiscExclTax(Qty qty = this.PurchQty, TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null)
    {
        return this.salesPurchLineInterface().calcLineDiscExclTax(qty, this.taxDate(transDate), _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPrice2LineAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcPrice2LineAmount(Qty _qty, boolean _forceLineAmountCalculation)
    {
        return this.salesPurchLineInterface().calcPrice2LineAmount(_qty, _forceLineAmountCalculation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyOrdered</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public InventQty calcQtyOrdered(Qty    purchQty = this.PurchQty)
    {
        return this.salesPurchLineInterface().calcQtyOrdered(purchQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditDisc</Name>
				<Source><![CDATA[
    // This method is called when setting disc fields
    public boolean canEditDisc()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caseId</Name>
				<Source><![CDATA[
    display PurchRFQCaseId caseId()
    {
        return PurchRFQTable::find(this.rfqId).rfqCaseId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>category</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the associated category record.
    /// </summary>
    /// <param name="_categoryId">
    /// The category RecId to use. Defaults to the CategoryId field of the RFQ line.
    /// </param>
    /// <param name="_forUpdate">
    /// Is it being retrieved for update? Deafults to false.
    /// </param>
    /// <returns>
    /// The associated category record.
    /// </returns>
    EcoResCategory category(PurchCategory _categoryId   = this.CategoryId,
                            boolean _forUpdate          = false)
    {
        return EcoResCategory::find(_categoryId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryIdChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>PurchRFQLine</c> fields because the procurement category changed.
    /// </summary>
    void categoryIdChanged()
    {
        this.initFromEcoResCategory(this.category());
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the category name that is associated with the Request For Quote (RFQ) line.
    /// </summary>
    /// <returns>
    /// The category name that is associated with the RFQ line.
    /// </returns>
    display EcoResCategoryName categoryName()
    {
        return this.category().Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCFOP_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// It validates if CFOP has the correct attributes
    /// (Operation ID, Transaction Type, Direction and Location)
    /// </summary>
    /// <returns>
    /// It returns true if it is valid.
    /// </returns>
    public boolean checkCFOP_BR()
    {
        boolean                     ok = true;
        CFOPValidation_BR           cfopValidation;

        cfopValidation = CFOPValidation_BR::construct(this);

        ok = ok && cfopValidation.checkCFOP();

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDelete</Name>
				<Source><![CDATA[
    boolean checkDelete()
    {
        return this.type().checkDelete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdate</Name>
				<Source><![CDATA[
    boolean checkUpdate()
    {
        return this.type().checkUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAddressReference</Name>
				<Source><![CDATA[
    public void clearAddressReference()
    {
        this.AddressRefRecId    = 0;
        this.AddressRefTableId  = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactPersonName</Name>
				<Source><![CDATA[
    display ContactPersonName contactPersonName()
    {
        return ContactPerson::find(PurchRFQTable::find(this.rfqId).ContactPerson).personName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactPersonPhone</Name>
				<Source><![CDATA[
    display Phone contactPersonPhone()
    {
        return ContactPerson::find(PurchRFQTable::find(this.rfqId).ContactPerson).phone();
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCurrencyCode</Name>
				<Source><![CDATA[
    void convertCurrencyCode(CurrencyCode _currencyCode, TradeCurencyConversion _tradeCurrencyConversion = TradeCurencyConversion::ExchRate)
    {
        MarkupTrans markupTrans;
        // <GIN>
        PurchRFQLineTaxExtensionIN purchRFQLineTaxExtensionIN;
        // </GIN>

        ttsbegin;

        while select forupdate markupTrans
              index hint TableRecIdIdx
              where markupTrans.TransTableId  == this.TableId &&
                    markupTrans.TransRecId    == this.RecId   &&
                   !markupTrans.IsDeleted
        {
            markupTrans.convertCurrencyCode(_currencyCode);
            markupTrans.doUpdate();
        }

        this.PurchPrice   = ExchangeRateHelper::curPrice2CurPrice(this.PurchPrice, this.CurrencyCode, _currencyCode);
        this.LineDisc     = ExchangeRateHelper::curPrice2CurPrice(this.LineDisc, this.CurrencyCode, _currencyCode);
        this.MultiLnDisc  = ExchangeRateHelper::curPrice2CurPrice(this.MultiLnDisc, this.CurrencyCode, _currencyCode);
        this.PurchMarkup  = ExchangeRateHelper::curPrice2CurPrice(this.PurchMarkup, this.CurrencyCode, _currencyCode);

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            purchRFQLineTaxExtensionIN = PurchRFQLineTaxExtensionIN::findBypurchRFQLine(this.RecId);
            purchRFQLineTaxExtensionIN.MaximumRetailPrice = CurrencyExchangeHelper::curAmount2CurAmount(purchRFQLineTaxExtensionIN.MaximumRetailPrice, this.CurrencyCode, _currencyCode);
            purchRFQLineTaxExtensionIN.write();
        }
        // </GIN>
        this.LineAmount   = CurrencyExchangeHelper::curAmount2CurAmount(this.LineAmount, this.CurrencyCode, _currencyCode);
        this.CurrencyCode = _currencyCode;

        this.updateBasedOnTradeCurrencyConversion(_tradeCurrencyConversion);

        this.LineAmount   = this.calcLineAmount();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBasedOnTradeCurrencyConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the line amounts, price and discounts based on <c>TradeCurencyConversion</c>.
    /// </summary>
    /// <param name = "_tradeCurrencyConversion">A trade currency conversion value.</param>
    [Hookable]
    private void updateBasedOnTradeCurrencyConversion(TradeCurencyConversion _tradeCurrencyConversion)
    {
        switch (_tradeCurrencyConversion)
        {
            case TradeCurencyConversion::ExchRate:
                break;
            case TradeCurencyConversion::TradeAgreements:
                this.salesPurchLineInterface().resetPriceAgreement();
                this.setPriceDisc(this.inventDim());
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a dimension set that can be applied to the <c>DefaultDimension</c> field in the
    /// <c>PurchRFQLine</c> table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set that should be applied to the <c>DefaultDimension</c> field in the
    /// <c>PurchRFQLine</c> table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was previously instantiated using the current
    /// <c>PurchRFQLine</c> buffer; optional.
    /// </param>
    /// <returns>
    /// Dimension set that can be applied to the <c>DefaultDimension</c> field in the <c>PurchRFQLine</c>
    /// table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.This method makes sure
    /// that potential linked dimensions are not overwritten.
    /// </remarks>
    public DimensionDefault copyDimension(DimensionDefault _defaultDimension, DimensionCopy _dimensionCopy = DimensionCopy::newFromTable(this, CompanyInfo::findDataArea(curext()).RecId))
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAlternateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an alternate for the current line.
    /// </summary>
    /// <param name="_createAlternateParameters">
    /// The <c>PurchRFQLineCreateAlternateParameters</c> class object.
    /// </param>
    /// <returns>
    /// The record of the new alternate line.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    internal PurchRFQLine createAlternateLine(PurchRFQLineCreateAlternateParameters _createAlternateParameters)
    {
        ttsbegin;
        PurchRFQLine alternatePurchRFQLine;
        
        if (this.validateCreateAlternate())
        {
            this.initializeAlternatePurchRFQLine(alternatePurchRFQLine);
            
            // For sealed bids alternate RFQ line is created on unseal at which point the reply is already received
            if (_createAlternateParameters.BidType == PurchRFQBidType::Sealed)
            {
                alternatePurchRFQLine.ItemName = _createAlternateParameters.ItemName;
                alternatePurchRFQLine.Name = _createAlternateParameters.Name;
                alternatePurchRFQLine.Status = PurchRFQStatus::Received;
            }

            alternatePurchRFQLine.insert();

            PurchRFQReplyLine purchRFQReplyLine = purchRFQReplyLine::findRFQLine(this.RecId);

            purchRFQReplyLine.createAlternateLine(this, alternatePurchRFQLine, _createAlternateParameters.BidType);
        }

        ttscommit;

        return alternatePurchRFQLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeAlternatePurchRFQLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the data buffer of the <c>PurchRFQLine</c> table for the alternate line.
    /// </summary>
    /// <param name = "_alternatePurchRFQLine">
    /// The alternate line data buffer of the <c>PurchRFQLine</c> table.
    /// </param>
    protected void initializeAlternatePurchRFQLine(PurchRFQLine _alternatePurchRFQLine)
    {
        PurchRFQCaseLine purchRFQCaseLine = this.purchRFQCaseLine();

        // copy the line values from the original line
        _alternatePurchRFQLine.initFromPurchRFQCaseLine(purchRFQCaseLine);

        // link the line to the header
        _alternatePurchRFQLine.RFQId = this.RFQId;

        // clear the item ID
        _alternatePurchRFQLine.ItemId = "";
        _alternatePurchRFQLine.ExternalItemId = "";

        // change the line to a category line
        _alternatePurchRFQLine.LineType = PurchRFQLineItemType::Category;

        // mark the line as an alternate line
        _alternatePurchRFQLine.IsAlternate = NoYes::Yes;
        _alternatePurchRFQLine.LineNum = this.generateNewLineNum();
        _alternatePurchRFQLine.Status = PurchRFQStatus::Sent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createdManually</Name>
				<Source><![CDATA[
    public boolean createdManually()
    {
        return this.rfqCaseLineRefRecId ? false : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMarkupTrans</Name>
				<Source><![CDATA[
    void  createMarkupTrans(PurchRFQTable  purchRFQTable)
    {
        Markup::insertMarkupTrans(HeadingLine::Line,
                                  MarkupModuleType::Vend,
                                  this,
                                  purchRFQTable.VendAccount,
                                  purchRFQTable.MarkupGroup,
                                  purchRFQTable.CurrencyCode,
                                  purchRFQTable.LanguageId,
                                  this.ItemId,
                                  this.inventTable().purchMarkupGroup()/*,
                                 (this.LineAmount < 0)*/);   // invert sign on creditnotes
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchRFQReplyLine</Name>
				<Source><![CDATA[
    private void createPurchRFQReplyLine()
    {
        PurchRFQReplyLine purchRFQReplyLine = this.initializePurchRFQReplyLine();
        purchRFQReplyLine.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePurchRFQReplyLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>PurchRFQReplyLine</c> record.
    /// </summary>
    /// <returns>The <c>PurchRFQReplyLine</c> record.</returns>
    protected PurchRFQReplyLine initializePurchRFQReplyLine()
    {
        PurchRFQReplyLine purchRFQReplyLine;

        purchRFQReplyLine.rfqId         = this.rfqId;
        purchRFQReplyLine.rfqLineRecId  = this.RecId;
        purchRFQReplyLine.LineNum       = this.LineNum;
        purchRFQReplyLine.Name          = this.Name;

        return purchRFQReplyLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }
        
        #ISOCountryRegionCodes

        PurchRFQLineType purchRFQLineType = this.type();

        using (var activityContext = PurchRFQLine::instrumentationLogger().lineInstrumentationActivities().delete(this))
        {
            purchRFQLineType.deleting();

            if (TaxIntegrationUtils::isTransitDocumentEnabled())
            {
                this.TransitDocumentTransactionMap_IN::deleteTransitDocuments();
            }

            // If the current line is not an alternate then we want to delete the current line and its alternates if it has any.
            if (this.IsAlternate == NoYes::No)
            {
                PurchRFQLine        purchRFQLine;

                delete_from purchRFQLine
                    where purchRFQLine.RFQCaseLineRefRecId == this.RFQCaseLineRefRecId
                        && purchRFQLine.IsAlternate == NoYes::Yes;
            }

            if (this.LineType == PurchRFQLineItemType::Item && this.InventTransId)
            {
                InventUpd_DeleteMovement deleted = InventUpd_DeleteMovement::newMovement(InventMovement::construct(this), false);
                if (deleted)
                {
                    deleted.updateNow();
                }
            }

            PurchRFQReplyLine::findRFQLine(this.RecId, true).delete();

            super();

            PurchRFQTable::find(this.rfqId, true).updateStatus();

            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                TaxDocumentLinePurchRFQUtil::markCurrentTaxDocumentTaxStatus(this.purchRFQTable(), TaxDocumentCalculationLevel::Dirty);
            }

            purchRFQLineType.deleted();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDate</Name>
				<Source><![CDATA[
    PurchLineDlvDate deliveryDate(PurchLineDlvDate blankDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        if (this.ConfirmedDlv)
            return this.ConfirmedDlv;

        if (this.DeliveryDate)
            return this.DeliveryDate;

        if (this.purchRFQTable().DeliveryDate)
            return this.purchRFQTable().DeliveryDate;

        return blankDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryLocation</Name>
				<Source><![CDATA[
    public LogisticsLocationRecId deliveryLocation()
    {
        return LogisticsPostalAddress::getLocation(this.DeliveryPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryTerm</Name>
				<Source><![CDATA[
    DlvTermId  deliveryTerm()
    {
        return this.purchRFQTable().DlvTerm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discAmount</Name>
				<Source><![CDATA[
    DiscAmount  discAmount()
    {
        return PriceDisc::discAmount(PurchParameters::find().Disc, this.LineDisc, this.MultiLnDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    DiscPct   discPercent()
    {
        return PriceDisc::discPercent(PurchParameters::find().Disc, this.LinePercent, this.MultiLnPercent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonCode</Name>
				<Source><![CDATA[
    public edit PurchRFQReasonIdRef editReasonCode(boolean set, ReasonCode _reasonCode)
    {
        ReasonCode      reasonCode = strLRTrim(_reasonCode);
        int64           originalReasonRef;
        FormDataSource  formLedgerJournalTrans;
        ReasonTable reasonTable;

        if (set)
        {
            // Ensure that reason code is valid:
            reasonTable = ReasonTable::find(_reasonCode);
            if (_reasonCode && (reasonTable.RecId == 0 || reasonTable.Vend == false))
            {
                throw error(strFmt("@SYS112224", reasonCode, fieldPName(ReasonTable, Reason), tablePName(ReasonTable)));
            }

            //
            // If the ReasonRef is 0, then create a new ReasonTableRef record
            // otherwise, update the existing record.
            //

            if (this.ReasonRef == 0)
            {
                this.ReasonRef = ReasonTableRef::createFromCode(reasonCode);
            }
            else
            {
                if (reasonCode != '')
                {
                    //
                    // The reasonCode value is not blank.
                    // Save the current ReasonRef for comparision.
                    //
                    originalReasonRef = this.ReasonRef;
                    this.ReasonRef = ReasonTableRef::updateCode(reasonCode, this.ReasonRef);

                    if (this.ReasonRef == originalReasonRef)
                    {
                        //
                        // The reason code has changed but the referenced record ID has not.
                        // Get the current FormDataSource and set forceWrite() to true so that
                        // data validation (validateWrite()) is performed on the updated reason code.
                        //
                        formLedgerJournalTrans = FormDataUtil::getFormDataSource(this);
                        formLedgerJournalTrans.forceWrite(true);
                    }
                }
                else
                {
                    // The reasonCode is blank.
                    this.ReasonRef = ReasonTableRef::updateCode(reasonCode, this.ReasonRef);
                }
            }

            //
            // Update the reason comment with the default comment value for the updated reason code.
            // A blank reasonCode will result in a blank comment because a blank reasonCode
            // will return an empty reasonTable buffer.
            //
            this.editReasonComment(true, ReasonTable::find(reasonCode).Description);
            // Base code ends
        }
        else
        {
            reasonCode = ReasonTableRef::find(this.ReasonRef).Reason;
        }

        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonComment</Name>
				<Source><![CDATA[
    public edit PurchRFQReasonIDComment editReasonComment(boolean _set, ReasonComment _reasonComment)
    {
        ReasonComment   reasonComment = _reasonComment;
        if (_set)
        {
            // If the ReasonRef is 0, then create a new ReasonTableRef record
            // otherwise, update the existing record.
            if (this.ReasonRef == 0)
            {
                this.ReasonRef = ReasonTableRef::createFromComment(reasonComment);
            }
            else
            {
                this.ReasonRef = ReasonTableRef::updateComment(reasonComment,this.ReasonRef);
            }
        }

        if (this.ReasonRef)
        {
            reasonComment = ReasonTableRef::find(this.ReasonRef).ReasonComment;
        }

        return reasonComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public boolean endDisc()
    {
        return this.salesPurchLineInterface().endDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>existAlternateForVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an alternate line exists for the current line and vendor.
    /// </summary>
    /// <returns>
    /// true if an alternate line exists for the current line and vendor; otherwise, false.
    /// </returns>
    public boolean existAlternateForVendor()
    {
        PurchRFQLine    purchRFQLine;

        if (this.RecId)
        {
            select firstonly RecId from purchRFQLine
                where purchRFQLine.RFQCaseLineRefRecId == this.RFQCaseLineRefRecId
                    && purchRFQLine.IsAlternate == NoYes::Yes
                    && purchRFQLine.RFQId == this.RFQId;
        }

        return purchRFQLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findParentForAlternate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the parent for the current line if the current line is an alternate line.
    /// </summary>
    /// <returns>
    /// The parent of the current alternate line.
    /// </returns>
    public PurchRFQLine findParentForAlternate()
    {
        PurchRFQLine purchRFQLineALternateParent;

        if (this.IsAlternate == NoYes::Yes)
        {
            select purchRFQLineAlternateParent
                where purchRFQLineAlternateParent.RFQCaseLineRefRecId == this.RFQCaseLineRefRecId
                    && purchRFQLineAlternateParent.IsAlternate == NoYes::No
                    && purchRFQLineAlternateParent.RFQId == this.RFQId;
        }

        return purchRFQLineALternateParent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateNewLineNum</Name>
				<Source><![CDATA[
    private LineNum generateNewLineNum()
    {
        PurchRFQLine purchRFQLineMaxLineNum;

        select maxof(LineNum) from purchRFQLineMaxLineNum
        where purchRFQLineMaxLineNum.RFQId == this.RFQId;

        return purchRFQLineMaxLineNum.LineNum + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMiscChargesAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the amount based on the line amount passed.
    /// </summary>
    /// <param name="_lineamount">
    /// The amount of the particular line.
    /// </param>
    /// <returns>
    /// Returns the amount.
    /// </returns>
    public Amount getMiscChargesAmount_IN(AmountCur _lineamount)
    {
        this.LineAmount = _lineamount;
        return this.SalesPurchJournalLine::getMiscChargesAmountPlusLineAmount(this.TableId, this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOnlyLineAmount</Name>
				<Source><![CDATA[
    boolean hasOnlyLineAmount()
    {
        return this.PriceDiscLine::hasOnlyLineAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether there is at least one document attached to the current request for quotation.
    /// </summary>
    /// <returns>
    /// true if the request for quotation has documents; otherwise, false.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    public display PurchRFQVendHasDocuments hasDocuments()
    {
        return this.RecId && DocuRef::exist(this.DataAreaId, this.TableId, this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public boolean inclTax()
    {
        return this.salesPurchLineInterface().inclTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAgreementLine</Name>
				<Source><![CDATA[
    private void initAgreementLine(AgreementLine _agreementLine)
    {
        // Use defaults for the following fields
        _agreementLine.IsPriceInformationMandatory  = NoYes::No;
        _agreementLine.IsMaxEnforced                = NoYes::No;
        _agreementLine.IsDeleted                    = NoYes::No;
        _agreementLine.IsModified                   = NoYes::No;

        // Init the following fields from the RFQ line
        _agreementLine.LineNumber                   = this.LineNum;
        _agreementLine.InventDimId                  = this.InventDimId;
        _agreementLine.DefaultDimension             = this.DefaultDimension;
        _agreementLine.InventDimDataAreaId          = appl.company().dataArea(tableNum(InventDim));
        _agreementLine.LineDiscountPercent          = this.LinePercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAgreementLineQuantity</Name>
				<Source><![CDATA[
    void initAgreementLineQuantity(AgreementLineQuantityCommitment _agreementLineQuantity)
    {
        InventTable             inventTable;
        EcoResProductCategory   ecoResProductCategory;

        this.initAgreementLine(_agreementLineQuantity);

        // Setup an Item Based Agreement Line
        _agreementLineQuantity.ItemId                           = this.ItemId;
        _agreementLineQuantity.ItemDataAreaId                   = appl.company().dataArea(tableNum(InventTable));
        _agreementLineQuantity.ProductUnitOfMeasure             = this.PurchUnit;
        _agreementLineQuantity.PriceUnit                        = this.PriceUnit;
        _agreementLineQuantity.CommitedQuantity                 = this.PurchQty;
        _agreementLineQuantity.PdsCWCommitedQuantity            = this.PdsCWQty;
        _agreementLineQuantity.PricePerUnit                     = this.PurchPrice;
        _agreementLineQuantity.LineDiscountAmount               = this.LineDisc;

        if (_agreementLineQuantity.canEditCategory())
        {
            _agreementLineQuantity.Category                     = this.CategoryId;

            if  (!_agreementLineQuantity.Category)
            {
                select  Product
                from    inventTable
                where   inventTable.ItemId == this.ItemId
                join    Category
                from    ecoResProductCategory
                where   ecoResProductCategory.Product == inventTable.Product;

                _agreementLineQuantity.Category = ecoResProductCategory.Category;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAgreementLineVolume</Name>
				<Source><![CDATA[
    void initAgreementLineVolume(AgreementLineVolumeCommitment _agreementLineVolume)
    {
        this.initAgreementLine(_agreementLineVolume);

        // Setup a Category Based Agreement Line
        _agreementLineVolume.Category = this.CategoryId;

        // The following assignment converts a quantity order into a volume order.
        // Mandatory for Category Based Agreement Lines.
        _agreementLineVolume.CommitedAmount = this.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromEcoResCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>PurchRFQLine</c> fields based on the procurement category.
    /// </summary>
    /// <param name="_ecoResCategory">
    /// The procurement category.
    /// </param>
    void initFromEcoResCategory(EcoResCategory _ecoResCategory)
    {
        if (this.ProjId)
        {
            ProjInventJournalTransMapForm::construct(this).initFromEcoResCategory(_ecoResCategory);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPriceDisc</Name>
				<Source><![CDATA[
    public void initFromPriceDisc(PriceDisc_Price priceDisc, PriceDiscPolicyCheckPolicy _checkPolicy = null, boolean _initDateFields = true)
    {
        // <GIN>
        PurchRFQLineTaxExtensionIN purchRFQLineTaxExtensionIN;
        // </GIN>

        this.PurchPrice         = priceDisc.price();
        this.PriceUnit          = priceDisc.priceUnit();
        this.PurchMarkup        = priceDisc.priceMarkup();
        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            purchRFQLineTaxExtensionIN = this.purchRFQLineTaxExtensionIN();
            purchRFQLineTaxExtensionIN.MaximumRetailPrice = priceDisc.maxRetailPrice_IN();
            this.packpurchRFQLineTaxExtensionIN(purchRFQLineTaxExtensionIN);
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchRFQCaseLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes corresponding fields in the current <c>PurchRFQLine</c> record buffer, from a
    /// <c>PurchRFQCaseLine</c> record buffer.Initializes the corresponding fields in the current
    /// <c>PurchRFQLine</c> record buffer from a <c>PurchRFQCaseLine</c> record buffer.
    /// </summary>
    /// <param name="_purchRFQCaseLine">
    /// The <c>PurchRFQCaseLine</c> record buffer.
    /// </param>
    void initFromPurchRFQCaseLine(PurchRFQCaseLine _purchRFQCaseLine)
    {
        // <GIN>
        PurchRFQLineTaxExtensionIN purchRFQLineTaxExtensionIN;
        // </GIN>

        this.AddressRefRecId                = _purchRFQCaseLine.AddressRefRecId;
        this.AddressRefTableId              = _purchRFQCaseLine.AddressRefTableId;
        this.AssetBookId                    = _purchRFQCaseLine.AssetBookId;
        this.AssetId                        = _purchRFQCaseLine.AssetId;
        this.AssetTransTypePurch            = _purchRFQCaseLine.AssetTransTypePurch;
        this.CategoryId                     = _purchRFQCaseLine.CategoryId;
        this.ConfirmedDlv                   = _purchRFQCaseLine.ConfirmedDlv;
        this.CurrencyCode                   = _purchRFQCaseLine.CurrencyCode;
        this.DeliveryPostalAddress          = _purchRFQCaseLine.DeliveryPostalAddress;
        this.DeliveryName                   = _purchRFQCaseLine.DeliveryName;
        this.DefaultDimension               = this.copyDimension(_purchRFQCaseLine.DefaultDimension);
        this.AccountingDistributionTemplate = _purchRFQCaseLine.AccountingDistributionTemplate;
        this.ExpiryDateTime                 = _purchRFQCaseLine.ExpiryDateTime;
        this.ExternalItemId                 = _purchRFQCaseLine.ExternalItemId;
        this.setInventDimId(_purchRFQCaseLine.InventDimId);
        this.InventRefId                    = _purchRFQCaseLine.InventRefId;
        this.InventRefTransId               = _purchRFQCaseLine.InventRefTransId;
        this.InventRefType                  = _purchRFQCaseLine.ItemRefType;
        this.InventTransId                  = _purchRFQCaseLine.InventTransId;
        this.ItemId                         = _purchRFQCaseLine.ItemId;
        this.ItemName                       = _purchRFQCaseLine.ItemName;
        this.LineType                       = _purchRFQCaseLine.LineItemType;
        this.RFQCaseLineLineNumber          = _purchRFQCaseLine.LineNumber;
        this.LineNum                        = _purchRFQCaseLine.LineNum;
        this.Name                           = _purchRFQCaseLine.Name;
        this.PriceUnit                      = _purchRFQCaseLine.PriceUnit;
        this.QtyOrdered                     = _purchRFQCaseLine.QtyOrdered;
        this.rfqType                        = _purchRFQCaseLine.rfqType;
        this.rfqCaseLineRefRecId            = _purchRFQCaseLine.RecId;
        this.ReqPlanIdSched                 = _purchRFQCaseLine.ReqPlanIdSched;
        this.ReqPOId                        = _purchRFQCaseLine.ReqPOId;

        this.PdsCWQty               = _purchRFQCaseLine.PdsCWQty;
        
        PurchRFQCaseTable caseTable = PurchRFQCaseTable::find(_purchRFQCaseLine.RFQCaseId);
        boolean isSupportForDefaultRequestForQuotationReplyFieldsEnabled = FeatureStateProvider::isFeatureEnabled(PurchRFQCaseFieldsTransferToReplyFeature::instance());

        if (!isSupportForDefaultRequestForQuotationReplyFieldsEnabled
            || (isSupportForDefaultRequestForQuotationReplyFieldsEnabled && caseTable.IsRFQVendReplyLineDeliveryDateEnabled))
        {
            this.DeliveryDate = _purchRFQCaseLine.DeliveryDate;
        }

        if (!isSupportForDefaultRequestForQuotationReplyFieldsEnabled
            || (isSupportForDefaultRequestForQuotationReplyFieldsEnabled && caseTable.IsRFQVendReplyLineLineAmountEnabled))
        {
            this.LineAmount = _purchRFQCaseLine.LineAmount;
        }

        if (!isSupportForDefaultRequestForQuotationReplyFieldsEnabled
            || (isSupportForDefaultRequestForQuotationReplyFieldsEnabled && caseTable.IsRFQVendReplyLineLineDiscountEnabled))
        {
            this.LineDisc = _purchRFQCaseLine.LineDisc;
        }

        if (!isSupportForDefaultRequestForQuotationReplyFieldsEnabled
            || (isSupportForDefaultRequestForQuotationReplyFieldsEnabled && caseTable.IsRFQVendReplyLineLinePercentageEnabled))
        {
            this.LinePercent = _purchRFQCaseLine.LinePercent;
        }

        if (!isSupportForDefaultRequestForQuotationReplyFieldsEnabled
            || (isSupportForDefaultRequestForQuotationReplyFieldsEnabled && caseTable.IsRFQVendReplyLineMultiLineDiscountEnabled))
        {
            this.MultiLnDisc = _purchRFQCaseLine.MultiLnDisc;
        }
        
        if (!isSupportForDefaultRequestForQuotationReplyFieldsEnabled
            || (isSupportForDefaultRequestForQuotationReplyFieldsEnabled && caseTable.IsRFQVendReplyLineMultiLinePercentageEnabled))
        {
            this.MultiLnPercent = _purchRFQCaseLine.MultiLnPercent;
        }

        if (!isSupportForDefaultRequestForQuotationReplyFieldsEnabled
            || (isSupportForDefaultRequestForQuotationReplyFieldsEnabled && caseTable.IsRFQVendReplyLineUnitPriceEnabled))
        {
            this.PurchPrice = _purchRFQCaseLine.PurchPrice;
        }
        
        if (!isSupportForDefaultRequestForQuotationReplyFieldsEnabled
            || (isSupportForDefaultRequestForQuotationReplyFieldsEnabled && caseTable.IsRFQVendReplyLinePurchaseChargesEnabled))
        {
            this.PurchMarkup = _purchRFQCaseLine.PurchMarkup;
        }

        if (!isSupportForDefaultRequestForQuotationReplyFieldsEnabled
            || (isSupportForDefaultRequestForQuotationReplyFieldsEnabled && caseTable.IsRFQVendReplyLineQuantityEnabled))
        {
            this.PurchQty = _purchRFQCaseLine.PurchQty;
        }
        
        if (!isSupportForDefaultRequestForQuotationReplyFieldsEnabled
            || (isSupportForDefaultRequestForQuotationReplyFieldsEnabled && caseTable.IsRFQVendReplyLineUnitEnabled))
        {
            this.PurchUnit = _purchRFQCaseLine.PurchUnit;
        }

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            purchRFQLineTaxExtensionIN = this.purchRFQLineTaxExtensionIN();
            purchRFQLineTaxExtensionIN.MaximumRetailPrice = _purchRFQCaseLine.MaximumRetailPrice_IN;
            this.packpurchRFQLineTaxExtensionIN(purchRFQLineTaxExtensionIN);
        }
        // </GIN>

        if (_purchRFQCaseLine.ProjId)
        {
            this.ActivityNumber      = _purchRFQCaseLine.ActivityNumber;
            this.ProjId              = _purchRFQCaseLine.ProjId;
            this.ProjCategoryId      = _purchRFQCaseLine.ProjCategoryId;
            this.ProjLinePropertyId  = _purchRFQCaseLine.ProjLinePropertyId;
            this.ProjSalesCurrencyId = _purchRFQCaseLine.ProjSalesCurrencyId;
            this.ProjSalesPrice      = _purchRFQCaseLine.ProjSalesPrice;
            this.ProjSalesUnitId     = _purchRFQCaseLine.ProjSalesUnitId;
            this.ProjTaxGroupId      = _purchRFQCaseLine.ProjTaxGroupId;
            this.ProjTaxItemGroupId  = _purchRFQCaseLine.ProjTaxItemGroupId;
            this.ProjTransId         = _purchRFQCaseLine.ProjTransId;
        }

        // <GBR>
        if (BrazilParameters::isEnabled() && this.LineType == PurchRFQLineItemType::Item)
        {
            InventTable inventTable = InventTable::find(this.ItemId);
            this.TaxServiceCode_BR = inventTable.TaxServiceCode_BR;
        }
        // </GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchRFQReplyLine</Name>
				<Source><![CDATA[
    void initFromPurchRFQReplyLine(PurchRFQReplyLine _purchRFQReplyLine)
    {
        this.DeliveryDate   = _purchRFQReplyLine.DeliveryDate;
        this.PurchQty       = _purchRFQReplyLine.PurchQty;
        this.QtyOrdered     = _purchRFQReplyLine.QtyOrdered;
        this.PurchUnit      = _purchRFQReplyLine.PurchUnit;
        this.PurchPrice     = _purchRFQReplyLine.PurchPrice;
        this.LineDisc       = _purchRFQReplyLine.LineDisc;
        this.LinePercent    = _purchRFQReplyLine.LinePercent;
        this.PriceUnit      = _purchRFQReplyLine.PriceUnit;
        this.LineAmount     = _purchRFQReplyLine.LineAmount;
        this.ExternalItemId = _purchRFQReplyLine.ExternalItemId;
        this.MultiLnDisc    = _purchRFQReplyLine.MultiLnDisc;
        this.MultiLnPercent = _purchRFQReplyLine.MultiLnPercent;
        this.PurchMarkup    = _purchRFQReplyLine.PurchMarkup;
        this.Name           = _purchRFQReplyLine.Name;
        if (_purchRFQReplyLine.rfqId)
        {
            this.rfqId      = _purchRFQReplyLine.rfqId;
        }

        this.PdsCWQty       = _purchRFQReplyLine.PdsCWQty;
        if (this.ProjId)
        {
            this.calcProjSalesPrice();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchRFQTable</Name>
				<Source><![CDATA[
    void initFromPurchRFQTable(PurchRFQTable _purchRFQTable)
    {
        this.type().initFromPurchRFQTable(_purchRFQTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendExternalItemDescription</Name>
				<Source><![CDATA[
    void initFromVendExternalItemDescription(InventDim _inventDim = this.inventDim())
    {
        VendExternalItemDescription vendExternalItemDescription = new VendExternalItemDescription(this.ItemId, _inventDim, this.purchRFQTable().VendAccount);

        if (vendExternalItemDescription.findExternalDescription())
        {
            this.ExternalItemId = vendExternalItemDescription.externalItemId();
            if (vendExternalItemDescription.externalItemFreeTxt())
            {
                if (VendFormletterParameters::find().ExternalItemOverwriteAppend == OverwriteAppend::Overwrite)
                {
                    this.Name =  vendExternalItemDescription.externalItemFreeTxt();
                }
                else
                {
                    this.initName(this.inventTable());
                    if (this.Name)
                    {
                        this.Name += '\n';
                    }
                    this.Name += vendExternalItemDescription.externalItemFreeTxt();
                }
            }
        }
        else
        {
            this.ExternalItemId = '';
            this.initName(this.inventTable());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initName</Name>
				<Source><![CDATA[
    void initName(InventTable inventTable = InventTable::find(this.ItemId))
    {
        this.Name = PurchParameters::nameAndOrDescription(inventTable,
                                        this.purchRFQTable().LanguageId,
                                        this.InventDimId,
                                        this.category());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchQty</Name>
				<Source><![CDATA[
    void initPurchQty()
    {
        this.type().initPurchQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.type().initValue();

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            this.SalesPurchJournalLine::initFromCompanyInformation();
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert(boolean _dropInvent = false, boolean _dropReplyLine = true , boolean _updateRfqTableStatus = true)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }
        
        PurchRFQLineType purchRFQLineType = this.type();

        using (var activityContext = PurchRFQLine::instrumentationLogger().lineInstrumentationActivities().insert(this))
        {
            purchRFQLineType.inserting();

            if (this.createdManually())
            {
                this.initFromPurchRFQReplyLine(PurchRFQReplyLine::find(this.rfqId, this.LineNum));
                this.Status = PurchRFQStatus::Received;
            }

            InventUpd_Estimated estimated;

            if (this.LineType == PurchRFQLineItemType::Item)
            {
                if (!_dropInvent && this.inventTable().isStocked())
                {
                    this.InventTransId = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();

                    estimated = InventUpd_Estimated::newInventMovement(InventMovement::construct(this));
                    estimated.updateNow();
                }
            }

            super();

            if (estimated)
            {
                estimated.updateOwnerRelationship();
            }

            if (!_dropReplyLine)
            {
                this.createPurchRFQReplyLine();
            }
            else
            {
                PurchRFQReplyLine purchRFQReplyLine = PurchRFQReplyLine::find(this.rfqId, this.LineNum, true);
                if (purchRFQReplyLine.RecId)
                {
                    purchRFQReplyLine.rfqLineRecId = this.RecId;
                    purchRFQReplyLine.update();
                }
            }

            if (_updateRfqTableStatus)
            {
                PurchRFQTable::find(this.rfqId, true).updateStatus();
            }

            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                TaxDocumentLinePurchRFQUtil::markCurrentTaxDocumentTaxStatus(this.purchRFQTable(), TaxDocumentCalculationLevel::Dirty);
            }

            purchRFQLineType.inserted();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    InventDim inventDim(boolean  update = false)
    {
        return InventDim::find(this.InventDimId, update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    InventTable inventTable(ItemId     itemId = this.ItemId,
                            boolean    update = false)
    {
        return InventTable::find(itemId, update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAwarded_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current request for quotation line has been awarded.
    /// </summary>
    /// <returns>
    /// true if awarded; otherwise, false.
    /// </returns>
    public display IsAwarded_PSN isAwarded_PSN()
    {
        return this.Status == PurchRFQStatus::Accepted?
            NoYes::Yes:
            NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the order line is category based.
    /// </summary>
    /// <returns>
    /// true if the order line is category based; otherwise, false.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public boolean isCategoryBased()
    {
        return this.salesPurchLineInterface().isCategoryBased();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the RFQ line is tracked in inventory.
    /// </summary>
    /// <returns>
    /// true if the RFQ line is tracked in inventory; otherwise, false.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public boolean isStocked()
    {
        return this.salesPurchLineInterface().isStocked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemIdChanged</Name>
				<Source><![CDATA[
    void itemIdChanged()
    {
        this.type().itemIdChanged();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemLineDisc</Name>
				<Source><![CDATA[
    LineDiscCode itemLineDisc()
    {
        return this.inventTable().purchLineDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastJournalTransByStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the last request for quotation journal transaction for the request for quotation line.
    /// </summary>
    /// <param name = "_status">
    /// The status of the request for quotation line.
    /// </param>
    /// <returns>
    /// The record of the <c>VendRFQTrans</c> table.
    /// </returns>
    public VendRFQTrans lastJournalTransByStatus(PurchRFQStatus _status)
    {
        VendRFQTrans vendRFQTrans;

        select firstonly vendRFQTrans
            order by vendRFQTrans.CreatedDateTime desc
            where vendRFQTrans.RFQId   == this.RFQId
               && vendRFQTrans.LineNum == this.LineNum
               && vendRFQTrans.Status  == _status;

        return vendRFQTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    PurchLineAmount lineAmountExclTax(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null, boolean _skipRounding = false)
    {
        return this.salesPurchLineInterface().lineAmountExclTax(_transDate, _tax, _skipRounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountModified</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public void lineAmountModified()
    {
        this.salesPurchLineInterface().lineAmountModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountMST</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountMST lineAmountMST(TransDate               exchRateDate            = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                   ExchRate                exchRate                = 0,
                                   ExchrateSecondary       exchrateSecondary       = 0,
                                   ExchRatesTriangulation  exchRatesTriangulation  = UnknownNoYes::Unknown)

    {
        return this.salesPurchLineInterface().lineAmountMST(exchRateDate, exchRate, exchrateSecondary, exchRatesTriangulation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountMSTExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountMST lineAmountMSTExclTax(TransDate               exchRateDate            = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                          ExchRate                exchRate                = 0,
                                          ExchrateSecondary       exchrateSecondary       = 0,
                                          ExchRatesTriangulation  exchRatesTriangulation  = UnknownNoYes::Unknown,
                                          Tax                     _tax                    = null)

    {
        return this.salesPurchLineInterface().lineAmountMSTExclTax(exchRateDate, exchRate, exchrateSecondary, exchRatesTriangulation, _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDisc</Name>
				<Source><![CDATA[
    LineDiscCode  lineDisc()
    {
        return this.purchRFQTable().LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkInventDim2Dimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies default <c>PurchRFQLine.dimension</c> values, depending on the <c>InventDim</c> record
    /// buffer values.
    /// </summary>
    /// <param name="_newInventDim">
    /// The <c>InventDim</c> record buffer linked to the current <c>PurchRFQLine</c> record buffer.
    /// </param>
    /// <param name="_oldInventDim">
    /// The <c>InventDim</c> record buffer that was previously linked to the current <c>PurchRFQLine</c>
    /// record buffer.
    /// </param>
    public void linkInventDim2Dimension(InventDim _newInventDim, InventDim _oldInventDim)
    {
        _newInventDim.setInventSiteFromParentIfModified(this, _oldInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was initialized with the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potentially linked dimensions are not overwritten when they are merged.
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(PurchRFQLine, DeliveryPostalAddress):
                this.clearAddressReference();
                // <GBR>
                if (BrazilParameters::isEnabled())
                {
                    this.setCFOP_BR();
                }
                // </GBR>
                break;

            case fieldNum(PurchRFQLine, LineType):
            case fieldNum(PurchRFQLine, ItemId):
                this.type().updateInventDim();
                if (this.ProjId)
                {
                    this.calcProjSalesPrice();
                }
                if (FormDataUtil::isFormDataSource(this))
                {
                    FormDataUtil::getFormDataSource(this).refresh();
                }
                break;
            case fieldNum(PurchRFQLine, CategoryId):
                this.categoryIdChanged();
                break;

            case fieldNum(PurchRFQLine, PurchUnit) :
                if (this.ProjId && this.PurchUnit && !this.ItemId && !this.ProjSalesUnitId)
                {
                    this.ProjSalesUnitId = this.PurchUnit;
                }
                if (this.ProjId)
                {
                    this.calcProjSalesPrice();
                }
                break;

            // <GBR>
            case fieldNum(PurchRFQLine, cfopTable_BR):
                if (BrazilParameters::isEnabled())
                {
                    this.setTaxGroupAndTaxItemGroupFields_BR();
                }
                break;
            // </GBR>

            case fieldNum(PurchRFQLine, PurchPrice):
            case fieldNum(PurchRFQLine, ProjId):
            case fieldNum(PurchRFQLine, ProjCategoryId):
            case fieldNum(PurchRFQLine, ProjSalesCurrencyId):
                if (this.ProjId)
                {
                    this.calcProjSalesPrice();
                }
                break;
        }

        // Update the RFQ status to received only if RFQ is in Sent status
        if (FormDataUtil::isFormDataSource(this))
        {
            Object callerForm = FormDataUtil::getFormDataSource(this).formRun();
            boolean shouldUpdateRFQStatus;

            if (formHasMethod(callerForm, identifierStr('shouldUpdateRFQStatus')))
            {
                shouldUpdateRFQStatus = callerForm.shouldUpdateRFQStatus();
            }

            if (this.RecId
                && this.Status == PurchRFQStatus::Sent
                && shouldUpdateRFQStatus)
            {
                this.Status = PurchRFQStatus::Received;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleType</Name>
				<Source><![CDATA[
    public ModuleInventPurchSales moduleType()
    {
        return ModuleInventPurchSales::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>noLinesAwaitingReply</Name>
				<Source><![CDATA[
    display PurchRFQNoLinesAwaitingReply noLinesAwaitingReply()
    {
        PurchRFQLine    rfqLine;
        select count (RecId) from rfqLine
            where rfqLine.rfqId == this.rfqId
               && rfqLine.Status == PurchRFQStatus::Sent;

        return rfqLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>noLinesInRFQ</Name>
				<Source><![CDATA[
    display PurchRFQNoLinesInRFQ noLinesInRFQ()
    {
        PurchRFQLine    rfqLine;
        select count (RecId) from rfqLine where rfqLine.rfqId == this.rfqId;
        return rfqLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderAccount</Name>
				<Source><![CDATA[
    CustVendAC  orderAccount()
    {
        return this.vendAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight unit for the item.
    /// </summary>
    /// <returns>
    /// The catch weight unit for the item.
    /// </returns>
    public display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceGroupId</Name>
				<Source><![CDATA[
    PriceGroupId  priceGroupId()
    {
        return this.purchRFQTable().PriceGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQCaseLine</Name>
				<Source><![CDATA[
    public PurchRFQCaseLine purchRFQCaseLine(boolean  _update = false)
    {
        return PurchRFQCaseLine::findRecId(this.rfqCaseLineRefRecId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQTable</Name>
				<Source><![CDATA[
    PurchRFQTable purchRFQTable(boolean  update = false)
    {
        return PurchRFQTable::find(this.rfqId, update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchTable</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public SalesPurchTable salesPurchTable()
    {
        return this.salesPurchLineInterface().salesPurchTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromInventDim</Name>
				<Source><![CDATA[
    void setAddressFromInventDim(InventDim _inventDim)
    {
        LogisticsLocationEntity     location;
        InventLocation  inventLocation;
        InventSite      inventSite;
        if (_inventDim.RecId)
        {
            inventLocation  = InventLocation::find(_inventDim.InventLocationId);
            location        = LogisticsLocationEntity::findLocation(inventLocation, LogisticsLocationRoleType::Delivery);

            if (location && location.parmLocationRecId())
            {
                this.setLocation(location.getLogisticsLocation());
            }
            else if (inventLocation.VendAccount)
            {
                this.setAddressFromVendTable(VendTable::find(inventLocation.VendAccount));
            }
            else
            {
                inventSite  = InventSite::find(_inventDim.InventSiteId);
                location    = LogisticsLocationEntity::findLocation(inventSite, LogisticsLocationRoleType::Delivery);

                if (location && location.parmLocationRecId())
                {
                    this.setLocation(location.getLogisticsLocation());
                }
                else
                {
                    this.setAddressFromPurchRFQTable();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromPurchRFQTable</Name>
				<Source><![CDATA[
    void  setAddressFromPurchRFQTable(PurchRFQTable  purchRFQTable = this.purchRFQTable())
    {
        this.DeliveryPostalAddress      = purchRFQTable.DeliveryPostalAddress;
        this.DeliveryName               = purchRFQTable.DeliveryName;
        this.AddressRefRecId            = purchRFQTable.RecId;
        this.AddressRefTableId          = purchRFQTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromVendTable</Name>
				<Source><![CDATA[
    void  setAddressFromVendTable(VendTable _vendTable)
    {
        LogisticsPostalAddress postalAddress = DirParty::primaryPostalAddress(_vendTable.Party);

        this.DeliveryName               = _vendTable.name();
        this.DeliveryPostalAddress      = postalAddress ? postalAddress.RecId : 0;
        this.AddressRefRecId            = _vendTable.RecId;
        this.AddressRefTableId          = _vendTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCFOP_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// It is responsible for setting CFOP code
    /// </summary>
    /// <param name="_askToUser">
    /// boolean to define if should request user intereaction
    /// </param>
    private void setCFOP_BR(boolean _askToUser = false)
    {
        CFOPValidation_BR           cfopValidation;

        cfopValidation       = CFOPValidation_BR::construct(this);
        this.cfopTable_BR    = cfopValidation.getDefaultCFOP(_askToUser);

        this.setTaxGroupAndTaxItemGroupFields_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the <c>InventDimId</c> parameter to the <c>PurchRFQLine.inventDimId</c> field and assigns
    /// default values, depending on the new inventory dimensions.
    /// </summary>
    /// <param name="_inventDimId">
    /// The <c>InventDimId</c> value that should be applied to the <c>PurchRFQLine.InventDimId</c> field.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record buffer related to the <c>InventDimId</c> parameters; optional.
    /// </param>
    public void setInventDimId(InventDimId _inventDimId, InventDim _inventDim = InventDim::find(_inventDimId))
    {
        InventDim   currentInventDim = this.InventDimId == _inventDimId ? _inventDim : this.inventDim();
        this.InventDimId = _inventDimId;
        this.linkInventDim2Dimension(_inventDim, currentInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimIdFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates an <c>InventDimId</c> value for the <c>InventDim</c> parameter and applies the
    /// found <c>InventDimId</c> to the <c>PurchRFQLine.inventDimId</c> field.
    /// </summary>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> record buffer that should be referenced by the current <c>PurchRFQLine</c>
    /// record buffer.
    /// </param>
    public void setInventDimIdFromInventDim(InventDim _inventDim)
    {
        InventDim   inventDim;
        inventDim = InventDim::findOrCreate(_inventDim);
        this.setInventDimId(inventDim.InventDimId, inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLocation</Name>
				<Source><![CDATA[
    public void setLocation(LogisticsLocation location)
    {
        if (location.Description)
            this.DeliveryName = location.Description;

        this.DeliveryPostalAddress      = LogisticsPostalAddress::addressRecIdFromLocationRecId(location.RecId);
        this.AddressRefRecId            = location.RecId;
        this.AddressRefTableId          = location.TableId;

        this.setTaxGroup(TaxSales::custTaxGroup(this.deliveryTerm(), this.TaxGroup, location.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>setPriceAgreement</c> method of the <c>SalesPurchLine</c> table map.
    /// </summary>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> record that contains the dimensions the price disc should apply for.
    /// </param>
    /// <param name="_doCallPriceDate">
    ///    A Boolean value that specifies whether to use the price date or the system date for the price calculation; optional.
    /// </param>
    /// <param name="_checkPolicy">
    /// An instance of the <c>PriceDiscPolicyCheckPolicy</c> class defining if price and discount fields
    /// should be updated; optional.
    /// </param>
    /// <param name="_initDateFields">
    /// Indicates if the dates related to prices should be set or not; optional.
    /// </param>
    [Hookable(false), Wrappable(false)]
    public void setPriceAgreement(
        InventDim					_inventDim,
        boolean						_doCallPriceDate	= false,
        PriceDiscPolicyCheckPolicy  _checkPolicy		= null,
        boolean						_initDateFields		= true)
    {
        this.salesPurchLineInterface().setPriceAgreement(_inventDim, _doCallPriceDate, _checkPolicy, _initDateFields);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDisc</Name>
				<Source><![CDATA[
    public void setPriceDisc(InventDim inventDim)
    {
        this.setPriceAgreement(inventDim);
        this.LineAmount = this.calcLineAmountForced();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxGroup</Name>
				<Source><![CDATA[
    void  setTaxGroup(TaxGroup  _taxGroup)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxGroupAndTaxItemGroupFields_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set PurchRFQLine.TaxGroup and PurchRFQLine.TaxItemGroup based on <c>TaxesMatrix</c>
    /// </summary>
    public void setTaxGroupAndTaxItemGroupFields_BR()
    {
        TaxGroup            taxGroup;
        TaxItemGroup        taxItemGroup;

        [taxGroup, taxItemGroup] = TaxesMatrix_BR::findTaxGroupAndTaxItemGroup(this.cfopTable_BR,
                                                                               this.purchRFQTable().SalesPurchOperationType_BR,
                                                                               SalesPurchTrntype_BR::Purchase,
                                                                               CustVendType_BR::Vendor,
                                                                               this.vendAccount(),
                                                                               this.ItemId,
                                                                               this.inventDim().inventSite().fiscalEstablishment().fiscalEstablishmentGroup());

        this.TaxGroup     = taxGroup     ? taxGroup     : this.purchRFQTable().TaxGroup;
        this.TaxItemGroup = taxItemGroup ? taxItemGroup : InventTable::find(this.ItemId).purchTaxItemGroupId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDocHandIcon</Name>
				<Source><![CDATA[
    display smmDocIconNum showDocHandIcon()
    {
        #macrolib.resource
        if ((select firstonly docuRef where docuRef.RefCompanyId  == this.DataAreaId && docuRef.RefTableId == this.TableId && docuRef.RefRecId == this.RecId).RecId)
        {
            return #RES_NODE_DOC;
        }

        return #RES_AM_NEW;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayLineOrigination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the symbol reference for the <c> PurchRFQLine </c> record to indicate whether the record is added by a procurement agent to the RFQ reply.
    /// </summary>
    /// <returns>
    /// A container with the symbol reference for the <c> PurchRFQLine </c> record
    /// to indicate whether the record is added by a procurement agent to the RFQ reply.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display container displayLineOrigination()
    {
        return this.isAddedByProcurementAgent()
            ? ImageReference::constructForSymbol(ImageReferenceSymbol::Info, "@SCM:PurchRFQLineIndicatorIconTooltip").pack()
            : connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxDate</Name>
				<Source><![CDATA[
    TransDate taxDate(TransDate transDate)
    {
        return TaxParameters::find().TaxCalculationDateType == TaxCalculationDateType::DeliveryDate ? this.deliveryDate(transDate) : transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPcsPrice</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public PriceCur taxPcsPrice(TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null)
    {
        return this.salesPurchLineInterface().taxPcsPrice(transDate, _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    PurchRFQLineType type()
    {
        return PurchRFQLineType::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(boolean _dropInvent = false)
    {   
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        PurchRFQLine purchRFQLineOrig = this.orig();

        PurchRFQLineType purchRFQLineType = this.type();               

        using (var activityContext = PurchRFQLine::instrumentationLogger().lineInstrumentationActivities().update(this))
        {
            purchRFQLineType.updating();

            if (this.ItemId != purchRFQLineOrig.ItemId)
            {
                this.updateAlternativeLines();
            }

            if (this.createdManually())
            {
                this.initFromPurchRFQReplyLine(PurchRFQReplyLine::findRFQLine(this.RecId));
            }

            if (this.LineType == PurchRFQLineItemType::Item)
            {
                if (!_dropInvent && this.createdManually() && this.inventTable().isStocked())
                {
                    if (!this.InventTransId)
                    {
                        this.InventTransId = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
                    }

                    InventUpd_Estimated::newInventMovement(InventMovement::construct(this)).updateNow();
                }
            }

            super();

            // compute RFQ header status on demand in order to scale linearly when processing massive RFQ document
            if (!PurchRFQCaseAutoCreateUpdateHeaderStatusPerLineFlight::instance().isEnabled())
            {
                PurchRFQTable::find(this.rfqId, true).updateStatus();
            }

            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                if (this.SalesPurchJournalLine::taxRecalculationNeeded())
                {
                    TaxDocumentLinePurchRFQUtil::markCurrentTaxDocumentTaxStatus(this.purchRFQTable(), TaxDocumentCalculationLevel::Dirty);
                }
                else
                {
                    TaxDocumentLinePurchRFQUtil::markCurrentTaxDocumentTaxStatus(this.purchRFQTable(), TaxDocumentCalculationLevel::Messy);
                }
            }

            purchRFQLineType.updated(purchRFQLineOrig);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAlternativeLines</Name>
				<Source><![CDATA[
    private void updateAlternativeLines()
    {
        if (!this.rfqCaseLineRefRecId)
        {
            // this is just a manually created line. it is not connected to RFQ Case line. don't update anything.
            return;
        }

        InventTable         inventTable;
        
        ttsbegin;

        PurchRFQCaseLine updateCaseLine = PurchRFQCaseLine::findRecId(this.rfqCaseLineRefRecId, true);
        if (updateCaseLine.RecId)
        {
            updateCaseLine.initItemFromPurchRFQLine(this);
            if (updateCaseLine.LineItemType == PurchRFQLineItemType::Item &&
               updateCaseLine.orig().LineItemType == PurchRFQLineItemType::Category)
            {
                inventTable = InventTable::find(this.ItemId);
                if (inventTable)
                {
                    updateCaseLine.type().initDimensions(inventTable, this);
                }

                updateCaseLine.RemainInventPhysical = updateCaseLine.QtyOrdered;
                updateCaseLine.RemainPurchPhysical = updateCaseLine.PurchQty;
            }
            updateCaseLine.update();
        }
        ttscommit;

        this.InventTransId = updateCaseLine.InventTransId;

        if (this.alternativeRFQLines())
        {
            if (!inventTable)
            {
                inventTable = InventTable::find(this.ItemId);
            }

            ttsbegin;

            PurchRFQLine        updateLine;
            str                 rfqIds;

            while select forupdate updateLine
                order by rfqId
                where updateLine.rfqCaseLineRefRecId == this.rfqCaseLineRefRecId &&
                      updateLine.rfqId  != this.rfqId
            {
                updateLine.LineType         = PurchRFQLineItemType::Item;
                updateLine.ItemId           = this.ItemId;
                updateLine.CategoryId       = this.CategoryId;
                updateLine.ItemName         = this.ItemName;
                updateLine.type().initDimensions(inventTable, this);
                updateLine.TaxGroup         = this.TaxGroup;
                updateLine.OverrideSalesTax = this.OverrideSalesTax;
                updateLine.TaxItemGroup     = this.TaxItemGroup;
                updateLine.InventTransId    = updateCaseLine.InventTransId;
                updateLine.doUpdate(); //Dont update status on the updateLine
                
                if (strLen(rfqiDs) > 0)
                {
                    rfqIds += ', ';
                }

                rfqIds += updateLine.rfqId;
            }
            ttscommit;

            info (strFmt("@SYS106113",rfqIds));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMRP_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates MRP information.
    /// </summary>
    public void updateMRP_IN()
    {
        this.type().updateMRP_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    public void updateStatus()
    {
        this.type().updateStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCreateAlternate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the alternate line can be created.
    /// </summary>
    /// <returns>
    /// true if the alternate line can be created; otherwise, false.
    /// </returns>
    public boolean validateCreateAlternate()
    {
        boolean ok = true;

        if (PurchRFQCaseTable::find(this.purchRFQCaseLine().RFQCaseId).AllowAlternates == NoYes::No)
        {
            ok = checkFailed("@EPR4460289");
        }

        if (ok && this.existAlternateForVendor())
        {
            ok = checkFailed("@EPR4460281");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            ret = this.validateField_BR(_fieldIdToCheck, ret);
        }
        // </GBR>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField_BR</Name>
				<Source><![CDATA[
    private boolean validateField_BR(FieldId fieldId, boolean _returnValue = false)
    {
        boolean ok = true;

        switch (fieldId)
        {
            case fieldNum(PurchRFQLine, CFOPTable_BR):
                ok = this.checkCFOP_BR();
                break;
        }

        return _returnValue && ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a specified field.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name of the field to check.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field.
    /// </param>
    /// <returns>
    /// true if the field passes validation; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);
        if (ret)
        {
            switch (_fieldName)
            {
                // <GIN>
                case fieldStr(PurchLine, TaxItemGroup):
                    ret = TaxItemGroupHeading::validatePOTForGTA_IN(VendTable::find(this.vendAccount()), this.TaxItemGroup);
                    break;
                // </GIN>
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ok = super();

        if (ok)
        {
            if (this.LineType == PurchRFQLineItemType::Item &&
                !this.ItemId)
            {
                ok = checkFailed(strFmt("@SYS26332", fieldPName(PurchRFQLine, ItemId)));
            }
            else if (this.LineType == PurchRFQLineItemType::Category &&
                     !this.CategoryId)
            {
                ok = checkFailed(strFmt("@SYS26332", fieldPName(PurchRFQLine, CategoryId)));
            }
            else if (this.LineType == PurchRFQLineItemType::Category &&
                     !this.ItemName)
            {
                ok = checkFailed(strFmt("@SYS26332", fieldPName(PurchRFQLine, ItemName)));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendAccount</Name>
				<Source><![CDATA[
    display VendAccount vendAccount()
    {
        return this.purchRFQTable().VendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendorRFQLineStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a RFQ high status value from an employee view to the vendor view.
    /// </summary>
    /// <returns>
    /// The converted enumeration value.
    /// </returns>
    /// <remarks>
    /// Statuses are mapped based on the symbol names.
    /// </remarks>
    public display PurchRFQStatusVendor vendorRFQLineStatus()
    {
        str symbol = DictEnum::newFromName(enumStr(PurchRFQStatus)).value2Symbol(this.Status);
        PurchRFQStatusVendor purchRFQStatusVendor = any2Enum(DictEnum::newFromName(enumStr(PurchRFQStatusVendor)).symbol2Value(symbol));
        return purchRFQStatusVendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesAlternateLineExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if alternate line exists for the RFQ.
    /// </summary>
    /// <param name="_purchRFQId">
    /// The RFQ ID of the record to find.
    /// </param>
    /// <returns>
    /// true if alternate line exists; otherwise, false.
    /// </returns>
    public static boolean doesAlternateLineExist(
        PurchRFQId _purchRFQId)
    {
        PurchRFQLine  purchRFQLine;

        if (_purchRFQId)
        {
            select firstOnly RecId from purchRFQLine
                where purchRFQLine.RFQId == _purchRFQId
                    && purchRFQLine.isAlternate == NoYes::Yes;
        }

        return purchRFQLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAlternateAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if creating alternate line is allowed for the current request for quotation line.
    /// </summary>
    /// <returns>
    /// true if create alternate line is allowed; otherwise, false.
    /// </returns>
    public boolean addAlternateAllowed()
    {
        return !this.IsAlternate && this.LineType == PurchRFQLineItemType::Category;  
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean  exist(PurchRFQId   _rfqId,
                          LineNum      _lineNum = naReal())
    {
        if (_rfqId)
        {
            if (_lineNum == naReal())
                return (select firstonly RecId from purchRFQLine
                            index PurchRFQLineIdx
                            where purchRFQLine.rfqId     == _rfqId
                       ).RecId     != 0;

            return (select firstonly RecId from purchRFQLine
                            index PurchRFQLineIdx
                            where purchRFQLine.rfqId     == _rfqId      &&
                                  purchRFQLine.LineNum     == _lineNum
                       ).RecId != 0;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static PurchRFQLine find(PurchRFQId   _rfqId,
                             LineNum      _lineNum     = naReal(),
                             boolean      _update      = false)
    {
        PurchRFQLine  purchRFQLine;

        if (_rfqId)
        {
            purchRFQLine.selectForUpdate(_update);

            if (_lineNum == naReal())
            {
                select firstonly purchRFQLine
                    where purchRFQLine.rfqId == _rfqId;
            }
            else
            {
                select firstonly purchRFQLine
                    where purchRFQLine.rfqId == _rfqId     &&
                          purchRFQLine.LineNum == _lineNum;
            }
        }

        return purchRFQLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static PurchRFQLine findRecId(PurchRFQLineRefRecId  _lineRecId,
                                  boolean               _update = false,
                                  ConcurrencyModel      _concurrencyModel = ConcurrencyModel::Auto)
    {
        PurchRFQLine  purchRFQLine;

        if (_lineRecId)
        {
            if (_update)
            {
                purchRFQLine.selectForUpdate(_update);

                if (_concurrencyModel != ConcurrencyModel::Auto)
                {
                    purchRFQLine.concurrencyModel(_concurrencyModel);
                }
            }

            select firstonly purchRFQLine
                where purchRFQLine.RecId == _lineRecId;
        }

        return purchRFQLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRFQCaseLine</Name>
				<Source><![CDATA[
    static PurchRFQLine findRFQCaseLine(PurchRFQId      _rfqId,
                             PurchRFQCaseLineRefRecId   _rfqCaseLineRefRecId = 0,
                             boolean                    _update       = false)
    {
        PurchRFQLine  purchRFQLine;

        if (_rfqId)
        {
            purchRFQLine.selectForUpdate(_update);

            select firstonly purchRFQLine
                where purchRFQLine.rfqId == _rfqId     &&
                    (_rfqCaseLineRefRecId == 0 ||
                      purchRFQLine.rfqCaseLineRefRecId == _rfqCaseLineRefRecId);
        }

        return purchRFQLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRFQCaseLineNumber</Name>
				<Source><![CDATA[
    static PurchRFQLine findRFQCaseLineNumber(PurchRFQId      _rfqId,
                                            TradeLineNumber   _lineNumber,
                                            boolean           _update       = false)
    {
        PurchRFQLine  purchRFQLine;

        if (_rfqId && _lineNumber)
        {
            purchRFQLine.selectForUpdate(_update);

            select firstonly purchRFQLine
                where purchRFQLine.rfqId == _rfqId     &&
                      purchRFQLine.RFQCaseLineLineNumber == _lineNumber;
        }

        return purchRFQLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>highestStatus</Name>
				<Source><![CDATA[
    static PurchRFQStatus highestStatus(PurchRFQId  _rfqId)
    {
        return (select maxof(Status) from purchRFQLine
            where   purchRFQLine.rfqId == _rfqId).Status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lowestStatus</Name>
				<Source><![CDATA[
    static PurchRFQStatus lowestStatus(PurchRFQId  _rfqId)
    {
        return (select minof(Status) from purchRFQLine
            where   purchRFQLine.rfqId == _rfqId).Status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProjSalesPrice</Name>
				<Source><![CDATA[
    private void calcProjSalesPrice()
    {
        ProjInventJournalTransMapForm   projTransMapForm;
        ProjTable                       projTable;

        projTable = projTable::find(this.ProjId);
        projTransMapForm = ProjInventJournalTransMapForm::construct(this);
        projTransMapForm.setProjSalesPrice(projTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQLineTaxExtensionIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>PurchRFQLineTaxExtensionIN</c> table.
    /// </summary>
    /// <returns>
    /// The table <c>PurchRFQLineTaxExtensionIN</c> associated with the current record.
    /// </returns>
    public PurchRFQLineTaxExtensionIN purchRFQLineTaxExtensionIN()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(PurchRFQLineTaxExtensionIN));
    }

]]></Source>
			</Method>
			<Method>
				<Name>packpurchRFQLineTaxExtensionIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs an extension table record to the container field <C>PackedExtensions</C>.
    /// </summary>
    /// <param name="PurchReqLineTaxExtensionIN">
    /// The extension table record.
    /// </param>
    public void packpurchRFQLineTaxExtensionIN(PurchRFQLineTaxExtensionIN _purchRFQLineTaxExtensionIN)
    {
        _purchRFQLineTaxExtensionIN.PurchRFQLine = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_purchRFQLineTaxExtensionIN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packExtensionTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs an extension table record to the container field <C>PackedExtensions</C>.
    /// </summary>
    /// <param name="_extensionTable">
    /// The extension table record.
    /// </param>
    /// <returns>
    /// true if success; otherwise false.
    /// </returns>
    public boolean packExtensionTable(SysExtensionSerializerExtensionMap _extensionTable)
    {
        boolean ret = false;

        if (_extensionTable.SysExtensionSerializerExtensionMap::baseTableId() == this.TableId)
        {
            ret = this.SysExtensionSerializerMap::packExtensionTable(_extensionTable);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markCurrentTaxDocumentTaxStatusDirty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Mark current tax status of <c> PurchRFQLine </c> to dirty
    /// </summary>
    public void markCurrentTaxDocumentTaxStatusDirty()
    {
        TaxDocumentLinePurchRFQUtil::markCurrentTaxDocumentTaxStatus(this.purchRFQTable(), TaxDocumentCalculationLevel::Dirty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the header table.
    /// </summary>
    /// <returns>The record for PurchRFQTable.</returns>
    public SalesPurchJournalTable salesPurchJournalTable()
    {
        return this.purchRFQTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxRecalculationNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c> PurchRFQLine </c> table will update the Tax
    /// </summary>
    /// <param name="_origTransactionTable">
    /// The <c>Transaction table</c> record, optional.
    /// </param>
    /// <returns>True if current line tax should be recalculated, otherwise false </returns>
    private boolean taxRecalculationNeeded(Common _origTransactionTable = this.orig())
    {
        PurchRFQLine purchRFQLine_Orig = _origTransactionTable ? _origTransactionTable : this.orig();

        boolean updateNeeded =
                    (
                    (this.ItemId                != purchRFQLine_Orig.ItemId) ||
                    (this.PriceUnit             != purchRFQLine_Orig.PriceUnit) ||
                    (this.LinePercent           != purchRFQLine_Orig.LinePercent) ||
                    (this.LineDisc              != purchRFQLine_Orig.LineDisc) ||
                    (this.PurchQty              != purchRFQLine_Orig.PurchQty) ||
                    (this.TaxItemGroup          != purchRFQLine_Orig.TaxItemGroup) ||
                    (this.TaxGroup              != purchRFQLine_Orig.TaxGroup) ||
                    (this.OverrideSalesTax      != purchRFQLine_Orig.OverrideSalesTax) ||
                    (this.LineAmount            != purchRFQLine_Orig.LineAmount) ||
                    (this.ProjId                != purchRFQLine_Orig.ProjId) ||
                    (this.ActivityNumber        != purchRFQLine_Orig.ActivityNumber) ||
                    (this.ProjCategoryId        != purchRFQLine_Orig.ProjCategoryId) ||
                    (this.ProjLinePropertyId    != purchRFQLine_Orig.ProjLinePropertyId) ||
                    (this.CurrencyCode          != purchRFQLine_Orig.CurrencyCode) ||
                    (this.DefaultDimension      != purchRFQLine_Orig.DefaultDimension) ||
                    (this.DeliveryPostalAddress != purchRFQLine_Orig.DeliveryPostalAddress)
                    );

        return updateNeeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasIndirectTaxFieldChanged_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c>PurchRFQLine</c> table buffer on india fields should update the associated <c>SourceDocumentDistribution</c> table.
    /// </summary>
    /// <param name="_origTransactionTable">
    /// The <c>Transaction table</c> record, optional.
    /// </param>
    /// <returns>
    /// True if the associated <c>SourceDocumentDistribution</c> records should be updated, otherwise false.
    /// </returns>
    private boolean hasIndirectTaxFieldChanged_IN(Common _origTransactionTable = this.orig())
    {
        boolean                     indirectTaxChanged = false;
        PurchRFQLineTaxExtensionIN  purchRFQLineTaxExtension_IN;
        PurchRFQLineTaxExtensionIN  purchRFQLineTaxExtension_Orig_IN;
        PurchRFQLine                purchRFQLine_Orig = _origTransactionTable ? _origTransactionTable : this.orig();

        if (TaxParameters::checkTaxParameters_IN())
        {
            purchRFQLineTaxExtension_IN = this.purchRFQLineTaxExtensionIN();
            purchRFQLineTaxExtension_Orig_IN = purchRFQLine_Orig.purchRFQLineTaxExtensionIN();

            indirectTaxChanged = purchRFQLineTaxExtension_IN.MaximumRetailPrice != purchRFQLineTaxExtension_IN.MaximumRetailPrice;
        }

        return indirectTaxChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxModelDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize tax model doc line by this purch Rfq line record.
    /// </summary>
    /// <returns>The <c>TaxModelDocLinePurchRFQImpl</c> object </returns>
    public TaxModelDocLinePurchRFQImpl initTaxModelDocLine()
    {
        TaxModelDocLinePurchRFQImpl taxModelDocLine;

        taxModelDocLine = TaxModelDocLineFactory::newTaxModelDocLine(this) as TaxModelDocLinePurchRFQImpl;

        return taxModelDocLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxModelDocLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize tax model doc line by this purch Rfq line record for Indian.
    /// </summary>
    /// <returns>The <c>TaxModelDocLinePurchRFQImpl_IN</c> object </returns>
    public TaxModelDocLinePurchRFQImpl_IN initTaxModelDocLine_IN()
    {
        TaxModelDocLinePurchRFQImpl_IN taxModelDocLine;

        taxModelDocLine = TaxModelDocLineFactory::newTaxModelDocLine(this) as TaxModelDocLinePurchRFQImpl_IN;

        return taxModelDocLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLineInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SalesPurchLineInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// The <c>SalesPurchLineInterface</c> object.
    /// </returns>
    public SalesPurchLineInterface salesPurchLineInterface()
    {
        return this.SalesPurchLine::salesPurchLineInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAddedByProcurementAgent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the RFQ line is added by procurement agent to RFQ reply.
    /// </summary>
    /// <returns>
    /// true if the RFQ line is added by procurement agent to RFQ reply; otherwise, false.
    /// </returns>
    public boolean isAddedByProcurementAgent()
    {
        return this.RFQCaseLineRefRecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requestForQuoteMark</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the mark on the RFQ reply.
    /// </summary>
    /// <param name="set">
    /// A Boolean value that indicates whether the mark should be set.
    /// </param>
    /// <param name="_mark">
    /// The mark on the RFQ reply.
    /// </param>
    /// <returns>
    /// The mark on the RFQ reply.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public edit PurchRFQMark requestForQuoteMark(boolean _set, PurchRFQMark _mark)
    {
        PurchRFQReplyLine replyLine = PurchRFQReplyLine::findRFQLine(this.RecId, _set);

        if (_set)
        {
            ttsbegin;
            replyLine.RFQMark = _mark;
            replyLine.update();
            ttscommit;
        }

        return replyLine.RFQMark;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates class <c>PurchRFQInstrumentationLogger</c> object.
    /// </summary>
    /// <returns>
    /// Class <c>PurchRFQInstrumentationLogger</c> object.
    /// </returns>
    private static PurchRFQInstrumentationLogger instrumentationLogger()
    {
        return PurchRFQInstrumentationLogger::createLogger(tableStr(PurchRFQLine));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124583</DeveloperDocumentation>
	<Label>@SYS102784</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>RFQId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>PurchRFQLineIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>ProcurementAndSourcing</Modules>
	<PrimaryIndex>PurchRFQLineIdx</PrimaryIndex>
	<ReplacementKey>PurchRFQLineIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DocuRef</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>DocuRef</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>MarkupTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MarkupTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PurchRFQReplyLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PurchRFQReplyLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RFQId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RFQCaseLineLineNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyOrdered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAlternate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RFQId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressReference</Name>
			<Label>@SYS88679</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AddressRefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AgreementId</Name>
			<Label>@SYS139216</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgreementId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Category</Name>
			<Label>@SYS139028</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Delivery</Name>
			<Label>@SYS4508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfirmedDlv</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeliveryAddress</Name>
			<Label>@SYS7924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS342338</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Discount</Name>
			<Label>@SYS11829</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLnDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLnPercent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalInformation_BR</Name>
			<Label>@GLS56</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CFOPTable_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxServiceCode_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FixedAssets</Name>
			<Label>@SYS12578</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetBookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetTransTypePurch</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RFQId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RFQCaseLineLineNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RFQType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QtyOrdered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemReference</Name>
			<Label>@SYS24659</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventRefTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Misc</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReasonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAlternate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCWMain</Name>
			<Label>@PDS72</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWUnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PlannedOrder</Name>
			<Label>@SYS24657</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqPOId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqPlanIdSched</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectCostPrice</Name>
			<Label>@SYS13134</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectIdentification</Name>
			<Label>@SYS89920</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjLinePropertyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectSalesPrice</Name>
			<Label>@SYS5755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjSalesCurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectSalesTax</Name>
			<Label>@SYS67871</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTaxItemGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectTransaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Purch</Name>
			<Label>@SYS15812</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reason</Name>
			<Label>@SYS86426</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>editReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editReasonComment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Req</Name>
			<Label>@SYS11856</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqPOId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqPlanIdSched</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RFQLines</Name>
			<Label>@SYS102858</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpiryDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RFQQuantity</Name>
			<Label>@SYS329120</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchMarkup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideSalesTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS25587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TableGroup</Name>
			<Label>@SYS21958</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendorPortalRFQLines</Name>
			<Label>@SYS102858</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyOrdered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjSalesCurrencyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Label>@SYS56480</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AccountingDistributionTemplate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AccountingDistributionTemplateRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjActivityNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AddressRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AddressRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AddressRefTableId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AddressRefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AgreementId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchAgreementId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetBookId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetBookId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetIdOpen</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AssetTransTypePurch</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetTransTypePurchEDT</ExtendedDataType>
			<EnumType>AssetTransTypePurch</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchCategory</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CFOPTable_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS200</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ConfirmedDlv</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchRFQConfirmedDeliveryDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteLinkedDimensionValueSet</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DeliveryDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchRFQRequestedDeliveryDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsDeliveryName</ExtendedDataType>
			<GroupPrompt>@SYS7399</GroupPrompt>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ExpiryDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchRFQExpiryDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExternalItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchExternalItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventRefId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventRefTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventRefTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventRefType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventRefType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAlternate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchRFQIsAlternate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemIdSmall</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemNameDisplay</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLineAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLineDisc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LinePercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLinePercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LineType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PurchRFQLineItemType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MultiLnDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchMultiLnDisc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MultiLnPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchMultiLnPercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemFreeTxt</ExtendedDataType>
			<Label>@SYS58702</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<Label>@SYS6114</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjLinePropertyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProjSalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesPriceCost</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjSalesUnitId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxItemGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjItemTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PurchMarkup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchMarkup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PurchPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchPrice</ExtendedDataType>
			<Label>@SYS11770</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PurchQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchOrderedQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyOrdered</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReasonId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchRFQReasonId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReasonRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchRFQReasonRef</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReqPlanIdSched</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPlanIdSched</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReqPOId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPOId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RFQCaseLineLineNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeLineNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RFQCaseLineRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PurchRFQCaseLineRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RFQId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchRFQId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RFQType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PurchRFQType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PurchRFQStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxServiceCode_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxServiceCodeId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomsTariffCodeTable_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CompanyLocation_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>LogisticsLocationRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VATGoodsType_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<EnumType>VATGoodsType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NonRecoverablePercent_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>Percent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesTaxFormTypes_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>SalesTaxFormTypesRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExciseType_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<EnumType>ExciseType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExciseRecordType_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<EnumType>ExciseRecordType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExciseTariffCodes_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DSA_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ServiceCodeTable_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GTAServiceCategory_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<EnumType>GTAServiceCategory_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Exempt_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HSNCodeTable_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ITCCategory_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<EnumType>ITCCategory_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NonBusinessUsagePercentage_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>Percent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ServiceAccountingCodeTable_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ServiceCategory_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<EnumType>ServiceCategory_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendorLocation_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendorTaxInformation_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InclTax_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>InclTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideSalesTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntegrationOverrideSalesTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PurchRFQLineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RFQId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DefaultDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AccountingDistributionTemplateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountingDistributionTemplate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CFOPTable_BRIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CFOPTable_BR</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LineNumberIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RFQId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RFQCaseLineLineNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IsAlternate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PurchRFQCaseLineStatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RFQId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RFQCaseLineRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DeliveryPostalAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CurrencyCodeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PriceDiscLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccountNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Currency</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Included</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
					<MapFieldTo>LinePercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
					<MapFieldTo>PurchMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnDisc</MapField>
					<MapFieldTo>MultiLnDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnPercent</MapField>
					<MapFieldTo>MultiLnPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
					<MapFieldTo>PurchPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>PurchQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>RFQId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Unit</MapField>
					<MapFieldTo>PurchUnit</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>ProjInventJournalTransMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ActivityNumber</MapField>
					<MapFieldTo>ActivityNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BudgetReservationLine_PSN</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EcoResCategory</MapField>
					<MapFieldTo>CategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCategoryId</MapField>
					<MapFieldTo>ProjCategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCostAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCostMarkup</MapField>
					<MapFieldTo>PurchMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCostPrice</MapField>
					<MapFieldTo>PurchPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjLinePropertyId</MapField>
					<MapFieldTo>ProjLinePropertyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjPriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjSalesCurrencyId</MapField>
					<MapFieldTo>ProjSalesCurrencyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjSalesPrice</MapField>
					<MapFieldTo>ProjSalesPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjSalesUnitId</MapField>
					<MapFieldTo>ProjSalesUnitId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTaxGroupId</MapField>
					<MapFieldTo>ProjTaxGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTaxItemGroupId</MapField>
					<MapFieldTo>ProjTaxItemGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTransId</MapField>
					<MapFieldTo>ProjTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>PurchQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>DeliveryDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitOfMeasure</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PurchRFQLineMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AddressRefRecId</MapField>
					<MapFieldTo>AddressRefRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AddressRefTableId</MapField>
					<MapFieldTo>AddressRefTableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetBookId</MapField>
					<MapFieldTo>AssetBookId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetId</MapField>
					<MapFieldTo>AssetId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetTransTypePurch</MapField>
					<MapFieldTo>AssetTransTypePurch</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CategoryId</MapField>
					<MapFieldTo>CategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConfirmedDlv</MapField>
					<MapFieldTo>ConfirmedDlv</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryAddress</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryCity</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryCountryRegionId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryCounty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryDate</MapField>
					<MapFieldTo>DeliveryDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryName</MapField>
					<MapFieldTo>DeliveryName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryStreet</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryZipCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExpiryDateTime</MapField>
					<MapFieldTo>ExpiryDateTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExternalItemId</MapField>
					<MapFieldTo>ExternalItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventRefId</MapField>
					<MapFieldTo>InventRefId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventRefTransId</MapField>
					<MapFieldTo>InventRefTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventRefType</MapField>
					<MapFieldTo>InventRefType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemName</MapField>
					<MapFieldTo>ItemName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
					<MapFieldTo>LinePercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineType</MapField>
					<MapFieldTo>LineType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnDisc</MapField>
					<MapFieldTo>MultiLnDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnPercent</MapField>
					<MapFieldTo>MultiLnPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Name</MapField>
					<MapFieldTo>Name</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWQty</MapField>
					<MapFieldTo>PdsCWQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchId</MapField>
					<MapFieldTo>PurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchMarkup</MapField>
					<MapFieldTo>PurchMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchPrice</MapField>
					<MapFieldTo>PurchPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchQty</MapField>
					<MapFieldTo>PurchQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchUnit</MapField>
					<MapFieldTo>PurchUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>QtyOrdered</MapField>
					<MapFieldTo>QtyOrdered</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReqPlanIdSched</MapField>
					<MapFieldTo>ReqPlanIdSched</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReqPOId</MapField>
					<MapFieldTo>ReqPOId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RFQId</MapField>
					<MapFieldTo>RFQId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RFQType</MapField>
					<MapFieldTo>RFQType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Status</MapField>
					<MapFieldTo>Status</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StatusHigh</MapField>
					<MapFieldTo>Status</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StatusLow</MapField>
					<MapFieldTo>Status</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Category</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConfirmedDlv</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExternalItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemBOMId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemRouteId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRCustVendAC</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCROrderLine2PriceHistoryRef</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRReceiptDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRShipDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSCalculationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWSalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchSalesUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>QtyOrdered</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RequiredDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RetailVariantId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>RFQId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StockedProduct</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitOfMeasure</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TransitDocumentTransactionMap_IN</MappingTable>
			<Connections />
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CategoryId</MapField>
					<MapFieldTo>CategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
					<MapFieldTo>PurchQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchUnit</MapField>
					<MapFieldTo>PurchUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
					<MapFieldTo>RFQId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OverrideSalesTax</MapField>
					<MapFieldTo>OverrideSalesTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AccountingDistributionTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AccountingDistributionTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AccountingDistributionTemplate</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DistributionTemplate_PurchRFQLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountingDistributionTemplate</Name>
					<Field>AccountingDistributionTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetBookTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetBookTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetBookTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetBookId</Name>
					<SourceEDT>AssetBookId</SourceEDT>
					<Field>AssetBookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BookIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<SourceEDT>AssetIdOpen</SourceEDT>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CFOPTable_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CFOPTable_BR</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CFOPTable_BR</Name>
					<Field>CFOPTable_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Common</Name>
			<RelatedTable>Common</RelatedTable>
			<RelatedTableRole>Common</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>Common_PurchRFQLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AddressRefTableId</Name>
					<Field>AddressRefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AddressRefRecId</Name>
					<Field>AddressRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CurrencyProjSales</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Currency_ProjSales</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjSalesCurrencyId</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>ProjSalesCurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_PurchRFQLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DeliveryPostalAddress</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsPostalAddress</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsPostalAddress_PurchRFQLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>EcoResCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResCategory_PurchRFQLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryId</Name>
					<Field>CategoryId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategory_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategory_FK</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResCategory_PurchRFQLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryId</Name>
					<Field>CategoryId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventDim_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTable_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemIdSmall</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<SourceEDT>ProjCategoryId</SourceEDT>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjItemTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjItemTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjItemTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTransId</Name>
					<SourceEDT>ProjItemTransId</SourceEDT>
					<Field>ProjTransId</Field>
					<RelatedField>ProjTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjLineProperty</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjLinePropertyId</Name>
					<SourceEDT>ProjLinePropertyId</SourceEDT>
					<Field>ProjLinePropertyId</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjSalesUnitId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>UnitOfMeasure_ProjSales</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>UnitOfMeasure_PurchRFQLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjSalesUnitId</Name>
					<Field>ProjSalesUnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchRFQCaseLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PurchRFQCaseLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchRFQCaseLine_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RFQCaseLineRefRecId</Name>
					<SourceEDT>PurchRFQCaseLineRefRecId</SourceEDT>
					<Field>RFQCaseLineRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchRFQTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PurchRFQTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PurchRFQTable_1</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>PurchRFQLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RFQId</Name>
					<SourceEDT>PurchRFQId</SourceEDT>
					<Field>RFQId</Field>
					<RelatedField>RFQId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RFQIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchId</Name>
					<SourceEDT>PurchIdBase</SourceEDT>
					<Field>PurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>UnitOfMeasure</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>UnitOfMeasure_PurchRFQLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchUnit</Name>
					<Field>PurchUnit</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReasonTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReasonTableRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReasonTableRef</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ReasonTableRef_PurchRFQLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonRef</Name>
					<Field>ReasonRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReqPlanSched</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ReqPlanSched</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReqPlanSched</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReqPlanIdSched</Name>
					<SourceEDT>ReqPlanIdSched</SourceEDT>
					<Field>ReqPlanIdSched</Field>
					<RelatedField>ReqPlanIdSched</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PlanIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmActivities</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<SourceEDT>ProjActivityNumber</SourceEDT>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<SourceEDT>TaxGroup</SourceEDT>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeadingProj</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxGroupHeading_Proj</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxGroupId</Name>
					<SourceEDT>ProjTaxGroup</SourceEDT>
					<Field>ProjTaxGroupId</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxItemGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<SourceEDT>TaxItemGroup</SourceEDT>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeadingProj</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxItemGroupHeading_Proj</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxItemGroupId</Name>
					<SourceEDT>ProjTaxItemGroup</SourceEDT>
					<Field>ProjTaxItemGroupId</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxServiceCode_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxServiceCode_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchRFQLine_TaxServiceCode_BR</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxServiceCode_BR</Name>
					<Field>TaxServiceCode_BR</Field>
					<RelatedField>ServiceCodeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>