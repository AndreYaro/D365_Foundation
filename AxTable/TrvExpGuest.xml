<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpGuest</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TrvExpGuest extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.CreatingWorker = HcmWorkerLookup::currentWorker();
        this.GuestType = TrvGuestType::MyGuest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = true;

        if (_fieldIdToCheck == fieldNum(TrvExpGuest, GuestId)
        && this.GuestType == TrvGuestType::MyGuest)
            ret = true;
        else
            ret = super(_fieldIdToCheck);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = true;

        if (this.GuestId == '')
        {
            error("@SYS343772");
            ret = false;
        }

        if (ret)
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeFromPreviousGuests</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes a guest from a worker's previous guest list
    /// </summary>
    /// <param name="_guest">
    /// The <c>RecId</c> of the <c>TrvExpGuest</c> record from which to remove.
    /// </param>
    public static void removeFromPreviousGuests(RefRecId _guest)
    {
        TrvExpGuest trvExpGuest = TrvExpGuest::find(_guest);

        if (trvExpGuest.RecId != 0 )
        {
            TrvExpGuest updateGuests;

            //
            // Update all matching versions of guest record so guest will no longer appear in previous guests list for that worker
            // unless worker explicitly creates a new guest record for that guest
            //
            update_recordset updateGuests setting IsSoftDeleted = NoYes::Yes
                where updateGuests.CreatingWorker == trvExpGuest.CreatingWorker
                && updateGuests.GuestId == TrvExpGuest.GuestId
                && updateGuests.Company == TrvExpGuest.Company
                && updateGuests.Title == TrvExpGuest.Title;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteUnusedGuests</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the guest if it is not referenced by any other <c>TrvExpTransGuest</c> records
    /// </summary>
    /// <param name="_trvExpTransGuest">
    /// The <c>TrvExpTransGuest</c> record associated with the guest that may need to be deleted
    /// if not used by other <c>TrvExpTransGuest</c> records
    /// </param>
    public static void deleteUnusedGuests(TrvExpTransGuest _trvExpTransGuest)
    {
        TrvExpGuest         trvExpGuest;
        TrvExpTransGuest    trvExpTransGuest;
        
        ttsbegin;
        
        // Delete a guest record only when it is not referenced in any other expense line.
        delete_from trvExpGuest
            where trvExpGuest.RecId ==  _trvExpTransGuest.TrvExpGuest
                notExists join trvExpTransGuest
                    where trvExpTransGuest.TrvExpGuest == _trvExpTransGuest.TrvExpGuest
                        && trvExpTransGuest.TrvExpTrans != _trvExpTransGuest.TrvExpTrans;
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToNewExpenseLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new guest line from a guest line that already exists.
    /// </summary>
    /// <param name="_guest">
    /// The <c>RecId</c> of the <c>TrvExpGuest</c> record from which to copy.
    /// </param>
    /// <param name="_expenseLine">
    /// The <c>RecId</c> of the <c>TrvExpTrans</c> record to which the new guest should be added.
    /// </param>
    /// <param name="_creatingWorker">
    /// Creating worker for the guest.
    /// </param>
    /// <remarks>
    /// This method is used when selecting from a list of previous guests.
    /// </remarks>
    public static void copyToNewExpenseLine(RefRecId _guest, RefRecId _expenseLine, TrvHcmWorkerRecId _creatingWorker = HcmWorkerLookup::currentWorker())
    {
        TrvExpGuest trvExpGuest = TrvExpGuest::find(_guest);

        if (trvExpGuest.RecId != 0 )
        {
            TrvExpGuest::insertNewGuest(_expenseLine, trvExpGuest.GuestId, trvExpGuest.Company, trvExpGuest.Title, 0.0, trvExpGuest.GuestType, _creatingWorker);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewGuest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new record in this table.
    /// </summary>
    /// <param name="_name">
    /// Name of new guest, goes into GuestId column.
    /// </param>
    /// <param name="_company">
    /// Company (or organization) of new guest, goes into Company column.
    /// </param>
    /// <param name="_title">
    /// Title of new guest, goes into Title column.
    /// </param>
    /// <param name="_type">
    /// Internal user or MyGuest.  Internal users are those picked for "my coworkers", the
    /// others are of type MyGuest.
    /// </param>
    /// <param name="_creatingWorker">
    /// Creating worker refers to the person adding the guest.
    /// </param>
    /// <returns>
    /// The record created.
    /// </returns>
    /// <remarks>
    /// Changes made to the optional parameters of the method.
    /// </remarks>
    static TrvExpGuest createNewGuest(TrvExpGuestId _name, Name _company, TrvGuestTitle _title, TrvGuestType _type = TrvGuestType::MyGuest, TrvHcmWorkerRecId _creatingWorker = HcmWorker::userId2Worker(curUserId()))
    {
        TrvExpGuest     newTrvExpGuest;

        ttsbegin;

        newTrvExpGuest.clear();
        newTrvExpGuest.initValue();
        newTrvExpGuest.GuestId = _name;
        newTrvExpGuest.Company = _company;
        newTrvExpGuest.Title = _title;
        newTrvExpGuest.CreatingWorker = _creatingWorker;
        newTrvExpGuest.GuestType = _type;
        newTrvExpGuest.insert();

        ttscommit;

        return newTrvExpGuest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateNewGuest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates a new record in this table.
    /// </summary>
    /// <param name="_name">
    /// Name of new guest, goes into GuestId column.
    /// </param>
    /// <param name="_company">
    /// Company (or organization) of new guest, goes into Company column.
    /// </param>
    /// <param name="_title">
    /// Title of new guest, goes into Title column.
    /// </param>
    /// <param name="_type">
    /// Internal user or MyGuest.  Internal users are those picked for "my coworkers", the
    /// others are of type MyGuest.
    /// </param>
    /// <param name="_creatingWorker">
    /// Creating worker refers to the person adding the guest.
    /// </param>
    /// <returns>
    /// The record found or created.
    /// </returns>
    /// <remarks>
    /// This prevents the unnecessary creation of duplicate guest records by returning an identical record if one exists.
    /// </remarks>
    static TrvExpGuest findOrCreateNewGuest(TrvExpGuestId _name, Name _company, TrvGuestTitle _title, TrvGuestType _type = TrvGuestType::MyGuest, TrvHcmWorkerRecId _creatingWorker = HcmWorker::userId2Worker(curUserId()))
    {
        TrvExpGuest newTrvExpGuest;

        // Find guest with provided details
        select firstonly * from newTrvExpGuest
            where  newTrvExpGuest.GuestId == _name
                && newTrvExpGuest.Title == _title
                && newTrvExpGuest.Company == _company
                && newTrvExpGuest.CreatingWorker == _creatingWorker
                && newTrvExpGuest.IsSoftDeleted == NoYes::No;

        if (newTrvExpGuest.RecId == 0)
        {
            // Create new guest because no guest with those details already exists
            newTrvExpGuest = TrvExpGuest::createNewGuest(_name, _company, _title, _type, _creatingWorker);
        }
        
        return newTrvExpGuest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(TrvExpGuestId _sGuestId)
    {
        return _sGuestId && (select firstonly RecId from trvExpGuest
                                    where trvExpGuest.GuestId == _sGuestId &&
                                          trvExpGuest.GuestType == TrvGuestType::MyGuest).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static TrvExpGuest find( RefRecId _recId, boolean _bForUpdate = false)
    {
        TrvExpGuest tExpenseGuest;

        if (_recId)
        {
            tExpenseGuest.selectForUpdate(_bForUpdate);

            select firstonly tExpenseGuest where tExpenseGuest.RecId == _recId;
        }
        return tExpenseGuest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByGuestId</Name>
				<Source><![CDATA[
    static TrvExpGuest findByGuestId(TrvExpGuestId _sGuestId, TrvHcmWorkerRecId _sWorkerId,
                                   boolean      _bForUpdate = false)
    {
        TrvExpGuest tExpenseGuest;

        if ((_sGuestId) && (_sWorkerId))
        {
            tExpenseGuest.selectForUpdate(_bForUpdate);

            select firstonly tExpenseGuest
                where tExpenseGuest.GuestId == _sGuestId && tExpenseGuest.CreatingWorker == _sWorkerId;
        }
        return tExpenseGuest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNewGuest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new guest and the link to an expense line.
    /// </summary>
    /// <param name="_expenseLine">
    /// A <c>TrvExpTrans</c> record to which this guest record applies.
    /// </param>
    /// <param name="_name">
    /// The name of the new guest.
    /// </param>
    /// <param name="_company">
    /// The company of the new guest.
    /// </param>
    /// <param name="_title">
    /// The title of new guest.
    /// </param>
    /// <param name="_amount">
    /// The amount of new guest.
    /// </param>
    /// <param name="_type">
    /// The internal user.
    /// </param>
    /// <param name="_creatingWorker">
    /// Creating worker refers to the person adding the guest.
    /// </param>
    /// <remarks>
    /// This method makes sure not to create a duplicate row by comparing name, title, and company to rows
    /// already existing for this expense line. As long as no matching guest row is found, this method
    /// creates the guest and the link back to the expense line.
    /// </remarks>
    public static void insertNewGuest( RefRecId _expenseLine, TrvExpGuestId _name, Name _company, TrvGuestTitle _title, TrvGuestGiftAmount _amount, TrvGuestType _type = TrvGuestType::MyGuest, TrvHcmWorkerRecId _creatingWorker = HcmWorkerLookup::currentWorker())
    {
        TrvExpTransGuest    newTrvExpTransGuest;
        TrvExpGuest         newTrvExpGuest;

        // ensure that we don't already have a matching guest for this expense line
        select firstonly RecId from newTrvExpGuest
            where  newTrvExpGuest.GuestId == _name
                && newTrvExpGuest.Title == _title
                && newTrvExpGuest.Company == _company
            join newTrvExpTransGuest
                where  newTrvExpTransGuest.TrvExpGuest == newTrvExpGuest.RecId
                    && newTrvExpTransGuest.TrvExpTrans == _expenseLine;

        if (newTrvExpGuest.RecId == 0)
        {
            ttsbegin;

            newTrvExpGuest = TrvExpGuest::findOrCreateNewGuest(_name, _company, _title, _type, _creatingWorker);

            newTrvExpTransGuest.clear();
            newTrvExpTransGuest.initValue();
            newTrvExpTransGuest.TrvExpTrans = _expenseLine;
            newTrvExpTransGuest.TrvExpGuest = newTrvExpGuest.RecId;
            newTrvExpTransGuest.AmountCurr  = _amount;
            newTrvExpTransGuest.insert();

            ttscommit;
        }

        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the guest record. Changes to guest might need re-evaluation of policies on the line.
    /// </summary>
    public void update()
    {
        super();
        this.evaluatePoliciesForExpense();
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluatePoliciesForExpense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluate policies on the line to which the guest is tied to.
    /// </summary>
    private void evaluatePoliciesForExpense()
    {
        TrvParameters       trvParameters = TrvParameters::find();
        TrvExpTransGuest    trvExpTransGuest;

        if (trvParameters.WhenToEvaluatePolicy == TrvEvaluateExpensePolicies::OnLineSave)
        {
            select firstonly TrvExpTrans from trvExpTransGuest where trvExpTransGuest.TrvExpGuest == this.RecId;
            TrvPolicyEvalEngine::evaluateViolationsForLine(trvExpTransGuest.TrvExpTrans, SysPolicyTypeEnum::TrvExpensePolicy);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Trv</ConfigurationKey>
	<DeveloperDocumentation>@SYS319459</DeveloperDocumentation>
	<Label>@SYS59517</Label>
	<TableGroup>Worksheet</TableGroup>
	<TitleField1>GuestId</TitleField1>
	<TitleField2>Title</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>Expense</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GuestId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Company</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Title</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreatingWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GuestType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GuestId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Company</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Title</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS2952</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GuestType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GuestId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Company</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Title</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreatingWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Gift</Name>
			<Label>@SYS333634</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsSoftDeleted</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TrvGuests</Name>
			<Label>@SYS344294</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GuestId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Company</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Title</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Company</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@Expense:OrganizationAndCountry</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CreatingWorker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TrvHcmWorkerRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GuestId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvExpGuestId</ExtendedDataType>
			<Label>@SYS80991</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GuestType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TrvGuestType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsSoftDeleted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvExpMyGuestDeleted</ExtendedDataType>
			<Label>@Expense:HiddenFromListOfGuestsForCurrentUser</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Title</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvGuestTitle</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCurr</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>TrvGuestGiftAmount</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TrvCreatingWorkerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CreatingWorker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TrvCreatingEmployee</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>HasEntertained</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HasBeenEntertainedBy</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CreatingWorker</Name>
					<Field>CreatingWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>