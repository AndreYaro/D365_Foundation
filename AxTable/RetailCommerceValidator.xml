<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCommerceValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailCommerceValidator extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a table buffer record of type <c>RetailCommerceValidator</c>.
    /// </summary>
    public void initValue()
    {
        super();

        if (this.ValidationId == '')
        {
            NumberSeq numSeq;
        
            numSeq = NumberSeq::newGetNum(RetailParameters::numRefRetailCommerceValidatorId());
            this.ValidationId = numSeq.num();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByOperatingUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record on the <c>RetailCommerceValidator</c> table for the given Operating Unit Id.
    /// </summary>
    /// <param name = "_operatingUnit">The Operating Unit Id.</param>
    /// <param name = "_forUpdate">select for update? (Y/N).</param>
    /// <returns>A record on the <c>RetailCommerceValidator</c> table.</returns>
    public static RetailCommerceValidator findByOperatingUnit(RefRecId _operatingUnit, boolean _forUpdate = false)
    {
        return RetailCommerceValidator::findByOperatingUnitAndAutomatedRun(_operatingUnit, NoYes::No, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByOperatingUnitAndAutomatedRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record on the <c>RetailCommerceValidator</c> table for the given Operating Unit Id.
    /// </summary>
    /// <param name = "_operatingUnit">The Operating Unit Id.</param>
    /// <param name = "_isAutomatedRun">The boolean value indicating whether this is automated run.</param>
    /// <param name = "_forUpdate">select for update? (Y/N).</param>
    /// <returns>A record on the <c>RetailCommerceValidator</c> table.</returns>
    public static RetailCommerceValidator findByOperatingUnitAndAutomatedRun(RefRecId _operatingUnit, NoYes _isAutomatedRun, boolean _forUpdate = false)
    {
        RetailCommerceValidator retailCommerceValidator;

        if (_operatingUnit)
        {
            if (_forUpdate)
            {
                retailCommerceValidator.selectForUpdate(_forUpdate);
            }

            select firstonly forupdate retailCommerceValidator
                where retailCommerceValidator.OmOperatingUnitId == _operatingUnit
                    && retailCommerceValidator.IsAutomatedRun == _isAutomatedRun;
        }

        return retailCommerceValidator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record on the <c>RetailCommerceValidator</c> table.
    /// </summary>
    /// <param name = "_validationId">The Validation Id.</param>
    /// <param name = "_forUpdate">select for update? (Y/N).</param>
    /// <returns>A record on the <c>RetailCommerceValidator</c> table.</returns>
    public static RetailCommerceValidator find(RetailCommerceValidatorId _validationId, boolean _forUpdate = false)
    {
        System.Exception exception;
        RetailCommerceValidator retailCommerceValidator;
        RetailCommerceValidatorParameters parameters = retailCommerceValidatorParameters::find();

        if (_validationId)
        {
            try
            {
                if (_forUpdate && !parameters.UsePessimisticLocks)
                {
                    select forupdate retailCommerceValidator where retailCommerceValidator.ValidationId == _validationId;
                }
                else if (_forUpdate && parameters.UsePessimisticLocks)
                {
                    select pessimisticlock retailCommerceValidator where retailCommerceValidator.ValidationId == _validationId;
                }
                else
                {
                    select retailCommerceValidator where retailCommerceValidator.ValidationId == _validationId;
                }
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, tableStr(RetailCommerceValidator), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, tableStr(RetailCommerceValidator), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }

        return retailCommerceValidator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Inserts a record.
    /// </summary>
    public void insert()
    {
        if (this.ValidationId == '')
        {
            // Get next number sequence
            NumberSeq numSeq = NumberSeq::newGetNum(RetailParameters::numRefRetailCommerceValidatorId());

            this.ValidationId = numSeq.num();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAllValidations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create all validations.
    /// </summary>
    /// <param name = "_executeNow">Automatically execute validation after creation.</param>
    public static void createAllValidations(boolean _executeNow)
    {
        RetailCommerceValidator::createAllValidationsWithAutomatedRun(_executeNow, NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAllValidationsWithAutomatedRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create all validations.
    /// </summary>
    /// <param name = "_executeNow">Automatically execute validation after creation.</param>
    /// <param name = "_isAutomatedRun">The boolean value indicating whether this is automated run.</param>
    public static void createAllValidationsWithAutomatedRun(boolean _executeNow, NoYes _isAutomatedRun = NoYes::No)
    {
        RetailChannelTable retailChannelTable;

        // Create validations for all non Call center channels (in case they don't exist yet)
        while select retailChannelTable where retailChannelTable.ChannelType != RetailChannelType::MCRCallCenter
        {
            RetailCommerceValidator::createWithAutomatedRun(retailChannelTable.OMOperatingUnitID, _executeNow, _isAutomatedRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new validation for a given channel
    /// </summary>
    /// <param name = "_oMOperatingUnitId">The Operating Unit Id to validate.</param>
    /// <param name = "_executeNow">Automatically execute validation after creation.</param>
    public static void create(RefRecId _oMOperatingUnitId, boolean _executeNow = false)
    {
        RetailCommerceValidator::createWithAutomatedRun(_oMOperatingUnitId, _executeNow, NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWithAutomatedRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new validation for a given channel
    /// </summary>
    /// <param name = "_oMOperatingUnitId">The Operating Unit Id to validate.</param>
    /// <param name = "_executeNow">Automatically execute validation after creation.</param>
    /// <param name = "_isAutomatedRun">The boolean value indicating whether this is automated run.</param>
    public static void createWithAutomatedRun(RefRecId _oMOperatingUnitId, boolean _executeNow = false, NoYes _isAutomatedRun = NoYes::No)
    {
        System.Exception exception;
        RetailCommerceValidatorParameters retailCommerceValidatorParameters = RetailCommerceValidatorParameters::find();
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::findByOperatingUnitAndAutomatedRun(_oMOperatingUnitId, _isAutomatedRun);
        RetailChannelTable retailChanneltable = RetailChannelTable::findByOperatingUnitId(_oMOperatingUnitId);

        if (retailCommerceValidator)
        {
            // The Commerce validator feature allows only a single validation per channel. 
            // When a validation already exists, the user should re-execute it instead of creating a new one.
            info::addMessage(Exception::Warning, strFmt("@Retail:RetailCommerceValidatorValidationAlreadyExistsWarning", retailCommerceValidator.ValidationId, retailChanneltable.name()));

            // Execute validation
            if (_executeNow)
            {
                RetailCommerceValidator::execute(retailCommerceValidator.ValidationId, RetailCommerceValidatorExecutionMode::ExecuteAll);
            }
        }
        else
        {
            if (retailChanneltable.ChannelType == RetailChannelType::MCRCallCenter)
            {
                // Call center channels are not supported by the Commerce Validator
                info::addMessage(Exception::Warning, strFmt("@Retail:RetailCommerceValidatorCallCenterChannelsNotSupported"));
                return;
            }

            //*************************************************************************************
            //  Telemetry : Validation creation start event
            //*************************************************************************************
            if (retailCommerceValidatorParameters.TelemetryLevel == RetailCommerceValidatorTelemetryLevel::Diagnostic)
            {
                RetailCommerceValidatorTelemetry::addValidationCreationTelemetry(true, retailCommerceValidator, _oMOperatingUnitId);
            }
            //*************************************************************************************

            // lazy initialization of number sequence references
            RetailCommerceValidator::createNumberSequences();
            
            // Load metadata
            RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();
            try
            {
                int64 totalMetrics = RetailCommerceValidatorMetrics::load();
                int64 totalEntityTypes = RetailCommerceValidatorEntityTypes::load();
                int64 totalRules = RetailCommerceValidatorRules::load();

                // Increment counters

                RetailCommerceValidatorCounters::incrementCounter("@Retail:RetailCommerceValidatorNumberOfLoadedMetricsId", totalMetrics, 0, '', '', '', RetailCommerceValidatorLogType::Total, "@Retail:RetailCommerceValidatorNumberOfLoadedMetricsId", false, false);
                RetailCommerceValidatorCounters::incrementCounter("@Retail:RetailCommerceValidatorNumberOfLoadedEntitiesMetricId", totalEntityTypes, 0, '', '', '', RetailCommerceValidatorLogType::Total, "@Retail:RetailCommerceValidatorNumberOfLoadedEntitiesMetricId", false, false);
                RetailCommerceValidatorCounters::incrementCounter("@Retail:RetailCommerceValidatorNumberOfLoadedRulesMetricId", totalRules, 0, '', '', '', RetailCommerceValidatorLogType::Total, "@Retail:RetailCommerceValidatorNumberOfLoadedRulesMetricId", false, false);
            }
            catch (Exception::Error)
            {
                if (xSession::currentRetryCount() <= parameters.MaxRetryCount)
                {
                    retry;
                }
            }

            try
            {
                // Create validation
                retailCommerceValidator.initvalue();
                retailCommerceValidator.ChannelId = retailChanneltable.RetailChannelId;
                retailCommerceValidator.OMOperatingUnitId = _oMOperatingUnitId;
                retailCommerceValidator.ValidationProgressPercentage = 0;
                retailCommerceValidator.ValidationExecutedTest = 0;
                retailCommerceValidator.ValidationTotalTest = 0;
                retailCommerceValidator.ValidationExecutionStatus = RetailCommerceValidatorExecutionStatus::NotStarted;
                retailCommerceValidator.ValidationResultStatus = RetailCommerceValidatorResultStatus::None;
                retailCommerceValidator.ValidationExecutionPhase = RetailCommerceValidatorExecutionPhase::NotStarted;
                retailCommerceValidator.IsAutomatedRun = _isAutomatedRun;
                retailCommerceValidator.insert();
                retailCommerceValidator.reread();
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(retailCommerceValidator.ValidationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidator), 'create'), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(retailCommerceValidator.ValidationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidator), 'create'), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }

            // Load general counters
            RetailCommerceValidatorCounters::loadGeneralCounters(retailCommerceValidator.ValidationId, 0);

            // Increment generic counters and set timestamps
            RetailCommerceValidatorTimeStamp::AddStartTimeStamp("@Retail:RetailCommerceValidatorValidationCreationTimestamp", retailCommerceValidator.ValidationId);
            RetailCommerceValidatorCounters::incrementCounter("@Retail:RetailCommerceValidatorNumberOfValidationsCreatedMetricId", 1, 0, '', '', '', RetailCommerceValidatorLogType::Total, "@Retail:RetailCommerceValidatorNumberOfValidationsCreatedMetricId" );

            // Increment Channel Type creation counters
            if (retailChanneltable.ChannelType == RetailChannelType::RetailStore)
            {
                RetailCommerceValidatorCounters::incrementCounter("@Retail:RetailCommerceValidatorNumberOfRetailStoresCreated", 1, 0, '', '', '', RetailCommerceValidatorLogType::Total, "@Retail:RetailCommerceValidatorNumberOfRetailStoresCreated" );
            }
            else if (retailChanneltable.ChannelType == RetailChannelType::SharePointOnlineStore)
            {
                RetailCommerceValidatorCounters::incrementCounter("@Retail:RetailCommerceValidatorNumberOfOnlineStoresCreated", 1, 0, '', '', '', RetailCommerceValidatorLogType::Total, "@Retail:RetailCommerceValidatorNumberOfOnlineStoresCreated" );
            }
            
            //*************************************************************************************
            //  Telemetry : Validation creation stop event
            //*************************************************************************************
            if (retailCommerceValidatorParameters.TelemetryLevel == RetailCommerceValidatorTelemetryLevel::Diagnostic)
            {
                RetailCommerceValidatorTelemetry::addValidationCreationTelemetry(false, retailCommerceValidator, _oMOperatingUnitId);
            }
            //*************************************************************************************

            // Execute validation
            if (_executeNow)
            {
                RetailCommerceValidator::execute(retailCommerceValidator.ValidationId, RetailCommerceValidatorExecutionMode::ExecuteAll);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes a validation.
    /// Modes:
    /// - ExecuteAll    : Reset all tests and restart execution from Setup tests.
    /// - ExecuteFailed : Reset status from Tests with warnings or errors and reschedule.
    /// </summary>
    /// <param name = "_validationId">The validation id.</param>
    /// <param name = "_executionMode">The execution mode (ExecuteAll/ExecuteFailed).</param>
    public static void execute(RetailCommerceValidatorId _validationId, RetailCommerceValidatorExecutionMode _executionMode)
    {
        // Select validation
        RetailCommerceValidatorParameters retailCommerceValidatorParameters = RetailCommerceValidatorParameters::find();
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(_validationId, true);

        if (!retailCommerceValidator)
        {
            return;
        }

        RetailCommerceValidator validatorRunning;

        select firstonly validatorRunning
                where validatorRunning.ValidationId == _validationId &&
                    validatorRunning.ValidationExecutionStatus == RetailCommerceValidatorExecutionStatus::InProgress;

        // Try cancel all batch jobs for the validation
        if (validatorRunning)
        {
            if (RetailCommerceValidatorScheduler::cancelAllBatchJobs(_validationId))
            {
                // Change status of current validation to "Not Started" in case a batch job execution was cancelled
                ttsbegin;
                RetailCommerceValidator retailCommerceValidatorReset = RetailCommerceValidator::find(_validationId, true);
                retailCommerceValidatorReset.ValidationExecutionStatus = RetailCommerceValidatorExecutionStatus::NotStarted;
                retailCommerceValidatorReset.ValidationExecutionPhase = RetailCommerceValidatorExecutionPhase::NotStarted;
                retailCommerceValidatorReset.ValidationResultStatus = RetailCommerceValidatorResultStatus::None;
                retailCommerceValidatorReset.ValidationProgressPercentage = 0.00;
                retailCommerceValidatorReset.update();
                ttscommit;

                Info::addMessage(Exception::Warning, strFmt("@Retail:RetailCommerceValidatorCancelingExecutionMessage", retailCommerceValidator.CurrentBatchJobId));
                return;
            }
        }

        if (_executionMode == RetailCommerceValidatorExecutionMode::ExecuteAll)
        {
            // Reset tests (delete tests and worktables)
            RetailCommerceValidator::resetTests(_validationId);
        }

        // Create a new batch job
        BatchHeader batchHeader = RetailCommerceValidatorScheduler::createBatchJob(_validationId);

        if (batchHeader)
        {
            //*************************************************************************************
            //  Telemetry : Validation execution start event
            //*************************************************************************************
            if (retailCommerceValidatorParameters.TelemetryLevel == RetailCommerceValidatorTelemetryLevel::Diagnostic)
            {
                RetailCommerceValidatorTelemetry::addValidationExecutionTelemetry(true, retailCommerceValidator, batchHeader.parmBatchHeaderId());
            }
            //*************************************************************************************

            // Create counters for rules
            RetailCommerceValidatorRules::loadRuleCounters("@Retail:RetailCommerceValidatorCounterPerRuleMetricId", '', batchHeader.parmBatchHeaderId());
            RetailCommerceValidatorRules::loadRuleCounters('@Retail:RetailCommerceValidatorCounterPerValidationRuleMetricId', retailCommerceValidator.ValidationId, batchHeader.parmBatchHeaderId());

            // prepare validation mode
            switch (_executionMode)
            {
                case RetailCommerceValidatorExecutionMode::ExecuteAll:
                    // Reset validation
                    RetailCommerceValidator::resetValidation(_validationId, batchHeader.parmBatchHeaderId(), _executionMode);
                    // Schedule setup tasks
                    RetailCommerceValidatorScheduler::scheduleSetupTasksWithAutomatedRun(_validationId, batchHeader, retailCommerceValidator.IsAutomatedRun);

                    // Reset passed entities
                    RetailCommerceValidator::resetPassedEntitiesTables(_validationId);
                    break;

                case RetailCommerceValidatorExecutionMode::ExecuteFailed:
                    // Reset validation
                    RetailCommerceValidator::resetValidation(_validationId, batchHeader.parmBatchHeaderId(), _executionMode);
                    // Schedule failed functional tasks
                    RetailCommerceValidatorScheduler::scheduleFunctionalTasks(_validationId, batchHeader);

                    // Reset passed entities
                    RetailCommerceValidator::resetPassedEntitiesTables(_validationId);
                    break;
            }

        }
        else
        {
            info::addMessage(Exception::Error, "@Retail:RetailCommerceValidatorBatchJobMissingErrorMessage");
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastCompletedBatchJobId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find last batch job run for the validator that successfully completed.
    /// </summary>
    /// <param name = "_omOperatingUnitId">The operating unit id.</param>
    /// <returns>The RecId of last successful batch job.</returns>
    public static RefRecId findLastCompletedBatchJobId(RefRecId _omOperatingUnitId)
    {
        RetailCommerceValidator automatedValidator = RetailCommerceValidator::findByOperatingUnitAndAutomatedRun(_omOperatingUnitId, NoYes::Yes);
        RetailCommerceValidator manualValidator = RetailCommerceValidator::findByOperatingUnitAndAutomatedRun(_omOperatingUnitId, NoYes::No);

        RefRecId lastCompletedBatchJobId = automatedValidator.LastCompletedDateTime > manualValidator.LastCompletedDateTime
            ? automatedValidator.LastCompletedBatchJobId
            : manualValidator.LastCompletedBatchJobId;

        return lastCompletedBatchJobId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastCompletedValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find last completed validation for the channel.
    /// </summary>
    /// <param name = "_omOperatingUnitId">The operating unit id.</param>
    /// <returns>The last completed validation for the channel.</returns>
    public static RetailCommerceValidator findLastCompletedValidation(RefRecId _omOperatingUnitId)
    {
        RetailCommerceValidator automatedValidator = RetailCommerceValidator::findByOperatingUnitAndAutomatedRun(_omOperatingUnitId, NoYes::Yes);
        RetailCommerceValidator manualValidator = RetailCommerceValidator::findByOperatingUnitAndAutomatedRun(_omOperatingUnitId, NoYes::No);

        RetailCommerceValidator lastCompletedValidation = automatedValidator.LastCompletedDateTime > manualValidator.LastCompletedDateTime
            ? automatedValidator
            : manualValidator;

        return lastCompletedValidation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTests</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reset Validation Tests to restart validation.
    /// - Deletes all tests from validation.
    /// </summary>
    /// <param name = "_validationId">The validation id.</param>
    private static void resetTests(RetailCommerceValidatorId _validationId)
    {
        RetailCommerceValidatorTests retailCommerceValidatorTests;
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(_validationId);
        RetailCommerceValidatorParameters parameters = retailCommerceValidatorParameters::find();
        System.Exception exception;

        try
        {
            ttsbegin;
            // revert validation changes on the General Counters
            RetailCommerceValidatorCounters::decrementGeneralCounters(_validationId, true, false);

            // Delete all tests
            delete_from retailCommerceValidatorTests 
                where retailCommerceValidatorTests.ValidationId == _validationId;

            // reset WorkTables
            RetailCommerceValidator::resetWorkTables(_validationId);
            ttscommit;
        }
        catch (exception)
        {
            if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
            {
                RetailCommerceValidatorExceptions::logRetry(_validationId, "@Retail:RetailCommerceValidatorResetTest", xSession::currentRetryCount(), false, exception);
            }
            else
            {
                RetailCommerceValidatorExceptions::logRetry(_validationId, "@Retail:RetailCommerceValidatorResetTest", xSession::currentRetryCount(), true, exception);
                retry;
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>resetStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reset Validation Tests Execution Status and Result Status for tests with Warnings or errors.
    /// </summary>
    /// <param name = "_validationId">The validation Id.</param>
    private static void resetStatus(RetailCommerceValidatorId _validationId)
    {
        RetailCommerceValidatorTests retailCommerceValidatorTests;

        // Revert failed tests on the Error/Warning/Message(EWM) counters
        RetailCommerceValidatorCounters::decrementValidationFailedCounters(_validationId);

        // Update tests result status and execution status
        ttsbegin;
        update_recordset retailCommerceValidatorTests
            setting ExecutionStatus = RetailCommerceValidatorExecutionStatus::NotStarted,
                    ResultStatus = RetailCommerceValidatorResultStatus::None,
                    LogType = RetailCommerceValidatorLogType::Info,
                    WarningCount = 0,
                    ErrorCount = 0,
                    MessageCount = 0,
                    TotalCount = 0
            where retailCommerceValidatorTests.ValidationId == _validationId
               && (retailCommerceValidatorTests.ResultStatus == RetailCommerceValidatorResultStatus::Error ||
                   retailCommerceValidatorTests.ResultStatus == RetailCommerceValidatorResultStatus::Warning);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reset validation table <c>RetailCommerceValidator</c> fields for a new execution.
    /// </summary>
    /// <param name = "_validationId">The validation id.</param>
    /// <param name = "_currentBatchJobId">The current batch job id.</param>
    /// <param name = "_executionMode">The execution mode (Execute All / Execute failed).</param>
    private static void resetValidation(RetailCommerceValidatorId _validationId, RefRecId _currentBatchJobId, RetailCommerceValidatorExecutionMode _executionMode)
    {
        ttsbegin;
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(_validationId, true);
        // Restore Tests
        switch (_executionMode)
        {
            case RetailCommerceValidatorExecutionMode::ExecuteAll:

                // reset validation progress
                retailCommerceValidator.CurrentBatchJobId = _currentBatchJobId;
                retailCommerceValidator.ValidationExecutedTest = 0;
                retailCommerceValidator.ValidationTotalTest = 0;
                retailCommerceValidator.ValidationProgressPercentage = 0;
                retailCommerceValidator.ValidationExecutionStatus = RetailCommerceValidatorExecutionStatus::InProgress;
                retailCommerceValidator.ValidationResultStatus = RetailCommerceValidatorResultStatus::None;
                retailCommerceValidator.ExecutionMode = RetailCommerceValidatorExecutionMode::ExecuteAll;
                break;
            case RetailCommerceValidatorExecutionMode::ExecuteFailed:

                // Reset status of tests with Error or Warnings
                RetailCommerceValidator::resetStatus(_validationId);
                
                // Update validation progress for partial test execution
                retailCommerceValidator.CurrentBatchJobId = _currentBatchJobId;
                retailCommerceValidator.ValidationExecutedTest = RetailCommerceValidator::calculateTotalPassedTests( _validationId);
                retailCommerceValidator.ValidationProgressPercentage = 
                    retailCommerceValidator.ValidationTotalTest > 0 
                    ? retailCommerceValidator.ValidationExecutedTest / retailCommerceValidator.ValidationTotalTest
                    : 0;
                retailCommerceValidator.ValidationExecutionStatus = RetailCommerceValidatorExecutionStatus::InProgress;
                retailCommerceValidator.ValidationExecutionPhase = RetailCommerceValidatorExecutionPhase::Functional;
                retailCommerceValidator.ValidationResultStatus = RetailCommerceValidatorResultStatus::None;
                retailCommerceValidator.ExecutionMode = RetailCommerceValidatorExecutionMode::ExecuteFailed;
                break;
        }
        // Update Validation

        retailCommerceValidator.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetWorkTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reset all worktables from the validation.
    /// </summary>
    /// <param name = "_validationId">The validationId.</param>
    private static void resetWorkTables(RetailCommerceValidatorId _validationId)
    {
        RetailCommerceValidatorWorkChannelAssortedProducts channelAssortedProducts;
        RetailCommerceValidatorWorkChannelProducts channelProducts;
        RetailCommerceValidatorWorkChannelCatalogs channelCatalogs;
        RetailCommerceValidatorWorkChannelCategoryHierarchies channelCategoryHierarchies;
        RetailCommerceValidatorWorkChannelCategories channelCategories;
        RetailCommerceValidatorWorkChannelLanguages channelLanguages;
        RetailCommerceValidatorParameters parameters = retailCommerceValidatorParameters::find();
        System.Exception exception;

        try
        {
            ttsbegin;
            delete_from channelAssortedProducts where channelAssortedProducts.ValidationId == _validationId;
            delete_from channelProducts where channelProducts.ValidationId == _validationId;
            delete_from channelCatalogs where channelCatalogs.ValidationId == _validationId;
            delete_from channelCategoryHierarchies where channelCategoryHierarchies.ValidationId == _validationId;
            delete_from channelCategories where channelCategories.ValidationId == _validationId;
            delete_from channelLanguages where channelLanguages.ValidationId == _validationId;
            ttscommit;
        }
        catch (exception)
        {
            if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
            {
                RetailCommerceValidatorExceptions::logRetry(_validationId, "@Retail:RetailCommerceValidatorResetTest", xSession::currentRetryCount(), false, exception);
            }
            else
            {
                RetailCommerceValidatorExceptions::logRetry(_validationId, "@Retail:RetailCommerceValidatorResetTest", xSession::currentRetryCount(), true, exception);
                sleep(parameters.PauseInMsBeforeRetry);
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateValidationProgress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the validation progress fields.
    /// </summary>
    /// <param name = "_validationId">The validation id.</param>
    /// <param name = "_resultStatus">The current reported test result status.</param>
    internal static void updateValidationProgress(RetailCommerceValidatorId _validationId, RetailCommerceValidatorResultStatus _resultStatus)
    {
        // update validation status
        ttsbegin;
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(_validationId, true);

        switch (retailCommerceValidator.ValidationResultStatus)
        {
            case RetailCommerceValidatorResultStatus::Passed:
            case RetailCommerceValidatorResultStatus::None:
                retailCommerceValidator.ValidationResultStatus = _resultStatus;
                break;
            case RetailCommerceValidatorResultStatus::Warning:
                retailCommerceValidator.ValidationResultStatus = 
                    _resultStatus == RetailCommerceValidatorResultStatus::Error
                    ? RetailCommerceValidatorResultStatus::Error
                    : retailCommerceValidator.ValidationResultStatus;
                break;
        }

        // update validation progress
        retailCommerceValidator.ValidationExecutedTest++;
        retailCommerceValidator.ValidationProgressPercentage =
            retailCommerceValidator.ValidationTotalTest != 0
            ? (
                (retailCommerceValidator.ValidationExecutedTest / retailCommerceValidator.ValidationTotalTest) * 100 <= 100
                ? (retailCommerceValidator.ValidationExecutedTest / retailCommerceValidator.ValidationTotalTest) * 100
                : 100
              )
            : 0;

        retailCommerceValidator.update();
        ttscommit;

        // Update charts
        RetailCommerceValidatorChartTotalizer::updateTotalResultsChart(retailCommerceValidator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateValidationTotalTests</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the validation Total tests
    /// </summary>
    /// <param name = "_validationId">The validation Id.</param>
    /// <param name = "_executionPhase">The execution phase.</param>
    internal static void updateValidationTotalTests(RetailCommerceValidatorId _validationId, RetailCommerceValidatorExecutionPhase _executionPhase)
    {
        // Get the sum of tests
        RetailCommerceValidatorTests retailCommerceValidatorTests;
        RetailCommerceValidatorRules retailCommerceValidatorRules;
        RetailCommerceValidatorEntityFunction entityFunction = 
            _executionPhase == RetailCommerceValidatorExecutionPhase::Setup 
            ? RetailCommerceValidatorEntityFunction::Setup 
            : RetailCommerceValidatorEntityFunction::Functional;
        select count(RecId) from retailCommerceValidatorTests 
            join retailCommerceValidatorRules
            where retailCommerceValidatorTests.RuleId == retailCommerceValidatorRules.RuleId
                && retailCommerceValidatorTests.ValidationId == _validationId
                && retailCommerceValidatorTests.EntityFunction == entityFunction;

        // Update validation Test total.
        ttsbegin;
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(_validationId, true);
        retailCommerceValidator.ValidationTotalTest = retailCommerceValidatorTests.RecId;
        retailCommerceValidator.ValidationExecutedTest = 0;
        retailCommerceValidator.ValidationProgressPercentage = 0;
        retailCommerceValidator.ValidationExecutionPhase = _executionPhase;
        retailCommerceValidator.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalPassedTests</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of PASSED executed tests on the validation.
    /// </summary>
    /// <param name = "_validationId">The validation Id.</param>
    /// <returns>The count of passed tests for the validation.</returns>
    private static int64 calculateTotalPassedTests(RetailCommerceValidatorId _validationId)
    {
        // Count number of Setup tests + passed functional tests
        RetailCommerceValidatorTests retailCommerceValidatorTests;
        select count(RecId) from retailCommerceValidatorTests
                    where retailCommerceValidatorTests.ValidationId == _validationId
                        && retailCommerceValidatorTests.ResultStatus == RetailCommerceValidatorResultStatus::Passed
                        && retailCommerceValidatorTests.ExecutionStatus == RetailCommerceValidatorExecutionStatus::Finished
                        && retailCommerceValidatorTests.EntityFunction == RetailCommerceValidatorEntityFunction::Functional;

        return retailCommerceValidatorTests.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNumberSequences</Name>
				<Source><![CDATA[
    public static void createNumberSequences()
    {
        // Create Number sequence references (in case they don't exist)
        if (!(NumberSeqDatatype::checkforReferences(extendedTypeNum(RetailCommerceValidatorId     )) &&
              NumberSeqDatatype::checkforReferences(extendedTypeNum(RetailCommerceValidatorTestId))))
        {
            NumberSeqScope numberSeqScope = NumberSeqScopeFactory::createGlobalScope();
            NumberSeqApplicationModule::createReferences(NumberSeqModule::RetailParameters);
            NumberSequenceTable::autoCreate(extendedTypeNum(RetailCommerceValidatorId), numberSeqScope);
            NumberSequenceTable::autoCreate(extendedTypeNum(RetailCommerceValidatorTestId), numberSeqScope);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a validation.
    /// </summary>
    public void delete()
    {
        // Decrement general counters
        RetailCommerceValidatorCounters::decrementGeneralCounters(this.ValidationId, false, true);

        // Delete validation and all related tables selected on the 
        // RetailCommerceValidator table, under "delete actions".
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChannelLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Legal entity of the channel.
    /// </summary>
    /// <param name = "_validationId">The validation Id.</param>
    /// <returns>The <c>DataAreaId</c> for the company.</returns>
    internal static DataAreaId getChannelLegalEntity(RetailCommerceValidatorId _validationId)
    {
        RetailStoreTable retailStoreTable;
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(_validationId);
        DataAreaId legalEntity;

        select firstonly InventLocationDataAreaId from retailStoreTable
            where retailStoreTable.OMOperatingUnitID == retailCommerceValidator.OMOperatingUnitId
                && retailStoreTable.ChannelType == RetailChannelType::RetailStore;

        legalEntity = retailStoreTable.inventLocationDataAreaId;

        if (!legalEntity)
        {
            RetailOnlineChannelTable onlineChannelTable;

            select firstonly InventLocationDataAreaId from onlineChannelTable
                where onlineChannelTable.OMOperatingUnitID == retailCommerceValidator.OMOperatingUnitId
                && (onlineChannelTable.ChannelType == RetailChannelType::OnlineStore || onlineChannelTable.ChannelType == RetailChannelType::SharePointOnlineStore);

            legalEntity = onlineChannelTable.inventLocationDataAreaId;
        }

        return legalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleSelectedValidationsInBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedules the batch job for selected validations.
    /// A new batch job is created and validations container is added as the parameter to the batch job.
    /// The batch job loops over each validation and initiates the execution of the validation.
    /// </summary>
    /// <param name = "_validationsCont">The container contains validation ids.</param>
    internal static void scheduleSelectedValidationsInBatch(container _validationsCont)
    {
        BatchHeader batchHeader;
        RetailCommerceValidatorValidateAllBatch validateAllBatch;

        ttsbegin;
        // Create a Batch job for the all validations execution.
        batchHeader = BatchHeader::construct();
        batchHeader.parmCaption(strFmt("@Retail:RetailCommerceValidatorValidateSelectedBatchJobDesc"));
        batchHeader.saveHeader();

        validateAllBatch = RetailCommerceValidatorValidateAllBatch::findOrCreate(true);

        if (validateAllBatch.CurrentBatchJobId != batchHeader.parmBatchHeaderId())
        {
            validateAllBatch.CurrentBatchJobId = batchHeader.parmBatchHeaderId();
            validateAllBatch.update();
        }

        RetailCommerceValidatorValidateAllChannels validateAllChannels = new RetailCommerceValidatorValidateAllChannels();
        validateAllChannels.parmValidationsContainer(_validationsCont);
        validateAllChannels.pack();

        BatchInfo batchInfoValidateAll = validateAllChannels.batchInfo();
        batchInfoValidateAll.parmBatchExecute(NoYes::Yes);
        batchInfoValidateAll.parmGroupId('');
        batchInfoValidateAll.parmCaption(strFmt("@Retail:RetailCommerceValidatorValidateSelectedBatchJobDesc"));

        batchHeader.addTask(validateAllChannels);

        batchHeader.save();

        info(strFmt("@Retail:RetailCommerceValidatorABatchJobScheduled",batchHeader.parmBatchHeaderId()));

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetValidatorStatusToNotStarted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the status of the validation to not started.
    /// </summary>
    /// <param name = "_validationId">The validation id.</param>
    internal static void resetValidatorStatusToNotStarted(RetailCommerceValidatorId _validationId)
    {
        RetailCommerceValidator validatorNotStarted;

        ttsbegin;
        update_recordset validatorNotStarted
            setting ValidationExecutionStatus = RetailCommerceValidatorExecutionStatus::NotStarted,
                    ValidationResultStatus = RetailCommerceValidatorResultStatus::None,
                    ValidationExecutionPhase = RetailCommerceValidatorExecutionPhase::NotStarted,
                    ValidationExecutedTest = 0,
                    ValidationProgressPercentage = 0,
                    ValidationTotalTest = 0,
                    CurrentBatchJobId = 0
            where validatorNotStarted.ValidationId == _validationId;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canScheduleValidateSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if user can proceed with the execution of "Validate-All" or "Multi-select validation".
    ///    1. Verifies if any validation is "In-progress" from the selected validations list. If yes,returns "FALSE".
    ///    2. Verifies if there is already batch job running/Scheduled for "Validate-All" or "Multi-select validation". If yes,returns "FALSE".
    /// </summary>
    /// <param name = "_validationCont">The container contains validation ids.</param>
    /// <param name = "_isValidateAll">Boolean value represents the operation, validate all or multi-select validation.</param>
    /// <returns>True, if good to go with "Validate-All"/"Multi-select validation", otherwise Flase.</returns>
    internal static boolean canScheduleValidateSelected(container _validationCont, boolean _isValidateAll = true)
    {
        boolean schedule = true;
        RetailCommerceValidator validator;
        RetailCommerceValidatorValidateAllBatch validateAllBatch;


        select firstonly validator
            where validator.ValidationExecutionStatus == RetailCommerceValidatorExecutionStatus::InProgress;

        // Don't run "Validate-all" or "Multi-Select validation", if any validation is in progress.
        if (validator.RecId)
        {
            schedule = false;

            if (_isValidateAll)
            {
                throw warning("@Retail:RetailCommerceValidatorCannotRunValidateAll");
            }
            else
            {
                throw warning("@Retail:RetailCommerceValidatorMultiSelectValidation");
            }
        }
        // Don't run "Validate-all" or "Multi-Select validation", if there is already a batch job scheduled.
        // It prevents the parallel execution of validation on same store and prevents the update conflict exception on BatchJob table.
        else
        {
            BatchJob batchJob;

            select firstonly batchJob
                exists join validateAllBatch
                where validateAllBatch.CurrentBatchJobId == batchJob.RecId;

            if (batchJob.RecId &&
                (batchJob.Status == BatchStatus::Cancelling || batchJob.Status == BatchStatus::Executing ||
                batchJob.Status == BatchStatus::Scheduled || batchJob.Status == BatchStatus::Waiting)
                )
            {
                schedule = false;

                throw warning("@Retail:RetailCommerceValidatorBatchJobIsScheduledAlready");
            }
        }

        // Check if, it is not a first time validation for any one of the validtions from the container.
        // If not a first time validation, give a "Yes/No" dialog input to the user.
        if (!RetailCommerceValidator::checkIfFirstTimeValidation(_validationCont))
        {
            DialogButton dialogInput = Box::YesNo("@Retail:RetailCommerceValidatorResetAllWorkDialog",DialogButton::No);

            if (dialogInput == DialogButton::No)
            {
                schedule = false;
            }
        }

        return schedule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfFirstTimeValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if, it is a first time validation for any of the validation ids in the container.
    /// </summary>
    /// <param name = "_validationsCont">The container contains validation ids.</param>
    /// <returns>True, if first time validation, otherwise false.</returns>
    private static boolean checkIfFirstTimeValidation(container _validationsCont)
    {
        boolean firstTimeValidation = true;

        int contLength = conLen(_validationsCont);

        for (int i = 1; i <= contLength; i++)
        {
            RetailCommerceValidatorId validationId = conPeek(_validationsCont,i);
            RetailCommerceValidator validator;

            select firstonly validator
                where validator.validationId == validationId
                    && validator.ValidationExecutionStatus == RetailCommerceValidatorExecutionStatus::Finished;

            if (validator.RecId)
            {
                firstTimeValidation = false;

                break;
            }
        }

        return firstTimeValidation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetPassedEntitiesTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reset all passed entities from the validation.
    /// </summary>
    /// <param name = "_validationId">The validationId.</param>
    private static void resetPassedEntitiesTables(RetailCommerceValidatorId _validationId)
    {
        RetailCommerceValidatorPassedCatalogs passedCatalogs;
        RetailCommerceValidatorPassedProducts passedProducts;
        RetailCommerceValidatorPassedCategories passedCategories;
        RetailCommerceValidatorPassedAttributes passedAttributes;
        RetailCommerceValidatorPassedAttributeGroups passedAttributeGroups;
        RetailCommerceValidatorPassedCategoryHierarchies passedCategoryhierarchies;
        RetailCommerceValidatorParameters parameters = retailCommerceValidatorParameters::find();
        System.Exception exception;

        try
        {
            ttsbegin;
            delete_from passedCatalogs where passedCatalogs.ValidationId == _validationId;
            delete_from passedProducts where passedProducts.ValidationId == _validationId;
            delete_from passedCategories where passedCategories.ValidationId == _validationId;
            delete_from passedAttributes where passedAttributes.ValidationId == _validationId;
            delete_from passedAttributeGroups where passedAttributeGroups.ValidationId == _validationId;
            delete_from passedCategoryhierarchies where passedCategoryhierarchies.ValidationId == _validationId;
            ttscommit;
        }
        catch (exception)
        {
            if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
            {
                RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorResetPassedEntity", funcName()), xSession::currentRetryCount(), false, exception);
            }
            else
            {
                RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorResetPassedEntity", funcName()), xSession::currentRetryCount(), true, exception);
                sleep(parameters.PauseInMsBeforeRetry);
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RanBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method indicating the creator of the validator.
    /// </summary>
    /// <returns>The creator of the validator.</returns>
    internal display str RanBy()
    {
        if (this.IsAutomatedRun)
        {
            return 'Copilot';
        }
        else
        {
            return this.CreatedBy;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@Retail:RetailCommerceValidatorLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>ValidationId</TitleField1>
	<TitleField2>OMOperatingUnitId</TitleField2>
	<ClusteredIndex>ValidationIdIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<PrimaryIndex>ValidationIdIdx</PrimaryIndex>
	<ReplacementKey>ValidationIdIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DeleteAction4</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailCommerceValidatorTests</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction2</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailCommerceValidatorBatchJobs</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction5</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailCommerceValidatorExceptions</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction6</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailCommerceValidatorLog</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction7</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailCommerceValidatorLogContext</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction3</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailCommerceValidatorCounters</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction8</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailCommerceValidatorTimeStamp</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction9</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailCommerceValidatorWorkChannelAssortedProducts</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction10</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailCommerceValidatorWorkChannelCatalogs</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction11</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailCommerceValidatorWorkChannelCategories</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction12</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailCommerceValidatorWorkChannelCategories</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction13</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailCommerceValidatorWorkChannelCategoryHierarchies</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction14</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailCommerceValidatorWorkChannelProducts</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>RetailCommerceValidator</Relation>
			<Table>RetailCommerceValidatorWorkChannelLanguages</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction15</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailCommerceValidatorLogCountersByContext</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ValidationId</Name>
			<ExtendedDataType>RetailCommerceValidatorId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OMOperatingUnitId</Name>
			<ExtendedDataType>OMOperatingUnitRefRecId</ExtendedDataType>
			<Label>@Retail:ReportChannelId</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ChannelId</Name>
			<ExtendedDataType>RetailChannelId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ValidationProgressPercentage</Name>
			<Label>@Retail:RetailCommerceValidatorProgressPercentageLabel</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ValidationExecutionStatus</Name>
			<EnumType>RetailCommerceValidatorExecutionStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ValidationResultStatus</Name>
			<EnumType>RetailCommerceValidatorResultStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ValidationExecutedTest</Name>
			<ExtendedDataType>RetailCommerceValidatorTestCounter</ExtendedDataType>
			<Label>@Retail:RetailCommerceValidatorExecutedTests</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ValidationTotalTest</Name>
			<ExtendedDataType>RetailCommerceValidatorTestCounter</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ValidationExecutionPhase</Name>
			<EnumType>RetailCommerceValidatorExecutionPhase</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CounterRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@Retail:RetailCommerceValidatorCounterIdlabel</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MetricId</Name>
			<ExtendedDataType>RetailCommerceValidatorMetricId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CurrentBatchJobId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@Retail:RetailCommerceValidatorBatchJobId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExecutionMode</Name>
			<EnumType>RetailCommerceValidatorExecutionMode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAutomatedRun</Name>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LastCompletedBatchJobId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>LastCompletedDateTime</Name>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ValidationIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ValidationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OMOperatingUnit</Name>
			<RelatedTable>OMOperatingUnit</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OMOperatingUnitId</Name>
					<Field>OMOperatingUnitId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailCommerceValidatorCounters</Name>
			<RelatedTable>RetailCommerceValidatorCounters</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CounterRecId</Name>
					<Field>CounterRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>