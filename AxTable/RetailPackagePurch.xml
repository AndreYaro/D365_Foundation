<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPackagePurch</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailPackagePurch extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the value for the <c>PurchId</c> field from the <c>PurchTable</c> table.
    /// </summary>
    /// <param name="_purchTable">
    /// An instance of the <c>PurchTable</c> table.
    /// </param>
    public void initFromPurchTable(PurchTable _purchTable)
    {
        this.PurchId    = _purchTable.PurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpRetailPackagePurch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the value for the fields from the <c>TmpRetailPackagePurch</c> table.
    /// </summary>
    /// <param name = "_tmpRetailPackagePurch">
    /// An instance of <c>TmpRetailPackagePurch</c> table.
    /// </param>
    public void initFromTmpRetailPackagePurch(TmpRetailPackagePurch _tmpRetailPackagePurch)
    {
        this.PackageId  = _tmpRetailPackagePurch.PackageId;
        this.Qty        = _tmpRetailPackagePurch.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRBOPackagePurch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the value for the fields from the <c>RetailPackagePurch</c> table.
    /// </summary>
    /// <param name="_packagePurch">
    /// An instance of the <c>RetailPackagePurch</c> table.
    /// </param>
    /// <param name="_copyQty">
    /// The current value for copy quantity.
    /// </param>
    /// <param name="_qty">
    /// The current value for quantity.
    /// </param>
    public void initFromRBOPackagePurch(RetailPackagePurch _packagePurch,
                                        boolean         _copyQty       = true,
                                        Qty             _qty           = _packagePurch.Qty)
    {
        this.PackageId  = _packagePurch.PackageId;
        this.LineNum    = _packagePurch.LineNum;
        this.Qty        = _copyQty ? _qty : 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the method when a field is modified.
    /// </summary>
    /// <param name="_fieldId">
    /// The field Id which is modified.
    /// </param>
    /// <remarks>
    /// If the received quantity or quantity of the package is changed, then received quantity or purch quantity for relevant purchase order lines
    /// need to be changed in accordance.
    /// </remarks>
    public void modifiedField(FieldId _fieldId)
    {
        PurchLine           purchLine;
        RetailPackageLines     packageLines;

        super(_fieldId);

        if (_fieldId == fieldNum(RetailPackagePurch,QtyReceived))
        {
            //If the received quantity of the package is changed the received quantity for relevant purchase order lines need to be changed in accordance
            ttsbegin;
            while select forupdate purchLine
            where purchLine.PurchId           == this.PurchId &&
                  purchLine.RetailPackageId      == this.PackageId &&
                  purchLine.rboPackageLineNum == this.LineNum
            {
                packageLines = RetailPackageLines::find(purchLine.RetailPackageId,purchLine.ItemId,purchLine.InventDimId);
                if (packageLines)
                {
                    purchLine.PurchReceivedNow = packageLines.Qty * this.QtyReceived;

                    purchLine.InventReceivedNow = UnitOfMeasureConverter::convert(purchLine.PurchReceivedNow,
                                                                                  UnitOfMeasure::unitOfMeasureIdBySymbol(purchLine.PurchUnit),
                                                                                  UnitOfMeasure::unitOfMeasureIdBySymbol(purchLine.inventTable().inventUnitId()),
                                                                                  NoYes::No);

                    purchLine.update();
                }
            }
            RetailTracer::Info('Replenishment', funcName(), 'Received quantity in relevant purchase order lines was updated. Purchase order: %1.', this.PurchId);
            ttscommit;
        }

        if (_fieldId == fieldNum(RetailPackagePurch, Qty))
        {
            ttsbegin;
            while select forupdate purchLine
            where purchLine.PurchId             == this.PurchId &&
                  purchLine.RetailPackageId        == this.PackageId &&
                  purchLine.rboPackageLineNum   == this.LineNum
            {
                packageLines = RetailPackageLines::find(purchLine.RetailPackageId,purchLine.ItemId,purchLine.InventDimId);
                if (packageLines)
                {
                    purchLine.PurchQty = packageLines.Qty * this.Qty;
                    purchLine.update();
                }
            }
            ttscommit;
            RetailTracer::Info('Replenishment', funcName(), 'Quantity in relevant purchase order lines was updated. Purchase order: %1.', this.PurchId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packageName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the retail package name.
    /// </summary>
    /// <returns>
    /// The retail package name for the current package.
    /// </returns>
    display Name packageName()
    {
        return RetailPackageTable::find(this.PackageId).PackageName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current record is valid and can be deleted from database.
    /// </summary>
    /// <returns>
    /// true if the record is valid; otherwise false.
    /// </returns>
    /// <remarks>
    /// Prompts user an message whether they want to delete package and all lines related to the current package in purchase order.
    /// </remarks>
    public boolean validateDelete()
    {
        boolean ret;

        if (Box::yesNo("@RET4408",DialogButton::No))
            ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>RetailPackagePurch</c> table exists.
    /// </summary>
    /// <param name="_purchId">
    /// The purchase ID of the <c>RetailPackagePurch</c> record.
    /// </param>
    /// <param name="_packageId">
    /// The package ID of the <c>RetailPackagePurch</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(PurchId _purchId, RetailPackageId _packageId = '')
    {
        boolean ret = false;

        if (_purchId && _packageId)
        {
            ret = (select firstonly RecId from retailPackagePurch
                        where retailPackagePurch.PurchId   == _purchId &&
                              retailPackagePurch.PackageId == _packageId).RecId != 0;
        }
        else if (_purchId)
        {
            ret = (select firstonly RecId from retailPackagePurch
                        where retailPackagePurch.PurchId   == _purchId).RecId != 0;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailPackagePurch</c> table.
    /// </summary>
    /// <param name="_purchId">
    /// The purchase ID of the <c>RetailPackagePurch</c> record.
    /// </param>
    /// <param name="_packageId">
    /// The package ID of the <c>RetailPackagePurch</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailPackagePurch</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailPackagePurch find(PurchId _purchId, RetailPackageId _packageId, boolean _forUpdate = false)
    {
        RetailPackagePurch  packagePurch;

        if (_purchId && _packageId)
        {
            packagePurch.selectForUpdate(_forUpdate);

            select firstonly packagePurch
                index hint PurchPackageLineIdx
                where packagePurch.PurchId == _purchId &&
                      packagePurch.PackageId == _packageId;
        }

        return packagePurch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailPackagePurch</c> table that depends on the <c>RecId</c> field.
    /// </summary>
    /// <param name="_recId">
    /// The ID number of the <c>RetailPackagePurch</c> record.
    /// </param>
    /// <param name="update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailPackagePurch</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailPackagePurch findRecId(RecId    _recId,
                                     boolean  update = false)
    {
        RetailPackagePurch packagePurch;

        packagePurch.selectForUpdate(update);

        select firstonly packagePurch
            index hint RecId
            where packagePurch.RecId  == _recId;

        return packagePurch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>highestPackageLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns the highest package line number for the purchase order.
    /// </summary>
    /// <param name="purchId">
    ///   A <c>PurchId</c>.
    /// </param>
    /// <param name="packageId">
    ///   A <c>RetailPackageId</c>.
    /// </param>
    /// <returns>
    ///   The highest package line number for the purchase order.
    /// </returns>
    public static LineNum  highestPackageLineNum(PurchId  purchId,RetailPackageId packageId)
    {
        RetailPackagePurch packagePurch;

        select maxof(LineNum) from packagePurch
            where packagePurch.PurchId == purchId
        && packagePurch.PackageId == packageId;

        return packagePurch.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainingCrossDockingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity that is remaining to be cross docked.
    /// </summary>
    /// <returns>
    /// The quantity that is remaining to be cross docked.
    /// </returns>
    public display Qty remainingCrossDockingQty()
    {
        return this.Qty - this.AllocatedCrossDockQty;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET260352</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@RET4399</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>PackageId</TitleField1>
	<TitleField2>LineNum</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>PurchPackageLineIdx</ClusteredIndex>
	<Modules>Merchandising</Modules>
	<PrimaryIndex>PurchPackageLineIdx</PrimaryIndex>
	<ReplacementKey>PurchPackageLineIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>PurchLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PurchLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllocatedCrossDockQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyReceived</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PackageId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailPackageId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchIdBase</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyReceived</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
			<Label>@SYS1743</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AllocatedCrossDockQty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailAllocatedCrossDockPackageQty</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PurchPackageLineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PackageId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>PurchLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchId</Name>
					<Field>PurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PackageId</Name>
					<Field>PackageId</Field>
					<RelatedField>RetailPackageId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LineNum</Name>
					<Field>LineNum</Field>
					<RelatedField>RBOPackageLineNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchId</Name>
					<SourceEDT>PurchIdBase</SourceEDT>
					<Field>PurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailPackageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailPackageTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PackageId</Name>
					<SourceEDT>RetailPackageId</SourceEDT>
					<Field>PackageId</Field>
					<RelatedField>PackageId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PackageIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>