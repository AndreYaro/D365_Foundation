<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxGSTTaxInformation_MY</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxGSTTaxInformation_MY extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillBankDefaultInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fill name and business registration number for a bank.
    /// </summary>
    /// <param name="_bankAccount">
    /// Bank account.
    /// </param>
    private void fillBankDefaultInformation(CompanyBankAccountId _bankAccount)
    {
        BankAccountTable        bankAccountTable;
        BankGroup               bankGroup;

        select firstOnly Name from bankAccountTable
			where bankAccountTable.AccountID    == _bankAccount
            join OrganizationNumber_MY from bankGroup
				where bankGroup.BankGroupId     == bankAccountTable.BankGroupId;

        this.Name                       = bankAccountTable.Name;
        this.OrganizationNumber			= bankGroup.OrganizationNumber_MY;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCustomerDefaultInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fill name, business registration number and country for a customer.
    /// </summary>
    /// <param name="_invoiceAccount">
    /// The customer.
    /// </param>
    /// <param name="_deliveryPostalAddress">
    /// The delivery postal address.
    /// </param>
    private void fillCustomerDefaultInformation(CustAccount _invoiceAccount, LogisticsPostalAddressRecId _deliveryPostalAddress = 0)
    {
        CustTable                                   custTable;
        DirPartyTable                               dirPartyTable;
        DirOrganization                             dirOrganization;
        logisticsAddressCountryRegionTranslation    logisticsAddressCountryRegionTranslation;
        LogisticsPostalAddress                      logisticsPostalAddress;
        DirPartyLocation                            partyLocation;

        if (_deliveryPostalAddress)
        {
            select firstOnly AccountNum from custTable
                where custTable.AccountNum == _invoiceAccount
                join Name from dirPartyTable
                    where dirPartyTable.RecId == custTable.Party
                // use outer join in case type of the customer is Person other than Organization
                outer join OrgNumber from dirOrganization
                    where dirOrganization.RecId == custTable.Party
                outer join CountryRegionId from logisticsPostalAddress
                    where logisticsPostalAddress.RecId == _deliveryPostalAddress
                outer join ShortName from logisticsAddressCountryRegionTranslation
                    where logisticsAddressCountryRegionTranslation.CountryRegionId == logisticsPostalAddress.CountryRegionId
                        && logisticsAddressCountryRegionTranslation.LanguageId == dirPartyTable.LanguageId;
        }
        else
        {
            select firstOnly AccountNum from custTable
                where custTable.AccountNum == _invoiceAccount
                join Name from dirPartyTable
                    where dirPartyTable.RecId == custTable.Party
                // use outer join in case type of the customer is Person other than Organization
                outer join OrgNumber from dirOrganization
                    where dirOrganization.RecId == custTable.Party
                outer join partyLocation
                    where partyLocation.IsPrimary == true
                        && partyLocation.Party == custTable.Party
                outer join CountryRegionId from logisticsPostalAddress
                    where  logisticsPostalAddress.Location == partyLocation.Location
                outer join ShortName from logisticsAddressCountryRegionTranslation
                    where logisticsAddressCountryRegionTranslation.CountryRegionId == logisticsPostalAddress.CountryRegionId
                        && logisticsAddressCountryRegionTranslation.LanguageId == dirPartyTable.LanguageId;
        }

        this.Name                       = dirPartyTable.name;
        this.OrganizationNumber         = dirOrganization.OrgNumber;
        this.Country                    = logisticsAddressCountryRegionTranslation.ShortName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillVendorDefaultInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fill name and business registration number for a vendor.
    /// </summary>
    /// <param name="_invoiceAccount">
    /// The vendor.
    /// </param>
    private void fillVendorDefaultInformation(VendAccount _invoiceAccount)
    {
        VendTable                                   vendTable;
        DirPartyTable                               dirPartyTable;
        DirOrganization                             dirOrganization;
        LogisticsAddressCountryRegionTranslation    logisticsAddressCountryRegionTranslation;
        LogisticsPostalAddress                      logisticsPostalAddress;
        DirPartyLocation                            partyLocation;

        select firstOnly Party from vendTable
            where vendTable.AccountNum == _invoiceAccount
            join Name from dirPartyTable
                where dirPartyTable.RecId == vendTable.Party
            // use outer join in case type of the vendor is Person other than Organization
            outer join OrgNumber from dirOrganization
                where dirOrganization.RecId == vendTable.Party
            outer join partyLocation
                where partyLocation.IsPrimary == true
                    && partyLocation.Party == vendTable.Party
            outer join CountryRegionId from logisticsPostalAddress
                where  logisticsPostalAddress.Location == partyLocation.Location
            outer join ShortName from logisticsAddressCountryRegionTranslation
                where logisticsAddressCountryRegionTranslation.CountryRegionId == logisticsPostalAddress.CountryRegionId
                    && logisticsAddressCountryRegionTranslation.LanguageId == dirPartyTable.LanguageId;

        this.Name                       = dirPartyTable.Name;
        this.OrganizationNumber         = dirOrganization.OrgNumber;
        this.Country                    = logisticsAddressCountryRegionTranslation.ShortName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initial GAF information from a customer invoice journal.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The customer invoice journal line.
    /// </param>
    public void initFromCustInvoiceJour(CustInvoiceJour _custInvoiceJour)
    {
        const LineNumber LineNumber = 10;

        CustVendAC          invoiceAccount;

        invoiceAccount = _custInvoiceJour.InvoiceAccount ? _custInvoiceJour.InvoiceAccount : _custInvoiceJour.OrderAccount;

        this.fillCustomerDefaultInformation(invoiceAccount, _custInvoiceJour.InvoicePostalAddress);
        this.InvoiceDate    = _custInvoiceJour.InvoiceDate;
        this.InvoiceId      = _custInvoiceJour.InvoiceId;
        this.LineNumber     = LineNumber;
        this.SourceTableId  = _custInvoiceJour.TableId;
        this.SourceRecId    = _custInvoiceJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initial GAF information from a customer invoice journal line.
    /// </summary>
    /// <param name="_custInvoiceTrans">
    /// The customer invoice journal line.
    /// </param>
    public void initFromCustInvoiceTrans(CustInvoiceTrans _custInvoiceTrans)
    {
        CustVendAC          invoiceAccount;
        CustInvoiceJour     custInvoiceJour;

        select firstOnly OrderAccount, InvoiceAccount, DeliveryPostalAddress, SalesId from custInvoiceJour
			where custInvoiceJour.SalesId               == _custInvoiceTrans.SalesId
				&& custInvoiceJour.InvoiceId            == _custInvoiceTrans.InvoiceId
				&& custInvoiceJour.InvoiceDate          == _custInvoiceTrans.InvoiceDate
				&& custInvoiceJour.numberSequenceGroup  == _custInvoiceTrans.numberSequenceGroup;

        invoiceAccount = custInvoiceJour.InvoiceAccount ? custInvoiceJour.InvoiceAccount : custInvoiceJour.OrderAccount;

        this.fillCustomerDefaultInformation(invoiceAccount, custInvoiceJour.DeliveryPostalAddress);
        this.Description     = _custInvoiceTrans.Name;
        this.InvoiceDate     = _custInvoiceTrans.InvoiceDate;
        this.InvoiceId       = _custInvoiceTrans.InvoiceId;
        this.LineNumber      = _custInvoiceTrans.getLineNumber_MY();
        this.SourceTableId	 = _custInvoiceTrans.TableId;
        this.SourceRecId	 = _custInvoiceTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustVendPaymJournalFee</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initial GAF information from a payment fee line.
    /// </summary>
    /// <param name="_custVendPaymJournalFee">
    /// The payment fee line.
    /// </param>
    public void initFromCustVendPaymJournalFee(CustVendPaymJournalFee _custVendPaymJournalFee)
    {
        LedgerJournalTrans                  ledgerJournalTrans;
        BankAccountTable                    bankAccountTable;
        DimensionDynamicAccount             bankAccountLedgerDimension;

        select firstonly AccountType, LedgerDimension, OffsetAccountType, OffsetLedgerDimension, Invoice, TransDate, LineNum from ledgerJournalTrans
			where ledgerJournalTrans.RecId == _custVendPaymJournalFee.RefRecId;

        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Bank)
        {
            bankAccountLedgerDimension = ledgerJournalTrans.LedgerDimension;
        }
        else if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank)
        {
            bankAccountLedgerDimension = ledgerJournalTrans.OffsetLedgerDimension;
        }

        if (bankAccountLedgerDimension)
        {
            bankAccountTable = BankAccountTable::findByLedgerDimension(bankAccountLedgerDimension);
            this.fillBankDefaultInformation(bankAccountTable.AccountID);
        }

        this.InvoiceId      = ledgerJournalTrans.Invoice;
        this.InvoiceDate    = ledgerJournalTrans.TransDate;
        this.LineNumber     = ledgerJournalTrans.getLineNumber_MY();
		
        if (_custVendPaymJournalFee.Module == ModuleCustVend::Cust)
        {
            this.Description    = CustPaymFee::find(_custVendPaymJournalFee.FeeId).TransTxt;
        }
        else if (_custVendPaymJournalFee.Module == ModuleCustVend::Vend)
        {
            this.Description    = VendPaymFee::find(_custVendPaymJournalFee.FeeId).TransTxt;
        }

        this.SourceRecId	= _custVendPaymJournalFee.feeTransRecId;
        this.SourceTableId	= ledgerJournalTrans.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initial GAF information from a journal line.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The journal line.
    /// </param>
    public void initFromLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        CustVendAC                 invoiceAccount;
        LedgerJournalTrans_Project ledgerJournalTransProj;
        HcmWorker                  hcmWorker;
        boolean                    isFromServiceOrder;

        if (LedgerJournalTable::find(_ledgerJournalTrans.JournalNum).JournalType == LedgerJournalType::Approval)
        {
            // _ledgerJournalTrans is a invoice approval journal line.
            invoiceAccount = VendTrans::find(_ledgerJournalTrans.VendTransId).AccountNum;
            this.fillVendorDefaultInformation(invoiceAccount);
        }
        else
        {
            if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
            {
                invoiceAccount = CustTable::findByLedgerDimension(_ledgerJournalTrans.LedgerDimension).AccountNum;
                this.fillCustomerDefaultInformation(invoiceAccount);
            }
            else if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
            {
                invoiceAccount = VendTable::findByLedgerDimension(_ledgerJournalTrans.LedgerDimension).AccountNum;
                this.fillVendorDefaultInformation(invoiceAccount);
            }
            else if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust)
            {
                invoiceAccount = CustTable::findByLedgerDimension(_ledgerJournalTrans.OffsetLedgerDimension).AccountNum;
                this.fillCustomerDefaultInformation(invoiceAccount);
            }
            else if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)
            {
                invoiceAccount = VendTable::findByLedgerDimension(_ledgerJournalTrans.OffsetLedgerDimension).AccountNum;
                this.fillVendorDefaultInformation(invoiceAccount);
            }
            else if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Project)
            {
                isFromServiceOrder = this.initFromServiceOrder(_ledgerJournalTrans);

                if (!isFromServiceOrder)
                {
                    select firstonly ledgerJournalTransProj where ledgerJournalTransProj.RefRecId == _ledgerJournalTrans.RecId;

                    hcmWorker = HcmWorker::find(ResourceFacade::getWorker(ledgerJournalTransProj.Resource)); 
                   
                    if (hcmWorker)
                    {
                        this.Name = hcmWorker.name();
                    }
                }
            }
        }

        if (!isFromServiceOrder)
        {
            this.Description    = _ledgerJournalTrans.Txt;
            this.InvoiceDate    = _ledgerJournalTrans.TransDate;
            this.InvoiceId      = _ledgerJournalTrans.Invoice;
        }

        this.LineNumber		 = _ledgerJournalTrans.getLineNumber_MY();
        this.SourceTableId	 = _ledgerJournalTrans.TableId;
        this.SourceRecId	 = _ledgerJournalTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initial GAF information from a <c>MarkupTrans</c> line.
    /// </summary>
    /// <param name="_markupTrans">
    /// The markupTrans line.
    /// </param>
    public void initFromMarkupTrans(MarkupTrans _markupTrans)
    {
        CustInvoiceTrans        custInvoiceTrans;
        VendInvoiceTrans        vendInvoiceTrans;
        SourceDocumentLine      sourceDocumentLineTaxTrans;
        SourceDocumentLine      sourceDocumentLineTaxTransParent;
        ProjInvoiceTransUnion   projInvoiceTransUnion;
        CustInvoiceJour         custInvoiceJour;
        VendInvoiceJour         vendInvoiceJour;
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
        VendInvoiceInfoTable    vendInvoiceInfoTable;

        switch(_markupTrans.TransTableId)
        {
            case tableNum(CustInvoiceTrans):
                custInvoiceTrans = CustInvoiceTrans::findRecId(_markupTrans.TransRecId);
                this.initFromCustInvoiceTrans(custInvoiceTrans);
                break;

            case tableNum(VendInvoiceTrans):
                vendInvoiceTrans = vendInvoiceTrans::findRecId(_markupTrans.TransRecId);
                this.initFromVendInvoiceTrans(vendInvoiceTrans);

            case tableNum(VendInvoiceInfoLine):
                select firstOnly vendInvoiceTrans
                exists join RecId from sourceDocumentLineTaxTransParent
                    where sourceDocumentLineTaxTransParent.RecId == vendInvoiceTrans.SourceDocumentLine
                    exists join ParentSourceDocumentLine, RecId from sourceDocumentLineTaxTrans
                        where sourceDocumentLineTaxTrans.ParentSourceDocumentLine   == sourceDocumentLineTaxTransParent.RecId
                            && _markupTrans.SourceDocumentLine                      == sourceDocumentLineTaxTrans.RecId;
                this.initFromVendInvoiceTrans(vendInvoiceTrans);
                break;

            case tableNum(ProjInvoiceItem):
                select firstOnly projInvoiceTransUnion
                where projInvoiceTransUnion.SourceTableId   == _markupTrans.TransTableId
                    && projInvoiceTransUnion.RecId          == _markupTrans.TransRecId;

                this.initFromProjInvoiceTrans(projInvoiceTransUnion);
                break;

            case tableNum(CustInvoiceJour):
                custInvoiceJour = custInvoiceJour::findRecId(_markupTrans.TransRecId);
                this.initFromCustInvoiceJour(custInvoiceJour);
                break;

            case tableNum(VendInvoiceJour):
                vendInvoiceJour = vendInvoiceJour::findRecId(_markupTrans.TransRecId);
                this.initFromVendInvoiceJour(vendInvoiceJour);
                break;

            case tableNum(VendInvoiceInfoSubTable):
                select firstOnly vendInvoiceJour
                exists join VendInvoiceInfoTable
                exists join VendInvoiceInfoSubTable
                where vendInvoiceInfoSubTable.RecId              == _markupTrans.TransRecId
                    && vendInvoiceInfoSubTable.TableRefId        == VendInvoiceInfoTable.TableRefId
                    && vendInvoiceInfoSubTable.ParmId            == vendInvoiceInfoTable.ParmId
                    && vendInvoiceInfoTable.SourceDocumentHeader == vendInvoiceJour.SourceDocumentHeader
                    && vendInvoiceInfoTable.SourceDocumentLine   == vendInvoiceInfoTable.SourceDocumentLine;

                this.initFromVendInvoiceJour(vendInvoiceJour);
                break;

            default:
                break;
        }

        this.LineNumber    = _markupTrans.getLineNumber_MY();
        this.Description   = _markupTrans.Txt;
        this.SourceTableId = _markupTrans.TableId;
        this.SourceRecId   = _markupTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initial GAF information from a project invoice journal line.
    /// </summary>
    /// <param name="_projInvoiceTransUnion">
    /// The project invoice journal line.
    /// </param>
    public void initFromProjInvoiceTrans(ProjInvoiceTransUnion _projInvoiceTransUnion)
    {
        CustVendAC              invoiceAccount;
        ProjInvoiceJour         projInvoiceJour;

        select firstOnly DeliveryPostalAddress, OrderAccount, InvoiceAccount from projInvoiceJour
			where projInvoiceJour.InvoiceDate       == _projInvoiceTransUnion.InvoiceDate
				&& projInvoiceJour.ProjInvoiceId    == _projInvoiceTransUnion.ProjInvoiceId;

        invoiceAccount = projInvoiceJour.InvoiceAccount ? projInvoiceJour.InvoiceAccount : projInvoiceJour.OrderAccount;

        this.fillCustomerDefaultInformation(invoiceAccount, projInvoiceJour.DeliveryPostalAddress);
        this.Description     = _projInvoiceTransUnion.Txt;
        this.InvoiceDate     = _projInvoiceTransUnion.InvoiceDate;
        this.InvoiceId       = _projInvoiceTransUnion.ProjInvoiceId;
        this.LineNumber      = _projInvoiceTransUnion.getProjInvoiceTransLineNumber_MY();
        this.SourceTableId	 = _projInvoiceTransUnion.SourceTableId;
        this.SourceRecId	 = _projInvoiceTransUnion.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromServiceOrder</Name>
				<Source><![CDATA[
    private boolean initFromServiceOrder(LedgerJournalTrans _ledgerJournalTrans)
    {
        TaxGSTTaxInformation_MY    taxGSTTaxInformationLoc;
        SMAServiceOrderLine        smaServiceOrderLine;
        LedgerJournalTrans_Project ledgerJournalTransProj;

        select firstOnly taxGSTTaxInformationLoc
        exists join smaServiceOrderLine
            where taxGSTTaxInformationLoc.SourceTableId == smaServiceOrderLine.TableId
                && TaxGSTTaxInformationLoc.SourceRecId  == smaServiceOrderLine.RecId
                exists join ledgerJournalTransProj
                    where ledgerJournalTransProj.ProjId        == smaServiceOrderLine.ProjId
                        && ledgerJournalTransProj.TransId      == smaServiceOrderLine.ProjTransId
                        && smaServiceOrderLine.TransactionType == SMATransactionType::Expense
                        && ledgerJournalTransProj.RefRecId     == _ledgerJournalTrans.RecId;

        if (taxGSTTaxInformationLoc)
        {
            this.Name                = taxGSTTaxInformationLoc.Name;
            this.Description         = taxGSTTaxInformationLoc.Description;
            this.InvoiceDate         = taxGSTTaxInformationLoc.InvoiceDate;
            this.InvoiceId           = taxGSTTaxInformationLoc.InvoiceId;
            this.OrganizationNumber  = taxGSTTaxInformationLoc.OrganizationNumber;
            this.Country             = taxGSTTaxInformationLoc.Country;
            this.ImportDeclarationNo = taxGSTTaxInformationLoc.ImportDeclarationNo;
        }

        return taxGSTTaxInformationLoc.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSMAServiceOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initial GAF information from a service order line.
    /// </summary>
    /// <param name="_smaServiceOrderLine">
    /// The service order line.
    /// </param>
    public void initFromSMAServiceOrderLine(SMAServiceOrderLine _smaServiceOrderLine)
    {
        HcmWorker hcmWorker;

        if (_smaServiceOrderLine.Worker)
        {
            hcmWorker = HcmWorker::find(_smaServiceOrderLine.Worker);
            this.Name = hcmWorker.name();
        }

        this.SourceTableId = _smaServiceOrderLine.TableId;
        this.SourceRecId   = _smaServiceOrderLine.RecId;
        this.Description   = _smaServiceOrderLine.Description;
        this.InvoiceDate   = _smaServiceOrderLine.DateExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initial GAF information from a GST transaction.
    /// </summary>
    /// <param name="_taxTrans">
    /// The GST transaction.
    /// </param>
    public void initFromTaxTrans(TaxTrans _taxTrans)
    {
        CustInvoiceTrans        custInvoiceTrans;
        LedgerJournalTrans      ledgerJournalTrans;
        ProjInvoiceTransUnion   projInvoiceTransUnion;
        VendInvoiceTrans        vendInvoiceTrans;
        SourceDocumentLine      sourceDocumentLineTaxTrans;
        SourceDocumentLine      sourceDocumentLineTaxTransParent;
        CustVendPaymJournalFee  custVendPaymJournalFee;
        MarkupTrans             markupTrans;
        TrvExpTrans             trvExpTrans;

        switch (_taxTrans.SourceTableId)
        {
            case tableNum(VendInvoiceInfoLine):
				select firstOnly vendInvoiceTrans
					join RecId from sourceDocumentLineTaxTransParent
						where sourceDocumentLineTaxTransParent.RecId == vendInvoiceTrans.SourceDocumentLine
						join ParentSourceDocumentLine, RecId from sourceDocumentLineTaxTrans
							where sourceDocumentLineTaxTrans.ParentSourceDocumentLine   == sourceDocumentLineTaxTransParent.RecId
								&& _taxTrans.SourceDocumentLine                         == sourceDocumentLineTaxTrans.RecId;

                this.initFromVendInvoiceTrans(vendInvoiceTrans);
                break;

            case tableNum(VendInvoiceTrans):
                vendInvoiceTrans = VendInvoiceTrans::findRecId(_taxTrans.SourceRecId);
                this.initFromVendInvoiceTrans(vendInvoiceTrans);
                break;

            case tableNum(CustInvoiceLine):
                select firstOnly custInvoiceTrans
                    join RecId from sourceDocumentLineTaxTransParent
                        where sourceDocumentLineTaxTransParent.RecId == custInvoiceTrans.SourceDocumentLine
                        join ParentSourceDocumentLine, RecId from sourceDocumentLineTaxTrans
                            where sourceDocumentLineTaxTrans.ParentSourceDocumentLine   == sourceDocumentLineTaxTransParent.RecId
                                && _taxTrans.SourceDocumentLine                         == sourceDocumentLineTaxTrans.RecId;

                this.initFromCustInvoiceTrans(custInvoiceTrans);
                break;

            case tableNum(CustInvoiceTrans):
                custInvoiceTrans = CustInvoiceTrans::findRecId(_taxTrans.SourceRecId);
                this.initFromCustInvoiceTrans(custInvoiceTrans);
                break;

            case tableNum(LedgerJournalTrans):
                select firstOnly ledgerJournalTrans
                    where ledgerJournalTrans.TableId    == _taxTrans.SourceTableId
                        && ledgerJournalTrans.RecId     == _taxTrans.SourceRecId
                    outer join RefRecId, Module, FeeId, feeTransRecId from custVendPaymJournalFee
                        where custVendPaymJournalFee.feeTransRecId   == ledgerJournalTrans.RecId;

                if (custVendPaymJournalFee)
                {
                    this.initFromCustVendPaymJournalFee(custVendPaymJournalFee);
                }
                else
                {
                    this.initFromLedgerJournalTrans(ledgerJournalTrans);
                }
                break;

            case tableNum(ProjInvoiceCost):
            case tableNum(ProjInvoiceEmpl):
            case tableNum(ProjInvoiceItem):
            case tableNum(ProjInvoiceOnAcc):
            case tableNum(ProjInvoiceRevenue):
				select firstOnly projInvoiceTransUnion
					where projInvoiceTransUnion.SourceTableId   == _taxTrans.SourceTableId
						&& projInvoiceTransUnion.RecId          == _taxTrans.SourceRecId;

                this.initFromProjInvoiceTrans(projInvoiceTransUnion);
                break;

            case tableNum(MarkupTrans):
                markupTrans = markupTrans::findRecId(_taxTrans.SourceRecId);
                this.initFromMarkupTrans(markupTrans);
                break;

            case tableNum(TrvExpTrans):
                trvExpTrans = TrvExpTrans::find(_taxTrans.SourceRecId);
                this.initFromTrvExpTrans(trvExpTrans);
                break;
                
            default:
                // Not supported scenario, no default information will be initialized.
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTrvExpTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initial GAF information from a <c>MarkupTrans</c> line.
    /// </summary>
    /// <param name="_trvExpTrans">
    /// The trvExpTrans line.
    /// </param>
    public void initFromTrvExpTrans(TrvExpTrans _trvExpTrans)
    {
        this.Description   = _trvExpTrans.Description;
        this.InvoiceDate   = _trvExpTrans.TransDate;
        this.SourceTableId = _trvExpTrans.TableId;
        this.SourceRecId   = _trvExpTrans.RecId;
        this.Name          = _trvExpTrans.MerchantId;
        this.LineNumber    = _trvExpTrans.getLineNumber_MY();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initial GAF information from a vendor invoice journal.
    /// </summary>
    /// <param name="_vendInvoiceJour">
    /// The vendor journal line.
    /// </param>
    public void initFromVendInvoiceJour(VendInvoiceJour _vendInvoiceJour)
    {
        const LineNumber LineNumber = 10;
        CustVendAC          invoiceAccount;

        invoiceAccount = _vendInvoiceJour.InvoiceAccount ? _vendInvoiceJour.InvoiceAccount : _vendInvoiceJour.OrderAccount;

        this.fillVendorDefaultInformation(invoiceAccount);
        this.InvoiceDate    = _vendInvoiceJour.InvoiceDate;
        this.InvoiceId      = _vendInvoiceJour.InvoiceId;
        this.LineNumber     = #LineNumber;
        this.SourceTableId  = _vendInvoiceJour.TableId;
        this.SourceRecId    = _vendInvoiceJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initial GAF information from a vendor invoice journal line.
    /// </summary>
    /// <param name="_vendInvoiceTrans">
    /// The vendor invoice journal line.
    /// </param>
    public void initFromVendInvoiceTrans(VendInvoiceTrans _vendInvoiceTrans)
    {
        CustVendAC              invoiceAccount;
        VendInvoiceJour         vendInvoiceJournal;
        VendInvoiceJour_W       vendInvoiceJournal_W;

        select firstOnly OrderAccount, InvoiceAccount from vendInvoiceJournal
			where vendInvoiceJournal.PurchId                == _vendInvoiceTrans.PurchID
				&& vendInvoiceJournal.InvoiceId             == _vendInvoiceTrans.InvoiceId
				&& vendInvoiceJournal.InvoiceDate           == _vendInvoiceTrans.InvoiceDate
				&& vendInvoiceJournal.numberSequenceGroup   == _vendInvoiceTrans.numberSequenceGroup
				&& vendInvoiceJournal.InternalInvoiceId     == _vendInvoiceTrans.InternalInvoiceId
			outer join TaxGSTImportDeclarationNo_MY from vendInvoiceJournal_W
				where vendInvoiceJournal_W.VendInvoiceJour  == vendInvoiceJournal.RecId;

        invoiceAccount = vendInvoiceJournal.InvoiceAccount ? vendInvoiceJournal.InvoiceAccount : vendInvoiceJournal.OrderAccount;

        this.fillVendorDefaultInformation(invoiceAccount);
        this.Description            = _vendInvoiceTrans.Name;
        this.ImportDeclarationNo    = vendInvoiceJournal_W.TaxGSTImportDeclarationNo_MY;
        this.InvoiceDate            = _vendInvoiceTrans.InvoiceDate;
        this.InvoiceId              = _vendInvoiceTrans.InvoiceId;
        this.LineNumber             = real2int(TaxGSTHelper_MY::LineNumberInterval * _vendInvoiceTrans.LineNum);
        this.SourceTableId			= _vendInvoiceTrans.TableId;
        this.SourceRecId			= _vendInvoiceTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySourceTableIdSourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a record in TaxGSTTaxInformation_MY table by SourceTableId and SourceRecId.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The value of SourceTableId.
    /// </param>
    /// <param name="_sourceRecId">
    /// The value of SourceRecId.
    /// </param>
    /// <param name="_forupdate">
    /// Update or not.
    /// </param>
    /// <param name="_concurrencyModel">
    /// Concurrency model.
    /// </param>
    /// <returns>
    /// The record found.
    /// </returns>
    public static TaxGSTTaxInformation_MY findBySourceTableIdSourceRecId(
		TableId            _sourceTableId,
		RecId            _sourceRecId,
		boolean             _forupdate        = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxGSTTaxInformation_MY taxGSTTaxInformation_MY;

        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxGSTTaxInformation_MY.concurrencyModel(_concurrencyModel);
        }

        select firstOnly taxGSTTaxInformation_MY
			where taxGSTTaxInformation_MY.SourceTableId == _sourceTableId
				&& taxGSTTaxInformation_MY.SourceRecId  == _sourceRecId;

        taxGSTTaxInformation_MY.selectForUpdate(_forupdate);

        return taxGSTTaxInformation_MY;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGAFInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create GAF information for each GST transaction.
    /// </summary>
    /// <param name="_taxTrans">
    /// The Tax transaction that GAF information is created for.
    /// </param>
    public static void createGAFInformation(TaxTrans _taxTrans)
    {
        CustInvoiceTrans        custInvoiceTrans;
        LedgerJournalTable      ledgerJournalTable;
        LedgerJournalTrans      ledgerJournalTrans;
        SourceDocumentLine      sourceDocumentLineTaxTrans;
        SourceDocumentLine      sourceDocumentLineTaxTransParent;
        TaxGSTTaxInformation_MY taxGSTTaxInformation_MY;
        VendInvoiceTrans        vendInvoiceTrans;
        TableId                 sourceTableId;
        RefRecId                sourceRecId;

        if (TaxGSTFeatureChecker_MY::isCountryRegionMY()
            && TaxTable::find(_taxTrans.TaxCode).isGST_MY)
        {
            [sourceTableId, sourceRecId] = TaxGSTHelper_MY::getTaxTransSourceReference(_taxTrans);

            taxGSTTaxInformation_MY = TaxGSTTaxInformation_MY::findBySourceTableIdSourceRecId(sourceTableId, sourceRecId);

            // Avoid duplicate creation of GST information for one transaction line
            if (!taxGSTTaxInformation_MY)
            {
                if (_taxTrans.SourceTableId == tableNum(LedgerJournalTrans))
                {
                    ledgerJournalTrans = LedgerJournalTrans::findRecId(_taxTrans.SourceRecId, false);
                    ledgerJournalTable = LedgerJournalTable::find(ledgerJournalTrans.JournalNum);
                }

                if (_taxTrans.SourceTableId      == tableNum(VendInvoiceInfoLine)                            /*GST of PO or Open vendor invoice*/
                || _taxTrans.SourceTableId  == tableNum(VendInvoiceTrans)                               /*GST of PO or Open vendor invoice*/
                || _taxTrans.SourceTableId  == tableNum(CustInvoiceLine)                                /*GST of SO or Free text invoice*/
                || _taxTrans.SourceTableId  == tableNum(CustInvoiceTrans)                               /*GST of SO or Free text invoice*/
                || (_taxTrans.SourceTableId == tableNum(LedgerJournalTrans)
                    && (ledgerJournalTable.JournalType      == LedgerJournalType::PurchaseLedger        /*GST of AP > Journals > Invoices > Inovice register*/
                        || ledgerJournalTable.JournalType   == LedgerJournalType::VendInvoiceRegister   /*GST of AP > Journals > Invoices > Inovice journal*/
                        || ledgerJournalTable.JournalType   == LedgerJournalType::Approval              /*GST of AP > Journals > Invoices > Invoice approval journal*/
                        || ledgerJournalTable.JournalType   == LedgerJournalType::Payment               /*GST of AP > Journals > Payments > Payment journal*/
                        || ledgerJournalTable.JournalType   == LedgerJournalType::CustPayment           /*GST of AR > Journals > Payments > Payemnt journal*/
                        || ledgerJournalTable.JournalType   == LedgerJournalType::Daily                 /*GST of GL > Journals > general journal*/
                        || ledgerJournalTable.JournalType   == LedgerJournalType::Cost))                /*GST of Proj > Journals > expense and Service Order expense*/
                || _taxTrans.SourceTableId  == tableNum(ProjInvoiceCost)                                /*GST of Project invoice proposal*/
                || _taxTrans.SourceTableId  == tableNum(ProjInvoiceEmpl)                                /*GST of Project invoice proposal*/
                || _taxTrans.SourceTableId  == tableNum(ProjInvoiceItem)                                /*GST of Project invoice proposal*/
                || _taxTrans.SourceTableId  == tableNum(ProjInvoiceOnAcc)                               /*GST of Project invoice proposal*/
                || _taxTrans.SourceTableId  == tableNum(ProjInvoiceRevenue)                             /*GST of Project invoice proposal*/
                || _taxTrans.SourceTableId  == tableNum(MarkupTrans)                                    /*GST of Misc charge*/
                || _taxTrans.SourceTableId  ==  tableNum(TrvExpTrans))                                  /*GST of travel expense*/
                {
                    taxGSTTaxInformation_MY.initFromTaxTrans(_taxTrans);
                    taxGSTTaxInformation_MY.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxGSTTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate GAF information.
    /// </summary>
    /// <param name = "_taxTrans">
    /// The Tax transaction that GAF information is created for.
    /// </param>
    public static void validateTaxGSTTaxInformation(TaxTrans _taxTrans)
    {
        LedgerJournalTable      ledgerJournalTable;
        LedgerJournalTrans      ledgerJournalTrans;
        TaxGSTTaxInformation_MY taxGSTTaxInformation_MY;
        TableId                 sourceTableId;
        RefRecId                sourceRecId;

        if (TaxGSTFeatureChecker_MY::isCountryRegionMY()
            && TaxTable::find(_taxTrans.TaxCode).isGST_MY)
        {
            [sourceTableId, sourceRecId]    = TaxGSTHelper_MY::getTaxTransSourceReference(_taxTrans);
            taxGSTTaxInformation_MY         = TaxGSTTaxInformation_MY::findBySourceTableIdSourceRecId(sourceTableId, sourceRecId);

            if (taxGSTTaxInformation_MY)
            {
                if (_taxTrans.SourceTableId == tableNum(LedgerJournalTrans))
                {
                    ledgerJournalTrans = LedgerJournalTrans::findRecId(_taxTrans.SourceRecId, false);
                    ledgerJournalTable = LedgerJournalTable::find(ledgerJournalTrans.JournalNum);

                    if (ledgerJournalTable.JournalType      == LedgerJournalType::VendInvoiceRegister  /*GST of AP > Journals > Invoices > Invoice journal*/
                    || ledgerJournalTable.JournalType  == LedgerJournalType::Approval             /*GST of AP > Journals > Invoices > Inovice approval journal*/
                    || ledgerJournalTable.JournalType  == LedgerJournalType::Daily)               /*GST of GL > Journals > General journal*/
                    {
                        if (!taxGSTTaxInformation_MY.Name)
                        {
                            // Field "%1" of GAF information is missing. Please go to "GAF purchase and supply preview" to complete GAF information.
                            warning(strFmt("@TaxGST:GAFInfoFieldMissWarning", "@SYS80991"));
                        }

                        if (!taxGSTTaxInformation_MY.OrganizationNumber)
                        {
                            // Field "%1" of GAF information is missing. Please go to "GAF purchase and supply preview" to complete GAF information.
                            warning(strFmt("@TaxGST:GAFInfoFieldMissWarning", "@SYS79995"));
                        }

                        if (!taxGSTTaxInformation_MY.Country && _taxTrans.TaxDirection == TaxDirection::OutgoingTax)
                        {
                            // Field "%1" of GAF information is missing. Please go to "GAF purchase and supply preview" to complete GAF information.
                            warning(strFmt("@TaxGST:GAFInfoFieldMissWarning", "@TaxGST:Country"));
                        }

                        if (!taxGSTTaxInformation_MY.InvoiceId)
                        {
                            // Field "%1" of GAF information is missing. Please go to "GAF purchase and supply preview" to complete GAF information.
                            warning(strFmt("@TaxGST:GAFInfoFieldMissWarning", "@SYS4726"));
                        }

                        if (!taxGSTTaxInformation_MY.InvoiceDate)
                        {
                            // Field "%1" of GAF information is missing. Please go to "GAF purchase and supply preview" to complete GAF information.
                            warning(strFmt("@TaxGST:GAFInfoFieldMissWarning", "@SYS57610"));
                        }
                    }
                }
            }
            else
            {
                // Required information for GST audit file is missing.  Please go to "GAF purchase and supply preview" to complete GAF information.
                warning("@TaxGST:GAFInfoMissWarning");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetSourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the parent of the <c>TaxGSTTaxInformation_MY</c> records.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table ID of the transaction line.
    /// </param>
    /// <param name="_newSourceRecId">
    /// The record ID of the new transaction line.
    /// </param>
    /// <param name="_oldSourceRecId">
    /// The record ID of the old transaction line.
    /// </param>
    static void resetSourceRecId(RefTableId _sourceTableId, RefRecId _newSourceRecId, RefRecId _oldSourceRecId)
    {
        TaxGSTTaxInformation_MY taxGSTTaxInformation_MY;
        
        update_recordset taxGSTTaxInformation_MY
            setting
                SourceRecId = _newSourceRecId
            where
                taxGSTTaxInformation_MY.SourceTableId == _sourceTableId &&
                taxGSTTaxInformation_MY.SourceRecId   == _oldSourceRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>MY</CountryRegionCodes>
	<DeveloperDocumentation>@TaxGST:DevDocForTaxGSTTaxInformation_MY</DeveloperDocumentation>
	<Label>@TaxGST:GAFInformation</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>OrganizationNumber</TitleField2>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Tax</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrganizationNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GAFInformation</Name>
			<Label>@TaxGST:GAFInformation</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrganizationNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Country</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ImportDeclarationNo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceTableId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrganizationNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DirOrganizationNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Country</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsAddressCountryRegionShortName</ExtendedDataType>
			<Label>@TaxGST:Country</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ImportDeclarationNo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGSTImportDeclarationNo_MY</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InvoiceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
			<Label>@SYS4726</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LineNumber</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TradeLineNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DirPartyName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SourceTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SourceIdIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SourceTableId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerJournalTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerJournalTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceRecId</Name>
					<Field>SourceRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceTableId</Name>
					<Field>SourceTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SMAServiceOrderLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>SMAServiceOrderLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SMAServiceOrderLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SMAServiceOrderLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceRecId</Name>
					<Field>SourceRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceTableId</Name>
					<Field>SourceTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TrvExpTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TrvExpTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TrvExpTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TrvExpTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceRecId</Name>
					<Field>SourceRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceTableId</Name>
					<Field>SourceTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>