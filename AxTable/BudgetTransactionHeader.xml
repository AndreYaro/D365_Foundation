<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetTransactionHeader</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetTransactionHeader extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBudgetTransAvailableToComplete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the budget transaction header has a transaction status that makes it available
    ///    to be completed.
    /// </summary>
    /// <returns>
    ///    true if the budget transaction has not been completed; otherwise, false.
    /// </returns>
    public boolean checkBudgetTransAvailableToComplete()
    {
        boolean ret = true;

        if (this.TransactionStatus == BudgetTransactionStatus::Completed)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBudgetType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the budget type matches for all <c>BudgetTransactionLine</c> records for which
    ///    this record is the parent.
    /// </summary>
    /// <returns>
    ///    true if all <c>BudgetTransactionLine</c> records for this <c>BudgetTransactionHeader</c> record
    ///    have the same budget type; otherwise, false.
    /// </returns>
    public boolean checkBudgetType()
    {
        boolean                 ret = true;
        BudgetType              budgetType;
        BudgetTransactionLine   budgetTransactionLine;

        select firstonly BudgetType from budgetTransactionLine
            where budgetTransactionLine.BudgetTransactionHeader == this.RecId;

        if (budgetTransactionLine)
        {
            // Store the budget type value for the first line found
            budgetType = budgetTransactionLine.BudgetType;

            select firstonly BudgetType from budgetTransactionLine
                where budgetTransactionLine.BudgetTransactionHeader == this.RecId &&
                      budgetTransactionLine.BudgetType != budgetType;

            if (budgetTransactionLine)
            {
                // A line for this header has a budget type value that doesn't match another line's value.
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForTypeAndSourceNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a transaction exists that references the specified budget transfer
    /// source number and budget transaction type.
    /// </summary>
    /// <param name="_transferSourceNumber">
    /// The budget transfer source number.
    /// </param>
    /// <param name="_budgetTransactionType">
    /// The budget transaction type.
    /// </param>
    /// <returns>
    /// true if record exists with the specified budget transfer source number
    /// and budget transaction type value; otherwise, false.
    /// </returns>
    public static boolean existForTypeAndSourceNumber(
        BudgetTransferSourceNumber  _transferSourceNumber,
        BudgetTransactionType       _budgetTransactionType)
    {
        BudgetTransactionHeader budgetTransactionHeader;

        select firstOnly RecId from budgetTransactionHeader
            where budgetTransactionHeader.TransferSourceNumber    == _transferSourceNumber
                && budgetTransactionHeader.BudgetTransactionType  == _budgetTransactionType;

        boolean found = budgetTransactionHeader.RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults a value for a field.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID that corresponds with the field that is being defaulted.
    /// </param>
    /// <param name="_axBudgetTransactionHeader">
    /// An instance of the <c>AxBudgetTransactionHeader</c> class that is associated with the field that is
    /// being set as the default field; optional.
    /// </param>
    public void defaultField(fieldId _fieldId)
    {
        BudgetTransHeaderType budgetTransHeaderType;

        budgetTransHeaderType = this.type();

        if (budgetTransHeaderType)
        {
            budgetTransHeaderType.defaultField(_fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default values for the field values in a <c>BudgetTransactionHeader</c> record.
    /// </summary>
    /// <param name="_axBudgetTransactionHeader">
    /// The <c>AxBudgetTransactionHeader</c> class instance that is associated with the row being set to
    /// the default row; optional.
    /// </param>
    public void defaultRow()
    {
        BudgetTransHeaderType budgetTransHeaderType;

        budgetTransHeaderType = this.type();

        if (budgetTransHeaderType)
        {
            budgetTransHeaderType.defaultRow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Releases the transaction number when a <c>BudgetTransactionHeader</c> record is deleted.
    /// </summary>
    public void delete()
    {
        ttsbegin;

        super();

        if (this.TransactionStatus != BudgetTransactionStatus::Completed &&
            this.TransactionNumber != '')
        {
            NumberSeq::releaseNumber(BudgetParameters::numRefBudgetTransactionId().NumberSequenceId, this.TransactionNumber);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBudgetCheckResultText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the text that represents the budget check result value for the <c>BudgetTransactionHeader</c>
    /// record.
    /// </summary>
    /// <returns>
    /// The text that represents the budget check result value for the <c>BudgetTransactionHeader</c>
    /// record.
    /// </returns>
    public display BudgetCheckResultText displayBudgetCheckResultText()
    {
        return BudgetControlResult::getBudgetCheckResultToolTip(this.getBudgetCheckResult());
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayJournalizingDefinitionCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>JournalizingDefinitionCode</c> field that is relevant to the
    ///    <c>BudgetTransactionCode</c> field in the <c>BudgetTransactionHeader</c> table.
    /// </summary>
    /// <returns>
    ///    The <c>JournalizingDefinitionCode</c> field.
    /// </returns>
    public display JournalizingDefinitionCode displayJournalizingDefinitionCode()
    {
        JournalizingDefinitionCode              journalizingDefinitionCode;
        JournalizingDefinitionManagerBudget     journalizingDefinitionManagerBudget;

        if (hasTableAccess(tableNum(JournalizingDefinition))
            && hasFieldAccess(tableNum(JournalizingDefinition), fieldNum(JournalizingDefinition, JournalizingDefinitionCode)))
        {
            if (this.TransactionStatus != BudgetTransactionStatus::Completed)
            {
                journalizingDefinitionManagerBudget = JournalizingDefinitionManager::newJournalizingDefinitionManagerBudget(this.BudgetTransactionCode, LedgerPostingType::Budget, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                journalizingDefinitionCode = JournalizingDefinition::findByRecId(journalizingDefinitionManagerBudget.getDefaultJournalizingDefinition()).JournalizingDefinitionCode;
            }
        }

        return journalizingDefinitionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInUseImage</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method returns display image when the BudgetTransaction is in use.
    /// </summary>
    /// <returns>
    ///     A container with reference to display image when the BudgetTransaction is in use.
    /// </returns>
    public display container displayInUseImage()
    {
        SymbolFontGlyphName symbol;
        LabelString toolTip;

        if (this.InUseBy != '')
        {
            symbol = ImageReferenceSymbol::InUse;
            toolTip = "@Budget:RegisterEntryInUseTooltip";
        }

        ImageReference imageReference = ImageReference::constructForSymbol(symbol, toolTip);

        return imageReference.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWorkflowStatusImage</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method returns display image when a workflow action is needed on the BudgetTransaction.
    /// </summary>
    /// <returns>
    ///     A container with reference to display image when a workflow action is needed on the BudgetTransaction.
    /// </returns>
    public display container displayWorkflowStatusImage()
    {
        ListEnumerator workItemEnumerator;
        WorkflowWorkItemTable workItemTable;
        SymbolFontGlyphName symbol;
        LabelString toolTip;

        if (this.WorkflowStatus == BudgetTransactionWorkflowStatus::NotSubmitted)
        {
            // Indicate to the user that a workflow action is needed.
            symbol = ImageReferenceSymbol::Workflow;
        }
        else if (this.WorkflowStatus == BudgetTransactionWorkflowStatus::Rejected ||
                this.WorkflowStatus == BudgetTransactionWorkflowStatus::Submitted)
        {
            if (hasTableAccess(tableNum(WorkflowWorkItemTable))
                && hasTableAccess(tableNum(WorkflowWorkItemQueueAssignee)))
            {
                // Get the work items for this record to determine if an action is needed.
                workItemEnumerator = Workflow::findWorkItemsForCurrentUser(this).getEnumerator();

                while (workItemEnumerator.moveNext())
                {
                    workItemTable = WorkflowWorkItemTable::find(workItemEnumerator.current());

                    if (workItemTable.Type == WorkflowWorkItemType::WorkItem ||
                        workItemTable.Type == WorkflowWorkItemType::Return ||
                        workItemTable.Type == WorkflowWorkItemType::RequestChange)
                    {
                        // Indicate to the user that a workflow action is needed.
                        symbol = ImageReferenceSymbol::Workflow;
                        toolTip = "@Budget:RegisterEntryWorkflowActionRequiredTooltip";
                        break;
                    }
                }
            }
        }

        ImageReference imageReference = ImageReference::constructForSymbol(symbol, toolTip);

        return imageReference.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editBudgetModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Manages the setting of budget model on a budget transaction header.
    /// </summary>
    /// <param name="_set">
    /// Determines if the budget model is set or read.
    /// </param>
    /// <param name="_budgetModelId">
    /// The budget model that was selected by a user.
    /// </param>
    /// <returns>
    /// The budget model of the header.
    /// </returns>
    public edit BudgetModelId editBudgetModel(boolean _set, BudgetModelId _budgetModelId)
    {
        BudgetModelId originalBudgetModelId;
        dataAreaId originalBudgetModelDataAreaId;
        BudgetModelId budgetModelId = _budgetModelId;

        if (_set
            && hasTableAccess(tableNum(BudgetModel))
            && hasTableAccess(tableNum(CompanyInfo))
            && hasTableAccess(tableNum(Ledger)))
        {
            originalBudgetModelId = this.BudgetModelId;
            originalBudgetModelDataAreaId = this.BudgetModelDataAreaId;

            this.BudgetModelId = budgetModelId;
            this.BudgetSubModelId = budgetModelId;
            this.BudgetModelDataAreaId = CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(this.PrimaryLedger));

            if (this.validateField(fieldNum(BudgetTransactionHeader, BudgetModelId)) == false)
            {
                // If the field validation for budget model fails, set this back to the original budget model.
                this.BudgetModelId = originalBudgetModelId;
                this.BudgetSubModelId = originalBudgetModelId;
                this.BudgetModelDataAreaId = originalBudgetModelDataAreaId;
            }
            else
            {
                // Set the include in cash flow forecast value for the transaction lines
                // based on the default from the selected budget model.
                this.setIncludeInCashFlowForecast();
            }

            this.BudgetModelType = HeadingSub::Heading;
        }

        return this.BudgetModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editIsInUse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Manages the way(how) the in use user on a budget transaction header is set.
    /// </summary>
    /// <param name="_set">
    /// Determines if the in use information is set or read.
    /// </param>
    /// <param name="_isInUse">
    /// Whether the user marked or unmarked in use.
    /// </param>
    /// <returns>
    /// The status of the in use on the header.
    /// </returns>
    public edit NoYes editIsInUse(boolean _set, NoYes _isInUse)
    {
        if (_set)
        {
            // Having a user set indicates that the header is in use.
            this.InUseBy = '';
        }

        return this.InUseBy ? NoYes::Yes : NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the reason code.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that specifies whether the reason code is set.
    /// </param>
    /// <param name="_reasonCode">
    ///    The new reason code when the <paramref name="_set" /> parameter is true.
    /// </param>
    /// <returns>
    ///    The reason code of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonCode editReasonCode(boolean _set, ReasonCode _reasonCode)
    {
        boolean isValid = true;
        ReasonCode reasonCode;
        ReasonCode originalReasonCode;
        ReasonRefRecID originalReasonTableRef;
        FormDataSource formBudgetTransactionHeader;

        if (_set && hasTableAccess(tableNum(ReasonTableRef), AccessType::Edit))
        {
            reasonCode = strLRTrim(_reasonCode);

            if (reasonCode != '')
            {
                // The reason code value is not blank.
                // Get the original reason code before attempting to update it.
                originalReasonCode = ReasonTableRef::find(this.ReasonTableRef).Reason;

                // Save the current ReasonRefRecID for comparison.
                originalReasonTableRef = this.ReasonTableRef;

                // If the ReasonTableRef is 0, then create a new ReasonTableRef record
                // otherwise, update the existing record.
                if (originalReasonTableRef == 0)
                {
                    this.ReasonTableRef = ReasonTableRef::createFromCode(reasonCode);
                }
                else
                {
                    this.ReasonTableRef = ReasonTableRef::updateCode(reasonCode, this.ReasonTableRef);
                }

                if (ReasonTableRef::find(this.ReasonTableRef).validateField(fieldNum(ReasonTableRef, Reason)) &&
                    this.validateField(fieldNum(BudgetTransactionHeader, ReasonTableRef)))
                {
                    if (this.ReasonTableRef == originalReasonTableRef &&
                        FormDataUtil::getFormDataSource(this))
                    {
                        // The reason code has changed but the referenced record ID has not.
                        // Get the current FormDataSource and set forceWrite() to true so that
                        // data validation (validateWrite()) is performed on the updated reason code.
                        formBudgetTransactionHeader = FormDataUtil::getFormDataSource(this);
                        formBudgetTransactionHeader.forceWrite(true);
                    }
                }
                else
                {
                    // Validation failed; set the reason code and reference back to the original values

                    if (originalReasonTableRef == 0)
                    {
                        this.ReasonTableRef = 0;
                    }
                    else
                    {
                        this.ReasonTableRef = ReasonTableRef::updateCode(originalReasonCode, originalReasonTableRef);
                    }

                    isValid = false;
                }
            }
            else
            {
                // The reason code is blank.
                this.ReasonTableRef = ReasonTableRef::updateCode(reasonCode, this.ReasonTableRef);
            }

            if (isValid && hasTableAccess(tableNum(ReasonTable)))
            {
                // Update the reason comment with the default comment value for the updated reason code.
                // A blank reasonCode will result in a blank comment because a blank reasonCode
                // will return an empty reasonTable buffer.
                this.editReasonComment(true, ReasonTable::find(reasonCode).Description);
            }
        }

        if (hasTableAccess(tableNum(ReasonTableRef)))
        {
            reasonCode = ReasonTableRef::find(this.ReasonTableRef).Reason;
        }

        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonComment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the reason comment.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that specifies whether the reason comment is set.
    /// </param>
    /// <param name="_reasonComment">
    ///    The new reason comment when the <paramref name="set" /> parameter is true.
    /// </param>
    /// <returns>
    ///    The reason comment of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonComment editReasonComment(boolean _set, ReasonComment _reasonComment)
    {
        ReasonComment reasonComment;

        if (_set && hasTableAccess(tableNum(ReasonTableRef), AccessType::Edit))
        {
            reasonComment = _reasonComment;

            // If the ReasonTableRef is 0, then create a new ReasonTableRef record
            // otherwise, update the existing record.
            if (this.ReasonTableRef == 0)
            {
                this.ReasonTableRef = ReasonTableRef::createFromComment(reasonComment);
            }
            else
            {
                this.ReasonTableRef = ReasonTableRef::updateComment(reasonComment, this.ReasonTableRef);
            }
        }

        if (hasTableAccess(tableNum(ReasonTableRef)))
        {
            reasonComment = ReasonTableRef::find(this.ReasonTableRef).ReasonComment;
        }

        return reasonComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expenseTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the total amount in accounting currency of all the budget transaction lines for the header
    ///    that has a <c>BudgetType::Expense</c> enumeration value.
    /// </summary>
    /// <returns>
    ///    The total amount in accounting currency of the expense budget transaction lines for the header.
    /// </returns>
    public display AmountMST expenseTotal()
    {
        AmountMST amount;

        if (hasTableAccess(tableNum(BudgetTransactionLine)))
        {
            amount = this.sumAccountingAmountByBudgetType(BudgetType::Expense);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BudgetCheckResult</c> value for a specified <c>BudgetTransactionHeader</c> record.
    /// </summary>
    /// <returns>
    /// The <c>BudgetCheckResult</c> value for the <c>BudgetTransactionHeader</c> record.
    /// </returns>
    public BudgetCheckResult getBudgetCheckResult()
    {
        BudgetCheckResult budgetCheckResult;

        budgetCheckResult = BudgetSourceBudgetTransactionHeader::findBudgetCheckResult(this.RecId);

        return budgetCheckResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the budget type value for a budget transaction header.
    /// </summary>
    /// <returns>
    /// The budget type on a budget transaction line found for the budget transaction header.
    /// </returns>
    public BudgetType getBudgetType()
    {
        BudgetTransactionLine budgetTransactionLine;

        select firstonly BudgetType from budgetTransactionLine
            where budgetTransactionLine.BudgetTransactionHeader == this.RecId;

        return budgetTransactionLine.BudgetType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkflowVersionTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>WorkflowVersionTable</c> record that is associated to the <c>BudgetTransactionCode</c>
    /// record.
    /// </summary>
    /// <returns>
    /// The <c>WorkflowVersionTable</c> record.
    /// </returns>
    public WorkflowVersionTable getWorkflowVersionTable()
    {
        BudgetTransactionCode budgetTransactionCode;
        WorkflowVersionTable workflowVersionTable;

        budgetTransactionCode = BudgetTransactionCode::find(this.BudgetTransactionCode);

        if (BudgetTransactionCode::isWorkflowTableSequenceNumberValid(budgetTransactionCode.RecId))
        {
            workflowVersionTable = WorkflowVersionTable::findSequenceNumber(budgetTransactionCode.WorkflowTableSequenceNumber);
        }

        return workflowVersionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkflowWorkItemForCurrentUser</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the pending <c>WorkflowWorkItemTable</c> record for the current <c>BudgetTransactionHeader</c> record
    ///    and current user.
    /// </summary>
    /// <returns>
    ///    The <c>WorkflowWorkItemTable</c> record.
    /// </returns>
    public WorkflowWorkItemTable getWorkflowWorkItemForCurrentUser()
    {
        WorkflowWorkItemTable workflowWorkItemTable;

        select firstonly workflowWorkItemTable
            where workflowWorkItemTable.RefTableId == this.TableId &&
                workflowWorkItemTable.RefRecId == this.RecId &&
                workflowWorkItemTable.UserId == curUserId() &&
                workflowWorkItemTable.Status == WorkflowWorkItemStatus::Pending;

        return workflowWorkItemTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        // Set the ledger to the ledger of the current company\legal entity.
        this.PrimaryLedger = Ledger::current();

        // The date defaults to the system date.
        this.Date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWorkflowStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the workflow status for the current <c>BudgetTransactionHeader</c> record.
    /// </summary>
    /// <remarks>
    /// The <c>BudgetTransactionLine</c> records that are associated with the
    /// <c>BudgetTransactionHeader</c> record will also have the workflow status initialized.
    /// </remarks>
    public void initWorkflowStatus()
    {
        BudgetTransactionCode budgetTransactionCode;
        BudgetTransactionLine budgetTransactionLine;

        if (this.TransactionStatus == BudgetTransactionStatus::Draft)
        {
            budgetTransactionCode = BudgetTransactionCode::find(this.BudgetTransactionCode);

            if (budgetTransactionCode.WorkflowTableSequenceNumber &&
                budgetTransactionCode.validateWorkflowTableSequenceNumber())
            {
                this.WorkflowStatus = BudgetTransactionWorkflowStatus::NotSubmitted;
            }
            else
            {
                this.WorkflowStatus = BudgetTransactionWorkflowStatus::None;
            }

            if (this.RecId)
            {
                // Update the workflow status on the lines.
                update_recordset budgetTransactionLine
                    setting WorkflowStatus = this.WorkflowStatus
                    where budgetTransactionLine.BudgetTransactionHeader == this.RecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetModelIncludedInCashFlowForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the budget model is set as included in cash flow forecast.
    /// </summary>
    /// <returns>
    /// true if the budget model is set as included in cash flow forecast; otherwise, false.
    /// </returns>
    public boolean isBudgetModelIncludedInCashFlowForecast()
    {
        boolean isIncludedInCashFlowForecast;

        if (this.BudgetModelDataAreaId
            && this.BudgetModelId)
        {
            changeCompany(this.BudgetModelDataAreaId)
            {
                isIncludedInCashFlowForecast = BudgetModel::find(this.BudgetModelType, this.BudgetModelId).Cov;
            }
        }

        return isIncludedInCashFlowForecast;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserBlocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current user is blocked from using a specified
    /// <c>BudgetTransactionHeader</c> record.
    /// </summary>
    /// <param name="_logWarning">
    ///    A Boolean value indicating whether to log the fault as a warning or not.
    /// </param>
    /// <returns>
    /// true if the user is blocked from the use of the specified <c>BudgetTransactionHeader</c> record;
    /// otherwise, false.
    /// </returns>
    public boolean isUserBlocked(boolean _logWarning = true)
    {
        return BudgetTransactionManager::isUserBlocked(this.InUseBy, this.TransactionNumber, _logWarning);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkflowAbleToSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>BudgetTransactionHeader</c> record can submit to workflow.
    /// </summary>
    /// <returns>
    /// true if the budget transaction header can submit to workflow; otherwise, false.
    /// </returns>
    public boolean isWorkflowAbleToSubmit()
    {
        boolean isAbleToSubmit;

        if (this.WorkflowStatus == BudgetTransactionWorkflowStatus::NotSubmitted &&
            (this.InUseBy == '' ||
            this.InUseBy == curUserId()))
        {
            isAbleToSubmit = true;
        }

        return isAbleToSubmit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkflowUserPermittedToEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified user is a valid workflow user for the current workflow status.
    /// </summary>
    /// <returns>
    /// true if the user can modify the <c>BudgetTransactionHeader</c> record in the current workflow
    /// status; otherwise, false.
    /// </returns>
    public boolean isWorkflowUserPermittedToEdit()
    {
        boolean isPermittedToEdit;
        WorkflowWorkItemTable workflowWorkItemTable;

        if (this.WorkflowStatus == BudgetTransactionWorkflowStatus::Submitted ||
            this.WorkflowStatus == BudgetTransactionWorkflowStatus::Rejected)
        {
            // The header is in the workflow review process.
            workflowWorkItemTable = this.getWorkflowWorkItemForCurrentUser();

            if (workflowWorkItemTable &&
                (workflowWorkItemTable.Type == WorkflowWorkItemType::Return ||
                workflowWorkItemTable.Type == WorkflowWorkItemType::RequestChange))
            {
                // The user can edit the header.
                isPermittedToEdit = true;
            }
        }
        else
        {
            // The header is not in the review process.
            isPermittedToEdit = true;
        }

        return isPermittedToEdit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the highest line number of the lines that are associated with this budget transaction header.
    /// </summary>
    /// <returns>
    /// The highest line number that is associated with this budget transaction header.
    /// </returns>
    public LineNum maxLineNumber()
    {
        BudgetTransactionLine budgetTransactionLine;

        select maxof(LineNumber) from budgetTransactionLine
            where budgetTransactionLine.BudgetTransactionHeader == this.RecId;

        return budgetTransactionLine.LineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>minLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the lowest line number of the lines that are associated with this budget transaction header.
    /// </summary>
    /// <returns>
    /// The lowest line number that is associated with this budget transaction header.
    /// </returns>
    public LineNum minLineNumber()
    {
        BudgetTransactionLine budgetTransactionLine;

        select minof(LineNumber) from budgetTransactionLine
            where budgetTransactionLine.BudgetTransactionHeader == this.RecId;

        return budgetTransactionLine.LineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the number of lines that are associated with this budget transaction header.
    /// </summary>
    /// <returns>
    /// The number of lines that are associated with this budget transaction header.
    /// </returns>
    public display BudgetTransactionLineCount numOfLines()
    {
        BudgetTransactionLine budgetTransactionLine;

        if (hasTableAccess(tableNum(BudgetTransactionLine)))
        {
            select count(RecId)
                from budgetTransactionLine
                where budgetTransactionLine.BudgetTransactionHeader == this.RecId;
        }

        return any2int(budgetTransactionLine.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>revenueTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the total amount in accounting currency of all the budget transaction lines for this header
    ///    that have a <c>BudgetType::Revenue</c> enumeration value.
    /// </summary>
    /// <returns>
    ///    The total amount in accounting currency of the revenue budget transaction lines for this header.
    /// </returns>
    public display AmountMST revenueTotal()
    {
        AmountMST amount = 0;

        if (hasTableAccess(tableNum(BudgetTransactionLine)))
        {
            amount = this.sumAccountingAmountByBudgetType(BudgetType::Revenue) * -1;
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetTransactionCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the budget transaction code and related field values on the budget transaction header.
    /// </summary>
    /// <param name="_budgetTransactionCodeRefRecId">
    ///    The budget transaction code reference to use to set the values on the budget transaction header.
    /// </param>
    /// <remarks>
    ///    The budget transaction type and the reason code are set depending on the budget transaction code.
    /// </remarks>
    public void setBudgetTransactionCode(RefRecId _budgetTransactionCodeRefRecId)
    {
        BudgetTransactionCode budgetTransactionCode;

        this.BudgetTransactionCode = _budgetTransactionCodeRefRecId;

        budgetTransactionCode = BudgetTransactionCode::find(this.BudgetTransactionCode);

        // Set the TransactionType.
        this.BudgetTransactionType = budgetTransactionCode.BudgetTransactionType;

        // Set the ReasonCode.
        this.editReasonCode(true, budgetTransactionCode.Reason);

        // Set the WorkflowStatus.
        this.initWorkflowStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIncludeInCashFlowForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the include in cash flow forecast value on the budget transaction lines associated to the budget transaction header.
    /// </summary>
    public void setIncludeInCashFlowForecast()
    {
        BudgetTransactionLine budgetTransactionLine;
        boolean isIncludedInCashFlowForecast;

        if (this.RecId
            && this.checkBudgetTransAvailableToComplete()
            && (this.InUseBy == '' || this.InUseBy == curUserId())
            && this.isWorkflowUserPermittedToEdit())
        {
            // Transactions that are completed or in use by another user are not editable.
            isIncludedInCashFlowForecast = this.isBudgetModelIncludedInCashFlowForecast();

            update_recordSet budgetTransactionLine
                setting IncludeInCashFlowForecast = isIncludedInCashFlowForecast
                where budgetTransactionLine.BudgetTransactionHeader == this.RecId
                    && budgetTransactionLine.IncludeInCashFlowForecast != isIncludedInCashFlowForecast;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumAccountingAmountByBudgetType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total amount in accounting currency of all the budget transaction lines
    /// for this header with the specified budget type.
    /// </summary>
    /// <param name="_budgetType">
    /// The budget type to sum.
    /// </param>
    /// <returns>
    /// The total amount in accounting currency of the budget transaction lines for this header
    /// that have the specified budget type.
    /// </returns>
    private AmountMST sumAccountingAmountByBudgetType(BudgetType _budgetType)
    {
        BudgetTransactionLine budgetTransactionLine;

        select sum(AccountingCurrencyAmount) from budgetTransactionLine
            where (budgetTransactionLine.BudgetTransactionHeader == this.RecId) &&
                  (budgetTransactionLine.BudgetType == _budgetType);

        return budgetTransactionLine.AccountingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount in the accounting currency of all the budget transaction lines for this header.
    /// </summary>
    /// <returns>
    /// The total amount in the accounting currency of the budget transaction lines for this header.
    /// </returns>
    public display AmountMST transactionTotal()
    {
        AmountMST               amount = 0;
        BudgetTransactionLine   budgetTransactionLine;

        if (hasTableAccess(tableNum(BudgetTransactionLine)))
        {
            while select sum(AccountingCurrencyAmount) from budgetTransactionLine
                group by budgetTransactionLine.BudgetType
                where (budgetTransactionLine.BudgetTransactionHeader == this.RecId)
            {
                if (budgetTransactionLine.BudgetType == BudgetType::Revenue)
                {
                    // Flip the sign of the amount.
                    amount += (budgetTransactionLine.AccountingCurrencyAmount * -1);
                }
                else
                {
                    amount += budgetTransactionLine.AccountingCurrencyAmount;
                }
            }
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    public BudgetTransHeaderType type()
    {
        return BudgetTransHeaderType::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean isValid;

        isValid = super();

        if (isValid == true)
        {
            // Only Draft transactions can be deleted.
            isValid = BudgetTransactionManager::checkTransactionStatusForDelete(this.TransactionStatus, this.TransactionNumber);

            // Check that the transaction isn't in use by a different user.
            isValid = !this.isUserBlocked() && isValid;

            // Transactions with workflow status of Rejected or Submitted can't be deleted.
            isValid = BudgetTransactionManager::checkWorkflowStatusForDelete(this.WorkflowStatus, this.TransactionNumber, FormDataUtil::isFormDataSource(this)) && isValid;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean isValid;
        BudgetTransHeaderType budgetTransHeaderType;

        // This logic is placed before the validation done by the kernel because the kernel validation
        // does not get logged to AIF.  All errors must be returned to the consumer (service or form).
        budgetTransHeaderType = this.type();
        isValid = budgetTransHeaderType.validateField(_fieldIdToCheck);

        if (isValid)
        {
            isValid = super(_fieldIdToCheck);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid;

        isValid = super();

        isValid = BudgetTransactionManager::validateTransactionCodeType(this) && isValid;

        // Only Draft transactions can be written.
        isValid = BudgetTransactionManager::checkTransactionStatusForWrite(this.TransactionStatus, this.TransactionNumber) && isValid;

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record exists in the <c>BudgetTransactionHeader</c> table; if not,
    ///    an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>BudgetTransactionHeader</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(recId _recId)
    {
        boolean ret = true;

        if (!BudgetTransactionHeader::exist(_recId))
        {
            ret = checkFailed(strFmt(BudgetTransactionHeader::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record occurs in the <c>BudgetTransactionHeader</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>BudgetTransactionHeader</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        boolean found;

        found = (select firstonly RecId from budgetTransactionHeader
                    where budgetTransactionHeader.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForBudgetTransactionCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether transaction exists that references the specified budget transaction code.
    /// </summary>
    /// <param name="_budgetTransactionCodeRecId">
    /// The record ID of the <c>BudgetTransactionCode</c> record.
    /// </param>
    /// <returns>
    /// true if record exists with the <c>BudgetTransactionCode</c> value; otherwise, false.
    /// </returns>
    public static boolean existForBudgetTransactionCode(recId _budgetTransactionCodeRecId)
    {
        boolean                 found;
        BudgetTransactionHeader budgetTransactionHeader;

        found = (select firstonly BudgetTransactionCode from budgetTransactionHeader
                    where budgetTransactionHeader.BudgetTransactionCode == _budgetTransactionCodeRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether activity exists for the ledger.
    /// </summary>
    /// <param name="_ledgerRecId">
    /// The ID of ledger.
    /// </param>
    /// <returns>
    /// true if activity exists for the ledger; otherwise, false.
    /// </returns>
    public static boolean existForLedger(LedgerRecId _ledgerRecId = Ledger::current())
    {
        BudgetTransactionHeader budgetTransactionHeader;

        select firstonly RecId from budgetTransactionHeader
            where budgetTransactionHeader.PrimaryLedger == _ledgerRecId;

        return budgetTransactionHeader != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetTransactionHeader</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record Id of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetTransactionHeader</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetTransactionHeader find(
        recId              _recId,
        boolean            _forupdate = false,
        ConcurrencyModel   _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetTransactionHeader budgetTransactionHeader;

        budgetTransactionHeader.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetTransactionHeader.concurrencyModel(_concurrencyModel);
        }

        select firstonly budgetTransactionHeader
            where budgetTransactionHeader.RecId == _recId;

        return budgetTransactionHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTransactionNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetTransactionHeader</c> table.
    /// </summary>
    /// <param name="_transactionNumber">
    /// The budget transaction number of the record to find.
    /// </param>
    /// <param name="_primaryLedgerId">
    /// The ID for the primary <c>Ledger</c> that is associated with the specified <paramref name="_transactionNumber"/>.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetTransactionHeader</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetTransactionHeader findByTransactionNumber(
        BudgetTransactionId _transactionNumber,
        recId               _primaryLedgerId,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetTransactionHeader budgetTransactionHeader;

        budgetTransactionHeader.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetTransactionHeader.concurrencyModel(_concurrencyModel);
        }

        select firstonly budgetTransactionHeader
            where budgetTransactionHeader.TransactionNumber == _transactionNumber &&
                  budgetTransactionHeader.PrimaryLedger == _primaryLedgerId;

        return budgetTransactionHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetWorkflowStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the workflow status for the budget transaction header.
    /// </summary>
    /// <param name="_budgetTransactionHeaderRecId">
    /// The record ID of the <c>BudgetTransactionHeader</c> record for which to reset the workflow status.
    /// </param>
    /// <remarks>
    /// The <c>BudgetTransactionLine</c> records that are associated to the <c>BudgetTransactionHeader</c>
    /// record will also be have the workflow status reset.
    /// </remarks>
    public static void resetWorkflowStatus(recId _budgetTransactionHeaderRecId)
    {
        BudgetTransactionHeader budgetTransactionHeader;

        ttsbegin;

        budgetTransactionHeader = BudgetTransactionHeader::find(_budgetTransactionHeaderRecId, true);

        if (budgetTransactionHeader &&
            budgetTransactionHeader.TransactionStatus == BudgetTransactionStatus::Draft)
        {
            budgetTransactionHeader.initWorkflowStatus();
            budgetTransactionHeader.update();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkflowStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the workflow status for the budget transaction header.
    /// </summary>
    /// <param name="_budgetTransactionHeaderRecId">
    /// The record ID of the <c>BudgetTransactionHeader</c> record for which to set the workflow status.
    /// </param>
    /// <param name="_workflowStatus">
    /// The workflow status to set.
    /// </param>
    /// <remarks>
    /// The <c>BudgetTransactionLine</c> records that are associated with the
    /// <c>BudgetTransactionHeader</c> record will also be have the workflow status set.
    /// </remarks>
    public static void setWorkflowStatus(
        recId _budgetTransactionHeaderRecId,
        BudgetTransactionWorkflowStatus _workflowStatus)
    {
        BudgetTransactionHeader budgetTransactionHeader;
        BudgetTransactionLine budgetTransactionLine;

        ttsbegin;

        budgetTransactionHeader = BudgetTransactionHeader::find(_budgetTransactionHeaderRecId, true);

        if (budgetTransactionHeader &&
            budgetTransactionHeader.TransactionStatus == BudgetTransactionStatus::Draft)
        {
            if (budgetTransactionHeader.WorkflowStatus != _workflowStatus)
            {
                budgetTransactionHeader.WorkflowStatus = _workflowStatus;
                budgetTransactionHeader.update();
            }

            // Update the workflow status on the lines.
            update_recordset budgetTransactionLine
                setting WorkflowStatus = budgetTransactionHeader.WorkflowStatus
                where budgetTransactionLine.BudgetTransactionHeader == budgetTransactionHeader.RecId &&
                    budgetTransactionLine.WorkflowStatus != budgetTransactionHeader.WorkflowStatus;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWorkflowUsers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of a work flow approver for display.
    /// </summary>
    public display DirPartyName displayWorkflowUsers()
    {
        return BudgetWorkflowHelper::getAssignedUsersTextToDisplay(this.TableId, this.RecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicBudget</ConfigurationKey>
	<DeveloperDocumentation>@SYS127770</DeveloperDocumentation>
	<FormRef>BudgetTransactions</FormRef>
	<Label>@SYS127778</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>TransactionNumber</TitleField1>
	<TitleField2>BudgetTransactionType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Budget</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>TransactionNumberIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>BudgetTransactionLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>BudgetTransactionLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ReasonTableRef</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ReasonTableRef</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetModelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetTransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetTransactionType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransferSourceNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetModelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetTransactionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetTransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsOneTimeAmendment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetModelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetTransactionType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrimaryLedger</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BudgetModel</Name>
			<Label>@SYS1966</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetModelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetSubModelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetModelType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetModelDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Select</Name>
			<Label>@SYS7444</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>editBudgetModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetTransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetTransactionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsOneTimeAmendment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editReasonComment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS25532</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editIsInUse</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InUseBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkflowStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Date</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransferSourceNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkflowPreview</Name>
			<Label>@SYS319145</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetTransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetTransactionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Date</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>transactionTotal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkflowStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayBudgetCheckResultText</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BudgetModelDataAreaId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS329066</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BudgetModelId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetModelId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BudgetModelType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>HeadingSub</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BudgetSubModelId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetModelSubId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetTransactionCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS339265</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BudgetTransactionType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BudgetTransactionType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>Date</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS127787</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InUseBy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Label>@SYS127774</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsOneTimeAmendment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS127786</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PrimaryLedger</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReasonTableRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReasonRefRecID</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetTransactionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransactionStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BudgetTransactionStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransferSourceNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetTransferSourceNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkflowStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BudgetTransactionWorkflowStatus</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TransactionNumberIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TransactionNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PrimaryLedger</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LedgerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PrimaryLedger</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransactionStatus</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BudgetTransactionType</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PrimaryLedgerTransactionNumberIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PrimaryLedger</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransactionNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>BudgetModel</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS1966</EntityRelationshipRole>
			<RelatedTable>BudgetModel</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BudgetModel</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetTransactionHeader</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetModelDataAreaId</Name>
					<Field>BudgetModelDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetModelType</Name>
					<Field>BudgetModelType</Field>
					<RelatedField>Type</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetSubModelId</Name>
					<Field>BudgetSubModelId</Field>
					<RelatedField>SubModelId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetModelId</Name>
					<Field>BudgetModelId</Field>
					<RelatedField>ModelId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetTransactionCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS339265</EntityRelationshipRole>
			<RelatedTable>BudgetTransactionCode</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BudgetTransactionCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetTransactionHeader</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetTransactionCode</Name>
					<Field>BudgetTransactionCode</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PrimaryLedger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Ledger</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Ledger</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Ledger_BudgetTransactionHeader</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PrimaryLedger</Name>
					<Field>PrimaryLedger</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReasonTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ReasonTableRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonTableRef</Name>
					<SourceEDT>ReasonRefRecID</SourceEDT>
					<Field>ReasonTableRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UserInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>UserInfo</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InUseBy</Name>
					<SourceEDT>UserId</SourceEDT>
					<Field>InUseBy</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BudgetTransactionHeaderView</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<EntityRelationshipRole>@SYS127778</EntityRelationshipRole>
			<RelatedTable>BudgetTransactionHeaderView</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>