<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResTrackingDimensionGroupItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResTrackingDimensionGroupItem extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        boolean skipValidation = WHSReservationHierarchyItemSkipValidateDeleteFlight::instance().isEnabled()
            && WHSReservationHierarchyItemSkipValidateDeleteContext::skipValidation();

        if (!skipValidation
         && WHSReservationHierarchyItem::findByItem(this.ItemDataAreaId, this.ItemId))
        {
            ret = checkFailed("@WAX4737");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean                         ret;
        WHSReservationHierarchyItem     reservationHierarchyItem;
        EcoResStorageDimensionGroupItem storageDimensionGroupItem;
        InventTable                     inventTable;

        ret = super();

        if (ret)
        {
            reservationHierarchyItem = WHSReservationHierarchyItem::findByItem(this.ItemDataAreaId, this.ItemId);

            if (reservationHierarchyItem)
            {
                storageDimensionGroupItem = EcoResStorageDimensionGroupItem::findByItem(this.ItemDataAreaId, this.ItemId);
                
                boolean reservationHierarchyCompatible = WHSInventTableReservationHierarchy::validatePhysicalDimMatchWithHierarchy(
                                reservationHierarchyItem.ReservationHierarchy,
                                InventDimGroupSetup::newDimensionGroups(0, storageDimensionGroupItem.StorageDimensionGroup, this.TrackingDimensionGroup),
                                WHSReservationHierarchyCache::construct());

                if (!reservationHierarchyCompatible)
                {
                    info("@SCM:SuggestPeriodicTaskForChangingTrackingDimension");
                }

                ret = ret && reservationHierarchyCompatible;
            }
        }

        ret = ret && this.checkOwnerNotEnabledWithCatchWeightEnabledItem();
        ret = ret && this.checkOwnerNotEnabledWithoutInventProfile_RU();
        ret = ret && this.validateSerialWithWHSCatchWeightEnabledItem();

        inventTable = InventTable::find(this.ItemId);
        ret = ret && EcoResProductInventoryDimensionGroups::isReleasedProductValidForTrackDimGroup(inventTable.Product, this.TrackingDimensionGroup);

        if (ret)
        {
            EcoResTrackingDimensionGroup trackingDimensionGroup = EcoResTrackingDimensionGroup::find(this.TrackingDimensionGroup);
            ret = EcoResTrackingDimensionGroupItem::validateTrackingDimensionGroupIsSameAsInProduct(trackingDimensionGroup, inventTable.Product);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOwnerNotEnabledWithCatchWeightEnabledItem</Name>
				<Source><![CDATA[
    private boolean checkOwnerNotEnabledWithCatchWeightEnabledItem()
    {
        #ISOCountryRegionCodes

        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU], this.ItemDataAreaId))
        {
            var ecoResProduct = EcoResProduct::find(InventTable::find(this.ItemId).Product);

            if (ecoResProduct.PdsCWProduct)
            {
                var ownerFldSetup = EcoResTrackingDimensionGroupFldSetup::findByDimensionGroupFieldId(this.TrackingDimensionGroup, fieldNum(InventDim, InventOwnerId_RU));

                if (ownerFldSetup.IsActive)
                {
                    EcoResTrackingDimensionGroup trackingDimensionGroup = EcoResTrackingDimensionGroup::find(this.TrackingDimensionGroup);
                    return checkFailed(strfmt("@Consignment:MessageValidation_ActiveOwnerTrackingDimensionGroup_CW", trackingDimensionGroup.Name));
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSerialWithWHSCatchWeightEnabledItem</Name>
				<Source><![CDATA[
    private boolean validateSerialWithWHSCatchWeightEnabledItem()
    {
        boolean ret = true;

        if (EcoResStorageDimensionGroup::find(EcoResStorageDimensionGroupItem::findByItem(this.ItemDataAreaId, this.ItemId).StorageDimensionGroup).IsWarehouseWHSEnabled
            && WHSCatchWeightHelper::isCatchWeightProduct(InventTable::findInLegalEntity(this.ItemId, this.ItemDataAreaId).Product))
        {
            EcoResTrackingDimensionGroup trackingDimensionGroup = EcoResTrackingDimensionGroup::find(this.TrackingDimensionGroup);

            if (trackingDimensionGroup.IsSerialAtConsumptionEnabled)
            {
                ret = checkFailed(strFmt("@WAX:Error_TrackingGroupUsingConsumeSerialNotAllowedForWHSCatchWeightItem", this.ItemId));
            }

            if (trackingDimensionGroup.CaptureSerial == WHSWhenToCapture::Picking
                || trackingDimensionGroup.CaptureSerial == WHSWhenToCapture::Packing)
            {
                ret = checkFailed(strFmt("@WAX:Error_TrackingGroupWHSWhenToCaptureSerialValueNotAllowedForWHSCatchWeightItem", this.ItemId, trackingDimensionGroup.CaptureSerial));
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOwnerNotEnabledWithoutInventProfile_RU</Name>
				<Source><![CDATA[
    private boolean checkOwnerNotEnabledWithoutInventProfile_RU()
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU], this.ItemDataAreaId))
        {
            var ownerFldSetup = EcoResTrackingDimensionGroupFldSetup::findByDimensionGroupFieldId(this.TrackingDimensionGroup, fieldNum(InventDim, InventOwnerId_RU));

            if (ownerFldSetup.IsActive)
            {
                var inventProfileFldSetup = EcoResTrackingDimensionGroupFldSetup::findByDimensionGroupFieldId(this.TrackingDimensionGroup, fieldNum(InventDim, InventProfileId_RU));
                if (!inventProfileFldSetup.IsActive)
                {
                    EcoResTrackingDimensionGroup trackingDimensionGroup = EcoResTrackingDimensionGroup::find(this.TrackingDimensionGroup);
                    return checkFailed(strfmt("@Inventory_Localization:TrackingDimGroupCannotBeUsedBecauseHasActiveAndInactive",
                                              trackingDimensionGroup.Name, 
                                              ownerFldSetup.fieldName(),
                                              inventProfileFldSetup.fieldName()));
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldSetup</Name>
				<Source><![CDATA[
    private EcoResTrackingDimensionGroupFldSetup fieldSetup(FieldId _fieldId)
    {
        return EcoResTrackingDimensionGroupFldSetup::findByDimensionGroupFieldId(this.TrackingDimensionGroup, _fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTrackingDimensionGroupIsSameAsInProduct</Name>
				<Source><![CDATA[
    public static boolean validateTrackingDimensionGroupIsSameAsInProduct(EcoResTrackingDimensionGroup _trackingDimensionGroup, EcoResProductRecId _productRecId)
    {
        boolean ret = true;

        EcoResTrackingDimensionGroupProduct trackingDimensionGroupProduct = EcoResTrackingDimensionGroupProduct::findByProduct(_productRecId);

        if (trackingDimensionGroupProduct.RecId)
        {
            if (trackingDimensionGroupProduct.TrackingDimensionGroup != _trackingDimensionGroup.RecId)
            {
                ret = checkFailed("@SCM:ErrorTrackingDimensionGroupDifferentInReleasedProduct");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a <c>EcoResTrackingDimensionGroupItem</c> record that matches the specified item.
    /// </summary>
    /// <param name="_itemDataAreaId">
    ///    A <c>DataAreaId</c> field of the <c>InventTable</c> record for the item.
    /// </param>
    /// <param name="_itemId">
    ///    A <c>ItemId</c> field of the <c>InventTable</c> record for the item.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether a record is to be selected for update; optional.
    /// </param>
    /// <returns>
    ///    A <c>EcoResTrackingDimensionGroupItem</c> record.
    /// </returns>
    static public EcoResTrackingDimensionGroupItem findByItem(
        DataAreaId          _itemDataAreaId,
        ItemId              _itemId,
        boolean             _forupdate  = false)
    {
        EcoResTrackingDimensionGroupItem    ecoResTrackingDimensionGroupItem;

        ecoResTrackingDimensionGroupItem.selectForUpdate(_forupdate);

        if (_itemId)
        {
            select firstonly ecoResTrackingDimensionGroupItem
                where ecoResTrackingDimensionGroupItem.ItemDataAreaId   == _itemDataAreaId
                   && ecoResTrackingDimensionGroupItem.ItemId           == _itemId;
        }

        return ecoResTrackingDimensionGroupItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemActiveInSalesProcess</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the given Item belongs to a Tracking Dimension that has the "Active in Sales Process" flag enabled
    /// </summary>
    /// <param name="_itemDataAreaId">
    ///    A <c>DataAreaId</c> field of the <c>InventTable</c> record for the item.
    /// </param>
    /// <param name="_itemId">
    ///    A <c>ItemId</c> field of the <c>InventTable</c> record for the item.
    /// </param>
    /// <returns>
    ///    true if the Item is "Active in Sales Process," false otherwise.
    /// </returns>
    static public boolean isItemActiveInSalesProcess(
        DataAreaId          _itemDataAreaId,
        ItemId              _itemId)
    {
        boolean isItemActiveInSalesProcess                                        = false;
        EcoResTrackingDimensionGroupItem ecoResTrackingDimensionGroupItem         = EcoResTrackingDimensionGroupItem::findByItem(_itemDataAreaId, _itemId);
        EcoResTrackingDimensionGroupFldSetup ecoResTrackingDimensionGroupFldSetup = EcoResTrackingDimensionGroupFldSetup::findByDimensionGroupFieldId(EcoResTrackingDimensionGroupItem.TrackingDimensionGroup,
                    fieldNum(InventDim,InventSerialId));

        if (ecoResTrackingDimensionGroupFldSetup && ecoResTrackingDimensionGroupFldSetup.IsSalesProcessActivated)
        {
            isItemActiveInSalesProcess = true;
        }

        return isItemActiveInSalesProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemAllowBlankIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the given Item belongs to a Tracking Dimension that has the "Allow Blank Issue" flag enabled
    /// </summary>
    /// <param name="_itemDataAreaId">
    ///    A <c>DataAreaId</c> field of the <c>InventTable</c> record for the item.
    /// </param>
    /// <param name="_itemId">
    ///    A <c>ItemId</c> field of the <c>InventTable</c> record for the item.
    /// </param>
    /// <returns>
    ///    true if the Item has the "Allow Blank Issue" field set to true, false otherwise.
    /// </returns>
    static public boolean isItemAllowBlankIssue(
        DataAreaId          _itemDataAreaId,
        ItemId              _itemId)
    {
        boolean isItemAllowBlankIssue                                             = false;
        EcoResTrackingDimensionGroupItem ecoResTrackingDimensionGroupItem         = EcoResTrackingDimensionGroupItem::findByItem(_itemDataAreaId, _itemId);
        EcoResTrackingDimensionGroupFldSetup ecoResTrackingDimensionGroupFldSetup = EcoResTrackingDimensionGroupFldSetup::findByDimensionGroupFieldId(EcoResTrackingDimensionGroupItem.TrackingDimensionGroup,
                    fieldNum(InventDim,InventSerialId));

        if (ecoResTrackingDimensionGroupFldSetup && ecoResTrackingDimensionGroupFldSetup.IsAllowBlankIssueEnabled)
        {
            isItemAllowBlankIssue = true;
        }

        return isItemAllowBlankIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemActiveSerialAtConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the given item belongs to a tracking dimension that has the "Consumption" flag enabled
    /// </summary>
    /// <param name="_itemId">
    ///     A <c>ItemId</c> field of the <c>InventTable</c> record for the item.
    /// </param>
    /// <param name="_itemDataAreaId">
    ///     A <c>DataAreaId</c> field of the <c>InventTable</c> record for the item.
    /// </param>
    /// <returns>
    ///     True if item is set up to register serials at consumption, false otherwise
    /// </returns>
    static public boolean isItemActiveSerialAtConsumption(ItemId _itemId, DataAreaId _itemDataAreaId = curext())
    {
        EcoResTrackingDimensionGroupItem    ecoResTrackingDimensionGroupItem = EcoResTrackingDimensionGroupItem::findByItem(_itemDataAreaId, _itemId);
        EcoResTrackingDimensionGroup        ecoResTrackingDimensionGroup = EcoResTrackingDimensionGroup::find(ecoResTrackingDimensionGroupItem.TrackingDimensionGroup);

        return ecoResTrackingDimensionGroup && ecoResTrackingDimensionGroup.IsSerialAtConsumptionEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    public void write()
    {
        if (#PdsBatchAttribEnabled)
        {
            InventTable inventTable = InventTable::find(this.ItemId, true);
            if (inventTable.areShelfLifeDatesSpecified()
                && !InventDimGroupSetup::newDimensionGroups(0, 0, this.TrackingDimensionGroup).getFieldSetup(fieldnum(InventDim, InventBatchId)).isActive())
            {
                ttsbegin;
                inventTable.resetShelfLifeDates();
                inventTable.update();
                ttscommit;
            }
        }

        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS312268</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<FormRef>EcoResProductDetailsExtended</FormRef>
	<Label>@SYS312249</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>TrackingDimensionGroup</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>InventTableIdx</ClusteredIndex>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>InventTableIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TrackingDimensionGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Item</Name>
			<Label>@SYS7407</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TrackingDimensionGroup</Name>
			<Label>@SYS312248</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TrackingDimensionGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TrackingDimensionGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResTrackingDimensionGroupRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>EcoResTrackingDimensionGroupIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TrackingDimensionGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventTableIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemDataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemDataAreaIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TrackingDimensionGroup</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResTrackingDimensionGroup</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>EcoResTrackingDimensionGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResTrackingDimensionGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResTrackingDimensionGroup_EcoResTrackingDimensionGroupItem</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TrackingDimensionGroup</Name>
					<Field>TrackingDimensionGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTable_EcoResTrackingDimensionGroupItem</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemDataAreaId</Name>
					<Field>ItemDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>