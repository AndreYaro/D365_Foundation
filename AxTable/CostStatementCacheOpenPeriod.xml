<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostStatementCacheOpenPeriod</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CostStatementCacheOpenPeriod extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>CostStatementCacheTrackDeltaOpenPeriod</c> table.
    /// </summary>
    /// <param name="_forupdate">
    /// true if the record must be selected for update; otherwise, false.
    /// </param>
    /// <returns>
    /// A <c>CostStatementCacheTrackDeltaOpenPeriod</c> record.
    /// </returns>
    public static CostStatementCacheOpenPeriod find(boolean _forupdate = false)
    {
        CostStatementCacheOpenPeriod costStatementCacheOpenPeriod;

        if (_forupdate)
        {
            costStatementCacheOpenPeriod.selectForUpdate(_forupdate);
        }

        select firstonly costStatementCacheOpenPeriod;

        if (!costStatementCacheOpenPeriod && !costStatementCacheOpenPeriod.isTmp())
        {
            costStatementCacheOpenPeriod.StartDate = dateNull() + 1;
            costStatementCacheOpenPeriod.insert();
        }

        return costStatementCacheOpenPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerFiscalCalendarPeriod_onUpdating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the start date for update of the cost statement cache, when a ledger fiscal calendar period is reopened.
    /// </summary>
    /// <param name="sender">
    /// The ledger fiscal calendar period that is updated.
    /// </param>
    /// <param name="e">
    /// The data event args.
    /// </param>
    [DataEventHandler(tableStr(LedgerFiscalCalendarPeriod), DataEventType::Updating)]
    public static void LedgerFiscalCalendarPeriod_onUpdating(Common sender, DataEventArgs e)
    {
        LedgerFiscalCalendarPeriod      ledgerFiscalCalendarPeriod = sender;

        if (ledgerFiscalCalendarPeriod.Status == FiscalPeriodStatus::Open &&
            ledgerFiscalCalendarPeriod.Status != ledgerFiscalCalendarPeriod.orig().Status)
        {
            FiscalCalendarPeriod fiscalCalendarPeriod;
            CostStatementCacheOpenPeriod  costStatementCacheOpenPeriod;

            update_recordset costStatementCacheOpenPeriod
            setting StartDate = fiscalCalendarPeriod.StartDate
            join fiscalCalendarPeriod
            where fiscalCalendarPeriod.RecId == ledgerFiscalCalendarPeriod.FiscalCalendarPeriod
               && costStatementCacheOpenPeriod.StartDate > fiscalCalendarPeriod.StartDate;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@CostManagement:DeveloperDocCostStatementCacheOpenPeriod</DeveloperDocumentation>
	<Label>@CostManagement:CostStatementCacheOpenPeriod_TableName</Label>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>Inventory</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StartDate</Name>
			<AssetClassification>Customer Content </AssetClassification>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>