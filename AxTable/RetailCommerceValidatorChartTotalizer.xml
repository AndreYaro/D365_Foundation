<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCommerceValidatorChartTotalizer</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailCommerceValidatorChartTotalizer extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addSample</Name>
				<Source><![CDATA[
    /// <summary>
    /// create or update a record on <c>RetailCommerceValidatorChartTotalizer</c> table.
    /// </summary>
    /// <param name = "_chart">The chart name.</param>
    /// <param name = "_metric">The metric name.</param>
    /// <param name = "_value">The amount to be added to the metric.</param>
    /// <param name = "_validationId">The validation id.</param>
    /// <param name = "_batchJobId">The batch job Id.</param>
    private static void addSample(str _chart, str _metric, int64 _value, RetailCommerceValidatorId _validationId = '', RefRecId _batchJobId = 0)
    {
        RetailCommerceValidatorChartTotalizer chartTotalizer;
        System.Exception exception;
        RetailCommerceValidatorParameters parameters = retailCommerceValidatorParameters::find();

        try
        {
            ttsbegin;
            if (!parameters.UsePessimisticLocks)
            {
                select forupdate chartTotalizer
                    where chartTotalizer.Chart == _chart
                    && chartTotalizer.Metric == _metric
                    && chartTotalizer.ValidationId == _validationId
                    && chartTotalizer.BatchJobId == _batchJobId;
            }
            else if (parameters.UsePessimisticLocks)
            {
                select pessimisticlock chartTotalizer
                    where chartTotalizer.Chart == _chart
                    && chartTotalizer.Metric == _metric
                    && chartTotalizer.ValidationId == _validationId
                    && chartTotalizer.BatchJobId == _batchJobId;
            }

            chartTotalizer.Chart = _chart;
            chartTotalizer.Metric = _metric;
            chartTotalizer.ValidationId = _validationId;
            chartTotalizer.BatchJobId = _batchJobId;
            chartTotalizer.Total = _value;

            if (chartTotalizer)
            {
                chartTotalizer.update();
            }
            else
            {
                chartTotalizer.insert();
            }
            ttscommit;
        }
        catch (exception)
        {
            if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
            {
                RetailCommerceValidatorExceptions::logRetry(_validationId, tableStr(RetailCommerceValidatorChartTotalizer), xSession::currentRetryCount(), false, exception);
            }
            else
            {
                RetailCommerceValidatorExceptions::logRetry(_validationId, tableStr(RetailCommerceValidatorChartTotalizer), xSession::currentRetryCount(), true, exception);
                sleep(parameters.PauseInMsBeforeRetry);
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotalResultsChart</Name>
				<Source><![CDATA[
    internal static void updateTotalResultsChart(RetailCommerceValidator _retailCommerceValidator = null)
    {
        RetailCommerceValidatorLog logs;
        RetailCommerceValidatorChartTotalizer sample;
        RetailCommerceValidatorCounters counterTotal;
        RetailCommerceValidatorCounters counterEWM;
        str chartName;

        if (_retailCommerceValidator)
        {
            chartName = "@Retail:RetailCommerceValidatorTotalValidationResults";

            counterTotal = RetailCommerceValidatorCounters::getCounter("@Retail:RetailCommerceValidatorNumberOfEntityRulesCombinationPerValidation", _retailCommerceValidator.ValidationId, _retailCommerceValidator.CurrentBatchJobId);
            counterEWM = RetailCommerceValidatorCounters::getCounter("@Retail:RetailCommerceValidatorCounterPerValidationMetricId", _retailCommerceValidator.ValidationId, _retailCommerceValidator.CurrentBatchJobId);

            RetailCommerceValidatorChartTotalizer::addSample(chartName, "@SYS14327", counterEWM.MessageCount, _retailCommerceValidator.ValidationId, _retailCommerceValidator.CurrentBatchJobId);
            RetailCommerceValidatorChartTotalizer::addSample(chartName, "@SYS6998", counterEWM.WarningCount, _retailCommerceValidator.ValidationId, _retailCommerceValidator.CurrentBatchJobId);
            RetailCommerceValidatorChartTotalizer::addSample(chartName, "@SYS36230", counterEWM.ErrorCount, _retailCommerceValidator.ValidationId, _retailCommerceValidator.CurrentBatchJobId);
            RetailCommerceValidatorChartTotalizer::addSample(chartName, "@SYS31423", counterTotal.TotalCount - counterEWM.TotalCount, _retailCommerceValidator.ValidationId, _retailCommerceValidator.CurrentBatchJobId);

            chartName = "@Retail:RetailCommerceValidatorTotalProgressResults";

            RetailCommerceValidatorChartTotalizer::addSample(chartName, "@SYS76835", _retailCommerceValidator.ValidationProgressPercentage, _retailCommerceValidator.ValidationId, _retailCommerceValidator.CurrentBatchJobId);
            RetailCommerceValidatorChartTotalizer::addSample(chartName, "@SYS7391", (100 - _retailCommerceValidator.ValidationProgressPercentage), _retailCommerceValidator.ValidationId, _retailCommerceValidator.CurrentBatchJobId);
        }
        else
        {
            chartName = "@Retail:RetailCommerceValidatorTotalResults";

            counterTotal = RetailCommerceValidatorCounters::getCounter("@Retail:RetailCommerceValidatorNumberOfEntityRulesCombination");
            counterEWM = RetailCommerceValidatorCounters::getCounter("@Retail:RetailCommerceValidatorGeneralCounterMetricId");

            RetailCommerceValidatorChartTotalizer::addSample(chartName, "@SYS14327", counterEWM.MessageCount);
            RetailCommerceValidatorChartTotalizer::addSample(chartName, "@SYS6998", counterEWM.WarningCount);
            RetailCommerceValidatorChartTotalizer::addSample(chartName, "@SYS36230", counterEWM.ErrorCount);
            RetailCommerceValidatorChartTotalizer::addSample(chartName, "@SYS31423", counterTotal.TotalCount - counterEWM.TotalCount);

            chartName = "@Retail:RetailCommerceValidatorTotalResultsPerChannel";

            RetailCommerceValidator validator;
            select count(RecId) from validator where validator.ValidationResultStatus == RetailCommerceValidatorResultStatus::None;
            RetailCommerceValidatorChartTotalizer::addSample(chartName, "@SYS80253", validator.RecId);
            select count(RecId) from validator where validator.ValidationResultStatus == RetailCommerceValidatorResultStatus::Warning;
            RetailCommerceValidatorChartTotalizer::addSample(chartName, "@SYS6998", validator.RecId);
            select count(RecId) from validator where validator.ValidationResultStatus == RetailCommerceValidatorResultStatus::Error;
            RetailCommerceValidatorChartTotalizer::addSample(chartName, "@SYS36230", validator.RecId);
            select count(RecId) from validator where validator.ValidationResultStatus == RetailCommerceValidatorResultStatus::Passed;
            RetailCommerceValidatorChartTotalizer::addSample(chartName, "@SYS31423", validator.RecId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Chart</Name>
			<StringSize>100</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Metric</Name>
			<ExtendedDataType>RetailCommerceValidatorMetricId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Total</Name>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ValidationId</Name>
			<ExtendedDataType>RetailCommerceValidatorId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BatchJobId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@Retail:RetailCommerceValidatorBatchJobId</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>