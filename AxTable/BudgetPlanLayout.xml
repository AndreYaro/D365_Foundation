<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanLayout</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetPlanLayout extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>BudgetPlanLayout</c> table.
    /// </summary>
    /// <param name='_budgetPlanLayoutRecId'>
    /// The record ID of the <c>BudgetPlanLayout</c> record.
    /// </param>
    /// <param name='_forUpdate'>
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name='_concurrencyModel'>
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanLayout</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanLayout find(
        BudgetPlanLayoutRecId   _budgetPlanLayoutRecId,
        boolean                 _forUpdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanLayout budgetPlanLayout;

        if (_budgetPlanLayoutRecId)
        {
            budgetPlanLayout.selectForUpdate(_forUpdate);

            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanLayout.concurrencyModel(_concurrencyModel);
            }

            select firstOnly budgetPlanLayout
                where budgetPlanLayout.RecId == _budgetPlanLayoutRecId;
        }

        return budgetPlanLayout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>BudgetPlanLayout</c> table.
    /// </summary>
    /// <param name='_budgetPlanLayoutName'>
    /// The name of the <c>BudgetPlanLayout</c> record.
    /// </param>
    /// <param name='_forUpdate'>
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name='_concurrencyModel'>
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanLayout</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanLayout findByName(
        BudgetPlanLayoutName    _budgetPlanLayoutName,
        boolean                 _forUpdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanLayout budgetPlanLayout;

        if (_budgetPlanLayoutName != '')
        {
            budgetPlanLayout.selectForUpdate(_forUpdate);

            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanLayout.concurrencyModel(_concurrencyModel);
            }

            select firstOnly budgetPlanLayout
                where budgetPlanLayout.Name == _budgetPlanLayoutName;
        }

        return budgetPlanLayout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean             isValid = true;
        DimensionHierarchy  dimensionHierarchy;

        isValid = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(BudgetPlanLayout, DimensionHierarchy):
                select RecId from dimensionHierarchy
                    where dimensionHierarchy.StructureType == DimensionHierarchyType::Focus
                    &&    dimensionHierarchy.RecId         == this.DimensionHierarchy;

                if (!dimensionHierarchy)
                {
                    isValid = checkFailed(strFmt("@Budget:InvalidLedgerDimensionSet", enum2Str(DimensionHierarchyType::Focus)));
                }

                if (isValid && this.RecId)
                {
                    isValid = !BudgetPlanLayoutHelper::checkDimensionIsColumnFilter(this.DimensionHierarchy, this.RecId);
                }
                break;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(BudgetPlanLayout, DimensionHierarchy):
                if (this.RecId)
                {
                    BudgetPlanLayoutHelper::clearLayoutFocusCache(this.RecId);
                    BudgetPlanLayoutDescriptionElement::deleteSelectedDimensionHierarchyFields(this.RecId);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByNameLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BudgetPlanLayout</c> table by using the localized name and language.
    /// </summary>
    /// <param name="_budgetPlanLayoutName"> The localized name of the <c>BudgetPlanLayout</c> record. </param>
    /// <param name="_forUpdate"> A Boolean value that indicates whether to read the record for update; optional. </param>
    /// <param name="_languageId"> The language of the <c>BudgetPlanLayout</c> record; optional. </param>
    /// <returns> A record in the <c>BudgetPlanLayout</c> table; otherwise, an empty record. </returns>
    public static BudgetPlanLayout findByNameLanguage(
        BudgetPlanLayoutName    _budgetPlanLayoutName,
        boolean                 _forUpdate = false,
        LanguageId              _languageId = currentUserLanguage())
    {
        BudgetPlanLayout            budgetPlanLayout;
        BudgetPlanLayoutTranslation budgetPlanLayoutTranslation;

        if (_budgetPlanLayoutName)
        {
            budgetPlanLayout.selectForUpdate(_forUpdate);

            select firstOnly budgetPlanLayout
                exists join budgetPlanLayoutTranslation
                    where budgetPlanLayoutTranslation.Name == _budgetPlanLayoutName
                        && budgetPlanLayoutTranslation.Layout == budgetPlanLayout.RecId
                        && budgetPlanLayoutTranslation.LanguageId == _languageId;
        }

        return budgetPlanLayout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLocalizedName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BudgetPlanLayout</c> table by using the localized name.
    /// </summary>
    /// <param name="_localizedName"> The localized name of the <c>BudgetPlanLayout</c> record. </param>
    /// <param name="_forUpdate"> A Boolean value that indicates whether to read the record for update; optional. </param>
    /// <param name="_languageId"> The language of the <c>BudgetPlanLayout</c> record; optional. </param>
    /// <returns> A record in the <c>BudgetPlanLayout</c> table; otherwise, an empty record. </returns>
    public static BudgetPlanLayout findByLocalizedName(
        BudgetPlanLayoutName    _localizedName,
        boolean                 _forUpdate = false,
        LanguageId              _languageId = currentUserLanguage())
    {
        BudgetPlanLayout    budgetPlanLayout;
        LanguageId          languageId = _languageId;

        if (languageId)
        {
            budgetPlanLayout = BudgetPlanLayout::findByNameLanguage(_localizedName, _forUpdate, languageId);
        }

        if (!budgetPlanLayout)
        {
            budgetPlanLayout = BudgetPlanLayout::findByNameLanguage(_localizedName, _forUpdate, SystemParameters::getSystemLanguageId());
        }

        if (!budgetPlanLayout)
        {
            budgetPlanLayout = BudgetPlanLayout::findByName(_localizedName, _forUpdate);
        }

        return budgetPlanLayout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        BudgetPlanLayoutTranslation::createOrUpdateTranslation(this.RecId, this.Name, this.Description);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        if (this.UseBudgetPlanLineMassUpdate)
        {
            BudgetPlanLineMassUpdateTemplateManager::generateMassUpdateTemplate(this);
        }

        BudgetPlanLayoutTranslation::createOrUpdateTranslation(this.RecId, this.Name, this.Description);
        BudgetPlanLayoutHelper::refreshLayout(
            BudgetPlanMappingCacheDeleteType::DeleteMappingCacheByLayout,
            this.RecId,
            BudgetPlanMappingRefreshType::RefreshByLayout,
            this.RecId,
            false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTemplateGenerated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method to show if a template has been generated for the given <c>BudgetPlanLayout</c> record.
    /// </summary>
    /// <returns> The string of the template indicator. </returns>
    public display str displayTemplateGenerated()
    {
        DocuTemplate docuTemplate = DocuTemplate::findExactTemplateWithRegion(
            OfficeAppApplicationType::Excel,
            this.Name,
            BudgetPlanningConstants::emptyString,
            BudgetPlanningConstants::emptyString,
            BudgetPlanningConstants::emptyString,
            true);

        return docuTemplate == null ? "@Budget:BudgetPlanningNoTemplateExists" : "@Budget:BudgetPlanningTemplateExists";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (this.UseBudgetPlanLineMassUpdate && !DMFEntity::find(BudgetPlanningConstants::LineActiveViewEntityName))
        {
            ret = checkFailed("@Budget:LineActiveViewEntityNotExist");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        DMFDefinitionGroup dmfDefinitionGroup;

        if (this.UseBudgetPlanLineMassUpdate)
        {
            delete_from dmfDefinitionGroup
                where dmfDefinitionGroup.RecId == this.DMFDefinitionGroup
                    || dmfDefinitionGroup.RecId == this.DMFExportDefinitionGroup;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@Budget:LayoutTableDocumentation</DeveloperDocumentation>
	<FormRef>BudgetPlanningConfigurationLayout</FormRef>
	<Label>@Budget:LayoutDisplayName</Label>
	<SingularLabel>@Budget:LayoutDisplayNameSingular</SingularLabel>
	<TableGroup>Group</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>Budget</Modules>
	<ReplacementKey>NameIndex</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DeleteLayoutElement</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>Layout</Relation>
			<Table>BudgetPlanLayoutElement</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteLayoutRestricted</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation>StageRuleLayout</Relation>
			<Table>BudgetPlanningStageRule</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAlternateLayout</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation>BudgetPlanLayout</Relation>
			<Table>BudgetPlanAlternateLayout</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteLayoutCache</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>LayoutRelation</Relation>
			<Table>BudgetPlanLayoutCache</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteLayoutMapping</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>Layout</Relation>
			<Table>BudgetPlanLayoutMapping</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteLayoutTranslation</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>BudgetPlanLayoutRelation</Relation>
			<Table>BudgetPlanLayoutTranslation</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteLineDefaultRowTemplate</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>LayoutRelation</Relation>
			<Table>BudgetPlanLineDefaultRowTemplate</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionHierarchy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionHierarchy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@Budget:General</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@Budget:Identification</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionHierarchy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanLayoutName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanLayoutDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DimensionHierarchy</Name>
			<AssetClassification>System metadata</AssetClassification>
			<ExtendedDataType>DimensionHierarchyId</ExtendedDataType>
			<Label>@Budget:LedgerDimensionSet</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DMFDefinitionGroup</Name>
			<AssetClassification>System metadata</AssetClassification>
			<ExtendedDataType>RecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseBudgetPlanLineMassUpdate</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Budget:BudgetPlanLineMassUpdate</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DMFExportDefinitionGroup</Name>
			<AssetClassification>System metadata</AssetClassification>
			<ExtendedDataType>RecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIndex</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionFocus</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionHierarchy</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DimensionHierarchyRecId</Name>
					<Field>DimensionHierarchy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ExportDefinitionGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DMFDefinitionGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DefinitionGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ExportDefinitionGroup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DimensionHierarchyRecId</Name>
					<Field>DMFExportDefinitionGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ImportDefinitionGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DMFDefinitionGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DefinitionGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ImportDefinitionGroup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DimensionHierarchyRecId</Name>
					<Field>DMFDefinitionGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>