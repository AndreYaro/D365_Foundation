<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRRoyaltyTablePricing</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MCRRoyaltyTablePricing extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkRoyaltyAmtRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the royalty amount satisfies the royalty minimum amount requirements.
    /// </summary>
    /// <param name="_royaltyAmt">
    /// The royalty amount.
    /// </param>
    /// <param name="_maxRoyaltyLineBreak">
    /// A Boolean value that defines whether to check the rebate requirements for the maximum royalty or not.
    /// </param>
    /// <returns>
    /// true if royalty amount satisfies the royalty minimum amount requirements; otherwise, false.
    /// </returns>
    public boolean checkRoyaltyAmtRequirements(
        AmountCur   _royaltyAmt,
        boolean     _maxRoyaltyLineBreak = false)
    {
        real        royaltyAmt = abs(_royaltyAmt);
        boolean     ret;

        if (this.FromValue          <= royaltyAmt
            && (this.toValue()      >  royaltyAmt
            || (_maxRoyaltyLineBreak
                && this.toValue()   == royaltyAmt)))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRoyaltyQuantityRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the royalty quantity satisfies the royalty minimum quantity requirements.
    /// </summary>
    /// <param name="_royaltyQty">
    /// The royalty quantity.
    /// </param>
    /// <param name="_salesUnit">
    /// The sales unit on the transaction.
    /// </param>
    /// <param name="_inventDimId">
    /// The dimension ID for conversions.
    /// </param>
    /// <param name="_itemId">
    /// The <c>ItemId</c> for which to check requirements.
    /// </param>
    /// <param name="_maxRoyaltyLineBreak">
    /// A Boolean value that defines whether to check the rebate requirements for the maximum royalty or not.
    /// </param>
    /// <returns>
    /// true if the royalty quantity satisfies royalty minimum quantity requirements; otherwise, false.
    /// </returns>
    public boolean checkRoyaltyQuantityRequirements(
        SalesQty    _royaltyQty,
        SalesUnit   _salesUnit,
        InventDimId _inventDimId,
        ItemId      _itemId = '',
        boolean     _maxRoyaltyLineBreak = false)
    {
        real        royaltyQty  = abs(_royaltyQty);
        boolean     ret         = true;

        if (_salesUnit != this.UnitID)
        {
            EcoResProductUnitConverter ecoResProductConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(_itemId,
                                                                                                                         _inventDimId,
                                                                                                                         _salesUnit,
                                                                                                                         this.UnitID,
                                                                                                                         NoYes::Yes);
            if (!ecoResProductConverter.canValueBeConverted())
            {
                ret = false;
            }
            else
            {
                royaltyQty = ecoResProductConverter.convertValue(royaltyQty);
            }
        }

        if (ret
            && (this.FromValue      >  royaltyQty)
            ||  this.toValue()      <  royaltyQty
            ||  (!_maxRoyaltyLineBreak
            &&   this.toValue()     == royaltyQty))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromMCRRoyaltyTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>MCRRoyaltyTablePricing</c> table buffer based on the associated <c>MCRRoyaltyTable</c> passed parameter.
    /// </summary>
    /// <param name="_mcrRoyaltyTable">
    /// The associated <c>MCRRoyaltyTable</c> record for the royalty definition.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that defines whether to select the record for update or not.
    /// </param>
    /// <remarks>
    /// Initialize the <c>MCRRoyaltyTablePricing</c> table buffer based on the associated <c>MCRRoyaltyTable</c> record that is passed in as a parameter.
    /// </remarks>
    public void insertFromMCRRoyaltyTable(
        MCRRoyaltyTable _mcrRoyaltyTable,
        boolean         _forUpdate = false)
    {
        if (!_forUpdate)
        {
            this.RoyaltyCode    = _mcrRoyaltyTable.RoyaltyCode;
            this.UnitID         = _mcrRoyaltyTable.UnitID;
            this.PriceUnit      = 1;
            this.RoyaltyValue   = 1;
            if (this.validateWrite())
            {
                ttsbegin;
                this.insert();
                ttscommit;
            }
            else
            {
                throw error("@SYS104318");
            }
        }
        else
        {
            if (this.validateWrite())
            {
                ttsbegin;
                this.update();
                ttscommit;
            }
            else
            {
                throw error("@SYS104318");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the royalty to value.
    /// </summary>
    /// <returns>
    /// Returns maximum real value for the royalty To values.
    /// </returns>
    public MCRRoyaltyToValue toValue()
    {
        if (this.ToValue == 0)
        {
            return realMax();
        }
        else
        {
            return this.ToValue;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a royalty record based on the passed in <c>MCRRoyaltyCode</c>.
    /// </summary>
    /// <param name="_mcrRoyaltyCode">
    /// The <c>MCRRoyaltyCode</c> value for which to search the royalty table.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that defines whether to select the record for update or not.
    /// </param>
    /// <returns>
    /// The royalty record that was found based on the passed in parameters.
    /// </returns>>
    public static MCRRoyaltyTablePricing find(
        MCRRoyaltyCode    _mcrRoyaltyCode,
        boolean          _forUpdate = false)
    {
        MCRRoyaltyTablePricing  mcrRoyaltyTablePricing;

        if (_forUpdate)
        {
            mcrRoyaltyTablePricing.selectForUpdate (_forUpdate);
            mcrRoyaltyTablePricing.selectLocked(_forUpdate);
        }

        if (_mcrRoyaltyCode)
        {
            if (_forUpdate)
            {
                mcrRoyaltyTablePricing.selectForUpdate (_forUpdate);
                mcrRoyaltyTablePricing.selectLocked(_forUpdate);
            }

            select firstonly mcrRoyaltyTablePricing
                where mcrRoyaltyTablePricing.RoyaltyCode == _mcrRoyaltyCode;
        }
        else
        {
            throw error("@MCR27548");
        }

        return mcrRoyaltyTablePricing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a royalty record based on the passed in <c>RecId</c>.
    /// </summary>
    /// <param name="_recId">
    /// The <c>MCRRoyaltyCode</c> value for which to search the royalty table.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that defines whether to select the record for update or not.
    /// </param>
    /// <returns>
    /// The royalty record that was found based on the passed in parameters.
    /// </returns>>
    public static MCRRoyaltyTablePricing findByRecId(
        RecId       _recId,
        boolean     _forUpdate = false)
    {
        MCRRoyaltyTablePricing  mcrRoyaltyTablePricing;

        if (_recId)
        {
            if (_forUpdate)
            {
                mcrRoyaltyTablePricing.selectForUpdate (_forUpdate);
                mcrRoyaltyTablePricing.selectLocked(_forUpdate);
            }

            select firstonly mcrRoyaltyTablePricing
                where mcrRoyaltyTablePricing.RecId  == _recId;
        }
        return mcrRoyaltyTablePricing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPricingFromInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the <c>MCRRoyaltyTablePricing</c> based on a series of passed parameters.
    /// </summary>
    /// <param name="_mcrRoyaltyTable">
    /// A <c>MCRRoyaltyTable</c> record.
    /// </param>
    /// <param name="_itemId">
    /// The item id to use to find the royalty pricing.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventory dimension to use to find the royalty pricing.
    /// </param>
    /// <param name="_royaltyQty">
    /// A quantity to use to find matching royalty pricing.
    /// </param>
    /// <param name="_salesUnit">
    /// The sales unit of measure to use to find royalty pricing.
    /// </param>
    /// <param name="_currency">
    /// The currency to use to find royalty pricing.
    /// </param>
    /// <param name="_royaltyAmt">
    /// An amount from a sales or invoice line.
    /// </param>
    /// <param name="_mcrRoyaltyContractRecId">
    /// The RecId of <c>MCRRoyaltyContract</c>.
    /// </param>
    /// <returns>
    /// A <c>MCRRoyaltyTablePricing</c> record.
    /// </returns>
    public static MCRRoyaltyTablePricing findPricingFromInventDimId(
        MCRRoyaltyTable     _mcrRoyaltyTable,
        ItemId              _itemId,
        InventDimId         _inventDimId,
        SalesQty            _royaltyQty,
        SalesUnit           _salesUnit,
        CurrencyCode        _currency,
        AmountCur           _royaltyAmt,
        RecId               _mcrRoyaltyContractRecId = 0)
    {
        MCRRoyaltyTablePricing  mcrRoyaltyTablePricing;
        MCRRoyaltyItemCode      mcrRoyaltyItemCode;
        MCRRoyaltyContract      mcrRoyaltyContract;
        InventDim               inventDim;
        InventDim               inventDimTransaction;
        Qty                     royaltyQty = abs(_royaltyQty);
        AmountCur               royaltyAmt = abs(_royaltyAmt);

        if (_mcrRoyaltyContractRecId)
        {
            mcrRoyaltyContract = MCRRoyaltyContract::findByRecId(_mcrRoyaltyContractRecId);
        }
        else
        {
            mcrRoyaltyContract = MCRRoyaltyContract::findByRoyaltyContract(_mcrRoyaltyTable.RoyaltyContract);
        }

        // Account for the custom item code and ensure that we check the item list.
        inventDimTransaction    = InventDim::find(_inventDimId);
        if (mcrRoyaltyContract.RoyaltyUOMOption == MCRRoyaltyUOMOption::ExactMatch)
        {
            select firstonly mcrRoyaltyTablePricing order by RoyaltyValue desc
                where mcrRoyaltyTablePricing.RoyaltyCode            == _mcrRoyaltyTable.RoyaltyCode
                    && mcrRoyaltyTablePricing.UnitID                == _salesUnit
                    && ((mcrRoyaltyContract.RoyaltyLineBreakType    == MCRRoyaltyLineBreakType::Quantity
                        && mcrRoyaltyTablePricing.FromValue         <= royaltyQty
                        && (mcrRoyaltyTablePricing.ToValue          >  royaltyQty
                        || !mcrRoyaltyTablePricing.ToValue))
                    || (mcrRoyaltyContract.RoyaltyLineBreakType     == MCRRoyaltyLineBreakType::Amount
                        && mcrRoyaltyTablePricing.FromValue         <= royaltyAmt
                        && (mcrRoyaltyTablePricing.ToValue          >  royaltyAmt
                        || !mcrRoyaltyTablePricing.ToValue)))
                exists join mcrRoyaltyItemCode
                    where mcrRoyaltyItemCode.RoyaltyCode        == mcrRoyaltyTablePricing.RoyaltyCode
                        && mcrRoyaltyItemCode.ItemID            == _itemId
                #TAMRebateInventDimExistsJoin(mcrRoyaltyItemCode.InventDimId, inventDim, inventDimTransaction);
            if (mcrRoyaltyTablePricing)
            {
                return mcrRoyaltyTablePricing;
            }
        }
        else
        {
            while select mcrRoyaltyTablePricing order by RoyaltyValue desc
                where mcrRoyaltyTablePricing.RoyaltyCode        == _mcrRoyaltyTable.RoyaltyCode
                join InventDimID from mcrRoyaltyItemCode
                    where mcrRoyaltyItemCode.RoyaltyCode        == mcrRoyaltyTablePricing.RoyaltyCode
                        && mcrRoyaltyItemCode.ItemID            == _itemId
                #TAMRebateInventDimExistsJoin(mcrRoyaltyItemCode.InventDimId, inventDim, inventDimTransaction)
            {
                if ((mcrRoyaltyContract.RoyaltyLineBreakType    == MCRRoyaltyLineBreakType::Quantity
                        && mcrRoyaltyTablePricing.checkRoyaltyQuantityRequirements(_royaltyQty,
                                                                                   _salesUnit, 
                                                                                   mcrRoyaltyItemCode.InventDimID, 
                                                                                   _itemId))
                    || (mcrRoyaltyContract.RoyaltyLineBreakType == MCRRoyaltyLineBreakType::Amount
                        && mcrRoyaltyTablePricing.checkRoyaltyAmtRequirements(_royaltyAmt)))
                {
                    return mcrRoyaltyTablePricing;
                }
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPricingFromInventDimIdMax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the <c>MCRRoyaltyTablePricing</c> based on a series of passed parameters.
    /// </summary>
    /// <param name="_mcrRoyaltyTable">
    /// A <c>MCRRoyaltyTable</c> record.
    /// </param>
    /// <param name="_itemId">
    /// The item id to use to find the royalty pricing.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventory dimension to use to find the royalty pricing.
    /// </param>
    /// <param name="_royaltyQty">
    /// A quantity to use to find matching royalty pricing.
    /// </param>
    /// <param name="_salesUnit">
    /// The sales unit of measure to use to find royalty pricing.
    /// </param>
    /// <param name="_currency">
    /// The currency to use to find royalty pricing.
    /// </param>
    /// <param name="_royaltyAmt">
    /// An amount from a sales or invoice line.
    /// </param>
    /// <returns>
    /// A <c>MCRRoyaltyTablePricing</c> record.
    /// </returns>
    public static MCRRoyaltyTablePricing findPricingFromInventDimIdMax(
        MCRRoyaltyTable     _mcrRoyaltyTable,
        ItemId              _itemId,
        InventDimId         _inventDimId,
        SalesQty            _royaltyQty,
        SalesUnit           _salesUnit,
        CurrencyCode        _currency,
        AmountCur           _royaltyAmt)
    {
        MCRRoyaltyTablePricing  mcrRoyaltyTablePricing;
        MCRRoyaltyItemCode      mcrRoyaltyItemCode;
        InventDim               inventDim;
        InventDim               inventDimTransaction;
        MCRRoyaltyContract      mcrRoyaltyContract = MCRRoyaltyContract::find(
                                                        _mcrRoyaltyTable.RoyaltyContract,
                                                        _mcrRoyaltyTable.VendAccount);

        #localMacro.MaxValueCheck
        ((mcrRoyaltyContract.RoyaltyLineBreakType   == MCRRoyaltyLineBreakType::Quantity
            && mcrRoyaltyTablePricing.toValue()     <= abs(_royaltyQty))
        ||(mcrRoyaltyContract.RoyaltyLineBreakType  == MCRRoyaltyLineBreakType::Amount
            && mcrRoyaltyTablePricing.toValue()     <= abs(_royaltyAmt)))
        #endMacro

        // Account for the custom item code and ensure that we check the item list.
        inventDimTransaction    = InventDim::find(_inventDimId);
        if (mcrRoyaltyContract.RoyaltyUOMOption == MCRRoyaltyUOMOption::ExactMatch)
        {
            select firstonly mcrRoyaltyTablePricing order by FromValue desc
                where mcrRoyaltyTablePricing.RoyaltyCode        == _mcrRoyaltyTable.RoyaltyCode
                    && mcrRoyaltyTablePricing.UnitID            == _salesUnit
                exists join mcrRoyaltyItemCode
                    where mcrRoyaltyItemCode.RoyaltyCode        == mcrRoyaltyTablePricing.RoyaltyCode
                        && mcrRoyaltyItemCode.ItemID            == _itemId
                #TAMRebateInventDimExistsJoin(mcrRoyaltyItemCode.InventDimId, inventDim, inventDimTransaction);

            if (mcrRoyaltyTablePricing
                && #MaxValueCheck)
            {
                return mcrRoyaltyTablePricing;
            }
        }
        else
        {
            select firstonly mcrRoyaltyTablePricing order by FromValue desc
                where mcrRoyaltyTablePricing.RoyaltyCode        == _mcrRoyaltyTable.RoyaltyCode
                exists join mcrRoyaltyItemCode
                    where mcrRoyaltyItemCode.RoyaltyCode        == mcrRoyaltyTablePricing.RoyaltyCode
                        && mcrRoyaltyItemCode.ItemID            == _itemId
                #TAMRebateInventDimExistsJoin(mcrRoyaltyItemCode.InventDimId, inventDim, inventDimTransaction);

            if (mcrRoyaltyTablePricing
                && #MaxValueCheck)
            {
                return mcrRoyaltyTablePricing;
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPricingFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the <c>MCRRoyaltyTablePricing</c> based on a series of passed parameters.
    /// </summary>
    /// <param name="_mcrRoyaltyTable">
    /// A <c>MCRRoyaltyTable</c> record.
    /// </param>
    /// <param name="_salesLine">
    /// A <c>SalesLine</c> record.
    /// </param>
    /// <param name="_royaltyQty">
    /// A quantity from the sales line.
    /// </param>
    /// <param name="_salesUnit">
    /// A unit of measure from the sales line
    /// </param>
    /// <param name="_currency">
    /// A currency from the sales line.
    /// </param>
    /// <param name="_royaltyAmt">
    /// An amount from the sales line.
    /// </param>
    /// <param name="_mcrRoyaltyContractRecId">
    /// The RecId of <c>MCRRoyaltyContract</c>.
    /// </param>
    /// <returns>
    /// A <c>MCRRoyaltyTablePricing</c> record.
    /// </returns>
    /// <remarks>
    /// Selects the appropriate <c>MCRRoyaltyTablePricing</c> based on a series of passed parameters.
    /// </remarks>
    public static MCRRoyaltyTablePricing findPricingFromSalesLine(
        MCRRoyaltyTable     _mcrRoyaltyTable,
        SalesLine           _salesLine,
        SalesQty            _royaltyQty,
        SalesUnit           _salesUnit,
        CurrencyCode        _currency,
        AmountCur           _royaltyAmt,
        RecId               _mcrRoyaltyContractRecId = 0)
    {
        return MCRRoyaltyTablePricing::findPricingFromInventDimId(
            _mcrRoyaltyTable,
            _salesLine.ItemId,
            _salesLine.InventDimId,
            _royaltyQty,
            _salesUnit,
            _currency,
            _royaltyAmt,
            _mcrRoyaltyContractRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectMCRRoyaltyTablePricing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the <c>MCRRoyaltyTablePricing</c> based on a series of passed parameters.
    /// </summary>
    /// <param name="_mcrRoyaltyTable">
    /// A <c>MCRRoyaltyTable</c> record.
    /// </param>
    /// <param name="_custInvoiceTrans">
    /// A <c>CustInvoiceTrans</c> record.
    /// </param>
    /// <param name="_royaltyQty">
    /// A quantity from the sales line.
    /// </param>
    /// <param name="_salesUnit">
    /// A unit of measure from the sales line
    /// </param>
    /// <param name="_currency">
    /// A currency from the sales line.
    /// </param>
    /// <param name="_royaltyAmt">
    /// An amount from the sales line.
    /// </param>
    /// <param name="_mcrRoyaltyContractRecId">
    /// The RecId of <c>MCRRoyaltyContract</c>.
    /// </param>
    /// <returns>
    /// A <c>MCRRoyaltyTablePricing</c> record.
    /// </returns>
    /// <remarks>
    /// Selects the appropriate <c>MCRRoyaltyTablePricing</c> based on a series of passed parameters.
    /// </remarks>
    public static MCRRoyaltyTablePricing selectMCRRoyaltyTablePricing(
        MCRRoyaltyTable     _mcrRoyaltyTable,
        CustInvoiceTrans    _custInvoiceTrans,
        SalesQty            _royaltyQty,
        SalesUnit           _salesUnit,
        CurrencyCode        _currency,
        AmountCur           _royaltyAmt,
        RecId               _mcrRoyaltyContractRecId = 0)
    {
        return MCRRoyaltyTablePricing::findPricingFromInventDimId(
            _mcrRoyaltyTable,
            _custInvoiceTrans.ItemId,
            _custInvoiceTrans.InventDimId,
            _royaltyQty,
            _salesUnit,
            _currency,
            _royaltyAmt,
            _mcrRoyaltyContractRecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>MCRRoyalty</ConfigurationKey>
	<DeveloperDocumentation>@MCR36064</DeveloperDocumentation>
	<FormRef>MCRRoyaltyTable</FormRef>
	<Label>@SYS73780</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>RoyaltyCode</TitleField1>
	<TitleField2>FromValue</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RoyaltyLevel</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ModifiedTransactionId>Yes</ModifiedTransactionId>
	<Modules>ProcurementAndSourcing</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>PriceDiscGroup</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PriceDiscGroup</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RoyaltyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RoyaltyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RoyaltyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Grid</Name>
			<Label>@SYS26263</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RoyaltyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FromValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRRoyaltyFromValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RoyaltyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRRoyaltyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RoyaltyValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRRoyaltyValue</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ToValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRRoyaltyToValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RoyaltyLevel</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RoyaltyCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromValue</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>MCRRoyaltyTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>MCRRoyaltyTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RoyaltyCode</Name>
					<SourceEDT>MCRRoyaltyCode</SourceEDT>
					<Field>RoyaltyCode</Field>
					<RelatedField>RoyaltyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitID</Name>
					<SourceEDT>UnitIDBase</SourceEDT>
					<Field>UnitID</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>