<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollWorkerTaxRegionForSymmetry</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PayrollWorkerTaxRegionForSymmetry extends PayrollTaxEngineWorkerTaxRegion
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>PayrollWorkerTaxRegionForSymmetry</c> table and shows an infolog message if record does not exist.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(PayrollWorkerTaxRegionRecId _recId)
    {
        boolean ret = true;

        if (!PayrollWorkerTaxRegionForSymmetry::exist(_recId))
        {
            ret = checkFailed(strFmt(PayrollWorkerTaxRegionForSymmetry::txtNotExist(), tableStr(PayrollWorkerTaxRegionForSymmetry)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>PayrollWorkerTaxRegionForSymmetry</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean exist(PayrollWorkerTaxRegionRecId _recId)
    {
        return _recId && (select firstonly RecId from payrollWorkerTaxRegionForSymmetry
                    where payrollWorkerTaxRegionForSymmetry.RecId == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>PayrollWorkerTaxRegionForSymmetry</c> table based on a record ID value.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>PayrollWorkerTaxRegionForSymmetry</c> table.
    /// </returns>
    public static PayrollWorkerTaxRegionForSymmetry find(
    PayrollWorkerTaxRegionRecId         _recId,
    boolean             _forUpdate = false,
    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollWorkerTaxRegionForSymmetry payrollWorkerTaxRegionForSymmetry;

        payrollWorkerTaxRegionForSymmetry.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollWorkerTaxRegionForSymmetry.concurrencyModel(_concurrencyModel);
        }

        select firstonly payrollWorkerTaxRegionForSymmetry
             where payrollWorkerTaxRegionForSymmetry.RecId == _recId;

        return payrollWorkerTaxRegionForSymmetry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByWorkerTaxRegion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>PayrollWorkerTaxRegionForSymmetry</c> table based on the worker tax region.
    /// </summary>
    /// <param name="_workerTaxRegionRecId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>PayrollWorkerTaxRegionForSymmetry</c> table.
    /// </returns>
    public static PayrollWorkerTaxRegionForSymmetry findByWorkerTaxRegion(
    PayrollWorkerTaxRegionRecId         _workerTaxRegionRecId,
    boolean             _forUpdate = false,
    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollWorkerTaxRegionForSymmetry payrollWorkerTaxRegionForSymmetry;

        payrollWorkerTaxRegionForSymmetry.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollWorkerTaxRegionForSymmetry.concurrencyModel(_concurrencyModel);
        }

        select firstonly payrollWorkerTaxRegionForSymmetry
             where payrollWorkerTaxRegionForSymmetry.WorkerTaxRegion == _workerTaxRegionRecId;

        return payrollWorkerTaxRegionForSymmetry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS321009";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PayrollAdministration</ConfigurationKey>
	<DeveloperDocumentation>@Payroll:ThePayrollworkertaxregionforsymmetryTableIdentifiesSymmetryS</DeveloperDocumentation>
	<Label>@Payroll:WorkerTaxRegionSymmetry</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>SchoolDistrictId</TitleField1>
	<TitleField2>MunicipalityId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Extends>PayrollTaxEngineWorkerTaxRegion</Extends>
	<Modules>Payroll</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SchoolDistrictId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MunicipalityId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@Payroll:Overview1</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SchoolDistrictId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MunicipalityId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MunicipalityId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollMunicipalityId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SchoolDistrictId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollSchoolDistrictId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxEngineWorkerTaxRegion_FK</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>PayrollTaxEngineWorkerTaxRegion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>