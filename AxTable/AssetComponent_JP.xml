<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetComponent_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetComponent_JP extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>availableScrapQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets available quantity to scrap.
    /// </summary>
    /// <param name="_includeUnposted">
    /// Including unposted.
    /// </param>
    /// <returns>
    /// The vailable quantity to scrap.
    /// </returns>
    display InventQty availableScrapQty(boolean _includeUnposted = true)
    {
        Qty result;

        result = this.Qty - this.DisassembledQty;
        if (_includeUnposted)
        {
            result = result - this.DisassembledQtyUnposted;
        }

        return result;
    }
]]></Source>
			</Method>
			<Method>
				<Name>calcCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the cost amount.
    /// </summary>
    /// <param name="_qty">
    /// The quantity.
    /// </param>
    /// <param name="_costPrice">
    /// The cost price.
    /// </param>
    /// <param name="_priceUnit">
    /// The price unit.
    /// </param>
    /// <param name="_costAmount">
    /// The price unit.
    /// </param>
    /// <returns>
    /// The cost amount.
    /// </returns>
    public CostAmount calcCostAmount(
        InventQty     _qty          = this.Qty,
        ItemCostPrice _costPrice    = this.CostPrice,
        PriceUnit     _priceUnit    = this.PriceUnit,
        CostAmount    _costAmount   = this.CostAmount)
    {
        return PriceDisc::price2Amount(_costPrice,
                                       _priceUnit,
                                       0,
                                       _qty,
                                       _qty,
                                       0,
                                       0,
                                       "",
                                       _costAmount);
    }
]]></Source>
			</Method>
			<Method>
				<Name>calcEstimatedCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates cost price.
    /// </summary>
    /// <returns>
    /// A container with the price and amount.
    /// </returns>
    public container calcEstimatedCostPrice()
    {
        CostPrice       costPrice;
        CostAmount      costAmount;
        container       costValue;

        costValue = InventTrans::calcCostValue(
            InventTransOriginAssetComponent_JP::findInventTransOriginId(this.RecId));
        costAmount  = conPeek(costValue, 2) * -1;
        costPrice   = this.getCostPrice(this.Qty, costAmount);

        return [costPrice, costAmount];
    }
]]></Source>
			</Method>
			<Method>
				<Name>currentCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current available cost amount.
    /// </summary>
    /// <returns>
    /// The available cost amount.
    /// </returns>
    display CostAmount currentCostAmount()
    {
        return this.calcCostAmount(this.availableScrapQty());
    }
]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        AssetComponent_JP   assetComponent;

        ttsbegin;

        super();

        InventUpd_DeleteMovement::newMovement(InventMovement::construct(this)).updateNow();

        if (this.ComponentRefRecId)
        {
            assetComponent = AssetComponent_JP::find(this.ComponentRefRecId, true);
            assetComponent.DisassembledQtyUnposted = 0;
            assetComponent.update(true);
        }

        ttscommit;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets cost price.
    /// </summary>
    /// <param name="_qty">
    /// The quantity.
    /// </param>
    /// <param name="_costAmount">
    /// The cost amount.
    /// </param>
    /// <returns>
    /// The cost price.
    /// </returns>
    public CostPrice getCostPrice(
        InventQty  _qty        = this.Qty,
        CostAmount _costAmount = this.CostAmount)
    {
        return PriceDisc::amount2Price(_costAmount,
                                       0,
                                       0,
                                       _qty,
                                       0,
                                       this.priceUnit(),
                                       "",
                                       0);
    }
]]></Source>
			</Method>
			<Method>
				<Name>getInitialCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates initial cost amount.
    /// </summary>
    /// <returns>
    /// The initial cost amount.
    /// </returns>
    public display CostAmount getInitialCostAmount()
    {
        return this.calcCostAmount(this.Qty, this.InitialCostPrice);
    }
]]></Source>
			</Method>
			<Method>
				<Name>initFromAssetComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes from asset component.
    /// </summary>
    /// <param name="_assetComponent">
    /// The asset component.
    /// </param>
    public void initFromAssetComponent(AssetComponent_JP _assetComponent)
    {
        this.AssetId            = _assetComponent.AssetId;
        this.ItemId             = _assetComponent.ItemId;
        this.InventDimId        = _assetComponent.InventDimId;
        this.DefaultDimension   = _assetComponent.DefaultDimension;
        this.InitialCostPrice   = _assetComponent.CostPrice;
        this.Assembling         = false;
        this.ComponentRefRecId  = _assetComponent.RecId;
    }
]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes from inventary item.
    /// </summary>
    /// <param name="_inventTable">
    /// The inventary item.
    /// </param>
    /// <param name="_joinedInventDim">
    /// The joined inventary dimension.
    /// </param>
    public void initFromInventTable(InventTable _inventTable, boolean _joinedInventDim = false)
    {
        InventDim           inventDim;

        this.ItemId           = _inventTable.ItemId;
        this.DefaultDimension = _inventTable.DefaultDimension;

        if (_joinedInventDim
            && this.joinChild().TableId == tableNum(InventDim))
        {
            inventDim = this.joinChild();
        }
        inventDim.initFromInventTable(_inventTable);

        this.InventDimId            = InventDim::findOrCreate(inventDim).InventDimId;
        this.Qty                    = _inventTable.inventItemInventSetup(this.InventDimId).standardQty();
    }
]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new assembling line.
    /// </summary>
    /// <param name="_dropEstimated">
    /// Whether to update the estimation.
    /// </param>
    public void insert(NoYes _dropEstimated = NoYes::No)
    {
        InventUpd_Estimated     estimated;

        try
        {
            ttsbegin;
            this.InventTransId = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();

            if (!_dropEstimated)
            {
                estimated = InventUpd_Estimated::newInventMovement(InventMovement::construct(this));
                estimated.updateNow();
            }

            super();

            if (estimated)
            {
                estimated.updateOwnerRelationship();

                estimated.updateReservation();
            }
            ttscommit;
        }
        catch (Exception::Error)
        {
            this.InventTransId = "";
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invent dimension.
    /// </summary>
    /// <param name="_forUpdate">
    /// Whether to update.
    /// </param>
    /// <returns>
    /// The invent dimension.
    /// </returns>
    public InventDim inventDim(boolean _forUpdate = false)
    {
        return InventDim::find(this.InventDimId, _forUpdate);
    }
]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inventory table.
    /// </summary>
    /// <returns>
    /// The inventory table.
    /// </returns>
    public InventTable inventTable()
    {
        return InventTable::find(this.ItemId);
    }
]]></Source>
			</Method>
			<Method>
				<Name>isDeleteable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the entry is deleteable.
    /// </summary>
    /// <returns>
    /// True if the entry is deleteable; otherwise, false.
    /// </returns>
    public boolean isDeleteable()
    {
        return this.TransDate == dateNull();
    }
]]></Source>
			</Method>
			<Method>
				<Name>isScrapable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the entry is deleteable.
    /// </summary>
    /// <returns>
    /// True if the entry is deleteable; otherwise, false.
    /// </returns>
    public boolean isScrapable()
    {
        return this.TransDate != dateNull()
            && this.DisassembledQtyUnposted == 0
            && this.availableScrapQty() > 0;
    }
]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item name.
    /// </summary>
    /// <returns>
    /// The item name.
    /// </returns>
    public display ItemName itemName()
    {
        return InventTable::find(this.ItemId).itemName();
    }
]]></Source>
			</Method>
			<Method>
				<Name>priceUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the price unit.
    /// </summary>
    /// <returns>
    /// The price unit
    /// </returns>
    private PriceUnit priceUnit()
    {
        return (this.PriceUnit ? this.PriceUnit : 1);
    }
]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the assembling line.
    /// </summary>
    /// <param name="_dropEstimated">
    /// Whether to update the estimation.
    /// </param>
    public void update(NoYes _dropEstimated = NoYes::No)
    {
        InventUpd_Estimated     estimated;
        boolean                 isQtyUpdated;

        ttsbegin;

        if (!_dropEstimated)
        {
            estimated = InventUpd_Estimated::newInventMovement(InventMovement::construct(this));
            estimated.updateNow();
        }

        if (this.ComponentRefRecId
            && this.Qty != this.orig().Qty)
        {
            isQtyUpdated = true;
        }

        super();

        if (estimated)
        {
            estimated.updateReservation();
        }

        if (isQtyUpdated)
        {
            AssetComponentAddToDisassemble_JP::addDisassemble(
                this.ComponentRefRecId,
                this.RecId,
                this.Qty,
                true);
        }

        ttscommit;
    }
]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean     ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(AssetComponent_JP, Qty):
                if (!this.Assembling
                    && this.ComponentRefRecId
                    && this.Qty > AssetComponent_JP::find(this.ComponentRefRecId).availableScrapQty(false))
                {
                    ret = checkFailed("@SYS4110674");
                }
                break;
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>calcCurrentDisasssmeblingAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates current disassembling amount.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <returns>
    /// The current disassembling amount.
    /// </returns>
    public static CostAmount calcCurrentDisasssmeblingAmount(AssetId _assetId)
    {
        AssetComponent_JP   assetComponent;
        CostAmount          result;

        if (AssetComponent_JP::isDisassemblingNeeded(_assetId))
        {
            select sum(MarketAmount) from assetComponent
                where   assetComponent.AssetId == _assetId
                    &&  assetComponent.Assembling == false
                    &&  !assetComponent.TransDate;
            result = assetComponent.MarketAmount;
        }

        return result;
    }
]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the assembling line.
    /// </summary>
    /// <param name="_recId">
    /// Whether to update.
    /// </param>
    /// <param name="_forUpdate">
    /// Whether to update.
    /// </param>
    /// <returns>
    /// The assembling line.
    /// </returns>
    public static AssetComponent_JP find(
        RecId        _recId,
        boolean      _forUpdate = false)
    {
        AssetComponent_JP   assetComponent;

        if (_recId)
        {
            assetComponent.selectForUpdate(_forUpdate);

            select firstonly assetComponent
                where assetComponent.RecId == _recId;
        }
        return assetComponent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstAvailableAssemblingEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds first available assembling entry.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <param name="_itemId">
    /// The item id.
    /// </param>
    /// <returns>
    /// The available assembling entry record id.
    /// </returns>
    public static RefRecId findFirstAvailableAssemblingEntry(
        AssetId _assetId,
        ItemId  _itemId)
    {
        AssetComponent_JP assetComponent;

        if (_assetId && _itemId)
        {
            while select assetComponent
                where   assetComponent.AssetId                  == _assetId
                    &&  assetComponent.ItemId                   == _itemId
                    &&  assetComponent.Assembling               == true
                    &&  assetComponent.TransDate
                    &&  assetComponent.DisassembledQtyUnposted  == 0
            {
                if (assetComponent.availableScrapQty() > 0)
                {
                    return assetComponent.RecId;
                }
            }
        }

        return 0;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getAssemblingAssetBookId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the asset book of assembling.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <returns>
    /// The asset book id of assembling.
    /// </returns>
    public static AssetBookId getAssemblingAssetBookId(AssetId _assetId)
    {
        return AssetBook::getPrimaryBookForAssetProject(_assetId).BookId;
    }
]]></Source>
			</Method>
			<Method>
				<Name>isAssemblingEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if assembling is enabled.
    /// </summary>
    /// <returns>
    /// True if assembling is enabled;otherwise, false.
    /// </returns>
    public static boolean isAssemblingEnabled()
    {
        #isoCOuntryRegionCodes
        return  SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP])
            &&  AssetParameters::find().IsAssemblingEnabled_JP;
    }
]]></Source>
			</Method>
			<Method>
				<Name>isAssemblingExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if assembling is existing.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <returns>
    /// True if assembling is existing;otherwise, false.
    /// </returns>
    public static boolean isAssemblingExist(AssetId _assetId)
    {
        AssetComponent_JP assetComponent;

        if (_assetId)
        {
            select firstOnly RecId from assetComponent
                where   assetComponent.AssetId == _assetId;
        }
        return assetComponent.RecId != 0;
    }
]]></Source>
			</Method>
			<Method>
				<Name>isAssemblingNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if assembling is needed.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <returns>
    /// True if assembling is needed;otherwise, false.
    /// </returns>
    public static boolean isAssemblingNeeded(AssetId _assetId)
    {
        AssetComponent_JP assetComponent;

        if (_assetId)
        {
            select firstOnly RecId from assetComponent
                where   assetComponent.AssetId == _assetId
                    &&  assetComponent.Assembling == true
                    &&  !assetComponent.TransDate;
        }
        return assetComponent.RecId != 0;
    }
]]></Source>
			</Method>
			<Method>
				<Name>isAssemblingReversalNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if assembling reversal is needed.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <returns>
    /// True if assembling reversal is needed;otherwise, false.
    /// </returns>
    public static boolean isAssemblingReversalNeeded(AssetId _assetId)
    {
        AssetComponent_JP assetComponent;

        if (_assetId)
        {
            select firstOnly RecId from assetComponent
                where   assetComponent.AssetId == _assetId
                    &&  assetComponent.Assembling == true
                    &&  !assetComponent.TransDate
                    &&  assetComponent.StornoRecId;
        }
        return assetComponent.RecId != 0;
    }
]]></Source>
			</Method>
			<Method>
				<Name>isDisassemblingNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if disassembling is needed.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <returns>
    /// True if disassembling is needed;otherwise, false.
    /// </returns>
    public static boolean isDisassemblingNeeded(AssetId _assetId)
    {
        AssetComponent_JP assetComponent;

        if (_assetId)
        {
            select firstOnly RecId from assetComponent
                where   assetComponent.AssetId == _assetId
                    &&  assetComponent.Assembling == false
                    &&  !assetComponent.TransDate;
        }
        return assetComponent.RecId != 0;
    }
]]></Source>
			</Method>
			<Method>
				<Name>isDisassemblingReversalNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if disassembling reversal is needed.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <returns>
    /// True if disassembling reversal is needed;otherwise, false.
    /// </returns>
    public static boolean isDisassemblingReversalNeeded(AssetId _assetId)
    {
        AssetComponent_JP assetComponent;

        if (_assetId)
        {
            select firstOnly RecId from assetComponent
                where   assetComponent.AssetId == _assetId
                    &&  !assetComponent.Assembling
                    &&  !assetComponent.TransDate
                    &&  assetComponent.StornoRecId;
        }
        return assetComponent.RecId != 0;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<CountryRegionCodes>JP</CountryRegionCodes>
	<DeveloperDocumentation>@SYS4110660</DeveloperDocumentation>
	<Label>@SYS4110638</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>AssetId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>FixedAssets</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Asset</Name>
			<Label>@SYS25653</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting</Name>
			<Label>@SYS12896</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InitialCostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarketAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Assembling</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@GLS116495</Label>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AssetId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AssetTrans</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ComponentRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLineAmount</ExtendedDataType>
			<Label>@SYS6928</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostPrice</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemCostPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DisassembledQty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DisassembledQtyUnposted</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InitialCostPrice</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemCostPrice</ExtendedDataType>
			<Label>@SYS4110647</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MarketAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@SYS4110652</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceUnit</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQualityOrderQty</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>StornoRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS128676</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ComponentRefIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ComponentRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AssetTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AssetTrans</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventTransIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AssetIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AssetId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Assembling</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetComponent_JP</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Assembling</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Disassembling</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ComponentRefRecId</Name>
					<Field>ComponentRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetTrans</Name>
					<Field>AssetTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RassetScrap</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventDim</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>RAssetScrap</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetScrap</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Reverse</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>AssetComponent_JP</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Origin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Reverse</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StornoRecId</Name>
					<Field>StornoRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>