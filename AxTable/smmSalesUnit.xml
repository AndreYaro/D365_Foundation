<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmSalesUnit</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class smmSalesUnit extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>changeManagerName</Name>
				<Source><![CDATA[
    private void changeManagerName()
    {
        ttsbegin;

        this.changeSalesUnitMembersManagerName();
        this.changeSalesTargetManagerName();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeSalesUnitMembersManagerName</Name>
				<Source><![CDATA[
    private void changeSalesUnitMembersManagerName()
    {
        smmSalesUnitMembers smmSalesUnitMembers;
        while select forupdate smmSalesUnitMembers index hint SalesUnitManRelation where smmSalesUnitMembers.SalesUnitId == this.SalesUnitId
        {
            if (smmSalesUnitMembers.SalesPersonWorker == HcmWorker::findByPersonnelNumber(this.SalesUnitManagerId).RecId)
            {
                smmSalesUnitMembers.SalesManagerWorker = 0;
            }
            else
            {
                smmSalesUnitMembers.SalesManagerWorker = HcmWorker::findByPersonnelNumber(this.SalesUnitManagerId).RecId;
            }

            if (smmSalesUnitMembers.validateWrite(true))
            {
                smmSalesUnitMembers.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeSalesTargetManagerName</Name>
				<Source><![CDATA[
    private void changeSalesTargetManagerName()
    {
        smmSalesTarget smmSalesTarget;
        while select forupdate smmSalesTarget where smmSalesTarget.SalesUnitId == this.SalesUnitId
        {
            smmSalesTarget.SalesManagerWorker = HcmWorker::findByPersonnelNumber(this.SalesUnitManagerId).RecId;
            if (smmSalesTarget.validateWrite(true))
            {
                smmSalesTarget.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        this.insertSalesUnitCurrentCompany();
        
        this.writeSalesUnitCrossCompany(tableMethodStr(smmSalesUnit, insert));               
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSalesUnitCurrentCompany</Name>
				<Source><![CDATA[
    private void insertSalesUnitCurrentCompany()
    {
        smmSalesUnitMembers salesUnitMembers;       
        salesUnitMembers.SalesUnitId         = this.SalesUnitId;
        salesUnitMembers.SalesPersonWorker   = 0;
        
        if (this.ParentId)
        {
            smmSalesUnitMembers parentUnitMember = smmSalesUnitMembers::findUnitAndMember(this.ParentId, 0);
            salesUnitMembers.ParentId   = parentUnitMember.MemberId;
            salesUnitMembers.SortField  = NoYes::Yes;
        }

        salesUnitMembers.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showSalesUnitManagerId</Name>
				<Source><![CDATA[
    display CrmWorkerRecId showSalesUnitManagerId()
    {
        return smmSalesUnitMembers::findCurrentSalesUnitManager(this.SalesUnitId).SalesPersonWorker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showSalesUnitManagerName</Name>
				<Source><![CDATA[
    display Name showSalesUnitManagerName()
    {
        return HcmWorker::find(smmSalesUnitMembers::findCurrentSalesUnitManager(this.SalesUnitId).SalesPersonWorker).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ttsbegin;

        super();

        this.updateSalesUnitMembersParentId();

        this.changeManagerName();

        this.writeSalesUnitCrossCompany(tableMethodStr(smmSalesUnit, update));

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesUnitMembersParentId</Name>
				<Source><![CDATA[
    private void updateSalesUnitMembersParentId()
    {
        smmSalesUnitMembers salesUnitMembers = smmSalesUnitMembers::findUnitAndMember(this.SalesUnitId, 0, true);
        smmSalesUnitMembers parentUnitMembers = smmSalesUnitMembers::findUnitAndMember(this.ParentId, 0);
        salesUnitMembers.ParentId = parentUnitMembers.MemberId;

        if (salesUnitMembers)
        {
            salesUnitMembers.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _p1)
    {
        boolean ret = super(_p1);

        if (_p1 == fieldnum(smmSalesUnit, ParentId))
        {
            if (this.ParentId == this.SalesUnitId)
            {
                // Parent unit must be other than organization unit
                ret = ret && checkFailed("@SYS80281");
            }

            if (this.ParentId && smmSalesUnit::find(this.ParentId).UnitType != this.UnitType)
            {
                // The organization unit %1 is not of the organization type %2.
                ret = ret && checkFailed(strfmt("@SYS80282", this.ParentId, this.UnitType));
            }

            if (!smmSalesUnit::validateMove(this.SalesUnitId, this.ParentId))
            {
                // A parent unit cannot be moved to a child unit
                ret = ret && checkFailed("@SYS80280");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static smmSalesUnit find(smmSalesUnitId _smmSalesUnitId, boolean _forupdate = false)
    {
        smmSalesUnit salesUnit = null;

        if (_smmSalesUnitId)
        {
            salesUnit.selectForUpdate(_forupdate);

            select firstonly salesUnit
                index hint SalesUnitIdx
                where salesUnit.SalesUnitId == _smmSalesUnitId;
        }

        return salesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateEmployeeFilterList</Name>
				<Source><![CDATA[
    public static str generateEmployeeFilterList(smmSalesUnitId _salesUnitId)
    {
        smmSalesUnitMembers salesUnitMembers;
        str                 emplFilter = '';

        // Generate a string of all the employees in the sales unit
        while select SalesUnitId, Identification from salesUnitMembers where salesUnitMembers.SalesUnitId == _salesUnitId && salesUnitMembers.Identification != _salesUnitId
        {
            // Do not add seperator in the beginning of the string
            if (emplFilter != '')
            {
                // Add seperator
                emplFilter += ',';
            }

            // Add employee id from sales unit
            emplFilter += salesUnitMembers.Identification;
        }

        return emplFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMove</Name>
				<Source><![CDATA[
    public static boolean validateMove(smmSalesUnitId _fromsalesUnitId, smmSalesUnitId _toSalesUnitId)
    {
        boolean         ret = true;
        smmSalesUnit    salesUnit;

        salesUnit = smmSalesUnit::find(_toSalesUnitId);

        if (!salesUnit)
        {
            ret = true;
        }
        else
        {
            if (salesUnit.ParentId == _fromsalesUnitId)
            {
                ret = false;
            }
            else
            {
                if (salesUnit.ParentId)
                {
                    ret = smmSalesUnit::validateMove(_fromsalesUnitId, salesUnit.ParentId);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeSalesUnitCrossCompany</Name>
				<Source><![CDATA[
    private void writeSalesUnitCrossCompany(str _methodName)
    {
        SysDataSharingPolicy policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(curExt(), tableId2name(this.TableId));
        if (policy.RecId && policy.IsEnabled)
        {
            Query       query = SysDataSharingCrossCompanyValidatorQueryBuilder::buildQuery(this.orig(), policy.RecId);
            QueryRun    queryRun = new QueryRun(query);
        
            while (queryRun.Next())
            {
                smmSalesUnit companySmmSalesUnit = queryRun.get(this.TableId);
                DataAreaId company = companySmmSalesUnit.DataAreaId;

                if (companySmmSalesUnit && company)
                {
                    changecompany(company)
                    {
                        smmSalesUnit smmSalesUnit = smmSalesUnit::find(companySmmSalesUnit.SalesUnitId);
                        if (smmSalesUnit.RecId)
                        {
                            buf2Buf(this, smmSalesUnit);                            
                            switch (_methodName)
                            {
                                case tableMethodStr(smmSalesUnit, insert):
                                    if (SmmSalesUnitInsertCrossCompanyNoErrorsFlight::instance().isEnabled())
                                    {
                                        if (!SysDataSharingPolicy::isSharingPolicyEnabledByCompanyAndTable(company, tableStr(smmSalesUnitMembers)))
                                        {
                                            smmSalesUnit.insertSalesUnitCurrentCompany();
                                        }
                                    }
                                    else
                                    {
                                        smmSalesUnit.insertSalesUnitCurrentCompany();
                                    }
                                    break;
                                case tableMethodStr(smmSalesUnit, update):
                                    if (!SysDataSharingPolicy::isSharingPolicyEnabledByCompanyAndTable(company, tableStr(smmSalesUnitMembers)))
                                    {
                                        smmSalesUnit.updateSalesUnitMembersParentId();
                                        smmSalesUnit.changeSalesUnitMembersManagerName();
                                    }
                                
                                    if (!SysDataSharingPolicy::isSharingPolicyEnabledByCompanyAndTable(company, tableStr(smmSalesTarget)))
                                    {
                                        smmSalesUnit.changeSalesTargetManagerName();
                                    }
                                    break;
                                default:
                                    return;
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SmmSM</ConfigurationKey>
	<DeveloperDocumentation>@SYS124778</DeveloperDocumentation>
	<Label>@SYS80473</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>SalesUnitId</TitleField1>
	<TitleField2>SalesUnitManagerId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>SalesUnitIdx</ClusteredIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>SalesUnitIdx</PrimaryIndex>
	<ReplacementKey>SalesUnitIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>smmResponsibilitiesEmplTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>smmResponsibilitiesEmplTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>smmResponsibilitiesTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>smmResponsibilitiesTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>smmSalesUnitMembers</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>smmSalesUnitMembers</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>showSalesUnitManagerId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesUnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS81325</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PersonInCharge</Name>
			<Label>@SYS4330</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesUnitManagerId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS80127</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TreeList</Name>
			<Label>@SYS81385</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesUnitId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmSalesUnitId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Active</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS15744</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmDescription</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParentId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmSalesUnitParentId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesUnitManagerId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmSalesUnitMemberID</ExtendedDataType>
			<Label>@SYS85551</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UnitType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>smmSalesUnitType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SalesUnitIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesUnitId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SalesUnitManagerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesUnitManagerId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmSalesUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmSalesUnit</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmSalesUnit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmSalesUnit</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParentId</Name>
					<SourceEDT>smmSalesUnitParentId</SourceEDT>
					<Field>ParentId</Field>
					<RelatedField>SalesUnitId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesUnitIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>