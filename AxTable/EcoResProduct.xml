<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProduct</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class EcoResProduct extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayProductName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a name of the product.
    /// </summary>
    /// <returns>
    ///    A name of the product, if defined; otherwise, the product number.
    /// </returns>
    public display EcoResProductName displayProductName()
    {
        return this.productName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>productImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related product image.
    /// </summary>
    /// <returns>Packed image reference.</returns>
    public display container productImage()
    {
        ImageReference imageData = EcoResProductImage::productImage(this);
        return imageData.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>productImageThumbnail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related product image thumbnail.
    /// </summary>
    /// <returns>Packed image reference.</returns>
    public display container productImageThumbnail()
    {
        ImageReference imageData = EcoResProductImage::productImage(this, EcoResProductImageSize::Thumbnail);
        return imageData.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompaniesWhereReleased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>Set</c> of all companies where the current porduct is available in.
    /// </summary>
    /// <returns>
    /// The <c>Set</c> of all companies where the current porduct is available in.
    /// </returns>
    public Set getCompaniesWhereReleased()
    {
        InventTable             inventTable;
        Set                     releasedCompaniesSet = new Set(Types::String);

        // build the set of all companies, where the product has been released
        while select crosscompany DataAreaId
            from  inventTable
            where inventTable.Product == this.RecId
        {
            releasedCompaniesSet.add(xDataArea::findNonVirtualCompany(inventTable.DataAreaId));
        }

        return releasedCompaniesSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfProductVariant</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the number of product variants for a product.
    /// </summary>
    /// <returns>
    /// The total number of product variants.
    /// </returns>
    public display int numberOfProductVariant()
    {
        EcoResDistinctProductVariant    distinctProductVariant;

        select count(RecId) from distinctProductVariant
                where distinctProductVariant.ProductMaster == this.RecId;

        return int642int(distinctProductVariant.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasRelatedProducts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the current product has any related products.
    /// </summary>
    /// <returns>
    /// True, if the current product has any related products, false - otherwise.
    /// </returns>
    public display boolean hasRelatedProducts()
    {
        return (select firstonly RecId from ecoResProductRelationTable
                    where ecoResProductRelationTable.Product1 == this.RecId).RecId > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDistinctProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the product is a distinct product.
    /// </summary>
    /// <returns>
    /// true if a distinct product; otherwise, false.
    /// </returns>
    boolean isDistinctProduct()
    {
        return this is EcoResDistinctProduct
            && !(this is EcoResDistinctProductVariant);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDistinctProductVariant</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the product is a distinct product variant.
    /// </summary>
    /// <returns>
    /// true if a distinct product variant; otherwise, false.
    /// </returns>
    boolean isDistinctProductVariant()
    {
        return this is EcoResDistinctProductVariant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductMaster</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the product is a product master.
    /// </summary>
    /// <returns>
    ///    true if a product master; otherwise, false.
    /// </returns>
    boolean isProductMaster()
    {
        return this is EcoResProductMaster;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReleased</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether a product has been released to a company.
    /// </summary>
    /// <returns>
    ///    true if a product has been released; otherwise, false.
    /// </returns>
    public boolean isReleased()
    {
        InventTable inventTable;

        select firstonly crosscompany RecId
            from inventTable
            where inventTable.Product == this.RecId;

        return inventTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSupportedForNonInventoriedItems</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a product is supported for non-inventoried items.
    /// </summary>
    /// <returns>
    ///    true if the product is supported for non-inventoried items; otherwise, false.
    /// </returns>
    public boolean isSupportedForNonInventoriedItems()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        FormDataObject  formDataObject;

        super(_fieldName, _arrayIndex);

        if (_fieldName == fieldStr(EcoResProduct,ProductType))
        {
            if (this.ProductType == EcoResProductType::Service)
            {
                this.PdsCWProduct = false;
            }
            if (FormDataUtil::isFormDataSource(this))
            {
                formDataObject = FormDataUtil::getFormDataSource(this).object(fieldNum(EcoResProduct,PdsCWProduct));
                formDataObject.allowEdit(this.ProductType != EcoResProductType::Service);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves a description of the product.
    /// </summary>
    /// <param name="_languageId">
    ///     The ID of a language for which a description is retrieved.
    /// </param>
    /// <returns>
    ///     A description of the product.
    /// </returns>
    public EcoResDescription productDescription(LanguageId _languageId = SystemParameters::getSystemLanguageId())
    {
        return EcoResProductTranslation::getDescriptionOrDefaultDescription(this.RecId, _languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>productName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a name of the product.
    /// </summary>
    /// <param name="_languageId">
    ///    The ID of a language for which a name is retrieved.
    /// </param>
    /// <returns>
    ///    A name of the product, if defined; otherwise, the product number.
    /// </returns>
    public EcoResProductName productName(LanguageId _languageId = SystemParameters::getSystemLanguageId())
    {
        if (prmIsDefault(_languageId) && 
            FeatureStateProvider::isFeatureEnabled(EcoResProductTranslationFallbackFeature::instance()) && 
            EcoResProductParameters::find().UseFallbackTranslation)
        {
            _languageId = EcoResProductParametersFallbackLanguage::getSelectedFallbackLanguage();
        }

        EcoResProductName ecoResProductName = EcoResProductTranslation::getNameOrDefaultName(this.RecId, _languageId);

        return ecoResProductName ? ecoResProductName : this.DisplayProductNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the number of the product.
    /// </summary>
    /// <returns>
    ///    A string that contains the number of the product.
    /// </returns>
    public EcoResProductNumber productNumber()
    {
        return EcoResProductIdentifier::findByProduct(this.RecId).ProductNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productSubtype</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the subtype of a product
    /// </summary>
    /// <returns>
    ///    An <c>EcoResProductSubtype</c> enumeration value that specifies the subtype of a product.
    /// </returns>
    /// <summary>
    ///     Retrieves the subtype of a product
    /// </summary>
    /// <returns>
    ///     An <c>EcoResProductSubtype</c> enum value that specifies the subtype of a product.
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    public display EcoResProductSubtype productSubtype()
    {
        switch (this.getInstanceRelationType())
        {
            case tableStr(EcoResDistinctProductVariant):
                return EcoResProductSubtype::ProductVariant;
            case tableStr(EcoResProductMaster):
                return EcoResProductSubtype::ProductMaster;
            case tableStr(EcoResDistinctProduct):
                return EcoResProductSubtype::Product;
            default:
                return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>releasedItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of the released product to the current legal entity.
    /// </summary>
    /// <returns>
    /// The name of the released product.
    /// </returns>
    display ItemId releasedItemId()
    {
        InventTable inventTable;

        select firstonly ItemId
            from    inventTable
            where   inventTable.Product == this.RecId;

        return inventTable.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSearchName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the value of the <c>SearchName</c> field based on the value of the <c>Name</c> field.
    /// </summary>
    /// <param name="_name">
    ///     A specified <c>EcoResProductName</c> value.
    /// </param>
    void setSearchName(EcoResProductName _name)
    {
        if (!this.SearchName)
        {
            this.SearchName = name2Alias(_name);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeOnUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Synchronizes the product on the update action.
    /// </summary>
    public void synchronizeOnUpdate()
    {
        EcoResProductSynchronizationService ecoResProductSynchronizationService;
        EcoResProductSynchronizationAgent   ecoResProductSynchronizationAgent;
        EcoResSynchronizationCommand        ecoResSynchronizationCommand;
        EcoResProduct                       ecoResProductOrigin = this.orig();

        ecoResProductSynchronizationAgent = EcoResProductSynchronizationAgent::constructNameSynchronizationAgent(
            this.RecId,
            this.SearchName,
            ecoResProductOrigin.SearchName);

        if (ecoResProductSynchronizationAgent.mustSynchronize())
        {
            ecoResSynchronizationCommand =  EcoResSynchronizationCommand::constructUpdateSynchronizationCommand();
            ecoResProductSynchronizationAgent.parmSynchronizationCommand(ecoResSynchronizationCommand);

            ecoResProductSynchronizationService = EcoResProductSynchronizationService::newFromProduct(this.RecId);
            ecoResProductSynchronizationService.attachSynchronizationAgent(ecoResProductSynchronizationAgent);
            ecoResProductSynchronizationService.synchronize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>title</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the product ID and product name of current product and combines it into a title.
    /// </summary>
    /// <returns>
    ///    The title of the current product.
    /// </returns>
    /// <remarks>
    ///    This is used as the title in the product details forms.
    /// </remarks>
    [SysClientCacheDataMethodAttribute]
    public display EcoResProductTitle title()
    {
        EcoResProductName   productName;

        if (FeatureStateProvider::isFeatureEnabled(EcoResProductTranslationFallbackFeature::instance()) && EcoResProductParameters::find().UseFallbackTranslation)
        {
            productName = EcoResProductTranslation::getNameOrDefaultName(this.RecId, EcoResProductParametersFallbackLanguage::getSelectedFallbackLanguage());
        }
        else
        {
            productName = EcoResProductTranslation::findByProductLanguage(this.RecId, SystemParameters::getSystemLanguageId()).Name;
        }

        if (this.DisplayProductNumber && productName)
        {
            return strFmt('%1 : %2',this.DisplayProductNumber, productName);
        }
        else
        {
            return this.DisplayProductNumber ? this.DisplayProductNumber : productName;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ttsbegin;

        this.synchronizeOnUpdate();

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean                         ret;

        ret = super();

        if (ret)
        {
            if (this.isReleased())
            {
                ret = checkFailed("@SYS191391");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(EcoResProduct, PdsCWProduct):
                ret = this.validateProductIsNotCWandWHSEnabled();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProductIsNotCWandWHSEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the product is not catch weight enabled if it has a storage dimension group assigned that is warehouse management enabled.
    /// </summary>
    /// <returns>
    /// true if the product is not catch weight and warehouse management enabled; otherwise, false.
    /// </returns>
    public boolean validateProductIsNotCWandWHSEnabled()
    {
        boolean                     ret = true;
        EcoResStorageDimensionGroup ecoResStorageDimensionGroup;

        if (!WHSCatchWeightConfigurationKeyManager::instance().isEnabled() 
            && this.PdsCWProduct == NoYes::Yes)
        {
            ecoResStorageDimensionGroup = EcoResStorageDimensionGroup::find(EcoResStorageDimensionGroupProduct::findByProduct(this.RecId).StorageDimensionGroup);
            if (ecoResStorageDimensionGroup.IsWarehouseWHSEnabled)
            {
                error(strFmt("@WAX5502", ecoResStorageDimensionGroup.Name));
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean result = super();
        EcoResTrackingDimensionGroup ecoResTrackingDimensionGroup;

        if (result)
        {
            if (   this.PdsCWProduct
                && this.ProductType == EcoResProductType::Service)
            {
                result = checkFailed("@SYS4000207");
            }

            if (   this.PdsCWProduct != this.orig().PdsCWProduct
                && this.isReleased())
            {
                result = checkFailed(strFmt("@SYS4000200","@PDS1465"));
            }

            if (this.PdsCWProduct == NoYes::Yes && result)
            {
                ecoResTrackingDimensionGroup = EcoResTrackingDimensionGroup::find(EcoResTrackingDimensionGroupProduct::findByProduct(this.RecId).TrackingDimensionGroup);
                result = ecoResTrackingDimensionGroup.isValidForCWProduct();
            }

            result = result && this.validateProductIsNotCWandWHSEnabled();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>EcoResProduct</c> table.
    /// </summary>
    /// <param name="_product">
    ///    The ID of the <c>EcoResProduct</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResProduct</c> table; otherwise, an empty record.
    /// </returns>
    static EcoResProduct find(RefRecId _product, boolean _forUpdate = false)
    {
        EcoResProduct ecoResProduct;

        ecoResProduct.selectForUpdate(_forUpdate);

        if (0 != _product)
        {
            select firstonly ecoResProduct
                where ecoResProduct.RecId == _product;
        }
        return ecoResProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDisplayProductNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>EcoResProduct</c> table.
    /// </summary>
    /// <param name="_productNumber">
    ///    The number of the product to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResProduct</c> table; otherwise, an empty record.
    /// </returns>
    static EcoResProduct findByDisplayProductNumber(EcoResProductDisplayProductNumber _productNumber, boolean _forUpdate = false)
    {
        EcoResProduct                   ecoResProduct;

        ecoResProduct.selectForUpdate(_forUpdate);
        if (_productNumber)
        {
            select firstonly ecoResProduct
                where ecoResProduct.DisplayProductNumber == _productNumber;
        }

        return ecoResProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProductNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>EcoResProduct</c> table.
    /// </summary>
    /// <param name="_productNumber">
    /// The number of the product to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>EcoResProduct</c> table; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    /// This method uses the <c>EcoResProductIdentifier</c> table to find a product with a given product
    /// number.
    /// </remarks>
    static EcoResProduct findByProductNumber(EcoResProductNumber _productNumber, boolean _forUpdate = false)
    {
        EcoResProductIdentifier         ecoResProductIdentifier;
        EcoResProduct                   ecoResProduct;

        ecoResProductIdentifier = EcoResProductIdentifier::findByProductNumber(_productNumber);

        if (ecoResProductIdentifier.Product)
        {
            ecoResProduct = EcoResProduct::find(ecoResProductIdentifier.Product, _forUpdate);
        }

        return ecoResProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryFilterOutProductVariants</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters a query to contain only product masters and distinct products.
    /// </summary>
    /// <param name="_query">
    /// The query to extend that contains the default <c>LanguageId</c> filter.
    /// </param>
    static void queryFilterOutProductVariants(Query _query)
    {
        QueryBuildDataSource    qbdsProduct;

        qbdsProduct = _query.dataSourceTable(tableNum(EcoResProduct));

        if (!qbdsProduct)
        {
            throw error(Error::wrongUseOfFunction(tableStaticMethodStr(EcoResProduct, queryFilterOutProductVariants)));
        }

        qbdsProduct.addRange(fieldNum(EcoResProduct, InstanceRelationType)).value(
            queryRangeConcat(queryValue(DictTable::getRelationTypeFromTableName(tableStr(EcoResProductMaster))), queryValue(DictTable::getRelationTypeFromTableName(tableStr(EcoResDistinctProduct)))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryFilterProductVariantUnitConversionEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters a query to contain only product masters with enabled unit of measure conversions.
    /// </summary>
    /// <param name="_query">
    /// The query to extend that contains the default <c>LanguageId</c> filter.
    /// </param>
    public static void queryFilterProductVariantUnitConversionEnabled(Query _query)
    {
        QueryBuildDataSource    qbdsProduct;

        qbdsProduct = _query.dataSourceTable(tableNum(EcoResProduct));

        if (!qbdsProduct)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        QueryBuildDataSource qbdsEcoResProductMaster = qbdsProduct.addDataSource(tableNum(EcoResProductMaster));
        qbdsEcoResProductMaster.relations(false);
        qbdsEcoResProductMaster.addLink(fieldNum(EcoResProduct,RecId), fieldNum(EcoResProductMaster, RecId));
        qbdsEcoResProductMaster.joinMode(JoinMode::ExistsJoin);

        qbdsEcoResProductMaster.addRange(fieldNum(EcoResProductMaster, IsProductVariantUnitConversionEnabled)).value(queryValue(NoYes::Yes));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductKit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the product is a product kit.
    /// </summary>
    /// <returns>
    ///    true if a product kit; otherwise, false.
    /// </returns>
    boolean isProductKit()
    {
        RecId product;
        EcoResDistinctProductVariant productVariant;

        if (this.isProductMaster())
        {
            product = this.RecId;
        }

        if (!product && this.isDistinctProductVariant())
        {
            productVariant = this as EcoResDistinctProductVariant;
            product = productVariant.ProductMaster;
        }

        return product && RetailKit::existByProductMaster(product);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSystemLanguageIdChange_Subscriber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if any product are missing a translation to a language.
    /// </summary>
    /// <param name = "_landId">The language id.</param>
    /// <param name = "_res">The result of the check, where true means that at least one product is missing translation.</param>
    [SubscribesTo(tablestr(SystemParameters), delegatestr(SystemParameters,validateSystemLanguageIdChangeDelegate))]
    static void validateSystemLanguageIdChange_Subscriber(InstalledLanguageId _landId, EventHandlerResult _res)
    {
        EcoResProductTranslation    ecoResProductTranslation;
        EcoResProduct               ecoResProduct;
        boolean                     missingTranslations = false;
        int                         linesCount = 10;
        SysInfoAction_MenuFunction  sysInfoAction;

        while select ecoResProduct
            notexists join ecoResProductTranslation
            where ecoResProductTranslation.Product      == ecoResProduct.RecId
               && ecoResProductTranslation.LanguageId   == _landId
        {
            if (!missingTranslations)
            {
                missingTranslations = true;
            }

            sysInfoAction = SysInfoAction_MenuFunction::newMenuItem(menuitemDisplayStr(EcoResProductTranslation), MenuItemType::Display);
            sysInfoAction.parmCallerBuffer(ecoResProduct);
            checkFailed(strfmt("@SCM:MissingProductTranslation", ecoResProduct.DisplayProductNumber, _landId), '', sysInfoAction);

            --linesCount;
            if (linesCount < 1)
            {
                break;
            }
        }

        _res.result(missingTranslations);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductMasterWithProductVariantConversionEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if this is a product master with unit conversion enabled for its variants.
    /// </summary>
    /// <returns>
    /// true if this is a product master with unit conversion enabled for its variants; false otherwise.
    /// </returns>
    public boolean isProductMasterWithProductVariantConversionEnabled()
    {
        boolean ret = false;

        if (this is EcoResProductMaster)
        {
            EcoResProductMaster ecoResProductMaster = this as EcoResProductMaster;
            ret = ecoResProductMaster.IsProductVariantUnitConversionEnabled;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS133913</DeveloperDocumentation>
	<FormRef>EcoResProductDetails</FormRef>
	<Label>@SYS133912</Label>
	<ListPageRef>EcoResProductListPage</ListPageRef>
	<TableGroup>Main</TableGroup>
	<TitleField1>DisplayProductNumber</TitleField1>
	<TitleField2>SearchName</TitleField2>
	<Abstract>Yes</Abstract>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<InstanceRelationType>InstanceRelationType</InstanceRelationType>
	<ModifiedBy>Yes</ModifiedBy>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>DisplayProductNumberIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CatUserReviewComputedProductRating</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CatUserReviewComputedProductRating</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CatUserReviewProduct</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CatUserReviewProduct</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EcoResProductIdentifier</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResProductIdentifier</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EcoResProductInstanceValue</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResProductInstanceValue</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EcoResProductTranslation</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResProductTranslation</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EcoResReleaseSessionProduct</Name>
			<Relation></Relation>
			<Table>EcoResReleaseSessionProduct</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EcoResStorageDimensionGroupProduct</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResStorageDimensionGroupProduct</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EcoResTrackingDimensionGroupProduct</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResTrackingDimensionGroupProduct</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EcoResProductCategory</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResProductCategory</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DisplayProductNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DisplayProductNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SearchName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DisplayProductNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CaseInformation</Name>
			<Label>@SYS314356</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DisplayProductNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayProductName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>productSubtype</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FurtherIdentification</Name>
			<Label>@SYS300198</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DisplayProductNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCWProduct</Name>
			<Label>@PDS72</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWProduct</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProductInformation</Name>
			<Label>@SYS133870</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SearchName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProductType</Name>
			<Label>@SYS133830</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DisplayProductNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductDisplayProductNumber</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InstanceRelationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RelationType</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsCWProduct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWProduct</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProductType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>EcoResProductType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SearchName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductSearchName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ServiceType</Name>
			<AllowEdit>No</AllowEdit>
			<FeatureClass>EcoResProductServiceTypeEnableFeature</FeatureClass>
			<EnumType>EcoResProductServiceType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes>
		<AxTableFullTextIndex>
			<Name>SearchNameFullTextIdx</Name>
			<ConfigurationKey>Retail</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SearchName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableFullTextIndex>
	</FullTextIndexes>
	<Indexes>
		<AxTableIndex>
			<Name>DisplayProductNumberIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>DisplayProductNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InstanceRelationTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InstanceRelationType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RecIdServiceTypeIdx</Name>
			<ConfigurationKey>Retail</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ServiceType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>