<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSProductionScrapHistory</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSProductionScrapHistory extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getQtyScrapped</Name>
				<Source><![CDATA[
	    /// <summary>
	/// Finds quantity of the scrapped items in the production order.
	/// </summary>
	/// <param name="_prodId">
	/// Id of the production order.
	/// </param>
	/// <param name="_itemId">
	/// Item id of the scrapped items.
	/// </param>
	/// <returns>
	/// The quantity of the scrapped items in the production order.
	/// </returns>
    Qty getQtyScrapped(ProdId   _prodId,
                       ItemId   _itemId)
    {
        WHSProductionScrapHistory      productionScrapHistory;

        select sum(QtyScrapped) from productionScrapHistory
            where productionScrapHistory.ProdId == _prodId  &&
                  productionScrapHistory.ItemId == _itemId;

        return productionScrapHistory.QtyScrapped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultProdJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the default production journal name to use for scrap.
    /// </summary>
    /// <returns>The default production journal name.</returns>
    [Replaceable]
    protected static ProdJournalName findDefaultProdJournalName()
    {
        ProdJournalName prodJournalName;

        select firstonly prodJournalName
            where prodJournalName.JournalNameId == ProdParametersDim::findDefault().bomJournalNameId;

        return prodJournalName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProdPickingListJournal</Name>
				<Source><![CDATA[
    /// <summary>
	/// Creates a production journal for the scrapped items.
	/// </summary>
	/// <param name="_prodId">
	/// Id of the production order.
	/// </param>
	/// <param name="_itemId">
	/// Id of the picked items.
	/// </param>
	/// <param name="_qty">
	/// Quantity of the picked items.
	/// </param>
	/// <param name="_unitId">
	/// UOM of the picked items.
	/// </param>
	/// <param name="_whsUserId">
	/// Current user id.
	/// </param>
    public static void createProdPickingListJournal(
        ProdId                      _prodId,
        ItemId                      _itemId,
        Qty                         _qty,
        UnitOfMeasureSymbol         _unitId,
        WHSUserId                   _whsUserId      = '',
        InventLocationId            _warehouse      = '',
        WMSLocationId               _locationId     = '',
        WHSLicensePlateId           _licensePlateId = '',
        InventBatchId               _inventBatchId  = '')
    {
        ttsbegin;

        // Get inventTransId
        ProdBOM prodBOM;

        select firstonly prodBOM
            where prodBOM.ProdId == _prodId &&
                  prodBOM.ItemId == _itemId;

        // check for the location
        InventDim inventDim = prodBOM.inventDim();

        if (!inventDim.wmsLocationId)
        {
            inventDim.wmsLocationId = _locationId ? _locationId : WHSProdTable::getWorkCenterLocationFromProdId(prodBOM.ProdId, prodBOM.OprNum, prodBOM.InventDimId);
        }

        if (!inventDim.InventLocationId)
        {
            inventDim.InventLocationId = _warehouse ? _warehouse : WrkCtrTable::find(ProdRoute::find(prodBOM.ProdId, prodBOM.OprNum, RouteOprPriority::Primary).displayWrkCtrId()).inputWMSLocation(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())).InventLocationId;
        }

        if (!inventDim.LicensePlateId)
        {
            inventDim.LicensePlateId = _licensePlateId;
        }

        if (_inventBatchId && _inventBatchId != inventDim.inventBatchId)
        {
            inventDim.inventBatchId = _inventBatchId;
        }

        inventDim = InventDim::findOrCreate(inventDim);

        // Convert the units
        UnitOfMeasureSymbol unitId = _unitId;
        UnitOfMeasureSymbol bomUnitId = InventTable::find(_itemId).bomUnitId;

        if (!unitId)
        {
            unitId = bomUnitId;
        }

        Qty newQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_itemId,
																					   inventDim.inventDimId,
																					   _qty,
																					   unitId,
																					   bomUnitId,
																					   NoYes::No,
																					   NoYes::No);
        Qty inventQty;
        PdsCWQty cwQty;

        if (PdsGlobal::pdsIsCWItem(_itemId))
        {
            cwQty = WHSCatchWeightHelper::convertInventQuantity(_itemId, unitId, _qty, inventDim.inventDimId);
            inventQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_itemId,
                                                                                            inventDim.inventDimId,
                                                                                            cwQty,
                                                                                            PdsCatchWeight::cwUnitId(_itemId),
                                                                                            InventTableModule::find(_itemId, ModuleInventPurchSales::Invent).UnitId,
                                                                                            NoYes::Yes);
        }
        else
        {
            inventQty = InventTableModule::unitConvert(_itemId,  
												       ModuleInventPurchSales::Invent, 
												       unitId,
												       _qty,
                                                       inventDim.inventDimId);
        }
        
        ProdJournalName prodJournalName = WHSProductionScrapHistory::findDefaultProdJournalName();

        ProdJournalTable prodJournalTable;
        prodJournalTable.initValue();
        prodJournalTable.JournalType        = ProdJournalType::Picklist;
        prodJournalTable.JournalNameId      = prodJournalName.JournalNameId;
        prodJournalTable.Description        = prodJournalName.Description;
        prodJournalTable.VoucherSeqRecId    = prodJournalName.VoucherSeqRecId;
        prodJournalTable.AcceptError        = NoYes::Yes;
        prodJournalTable.ProdId             = _prodId;
        prodJournalTable.JournalId          = NumberSeq::newGetNum(ProdParameters::numRefProdJournalId()).num();

        if (!prodJournalTable.validateWrite())
        {
            throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(ProdJournalTable)));
        }
        else
        {
            prodJournalTable.insert();
        }

        // assign the journalId to a variable
        JournalId journalId = prodJournalTable.JournalId;

        // create the journal lines
        NumberSequenceCode voucherSeries = NumberSequenceTable::find(prodJournalName.VoucherSeqRecId).NumberSequence;
        NumberSeq numberSeq = NumberSeq::newGetVoucherFromCode(voucherSeries, NumberSeqScopeFactory::createDefaultScope(), true);
        str nextNum = numberSeq.voucher();

        ProdJournalBOM prodJournalBOM;
        prodJournalBOM.initValue();
        prodJournalBOM.JournalId            = journalId;
        prodJournalBOM.ProdId               = _prodId;
        prodJournalBOM.ItemId               = _itemId;
        prodJournalBOM.bomUnitId            = bomUnitId;
        prodJournalBOM.Voucher              = nextNum;
        prodJournalBOM.bomConsump           = newQty;
        prodJournalBOM.bomProposal          = newQty;
        prodJournalBOM.InventConsump        = inventQty;
        prodJournalBOM.InventProposal       = inventQty;
        prodJournalBOM.PdsCWInventConsump   = cwQty;
        prodJournalBOM.PdsCWInventProposal  = cwQty;
        prodJournalBOM.InventTransId        = prodBOM.InventTransId;
        prodJournalBOM.setInventDimId(inventDim.InventDimId);
        prodJournalBOM.DefaultDimension     = prodBOM.DefaultDimension;
        prodJournalBOM.TransDate            = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (!prodJournalBOM.validateWrite())
        {
            throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(ProdJournalBOM)));
        }
        else
        {
            prodJournalBOM.insert();
        }

        // mark the voucher number as used
        numberSeq.used();

        // update the number of lines on the header journal entry
        select forupdate firstonly prodJournalTable
            where prodJournalTable.JournalId == journalId;

        prodJournalTable.NumOfLines = 1;
        prodJournalTable.update();

        //post the journal
        ProdJournalCheckPostBOM prodJournalCheckPostBOM = ProdJournalCheckPostBOM::newPostJournal(journalId, true);
        prodJournalCheckPostBOM.runOperation();

        // update custom table
        WHSProductionScrapHistory productionScrapHistory;
        productionScrapHistory.JournalId        = journalId;
        productionScrapHistory.ProdId           = _prodId;
        productionScrapHistory.ItemId           = _itemId;
        productionScrapHistory.QtyScrapped      = newQty;
        if (!productionScrapHistory.validateWrite())
        {
            throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSProductionScrapHistory)));
        }
        else
        {
            productionScrapHistory.insert();
        }

        if (strLen(_whsUserId) > 0)
        {
            WHSMobileDeviceActivityLogger::newStandard(_whsUserId, WHSWorkExecuteMode::ProductionScrap)
                .append(#WHSLabelFromEDT(ProdId), _prodId)
                .append(#WHSLabelFromEDT(ItemId), _itemId)
                .append(#WHSLabelFromEDT(Qty), num2str(_qty, 0, numOfDec(_qty), DecimalSeparator::Auto, ThousandSeparator::Auto))
                .append(#WHSLabelFromEDT(UnitOfMeasureSymbol), _unitId)
                .save();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
	/// Checks whether a specific <c>whsProductionScrapHistory</c> record exists.
	/// </summary>
	/// <param name="_journalId">
	/// Journal id of the record.
	/// </param>
	/// <param name="_prodId">
	/// Production order id of the record.
	/// </param>
	/// <param name="_itemId">
	/// Item id of the record.
	/// </param>
	/// <returns>
	/// True if the record exists.
	/// </returns>
    public static boolean exist(JournalId _journalId,
                                ProdId    _prodId,
                                ItemId    _itemId)
    {
        return (_journalId && _prodId && _itemId) &&
               (select firstonly whsProductionScrapHistory
                    where whsProductionScrapHistory.JournalId == _journalId &&
                          whsProductionScrapHistory.ProdId ==    _prodId    &&
                          whsProductionScrapHistory.ItemId ==    _itemId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
	/// Finds a specific <c>WHSProductionScrapHistory</c> record with given parameters.
	/// </summary>
	/// <param name="_journalId">
	/// Journal id of the record.
	/// </param>
	/// <param name="_prodId">
	/// Production order id of the record.
	/// </param>
	/// <param name="_itemId">
	/// Item id of the record.
	/// </param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    public static WHSProductionScrapHistory find(JournalId _journalId,
                                                 ProdId    _prodId,
                                                 ItemId    _itemId,
                                                 boolean   _forupdate = false)
    {
        WHSProductionScrapHistory    whsProductionScrapHistory;

        if (_journalId &&
            _prodId    &&
            _itemId)
        {
            whsProductionScrapHistory.selectForUpdate(_forupdate);

            select firstonly whsProductionScrapHistory
                where whsProductionScrapHistory.JournalId == _journalId &&
                      whsProductionScrapHistory.ProdId    ==    _prodId    &&
                      whsProductionScrapHistory.ItemId    ==    _itemId;
        }

        return whsProductionScrapHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4421</DeveloperDocumentation>
	<Label>@WAX2260</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>JournalId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ProdJournalItemIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>ProdJournalItemIdx</PrimaryIndex>
	<ReplacementKey>ProdJournalItemIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyScrapped</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyScrapped</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JournalId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProdId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyScrapped</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSQtyScrapped</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProdJournalItemIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<ConfigurationKey>Prod</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProdId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProdTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdId</Name>
					<SourceEDT>ProdId</SourceEDT>
					<Field>ProdId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>