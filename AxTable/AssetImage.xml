<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetImage</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetImage extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies whether a record with the specified field values exists.
    /// </summary>
    /// <param name = "_tableGroupAll">
    /// Fixed asset, fixed asset group or default value.
    /// </param>
    /// <param name = "_refRecId">
    /// The record id of the related table.
    /// </param>
    /// <returns>
    /// True, if a record exists; otherwise, false.
    /// </returns>
    public static boolean exist(TableGroupAll _tableGroupAll, RefRecId _refRecId)
    {
        AssetImage imageRecord;
        boolean result = false;

        select firstonly RecId from imageRecord
            where imageRecord.TableGroupAll == _tableGroupAll
               && imageRecord.RefRecId == _refRecId;
        
        return imageRecord.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects an exact record by the specified record id of the related record and the type.
    /// </summary>
    /// <param name = "_tableGroupAll">
    /// The type of the record.
    /// </param>
    /// <param name = "_refRecId">
    /// The record id of the related record.
    /// </param>
    /// <param name = "_forUpdate">
    /// True, if a record should be selected for update; otherwise, false.
    /// </param>
    /// <returns>
    /// A <c>AssetImage</c> record.
    /// </returns>
    public static AssetImage find(TableGroupAll _tableGroupAll, RefRecId _refRecId = 0, boolean _forUpdate = false)
    {
        AssetImage imageRecord;

        imageRecord.selectForUpdate(_forUpdate);

        select firstonly imageRecord 
            where imageRecord.TableGroupAll == _tableGroupAll
               && imageRecord.RefRecId == _refRecId;

        return imageRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an image record based on specified parameters.
    /// </summary>
    /// <param name = "_tableGroupAll">
    /// Fixed asset, fixed asset group or default value.
    /// </param>
    /// <param name = "_refRecId">
    /// The record id of the reference record.
    /// </param>
    /// <returns>
    /// A record that contains an image.
    /// </returns>
    public static AssetImage findFor(TableGroupAll _tableGroupAll, RefRecId _refRecId)
    {
        AssetImage imageRecord;

        switch (_tableGroupAll)
        {
            case TableGroupAll::Table:
                imageRecord = AssetImage::findForAsset(_refRecId);
                break;

            case TableGroupAll::GroupId:
                imageRecord = AssetImage::findForGroup(_refRecId);
                break;

            default:
                imageRecord = AssetImage::findDefault();
        }

        return imageRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findForAsset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an image record based on specified parameters.
    /// </summary>
    /// <param name = "_assetRecId">
    /// The record id of the <c>AssetTable</c> record.
    /// </param>
    /// <returns>
    /// A record that contains an image.
    /// </returns>
    public static AssetImage findForAsset(RefRecId _assetRecId)
    {
        AssetImage imageRecord = AssetImage::find(TableGroupAll::Table, _assetRecId);

        if (!imageRecord)
        {
            AssetGroup assetGroup = AssetGroup::find(AssetTable::findByRecId(_assetRecId).AssetGroup);

            imageRecord = AssetImage::findForGroup(assetGroup.RecId);
        }
        
        return imageRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findForGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an image record based on specified parameters.
    /// </summary>
    /// <param name = "_assetGroupRecId">
    /// The record id of the <c>AssetGroup</c> record.
    /// </param>
    /// <returns>
    /// A record that contains an image.
    /// </returns>
    public static AssetImage findForGroup(RefRecId _assetGroupRecId)
    {
        AssetImage imageRecord = AssetImage::find(TableGroupAll::GroupId, _assetGroupRecId);

        if (!imageRecord)
        {
            imageRecord = AssetImage::findDefault();
        }

        return imageRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the default image.
    /// </summary>
    /// <returns>
    /// The default image.
    /// </returns>
    public static AssetImage findDefault()
    {
        AssetImage imageRecord = AssetImage::find(TableGroupAll::All);

        return imageRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the dialog and lets user to pick an image for the reference record specified.
    /// </summary>
    /// <param name = "_tableGroupAll">
    /// Fixed asset, fixed asset group or default value.
    /// </param>
    /// <param name = "_refRecId">
    /// Reference table record id.
    /// </param>
    public static void changeImage(TableGroupAll _tableGroupAll, RefRecId _refRecId)
    {
        container newImageContainer = conNull();

        FileUploadTemporaryStorageResult fileUploadResult =
            File::GetFileFromUser(classStr(ImageFileUploadTemporaryStorageStrategy));

        if (fileUploadResult != null && fileUploadResult.getUploadStatus())
        {
            str imageFilePathName = fileUploadResult.getDownloadUrl();
            newImageContainer = ImageReference::GetPackedBinaryData(imageFilePathName);

            ttsbegin;
            AssetImage imageRecord = AssetImage::find(_tableGroupAll, _refRecId, true);

            if (!imageRecord)
            {
                imageRecord.TableGroupAll = _tableGroupAll;
                imageRecord.RefRecId =  _refRecId;
            }

            imageRecord.Image = newImageContainer;

            imageRecord.write();
            ttscommit;
        }   
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes an image for the reference record specified.
    /// </summary>
    /// <param name = "_tableGroupAll">
    /// Fixed asset, fixed asset group or default value.
    /// </param>
    /// <param name = "_refRecId">
    /// The reference record id.
    /// </param>
    public static void deleteImage(TableGroupAll _tableGroupAll, RefRecId _refRecId)
    {
        ttsbegin;
        AssetImage imageRecord = AssetImage::find(_tableGroupAll, _refRecId, true);
        if (imageRecord)
        {
            imageRecord.delete();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmptyImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets an empty image for the reference record specified.
    /// </summary>
    /// <param name = "_tableGroupAll">
    /// Fixed asset, fixed asset group or default value.
    /// </param>
    /// <param name = "_refRecId">
    /// The reference record id.
    /// </param>
    public static void setEmptyImage(TableGroupAll _tableGroupAll, RefRecId _refRecId)
    {
        ttsbegin;
        AssetImage imageRecord = AssetImage::find(_tableGroupAll, _refRecId, true);
        if (imageRecord)
        {
            imageRecord.Image = conNull();
            imageRecord.update();
        }
        else
        {
            imageRecord.TableGroupAll = _tableGroupAll;
            imageRecord.RefRecId = _refRecId;
            imageRecord.Image = conNull();
            imageRecord.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<CacheLookup>Found</CacheLookup>
	<Modules>FixedAssets</Modules>
	<PrimaryIndex>TypeRefRecIdIdx</PrimaryIndex>
	<ReplacementKey>TypeRefRecIdIdx</ReplacementKey>
	<TableContents>BaseDefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TableGroupAll</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>Image</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Bitmap</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TableGroupAll</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TypeRefRecIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TableGroupAll</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>AssetTable</Name>
			<RelatedTable>AssetTable</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TableGroupAll</Name>
					<Field>TableGroupAll</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AssetGroup</Name>
			<RelatedTable>AssetGroup</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TableGroupAll</Name>
					<Field>TableGroupAll</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>