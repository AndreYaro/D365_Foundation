<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendPromissoryNoteJour</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendPromissoryNoteJour extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountDrawn</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display Amount amountDrawn()
    {
        VendPromissoryNoteTrans vendPromissoryNoteTrans;
        LedgerJournalTrans ledgerJournalTrans;
        Amount amount;

        if (this.Status == CustVendNegInstStatus::None)
        {
            select AmountCurCredit
            from ledgerJournalTrans
            where ledgerJournalTrans.RecId == this.LedgerJournalTransRecId;

            amount = -ledgerJournalTrans.AmountCurCredit;
        }
        else
        {
            while select AmountCur from vendPromissoryNoteTrans
                where vendPromissoryNoteTrans.PromissoryNoteId == this.PromissoryNoteId
                    && vendPromissoryNoteTrans.Status == CustVendNegInstStatus::Drawn
            {
                amount += vendPromissoryNoteTrans.AmountCur;
            }
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMSTDrawn</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display AmountMST amountMSTDrawn()
    {
        VendPromissoryNoteTrans vendPromissoryNoteTrans;
        LedgerJournalTrans ledgerJournalTrans;
        AmountMST amountMST;

        if (this.Status == CustVendNegInstStatus::None)
        {
            select ledgerJournalTrans
                where ledgerJournalTrans.RecId == this.LedgerJournalTransRecId;

            amountMST = -ledgerJournalTrans.amount();
        }
        else
        {
            while select AmountCur, CurrencyCode from vendPromissoryNoteTrans
                where vendPromissoryNoteTrans.PromissoryNoteId == this.PromissoryNoteId
                    && vendPromissoryNoteTrans.Status == CustVendNegInstStatus::Drawn
            {
                amountMST += CurrencyExchangeHelper::amountCur2MST(vendPromissoryNoteTrans.AmountCur, vendPromissoryNoteTrans.CurrencyCode);
            }
        }

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMSTOpen</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display AmountMST amountMSTOpen()
    {
        VendPromissoryNoteTrans vendPromissoryNoteTrans;
        VendTrans vendTrans;
        AmountMST amountMST;

        while select RecId from vendPromissoryNoteTrans
            where vendPromissoryNoteTrans.PromissoryNoteId  == this.PromissoryNoteId
            join vendTrans
            where vendTrans.AccountNum == this.VendAccount
                 && vendTrans.Voucher == vendPromissoryNoteTrans.Voucher
                 && vendTrans.TransDate == vendPromissoryNoteTrans.TransDate
                 && vendTrans.PromissoryNoteID == vendPromissoryNoteTrans.PromissoryNoteId
                 && vendTrans.PromissoryNoteSeqNum == vendPromissoryNoteTrans.SeqNum
        {
            amountMST += vendTrans.remainAmountMST();
        }

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankRemittanceFileId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display BankRemittanceFileId bankRemittanceFileId()
    {
        VendTrans vendTrans;

        select firstonly BankRemittanceFileId from vendTrans
            order by PromissoryNoteSeqNum desc
            where vendTrans.PromissoryNoteID == this.PromissoryNoteId
                && vendTrans.BankRemittanceFileId;

        return vendTrans.BankRemittanceFileId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCanBeClosed</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkCanBeClosed()
    {
        boolean ret = true;

        if (this.hasOpenTransactions())
        {
            ret = checkFailed(strFmt("@SYS71621", this.PromissoryNoteId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeNote</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean closeNote(boolean _update = false)
    {
        boolean ok;

        if (this.checkCanBeClosed())
        {
            this.Open = NoYes::No;

            if (_update)
            {
                this.update();
            }

            ok = true;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOpenTransactions</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean hasOpenTransactions()
    {
        VendTrans vendTrans;
        VendPromissoryNoteTrans vendPromissoryNoteTrans;
        boolean ret = false;

        while select RecId from vendPromissoryNoteTrans
            where vendPromissoryNoteTrans.PromissoryNoteId == this.PromissoryNoteId
            join vendTrans
                where vendTrans.AccountNum == this.VendAccount
                    && vendTrans.Voucher == vendPromissoryNoteTrans.Voucher
                    && vendTrans.TransDate == vendPromissoryNoteTrans.TransDate
                    && vendTrans.PromissoryNoteID == vendPromissoryNoteTrans.PromissoryNoteId
                    && vendTrans.PromissoryNoteSeqNum == vendPromissoryNoteTrans.SeqNum
                    && vendTrans.PromissoryNoteStatus == vendPromissoryNoteTrans.Status
        {
            if (vendTrans.open())
            {
                ret = true;
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean checkExist(VendPromissoryNoteID _vendPromissoryNoteID )
    {
        boolean ret = true;

        if (!VendPromissoryNoteJour::exist(_vendPromissoryNoteID))
        {
            ret = checkFailed(strFmt(VendPromissoryNoteJour::txtNotExist(), _vendPromissoryNoteID));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewPromissoryNote</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public VendPromissoryNoteJour createNewPromissoryNote(
        VendAccount _vendAccount,
        CustVendNegInstStatus _status = CustVendNegInstStatus::None,
        DueDate _dueDate = dateNull())
    {
        VendPromissoryNoteJour vendPromissoryNoteJour;
        VendPromissoryNoteID vendPromissoryNoteID;
        NumberSeq numberSeq;

        ttsbegin;

        numberSeq = NumberSeq::newGetNum(VendParameters::numRefVendPromissoryNoteID());

        vendPromissoryNoteID = numberSeq.num();

        if (VendPromissoryNoteJour::exist(vendPromissoryNoteID))
        {
            numberSeq.abort();
            checkFailed("@SYS71945");
            checkFailed(strFmt("@SYS71947", vendPromissoryNoteID));
            throw error("@SYS23020");
        }

        vendPromissoryNoteJour.PromissoryNoteId = vendPromissoryNoteID;
        vendPromissoryNoteJour.VendAccount = _vendAccount;
        vendPromissoryNoteJour.Status = _status;
        vendPromissoryNoteJour.Open = NoYes::Yes;
        vendPromissoryNoteJour.DueDate = _dueDate;

        numberSeq.used();

        vendPromissoryNoteJour.insert();

        ttscommit;

        return vendPromissoryNoteJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(VendPromissoryNoteID _vendPromissoryNoteID )
    {
        boolean found;

        found = (
            select firstonly RecId from vendPromissoryNoteJour
                 where vendPromissoryNoteJour.PromissoryNoteId == _vendPromissoryNoteID).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static VendPromissoryNoteJour find(
        VendPromissoryNoteID _vendPromissoryNoteID ,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendPromissoryNoteJour vendPromissoryNoteJour;

        vendPromissoryNoteJour.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vendPromissoryNoteJour.concurrencyModel(_concurrencyModel);
        }

        select firstonly vendPromissoryNoteJour
            where vendPromissoryNoteJour.PromissoryNoteId == _vendPromissoryNoteID;

        return vendPromissoryNoteJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerJournalTransRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static void setLedgerJournalTransRecId(
        VendPromissoryNoteID _promissoryNoteId,
        LedgerJournalTransRefRecId _ledgerJournalTransRefRecId)
    {
        VendPromissoryNoteJour vendPNJour;

        if (_promissoryNoteId)
        {
            ttsbegin;

            vendPNJour = VendPromissoryNoteJour::find(_promissoryNoteId, true);

            if (vendPNJour)
            {
                vendPNJour.LedgerJournalTransRecId = _ledgerJournalTransRefRecId;
                vendPNJour.update();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TxtNotExist txtNotExist()
    {
        return "@SYS71515";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAccountNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static void updateAccountNum(
        VendPromissoryNoteID _promissoryNoteId,
        CustVendAC _accountNum)
    {
        VendPromissoryNoteJour vendPNJour;
        VendPromissoryNoteTrans vendPNTrans;
        CustVendNegInstSeqNum seqNum;

        if (_promissoryNoteId)
        {
            ttsbegin;

            vendPNJour = VendPromissoryNoteJour::find(_promissoryNoteId, true);

            if (vendPNJour)
            {
                vendPNJour.VendAccount = _accountNum;
                vendPNJour.update();

                seqNum = VendPromissoryNoteTrans::maxSeqNum(_promissoryNoteId);

                while select forupdate vendPNTrans
                    where vendPNTrans.PromissoryNoteId == vendPNJour.PromissoryNoteId
                        && vendPNTrans.Status == vendPNJour.Status
                        && vendPNTrans.SeqNum == seqNum
                {
                    vendPNTrans.VendAccount = _accountNum;
                    vendPNTrans.update();
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDueDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static void updateDueDate(VendPromissoryNoteID _promissoryNoteId, DueDate _dueDate)
    {
        VendPromissoryNoteJour vendPNJour;
        VendPromissoryNoteTrans vendPNTrans;
        CustVendNegInstSeqNum seqNum;

        if (_promissoryNoteId)
        {
            ttsbegin;

            vendPNJour = VendPromissoryNoteJour::find(_promissoryNoteId, true);

            if (vendPNJour)
            {
                vendPNJour.DueDate= _dueDate;
                vendPNJour.update();

                seqNum = VendPromissoryNoteTrans::maxSeqNum(_promissoryNoteId);

                update_recordset vendPNTrans
                    setting DueDate= _dueDate
                    where vendPNTrans.PromissoryNoteId  == vendPNJour.PromissoryNoteId
                        && vendPNTrans.Status == vendPNJour.Status
                        && vendPNTrans.SeqNum == seqNum;
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>VendPromissoryNote</ConfigurationKey>
	<DeveloperDocumentation>@SYS127247</DeveloperDocumentation>
	<FormRef>VendPromissoryNoteJour</FormRef>
	<Label>@SYS71649</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>PromissoryNoteId</TitleField1>
	<TitleField2>VendAccount</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>VendAccountIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>Bank</Modules>
	<PrimaryIndex>PromissoryNoteIdx</PrimaryIndex>
	<ReplacementKey>PromissoryNoteIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>VendPaymSched</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>VendPaymSched</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PromissoryNoteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PromissoryNoteId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AccountsPayable</Name>
			<Label>@SYS25194</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Open</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DateGroup</Name>
			<Label>@SYS7402</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApprovalDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemittanceDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PromissoryNoteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PromissoryNoteSeqNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PromissoryNoteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Open</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>References</Name>
			<Label>@SYS14018</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalTransRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS25587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ApprovalDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS82782</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DocumentDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS2587</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocumentNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankPromissoryNoteNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DueDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DueDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerJournalTransRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LedgerJournalTransRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Open</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS16011</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PromissoryNoteId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPromissoryNoteID</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PromissoryNoteSeqNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendNegInstSeqNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RemittanceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS82781</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPromissoryNoteStatus</ExtendedDataType>
			<EnumType>CustVendNegInstStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PromissoryNoteIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PromissoryNoteId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VendAccountIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VendAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PromissoryNoteId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CustVendNegInstJour</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Open</MapField>
					<MapFieldTo>Open</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentDate</MapField>
					<MapFieldTo>DocumentDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustVendAC</MapField>
					<MapFieldTo>VendAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NegInstId</MapField>
					<MapFieldTo>PromissoryNoteId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Status</MapField>
					<MapFieldTo>Status</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RemittanceDate</MapField>
					<MapFieldTo>RemittanceDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentNum</MapField>
					<MapFieldTo>DocumentNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ApprovalDate</MapField>
					<MapFieldTo>ApprovalDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DueDate</MapField>
					<MapFieldTo>DueDate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>BankPromissoryNoteTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BankPromissoryNoteTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankPromissoryNoteTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DocumentNum</Name>
					<SourceEDT>BankPromissoryNoteNum</SourceEDT>
					<Field>DocumentNum</Field>
					<RelatedField>PromissoryNoteNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123453</EntityRelationshipRole>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerJournalTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendPromissoryNoteJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>AccountType_Extern</Name>
					<RelatedField>AccountType</RelatedField>
					<ValueStr>LedgerJournalACType::Vend</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTrans_LedgerJournalTransRec</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerJournalTrans_LedgerJournalTransRec</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerJournalTransRecId</Name>
					<SourceEDT>LedgerJournalTransRefRecId</SourceEDT>
					<Field>LedgerJournalTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>