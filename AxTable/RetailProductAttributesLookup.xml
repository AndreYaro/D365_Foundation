<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailProductAttributesLookup</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

public abstract class RetailProductAttributesLookup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fieldValueIfDifferent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns a set of values if the <c>FieldId</c> passed is different
    /// </summary>
    /// <param name="_fieldId">
    /// The <c>FieldId</c> for which the Values is to be set
    /// </param>
    /// <returns>
    /// Set of Values
    /// </returns>
    public container fieldValueIfDifferent(FieldId _fieldId)
    {
        return [false, ''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the method when a field is modified.
    /// </summary>
    /// <param name="_fieldId">
    /// The field Id which is modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        this.IsSynchronized = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the attribute values for a field with specified fieldID.
    /// </summary>
    /// <remarks>
    /// The <c>update</c> method uses <c>updateField</c> and <c>updateAttributeValueFromField</c> methods for updating the field attributes.
    /// </remarks>
    public void update()
    {
        DictTable dictTable;
        int i;

        if (!this.IsSynchronized)
        {
            dictTable = new DictTable(int642int(this.InstanceRelationType));
            for (i=0; i<dictTable.fieldCnt(); i++)
            {
                this.updateField(dictTable.fieldCnt2Id(i));
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateField</Name>
				<Source><![CDATA[
    private void updateField(FieldId _fieldId)
    {
        RefRecId categoryAttributeRecId;
        RefRecId attributeRecId;
        EcoResAttributeValue attributeValue;
        boolean isDifferent;
        anytype FieldValue;
        [isDifferent, FieldValue] = this.fieldValueIfDifferent(_fieldId);

        if (isDifferent)
        {
            categoryAttributeRecId =
                RetailProductAttributesLookup::field2CategoryAttribute(
                    int642int(this.InstanceRelationType), _fieldId, this.EcoResInstanceValue);

            attributeRecId =
                EcoResCategoryAttribute::find(categoryAttributeRecId).Attribute;

            attributeValue =
                EcoResAttributeValue::findOrCreateDefault(this.EcoResInstanceValue, attributeRecId);

            RetailProductAttributesLookup::updateAttributeValueFromField(
                attributeValue.RecId,
                int642int(this.InstanceRelationType),
                _fieldId,
                FieldValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>attributeName2field</Name>
				<Source><![CDATA[
    private static FieldId attributeName2field(TableId _tableId, Name _name)
    {
        TableName tableName = tableId2name(_tableId);
        FieldName fieldName;
        FieldId     fieldId;

        if (strStartsWith(_name, tableName))
        {
            fieldName = subStr(_name, 0, strLen(_name)-strLen(tableName));
            fieldId = fieldName2id(_tableId, fieldName);
        }

        return fieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>attributeValue2FieldValue</Name>
				<Source><![CDATA[
    private static anytype attributeValue2FieldValue(RefRecId _attributeValue)
    {
        EcoResAttributeValue attributeValue =
            EcoResAttributeValue::find(_attributeValue);

        EcoResValue ecoResValue =
            EcoResValue::find(attributeValue.Value);

        EcoResAttributeType attributeType =
            EcoResAttributeType::findByAttribute(attributeValue.Attribute);

        if (ecoResValue is EcoResBooleanValue)
        {
            return any2enum(ecoResValue.getValue());
        }
        else if (ecoResValue is EcoResTextValue)
        {
            if (attributeType.IsEnumeration)
            {
                return EcoResEnumerationAttributeTypeValue::attributeTypeAndValue2EnumValue(
                    attributeType.RecId,
                    ecoResValue);
            }
            else
            {
                return any2str(ecoResValue.getValue());
            }
        }
        else if (ecoResValue is EcoResReferenceValue)
        {
            return ecoResValue.getValue();
        }
        else if (ecoResValue is EcoResFloatValue)
        {
            return ecoResValue.getValue();
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>field2Attribute</Name>
				<Source><![CDATA[
    private static RefRecId field2Attribute(TableId _tableId, FieldId _fieldId)
    {
        DictField dictField = new DictField(_tableId, _fieldId);
        RecId attributeTypeRecId;
        RecId attributeRecId;
        Name name =
            RetailProductAttributesLookup::field2AttributeName(_tableId, _fieldId);

        // create boolean attribute type for NoYes field
        if (dictField.enumId() == enumNum(NoYes))
        {
            attributeTypeRecId = EcoResAttributeType::findOrCreateAttributeType(
                name,
                AttributeDataType::TrueFalse,
                NoYes::No, NoYes::Yes);
        }
        // create string enum attribute type for all other enum fields
        else if (dictField.enumId() != 0)
        {
            attributeTypeRecId = EcoResAttributeType::findOrCreateAttributeType(
                name,
                AttributeDataType::Text,
                NoYes::Yes, NoYes::Yes);

            EcoResEnumerationAttributeTypeValue::createAttributeValuesFromEnum(dictField.enumId(), attributeTypeRecId);
        }
        // create reference attribute type for first relation if field has one
        else if (RetailProductAttributesLookup::hasRelation(_tableId, _fieldId))
        {
            attributeTypeRecId = EcoResAttributeType::findOrCreateAttributeType(
                name,
                AttributeDataType::Reference,
                NoYes::No, NoYes::Yes);
        }
        // create decimal attribute type
        else if (dictField.baseType() == Types::Real)
        {
            attributeTypeRecId = EcoResAttributeType::findOrCreateAttributeType(
                name,
                AttributeDataType::Decimal,
                NoYes::No, NoYes::Yes);
        }

        // create attribute of with new attribute type
        if (attributeTypeRecId)
        {
            attributeRecId = EcoResAttribute::findOrCreateAttribute(
                name,
                attributeTypeRecId);
        }

        return attributeRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>field2AttributeName</Name>
				<Source><![CDATA[
    private static Name field2AttributeName(TableId _tableId, FieldId _fieldId)
    {
        return tableId2name(_tableId)+fieldId2name(_tableId, _fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>field2CategoryAttribute</Name>
				<Source><![CDATA[
    private static RefRecId field2CategoryAttribute(TableId _tableId, FieldId _fieldId, RefRecId _categoryInstance)
    {
        RefRecId attributeRecId =
            RetailProductAttributesLookup::field2Attribute(_tableId, _fieldId);

        RefRecId categoryAttributeRecId =
            EcoResCategoryAttribute::findOrCreateCategoryAttribute(
                    EcoResCategoryInstanceValue::find(_categoryInstance).Category,
                    attributeRecId);

        return categoryAttributeRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>RetailProductAttributesLookup</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecId</c> value of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailProductAttributesLookup</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailProductAttributesLookup find(RecId _recId, boolean _forUpdate = false)
    {
        RetailProductAttributesLookup attrLookup;
        select firstonly attrLookup where attrLookup.RecId == _recId;
        attrLookup.selectForUpdate(_forUpdate);
        return attrLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributeFromFieldIfExists</Name>
				<Source><![CDATA[
    private static RefRecId getAttributeFromFieldIfExists(TableId _tableId, FieldId _fieldId)
    {
        EcoResAttribute     ecoResAttribute;
        EcoResAttributeType ecoResAttributeType;
        Name    attributeName =
            RetailProductAttributesLookup::field2AttributeName(_tableId, _fieldId);

        select firstonly RecId
            from ecoResAttribute
            join RecId from ecoResAttributeType
            where ecoResAttribute.Name == attributeName
               && ecoResAttribute.AttributeType == ecoResAttributeType.RecId
               && ecoResAttributeType.Name == attributeName;

        return ecoResAttribute.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributeValueFromFieldIfExists</Name>
				<Source><![CDATA[
    private static RefRecId getAttributeValueFromFieldIfExists(RefRecId _instance, TableId _tableId, FieldId _fieldId)
    {
        RefRecId attributeRecId =
            RetailProductAttributesLookup::getAttributeFromFieldIfExists(_tableId, _fieldId);

        EcoResAttributeValue attributeValue;
        select firstonly RecId from attributeValue
            where attributeValue.Attribute == attributeRecId
               && attributeValue.InstanceValue == _instance;

        return attributeValue.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasRelation</Name>
				<Source><![CDATA[
    private static boolean hasRelation(TableId _tableId, FieldId _fieldId)
    {
        DictField dictField = new DictField(_tableId, _fieldId);
        DictRelation dictRelation = new DictRelation(_tableId);
        dictRelation.loadFieldRelation(_fieldId);

        return (dictRelation.externTable() != 0) || (dictField.relationObject() != null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes sure all the records in global and legal entity retail product attributes tables for a
    /// specified category are up to date.
    /// </summary>
    /// <param name="_categoryId">
    /// The <c>RecId</c> value of the category whose properties must be synchronized.
    /// </param>
    /// <remarks>
    /// This is potentially an expensive call, be careful when it is used.
    /// </remarks>
    public static void synchronizeCategory(RefRecId _categoryId)
    {
        using(var telemetry = RetailInstrumentationSegment::construct('Category hierarchy', funcName()))
        {
            RetailAttributesGlobalLookup::synchronizeCategory(_categoryId);
            RetailAttributesLegalEntityLookup::synchronizeCategory(_categoryId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeField</Name>
				<Source><![CDATA[
    private static boolean synchronizeField(RetailProductAttributesLookup _attributeLookup, FieldId _fieldId, RefRecId _categoryInstance)
    {
        boolean fieldWasSynced = false;
        RefRecId attributeValueRecId =
            RetailProductAttributesLookup::getAttributeValueFromFieldIfExists(_categoryInstance, int642int(_attributeLookup.InstanceRelationType), _fieldId);

        // if field has an attribute, type, and value for this instance
        if (attributeValueRecId)
        {
            // set the value
            _attributeLookup.(_fieldId) =
                RetailProductAttributesLookup::attributeValue2FieldValue(attributeValueRecId);
            fieldWasSynced = true;
        }
        return fieldWasSynced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes the attributes and attribute values from the fields that are queued in the specified
    /// attribute lookup.
    /// </summary>
    /// <param name="_attributeLookup">
    /// A <c>RetailProductAttributesLookup</c> table.
    /// </param>
    /// <param name="_categoryInstance">
    /// The <c>RecId</c> value.
    /// </param>
    /// <returns>
    /// true if the fields get synchronized; otherwise false.
    /// </returns>
    public static boolean synchronizeFields(RetailProductAttributesLookup _attributeLookup, RefRecId _categoryInstance)
    {
        boolean fieldsWereSynced = false;
        DictTable dictTable = new DictTable(int642int(_attributeLookup.InstanceRelationType));
        int i;
        for (i=0; i<dictTable.fieldCnt(); i++)
        {
            if (fieldnum(RetailProductAttributesLookup, TableId) != dictTable.fieldCnt2Id(i))
            {
                fieldsWereSynced = RetailProductAttributesLookup::synchronizeField(_attributeLookup, dictTable.fieldCnt2Id(i), _categoryInstance) || fieldsWereSynced;
            }
        }
        return fieldsWereSynced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAttributeValueFromField</Name>
				<Source><![CDATA[
    private static void updateAttributeValueFromField(
        RefRecId _attributeValue,
        TableId _tableId,
        FieldId _fieldId,
        anytype _FieldValue)
    {
        EcoResAttributeType attributeType;
        EcoResBooleanValue  ecoResBoolean;
        EcoResTextValue     ecoResText;
        EcoResReferenceValue ecoResReference;
        EcoResFloatValue    ecoResFloat;

        EcoResAttributeValue attributeValue =
            EcoResAttributeValue::find(_attributeValue);

        EcoResValue ecoResValue =
            EcoResValue::find(attributeValue.Value, true);

        ttsbegin;
        if (ecoResValue is EcoResBooleanValue)
        {
            ecoResBoolean = EcoResBooleanValue::find(ecoResValue.RecId, true);
            ecoResBoolean.BooleanValue = any2enum(_FieldValue);
            ecoResBoolean.update();
        }
        else if (ecoResValue is EcoResTextValue)
        {
            ecoResText = EcoResTextValue::find(ecoResValue.RecId, true);
            attributeType = EcoResAttributeType::findByAttribute(attributeValue.Attribute);

            if (attributeType.IsEnumeration)
            {
                ecoResText.TextValue =
                    EcoResTextValue::find(
                        EcoResEnumerationAttributeTypeValue::findByOrdinalNumber(
                            attributeType.RecId,
                            enum2int(_FieldValue)).Value).TextValue;
            }
            else
            {
                ecoResText.TextValue = any2str(_FieldValue);
            }
            ecoResText.update();
        }
        else if (ecoResValue is EcoResReferenceValue)
        {
            ecoResReference = EcoResReferenceValue::find(ecoResValue.RecId, true);
            ecoResReference.setReferenceValueFromForeignKey(
                    _tableId, _fieldId, _FieldValue);
            ecoResReference.update();
        }
        else if (ecoResValue is EcoResFloatValue)
        {
            ecoResFloat = EcoResFloatValue::find(ecoResValue.RecId, true);
            ecoResFloat.FloatValue = any2real(_FieldValue);
            ecoResFloat.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET5744</DeveloperDocumentation>
	<Label>@RET5739</Label>
	<TitleField1>Category</TitleField1>
	<TitleField2>LegalEntity</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<InstanceRelationType>InstanceRelationType</InstanceRelationType>
	<Modules>Merchandising</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EcoResInstanceValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InstanceRelationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EcoResInstanceValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InstanceRelationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Category</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EcoResInstanceValue</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InstanceRelationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RelationType</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>isSynchronized</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LegalEntity</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LegalEntityRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InstanceIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>EcoResInstanceValue</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CategoryIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Category</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CategoryInstance</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EcoResCategoryInstanceValue</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EcoResInstanceValue</Name>
					<Field>EcoResInstanceValue</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Category</Name>
					<Field>Category</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LegalEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LegalEntity</Name>
					<Field>LegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>