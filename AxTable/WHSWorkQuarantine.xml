<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkQuarantine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWorkQuarantine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>executeHandlingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes quarantine work.
    /// </summary>
    /// <param name="_handlingQty">
    /// Handling quantity of the items to be quarantined.
    /// </param>
    /// <param name="_skipAllowMixedStatusCheck">
    /// Boolean describing whether the mixed status check must be skipped.
    /// </param>
	public void executeHandlingQty(InventHandlingQty _handlingQty, boolean _skipAllowMixedStatusCheck)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), this.ItemId))
        {
            this.executeFromQuantity(_handlingQty, _skipAllowMixedStatusCheck, true);
        }
        else
        {
            this.execute(_handlingQty, _skipAllowMixedStatusCheck);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeFromQuantity</Name>
				<Source><![CDATA[
    private void executeFromQuantity(InventHandlingQty _handlingQty, boolean _skipAllowMixedStatusCheck, boolean _isCWItem)
    {
        InventUpd_Financial                     inventUpdFrom;
        InventUpd_Financial                     inventUpdTo;
        InventMovement                          movementFrom;
        InventMovement                          movementTo;
        InventDim                               inventDimFrom;
        InventDim                               inventDimTo;
        InventDimParm                           inventDimParm;
        LedgerVoucher                           ledgerVoucher;
        WHSLocationMixingConstraintCheckSkip    whsLocationMixingConstraintCheckSkip;
        InventHandlingQty						inventHandlingQty = _isCWItem ? this.CapturedWeight : _handlingQty;
        PdsInventQty							cwInventQty		  = _isCWItem ? _handlingQty : 0;

        ttsbegin;

        ledgerVoucher = WHSInvent::beginLedger(this.WorkId);

        // Remove From Location
        inventDimFrom = InventDim::find(this.InventDimIdFrom);
        inventDimParm.initFromInventDim(inventDimFrom);
        movementFrom = InventMovement::construct(this);
        inventUpdFrom = InventUpd_Financial::newFromQuarantineWorkMovement(
                                                            movementFrom,
                                                            ledgerVoucher,
                                                            0,
                                                            -inventHandlingQty,
                                                            -cwInventQty);
        inventUpdFrom.parmInventDim(inventDimFrom);
        inventUpdFrom.parmInventDimParm(inventDimParm);
        inventUpdFrom.updateNow();

        // Put To Location
        inventDimTo = InventDim::find(this.InventDimIdTo);
        inventDimParm.setAllInventDim();
        movementTo = InventMovement::construct(this, InventMovSubType::TransferReceipt);
        inventUpdTo = InventUpd_Financial::newFromQuarantineWorkMovement(
                                                            movementTo,
                                                            ledgerVoucher,
                                                            -inventUpdFrom.updCostAmountInvent(),
                                                            inventHandlingQty,
                                                            cwInventQty);
        inventUpdTo.parmInventDim(inventDimTo);
        inventUpdTo.parmInventDimParm(inventDimParm);
        // We rely on the class own check to detect illegal mixed status
        if (_skipAllowMixedStatusCheck)
        {
            whsLocationMixingConstraintCheckSkip = WHSLocationMixingConstraintCheckSkip::construct();
            whsLocationMixingConstraintCheckSkip.parmSkipAllowMixedStatusCheck(true);
            inventUpdTo.parmWhsLocationMixingConstraintCheckSkip(whsLocationMixingConstraintCheckSkip);
        }
        inventUpdTo.updateNow();

        if (_isCWItem)
        {
            // After quarantine transactions have been executed we should check the issue dimension set and make sure weight is within minimum threshold.
            PDSCatchWeightOnHandAdjustment::adjustOnhandWeightWithinThresholds(this.ItemId, inventDimFrom.inventDimId);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes quarantine work.
    /// </summary>
    /// <param name="_qty">
    /// Quantity of the items to be quarantined.
    /// </param>
    /// <param name="_skipAllowMixedStatusCheck">
    /// Boolean describing whether the mixed status check must be skipped; optional.
    /// </param>
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the executeHandlingQty method. Please file an extensibility request if other access is required.', false, 30\9\2019)]
    public void execute(InventQty _qty, boolean _skipAllowMixedStatusCheck = false)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), this.ItemId);

        this.executeFromQuantity(_qty, _skipAllowMixedStatusCheck, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record from a <c>WHSWorkLine</c> record.
    /// </summary>
    /// <param name="_workLine">
    /// The record to be used to initialize.
    /// </param>
    void initFromWorkLine(WHSWorkLine _workLine)
    {
        this.WorkId         = _workLine.WorkId;
        this.LineNum        = _workLine.LineNum;
        this.TransDateTime  = DateTimeUtil::utcNow();

        if (_workLine.ItemId)
        {
            // Not multi-sku
            this.ItemId             = _workLine.ItemId;
            this.Qty                = _workLine.InventQtyWork;
            this.InventQtyRemain    = _workLine.InventQtyWork;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void insert()
    {
        InventUpd_Estimated     estimatedFrom;
        InventUpd_Estimated     estimatedTo;

        try
        {
            ttsbegin;

            this.InventTransIdFrom = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
            this.InventTransIdTo = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();

            estimatedFrom = InventUpd_Estimated::newInventMovement(InventMovement::construct(this));
            estimatedFrom.updateNow();

            WHSReservation::staticRemoveReservation(this.ItemId, this.InventDimIdFrom, this.Qty, InventTransType::WHSQuarantine, this.WorkId, this.InventTransIdFrom, true);

            if (WHSReservationHierarchyElementPolicyProvider::singleton().isFlexibleReservationEnabledForItem(this.ItemId))
            {
                InventDim inventDimFrom = InventDim::find(this.InventDimIdFrom);
                boolean allowReserveReduct = WHSOrderCommittedReservationFacade::DoNotAllowReserveReduction;
                if (InventLocation::find(inventDimFrom.InventLocationId).AllowMarkingReservationRemoval >= WHSAllowMarkingReservationRemoval::Reservation)
                {
                    allowReserveReduct = WHSOrderCommittedReservationFacade::AllowReserveReduction;
                }
                WHSOrderCommittedReservationFacade::removeAllOrderCommittedReservationsOnInventDim(
                    this.ItemId, 
                    inventDimFrom,
                    allowReserveReduct, 
                    WHSOrderCommittedReservationFacade::DoNotUpdateTransferReservation);
            }

            // If the original dimension set contains a blocking status, do not try to reserve the quantity.
            if (!WHSInventStatus::isBlockingStatus(InventDim::find(this.InventDimIdFrom).InventStatusId))
            {
                estimatedFrom.reserveEstimatedQuantities();
            }

            estimatedTo = InventUpd_Estimated::newInventMovement(InventMovement::construct(this,InventMovSubType::TransferReceipt));
            estimatedTo.updateNow();

            super();

            estimatedFrom.updateOwnerRelationship();
            estimatedTo.updateOwnerRelationship();

            ttscommit;
        }
        catch (Exception::Error)
        {
            this.InventTransIdTo = '';
            this.InventTransIdFrom = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets dimensions for the before quarantine and after quarantine.
    /// </summary>
    /// <param name="_inventDim">
    /// Initial dimension to be modified.
    /// </param>
    /// <param name="_statusFrom">
    /// Initial status before quarantine.
    /// </param>
    /// <param name="_statusTo">
    /// Final status after quarantine.
    /// </param>
    /// <param name="_licensePlateId">
    /// License plate id before quarantine
    /// </param>
    void setDimIds(
        InventDim           _inventDim,
        WHSInventStatusId   _statusFrom,
        WHSInventStatusId   _statusTo,
        WHSLicensePlateId   _licensePlateId)
    {
        InventDim inventDim;

        inventDim = _inventDim;

        inventDim.InventStatusId = _statusFrom;
        inventDim.LicensePlateId = _licensePlateId;
        this.InventDimIdFrom = InventDim::findOrCreate(inventDim).InventDimId;

        inventDim.InventStatusId = _statusTo;
        this.InventDimIdTo = InventDim::findOrCreate(inventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a new work id from number references.
    /// </summary>
    void setWorkId()
    {
        this.WorkId = NumberSeq::newGetNum(WHSParameters::numRefWHSWorkId()).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>WHSQuarantineLineType</c> instance from the record.
    /// </summary>
    /// <returns>
    /// Created <c>WHSQuarantineLineType</c> instance
    /// </returns>
    public WHSQuarantineLineType type()
    {
        return WHSQuarantineLineType::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeLPStatusByWorkLine</Name>
				<Source><![CDATA[
    public static void changeLPStatusByWorkLine(WHSWorkLine _workLine, WHSInventStatusId _inventStatusId)
    {
        Qty                     qty;
        InventSum               inventSum;
        InventDim               inventDim;
        InventDimParm           inventDimParm;
        InventDim               tmpInventDim;
        LineNum                 lineNum;
        List                    selectedDimFields;
        WHSWorkTable            workTable;
        WHSWorkQuarantine       workQuarantine;
        WHSWorkInventTrans      workInventTrans;
        WHSWorkInventTrans      newWorkInventTrans;
        RecordInsertList        insertList = new RecordInsertList(tableNum(WHSWorkInventTrans));

        if (_workLine.RecId == 0)
        {
            throw error("@WAX1349");
        }

        ttsbegin;

        if (_workLine.WorkType == WHSWorkType::Pick)
        {
            lineNum = _workLine.LineNum;
        }
        else
        {
            lineNum = (select firstonly LineNum from whsWorkLine
                            where whsWorkLine.WorkId     == _workLine.WorkId  &&
                                  whsWorkLine.LineNum    > _workLine.LineNum  &&
                                  whsWorkLine.WorkType   == WHSWorkType::Pick).LineNum;
        }

        while select forupdate workInventTrans
            where workInventTrans.WorkId    == _workLine.WorkId  &&
                  workInventTrans.LineNum   == lineNum
        {
            if (PdsGlobal::pdsIsCWItem(workInventTrans.ItemId))
            {
                throw error("@WAX:Error_WHSMethodDoesNotSupportCW");
            }

            buf2Buf(workInventTrans, newWorkInventTrans);

            tmpInventDim = InventDim::find(newWorkInventTrans.InventDimIdFrom);
            tmpInventDim.InventStatusId = _inventStatusId;
            tmpInventDim = InventDim::findOrCreate(tmpInventDim);

            newWorkInventTrans.InventDimIdFrom = tmpInventDim.InventDimId;

            tmpInventDim = InventDim::find(newWorkInventTrans.InventDimIdTo);
            tmpInventDim.InventStatusId = _inventStatusId;
            tmpInventDim = InventDim::findOrCreate(tmpInventDim);

            newWorkInventTrans.InventDimIdTo = tmpInventDim.InventDimId;

            insertList.add(newWorkInventTrans);

            workInventTrans.delete();
        }

        workTable = WHSWorkTable::find(_workLine.WorkId);

        tmpInventDim.clear();
        tmpInventDim.InventSiteId       = workTable.InventSiteId;
        tmpInventDim.InventLocationId   = workTable.InventLocationId;
        tmpInventDim.wmsLocationId      = _workLine.wmsLocationId;
        tmpInventDim.LicensePlateId     = workTable.TargetLicensePlateId;
        tmpInventDim.InventStatusId     = _inventStatusId;

        inventDimParm.setAllProductDimensions();
        inventDimParm.InventSiteIdFlag      = NoYes::No;
        inventDimParm.InventLocationIdFlag  = NoYes::No;
        inventDimParm.wmsLocationIdFlag     = NoYes::No;
        inventDimParm.LicensePlateFlag      = NoYes::No;
        inventDimParm.InventStatusFlag      = NoYes::No;
        selectedDimFields = inventDimParm.selectedDimFields();

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            while select InventDimId,ItemId,PhysicalInvent, #InventDimGroupAllFields from inventSum
                where inventSum.InventSiteId        == workTable.InventSiteId               &&
                      inventSum.InventLocationId    == workTable.InventLocationId           &&
                      inventSum.wmsLocationId       == _workLine.wmsLocationId              &&
                      inventSum.LicensePlateId      == workTable.TargetLicensePlateId       &&
                      inventSum.PhysicalInvent       > 0
            {
                qty = WHSInventOnHand::getWorkPhysicalInvent(inventSum.ItemId, inventSum.InventDimId);

                if (qty > 0)
                {
                    inventDim.clear();
                    inventDim.initFromInventSum(inventSum);

                    tmpInventDim.initFromInventDim(inventDim, selectedDimFields);
                    tmpInventDim = InventDim::findOrCreate(tmpInventDim);

                    workQuarantine.WorkId           = _workLine.WorkId;
                    workQuarantine.LineNum          = _workLine.LineNum;
                    workQuarantine.TransDateTime    = DateTimeUtil::utcNow();
                    workQuarantine.ItemId           = inventSum.ItemId;
                    workQuarantine.Qty              = inventSum.PhysicalInvent;
                    workQuarantine.InventQtyRemain  = inventSum.PhysicalInvent;

                    workQuarantine.setDimIds(tmpInventDim, inventDim.InventStatusId, _inventStatusId, workTable.TargetLicensePlateId);
                    workQuarantine.insert();
                    WHSWorkQuarantineExecutor::newWorkQuarantine(workQuarantine, qty, false).execute();
                }
            }
        }
        else
        {
            while select InventDimId,ItemId,PhysicalInvent from inventSum
                join inventDim
                where inventSum.InventDimId         == inventDim.InventDimId                &&
                      inventDim.InventSiteId        == workTable.InventSiteId               &&
                      inventDim.InventLocationId    == workTable.InventLocationId           &&
                      inventDim.wmsLocationId       == _workLine.wmsLocationId              &&
                      inventDim.LicensePlateId      == workTable.TargetLicensePlateId       &&
                      inventSum.PhysicalInvent       > 0
            {
                qty = WHSInventOnHand::getWorkPhysicalInvent(inventSum.ItemId, inventSum.InventDimId);

                if (qty > 0)
                {
                    tmpInventDim.initFromInventDim(inventDim, selectedDimFields);
                    tmpInventDim = InventDim::findOrCreate(tmpInventDim);

                    workQuarantine.WorkId           = _workLine.WorkId;
                    workQuarantine.LineNum          = _workLine.LineNum;
                    workQuarantine.TransDateTime    = DateTimeUtil::utcNow();
                    workQuarantine.ItemId           = inventSum.ItemId;
                    workQuarantine.Qty              = inventSum.PhysicalInvent;
                    workQuarantine.InventQtyRemain  = inventSum.PhysicalInvent;

                    workQuarantine.setDimIds(tmpInventDim, inventDim.InventStatusId, _inventStatusId, workTable.TargetLicensePlateId);
                    workQuarantine.insert();
                    WHSWorkQuarantineExecutor::newWorkQuarantine(workQuarantine, qty, false).execute();
                }
            }
        }

        insertList.insertDatabase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a specific <c>WHSWorkQuarantine</c> record exists.
    /// </summary>
    /// <param name="_workQuarantineRecId">
    /// Id of the work quarantine record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(WHSWorkQuarantineRecId _workQuarantineRecId)
    {
        return WHSWorkQuarantine::find(_workQuarantineRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSWorkQuarantine</c> record with given parameters.
    /// </summary>
    /// <param name="_workQuarantineRecId">
    /// Id of the work quarantine record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSWorkQuarantine find(
        WHSWorkQuarantineRecId  _workQuarantineRecId,
        boolean                 _forupdate = false)
    {
        WHSWorkQuarantine    whsWorkQuarantine;

        if (_workQuarantineRecId)
        {
            whsWorkQuarantine.selectForUpdate(_forupdate);

            select firstonly whsWorkQuarantine
                where whsWorkQuarantine.RecId == _workQuarantineRecId;
        }

        return whsWorkQuarantine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
	/// <summary>
    /// Reserve if we changed weight but keep reservation on the CW we had
    /// to make sure the catch weight quantity on the reservation is accurate.
	/// </summary>
    [Hookable(false)]
    public void update()
    {
        ttsBegin;

        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            WHSTransWeight transWeightUpdate = this.orig().RemainingCapturedWeight - this.RemainingCapturedWeight;

            if (transWeightUpdate)
            {
                InventUpd_Estimated estimatedFrom = InventUpd_Estimated::newInventMovement(InventMovement::construct(this));
                estimatedFrom.updateNow();

                if (transWeightUpdate < 0)
                {
                    estimatedFrom.reserveEstimatedQuantities();
                }

                InventUpd_Estimated estimatedTo = InventUpd_Estimated::newInventMovement(InventMovement::construct(this,InventMovSubType::TransferReceipt));
                estimatedTo.updateNow();
            }
        }

        super();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveToNewWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves all <c>WHSWorkQuarantine</c> records associated with a work line to a new work line.
    /// </summary>
    /// <param name="_origWorkId">
    ///    The Work ID the <c>WHSWorkQuarantine</c> records are currently associated with.
    /// </param>
    /// <param name="_origLineNum">
    ///    The line number the <c>WHSWorkQuarantine</c> records are currently associated with.
    /// </param>
    /// <param name="_newWorkId">
    ///    The Work ID the <c>WHSWorkQuarantine</c> records must be associated with.
    /// </param>
    /// <param name="_newLineNum">
    ///    The new line number the <c>WHSWorkQuarantine</c> records must be associated with.
    /// </param>
    internal static void moveToNewWorkLine(WHSWorkId  _origWorkId,
                                           LineNum    _origLineNum,
                                           WHSWorkId  _newWorkId,
                                           LineNum    _newLineNum)
    {
        if (!_origWorkId || !_newWorkId)
        {
            return;
        }

        WHSWorkQuarantine workQuarantine;

        ttsbegin;

        update_recordset workQuarantine
            setting WorkId  = _newWorkId,
                    LineNum = _newLineNum
            where workQuarantine.WorkId      == _origWorkId
                && workQuarantine.LineNum    == _origLineNum;

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4504</DeveloperDocumentation>
	<Label>@WAX1321</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>WorkId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>InventTransIdFromIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransIdFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransIdTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventQtyRemain</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimIdFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimIdTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransIdFrom</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransIdFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransIdTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventQtyRemain</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimIdFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimIdTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimIdFrom</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSInventDimIdFrom</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimIdTo</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSInventDimIdTo</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventQtyRemain</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQtyRemain</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransIdFrom</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSInventTransIdFrom</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransIdTo</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSInventTransIdTo</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProductQuantity</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>TransDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CapturedWeight</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCapturedWeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainingCapturedWeight</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCapturedWeightRemain</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventTransIdFromIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransIdFrom</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventTransIdToIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransIdTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDimFrom</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DimFrom</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimIdFrom</Name>
					<SourceEDT>WHSInventDimIdFrom</SourceEDT>
					<Field>InventDimIdFrom</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDimTo</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DimTo</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimIdTo</Name>
					<SourceEDT>WHSInventDimIdTo</SourceEDT>
					<Field>InventDimIdTo</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOriginFrom</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TransFrom</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransIdFrom</Name>
					<SourceEDT>WHSInventTransIdFrom</SourceEDT>
					<Field>InventTransIdFrom</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOriginTo</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TransTo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransIdTo</Name>
					<SourceEDT>WHSInventTransIdTo</SourceEDT>
					<Field>InventTransIdTo</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorkLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSWorkLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LineNum</Name>
					<SourceEDT>WHSLineNum</SourceEDT>
					<Field>LineNum</Field>
					<RelatedField>LineNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkId</Name>
					<SourceEDT>WHSWorkId</SourceEDT>
					<Field>WorkId</Field>
					<RelatedField>WorkId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorkTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSWorkTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkId</Name>
					<SourceEDT>WHSWorkId</SourceEDT>
					<Field>WorkId</Field>
					<RelatedField>WorkId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>