<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HRPTmpDefaultSigningLimitRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HRPTmpDefaultSigningLimitRule extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDuplicationJobCompensationCombination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the CompensationLevel/Job has already been used in a signing limit for same document type
    /// </summary>
    /// <param name="_recIdsContainer">
    /// The record ids container
    /// </param>
    /// <param name="_authorityBasis">
    /// Enum <c>HRPAuthorityBasis</c> to indicate approval authority basis CompensationLevel or Job
    /// </param>
    /// <param name="_displayValidationErrorMessage">
    /// A boolean to indicate whether or not to display an error message if duplicate exists
    /// </param>
    /// <returns>
    /// true if the CompensationLevel/Job has already been used in a signing limit for same document type; otherwise, false.
    /// </returns>
    public boolean checkDuplicationJobCompensationCombination(container _recIdsContainer,
        HRPAuthorityBasis _authorityBasis,
        boolean _displayValidationErrorMessage)
    {
        boolean ret = false;

        if (_recIdsContainer)
        {

            HRPTmpDefaultSigningLimitRule newTmpDefaultSigningLimitRule;
            newTmpDefaultSigningLimitRule.setTmpData(this);

            List currentRecIdList = List::create(_recIdsContainer);
        
            // Checks this drafted policy for duplicate entry lines
            while select newTmpDefaultSigningLimitRule
                where newTmpDefaultSigningLimitRule.RecId != this.RecId
                    && newTmpDefaultSigningLimitRule.SigningLimitDocument == this.SigningLimitDocument
            {
                if (!newTmpDefaultSigningLimitRule.CompensationRecIdsContainer)
                {
                    continue ;
                }
                    
                List comparingRecIdList = List::create(newTmpDefaultSigningLimitRule.CompensationRecIdsContainer);
                ListEnumerator listEnumerator = currentRecIdList.getEnumerator();

                while (listEnumerator.moveNext())
                {
                    RefRecId jobOrCompensationRecId = str2int64(listEnumerator.current());

                    if (this.checkRecIdInList(jobOrCompensationRecId,  comparingRecIdList) )
                    {
                        if (_displayValidationErrorMessage)
                        {
                            this.displayDuplicationJobCompensationCombination(
                                jobOrCompensationRecId,
                                newTmpDefaultSigningLimitRule.Description,
                                _authorityBasis,
                                newTmpDefaultSigningLimitRule.Description);
                        }

                        ret = true;
                        break;
                    }
                }
            }


            // Checks all other existing policies for any duplication
            ListEnumerator listEnumerator = currentRecIdList.getEnumerator();

            while (listEnumerator.moveNext())
            {
                RefRecId jobOrCompensationRecId = str2int64(listEnumerator.current());

                RefRecId existingJobOrCompensationRecId = this.checkExistingPoliciesForJobOrCompensationRecId(jobOrCompensationRecId, _authorityBasis);

                if (existingJobOrCompensationRecId)
                {
                    if (_displayValidationErrorMessage)
                    {
                        HRPDefaultLimitDetail existingHRPLimitDetail = HRPDefaultLimitDetail::find(existingJobOrCompensationRecId);
                      
                        this.displayDuplicationJobCompensationCombination(
                                jobOrCompensationRecId,
                                existingHRPLimitDetail.Description,
                                _authorityBasis,
                                newTmpDefaultSigningLimitRule.Description);
                    }

                    ret = true;
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistingPoliciesForJobOrCompensationRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// checkExistingPoliciesForJobRecId checks any new job/compensation roles addded to the policy
    /// against all existing policies of the same time to prevent any duplication
    ///
    /// Takes into account the company assignment
    /// </summary>
    /// <param name = "_jobOrCompensationRecId">Job or Compensation RecId</param>
    /// <param name = "_authorityBasis">type is Job or Compensation</param>
    /// <returns>RecId of the first existing policy with the same Job/Compensation RecId</returns>
    private RefRecId checkExistingPoliciesForJobOrCompensationRecId(RefRecId _jobOrCompensationRecId, HRPAuthorityBasis _authorityBasis)
    {
        HRPDefaultLimitDetail hrpDefaultLimitDetail;
        HRPDefaultLimitRule hrpTmpDefaultLimitRule;
        HRPDefaultLimitRule hrpLimitRule;
        HRPDefaultLimitJobRule hrpJobRule;
        HRPDefaultLimitCompensationRule hrpCompensationRule;
        SysPolicyOrganization sysOrg;
        SysPolicyOrganization hrpTmpSysOrg;

        RefRecId limitDocRecId = HRPLimitDocument::getLimitDocumentRecId(this.SigningLimitDocument);

        switch (_authorityBasis)
        {
            case HrpAuthorityBasis::Job:
                select firstonly RecId from hrpDefaultLimitDetail
                    where hrpDefaultLimitDetail.LimitBasisType == _authorityBasis
                        && hrpDefaultLimitDetail.SigningLimitDocument == limitDocRecId
                        && hrpDefaultLimitDetail.DefaultSigningLimitRule != this.DefaultSigningLimitRule
                    join RecId from hrpLimitRule
                        where hrpLimitRule.RecId == hrpDefaultLimitDetail.DefaultSigningLimitRule
                    join RecId from hrpTmpDefaultLimitRule
                        where hrpTmpDefaultLimitRule.RecId == this.DefaultSigningLimitRule
                    join Policy from sysOrg
                        where sysOrg.Policy == hrpLimitRule.Policy
                    exists join Policy from hrpTmpSysOrg
                        where hrpTmpSysOrg.Policy == hrpTmpDefaultLimitRule.Policy
                        && hrpTmpSysOrg.Organization == sysOrg.Organization
                    join DefaultLimitDetail from hrpJobRule
                        where hrpJobRule.DefaultLimitDetail == hrpDefaultLimitDetail.RecId
                        && hrpJobRule.Job == _jobOrCompensationRecId;

                break;

            case HrpAuthorityBasis::Compensation:
                select firstonly RecId from hrpDefaultLimitDetail
                    where hrpDefaultLimitDetail.LimitBasisType == _authorityBasis
                        && hrpDefaultLimitDetail.SigningLimitDocument == limitDocRecId
                        && hrpDefaultLimitDetail.DefaultSigningLimitRule != this.DefaultSigningLimitRule
                    join RecId from hrpLimitRule
                        where hrpLimitRule.RecId == hrpDefaultLimitDetail.DefaultSigningLimitRule
                    join RecId from hrpTmpDefaultLimitRule
                        where hrpTmpDefaultLimitRule.RecId == this.DefaultSigningLimitRule
                    join Policy from sysOrg
                        where sysOrg.Policy == hrpLimitRule.Policy
                    exists join Policy from hrpTmpSysOrg
                        where hrpTmpSysOrg.Policy == hrpTmpDefaultLimitRule.Policy
                        && hrpTmpSysOrg.Organization == sysOrg.Organization
                    join DefaultLimitDetail from hrpCompensationRule
                        where hrpCompensationRule.DefaultLimitDetail == hrpDefaultLimitDetail.RecId
                        && hrpCompensationRule.CompensationLevel == _jobOrCompensationRecId;
                
                break;
        }

        return hrpDefaultLimitDetail.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDuplicationJobCompensationCombination</Name>
				<Source><![CDATA[
    private void displayDuplicationJobCompensationCombination(
        RefRecId _jobOrCompensationRecId,
        str _description,
        HRPAuthorityBasis _authorityBasis,
        Description _newTmpDefaultSigningLimitRuleDescription)
    {
        str type;
        str id;

        [type, id] = this.getAuthorityBasisLabel(_authorityBasis, _jobOrCompensationRecId);

        error(strFmt("@PayrollProcessing:HR_SigningLimitPolicy_Message_DuplicateJobOrCompensationLevelAndDocumentTypeCombination",
                            enum2str(this.SigningLimitDocument),
                            this.description,
                            _description,
                            type,
                            id));

    }

]]></Source>
			</Method>
			<Method>
				<Name>getAuthorityBasisLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the label and record Id based on authority basis.
    /// </summary>
    /// <param name = "_authorityBasis">
    /// The <c>HRPAuthorityBasis</c> enumeration value.
    /// </param>
    /// <param name = "_refRecId">
    /// The reference record ID.
    /// </param>
    /// <returns>
    /// The container containing the Job or Compensation values.
    /// </returns>
    [Wrappable(true)]
    protected final container getAuthorityBasisLabel(HRPAuthorityBasis _authorityBasis, RefRecId _refRecId)
    {
        str type, id;

        if (_authorityBasis == HRPAuthorityBasis::Job)
        {
            type = "@PayrollProcessing:HR_SigningLimitPolicy_Message_Job";
            id = HcmJob::find(_refRecId).JobId;
        }
        else if (_authorityBasis == HRPAuthorityBasis::Compensation)
        {
            type = "@PayrollProcessing:HR_SigningLimitPolicy_Message_CompensationLevel";
            id = HcmCompensationLevel::find(_refRecId).compensationLevelId;
        }

        return [type, id];
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRecIdInList</Name>
				<Source><![CDATA[
    private boolean checkRecIdInList(RefRecId _jobOrCompensationRecId, List listRecId)
    {
        boolean ret = false;

        ListEnumerator listEnumerator = listRecId.getEnumerator();
                
        while (listEnumerator.moveNext())
        {
            RefRecId jobOrCompensationRecId = str2int64(listEnumerator.current());
                
            if (jobOrCompensationRecId == _jobOrCompensationRecId)
            {
                ret = true;
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if ((this.ApprovalAmount > 0 && this.ApprovalCurrency == '')
            || (this.SpendingAmount > 0 && this.SpendingCurrency == ''))
        {
            ret = checkFailed("@SYS303693");
        }

        if (this.ApprovalAmount == 0 && this.SpendingAmount == 0)
        {
            ret = checkFailed("@SYS304092");
        }

        if ((this.ApprovalCurrency != '' && this.ApprovalAmount == 0)
            || (this.SpendingCurrency != '' && this.SpendingAmount == 0))
        {
            ret = checkFailed("@SYS310822");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS317827</DeveloperDocumentation>
	<Label>@SYS302154</Label>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SpendingCurrency</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ApprovalAmount</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS116984</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ApprovalCurrency</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ApprovalDetailRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SysInt64</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CompensationRecIds</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>CompensationRecIdsContainer</Name>
			<AssetClassification>System Metadata</AssetClassification>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultSigningLimitRule</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LimitBasisType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>HRPAuthorityBasis</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SigningLimitDocument</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>HRPLimitDocumentType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SpendingAmount</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS304079</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SpendingDetailRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SysInt64</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>HRPDefaultLimitRuleIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultSigningLimitRule</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HRPLimitDocumentIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SigningLimitDocument</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CompensationRecIds</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpendingCurrency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>SpendingCurrency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency1</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Currency_Approval</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TmpDefaultSigningLimitRule_Approval</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ApprovalCurrency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>ApprovalCurrency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HRPDefaultLimitRule</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HRPDefaultLimitRule</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HRPDefaultLimitRule</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HRPDefaultLimitRule_TmpDefaultSigningLimitRule</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultSigningLimitRule</Name>
					<Field>DefaultSigningLimitRule</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>