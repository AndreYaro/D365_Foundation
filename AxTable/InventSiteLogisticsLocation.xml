<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSiteLogisticsLocation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventSiteLogisticsLocation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addEntityLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the specified roles to this site logistics location.
    /// </summary>
    /// <param name="_roles">
    /// A container that has IDs for the roles; optional.
    /// </param>
    /// <param name="_replaceRoles">
    /// A Boolean value that specifies whether to replace the existing roles with the new roles; optional.
    /// </param>
    /// <returns>
    /// The <c>LogisticsEntityLocationMap</c> map of the newly created relationship.
    /// </returns>
    public LogisticsEntityLocationMap addEntityLocation(
        container   _roles = conNull(),
        boolean     _replaceRoles = false)
    {
        return this.LogisticsEntityLocationMap::addEntityLocation(_roles, _replaceRoles);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Deletes this record and related entities.
    /// </summary>
    public void delete()
    {
        this.LogisticsEntityLocationMap::delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the current record in the database and ensures that only one location can be marked as
    /// primary.
    /// </summary>
    public void insert()
    {
        ttsbegin;
        super();
        this.updatePrimaryLocation();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationRoleNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a string that is concatenated with the names of the roles that are related to this record.
    /// </summary>
    /// <returns>
    /// A string.
    /// </returns>
    public display DirPartyLocationRoleNames locationRoleNames()
    {
        #Characters
        return (con2Str(conPeek(this.locationRoles(), 2),#SEMICOLON));
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationRoles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container that has the IDs of the roles that are related to this record.
    /// </summary>
    /// <returns>
    /// A container that has the record ID values.
    /// </returns>
    public container locationRoles()
    {
        return this.LogisticsEntityLocationMap::locationRoles();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the current record in the database and ensures that only one location can be marked as
    /// primary.
    /// </summary>
    public void update()
    {
        ttsbegin;
        super();
        this.updatePrimaryLocation();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePrimaryLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that only one location can be marked as primary.
    /// </summary>
    /// <param name="isCallerReplicated">
    /// Indicates if the caller table is being replicated.
    /// </param>
    public void updatePrimaryLocation(boolean _isCallerReplicated = false)
    {
        this.LogisticsEntityLocationMap::updatePrimaryLocation(_isCallerReplicated);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        return this.LogisticsEntityLocationMap::validateDelete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>InventSiteLogisticsLocation</c> record and associated role for the specified site.
    /// </summary>
    /// <param name="_site">
    /// The <c>RecId</c> value of the <c>InventSite</c> record for which the records are created.
    /// </param>
    /// <param name="_location">
    /// The <c>RecId</c> value of the <c>LogisticsLocation</c> record that is associated with the new
    /// records.
    /// </param>
    /// <param name="_role">
    /// The <c>RecId</c> value of the <c>LogisticsLocationRole</c> record that is associated with the new
    /// records.
    /// </param>
    /// <param name="_validFrom">
    /// The date from which the location is valid.
    /// </param>
    /// <param name="_validTo">
    /// The date to which the location is valid.
    /// </param>
    /// <returns>
    /// true if the data is created; otherwise, false.
    /// </returns>
    public static boolean addLocation(
        RecId                       _site,
        LogisticsLocationRecId      _location,
        LogisticsLocationRoleRecId  _role,
        ValidFromDateTime           _validFrom = DateTimeUtil::minValue(),
        ValidToDateTime             _validTo = DateTimeUtil::maxValue())
    {
        InventSiteLogisticsLocation siteLocation;

        ttsbegin;
        siteLocation.clear();
        siteLocation.Site           = _site;
        siteLocation.Location       = _location;
        siteLocation.addEntityLocation([_role],true);
        ttscommit;

        return siteLocation.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a default location exists for the specified site and role.
    /// </summary>
    /// <param name="_siteId">
    /// The ID of the site.
    /// </param>
    /// <param name="_roleId">
    /// The role to be checked for.
    /// </param>
    /// <returns>
    /// true if a default location exists; otherwise, false.
    /// </returns>
    public static boolean defaultExists(
        InventSiteId                _siteId,
        LogisticsLocationRoleRecId  _roleId)
    {
        InventSiteDefaultLocation defaultLocation;
        InventSiteLogisticsLocationRole entityLocationRole;

        select RecId from defaultLocation
            exists join entityLocationRole
            where defaultLocation.SiteLogisticsLocationRole == entityLocationRole.RecId
               && defaultLocation.SiteId                    == _siteId
               && entityLocationRole.LocationRole           == _roleId;

        return (defaultLocation.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySiteLocationRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>InventSiteLogisticsLocation</c> record that matches the specified parameters.
    /// </summary>
    /// <param name="_site">
    /// The <c>RecId</c> value of the required site, that is, a <c>InventSite</c> record.
    /// </param>
    /// <param name="_role">
    /// The <c>RecId</c> value of the required role, that is, a <c>LogisticsLocationRole</c> record.
    /// </param>
    /// <param name="_transDateTime">
    /// The date for which the record is valid. Currently not used.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InventSiteLogisticsLocation</c> table; otherwise, an empty record.
    /// </returns>
    public static InventSiteLogisticsLocation findBySiteLocationRole(
        RefRecId                        _site,
        LogisticsLocationRoleRecId      _role,
        TransDateTime                   _transDateTime = DateTimeUtil::getSystemDateTime(),
        boolean                         _forupdate = false)
    {
        InventSiteLogisticsLocation     siteLocation        = null;
        InventSiteLogisticsLocationRole siteLocationRole;

        if (_site && _role)
        {
            siteLocation.selectForUpdate(_forupdate);

            select firstonly siteLocation
                where siteLocation.Site == _site
                exists join siteLocationRole
                    where siteLocationRole.SiteLogisticsLocation    == siteLocation.RecId
                       && siteLocationRole.LocationRole             == _role;
        }

        return siteLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified <c>InventSiteLogisticsLocation</c> record.
    /// </summary>
    /// <param name="_inventSiteLogisticsLocationRecId">
    /// The <c>RecId</c> value of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InventSiteLogisticsLocation</c> table; otherwise, an empty record.
    /// </returns>
    public static InventSiteLogisticsLocation findRec(
        RefRecId        _inventSiteLogisticsLocationRecId,
        boolean         _forupdate = false)
    {
        InventSiteLogisticsLocation siteLocation;

        siteLocation = LogisticsEntityLocationMap::findRec(tableNum(InventSiteLogisticsLocation), _inventSiteLogisticsLocationRecId, _forupdate);

        return siteLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityLocationRoleTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table id of the entity's related location role table.
    /// </summary>
    /// <returns>The location role table id related to the current entity, which is <c>InventSiteLogisticsLocationRole</c>.</returns>
    public TableId getEntityLocationRoleTableId()
    {
        return tableNum(InventSiteLogisticsLocationRole);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logisticsEntityLocationMapInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>LogisticsEntityLocationMapInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// A <c>LogisticsEntityLocationMapInterface</c> object.
    /// </returns>
    public LogisticsEntityLocationMapInterface logisticsEntityLocationMapInterface()
    {
        return LogisticsEntityLocationMapInterface::createInstance(this);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS317676</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<FormRef>InventSite</FormRef>
	<Label>@SYS136861</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Site</TitleField1>
	<TitleField2>Location</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>InventSiteLocation_AK1</ClusteredIndex>
	<Modules>Inventory</Modules>
	<ReplacementKey>InventSiteLocation_AK1</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>InventSiteLogisticsLocationRole</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventSiteLogisticsLocationRole</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Site</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Location</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttentionToAddressLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Site</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Location</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@sys80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Site</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Location</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttentionToAddressLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsDefault</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPostalAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPrimary</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPrivate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AttentionToAddressLine</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsAttentionToAddressLine</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsDefault</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsLocationIsDefault</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPostalAddress</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsLocationIsPostal</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPrimary</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsIsPrimary</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPrivate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsIsPrivate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Location</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsLocationRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Site</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventSiteLocation_AK1</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Site</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Location</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>LogisticsEntityLocationMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Entity</MapField>
					<MapFieldTo>Site</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Location</MapField>
					<MapFieldTo>Location</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsPostalAddress</MapField>
					<MapFieldTo>IsPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsPrimary</MapField>
					<MapFieldTo>IsPrimary</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsPrivate</MapField>
					<MapFieldTo>IsPrivate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EntityLocation</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsPrimaryTaxRegistration</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSite_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventSite_FK</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventSite_FK_InventSiteLogisticsLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Site</Name>
					<Field>Site</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsLocation_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>LogisticsLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsLocation_FK</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>LogisticsLocation_FK_InventSiteLogisticsLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Location</Name>
					<Field>Location</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>