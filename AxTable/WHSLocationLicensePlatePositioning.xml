<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLocationLicensePlatePositioning</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSLocationLicensePlatePositioning extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>WHSLocationLicensePlatePositioning</c> table.
    /// </summary>
    /// <param name = "_licensePlateId">
    /// The license plate to find.
    /// </param>
    /// <param name = "_forUpdate">
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>WHSLocationLicensePlatePositioning</c> table; otherwise, an empty record.
    /// </returns>
    [Hookable(false)]
    internal static WHSLocationLicensePlatePositioning find(WHSLicensePlateId _licensePlateId, boolean _forUpdate = false)
    {
        WHSLocationLicensePlatePositioning locationLicensePlatePositioning;

        if (_licensePlateId)
        {
            locationLicensePlatePositioning.selectForUpdate(_forUpdate);

            select firstonly locationLicensePlatePositioning
                where locationLicensePlatePositioning.LicensePlateId == _licensePlateId;
        }

        return locationLicensePlatePositioning;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPositionForLicensePlateInLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new record in the <c>WHSLocationLicensePlatePositioning</c> table.
    /// </summary>
    /// <param name = "_licensePlateId">
    /// The license plate to be positioned in a location.
    /// </param>
    /// <param name = "_wmsLocation">
    /// The location of the license plate.
    /// </param>
    /// <param name = "_locationLicensePlatePosition">
    /// The position of the license plate in the location.
    /// </param>
    /// <returns>
    /// A new <c>WHSLocationLicensePlatePositioning</c> record.
    /// </returns>
    [Hookable(false)]
    internal static WHSLocationLicensePlatePositioning createPositionForLicensePlateInLocation(
        WHSLicensePlateId               _licensePlateId,
        WMSLocation                     _wmsLocation,
        WHSLocationLicensePlatePosition _locationLicensePlatePosition)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        WHSLocationLicensePlatePositioning locationLicensePlatePositiong;

        locationLicensePlatePositiong.initFromLicensePlateIdLocationAndPosition(_licensePlateId, _wmsLocation, _locationLicensePlatePosition);
        locationLicensePlatePositiong.insert();

        return locationLicensePlatePositiong;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLicensePlateIdLocationAndPosition</Name>
				<Source><![CDATA[
    private void initFromLicensePlateIdLocationAndPosition(WHSLicensePlateId _licensePlateId, WMSLocation _wmsLocation, WHSLocationLicensePlatePosition _licensePlatePosition)
    {
        this.LicensePlateId         = _licensePlateId;
        this.WMSLocationId          = _wmsLocation.WMSLocationId;
        this.InventLocationId       = _wmsLocation.InventLocationId;
        this.LicensePlatePosition   = _licensePlatePosition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the position of the current <c>WHSLocationLicensePlatePositioning</c> record.
    /// </summary>
    /// <param name = "_newPosition">
    /// The new position for the license plate in the location.
    /// </param>
    internal void updatePosition(WHSLocationLicensePlatePosition _newPosition)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        this.LicensePlatePosition = _newPosition;

        this.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:WHSLocationLicensePlatePositioningDocumentation</DeveloperDocumentation>
	<Label>@WAX:WHSLocationLicensePlatePositioning</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>LicensePlateId</TitleField1>
	<TitleField2>WMSLocationId</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>LicensePlateIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<ReplacementKey>LocationPositionIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlatePosition</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LicensePlateId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLicensePlateId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WMSLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LicensePlatePosition</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLocationLicensePlatePosition</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LicensePlateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LicensePlateId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LocationPositionIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WMSLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LicensePlatePosition</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSLicensePlate</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSLicensePlate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LicensePlateId</Name>
					<Field>LicensePlateId</Field>
					<RelatedField>LicensePlateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WMSLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WMSLocationId</Name>
					<Field>WMSLocationId</Field>
					<RelatedField>WMSLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>