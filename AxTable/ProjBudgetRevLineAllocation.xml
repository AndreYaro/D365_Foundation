<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetRevLineAllocation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjBudgetRevLineAllocation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAllocationPeriodName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the allocation period name of the corresponding budget allocation line.
    /// </summary>
    /// <returns>
    /// The name of the allocation period.
    /// </returns>
    display Name getAllocationPeriodName()
    {
        return ProjBudgetAllocationLine::find(this.ProjBudgetAllocationLine).getAllocationPeriodName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllocationPeriodStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the allocation period start date of the corresponding budget allocation line.
    /// </summary>
    /// <returns>
    /// The name of the allocation period.
    /// </returns>
    display FiscalPeriodStart getAllocationPeriodStartDate()
    {
        return ProjBudgetAllocationLine::find(this.ProjBudgetAllocationLine).getAllocationPeriodStartDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>quarter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the Fiscal Quarter for the corresponding budget allocation line.
    /// </summary>
    /// <returns>
    /// The Fiscal Quarter.
    /// </returns>
    display FiscalQuarter quarter()
    {
        return ProjBudgetAllocationLine::find(this.ProjBudgetAllocationLine).Quarter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the specified record exists in the <c>ProjBudgetRevLineAllocation</c> table; if not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>ProjBudgetRevLineAllocation</c> table record to be checked for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist( recId _recId)
    {
        boolean ret = true;

        if (!ProjBudgetRevLineAllocation::exist(_recId))
        {
            ret = checkFailed(strfmt(ProjBudgetRevLineAllocation::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>ProjBudgetRevLineAllocation</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>ProjBudgetRevLineAllocation</c> table to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists, otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        boolean found;

        found = (select firstonly
                     RecId
                 from
                     projBudgetRevLineAllocation
                 where
                     projBudgetRevLineAllocation.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProjBudgetRevLineAllocation</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>ProjBudgetRevLineAllocation</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record of the <c>ProjBudgetRevLineAllocation</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static ProjBudgetRevLineAllocation find(
        recId   _recId,
        boolean _forUpdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        ProjBudgetRevLineAllocation    projBudgetRevLineAllocation;

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            projBudgetRevLineAllocation.concurrencyModel(_concurrencyModel);
        }

        if (_recId)
        {
            projBudgetRevLineAllocation.selectForUpdate(_forUpdate);

            select firstonly projBudgetRevLineAllocation
                where projBudgetRevLineAllocation.RecId == _recId;
        }

        return projBudgetRevLineAllocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBudgetAllocationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProjBudgetRevLineAllocation</c> table.
    /// </summary>
    /// <param name="_budgetAllocationLine">
    /// The record ID of the <c>ProjBudgetAllocationLine</c> table that corresponds to the
    /// <c>ProjBudgetRevLineAllocation</c> record.
    /// </param>
    /// <param name="_budgetRevisionLine">
    /// The record ID of the <c>ProjBudgetRevisionLine</c> table that corresponds to the
    /// <c>ProjBudgetRevLineAllocation</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record of the <c>ProjBudgetRevLineAllocation</c> table if it is found; otherwise, an empty buffer.
    /// </returns>
    public static ProjBudgetRevLineAllocation findByBudgetAllocationLine(
        recId   _budgetAllocationLine,
        recId   _budgetRevisionLine,
        boolean _forUpdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        ProjBudgetRevLineAllocation    projBudgetRevLineAllocation;

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            projBudgetRevLineAllocation.concurrencyModel(_concurrencyModel);
        }

        if (_budgetAllocationLine && _budgetRevisionLine)
        {
            projBudgetRevLineAllocation.selectForUpdate(_forUpdate);

            select firstonly projBudgetRevLineAllocation
            where projBudgetRevLineAllocation.ProjBudgetAllocationLine == _budgetAllocationLine &&
                  projBudgetRevLineAllocation.ProjBudgetRevisionLine   == _budgetRevisionLine;
        }

        return projBudgetRevLineAllocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllocatedTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total allocation amount of the specified combination, that is, category, project,
    /// and activity.
    /// </summary>
    /// <param name="_budgetRevisionLineRecId">
    /// The record ID of the <c>ProjBudgetRevisionLine</c> table.
    /// </param>
    /// <returns>
    /// The sum of all allocation amounts of the current selection.
    /// </returns>
    public static real getAllocatedTotals(recId _budgetRevisionLineRecId)
    {
        ProjBudgetRevLineAllocation projBudgetRevLineAllocation;
        AmountCur                   allocatedAmount = 0;

        select sum(RevisionAllocationAmount) from projBudgetRevLineAllocation
        where projBudgetRevLineAllocation.ProjBudgetRevisionLine == _budgetRevisionLineRecId;

        allocatedAmount = projBudgetRevLineAllocation.RevisionAllocationAmount;

        return allocatedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "@SYS127989";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS315528</DeveloperDocumentation>
	<Label>@SYS315526</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>RevisionAllocationAmount</TitleField1>
	<TitleField2>ProjBudgetRevisionLine</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RevisionLineAllocationLineIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProjectManagementAndAccounting</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RevisionAllocationAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjBudgetRevisionLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjBudgetAllocationLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RevisionAllocation</Name>
			<Label>@SYS315526</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RevisionAllocationAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjBudgetRevisionLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjBudgetAllocationLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjBudgetAllocationLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjBudgetRevisionLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RevisionAllocationAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS315529</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RevisionLineAllocationLineIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjBudgetRevisionLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjBudgetAllocationLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjBudgetAllocationLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjBudgetAllocationLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>AllocationLines</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>LineRevisionAllocatedTo</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjBudgetAllocationLine</Name>
					<Field>ProjBudgetAllocationLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjBudgetRevisionLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ProjBudgetRevisionLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RevisionLines</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>LineAllocated</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjBudgetRevisionLine</Name>
					<Field>ProjBudgetRevisionLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>