<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPaymentOrderJour_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankPaymentOrderJour_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addressBankPayer</Name>
				<Source><![CDATA[
    display Addressing addressBankPayer()
    {
        return  this.getClass().addressBankPayer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addressBankRecipient</Name>
				<Source><![CDATA[
    display Addressing addressBankRecipient()
    {
        return this.getClass().addressBankRecipient();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addressPayer</Name>
				<Source><![CDATA[
    display Addressing addressPayer()
    {
        return this.getClass().addressPayer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addressRecipient</Name>
				<Source><![CDATA[
    display Addressing addressRecipient()
    {
        return this.getClass().addressRecipient();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountIdPayer</Name>
				<Source><![CDATA[
    public BankAccountID bankAccountIdPayer()
    {
        return this.getClass().bankAccountIdPayer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountIdRecipient</Name>
				<Source><![CDATA[
    public BankAccountID bankAccountIdRecipient()
    {
        return this.getClass().bankAccountIdRecipient();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountPayer</Name>
				<Source><![CDATA[
    display BankAccount bankAccountPayer()
    {
        return  this.getClass().bankAccountPayer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountRecipient</Name>
				<Source><![CDATA[
    display BankAccount bankAccountRecipient()
    {
        return  this.getClass().bankAccountRecipient();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankClientPaymentOutLog</Name>
				<Source><![CDATA[
    public BankClientOutPaymentLog_RU bankClientPaymentOutLog(boolean _update = false)
    {
        return BankClientOutPaymentLog_RU::bankClientOutPayment(this.TableId, this.RecId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankNamePayer</Name>
				<Source><![CDATA[
    display TempStr bankNamePayer()
    {
        return this.getClass().bankNamePayer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankNameRecipient</Name>
				<Source><![CDATA[
    display TempStr bankNameRecipient()
    {
        return  this.getClass().bankNameRecipient();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bic_Payer</Name>
				<Source><![CDATA[
    display BankBIC_RU bic_Payer()
    {
        return this.getClass().bic_Payer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bic_Recipient</Name>
				<Source><![CDATA[
    display BankBIC_RU bic_Recipient()
    {
        return this.getClass().bic_Recipient();
    }

]]></Source>
			</Method>
			<Method>
				<Name>branchBankNamePayer</Name>
				<Source><![CDATA[
    display TempStr branchBankNamePayer()
    {
        return  this.getClass().branchBankNamePayer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>branchBankNameRecipient</Name>
				<Source><![CDATA[
    display TempStr branchBankNameRecipient()
    {
        return  this.getClass().branchBankNameRecipient();
    }

]]></Source>
			</Method>
			<Method>
				<Name>corrBankAccountPayer</Name>
				<Source><![CDATA[
    display BankCorrAccount_W corrBankAccountPayer()
    {
        return  this.getClass().corrBankAccountPayer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>corrBankAccountRecipient</Name>
				<Source><![CDATA[
    display BankCorrAccount_W corrBankAccountRecipient()
    {
        return this.getClass().corrBankAccountRecipient();
    }

]]></Source>
			</Method>
			<Method>
				<Name>countryOKSMCode</Name>
				<Source><![CDATA[
    display CountryOKSMCode_RU countryOKSMCode()
    {
        return this.getClass().countryOKSMCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyName</Name>
				<Source><![CDATA[
    display Description currencyName()
    {
        return  this.getClass().currencyName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>custPayment</Name>
				<Source><![CDATA[
    public CustPaym custPayment(LedgerJournalTrans _ledgerJournalTrans)
    {
        const int Value2 = 2;
        const int Line1 = 1;
        const int Line2 = 2;
        const int Line3 = 3;

        CustPaym                custPaym;
        LedgerJournalTrans      ledgerJournalTrans;
        BankAccountTable        bankAccountTable;
        LogisticsPostalAddress  custPostalAddress, custPostalBankAddress, companyPostalAddress;
        CustTable               custTable;
        CustBankAccount         custBankAccount;
        SpecTrans               specTrans;
        str                     settledInvoices;

        ledgerJournalTrans      = _ledgerJournalTrans;

        if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank)
        {
            bankAccountTable = BankAccountTable::find(ledgerJournalTrans.parmOffsetAccount());
        }
        else
        {
            bankAccountTable = BankAccountTable::find(CustPaymModeTable::find(ledgerJournalTrans.PaymMode).parmPaymAccount());
        }

        if (ledgerJournalTrans.BankPrintAccountNum_RU)
        {
            custTable       = CustTable::find(ledgerJournalTrans.BankPrintAccountNum_RU);
            custBankAccount = CustBankAccount::find(ledgerJournalTrans.BankPrintAccountNum_RU, custTable.BankAccount);
        }
        else
        {
            custTable       = CustTable::find(ledgerJournalTrans.parmAccount());
            custBankAccount = CustBankAccount::find(ledgerJournalTrans.parmAccount(), ledgerJournalTrans.CustVendBankAccountId);
        }

        while select specTrans
            where specTrans.SpecTableId     == ledgerJournalTrans.TableId &&
                  specTrans.SpecRecId       == ledgerJournalTrans.RecId
        {
            if (specTrans.custTrans().Invoice)
            {
                settledInvoices += specTrans.custTrans().Invoice + ', ';
            }
        }
        settledInvoices       = subStr(settledInvoices, 1, strLen(settledInvoices)-Value2);  // Remove the last ', '
        custPostalAddress     = custTable.postalAddress();
        custPostalBankAddress = LogisticsLocationEntity::location2PostalAddress(custBankAccount.Location);
        companyPostalAddress  = CompanyInfo::find().postalAddress();

        custPaym = new CustPaym();

        custPaym.ledgerJournalTrans                  (ledgerJournalTrans);
        custPaym.bankAccountTable                    (bankAccountTable);
        custPaym.custVendTable                       (custTable);
        custPaym.bankAccountMap                      (custBankAccount);

        custPaym.messageToSendersBank                (custBankAccount.MsgToBank);
        custPaym.paymAmountInForeignCurrency         (ledgerJournalTrans.amount());
        custPaym.paymAmountInSendersCurrency         (CurrencyExchangeHelper::mstAmount(ledgerJournalTrans.amount(), ledgerJournalTrans.CurrencyCode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), UnknownNoYes::Unknown, ledgerJournalTrans.ExchRate));
        custPaym.paymCurrencyCode                    (Currency::currencyCodeISO(ledgerJournalTrans.CurrencyCode));
        custPaym.paymDate                            (ledgerJournalTrans.TransDate);
        custPaym.paymExchangeRate                    (custBankAccount.ExchRate);
        custPaym.paymExchangeRateReference           (custBankAccount.ExchRateRef);
        custPaym.paymId                              (ledgerJournalTrans.PaymId);
        custPaym.paymNote                            (ledgerJournalTrans.PaymentNotes);
        custPaym.paymPurposeCode                     (custTable.BankCentralBankPurposeCode);
        custPaym.paymPurposeText                     (custTable.BankCentralBankPurposeText);
        custPaym.paymReference                       (ledgerJournalTrans.PaymReference);
        custPaym.recieversBankTextCode               (custBankAccount.CustPaymentTextCode);
        custPaym.recieversBankAccountId              (custBankAccount.AccountID);
        custPaym.recieversBankName                   (custBankAccount.Name);
        custPaym.recieversBankRegistrationNumber     (custBankAccount.RegistrationNum);

        unchecked (Uncheck::TableSecurityPermission)
        {
            custPaym.recieversBankAccount            (custBankAccount.AccountNum);
        }

        custPaym.recieversCompanyAddress             (custPostalAddress.Address);
        custPaym.recieversCompanyAddress1            (custPaym.textLine(custPostalAddress.Address, Line1));
        custPaym.recieversCompanyAddress2            (custPaym.textLine(custPostalAddress.Address, Line2));
        custPaym.recieversCompanyAddress3            (custPaym.textLine(custPostalAddress.Address, Line3));
        custPaym.recieversBankAddress                (custPostalBankAddress.Address);
        custPaym.recieversBankAddress1               (custPaym.textLine(custPostalBankAddress.Address, Line1));
        custPaym.recieversBankAddress2               (custPaym.textLine(custPostalBankAddress.Address, Line2));
        custPaym.recieversBankAddress3               (custPaym.textLine(custPostalBankAddress.Address, Line3));
        custPaym.recieversCountryRegionId            (custPostalAddress.CountryRegionId);
        custPaym.recieversZipCode                    (custPostalAddress.ZipCode);
        custPaym.recieversBuilding_RU                (custPostalAddress.BuildingCompliment);
        custPaym.recieversEstate_RU                  (LogisticsAddressHouseNumber_RU::findRecId(custPostalAddress.HouseId_RU).Name);
        custPaym.recieversFlat_RU                    (LogisticsAddressFlatNumber_RU::findRecId (custPostalAddress.FlatId_RU).Name);
        custPaym.recieversSettlementId_RU            (LogisticsAddressDistrict::find_RU        (custPostalAddress.District).Name);
        custPaym.recieversStreetId_RU                (LogisticsAddressStreet_RU::findRecID     (custPostalAddress.StreetId_RU).Name);
        custPaym.recieversTownId_RU                  (LogisticsAddressCity::find_RU            (custPostalAddress.CityRecId).Name);
        custPaym.recieversCountryRegionISOCode       (LogisticsAddressCountryRegion::find(custPostalAddress.CountryRegionId).isOcode);
        custPaym.recieversCompanyName                (custTable.name());
        custPaym.recieversIdentificationOfSender     (custTable.OurAccountNum);
        custPaym.recieversInvoiceNumber              (settledInvoices);
        custPaym.recieversSwiftAddress               (custBankAccount.swiftNo);
        custPaym.sendersBankAccount                  (bankAccountTable.AccountNum);
        custPaym.sendersBankRegistrationNumber       (bankAccountTable.RegistrationNum);
        custPaym.sendersCompanyAddress               (companyPostalAddress.Address);
        custPaym.sendersCompanyAddress1              (custPaym.textLine(companyPostalAddress.Address,Line1));
        custPaym.sendersCompanyAddress2              (custPaym.textLine(companyPostalAddress.Address,Line2));
        custPaym.sendersCompanyAddress3              (custPaym.textLine(companyPostalAddress.Address,Line3));
        custPaym.sendersCompanyName                  (CompanyInfo::find().name());
        custPaym.sendersInvoiceNumber                ();
        custPaym.sendersIdentificationOfReciever     (custTable.AccountNum);
        custPaym.sendersBanksIdentificationOfSender  (bankAccountTable.CompanyPaymId);
        custPaym.feeContractAccount                  (bankAccountTable.FeeContractAccount);

        return custPaym;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportDateTime</Name>
				<Source><![CDATA[
    display BankClientLastExportDateTime_RU exportDateTime()
    {
        return this.bankClientPaymentOutLog().FileDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportFileName</Name>
				<Source><![CDATA[
    display Filename exportFileName()
    {
        return this.bankClientPaymentOutLog().BankClientFileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClass</Name>
				<Source><![CDATA[
    public BankPaymentFill_RU getClass()
    {
        return BankPaymentFill_RU::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymBaseCode</Name>
				<Source><![CDATA[
    public display PaymentOrderPaymBaseCode_RU getPaymBaseCode()
    {
        PaymentOrderPaymBaseCode_RU ret = this.PaymBaseCode;

        if (this.PaymStatusCode && ! ret)
        {
            ret = '0';
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymDocDateAsStr</Name>
				<Source><![CDATA[
    display TempStr getPaymDocDateAsStr()
    {
        const str Zero = '0';
        const int DateFormat = 123;
        const int DayFormat = 2;
        const int Separator1 = 2;
        const int MonthFormat = 2;
        const int Separator2 = 2;
        const int YearFormat = 4;

        str  ret = "";

        if (this.PaymDocDate != dateNull())
        {
            ret = date2str(this.PaymDocDate, DateFormat, DayFormat, Separator1, MonthFormat, Separator2, YearFormat,DateFlags::None);
        }

        if (this.PaymStatusCode && ! ret)
        {
            ret = Zero;
        }

        return  ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymDocNum</Name>
				<Source><![CDATA[
    public display PaymentOrderPaymDocNum_RU getPaymDocNum()
    {
        const str Zero = '0';

        PaymentOrderPaymDocNum_RU   ret = this.PaymDocNum;

        if (this.PaymStatusCode && (! ret))
            ret = Zero;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymTypeCode</Name>
				<Source><![CDATA[
    public display PaymentOrderPaymTypeCode_RU getPaymTypeCode()
    {
        const str Zero = '0';

        PaymentOrderPaymTypeCode_RU     ret = this.PaymTypeCode;

        if (this.PaymStatusCode && (! ret))
            ret = Zero;

        return  ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxPeriod</Name>
				<Source><![CDATA[
    display TempStr getTaxPeriod()
    {
        const str Zero = "0";
        const str StrFormat = "\%1.\%2.\%3";
        const int DateFormat = 123;
        const int DayFormat = 2;
        const int Separator1 = 2;
        const int MonthFormat = 2;
        const int Separator2 = 2;
        const int YearFormat = 4;
        const int NumCount = 2;

        CustomPartners_RU   customPartners;
        str sz, szRet = "";

        if (this.LedgerACType == LedgerJournalACType::Vend)
        {
            customPartners = CustomPartners_RU::find(this.AccountNumRecipient);
            if (customPartners && customPartners.PartnerType == CustomPartnerType_RU::Custom)
            {
                return CustomPosts_RU::getSinglePost(customPartners.PartnerCode);
            }
        }

        if (this.PaymStatusCode)
        {
            szRet = Zero;
        }

        if (this.PaymTaxPeriodDate)
        {
            szRet = date2str(this.PaymTaxPeriodDate, DateFormat, DayFormat, Separator1, MonthFormat, Separator2, YearFormat, DateFlags::None);
        }

        else if ((this.PaymPeriodCode != PaymentOrderPeriodCode_RU::None) && (this.PaymPeriodNumber >= 0)  && (this.Year > 0))
        {
            sz    = num2Str0(this.PaymPeriodNumber, NumCount);
            szRet = strFmt(StrFormat, this.PaymPeriodCode, sz, this.Year);
        }

        return szRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCurrencyTransferLog</Name>
				<Source><![CDATA[
    public void initFromCurrencyTransferLog(BankCurrencyTransferLog_RU _currencyTransferLog)
    {
        LedgerJournalTrans  ledgerJournalTrans = _currencyTransferLog.ledgerJournalTrans();

        this.PaymentOrderNum           = _currencyTransferLog.paymentOrderNum();
        this.PaymentTransDate          = _currencyTransferLog.paymentOrderDate();
        this.JournalNum                = _currencyTransferLog.JournalNum;
        this.Voucher                   = _currencyTransferLog.Voucher;
        this.LedgerACType              = ledgerJournalTrans.AccountType;
        this.BankClientDocumentTypeId  = ledgerJournalTrans.BankClientDocumentTypeId_RU;
        this.PaymOrderType             = ledgerJournalTrans.CurrencyCode == Ledger::accountingCurrency() ?
                                         PaymOrderType_RU::MST                                           :
                                         PaymOrderType_RU::Cur;
        this.CompanyRecipient          = _currencyTransferLog.company();
        this.AccountNumRecipient       = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTrans.LedgerDimension);
        this.BankIdPayer               = _currencyTransferLog.bankAccountPayerId();
        this.BankIdRecipient           = _currencyTransferLog.BankSpecAccountId;
        this.PurposeOfPayment          = ledgerJournalTrans.BankCentralBankPurposeText;
        this.BankTransactionType       = ledgerJournalTrans.BankTransType;
        this.WorkerResponsible         = _currencyTransferLog.ResponsibleWorker;
        this.ElectronicPayment         = _currencyTransferLog.ElectronicPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    public void initFromLedgerJournalTrans(LedgerJournalTrans  _ledgerJournalTrans)
    {
        this.JournalNum                 = _ledgerJournalTrans.JournalNum;
        this.Voucher                    = _ledgerJournalTrans.Voucher;
        this.JournalLineNum             = _ledgerJournalTrans.LineNum;
        this.LedgerACType               = _ledgerJournalTrans.AccountType;
        this.JournalTransDate           = _ledgerJournalTrans.TransDate;

        this.PaymentTransDate           = _ledgerJournalTrans.DocumentDate ?
                                          _ledgerJournalTrans.DocumentDate :
                                          _ledgerJournalTrans.TransDate;

        this.PaymMode                   = _ledgerJournalTrans.PaymMode;
        this.BankCentralBankPurposeCode = _ledgerJournalTrans.BankCentralBankPurposeCode;
        this.BankClientDocumentTypeId   = _ledgerJournalTrans.BankClientDocumentTypeId_RU;
        this.BankTransactionType        = _ledgerJournalTrans.BankTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPaymentOrderBudgetTrans_RU</Name>
				<Source><![CDATA[
    public void initFromPaymentOrderBudgetTrans_RU(PaymentOrderBudgetTrans_RU _paymentOrderBudgetTrans)
    {
        this.PaymBaseCode               =  _paymentOrderBudgetTrans.BaseCode;
        this.PaymTypeCode               =  _paymentOrderBudgetTrans.TypeCode;
        this.PaymBudgetReceiptClassCode =  _paymentOrderBudgetTrans.BudgetReceiptClassCode;
        this.PaymStatusCode             =  _paymentOrderBudgetTrans.StatusCode;
        this.PaymPeriodNumber           =  _paymentOrderBudgetTrans.PeriodNumber;
        this.PaymDocNum                 =  _paymentOrderBudgetTrans.DocNum;
        this.Year                       =  _paymentOrderBudgetTrans.Year;
        this.PaymTaxPeriodDate          =  _paymentOrderBudgetTrans.TaxPeriodDate;
        this.PaymPeriodCode             =  _paymentOrderBudgetTrans.PeriodCode;
        this.PaymDocDate                =  _paymentOrderBudgetTrans.DocDate;
        this.OrderOfPayment             =  _paymentOrderBudgetTrans.OrderOfPayment;
        this.PrintKPP                   =  _paymentOrderBudgetTrans.PrintKPP;
        this.RecipientRCOAD             =  _paymentOrderBudgetTrans.RecipientRCOAD;
        this.UIN                        =  _paymentOrderBudgetTrans.UIN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inn_Payer</Name>
				<Source><![CDATA[
    display INN_RU inn_Payer()
    {
        return  this.getClass().inn_Payer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inn_Recipient</Name>
				<Source><![CDATA[
    display INN_RU inn_Recipient()
    {
        return this.getClass().inn_Recipient();
    }

]]></Source>
			</Method>
			<Method>
				<Name>kppu_Payer</Name>
				<Source><![CDATA[
    display KPPUDisplay_RU kppu_Payer()
    {
        return  this.getClass().kppu_Payer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>kppu_Recipient</Name>
				<Source><![CDATA[
    display KPPUDisplay_RU kppu_Recipient()
    {
        return  this.getClass().kppu_Recipient();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTrans</Name>
				<Source><![CDATA[
    public LedgerJournalTrans ledgerJournalTrans()
    {
        LedgerJournalTrans ledgerJournalTrans;

        select firstonly ledgerJournalTrans
            where ledgerJournalTrans.JournalNum  == this.JournalNum     &&
                  ledgerJournalTrans.Voucher     == this.Voucher        &&
                  ledgerJournalTrans.LineNum     == this.JournalLineNum &&
                  ledgerJournalTrans.AccountType == this.LedgerACType   &&
                  ledgerJournalTrans.TransDate   == this.JournalTransDate;

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>namePayer</Name>
				<Source><![CDATA[
    display CustName namePayer()
    {
        return  this.getClass().namePayer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nameRecipient</Name>
				<Source><![CDATA[
    display VendName nameRecipient()
    {
        return  this.getClass().nameRecipient();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numeralsToLetter</Name>
				<Source><![CDATA[
    display NumeralsToLetter_RU numeralsToLetter()
    {
        return  this.getClass().numeralsToLetter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>okato</Name>
				<Source><![CDATA[
    public display OKATO_RU okato()
    {
        const str Zero = "0";

        OKATO_RU    ret = this.getClass().okato();

        if (this.PaymStatusCode && (!ret))
            ret = Zero;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymOrderStatus</Name>
				<Source><![CDATA[
    display PaymOrderStatus_RU paymOrderStatus()
    {
        LedgerJournalTrans    ledgerJournalTrans;
        LedgerJournalTable    ledgerJournalTable;
        BankAccountTrans      bankAccountTrans;

        select firstonly bankAccountTrans
            where bankAccountTrans.Voucher       == this.Voucher &&
                  bankAccountTrans.PaymReference == this.PaymentOrderNum;

        if (bankAccountTrans)
        {
            return PaymOrderStatus_RU::Posted;
        }

        select firstonly PaymentStatus from ledgerJournalTrans
            where ledgerJournalTrans.TransDate   == this.JournalTransDate &&
                  ledgerJournalTrans.LineNum     == this.JournalLineNum   &&
                  ledgerJournalTrans.AccountType == this.LedgerACType     &&
                  ledgerJournalTrans.JournalNum  == this.JournalNum       &&
                  ledgerJournalTrans.Voucher     == this.Voucher
        exists join ledgerJournalTable
            where ledgerJournalTable.JournalNum  == ledgerJournalTrans.JournalNum &&
                  ledgerJournalTable.Posted      == NoYes::No;

        switch (ledgerJournalTrans.PaymentStatus)
        {
            case CustVendPaymStatus::Sent,
                 CustVendPaymStatus::Recieved :
                return PaymOrderStatus_RU::Created;

            case CustVendPaymStatus::Rejected :
                return PaymOrderStatus_RU::Rejected;

            case CustVendPaymStatus::Confirmed :
                return PaymOrderStatus_RU::Approved;
        }

        return PaymOrderStatus_RU::Created;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymOrderStatusLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a label for payment order status of the current record in order to show in the SSRS report.
    /// </summary>
    /// <returns>
    /// A label for payment order status of the current record.
    /// </returns>
    display LabelString paymOrderStatusLabel()
    {
        return enum2str(this.paymOrderStatus());
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymPurchase</Name>
				<Source><![CDATA[
    display TempStr paymPurchase()
    {
        const str paymStr = '\%1 \%2\%3';

        BankCurrencyTransferLog_RU currTransLog = BankCurrencyTransferLog_RU::find(this.BankCurrencyTransferLog_RU);

        if (currTransLog)
        {
            return strFmt(paymStr, currTransLog.BankCurrencyTransferId, "@GLS100920", currTransLog.TransDate);
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>purposeCode</Name>
				<Source><![CDATA[
    display BankCentralBankPurposeCode purposeCode()
    {
        return  this.getClass().purposeCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purposeOfPaymentText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the purpose of payment text for the payment order print form.
    /// </summary>
    /// <returns>
    /// A string, containing purpose of payment.
    /// </returns>
    display BankCentralBankPurposeText purposeOfPaymentText()
    {
        return  this.getClass().purposeOfPayment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>respEmplName</Name>
				<Source><![CDATA[
    display EmplName respEmplName()
    {
        return  this.getClass().respEmplName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>respPhone</Name>
				<Source><![CDATA[
    display Phone respPhone()
    {
        return  this.getClass().respPhone();
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateRefRecId</Name>
				<Source><![CDATA[
    display RefRecId templateRefRecId()
    {
        return this.getClass().templateRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendPayment</Name>
				<Source><![CDATA[
    public VendPaym vendPayment(LedgerJournalTrans _ledgerJournalTrans)
    {
        const int Value2 = 2;
        const int Line1 = 1;
        const int Line2 = 2;
        const int Line3 = 3;

        VendPaym                vendPaym;
        LedgerJournalTrans      ledgerJournalTrans;
        BankAccountTable        bankAccountTable;
        LogisticsPostalAddress  vendPostalAddress, vendPostalBankAddress, companyPostalAddress;
        VendTable               vendTable;
        VendBankAccount         vendBankAccount;
        SpecTrans               specTrans;
        str                     settledInvoices;

        ledgerJournalTrans      = _ledgerJournalTrans;

        if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank)
        {
            bankAccountTable = BankAccountTable::find(ledgerJournalTrans.parmOffsetAccount());
        }
        else
        {
            bankAccountTable = BankAccountTable::find(VendPaymModeTable::find(ledgerJournalTrans.PaymMode).parmPaymAccount());
        }

        if (ledgerJournalTrans.BankPrintAccountNum_RU)
        {
            vendTable       = VendTable::find(ledgerJournalTrans.BankPrintAccountNum_RU);
            vendBankAccount = VendBankAccount::find(ledgerJournalTrans.BankPrintAccountNum_RU, vendTable.BankAccount);
        }
        else
        {
            vendTable       = VendTable::find(ledgerJournalTrans.parmAccount());
            vendBankAccount = VendBankAccount::find(ledgerJournalTrans.parmAccount(), ledgerJournalTrans.CustVendBankAccountId);
        }

        while select specTrans
            where specTrans.SpecTableId     == ledgerJournalTrans.TableId &&
                  specTrans.SpecRecId       == ledgerJournalTrans.RecId
        {
            if (specTrans.vendTrans().Invoice)
            {
                settledInvoices += specTrans.vendTrans().Invoice + ', ';
            }
        }

        settledInvoices       = subStr(settledInvoices, 1, strLen(settledInvoices)-Value2);  // Remove the last ', '
        vendPostalAddress     = vendTable.postalAddress();
        vendPostalBankAddress = LogisticsLocationEntity::location2PostalAddress(vendBankAccount.Location);
        companyPostalAddress  = CompanyInfo::find().postalAddress();

        vendPaym = new VendPaym();

        vendPaym.ledgerJournalTrans              (ledgerJournalTrans);
        vendPaym.bankAccountTable                (bankAccountTable);
        vendPaym.custVendTable                   (vendTable);
        vendPaym.bankAccountMap                  (vendBankAccount);

        vendPaym.messageToSendersBank            (vendBankAccount.MsgToBank);
        vendPaym.paymAmountInForeignCurrency     (ledgerJournalTrans.amount());
        vendPaym.paymAmountInSendersCurrency     (CurrencyExchangeHelper::mstAmount(ledgerJournalTrans.amount(), ledgerJournalTrans.CurrencyCode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), UnknownNoYes::Unknown, ledgerJournalTrans.ExchRate));
        vendPaym.paymCurrencyCode                (Currency::currencyCodeISO(ledgerJournalTrans.CurrencyCode));
        vendPaym.paymDate                        (ledgerJournalTrans.TransDate);
        vendPaym.paymExchangeRate                (vendBankAccount.ExchRate);
        vendPaym.paymExchangeRateReference       (vendBankAccount.ExchRateRef);
        vendPaym.paymId                          (ledgerJournalTrans.PaymId);
        vendPaym.paymNote                        (ledgerJournalTrans.PaymentNotes);
        vendPaym.paymPurposeCode                 (ledgerJournalTrans.BankCentralBankPurposeCode ?
                                                     ledgerJournalTrans.BankCentralBankPurposeCode :
                                                     vendTable.BankCentralBankPurposeCode);
        vendPaym.paymPurposeText                 (ledgerJournalTrans.BankCentralBankPurposeText ?
                                                     ledgerJournalTrans.BankCentralBankPurposeText :
                                                     vendTable.BankCentralBankPurposeText);
        vendPaym.paymReference                   (ledgerJournalTrans.PaymReference);
        vendPaym.recieversBankTextCode           (vendBankAccount.VendPaymentTextCode);
        vendPaym.recieversBankAccount            (vendBankAccount.AccountNum);
        vendPaym.recieversBankAccountId          (vendBankAccount.AccountID);
        vendPaym.recieversBankName               (vendBankAccount.Name);
        vendPaym.recieversBankRegistrationNumber (vendBankAccount.RegistrationNum);

        vendPaym.recieversCompanyAddress         (vendPostalAddress.Address);
        vendPaym.recieversCompanyAddress1        (vendPaym.textLine(vendPostalAddress.Address, Line1));
        vendPaym.recieversCompanyAddress2        (vendPaym.textLine(vendPostalAddress.Address, Line2));
        vendPaym.recieversCompanyAddress3        (vendPaym.textLine(vendPostalAddress.Address, Line3));
        vendPaym.recieversBankAddress            (vendPostalBankAddress.Address);
        vendPaym.recieversBankAddress1           (vendPaym.textLine(vendPostalBankAddress.Address, Line1));
        vendPaym.recieversBankAddress2           (vendPaym.textLine(vendPostalBankAddress.Address, Line2));
        vendPaym.recieversBankAddress3           (vendPaym.textLine(vendPostalBankAddress.Address, Line3));
        vendPaym.recieversCountryRegionId        (vendPostalAddress.CountryRegionId);
        vendPaym.recieversZipCode                (vendPostalAddress.ZipCode);
        vendPaym.recieversBuilding_RU            (vendPostalAddress.BuildingCompliment);
        vendPaym.recieversEstate_RU              (LogisticsAddressHouseNumber_RU::findRecId(vendPostalAddress.HouseId_RU).Name);
        vendPaym.recieversFlat_RU                (LogisticsAddressFlatNumber_RU::findRecId (vendPostalAddress.FlatId_RU).Name);
        vendPaym.recieversSettlementId_RU        (LogisticsAddressDistrict::find_RU        (vendPostalAddress.District).Name);
        vendPaym.recieversStreetId_RU            (LogisticsAddressStreet_RU::findRecID     (vendPostalAddress.StreetId_RU).Name);
        vendPaym.recieversTownId_RU              (LogisticsAddressCity::find_RU            (vendPostalAddress.CityRecId).Name);
        vendPaym.recieversCountryRegionISOCode   (LogisticsAddressCountryRegion::find(vendPostalAddress.CountryRegionId).isOcode);
        vendPaym.recieversCompanyName            (vendTable.name());
        vendPaym.recieversIdentificationOfSender (vendTable.YourAccountNum);
        vendPaym.recieversInvoiceNumber          (settledInvoices);
        vendPaym.recieversSwiftAddress           (vendBankAccount.swiftNo);
        vendPaym.sendersBankAccount              (bankAccountTable.AccountNum);
        vendPaym.sendersBankRegistrationNumber   (bankAccountTable.RegistrationNum);
        vendPaym.sendersCompanyAddress           (companyPostalAddress.Address);
        vendPaym.sendersCompanyAddress1          (vendPaym.textLine(companyPostalAddress.Address, Line1));
        vendPaym.sendersCompanyAddress2          (vendPaym.textLine(companyPostalAddress.Address, Line2));
        vendPaym.sendersCompanyAddress3          (vendPaym.textLine(companyPostalAddress.Address, Line3));
        vendPaym.sendersCompanyName              (CompanyInfo::find().name());
        vendPaym.sendersInvoiceNumber            ();
        vendPaym.sendersIdentificationOfReciever (vendTable.AccountNum);
        vendPaym.sendersBanksIdentificationOfSender(bankAccountTable.CompanyPaymId);
        vendPaym.feeContractAccount              (bankAccountTable.FeeContractAccount);
        vendPaym.dateOfImportOfGoods             (ledgerJournalTrans.ImportDate);

        return vendPaym;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(
        JournalId           _journalNum,
        Voucher             _voucher,
        LineNum             _journalLineNum,
        LedgerJournalACType _ledgerACType,
        TransDate           _journalTransDate)
    {
        if (! BankPaymentOrderJour_RU::exist(_journalNum, _voucher, _journalLineNum, _ledgerACType, _journalTransDate))
            return checkFailed(strFmt("@GLS102329", _voucher));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePayment_RU</Name>
				<Source><![CDATA[
    static public void deletePayment_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        BankPaymentOrderJour_RU     bankPaymentOrderJour_RU;
        CustVendOutPaym             custVendOutPaym;
        LedgerJournalTrans          tmpTrans;
        BankClientOutPaymentLog_RU  bankClientLog;

        if (_ledgerJournalTrans)
        {
            ttsbegin;

            tmpTrans                = LedgerJournalTrans::findRecId(_ledgerJournalTrans.RecId, true);

            bankPaymentOrderJour_RU = tmpTrans.bankPaymentOrderJour_RU(true);

            if (bankPaymentOrderJour_RU)
            {
                switch (bankPaymentOrderJour_RU.LedgerACType)
                {
                    case LedgerJournalACType::Cust :
                        custVendOutPaym = CustVendOutPaym::newCustVendPaymModeTable(CustPaymModeTable::find(_ledgerJournalTrans.PaymMode));
                        custVendOutPaym.releasePaymentOrderNum_RU(_ledgerJournalTrans, bankPaymentOrderJour_RU.PaymentOrderNum);
                        break;
                    case LedgerJournalACType::Vend :
                        custVendOutPaym = CustVendOutPaym::newCustVendPaymModeTable(VendPaymModeTable::find(_ledgerJournalTrans.PaymMode));
                        custVendOutPaym.releasePaymentOrderNum_RU(_ledgerJournalTrans, bankPaymentOrderJour_RU.PaymentOrderNum);

                        if (tmpTrans.Prepayment && FactureTrans_RU::findLedgerJournalTrans('', 0, tmpTrans.RecId))
                        {
                            throw error(strFmt('%1 %2: %3 %4',
                                               "@SYS12371",
                                               _ledgerJournalTrans.Voucher,
                                               "@SYS24510",
                                               "@GLS113543"));
                        }
                        break;
                    default                        : // do nothing
                }

                update_recordset bankClientLog
                    setting PaymentRecId   = 0,
                            PaymentTableId = 0,
                            PaymStatus     = PaymOrderStatus_RU::Rejected
                    where bankClientLog.PaymentRecId   == bankPaymentOrderJour_RU.RecId &&
                          bankClientLog.PaymentTableId == bankPaymentOrderJour_RU.TableId;

                bankPaymentOrderJour_RU.delete();
                info(strFmt("@GLS102872", bankPaymentOrderJour_RU.PaymentOrderNum, bankPaymentOrderJour_RU.PaymentTransDate));
            }

            tmpTrans.BankChequeNum        = "";
            tmpTrans.PaymReference        = "";
            tmpTrans.NoEdit               = NoYes::No;
            tmpTrans.PaymentStatus        = CustVendPaymStatus::None;
            tmpTrans.BankRemittanceFileId = "";
            tmpTrans.doUpdate();

            if (CFMParameters::isPaymentRequestsEnabled())
            {
                CFMPaymentRequestPaymentLink::updatePaymReqJournalTransPaymentDocument(tmpTrans, '', dateNull());
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(
        JournalId           _journalNum,
        Voucher             _voucher,
        LineNum             _journalLineNum,
        LedgerJournalACType _ledgerACType,
        TransDate           _journalTransDate)
    {
        BankPaymentOrderJour_RU bankPaymentOrderJour;

        bankPaymentOrderJour = BankPaymentOrderJour_RU::find(_journalNum,
                                                             _voucher,
                                                             _journalLineNum,
                                                             _ledgerACType,
                                                             _journalTransDate);

        return (bankPaymentOrderJour.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static BankPaymentOrderJour_RU find(
        JournalId           _journalNum,
        Voucher             _voucher,
        LineNum             _journalLineNum,
        LedgerJournalACType _ledgerACType,
        TransDate           _journalTransDate,
        boolean             _update = false)
    {
        BankPaymentOrderJour_RU paymentOrderJour;
        boolean                 throwErrorIfFound;

        if (_journalNum && _voucher)
        {
            if (paymentOrderJour.tableAccessRight() == AccessRight::NoAccess)
            {
                throwErrorIfFound = true;
            }

            paymentOrderJour.selectForUpdate(_update);

            unchecked(Uncheck::TableSecurityPermission)
            {
                select firstonly paymentOrderJour
                    where paymentOrderJour.JournalNum       == _journalNum      &&
                          paymentOrderJour.Voucher          == _voucher         &&
                          paymentOrderJour.JournalLineNum   == _journalLineNum  &&
                          paymentOrderJour.LedgerACType     == _ledgerACType    &&
                          paymentOrderJour.JournalTransDate == _journalTransDate;
            }

            if (paymentOrderJour.RecId && throwErrorIfFound)
            {
                throw error(strFmt("@SYS316844", tablePName(BankPaymentOrderJour_RU)));
            }
        }

        return paymentOrderJour;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@GLS100640</DeveloperDocumentation>
	<Label>@GLS100640</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>PaymentOrderNum</TitleField1>
	<TitleField2>PaymOrderType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<AosAuthorization>CreateReadUpdateDelete</AosAuthorization>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>JournalNumIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>Bank</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>JournalNumIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymSpec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentOrderNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymentOrderNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalLineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerACType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalTransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS6928</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AmountCur</Name>
			<Label>@GLS101828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankAccountCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BankClient</Name>
			<Label>@GLS115265</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ElectronicPayment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>exportDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>exportFileName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BankClientDocumentType</Name>
			<Label>@SYS80739</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankClientDocumentTypeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DateGroup</Name>
			<Label>@SYS7402</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymentTransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentTransDueDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Fee</Name>
			<Label>@SYS9154</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CommBankAccountPayer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>YourCharges</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>YourCorrCharges</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS2952</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrintKPP</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymentOrderNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymOrderType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerACType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LedgerJournalLines</Name>
			<Label>@SYS28010</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalLineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalTransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OrderInCurrencyEssentials</Name>
			<Label>@GLS102705</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FreeFormat</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransTypeCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payer</Name>
			<Label>@GLS100924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNumPayer</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PayerBank</Name>
			<Label>@GLS101005</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankIdPayer</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymCodes</Name>
			<Label>@GLS102312</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymBaseCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymTypeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymBudgetReceiptClassCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymStatusCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymentType</Name>
			<Label>@GLS100557</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymSpec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurposeOfPayment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderOfPayment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankCurrencyTransferLog_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ElectronicPayment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankTransactionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UIN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymTaxPeriod</Name>
			<Label>@GLS105858</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymPeriodNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymDocNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Year</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymTaxPeriodDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymDocDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymPeriodCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Recipient</Name>
			<Label>@GLS101010</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNumRecipient</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyRecipient</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RecipientBank</Name>
			<Label>@GLS101006</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankIdRecipient</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS15217</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentTransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Resident</Name>
			<Label>@GLS102315</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkerResponsible</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankCentralBankPurposeCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNumForeignRecipient</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AccountNum</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNumPayer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AccountNum</ExtendedDataType>
			<Label>@GLS100568</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNumRecipient</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AccountNum</ExtendedDataType>
			<Label>@GLS100577</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BankAccountCurrency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@GLS103477</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankCentralBankPurposeCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankCentralBankPurposeCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankClientDocumentTypeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankClientDocumentTypeId_RU</ExtendedDataType>
			<Label>@SYS54213</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankCurrencyTransferLog_RU</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS102337</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankIdPayer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
			<Label>@GLS101005</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankIdRecipient</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
			<Label>@GLS103079</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankTransactionType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankTransactionType</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CommBankAccountPayer</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankAccount</ExtendedDataType>
			<Label>@GLS103475</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompanyRecipient</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyId</ExtendedDataType>
			<Label>@SYS10499</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CorrBankRecipient</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustVendPaymAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AccountNum</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ElectronicPayment</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS115065</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FreeFormat</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FreeText</ExtendedDataType>
			<Label>@GLS102701</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>JournalLineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LedgerJournalId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>JournalTransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LedgerACType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerJournalACType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderOfPayment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankOrderOfPayment_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymBaseCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymentOrderPaymBaseCode_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymBudgetReceiptClassCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymentOrderBudgetReceiptClassCode_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PaymDocDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymentOrderDocDate_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymDocNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymentOrderPaymDocNum_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentOrderNum</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>BankPaymentOrderBase_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PaymentTransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@GLS100559</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PaymentTransDueDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@GLS100628</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymMode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PaymOrderType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PaymOrderType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PaymPeriodCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PaymentOrderPeriodCode_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PaymPeriodNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymentOrderPeriodNumber_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymSpec</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPaymSpec</ExtendedDataType>
			<Label>@GLS100560</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymStatusCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymentOrderStatusCode_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PaymTaxPeriodDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymentOrderTaxPeriodDate_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymTypeCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymentOrderPaymTypeCode_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PrintKPP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@GLS102965</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurposeOfPayment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankCentralBankPurposeText</ExtendedDataType>
			<Label>@GLS100584</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RecipientRCOAD</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@GLS107033</Label>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransTypeCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankCentralBankTransTypeCur_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerResponsible</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmWorkerRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Year</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Yr</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>YourCharges</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@GLS103074</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>YourCorrCharges</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@GLS102285</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UIN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UIN_RU</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BankCurrencyTransferLog_RUIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BankCurrencyTransferLog_RU</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HcmWorkerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkerResponsible</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>JournalNumIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>JournalNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>JournalLineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LedgerACType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>JournalTransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BudgetClassCodeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PaymBudgetReceiptClassCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OrderNumDateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PaymentOrderNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PaymentTransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankAccountTable_Payer</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BankAccountTable_Payer</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankIdPayer</Name>
					<SourceEDT>CompanyBankAccountId</SourceEDT>
					<Field>BankIdPayer</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankAccountTable_Recipient</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BankAccountTable_Recipient</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankIdRecipient</Name>
					<SourceEDT>CompanyBankAccountId</SourceEDT>
					<Field>BankIdRecipient</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BankAccountTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankAccountTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankAccountTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankPaymentOrderJour_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentOrderNum</Name>
					<Field>PaymentOrderNum</Field>
					<RelatedField>PaymReference</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>Voucher</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankCentralBankPurpose</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BankCentralBankPurpose</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankCentralBankPurposeCode</Name>
					<SourceEDT>BankCentralBankPurposeCode</SourceEDT>
					<Field>BankCentralBankPurposeCode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankClientDocumentType_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BankClientDocumentType_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankClientDocumentTypeId</Name>
					<SourceEDT>BankClientDocumentTypeId_RU</SourceEDT>
					<Field>BankClientDocumentTypeId</Field>
					<RelatedField>TypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankCurrencyTransferLog_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankCurrencyTransferLog_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankCurrencyTransferLog_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankCurrencyTransferLog_RU_BankPaymentOrderJour_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankCurrencyTransferLog_RU</Name>
					<Field>BankCurrencyTransferLog_RU</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankTransType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BankTransType</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankTransactionType</Name>
					<SourceEDT>BankTransactionType</SourceEDT>
					<Field>BankTransactionType</Field>
					<RelatedField>BankTransType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransType</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DataArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CompanyRecipient</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<Field>CompanyRecipient</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_BankPaymentOrderJour_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerResponsible</Name>
					<Field>WorkerResponsible</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerJournalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalNum</Name>
					<SourceEDT>LedgerJournalId</SourceEDT>
					<Field>JournalNum</Field>
					<RelatedField>JournalNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymentOrderBudgetReceiptClassTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymentOrderBudgetReceiptClassTable_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymBudgetReceiptClassCode</Name>
					<SourceEDT>PaymentOrderBudgetReceiptClassCode_RU</SourceEDT>
					<Field>PaymBudgetReceiptClassCode</Field>
					<RelatedField>PaymentOrderBudgetReceiptClassCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PaymentOrderBudgetReceiptClassCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymentOrderPaymBaseCodeTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymentOrderPaymBaseCodeTable_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymBaseCode</Name>
					<SourceEDT>PaymentOrderPaymBaseCode_RU</SourceEDT>
					<Field>PaymBaseCode</Field>
					<RelatedField>PaymentOrderPaymBaseCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PaymentOrderPaymBaseCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymentOrderStatusTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymentOrderStatusTable_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymStatusCode</Name>
					<SourceEDT>PaymentOrderStatusCode_RU</SourceEDT>
					<Field>PaymStatusCode</Field>
					<RelatedField>PaymentOrderStatusCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PaymentOrderPaymStatusCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymentOrderTypeTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymentOrderTypeTable_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymTypeCode</Name>
					<SourceEDT>PaymentOrderPaymTypeCode_RU</SourceEDT>
					<Field>PaymTypeCode</Field>
					<RelatedField>PaymentOrderPaymTypeCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PaymentOrderPaymTypeCodeIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>