<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqProcessThreadList</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqProcessThreadList extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initServerName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>ServerName</c> field with the name of the AOS.
    /// </summary>
    void initServerName()
    {
        xSession    thisSession = new xSession();

        this.ServerName = thisSession.AOSName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a record and initializes the <c>SessionId</c> and <c>ServerName</c> fields.
    /// </summary>
    public void insert()
    {
        this.SessionId = sessionid();

        this.initServerName();

        this.BatchTaskRecId = BatchHeader::getCurrentBatchTask().RecId;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>beginProcess</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a new record in the <c>ReqProcessThreadList</c> table.
    /// </summary>
    /// <param name="_processId">
    ///    The ID of the scheduling process.
    /// </param>
    /// <param name="_threadId">
    ///    The ID of the current thread.
    /// </param>
    static void beginProcess(ReqProcessId         _processId,
                                    ReqProcessThreadId   _threadId)
    {
        ReqProcessThreadList       reqProcessThreadList;

        ttsbegin;

        if (!ReqProcessThreadList::find(_processId, _threadId))
        {
            reqProcessThreadList.ProcessId         = _processId;
            reqProcessThreadList.ThreadId          = _threadId;

            reqProcessThreadList.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a record in the <c>ReqProcessThreadList</c> table based on a process ID and thread ID.
    /// </summary>
    /// <param name="_processId">
    ///    The ID of the scheduling process.
    /// </param>
    /// <param name="_threadId">
    ///    The ID of the current thread.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that determines whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    ///    The <c>ReqProcessThreadList</c> record.
    /// </returns>
    public static ReqProcessThreadList find(ReqProcessId       _processId,
                                            ReqProcessThreadId _threadId,
                                            boolean            _forUpdate = false)
    {
        ReqProcessThreadList   reqProcessThreadList;

        reqProcessThreadList.selectForUpdate(_forUpdate);

        select firstonly reqProcessThreadList where
            reqProcessThreadList.ProcessId   == _processId &&
            reqProcessThreadList.ThreadId    == _threadId;

        return reqProcessThreadList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProcessIdAndSessionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record by the process id and session id.
    /// </summary>
    /// <param name = "_processId">The ID of the scheduling process.</param>
    /// <param name = "_sessionId">The ID of the session.</param>
    /// <returns>The found <c>ReqProcessThreadList</c> record.</returns>
    /// <remarks>Uniqueness of the result is not guaranteed as there in theory could be multiple records matching the criteria.
    /// </remarks>
    public static ReqProcessThreadList findByProcessIdAndSessionId(ReqProcessId _processId, SessionId _sessionId)
    {
        ReqProcessThreadList reqProcessThreadList;

        select reqProcessThreadList
            where reqProcessThreadList.ProcessId == _processId
               && reqProcessThreadList.SessionId == _sessionId;        

        return reqProcessThreadList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up all records related to a single master planning run.
    /// </summary>
    /// <param name = "_processId">The Process ID of the master planning run.</param>
    internal static void cleanUpProcess(ReqProcessId _processId)
    {
        ReqProcessThreadList threadList;

        delete_from threadList
            where threadList.ProcessId == _processId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || ReqEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForThread</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the record related to a single thread of a given master planning run.
    /// </summary>
    /// <param name = "_threadId">The Thread ID</param>
    /// <param name = "_processId">The Process ID</param>
    internal static void deleteForThread(ReqProcessThreadId _threadId, ReqProcessId _processId)
    {
        ReqProcessThreadList threadList;

        delete_from threadList
            where threadList.ProcessId == _processId 
                && threadList.ThreadId == _threadId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Req</ConfigurationKey>
	<DeveloperDocumentation>@SYS124254</DeveloperDocumentation>
	<FormRef>ReqProcessThreadList</FormRef>
	<Label>@SYS107481</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>ProcessId</TitleField1>
	<TitleField2>ThreadId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ProcessIdThreadIdIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>MasterPlanning</Modules>
	<PrimaryIndex>ProcessIdThreadIdIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProcessId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ThreadId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServerName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SessionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProcessId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ThreadId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServerName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SessionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ServerIdentification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ThreadId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServerName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SessionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProcessId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqProcessId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServerName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ServerName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SessionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SessionId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ThreadId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqProcessThreadId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BatchTaskRecId</Name>
			<AssetClassification>system metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProcessIdThreadIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProcessId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ThreadId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>