<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerValueZakat_SA</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerValueZakat_SA extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the table, and gets not exist warning message.
    /// </summary>
    /// <param name="_fiscalYear">
    /// The fiscal year of the <c>LedgerValueZakat_SA</c> table record.
    /// </param>
    /// <returns>
    /// true if the record exits; otherwise, false.
    /// </returns>
    public static boolean checkExist(LedgerFiscalYearZakat_SA  _fiscalYear)
    {
        boolean ret = true;

        if (_fiscalYear
            && ! LedgerValueZakat_SA::exist(_fiscalYear))
        {
            ret = checkFailed(strfmt(LedgerValueZakat_SA::txtNotExist(), _fiscalYear));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the table.
    /// </summary>
    /// <param name="_fiscalYear">
    /// The fiscal year of the <c>LedgerValueZakat_SA</c> table record.
    /// </param>
    /// <returns>
    /// true if the record exits; otherwise, false.
    /// </returns>
    public static boolean exist(LedgerFiscalYearZakat_SA  _fiscalYear)
    {
        return (_fiscalYear
            && (select firstonly RecId
                    from ledgerValueZakat_SA
                        where ledgerValueZakat_SA.FiscalYear == _fiscalYear).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in <c>LedgerValueZakat_SA</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>LedgerValueZakat_SA</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>LedgerValueZakat_SA</c> table; otherwise, an empty record.
    /// </returns>
    public static LedgerValueZakat_SA find(
        RecId               _recId,
        boolean             _forUpdate          = false,
        ConcurrencyModel    _concurrencyModel   = ConcurrencyModel::Auto)
    {
        LedgerValueZakat_SA ledgerValueZakat;

        ledgerValueZakat.selectForUpdate(_forUpdate);

        if (_forUpdate
            && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerValueZakat.concurrencyModel(_concurrencyModel);
        }

        select firstonly ledgerValueZakat
            where ledgerValueZakat.RecId == _recId;

        return ledgerValueZakat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByFiscalYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in <c>LedgerValueZakat_SA</c> table with specified fiscal year.
    /// </summary>
    /// <param name="_fiscalYear">
    /// The fiscal year of the <c>LedgerValueZakat_SA</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>LedgerValueZakat_SA</c> table; otherwise, an empty record.
    /// </returns>
    public static LedgerValueZakat_SA findByFiscalYear(
        LedgerFiscalYearZakat_SA    _fiscalYear,
        boolean                     _forUpdate          = false,
        ConcurrencyModel            _concurrencyModel   = ConcurrencyModel::Auto)
    {
        LedgerValueZakat_SA ledgerValueZakat;

        if (_fiscalYear)
        {
            ledgerValueZakat.selectForUpdate(_forUpdate);

            if (_forUpdate
                && _concurrencyModel != ConcurrencyModel::Auto)
            {
                ledgerValueZakat.concurrencyModel(_concurrencyModel);
            }

            select firstonly ledgerValueZakat
                where ledgerValueZakat.FiscalYear == _fiscalYear;
        }

        return ledgerValueZakat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertZakatValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record in <c>LedgerValueZakat_SA</c> table with specified fiscal year and amount.
    /// </summary>
    /// <param name="_fiscalYear">
    /// The fiscal year of the <c>LedgerValueZakat_SA</c> record.
    /// </param>
    /// <param name="_value">
    /// The amount value.
    /// </param>
    public static void insertZakatValue(
        LedgerFiscalYearZakat_SA    _fiscalYear,
        AmountCur                   _value)
    {
        LedgerValueZakat_SA ledgerValueZakat;

        ledgerValueZakat.FiscalYear     = _fiscalYear;
        ledgerValueZakat.Value          = _value;
        ledgerValueZakat.DiffValue      = _value;
        ledgerValueZakat.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the text if the table of <c>LedgerValueZakat_SA</c> record cannot be found.
    /// </summary>
    /// <returns>
    /// The not exist text.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS54432";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>SA</CountryRegionCodes>
	<DeveloperDocumentation>@SYS322161</DeveloperDocumentation>
	<Label>@SYS41043</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>FiscalYear</TitleField1>
	<TitleField2>Value</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>YearIdx</ClusteredIndex>
	<Modules>Ledger</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FiscalYear</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FiscalYear</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiffValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OldValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DiffValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FiscalYear</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerFiscalYearZakat_SA</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OldValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Value</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>YearIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>FiscalYear</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>