<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxationCodeTable_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxationCodeTable_BR extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (this.TaxType == TaxType_BR::Blank)
        {
            ret = checkFailed(strFmt("@SYS84753", fieldId2PName(tableNum(TaxationCodeTable_BR), fieldNum(TaxationCodeTable_BR, TaxType))));
        }

        if (this.FiscalValue == TaxFiscalValue_BR::Blank)
        {
            ret = checkFailed(strFmt("@SYS84753", fieldId2PName(tableNum(TaxationCodeTable_BR), fieldNum(TaxationCodeTable_BR, FiscalValue))));
        }

        if (this.TaxType == TaxType_BR::IPI)
        {
            if (!this.InputCode)
            {
                ret = checkFailed(strFmt("@SYS26332", fieldId2PName(tableNum(TaxationCodeTable_BR), fieldNum(TaxationCodeTable_BR, InputCode))));
            }

            if (!this.OutputCode)
            {
                ret = checkFailed(strFmt("@SYS26332", fieldId2PName(tableNum(TaxationCodeTable_BR), fieldNum(TaxationCodeTable_BR, OutputCode))));
            }

            if (!this.AtoCotepeTaxCode)
            {
                ret = checkFailed(strFmt("@SYS26332", fieldId2PName(tableNum(TaxationCodeTable_BR), fieldNum(TaxationCodeTable_BR, AtoCotepeTaxCode))));
            }
        }

        if (this.FromDate > this.ToDate)
        {
            ret = checkFailed("@SYS16982");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>asOf</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find <c>TaxationCodeTable_BR</c> by field RecId and verifies whether your range date is valid to <paramref name="_asOfDate"/> parameter.
    /// </summary>
    /// <param name="_taxationCode">
    ///  The recid value to find.
    /// </param>
    /// <param name="_asOfDate">
    ///  The date to validade <c>TaxationCodeTable_BR</c> range date.
    /// </param>
    /// <returns>
    ///  A <c>TaxationCodeTable_BR</c> buffer.
    /// </returns>
    public static TaxationCodeTable_BR asOf(recId _taxationCode, date _asOfDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        TaxationCodeTable_BR taxationCodeTable;

        select taxationCodeTable
            where taxationCodeTable.RecId == _taxationCode;

        if ((!taxationCodeTable.FromDate && !taxationCodeTable.ToDate)              ||
            (!taxationCodeTable.FromDate && taxationCodeTable.ToDate >= _asOfDate)  ||
            (!taxationCodeTable.ToDate && taxationCodeTable.FromDate <= _asOfDate)  ||
            (taxationCodeTable.FromDate && taxationCodeTable.ToDate
                && taxationCodeTable.FromDate <= _asOfDate && taxationCodeTable.ToDate >= _asOfDate))
        {
            return taxationCodeTable;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist (TaxType_BR        _taxType,
                                 TaxationCode_BR   _taxationCode)
    {
        boolean ret;

        if (_taxType && _taxationCode)
        {
            ret = (select firstonly RecId from taxationCodeTable_BR
                        index hint TaxationCodeIdx
                        where taxationCodeTable_BR.TaxType      == _taxType
                           && taxationCodeTable_BR.TaxationCode == _taxationCode).RecId != 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static TaxationCodeTable_BR find(TaxType_BR          _taxType,
                                            TaxationCode_BR     _taxationCode,
                                            boolean             _forUpdate = false)
    {
        TaxationCodeTable_BR taxationCodeTable;

        if (_taxType && _taxationCode)
        {
            if (_forUpdate)
            {
                taxationCodeTable.selectForUpdate(_forUpdate);
            }

            select taxationCodeTable
                where taxationCodeTable.TaxType == _taxType
                    && taxationCodeTable.TaxationCode == _taxationCode;
        }

        return taxationCodeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Find <c>TaxationCodeTable_BR</c> by field RecId
    /// </summary>
    /// <param name="_recId">
    ///  The recid value to find.
    /// </param>
    /// <param name="_forUpdate">
    ///  A boolean value that specifies whether the buffer is for update or not.
    /// </param>
    /// <returns>
    ///  A <c>TaxationCodeTable_BR</c> buffer.
    /// </returns>
    public static TaxationCodeTable_BR findRecId(recId      _recId,
                                                 boolean    _forUpdate = false)
    {
        TaxationCodeTable_BR taxationCodeTable;

        if (_recId)
        {
            if (_forUpdate)
            {
                taxationCodeTable.selectForUpdate(_forUpdate);
            }

            select firstonly taxationCodeTable
                where taxationCodeTable.RecId     == _recId;
        }

        return taxationCodeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysTableLookupForTaxationCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>SysTableLookup</c> object with taxation codes for specific tax type.
    /// </summary>
    /// <param name = "_formControl">
    /// <c>FormControl</c> object.
    /// </param>
    /// <param name = "_taxType">
    /// Tax type.
    /// </param>
    /// <returns>
    /// <c>SysTableLookup</c> object with taxation codes for specific tax type.
    /// </returns>
    public static SysTableLookup getSysTableLookupForTaxationCode(FormControl _formControl, TaxType_BR _taxType)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tablenum(TaxationCodeTable_BR), _formControl, true);
        Query query = new Query();
 
        sysTableLookup.addLookupfield(fieldnum(TaxationCodeTable_BR, TaxationCode), true);
 
        QueryBuildDataSource qbds = query.addDataSource(tablenum(TaxationCodeTable_BR));
        findOrCreateRange_W(qbds, fieldNum(TaxationCodeTable_BR, TaxType), queryValue(_taxType));
        qbds.addGroupByField(fieldnum(TaxationCodeTable_BR, TaxationCode));
        sysTableLookup.parmQuery(query);
 
        return sysTableLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupByTaxType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build a query using <c>_taxCode</c> and <c>_fiscalValue</c> to show in <c>_lookupCtrl</c>.
    /// </summary>
    /// <param name="_lookupCtrl">
    ///  Control to show the lookup.
    /// </param>
    /// <param name="_taxCode">
    ///  Tax code used to get the tax type
    /// </param>
    /// <param name="_fiscalValue">
    ///  TaxFiscalValue_BR to build query.
    /// </param>
    /// <param name="_taxType">
    ///  TaxType_BR to build query.
    /// </param>
    public static void lookupByTaxType(FormControl             _lookupCtrl,
                                            TaxCode                 _taxCode,
                                            TaxFiscalValue_BR       _fiscalValue  = TaxFiscalValue_BR::Blank,
                                            TaxType_BR              _taxType      = TaxType_BR::Blank)
    {
        TaxType_BR              taxType = (_taxType != TaxType_BR::Blank) ? _taxType : TaxTable::find(_taxCode).TaxType_BR;
        SysTableLookup          sysTableLookup;
        Query                   query                       = new Query();
        QueryBuildDataSource    queryBuildDataSource        = query.addDataSource(tableNum(TaxationCodeTable_BR));
        QueryBuildRange         queryBuildRangeTaxType      = queryBuildDataSource.addRange(fieldNum(TaxationCodeTable_BR, TaxType));

        sysTableLookup = SysTableLookup::newParameters(tableNum(TaxationCodeTable_BR), _lookupCtrl);

        queryBuildRangeTaxType.value(queryValue(taxType));

        if (_fiscalValue != TaxFiscalValue_BR::Blank)
        {
            queryBuildDataSource.addRange(fieldNum(TaxationCodeTable_BR, FiscalValue)).value(queryValue(_fiscalValue));
        }

        sysTableLookup.addLookupfield(fieldNum(TaxationCodeTable_BR, TaxationCode));
        sysTableLookup.addLookupfield(fieldNum(TaxationCodeTable_BR, Description));
        sysTableLookup.addLookupfield(fieldNum(TaxationCodeTable_BR, FiscalValue));
        sysTableLookup.addLookupfield(fieldNum(TaxationCodeTable_BR, TaxType));

        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>PISCOFINSDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the direction <c>TaxationCodeDirection_BR</c> of taxation code.
    /// </summary>
    /// <param name="_taxationCode">
    /// The taxation code.
    /// </param>
    /// <returns>
    /// Returns the direction related with taxation code.
    /// </returns>
    public static TaxationCodeDirection_BR PISCOFINSDirection(TaxationCode_BR _taxationCode)
    {
        switch (_taxationCode)
        {
            case '01':
            case '02':
            case '03':
            case '04':
            case '05':
            case '06':
            case '07':
            case '08':
            case '09':
            case '49':
                return TaxationCodeDirection_BR::Outgoing;
            case '50':
            case '51':
            case '52':
            case '53':
            case '54':
            case '55':
            case '56':
            case '60':
            case '61':
            case '62':
            case '63':
            case '64':
            case '65':
            case '66':
            case '67':
            case '70':
            case '71':
            case '72':
            case '73':
            case '74':
            case '75':
            case '98':
                return TaxationCodeDirection_BR::Incoming;
            default:
                return TaxationCodeDirection_BR::NotApplicable;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExemptCodeRequired</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns if the taxation code associated to the tax type requires an exempt code.
    /// </summary>
    /// <param name="_taxType">
    ///     The tax type associated to the taxation code.
    /// </param>
    /// <param name="_taxationCode">
    ///     The taxation code to be checked.
    /// </param>
    /// <returns>
    ///     True if the exempt code is required, otherwise false.
    /// </returns>
    public static boolean isExemptCodeRequired(TaxType_BR _taxType, TaxationCode_BR _taxationCode)
    {
        const str IPITaxationCodeList = '02, 04, 05, 52, 54, 55';

        boolean isRequired = false;

        if (_taxType == TaxType_BR::IPI
            && strScan(IPITaxationCodeList, _taxationCode, 1, strLen(IPITaxationCodeList)))
        {
            isRequired = true;
        }
        return isRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxationCodeExcludedFromRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the taxation code for a specific tax type should be excluded from the revevue
    /// </summary>
    /// <param name="_taxType">
    /// The tax type
    /// </param>
    /// <param name="_taxationCode">
    /// The taxation code
    /// </param>
    /// <returns>
    /// True if the taxation code should be excluded from the revevue, otherwise false.
    /// </returns>
    public static boolean isTaxationCodeExcludedFromRevenue(TaxType_BR _taxType, TaxationCode_BR _taxationCode)
    {
        if (_taxType == TaxType_BR::PIS || _taxType == TaxType_BR::COFINS)
        {
            switch (_taxationCode)
            {
                case '49':
                case '99':
                    return true;
                default:
                    return false;
            }
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceByTaxType</Name>
				<Source><![CDATA[
    /// <summary>
    ///	Displays a lookup from <c>TaxationCodeTable_BR</c> reference control and return the selected records
    /// </summary>
    /// <param name = "_formReferenceControl">TaxationCode reference control</param>
    /// <returns>The <c>TaxationCodeTable_BR</c> record</returns>
    public static Common lookupReferenceByTaxType(FormReferenceControl _formReferenceControl, TaxType_BR _taxType)
    {
        Common                 common;
        Query                  query = new Query();

        SysReferenceTableLookup lookup = SysReferenceTableLookup::newParameters(tablenum(TaxationCodeTable_BR), _formReferenceControl);

        lookup.addLookupfield(fieldnum(TaxationCodeTable_BR, TaxType));
        lookup.addLookupfield(fieldnum(TaxationCodeTable_BR, TaxationCode));
        lookup.addLookupfield(fieldnum(TaxationCodeTable_BR, Description));
        lookup.addLookupfield(fieldnum(TaxationCodeTable_BR, FiscalValue));

        query.addDataSource(tableNum(TaxationCodeTable_BR)).addRange(fieldNum(TaxationCodeTable_BR, TaxType)).value(queryValue(_taxType));
        lookup.parmQuery(query);

        common = lookup.performFormLookup();

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveReferenceByTaxType</Name>
				<Source><![CDATA[
	/// <summary>
    /// Returns the <c>TaxationCodeTable_BR</c> record from text value from TaxationCodeTable_BR reference control
    /// </summary>
    /// <param name = "_formReferenceControl">TaxationCode reference control</param>
    /// <returns>The <c>TaxationCodeTable_BR</c> record</returns>
    public static Common resolveReferenceByTaxType(FormReferenceControl _formReferenceControl, TaxType_BR _taxType)
    {
        Common                  ret;
        TaxationCode_BR         taxationCode_BR;

        // Get the text that the user entered into the control to see if there is a match to display
        taxationCode_BR = _formReferenceControl.filterValue(AbsoluteFieldBinding::construct(fieldStr(TaxationCodeTable_BR, TaxationCode), tableStr(TaxationCodeTable_BR))).value();

        if (taxationCode_BR)
        {
            return TaxationCodeTable_BR::find(_taxType, taxationCode_BR);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>BR</CountryRegionCodes>
	<DeveloperDocumentation>@GLS63488</DeveloperDocumentation>
	<Label>@GLS60378</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>TaxType</TitleField1>
	<TitleField2>TaxationCode</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>TaxationCodeIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxationCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AtoCotepeTaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InputCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OutputCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxationCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Label>AAAAA</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxationCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxationCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AtoCotepeTaxCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InputOutput</Name>
			<Label>@GLS60406</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InputCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OutputCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SpedTaxCode</Name>
			<Label>@GLS60378</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxationCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Validity</Name>
			<Label>@SYS35164</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxationCodeFiscalValue</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxationCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AtoCotepeTaxCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxationCode_BR</ExtendedDataType>
			<Label>@GLS60399</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@SYS6303</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FiscalValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>TaxFiscalValue_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InputCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>char</ExtendedDataType>
			<Label>@GLS60402</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OutputCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>char</ExtendedDataType>
			<Label>@GLS60404</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxationCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxationCode_BR</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>TaxType_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToDate</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxationCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxationCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FiscalValue</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>