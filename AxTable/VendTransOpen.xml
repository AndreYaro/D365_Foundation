<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendTransOpen</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendTransOpen extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>custVendTransOpenInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>VendDocumentLineInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// The <c>VendDocumentLineInterface</c> object.
    /// </returns>
    public CustVendTransOpenInterface custVendTransOpenInterface()
    {
        return this.CustVendTransOpen::custVendTransOpenInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditThirdPartyBankAccountId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a Boolean value that is used to set the value of the <c>AllowEdit</c> property in the
    /// <c>ThirdPartyBankAccountId</c> field.
    /// </summary>
    /// <returns>
    /// true if the <c>PromissoryNoteID</c> field value in the <c>VendTrans</c> table record is empty;
    /// otherwise, false.
    /// </returns>
    public boolean allowEditThirdPartyBankAccountId()
    {
        VendTrans vendTrans;
        VendTransOpen vendTransOpen;

        select firstonly * from vendTransOpen
            join PromissoryNoteID from vendTrans
            where vendTransOpen.RefRecId == vendTrans.RecId
               && vendTransOpen.RecId == this.RecId;

        return vendTrans.PromissoryNoteID == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankInvoiceId_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets invoice id from electronic payment
    /// </summary>
    /// <returns>
    /// The invoice Id
    /// </returns>
    display EPBankInvoiceId_BR bankInvoiceId_BR()
    {
        return VendTransEPRemit_BR::find(this.AccountNum, this.RecId).BankInvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSettlementAmount</Name>
				<Source><![CDATA[
    public AmountCur calcSettlementAmount(VendTransOpen _custVendTransOpen)
    {
        TaxTrans taxTrans;
        VendTrans vendTrans;
        VendInvoiceJour vendInvoiceJour;
        VendInvoiceTrans vendInvoiceTrans;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTrans_Project projLedgerJournalTrans;
        AmountCur settleAmount = 0;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            select AccountNum, SettleAmountCur, Voucher, TransDate from vendTrans
                where vendTrans.RecId == _custVendTransOpen.RefRecId
                outer join RecId from ledgerJournalTrans
                    where ledgerJournalTrans.VendTransId == vendTrans.RecId
                outer join isPwp, ReadyForPayment from projLedgerJournalTrans
                    where projLedgerJournalTrans.RefRecId == ledgerJournalTrans.RecId;

            // If the source is an invoice journal
            if (projLedgerJournalTrans)
            {
                if (!projLedgerJournalTrans.IsPwp || projLedgerJournalTrans.ReadyForPayment == NoYesCombo::Yes)
                {
                    settleAmount = _custVendTransOpen.AmountCur;
                }
            }
            else
            {
                // The source is a purchase invoice
                select sum(LineAmount), sum(psaRetainageAmount), sum(DiscAmount), sum(psaReleaseAmount) from vendInvoiceTrans
                    where vendInvoiceTrans.ReadyForPayment == NoYesCombo::Yes
                    exists join vendInvoiceJour
                        where vendInvoiceJour.PurchId == vendInvoiceTrans.PurchID
                            && vendInvoiceJour.InvoiceId == vendInvoiceTrans.InvoiceId
                            && vendInvoiceJour.InvoiceDate == vendInvoiceTrans.InvoiceDate
                            && vendInvoiceJour.NumberSequenceGroup == vendInvoiceTrans.NumberSequenceGroup
                            && vendInvoiceJour.InternalInvoiceId == vendInvoiceTrans.InternalInvoiceId
                            && vendInvoiceJour.LedgerVoucher == vendTrans.Voucher
                            && vendInvoiceJour.InvoiceAccount == vendTrans.AccountNum
                            && vendInvoiceJour.InvoiceDate == vendTrans.TransDate;
               
                VendInvoiceTrans vendInvoiceTrans_NonPWP;

                if (ProjVendSettleTransactionsSearchFlight::instance().isEnabled())
                {
                    select sum(LineAmount), sum(DiscAmount) from vendInvoiceTrans_NonPWP
                        where vendInvoiceTrans_NonPWP.ReadyForPayment == NoYesCombo::No
                            && vendInvoiceTrans_NonPWP.IsPwp == NoYes::No
                        exists join vendInvoiceJour
                            where vendInvoiceJour.PurchId == vendInvoiceTrans_NonPWP.PurchID
                                && vendInvoiceJour.InvoiceId == vendInvoiceTrans_NonPWP.InvoiceId
                                && vendInvoiceJour.InvoiceDate == vendInvoiceTrans_NonPWP.InvoiceDate
                                && vendInvoiceJour.NumberSequenceGroup == vendInvoiceTrans_NonPWP.NumberSequenceGroup
                                && vendInvoiceJour.InternalInvoiceId == vendInvoiceTrans_NonPWP.InternalInvoiceId
                                && vendInvoiceJour.LedgerVoucher == vendTrans.Voucher
                                && vendInvoiceJour.InvoiceAccount == vendTrans.AccountNum
                                && vendInvoiceJour.InvoiceDate == vendTrans.TransDate;
                }

                if (vendInvoiceTrans)
                {
                    select sum(TaxAmount) from taxTrans
                        where taxTrans.Voucher == vendTrans.Voucher
                            && taxTrans.TransDate == vendTrans.TransDate;
                }
                
                settleAmount -= vendInvoiceTrans.LineAmount + vendInvoiceTrans_NonPWP.LineAmount + taxTrans.TaxAmount - vendInvoiceTrans.psaRetainageAmount + vendInvoiceTrans.psaReleaseAmount - vendInvoiceTrans.DiscAmount - vendInvoiceTrans_NonPWP.DiscAmount + vendTrans.SettleAmountCur;
            }
        }

        return settleAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPwpEnabled</Name>
				<Source><![CDATA[
    public boolean checkPwpEnabled(VendTransOpen _custVendTransOpen)
    {
        VendTrans vendTrans;
        VendInvoiceJour vendInvoiceJour;
        VendInvoiceTrans vendInvoiceTrans;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTrans_Project projLedgerJournalTrans;
        boolean isPwp;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            // There are two sources of vendor transactions that can have pay-when-paid,
            // purchase invoices and invoice journals. We use outer joins to check both
            // sources in the same select.

            select firstonly RecId from vendTrans
                where vendTrans.RecId == _custVendTransOpen.RefRecId
                outer join RecId from vendInvoiceJour
                    where vendInvoiceJour.LedgerVoucher == vendTrans.Voucher &&
                        vendInvoiceJour.InvoiceAccount == vendTrans.AccountNum &&
                        vendInvoiceJour.InvoiceDate == vendTrans.TransDate
                outer join RecId from vendInvoiceTrans
                    where vendInvoiceTrans.PurchID == vendInvoiceJour.PurchId &&
                        vendInvoiceTrans.InvoiceId == vendInvoiceJour.InvoiceId&&
                        vendInvoiceTrans.InvoiceDate == vendInvoiceJour.InvoiceDate &&
                        vendInvoiceTrans.NumberSequenceGroup == vendInvoiceJour.NumberSequenceGroup &&
                        vendInvoiceTrans.InternalInvoiceId == vendInvoiceJour.InternalInvoiceId &&
                        vendInvoiceTrans.IsPwp
                outer join RecId from ledgerJournalTrans
                    where ledgerJournalTrans.VendTransId == vendTrans.RecId
                outer join RecId from projLedgerJournalTrans
                    where projLedgerJournalTrans.RefRecId == ledgerJournalTrans.RecId &&
                        projLedgerJournalTrans.IsPwp;

            if (vendInvoiceTrans || projLedgerJournalTrans)
            {
                isPwp = true;
            }
        }

        return isPwp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAgreementHeaderDeal_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the agreement id of currency transfer deal.
    /// </summary>
    /// <returns>
    /// The agreement id.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display PurchAgreementId displayAgreementHeaderDeal_RU()
    {
        PurchAgreementId purchAgreementId;
        VendTrans vendTrans;
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            vendTrans = this.vendTrans();
            purchAgreementId = PurchAgreementHeaderExt_RU::find(
                BankCurrencyTransferLog_RU::findByTransferId(vendTrans.vendTrans_W().BankCurrencyTransferId_RU).AgreementHeaderExt).AgreementId;
        }

        return purchAgreementId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBankAdvancedTransType_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction extended type of currency transfer deal.
    /// </summary>
    /// <returns>
    /// The transaction extended type.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display BankAdvancedTransType_RU displayBankAdvancedTransType_RU()
    {
        BankAdvancedTransType_RU bankAdvancedTransType;
        VendTrans vendTrans;
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            vendTrans = this.vendTrans();
            bankAdvancedTransType = BankCurrencyTransferLog_RU::findByTransferId(vendTrans.vendTrans_W().BankCurrencyTransferId_RU).BankAdvancedTransType;
        }

        return bankAdvancedTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBankCurrencyDealCourse_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the exchange rate of currency transfer deal.
    /// </summary>
    /// <returns>
    /// The exchange rate.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display BankCurrencyDealCourse_RU displayBankCurrencyDealCourse_RU()
    {
        BankCurrencyDealCourse_RU bankCurrencyDealCourse;
        VendTrans vendTrans;
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            vendTrans = this.vendTrans();
            bankCurrencyDealCourse = BankCurrencyTransferLog_RU::findByTransferId(vendTrans.vendTrans_W().BankCurrencyTransferId_RU).bankCurrencyDealCourse();
        }

        return bankCurrencyDealCourse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBankEntryAccountId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank account id for cash inflow of currency transfer deal.
    /// </summary>
    /// <returns>
    /// The bank account id for cash inflow.
    /// </returns>
    display BankAccountID displayBankEntryAccountId_RU()
    {
        BankAccountID bankAccountID;
        VendTrans vendTrans;
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            vendTrans = this.vendTrans();
            bankAccountID = BankCurrencyTransferLog_RU::findByTransferId(vendTrans.vendTrans_W().BankCurrencyTransferId_RU).BankEntryAccountID;
        }

        return bankAccountID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBankSpecAccountId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank account id of currency transfer deal.
    /// </summary>
    /// <returns>
    /// The bank account id.
    /// </returns>
    display BankAccountID displayBankSpecAccountId_RU()
    {
        BankAccountID bankAccountID;
        VendTrans vendTrans;
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            vendTrans = this.vendTrans();
            bankAccountID = BankCurrencyTransferLog_RU::findByTransferId(vendTrans.vendTrans_W().BankCurrencyTransferId_RU).BankSpecAccountId;
        }

        return bankAccountID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTransferCurrency_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the currency code of currency transfer deal.
    /// </summary>
    /// <returns>
    /// The currency code.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display CurrencyCode displayTransferCurrency_RU()
    {
        CurrencyCode currencyCode;
        VendTrans vendTrans;
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            vendTrans = this.vendTrans();
            currencyCode = BankCurrencyTransferLog_RU::findByTransferId(vendTrans.vendTrans_W().BankCurrencyTransferId_RU).TransferCurrency;
        }

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVendDealAccount_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the foreign counteragent of currency transfer deal.
    /// </summary>
    /// <returns>
    /// The foreign counteragent.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display VendAccount displayVendDealAccount_RU()
    {
        VendAccount vendAccount;
        VendTrans vendTrans;
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            vendTrans = this.vendTrans();
            vendAccount = BankCurrencyTransferLog_RU::findByTransferId(vendTrans.vendTrans_W().BankCurrencyTransferId_RU).VendDealAccount;
        }

        return vendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalendarDerivation_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an object of <c>PaymCalendarIDerivationSource</c> related to this transaction.
    /// </summary>
    /// <returns>
    /// An instance of <c>PaymCalendarIDerivationSource</c> for this transaction.
    /// </returns>
    public PaymCalendarIDerivationSource getCalendarDerivation_BR()
    {
        VendInvoiceJour vendInvoiceJour;
        VendTrans vendTrans;

        select firstonly vendInvoiceJour
            exists join vendTrans
            where vendInvoiceJour.LedgerVoucher == vendTrans.Voucher
                && vendInvoiceJour.InvoiceAccount == vendTrans.AccountNum
                && vendInvoiceJour.InvoiceDate == vendTrans.TransDate
                && vendTrans.RecId == this.RefRecId;

        return PaymCalendarSourceVendInvoiceJournal::newCalendarSource(vendInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashDiscAlreadyTaken</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cash discount amount taken for the current open transaction in the transaction currency.
    /// </summary>
    /// <returns>
    /// The cash discount amount taken in the transaction currency.
    /// </returns>
    public CashDiscAmount getCashDiscAlreadyTaken()
    {
        VendSettlement vendSettlement;

        changecompany(this.company())
        {
            select sum(UtilizedCashDisc) from vendSettlement
                where vendSettlement.TransRecId == this.RefRecId
                   && vendSettlement.DueDate == this.DueDate
                   && vendSettlement.CanBeReversed == true;
        }

        return vendSettlement.UtilizedCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashDiscAmountToTake</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cash discount amount to take for the current open transaction in the transaction currency.
    /// </summary>
    /// <param name="_cashDiscGranted">
    /// The discount amount granted for the curent open transaction.
    /// </param>
    /// <returns>
    /// The cash discount amount to take in the transaction currency.
    /// </returns>
    public CashDiscAmount getCashDiscAmountToTake(CashDiscAmount _cashDiscGranted)
    {
        CashDiscAmount cashDiscToTake;
        CustVendCashDiscountHelper cashDiscountHelper;

        cashDiscountHelper = CustVendCashDiscountHelper::construct(this);
        cashDiscountHelper.parmFullCashDiscountForTier(_cashDiscGranted);
        cashDiscToTake = cashDiscountHelper.determineCashDiscForOpenAmount();

        return cashDiscToTake;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrevSettledAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount already settled for the current open transaction in the transaction currency.
    /// </summary>
    /// <returns>
    /// The amount already settled in the transaction currency.
    /// </returns>
    public AmountCur getPrevSettledAmount()
    {
        VendSettlement vendSettlement;

        changecompany(this.company())
        {
            select sum(SettleAmountCur) from vendSettlement
                where vendSettlement.TransRecId == this.RefRecId
                && vendSettlement.DueDate == this.DueDate
                && vendSettlement.CanBeReversed == true;
        }

        return vendSettlement.SettleAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void insert()
    {
        VendTrans vendTrans;
        CurrencyExchangeHelper currencyExchangeHelper;

        if (this.validateWrite())
        {
            if (TaxParameters::find().CashDiscOnInvoice)
            {
                this.UseCashDisc = UseCashDisc::Never;
            }
            else
            {
                this.UseCashDisc = VendTable::find(this.AccountNum).UseCashDisc;
            }

            if (BankLCImportFeatureChecker::checkBankLCImportEnabled() && this.BankLCImportLine)
            {
                // For Letter of Credit related transaction, the Cash Discount is not allowed.
                this.UseCashDisc = UseCashDisc::Never;
            }

            if (Ledger::reportingCurrency() && this.ReportingCurrencyAmount == 0)
            {
                select CurrencyCode, AmountCur, ReportingCurrencyCrossRate, ExchRate, ExchRateSecond, ReportingCurrencyExchRate, ReportingCurrencyExchRateSecondary 
                    from vendTrans
                        where vendTrans.RecId == this.RefRecId;
                
                currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), this.TransDate);
                currencyExchangeHelper.parmExchangeRate1(vendTrans.ExchRate);
                currencyExchangeHelper.parmExchangeRate2(vendTrans.ExchRateSecond);

                if (vendTrans.ReportingCurrencyCrossRate != 0)
                {
                    currencyExchangeHelper.parmReportingExchangeRate1(vendTrans.ReportingCurrencyCrossRate);
                }
                else
                {
                    currencyExchangeHelper.parmReportingExchangeRate1(vendTrans.ReportingCurrencyExchRate);
                    currencyExchangeHelper.parmReportingExchangeRate2(vendTrans.ReportingCurrencyExchRateSecondary);
                }

                if (currencyExchangeHelper.parmReportingExchangeRate1() != 0)
                {
                    this.ReportingCurrencyAmount = currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(vendTrans.CurrencyCode, this.AmountCur);
                }
            }

            if (this.AmountCur || this.AmountMST)
            {
                super();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interestAmountPerDay_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the interest amount per day for a given amount.
    /// </summary>
    /// <returns>
    /// Interest amount per day.
    /// </returns>
    display FinInterestAmount_BR interestAmountPerDay_BR()
    {
        VendInterestSetup_BR interestSetup;
        FinInterestAmount_BR amount;

        if (this.InterestCode_BR)
        {
            interestSetup = VendInterestSetup_BR::find(this.InterestCode_BR);
            amount = InterestCalculator_BR::interestAmountPerDay(interestSetup, this.AmountMST);
        }
        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interestAmountPerMonth_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the interest amount per month for a given amount.
    /// </summary>
    /// <returns>
    /// Interest amount per month.
    /// </returns>
    display FinInterestAmount_BR interestAmountPerMonth_BR()
    {
        VendInterestSetup_BR interestSetup;
        FinInterestAmount_BR amount;

        if (this.InterestCode_BR)
        {
            interestSetup = VendInterestSetup_BR::find(this.InterestCode_BR);
            amount = InterestCalculator_BR::interestAmountPerMonth(interestSetup, this.AmountMST);
        }
        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interestFine_BR</Name>
				<Source><![CDATA[
    display InterestAmountCur interestFine_BR()
    {
        InterestAmountCur interest;

        if (!hasFieldAccess(tableNum(VendTransOpen), fieldNum(VendTransOpen, InterestAmountPaymCur_BR), AccessType::View) ||
            !hasFieldAccess(tableNum(VendTransOpen), fieldNum(VendTransOpen, FineAmountPaymCur_BR), AccessType::View))
        {
            throw error("@SYS57330"); // Insufficient rights
        }
        interest = this.InterestAmountPaymCur_BR + this.FineAmountPaymCur_BR;

        return (interest);
    }

]]></Source>
			</Method>
			<Method>
				<Name>interestPctPerMonth_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the interest percentage per month.
    /// </summary>
    /// <returns>
    /// Interest percentage per month.
    /// </returns>
    display InterestPct_BR interestPctPerMonth_BR()
    {
        VendInterestSetup_BR interestSetup;
        InterestPct_BR pct;

        if (this.InterestCode_BR)
        {
            interestSetup = VendInterestSetup_BR::find(this.InterestCode_BR);
            pct = InterestCalculator_BR::interestPctPerMonth(interestSetup);
        }
        return pct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextCashDiscAmount</Name>
				<Source><![CDATA[
    display CashDiscAmount nextCashDiscAmount()
    {
        return VendTransCashDisc::findCashDisc(this.TableId, this.RecId, min(this.CashDiscDate, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))).CashDiscAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextCashDiscDate</Name>
				<Source><![CDATA[
    display CashDiscdate nextCashDiscDate()
    {
        return VendTransCashDisc::findCashDisc(this.TableId, this.RecId, min(this.CashDiscDate, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))).CashDiscdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainAmountCashDisc</Name>
				<Source><![CDATA[
    AmountCur remainAmountCashDisc(DiscDate _discDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), DiscGraceDays _discGraceDays = 0)
    {
        return this.transOpenData().remainAmountCashDisc(_discDate, _discGraceDays);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCashDisc</Name>
				<Source><![CDATA[
    // There is a similar method in Table.Method CustTransOpen.setCashDisc
    void setCashDisc(TransDate _transDate, DiscGraceDays _graceDays = 0)
    {
        VendTransCashDisc vendTransCashDisc = VendTransCashDisc::findByUseCashDisc(
                                                                                    this.TableId,
                                                                                    this.RecId,
                                                                                    this.UseCashDisc,
                                                                                    _transDate,
                                                                                    _graceDays);

        if (vendTransCashDisc.RecId && vendTransCashDisc.CashDiscDue == CashDiscDue::CashDisc)
        {
            this.CashDiscDate = vendTransCashDisc.CashDiscdate;
            this.PossibleCashDisc = vendTransCashDisc.CashDiscAmount;
        }
        else
        {
            this.CashDiscDate = dateNull();
            this.PossibleCashDisc = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transOpenData</Name>
				<Source><![CDATA[
    public VendTransOpenData transOpenData()
    {
        return CustVendTransOpenData::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    void update()
    {
        VendTransOpen firstVendTransOpen;
        VendTrans vendTrans;
        CurrencyExchangeHelper currencyExchangeHelper;
        VendTransOpen this_Orig = this.orig();

        ttsbegin;
        if (this.DueDate != this.orig().DueDate)
        {
            select RefRecId from firstVendTransOpen
            order by DueDate
            where firstVendTransOpen.RefRecId == this.RefRecId;

            // if it is the custTransOpen with the lowest dueDate
            if (this.RecId == firstVendTransOpen.RecId)
            {
                select forupdate vendTrans
                where vendTrans.RecId == this.RefRecId;

                vendTrans.DueDate = this.DueDate;
                vendTrans.update();

                // We need to update the records in the ProjTransPosting corresponding to the voucher number
                // in the VendTrans to reflect the change in the vend date
                VendVoucher::updateProjTransPosting(vendTrans.DueDate, vendTrans.Voucher, ProjPaymentStatus::ExpectedPayment);

                VendPromissoryNoteJour::updateDueDate(vendTrans.PromissoryNoteID,vendTrans.DueDate);
            }

            VendTransCashDisc::updateCashDiscountDueDate(this);
        }

        if (Ledger::reportingCurrency() && (this_Orig.AmountMST != this.AmountMST && this_Orig.ReportingCurrencyAmount == this.ReportingCurrencyAmount))
        {
            // update when Mst amount has been changed, but reporting has not
            select CurrencyCode, AmountCur, ReportingCurrencyCrossRate, ExchRate, ExchRateSecond, ReportingCurrencyExchRate, ReportingCurrencyExchRateSecondary 
                from vendTrans
                    where vendTrans.RecId == this.RefRecId;

            currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), this.TransDate);
            currencyExchangeHelper.parmExchangeRate1(vendTrans.ExchRate);
            currencyExchangeHelper.parmExchangeRate2(vendTrans.ExchRateSecond);

            if (vendTrans.ReportingCurrencyCrossRate != 0)
            {
                currencyExchangeHelper.parmReportingExchangeRate1(vendTrans.ReportingCurrencyCrossRate);                
            }
            else
            {
                currencyExchangeHelper.parmReportingExchangeRate1(vendTrans.ReportingCurrencyExchRate);
                currencyExchangeHelper.parmReportingExchangeRate2(vendTrans.ReportingCurrencyExchRateSecondary);
            }

            this.ReportingCurrencyAmount = currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(vendTrans.CurrencyCode, this.AmountCur);
        }

        this.CovStatus = 0;

        if (this.validateWrite())
        {
            if (CFMParameters::isPaymentRequestsEnabled() && this.AmountCur != this.orig().AmountCur)
            {
                CFMPaymentRequestTable::setOutdatedBySource(CFMPaymentRequestSourceType::VendInvoice, this.RecId, this.AmountCur == 0);
            }

            super();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerCov</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates cash flow forecasts for the <c>VendTransOpen</c> record.
    /// </summary>
    /// <param name = "_ledgerCoverage">The cash flow forecasting calculations.</param>
    public void updateLedgerCov(LedgerCoverage _ledgerCoverage)
    {
        LedgerCoverage ledgerCoverage = _ledgerCoverage;
        VendTrans vendTrans = this.vendTrans();
    
        if (!this.shouldProcessForLedgerCov(vendTrans))
        {
            return;
        }

        ledgerCoverage.init(this);

        CustVendTransOpenLedgerCovType custVendTransOpenLedgerCovType = CustVendTransOpenLedgerCovType::newForDocument(ledgerCoverage, vendTrans, this);
        custVendTransOpenLedgerCovType.updateLedgerCov();
                
        ledgerCoverage.endCov();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldProcessForLedgerCov</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should process for cash flow forecasting.
    /// </summary>
    /// <param name = "_vendTrans">The vendor transaction.</param>
    /// <returns>True when the open vendor transaction should be processed; otherwise false.</returns>
    protected boolean shouldProcessForLedgerCov(VendTrans _vendTrans)
    {
        boolean shouldProcessForLedgerCov = true;

        LedgerJournalTrans invoiceRegisterLedgerJournalTrans;
        select firstonly invoiceRegisterLedgerJournalTrans
            where invoiceRegisterLedgerJournalTrans.VendTransId == _vendTrans.RecId
                && invoiceRegisterLedgerJournalTrans.LedgerDimension == LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(_vendTrans.AccountNum, LedgerJournalACType::Vend)
                && invoiceRegisterLedgerJournalTrans.PurchIdRange != '';

        if (invoiceRegisterLedgerJournalTrans)
        {
            boolean wasApprovalPostedWithPurchaseOrder = (_vendTrans.AccountingEvent > 0) ? true : false;

            if (wasApprovalPostedWithPurchaseOrder == false)
            {
                LedgerJournalTrans approvalJournalLedgerJournalTrans;
                select firstonly approvalJournalLedgerJournalTrans
                    order by approvalJournalLedgerJournalTrans.RecId desc
                    where approvalJournalLedgerJournalTrans.VendTransId == _vendTrans.RecId
                        && approvalJournalLedgerJournalTrans.AccountType == LedgerJournalACType::Ledger;

                LedgerJournalTable approvalJournalLedgerJournalTable;
                select firstonly approvalJournalLedgerJournalTable
                    where approvalJournalLedgerJournalTable.JournalType == LedgerJournalType::Approval
                        && approvalJournalLedgerJournalTable.Posted == NoYes::Yes
                        && approvalJournalLedgerJournalTable.JournalNum == approvalJournalLedgerJournalTrans.JournalNum;

                if (approvalJournalLedgerJournalTable.RecId == 0 || approvalJournalLedgerJournalTrans.RecId == 0)
                {
                    shouldProcessForLedgerCov = false;
                }
            }
        }

        return shouldProcessForLedgerCov;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean validateField(FieldId p1)
    {
        boolean ret = super(p1);

        if (ret)
        {
            switch (p1)
            {
                case (fieldNum(VendTransOpen,CashDiscDate)) :
                    if (this.CashDiscDate > this.DueDate)
                    {
                        ret = checkFailed("@SYS50863");
                    }
                    break;

                case (fieldNum(VendTransOpen,PossibleCashDisc)) :
                    if (abs(this.PossibleCashDisc) > abs(this.AmountCur))
                    {
                        ret = checkFailed("@SYS50866");
                    }
                    break;

                // <GBR>
                case (fieldNum(VendTransOpen, InterestAmount_BR)):
                    if (this.InterestAmount_BR > 0)
                    {
                        ret = checkFailed("@GLS931");
                    }
                    break;

                case (fieldNum(VendTransOpen, FineAmount_BR)):
                    if (this.FineAmount_BR > 0 )
                    {
                        ret = checkFailed ("@GLS1233");
                    }
                    break;
                // </GBR>
                // <GEEPL>
                case fieldNum(VendTransOpen, DueDate):
                    ret = ret && OverdueJournalSettings_W::canDueDateBeModified(
                        this,
                        this.DueDate,
                        this.orig().DueDate);
                    break;
                // </GEEPL>
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean ret;

        if (!this.DueDate)
        {
            this.DueDate = this.TransDate;
        }

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatTaxAgentAmount_RU</Name>
				<Source><![CDATA[
    display AmountCur vatTaxAgentAmount_RU()
    {
        VATTaxAgentPaymentAmounts_RU paymentAmounts;
        AmountMST actualAmountMST;
        AmountCur actualAmountCur;
        VendTrans vendTrans = this.vendTrans();
        SpecTrans specTrans;
        LedgerJournalTrans ledgerJournalTrans;
        boolean withTax;
        VendInvoiceJour vendInvoiceJour;
        VendInvoiceTrans vendInvoiceTrans;

        if (! vendTrans.RecId)
        {
            return 0;
        }

        if (! VendTable::find(vendTrans.AccountNum).vatTaxAgent_RU || ! vendTrans.Invoice)
        {
            return 0;
        }

        vendInvoiceJour = VendInvoiceJour::findFromVendTrans(
            vendTrans.Invoice,
            vendTrans.TransDate,
            vendTrans.AccountNum,
            false,
            vendTrans.Voucher);

        select firstonly TaxGroup, TaxItemGroup, RecId from vendInvoiceTrans
            where vendInvoiceTrans.PurchID == vendInvoiceJour.PurchId &&
                  vendInvoiceTrans.InvoiceId == vendInvoiceJour.InvoiceId &&
                  vendInvoiceTrans.InvoiceDate == vendInvoiceJour.InvoiceDate &&
                  vendInvoiceTrans.NumberSequenceGroup == vendInvoiceJour.NumberSequenceGroup &&
                  vendInvoiceTrans.InternalInvoiceId == vendInvoiceJour.InternalInvoiceId &&
                  vendInvoiceTrans.TaxGroup &&
                  vendInvoiceTrans.TaxItemGroup;

        if (! vendInvoiceTrans.RecId ||
            TaxTable::find(TaxTable::vatCode_RU(vendInvoiceTrans.TaxGroup,
                                                vendInvoiceTrans.TaxItemGroup)).vatChargeSource_RU == VATChargeSource_RU::OwnFunds)
        {
            return 0;
        }

        specTrans = SpecTrans::findByRef(this.company(), this.TableId, this.RecId);

        if (specTrans.SpecTableId == tableNum(LedgerJournalTrans))
        {
            ledgerJournalTrans = LedgerJournalTrans::findRecId(specTrans.SpecRecId, false);

            if (ledgerJournalTrans.TransactionType != LedgerTransType::Payment || ledgerJournalTrans.Prepayment)
            {
                return 0;
            }

            actualAmountCur = specTrans.Balance01;
            actualAmountMST = specTrans.Balance01;
            withTax = false;
        }
        else
        {
            actualAmountCur = this.AmountCur;
            actualAmountMST = this.AmountMST;
            withTax = true;
        }

        paymentAmounts = VATTaxAgentPaymentAmounts_RU::construct(vendTrans);
        paymentAmounts.calc(actualAmountCur, actualAmountMST, 0, vendTrans.TransDate, withTax);

        return paymentAmounts.totalTaxAgentAmountCur();
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTrans</Name>
				<Source><![CDATA[
    public VendTrans vendTrans()
    {
        return this.transOpenData().custVendTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(RecId _vendTransOpenId)
    {
        boolean ret = true;

        if (!VendTransOpen::exist(_vendTransOpenId))
        {
            ret = checkFailed(strFmt(VendTransOpen::txtNotExist(), _vendTransOpenId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(RecId _vendTransOpenId)
    {
        return (select firstonly
                     RecId
                from
                     vendTransOpen
                 where
                     vendTransOpen.RecId == _vendTransOpenId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static VendTransOpen find(RecId _vendTransOpenId, boolean _forupdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendTransOpen vendTransOpen;

        vendTransOpen.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vendTransOpen.concurrencyModel(_concurrencyModel);
        }

        select firstonly vendTransOpen
            where vendTransOpen.RecId == _vendTransOpenId;

        return vendTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCrossCompany</Name>
				<Source><![CDATA[
    internal static VendTransOpen findCrossCompany(RecId _vendTransOpenId, boolean _forupdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendTransOpen vendTransOpen;

        vendTransOpen.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vendTransOpen.concurrencyModel(_concurrencyModel);
        }

        select firstonly crosscompany vendTransOpen
            where vendTransOpen.RecId == _vendTransOpenId;

        return vendTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRefId</Name>
				<Source><![CDATA[
    static VendTransOpen findRefId(RecId _vendTransRecId,boolean _forUpdate = false, boolean _selectLocked = false)
    {
        VendTransOpen vendTransOpen;

        if (_vendTransRecId)
        {
            vendTransOpen.selectForUpdate(_forUpdate);
            vendTransOpen.selectLocked(_selectLocked);

            select firstonly vendTransOpen
                where vendTransOpen.RefRecId == _vendTransRecId;
        }
        return vendTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ttsbegin;
        if (CFMParameters::isPaymentRequestsEnabled())
        {
            CFMPaymentRequestTable::setOutdatedBySource(CFMPaymentRequestSourceType::CustInvoice, this.RecId, true);
        }
        super();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isZeroAmount</Name>
				<Source><![CDATA[
    public boolean isZeroAmount()
    {
        if (this.AmountCur == 0 && this.AmountMST == 0 && this.ReportingCurrencyAmount == 0)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransClosed</Name>
				<Source><![CDATA[
    public boolean isTransClosed()
    {
        VendTrans vendTrans = this.vendTrans();
        if (vendTrans.RecId && vendTrans.Closed != dateNull())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS126079</DeveloperDocumentation>
	<Label>@SYS53739</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>AccountNum</TitleField1>
	<TitleField2>TransDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>AccountDateIdx</ClusteredIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>AccountsPayable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>VendTransCashDisc</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>VendTransCashDisc</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS12227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportingCurrencyAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Bank</Name>
			<Label>@SYS7439</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ThirdPartyBankAccountId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BankLCImportGroup</Name>
			<Label>@SYS316286</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankLCImportLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Boleto_BR</Name>
			<Label>@GLS668</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EPBarCodeInfo_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CashDiscount</Name>
			<Label>@SYS4376</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashDiscDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PossibleCashDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseCashDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscountLedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Due</Name>
			<Label>@SYS14021</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DueDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExchangeAdjustment</Name>
			<Label>@SYS55328</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExchAdjUnrealized</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchAdjUnrealizedReporting</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FineAmount_BR</Name>
			<Label>@GLS1231</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FineAmount_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FineAmountPaymCur_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Interest</Name>
			<Label>@SYS10770</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LastInterestDateDummy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InterestAndFine_BR</Name>
			<Label>@GLS1236</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FineAmount_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FineAmountPaymCur_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FineCode_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestAmount_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestAmountPaymCur_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestCode_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InterestAndFineAmounts_BR</Name>
			<Label>@GLS1236</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FineAmount_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestAmount_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PromissoryNote</Name>
			<Label>@SYS71440</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankDiscNoticeDeadline</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS15217</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ServiceTax_IN</Name>
			<Label>@GLS5006</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Settlement_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GTARecoverableAmount_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxComponentTable_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Tax1099Amounts</Name>
			<Label>@SYS85340</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Tax1099StateAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099Amount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WithholdingTax_IN</Name>
			<Label>@SYS33817</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdAmountOrigin_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TDSAmount_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TCSAmount_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdStatus_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdRegNumber_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCurDebCred</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountMST</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMSTDebCred</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>BankDiscNoticeDeadline</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankDiscNoticeDeadline</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankLCImportLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankLCLineRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CashDiscDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendCashDiscDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CashDiscountLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@SYS75407</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DueDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DueDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EPBarCodeInfo_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EPBarCodeInfo_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchAdjUnrealized</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMSTDebCred</ExtendedDataType>
			<Label>@SYS67834</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchAdjUnrealizedReporting</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendExchAdjustment</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FineAmount_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>FineAmount_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FineAmountPaymCur_BR</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>FineAmount_BR</ExtendedDataType>
			<Label>@GLS1265</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FineCode_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>VendFineCode_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>GTARecoverableAmount_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@GLS6223</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InterestAmount_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>FinInterestAmount_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InterestAmountPaymCur_BR</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>FinInterestAmount_BR</ExtendedDataType>
			<Label>@GLS1264</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InterestCode_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>VendInterestCode_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LastInterestDateDummy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PossibleCashDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendCashDiscAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>VendTransRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReportingCurrencyAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMSTSecondary</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Settlement_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS10163</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Tax1099Amount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099Amount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Tax1099StateAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099StateAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxComponentTable_IN</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS5042</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxWithholdAmountOrigin_IN</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS21950</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdRegNumber_IN</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxWithholdRegNumberRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxWithholdStatus_IN</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS79585</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TCSAmount_IN</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@GLS5471</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TDSAmount_IN</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@GLS5470</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ThirdPartyBankAccountId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<ExtendedDataType>BankThirdPartyAccountId</ExtendedDataType>
			<GroupPrompt>@SYS8079</GroupPrompt>
			<Label>@SYS88299</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseCashDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>UseCashDisc</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CovStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CovStatus</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxDistribution</Name>
			<EnumType>PaymSchedTaxDistribution</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RefRecIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AccountDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FK_DimensionAttributeValueCombination_Ve</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>CashDiscountLedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BankLCImportLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>BankLCImportLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CovStatus</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<ConfigurationKey>CashFlowForecasting</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CovStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CustVendTransOpen</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccountNum</MapField>
					<MapFieldTo>AccountNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AmountCur</MapField>
					<MapFieldTo>AmountCur</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AmountMST</MapField>
					<MapFieldTo>AmountMST</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankDiscNoticeDeadline</MapField>
					<MapFieldTo>BankDiscNoticeDeadline</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankLCLine</MapField>
					<MapFieldTo>BankLCImportLine</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscDate</MapField>
					<MapFieldTo>CashDiscDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscountLedgerDimension</MapField>
					<MapFieldTo>CashDiscountLedgerDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DataArea</MapField>
					<MapFieldTo>DataAreaId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DueDate</MapField>
					<MapFieldTo>DueDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EPBarCodeInfo_BR</MapField>
					<MapFieldTo>EPBarCodeInfo_BR</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchAdjUnrealized</MapField>
					<MapFieldTo>ExchAdjUnrealized</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchAdjUnrealizedReporting</MapField>
					<MapFieldTo>ExchAdjUnrealizedReporting</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FineAmountPaymCur_BR</MapField>
					<MapFieldTo>FineAmountPaymCur_BR</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FineAmount_BR</MapField>
					<MapFieldTo>FineAmount_BR</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FineCode_BR</MapField>
					<MapFieldTo>FineCode_BR</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterestAmountPaymCur_BR</MapField>
					<MapFieldTo>InterestAmountPaymCur_BR</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterestAmount_BR</MapField>
					<MapFieldTo>InterestAmount_BR</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterestCode_BR</MapField>
					<MapFieldTo>InterestCode_BR</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LastInterestDate</MapField>
					<MapFieldTo>LastInterestDateDummy</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PossibleCashDisc</MapField>
					<MapFieldTo>PossibleCashDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RefRecId</MapField>
					<MapFieldTo>RefRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReportingCurrencyAmount</MapField>
					<MapFieldTo>ReportingCurrencyAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Tax1099Amount</MapField>
					<MapFieldTo>Tax1099Amount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Tax1099StateAmount</MapField>
					<MapFieldTo>Tax1099StateAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxDistribution</MapField>
					<MapFieldTo>TaxDistribution</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdAmountOrigin_IN</MapField>
					<MapFieldTo>TaxWithholdAmountOrigin_IN</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdStatus_IN</MapField>
					<MapFieldTo>TaxWithholdStatus_IN</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TCSAmount_IN</MapField>
					<MapFieldTo>TCSAmount_IN</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TDSAmount_IN</MapField>
					<MapFieldTo>TDSAmount_IN</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ThirdPartyBankAccountId</MapField>
					<MapFieldTo>ThirdPartyBankAccountId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UseCashDisc</MapField>
					<MapFieldTo>UseCashDisc</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankLCImportLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankLCImportLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankLCImportLine</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>BankLCImportLine_VendTransOpen</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankLCImportLine</Name>
					<Field>BankLCImportLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BankPromissoryNoteTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS126080</EntityRelationshipRole>
			<RelatedTable>VendPromissoryNoteJour</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BankPromissoryNoteTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>VendTransOpen</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>VendAccount</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CashDiscountLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CashDiscountLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTransOpen</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CashDiscountLedgerDimension</Name>
					<Field>CashDiscountLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerJournalTransAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124834</EntityRelationshipRole>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerJournalTransAccount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTransOpen</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>AccountType_Extern</Name>
					<RelatedField>AccountType</RelatedField>
					<ValueStr>LedgerJournalACType::Vend</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123518</EntityRelationshipRole>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PurchTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTransOpen</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>InvoiceAccount</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxComponentTable_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxComponentTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxComponentTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxComponentTable_IN_VendTransOpen</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxComponentTable_IN</Name>
					<Field>TaxComponentTable_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdRegNumber_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdRegNumbers_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdRegNumbers_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdRegNumbers_IN_VendTransOpen</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdRegNumber_IN</Name>
					<Field>TaxWithholdRegNumber_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendBankAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendBankAccount</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendBankAccount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendBankAccount_VendTransOpen</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>VendAccount</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ThirdPartyBankAccountId</Name>
					<Field>ThirdPartyBankAccountId</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendFineCode_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendFineSetup_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FineCode_BR</Name>
					<Field>FineCode_BR</Field>
					<RelatedField>FineCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>FineCode</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendInterestCode_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInterestSetup_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InterestCode_BR</Name>
					<Field>InterestCode_BR</Field>
					<RelatedField>InterestCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InterestCode</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123520</EntityRelationshipRole>
			<RelatedTable>VendInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendInvoiceJour</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTransOpen</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>InvoiceAccount</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123521</EntityRelationshipRole>
			<RelatedTable>VendTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendTrans_1</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>VendTransOpen</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<SourceEDT>VendTransRefRecId</SourceEDT>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTransEPRemit_BR</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>VendTransEPRemit_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>VendTransOpenRefRecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTransOpen</Name>
			<EntityRelationshipRole>@SYS123521</EntityRelationshipRole>
			<RelatedTable>VendTransOpen</RelatedTable>
			<RelatedTableRole>VendTransOpen</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>VendTransOpen</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>