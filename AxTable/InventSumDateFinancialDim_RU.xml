<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSumDateFinancialDim_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventSumDateFinancialDim_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete(boolean _doDelete = false)
    {
        if (_doDelete)
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert(boolean doInsert = false)
    {
        if (doInsert)
        {
            if (!this.FinancialDimId)
            {
                throw(error(Error::wrongUseOfFunction(funcname())));
            }
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>key</Name>
				<Source><![CDATA[
    public container key()
    {
        #InventDimDevelop
        return [this.InventSiteId,
                this.InventLocationId,
                this.InventProfileType,
                this.InventProfileId,
                this.packDimensionKey(this.Dimension),
                this.Account,
                this.ItemId,
                this.Storno];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packDimensionKey</Name>
				<Source><![CDATA[
    private str packDimensionKey(FinancialDim_RU _dim)
    {
        int idx;
        int dimSize   = dimOf(_dim);
        str separator = ChartOfAccounts::dimensionsStaticTextString(DimensionsStaticTextString::Separator);
        str dimensionKey;

        for (idx = 1; idx <= dimSize; idx++)
        {
            dimensionKey += _dim[idx] + (idx < dimSize ? separator : '');
        }

        return dimensionKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackDimensionKey</Name>
				<Source><![CDATA[
    private void unpackDimensionKey(str _dimensionKey)
    {
        int idx = 1, pos, oldPos = 1;
        str separator = ChartOfAccounts::dimensionsStaticTextString(DimensionsStaticTextString::Separator);

        do
        {
            pos                 =  strscan(_dimensionKey, separator, pos ? pos + strlen(separator) : 1, strlen(_dimensionKey));
            this.Dimension[idx] =  substr(_dimensionKey, oldPos, pos ? pos - oldPos : strlen(_dimensionKey) + 1 - oldPos);
            oldPos              =  pos + strlen(separator);
            idx++;
        }
        while (pos);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackKey</Name>
				<Source><![CDATA[
    void unpackKey(container _key)
    {
        str dimensionKey;

        #InventDimDevelop
        [this.InventSiteId,
         this.InventLocationId,
         this.InventProfileType,
         this.InventProfileId,
         dimensionKey,
         this.Account,
         this.ItemId,
         this.Storno] = _key;

        this.unpackDimensionKey(dimensionKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(boolean _doUpdate = false)
    {
        if (_doUpdate)
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>blankDimId</Name>
				<Source><![CDATA[
    static public InventSumDateFinancialDimId_RU blankDimId()
    {
        #define.blankId("AllBlank")
        return #blankId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    static public InventSumDateFinancialDim_RU create(InventSumDateFinancialDim_RU  _financialDim)
    {
        InventSumDateFinancialDim_RU   financialDim;
        ttsbegin;

        financialDim.FinancialDimId    = InventSumDateFinancialDim_RU::newDimId();
        financialDim.InventSiteId      = _financialDim.InventSiteId;
        financialDim.InventLocationId  = _financialDim.InventLocationId;
        financialDim.InventProfileType = _financialDim.InventProfileType;
        financialDim.InventProfileId   = _financialDim.InventProfileId;
        financialDim.Dimension         = _financialDim.Dimension;
        financialDim.Account           = _financialDim.Account;
        financialDim.DefaultDimension  = _financialDim.DefaultDimension;
        financialDim.Storno            = _financialDim.Storno;

        #InventDimDevelop

        financialDim.insert(true);

        ttscommit;

        return financialDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static public InventSumDateFinancialDim_RU find(InventSumDateFinancialDimId_RU _financialDimId, boolean _forupdate = false)
    {
        InventSumDateFinancialDim_RU    financialDim;
        if (_financialDimId)
        {
            financialDim.selectForUpdate(_forupdate);
            select financialDim
                where financialDim.FinancialDimId == _financialDimId;
        }

        return financialDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDim</Name>
				<Source><![CDATA[
    static public InventSumDateFinancialDim_RU findDim(InventSumDateFinancialDim_RU  _financialDim, boolean _forupdate = false)
    {
        InventSumDateFinancialDim_RU   financialDim;
        financialDim.selectForUpdate(_forupdate);

        select financialDim
            where financialDim.InventSiteId      == _financialDim.InventSiteId
               && financialDim.InventLocationId  == _financialDim.InventLocationId
               && financialDim.InventProfileType == _financialDim.InventProfileType
               && financialDim.InventProfileId   == _financialDim.InventProfileId
               && financialDim.DefaultDimension  == _financialDim.DefaultDimension
               && financialDim.Account           == _financialDim.Account
               && financialDim.Storno            == _financialDim.Storno;

        #inventDimDevelop

        return financialDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDimDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>InventSumDateFinancialDim_RU</c> record by the values of dimension from the given <c>InventSumDateFinancialDim_RU</c> record.
    /// </summary>
    /// <param name = "_financialDim">The given <c>InventSumDateFinancialDim_RU</c> record.</param>
    /// <param name = "_forupdate">The flag specifying if the record should be selected for update.</param>
    /// <returns>Corresponding <c>InventSumDateFinancialDim_RU</c> record.</returns>
    public static InventSumDateFinancialDim_RU findDimDimension(InventSumDateFinancialDim_RU  _financialDim, boolean _forupdate = false)
    {
        InventSumDateFinancialDim_RU financialDim;
        financialDim.selectForUpdate(_forupdate);

        select firstOnly financialDim
            where financialDim.InventSiteId      == _financialDim.InventSiteId
               && financialDim.InventLocationId  == _financialDim.InventLocationId
               && financialDim.InventProfileType == _financialDim.InventProfileType
               && financialDim.InventProfileId   == _financialDim.InventProfileId
               && financialDim.DefaultDimension  == _financialDim.DefaultDimension
               && financialDim.Dimension[1]      == _financialDim.Dimension[1]
               && financialDim.Dimension[2]      == _financialDim.Dimension[2]
               && financialDim.Dimension[3]      == _financialDim.Dimension[3]
               && financialDim.Dimension[4]      == _financialDim.Dimension[4]
               && financialDim.Dimension[5]      == _financialDim.Dimension[5]
               && financialDim.Dimension[6]      == _financialDim.Dimension[6]
               && financialDim.Dimension[6]      == _financialDim.Dimension[6]
               && financialDim.Dimension[7]      == _financialDim.Dimension[7]
               && financialDim.Dimension[8]      == _financialDim.Dimension[8]
               && financialDim.Dimension[9]      == _financialDim.Dimension[9]
               && financialDim.Dimension[10]     == _financialDim.Dimension[10]
               && financialDim.Account           == _financialDim.Account
               && financialDim.Storno            == _financialDim.Storno;

        #inventDimDevelop

        return financialDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreate</Name>
				<Source><![CDATA[
    static public InventSumDateFinancialDim_RU findOrCreate(InventSumDateFinancialDim_RU  _financialDim)
    {
        InventSumDateFinancialDim_RU   financialDim;
        financialDim = InventSumDateFinancialDim_RU::findDim(_financialDim);

        if (!financialDim)
        {
            financialDim = InventSumDateFinancialDim_RU::create(_financialDim);
        }
        return financialDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDimDimensionOrCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an <c>InventSumDateFinancialDim_RU</c> record if it exists or createS a new one if it does not.
    /// </summary>
    /// <param name = "_financialDim">The given <c>InventSumDateFinancialDim_RU</c> record.</param>
    /// <returns>Corresponding <c>InventSumDateFinancialDim_RU</c> record.</returns>
    public static InventSumDateFinancialDim_RU findDimDimensionOrCreate(InventSumDateFinancialDim_RU  _financialDim)
    {
        InventSumDateFinancialDim_RU financialDim = InventSumDateFinancialDim_RU::findDimDimension(_financialDim);

        if (!financialDim)
        {
            financialDim = InventSumDateFinancialDim_RU::create(_financialDim);
        }
        return financialDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateBlank</Name>
				<Source><![CDATA[
    static public InventSumDateFinancialDim_RU findOrCreateBlank(boolean _forupdate = false)
    {
        InventSumDateFinancialDim_RU   financialDim = InventSumDateFinancialDim_RU::find(InventSumDateFinancialDim_RU::blankDimId(), _forupdate);
        if (! financialDim)
        {
            financialDim.FinancialDimId = InventSumDateFinancialDim_RU::blankDimId();
            financialDim.insert(true);
        }
        return financialDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDimId</Name>
				<Source><![CDATA[
    static public InventSumDateFinancialDimId_RU newDimId()
    {
        return NumberSeq::newGetNum(InventParameters::numRefInventSumDateFinancialDimId_RU()).num();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<Label>@GLS114025</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>FinancialDimId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>DimIdIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>DimIdIdx</PrimaryIndex>
	<ReplacementKey>DimIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FinancialDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Account</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Storno</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FinancialDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimensions</Name>
			<Label>@SYS36215</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Account</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Storno</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FinancialDimensions</Name>
			<Label>@SYS101181</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS35583</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FinancialDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Account</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MainAccountNum</ExtendedDataType>
			<Label>@sys10835</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Dimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FinancialDim_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FinancialDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSumDateFinancialDimId_RU</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventProfileId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventProfileId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventProfileType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventProfileType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Storno</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Storno_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DimIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>FinancialDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventSiteId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventProfileType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventProfileId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Account</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Storno</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimensionAttributeValueSetIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttributeValueSet</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<SourceEDT>InventLocationId</SourceEDT>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventProfile_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventProfile_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventProfileId</Name>
					<SourceEDT>InventProfileId_RU</SourceEDT>
					<Field>InventProfileId</Field>
					<RelatedField>InventProfileId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteId</Name>
					<SourceEDT>InventSiteId</SourceEDT>
					<Field>InventSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SiteIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MainAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MainAccount</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Account</Name>
					<SourceEDT>MainAccountNum</SourceEDT>
					<Field>Account</Field>
					<RelatedField>MainAccountId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>