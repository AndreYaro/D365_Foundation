<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollPremiumEarningCode</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PayrollPremiumEarningCode extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the default value for the <c>CalculationFrequency</c> field for a new record in the <c>PayrollPremiumEarningCode</c> table.
    /// </summary>
    public void initValue()
    {
        super();
        this.CalculationFrequency = PayrollCalculationFrequency::findDefaultCalculationFrequency().RecId;
    }
]]></Source>
			</Method>
			<Method>
				<Name>validateEarningCodeOfQuantityUnitEach</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the value entered in the <c>EarningCode</c> field entered by the user is with the <c>QuantityUnit</c> field equal to 'Each'.
    /// </summary>
    /// <returns>
    ///    true if the <c>QuantityUnit</c> field is equal to 'Each'; otherwise false.
    /// </returns>
    private boolean validateEarningCodeOfQuantityUnitEach()
    {
        boolean isQuantityUnitEach = true;

        if (this.EarningCode != 0)
        {
            if (PayrollEarningCode::find(this.EarningCode).QuantityUnit != PayrollQuantityUnit::Each)
            {
                isQuantityUnitEach = checkFailed("@Payroll:YouveEnteredAnEarningCodeThatCanTBeUsedEnterAnEarningCodeTha");
            }
        }

        return isQuantityUnitEach;
    }
]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean isValid;

        isValid = super(_fieldIdToCheck);

        if (isValid)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(PayrollPremiumEarningCode, EarningCode):

                    if (this.EarningCode != 0)
                    {
                        isValid = this.validateEarningCodeOfQuantityUnitEach();
                    }

                    break;
            }
        }

        return isValid;
    }
]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid;

        isValid = super();

        if (isValid)
        {
            isValid = this.validateEarningCodeOfQuantityUnitEach();
        }

        return isValid;
    }
]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified record exists in the <c>PayrollPremiumEarningCode</c> table; if not, an error
    ///    message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(PayrollPremiumEarningCodeRecId _recId)
    {
        boolean ret = true;

        if (!PayrollPremiumEarningCode::exist(_recId))
        {
            ret = checkFailed(strFmt(PayrollPremiumEarningCode::txtNotExist(), tableId2name(tableNum(PayrollPremiumEarningCode))));
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>PayrollPremiumEarningCode</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(PayrollPremiumEarningCodeRecId _recId)
    {
        return _recId && (select firstonly RecId from payrollPremiumEarningCode
                    where payrollPremiumEarningCode.RecId == _recId).RecId!= 0;
    }
]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PayrollPremiumEarningCode</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    An enumeration value that indicates the concurrency setting to use on the table; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PayrollPremiumEarningCode</c> table; otherwise, an empty record.
    /// </returns>
    public static PayrollPremiumEarningCode find(
        PayrollPremiumEarningCodeRecId     _recId,
        boolean                     _forUpdate = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollPremiumEarningCode payrollPremiumEarningCode;

        payrollPremiumEarningCode.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollPremiumEarningCode.concurrencyModel(_concurrencyModel);
        }

        select firstonly payrollPremiumEarningCode
             where payrollPremiumEarningCode.RecId == _recId;

        return payrollPremiumEarningCode;
    }
]]></Source>
			</Method>
			<Method>
				<Name>findByPremiumEarningCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>PayrollPremiumEarningCode</c> table based on supplied values of the <c>PremiumEarningCode</c> field.
    /// </summary>
    /// <param name="_premiumEarningCode">
    /// The value of the <c>PremiumEarningCode</c> field to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>PayrollPremiumEarningCode</c> table.
    /// </returns>
    public static PayrollPremiumEarningCode findByPremiumEarningCode(
        PayrollPremiumEarningCodeId _premiumEarningCode,
        boolean                     _forUpdate = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollPremiumEarningCode payrollPremiumEarningCode;

        payrollPremiumEarningCode.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollPremiumEarningCode.concurrencyModel(_concurrencyModel);
        }

        select firstonly payrollPremiumEarningCode
            where payrollPremiumEarningCode.PremiumEarningCode == _premiumEarningCode;

        return payrollPremiumEarningCode;
    }
]]></Source>
			</Method>
			<Method>
				<Name>jumpRefPolicyRuleType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Opens the <c>SysPolicySourceDocumentRuleType</c> form for the specified policy rule type.
    /// </summary>
    /// <param name="_sysPolicyRuleType">
    ///     The record ID of the <c>SysPolicySourceDocumentRuleType</c> table record.
    /// </param>
    public static void jumpRefPolicyRuleType(RefRecId _sysPolicyRuleType)
    {
        Args args;

        args = new Args();
        args.lookupRecord(SysPolicySourceDocumentRuleType::find(_sysPolicyRuleType));

        new MenuFunction(menuitemDisplayStr(PayrollPremiumEarningGenerationRuleType), MenuItemType::Display).run(args);
    }
]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ID of the label to use when displaying a message to indicate that the record does not exist.
    /// </summary>
    /// <returns>
    /// A string indicating the label ID.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PayrollAdministration</ConfigurationKey>
	<DeveloperDocumentation>@Payroll:ThePayrollpremiumearningcodeTableStoresThePremiumCodesPremiu</DeveloperDocumentation>
	<FormRef>PayrollPremiumEarningCode</FormRef>
	<Label>@Payroll:PremiumCode</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>PremiumEarningCode</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>Payroll</Modules>
	<ReplacementKey>PremiumCodeIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PremiumEarningCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalculationFrequency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EarningCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayoutBasis</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PolicyRuleType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PremiumEarningCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PremiumEarningCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@Payroll:General</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PolicyRuleType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayoutBasis</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EarningCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalculationFrequency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@Payroll:Overview</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PremiumEarningCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CalculationFrequency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollCalculationFrequencyRecId</ExtendedDataType>
			<Label>@Payroll:PayrollCalculationFrequency</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollPremiumEarningCodeDescription</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EarningCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollEarningCodeRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PayoutBasis</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>PayrollPayoutBasis</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PolicyRuleType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@Payroll:PremiumEarningPolicyRuleType</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PremiumEarningCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollPremiumEarningCodeId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PremiumCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PremiumEarningCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CalculationFrequency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PayrollCalculationFrequency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PayrollCalculationFrequency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PayrollCalculationFrequency_PayrollPremiumEarningCode</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CalculationFrequency</Name>
					<Field>CalculationFrequency</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EarningCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PayrollEarningCode</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PayrollEarningCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PayrollEarningCode_PayrollPremiumEarningCode</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EarningCode</Name>
					<SourceEDT>RefRecId</SourceEDT>
					<Field>EarningCode</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SysPolicyRuleType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SysPolicyRuleType</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>SysPolicyRuleType</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PayrollPremiumEarningCode</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PolicyRuleType</Name>
					<Field>PolicyRuleType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>