<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendAgingPeriodScaleTmp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendAgingPeriodScaleTmp extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcFromAgingPeriodDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates continuous scale of dates based on specified parameters.
    /// </summary>
    /// <param name="_agingPeriodDefinition">
    /// The aging period definition to be used.
    /// </param>
    /// <param name="_zeroDate">
    /// Date which is considered current.
    /// </param>
    /// <returns>
    /// The <c>CustVendAgingPeriodScaleTmp</c> buffer with distribution of dates in buckets: 1-1 mapping which date goes to which bucket.
    /// </returns>
    /// <remarks>
    /// <list type = "bullet">
    /// <item>
    /// <description>If aging period definition doesn't contain Unlimited buckets for beginning and end of time
    /// then only subset of dates required in Aging period definition would be mapped to bucket numbers. It means that dateNull and dateMax will not be present in the scale.
    /// </description>
    /// </item>
    /// <item>
    /// <description>Numbering of buckets doesn't change depending from Direction. Only dates themselves may change, but bucket with earliest date always gets number 1.</description>///
    /// </item>
    /// </list>
    /// </remarks>
    public static CustVendAgingPeriodScaleTmp calcFromAgingPeriodDefinition(
        CustVendReportName _agingPeriodDefinition,
        TransDate _zeroDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        QueryRun queryRun;
        QueryBuildDataSource qbds;
        TmpStatPer tmpStat;
        TransDate datePointer;
        CustVendAgingPeriodScaleTmp scaleTmp;
        StatRepIntervalLine statRepIntervalLine;
        StatRepInterval statRepInterval;
        RecordInsertList recordInsertList;
        int bucket;
        ForwardBackwardPrinting direction;

        Query query = new Query();
        TmpStatPer tmpStatPer = TmpStatPer::createDefName(_agingPeriodDefinition,_zeroDate);

        void addLine(TransDate _transDate, str _description, CustAgingIndicator _indicator, int _bucketNumber)
        {
            scaleTmp.TransDate = _transDate;
            scaleTmp.BucketDescription = _description;
            scaleTmp.AgingIndicator = _indicator;
            scaleTmp.BucketNumber = _bucketNumber;
            recordInsertList.add(scaleTmp);
        }

        direction = (select PrintDirection from statRepInterval where statRepInterval.Name == _agingPeriodDefinition).PrintDirection;

        qbds = query.addDataSource(tableNum(TmpStatPer));
        recordInsertList = new RecordInsertList(tableNum(CustVendAgingPeriodScaleTmp), true, true, true, false, true, scaleTmp);

        switch (direction)
        {
            case ForwardBackwardPrinting::Forward:
                qbds.addSortField(fieldNum(TmpStatPer, StartDate), SortOrder::Ascending);
                bucket = 1;
                break;

            case ForwardBackwardPrinting::Backward:
                qbds.addSortField(fieldNum(TmpStatPer, StartDate), SortOrder::Descending);
                bucket = int642int((select count(RecId) from statRepIntervalLine where statRepIntervalLine.Name == _agingPeriodDefinition).RecId);
                break;
        }
        queryRun = new QueryRun(query);
        queryRun.setCursor(tmpStatPer);

        while (queryRun.next())
        {
            tmpStat = queryRun.getNo(1) as TmpStatPer;

            if (tmpStat.StartDate == dateNull() || tmpStat.EndDate == dateMax())
            {
                addLine(tmpStat.StartDate, tmpStat.Description, tmpStat.InvoiceQty, bucket);
                addLine(tmpStat.EndDate, tmpStat.Description, tmpStat.InvoiceQty, bucket);
            }

            if (tmpStat.StartDate != dateNull() && tmpStat.EndDate != dateMax())
            {
                for (datePointer = tmpStat.StartDate; datePointer <= tmpStat.EndDate; datePointer++)
                {
                    // means that if we order buckets in aging period definition ASC from the past to future - each bucket will have a corresponding int, to be used afterwards as bucket number.
                    addLine(datePointer, tmpStat.Description, tmpStat.InvoiceQty, bucket);
                }
            }

            if (direction == ForwardBackwardPrinting::Forward)
            {
                bucket++;
            }
            else
            {
                bucket--;
            }
        }

        recordInsertList.insertDatabase();

        return scaleTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFromStartDateAndInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates continuous scale of dates based on specified parameters
    /// </summary>
    /// <param name="_interval">
    /// Interval amount (how many days\months)
    /// </param>
    /// <param name="_zeroDate">
    /// Date which is considered current
    /// </param>
    /// <param name="_period">
    /// Interval type: Days or Months
    /// </param>
    /// <param name="_direction">
    /// Do we calculate buckets stepping forward or backward on the timescale?
    /// </param>
    /// <returns>
    /// Buffer with distribution of dates in buckets: 1-1 mapping which date goes to which bucket.
    /// </returns>
    /// <remarks>
    /// 1) Always contains 2 buckets for beginning of time and end of time. They are not continuous, start with dateNull and end with dateMax correspondingly.
    /// 2) Numbering of buckets doesn't change depending from Direction. Only dates themselves may change, but bucket with earliest date always gets number 1.
    /// </remarks>
    public static CustVendAgingPeriodScaleTmp calcFromStartDateAndInterval(
        PositiveDays _interval,
        TransDate _zeroDate,
        DayMonth _period,
        ForwardBackwardPrinting _direction)
    {
        CustVendAgingPeriodScaleTmp scaleTmp;
        RecordInsertList recordInsertList;
        date nextMonthDate;
        int times, intervalNum;
        int buckets = CustVendBalanceList::getMaximumAgingBuckets(); // # of buckets on the time scale

        void addLine(TransDate _transDate, int _bucketNumber)
        {
            scaleTmp.TransDate = _transDate;
            scaleTmp.BucketNumber = _bucketNumber;
            recordInsertList.add(scaleTmp);
        }

        recordInsertList = new RecordInsertList(tableNum(CustVendAgingPeriodScaleTmp), false, false, false, false, true, scaleTmp);

        if (_direction == ForwardBackwardPrinting::Forward)
        {
            addLine(dateNull(), 1);
        }
        else
        {
            addLine(dateMax(), buckets);
        }

        switch (_period)
        {
            case DayMonth::Day :
            if (_direction == ForwardBackwardPrinting::Forward)
                {
                    addLine(_zeroDate - 1, 1);
                }
                else
                {
                    addLine(_zeroDate + 1, buckets);
                }

                break;
            case DayMonth::Month :
                scaleTmp.TransDate = mkDate(01, mthOfYr(_zeroDate), year(_zeroDate));
                if (_direction == ForwardBackwardPrinting::Forward)
                {
                    addLine(scaleTmp.TransDate - 1, 1);
                    scaleTmp.TransDate += 1;
                }
                else
                {
                    addLine(scaleTmp.TransDate, buckets);
                }

                break;
        }

        // Minus 2 because there is starting and final buckets which are same type as Unlimited for aging period definition
        for (times = 1; times <= buckets - 2; times++)
        {
            for (intervalNum = 0; intervalNum < _interval; intervalNum++)
            {
                switch (_period)
                {
                    case DayMonth::Day:
                        switch (_direction)
                        {
                            case ForwardBackwardPrinting::Forward:
                                addLine(scaleTmp.TransDate + 1, times + 1);
                                break;
                            case ForwardBackwardPrinting::Backward:
                                addLine(scaleTmp.TransDate - 1, buckets - times);
                                break;
                        }
                        break;
                    case DayMonth::Month:
                        switch (_direction)
                        {
                            case ForwardBackwardPrinting::Forward:
                                nextMonthDate = nextMth(scaleTmp.TransDate);
                                for (scaleTmp.TransDate = prevMth(nextMonthDate); scaleTmp.TransDate < nextMonthDate; scaleTmp.TransDate++)
                                {
                                    addLine(scaleTmp.TransDate, times + 1);
                                }
                                break;
                            case ForwardBackwardPrinting::Backward:
                                nextMonthDate = prevMth(scaleTmp.TransDate);
                                for (scaleTmp.TransDate = nextMth(nextMonthDate) - 1; scaleTmp.TransDate >= nextMonthDate; scaleTmp.TransDate--)
                                {
                                    addLine(scaleTmp.TransDate, buckets - times);
                                }
                                scaleTmp.TransDate++;
                                break;
                        }
                        break;
                }
            }
        }

        switch (_direction)
        {
            case ForwardBackwardPrinting::Backward:
                addLine(scaleTmp.TransDate - 1, 1);
                addLine(dateNull(), 1);
                break;

            case ForwardBackwardPrinting::Forward:
            if (_period == DayMonth::Day)
                {
                    addLine(scaleTmp.TransDate + 1, buckets);
                }
                else
                {
                    addLine(nextMonthDate ? nextMonthDate : nextMth(scaleTmp.TransDate), buckets);
                }

                addLine(dateMax(), buckets);
                break;
        }

        recordInsertList.insertDatabase();

        return scaleTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBucketCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the number of buckets defined in a <c>CustVendAgingPeriodScaleTmp</c> table.
    /// </summary>
    /// <param name="_agingPeriodScaleTmp">
    /// The buffer of a populated <c>CustVendAgingPeriodScaleTmp</c> table.
    /// </param>
    /// <returns>
    /// The number of buckets defined.
    /// </returns>
  public static int getBucketCount(CustVendAgingPeriodScaleTmp _agingPeriodScaleTmp)
    {
        select maxof(BucketNumber) from _agingPeriodScaleTmp;

        return _agingPeriodScaleTmp.BucketNumber;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@SYS4009389</Label>
	<ClusteredIndex>TransDateIdx</ClusteredIndex>
	<PrimaryIndex>TransDateIdx</PrimaryIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableType>TempDB</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AgingIndicator</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>CustAgingIndicator</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BucketDescription</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>BucketNumber</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Counter</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TransDateIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>