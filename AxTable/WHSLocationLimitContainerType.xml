<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLocationLimitContainerType</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSLocationLimitContainerType extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayContainerTypeUOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the unit of measure symbol for the associated container type.
    /// </summary>
    /// <returns>
    /// the unit of measure symbol for the container type.
    /// </returns>
    public display UnitOfMeasureSymbol displayContainerTypeUOM()
    {
        return WHSContainerType::find(this.ContainerTypeCode).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAllowedContainerTypes</Name>
				<Source><![CDATA[
    public RefRecId findAllowedContainerTypes(WHSLocProfileId _locProfileId = this.LocProfileId)
    {
        WHSLocationProfile locationProfile = WHSLocationProfile::find(_locProfileId);

        return locationProfile.AllowedContainerTypeGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return  [
                    [fieldNum(WHSLocationLimitContainerType, Qty),
                        [fieldNum(WHSLocationLimitContainerType, AllowUnlimitedQty)]
                    ]
                ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch(_fieldId)
        {
            case fieldNum(WHSLocationLimitContainerType, Qty):
                if (this.isFieldSet(fieldNum(WHSLocationLimitContainerType, AllowUnlimitedQty))
                    && this.AllowUnlimitedQty)
                {
                    this.Qty = 0;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateContainerTypesCanBeConverted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify that all container types in an Allowed container type group can be converted to the other container types.
    /// </summary>
    /// <param name="_containerTypeCode">
    /// The container type that is being used on a container type stocking limit configuration.
    /// </param>
    /// <param name="_allowedContainerTypeGroup">
    /// The reference record Id for an allowed container type group.
    /// </param>
    /// <returns>
    /// True if the container type is valid and all container types in the group can be converted against each other; otherwise, false;
    /// </returns>
    private boolean validateContainerTypesCanBeConverted(
        WHSContainerTypeCode    _containerTypeCode,
        RefRecId                _allowedContainerTypeGroup)
    {
        WHSAllowedContainerType allowedContainerType;
        WHSContainerType        containerType;
        List                    containerTypeUOMs = new List(Types::Int64);
        boolean                 limitContainerTypeValid;
        boolean                 uomConversionsValid = true;
        boolean                 ret = true;
        int                     uomIteratorCount;
        UnitOfMeasureRecId      fromUOMRecId;
        ListEnumerator          uomListEnumerator;

        while select UnitId, ContainerTypeCode from containerType
            exists join allowedContainerType
                where allowedContainerType.ContainerTypeCode          == containerType.ContainerTypeCode
                &&    allowedContainerType.AllowedContainerTypeGroup  == _allowedContainerTypeGroup
        {
            containerTypeUOMs.addEnd(UnitOfMeasure::findBySymbol(containerType.UnitId).RecId);

            if (containerType.ContainerTypeCode == _containerTypeCode)
            {
                limitContainerTypeValid = true;
            }
        }

        if (limitContainerTypeValid)
        {
            int uomCount = containerTypeUOMs.elements();
            int fromUOMCount = 1;

            // For each UOM in the list, iterate through the list to make sure they can be converted to each other.
            while (fromUOMCount <= uomCount && uomConversionsValid)
            {
                uomListEnumerator = containerTypeUOMs.getEnumerator();

                while (uomConversionsValid && uomListEnumerator.moveNext())
                {
                    uomIteratorCount += 1;
                    if (uomIteratorCount == fromUOMCount)
                    {
                        fromUOMRecId = uomListEnumerator.current();
                    }
                    else if (uomIteratorCount > fromUOMCount)
                    {
                        uomConversionsValid = UnitOfMeasureConverter::canBeConverted(fromUOMRecId, uomListEnumerator.current());
                    }
                }

                // Reset UOM iterator and increment the From UOM counter.
                uomIteratorCount = 0;
                fromUOMCount += 1;
            }
        }

        if (!uomConversionsValid)
        {
            ret = checkFailed(strFmt("@WAX:ErrorContainerUOMConversionFail",
                                     UnitOfMeasure::find(fromUOMRecId).Symbol,
                                     UnitOfMeasure::find(uomListEnumerator.current()).Symbol));
        }

        if (!limitContainerTypeValid)
        {
            ret = checkFailed(strFmt("@WAX:ErrorValidContainerTypeCode", _containerTypeCode));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        WHSLocationProfile locationProfile;

        boolean ret = super();

        if (ret)
        {
            // Check that the selected location profile has an allowed container types group set up.
            locationProfile = WHSLocationProfile::find(this.LocProfileId);

            if (!locationProfile.AllowedContainerTypeGroup)
            {
                ret = checkFailed("@WAX:ErrorAllowedContainerTypeNotSet");
            }
        }
        if (ret)
        {
            ret = this.validateContainerTypesCanBeConverted(this.ContainerTypeCode, locationProfile.AllowedContainerTypeGroup);
        }
        if (ret)
        {
            if (this.Qty               != 0
            &&  this.AllowUnlimitedQty == NoYes::Yes)
            {
                ret = checkFailed("@WAX:ErrorUnlimitedQuantityNotAllowed");
            }
        }

        return ret && this.validateWarehouseGroupAll();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWarehouseGroupAll</Name>
				<Source><![CDATA[
    private boolean validateWarehouseGroupAll()
    {
        switch (this.WarehouseGroupAll)
        {
            case WhsWarehouseGroupAll::Warehouse:
                if (!this.InventLocationId)
                {
                    return checkFailed("@WAX:LocationLimitMissingWarehouse");
                }
                break;

            case WhsWarehouseGroupAll::Group:
                if (!this.WarehouseGroupId)
                {
                    return checkFailed("@WAX:LocationLimitMissingWarehouseGroup");
                }
                break;
                
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(RecId _recId)
    {
        return (_recId) &&
               (select firstonly RecId from WHSLocationLimitContainerType
                where WHSLocationLimitContainerType.RecId == _RecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static WHSLocationLimitContainerType find(
        RecId             _recId,
        boolean           _forupdate = false)
    {
        WHSLocationLimitContainerType    locationLimitContainerType;

        if (_recId)
        {
            locationLimitContainerType.selectForUpdate(_forupdate);

            select firstonly locationLimitContainerType
                where locationLimitContainerType.RecId == _recId;
        }

        return locationLimitContainerType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupLocProfileIdsWithAllowedConType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup for location profile id's where allowed container types have been defined.
    /// </summary>
    /// <param name="_ctrl">
    /// The form calling control.
    /// </param>
    public static void lookupLocProfileIdsWithAllowedConType(FormStringControl _ctrl)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(WHsLocationProfile), _ctrl);
        Query query = new Query();
        QueryBuildDataSource qbdsLocProfile = query.addDataSource(tableNum(WHSLocationProfile));
        qbdsLocProfile.addRange(fieldNum(WHSLocationProfile, AllowedContainerTypeGroup)).value(SysQuery::valueNot(0));

        sysTableLookup.addLookupfield(fieldNum(WHSLocationProfile, LocProfileId));
        sysTableLookup.addLookupfield(fieldNum(WHSLocationProfile, LocProfileName));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if location quantity limit for container types exists by warehouse.
    /// </summary>
    /// <param name = "_warehouseId">The warehouse Id.</param>
    /// <returns>true if <c>WHSLocationLimitContainerType</c> record exists; otherwise, false.</returns>
    [Hookable(false)]
    internal static boolean existForWarehouse(InventLocationId _warehouseId)
    {
        return _warehouseId &&
            (WHSLocationLimitContainerType::existsForSpecificWarehouseOrAll(_warehouseId)
            || WHSLocationLimitContainerType::existsForWarehouseGroup(_warehouseId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForSpecificWarehouseOrAll</Name>
				<Source><![CDATA[
    private static boolean existsForSpecificWarehouseOrAll(InventLocationId _warehouseId)
    {
        WHSLocationLimitContainerType locationLimit;

        select firstonly RecId from locationLimit
            where locationLimit.InventLocationId == _warehouseId
                || locationLimit.WarehouseGroupAll == WhsWarehouseGroupAll::All;

        return locationLimit.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForWarehouseGroup</Name>
				<Source><![CDATA[
    private static boolean existsForWarehouseGroup(InventLocationId _warehouseId)
    {
        WHSLocationLimitContainerType locationLimit;
        WhsWarehouseGroupLink warehouseGroupLink;

        select firstonly RecId from locationLimit
            where locationLimit.WarehouseGroupAll == WhsWarehouseGroupAll::Group
            exists join warehouseGroupLink
                where warehouseGroupLink.WarehouseGroupId == locationLimit.WarehouseGroupId
                    && warehouseGroupLink.InventLocationId == _warehouseId;

        return locationLimit.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWarehouseSelection</Name>
				<Source><![CDATA[
    private void setWarehouseSelection()
    {
        switch (this.WarehouseGroupAll)
        {
            case WhsWarehouseGroupAll::All:
                this.InventLocationId = '';
                this.WarehouseGroupId = '';
                break;

            case WhsWarehouseGroupAll::Group:
                this.InventLocationId = '';
                break;

            case WhsWarehouseGroupAll::Warehouse:
                this.WarehouseGroupId = '';
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.setWarehouseSelection();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.setWarehouseSelection();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(WHSLocationLimitContainerType, WarehouseGroupAll):
                this.setWarehouseSelection();
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:WHSLocationLimitContainerTypeHelpText</DeveloperDocumentation>
	<Label>@WAX:WHSLocationLimitContainerType</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>InventLocationId</TitleField1>
	<TitleField2>LocProfileId</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>Inventory</Modules>
	<ReplacementKey>InventLocationIdLocProfileIdIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContainerTypeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocProfileId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WarehouseGroupAll</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WarehouseGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AllowUnlimitedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContainerTypeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowUnlimitedQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAllowUnlimitedQty</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContainerTypeCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSContainerTypeCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LocProfileId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLocProfileId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProductQuantity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WarehouseGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WhsWarehouseGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WarehouseGroupAll</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WhsWarehouseGroupAll</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventLocationIdLocProfileIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LocProfileId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WarehouseGroupAll</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WarehouseGroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WarehouseGroupId</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WarehouseGroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WarehouseGroupAll</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WarehouseGroupAll</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<SourceEDT>InventLocationId</SourceEDT>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSContainerType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSContainerType</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContainerTypeCode</Name>
					<SourceEDT>WHSContainerTypeCode</SourceEDT>
					<Field>ContainerTypeCode</Field>
					<RelatedField>ContainerTypeCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSLocationProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSLocationProfile</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LocProfileId</Name>
					<SourceEDT>WHSLocProfileId</SourceEDT>
					<Field>LocProfileId</Field>
					<RelatedField>LocProfileId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WarehouseGroupId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WhsWarehouseGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WarehouseGroupId</Name>
					<Field>WarehouseGroupId</Field>
					<RelatedField>WarehouseGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>