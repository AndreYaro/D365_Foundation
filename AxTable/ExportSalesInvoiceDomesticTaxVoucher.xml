<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ExportSalesInvoiceDomesticTaxVoucher</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ExportSalesInvoiceDomesticTaxVoucher extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteUnpostedDomesticSalesTaxVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes any unposted <c>ExportSalesInvoiceDomesticTaxVoucher</c> record that has a specified
    /// journal number and voucher.
    /// </summary>
    /// <param name="_journalNum">
    /// A journal number.
    /// </param>
    /// <param name="_voucher">
    /// A voucher; optional.
    /// </param>
    public static void deleteUnpostedDomesticSalesTaxVoucher(LedgerJournalId _journalNum, Voucher _voucher = '')
    {
        ExportSalesInvoiceDomesticTaxVoucher exportSalesInvoiceDomesticTaxVoucher;

        delete_from exportSalesInvoiceDomesticTaxVoucher
            where exportSalesInvoiceDomesticTaxVoucher.JournalNumber == _journalNum &&
                (_voucher == '' || exportSalesInvoiceDomesticTaxVoucher.Voucher == _voucher) &&
                exportSalesInvoiceDomesticTaxVoucher.IsPosted == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDomesticSalesTaxVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether any <c>ExportSalesInvoiceDomesticTaxVoucher</c> record exists for a specified
    /// export sales record identity.
    /// </summary>
    /// <param name="_exportSalesInvoiceId">
    /// The record identity of a <c>ExportSalesInvoice</c> record.
    /// </param>
    /// <param name="_isPostedOnly">
    /// A Boolean value that indicates whether to search only the posted
    /// <c>ExportSalesInvoiceDomesticTaxVoucher</c> records.
    /// </param>
    /// <returns>
    /// true if a record that has the specified export sales record identity exists; otherwise, false .
    /// </returns>
    public static boolean existDomesticSalesTaxVoucher(RefRecId _exportSalesInvoiceId, boolean _isPostedOnly)
    {
        ExportSalesInvoiceDomesticTaxVoucher    exportSalesInvoiceDomesticTaxVoucher;
        boolean                                 existDomesticSalesTaxVoucher;

        select firstOnly RecId from exportSalesInvoiceDomesticTaxVoucher
            where exportSalesInvoiceDomesticTaxVoucher.ExportSalesInvoice == _exportSalesInvoiceId &&
                exportSalesInvoiceDomesticTaxVoucher.ReferenceDomesticSalesTaxVoucher == 0 &&
                (!_isPostedOnly || exportSalesInvoiceDomesticTaxVoucher.IsPosted == NoYes::Yes);

        if (exportSalesInvoiceDomesticTaxVoucher.RecId)
        {
            existDomesticSalesTaxVoucher = true;
        }

        return existDomesticSalesTaxVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existReferenceDomesticSalesTaxVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a reference <c>ExportSalesInvoiceDomesticTaxVoucher</c> record exists for the
    /// specified export sales invoice.
    /// </summary>
    /// <param name="_exportSalesInvoiceId">
    /// The record identity of a <c>ExportSalesInvoice</c> record.
    /// </param>
    /// <returns>
    /// true if a record for the specified export sales invoice exists; otherwise, false .
    /// </returns>
    public static boolean existReferenceDomesticSalesTaxVoucher(RefRecId _exportSalesInvoiceId)
    {
        boolean existReferenceDomesticSalesTaxVoucher;
        ExportSalesInvoiceDomesticTaxVoucher exportSalesInvoiceDomesticTaxVoucher;
        ExportSalesInvoiceDomesticTaxVoucher referenceExportSalesInvoiceDomesticTaxVoucher;

        select firstOnly RecId from exportSalesInvoiceDomesticTaxVoucher
                where exportSalesInvoiceDomesticTaxVoucher.ExportSalesInvoice == _exportSalesInvoiceId
            exists join referenceExportSalesInvoiceDomesticTaxVoucher
                where referenceExportSalesInvoiceDomesticTaxVoucher.ReferenceDomesticSalesTaxVoucher == exportSalesInvoiceDomesticTaxVoucher.RecId;

        if (exportSalesInvoiceDomesticTaxVoucher.RecId)
        {
            existReferenceDomesticSalesTaxVoucher = true;
        }

        return existReferenceDomesticSalesTaxVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCustInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>ExportSalesInvoiceDomesticTaxVoucher</c> table that has a specified
    /// customer invoice journal.
    /// </summary>
    /// <param name="_custInvoiceJourId">
    /// The record ID of a <c>CustInvoiceJour</c> record.
    /// </param>
    /// <returns>
    /// A record in the <c>ExportSalesInvoiceDomesticTaxVoucher</c> table; otherwise, an empty record.
    /// </returns>
    public static ExportSalesInvoiceDomesticTaxVoucher findByCustInvoiceJour(RefRecId _custInvoiceJourId)
    {
        ExportSalesInvoiceDomesticTaxVoucher    exportSalesInvoiceDomesticTaxVoucher;
        ExportSalesInvoice                      exportSalesInvoice;

        select firstOnly * from exportSalesInvoiceDomesticTaxVoucher
            exists join exportSalesInvoice
                where exportSalesInvoiceDomesticTaxVoucher.ExportSalesInvoice == exportSalesInvoice.RecId &&
                    exportSalesInvoice.CustInvoiceJour == _custInvoiceJourId;

        return exportSalesInvoiceDomesticTaxVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByJournalAndVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>ExportSalesInvoiceDomesticTaxVoucher</c> record that has a specified journal number and
    /// voucher.
    /// </summary>
    /// <param name="_journalNum">
    /// A journal number.
    /// </param>
    /// <param name="_voucher">
    /// A voucher.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the record should be selected for update.
    /// </param>
    /// <returns>
    /// A <c>ExportSalesInvoiceDomesticTaxVoucher</c> record that has the specified journal number and
    /// voucher.
    /// </returns>
    public static ExportSalesInvoiceDomesticTaxVoucher findByJournalAndVoucher(LedgerJournalId _journalNum, Voucher _voucher, boolean _forUpdate)
    {
        ExportSalesInvoiceDomesticTaxVoucher exportSalesInvoiceDomesticTaxVoucher;

        select firstOnly * from exportSalesInvoiceDomesticTaxVoucher
            where exportSalesInvoiceDomesticTaxVoucher.JournalNumber == _journalNum &&
                exportSalesInvoiceDomesticTaxVoucher.Voucher == _voucher;

        if (_forUpdate)
        {
            exportSalesInvoiceDomesticTaxVoucher.selectForUpdate(true);
        }

        return exportSalesInvoiceDomesticTaxVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDomesticSalesTaxVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>ExportSalesInvoiceDomesticTaxVoucher</c> record that has a specified record ID of an
    /// export sales invoice record.
    /// </summary>
    /// <param name="_exportSalesInvoiceId">
    /// The record ID of an <c>ExportSalesInvoice</c> record.
    /// </param>
    /// <param name="_isPostedOnly">
    /// A Boolean value that indicates whether to search only posted
    /// <c>ExportSalesInvoiceDomesticTaxVoucher</c> records.
    /// </param>
    /// <returns>
    /// A <c>ExportSalesInvoiceDomesticTaxVoucher</c> record that has the specified record ID of an export
    /// sales invoice record.
    /// </returns>
    public static ExportSalesInvoiceDomesticTaxVoucher findDomesticSalesTaxVoucher(RefRecId _exportSalesInvoiceId, boolean _isPostedOnly)
    {
        ExportSalesInvoiceDomesticTaxVoucher exportSalesInvoiceDomesticTaxVoucher;

        select firstOnly * from exportSalesInvoiceDomesticTaxVoucher
            where exportSalesInvoiceDomesticTaxVoucher.ExportSalesInvoice == _exportSalesInvoiceId &&
                exportSalesInvoiceDomesticTaxVoucher.ReferenceDomesticSalesTaxVoucher == 0 &&
                (!_isPostedOnly || exportSalesInvoiceDomesticTaxVoucher.IsPosted == NoYes::Yes);

        return exportSalesInvoiceDomesticTaxVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReferenceDomesticSalesTaxVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>ExportSalesInvoiceDomesticTaxVoucher</c> record that has a specified record ID of an
    /// export sales invoice record.
    /// </summary>
    /// <param name="_exportSalesInvoiceId">
    /// The record ID of a <c>ExportSalesInvoice</c> record.
    /// </param>
    /// <returns>
    /// A <c>ExportSalesInvoiceDomesticTaxVoucher</c> record that has a specified record ID of an export
    /// sales invoice record.
    /// </returns>
    public static ExportSalesInvoiceDomesticTaxVoucher findReferenceDomesticSalesTaxVoucher(RefRecId _exportSalesInvoiceId)
    {
        ExportSalesInvoiceDomesticTaxVoucher exportSalesInvoiceDomesticTaxVoucher;

        select firstOnly * from exportSalesInvoiceDomesticTaxVoucher
            where exportSalesInvoiceDomesticTaxVoucher.ExportSalesInvoice == _exportSalesInvoiceId &&
                exportSalesInvoiceDomesticTaxVoucher.ReferenceDomesticSalesTaxVoucher != 0;

        return exportSalesInvoiceDomesticTaxVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the journal number on a <c>ExportSalesInvoiceDomesticTaxVoucher</c> record in a specified
    /// voucher range that has a specified new journal number.
    /// </summary>
    /// <param name="_originalJournalNumber">
    /// The original journal number.
    /// </param>
    /// <param name="_newJournalNumber">
    /// The new journal number.
    /// </param>
    /// <param name="_fromVoucher">
    /// A voucher from which to start the update.
    /// </param>
    /// <param name="_toVoucher">
    /// A voucher to end the update.
    /// </param>
    public static void updateJournalNumber(
        LedgerJournalId _originalJournalNumber,
        LedgerJournalId _newJournalNumber,
        Voucher _fromVoucher,
        Voucher _toVoucher = _fromVoucher)
    {
        ExportSalesInvoiceDomesticTaxVoucher exportSalesInvoiceDomesticTaxVoucher;

        ttsbegin;

        update_recordSet exportSalesInvoiceDomesticTaxVoucher
            setting
                JournalNumber = _newJournalNumber
            where exportSalesInvoiceDomesticTaxVoucher.JournalNumber == _originalJournalNumber &&
                exportSalesInvoiceDomesticTaxVoucher.Voucher >= _fromVoucher &&
                exportSalesInvoiceDomesticTaxVoucher.Voucher <= _toVoucher;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVoucherNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the voucher on a <c>ExportSalesInvoiceDomesticTaxVoucher</c> record in a specified journal
    /// that has a specified new voucher.
    /// </summary>
    /// <param name="_journalNumber">
    /// A journal number.
    /// </param>
    /// <param name="_originalVoucher">
    /// The original voucher.
    /// </param>
    /// <param name="_newVoucher">
    /// The new voucher.
    /// </param>
    public static void updateVoucherNumber(
        LedgerJournalId _journalNumber,
        Voucher _originalVoucher,
        Voucher _newVoucher)
    {
        ExportSalesInvoiceDomesticTaxVoucher exportSalesInvoiceDomesticTaxVoucher;

        ttsbegin;

        update_recordSet exportSalesInvoiceDomesticTaxVoucher
            setting
                Voucher = _newVoucher
            where exportSalesInvoiceDomesticTaxVoucher.Voucher == _originalVoucher &&
                exportSalesInvoiceDomesticTaxVoucher.JournalNumber == _journalNumber;

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<CountryRegionCodes>PL</CountryRegionCodes>
	<DeveloperDocumentation>@GLS222038</DeveloperDocumentation>
	<Label>@GLS222037</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>JournalNumber</TitleField1>
	<TitleField2>Voucher</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>Tax</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExportSalesInvoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPosted</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExportSalesInvoiceDomesticTaxVoucher</Name>
			<Label>@GLS222037</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReferenceDomesticSalesTaxVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExportSalesInvoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPosted</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExportSalesInvoice</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPosted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerJournalId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PostingDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReferenceDomesticSalesTaxVoucher</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlVoucher</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ExportSalesInvoiceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ExportSalesInvoice</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ExportSalesInvoiceDomesticTaxVoucherIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ReferenceDomesticSalesTaxVoucher</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DomesticSalesTaxVoucherId</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PostingDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ExportSalesInvoice</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ExportSalesInvoice</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExportSalesInvoice</Name>
					<Field>ExportSalesInvoice</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReferenceDomesticSalesTaxGroup</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>ExportSalesInvoiceDomesticTaxVoucher</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReferenceDomesticSalesTaxVoucher</Name>
					<Field>ReferenceDomesticSalesTaxVoucher</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>