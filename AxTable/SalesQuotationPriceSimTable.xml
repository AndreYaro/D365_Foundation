<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationPriceSimTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesQuotationPriceSimTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the cost price per inventory unit in the currency of the sales quotation line.
    /// </summary>
    /// <param name="_salesQuotationLine">
    /// The sales quotation line for which to calculate the cost price.
    /// </param>
    /// <returns>
    /// The cost price per inventory unit in the currency of the sales quotation line.
    /// </returns>
    public AmountCur calcCostPrice(SalesQuotationLine _salesQuotationLine)
    {
        InventQty           costInventQty;
        CostAmount          costInventValue;
        AmountCur           costPrice;

        // Category based lines always have a cost price of 0.
        if (_salesQuotationLine.isCategoryBased())
        {
            return 0;
        }

        if (_salesQuotationLine.SalesQty > 0)
        {
            if (_salesQuotationLine.isStocked())
            {
                // For inventoried lines the cost is based on inventTrans.
                [costInventQty, costInventValue] = InventTrans::calcCostValue(InventTransOriginSalesQuotationLine::findInventTransOriginId(_salesQuotationLine.DataAreaId, _salesQuotationLine.InventTransId));
                if (costInventQty)
                {
                    costPrice = costInventValue / costInventQty;
                }
            }
            else
            {
                // For non-inventoried lines the cost is based on defined prices.
                costPrice = _salesQuotationLine.inventTable().costPcsPrice(_salesQuotationLine.InventDimId);
            }

            costPrice = costPrice * (_salesQuotationLine.PriceUnit ? _salesQuotationLine.PriceUnit : 1);
        }
        else
        {
            costPrice = _salesQuotationLine.CostPrice;
        }

        // Convert to the currency used on the sales quotation line.
        if (CompanyInfoHelper::standardCurrency() != _salesQuotationLine.CurrencyCode)
        {
            costPrice = ExchangeRateHelper::curPrice(costPrice, _salesQuotationLine.CurrencyCode);
        }
        else
        {
            costPrice = CurrencyExchangeHelper::price(costPrice);
        }

        return costPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCostPriceSalesUnits</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the cost price per sales unit in the currency of the sales quotation line.
    /// </summary>
    /// <param name="_salesQuotationLine">
    /// The sales quotation line for which to calculate the cost price.
    /// </param>
    /// <returns>
    /// The cost price per sales unit in the currency of the sales quotation line.
    /// </returns>
    public AmountCur calcCostPriceSalesUnits(SalesQuotationLine _salesQuotationLine)
    {
        AmountCur costPrice = this.calcCostPrice(_salesQuotationLine);

        // For category based lines there is no inventory unit and the cost price is already in sales units.
        if (!_salesQuotationLine.isCategoryBased())
        {
            costPrice = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_salesQuotationLine.ItemId,
																							  _salesQuotationLine.InventDimId,
																							  costPrice,
																							  _salesQuotationLine.SalesUnit,
																							  _salesQuotationLine.inventTable().inventUnitId(),
																							  NoYes::Yes,
																							  NoYes::No);
        }

        return costPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLineContribution</Name>
				<Source><![CDATA[
    void calculateLineContribution()
    {
        SalesQuotationLine  salesQuotationLine = SalesQuotationLine::find(this.QuotationId, this.LineNum);

        // Calculate margin
        this.Margin = this.NewAmount - (salesQuotationLine.SalesQty * this.calcCostPriceSalesUnits(salesQuotationLine) / ((salesQuotationLine.PriceUnit) ? salesQuotationLine.PriceUnit : 1) );

        if (this.NewAmount != 0)
        {
            // Calculate ratio
            this.ContributionRatio = (this.Margin / this.NewAmount) * 100;
        }
        else
        {
            this.ContributionRatio = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLinePricesFromChangedMargin</Name>
				<Source><![CDATA[
    void calculateLinePricesFromChangedMargin()
    {
        SalesQuotationLine  salesQuotationLine  = SalesQuotationLine::find(this.QuotationId, this.LineNum);
        Amount              costPrice           = this.calcCostPriceSalesUnits(salesQuotationLine);
        Amount              baseAmount;
        Amount              calculatedAmount;
        Amount              markUpPerUnit;
        PriceUnit           priceUnit;

        priceUnit = salesQuotationLine.PriceUnit ? salesQuotationLine.PriceUnit : 1;

        if (((salesQuotationLine.LineAmount - costPrice * salesQuotationLine.SalesQty) > this.Margin) && this.SimResult != SalesQuotationPriceSimResult::LineAmount)
        {
            if (this.NewSalesPricePerUnit == 0)
            {
                this.NewSalesPricePerUnit = salesQuotationLine.SalesPrice;
            }

            if (this.SimResult == SalesQuotationPriceSimResult::DiscountAmount)
            {
                baseAmount = this.NewSalesPricePerUnit + (salesQuotationLine.SalesQty ? salesQuotationLine.SalesMarkup / salesQuotationLine.SalesQty : 0) - salesQuotationLine.MultiLnDisc;

                calculatedAmount = baseAmount - ((salesQuotationLine.MultiLnPercent / 100) * baseAmount);

                this.NewDiscountAmount      = ((calculatedAmount - costPrice) - (salesQuotationLine.SalesQty ? this.Margin / salesQuotationLine.SalesQty : 0)) ;
                this.NewDiscountAmount      = (salesQuotationLine.MultiLnPercent != 100) ? this.NewDiscountAmount / (1 - (salesQuotationLine.MultiLnPercent / 100)) : 0;
                this.NewDiscountPercentage  = 0;

                baseAmount = baseAmount - this.NewDiscountAmount;
                calculatedAmount = baseAmount - ((salesQuotationLine.MultiLnPercent / 100) * baseAmount);

                this.NewAmount = (calculatedAmount * salesQuotationLine.SalesQty)/ priceUnit;
            }
            else
            if (this.SimResult == SalesQuotationPriceSimResult::DiscountPercentage)
            {
                markUpPerUnit = salesQuotationLine.SalesQty ? salesQuotationLine.SalesMarkup / salesQuotationLine.SalesQty : 0;
                baseAmount = (this.NewSalesPricePerUnit + markUpPerUnit - salesQuotationLine.MultiLnDisc);
                calculatedAmount = baseAmount - (baseAmount * (salesQuotationLine.MultiLnPercent / 100));

                this.NewDiscountAmount      = 0;
                // Possible divide by zero
                if (salesQuotationLine.SalesQty && baseAmount)
                {
                    this.NewDiscountPercentage  = ((abs(this.Margin - (((calculatedAmount - costPrice) * salesQuotationLine.SalesQty))) / salesQuotationLine.SalesQty) / baseAmount ) * 100;
                }
                else
                {
                    this.NewDiscountPercentage  = 0;
                }

                calculatedAmount = baseAmount - (baseAmount * (salesQuotationLine.MultiLnPercent / 100)) - (baseAmount * (this.NewDiscountPercentage / 100));

                this.NewAmount              = (calculatedAmount * salesQuotationLine.SalesQty)/ priceUnit;
            }
        }
        else
        {
            this.NewSalesPricePerUnit   = 0;
            this.NewDiscountAmount      = 0;
            this.NewDiscountPercentage  = 0;
            this.NewAmount              = (this.Margin + ((costPrice * salesQuotationLine.SalesQty)/ priceUnit));
        }

        this.ContributionRatio = this.NewAmount ? (this.Margin / this.NewAmount) * 100 : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLinePricesFromChangedRatio</Name>
				<Source><![CDATA[
    void calculateLinePricesFromChangedRatio()
    {
        SalesQuotationLine  salesQuotationLine  = SalesQuotationLine::find(this.QuotationId, this.LineNum);
        Amount              costPrice           = this.calcCostPriceSalesUnits(salesQuotationLine);

        // Possible divide by zero
        this.NewSalesPricePerUnit   = 0;
        this.NewDiscountAmount      = 0;
        this.NewDiscountPercentage  = 0;

        if (this.ContributionRatio != 100)
        {
            this.NewAmount = costPrice / ((-this.ContributionRatio / 100) + 1);
        }
        else
        {
            this.NewAmount = 0;
        }

        this.Margin = (this.ContributionRatio / 100) * this.NewAmount * salesQuotationLine.SalesQty / (salesQuotationLine.PriceUnit ? salesQuotationLine.PriceUnit : 1);
        this.calculateLinePricesFromChangedMargin();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLineTotal</Name>
				<Source><![CDATA[
    void calculateLineTotal()
    {
        SalesQuotationLine  salesQuotationLine = SalesQuotationLine::find(this.QuotationId, this.LineNum);
        AmountCur           baseAmount;

        if (this.NewSalesPricePerUnit > 0)
        {
            baseAmount = this.NewSalesPricePerUnit + (salesQuotationLine.SalesQty ? salesQuotationLine.SalesMarkup / salesQuotationLine.SalesQty : 0) - salesQuotationLine.MultiLnDisc - this.NewDiscountAmount;

            baseAmount = baseAmount - ((salesQuotationLine.MultiLnPercent / 100) * baseAmount) - ((this.NewDiscountPercentage / 100) * baseAmount);

            this.NewAmount = baseAmount * salesQuotationLine.SalesQty / (salesQuotationLine.PriceUnit ? salesQuotationLine.PriceUnit : 1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(SalesQuotationPriceSimTable, NewAmount):
                this.NewDiscountAmount = 0;
                this.NewDiscountPercentage = 0;
                this.NewSalesPricePerUnit = 0;
                this.calculateLineContribution();
                break;

            case fieldNum(SalesQuotationPriceSimTable, NewDiscountAmount):
            case fieldNum(SalesQuotationPriceSimTable, NewDiscountPercentage):
            case fieldNum(SalesQuotationPriceSimTable, NewSalesPricePerUnit):
                if (this.LineNum != 0)
                {
                    this.calculateLineTotal();
                    this.calculateLineContribution();
                }
                break;

            case fieldNum(SalesQuotationPriceSimTable, ContributionRatio):
                if (this.LineNum != 0)
                {
                    this.calculateLinePricesFromChangedRatio();
                }
                break;

            case fieldNum(SalesQuotationPriceSimTable, Margin):
            case fieldNum(SalesQuotationPriceSimTable, SimResult):
                if (this.LineNum != 0)
                {
                    this.calculateLinePricesFromChangedMargin();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuotationHeader</Name>
				<Source><![CDATA[
    boolean
    updateQuotationHeader()
    {
        SalesQuotationTable  salesQuotationTable;

        MCRSalesQuotationTable      mcrSalesQuotationTable;
        boolean                     CurrentUserPermission;
        args                        args;
        RetailInformationSubcodeId  retailInformationSubcodeId;
        SalesEndDiscPct             origSalesEndDiscPct;
        boolean                     overridePrice = false;
        #define.Cancel('Cancel')

        salesQuotationTable = SalesQuotationTable::find(this.QuotationId);
        // Save off the original value.
        origSalesEndDiscPct = salesQuotationTable.DiscPercent;

        salesQuotationTable.DiscPercent = this.NewDiscountPercentage;

        // Only check override parameters if the system parameter is set to false.
        if (!RetailMCRChannelTable::mcrEnableOrderPriceControlFindByUser())
        {
            overridePrice = true;
        }
        else
        {
            MCROverrideLogin mcrOverrideLogin = new MCROverrideLogin();
            retailInformationSubcodeId = mcrOverrideLogin.LaunchPriceOverrideReasonCode(salesQuotationTable,
                                                                                    NoYes::Yes);
            if (retailInformationSubcodeId)
            {
                overridePrice = true;
            }
            else
            {
                salesQuotationTable.DiscPercent = origSalesEndDiscPct;
            }
            
        }
        if (overridePrice)
        {
            ttsbegin;

            salesQuotationTable.selectForUpdate(true);
            salesQuotationTable.reread();

            mcrSalesQuotationTable = salesQuotationTable.mcrSalesQuotationTable();
            mcrSalesQuotationTable.PriceOverride = NoYes::Yes;
            salesQuotationTable.mcrPackMCRSalesQuotationTable(mcrSalesQuotationTable);
            salesQuotationTable.DiscPercent = this.NewDiscountPercentage;
            salesQuotationTable.update();

            ttscommit;
        }

        return overridePrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuotationLine</Name>
				<Source><![CDATA[
    void updateQuotationLine()
    {
        SalesQuotationLine  salesQuotationLine;

        ttsbegin;

        salesQuotationLine = SalesQuotationLine::find(this.QuotationId, this.LineNum, true);

        if (this.NewSalesPricePerUnit == 0)
        {
            salesQuotationLine.MultiLnDisc      = 0;
            salesQuotationLine.MultiLnPercent   = 0;
            salesQuotationLine.SalesMarkup      = 0;
        }

        salesQuotationLine.SalesPrice   = this.NewSalesPricePerUnit;
        salesQuotationLine.LineAmount   = this.NewAmount;
        salesQuotationLine.LineDisc     = this.NewDiscountAmount;
        salesQuotationLine.LinePercent  = this.NewDiscountPercentage;

        salesQuotationLine.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        // Validation fails if the Accounts Receivable parameters are set to look only at the
        // multi line discount.
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            if (fieldnum(SalesQuotationPriceSimTable,SimResult) == _fieldIdToCheck
                && salesparameters::find().Disc == LineMultiLn::MultiLn
                && this.SimResult != salesQuotationPriceSimResult::LineAmount)
            {
                ret = checkFailed("@MCR26020");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSimulationHeader</Name>
				<Source><![CDATA[
    public static void deleteSimulationHeader(QuotationId _quotationId)
    {
        SalesQuotationPriceSimTable salesQuotationPriceSimTable;

        delete_from salesQuotationPriceSimTable where salesQuotationPriceSimTable.QuotationId == _quotationId && salesQuotationPriceSimTable.LineNum == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSimulationLines</Name>
				<Source><![CDATA[
    public static void deleteSimulationLines(QuotationId _quotationId)
    {
        SalesQuotationPriceSimTable salesQuotationPriceSimTable;

        delete_from salesQuotationPriceSimTable where salesQuotationPriceSimTable.QuotationId == _quotationId && salesQuotationPriceSimTable.LineNum != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsSimLines</Name>
				<Source><![CDATA[
    public static boolean existsSimLines(QuotationId _quotationId)
    {
        return _quotationId && (select firstonly RecId from salesQuotationPriceSimTable where salesQuotationPriceSimTable.QuotationId == _quotationId && salesQuotationPriceSimTable.LineNum > 0).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static SalesQuotationPriceSimTable find(QuotationId _quotationId, LineNum _lineNum = 0, boolean _forUpdate = false)
    {
        SalesQuotationPriceSimTable salesQuotationPriceSimTable;

        if (_quotationId)
        {
            salesQuotationPriceSimTable.selectForUpdate(_forUpdate);

            select firstonly salesQuotationPriceSimTable
                where salesQuotationPriceSimTable.QuotationId   == _quotationId &&
                      salesQuotationPriceSimTable.LineNum       == _lineNum;
        }

        return salesQuotationPriceSimTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SmmCRM</ConfigurationKey>
	<DeveloperDocumentation>@SYS124531</DeveloperDocumentation>
	<Label>@SYS94151</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>QuotationId</TitleField1>
	<TitleField2>LineNum</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>QuotationIdLineNumIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>QuotationIdLineNumIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QuotationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewSalesPricePerUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewDiscountAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewDiscountPercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContributionRatio</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Margin</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QuotationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MarginRatio</Name>
			<Label>@SYS94753</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContributionRatio</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Margin</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>modifiedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Margin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContributionRatio</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SimulatedPrices</Name>
			<Label>@SYS80510</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NewSalesPricePerUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewDiscountAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewDiscountPercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SimulationResult</Name>
			<Label>@SYS6769</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SimResult</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ContributionRatio</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesContributionRatio</ExtendedDataType>
			<Label>@SYS94135</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Margin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesContributionMargin</ExtendedDataType>
			<Label>@SYS94136</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NewAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS94123</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NewDiscountAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS94152</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NewDiscountPercentage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Label>@SYS94153</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NewSalesPricePerUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesPrice</ExtendedDataType>
			<Label>@SYS80929</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>QuotationId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>QuotationId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SimResult</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SalesQuotationPriceSimResult</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>QuotationIdLineNumIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>QuotationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesQuotationLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesQuotationLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>QuotationId</Name>
					<Field>QuotationId</Field>
					<RelatedField>QuotationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LineNum</Name>
					<Field>LineNum</Field>
					<RelatedField>LineNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesQuotationTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesQuotationTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>QuotationId</Name>
					<Field>QuotationId</Field>
					<RelatedField>QuotationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>