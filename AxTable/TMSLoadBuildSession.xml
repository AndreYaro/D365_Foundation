<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSLoadBuildSession</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TMSLoadBuildSession extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cleanUpSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all the load building session data.
    /// </summary>
    /// <param name="_tmsLoadBuildSessionId">
    /// The record ID of the load building session.
    /// </param>
    public static void cleanUpSession(TMSLoadBuildSessionId _tmsLoadBuildSessionId)
    {
        TMSLoadBuildSession             loadBuildSession;
        TMSProposedLoad                 proposedLoad;
        TMSProposedLoadContent          proposedLoadContent;
        TMSLoadBuildStrategyInputSet    strategyinputSet;

        ttsBegin;

        strategyinputSet.skipDeleteActions(true);
        delete_from strategyinputSet where strategyinputSet.LoadBuildSession == _tmsLoadBuildSessionId;

        proposedLoadContent.skipDeleteActions(true);
        delete_from proposedLoadContent where proposedLoadContent.LoadBuildSession == _tmsLoadBuildSessionId;

        proposedLoad.skipDeleteActions(true);
        delete_from proposedLoad where proposedLoad.LoadBuildSession == _tmsLoadBuildSessionId;

        loadBuildSession.skipDeleteActions(true);
        delete_from loadBuildSession where loadBuildSession.RecId == _tmsLoadBuildSessionId;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>TMSLoadBuildSession</c> table exists.
    /// </summary>
    /// <param name="_loadBuildSession">
    /// The record ID of the <c>TMSLoadBuildSession</c> table.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(TMSLoadBuildSessionId _loadBuildSession)
    {
        TMSLoadBuildSession    loadBuildSession;

        if (_loadBuildSession)
        {
            select firstonly RecId from loadBuildSession
                where loadBuildSession.RecId == _loadBuildSession;
        }

        return (loadBuildSession.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TMSLoadBuildSession</c> table.
    /// </summary>
    /// <param name="_loadBuildSession">
    /// The record ID of the <c>TMSLoadBuildSession</c> table.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>TMSLoadBuildSession</c> table; otherwise, an empty record.
    /// </returns>
    public static TMSLoadBuildSession find(
        TMSLoadBuildSessionId   _loadBuildSession,
        boolean                 _forUpdate = false)
    {
        TMSLoadBuildSession    loadBuildSession;

        if (_loadBuildSession)
        {
            loadBuildSession.selectForUpdate(_forUpdate);

            select firstonly loadBuildSession
                where loadBuildSession.RecId == _loadBuildSession;
        }

        return loadBuildSession;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@SYP4861072</DeveloperDocumentation>
	<Label>@SYP4861071</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>RecId</TitleField1>
	<TitleField2>SessionState</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>Transportation</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SessionState</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SessionState</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SessionState</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TMSLoadBuildSessionState</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>