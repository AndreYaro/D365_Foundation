<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpExciseComponentTotals_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Temp excise component totals table.
/// </summary>
public class TmpExciseComponentTotals_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exciseComponentTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get excise component totals.
    /// </summary>
    /// <param name = "_tmpExciseInquiryTable">Temp excise inquiry table.</param>
    /// <param name = "_common">Common.</param>
    /// <returns>Record of temp excise component totals.</returns>
    public  TmpExciseComponentTotals_IN exciseComponentTotals(
        TmpExciseInquiryTable_IN      _tmpExciseInquiryTable,
        Common                        _common)
    {
        TmpExciseComponentTotals_IN         tmpExciseTaxComponentTotals;
        TmpExciseInquiryTable_IN            tmpExciseInquiryTableLoc;
        ExciseTaxTotal_IN                   exciseTaxTotal;
        CurrencyExchangeHelper              currencyHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                                                     _tmpExciseInquiryTable.TransDate);
        switch (_common.TableId)
        {
            case tablenum(ExciseTaxTotal_IN):
                exciseTaxTotal = _common;

                while select sum(TaxAmount), TaxComponentTable from _tmpExciseInquiryTable
                    group by TaxComponentTable
                {
                    tmpExciseTaxComponentTotals.TaxComponentTable          = _tmpExciseInquiryTable.TaxComponentTable;
                    tmpExciseTaxComponentTotals.AmountMST                  = TmpExciseComponentTotals_IN::getAmountMST(_tmpExciseInquiryTable.TaxComponentTable,
                                                                                                                       exciseTaxTotal);
                    tmpExciseTaxComponentTotals.AccumulatedAmountMST       = _tmpExciseInquiryTable.TaxAmount;
                    tmpExciseTaxComponentTotals.AmountSecondary            = currencyHelper.calculateAccountingToReportingAdjustment(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                                     tmpExciseTaxComponentTotals.AmountMST,
                                                                                                                                     true);
                    tmpExciseTaxComponentTotals.AccumulatedAmountSecondary = currencyHelper.calculateAccountingToReportingAdjustment(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                                     tmpExciseTaxComponentTotals.AccumulatedAmountMST,
                                                                                                                                     true);
                    tmpExciseTaxComponentTotals.insert();
                }
                break;
            case tablenum(TmpExciseInquiryTable_IN):
                tmpExciseInquiryTableLoc = _common;

                while select sum(TaxAmount), TaxComponentTable from _tmpExciseInquiryTable
                    group by TaxComponentTable
                {
                    tmpExciseTaxComponentTotals.TaxComponentTable          = _tmpExciseInquiryTable.TaxComponentTable;
                    tmpExciseTaxComponentTotals.AmountMST                  = TmpExciseComponentTotals_IN::getAmountMST(_tmpExciseInquiryTable.TaxComponentTable,
                                                                                                                       null,
                                                                                                                       tmpExciseInquiryTableLoc);
                    tmpExciseTaxComponentTotals.AccumulatedAmountMST       = _tmpExciseInquiryTable.TaxAmount;
                    tmpExciseTaxComponentTotals.AmountSecondary            = currencyHelper.calculateTransactionCurrencyToReportingCurrency(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                            tmpExciseTaxComponentTotals.AmountMST);
                    tmpExciseTaxComponentTotals.AccumulatedAmountSecondary = currencyHelper.calculateTransactionCurrencyToReportingCurrency(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                            tmpExciseTaxComponentTotals.AccumulatedAmountMST);
                    tmpExciseTaxComponentTotals.insert();
                }
                break;
            default:
                break;
        }

        return tmpExciseTaxComponentTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBaseCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays base currency.
    /// </summary>
    /// <returns>Base currency code for display.</returns>
    display CurrencyCode getBaseCurrency()
    {
        return  Ledger::accountingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSecondaryCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays secondary currency
    /// </summary>
    /// <returns>Secondary currecy for display.</returns>
    display CurrencyCode getSecondaryCurrency()
    {
        return  Ledger::reportingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get amount MST.
    /// </summary>
    /// <param name = "_taxComponentTable">Tax component table recid.</param>
    /// <param name = "_exciseTaxTotal">Excise tax total.</param>
    /// <param name = "_tmpExciseInquiryTable">Temp exicse inquiry table.</param>
    /// <returns>Amount MST of excise tax total.</returns>
    public static AmountMST getAmountMST(
        RefRecID                    _taxComponentTable,
        ExciseTaxTotal_IN           _exciseTaxTotal             = null,
        TmpExciseInquiryTable_IN    _tmpExciseInquiryTable      = null)
    {
        AmountMST amount;

        if (_exciseTaxTotal)
        {
            amount = _taxComponentTable == _exciseTaxTotal.TaxComponentTable ? _exciseTaxTotal.TaxAmount : 0;
        }
        else
        {
            amount = _taxComponentTable == _tmpExciseInquiryTable.TaxComponentTable ? _tmpExciseInquiryTable.TaxAmount : 0;
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTmpExciseComponentTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert into temp excise component totals.
    /// </summary>
    /// <param name = "_tmpExciseInquiryTable">Temp excise inquiry table.</param>
    /// <param name = "_exciseTaxTotal">Excise tax totals.</param>
    /// <param name = "_tmpExciseInquiryTableLoc">Temp exicse inquiry table.</param>
    /// <returns>Temp excise component totals.</returns>
    public static TmpExciseComponentTotals_IN insertIntoTmpExciseComponentTotals(
        TmpExciseInquiryTable_IN    _tmpExciseInquiryTable,
        ExciseTaxTotal_IN           _exciseTaxTotal,
        TmpExciseInquiryTable_IN    _tmpExciseInquiryTableLoc)
    {
        TmpExciseComponentTotals_IN         tmpExciseTaxComponentTotals;
        CurrencyExchangeHelper              currencyHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                                                     _tmpExciseInquiryTable.TransDate);

        if (_exciseTaxTotal.RecId)
        {
            while select sum(TaxAmount), TaxComponentTable from _tmpExciseInquiryTable
                group by TaxComponentTable
            {
                tmpExciseTaxComponentTotals.TaxComponentTable          = _tmpExciseInquiryTable.TaxComponentTable;
                tmpExciseTaxComponentTotals.AmountMST                  = TmpExciseComponentTotals_IN::getAmountMST(_tmpExciseInquiryTable.TaxComponentTable,
                                                                                                                   _exciseTaxTotal);
                tmpExciseTaxComponentTotals.AccumulatedAmountMST       = _tmpExciseInquiryTable.TaxAmount;
                tmpExciseTaxComponentTotals.AmountSecondary            = currencyHelper.calculateAccountingToReportingAdjustment(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                                 tmpExciseTaxComponentTotals.AmountMST,
                                                                                                                                 true);
                tmpExciseTaxComponentTotals.AccumulatedAmountSecondary = currencyHelper.calculateAccountingToReportingAdjustment(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                                 tmpExciseTaxComponentTotals.AccumulatedAmountMST,
                                                                                                                                 true);
                tmpExciseTaxComponentTotals.insert();
            }
        }
        if (_tmpExciseInquiryTableLoc.RecId)
        {
            while select sum(TaxAmount), TaxComponentTable from _tmpExciseInquiryTable
                group by TaxComponentTable
            {
                tmpExciseTaxComponentTotals.TaxComponentTable          = _tmpExciseInquiryTable.TaxComponentTable;
                tmpExciseTaxComponentTotals.AmountMST                  = TmpExciseComponentTotals_IN::getAmountMST(_tmpExciseInquiryTable.TaxComponentTable,
                                                                                                                   null,
                                                                                                                   _tmpExciseInquiryTableLoc);
                tmpExciseTaxComponentTotals.AccumulatedAmountMST       = _tmpExciseInquiryTable.TaxAmount;
                tmpExciseTaxComponentTotals.AmountSecondary            = currencyHelper.calculateAccountingToReportingAdjustment(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                                 tmpExciseTaxComponentTotals.AmountMST,
                                                                                                                                 true);
                tmpExciseTaxComponentTotals.AccumulatedAmountSecondary = currencyHelper.calculateAccountingToReportingAdjustment(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                                 tmpExciseTaxComponentTotals.AccumulatedAmountMST,
                                                                                                                                 true);
                tmpExciseTaxComponentTotals.insert();
            }
        }

        return tmpExciseTaxComponentTotals;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<Label>@GLS6607</Label>
	<TitleField1>TaxComponentTable</TitleField1>
	<TitleField2>AmountMST</TitleField2>
	<ClusteredIndex>RecId</ClusteredIndex>
	<PrimaryIndex>RecId</PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxComponentTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccumulatedAmountMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AccumulatedAmountMST</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS25443</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AccumulatedAmountSecondary</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@GLS6075</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountMST</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountSecondary</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS83899</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxComponentTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS5042</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxComponentTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxComponentTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxComponentTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxComponentTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxComponentTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxComponentTable_IN_TmpExciseComponentTotals_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxComponentTable</Name>
					<Field>TaxComponentTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>