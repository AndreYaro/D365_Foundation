<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocumentType_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class FiscalDocumentType_BR extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateNFeFederalFields</Name>
				<Source><![CDATA[
    private static boolean validateNFeFederalFields(FiscalDocumentType_BR fiscalDocumentType)
    {
        boolean ret = true;

        if (fiscalDocumentType.ElectronicInvoice)
        {
            ret = checkFailed("@SYS4006873");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNFeCityFields</Name>
				<Source><![CDATA[
    private static boolean validateNFeCityFields(FiscalDocumentFormat_BR fiscalDocumentFormat)
    {
        boolean ret = true;

        if (fiscalDocumentFormat.EInvoiceExportLayout == '' && fiscalDocumentFormat.ERFormatMapping == nullValueBaseType(Types::Int64))
        {
            ret = checkFailed(strFmt("@Brazil:ElectronicReportingOrConiguratorexportFieldsMustBeFilledIn", fieldId2pname(tableNum(FiscalDocumentFormat_BR), fieldNum(FiscalDocumentFormat_BR, EInvoiceExportLayout)), fieldId2pname(tableNum(FiscalDocumentFormat_BR), fieldNum(FiscalDocumentFormat_BR, ERFormatMapping))));
        }
        if (fiscalDocumentFormat.EInvoiceImportLayout == '')
        {
            ret = checkFailed(strFmt("@SYS84753", fieldId2pname(tableNum(FiscalDocumentFormat_BR), fieldNum(FiscalDocumentFormat_BR, EInvoiceImportLayout))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNonNFeCityAndNonNFeFederal</Name>
				<Source><![CDATA[
    private static boolean validateNonNFeCityAndNonNFeFederal(FiscalDocumentType_BR fiscalDocumentType, FiscalDocumentFormat_BR fiscalDocumentFormat)
    {
        boolean ret = true;

        if (fiscalDocumentType.ElectronicInvoice)
        {
            ret = checkFailed("@SYS4006873");
        }
        if (fiscalDocumentFormat.MaxItemLines == 0)
        {
            ret = checkFailed(strFmt("@SYS84753", fieldId2pname(tableNum(FiscalDocumentFormat_BR), fieldNum(FiscalDocumentFormat_BR, MaxItemLines))));
        }
        if (fiscalDocumentFormat.MaxItemDescriptionSize == 0)
        {
            ret = checkFailed(strFmt("@SYS84753", fieldId2pname(tableNum(FiscalDocumentFormat_BR), fieldNum(FiscalDocumentFormat_BR, MaxItemDescriptionSize))));
        }
        if (fiscalDocumentFormat.MaxServiceItemLines == 0)
        {
            ret = checkFailed(strFmt("@SYS84753", fieldId2pname(tableNum(FiscalDocumentFormat_BR), fieldNum(FiscalDocumentFormat_BR, MaxServiceItemLines))));
        }
        if (fiscalDocumentFormat.MaxServiceItemDescription == 0)
        {
            ret = checkFailed(strFmt("@SYS84753", fieldId2pname(tableNum(FiscalDocumentFormat_BR), fieldNum(FiscalDocumentFormat_BR, MaxServiceItemDescription))));
        }
        if (fiscalDocumentFormat.MaxMemoLines == 0)
        {
            ret = checkFailed(strFmt("@SYS84753", fieldId2pname(tableNum(FiscalDocumentFormat_BR), fieldNum(FiscalDocumentFormat_BR, MaxMemoLines))));
        }
        if (fiscalDocumentFormat.MaxMemoDescriptionSize == 0)
        {
            ret = checkFailed(strFmt("@SYS84753", fieldId2pname(tableNum(FiscalDocumentFormat_BR), fieldNum(FiscalDocumentFormat_BR, MaxMemoDescriptionSize))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldsDependingOnFiscalDocModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the table is correctly filled depending on FiscalDocModel.
    /// </summary>
    /// <returns>
    /// True if verification is successful; otherwise, false.
    /// </returns>
    public static boolean validateFieldsDependingOnFiscalDocModel(FiscalDocumentType_BR fiscalDocumentType, FiscalDocumentFormat_BR fiscalDocumentFormat)
    {
        boolean                ret = true;
        FiscalDocModel_BR      fiscalDocModel = FiscalDocModel_BR::find(fiscalDocumentType.FiscalDocumentModel);

        if (!fiscalDocModel.IssuingSupported)
        {
            ret = checkFailed("@SYS4006873");
        }
        else if (fiscalDocModel.IsService && fiscalDocumentType.ElectronicInvoice)
        {
            ret = FiscalDocumentType_BR::validateNFeCityFields(fiscalDocumentFormat);
        }
        else if (fiscalDocModel.IsForNFeFederal)
        {
            ret = FiscalDocumentType_BR::validateNFeFederalFields(fiscalDocumentType);
        }
        else
        {
            ret = FiscalDocumentType_BR::validateNonNFeCityAndNonNFeFederal(fiscalDocumentType, fiscalDocumentFormat);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSeries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the series is numeric if the current fiscal document type is NF-e.
    /// </summary>
    /// <returns>
    /// True if verification is successful; otherwise, false.
    /// </returns>
    public boolean checkSeries()
    {
        if (this.isEfDocument() && this.FiscalDocumentSeries != strkeep(this.FiscalDocumentSeries, '0123456789'))
        {
            return checkFailed("@GLS62560");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalEstablishment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>FiscalEstablishment_BR</c> associated with the <c>FiscalDocumentType_BR</c>
    /// </summary>
    /// <returns>Returns the <c>FiscalEstablishment_BR</c> record.</returns>
    public FiscalEstablishment_BR fiscalEstablishment()
    {
        return FiscalEstablishment_BR::find(this.FiscalEstablishment_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>format</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>FiscalDocumentFormat_BR</c> associated with the <c>FiscalDocumentType_BR</c>
    /// </summary>
    /// <returns>Returns the <c>FiscalDocumentFormat_BR</c> record.</returns>
    public FiscalDocumentFormat_BR format()
    {
        FiscalDocumentFormat_BR format;

        select format
            where format.FiscalDocumentType_BR == this.RecId;

        return format;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInvoices</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Verifies whether there are any invoices for the current fiscal document type
    /// </summary>
    /// <returns>
    ///     True if there are any invoices. False otherwise.
    /// </returns>
    public boolean hasInvoices()
    {
        CustInvoiceJour custInvoiceJour;
        CustInvoiceJour_BR custInvoiceJour_BR;
        VendInvoiceJour vendInvoiceJour;

        if (!this.RecId)
        {
            return false;
        }

        select firstOnly custInvoiceJour
            exists join custInvoiceJour_BR
                where custInvoiceJour_BR.CustInvoiceJour == custInvoiceJour.RecId
                    && custInvoiceJour_BR.FiscalDocumentType_BR == this.RecId;

        select firstOnly vendInvoiceJour
            where vendInvoiceJour.FiscalDocumentType_BR == this.RecId;

        return (custInvoiceJour || vendInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEfDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the current fiscal document type is NF-e.
    /// </summary>
    /// <returns>
    /// True if verification is successful; otherwise, false.
    /// </returns>
    public boolean isEfDocument()
    {
        #NFPrinting_BR

        return this.FiscalDocumentModel == #EFDDocModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (!FiscalDocModel_BR::find(this.FiscalDocumentModel).IssuingSupported)
        {
            ret = checkFailed("@SYS4000269");
        }

        ret = this.checkSeries() && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsAnyTaxFiscalDocSetupToEFDoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies whether there is at least one fiscal document type setup as NF-e.
    /// </summary>
    /// <returns>
    /// True if verification is successful; otherwise, false.
    /// </returns>
    static boolean existsAnyTaxFiscalDocSetupToEFDoc()
    {
        #NFPrinting_BR

        return (select firstonly fiscalDocumentType_BR where fiscalDocumentType_BR.FiscalDocumentModel == #EFDDocModel).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>FiscalDocumentType_BR</c> table.
    /// </summary>
    /// <param name="_fiscalDocTypeId">
    /// The fiscal document type ID of the <c>FiscalDocumentType_BR</c> record to find.
    /// </param>
    /// <param name="_fiscalEstablishmentId">
    /// The fiscal establishment ID of the <c>FiscalDocumentType_BR</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that indicates whether to retrieve the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>FiscalDocumentType_BR</c> table, if found; otherwise, an empty record.
    /// </returns>
    static FiscalDocumentType_BR find(
        FiscalDocumentTypeId_BR     _fiscalDocTypeId,
        FiscalEstablishmentId_BR    _fiscalEstablishmentId,
        boolean                _forUpdate = false)
    {
        FiscalDocumentType_BR   fiscalDocumentTable;
        FiscalEstablishment_BR  fiscalEstablishment;

        if (_fiscalDocTypeId)
        {
            fiscalDocumentTable.selectForUpdate(_forUpdate);

            select firstonly fiscalDocumentTable
                where fiscalDocumentTable.FiscalDocumentTypeId == _fiscalDocTypeId
                exists join fiscalEstablishment
                    where fiscalEstablishment.RecId == fiscalDocumentTable.FiscalEstablishment_BR
                        && fiscalEstablishment.FiscalEstablishmentId == _fiscalEstablishmentId;
        }

        return fiscalDocumentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>FiscalDocumentType_BR</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The <c>recId</c> value of the <c>FiscalDocumentType_BR</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that indicates whether to retrieve the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>FiscalDocumentType_BR</c> table, if found; otherwise, an empty record.
    /// </returns>
    static FiscalDocumentType_BR findRecId(recId    _recId,
                                           boolean  _forUpdate = false)
    {
        FiscalDocumentType_BR fiscalDocumentTable;

        fiscalDocumentTable.selectForUpdate(_forUpdate);

        if (_recId)
        {
            select firstonly fiscalDocumentTable
                where fiscalDocumentTable.RecId == _recId;
        }

        return fiscalDocumentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentNumberSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the fiscal document number sequence for a given fiscal document type rec ID, based on a contingence mode.
    /// </summary>
    /// <param name="_fiscalDocumentTypeRecId">
    /// The fiscal document type rec ID to get the specie from.
    /// </param>
    /// <returns>
    /// The fiscal document number sequence.
    /// </returns>
    public static NumberSequenceTable getFiscalDocumentNumberSequence(FiscalDocumentTypeRecID_BR _fiscalDocumentTypeRecId)
    {
        FiscalDocumentType_BR       fiscalDocumentType;

        fiscalDocumentType = FiscalDocumentType_BR::findRecId(_fiscalDocumentTypeRecId);

        return NumberSequenceTable::find(fiscalDocumentType.FiscalDocumentNumberSequence);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentSeries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the fiscal document series for a given fiscal document type based on a contingence mode.
    /// </summary>
    /// <param name="_fiscalDocumentTypeRecId">
    /// The fiscal document type rec ID to get the specie from.
    /// </param>
    /// <returns>
    /// The fiscal document series.
    /// </returns>
    public static FiscalDocumentSeries_BR getFiscalDocumentSeries(FiscalDocumentTypeRecID_BR _fiscalDocumentTypeRecId)
    {
        FiscalDocumentType_BR       fiscalDocumentType;

        fiscalDocumentType = FiscalDocumentType_BR::findRecId(_fiscalDocumentTypeRecId);

        return fiscalDocumentType.FiscalDocumentSeries;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentSpecie</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the fiscal document specie for a given fiscal document type ID.
    /// </summary>
    /// <param name="_fiscalDocuTypeId">
    /// The fiscal document type ID to get the specie from.
    /// </param>
    /// <returns>
    /// The fiscal document specie, if any record is found for the given fiscal document type ID; otherwise, the specie "NF".
    /// </returns>
    public static FiscalDocumentSpecie_BR getFiscalDocumentSpecie(FiscalDocumentTypeId_BR _fiscalDocuTypeId)
    {
        FiscalDocumentType_BR        fiscalDocumentType;

        select FiscalDocumentSpecie
        from fiscalDocumentType
        where fiscalDocumentType.FiscalDocumentTypeId == _fiscalDocuTypeId;

        if (fiscalDocumentType)
        {
            return fiscalDocumentType.FiscalDocumentSpecie;
        }
        else
        {
            return FiscalDocumentSpecie_BR::NF;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Customized lookupreference used to search for the correct fiscal document types, based on a fiscal establishment.
    /// </summary>
    /// <param name="_fiscalEstablishmentRecID">
    /// The <c>recId</c> value of the fiscal establishment.
    /// </param>
    /// <param name="_formReferenceControl">
    /// The control where the lookup was called.
    /// </param>
    /// <returns>
    /// The <c>recID</c> value of the <c>FiscalDocumentType_BR</c> table record chosen.
    /// </returns>
    public static Common lookupReference(FiscalEstablishmentRecId_BR _fiscalEstablishmentRecID, FormReferenceControl _formReferenceControl)
    {
        Query                  query = new Query();

        SysReferenceTableLookup lookup = SysReferenceTableLookup::newParameters(tablenum(FiscalDocumentType_BR), _formReferenceControl);

        lookup.addLookupfield(fieldnum(FiscalDocumentType_BR, FiscalEstablishment_BR));
        lookup.addLookupfield(fieldnum(FiscalDocumentType_BR, FiscalDocumentTypeId));
        lookup.addLookupfield(fieldnum(FiscalDocumentType_BR, FiscalDocumentSeries));
        lookup.addLookupfield(fieldnum(FiscalDocumentType_BR, FiscalDocumentModel));

        query.addDataSource(tableNum(FiscalDocumentType_BR)).addRange(fieldNum(FiscalDocumentType_BR, FiscalEstablishment_BR)).value(queryValue(_fiscalEstablishmentRecID));
        lookup.parmQuery(query);

        return lookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// It validates fields, customized for FiscalDocumentNumberSequence field
    /// </summary>
    /// <param name = "_fieldIdToCheck">
    /// The Id of the field to be validated
    /// </param>
    /// <returns>
    /// True if field is valid otherwise false
    /// </returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(FiscalDocumentType_BR, FiscalDocumentNumberSequence):
                NumberSequenceTable     numberSequenceTable = NumberSequenceTable::find(this.FiscalDocumentNumberSequence);
                NumberSequenceScope     numberSequenceScope = NumberSequenceScope::find(numberSequenceTable.NumberSequenceScope);
                if (!numberSequenceTable.Continuous || numberSequenceScope.DataArea != curext())
                {
                    ret = checkFailed("@Brazil:FieldValidationNumberSequence");
                }
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>BR</CountryRegionCodes>
	<DeveloperDocumentation>@GLS63458</DeveloperDocumentation>
	<Label>@GLS191</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>FiscalDocumentTypeId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>FiscalBooksBrazil</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>FiscalDocumentIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentNumberSequence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceIssueDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FiscalEstablishment_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FiscalEstablishment_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentTypeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EFDocument</Name>
			<Label>@GLS62503</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EInvoice</Name>
			<Label>@GLS62505</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ElectronicInvoice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalDocumentType</Name>
			<Label>@GLS191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentTypeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalDocumentTypeReference</Name>
			<Label>@GLS191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentTypeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FiscalEstablishment_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentSeries</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoice</Name>
			<Label>@SYS12128</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentNumberSequence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceIssueDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS15217</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentSpecie</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ElectronicInvoice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ElectronicInvoice_BR</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FiscalDocumentModel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FiscalDocumentModel_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FiscalDocumentNumberSequence</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FiscalDocumentSequenceRecId_BR</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FiscalDocumentSeries</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FiscalDocumentSeries_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FiscalDocumentSpecie</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>FiscalDocumentSpecie_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FiscalDocumentTypeId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FiscalDocumentTypeId_BR</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FiscalEstablishment_BR</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FiscalEstablishmentRecId_BR</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InvoiceIssueDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceIssueDate_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FiscalDocumentName_BR</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FiscalDocumentIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>FiscalEstablishment_BR</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FiscalDocumentTypeId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>NumberSequenceTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>FiscalDocumentNumberSequence</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>FiscalDocModel_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FiscalDocModel_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalDocumentModel</Name>
					<Field>FiscalDocumentModel</Field>
					<RelatedField>Model</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FiscalDocumentNumberSequence</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>NumberSequenceTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>FiscalDocumentNumberSequence</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FiscalDocumentType_BR</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalDocumentNumberSequence</Name>
					<Field>FiscalDocumentNumberSequence</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>FiscalDocumentTypeId</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>FiscalDocumentType_BR</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalDocumentTypeId</Name>
					<SourceEDT>FiscalDocumentTypeId_BR</SourceEDT>
					<Field>FiscalDocumentTypeId</Field>
					<RelatedField>FiscalDocumentTypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FiscalEstablishment_BR</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>FiscalEstablishment_BR</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalEstablishment_BR</Name>
					<Field>FiscalEstablishment_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>