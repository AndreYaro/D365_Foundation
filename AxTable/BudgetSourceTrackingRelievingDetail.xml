<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetSourceTrackingRelievingDetail</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetSourceTrackingRelievingDetail extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayRelievedTransactionNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the transaction number of the <c>BudgetSourceTrackingDetail</c> record that is relieving.
    /// </summary>
    /// <returns>
    /// The transaction number of the <c>BudgetSourceTrackingDetail</c> record that is relieving.
    /// </returns>
    public display DocumentNumLarge displayRelievedTransactionNumber()
    {
        BudgetSourceTrackingDetail  budgetSourceTrackingDetailLocal;
        BudgetSourceTracking        budgetSourceTrackingLocal;

        if (hasFieldAccess(tableNum(BudgetSourceTrackingRelievingDetail), fieldNum(BudgetSourceTrackingRelievingDetail, RelievedBudgetSourceTrackingDetail), AccessType::View)
            && hasTableAccess(tableNum(BudgetSourceTracking), AccessType::View)
            && hasTableAccess(tableNum(BudgetSourceTrackingDetail), AccessType::View))
        {
            select firstonly TrackingNumber
                from budgetSourceTrackingLocal
                exists join budgetSourceTrackingDetailLocal
                    where budgetSourceTrackingLocal.RecId == budgetSourceTrackingDetailLocal.BudgetSourceTracking
                    && budgetSourceTrackingDetailLocal.RecId == this.RelievedBudgetSourceTrackingDetail;
        }

        return budgetSourceTrackingLocal.TrackingNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRelievingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the tracking date of the <c>BudgetSourceTrackingDetail</c> record that is relieving.
    /// </summary>
    /// <returns>
    /// The transaction number of the <c>BudgetSourceTrackingDetail</c> record that is relieving.
    /// </returns>
    public display TransDate displayRelievingDate()
    {
        BudgetSourceTracking budgetSourceTrackingLocal;

        if (hasFieldAccess(tableNum(BudgetSourceTrackingRelievingDetail), fieldNum(BudgetSourceTrackingRelievingDetail, RelievingBudgetSourceTracking), AccessType::View)
            && hasTableAccess(tableNum(BudgetSourceTracking), AccessType::View))
        {
            budgetSourceTrackingLocal = BudgetSourceTracking::find(this.RelievingBudgetSourceTracking);
        }

        return budgetSourceTrackingLocal.TrackingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRelievingTransactionNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the transaction number of the <c>BudgetSourceTrackingDetail</c> record that is relieving.
    /// </summary>
    /// <returns>
    /// The transaction number of the <c>BudgetSourceTrackingDetail</c> record that is relieving.
    /// </returns>
    public display DocumentNumLarge displayRelievingTransactionNumber()
    {
        BudgetSourceTracking budgetSourceTrackingLocal;

        if (hasFieldAccess(tableNum(BudgetSourceTrackingRelievingDetail), fieldNum(BudgetSourceTrackingRelievingDetail, RelievingBudgetSourceTracking), AccessType::View)
            && hasTableAccess(tableNum(BudgetSourceTracking), AccessType::View))
        {
            budgetSourceTrackingLocal = BudgetSourceTracking::find(this.RelievingBudgetSourceTracking);
        }

        return budgetSourceTrackingLocal.TrackingNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>BudgetSourceTrackingRelievingDetail</c> table exists and
    /// displays an error if it does not exist.
    /// </summary>
    /// <param name="_recId">
    /// The record Id of the record to find.
    /// </param>
    /// <param name="_userConnection">
    /// The <c>UserConnection</c> that is used to determine whether the specified record in the <c>BudgetSourceTrackingRelievingDetail</c> table exists; optional, default is null.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(recId _recId, UserConnection _userConnection = null)
    {
        boolean ret = true;

        if (!BudgetSourceTrackingRelievingDetail::exist(_recId, _userConnection))
        {
            ret = checkFailed(strFmt(BudgetSourceTrackingRelievingDetail::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>BudgetSourceTrackingRelievingDetail</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record Id of the record to find.
    /// </param>
    /// <param name="_userConnection">
    /// The <c>UserConnection</c> that is used to determine whether the specified record in the <c>BudgetSourceTrackingRelievingDetail</c> table exists; optional, default is null.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId, UserConnection _userConnection = null)
    {
        boolean found;
        BudgetSourceTrackingRelievingDetail budgetSourceTrackingRelievingDetail;

        budgetSourceTrackingRelievingDetail = BudgetSourceTrackingRelievingDetail::find(_recId, false, ConcurrencyModel::Auto, _userConnection);
        found = (budgetSourceTrackingRelievingDetail.RecId != 0);

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existRelievedBudgetSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>BudgetSourceTrackingRelievingDetail</c> table
    /// exists.
    /// </summary>
    /// <param name="_relievedBudgetSourceRecId">
    /// The record ID of the <c>BudgetSource</c> table that is relieved for which the
    /// <c>BudgetSourceTrackingRelievingDetail</c> record that is corresponding is to be searched.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existRelievedBudgetSource(BudgetSourceRecId _relievedBudgetSourceRecId)
    {
        BudgetSourceTrackingRelievingDetail budgetSourceTrackingRelievingDetail;
        BudgetSourceTrackingDetail budgetSourceTrackingDetail;
        BudgetSourceTracking budgetSourceTracking;

        if (_relievedBudgetSourceRecId)
        {
            select firstonly RecId from budgetSourceTrackingRelievingDetail
                order by RecId
                exists join budgetSourceTrackingDetail
                where budgetSourceTrackingRelievingDetail.RelievedBudgetSourceTrackingDetail == budgetSourceTrackingDetail.RecId
                exists join budgetSourceTracking
                where budgetSourceTrackingDetail.BudgetSourceTracking == budgetSourceTracking.RecId &&
                    budgetSourceTracking.BudgetSource == _relievedBudgetSourceRecId;
        }

        return (budgetSourceTrackingRelievingDetail.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existRelievingBudgetSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a specified record is located in a <c>BudgetSourceTrackingRelievingDetail</c>
    /// table.
    /// </summary>
    /// <param name="_relievingBudgetSourceRecId">
    /// The record ID of the relieving <c>BudgetSource</c> table for which the corresponding
    /// <c>BudgetSourceTrackingRelievingDetail</c> record is to be searched.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existRelievingBudgetSource(BudgetSourceRecId _relievingBudgetSourceRecId)
    {
        BudgetSourceTrackingRelievingDetail budgetSourceTrackingRelievingDetail;
        BudgetSourceTracking budgetSourceTracking;

        if (_relievingBudgetSourceRecId)
        {
            select firstonly RecId
                from budgetSourceTrackingRelievingDetail
                exists join budgetSourceTracking
                where budgetSourceTracking.RecId == budgetSourceTrackingRelievingDetail.RelievingBudgetSourceTracking &&
                      budgetSourceTracking.BudgetSource == _relievingBudgetSourceRecId;
        }

        return (budgetSourceTrackingRelievingDetail.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetSourceTrackingRelievingDetail</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record Id of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <param name="_userConnection">
    /// The <c>UserConnection</c> that is used to find the specified record in the <c>BudgetSourceTrackingRelievingDetail</c> table; optional, default is null.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetSourceTrackingRelievingDetail</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetSourceTrackingRelievingDetail find(
        recId               _recId ,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto,
        UserConnection      _userConnection = null)
    {
        BudgetSourceTrackingRelievingDetail budgetSourceTrackingRelievingDetail;

        budgetSourceTrackingRelievingDetail.selectForUpdate(_forupdate);

        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetSourceTrackingRelievingDetail.concurrencyModel(_concurrencyModel);
        }

        if (_userConnection)
        {
            budgetSourceTrackingRelievingDetail.setConnection(_userConnection);
        }

        select firstonly budgetSourceTrackingRelievingDetail
            where budgetSourceTrackingRelievingDetail.RecId == _recId;

        return budgetSourceTrackingRelievingDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRelievingAndRelievedBudgetSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetSourceTrackingRelievingDetail</c> table.
    /// </summary>
    /// <param name="_relievingBudgetSourceTrackingId">
    /// The record ID of the relieving <c>BudgetSourceTracking</c> for which its corresponding
    /// <c>BudgetSourceTrackingRelievingDetail</c> record is to be searched.
    /// </param>
    /// <param name="_relievedBudgetSourceTrackingDetailId">
    /// The record ID of the relieved <c>BudgetSourceTrackingDetail</c> for which its corresponding
    /// <c>BudgetSourceTrackingRelievingDetail</c> record is to be searched.
    /// </param>
    /// <param name="_isReturnOfFunds">
    /// A Boolean value that indicates whether to find the return budget funds record; optional.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <param name="_userConnection">
    /// The <c>UserConnection</c> that is used to find the specified record in the <c>BudgetSourceTrackingRelievingDetail</c> table; optional, default is null.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetSourceTrackingRelievingDetail</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetSourceTrackingRelievingDetail findByRelievingAndRelievedBudgetSource(
    recId               _relievingBudgetSourceTrackingId,
    recId               _relievedBudgetSourceTrackingDetailId,
    boolean             _isReturnOfFunds = false,
    boolean             _forupdate = false,
    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto,
    UserConnection      _userConnection = null)
    {
        BudgetSourceTrackingRelievingDetail budgetSourceTrackingRelievingDetail;

        budgetSourceTrackingRelievingDetail.selectForUpdate(_forupdate);

        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetSourceTrackingRelievingDetail.concurrencyModel(_concurrencyModel);
        }

        if (_userConnection)
        {
            budgetSourceTrackingRelievingDetail.setConnection(_userConnection);
        }

        select firstonly budgetSourceTrackingRelievingDetail
            order by RecId
            where budgetSourceTrackingRelievingDetail.RelievingBudgetSourceTracking == _relievingBudgetSourceTrackingId &&
                budgetSourceTrackingRelievingDetail.RelievedBudgetSourceTrackingDetail == _relievedBudgetSourceTrackingDetailId &&
                budgetSourceTrackingRelievingDetail.IsReturnOfBudgetFunds == _isReturnOfFunds;

        return budgetSourceTrackingRelievingDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRelievingBudgetSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetSourceTrackingRelievingDetail</c> table.
    /// </summary>
    /// <param name="_relievingBudgetSourceRecId">
    /// The record ID of the relieving <c>BudgetSource</c> for which its corresponding
    /// <c>BudgetSourceTrackingRelievingDetail</c> record is to be searched.
    /// </param>
    /// <param name="_firstOnly">
    /// A Boolean value that indicates whether to read only the first record; optional.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <param name="_userConnection">
    /// The <c>UserConnection</c> that is used to find the specified record in the <c>BudgetSourceTrackingRelievingDetail</c> table; optional, default is null.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetSourceTrackingRelievingDetail</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetSourceTrackingRelievingDetail findByRelievingBudgetSource(
        recId               _relievingBudgetSourceRecId,
        boolean             _firstOnly = false,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto,
        UserConnection      _userConnection = null)
    {
        BudgetSourceTrackingRelievingDetail budgetSourceTrackingRelievingDetail;
        BudgetSourceTracking budgetSourceTracking;

        budgetSourceTrackingRelievingDetail.selectForUpdate(_forupdate);

        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetSourceTrackingRelievingDetail.concurrencyModel(_concurrencyModel);
        }

        if (_userConnection)
        {
            budgetSourceTrackingRelievingDetail.setConnection(_userConnection);
        }

        if (_firstOnly)
        {
            select firstonly RecId, BudgetSource, SequenceNumber from budgetSourceTracking
                order by SequenceNumber desc
                where budgetSourceTracking.BudgetSource == _relievingBudgetSourceRecId
                join budgetSourceTrackingRelievingDetail
                order by RecId
                where budgetSourceTrackingRelievingDetail.RelievingBudgetSourceTracking == budgetSourceTracking.RecId;
        }
        else
        {
            select RecId, BudgetSource, SequenceNumber from budgetSourceTracking
                order by SequenceNumber desc
                where budgetSourceTracking.BudgetSource == _relievingBudgetSourceRecId
                join budgetSourceTrackingRelievingDetail
                order by RecId
                where budgetSourceTrackingRelievingDetail.RelievingBudgetSourceTracking == budgetSourceTracking.RecId;
        }

        return budgetSourceTrackingRelievingDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRelievingSourceAndRelievedDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in a <c>BudgetSourceTrackingRelievingDetail</c> table.
    /// </summary>
    /// <param name="_relievingBudgetSourceTrackingId">
    /// The record ID of the <c>BudgetSourceTracking</c> record for which the
    /// <c>BudgetSourceTrackingRelievingDetail</c> record that corresponds to it is searched.
    /// </param>
    /// <param name="_relievingBudgetSourceLedgerDimension">
    /// The ledger dimension that relieves the budget.
    /// </param>
    /// <param name="_relievedBudgetSourceTrackingDetailId">
    /// The record ID of the <c>BudgetSourceTrackingDetail</c> record for which the
    /// <c>BudgetSourceTrackingRelievingDetail</c> record that corresponds to it is searched.
    /// </param>
    /// <param name="_isReturnOfFunds">
    /// A Boolean value that indicates whether to find the return budget funds record; optional.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is being read; optional.
    /// </param>
    /// <param name="_userConnection">
    /// The <c>UserConnection</c> class that is used to find the specified record in the
    /// <c>BudgetSourceTrackingRelievingDetail</c> table; otherwise, null.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetSourceTrackingRelievingDetail</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetSourceTrackingRelievingDetail findByRelievingSourceAndRelievedDetail(
        recId               _relievingBudgetSourceTrackingId,
        recId               _relievingBudgetSourceLedgerDimension,
        recId               _relievedBudgetSourceTrackingDetailId,
        boolean             _isReturnOfFunds = false,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto,
        UserConnection      _userConnection = null)
    {
        BudgetSourceTrackingRelievingDetail budgetSourceTrackingRelievingDetail;

        budgetSourceTrackingRelievingDetail.selectForUpdate(_forupdate);

        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetSourceTrackingRelievingDetail.concurrencyModel(_concurrencyModel);
        }

        if (_userConnection)
        {
            budgetSourceTrackingRelievingDetail.setConnection(_userConnection);
        }

        select firstonly budgetSourceTrackingRelievingDetail
            where budgetSourceTrackingRelievingDetail.RelievingBudgetSourceTracking == _relievingBudgetSourceTrackingId &&
                budgetSourceTrackingRelievingDetail.RelievingBudgetSourceLedgerDimension == _relievingBudgetSourceLedgerDimension &&
                budgetSourceTrackingRelievingDetail.RelievedBudgetSourceTrackingDetail == _relievedBudgetSourceTrackingDetailId &&
                budgetSourceTrackingRelievingDetail.IsReturnOfBudgetFunds == _isReturnOfFunds;

        return budgetSourceTrackingRelievingDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRelievedBySameSourceDocumentLineBudgetSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the confirmed relief amount record exists in a <c>BudgetSourceTrackingRelievingDetail</c> table
	/// for the same budget source, same document source line, same relieved budget source tracking detail and same ledger dimension.
    /// </summary>
    /// <param name="_relievingBudgetSourceLedgerDimension">
    /// The ledger dimension that relieves the budget.
    /// </param>
    /// <param name="_relievedBudgetSourceTrackingDetailId">
    /// The record ID of the <c>BudgetSourceTrackingDetail</c> record for which the
    /// <c>BudgetSourceTrackingRelievingDetail</c> record that corresponds to it is searched.
    /// </param>
    /// <param name="_currentBudgetSource">
    /// The record ID of the <c>BudgetSource</c> record for current relieving tracking document.
    /// </param>
    /// <param name="_currentSourceDocumentLine">
    /// The record ID of the <c>SourceDocumentLine</c> record for current relieving tracking document.
    /// </param>
    /// <param name="_isReturnOfFunds">
    /// A Boolean value that indicates whether to find the return budget funds record; optional.
    /// </param>
    /// <returns>
    /// true if a record exists in the <c>BudgetSourceTrackingRelievingDetail</c> table; otherwise, false.
    /// </returns>
    public static boolean checkRelievedBySameSourceDocumentLineBudgetSource(
        LedgerDimensionBase _relievingBudgetSourceLedgerDimension,
        RefRecId _relievedBudgetSourceTrackingDetailId,
        RefRecId _currentBudgetSource,
        RefRecId _currentSourceDocumentLine,
        boolean _isReturnOfFunds = false)
    {
        BudgetSourceTrackingRelievingDetail budgetSourceTrackingRelievingDetail;
        BudgetSourceTracking budgetSourceTracking;
        BudgetSource budgetSource;

        select firstonly budgetSourceTrackingRelievingDetail
            join BudgetSource, Status from budgetSourceTracking
			join SourceDocumentLine from budgetSource
            where budgetSourceTrackingRelievingDetail.RelievingBudgetSourceTracking == budgetSourceTracking.RecId
                && budgetSourceTracking.BudgetSource == budgetSource.RecId
                && budgetSourceTracking.BudgetSource == _currentBudgetSource
                && budgetSourceTrackingRelievingDetail.RelievingBudgetSourceLedgerDimension == _relievingBudgetSourceLedgerDimension
                && budgetSourceTrackingRelievingDetail.RelievedBudgetSourceTrackingDetail == _relievedBudgetSourceTrackingDetailId
                && budgetSource.SourceDocumentLine == _currentSourceDocumentLine
                && budgetSourceTrackingRelievingDetail.IsReturnOfBudgetFunds == _isReturnOfFunds
				&& budgetSourceTracking.Status == BudgetSourceTrackingStatus::Confirmed;

        return (budgetSourceTrackingRelievingDetail.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetCtrl</ConfigurationKey>
	<DeveloperDocumentation>@SYS131709</DeveloperDocumentation>
	<Label>@SYS131708</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>RelievingBudgetSourceTracking</TitleField1>
	<TitleField2>RelievedBudgetSourceTrackingDetail</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>BudgetSourceTrackingRelievingIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Budget</Modules>
	<ReplacementKey>BudgetSourceTrackingRelievingIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RelievingBudgetSourceTracking</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RelievedBudgetSourceTrackingDetail</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountingCurrencyAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RelievingBudgetSourceTracking</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RelievingBudgetSourceLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RelievedBudgetSourceTrackingDetail</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsReturnOfBudgetFunds</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS19924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RelievingBudgetSourceTracking</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RelievedBudgetSourceTrackingDetail</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountingCurrencyAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsReturnOfBudgetFunds</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RelievingBudgetSourceLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsDeletePending</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsSummarized</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AccountingCurrencyAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsDeletePending</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsReturnOfBudgetFunds</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsSummarized</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RelievedBudgetSourceTrackingDetail</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS131714</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RelievingBudgetSourceLedgerDimension</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LedgerDimensionBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RelievingBudgetSourceTracking</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS131713</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BudgetSourceTrackingRelievingIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RelievingBudgetSourceTracking</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RelievingBudgetSourceLedgerDimension</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RelievedBudgetSourceTrackingDetail</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IsReturnOfBudgetFunds</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RelievedBudgetSourceTrackingDetailIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>RelievedBudgetSourceTrackingDetail</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimensionAttributeValueCombinationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>RelievingBudgetSourceLedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RelievedBudgetSourceTrackingDetail</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS131714</EntityRelationshipRole>
			<RelatedTable>BudgetSourceTrackingDetail</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BudgetSourceTrackingDetail</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetSourceTrackingRelievingDetail</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RelievedBudgetSourceTrackingDetail</Name>
					<Field>RelievedBudgetSourceTrackingDetail</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RelievingBudgetSourceLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RelievingBudgetSourceLedgerDimension</Name>
					<Field>RelievingBudgetSourceLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RelievingBudgetSourceTracking</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS131713</EntityRelationshipRole>
			<RelatedTable>BudgetSourceTracking</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BudgetSourceTracking</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetSourceTrackingRelievingDetail</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RelievingBudgetSourceTracking</Name>
					<Field>RelievingBudgetSourceTracking</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>