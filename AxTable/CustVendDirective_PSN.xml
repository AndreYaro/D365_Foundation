<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendDirective_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class CustVendDirective_PSN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearNumberSequences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the DirectiveId and RoutingSlip_PSN fields of the current Directive record.
    /// </summary>
    /// <remarks>
    /// If the RoutingSlip_PSN field is cleared out this method will delete the related
    /// RoutingSlip_PSN record if it does not contain any other Directive records.
    /// </remarks>
    private void clearNumberSequences()
    {
        CustDirective_PSN               custDirective;
        VendDirective_PSN               vendDirective;
        CustDirectiveId_PSN             custDirectiveId;
        VendDirectiveId_PSN             vendDirectiveId;
        CustVendRoutingSlipRecId_PSN    custVendRoutingSlipRecId;

        if (this is CustDirective_PSN)
        {
            custDirective = this as CustDirective_PSN;

            if (custDirective)
            {
                custVendRoutingSlipRecId            = custDirective.CustRoutingSlip_PSN;
                custDirective.CustDirectiveId       = nullValue(custDirectiveId);
                custDirective.CustRoutingSlip_PSN   = nullValue(custVendRoutingSlipRecId);

                ttsBegin;
                custDirective.update();
                ttsCommit;
            }
        }
        else if (this is VendDirective_PSN)
        {
            vendDirective = this as VendDirective_PSN;

            if (vendDirective)
            {
                custVendRoutingSlipRecId            = vendDirective.VendRoutingSlip_PSN;
                vendDirective.VendDirectiveId       = nullValue(vendDirectiveId);
                vendDirective.VendRoutingSlip_PSN   = nullValue(custVendRoutingSlipRecId);

                ttsBegin;
                vendDirective.update();
                ttsCommit;
            }
        }

        if (custVendRoutingSlipRecId)
        {
            CustVendRoutingSlip_PSN::deleteRoutingSlipWithNoReferences(custVendRoutingSlipRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.AccountantApprovalStatus   = CustVendAccountantStatus_PSN::NotReviewed;
        this.DirectorApprovalStatus     = CustVendDirectorStatus_PSN::NotReviewed;
        this.IssueDate                  = DateTimeUtil::getSystemDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs any necessary processing that needs to be done when a field is modified by the user.
    /// </summary>
    /// <param name="_fieldId">
    /// The <c>FieldId</c> value of the field that was modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(CustVendDirective_PSN, DirectorApprovalStatus):
            case fieldNum(CustVendDirective_PSN, AccountantApprovalStatus):
                this.updateStatusFields(_fieldId);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatusFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the UserId field and the ApprovalDate field associated with a
    /// modified ApprovalStatus field.
    /// </summary>
    /// <param name="_fieldId">
    /// The <c>FieldId</c> value of the ApprovalStatus field that was modified.
    /// </param>
    public void updateStatusFields(FieldId _fieldId)
    {
        UserId                          userId;
        utcDateTime                     dateTime;

        if (_fieldId == fieldNum(CustVendDirective_PSN, DirectorApprovalStatus))
        {
            switch (this.DirectorApprovalStatus)
            {
                case CustVendDirectorStatus_PSN::Authorized:
                case CustVendDirectorStatus_PSN::Rejected:
                    this.DirectorUserId = curUserId();
                    this.DirectorApprovalDate = DateTimeUtil::utcNow();
                    break;
                case CustVendDirectorStatus_PSN::NotReviewed:
                    this.DirectorUserId = nullValue(userId);
                    this.DirectorApprovalDate = nullValue(dateTime);
                    break;
            }
        }
        else if (_fieldId == fieldNum(CustVendDirective_PSN, AccountantApprovalStatus))
        {
            switch (this.AccountantApprovalStatus)
            {
                case CustVendAccountantStatus_PSN::Rejected:
                    this.AccountantUserId = curUserId();
                    this.AccountantApprovalDate = DateTimeUtil::utcNow();
                    this.DirectorApprovalStatus = CustVendDirectorStatus_PSN::Rejected;
                    this.clearNumberSequences();
                    break;
                case CustVendAccountantStatus_PSN::Accepted:
                    this.AccountantUserId = curUserId();
                    this.AccountantApprovalDate = DateTimeUtil::utcNow();
                    break;
                case CustVendAccountantStatus_PSN::NotReviewed:
                    this.AccountantUserId = nullValue(userId);
                    this.AccountantApprovalDate = nullValue(dateTime);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean fieldIsValid;

        fieldIsValid = super(_fieldIdToCheck);

        if (fieldIsValid)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(CustVendDirective_PSN, IssueDate):
                    fieldIsValid = this.validateIssueDate();
            }
        }

        return fieldIsValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIssueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the <c>IssueDate</c> field contains a date that falls within the current fiscal year.
    /// </summary>
    /// <returns>
    /// true if the <c>IssueDate</c> field contains a date that falls within the current fiscal year; otherwise, false.
    /// </returns>
    public boolean validateIssueDate()
    {
        RefRecId calendarId, currentFiscalYearRecId, issueDateFiscalYearRecId;

        calendarId                  = Ledger::fiscalCalendar(CompanyInfo::current());
        currentFiscalYearRecId      = FiscalCalendarYear::findYearByCalendarDate(calendarId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())).RecId;
        issueDateFiscalYearRecId    = FiscalCalendarYear::findYearByCalendarDate(calendarId, DateTimeUtil::date(this.IssueDate)).RecId;

        if (currentFiscalYearRecId != issueDateFiscalYearRecId)
        {
            return checkFailed("@GLS223134");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the specified record exists in the <c>CustVendDirective_PSN</c> table and shows an error message if it does not.
    /// </summary>
    /// <param name="_recId">
    ///     The ID of the record to find.
    /// </param>
    /// <returns>
    ///     true if the record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RefRecId _recId)
    {
        boolean ret = true;

        if (!CustVendDirective_PSN::exist(_recId))
        {
            ret = checkFailed(strFmt(CustVendDirective_PSN::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the specified record exists in the <c>CustVendDirective_PSN</c> table.
    /// </summary>
    /// <param name="_recId">
    ///     The ID of the record to find.
    /// </param>
    /// <returns>
    ///     true if the record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     custVendDirective_PSN
                where
                     custVendDirective_PSN.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>CustVendDirective_PSN</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>CustVendDirective_PSN</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    A base enum value which indicates the concurrency model to use; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>CustVendDirective_PSN</c> table; otherwise, an empty record.
    /// </returns>
    public static CustVendDirective_PSN find(
        CustVendDirectiveRecId_PSN _recId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustVendDirective_PSN custVendDirective;

        custVendDirective.selectForUpdate(_forupdate);

        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custVendDirective.concurrencyModel(_concurrencyModel);
        }

        select firstonly custVendDirective
            where custVendDirective.RecId == _recId;

        return custVendDirective;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistributedAmountInBudgetingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the distributed amount in the budgeting currency.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// The <c>SourceDocumentLine</c> object for which to get the amount.
    /// </param>
    /// <param name="_linesToSum">
    /// A <c>DistributionLinesToSum_PSN</c> enum value indicating what lines to include in the summed amount.
    /// </param>
    /// <param name="_recursive">
    /// A Boolean value that indicates whether to get the distributed amount for the
    /// <c>SourceDocumentLine</c> object and its children.
    /// </param>
    /// <param name="_reverseSignForTax">
    /// A Boolean value that indicates whether to reverse the sign for Taxes.
    /// </param>
    /// <returns>
    /// The distributed amount in budgeting currency.
    /// </returns>
    static public Amount getDistributedAmountInBudgetingCurrency(
        RefRecId                    _sourceDocumentLine,
        DistributionLinesToSum_PSN  _linesToSum,
        boolean                     _recursive,
        boolean                     _reverseSignForTax = false)
    {
        Amount                                  amount;
        SourceDocumentLine                      sourceDocumentLine;
        SourceDocumentLineItem                  sourceDocumentLineItem;
        AccountingDistribution                  accountingDistribution;
        AccountingDistribution                  reversingAccountingDistribution;
        SourceDocumentLineItemListEnumerator    childEnumerator;
        Sign                                    sign = 1;

        void assignAmount()
        {
            if (_reverseSignForTax                                                                  &&
                (accountingDistribution.MonetaryAmount == MonetaryAmount::Tax                       ||
                 accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverable         ||
                 accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverableVariance ||
                 accountingDistribution.MonetaryAmount == MonetaryAmount::TaxVariance))
            {
                amount -= CustVendDirective_PSN::getTransactionAmountInBudgetCurrency(accountingDistribution);
            }
            else
            {
                amount += CustVendDirective_PSN::getTransactionAmountInBudgetCurrency(accountingDistribution);
            }
        }

        Debug::assert(_sourceDocumentLine != 0);

        sourceDocumentLine = SourceDocumentLine::find(_sourceDocumentLine);
        sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(sourceDocumentLine);

        switch (_linesToSum)
        {
            case DistributionLinesToSum_PSN::AllAmounts :
                while select TransactionCurrency, TransactionCurrencyAmount, AccountingDate, AccountingLegalEntity, MonetaryAmount
                    from accountingDistribution
                        where accountingDistribution.SourceDocumentLine == _sourceDocumentLine
                    notexists join RecId from reversingAccountingDistribution
                        where reversingAccountingDistribution.ReferenceDistribution == accountingDistribution.RecId
                            && reversingAccountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Reversing
                {
                    assignAmount();
                }
            break;

            case DistributionLinesToSum_PSN::DeductibleTaxes :
                while select TransactionCurrency, TransactionCurrencyAmount, AccountingDate, AccountingLegalEntity, MonetaryAmount
                    from accountingDistribution
                        where accountingDistribution.SourceDocumentLine == _sourceDocumentLine
                            && (accountingDistribution.MonetaryAmount == MonetaryAmount::Tax
                                || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxVariance)
                    notexists join RecId from reversingAccountingDistribution
                        where reversingAccountingDistribution.ReferenceDistribution == accountingDistribution.RecId
                            && reversingAccountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Reversing
                {
                    assignAmount();
                }
            break;

            case DistributionLinesToSum_PSN::NonDeductibleTaxes :
                while select TransactionCurrency, TransactionCurrencyAmount, AccountingDate, AccountingLegalEntity, MonetaryAmount
                    from accountingDistribution
                        where accountingDistribution.SourceDocumentLine == _sourceDocumentLine
                        && (accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverable
                            || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverableVariance)
                    notexists join RecId from reversingAccountingDistribution
                        where reversingAccountingDistribution.ReferenceDistribution == accountingDistribution.RecId
                            && reversingAccountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Reversing
                {
                    assignAmount();
                }
            break;
        }

        if (_recursive)
        {
            childEnumerator = sourceDocumentLineItem.parmChildSourceDocumentLineItemList().getEnumerator();
            while (childEnumerator.moveNext())
            {
                amount += CustVendDirective_PSN::getDistributedAmountInBudgetingCurrency(childEnumerator.current().parmSourceDocumentLine().RecId, _linesToSum, _recursive, _reverseSignForTax);
            }
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isContextPublicSectorFrance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the context is public sector France.
    /// </summary>
    /// <returns>
    /// true if the context is public sector France; otherwise, false.
    /// </returns>
    public static boolean isContextPublicSectorFrance()
    {
        return PublicSectorUtils::isFrenchRegulatoryEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the ID of the label to use when displaying a message to indicate that the record does not exist.
    /// </summary>
    /// <returns>
    ///     A string indicating the label ID.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionAmountInBudgetCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the value found in the <c>TransactionCurrencyAmount</c> field into accounting currency.
    /// </summary>
    /// <param name="_accountingDistribution">
    /// The <c>AccountingDistribution</c> record that contains the transaction currency amount.
    /// </param>
    /// <returns>
    /// The value in the <c>TransactionCurrencyAmount</c> converted to the same currency as what budget uses.
    /// </returns>
    /// <remarks>
    /// Uses the values found in <c>AccountingLegalEntity</c>, <c>TransactionCurrency</c> and <c>TransactionCurrencyAmount</c> to perform the conversion.
    /// </remarks>
    public static Amount getTransactionAmountInBudgetCurrency(AccountingDistribution _accountingDistribution)
    {
        ExchangeRateHelper  exchangeRateHelper;

        if (_accountingDistribution.TransactionCurrency != Ledger::accountingCurrency(_accountingDistribution.AccountingLegalEntity))
        {
            exchangeRateHelper = ExchangeRateHelper::newExchangeDate(Ledger::primaryLedger(_accountingDistribution.AccountingLegalEntity),
                                                                    _accountingDistribution.TransactionCurrency,
                                                                    _accountingDistribution.AccountingDate);

            exchangeRateHelper.parmExchangeRateTypeRecId(Ledger::budgetExchangeRateType(_accountingDistribution.AccountingLegalEntity));

            return CurrencyExchangeHelper::amountCur2MST(_accountingDistribution.TransactionCurrencyAmount, _accountingDistribution.TransactionCurrency, exchangeRateHelper.getCrossRate(), _accountingDistribution.AccountingDate);
        }

        return _accountingDistribution.TransactionCurrencyAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PurchFrenchRegulatory_PSN</ConfigurationKey>
	<DeveloperDocumentation>@GLS223205</DeveloperDocumentation>
	<Label>@GLS223195</Label>
	<TitleField1>RecId</TitleField1>
	<TitleField2>IssueDate</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<InstanceRelationType>InstanceRelationType</InstanceRelationType>
	<Modules>AccountsReceivable</Modules>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountantApprovalStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountantUserId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DirectorApprovalStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DirectorUserId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Memo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IssueDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IssueDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Memo</Name>
			<Label>@GLS223236</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Memo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@GLS223220</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DirectorApprovalStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DirectorUserId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountantApprovalStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountantUserId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountantApprovalDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DirectorApprovalDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>AccountantApprovalDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendDirectiveIssueDateTime_PSN</ExtendedDataType>
			<Label>@GLS223233</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountantApprovalStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustVendAccountantStatus_PSN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountantUserId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Label>@GLS223231</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>DirectorApprovalDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendDirectiveApprovalDate_PSN</ExtendedDataType>
			<Label>@GLS223159</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DirectorApprovalStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustVendDirectorStatus_PSN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DirectorUserId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Label>@GLS223164</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InstanceRelationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RelationType</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>IssueDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendDirectiveIssueDateTime_PSN</ExtendedDataType>
			<Label>@GLS223225</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Memo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendDirectiveMemo_PSN</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AccountantUserId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UserInfo</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>UserInfo_Accountant</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountantUserId</Name>
					<Field>AccountantUserId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DirectorUserId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UserInfo</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>UserInfo_Director</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DirectorUserId</Name>
					<Field>DirectorUserId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>