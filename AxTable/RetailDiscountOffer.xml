<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDiscountOffer</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailDiscountOffer extends RetailPeriodicDiscount
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the specified discount offer and creates a new discount offer.
    /// </summary>
    /// <param name="_original">
    /// An instance of the <c>RetailDiscountOfferTable</c> table.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// A copy failure error.
    /// </exception>
    public void copyFrom(RetailDiscountOffer _original)
    {
        RetailDiscountLineOffer     retailDiscountOfferLine, retailDiscountOfferLineNew;
        RetailDiscountPriceGroup    retailDiscountPriceGroup, retailDiscountPriceGroupOriginal;

        ttsbegin;
        this.CopyDiscountOfferInfo(_original);
        // update retail discount offer related field
        this.DiscOnPOS          = _original.DiscOnPOS;
        this.update();

        // copy discount offer line
        while select retailDiscountOfferLine
            where retailDiscountOfferLine.OfferId == _original.OfferId
        {
            retailDiscountOfferLineNew.clear();
            retailDiscountOfferLineNew.data(retailDiscountOfferLine);
            retailDiscountOfferLineNew.initValue();
            retailDiscountOfferLineNew.OfferId = this.OfferId;
            retailDiscountOfferLineNew.insert();

            retailDiscountOfferLineNew.copyGroupMemberLineInternal(retailDiscountOfferLine.groupMemberLine(), true);
            retailDiscountOfferLineNew.copyRetailDiscountApplicabilityRuleInternal(retailDiscountOfferLine);
        }

        this.copyDiscountPriceGroups(_original.OfferId);
        ttscommit;

        this.refreshDS();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.PeriodicDiscountType = RetailDiscountOfferTypeBase::DiscountOffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRBODiscountOfferTableEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the allow and edit properties for the data source fields.
    /// </summary>
    /// <param name="_enabled">
    /// A Boolean value that indicates whether the data source can be edited or not.
    /// </param>
    public void setRBODiscountOfferTableEnabled(boolean _enabled)
    {
        if (FormDataUtil::isFormDataSource(this))
        {
            this.setTableFieldsEnabled(FormDataUtil::getFormDataSource(this), this.TableId, _enabled);
            this.setRBODiscountOfferParentTableEnabled(_enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method is overridden to modify the values in the fields of the <c>RetailDiscountOffer</c> table when the fields are edited.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        if (_fieldId == fieldNum(RetailDiscountOffer, QuantityLimit))
        {
            this.setDiscountOfferType();
        }

        super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the specified field.
    /// </summary>
    /// <param name = "_fieldId">The field identifier.</param>
    /// <returns>A value indicating whether the field is valid.</returns>
    public boolean validateField(FieldId _fieldId)
    {
        boolean ret;

        ret = super(_fieldId);

        if (_fieldId == fieldNum(RetailDiscountOffer, QuantityLimit))
        {
            ret = ret && RetailPricingConfigurationValidator::isPositiveQuantityAllowZero(this.QuantityLimit);

            if (ret && this.QuantityLimit > 0)
            {
                // Check if pricing engine binaries have been updated to support the quantity limit discount offer type, otherwise display an error.
                Microsoft.Dynamics.Commerce.Runtime.DataModel.PeriodicDiscount crtDiscount = new Microsoft.Dynamics.Commerce.Runtime.DataModel.PeriodicDiscount();
                System.Reflection.PropertyInfo propertyInfo = crtDiscount.GetType().GetProperty('OfferQuantityLimit');

                if (propertyInfo == null)
                {
                    Message::Add(MessageSeverity::Warning, "@Retail:PricingEngineNotUpdated");
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>RetailDiscountOffer</c> table.
    /// </summary>
    /// <param name="_offerId">
    /// The offer number of the discount.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailDiscountOffer</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailDiscountOffer find(RetailDiscountOfferId _offerId, boolean _forUpdate = false)
    {
        RetailDiscountOffer discountOffer;

        if (_offerId)
        {
            discountOffer.selectForUpdate(_forUpdate);

            select firstonly discountOffer where   discountOffer.OfferId == _offerId;
        }

        return discountOffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDiscountOfferType</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets the discount offer type based on the quantity limit.
    /// </summary>
    /// <param name = "currentQuantityLimit">The quantity limit being set.</param>
    /// <param name = "discountLineRefRecId">The record identifier of the discount line.</param>
    public void setDiscountOfferType()
    {
        if (this.QuantityLimit > 0)
        {
            this.PeriodicDiscountType = RetailDiscountOfferTypeBase::DiscountOfferLineQuantityLimit;
        }
        else
        {
            this.PeriodicDiscountType = RetailDiscountOfferTypeBase::DiscountOffer;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEnable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the discount can be enabled.
    /// </summary>
    /// <returns>
    /// true if the discount can be enabled; otherwise, false.
    /// </returns>
    public boolean validateEnable()
    {
        boolean ret = super();

        // If quantity limit is set, display a warning to the user if there is an overlap between the included discount lines.
        if (ret && this.PeriodicDiscountType == RetailDiscountOfferTypeBase::DiscountOfferLineQuantityLimit)
        {
            ret = this.canSimpleDiscountWithQuantityLimitBeEnabled(false);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSimpleDiscountWithQuantityLimitBeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether simple discount with quantity limit can be enabled.
    /// </summary>
    /// <param name = "_skipValidation">Whether to skip validation in the method. </param>
    /// <returns>
    /// true if the discount can be enabled; otherwise, false.
    /// </returns>
    public boolean canSimpleDiscountWithQuantityLimitBeEnabled(boolean _skipValidation)
    {
        boolean ret = true;

        if (!_skipValidation)
        {
            RetailDiscountLineOffer discountLine;
            RetailDiscountLineOffer discountLineToValidate;
            RetailGroupMemberLine groupMemberLineToValidate;
            RetailGroupMemberLine groupMemberLine;

            // For every discount line, check if another discount line applies to the same product.
            while select discountLineToValidate
                where discountLineToValidate.OfferId == this.OfferId
                && discountLineToValidate.LineType == RetailDiscountLineIncludeExcludeTypeBase::Include
            {
                groupMemberLineToValidate = discountLineToValidate.groupMemberLine();

                while select discountLine
                    where discountLine.OfferId == this.OfferId
                    && discountLine.LineType == RetailDiscountLineIncludeExcludeTypeBase::Include
                    && discountLine.LineNum != discountLineToValidate.LineNum
                {
                    groupMemberLine = discountLine.groupMemberLine();

                    // Display a warning if the group member line to validate is a subset of the current group member line.
                    if (RetailGroupMemberLine::isSubset(groupMemberLineToValidate, groupMemberLine))
                    {
                        this.promptAndWriteValidationLog(
                            RetailPricingValidationMessageSeverity::Warning,
                            "@Retail:MultipleDiscountLinesApplyToAProductWarning");
                        return ret;
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET6383</DeveloperDocumentation>
	<Label>@RET6382</Label>
	<CacheLookup>NotInTTS</CacheLookup>
	<Extends>RetailPeriodicDiscount</Extends>
	<Modules>Merchandising</Modules>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DiscOnPOS</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DiscOnPOS</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDiscOnPOS</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>QuantityLimit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDiscountQuantityLimit</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailPeriodicDiscount</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>RetailPeriodicDiscount</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>