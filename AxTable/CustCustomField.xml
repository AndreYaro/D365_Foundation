<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCustomField</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustCustomField extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a string used when displaying a customized form title.
    /// </summary>
    /// <returns>
    /// The string value that is returned.
    /// </returns>
    public str caption()
    {
        str ret;

        ret = super();

        ret = strFmt("@SPS373", this.CustomField);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayMaxValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the string representation of the MaxValue adjust by the CustCustomField.DataType
    /// </summary>
    /// <returns>
    /// Returns the string representation of the MaxValue adjusted by the CustCustomField.DataType
    /// </returns>
    /// <remarks>
    /// CustCustomField.DataType is used to determine the display decimal points
    ///  Real - 4 decimal points
    ///  Currency - 2 decimal points
    ///  Integer - 0 decimal points
    /// </remarks>
    public display Str1260 displayMaxValue()
    {
        return this.minMaxToStr(this.MaxValue, this.DataType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayMinValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the string representation of the MinValue adjusted by the CustCustomField.DataType
    /// </summary>
    /// <returns>
    /// Returns the string representation of the MinValue adjusted by the CustCustomField.DataType
    /// </returns>
    /// <remarks>
    /// CustCustomField.DataType is used to determine the display decimal points
    ///  Real - 4 decimal points
    ///  Currency - 2 decimal points
    ///  Integer - 0 decimal points
    /// </remarks>
    public display Str1260 displayMinValue()
    {
        return this.minMaxToStr(this.MinValue, this.DataType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.DefaultBoolean = NoYesCombo::Yes;
        this.MaxLength = 255;
    }

]]></Source>
			</Method>
			<Method>
				<Name>minMaxToStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts _number to a string with decimal points determined by CustCustomField.DataType
    /// </summary>
    /// <param name="_number">
    /// number value to convert to str
    /// </param>
    /// <param name="_type">
    /// data type used to determine the number of decimal points to append to the str
    /// </param>
    /// <returns>
    /// Returns the string representation of _number adjusted by the CustCustomField.DataType
    /// </returns>
    /// <remarks>
    /// CustCustomFielddDtaType is used to determine the display decimal points
    ///  Real - 4 decimal points
    ///  Currency - 2 decimal points
    ///  interger - 0 decimal points
    /// </remarks>
    private str minMaxToStr(real _number, CustomFieldDataType _type)
    {
        int decimalPoints = 0;
        str retValue = '';

        switch (_type)
        {
            case CustomFieldDataType::Currency:
                decimalPoints = 2;
                break;
            case CustomFieldDataType::Decimal:
                decimalPoints = 4;
                break;
            case CustomFieldDataType::Integer:
            default:
                decimalPoints = 0;
        }

        retValue = num2str(_number, -1, decimalPoints, 1, 0);
        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the value of MinValue and MaxValue, depending on their current values.
    /// </summary>
    /// <param name="_fieldId">
    /// The field for which the method is being called.
    /// </param>
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);
        switch (_fieldId)
        {
            case fieldNum(CustCustomField, CustomField):
                this.CustomField = strLTrim(strRTrim(this.CustomField));
                break;
            case fieldNum(CustCustomField, HelpText):
                this.HelpText = strLTrim(strRTrim(this.HelpText));
                break;
            case fieldNum(CustCustomField, Description):
                this.Description = strLTrim(strRTrim(this.Description));
                break;
            case fieldNum(CustCustomField, DefaultText):
                this.DefaultText = strLTrim(strRTrim(this.DefaultText));
                break;
            case fieldNum(CustCustomField, ValidateMinimum):
                if (this.ValidateMinimum)
                {
                    if (this.ValidateMaximum && this.MaxValue <= 0)
                    {
                        this.MinValue = this.MaxValue - 1;
                    }
                    else
                    {
                        this.MinValue = 0;
                    }
                }
                else
                {
                    this.MinValue = 0;
                }
                break;
            case fieldNum(CustCustomField, ValidateMaximum):
                if (this.ValidateMaximum)
                {
                    if (this.ValidateMinimum && this.MinValue >= 0)
                    {
                        this.MaxValue = this.MinValue + 1;
                    }
                    else
                    {
                        this.MaxValue = 0;
                    }
                }
                else
                {
                    this.MaxValue = 0;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs all the check(s) which are associated with the update of particula field on the table,
    /// raises error messages if any one them fail.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    /// The fieldId for the field to be validated
    /// </param>
    /// <returns>
    /// true if no error is found; otherwise, false.
    /// </returns>
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(CustCustomField, DataType):
                if (this.RecId && CustBillingCodeCustomField::isCustomFieldUsed(this.RecId) && this.orig().DataType != this.DataType)
                    {
                        ret = checkFailed("@SPS554");
                    }

                    break;
                case fieldNum(CustCustomField, MaxLength):
                    if (this.MaxLength < 1 || this.MaxLength > 255)
                    {
                        ret = checkFailed("@SPS1130");
                    }

                    if (this.MaxLength < strLen(this.DefaultText))
                    {
                        ret = checkFailed(strFmt("@SPS2444", int2str(strLen(this.DefaultText))));
                    }

                    if (this.RecId && CustBillingCodeCustomField::isCustomFieldUsed(this.RecId) && this.orig().MaxLength > this.MaxLength)
                    {
                        ret = checkFailed("@SPS555");
                    }
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs all the pre record writing checks here, raises error messages if any one them fail.
    /// </summary>
    /// <returns>
    /// true if no error is found; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        boolean ret;
        real    defaultValue;

        ret = super();

        if (ret)
        {
            if (CustCustomField::customFieldExists(this.CustomField, this.RecId))
            {
                ret = checkFailed("@SPS330");
            }

            if ((this.DataType == CustomFieldDataType::Currency
                    || this.DataType == CustomFieldDataType::Decimal
                    || this.DataType == CustomFieldDataType::Integer)
                    && (this.DefaultInt != this.orig().DefaultInt
                    || this.DefaultReal != this.orig().DefaultReal
                    || this.MinValue != this.orig().MinValue
                    || this.MaxValue != this.orig().MaxValue))
            {
                defaultValue = this.DataType == CustomFieldDataType::Integer ? this.DefaultInt : this.DefaultReal;

                if (this.ValidateMinimum && this.MinValue > defaultValue)
                {
                    info("@SPS1134");
                }
                else if (this.ValidateMaximum && this.MaxValue < defaultValue)
                {
                    info("@SPS1135");
                }
            }

            // Valid the proper range for maximum and minimum values
            if ((this.ValidateMinimum && this.ValidateMaximum) &&
                (this.DataType == CustomFieldDataType::Currency ||
                    this.DataType == CustomFieldDataType::Decimal ||
                    this.DataType == CustomFieldDataType::Integer) )
            {
                if (this.MaxValue < this.MinValue)
                {
                    ret = checkFailed("@SPS334");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>CustCustomField</c> table and shows an error message if it does not.
    /// </summary>
    /// <param name="_recId">
    /// The ID of the record to find.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RefRecId _recId)
    {
        boolean ret = true;
        ;

        if (!CustCustomField::exist(_recId))
        {
            ret = checkFailed(strFmt(CustCustomField::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customFieldExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a the specified custom field exists.
    /// </summary>
    /// <param name="_customFieldName">
    /// The Custom field to find.
    /// </param>
    /// <param name="_recId">
    /// Unique id of the record for which custom field name uniqueness needs to be checked.
    /// </param>
    /// <returns>
    /// true if the custom field exists in the table; otherwise, false.
    /// </returns>
    public static boolean customFieldExists(CustomField _customFieldName, recId _recId)
    {
        boolean found;

        if (_customFieldName)
        {
            found = (select firstonly RecId from custCustomField
                        where custCustomField.CustomField == _customFieldName
                            && custCustomField.RecId != _recId).RecId != 0;
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>CustCustomField</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The ID of the record to find.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        boolean found;
        ;

        found = (select firstonly
                     RecId
                from
                     custCustomField
                where
                     custCustomField.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the Custom Field based on RecID field.
    /// </summary>
    /// <param name="_customFieldRefRecId">
    /// The RefRecId corresponds the RecID field.
    /// </param>
    /// <param name="_forupdate">
    /// A boolean that determines whether to read the record for updating; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A value used when the table is not automatically concurrent; optional.
    /// </param>
    /// <returns>
    /// A <c>CustCustomField</c> table buffer.
    /// </returns>
    /// <remarks>
    /// A public method to find Custom Field records.
    /// </remarks>
    public static CustCustomField find(
        RefRecId            _customFieldRefRecId,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustCustomField customFieldTable;
        ;

        customFieldTable.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            customFieldTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            customFieldTable
            where
            customFieldTable.RecId == _customFieldRefRecId;

        return customFieldTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    public void defaultRow()
    {
        super();

        if (!this.ValidateMinimum)
        {
            this.MinValue = 0;
        }

        if (!this.ValidateMaximum)
        {
            this.MaxValue = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ID of the label to use when displaying a message to indicate that the record does not exist.
    /// </summary>
    /// <returns>
    /// A string indicating the label ID.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PublicSector</ConfigurationKey>
	<DeveloperDocumentation>@SPS1132</DeveloperDocumentation>
	<FormRef>CustCustomField</FormRef>
	<Label>@SPS299</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>CustomField</TitleField1>
	<TitleField2>DataType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>AccountsReceivable</Modules>
	<ReplacementKey>CustomFieldIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustBillingCodeCustomField</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>CustBillingCodeCustomField</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomField</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomField</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DataType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomField</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS27587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultBoolean</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultInt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultText</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultReal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS80470</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HelpText</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DataType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomField</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MinMax</Name>
			<Label>@SPS335</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MinValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxLength</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidateMinimum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidateMaximum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomField</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomField</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DataType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>CustomFieldDataType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DefaultBoolean</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomFieldValueBoolean</ExtendedDataType>
			<Label>@SYS27587</Label>
			<EnumType>NoYesCombo</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>DefaultDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomFieldValueDate</ExtendedDataType>
			<Label>@SYS27587</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DefaultInt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomFieldValueInt</ExtendedDataType>
			<Label>@SYS27587</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DefaultReal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomFieldValueReal</ExtendedDataType>
			<Label>@SYS27587</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultText</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomFieldValueText</ExtendedDataType>
			<Label>@SYS27587</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description255</ExtendedDataType>
			<Label>@SPS1074</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HelpText</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCustomFieldHelpTxt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>MaxLength</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomFieldMaxLength</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaxValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomFieldMaxReal</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MinValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomFieldMinReal</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ValidateMaximum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SPS309</Label>
			<EnumType>boolean</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ValidateMinimum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SPS307</Label>
			<EnumType>boolean</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CustomFieldIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CustomField</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>