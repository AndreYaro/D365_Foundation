<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MarkupTrans extends common
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowOnlyView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>MarkupTrans</c> records may only be viewed.
    /// </summary>
    /// <param name="_tableId">
    /// The <c>TableId</c> to validate against.
    /// </param>
    /// <returns>
    /// true if <c>MarkupTrans</c> records is only allowed to be viewed; otherwise, false.
    /// </returns>
    public static boolean allowOnlyView(TableId _tableId)
    {
        boolean ret;

        // Making sure editing of existing records is not allowed on Product Receipt header and lines view
        // and Product Receipt Journal header and lines view
        if (_tableId == tableNum(PurchParmTable)
            || _tableId == tableNum(PurchParmLine)
            || _tableId == tableNum(VendPackingSlipJour)
            || _tableId == tableNum(VendPackingSlipTrans)
            || _tableId == tableNum(CustomsVendBOEJour_IN)
            || _tableId == tableNum(CustomsVendBOETrans_IN))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDistributionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amount of the <c>MarkupTrans</c> record for which creates distributions.
    /// </summary>
    /// <param name="_qty">
    /// The quantity to calculate miscellaneous charges amount from.
    /// </param>
    /// <param name="_transactionBalance">
    /// The amount to calculate miscellaneous charges amount from.
    /// </param>
    /// <param name="_accountingDate">
    /// The accounting date.
    /// </param>
    /// <param name="_convertSign">
    /// A <c>NoYes</c> value which specifies whether to invert sign of the markupAmount.
    /// </param>
    /// <returns>
    /// The markup amount to create distributions.
    /// </returns>
    public MarkupAmount calcDistributionAmount(Qty _qty,
                                               Amount _transactionBalance,
                                               AccountingDate _accountingDate,
                                               NoYes _convertSign = NoYes::No)
    {
        MarkupAmount markupAmount = Markup::calcTrans(this,
                                                      _qty,
                                                      _transactionBalance,
                                                      0,
                                                      _accountingDate);

        // convert sign when the Credit type is Customer/Vendor.
        if (_convertSign)
        {
            switch (this.ModuleType)
            {
                case MarkupModuleType::Cust  :
                    if (this.markupTable().VendType == MarkupType::CustVend)
                    {
                        markupAmount = -markupAmount;
                    }
                    break;

                default:
                    break;
            }
        }

        return markupAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cascadeDeleteMarkupTrans_IN</Name>
				<Source><![CDATA[
    private void cascadeDeleteMarkupTrans_IN()
    {
        MarkupTrans_IN markupTransIN;
        delete_from markupTransIN
            where markupTransIN.MarkupTrans == this.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustomJournal_RU</Name>
				<Source><![CDATA[
    boolean checkCustomJournal_RU()
    {
        boolean                 ret = true;
        PurchTable              purchTable;
        PurchLine               purchLine;
        DlvTermId               dlvTermCode;
        CustomJournalTable_RU   customJournalTable;
        CustomJournalTrans_RU   customJournalTrans;

        switch (this.TransTableId)
        {
            case tableNum(PurchLine) :
                purchLine = PurchLine::findRecId(this.TransRecId);
                if (CustomJournalTrans_RU::existInventTransId(purchLine.InventTransId))
                {
                    purchTable  = purchLine.purchTable();
                    dlvTermCode = AgreementHeaderDefault::findAgreementHeader(purchTable.MatchingAgreement).DeliveryTerm;
                    if (!dlvTermCode)
                    {
                        select firstonly DlvTermId from customJournalTable
                        exists join customJournalTrans
                        where customJournalTrans.CustomJournalId == customJournalTable.CustomJournalId
                           && customJournalTrans.SalesPurchInventTransId == purchLine.InventTransId;
                        dlvTermCode = customJournalTable.DlvTermId;
                    }
                    if (dlvTermCode && MarkupDlvTermConnection_RU::exist(dlvTermCode, this.MarkupCode))
                    {
                        ret = checkFailed(strFmt("@GLS115333", purchLine.ItemId));
                    }
                }
                break;
            case tableNum(SalesLine) :
                ret = true;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkforMiscAndWHT_AP</Name>
				<Source><![CDATA[
    boolean checkforMiscAndWHT_AP(RecId _purchTableId, RecId _purchLineId)
    {
        PurchTable  purchTable;
        PurchLine   purchLine;
        boolean check;
        #define.zero(0)

        if (_purchTableId == #zero
            && _purchLineId == #zero)
        {
            return false;
        }
        else
        {
            if (_purchTableId != #zero
                && _purchLineId == #zero)
            {
                select firstonly PurchId
                    from purchTable
                        where purchTable.RecId == _purchTableId;

                if (purchTable)
                {
                    while select TaxWithholdItemGroupHeading_TH, TaxWithholdGroup_TH
                        from purchLine
                            where purchLine.PurchId == purchTable.PurchId
                                && check == false
                    {
                        if (purchLine.TaxWithholdGroup_TH
                            && purchLine.TaxWithholdItemGroupHeading_TH)
                        {
                            check = true;
                        }
                    }
                }
            }
            else if (_purchTableId == #zero
                && _purchLineId != #zero)
            {
                select firstonly TaxWithholdItemGroupHeading_TH, TaxWithholdGroup_TH
                    from purchLine
                        where purchLine.RecId == _purchLineId
                            && check == false;
                if (purchLine
                    && purchLine.TaxWithholdGroup_TH
                    && purchLine.TaxWithholdItemGroupHeading_TH)
                {
                    check = true;
                }
            }
        }

        return check;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkforMiscAndWHT_AR</Name>
				<Source><![CDATA[
    boolean checkforMiscAndWHT_AR(RecId _salesTableId, RecId _salesLineId)
    {
        SalesTable  salesTable;
        SalesLine   salesLine;
        boolean check;
        #define.zero(0)

        if (_salesTableId == #zero
            && _salesLineId == #zero)
        {
            return false;
        }
        else
        {
            if (_salesTableId != #zero
                && _salesLineId == #zero)
            {
                select firstonly SalesId
                    from salesTable
                        where salesTable.RecId == _salesTableId;

                if (salesTable)
                {
                    while select TaxWithholdItemGroupHeading_TH, TaxWithholdGroup
                        from salesLine
                            where salesLine.SalesId == salesTable.SalesId
                                && check == false
                    {
                        if (salesLine.TaxWithholdGroup
                            && salesLine.TaxWithholdItemGroupHeading_TH)
                        {
                            check = true;
                        }
                    }
                }
            }
            else if (_salesTableId == #zero
                && _salesLineId != #zero)
            {
                select firstonly TaxWithholdItemGroupHeading_TH, TaxWithholdGroup
                    from salesLine
                        where salesLine.RecId == _salesLineId
                            && check == false;
                if (salesLine
                    && salesLine.TaxWithholdGroup
                    && salesLine.TaxWithholdItemGroupHeading_TH)
                {
                    check = true;
                }
            }
        }

        return check;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkforMiscAndWHT_FTI</Name>
				<Source><![CDATA[
    private boolean checkforMiscAndWHT_FTI(RecId _custInvoiceTableId)
    {
        CustInvoiceLine custInvoiceLine;
        boolean check = false;

        if (!_custInvoiceTableId)
        {
            return false;
        }
        else
        {
            select firstonly TaxWithholdItemGroupHeading_TH, TaxWithholdGroup from custInvoiceLine
                where custInvoiceLine.ParentRecId == _custInvoiceTableId
                   && custInvoiceLine.TaxWithholdGroup != ''
                   && custInvoiceLine.TaxWithholdItemGroupHeading_TH != 0;

            if (custInvoiceLine.TaxWithholdGroup
                && custInvoiceLine.TaxWithholdItemGroupHeading_TH)
            {
                check = true;
            }
        }

        return check;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isKeepValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines that the value of the <c>Keep</c> field is valid.
    /// </summary>
    /// <returns>
    /// true if the <c>Keep</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean isKeepValid()
    {
        return this.Keep == (this.MarkupCategory != MarkupCategory::Fixed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkKeep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the value of the <c>Keep</c> field is set correctly.
    /// </summary>
    /// <returns>true if the <c>Keep</c> field contains a valid value; otherwise, false.</returns>
    public boolean checkKeep()
    {
        boolean ret = true;

        if (this.restrictKeep()
            && !this.isKeepValid())
        {
            ret = checkFailed(strFmt("@SYS136412", fieldId2pname(tableNum(MarkupTrans), fieldNum(MarkupTrans, Keep)), this.Keep));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPosition</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean checkPosition()
    {
        boolean ret = true;

        if (this.Position > 0
            && MarkupTrans::existPosition(this.TransTableId, this.TransRecId, this.Position, this.RecId)
            && AutoChargesSetupSequenceCompoundFeature::instance().isEnabled())
        {
            ret = checkFailed(strFmt("@SCM:AutoChargeMarkupTransPositionError", this.Position));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPosition</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean existPosition(
        MarkupTransRefTableId   _transTableId,
        MarkupTransRefRecId     _transRecId,
        MarkupPosition          _position,
        RecId                   _excludedMarkupRecId = 0)
    {
        if (_transTableId && _transRecId)
        {
            return (select firstonly RecId from markupTrans
                    index hint TableRecIdIdx
                    where markupTrans.TransTableId  == _transTableId
                       && markupTrans.TransRecId    == _transRecId
                       && markupTrans.Position      == _position
                       && MarkupTrans.Recid         != _excludedMarkupRecId).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIsCompound</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean checkIsCompound()
    {
        boolean ret = true;

        if (this.IsCompound == NoYes::Yes
            && (this.MarkupCategory != MarkupCategory::Percent || this.ModuleCategory != HeadingLine::Heading)
            && AutoChargesSetupSequenceCompoundFeature::instance().isEnabled())
        {
            ret = checkFailed("@SCM:AutoChargeHeaderIsCompundError");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSpecificUnitSymbol</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean checkSpecificUnitSymbol()
    {
        boolean ret = true;

        if (this.SpecificUnitSymbol
            && (this.ModuleCategory != HeadingLine::Line
                || !(this.MarkupCategory == MarkupCategory::UnitSpecific || this.MarkupCategory == MarkupCategory::UnitSpecificMatch))
            && AutoChargesSetupLineLevelUnitOfMeasureFeature::instance().isEnabled())
        {
            ret = checkFailed("@SCM:AutoChargeLineUnitError");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeSkippedForSummaryUpdate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean mustBeSkippedForSummaryUpdate(RecId _masterTransRecId)
    {
        return this.MarkupAutoLineRecId
            && this.TransTableId == tableNum(SalesTable)
            && this.TransRecId != _masterTransRecId
            && !this.mcrIsProRated() // Prorated charges are excluded from calculation per invoice basis in summary update scenario.
            && SalesParameters::find().IsMarkupCalculationPerInvoiceForSummaryUpdateEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isChargesPerUnitNotAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the value of the <c>MarkupCategory</c> field is set to pcs.
    /// </summary>
    /// <param name = "_markupTrans">The value of table <c>MarkupTrans</c>.
    /// </param>
    /// <returns>
    /// True if the <c>MarkupCategory</c> field is pcs; otherwise, false.
    /// </returns>
    protected boolean isChargesPerUnitNotAllowed(MarkupTrans _markupTrans)
    {
        return (_markupTrans.MarkupCategory == MarkupCategory::Pcs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMarkupCategory</Name>
				<Source><![CDATA[
    boolean checkMarkupCategory()
    {
        boolean     ok = true;
        boolean     isPOSOrder = false;
        PurchTable  purchTable;
        PurchLine   purchLine;
        SalesTable  salesTable;
        SalesLine   salesLine;

        #VendInvoiceFaults

        if (this.TransTableId == tableNum(SalesTable)       ||
            this.TransTableId == tableNum(SalesQuotationTable)   ||
            this.TransTableId == tableNum(PurchTable)       ||
            this.TransTableId == tableNum(CustInvoiceTable) ||
            this.TransTableId == tableNum(VendInvoiceInfoTable) ||
            this.TransTableId == tableNum(VendInvoiceInfoSubTable)
            || this.TransTableId == tableNum(WHSLoadTable)
            )
        {
            if (this.isChargesPerUnitNotAllowed(this))
            {
                ok = AifFault::checkFailedLogFault("@SYS28725", #MiscChargesPerUnitNotAllowed);
            }
        }

        if (this.isEditingBlockedByVendorInvoice())
        {
            ok = AifFault::checkFailedLogFault("@SYS327634");
        }

        if (this.MarkupCategory == MarkupCategory::InterCompanyPercent)
        {
            switch (this.TransTableId)
            {
                case(tableNum(PurchLine)):
                    purchLine  = this.parentRecord();
                    purchTable = purchLine.purchTable();
                    if (!purchTable.isInterCompanyOrder()
                    ||  (purchTable.isInterCompanyOrder() && !purchTable.InterCompanyOriginalSalesId))
                    {
                        ok = AifFault::checkFailedLogFault("@SYS98799", #OrderLineMustOriginateFromSalesOrderLine);
                    }
                    break;
                case(tableNum(SalesLine)):
                    salesLine  = this.parentRecord();
                    salesTable = salesLine.salesTable();
                    if (!salesTable.isInterCompanyOrder()
                    ||  (salesTable.isInterCompanyOrder() && !salesTable.InterCompanyOriginalSalesId))
                    {
                        ok = AifFault::checkFailedLogFault("@SYS98799", #OrderLineMustOriginateFromSalesOrderLine);
                    }
                    break;
                default:
                    ok = AifFault::checkFailedLogFault("@SYS98798", #IntercompanyPctOnlyAllowedOnIntercompanyOrderLines);
                    break;
            }
        }

        if (ok
            && this.ModuleCategory == HeadingLine::Heading
            && (this.MarkupCategory == MarkupCategory::UnitSpecific || this.MarkupCategory == MarkupCategory::UnitSpecificMatch)
            && AutoChargesSetupLineLevelUnitOfMeasureFeature::instance().isEnabled())
        {
            ok = checkFailed("@SCM:AutoChargeHeaderLevelSpecificUnitError");
        }

        if (ok
            && AutoChargesSetupSequenceCompoundFeature::instance().IsEnabled()
            && this.isInterCompanyAndPercentCategory())
        {
            // Do not return false, just notify the user.
            // We still use the values in the legacy calculation, and we do not want to block for updates
            checkFailed("@SCM:IntercompanySalesOrderChargePercentError");
        }

        // disable non-fixed charges on POS sales orders
        if (this.MarkupCategory != MarkupCategory::Fixed
        && isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            if (this.TransTableId == tableNum(SalesTable))
            {
                salesTable = this.parentRecord() as SalesTable;
                isPOSOrder = this.isPOSOrder(salesTable);
            }

            if (this.TransTableId == tableNum(SalesLine))
            {
                salesTable = this.parentRecord().salesTable();
                isPOSOrder = this.isPOSOrder(salesTable);
            }

            if (isPOSOrder)
            {
                ok = AifFault::checkFailedLogFault("@RET4160660");
            }
        }

        // Do not allow Proportional category to be used for other than for purchase orders
        if (this.ModuleType!= MarkupModuleType::Vend && this.MarkupCategory == MarkupCategory::Proportional)
        {
            ok = checkFailed("@SCM:ProportionalChargeCategoryError");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPOSOrder</Name>
				<Source><![CDATA[
    protected boolean isPOSOrder(SalesTable _salesTable)
    {
        return RetailParameters::isRetailInUse() && _salesTable.isRetailSale() && !_salesTable.mcrIsCallCenter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMarkupCode</Name>
				<Source><![CDATA[
    boolean checkMarkupCode()
    {
        boolean     ok                      = true;
        boolean     itemMarkupAllowed       = false;
        #VendInvoiceFaults

        if (! MarkupTable::exist(this.ModuleType, this.MarkupCode))
        {
            ok = AifFault::checkFailedLogFault(strFmt("@SYS3641", this.MarkupCode), #MiscChargeDoesNotExist);
        }

        itemMarkupAllowed = this.isItemMarkupAllowed();

        if (itemMarkupAllowed)
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
                && this.markupTable().CustomPaymType_RU)
            {
                ok = false;
            }
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (this.TransTableId == tableNum(SalesLine)
                || this.TransTableId == tableNum(PurchLine)
                || this.TransTableId == tableNum(PurchParmLine))
            {
                SalesPurchLine salesPurchLine = this.parentRecord();
                SalesPurchLineInterface salesPurchLineInterface = salesPurchLine.salesPurchLineInterface();

                if (salesPurchLineInterface.inventDim().inventProfile_RU().LockCostAdjustment)
                {
                    itemMarkupAllowed = false;
                }
                if (salesPurchLineInterface.inventDim().inventProfile_RU().LockMarkupCustVend && this.isMarkupOfTypeCustVend())
                {
                    ok = checkFailed("@GLS115688");
                }
            }
        }

        if (!itemMarkupAllowed)
        {
            MarkupTable markupTable = this.markupTable();
            if (markupTable.CustType == MarkupType::Item ||
                markupTable.VendType == MarkupType::Item)
            {
                ok = AifFault::checkFailedLogFault("@SYS16770", #MiscChargesOnItemCannotBeUsed);
            }
        }

        if (BrazilParameters::isEnabled())
        {
            if (this.markupTable().checkCustMiscCharge_BR()
                && (this.TransTableId == tableNum(SalesTable) ||
                    this.TransTableId == tableNum(CustInvoiceTable) ||
                    this.TransTableId == tableNum(SalesQuotationTable)))
            {
                ok = checkFailed("@GLS63621");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemMarkupAllowed</Name>
				<Source><![CDATA[
    protected boolean isItemMarkupAllowed()
    {
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        if ((this.TransTableId == tableNum(PurchTable)  ||
             this.TransTableId == tableNum(PurchLine)   ||
             this.TransTableId == tableNum(PurchRFQCaseTable)  ||
             this.TransTableId == tableNum(PurchRFQCaseLine)   ||
             this.TransTableId == tableNum(PurchRFQTable)  ||
             this.TransTableId == tableNum(PurchRFQLine)   ||
             this.TransTableId == tableNum(PurchReqLine) ||
             this.TransTableId == tableNum(PurchReqLineHistory) ||
             this.TransTableId == tableNum(VendInvoiceJour) ||
             ((countryRegion_RU && this.TransTableId == tableNum(CustInvoiceJour)) || !countryRegion_RU) ||
             this.TransTableId == tableNum(VendInvoiceInfoTable) ||
             this.TransTableId == tableNum(VendInvoiceInfoSubTable) ||
             this.TransTableId == tableNum(VendInvoiceInfoLine)    ||
             this.TransTableId == tableNum(InventTransferLine)      ||
             this.TransTableId == tableNum(VendInvoiceInfoLine))
             || (this.ModuleCategory == HeadingLine::Line && this.TransTableId == tableNum(MarkupTable)))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMarkupCodeAdjustment</Name>
				<Source><![CDATA[
    boolean checkMarkupCodeAdjustment(MarkupModuleType _moduleType_RU = MarkupModuleType::Vend)
    {
        boolean ok = true;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (_moduleType_RU == MarkupModuleType::Cust)
            {
                if (this.markupTable().CustType != MarkupType::LedgerAccount)
                {
                    ok = checkFailed("@GLS114831");
                }

                if (this.markupTable().VendType != MarkupType::LedgerAccount)
                {
                    ok = checkFailed("@SYS1759");
                }

                return ok;
            }
        }

        if (this.markupTable().CustType != MarkupType::Item)
        {
            ok = checkFailed("@SYS12360");
        }

        if (this.markupTable().VendType != MarkupType::LedgerAccount)
        {
            ok = checkFailed("@SYS1759");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMarkupCodeAdjustment_W</Name>
				<Source><![CDATA[
    boolean checkMarkupCodeAdjustment_W()
    {
        // Additional logic required for CustVend type. It was not implemented, so the change is commented out.
        /*    boolean res = true;

        if (this.markupTable().CustType != MarkupType::CustVend)
            res = checkFailed("@GLS114176");

        if (this.markupTable().VendType != MarkupType::LedgerAccount)
            res = res && checkFailed("@SYS1759");

        return res;*/
        boolean ok = true;

        if (this.markupTable().CustType != MarkupType::Item)
        {
            ok = checkFailed("@SYS12360");
        }

        if (this.markupTable().VendType != MarkupType::LedgerAccount)
        {
            ok = checkFailed("@SYS1759");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMarkupCodeCustVend_RU</Name>
				<Source><![CDATA[
    public boolean checkMarkupCodeCustVend_RU()
    {
        MarkupAllocation markupAllocation = MarkupAllocation::newMarkupAllocation(this.parentRecord());

        return markupAllocation.checkCustVendAllocation_RU(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMiscChargeUnallocated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there are unallocated miscellaneous charges associated with the current <c>PurchTable</c> or <c>VendInvoiceInfoTable</c> record.
    /// </summary>
    /// <returns>
    /// true if there are no unallocated miscellaneous charges associated with a <c>PurchTable</c> or <c>VendInvoiceInfoTable</c>
    /// record or if the commitments feature is disabled; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method is only called if the current record is associated with a <c>PurchTable</c> or <c>VendInvoiceInfoTable</c> record and the
    /// french regulatory requirements feature is enabled.
    /// </remarks>
    public boolean checkMiscChargeUnallocated()
    {
        PurchTable              purchTable;
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        str                     error = "@SPS2135";

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            switch (this.TransTableId)
            {
                case tableNum(PurchTable) :
                    select firstonly RecId, TableId from purchTable
                        where purchTable.RecId == this.TransRecId;

                    if (purchTable.existUnallocatedMiscCharge())
                    {
                        warning(error);
                        return false;
                    }
                    break;

                case tableNum(VendInvoiceInfoSubTable) :
                    select firstonly RecId from vendInvoiceInfoSubTable
                        where vendInvoiceInfoSubTable.RecId == this.TransRecId
                    join firstonly RecId, TableId from vendInvoiceInfoTable
                        where vendInvoiceInfoTable.ParmId == vendInvoiceInfoSubTable.ParmId &&
                            vendInvoiceInfoTable.TableRefId == vendInvoiceInfoSubTable.TableRefId;

                    if (vendInvoiceInfoTable.existUnallocatedMiscCharge())
                    {
                        warning(error);
                        return false;
                    }
                    break;

                case tableNum(VendInvoiceInfoTable) :
                    select firstonly RecId, TableId from vendInvoiceInfoTable
                        where vendInvoiceInfoTable.RecId == this.TransRecId;

                    if (vendInvoiceInfoTable.existUnallocatedMiscCharge())
                    {
                        warning(error);
                        return false;
                    }
                    break;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPostingTypeTransit_RU</Name>
				<Source><![CDATA[
    public boolean checkPostingTypeTransit_RU()
    {
        CustInvoiceJour     custInvoiceJour;
        CustInvoiceTrans    custInvoiceTrans;

        if (this.TransTableId != tableNum(CustInvoiceJour))
        {
            return true;
        }

        custInvoiceJour = CustInvoiceJour::findRecId(this.TransRecId);

        if (custInvoiceJour.custInvoiceJour_RU().InvoicePostingType_RU != SalesInvoicePostingType_RU::GoodsInRoute
        || !this.markupTable().UseCustPostingTypeTransit_RU)
        {
            return true;
        }

        while select custInvoiceTrans
            where custInvoiceTrans.SalesId              == custInvoiceJour.SalesId      &&
                  custInvoiceTrans.InvoiceId            == custInvoiceJour.InvoiceId    &&
                  custInvoiceTrans.InvoiceDate          == custInvoiceJour.InvoiceDate  &&
                  custInvoiceTrans.NumberSequenceGroup  == custInvoiceJour.NumberSequenceGroup
        {
            if (custInvoiceTrans.qtyToDelivery_RU())
            {
                return true;
            }
        }

        return checkFailed("@GLS114834");
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxCombination</Name>
				<Source><![CDATA[
    boolean checkTaxCombination(boolean _giveWarning = true)
    {
        if (this.TaxGroup && this.TaxItemGroup && (!this.taxCombinationAllowed() || this.CurrencyCode != this.parentCurrencyCode()))
        {
            if (!BrazilParameters::isEnabled()
                || this.MarkupClassification_BR != MarkupClassification_BR::SISCOMEX)
            {
                if (_giveWarning)
                {
                    return checkFailed("@SYS22772");
                }
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>connectedFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates how a <c>MarkupTrans</c> record is connected to another <c>MarkupTrans</c> record.
    /// </summary>
    /// <returns>
    /// A value that indicates the source of the connection.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display server MarkupConnectedFrom connectedFrom()
    {
        Set nums = this.connectedFromSet();
        SetEnumerator numsEnum;

        if (!hasFieldAccess(tableNum(VendInvoiceInfoTable), fieldNum(VendInvoiceInfoTable, Num), AccessType::View))
        {
            error("@SYS57330");
        }
        switch (nums.elements())
        {
            case 0:
                return '';
            case 1:
                numsEnum = nums.getEnumerator();
                numsEnum.moveNext();
                if (strLen(numsEnum.current()) == 0)
                {
                    return "@SYS119279";
                }
                else
                {
                    return numsEnum.current();
                }
        }
        return '*';
    }

]]></Source>
			</Method>
			<Method>
				<Name>connectedFromSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates identifiers for a <c>MarkupTrans</c> record that is connected to another
    ///    <c>MarkupTrans</c> record.
    /// </summary>
    /// <returns>
    ///    A set of document numbers.
    /// </returns>
    public Set connectedFromSet()
    {
        Set nums = new Set(Types::String);

        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
        VendInvoiceInfoLine vendInvoiceInfoLine;

        MarkupTrans fromTrans;

        void addNum(RefRecId _recId, Num _num)
        {
            if (_recId)
            {
                nums.add(_num);
            }
        }
        while select TransTableId, TransRecId from fromTrans
                where this.TableId == fromTrans.OrigTableId && this.RecId == fromTrans.OrigRecId && !fromTrans.IsDeleted
        {
            switch (fromTrans.TransTableId)
            {
                case tableNum(VendInvoiceInfoTable): // no connections from VendInvoiceInfoTable to a PO
                    break;

                case tableNum(VendInvoiceInfoSubTable): // VendInvoiceInfoSubTable -> PurchTable
                select firstonly RecId, Num from vendInvoiceInfoTable
                    where vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Waiting
                        exists join vendInvoiceInfoSubTable
                            where vendInvoiceInfoSubTable.RecId == fromTrans.TransRecId &&
                                vendInvoiceInfoSubTable.TableRefId == vendInvoiceInfoTable.TableRefId &&
                                vendInvoiceInfoSubTable.ParmId == vendInvoiceInfoTable.ParmId;
                    addNum(vendInvoiceInfoTable.RecId, vendInvoiceInfoTable.Num);
                    break;

                case tableNum(VendInvoiceInfoLine): // VendInvoiceInfoLine -> PurchLine
                select firstonly RecId, Num from vendInvoiceInfoTable
                     where vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Waiting
                        exists join vendInvoiceInfoLine
                            where vendInvoiceInfoLine.RecId == fromTrans.TransRecId &&
                                vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId &&
                                vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId;
                    addNum(vendInvoiceInfoTable.RecId, vendInvoiceInfoTable.Num);
                    break;
            }
        }
        return nums;
    }

]]></Source>
			</Method>
			<Method>
				<Name>connectedTo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates how a <c>MarkupTrans</c> record is connected to another <c>MarkupTrans</c> record.
    /// </summary>
    /// <returns>
    ///    A displayable value that indicates the destination of the connection.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display MarkupConnectedTo connectedTo()
    {
        MarkupTrans toTrans;
        str connected = '';
        if (this.OrigTableId == this.TableId)
        {
            toTrans = this.findOrig();
            if (toTrans)
            {
                switch (toTrans.TransTableId)
                {
                    case tableNum(PurchTable):
                    if (!hasFieldAccess(tableNum(PurchTable), fieldNum(PurchTable, PurchId),AccessType::View))
                        {
                            error("@SYS57330");
                        }
                        connected = PurchTable::findRecId(toTrans.TransRecId).PurchId;
                        break;
                    case tableNum(PurchLine):
                    if (!hasFieldAccess(tableNum(PurchLine), fieldNum(PurchLine, PurchId),AccessType::View))
                        {
                            error("@SYS57330");
                        }
                        connected = PurchLine::findRecId(toTrans.TransRecId).PurchId;
                        break;
                }
            }
        }
        return connected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCurrencyCode</Name>
				<Source><![CDATA[
    public void convertCurrencyCode(CurrencyCode  currencyCode,
                                    TransDate     exchRateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                    boolean       _useFixedExchRate = false,
                                    CustExchRate  _fixedexchRate    = 0)
    {
        if (this.isMarkupOfTypeCustVend())
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
                &&  _useFixedExchRate)
            {
                this.Value = Markup::convertChargeValueToAccountingCurrency(this.Value, this.MarkupCategory, this.CurrencyCode, exchRateDate, _fixedexchRate);
            }
            else
            {
                this.Value = Markup::convertChargeValue(this.Value, this.MarkupCategory, this.CurrencyCode, CurrencyCode, exchRateDate);
            }

            this.CurrencyCode = currencyCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>customsUpdatePurchLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets customs update purch line.
    /// </summary>
    /// <param name="_transTableId">
    /// The transaction table id.
    /// </param>
    /// <param name="_transRecId">
    /// The transaction RecId.
    /// </param>
    public void customsUpdatePurchLine_IN(TableId _transTableId = this.TransTableId, RefRecId _transRecId = this.TransRecId)

    {
        PurchLine                       purchLineLoc;
        PurchLine_IN                    purchLineLoc_IN;
        MarkupValue                     value;
        CustomsAmount_IN                landingCharges;
        CustomsImportAssessableValue_IN customsImportAssessableValue;

        if (_transTableId == tableNum(PurchLine))
        {
            ttsbegin;

            select firstonly forupdate purchLineLoc
                where purchLineLoc.TableId     == _transTableId
                   && purchLineLoc.RecId       == _transRecId;

            if (purchLineLoc)
            {
                purchLineLoc_IN = purchLineLoc.purchLine_IN();

                customsImportAssessableValue = CustomsImportAssessableValue_IN::findInventTransId(purchLineLoc.InventTransId);
                if (customsImportAssessableValue.Basis == CustomsAssessableValueBasis_IN::CIF)
                {
                    value = 0;
                }
                else
                {
                    value = CustomsImportAssessableValue_IN::getMarkupValue(purchLineLoc.TableId, purchLineLoc.RecId, purchLineLoc.InventTransId);
                }
                if (customsImportAssessableValue.RecId != 0)
                {
                    landingCharges                  = (customsImportAssessableValue.Amount + value) * VendParameters::find().CustomsLandingChargesPct_IN/100;
                    purchLineLoc_IN.AssessableValueTransactionCurrency = customsImportAssessableValue.Amount + value + landingCharges;
                }
                else
                {
                    landingCharges                  = (purchLineLoc.LineAmount + value) * VendParameters::find().CustomsLandingChargesPct_IN/100;
                    purchLineLoc_IN.AssessableValueTransactionCurrency = purchLineLoc.LineAmount + value + landingCharges;
                }
                purchLineLoc_IN.AssessableValueAccountingCurrency = TaxAssessableValueHandler_IN::calcAssessableValueAccountingCurrency(purchLineLoc_IN.AssessableValueTransactionCurrency, purchLineLoc.CurrencyCode, purchLineLoc.purchTable().AccountingDate);
                purchLineLoc.packPurchLine_IN(purchLineLoc_IN);
            }
            purchLineLoc.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>customsUpdatePurchParmLine_IN</Name>
				<Source><![CDATA[
    private void customsUpdatePurchParmLine_IN(PurchParmLine _purchParmLine)
    {
        if (_purchParmLine)
        {
            ttsbegin;
            PurchParmLine_IN purchParmLineIN = _purchParmLine.purchParmLine_IN();
            purchParmLineIN.selectForUpdate(true);

            purchParmLineIN.AssessableValueTransactionCurrency = _purchParmLine.getMiscChargesAmount_IN(_purchParmLine.TableId, _purchParmLine.RecId, _purchParmLine.Ordering);
            // The charges are converted based on the same exchange rate as per the bill of entry date.
            if (_purchParmLine.purchParmUpdate().CustomsBillOfEntry_IN == NoYes::Yes)
            {
                purchParmLineIN.AssessableValueAccountingCurrency = TaxAssessableValueHandler_IN::calcAssessableValueAccountingCurrency(purchParmLineIN.AssessableValueTransactionCurrency, _purchParmLine.CurrencyCode, _purchParmLine.purchParmTable().TransDate);
            }
            else
            {
                purchParmLineIN.AssessableValueAccountingCurrency = TaxAssessableValueHandler_IN::calcAssessableValueAccountingCurrency(purchParmLineIN.AssessableValueTransactionCurrency, _purchParmLine.CurrencyCode, _purchParmLine.purchLine().purchTable().AccountingDate);
            }
            purchParmLineIN.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>customsUpdateSalesLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets customs update sales line.
    /// </summary>
    /// <param name="_transTableId">
    /// The transaction table id.
    /// </param>
    /// <param name="_transRecId">
    /// The transaction RecId.
    /// </param>
    void customsUpdateSalesLine_IN(TableId     _transTableId = this.TransTableId,
                                   RefRecId    _transRecId   = this.TransRecId)
    {
        SalesLine                       salesLineLoc;
        SalesLine_IN                    salesLineLoc_IN;
        CustomsExportAssessableValue_IN customsExportAssessableValue;

        if (_transTableId == tableNum(SalesLine))
        {
            ttsbegin;
            select firstonly forupdate salesLineLoc
                where salesLineLoc.TableId     == _transTableId
                   && salesLineLoc.RecId       == _transRecId;

            if (salesLineLoc)
            {
                salesLineLoc_IN = salesLineLoc.salesLine_IN();
                customsExportAssessableValue = CustomsExportAssessableValue_IN::findInventTransId(salesLineLoc.InventTransId);
                if (customsExportAssessableValue.RecId != 0)
                {
                    salesLineLoc_IN.AssessableValueTransactionCurrency = customsExportAssessableValue.Amount + CustomsExportAssessableValue_IN::getMarkupValue(salesLineLoc.TableId, salesLineLoc.RecId, salesLineLoc.InventTransId);
                }
                else
                {
                    salesLineLoc_IN.AssessableValueTransactionCurrency = salesLineLoc.LineAmount + CustomsExportAssessableValue_IN::getMarkupValue(salesLineLoc.TableId, salesLineLoc.RecId, salesLineLoc.InventTransId);
                }
                salesLineLoc.packSalesLine_IN(salesLineLoc_IN);
            }
            salesLineLoc.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the default value for a field.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID.
    /// </param>
    public void defaultField(FieldId _fieldId)
    {
        MarkupTransType markupTransType = this.type();;

        if (markupTransType)
        {
            markupTransType.defaultField(_fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies default values to all fields.
    /// </summary>
    public void defaultRow()
    {
        MarkupTransType markupTransType= this.type();

        if (markupTransType)
        {
            markupTransType.defaultRow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>MarkupTrans</c> record.
    /// </summary>
    /// <param name="_deleteFromPosting">
    /// Indicates whether a posting invokes this deletion; optional.
    /// </param>
    public void delete(boolean _deleteFromPosting = false)
    {
        VendInvoiceInfoLine     vendInvoiceInfoLine;
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        PurchTable              purchTable;
        SalesTable              salesTable;
        CustInvoiceTable        custInvoiceTable;
        MarkupTrans             localMarkupTrans,
                                oldMarkupTrans = this.orig();
        boolean                 rereadNeeded;

        if (!_deleteFromPosting && this.isEditingBlockedByVendorInvoice())
        {
            throw error("@SYS327634");
        }

        MarkupInstrumentationLogger markupInstrumentationLogger = MarkupTrans::instrumentationLogger();
        MarkupInstrumentationActivities chargeActivities = markupInstrumentationLogger.chargeActivities();

        using (var activityContext = chargeActivities.delete(this))
        {
            switch (this.TransTableId)
            {
                case tableNum(PurchTable):
                    purchTable = PurchTable::findRecId(this.TransRecId, true);
                    break;

                case tableNum(PurchLine):
                    purchTable = PurchLine::findRecId(this.TransRecId).purchTable(true);
                    break;

                case tableNum(SalesTable):
                    salesTable = SalesTable::findRecId(this.TransRecId, true);
                    break;

                case tableNum(SalesLine):
                    salesTable = SalesLine::findRecId(this.TransRecId).salesTable(true);
                    break;
            }

            if (((this.TransTableId == tableNum(PurchTable) || this.TransTableId == tableNum(PurchLine))
                && (!this.IsModified || MarkupTransHistory::exist(this) || !VersioningPurchaseOrder::newPurchaseOrder(purchTable).isLastVersionArchived()))
                || ((this.TransTableId == tableNum(PurchReqLine) && PurchReqLine::find(this.TransRecId).RequisitionStatus != PurchReqRequisitionStatus::Draft)))
            {
                if (MarkupTransAllocationDeleteInterCompanyMarkupFlight::instance().isEnabled())
                {
                    if (this.deleteInterCompanyMarkup())
                    {
                        this.reread();
                    }
                }

                if (purchTable)
                {
                    VersioningPurchaseOrder::newPurchaseOrder(purchTable).change(null, this);
                    if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                    {
                        PurchTotalsSummaryController::onDelete(this);
                    }
                }
                this.deleteSoft(_deleteFromPosting);
                return;
            }

            try
            {
                ttsbegin;

                if (this.deleteInterCompanyMarkup())
                {
                    rereadNeeded = true;
                }

                if (this.SourceDocumentLine)
                {
                    select firstonly SourceDocumentLine, RecId from localMarkupTrans
                        where localMarkupTrans.SourceDocumentLine == this.SourceDocumentLine &&
                              localMarkupTrans.RecId != this.RecId;

                    if (!localMarkupTrans)
                    {
                        AccountingDistributionProcessor::deleteSourceDocumentLine(this.SourceDocumentLine);
                        AccountingDistributionProcessor::deleteAllDistributionsForSourceDocLine(this.SourceDocumentLine);
                        rereadNeeded = true;
                    }
                }
                if (rereadNeeded)
                {
                    this.reread();//Needed as above code can update the MarupTrans record.
                }

                // <GIN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    this.cascadeDeleteMarkupTrans_IN();
                }
                // </GIN>

                // <GTE>
                if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled() && !_deleteFromPosting)
                {
                    this.markCurrentTaxDocumentTaxStatusDirty();
                }
                // </GTE>

                if (TaxIntegrationUtils::isTransitDocumentEnabled())
                {
                    this.TransitDocumentTransactionMap_IN::deleteTransitDocuments();
                }

                chargeActivities.logMarkupTrans(activityContext, this);
                
                super();

                switch (this.TransTableId)
                {
                    case tableNum(SalesTable):
                    case tableNum(SalesLine):
                        if (oldMarkupTrans.TaxGroup && oldMarkupTrans.TaxItemGroup)
                        {
                            salesTable.type().deleteTaxUncommitted();
                        }
                        break;

                    case tableNum(VendInvoiceInfoSubTable):
                        MarkupMatchingTrans::deleteRecords(this.TransTableId, this.TransRecId, this.LineNum);
                        if (oldMarkupTrans.TaxGroup && oldMarkupTrans.TaxItemGroup)
                        {
                            vendInvoiceInfoTable = VendInvoiceInfoSubTable::findRecId(this.TransRecId).vendInvoiceInfoTable();
                            if (vendInvoiceInfoTable)
                            {
                                TaxUncommitted::deleteForDocumentHeader(vendInvoiceInfoTable.TableId,vendInvoiceInfoTable.RecId, true, true);
                            }
                        }
                        break;

                    case tableNum(VendInvoiceInfoLine):
                        vendInvoiceInfoLine = VendInvoiceInfoLine::findRecId(this.TransRecId);
                        //When a row in the VendInvoiceInfoLine is deleted, it is removed before any
                        //related entries in MarkupTrans.  This code is necessary when a specific
                        //invoice MarkupTrans is deleted.
                        if (vendInvoiceInfoLine)
                        {
                            MarkupMatchingTrans::deleteRecords(this.TransTableId, this.TransRecId, this.LineNum);
                            VendInvoiceInfoSubMarkupMatchingTrans::reapplyVendSubTableMarkupTrans(vendInvoiceInfoLine.ParmId, vendInvoiceInfoLine.TableRefId, vendInvoiceInfoLine.OrigPurchId);
                            if (oldMarkupTrans.TaxGroup && oldMarkupTrans.TaxItemGroup)
                            {
                                vendInvoiceInfoTable = vendInvoiceInfoLine.vendInvoiceInfoTable();
                                TaxUncommitted::deleteForDocumentHeader(vendInvoiceInfoTable.TableId,vendInvoiceInfoTable.RecId, true, true);
                            }
                        }
                        break;

                    case tableNum(VendInvoiceInfoTable):
                        if (oldMarkupTrans.TaxGroup && oldMarkupTrans.TaxItemGroup)
                        {
                            vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(this.TransRecId);
                            if (vendInvoiceInfoTable)
                            {
                                TaxUncommitted::deleteForDocumentHeader(vendInvoiceInfoTable.TableId,vendInvoiceInfoTable.RecId, true, true);
                            }
                        }
                        break;

                    case tableNum(PurchTable):
                        // <GSA>
                        this.updateBankLCImportChargeAllocation_SA();
                        // </GSA>
                        if (oldMarkupTrans.TaxGroup && oldMarkupTrans.TaxItemGroup)
                        {
                            purchTable.type().deleteTaxUncommitted();
                            TaxUncommitted::deleteForDocumentLine(this.TableId, this.RecId, true, true);
                        }
                        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                        {
                            PurchTotalsSummaryController::onDelete(this);
                        }
                        break;

                    case tableNum(PurchLine):
                        // <GSA>
                        this.updateBankLCImportChargeAllocation_SA();
                        // </GSA>
                        if (oldMarkupTrans.TaxGroup && oldMarkupTrans.TaxItemGroup)
                        {
                            purchTable.type().deleteTaxUncommitted();
                            TaxUncommitted::deleteForDocumentLine(this.TableId, this.RecId, true, true);
                        }
                        break;

                    case tableNum(CustInvoiceTable):
                        if (!_deleteFromPosting && oldMarkupTrans.TaxGroup && oldMarkupTrans.TaxItemGroup)
                        {
                            custInvoiceTable = CustInvoiceTable::findRecId(this.TransRecId);
                            TaxUncommitted::deleteForDocumentHeader(custInvoiceTable.TableId,custInvoiceTable.RecId, true);
                        }
                        break;

                    default:
                        if (this.TransTableId == tableNum(CustInvoiceLine) && SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
                        {
                            if (!_deleteFromPosting && oldMarkupTrans.TaxGroup && oldMarkupTrans.TaxItemGroup)
                            {
                                custInvoiceTable = CustInvoiceLine::find(this.TransRecId).custInvoiceTable();

                                TaxUncommitted::deleteForDocumentHeader(custInvoiceTable.TableId,custInvoiceTable.RecId, true);
                            }
                        }
                        break;
                }

                if (TaxWithholdingGlobalFeature::isCalcWHTInInvoiceWithChargeEnabled())
                {
                    switch(this.TransTableId)
                    {
                        case tableNum(VendInvoiceInfoSubTable):
                            if (!vendInvoiceInfoTable)
                            {
                                vendInvoiceInfoTable = VendInvoiceInfoSubTable::findRecId(this.TransRecId).vendInvoiceInfoTable();
                            }
                            TaxWithholdUncommitted::deleteForDocumentHeader(vendInvoiceInfoTable.TableId, vendInvoiceInfoTable.RecId);
                            break;

                        case tableNum(VendInvoiceInfoLine):
                            if (!vendInvoiceInfoTable)
                            {
                                vendInvoiceInfoLine = VendInvoiceInfoLine::findRecId(this.TransRecId);
                                vendInvoiceInfoTable = vendInvoiceInfoLine.vendInvoiceInfoTable();
                            }
                            TaxWithholdUncommitted::deleteForDocumentHeader(vendInvoiceInfoTable.TableId, vendInvoiceInfoTable.RecId);
                            break;

                        case tableNum(VendInvoiceInfoTable):
                            if (!vendInvoiceInfoTable)
                            {
                                vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(this.TransRecId);
                            }
                            TaxWithholdUncommitted::deleteForDocumentHeader(vendInvoiceInfoTable.TableId, vendInvoiceInfoTable.RecId);
                            break;

                        case tableNum(PurchTable), tableNum(PurchLine) :
                            purchTable.type().deleteTaxWithholdUncommitted();
                            break;

                        default:
                            break;
                    }
                }
                this.resetTimeStampOnSalesTotals();

                ttscommit;
            }
            catch(Exception::Error)
            {
                ttsabort;
                throw error("@SYS93835");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInterCompanyMarkup</Name>
				<Source><![CDATA[
    private boolean deleteInterCompanyMarkup()
    {
        InterCompanyMarkup interCompanyMarkup;

        if (!this.InterCompanySkipUpdate
        &&   this.InterCompanyRefRecId)
        {
            interCompanyMarkup = InterCompanyMarkup::construct(InterCompanyMarkupAction::Delete,this);
            interCompanyMarkup.run();
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTimeStampOnSalesTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the timestamp on <c>SalesOrderTotals</c> and <c>SalesQuotationCalculatedTotals</c> so that it is picked up for recalculating totals.
    /// </summary>
    private void resetTimeStampOnSalesTotals()
    {
        SalesId salesId;
        QuotationId quotationId;
        switch (this.TransTableId)
        {
            case tableNum(SalesTable):
                SalesTable salesOrder = SalesTable::findRecId(this.TransRecId);
                salesId = salesOrder.SalesId;
                break;
            case tableNum(SalesLine):
                SalesLine salesLine = SalesLine::findRecId(this.TransRecId);
                salesId = salesLine.SalesId;
                break;
            case tableNum(SalesQuotationTable):
                SalesQuotationTable quotation = SalesQuotationTable::findRec(this.TransRecId);
                quotationId = quotation.QuotationId;
                break;
            case tableNum(SalesQuotationLine):
                SalesQuotationLine quotationLine = SalesQuotationLine::findRecId(this.TransRecId);
                quotationId = quotationLine.QuotationId;
                break;
            default:
                break;
        }

        if (salesId != '')
        {
            this.resetTimeStampForSalesOrders(SalesId);
        }
        else if (quotationId != '')
        {
            this.resetTimeStampForSalesQuotations(quotationId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTimeStampForSalesOrders</Name>
				<Source><![CDATA[
    private void resetTimeStampForSalesOrders(SalesId _salesId)
    {
        SalesOrderTotals orderTotals;
        update_recordset orderTotals
                setting LastUpdatedDateTime = DateTimeUtil::minValue()
                where orderTotals.SalesId == _salesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTimeStampForSalesQuotations</Name>
				<Source><![CDATA[
    private void resetTimeStampForSalesQuotations(QuotationIdBase _quotationId)
    {
        SalesQuotationCalculatedTotals quotationTotals;
        update_recordset quotationTotals
                setting LastUpdatedDateTime = DateTimeUtil::minValue()
                where quotationTotals.QuotationId == _quotationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSoft</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the record as deleted.
    /// </summary>
    /// <param name="_deleteFromPosting">
    /// Indicates whether a posting invokes this deletion; optional.
    /// </param>
    /// <remarks>
    ///     Cascade deletion of related records is also done.
    ///     Document change management is notified about the change.
    /// </remarks>
    private void deleteSoft(boolean _deleteFromPosting = false)
    {
        PurchTable          purchTable;
        PurchLine           purchLine;
        MarkupTrans         oldMarkupTrans = this.orig();
        ttsbegin;

        this.IsModified    = NoYes::Yes;
        this.IsDeleted     = NoYes::Yes;
        this.deleteSoftClearValues();
        this.doUpdate();

        if (!_deleteFromPosting)
        {
            switch (this.TransTableId)
            {
                case tableNum(PurchTable):
                    purchTable = PurchTable::findRecId(this.TransRecId);
                    if (oldMarkupTrans.TaxGroup && oldMarkupTrans.TaxItemGroup)
                    {
                        TaxUncommitted::deleteForDocumentLine(this.TableId, this.RecId, false, true);
                    }
                    if (!this.markupTypeItem())
                    {
                        this.updateMarkupDistribution(purchTable);
                    }
                    break;

                case tableNum(PurchLine):
                    purchLine = PurchLine::findRecId(this.TransRecId);
                    if (oldMarkupTrans.TaxGroup && oldMarkupTrans.TaxItemGroup)
                    {
                        TaxUncommitted::deleteForDocumentLine(this.TableId, this.RecId, false, true);
                    }
                    this.updateMarkupDistribution(purchLine);
                    break;

                case tableNum(PurchReqTable):
                    AccountingDistributionProcessor::deleteSourceDocumentLine(this.SourceDocumentLine);
                    AccountingDistributionProcessor::deleteAllDistributionsForSourceDocLine(this.SourceDocumentLine);
                    break;

                case tableNum(PurchReqLine):
                    AccountingDistributionProcessor::deleteSourceDocumentLine(this.SourceDocumentLine);
                    AccountingDistributionProcessor::deleteAllDistributionsForSourceDocLine(this.SourceDocumentLine);
                    break;

                default:
                    break;
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSoftClearValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method clears fields so that the record does not interfere with code that is not aware of the
    /// deleted status.
    /// </summary>
    private void deleteSoftClearValues()
    {
        this.Value                      = 0;
        this.TaxAmount                  = 0;
        this.Posted                     = 0;
        this.CalculatedAmount           = 0;
        this.InterCompanyMarkupValue    = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editingAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>MarkupTrans</c> record can be edited.
    /// </summary>
    /// <param name="_hasVendorInvoice">
    /// A Boolean value indicating whether the misc. charge is connected to a purchase order invoice
    /// </param>
    /// <param name="_isCallerDatasourceEditable">
    /// A Boolean value indicating whether the calling datasource is editable
    /// </param>
    /// <returns>true if the <c>MarkupTrans</c> record can be edited; otherwise, false.</returns>
    boolean editingAllowed(boolean _hasVendorInvoice, boolean _isCallerDatasourceEditable = true)
    {
        boolean editing = true;

        if (this.Voucher
            ||  this.InterCompanyInvoiceId
            ||  (this.MarkupCategory == MarkupCategory::Fixed && this.DocumentStatus == DocumentStatus::Invoice)
            ||  (this.MarkupCategory != MarkupCategory::Fixed && _hasVendorInvoice)
            ||  !this.interCompanyCreateAllowed())
        {
            editing = false;
        }

        if (editing &&
            ( this.TransTableId == tableNum(PurchLine) || this.TransTableId == tableNum(PurchTable)
           || (this.SourceDocumentLine && this.TransTableId == tableNum(PurchReqLine))
           || this.TransTableId == tableNum(CustInvoiceTable)
           || (this.TransTableId == tableNum(CustInvoiceLine) && SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
           || this.TransTableId == tableNum(CustConfirmTrans) || this.TransTableId == tableNum(CustConfirmJour)
           || this.TransTableId == tableNum(CustQuotationTrans) || this.TransTableId == tableNum(CustQuotationJour)
           || this.TransTableId == tableNum(CustQuotationConfirmTrans) || this.TransTableId == tableNum(CustQuotationConfirmJour))
           || this.TransTableId == tableNum(PurchRFQCaseTable))
        {
            editing = _isCallerDatasourceEditable;
        }

        if (editing && (this.TransTableId == tableNum(SalesTable) || this.TransTableId == tableNum(SalesLine)))
        {
            SalesTable salesTable;

            if (tableNum(SalesTable))
            {
                salesTable = salesTable::findRecId(this.TransRecId);
            }

            if (tableNum(SalesLine) && !salesTable)
            {
                SalesLine salesLine = SalesLine::findRecId(this.TransRecId);
                salesTable = salesLine.salesTable();
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)) && salesTable.mcrIsCallCenter())
            {
                editing = _isCallerDatasourceEditable;
            }
        }

        // Making sure editing of existing records is not allowed on Product Receipt header and lines view
        // and Product Receipt Journal header and lines view
        if (editing && MarkupTrans::allowOnlyView(this.TransTableId))
        {
            editing = false;
        }

        return editing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>excludeFromUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a misc. charge should be excluded from updates.
    /// </summary>
    /// <param name="_documentStatus">
    /// The <c>DocumentStatus</c> for the current update or calculation.
    /// </param>
    /// <param name="_copyFromPurchOrder">
    /// Is the <c>excludeFromUpdate</c> method called in relation to copying misc. charges for purchase order.
    /// </param>
    /// <returns>true if the misc. charge should be excluded; otherwise, false.</returns>
    public boolean excludeFromUpdate(DocumentStatus _documentStatus, boolean _copyFromPurchOrder = false)
    {
        boolean ret;

        // Always include Keep markups.
        if (this.Keep)
        {
            return ret;
        }
        // Exclude markup which has reached a document status above or equal to what is currently being posted.
        switch (_documentStatus)
        {
            case DocumentStatus::PickingList:
                ret = (this.DocumentStatus == DocumentStatus::PickingList  || this.DocumentStatus == DocumentStatus::PackingSlip || this.DocumentStatus == DocumentStatus::Invoice);
                break;

            case DocumentStatus::PackingSlip:
                ret = this.DocumentStatus == DocumentStatus::PackingSlip || this.DocumentStatus == DocumentStatus::Invoice;
                break;

            default:
                // Purchase order markup must be included when not being copied.
                if (!_copyFromPurchOrder && (this.TransTableId == tableNum(PurchTable) || this.TransTableId == tableNum(PurchLine)))
                {
                    ret = false;
                }
                else
                {
                    ret = this.DocumentStatus == DocumentStatus::Invoice;
                }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrig</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the original <c>MarkupTrans</c> record for the current <c>MarkupTrans</c>.
    /// </summary>
    /// <param name="update">
    ///    A Boolean value that determines whether the record is updated; optional.
    /// </param>
    /// <returns>
    ///    A <c>MarkupTrans</c> record.
    /// </returns>
    MarkupTrans findOrig(boolean update = false)
    {
        MarkupTrans origMarkupTrans;

        if (this.OrigTableId && this.OrigRecId)
        {
            origMarkupTrans.selectForUpdate(update);
            select firstonly origMarkupTrans
                   where origMarkupTrans.TableId == this.OrigTableId &&
                         origMarkupTrans.RecId == this.OrigRecId &&
                        !origMarkupTrans.IsDeleted;
        }
        return origMarkupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fullyFactured_RU</Name>
				<Source><![CDATA[
    display FacturedFully_RU fullyFactured_RU()
    {
        return abs(this.FacturedAmount_RU) == abs(this.CalculatedAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBankLCImportMarkupTrans_SA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the markup trans from <c>BankLCImportChargeAllocation_SA</c>.
    /// </summary>
    /// <param name="_purchTable">
    /// The purchase table.
    /// </param>
    /// <param name="_bankLCImportChargeAllocation">
    /// The record of <c>BankLCImportChargeAllocation_SA</c>.
    /// </param>
    public void initFromBankLCImportMarkupTrans_SA(
        PurchTable _purchTable,
        BankLCImportChargeAllocation_SA _bankLCImportChargeAllocation)
    {
        // <GSA>
        this.initFromPurchTable(_purchTable);
        this.initValue();

        this.MarkupCode = BankLCImportCharge_SA::find(_bankLCImportChargeAllocation.BankLCImportCharge).MarkupCode;
        this.MarkupCategory = MarkupCategory::Fixed;
        this.Value = _bankLCImportChargeAllocation.AllocatedAmountCur;
        this.BankLCImportChargeAllocation_SA = _bankLCImportChargeAllocation.RecId;
        this.TaxGroup = '';
        this.TaxItemGroup = '';
        // </GSA>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCaller</Name>
				<Source><![CDATA[
    void initFromCaller(TableId callerTableId, Common callerRecord)
    {
        switch (callerTableId)
        {
            case tableNum(SalesTable)           :   this.initFromSalesTable          (callerRecord as SalesTable);
                break;
            case tableNum(SalesLine)            :   this.initFromSalesLine           (callerRecord as SalesLine);
                break;
            case tableNum(SalesQuotationTable)  :   this.initFromSalesQuotationTable (callerRecord as SalesQuotationTable);
                break;
            case tableNum(SalesQuotationLine)   :   this.initFromSalesQuotationLine  (callerRecord as SalesQuotationLine);
                break;
            case tableNum(PurchTable)           :   this.initFromPurchTable          (callerRecord as PurchTable);
                break;
            case tableNum(PurchLine)            :   this.initFromPurchLine           (callerRecord as PurchLine);
                break;
            case tableNum(PurchRFQCaseTable)    :   this.initFromPurchRFQCaseTable   (callerRecord as PurchRFQCaseTable);
                break;
            case tableNum(PurchRFQCaseLine)     :   this.initFromPurchRFQCaseLine    (callerRecord as PurchRFQCaseLine);
                break;
            case tableNum(PurchRFQTable)        :   this.initFromPurchRFQTable  (callerRecord as PurchRFQTable);
                break;
            case tableNum(PurchRFQLine)         :   this.initFromPurchRFQLine   (callerRecord as PurchRFQLine);
                break;
            case tableNum(PurchReqLine)         :   this.initFromPurchReqLine        (callerRecord as PurchReqLine);
                break;
            case tableNum(PurchReqLineHistory)  :   this.initFromPurchReqLineHistory (callerRecord as PurchReqLineHistory);
                break;
            case tableNum(VendInvoiceInfoTable) :   this.initFromVendInvoiceInfoTable(callerRecord as VendInvoiceInfoTable);
                break;
            case tableNum(VendInvoiceInfoSubTable): this.initFromVendInvoiceInfoSubTable(callerRecord as VendInvoiceInfoSubTable);
                break;
            case tableNum(VendInvoiceInfoLine)  :   this.initFromVendInvoiceInfoLine (callerRecord as VendInvoiceInfoLine);
                break;
            case tableNum(VendInvoiceJour)      :   this.initFromVendInvoiceJour     (callerRecord as VendInvoiceJour);
                break;
            case tableNum(VendInvoiceTrans)     :   this.initFromVendInvoiceTrans    (callerRecord as VendInvoiceTrans);
                break;
            case tableNum(CustInvoiceTable)     :   this.initFromCustInvoiceTable    (callerRecord as CustInvoiceTable);
                break;
            case tableNum(CustInvoiceLine)      :
                if (SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
                {
                    this.initFromCustInvoiceLine(callerRecord as CustInvoiceLine);
                }
                break;

            case tableNum(SalesBasket)          :   this.initFromSalesBasket         (callerRecord as SalesBasket);
                break;
            case tableNum(SalesBasketLine)      :   this.initFromSalesBasketLine     (callerRecord as SalesBasketLine);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceJour_RU</Name>
				<Source><![CDATA[
    void initFromCustInvoiceJour_RU(CustInvoiceJour _custInvoiceJour)
    {
        this.ModuleType         = MarkupModuleType::Cust;
        this.TransTableId       = _custInvoiceJour.TableId;
        this.TransRecId         = _custInvoiceJour.RecId;
        this.CurrencyCode       = _custInvoiceJour.CurrencyCode;
        this.TaxGroup           = this.TaxGroup ? this.TaxGroup : _custInvoiceJour.TaxGroup;
        if (!this.taxCombinationAllowed())
        {
            this.TaxItemGroup   = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceJour_W</Name>
				<Source><![CDATA[
    void initFromCustInvoiceJour_W(CustInvoiceJour custInvoiceJour)
    {
        this.ModuleType         = MarkupModuleType::Cust;
        this.TransTableId       = custInvoiceJour.TableId;
        this.TransRecId         = custInvoiceJour.RecId;
        this.CurrencyCode       = custInvoiceJour.CurrencyCode;
        this.TaxGroup           = this.TaxGroup ? this.TaxGroup : custInvoiceJour.TaxGroup;
        if (!this.taxCombinationAllowed())
        {
            this.TaxItemGroup   = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>MarkupTrans</c> table buffer based on another <c>CustInvoiceLine</c> table buffer.
    /// </summary>
    /// <param name="_custInvoiceLine">
    /// The <c>CustInvoiceLine</c> record from which to initialize the <c>MarkupTrans</c> record.
    /// </param>
    public void initFromCustInvoiceLine(CustInvoiceLine _custInvoiceLine)
    {
        CustInvoiceTable    custInvoiceTable = _custInvoiceLine.custInvoiceTable();

        this.ModuleType         = MarkupModuleType::Cust;
        this.TransTableId       = _custInvoiceLine.TableId;
        this.TransRecId         = _custInvoiceLine.RecId;
        this.CurrencyCode       = custInvoiceTable.CurrencyCode;

        if (BrazilParameters::isEnabled() && this.markupTable().checkCustMiscCharge_BR())
        {
            this.TaxGroup     = _custInvoiceLine.TaxGroup;
            this.TaxItemGroup = _custInvoiceLine.TaxItemGroup;
        }
        else
        {
            this.TaxGroup           = this.TaxGroup ? this.TaxGroup : _custInvoiceLine.TaxGroup;
            if (this.taxCombinationAllowed())
            {
                this.TaxItemGroup   = MarkupTable::find(MarkupModuleType::Cust, this.MarkupCode).TaxItemGroup;
            }
            else
            {
                this.TaxItemGroup   = '';
            }
        }

        this.OverrideSalesTax = this.OverrideSalesTax || _custInvoiceLine.OverrideSalesTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceTable</Name>
				<Source><![CDATA[
    void initFromCustInvoiceTable(CustInvoiceTable custInvoiceTable)
    {
        this.ModuleType         = MarkupModuleType::Cust;
        this.TransTableId       = custInvoiceTable.TableId;
        this.TransRecId         = custInvoiceTable.RecId;
        this.CurrencyCode       = custInvoiceTable.CurrencyCode;

        if (TaxParameters::checkTaxParameters_IN())
        {
            this.TaxGroup       = '';
            this.TaxItemGroup   = '';
        }
        else
        {
            this.TaxGroup           = this.TaxGroup ? this.TaxGroup : custInvoiceTable.TaxGroup;
            this.OverrideSalesTax = this.OverrideSalesTax || custInvoiceTable.OverrideSalesTax;

            if (this.taxCombinationAllowed())
            {
                this.TaxItemGroup   = MarkupTable::find(
                                                        MarkupModuleType::Cust,
                                                        this.MarkupCode).TaxItemGroup;
            }
            else
            {
                this.TaxItemGroup   = '';
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceTrans_W</Name>
				<Source><![CDATA[
    void initFromCustInvoiceTrans_W(CustInvoiceTrans custInvoiceTrans)
    {
        this.ModuleType         = MarkupModuleType::Cust;
        this.TransTableId       = custInvoiceTrans.TableId;
        this.TransRecId         = custInvoiceTrans.RecId;
        this.CurrencyCode       = custInvoiceTrans.CurrencyCode;
        this.TaxGroup           = this.TaxGroup     ? this.TaxGroup     : custInvoiceTrans.TaxGroup;
        this.TaxItemGroup       = this.TaxItemGroup ? this.TaxItemGroup : custInvoiceTrans.TaxItemGroup;
        this.OverrideSalesTax   = this.OverrideSalesTax || custInvoiceTrans.OverrideSalesTax;
        if (!this.taxCombinationAllowed())
        {
            this.TaxItemGroup   = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSequenceCompoundSpecificUoMFromMarkupAutoLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void initSequenceCompoundSpecificUoMFromMarkupAutoLine(MarkupAutoLine _markupAutoLine, Common _source)
    {
        if (AutoChargesSetupLineLevelUnitOfMeasureFeature::instance().IsEnabled())
        {
            this.SpecificUnitSymbol = _markupAutoLine.SpecificUnitSymbol;
        }

        if (!AutoChargesSetupSequenceCompoundFeature::instance().IsEnabled())
        {
            return;
        }

        if (Markup::isSequenceAndCompoundEnabledForHeaderSource(_source.TableId))
        {
            this.IsCompound         = _markupAutoLine.IsCompound;
            this.Sequence           = _markupAutoLine.Sequence;
            this.MarkupTaxCharge    = MarkupAutoLineTaxCharge::getMarkupTaxCharge(_markupAutoLine.RecId).pack();
        }
        else if (Markup::isSequenceAndCompoundEnabledForLineSource(_source.TableId))
        {
            this.MarkupTaxCharge    = MarkupAutoLineTaxCharge::getMarkupTaxCharge(_markupAutoLine.RecId).pack();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromMarkupAutoLine</Name>
				<Source><![CDATA[
    void initFromMarkupAutoLine(MarkupAutoLine  markupAutoLine)
    {
        this.ModuleType         = markupAutoLine.ModuleType;
        this.MarkupCode         = markupAutoLine.MarkupCode;
        this.Txt                = markupAutoLine.Txt;
        this.Value              = markupAutoLine.Value;
        this.MarkupCategory     = markupAutoLine.MarkupCategory;
        this.ModuleCategory     = markupAutoLine.ModuleCategory;
        this.CurrencyCode       = markupAutoLine.MarkupCurrencyCode;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.CustomsAssessableValue_IN = markupAutoLine.CustomsAssessableValue_IN;
        }

        if (TaxParameters::checkTaxParameters_IN())
        {
            this.TaxGroup       = '';
            this.TaxItemGroup   = '';
        }
        else
        {
            this.TaxGroup           = this.TaxGroup     ? this.TaxGroup     : markupAutoLine.TaxGroup;
            this.TaxItemGroup       = this.TaxItemGroup ? this.TaxItemGroup : markupAutoLine.TaxItemGroup;
            if (!this.taxCombinationAllowed())
            {
                this.TaxItemGroup   = '';
            }
        }
        this.Keep               = markupAutoLine.Keep;
        if (LedgerParameters::isMiscellaneouscharges_IN())
        {
            this.NotionalCharges_IN     = markupAutoLine.NotionalCharges_IN;
            this.NotionalPct_IN         = markupAutoLine.NotionalPct_IN;
        }

        this.FromAmount = markupAutoLine.FromAmount;
        this.ToAmount = markupAutoLine.ToAmount;

        if (markupAutoLine.FromAmount || markupAutoLine.ToAmount)
        {
            this.IsTieredCharge = NoYes::Yes;
        }

        if (RetailParameters::isRetailAutoChargesEnabledAndInUse())
        {
            MarkupAutoTable markupAutoTable = MarkupAutoTable::findByRecId(markupAutoLine.tableRecId);
            this.IsAdvancedLineProrated = markupAutoTable.RetailAdvancedChargesDeliveryProrate;
            this.MarkupAutoTableRecId = markupAutoTable.RecId;
        }

        this.MarkupAutoLineRecId = markupAutoLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromMarkupTable</Name>
				<Source><![CDATA[
    void initFromMarkupTable(MarkupTable markupTable)
    {
        this.ModuleType         = markupTable.ModuleType;
        this.MarkupCode         = markupTable.MarkupCode;
        this.Txt                = markupTable.Txt;

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN() && !MarkupTable_IN::isAllowTax(markupTable.ModuleType, markupTable.MarkupCode))
        {
            this.TaxGroup       = '';
            this.TaxItemGroup   = '';
        }
        else
        {
            // </GIN>
            if (this.taxCombinationAllowed())
            {
                this.TaxItemGroup       = markupTable.TaxItemGroup;
            }
            else
            {
                this.TaxItemGroup   = '';

                // <GIN>
            }
            // </GIN>
        }

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.MarkupClassification_BR   = markupTable.MarkupClassification_BR;
        }
        // </GBR>

        this.initFromMarkupTable_MX(markupTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromMarkupTable_MX</Name>
				<Source><![CDATA[
    void initFromMarkupTable_MX(MarkupTable markupTable)
    {
        if (EInvoiceParameters_MX::isElectronicInvoiceEnabled() || EInvoiceCFDIParameters_MX::isElectronicInvoiceEnabled())
        {
            this.satProductCode_MX  = markupTable.satProductCode_MX;
            this.satUnitCode_MX     = markupTable.satUnitCode_MX;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromMarkupTrans</Name>
				<Source><![CDATA[
    void initFromMarkupTrans(MarkupTrans source)
    {
        this.ModuleType         = source.ModuleType;
        this.MarkupCategory     = source.MarkupCategory;
        this.ModuleCategory     = source.ModuleCategory;
        this.LineNum            = source.LineNum;
        this.Txt                = source.Txt;
        this.MarkupCode         = source.MarkupCode;
        this.CurrencyCode       = source.CurrencyCode;
        this.IsAutoCharge       = source.IsAutoCharge;

        if (AutoChargesSetupLineLevelUnitOfMeasureFeature::instance().IsEnabled())
        {
            this.SpecificUnitSymbol = source.SpecificUnitSymbol;
        }

        if (AutoChargesSetupSequenceCompoundFeature::instance().IsEnabled())
        {
            if (Markup::isSequenceAndCompoundEnabledForHeaderSource(source.TransTableId))
            {
                this.IsCompound         = source.IsCompound;
                this.Sequence           = source.Sequence;
                this.Position           = source.Position;
                this.MarkupTaxCharge    = source.MarkupTaxCharge;
            }
            else if (Markup::isSequenceAndCompoundEnabledForLineSource(source.TransTableId))
            {
                this.Position           = source.Position;
                this.MarkupTaxCharge    = source.MarkupTaxCharge;
            }
        }

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            this.TaxGroup       = '';
            this.TaxItemGroup   = '';
        }
        else
        {
            // </GIN>
            this.TaxGroup           = this.TaxGroup     ? this.TaxGroup     : source.TaxGroup;
            this.TaxItemGroup       = this.TaxItemGroup ? this.TaxItemGroup : source.TaxItemGroup;
            this.OverrideSalesTax = this.OverrideSalesTax || source.OverrideSalesTax;
            if (!this.taxCombinationAllowed())
            {
                this.TaxItemGroup   = '';
            }

            // <GIN>
        }
        // </GIN>
        this.Keep               = source.Keep;

        // <GSA>
        this.BankLCImportChargeAllocation_SA = source.BankLCImportChargeAllocation_SA;
        // </GSA>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.MarkupClassification_BR = source.MarkupClassification_BR;
        }
        // </GBR>

        this.initFromMarkupTrans_MX(source);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromMarkupTrans_MX</Name>
				<Source><![CDATA[
    void initFromMarkupTrans_MX(MarkupTrans source)
    {
        if (EInvoiceParameters_MX::isElectronicInvoiceEnabled() || EInvoiceCFDIParameters_MX::isElectronicInvoiceEnabled())
        {
            this.satProductCode_MX  = source.satProductCode_MX;
            this.satUnitCode_MX     = source.satUnitCode_MX;
            this.WithholdingTypeCode_MX = source.WithholdingTypeCode_MX;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromMarkupTransHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the history record based on a <c>MarkupTransHistory</c> record.
    /// </summary>
    /// <param name="_markupTransHistory">
    /// The <c>MarkupTransHistory</c> record to use for initialization.
    /// </param>
    public void initFromMarkupTransHistory(MarkupTransHistory _markupTransHistory)
    {
        MarkupTransMap markupTransMap;

        markupTransMap.data(_markupTransHistory.data());
        this.data(markupTransMap.data());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>MarkupTrans</c> table with data from the <c>PurchLine</c> table.
    /// </summary>
    /// <param name="purchLine">
    /// The record to copy data from.
    /// </param>
    void initFromPurchLine(PurchLine purchLine)
    {
        //#ISOCountryRegionCodes

        this.ModuleType         = MarkupModuleType::Vend;
        this.TransTableId       = purchLine.TableId;
        this.TransRecId         = purchLine.RecId;
        this.CurrencyCode       = purchLine.CurrencyCode;

        if (TaxParameters::checkTaxParameters_IN())
        {
            this.TaxGroup       = '';
            this.TaxItemGroup   = '';
        }
        else
        {
            this.TaxGroup           = this.TaxGroup     ? this.TaxGroup     : purchLine.TaxGroup;
            this.OverrideSalesTax = this.OverrideSalesTax || purchLine.OverrideSalesTax;
            if (!this.taxCombinationAllowed())
            {
                this.TaxItemGroup   = '';
            }
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            this.initFromVendTable_MX(purchLine.purchTable().InvoiceAccount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>MarkupTrans</c> table with data from the <c>PurchParmLine</c> table.
    /// </summary>
    /// <param name="purchParmLine">
    /// The record to copy data from.
    /// </param>
    public void initFromPurchParmLine(PurchParmLine purchParmLine)
    {
        this.ModuleType         = MarkupModuleType::Vend;
        this.TransTableId       = purchParmLine.TableId;
        this.TransRecId         = purchParmLine.RecId;
        this.CurrencyCode       = purchParmLine.CurrencyCode;

        if (TaxParameters::checkTaxParameters_IN())
        {
            this.TaxGroup       = '';
            this.TaxItemGroup   = '';
        }
        else
        {
            this.TaxGroup           = this.TaxGroup     ? this.TaxGroup     : purchParmLine.TaxGroup;
            if (!this.taxCombinationAllowed())
            {
                this.TaxItemGroup   = '';
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchReqLine</Name>
				<Source><![CDATA[
    void initFromPurchReqLine(PurchReqLine _purchReqLine)
    {
        this.ModuleType         = MarkupModuleType::Vend;
        this.TransTableId       = _purchReqLine.TableId;
        this.TransRecId         = _purchReqLine.RecId;
        this.CurrencyCode       = _purchReqLine.CurrencyCode;
        this.TaxGroup           = this.TaxGroup ? this.TaxGroup : _purchReqLine.TaxGroup;
        this.OverrideSalesTax = this.OverrideSalesTax || _purchReqLine.OverrideSalesTax;

        if (!this.taxCombinationAllowed())
        {
            this.TaxItemGroup   = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchReqLineHistory</Name>
				<Source><![CDATA[
    void initFromPurchReqLineHistory(PurchReqLineHistory _purchReqLineHistory)
    {
        this.ModuleType         = MarkupModuleType::Vend;
        this.TransTableId       = _purchReqLineHistory.TableId;
        this.TransRecId         = _purchReqLineHistory.RecId;
        this.CurrencyCode       = _purchReqLineHistory.CurrencyCode;

        if (!this.taxCombinationAllowed())
        {
            this.TaxItemGroup   = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchRFQCaseLine</Name>
				<Source><![CDATA[
    void initFromPurchRFQCaseLine(PurchRFQCaseLine purchRFQCaseLine)
    {
        this.ModuleType         = MarkupModuleType::Vend;
        this.TransTableId       = purchRFQCaseLine.TableId;
        this.TransRecId         = purchRFQCaseLine.RecId;
        this.CurrencyCode       = purchRFQCaseLine.CurrencyCode;
        if (!this.taxCombinationAllowed())
        {
            this.TaxItemGroup   = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchRFQCaseTable</Name>
				<Source><![CDATA[
    void initFromPurchRFQCaseTable(PurchRFQCaseTable purchRFQCaseTable)
    {
        this.ModuleType         = MarkupModuleType::Vend;
        this.TransTableId       = purchRFQCaseTable.TableId;
        this.TransRecId         = purchRFQCaseTable.RecId;
        this.CurrencyCode       = purchRFQCaseTable.CurrencyCode;
        if (!this.taxCombinationAllowed())
        {
            this.TaxItemGroup   = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchRFQLine</Name>
				<Source><![CDATA[
    void initFromPurchRFQLine(PurchRFQLine purchRFQLine)
    {
        this.ModuleType         = MarkupModuleType::Vend;
        this.TransTableId       = purchRFQLine.TableId;
        this.TransRecId         = purchRFQLine.RecId;
        this.CurrencyCode       = purchRFQLine.CurrencyCode;
        this.TaxGroup           = this.TaxGroup ? this.TaxGroup : purchRFQLine.TaxGroup;
        this.OverrideSalesTax = this.OverrideSalesTax || purchRFQLine.OverrideSalesTax;
        if (!this.taxCombinationAllowed())
        {
            this.TaxItemGroup   = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchRFQTable</Name>
				<Source><![CDATA[
    void initFromPurchRFQTable(PurchRFQTable purchRFQTable)
    {
        this.ModuleType         = MarkupModuleType::Vend;
        this.TransTableId       = purchRFQTable.TableId;
        this.TransRecId         = purchRFQTable.RecId;
        this.CurrencyCode       = purchRFQTable.CurrencyCode;
        this.TaxGroup           = this.TaxGroup ? this.TaxGroup : purchRFQTable.TaxGroup;
        this.OverrideSalesTax = this.OverrideSalesTax || purchRFQTable.OverrideSalesTax;
        if (!this.taxCombinationAllowed())
        {
            this.TaxItemGroup   = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchTable</Name>
				<Source><![CDATA[
    void initFromPurchTable(PurchTable purchTable)
    {
        //#ISOCountryRegionCodes

        this.ModuleType         = MarkupModuleType::Vend;
        this.TransTableId       = purchTable.TableId;
        this.TransRecId         = purchTable.RecId;
        this.CurrencyCode       = purchTable.CurrencyCode;

        if (TaxParameters::checkTaxParameters_IN())
        {
            this.TaxGroup       = '';
            this.TaxItemGroup   = '';
        }
        else
        {
            this.TaxGroup = this.TaxGroup ? this.TaxGroup : purchTable.TaxGroup;
            this.OverrideSalesTax = this.OverrideSalesTax || purchTable.OverrideSalesTax;

            if (!this.taxCombinationAllowed())
            {
                this.TaxItemGroup   = '';
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
            {
                this.initFromVendTable_MX(purchTable.InvoiceAccount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesBasket</Name>
				<Source><![CDATA[
    void initFromSalesBasket(SalesBasket  salesBasket)
    {
        this.ModuleType         = MarkupModuleType::Cust;
        this.TransTableId       = salesBasket.TableId;
        this.TransRecId         = salesBasket.RecId;
        this.CurrencyCode       = salesBasket.CurrencyCode;

        if (TaxParameters::checkTaxParameters_IN())
        {
            this.TaxGroup       = '';
            this.TaxItemGroup   = '';
        }
        else
        {
            this.TaxGroup           = this.TaxGroup ? this.TaxGroup : salesBasket.taxGroup();
            if (!this.taxCombinationAllowed())
            {
                this.TaxItemGroup   = '';
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRetailOrderTable</Name>
				<Source><![CDATA[
    public void initFromRetailOrderTable(Common buffer)
    {
        switch (buffer.TableId)
        {
            case tableNum(SalesTable):
                this.initFromSalesTable(buffer);
                break;
            case tableNum(SalesLine):
                this.initFromSalesLine(buffer);
                break;
            case tableNum(SalesQuotationTable):
                this.initFromSalesQuotationTable(buffer);
                break;
            case tableNum(SalesQuotationLine):
                this.initFromSalesQuotationLine(buffer);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesBasketLine</Name>
				<Source><![CDATA[
    void initFromSalesBasketLine(SalesBasketLine  salesBasketLine)
    {
        this.ModuleType         = MarkupModuleType::Cust;
        this.TransTableId       = salesBasketLine.TableId;
        this.TransRecId         = salesBasketLine.RecId;
        this.CurrencyCode       = salesBasketLine.CurrencyCode;

        if (TaxParameters::checkTaxParameters_IN())
        {
            this.TaxGroup       = '';
            this.TaxItemGroup   = '';
        }
        else
        {
            this.TaxGroup           = this.TaxGroup     ? this.TaxGroup     : salesBasketLine.TaxGroup;
            if (!this.taxCombinationAllowed())
            {
                this.TaxItemGroup   = '';
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLine</Name>
				<Source><![CDATA[
    void initFromSalesLine(SalesLine  salesLine)
    {
        this.ModuleType = MarkupModuleType::Cust;
        this.TransTableId = salesLine.TableId;
        this.TransRecId = salesLine.RecId;
        this.CurrencyCode = salesLine.CurrencyCode;

        if (TaxParameters::checkTaxParameters_IN() && !MarkupTable_IN::isAllowTax(MarkupModuleType::Cust, this.MarkupCode))
        {
            this.TaxGroup = '';
            this.TaxItemGroup = '';
        }
        else
        {
            this.TaxGroup = this.TaxGroup ? this.TaxGroup : salesLine.TaxGroup;
            this.OverrideSalesTax = this.OverrideSalesTax || salesLine.OverrideSalesTax;
            if (!this.taxCombinationAllowed())
            {
                this.TaxItemGroup = '';
            }
        }

        if (salesLine.SalesType == SalesType::Subscription)
        {
            this.Keep = NoYes::Yes;
        }

        if (BrazilParameters::isEnabled() &&
            this.markupTable().checkCustMiscCharge_BR())
        {
            this.TaxItemGroup = this.TaxItemGroup ? this.TaxItemGroup : salesLine.TaxItemGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesQuotationLine</Name>
				<Source><![CDATA[
    void initFromSalesQuotationLine(SalesQuotationLine  salesQuotationLine)
    {
        this.ModuleType         = MarkupModuleType::Cust;
        this.TransTableId       = salesQuotationLine.TableId;
        this.TransRecId         = salesQuotationLine.RecId;
        this.CurrencyCode       = salesQuotationLine.CurrencyCode;

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN() && !MarkupTable_IN::isAllowTax(MarkupModuleType::Cust, this.MarkupCode))
        {
            this.TaxGroup       = '';
            this.TaxItemGroup   = '';
        }
        else
        {
            // </GIN>
            this.TaxGroup           = this.TaxGroup     ? this.TaxGroup     : salesQuotationLine.TaxGroup;
            this.OverrideSalesTax = this.OverrideSalesTax || salesQuotationLine.OverrideSalesTax;
            if (!this.taxCombinationAllowed())
            {
                this.TaxItemGroup   = '';
                // <GIN>
            }
            // </GIN>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesQuotationTable</Name>
				<Source><![CDATA[
    void initFromSalesQuotationTable(SalesQuotationTable   salesQuotationTable)
    {
        this.ModuleType         = MarkupModuleType::Cust;
        this.TransTableId       = salesQuotationTable.TableId;
        this.TransRecId         = salesQuotationTable.RecId;
        this.CurrencyCode       = salesQuotationTable.CurrencyCode;

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN() && !MarkupTable_IN::isAllowTax(MarkupModuleType::Cust, this.MarkupCode))
        {
            this.TaxGroup       = '';
            this.TaxItemGroup   = '';
        }
        else
        {
            // </GIN>
            this.TaxGroup           = this.TaxGroup ? this.TaxGroup : salesQuotationTable.TaxGroup;
            this.OverrideSalesTax = this.OverrideSalesTax || salesQuotationTable.OverrideSalesTax;
            if (!this.taxCombinationAllowed())
            {
                this.TaxItemGroup   = '';
                // <GIN>
            }
            // </GIN>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesTable</Name>
				<Source><![CDATA[
    void initFromSalesTable(SalesTable salesTable)
    {
        this.ModuleType = MarkupModuleType::Cust;
        this.TransTableId = salesTable.TableId;
        this.TransRecId = salesTable.RecId;
        this.CurrencyCode = salesTable.CurrencyCode;

        if (TaxParameters::checkTaxParameters_IN() && !MarkupTable_IN::isAllowTax(MarkupModuleType::Cust, this.MarkupCode))
        {
            this.TaxGroup = '';
            this.TaxItemGroup = '';
        }
        else
        {
            this.TaxGroup = this.TaxGroup ? this.TaxGroup : salesTable.TaxGroup;
            this.OverrideSalesTax = this.OverrideSalesTax || salesTable.OverrideSalesTax;

            if (this.taxCombinationAllowed())
            {
                this.TaxItemGroup = MarkupTable::find(MarkupModuleType::Cust, this.MarkupCode).TaxItemGroup;
            }
            else
            {
                this.TaxItemGroup = '';
            }
        }

        if (salesTable.SalesType == SalesType::Subscription)
        {
            this.Keep = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendInvoiceInfoLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>MarkupTrans</c> table record from an associated <c>VendInvoiceInfoLine</c> table
    ///    record.
    /// </summary>
    /// <param name="_vendInvoiceInfoLine">
    ///    A <c>VendInvoiceInfoLine</c> table record.
    /// </param>
    public void initFromVendInvoiceInfoLine(VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        //#ISOCountryRegionCodes

        this.ModuleType         = MarkupModuleType::Vend;
        this.TransTableId       = _vendInvoiceInfoLine.TableId;
        this.TransRecId         = _vendInvoiceInfoLine.RecId;
        this.CurrencyCode       = _vendInvoiceInfoLine.CurrencyCode;
        this.TaxGroup           = this.TaxGroup ? this.TaxGroup : _vendInvoiceInfoLine.TaxGroup;
        this.OverrideSalesTax = this.OverrideSalesTax || _vendInvoiceInfoLine.OverrideSalesTax;

        if (!this.taxCombinationAllowed())
        {
            this.TaxItemGroup   = '';
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            this.initFromVendTable_MX(_vendInvoiceInfoLine.vendInvoiceInfoTable().InvoiceAccount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendInvoiceInfoSubTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>MarkupTrans</c> table record from an associated <c>VendInvoiceInfoSubTable</c>
    ///    table record.
    /// </summary>
    /// <param name="_vendInvoiceInfoSubTable">
    ///    A <c>VendInvoiceInfoSubTable</c> table record.
    /// </param>
    public void initFromVendInvoiceInfoSubTable(VendInvoiceInfoSubTable _vendInvoiceInfoSubTable)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        vendInvoiceInfoTable = _vendInvoiceInfoSubTable.vendInvoiceInfoTable();
        this.ModuleType         = MarkupModuleType::Vend;
        this.TransTableId       = _vendInvoiceInfoSubTable.TableId;
        this.TransRecId         = _vendInvoiceInfoSubTable.RecId;
        this.CurrencyCode       = vendInvoiceInfoTable.CurrencyCode;

        if (_vendInvoiceInfoSubTable.isNonPO())
        {
            this.TaxGroup = this.TaxGroup ? this.TaxGroup : vendInvoiceInfoTable.TaxGroup;
            this.OverrideSalesTax = this.OverrideSalesTax || vendInvoiceInfoTable.OverrideSalesTax;
        }
        else
        {
            PurchTable purchTable = _vendInvoiceInfoSubTable.purchTable();
            this.TaxGroup = this.TaxGroup ? this.TaxGroup : purchTable.TaxGroup;
            this.OverrideSalesTax = this.OverrideSalesTax || purchTable.OverrideSalesTax;
        }

        if (!this.taxCombinationAllowed())
        {
            this.TaxItemGroup   = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendInvoiceInfoTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>MarkupTrans</c> table record from an associated <c>VendInvoiceInfoTable</c> table
    ///    record.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    ///    A <c>VendInvoiceInfoTable</c> table record.
    /// </param>
    public void initFromVendInvoiceInfoTable(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        //#ISOCountryRegionCodes

        this.ModuleType         = MarkupModuleType::Vend;
        this.TransTableId       = _vendInvoiceInfoTable.TableId;
        this.TransRecId         = _vendInvoiceInfoTable.RecId;
        this.CurrencyCode       = _vendInvoiceInfoTable.CurrencyCode;

        if (_vendInvoiceInfoTable.isNonPO())
        {
            this.TaxGroup = this.TaxGroup ? this.TaxGroup : _vendInvoiceInfoTable.TaxGroup;
            this.OverrideSalesTax = this.OverrideSalesTax || _vendInvoiceInfoTable.OverrideSalesTax;
        }
        else
        {
            this.TaxGroup = this.TaxGroup ? this.TaxGroup : _vendInvoiceInfoTable.purchTable().TaxGroup;
            this.OverrideSalesTax = this.OverrideSalesTax || _vendInvoiceInfoTable.purchTable().OverrideSalesTax;
        }

        if (!this.taxCombinationAllowed())
        {
            this.TaxItemGroup   = '';
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            this.initFromVendTable_MX(_vendInvoiceInfoTable.InvoiceAccount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendInvoiceJour</Name>
				<Source><![CDATA[
    void initFromVendInvoiceJour(VendInvoiceJour  vendInvoiceJour)
    {
        //#ISOCountryRegionCodes

        this.ModuleType         = MarkupModuleType::Vend;
        this.TransTableId       = vendInvoiceJour.TableId;
        this.TransRecId         = vendInvoiceJour.RecId;
        this.CurrencyCode       = vendInvoiceJour.CurrencyCode;

        if (TaxParameters::checkTaxParameters_IN())
        {
            this.TaxGroup       = '';
            this.TaxItemGroup   = '';
        }
        else
        {
            this.TaxGroup           = this.TaxGroup ? this.TaxGroup : vendInvoiceJour.TaxGroup;
            if (!this.taxCombinationAllowed())
            {
                this.TaxItemGroup   = '';
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
            {
                this.initFromVendTable_MX(vendInvoiceJour.InvoiceAccount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendInvoiceTrans</Name>
				<Source><![CDATA[
    void initFromVendInvoiceTrans(VendInvoiceTrans  vendInvoiceTrans)
    {
        //#ISOCountryRegionCodes
        this.ModuleType         = MarkupModuleType::Vend;
        this.TransTableId       = vendInvoiceTrans.TableId;
        this.TransRecId         = vendInvoiceTrans.RecId;
        this.CurrencyCode       = vendInvoiceTrans.CurrencyCode;

        if (TaxParameters::checkTaxParameters_IN())
        {
            this.TaxGroup       = '';
            this.TaxItemGroup   = '';
        }
        else
        {
            if (!TaxNotDefaultChargeAdjustmentTaxGroupForUseTaxFlighting::isEnabled())
            {
                this.TaxGroup       = this.TaxGroup     ? this.TaxGroup     : vendInvoiceTrans.TaxGroup;
                this.TaxItemGroup   = this.TaxItemGroup ? this.TaxItemGroup : vendInvoiceTrans.TaxItemGroup;
                this.OverrideSalesTax = this.OverrideSalesTax || vendInvoiceTrans.OverrideSalesTax;
            }

            if (!this.taxCombinationAllowed())
            {
                this.TaxItemGroup   = '';
            }
        }

        if (!this.WithholdingTypeCode_MX && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            this.WithholdingTypeCode_MX = vendInvoiceTrans.vendInvoiceTrans_W().WithholdingTypeCode_MX;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTable_MX</Name>
				<Source><![CDATA[
    private void initFromVendTable_MX(VendAccount _vendAccount)
    {
        if (!this.WithholdingTypeCode_MX)
        {
            MarkupTable markupTable = this.markupTable();

            if (markupTable.CustType == MarkupType::CustVend || markupTable.VendType == MarkupType::CustVend)
            {
                this.WithholdingTypeCode_MX = VendTable::find(_vendAccount).WithholdingTypeCode_MX;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines markup module type based on a table ID.
    /// </summary>
    /// <param name="callerTableId">
    /// A table id to determine the module type for.
    /// </param>
    /// <returns>
    /// Markup module type.
    /// </returns>
    /// <remarks>
    /// The <c>ModuleInventCustVend</c> enum was replaced with a more specific enum for markup functionality, use the <c>MarkupModuleType</c> enum.
    /// </remarks>
    MarkupModuleType initModuleType(TableId callerTableId)
    {
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        boolean countryRegion_IN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);

        switch (callerTableId)
        {
            case tableNum(CustInvoiceJour)      :
            case tableNum(CustInvoiceTrans)     :
                if (countryRegion_RU)
                {
                    return MarkupModuleType::Cust;
                }
                break;
            case tableNum(CustomsExportAssessableValue_IN)      :
            case tableNum(CustomsExportOrderLine_IN)            :
                if (countryRegion_IN)
                {
                    return MarkupModuleType::Cust;
                }
                break;
            case tableNum(WHSLoadTable)         :
            case tableNum(WHSLoadLine)          :
            case tableNum(SalesTable)           :
            case tableNum(SalesLine)            :
            case tableNum(CustInvoiceTable)     :
            case tableNum(SalesBasket)          :
            case tableNum(SalesQuotationTable)  :
            case tableNum(SalesQuotationLine)   :
            case tableNum(SalesBasketLine)      :
                return MarkupModuleType::Cust;

            case tableNum(PurchTable)           :
            case tableNum(PurchLine)            :
            case tableNum(PurchRFQCaseTable)    :
            case tableNum(PurchRFQCaseLine)     :
            case tableNum(PurchRFQTable)        :
            case tableNum(PurchRFQLine)         :
            case tableNum(PurchReqLine)         :
            case tableNum(PurchReqLineHistory)  :
            case tableNum(VendInvoiceInfoTable) :
            case tableNum(VendInvoiceInfoSubTable):
            case tableNum(VendInvoiceInfoLine)  :
            case tableNum(VendInvoiceJour)      :
            case tableNum(VendInvoiceTrans)     :
            case tableNum(PurchParmTable)       :
            case tableNum(PurchParmLine)        :
            case tableNum(VendPackingSlipJour)  :
            case tableNum(VendPackingSlipTrans) :
            case tableNum(VendRFQJour)          :
            case tableNum(VendRFQTrans)         :
                return MarkupModuleType::Vend;

            default:
                if (callerTableId == tableNum(CustInvoiceLine) && SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
                {
                    return MarkupModuleType::Cust;
                }
        }

        return MarkupModuleType::Invent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void initValue()
    {
        super();

        this.CurrencyCode   = CompanyInfoHelper::standardCurrency();
        this.LineNum        = MarkupTrans::lastLineNum(this.TransTableId, this.TransRecId) + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>SourceDocumentLine</c> record.
    /// </summary>
    /// <param name="_targetAccountingStatus">
    /// The desired <c>SourceDocumentLineAccountingStatus</c>; optional.
    /// </param>
    public void insert(SourceDocumentLineAccountingStatus _targetAccountingStatus = SourceDocumentLineAccountingStatus::None)
    {
        InterCompanyMarkup      interCompanyMarkup;
        PurchTable              purchTable;
        PurchLine               purchLine;
        SalesTable              salesTable;
        CustInvoiceJour         custInvoiceJour;
        CustInvoiceTrans        custInvoiceTrans;
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        MarkupTrans             intercompanyMarkupTrans;
        boolean                 isInterCompanyOrder;
        boolean                 isInterCompanyVirtualCharge = false;

        if (this.isEditingBlockedByVendorInvoice())
        {
            throw error("@SYS327634");
        }

        MarkupInstrumentationLogger markupInstrumentationLogger = MarkupTrans::instrumentationLogger();
        MarkupInstrumentationActivities chargeActivities = markupInstrumentationLogger.chargeActivities();

        using (var activityContext = chargeActivities.insert(this))
        {
            try
            {
                ttsbegin;

                switch (this.TransTableId)
                {
                    case tableNum(PurchTable) :
                        purchTable = PurchTable::findRecId(this.TransRecId, true);
                        break;
                    case tableNum(PurchLine) :
                        purchTable = PurchLine::findRecId(this.TransRecId).purchTable(true);
                        break;
                }

                if (purchTable)
                {
                    isInterCompanyVirtualCharge = this.isIntercompanyVirtualCharge();

                    if (!isInterCompanyVirtualCharge)
                    {
                        VersioningPurchaseOrder::newPurchaseOrder(purchTable).change(this, null);
                    }
                }

                this.IsModified = NoYes::Yes;

                chargeActivities.logMarkupTrans(activityContext, this);
                
                super();

                switch (this.TransTableId)
                {
                    case tableNum(PurchTable) :
                    case tableNum(PurchLine) :
                    case tableNum(CustInvoiceTable):
                    case tableNum(PurchReqLine) :
                        if (!isInterCompanyVirtualCharge)
                        {
                            SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this, true);
                        }
                        break;
                    case tableNum(VendInvoiceInfoTable):
                    case tableNum(VendInvoiceInfoLine):
                    case tableNum(VendInvoiceInfoSubTable):
                        if (prmisDefault(_targetAccountingStatus))
                        {
                            SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this, true);
                        }
                        else
                        {
                            SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this, true, _targetAccountingStatus);
                        }
                        // <GIN>
                        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && TaxParameters::checkTaxParameters_IN())
                        {
                            vendInvoiceInfoTable = VendInvoiceInfoLine::findRecId(this.TransRecId).vendInvoiceInfoTable();
                            TaxUncommitted::deleteForDocumentHeader(vendInvoiceInfoTable.TableId,vendInvoiceInfoTable.RecId, true, true);
                        }
                        // </GIN>

                        break;
                    // Do not clear the sourceDocumentLine reference for journals
                    // If the value is set the journal is from CustInvoiceTable which we want to preserve
                    case tableNum(CustInvoiceJour):
                    case tableNum(VendInvoiceJour):
                    case tableNum(VendInvoiceTrans):
                        break;
                    default:
                        if (SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
                        {
                            if (this.TransTableId == tableNum(CustInvoiceLine))
                            {
                                SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this, true);
                            }
                        }
                        else
                        {
                            this.SourceDocumentLine = 0;
                        }
                        break;
                }

                SalesLine salesLine;

                switch (this.TransTableId)
                {
                    case tableNum(CustInvoiceJour) :
                        custInvoiceJour = CustInvoiceJour::findRecId(this.TransRecId);
                        isInterCompanyOrder = (custInvoiceJour.InterCompanyCompanyId != '');
                        break;

                    case tableNum(CustInvoiceTrans) :
                        if (!this.InterCompanySkipUpdate)
                        {
                            // This can be relatively expensive, so only do when intercompany data will be checked
                            custInvoiceTrans = CustInvoiceTrans::findRecId(this.TransRecId);
                            isInterCompanyOrder = custInvoiceTrans.isInterCompany();
                        }
                        break;

                    case tableNum(PurchTable) :
                        isInterCompanyOrder = purchTable.isInterCompanyOrder();
                        if (!this.markupTypeItem()) // markups of item type need to be allocated down to the purchline.
                        {
                            if (purchTable.DocumentState == VersioningDocumentState::Confirmed)
                            {
                                //must create distributions for a change event
                                this.updateMarkupDistribution(purchTable);
                            }
                        }
                        if (this.TaxGroup && this.TaxItemGroup)
                        {
                            purchTable.type().deleteTaxUncommitted();
                        }
                        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                        {
                            PurchTotalsSummaryController::onInsert(this);
                        }
                        break;

                    case tableNum(PurchLine) :
                        isInterCompanyOrder = purchTable.isInterCompanyOrder();
                        if (purchTable.DocumentState == VersioningDocumentState::Confirmed)
                        {
                            //must create distributions for a change event
                            this.updateMarkupDistribution(purchTable);
                        }
                        if (this.TaxGroup && this.TaxItemGroup)
                        {
                            purchTable.type().deleteTaxUncommitted();

                            //If the taxgroup and item group exist, we want to flag the change and get the taxes to update.
                            purchLine = PurchLine::findRecId(this.TransRecId, true);
                            if (!SysTransactionScopeCache::isSet(classStr(AxPurchLine), [purchLine.TableId, purchLine.RecId, purchLine.RecVersion]))
                            {
                                purchLine.IsModified = NoYes::Yes;
                                purchLine.doUpdate();
                            }
                        }
                        break;

                    case tableNum(VendInvoiceInfoTable) :
                        if (this.needCalculateTaxForPurchase())
                        {
                            vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(this.TransRecId);
                            TaxUncommitted::deleteForDocumentHeader(vendInvoiceInfoTable.TableId,vendInvoiceInfoTable.RecId, true, true);
                        }
                        break;

                    case tableNum(VendInvoiceInfoLine) :
                        if (this.needCalculateTaxForPurchase())
                        {
                            vendInvoiceInfoTable = VendInvoiceInfoLine::findRecId(this.TransRecId).vendInvoiceInfoTable();
                            TaxUncommitted::deleteForDocumentHeader(vendInvoiceInfoTable.TableId,vendInvoiceInfoTable.RecId, true, true);
                        }
                        break;

                    case tableNum(VendInvoiceInfoSubTable) :
                        if (this.needCalculateTaxForPurchase())
                        {
                            vendInvoiceInfoTable = VendInvoiceInfoSubTable::findRecId(this.TransRecId).vendInvoiceInfoTable();
                            TaxUncommitted::deleteForDocumentHeader(vendInvoiceInfoTable.TableId,vendInvoiceInfoTable.RecId, true, true);
                        }
                        break;

                    case tableNum(SalesTable) :
                        salesTable = this.parentRecord();
                        isInterCompanyOrder = salesTable.isInterCompanyOrder();
                        if (this.needCalculateTaxForSales())
                        {
                            salesTable.type().deleteTaxUncommitted();
                        }
                        break;

                    case tableNum(SalesLine) :
                        salesLine  = this.parentRecord();
                        salesTable = salesLine.salesTable();
                        isInterCompanyOrder = salesTable.isInterCompanyOrder();
                        if (this.needCalculateTaxForSales())
                        {
                            salesTable.type().deleteTaxUncommitted();
                        }
                        break;

                    default:
                        break;
                }

                if (isInterCompanyOrder && !this.InterCompanySkipUpdate)
                {
                    interCompanyMarkup = InterCompanyMarkup::construct(InterCompanyMarkupAction::Calc,this);
                    interCompanyMarkup.run(true);
                    intercompanyMarkupTrans = interCompanyMarkup.parmMarkupTrans();
                    intercompanyMarkupTrans.InterCompanySkipUpdate = false;
                    intercompanyMarkupTrans.doUpdate();
                }

                // <GTE>
                if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled() && this.isFormDataSource())
                {
                    this.markCurrentTaxDocumentTaxStatusDirty();
                }
                // </GTE>

                ChargeOverrideHistory::setChargeOverrideHistoryMarkupTransRecId(this);

                if (TaxWithholdingGlobalFeature::isCalcWHTInInvoiceWithChargeEnabled())
                {
                    switch (this.TransTableId)
                    {
                        case tableNum(PurchTable), tableNum(PurchLine) :
                            purchTable.type().deleteTaxWithholdUncommitted();
                            break;

                        case tableNum(VendInvoiceInfoTable) :
                            if (!vendInvoiceInfoTable)
                            {
                                vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(this.TransRecId);
                            }
                            TaxWithholdUncommitted::deleteForDocumentHeader(vendInvoiceInfoTable.TableId, vendInvoiceInfoTable.RecId);
                            break;

                        case tableNum(VendInvoiceInfoLine) :
                            if (!vendInvoiceInfoTable)
                            {
                                vendInvoiceInfoTable = VendInvoiceInfoLine::findRecId(this.TransRecId).vendInvoiceInfoTable();
                            }
                            TaxWithholdUncommitted::deleteForDocumentHeader(vendInvoiceInfoTable.TableId, vendInvoiceInfoTable.RecId);
                            break;

                        case tableNum(VendInvoiceInfoSubTable) :
                            if (!vendInvoiceInfoTable)
                            {
                                vendInvoiceInfoTable = VendInvoiceInfoSubTable::findRecId(this.TransRecId).vendInvoiceInfoTable();
                            }
                            TaxWithholdUncommitted::deleteForDocumentHeader(vendInvoiceInfoTable.TableId, vendInvoiceInfoTable.RecId);
                            break;

                        default:
                            break;
                    }
                }
                ttscommit;
            }
            catch(Exception::Error)
            {
                this.SourceDocumentLine = 0;
                ttsabort;
                throw error("@SYS93835");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>needCalculateTaxForPurchase</Name>
				<Source><![CDATA[
    private boolean needCalculateTaxForPurchase()
    {
        return (this.TaxGroup && this.TaxItemGroup)
            || (Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Purchase)
                && !this.OverrideSalesTax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>needCalculateTaxForSales</Name>
				<Source><![CDATA[
    private boolean needCalculateTaxForSales()
    {
        if (TaxIntegrationCacheCalculationResultFlight::instance().isEnabled()
            && Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Sales))
        {
            return (this.TaxGroup && this.TaxItemGroup) || !this.OverrideSalesTax;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyCreateAllowed</Name>
				<Source><![CDATA[
    boolean  interCompanyCreateAllowed()
    {
        boolean     create = true;
        PurchTable  purchTable;
        PurchLine   purchLine;
        SalesTable  salesTable;
        SalesLine   salesLine;

        switch (this.TransTableId)
        {
            case(tableNum(PurchTable)):
                purchTable = this.parentRecord() as PurchTable;
                if (purchTable.InterCompanyOrder
                &&  purchTable.InterCompanySalesId
                &&  purchTable.interCompanyEndpointActionPolicy())
                {
                    create = purchTable.interCompanyEndpointActionPolicy().EditPrice;
                }
                break;

            case(tableNum(PurchLine)):
                purchLine = this.parentRecord() as PurchLine;
                if (purchLine.purchTable().InterCompanyOrder
                &&  purchLine.InterCompanyInventTransId
                &&  purchLine.purchTable().interCompanyEndpointActionPolicy())
                {
                    create = purchLine.purchTable().interCompanyEndpointActionPolicy().EditPrice;
                }
                break;

            case(tableNum(SalesTable)):
                salesTable = this.parentRecord() as SalesTable;
                if (salesTable.InterCompanyOrder
                &&  salesTable.InterCompanyPurchId
                &&  salesTable.interCompanyEndpointActionPolicy()
                   )
                {
                    create = salesTable.interCompanyEndpointActionPolicy().EditPrice;
                }
                break;

            case(tableNum(SalesLine)):
                salesLine = this.parentRecord() as SalesLine;
                if (salesLine.salesTable().InterCompanyOrder
                &&  salesLine.InterCompanyInventTransId
                &&  salesLine.salesTable().interCompanyEndpointActionPolicy())
                {
                    create = salesLine.salesTable().interCompanyEndpointActionPolicy().EditPrice;
                }
                break;
        }
        return create;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventMovement</Name>
				<Source><![CDATA[
    public InventMovement inventMovement()
    {
        InventMovement  inventMovement;

        CustQuotationTrans  custQuotationTrans;
        CustConfirmTrans    custConfirmTrans;
        CustInvoiceTrans    custInvoiceTrans;
        VendInvoiceTrans    vendInvoiceTrans;
        inventMovement = InventMovement::constructNoThrow(this.parentRecord());

        if (inventMovement)
        {
            return inventMovement;
        }

        switch (this.TransTableId)
        {
            case tableNum(CustQuotationTrans)   :
                custQuotationTrans = this.parentRecord() as CustQuotationTrans;
                inventMovement  = InventMovement::constructNoThrow(custQuotationTrans.salesLine());
                break;
            case tableNum(CustConfirmTrans)     :
                custConfirmTrans = this.parentRecord() as CustConfirmTrans;
                inventMovement  = InventMovement::constructNoThrow(custConfirmTrans.salesLine());
                break;
            case tableNum(CustInvoiceTrans)     :
                custInvoiceTrans = this.parentRecord() as CustInvoiceTrans;
                inventMovement  = InventMovement::constructNoThrow(custInvoiceTrans.salesLine());
                break;
            case tableNum(VendInvoiceTrans)     :
                vendInvoiceTrans = this.parentRecord() as VendInvoiceTrans;
                inventMovement  = InventMovement::constructNoThrow(vendInvoiceTrans.purchLine());
                break;
        }

        return inventMovement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventProfileType_RU</Name>
				<Source><![CDATA[
    InventProfileType_RU inventProfileType_RU()
    {
        InventProfileType_RU    inventProfileType;
        PurchLine               purchLine;
        PurchTable              purchTable;
        VendInvoiceJour         vendInvoiceJour;
        VendInvoiceTrans        vendInvoiceTrans;
        SalesLine               salesLine;
        SalesTable              salesTable;
        CustInvoiceJour         custInvoiceJour;
        CustInvoiceTrans        custInvoiceTrans;

        switch (this.TransTableId)
        {
            case tableNum(PurchLine):
                purchLine = this.parentRecord();
                inventProfileType = purchLine.inventDim().inventProfile_RU().InventProfileType;
                break;
            case tableNum(PurchTable):
                purchTable = this.parentRecord();
                inventProfileType = purchTable.purchTable_RU().InventProfileType_RU;
                break;
            case tableNum(VendInvoiceTrans):
                vendInvoiceTrans = this.parentRecord();
                inventProfileType = vendInvoiceTrans.inventDim().inventProfile_RU().InventProfileType;
                break;
            case tableNum(VendInvoiceJour):
                vendInvoiceJour = this.parentRecord();
                inventProfileType = vendInvoiceJour.InventProfileType_RU;
                break;
            case tableNum(SalesLine):
                salesLine = this.parentRecord();
                inventProfileType = salesLine.inventDim().inventProfile_RU().InventProfileType;
                break;
            case tableNum(SalesTable):
                salesTable = this.parentRecord();
                inventProfileType = salesTable.salesTable_RU().InventProfileType_RU;
                break;
            case tableNum(CustInvoiceTrans):
                custInvoiceTrans = this.parentRecord();
                inventProfileType = custInvoiceTrans.inventDim().inventProfile_RU().InventProfileType;
                break;
            case tableNum(CustInvoiceJour):
                custInvoiceJour = this.parentRecord();
                inventProfileType = custInvoiceJour.custInvoiceJour_RU().InventProfileType_RU;
                break;
        }

        if (inventProfileType == InventProfileType_RU::NotSpecified)
        {
            inventProfileType = InventProfileType_RU::General;
        }

        return inventProfileType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDistributionUpdateRequired</Name>
				<Source><![CDATA[
    private boolean isDistributionUpdateRequired(MarkupTrans _oldMarkUpTrans)
    {
        return (this.Value != _oldMarkUpTrans.Value ||
                this.CurrencyCode != _oldMarkUpTrans.CurrencyCode ||
                this.MarkupCategory != _oldMarkUpTrans.MarkupCategory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEditingBlockedByVendorInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if editing of the charge record is blocked by an association to an invoice matched purchase order.
    /// </summary>
    /// <returns>
    /// true if editing is blocked by an association to an invoice matched purchase order.
    /// </returns>
    public boolean isEditingBlockedByVendorInvoice()
    {
        if (this.MarkupCategory != MarkupCategory::Fixed)
        {
            return MarkupTrans::hasVendorInvoice(this.TransTableId, this.TransRecId);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useValueFromReferencedIntercompanyPercentPurchaseLineCharge</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean useValueFromReferencedIntercompanyPercentPurchaseLineCharge(MarkupTrans _referencedMarkupTrans)
    {
        return this.InterCompanyMarkupUseValue
            && this.MarkupCategory == MarkupCategory::Fixed
            && _referencedMarkupTrans.MarkupCategory == MarkupCategory::InterCompanyPercent
            && _referencedMarkupTrans.TransTableId == tableNum(PurchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInclTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether taxes are included in the miscellaneous charge.
    /// </summary>
    /// <param name="_markupTrans">
    ///    The <c>MarkupTrans</c> to test.
    /// </param>
    /// <returns>
    ///    true if taxes are included in the miscellaneous charge; otherwise false.
    /// </returns>
    /// <remarks>
    ///    A miscellaneous charge with a category of percent or intercompany percent never includes tax in the
    ///    miscellaneous charge.
    /// </remarks>
    public boolean isInclTax(MarkupTrans _markupTrans)
    {
        if (!(_markupTrans.TaxGroup && _markupTrans.TaxItemGroup) || Markup::isPercentageMarkup(_markupTrans))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMarkupOfTypeCustVend</Name>
				<Source><![CDATA[
    boolean isMarkupOfTypeCustVend()
    {
        return this.markupTable().isMarkupOfTypeCustVend();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMarkupSalesRelated</Name>
				<Source><![CDATA[
    boolean isMarkupSalesRelated()
    {
        return MarkupTrans::isMarkupTransSalesRelated(this.TransTableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPriceInclTax_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether Pric.incl tax is marked for particular Item group of this miscellaneous charge.
    /// </summary>
    /// <returns>
    /// Returns true or false based on Pric.incl tax is marked for particular Item group of this miscellaneous charge.
    /// </returns>
    public boolean isPriceInclTax_IN()
    {
        return MarkupTable_IN::isAllowTax(this.ModuleType, this.MarkupCode)
            && FormulaDesigner_IN::isPriceInclTaxOnLineAmount(this.TaxItemGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSiscomex_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the charge is SISCOMEX.
    /// </summary>
    /// <returns>
    /// Returns true if the carge is SISCOMEX; otherwise, false.
    /// </returns>
    public boolean isSiscomex_BR()
    {
        MarkupTable markupTable;

        markupTable = MarkupTable::find(this.ModuleType, this.MarkupCode);

        if (markupTable.MarkupClassification_BR == MarkupClassification_BR::SISCOMEX)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerAccountAmount</Name>
				<Source><![CDATA[
    AmountCur ledgerAccountAmount(AmountCur _amountCur)
    {
        AmountCur ledgerAccountAmount;

        if (this.markupTable().CustType == MarkupType::LedgerAccount)
        {
            ledgerAccountAmount += _amountCur;
        }

        if (this.markupTable().VendType == MarkupType::LedgerAccount)
        {
            ledgerAccountAmount -= _amountCur;
        }

        return ledgerAccountAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupCustTypeItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies whether the <c>CustType</c> field in the <c>MarkupTable</c> table buffer has a value set
    /// to Item.
    /// </summary>
    /// <returns>
    /// true if the <c>CustType</c> field has a value of Item; otherwise, false.
    /// </returns>
    public boolean markupCustTypeItem()
    {
        boolean ret = false;

        if (this.markupTable().CustType == MarkupType::Item)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTable</Name>
				<Source><![CDATA[
    MarkupTable markupTable(boolean  _forUpdate = false)
    {
        MarkupTable markupTable;
        if (this.company() != curext())
        {
            changecompany(this.company())
            {
                markupTable = MarkupTable::find(this.ModuleType, this.MarkupCode, _forUpdate);
            }
        }
        else
        {
            markupTable = MarkupTable::find(this.ModuleType, this.MarkupCode, _forUpdate);
        }

        return markupTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markCurrentTaxDocumentTaxStatusDirty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Mark current tax status of taxdocument which <c> markupTrans </c> attached to dirty.
    /// </summary>
    public void markCurrentTaxDocumentTaxStatusDirty()
    {
        ITaxableDocument                taxableDocument;
        TaxableDocumentDescriptor       descriptor;
        TaxEngineProjItemSOTransHeader  taxEngineProjItemSOTransHeader;
        ProjProposalItem                projProposalItem;
        SalesLine                       salesLine;
        SalesPurchJournalLine           salesPurchJournalLine = SalesPurchJournalLine::findRecId(this.TransTableId, this.TransRecId);
        Common                          buffer;

        // charges added on purchase/sales invoice journal should not mark posted tax document to be dirty
        if (this.TransTableId != tablenum(VendInvoiceTrans)
            && this.TransTableId != tableNum(CustInvoiceTrans)
            // No taxDocument on vend packing slip journal.
            && this.TransTableId != tableNum(VendPackingSlipTrans)
            && salesPurchJournalLine)
        {
            buffer = salesPurchJournalLine.salesPurchJournalTable();
        }

        if (buffer)
        {
            descriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(buffer);
            taxableDocument = TaxableDocumentObject::construct(descriptor);

            if (taxableDocument)
            {
                TaxBusinessService::markTaxDocumentTaxStatus(taxableDocument, TaxDocumentCalculationLevel::Dirty);
            }
            else if (this.TransTableId == tableNum(SalesLine))
            {
                salesLine = SalesLine::findRecId(this.TransRecId);

                if (salesLine.ProjId)
                {
                    projProposalItem = projProposalItem::findInvent(salesLine.InventTransId);

                    if (projProposalItem)
                    {
                        taxEngineProjItemSOTransHeader  = taxEngineProjItemSOTransHeader::findByProjProposalJour(projProposalJour::find(projProposalItem.ProposalId));
                        descriptor                      = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(taxEngineProjItemSOTransHeader);
                        taxableDocument                 = TaxableDocumentObject::construct(descriptor);

                        TaxBusinessService::markTaxDocumentTaxStatus(taxableDocument, TaxDocumentCalculationLevel::Dirty);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTrans_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>MarkupTrans_IN</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>MarkupTrans_IN</c> record associated with the current record.
    /// </returns>
    public MarkupTrans_IN markupTrans_IN()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(MarkupTrans_IN));
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTypeCustVend_W</Name>
				<Source><![CDATA[
    boolean  markupTypeCustVend_W()
    {
        return this.markupTable().markupTypeCustVend_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTypeItem</Name>
				<Source><![CDATA[
    boolean  markupTypeItem()
    {
        return this.markupTable().markupTypeItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayLineItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the item id on a sales order line record.
    /// </summary>
    /// <returns>
    /// The item id on a sales order line if the table id points to a sales order line record; Otherwise, blank.
    /// </returns>
    display ItemId mcrDisplayLineItem()
    {
        if (this.TransTableId == tableNum(SalesLine))
        {
            return SalesLine::findRecId(this.TransRecId).ItemId;
        }

        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrIsProRated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether the misc charge is pro-rated.
    /// </summary>
    /// <returns>
    /// True if misc charge is for SalesTable or SalesLine and is pro-rated
    /// </returns>
    /// <remarks>
    /// Misc charges for all other tables are not pro-rated even if the misc charge code
    /// indicates that it's pro-rated.
    /// </remarks>
    boolean mcrIsProRated()
    {
        return ((this.TransTableId == tableNum(SalesTable)
                    || this.TransTableId == tableNum(SalesLine))
                && MarkupTable::find(this.ModuleType, this.MarkupCode).mcrProRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(MarkupTrans, MarkupCode):
                this.initFromMarkupTable(this.markupTable());
                break;

            case fieldNum(MarkupTrans, MarkupCategory):
                if (this.restrictKeep())
                {
                    this.Keep = this.MarkupCategory != MarkupCategory::Fixed;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modify a specified field.
    /// </summary>
    /// <param name="_fieldName">
    /// The field Name of the field to modify.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field.
    /// </param>
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean isMiscChargeEnabled = LedgerParameters::isMiscellaneouscharges_IN();

        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(MarkupTrans, MarkupCode):

                if (isMiscChargeEnabled)
                {
                    this.NotionalCharges_IN     = NoYes::No;
                    this.NotionalPct_IN         = 0;
                }
                break;

            case fieldStr(MarkupTrans, MarkupCategory):
                if (isMiscChargeEnabled)
                {
                    this.NotionalCharges_IN     = NoYes::No;
                    this.NotionalPct_IN         = 0;
                }
                break;

            case fieldStr(MarkupAutoLine, CurrencyCode):
                if (isMiscChargeEnabled)
                {
                    this.NotionalCharges_IN     = NoYes::No;
                    this.NotionalPct_IN         = 0;
                }
                break;

            case(fieldStr(MarkupTrans, Value)) :
                if (isMiscChargeEnabled
                    && this.Value != this.orig().Value)
                {
                    // Suppress this message while charge on BOE feature is enabled.
                    if (this.TransTableId == tableNum(PurchParmLine)
                        && !TaxIntegrationUtils::isChargeOnBOEEnabled())
                    {
                        // Assessable value has been recalculated.
                        info("@GLS6626");
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packMarkupTrans_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the markup trans information.
    /// </summary>
    /// <param name="_markupTransIN">
    /// The markup trans reference.
    /// </param>
    public void packMarkupTrans_IN(MarkupTrans_IN _markupTransIN)
    {
        _markupTransIN.MarkupTrans = this.RecId;

        this.SysExtensionSerializerMap::packExtensionTable(_markupTransIN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code for the parent record related to the miscellaneous charges transaction.
    /// </summary>
    /// <returns>
    /// The currency code for the parent record.
    /// </returns>
    public CurrencyCode parentCurrencyCode()
    {
        CurrencyCodeMap parentRecord;

        switch (this.TransTableId)
        {
            case tableNum(VendInvoiceInfoSubTable):
                parentRecord = VendInvoiceInfoSubTable::findRecId(this.TransRecId).vendInvoiceInfoTable();
                break;
            case tableNum(VendPackingSlipTrans):
                parentRecord = VendPackingSlipTrans::findRecId(this.TransRecId).purchLine();
                break;
            case tableNum(PurchParmLine):
                parentRecord = PurchParmLine::findRecId(this.TransRecId).purchLine();
                break;
            default:
                if (this.TransTableId == tableNum(CustInvoiceLine) && SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
                {
                    parentRecord = CustInvoiceLine::find(this.TransRecId).custInvoiceTable();
                }
                else
                {
                    parentRecord = this.parentRecord();
                }
                break;
        }
        return parentRecord.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentRecord</Name>
				<Source><![CDATA[
    public Common parentRecord()
    {
        switch (this.TransTableId)
        {
            case tableNum(SalesTable)           :
                return SalesTable::findRecId(this.TransRecId);
            case tableNum(SalesLine)            :
                return SalesLine::findRecId(this.TransRecId);
            case tableNum(CustInvoiceTable)     :
                return CustInvoiceTable::findRecId(this.TransRecId);
            case tableNum(CustQuotationJour)    :
                return CustQuotationJour::findRecId(this.TransRecId);
            case tableNum(CustQuotationTrans)   :
                return CustQuotationTrans::findRecId(this.TransRecId);
            case tableNum(CustConfirmJour)      :
                return CustConfirmJour::findRecId(this.TransRecId);
            case tableNum(CustConfirmTrans)     :
                return CustConfirmTrans::findRecId(this.TransRecId);
            case tableNum(CustInvoiceJour)      :
                return CustInvoiceJour::findRecId(this.TransRecId);
            case tableNum(CustInvoiceTrans)     :
                return CustInvoiceTrans::findRecId(this.TransRecId);
            case tableNum(SalesBasket)          :
                return SalesBasket::findRecId(this.TransRecId);
            case tableNum(SalesBasketLine)      :
                return SalesBasketLine::findRecId(this.TransRecId);
            case tableNum(PurchTable)           :
                return PurchTable::findRecId(this.TransRecId);
            case tableNum(PurchLine)            :
                return PurchLine::findRecId(this.TransRecId);
            case tableNum(PurchReqLine)         :
                return PurchReqLine::find(this.TransRecId);
            case tableNum(PurchReqLineHistory)         :
                return PurchReqLineHistory::find(this.TransRecId);
            case tableNum(VendInvoiceJour)      :
                return VendInvoiceJour::findRecId(this.TransRecId);
            case tableNum(VendInvoiceTrans)     :
                return VendInvoiceTrans::findRecId(this.TransRecId);
            case tableNum(PurchRFQCaseTable)    :
                return PurchRFQCaseTable::findRecId(this.TransRecId);
            case tableNum(PurchRFQCaseLine)    :
                return PurchRFQCaseLine::findRecId(this.TransRecId);
            case tableNum(PurchRFQReplyTable)    :
                return PurchRFQReplyTable::findRecId(this.TransRecId);
            case tableNum(PurchRFQReplyLine)    :
                return PurchRFQReplyLine::findRecId(this.TransRecId);
            case tableNum(PurchRFQTable)    :
                return PurchRFQTable::findRecId(this.TransRecId);
            case tableNum(PurchRFQLine)    :
                return PurchRFQLine::findRecId(this.TransRecId);
            case tableNum(VendInvoiceInfoTable)       :
                return VendInvoiceInfoTable::findRecId(this.TransRecId);
            case tableNum(VendInvoiceInfoSubTable)    :
                return VendInvoiceInfoSubTable::findRecId(this.TransRecId);
            case tableNum(VendInvoiceInfoLine)    :
                return VendInvoiceInfoLine::findRecId(this.TransRecId);
            case tableNum(SalesQuotationTable)  :
                return SalesQuotationTable::findRec(this.TransRecId);
            case tableNum(SalesQuotationLine)  :
                return SalesQuotationLine::findRecId(this.TransRecId);
            default:
                if (this.TransTableId == tableNum(CustInvoiceLine) && SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
                {
                    return CustInvoiceLine::find(this.TransRecId);
                }
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRateDate</Name>
				<Source><![CDATA[
    public AccountingDate parmExchangeRateDate()
    {
        SourceDocumentLineImplementation   sourceDocumentLineImplementation;
        DictTable               dictTable;
        AccountingDate          exchangeRateDate;
        VendInvoiceInfoTable    vendInvoiceInfoTable;

        if (this.TransTableId == tableNum(VendInvoiceInfoSubTable))
        {
            // MarkupTrans attached to VendInvoiceInfoSubTable need to retrieve the ExchangeRateDate from VendInvoiceInfoTable
            vendInvoiceInfoTable = VendInvoiceInfoSubTable::findRecId(this.TransRecId).vendInvoiceInfoTable();
            sourceDocumentLineImplementation = vendInvoiceInfoTable;
            exchangeRateDate = sourceDocumentLineImplementation.parmExchangeRateDate();
        }
        else
        {
            if (SysDictTable::isTableMapped(tableNum(SourceDocumentLineImplementation), this.TransTableId))
            {
                dictTable = new DictTable(this.TransTableId);
                sourceDocumentLineImplementation = dictTable.makeRecord();

                select firstonly RecId from sourceDocumentLineImplementation
                where sourceDocumentLineImplementation.RecId == this.TransRecId;

                exchangeRateDate = sourceDocumentLineImplementation.parmExchangeRateDate();
            }
        }

        return exchangeRateDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceDocumentLine</Name>
				<Source><![CDATA[
    public SourceDocumentLine parmParentSourceDocumentLine()
    {
        PurchLine                   purchLine;
        PurchReqLine                purchReqLine;
        VendInvoiceInfoLine         vendInvoiceInfoLine;
        SourceDocumentLine          parentSourceDocumentLine;
        VendInvoiceTrans            vendInvoiceTrans;
        CustInvoiceLine             custInvoiceLine;
        CustInvoiceTrans            custInvoiceTrans;

        switch (this.TransTableId)
        {
            case tableNum(PurchLine):
                purchLine = PurchLine::findRecId(this.TransRecId);
                parentSourceDocumentLine = SourceDocumentLine::find(purchLine.SourceDocumentLine);
                break;

            case tableNum(PurchReqLine):
                purchReqLine = PurchReqLine::find(this.TransRecId);
                parentSourceDocumentLine = SourceDocumentLine::find(purchReqLine.SourceDocumentLine);
                break;

            case tableNum(VendInvoiceInfoLine):
                vendInvoiceInfoLine = VendInvoiceInfoLine::findRecId(this.TransRecId);
                parentSourceDocumentLine = SourceDocumentLine::find(vendInvoiceInfoLine.SourceDocumentLine);
                break;

            case tableNum(VendInvoiceTrans):
                vendInvoiceTrans = VendInvoiceTrans::findRecId(this.TransRecId);
                parentSourceDocumentLine = SourceDocumentLine::find(vendInvoiceTrans.SourceDocumentLine);
                break;
            default:
                if (SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
                {
                    if (this.TransTableId == tableNum(CustInvoiceLine))
                    {
                        custInvoiceLine = CustInvoiceLine::find(this.TransRecId);
                        parentSourceDocumentLine = SourceDocumentLine::find(custInvoiceLine.SourceDocumentLine);
                    }
                    else if (this.TransTableId == tableNum(CustInvoiceTrans))
                    {
                        custInvoiceTrans = CustInvoiceTrans::findRecId(this.TransRecId);
                        parentSourceDocumentLine = SourceDocumentLine::find(custInvoiceTrans.SourceDocumentLine);
                    }
                }
        }

        return parentSourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumName</Name>
				<Source><![CDATA[
    public EnumName parmSourceDocLineTypeEnumName()
    {
        EnumName lineTypeEnum;
        switch (this.TransTableId)
        {
            case tableNum(CustInvoiceTable):
            case tableNum(CustInvoiceJour):
            case tableNum(CustInvoiceTrans):
                lineTypeEnum =  enumStr(SourceDocumentLine_CustomerInvoice);
                break;

            case tableNum(CustomsImportAssessableValue_IN):
            case tableNum(PurchLine):
            case tableNum(PurchTable):
                lineTypeEnum =  enumStr(SourceDocumentLine_ProductOrder);
                break;

            case tableNum(PurchReqLine):
                lineTypeEnum = enumStr(SourceDocumentLine_ProductRequisition);
                break;

            case tableNum(VendInvoiceInfoTable):
            case tableNum(VendInvoiceInfoSubTable):
            case tableNum(VendInvoiceInfoLine):
            case tableNum(VendInvoiceJour):
            case tableNum(VendInvoiceTrans):
                lineTypeEnum = enumStr(SourceDocumentLine_VendorInvoice);
                break;

            default:
                if (this.TransTableId == tableNum(CustInvoiceLine) && SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
                {
                    lineTypeEnum =  enumStr(SourceDocumentLine_CustomerInvoice);
                }
                else
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }
        }

        return lineTypeEnum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumValue</Name>
				<Source><![CDATA[
    public SourceDocumentTypeEnumValue parmSourceDocLineTypeEnumValue()
    {
        SourceDocumentTypeEnumValue sourceDocumentTypeEnumValue;
        MarkupTrans markupTrans;

        switch (this.TransTableId)
        {
            case tableNum(CustInvoiceTable):
            case tableNum(CustInvoiceJour):
            case tableNum(CustInvoiceTrans):
                sourceDocumentTypeEnumValue = SourceDocumentLine_CustomerInvoice::CustomerInvoiceChargeLine;
                break;

            case tableNum(CustomsImportAssessableValue_IN):
            case tableNum(PurchLine):
                sourceDocumentTypeEnumValue = SourceDocumentLine_ProductOrder::PurchaseOrderChargeLine;
                break;

            case tableNum(PurchTable):
                sourceDocumentTypeEnumValue = SourceDocumentLine_ProductOrder::PurchaseOrderTotalsChargeLine;
                break;

            case tableNum(PurchReqLine) :
                sourceDocumentTypeEnumValue = SourceDocumentLine_ProductRequisition::PurchaseRequisitionChargeLine;
                break;

            case tableNum(VendPackingSlipTrans) :
                sourceDocumentTypeEnumValue = SourceDocumentLine_ProductReceipt::ProductReceiptTaxLine;
                break;

            case tableNum(VendInvoiceInfoTable) :
            case tableNum(VendInvoiceInfoSubTable) :
            case tableNum(VendInvoiceJour) :
                sourceDocumentTypeEnumValue = SourceDocumentLine_VendorInvoice::VendorInvoiceTotalsChargeLine;
                break;

            case tableNum(VendInvoiceInfoLine) :
            case tableNum(VendInvoiceTrans) :
                sourceDocumentTypeEnumValue = SourceDocumentLine_VendorInvoice::VendorInvoiceChargeLine;
                break;

            case tableNum(MarkupTrans) :
                markupTrans = MarkupTrans::findRecId(this.TransRecId);
                switch (markupTrans.TransTableId)
                {
                    case tableNum(PurchLine) :
                        sourceDocumentTypeEnumValue = SourceDocumentLine_ProductOrder::PurchaseOrderChargeLine;
                        break;

                    case tableNum(PurchTable) :
                        sourceDocumentTypeEnumValue = SourceDocumentLine_ProductOrder::PurchaseOrderChargeLine;
                        break;

                    case tableNum(PurchReqLine) :
                        sourceDocumentTypeEnumValue = SourceDocumentLine_ProductRequisition::PurchaseRequisitionChargeLine;
                        break;

                    case tableNum(VendInvoiceInfoTable) :
                    case tableNum(VendInvoiceInfoSubTable) :
                    case tableNum(VendInvoiceJour) :
                        sourceDocumentTypeEnumValue = SourceDocumentLine_VendorInvoice::VendorInvoiceTotalsChargeLine;
                        break;

                    case tableNum(VendInvoiceInfoLine) :
                    case tableNum(VendInvoiceTrans) :
                        sourceDocumentTypeEnumValue = SourceDocumentLine_VendorInvoice::VendorInvoiceChargeLine;
                        break;
                }
                break;

            default:
                if (this.TransTableId == tableNum(CustInvoiceLine) && SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
                {
                    sourceDocumentTypeEnumValue = SourceDocumentLine_CustomerInvoice::CustomerInvoiceLineChargeLine;
                }
                else
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }
        }

        return sourceDocumentTypeEnumValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeader</Name>
				<Source><![CDATA[
    public SourceDocumentHeader parmSourceDocumentHeader()
    {
        SourceDocumentLineImplementation   sourceDocumentLineImplementation;
        SourceDocumentHeaderImplementation sourceDocumentHeaderImplementation;
        DictTable               dictTable;
        Common                  sourceRecord;
        SourceDocumentHeader    sourceDocumentHeader;
        SourceDocumentLine      sourceDocumentLine;
        CustInvoiceTable        custInvoiceTable;
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;

        if (SysDictTable::isTableMapped(tableNum(SourceDocumentLineImplementation), this.TransTableId))
        {
            switch (this.TransTableId)
            {
                // Markups for customer invoices are only on the header and not the line level.
                // The default section finds the header through the document line which doesn't apply for customer invoices.
                case tableNum(CustInvoiceTable):
                    custInvoiceTable = CustInvoiceTable::findRecId(this.TransRecId);
                    sourceDocumentHeader = SourceDocumentHeader::find(custInvoiceTable.SourceDocumentHeader);
                    break;

                default:
                    dictTable = new DictTable(this.TransTableId);
                    sourceRecord = dictTable.makeRecord();

                    select firstonly sourceRecord
                        where sourceRecord.RecId == this.TransRecId;

                    if (SysDictTable::isTableMapped(tableNum(SourceDocumentHeaderImplementation), this.TransTableId))
                    {
                        sourceDocumentHeaderImplementation = sourceRecord;
                        sourceDocumentHeader = SourceDocumentHeader::find(sourceDocumentHeaderImplementation.SourceDocumentHeader);
                    }
                    else
                    {
                        sourceDocumentLineImplementation = sourceRecord;
                        sourceDocumentLine = SourceDocumentLine::find(sourceDocumentLineImplementation.SourceDocumentLine);
                        sourceDocumentHeader = SourceDocumentHeader::find(sourceDocumentLine.SourceDocumentHeader);
                    }
            }
        }

        if (this.TransTableId == tableNum(VendInvoiceInfoSubTable)) //VIIST is not a SourceDocumentLine
        {
            vendInvoiceInfoSubTable = VendInvoiceInfoSubTable::findRecId(this.TransRecId);
            vendInvoiceInfoTable = vendInvoiceInfoSubTable.vendInvoiceInfoTable();
            sourceDocumentHeader = SourceDocumentHeader::find(vendInvoiceInfoTable.SourceDocumentHeader);
        }

        return sourceDocumentHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOverrideSalesTaxFromParentRecord</Name>
				<Source><![CDATA[
    private static NoYes getOverrideSalesTaxFromParentRecord(MarkupTransRefTableId _tableId, MarkupTransRefRecId _refRecId)
    {
        NoYes result;

        if (Global::mappingExists(tableNum(SalesPurchJournalLine), _tableId, fieldNum(SalesPurchJournalLine, OverrideSalesTax)))
        {
            result = SalesPurchJournalLine::findRecId(_tableId, _refRecId).OverrideSalesTax;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingProfile_RU</Name>
				<Source><![CDATA[
    PostingProfile postingProfile_RU()
    {
        PostingProfile          postingProfile;
        PurchLine               purchLine;
        PurchLine_W             purchLine_W;
        PurchTable              purchTable;
        VendInvoiceJour         vendInvoiceJour;
        VendInvoiceTrans        vendInvoiceTrans;
        SalesLine               salesLine;
        SalesTable              salesTable;
        CustInvoiceJour         custInvoiceJour;
        CustInvoiceTrans        custInvoiceTrans;
        switch (this.TransTableId)
        {
            case tableNum(PurchLine):
                purchLine = this.parentRecord();
                purchLine_W = purchLine.purchLine_W();
                postingProfile = purchLine_W.PostingProfile_RU ? purchLine_W.PostingProfile_RU : purchLine.purchTable().PostingProfile;
                break;
            case tableNum(PurchTable):
                purchTable = this.parentRecord();
                postingProfile = purchTable.PostingProfile;
                break;
            case tableNum(VendInvoiceTrans):
                vendInvoiceTrans = this.parentRecord();
                postingProfile = vendInvoiceTrans.vendInvoiceJour().PostingProfile;
                break;
            case tableNum(VendInvoiceJour):
                vendInvoiceJour = this.parentRecord();
                postingProfile = vendInvoiceJour.PostingProfile;
                break;
            case tableNum(SalesLine):
                salesLine = this.parentRecord();
                postingProfile = salesLine.PostingProfile_RU ? salesLine.PostingProfile_RU : salesLine.salesTable().PostingProfile;
                break;
            case tableNum(SalesTable):
                salesTable = this.parentRecord();
                postingProfile = salesTable.PostingProfile;
                break;
            case tableNum(CustInvoiceTrans):
                custInvoiceTrans = this.parentRecord();
                postingProfile = custInvoiceTrans.custInvoiceJour().PostingProfile;
                break;
            case tableNum(CustInvoiceJour):
                custInvoiceJour = this.parentRecord();
                postingProfile = custInvoiceJour.PostingProfile;
                break;
        }
        return postingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>restrictKeep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>Keep</c> field is restricted or can be set freely.
    /// </summary>
    /// <returns>true if the <c>Keep</c> field is restricted; otherwise, false.
    /// </returns>
    protected boolean restrictKeep()
    {
        if (this.ModuleType == MarkupModuleType::Vend)
        {
            return true;
        }

        switch (this.TransTableId)
        {
            case tableNum(SalesTable):
                SalesTable salesTable = this.parentRecord() as SalesTable;

                return salesTable.isInterCompanyOrder() ||
                       RetailMCRChannelTable::findChannelBySalesTable(salesTable).mcrEnableOrderCompletion;

            case tableNum(SalesLine):
                SalesLine salesLine = this.parentRecord() as SalesLine;

                return salesLine.isInterCompanyOrder() ||
                       RetailMCRChannelTable::findChannelBySalesTable(SalesTable::find(salesLine.SalesId)).mcrEnableOrderCompletion;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrencyCode_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the charge currency as the company currency when it is a SISCOMEX charge.
    /// </summary>
    /// <returns>
    /// Returns true if the currency has been set; otherwise, false.
    /// </returns>
    public boolean setCurrencyCode_BR()
    {
        if (this.isSiscomex_BR())
        {
            this.CurrencyCode   = CompanyInfoHelper::standardCurrency();
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>signedValue</Name>
				<Source><![CDATA[
    AmountCur signedValue(AmountCur _amountCur)
    {
        AmountCur signedValue;

        if (this.isMarkupSalesRelated())
        {
            if (this.markupTable().CustType == MarkupType::CustVend)
            {
                signedValue = _amountCur;
            }
            else
            {
                signedValue = -_amountCur;
            }
        }
        else
        {
            if (this.markupTable().VendType == MarkupType::CustVend)
            {
                signedValue = _amountCur;
            }
            else
            {
                if (this.markupTable().CustType == MarkupType::Item)
                {
                    signedValue = _amountCur;
                }
                else
                {
                    signedValue = -_amountCur;
                }
            }
        }

        return signedValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCombinationAllowed</Name>
				<Source><![CDATA[
    boolean taxCombinationAllowed()
    {
        if (!this.TaxGroup || !this.TaxItemGroup)
        {
            return true;
        }

        MarkupTable markupTable = this.markupTable();

        if (markupTable.CustType == MarkupType::CustVend || markupTable.VendType == MarkupType::CustVend)
        {
            return true;
        }

        if (markupTable.CustType == MarkupType::LedgerAccount && markupTable.VendType == MarkupType::LedgerAccount)
        {
            return false;
        }

        return !Tax::potentialSalesTax(this.TaxGroup, this.TaxItemGroup, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), this.taxModuleType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines a tax model type for the current instance of the markup transaction.
    /// </summary>
    /// <returns>A tax model type.</returns>
    [Replaceable]
    public TaxModuleType taxModuleType()
    {
        TaxModuleType taxModuleType;

        switch (this.ModuleType)
        {
            case MarkupModuleType::Delivery:
            case MarkupModuleType::Cust:
                taxModuleType = TaxModuleType::Sales;
                break;
            case MarkupModuleType::Vend:
                taxModuleType = TaxModuleType::Purch;
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return taxModuleType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxRecalculationNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether tax should be recalculated due to fields change of markupTrans
    /// </summary>
    /// <param name="_originalMarkupTrans">
    /// The original <c> markupTrans </c> record
    /// </param>
    /// <returns>
    /// True if current line tax should be recalculated, otherwise false
    /// </returns>
    private boolean taxRecalculationNeeded(Common _originalMarkupTrans = this.orig())
    {
        MarkupTrans markupTrans_Org = _originalMarkupTrans;

        return (this.MarkupCode       != markupTrans_Org.MarkupCode) ||
           (this.MarkupCategory   != markupTrans_Org.MarkupCategory) ||
           (this.Value            != markupTrans_Org.Value) ||
           (this.CurrencyCode     != markupTrans_Org.CurrencyCode) ||
           (this.TransDate        != markupTrans_Org.TransDate) ||
           (this.Posted           != markupTrans_Org.Posted) ||
           (this.CalculatedAmount != markupTrans_Org.CalculatedAmount) ||
           (this.CustomsAssessableValue_IN != markupTrans_Org.CustomsAssessableValue_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsInitFromInventTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assign field values based on the Transfer Order line.
    /// </summary>
    /// <param name="_inventTransferLine">
    /// The Transfer Order line record.
    /// </param>
    public void tmsInitFromInventTransferLine(InventTransferLine _inventTransferLine)
    {
        this.ModuleType         = MarkupModuleType::Invent;
        this.TransTableId       = _inventTransferLine.TableId;
        this.TransRecId         = _inventTransferLine.RecId;
        if (!this.taxCombinationAllowed())
        {
            this.TaxItemGroup   = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferCharges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfer charges from one reference (source) to another (target).
    /// </summary>
    /// <param name="source">
    /// The source record used to lookup charges which will be transfered.
    /// </param>
    /// <param name="target">
    /// The target record the charges will be transfered to.
    /// </param>
    public static void transferCharges(Common source, Common target)
    {
        MarkupTrans markupTrans;

        while select forupdate markupTrans
            where markupTrans.TransTableId == source.TableId
                  && markupTrans.TransRecId  == source.RecId
        {
            markupTrans.TransTableId = target.TableId;
            markupTrans.TransRecId   = target.RecId;
            markupTrans.LineNum      = MarkupTrans::lastLineNum(target.TableId, target.RecId) + 1;
            markupTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the strategy used to validate and apply the default values.
    /// </summary>
    /// <returns>
    /// The strategy used to validate and apply the default values.
    /// </returns>
    private MarkupTransType type()
    {
        return MarkupTransType::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(boolean _updateMiscMatching = true, boolean _isEditingBlockedByVendorInvoice = this.isEditingBlockedByVendorInvoice())
    {
        MarkupMatchingTrans     markupMatchingTrans;
        InterCompanyMarkup      interCompanyMarkup;
        PurchTable              purchTable;
        SalesTable              salesTable;
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        CustInvoiceTrans        custInvoiceTrans;
        CustInvoiceJour         custInvoiceJour;
        CustInvoiceTable        custInvoiceTable;
        MarkupTrans             oldMarkupTrans = this.orig();
        TableId                 oldOrigTableId = oldMarkupTrans.OrigTableId;
        RecId                   oldOrigRecId = oldMarkupTrans.OrigRecId;
        MarkupCode              oldMarkupCode = oldMarkupTrans.MarkupCode;
        real                    oldValue = oldMarkupTrans.Value;
        boolean                 isInterCompanyOrder;
        boolean                 isDistributionUpdateRequired;
        PurchTotalsSummaryController    purchTotalsSummaryController;

        if (_isEditingBlockedByVendorInvoice)
        {
            throw error("@SYS327634");
        }

        MarkupInstrumentationLogger markupInstrumentationLogger = MarkupTrans::instrumentationLogger();
        MarkupInstrumentationActivities chargeActivities = markupInstrumentationLogger.chargeActivities();

        using (var activityContext = chargeActivities.update(this))
        {
            try
            {
                ttsbegin;

                SalesLine  salesLine;

                switch (this.TransTableId)
                {
                    case tableNum(CustInvoiceJour) :
                        custInvoiceJour = CustInvoiceJour::findRecId(this.TransRecId);
                        isInterCompanyOrder = (custInvoiceJour.InterCompanyCompanyId != '');
                        break;
                    case tableNum(CustInvoiceTrans) :
                        if (!this.InterCompanySkipUpdate)
                        {
                            // This can be relatively expensive, so only do when intercompany data will be checked
                            custInvoiceTrans = CustInvoiceTrans::findRecId(this.TransRecId);
                            isInterCompanyOrder = custInvoiceTrans.isInterCompany();
                        }
                        break;
                    case tableNum(PurchTable):
                        purchTable = PurchTable::findRecId(this.TransRecId, true);
                        isInterCompanyOrder = purchTable.isInterCompanyOrder();
                        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                        {
                            purchTotalsSummaryController = PurchTotalsSummaryController::construct(purchTable.PurchId);
                            purchTotalsSummaryController.checkFields(this);
                        }
                        break;
                    case tableNum(PurchLine):
                        purchTable = PurchLine::findRecId(this.TransRecId).purchTable(true);
                        isInterCompanyOrder = purchTable.isInterCompanyOrder();
                        break;
                    case tableNum(SalesTable):
                        salesTable = this.parentRecord();
                        isInterCompanyOrder = salesTable.isInterCompanyOrder();
                        break;
                    case tableNum(SalesLine):
                        salesLine = this.parentRecord();
                        salesTable = salesLine.salesTable();
                        isInterCompanyOrder = salesTable.isInterCompanyOrder();
                        break;
                    case tableNum(VendInvoiceInfoTable):
                        vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(this.TransRecId);
                        break;
                    case tableNum(VendInvoiceInfoLine):
                        vendInvoiceInfoTable = VendInvoiceInfoLine::findRecId(this.TransRecId).vendInvoiceInfoTable();
                        break;
                    case tableNum(VendInvoiceInfoSubTable):
                        vendInvoiceInfoTable = VendInvoiceInfoSubTable::findRecId(this.TransRecId).vendInvoiceInfoTable();
                        break;

                    default:
                        if (this.TransTableId == tableNum(CustInvoiceLine) && SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
                        {
                            custInvoiceTable = CustInvoiceLine::find(this.TransRecId).custInvoiceTable();
                        }
                        break;
                }

                if (purchTable)
                {
                    if (!this.isIntercompanyVirtualCharge())
                    {
                        VersioningPurchaseOrder::newPurchaseOrder(purchTable).change(this, this.orig());
                    }
                }

                if (isInterCompanyOrder && !this.InterCompanySkipUpdate)
                {
                    interCompanyMarkup = InterCompanyMarkup::construct(InterCompanyMarkupAction::Calc,this);
                    interCompanyMarkup.run();

                    // If update is done from sales order, above update of related purchase charge may have triggered an update back on current sales charge record due to distributions update
                    if (salesTable)
                    {
                        MarkupTrans markupTransLocal = MarkupTrans::findRecId(this.RecId);
                        if (this.recVersion != markupTransLocal.recVersion)
                        {
                            this.data(markupTransLocal);
                        }
                    }

                    this.InterCompanyCompanyId = interCompanyMarkup.parmMarkupTrans().InterCompanyCompanyId;
                    this.InterCompanyRefRecId  = interCompanyMarkup.parmMarkupTrans().InterCompanyRefRecId;
                }

                this.InterCompanySkipUpdate = false;
                this.IsModified = NoYes::Yes;

                if (this.IsAdvancedLineProrated && (this.Value != oldValue || this.IsOverriddenLine))
                {
                    this.IsOverriddenProratedLine = NoYes::Yes;
                }

                chargeActivities.logMarkupTrans(activityContext, this);

                super();

                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                {
                    if (purchTotalsSummaryController)
                    {
                        purchTotalsSummaryController.onUpdate(this);
                    }
                }

                isDistributionUpdateRequired = this.isDistributionUpdateRequired(oldMarkupTrans);

                // Sales tax will impact the calculation for withholding tax, once the <c>TaxUncommitted</c> deleted, the <c>TaxWithholdWorkTrans</c> should be deleted too.
                // Use 'isTaxUncommittedDeleted' to identify the <c>TaxUncommitted</c> deleted.
                boolean isTaxUncommittedDeleted = false;

                if ((this.MarkupCategory != oldMarkupTrans.MarkupCategory)
                || (this.MarkupCode     != oldMarkupTrans.MarkupCode)
                || isDistributionUpdateRequired
                || (this.TaxGroup       != oldMarkupTrans.TaxGroup)
                || (this.TaxItemGroup   != oldMarkupTrans.TaxItemGroup)
                || (this.OverrideSalesTax != oldMarkupTrans.OverrideSalesTax))
                {
                    switch (this.TransTableId)
                    {
                        case tableNum(SalesTable):
                        case tableNum(SalesLine):
                            salesTable.type().deleteTaxUncommitted();
                            break;

                        case tableNum(PurchTable):
                            if (!this.markupTypeItem())
                            {
                                if (isDistributionUpdateRequired)
                                {
                                    this.updateMarkupDistribution(purchTable);
                                }
                            }
                            purchTable.type().deleteTaxUncommitted();
                            isTaxUncommittedDeleted = true;
                            break;

                        case tableNum(PurchLine):
                            if (isDistributionUpdateRequired)
                            {
                                this.updateMarkupDistribution(purchTable);
                            }
                            purchTable.type().deleteTaxUncommitted();
                            isTaxUncommittedDeleted = true;
                            break;

                        case tableNum(VendInvoiceInfoTable), tableNum(VendInvoiceInfoSubTable):
                            if (!this.markupTypeItem())
                            {
                                if (isDistributionUpdateRequired)
                                {
                                    this.updateMarkupDistribution(vendInvoiceInfoTable);
                                }
                            }
                            TaxUncommitted::deleteForDocumentHeader(vendInvoiceInfoTable.TableId,vendInvoiceInfoTable.RecId, true, true);
                            isTaxUncommittedDeleted = true;
                            break;

                        case tableNum(VendInvoiceInfoLine):
                            if (isDistributionUpdateRequired)
                            {
                                this.updateMarkupDistribution(vendInvoiceInfoTable);
                            }
                            TaxUncommitted::deleteForDocumentHeader(vendInvoiceInfoTable.TableId,vendInvoiceInfoTable.RecId, true, true);
                            isTaxUncommittedDeleted = true;
                            break;

                        default:
                            if (this.TransTableId == tableNum(CustInvoiceLine) && SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
                            {
                                TaxUncommitted::deleteForDocumentHeader(custInvoiceTable.TableId, custInvoiceTable.RecId, true);

                                if (isDistributionUpdateRequired)
                                {
                                    this.updateMarkupDistribution(custInvoiceTable);
                                }
                            }
                            break;
                    }
                }

                if (this.MarkupCode != oldMarkupCode)
                {
                    switch (this.TransTableId)
                    {
                        case tableNum(VendInvoiceInfoSubTable):
                        case tableNum(VendInvoiceInfoLine):
                            markupMatchingTrans = MarkupMatchingTrans::find(this.TransTableId, this.TransRecId, this.LineNum, true);
                            if (markupMatchingTrans)
                            {
                                markupMatchingTrans.MarkupCode = this.MarkupCode;
                                markupMatchingTrans.update();
                            }
                            break;
                        default:
                            break;
                    }
                }

                // Connecting Miscellaneous Charge
                if (this.OrigTableId == this.TableId && this.OrigRecId && !oldOrigRecId && _updateMiscMatching)
                {
                    VendInvoiceMatching::updateExpectedValuesForTable(this.TransTableId, this.TransRecId);
                    switch (this.TransTableId)
                    {
                        case tableNum(VendInvoiceInfoSubTable):
                            VendInvoiceInfoSubMarkupMatchingTrans::connectVendSubTableMarkupTrans(this);
                            break;
                        case tableNum(VendInvoiceInfoLine):
                            VendInvoiceInfoLineMarkupMatchingTrans::connectVendInvoiceInfoLineMarkupTrans(this);
                            break;
                        default:
                            break;
                    }
                    this.resetDistributions();
                    TaxUncommitted::deleteForDocumentHeader(vendInvoiceInfoTable.TableId,vendInvoiceInfoTable.RecId, true, true);
                }

                // Disconnecting Miscellaneous Charge
                if (oldOrigTableId == this.TableId && oldOrigRecId && !this.OrigRecId && _updateMiscMatching)
                {
                    VendInvoiceMatching::updateExpectedValuesForTable(this.TransTableId, this.TransRecId);
                    switch (this.TransTableId)
                    {
                        case tableNum(VendInvoiceInfoSubTable):
                            VendInvoiceInfoSubMarkupMatchingTrans::disconnectVendSubTableMarkupTrans(this);
                            break;
                        case tableNum(VendInvoiceInfoLine):
                            VendInvoiceInfoLineMarkupMatchingTrans::disconnectVendInvoiceInfoLineMarkupTrans(this);
                            break;
                        default:
                            break;
                    }
                    this.resetDistributions();
                    TaxUncommitted::deleteForDocumentHeader(vendInvoiceInfoTable.TableId,vendInvoiceInfoTable.RecId, true, true);
                }

                // Change Misc Charge Code
                if (oldOrigTableId == this.TableId && oldOrigRecId == this.OrigRecId && this.MarkupCode != oldMarkupCode && _updateMiscMatching)
                {
                    switch (this.TransTableId)
                    {
                        case tableNum(VendInvoiceInfoSubTable):
                            VendInvoiceInfoSubMarkupMatchingTrans::disconnectVendSubTableMarkupTrans(this);
                            VendInvoiceInfoSubMarkupMatchingTrans::connectVendSubTableMarkupTrans(this);
                            break;
                        case tableNum(VendInvoiceInfoLine):
                            VendInvoiceInfoLineMarkupMatchingTrans::disconnectVendInvoiceInfoLineMarkupTrans(this);
                            VendInvoiceInfoLineMarkupMatchingTrans::connectVendInvoiceInfoLineMarkupTrans(this);
                            break;
                        default:
                            break;
                    }
                }

                // <GTE>
                if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled() && this.SalesPurchJournalLine::taxRecalculationNeeded(oldMarkupTrans))
                {
                    this.markCurrentTaxDocumentTaxStatusDirty();
                }
                // </GTE>

                if (TaxWithholdingGlobalFeature::isCalcWHTInInvoiceWithChargeEnabled() &&
                    (isTaxUncommittedDeleted ||
                        this.TaxWithholdGroup != oldMarkupTrans.TaxWithholdGroup ||
                        this.TaxWithholdItemGroup != oldMarkupTrans.TaxWithholdItemGroup))
                {
                    switch (this.TransTableId)
                    {
                        case tableNum(PurchTable), tableNum(PurchLine) :
                            purchTable.type().deleteTaxWithholdUncommitted();
                            break;

                        case tableNum(VendInvoiceInfoTable), tableNum(VendInvoiceInfoLine), tableNum(VendInvoiceInfoSubTable) :
                            TaxWithholdUncommitted::deleteForDocumentHeader(vendInvoiceInfoTable.TableId, vendInvoiceInfoTable.RecId);
                            break;

                        default:
                            break;
                    }
                }

                ttscommit;
            }
            catch(Exception::Error)
            {
                ttsabort;
                throw error("@SYS93835");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankLCImportChargeAllocation_SA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates letter of credit miscellaneous charge allocation settle status
    /// </summary>
    private void updateBankLCImportChargeAllocation_SA()
    {
        // <GSA>
        BankLCImportChargeAllocation_SA bankLCImportChargeAllocation;

        if (this.BankLCImportChargeAllocation_SA)
        {
            bankLCImportChargeAllocation = BankLCImportChargeAllocation_SA::find(this.BankLCImportChargeAllocation_SA, true);
            if (bankLCImportChargeAllocation.RecId)
            {
                if (!BankLCImportLine::find(bankLCImportChargeAllocation.BankLCImportLine).hasPackingSlip()
                    && !MarkupTrans::existLCMarkupTrans_SA(0, this.BankLCImportChargeAllocation_SA))
                {
                    bankLCImportChargeAllocation.updateSettleStatus(false);
                    bankLCImportChargeAllocation.update();
                }
            }
        }
        // </GSA>
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarkupDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the markup distributions.
    /// </summary>
    /// <param name="_common">
    /// The record of the <c>Common</c> table to which the markup belongs.
    /// </param>
    public void updateMarkupDistribution(Common _common)
    {
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        SourceDocumentLine      sourceDocumentLine;

        switch (_common.TableId)
        {
            case tableNum(PurchTable):
            case tableNum(PurchLine):
                sourceDocumentLine = SourceDocumentLine::find(this.SourceDocumentLine);
                if (sourceDocumentLine)
                {
                    if (sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Completed)
                    {
                        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this, false, SourceDocumentLineAccountingStatus::FullyDistributed);
                    }
                    else
                    {
                        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);
                    }
                }
                break;
            case tableNum(VendInvoiceInfoTable):
                vendInvoiceInfoTable = _common as VendInvoiceInfoTable;
                if (AccountingDistribution::existSourceDocumentLine(this.SourceDocumentLine))
                {
                    SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);
                }

                break;

            default:
                if (_common.TableId == tableNum(CustInvoiceTable) && SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
                {
                    if (AccountingDistribution::existSourceDocumentLine(this.SourceDocumentLine))
                    {
                        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssessableValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to update the table.
    /// </summary>
    /// <param name="_transTableId">
    /// The unique table id to find.
    /// </param>
    /// <param name="_transRecId">
    /// The unique table id to find.
    /// </param>
    public void updateAssessableValue_IN(TableId _transTableId = this.TransTableId, RefRecId _transRecId = this.TransRecId)
    {
        Amount              notionalAmount;
        Amount              markupTotalValue;
        Amount              notionalCharges;
        MarkupTrans         markupTransLoc;
        PurchLine           purchLineLoc;
        PurchLine_IN        purchLineLoc_IN;
        PurchParmLine       purchParmLineLoc;
        PurchParmLine_IN    purchParmLineLoc_IN;
        SalesLine           salesLineLoc;
        SalesLine_IN        salesLineLoc_IN;
        SalesQuotationLine  salesQuotationLineLoc;
        CustInvoiceLine     custInvoiceLineLoc;
        Amount              miscChargeAmount;
        VendInvoiceInfoLine                 vendInvoiceInfoLineLoc;
        VendInvoiceInfoLine_W               vendInvoiceInfoLineLoc_W;
        CustomsAmount_IN                    landingCharges;
        SalesQuotationLineTaxExtensionIN    salesQuotationLineTaxExtensionIN;
        CustInvoiceLineTaxExtensionIN       custInvoiceLineTaxExtensionIN;
        Common                              sourceTransactionHeaderTable;

        boolean isCompanyEnabled = TaxSolutionScopeIntegrationUtil::isCompanyEnabled();

        switch (_transTableId)
        {
            case tableNum(PurchLine) :
                purchLineLoc = PurchLine::findRecId(_transRecId);

                if (purchLineLoc)
                {
                    if (PurchTable::find(purchLineLoc.PurchId).purchTable_W().CustomsImportOrder_IN == NoYes::Yes)
                    {
                        this.customsUpdatePurchLine_IN(_transTableId, _transRecId);
                    }
                    else
                    {
                        while select MarkupCategory, MarkUpAllocateAfter_IN, Value, CurrencyCode, NotionalPct_IN
                            from  markupTransLoc
                            where markupTransLoc.TransTableId == purchLineLoc.TableId
                                && markupTransLoc.TransRecId   == purchLineLoc.RecId
                                && ((markupTransLoc.CustomsAssessableValue_IN == NoYes::Yes || markupTransLoc.NotionalCharges_IN == NoYes::Yes && isCompanyEnabled)
                                || (!isCompanyEnabled))
                        {
                            if (markupTransLoc.MarkupCategory == MarkupCategory::Percent)
                            {
                                if (markupTransLoc.MarkUpAllocateAfter_IN == MarkupAllocateAfter::NetAmount)
                                {
                                    markupTransLoc.Value = purchLineLoc.LineAmount * markupTransLoc.Value / 100;
                                }
                                if (markupTransLoc.MarkUpAllocateAfter_IN == MarkupAllocateAfter::Qty)
                                {
                                    markupTransLoc.Value = purchLineLoc.PurchQty * markupTransLoc.Value / 100;
                                }
                                if (markupTransLoc.MarkUpAllocateAfter_IN == MarkupAllocateAfter::Line)
                                {
                                    markupTransLoc.Value = 1 * markupTransLoc.Value / 100;
                                }
                            }

                            if (markupTransLoc.MarkupCategory == MarkupCategory::Pcs)
                            {
                                markupTransLoc.Value = purchLineLoc.PurchQty * markupTransLoc.Value;
                            }

                            markupTotalValue    = CurrencyExchangeHelper::curAmount2CurAmount(markupTransLoc.Value, markupTransLoc.CurrencyCode, purchLineLoc.CurrencyCode);

                            notionalCharges     = markupTransLoc.NotionalPct_IN/100;

                            notionalAmount      = purchLineLoc.LineAmount * notionalCharges;

                            if (notionalAmount == 0)
                            {
                                miscChargeAmount += markupTotalValue;
                            }
                            else if (markupTotalValue == 0)
                            {
                                miscChargeAmount += notionalAmount;
                            }
                            else if (notionalAmount < markupTotalValue)
                            {
                                miscChargeAmount += notionalAmount;
                            }
                            else
                            {
                                miscChargeAmount += markupTotalValue;
                            }
                        }
                        purchLineLoc_IN = purchLineLoc.purchLine_IN();
                        if (purchLineLoc_IN.AssessableValueTransactionCurrency != miscChargeAmount + purchLineLoc.LineAmount)
                        {
                            purchLineLoc_IN.selectForUpdate(true);
                            purchLineLoc_IN.AssessableValueTransactionCurrency = miscChargeAmount + purchLineLoc.LineAmount;
                            purchLineLoc_IN.AssessableValueAccountingCurrency  = TaxAssessableValueHandler_IN::calcAssessableValueAccountingCurrency(purchLineLoc_IN.AssessableValueTransactionCurrency, purchLineLoc.CurrencyCode, purchLineLoc.purchTable().AccountingDate);

                            ttsbegin;
                            purchLineLoc_IN.update();
                            ttscommit;
                            sourceTransactionHeaderTable = purchLineLoc.purchTable();
                        }
                    }
                }
                break;

            case tableNum(PurchParmLine) :
                purchParmLineLoc = PurchParmLine::findRecId(_transRecId);
                if (purchParmLineLoc)
                {
                    if (TaxIntegrationUtils::isChargeOnBOEEnabled() && purchParmLineLoc.purchLine().purchTable().isCustomsImportOrder_IN())
                    {
                        this.customsUpdatePurchParmLine_IN(purchParmLineLoc);
                        sourceTransactionHeaderTable = purchParmLineLoc.purchParmTable();
                    }
                    else
                    {
                        while select MarkupCategory, MarkUpAllocateAfter_IN, Value, CurrencyCode, NotionalPct_IN
                        from  markupTransLoc
                        where markupTransLoc.TransTableId == purchParmLineLoc.TableId
                            && markupTransLoc.TransRecId   == purchParmLineLoc.RecId
                            && ((markupTransLoc.CustomsAssessableValue_IN == NoYes::Yes || markupTransLoc.NotionalCharges_IN == NoYes::Yes && isCompanyEnabled)
                            || (!isCompanyEnabled))

                        {
                            if (markupTransLoc.MarkupCategory == MarkupCategory::Percent)
                            {
                                if (markupTransLoc.MarkUpAllocateAfter_IN == MarkupAllocateAfter::NetAmount)
                                {
                                    markupTransLoc.Value = purchParmLineLoc.LineAmount * markupTransLoc.Value / 100;
                                }
                                if (markupTransLoc.MarkUpAllocateAfter_IN == MarkupAllocateAfter::Qty)
                                {
                                    markupTransLoc.Value = purchParmLineLoc.ReceiveNow * markupTransLoc.Value / 100;
                                }
                                if (markupTransLoc.MarkUpAllocateAfter_IN == MarkupAllocateAfter::Line)
                                {
                                    markupTransLoc.Value = 1 * markupTransLoc.Value / 100;
                                }
                            }

                            if (markupTransLoc.MarkupCategory == MarkupCategory::Pcs)
                            {
                                markupTransLoc.Value = purchParmLineLoc.ReceiveNow * markupTransLoc.Value;
                            }

                            markupTotalValue    = CurrencyExchangeHelper::curAmount2CurAmount(markupTransLoc.Value, markupTransLoc.CurrencyCode, purchParmLineLoc.CurrencyCode);
                            notionalCharges     = markupTransLoc.NotionalPct_IN/100;

                            notionalAmount = purchParmLineLoc.LineAmount * notionalCharges;

                            if (notionalAmount == 0)
                            {
                                miscChargeAmount += markupTotalValue;
                            }
                            else if (markupTotalValue == 0)
                            {
                                miscChargeAmount += notionalAmount;
                            }
                            else if (notionalAmount < markupTotalValue)
                            {
                                miscChargeAmount += notionalAmount;
                            }
                            else
                            {
                                miscChargeAmount += markupTotalValue;
                            }
                        }

                        purchParmLineLoc_IN = purchParmLineLoc.purchParmLine_IN();
                        if (purchParmLineLoc_IN.AssessableValueTransactionCurrency != miscChargeAmount + purchParmLineLoc.LineAmount)
                        {
                            purchParmLineLoc_IN.selectForUpdate(true);
                            purchParmLineLoc_IN.AssessableValueTransactionCurrency = miscChargeAmount + purchParmLineLoc.LineAmount;
                            purchParmLineLoc_IN.AssessableValueAccountingCurrency  = TaxAssessableValueHandler_IN::calcAssessableValueAccountingCurrency(purchParmLineLoc_IN.AssessableValueTransactionCurrency, purchParmLineLoc.currencyCode, purchParmLineLoc.purchParmTable().TransDate);

                            ttsbegin;
                            purchParmLineLoc_IN.update();
                            ttscommit;
                            sourceTransactionHeaderTable = purchParmLineLoc.purchParmTable();
                        }
                    }
                }
                break;

            case tableNum(SalesLine):
                salesLineLoc = SalesLine::findRecId(_transRecId);
                if (salesLineLoc)
                {
                    if  ( SalesTable::find(salesLineLoc.SalesId).CustomsExportOrder_IN == NoYes::Yes)
                    {
                        this.customsUpdateSalesLine_IN(_transTableId, _transRecId);
                    }
                    else
                    {
                        while select MarkupCategory, MarkUpAllocateAfter_IN, Value, CurrencyCode, NotionalPct_IN
                        from markupTransLoc
                        where markupTransLoc.TransTableId == salesLineLoc.TableId
                            && markupTransLoc.TransRecId   == salesLineLoc.RecId
                            && ((markupTransLoc.CustomsAssessableValue_IN == NoYes::Yes && isCompanyEnabled)
                            || (!isCompanyEnabled))
                        {
                            if (markupTransLoc.MarkupCategory == MarkupCategory::Percent)
                            {
                                if (markupTransLoc.MarkUpAllocateAfter_IN == MarkupAllocateAfter::NetAmount)
                                {
                                    markupTransLoc.Value = salesLineLoc.LineAmount * markupTransLoc.Value / 100;
                                }
                            }

                            if (markupTransLoc.MarkupCategory == MarkupCategory::Pcs)
                            {
                                markupTransLoc.Value = salesLineLoc.SalesQty * markupTransLoc.Value;
                            }

                            if ((markupTransLoc.MarkupCategory == MarkupCategory::UnitSpecific || markupTransLoc.MarkupCategory == MarkupCategory::UnitSpecificMatch)
                                && AutoChargesSetupLineLevelUnitOfMeasureFeature::instance().IsEnabled())
                            {
                                real salesLineQtySpecificUoM = Markup::markupUnitOfMeasureQuantity(markupTransLoc, salesLineLoc.SalesQty);
                                markupTransLoc.Value = salesLineQtySpecificUoM * markupTransLoc.Value;
                            }

                            markupTotalValue    += CurrencyExchangeHelper::curAmount2CurAmount(markupTransLoc.Value, markupTransLoc.CurrencyCode, salesLineLoc.CurrencyCode);
                        }

                        salesLineLoc_IN = salesLineLoc.salesLine_IN();
                        if (salesLineLoc_IN.AssessableValueTransactionCurrency != salesLineLoc.LineAmount + markupTotalValue)
                        {
                            salesLineLoc_IN.selectForUpdate(true);
                            salesLineLoc_IN.AssessableValueTransactionCurrency = salesLineLoc.LineAmount + markupTotalValue;
                            ttsbegin;
                            salesLineLoc_IN.update();
                            ttscommit;
                            sourceTransactionHeaderTable = salesLineLoc.salesTable();
                        }
                    }
                }

                break;

            case tableNum(SalesQuotationLine):

                salesQuotationLineLoc = SalesQuotationLine::findRecId(_transRecId);
                if (salesQuotationLineLoc)
                {
                    while select MarkupCategory, MarkUpAllocateAfter_IN, Value, CurrencyCode, NotionalPct_IN
                        from markupTransLoc
                        where markupTransLoc.TransTableId == salesQuotationLineLoc.TableId
                            && markupTransLoc.TransRecId   == salesQuotationLineLoc.RecId
                            && ((markupTransLoc.CustomsAssessableValue_IN == NoYes::Yes && isCompanyEnabled)
                            || (!isCompanyEnabled))

                    {
                        if (markupTransLoc.MarkupCategory == MarkupCategory::Percent)
                        {
                            if (markupTransLoc.MarkUpAllocateAfter_IN == MarkupAllocateAfter::NetAmount)
                            {
                                markupTransLoc.Value = salesQuotationLineLoc.LineAmount * markupTransLoc.Value / 100;
                            }
                        }

                        if (markupTransLoc.MarkupCategory == MarkupCategory::Pcs)
                        {
                            markupTransLoc.Value = salesQuotationLineLoc.SalesQty * markupTransLoc.Value;
                        }

                        markupTotalValue    += CurrencyExchangeHelper::curAmount2CurAmount(markupTransLoc.Value, markupTransLoc.CurrencyCode, salesQuotationLineLoc.CurrencyCode);
                    }
                    salesQuotationLineTaxExtensionIN = SalesQuotationLineTaxExtensionIN::findBysalesQuotationLine(salesQuotationLineLoc.RecId);

                    if (salesQuotationLineTaxExtensionIN.AssessableValueTransactionCurrency != salesQuotationLineLoc.LineAmount + markupTotalValue)
                    {
                        salesQuotationLineTaxExtensionIN.selectForUpdate(true);
                        salesQuotationLineTaxExtensionIN.AssessableValueTransactionCurrency = salesQuotationLineLoc.LineAmount + markupTotalValue;
                        ttsbegin;
                        salesQuotationLineTaxExtensionIN.update();
                        ttscommit;

                        sourceTransactionHeaderTable = salesQuotationLineLoc.salesQuotationTable();
                    }
                }

                break;

            case tableNum(CustInvoiceLine):

                custInvoiceLineLoc = CustInvoiceLine::find(_transRecId);
                if (custInvoiceLineLoc)
                {
                    while select markupTransLoc
                    where markupTransLoc.TransTableId == custInvoiceLineLoc.TableId
                        && markupTransLoc.TransRecId   == custInvoiceLineLoc.RecId
                        && ((markupTransLoc.CustomsAssessableValue_IN == NoYes::Yes && isCompanyEnabled)
                            || (!isCompanyEnabled))
                    {
                        if (markupTransLoc.MarkupCategory == MarkupCategory::Percent)
                        {
                            if (markupTransLoc.MarkUpAllocateAfter_IN == MarkupAllocateAfter::NetAmount)
                            {
                                markupTransLoc.Value = custInvoiceLineLoc.AmountCur * markupTransLoc.Value / 100;
                            }
                        }
                        else if (markupTransLoc.MarkupCategory == MarkupCategory::Pcs)
                        {
                            markupTransLoc.Value = custInvoiceLineLoc.Quantity * markupTransLoc.Value;
                        }

                        markupTotalValue    += CurrencyExchangeHelper::curAmount2CurAmount(markupTransLoc.Value,
                                                                            markupTransLoc.CurrencyCode,
                                                                            custInvoiceLineLoc.CurrencyCode);
                    }
                    custInvoiceLineTaxExtensionIN = CustInvoiceLineTaxExtensionIN::findByCustInvoiceLine(custInvoiceLineLoc.RecId);
                    if (custInvoiceLineTaxExtensionIN.AssessableValueTransactionCurrency != custInvoiceLineLoc.AmountCur + markupTotalValue)
                    {
                        custInvoiceLineTaxExtensionIN.selectForUpdate(true);
                        custInvoiceLineTaxExtensionIN.AssessableValueTransactionCurrency = custInvoiceLineLoc.AmountCur + markupTotalValue;
                        ttsbegin;
                        custInvoiceLineTaxExtensionIN.update();
                        ttscommit;
                        sourceTransactionHeaderTable = custInvoiceLineLoc.custInvoiceTable();
                    }
                }

                break;

            case tableNum(VendInvoiceInfoLine) :

                vendInvoiceInfoLineLoc = VendInvoiceInfoLine::findRecId(_transRecId);
                if (vendInvoiceInfoLineLoc)
                {
                    while select MarkupCategory, MarkUpAllocateAfter_IN, Value, CurrencyCode, NotionalPct_IN
                    from  markupTransLoc
                    where markupTransLoc.TransTableId == vendInvoiceInfoLineLoc.TableId
                        && markupTransLoc.TransRecId   == vendInvoiceInfoLineLoc.RecId
                        && ((markupTransLoc.CustomsAssessableValue_IN == NoYes::Yes || markupTransLoc.NotionalCharges_IN == NoYes::Yes && isCompanyEnabled)
                        || (!isCompanyEnabled))
                    {
                        if (markupTransLoc.MarkupCategory == MarkupCategory::Percent)
                        {
                            if (markupTransLoc.MarkUpAllocateAfter_IN == MarkupAllocateAfter::NetAmount)
                            {
                                markupTransLoc.Value = vendInvoiceInfoLineLoc.LineAmount * markupTransLoc.Value / 100;
                            }
                            if (markupTransLoc.MarkUpAllocateAfter_IN == MarkupAllocateAfter::Qty)
                            {
                                markupTransLoc.Value = vendInvoiceInfoLineLoc.ReceiveNow * markupTransLoc.Value / 100;
                            }
                            if (markupTransLoc.MarkUpAllocateAfter_IN == MarkupAllocateAfter::Line)
                            {
                                markupTransLoc.Value = 1 * markupTransLoc.Value / 100;
                            }
                        }

                        if (markupTransLoc.MarkupCategory == MarkupCategory::Pcs)
                        {
                            markupTransLoc.Value = vendInvoiceInfoLineLoc.ReceiveNow * markupTransLoc.Value;
                        }
                        // calculate markup value for import order.
                        if (vendInvoiceInfoLineLoc.purchTable().purchTable_W().CustomsImportOrder_IN == NoYes::Yes)
                        {
                            CustomsExchangeRate_IN  customsExchangeRate = TaxExchangeRateHelper::getCustomsExchangeRate_IN(
                                                                vendInvoiceInfoLineLoc.CurrencyCode,
                                                                Direction_IN::Import);

                            if (customsExchangeRate && markupTransLoc.CurrencyCode == Ledger::find(Ledger::current()).AccountingCurrency)
                            {
                                customsExchangeRate = customsExchangeRate / 100;

                                if (markupTransLoc.CurrencyCode
                                    && vendInvoiceInfoLineLoc.CurrencyCode
                                    && markupTransLoc.CurrencyCode != vendInvoiceInfoLineLoc.CurrencyCode
                                    && markupTransLoc.MarkupCategory != MarkupCategory::Percent)
                                {
                                    AmountMST amountMSTLoc = CurrencyExchangeHelper::mstAmount(markupTransLoc.Value, markupTransLoc.CurrencyCode);

                                    markupTotalValue = (amountMSTLoc / customsExchangeRate);
                                }
                                else
                                {
                                    markupTotalValue = markupTransLoc.Value;
                                }
                            }
                            else
                            {
                                markupTotalValue = CurrencyExchangeHelper::curAmount2CurAmount(markupTransLoc.Value, markupTransLoc.CurrencyCode, vendInvoiceInfoLineLoc.CurrencyCode);
                            }
                        }
                        else
                        {
                            markupTotalValue    = CurrencyExchangeHelper::curAmount2CurAmount(markupTransLoc.Value, markupTransLoc.CurrencyCode, vendInvoiceInfoLineLoc.CurrencyCode);
                        }

                        notionalCharges     = markupTransLoc.NotionalPct_IN/100;

                        notionalAmount      = vendInvoiceInfoLineLoc.LineAmount * notionalCharges;

                        if (notionalAmount == 0)
                        {
                            miscChargeAmount += markupTotalValue;
                        }
                        else if (markupTotalValue == 0)
                        {
                            miscChargeAmount += notionalAmount;
                        }
                        else if (notionalAmount < markupTotalValue)
                        {
                            miscChargeAmount += notionalAmount;
                        }
                        else
                        {
                            miscChargeAmount += markupTotalValue;
                        }
                    }
                    if (PurchTable::find(vendInvoiceInfoLineLoc.OrigPurchId).isCustomsImportOrder_IN() == NoYes::Yes)
                    {
                        landingCharges = (miscChargeAmount + vendInvoiceInfoLineLoc.LineAmount) * VendParameters::find().CustomsLandingChargesPct_IN/100;
                    }
                    vendInvoiceInfoLineLoc_W   = vendInvoiceInfoLineLoc.vendInvoiceInfoLine_W();
                    boolean isBOELine = vendInvoiceInfoLineLoc.purchTable().isCustomsImportOrder_IN() && vendInvoiceInfoLineLoc_W.CustomsBillOfEntryNumberTable_IN != 0;
                    if (!isBOELine && vendInvoiceInfoLineLoc_W.AssessableValue_IN != miscChargeAmount + vendInvoiceInfoLineLoc.LineAmount + landingCharges)
                    {
                        vendInvoiceInfoLineLoc_W.selectForUpdate(true);
                        vendInvoiceInfoLineLoc_W.AssessableValue_IN = miscChargeAmount + vendInvoiceInfoLineLoc.LineAmount + landingCharges;
                        vendInvoiceInfoLineLoc_W.AssessableValueAccountingCurrency_IN = TaxAssessableValueHandler_IN::calcAssessableValueAccountingCurrency(vendInvoiceInfoLineLoc_W.AssessableValue_IN, vendInvoiceInfoLineLoc.currencyCode, vendInvoiceInfoLineLoc.vendInvoiceInfoTable().purchTable().AccountingDate);
                        ttsbegin;
                        vendInvoiceInfoLineLoc_W.update();
                        ttscommit;
                        sourceTransactionHeaderTable = vendInvoiceInfoLineLoc.vendInvoiceInfoTable();
                    }
                }
                break;
        }

        if (isCompanyEnabled && sourceTransactionHeaderTable)
        {
            TaxableDocumentDescriptor descriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(sourceTransactionHeaderTable);
            ITaxableDocument taxableDocument = TaxableDocumentObject::construct(descriptor);
            TaxBusinessService::markTaxDocumentTaxStatus(taxableDocument, TaxDocumentCalculationLevel::Dirty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useInMatching</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a <c>MarkupTrans</c> record can participate in transaction matching.
    /// </summary>
    /// <returns>
    ///    true if the current record can participate in transaction matching; otherwise, false.
    /// </returns>
    public display MarkupUseInMatching useInMatching()
    {
        return this.markupTable().UseInMatching;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        if (ret && this.RecId != 0 && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            ret = this.checkCustomJournal_RU();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId field)
    {
        boolean isValid = true;
        MarkupTransType markupTransType = this.type();

        if (markupTransType != null)
        {
            isValid = markupTransType.validateField(field);
        }

        if (isValid)
        {
            isValid = super(field);
        }

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            isValid = this.validateField_BR(field) && isValid;
        }
        // </GBR>

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField_BR</Name>
				<Source><![CDATA[
    private boolean validateField_BR(FieldId fieldId)
    {
        switch (fieldId)
        {
            case fieldNum(MarkupTrans, MarkupCode):
                if (    this.ModuleType == MarkupModuleType::Vend
                    &&  this.markupTable().MarkupClassification_BR == MarkupClassification_BR::SISCOMEX
                    &&  !this.isForeignVendor_BR())
                {
                    return false;
                }
                break;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForeignVendor_BR</Name>
				<Source><![CDATA[
    public boolean isForeignVendor_BR()
    {
        boolean ret;

        switch (this.TransTableId)
        {
            case tableNum(PurchTable):
                PurchTable purchTable = PurchTable::findRecId(this.TransRecId);
                ret = purchTable.isDirectImport_BR();
                break;
            case tableNum(PurchLine):
                PurchLine purchLine = PurchLine::findRecId(this.TransRecId);
                ret = purchLine.purchTable().isDirectImport_BR();
                break;
            case tableNum(VendInvoiceInfoTable):
                VendInvoiceInfoTable vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(this.TransRecId);
                ret = vendInvoiceInfoTable.isForeignerVendor_BR();
                break;
            case tableNum(VendInvoiceInfoLine):
                VendInvoiceInfoLine vendInvoiceInfoLine = VendInvoiceInfoLine::findRecId(this.TransRecId);
                ret = vendInvoiceInfoLine.vendInvoiceInfoTable().isForeignerVendor_BR();
                break;
            case tableNum(VendInvoiceInfoSubTable):
                VendInvoiceInfoSubTable vendInvoiceInfoSubTable = VendInvoiceInfoSubTable::findRecId(this.TransRecId);
                ret = vendInvoiceInfoSubTable.vendInvoiceInfoTable().isForeignerVendor_BR();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a specified field.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name of the field to check.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field.
    /// </param>
    /// <returns>
    /// Returns true if the field passes validation; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case(fieldStr(MarkupTrans, NotionalPct_IN)) :
                if (LedgerParameters::isMiscellaneouscharges_IN())
                {
                    ret = this.NotionalPct_IN > 999.99 ? false : true;
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean isValid = true;
        boolean miscWHTMsg = false;
        SalesTable salesTable;
        SalesLine salesLine;
        // <GEERU>
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        MarkupTransType markupTransType = this.type();

        if (markupTransType != null)
        {
            isValid = markupTransType.validateRow();
        }

        // Verify that a tax code is derived for the given Tax Group and Tax Item Group.
        isValid = isValid
            && (CheckTaxGroups::Error != Tax::isValidTaxGroupIntersectionV2(
                                            this.TaxGroup,
                                            this.TaxItemGroup,
                                            Tax::isTaxIntegrationEnabledForTable(this.TransTableId)));


        // Verify that a withholding tax code is derived for the given Withholding tax Group and Item withholding tax Group.
        if (TaxWithholdingGlobalFeature::isCalcWHTInInvoiceWithChargeEnabled() &&
            (this.TransTableId == tableNum(PurchTable) ||
            this.TransTableId == tableNum(PurchLine) ||
            this.TransTableId == tableNum(VendInvoiceInfoTable) ||
            this.TransTableId == tableNum(VendInvoiceInfoLine)) ||
            this.TransTableId == tableNum(VendInvoiceInfoSubTable))
        {
            isValid = isValid && TaxWithholdIntersection::isValidWHTGroupIntersection(
                TaxWithholdParameters::find().CheckIntersection,
                this.TaxWithholdGroup,
                this.TaxWithholdItemGroup) != TaxWithholdCheckWHTGroups::Error;
        }

        if (isValid)
        {
            isValid = super();
        }

        // This should be for validateWrite, and not in checkMarkupCategory, since we do not want this for validateField
        if (isValid
            && this.ModuleCategory == HeadingLine::Line
            && AutoChargesSetupLineLevelUnitOfMeasureFeature::instance().isEnabled()
            && (this.MarkupCategory == MarkupCategory::UnitSpecific || this.MarkupCategory == MarkupCategory::UnitSpecificMatch)
            && !this.SpecificUnitSymbol)
        {
            isValid = checkFailed("@SCM:AutoChargeLineUnitMustBeSpecifiedError");
        }

        if (isValid
            && this.Value != 0
            && TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled()
            && LedgerParameters::find().EnableWHTOnCharges == NoYes::No)
        {
            switch (this.TransTableId)
            {
                case tableNum(PurchTable):
                    miscWHTMsg = this.checkforMiscAndWHT_AP(this.TransRecId, 0);
                    break;

                case tableNum(PurchLine):
                    miscWHTMsg = this.checkforMiscAndWHT_AP(0, this.TransRecId);
                    break;

                case tableNum(SalesTable):
                    miscWHTMsg = this.checkforMiscAndWHT_AR(this.TransRecId, 0);
                    break;

                case tableNum(SalesLine):
                    miscWHTMsg = this.checkforMiscAndWHT_AR(0, this.TransRecId);
                    break;

                case tableNum(CustInvoiceTable):
                    miscWHTMsg = this.checkforMiscAndWHT_FTI(this.TransRecId);
                    break;
            }

            if (miscWHTMsg)
            {
                isValid = false;

                if (!TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionByDefault())
                {
                    warning("@Tax_WithholdTax:WHTCannotCreateCharges");
                }
                else
                {
                    warning("@SYS314126");
                }
            }
        }

        // If the commitments feature is enabled then we want to present a warning if there are unallocated misc. charges.
        if (isValid && (this.TransTableId == tableNum(PurchTable) || this.TransTableId == tableNum(VendInvoiceInfoSubTable) || this.TransTableId == tableNum(VendInvoiceInfoTable))
            && PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            this.checkMiscChargeUnallocated();
        }

        // <GEERU>
        if (countryRegion_RU)
        {
            if (! this.checkCustomJournal_RU())
            {
                isValid = false;
            }

            if (! this.checkPostingTypeTransit_RU())
            {
                isValid = false;
            }
        }
        // </GEERU>
        if ( isValid && isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            switch (this.TransTableId)
            {
                case tableNum(SalesTable):
                    salesTable = SalesTable::findRecId(this.TransRecId);
                    break;

                case tableNum(SalesLine):
                    salesLine = SalesLine::findRecId(this.TransRecId);
                    salesTable = salesLine.salesTable();
                    break;
            }

            if (this.mcrMiscChargeOverride
                && this.ModuleType == MarkupModuleType::Cust
                && ! this.mcrReasonCode
                && MCROrderParameters::find().mcrMarkupTransReasonCodeRequired
                && salesTable
                && RetailMCRChannelTable::findChannelBySalesTable(salesTable).mcrReasonCodeRetailInfocodeId != "")
            {
                isValid = checkFailed("@MCR21699");
            }
        }

        isValid = isValid && RetailInformationSubcodeTable::mcrValidate(this.mcrRetailInfocodeId,this.mcrReasonCode);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsDisplayId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the order ID associated with the charge.
    /// </summary>
    /// <returns>
    /// The order ID associated with the charge.
    /// </returns>
    public display Num whsDisplayId()
    {
        Num   ret;

        switch (this.TransTableId)
        {
            case tableNum(WHSLoadTable):
                ret = WHSLoadTable::findByRecId(this.TransRecId).LoadId;
                break;

            case tableNum(SalesTable):
                ret = SalesTable::findRecId(this.TransRecId).SalesId;
                break;

            case tableNum(WHSLoadLine):
                ret = WHSLoadLine::findbyRecId(this.TransRecId).LoadId;
                break;

            case tableNum(SalesLine):
                ret = SalesLine::findRecId(this.TransRecId).SalesId;
                break;

            case tableNum(CustInvoiceJour):
                ret = CustInvoiceJour::findRecId(this.TransRecId).InvoiceId;
                break;

            case tableNum(CustInvoiceTrans):
                ret = CustInvoiceTrans::findRecId(this.TransRecId).InvoiceId;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsDisplayItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the item ID associated with the charge.
    /// </summary>
    /// <returns>
    /// The Item ID associated with the charge.
    /// </returns>
    public display ItemId whsDisplayItem()
    {
        ItemId  ret;

        switch (this.TransTableId)
        {
            case tableNum(WHSLoadLine):
                ret = WHSLoadLine::findbyRecId(this.TransRecId).ItemId;
                break;

            case tableNum(SalesLine):
                ret = SalesLine::findRecId(this.TransRecId).ItemId;
                break;

            case tableNum(CustInvoiceTrans):
                ret = CustInvoiceTrans::findRecId(this.TransRecId).ItemId;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsDisplayQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the quantity associated with the charge.
    /// </summary>
    /// <returns>
    /// The quantity associated with the charge.
    /// </returns>
    public display ProductQuantity whsDisplayQty()
    {
        Qty ret;

        switch (this.TransTableId)
        {
            case tableNum(WHSLoadLine):
                ret = WHSLoadLine::findbyRecId(this.TransRecId).InventQty;
                break;

            case tableNum(SalesLine):
                ret = SalesLine::findRecId(this.TransRecId).SalesQty;
                break;

            case tableNum(CustInvoiceTrans):
                ret = CustInvoiceTrans::findRecId(this.TransRecId).Qty;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates a <c>MarkupTrans</c> record for selection or posting.
    /// </summary>
    /// <param name="_tableId">
    ///    The <c>TableId</c> of the table to which the <c>MarkupTrans</c> are associated.
    /// </param>
    /// <param name="_recId">
    ///    The <c>RecId</c> of the table to which the <c>MarkupTrans</c> are associated.
    /// </param>
    /// <param name="_warningOnly">
    ///    A Boolean value that determines whether a warning should be issued; optional.
    /// </param>
    /// <returns>
    ///    true if no errors were detected; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The <c>_</c><paramref name="warningOnly" /> parameter determines how the method behaves. The method
    ///    will always return true if only warnings are requested.
    /// </remarks>
    public static boolean checkMarkupTrans(TableId _tableId, RecId _recId, boolean _warningOnly = true)
    {
        boolean ok = true;
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        SetEnumerator markupRecIds = MarkupTrans::getMarkupRecIdsBySource(_tableId, _recId);

        while (markupRecIds.moveNext())
        {
            MarkupTrans markupTrans = MarkupTrans::findRecId(markupRecIds.current());

            if (markupTrans.Value)
            {
                if (markupTrans.MarkupCategory != MarkupCategory::Fixed || markupTrans.markupTypeItem())
                {
                    if (_warningOnly)
                    {
                        warning("@SYS25724");
                    }
                    else
                    {
                        ok = checkFailed("@SYS25724");
                    }
                    break;
                }
                if (countryRegion_RU && ! markupTrans.checkMarkupCodeCustVend_RU())
                {
                    return false;
                }
            }
            else
            {
                if (_warningOnly)
                {
                    warning("@SYS100830");
                }
            }
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMarkupTransCustVend_RU</Name>
				<Source><![CDATA[
    public static boolean checkMarkupTransCustVend_RU(TableId _tableId, RecId _recId)
    {
        MarkupTrans markupTrans;

        while select markupTrans
            where markupTrans.TransRecId    == _recId   &&
                  markupTrans.TransTableId  == _tableId &&
                  markupTrans.Value
        {
            if (! markupTrans.checkMarkupCodeCustVend_RU())
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMarkupTransOnHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates a <c>MarkupTrans</c> record for posting associated with a header record.
    /// </summary>
    /// <param name="_tableId">
    ///    The <c>TableId</c> of the table with which the <c>MarkupTrans</c> record is associated.
    /// </param>
    /// <param name="_recId">
    ///    The <c>RecId</c> of the table with which the <c>MarkupTrans</c> record is associated.
    /// </param>
    public static boolean checkMarkupTransOnHeader(TableId _tableId, RecId _recId)
    {
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        SetEnumerator markupRecIds = MarkupTrans::getMarkupRecIdsBySource(_tableId, _recId);
        while (markupRecIds.moveNext())
        {
            MarkupTrans markupTrans = MarkupTrans::findRecId(markupRecIds.current());

            if (markupTrans.Value && markupTrans.markupTypeItem())
            {
                error("@SYS115806");
                return false;
            }
            if (markupTrans.Value && markupTrans.MarkupCategory != MarkupCategory::Fixed)
            {
                warning("@SYS25724");
                return false;
            }
            if (markupTrans.Value && countryRegion_RU  && ! markupTrans.checkMarkupCodeCustVend_RU())
            {
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMarkupTransOnHeaderWithZeroValueValidation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates a <c>MarkupTrans</c> record of empty charge value for posting associated with a header record.
    /// </summary>
    /// <param name = "_tableId">
    ///    The TableId of the table with which the <c>MarkupTrans</c> record is associated.
    /// </param>
    /// <param name = "_recId">
    ///    The RecId of the table with which the <c>MarkupTrans</c> record is associated.
    /// </param>
    /// <returns>
    ///    true if the charge is valid; otherwise, false.
    /// </returns>
    internal static boolean checkMarkupTransOnHeaderWithZeroValueValidation(TableId _tableId, RecId _recId)
    {
        boolean isValid = MarkupTrans::checkMarkupTransOnHeader(_tableId, _recId);

        if (isValid)
        {
            SetEnumerator markupRecIds = MarkupTrans::getMarkupRecIdsBySource(_tableId, _recId);

            while (markupRecIds.moveNext())
            {
                MarkupTrans markupTrans = MarkupTrans::findRecId(markupRecIds.current());

                if (markupTrans.Value == 0 && markupTrans.markupTypeItem())
                {
                    isValid = false;
                    error("@AccountsPayable:EmptyChargeValue");
                    break;
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCodeExtendedTypeId</Name>
				<Source><![CDATA[
    static ExtendedTypeId currencyCodeExtendedTypeId(Common _common)
    {
        DictTable       dictTable;
        DictField       dictField;
        FieldId         fieldId;
        ExtendedTypeId  extendedTypeId;
        dictTable   = new DictTable(_common.TableId);

        fieldId     = dictTable.fieldName2Id(new DictType(extendedTypeNum(CurrencyCode)).name());

        if (fieldId)
        {
            dictField       = dictTable.fieldObject(fieldId);
        }
        else
        {
            dictField       = new DictField(tableNum(MarkupTrans),fieldNum(MarkupTrans,CurrencyCode));
        }

        extendedTypeId  = dictField.typeId();

        return extendedTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteByTableId_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to delete the record from <c>MarkupTrans</c> table based on the table id.
    /// </summary>
    /// <param name="_tableId">
    /// A unique table id for selection.
    /// </param>
    public static void deleteByTableId_IN(MarkupTransRefTableId _tableId)
    {
        MarkupTrans markupTrans;

        delete_from markupTrans
            where markupTrans.TransTableId == _tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForParentSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>SourceDocumentLine</c> records for all markup transactions for a parent record.
    /// </summary>
    /// <param name="_sourceTable">
    /// The source table ID.
    /// </param>
    /// <param name="_sourceRecord">
    /// The source record ID.
    /// </param>
    public static void deleteForParentSourceDocumentLine(RefTableId _sourceTable,
                                                       RefRecId _sourceRecord)
    {
        SourceDocumentLine  sourceDocumentLine;
        MarkupTrans         markupTrans;

        delete_from sourceDocumentLine
            exists join markupTrans
            where markupTrans.TransTableId == _sourceTable &&
                  markupTrans.TransRecId == _sourceRecord &&
                 !markupTrans.IsDeleted                   &&
                  sourceDocumentLine.RecId == markupTrans.SourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTieredCharges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the tiered misc. charges associated with an entity.
    /// </summary>
    /// <param name="_tableId">
    /// The <c>TableId</c> of the entity.
    /// </param>
    /// <param name="_recId">
    /// The <c>RecId</c> of the entity.
    /// </param>
    public static void deleteTieredCharges(
        TableId         _tableId,
        RecId           _recId)
    {
        MarkupTrans markupTrans;

        delete_from markupTrans
        where markupTrans.TransRecId     == _recId
           && markupTrans.TransTableId   == _tableId
           && markupTrans.IsTieredCharge == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTaxGroupExistsForMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a <c>MarkupTrans</c> record exists with tax groups set for the given parent.
    /// </summary>
    /// <param name="_tableId">
    /// The parent table ID.
    /// </param>
    /// <param name="_recId">
    /// The parent Record ID.
    /// </param>
    /// <returns>
    /// A boolean value indicating if any markups exist with a sales or item tax group.
    /// </returns>
    public static boolean doTaxGroupExistsForMarkup(RefTableId _tableId, RefRecId _recId)
    {
        MarkupTrans markupTrans;

        select firstonly RecId from markupTrans
            where markupTrans.TransTableId == _tableId &&
                    markupTrans.TransRecId == _recId &&
                    markupTrans.TaxGroup != '' &&
                    markupTrans.TaxItemGroup != '' &&
                    !markupTrans.IsDeleted;
        return (markupTrans != null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>latestOverrideUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the user who performed the most recent charge override on this markupTrans record.
    /// </summary>
    /// <returns>The UserId of the user who performed the override.</returns>
    internal display UserId latestOverrideUser()
    {
        ChargeOverrideHistory chargeOverrideHistory = RetailChargeOverrideAuditing::getLatestChargeOverrideHistory(this);

        return chargeOverrideHistory.AxUserId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>latestOverrideTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the time of the most recent charge override for this markupTrans record.
    /// </summary>
    /// <returns>The time of the most recent override in the user's prefered time zone.</returns>
    internal display utcdatetime latestOverrideTime()
    {
        ChargeOverrideHistory chargeOverrideHistory = RetailChargeOverrideAuditing::getLatestChargeOverrideHistory(this);

        return DateTimeUtil::applyTimeZoneOffset(chargeOverrideHistory.OverrideTime, DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>latestOverrideReason</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the most recent override reason for this markupTrans record.
    /// </summary>
    /// <returns>The reason for the latest charge override.</returns>
    internal display str latestOverrideReason()
    {
        ChargeOverrideHistory chargeOverrideHistory = RetailChargeOverrideAuditing::getLatestChargeOverrideHistory(this);

        return chargeOverrideHistory.OverrideReason;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether misc. charges are already attached to this record specified by tableId
    /// and recid.
    /// </summary>
    /// <param name="tableId">
    /// Table number of record to check if charges are attached.
    /// </param>
    /// <param name="recId">
    /// Record number of record to check if charges are attached.
    /// </param>
    /// <returns>
    /// true if misc charge exists for record; otherwise, false.
    /// </returns>
    static boolean exist(TableId   tableId,
                         RecId     recId)
    {
        if (tableId  &&  recId)
        {
            return (select firstonly RecId from markupTrans
                        index hint TableRecIdIdx
                        where markupTrans.TransTableId  == tableId
                            && markupTrans.TransRecId    == recId
                            && !markupTrans.IsDeleted).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existAutoCharges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether misc. auto charges are already attached to this record specified by tableId
    /// and recid.
    /// </summary>
    /// <param name="_tableId">Table number of record to check if auto charges are attached.</param>
    /// <param name="_recId">Record number of record to check if auto charges are attached.</param>
    /// <returns>true if misc auto charge exists for record; otherwise, false.</returns>
    static boolean  existAutoCharges(TableId _tableId, RecId _recId)
    {
        return _tableId  &&  _recId
            && (select firstonly RecId from MarkupTrans
                    index hint TableRecIdIdx
                    where MarkupTrans.TransTableId == _tableId
                        && MarkupTrans.TransRecId == _recId
                        && MarkupTrans.MCRBrokerContractFee == NoYes::No
                        && !MarkupTrans.IsDeleted).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existAutoChargesTransaction</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean existAutoChargesTransaction(TableId _tableId, RecId _recId)
    {
        return _tableId && _recId
            && (select firstonly RecId from markupTrans
                    index hint TableRecIdIdx
                    where markupTrans.TransTableId == _tableId
                        && markupTrans.TransRecId == _recId
                        && markupTrans.IsAutoCharge == NoYes::Yes
                        && !markupTrans.IsDeleted).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDifferentCurrency</Name>
				<Source><![CDATA[
    static boolean existDifferentCurrency(TableId _tableId, RecId _recId, CurrencyCode _currencyCode)
    {
        MarkupTrans markupTrans;

        if (_tableId && _recId)
        {
            while select markupTrans
                index hint TableRecIdIdx
                where markupTrans.TransTableId  == _tableId
                    && markupTrans.TransRecId    == _recId
                    && !markupTrans.IsDeleted
                    && markupTrans.CurrencyCode  != _currencyCode
            {
                if (markupTrans.isMarkupOfTypeCustVend())
                {
                    return true;
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existLCMarkupTrans_SA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>MarkupTrans</c> table has the allocated letter of credit miscellaneous charge.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID of the related transaction table.
    /// </param>
    /// <param name="_bankLCImportChargeAllocation_SA">
    /// The record ID of the letter of credit miscellaneous charge allocation.
    /// </param>
    /// <returns>
    /// true if the <c>MarkupTrans</c> table has the related record; otherwise, false.
    /// </returns>
    public static boolean existLCMarkupTrans_SA(MarkupTransRefTableId _tableId, RefRecId _bankLCImportChargeAllocation_SA)
    {
        // <GSA>
        if (_tableId == 0)
        {
            return (select firstonly RecId from markupTrans
                    where markupTrans.BankLCImportChargeAllocation_SA == _bankLCImportChargeAllocation_SA
               ).RecId != 0;
        }
        else
        {
            return (select firstonly RecId from markupTrans
                    where markupTrans.TransTableId == _tableId
                        && markupTrans.BankLCImportChargeAllocation_SA == _bankLCImportChargeAllocation_SA
               ).RecId != 0;
        }
        // </GSA>
    }

]]></Source>
			</Method>
			<Method>
				<Name>existOfTypeCustVend_RU</Name>
				<Source><![CDATA[
    public static boolean existOfTypeCustVend_RU(TableId _tableId,
                                                 RecId   _recId)
    {
        MarkupTable markupTable;
        MarkupTrans markupTrans;
        boolean     ret;

        if (_tableId && _recId)
        {
            select firstonly RecId from markupTrans
            exists join markupTable
                where markupTrans.TransTableId  == _tableId                 &&
                      markupTrans.TransRecId    == _recId                   &&
                      markupTable.MarkupCode    == markupTrans.MarkupCode   &&
                      (markupTable.CustType     == MarkupType::CustVend     ||
                       markupTable.VendType     == MarkupType::CustVend);

            ret = markupTrans.RecId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existOrig</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>MarkupTrans</c> table record is associated with an original document.
    /// </summary>
    /// <param name="_origTableId">
    ///    The table ID of the original document.
    /// </param>
    /// <param name="_origRecId">
    ///    The record ID of the original document.
    /// </param>
    /// <returns>
    ///    true if an original document is associated with the <c>MarkupTrans</c> table record; otherwise,
    ///    false.
    /// </returns>
    public static boolean existOrig(TableId _origTableId, RecId _origRecId)
    {
        return _origTableId && _origRecId &&
            (select firstonly RecId from markupTrans
                    where markupTrans.OrigTableId == _origTableId
                       && markupTrans.OrigRecId == _origRecId
                       && !markupTrans.IsDeleted).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existOrigTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a <c>MarkupTrans</c> table record exists for the original document and a
    /// specified transaction.
    /// </summary>
    /// <param name="_origTableId">
    /// The table ID of the original document.
    /// </param>
    /// <param name="_origRecId">
    /// The record ID of the original document.
    /// </param>
    /// <param name="_transTableId">
    /// The table ID of the transaction.
    /// </param>
    /// <param name="_transRecId">
    /// The record ID of the transaction.
    /// </param>
    /// <returns>
    /// true if the original document is associated with the <c>MarkupTrans</c> record and specified
    /// transaction; otherwise, false.
    /// </returns>
    public static boolean existOrigTrans(RefTableId _origTableId, RefRecId _origRecId, RefTableId _transTableId, RefRecId _transRecId)
    {
        return _origTableId && _origRecId && _transTableId && _transRecId &&
            (select firstonly RecId from markupTrans
                    where markupTrans.OrigTableId == _origTableId
                       && markupTrans.OrigRecId == _origRecId
                       && markupTrans.TransTableId == _transTableId
                       && markupTrans.TransRecId == _transRecId
                       && !markupTrans.IsDeleted).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTieredCharges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether any tiered misc. charges associated with an entity.
    /// </summary>
    /// <param name="_tableId">
    /// The <c>TableId</c> of the entity.
    /// </param>
    /// <param name="_recId">
    /// The <c>RecId</c> of the entity.
    /// </param>
    /// <returns>
    /// true if tier charges exist; false otherwise.
    /// </returns>
    public static boolean existTieredCharges(
        TableId         _tableId,
        RecId           _recId)
    {
        MarkupTrans markupTrans;

        select firstonly RecId from markupTrans
        where markupTrans.TransRecId     == _recId
           && markupTrans.TransTableId   == _tableId
           && markupTrans.IsTieredCharge == NoYes::Yes;

        return (markupTrans.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBankLCImportChargeAllocation_SA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>MarkupTrans</c> record of the letter of credit miscellaneous charge allocation.
    /// </summary>
    /// <param name="bankLCImportChargeAllocation_SA">
    /// The record of letter of credit miscellaneous charge allocation.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The record found in the <c>MarkupTrans</c> table.
    /// </returns>
    public static MarkupTrans findByBankLCImportChargeAllocation_SA(
        BankLCImportChargeAllocation_SA bankLCImportChargeAllocation_SA,
        boolean _forUpdate = false)
    {
        // <GSA>
        MarkupTrans markupTrans;

        if (bankLCImportChargeAllocation_SA)
        {
            markupTrans.selectForUpdate(_forUpdate);

            select firstonly markupTrans
                where markupTrans.BankLCImportChargeAllocation_SA == bankLCImportChargeAllocation_SA.RecId;
        }

        return markupTrans;
        // </GSA>
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCustInvoiceLineRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>MarkupTrans</c> record.
    /// </summary>
    /// <param name="_custInvoiceLineIdRefRecId">
    /// The record ID of the <c>CustInvoiceLineIdRef</c> record.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to select the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A value that is used when the table is not automatically concurrent; optional.
    /// </param>
    /// <returns>
    /// A <c>MarkupTrans</c> table buffer.
    /// </returns>

    public static MarkupTrans findByCustInvoiceLineRefId(
        CustInvoiceLineIdRefRecId _custInvoiceLineIdRefRecId ,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        MarkupTrans markupTrans;

        markupTrans.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            markupTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly markupTrans
            where markupTrans.CustInvoiceLineIdRef == _custInvoiceLineIdRefRecId && !markupTrans.IsDeleted;

        return markupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCustnterestTransLineIdRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>Markup</c> table.
    /// </summary>
    /// <param name="_custnterestTransLineIdRefRecId">
    /// The record ID of the <c>CustInterestTransLineIdRef_MarkupTrans</c> record.
    /// </param>
    /// <param name="_forupdate">
    /// A boolean value that indicates whether to update the record.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>CustInvoiceLine</c> table; otherwise, an empty record.
    /// </returns>
    public static MarkupTrans findByCustnterestTransLineIdRef(RecId       _custnterestTransLineIdRefRecId ,
                                                  boolean                 _forupdate = false,
                                                  ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustInterestTransLineIdRef_MarkupTrans  custInterestTransLineIdRef;
        MarkupTrans                             markupTrans;

        custInterestTransLineIdRef.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custInterestTransLineIdRef.concurrencyModel(_concurrencyModel);
        }

        select firstonly markupTrans
            join RecId from custInterestTransLineIdRef
                where   custInterestTransLineIdRef.RecId == _custnterestTransLineIdRefRecId &&
                        custInterestTransLineIdRef.TransRecId == markupTrans.TransRecId &&
                        custInterestTransLineIdRef.TransTableId == markupTrans.TransTableId &&
                        custInterestTransLineIdRef.LineNum_MarkupTrans == markupTrans.LineNum;

        return markupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>MarkupTrans</c> record.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    ///    A <c>SourceDocumentLine</c> record RecId.
    /// </param>
    /// <param name="_update">
    /// True if the record being retrieved will be updated; otherwise, false.
    /// </param>
    /// <returns>
    ///    A <c>MarkupTrans</c> record.
    /// </returns>
    static public MarkupTrans findBySourceDocumentLine(RefRecId _sourceDocumentLine, boolean _update = false)
    {
        MarkupTrans markupTrans;

        markupTrans.selectForUpdate(_update);

        select firstonly crossCompany markupTrans
                where markupTrans.SourceDocumentLine == _sourceDocumentLine;

        return markupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustomsValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds customs value of markup transaction.
    /// </summary>
    /// <param name="_tableId">
    /// The tableId.
    /// </param>
    /// <param name="_recId">
    /// The recId.
    /// </param>
    /// <returns>
    /// Returns the instance of the <c>MarkupValue</c> class.
    /// </returns>
    public static MarkupValue findCustomsValue_IN(TableId     _tableId,
                                                  RecId       _recId)
    {
        MarkupTrans markupTrans;
        AmountCur   calculatedAmountLoc;

        if (_tableId && _recId)
        {
            while select CalculatedAmount, CurrencyCode from markupTrans
                   where   markupTrans.TransRecId      == _recId
                        && markupTrans.TransTableId    == _tableId
            {
                calculatedAmountLoc += CurrencyExchangeHelper::curAmount2CurAmount(abs(markupTrans.CalculatedAmount), markupTrans.CurrencyCode, CustInvoiceTrans::findRecId(_recId).CurrencyCode);
            }
        }
        return calculatedAmountLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrigTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>MarkupTrans</c> record for the original document and a specified transaction.
    /// </summary>
    /// <param name="_origTableId">
    /// The table ID of the original document.
    /// </param>
    /// <param name="_origRecId">
    /// The record ID of the original document.
    /// </param>
    /// <param name="_transTableId">
    /// The table ID of the transaction.
    /// </param>
    /// <param name="_transRecId">
    /// The record ID of the transaction.
    /// </param>
    /// <param name="_update">
    /// true if the record being retrieved will be updated; otherwise, false.
    /// </param>
    /// <returns>
    /// The <c>MarkupTrans</c> record associated with the original document and specified transaction, if
    /// one exists.
    /// </returns>
    public static MarkupTrans findOrigTrans(RefTableId _origTableId, RefRecId _origRecId, RefTableId _transTableId, RefRecId _transRecId, boolean _update = false)
    {
        MarkupTrans markupTrans;

        if (_origTableId && _origRecId && _transTableId && _transRecId)
        {
            markupTrans.selectForUpdate(_update);

            select firstonly markupTrans
                    where markupTrans.OrigTableId == _origTableId &&
                          markupTrans.OrigRecId == _origRecId &&
                          markupTrans.TransTableId == _transTableId &&
                          markupTrans.TransRecId == _transRecId &&
                         !markupTrans.IsDeleted;
        }

        return markupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPurchLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>MarkupTrans</c> table for the specified recid and table id.
    /// </summary>
    /// <param name="_tableId">
    /// The unique table id to find.
    /// </param>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <returns>
    /// A buffer containing <c>MarkupTrans</c> table.
    /// </returns>
    public static MarkupTrans findPurchLine_IN(TableId _tableId,
                                               RecId   _recId)
    {
        MarkupTrans markupTrans;

        if (_tableId && _recId)
        {
            select firstonly markupTrans
                   where markupTrans.TransTableId   == _tableId
                      && markupTrans.TransRecId     == _recId;
        }

        return markupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static MarkupTrans findRecId(RecId _recId, boolean _update = false, boolean _skipSoftDeleted = true)
    {
        MarkupTrans  markupTrans;

        if (_recId)
        {
            markupTrans.selectForUpdate(_update);

            select firstonly markupTrans
                   where markupTrans.RecId == _recId;
        }

        if (_skipSoftDeleted && markupTrans.IsDeleted)
        {
            markupTrans = null;
        }

        return markupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId_W</Name>
				<Source><![CDATA[
    public static MarkupTrans findRecId_W(RecId   _recId,
                                          boolean _update = false)
    {
        MarkupTrans markupTrans;

        markupTrans.selectForUpdate(_update);

        if (_recId)
        {
            select firstonly markupTrans
                   index hint RecId
                   where markupTrans.RecId == _recId;
        }

        return markupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSumValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>MarkupTrans</c> table for the specified recid, table id and markup code.
    /// </summary>
    /// <param name="_tableId">
    /// The unique table id to find.
    /// </param>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_markupCode">
    /// The markup code to find.
    /// </param>
    /// <returns>
    /// Returns markup value if exist.
    /// </returns>
    public static MarkupValue findSumValue_IN(TableId    _tableId,
                                             RecId       _recId,
                                             MarkupCode  _markupCode)
    {
        MarkupTrans markupTrans;

        if (_tableId && _recId && _markupCode)
        {
            select sum(Value) from markupTrans
                where markupTrans.TransRecId    == _recId   &&
                      markupTrans.TransTableId  == _tableId &&
                      markupTrans.MarkupCode    == _markupCode;
        }
        else if (_tableId && _recId && !_markupCode)
        {
            select sum(Value) from markupTrans
                where markupTrans.TransRecId    == _recId   &&
                      markupTrans.TransTableId  == _tableId;
        }
        return markupTrans.Value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findValue</Name>
				<Source><![CDATA[
    static MarkupTrans findValue(TableId   _tableId,
                                 RecId     _recId,
                                 boolean    update = false)
    {
        MarkupTrans markupTrans;

        markupTrans.selectForUpdate(update);

        if (_tableId  &&  _recId)
        {
            select firstonly markupTrans
                where markupTrans.TransTableId == _tableId
                    && markupTrans.TransRecId == _recId
                    && !markupTrans.IsDeleted;
        }

        return markupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalculatedAmountRepresentable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the calculated amount representable for calculation and user exposal.
    /// </summary>
    /// <returns>
    /// Calculated amount representable for calculation and user exposal.
    /// </returns>
    public AmountCur getCalculatedAmountRepresentable()
    {
        AmountCur ret;

        if (this.CalculatedAmount != 0)
        {
            // Handle +/- sign since the persisted calculated charge amount +/- sign is not logical.
            if ((this.CalculatedAmount < 0 && this.Value < 0)
               || (this.CalculatedAmount > 0 && this.Value > 0))
            {
                ret = this.CalculatedAmount;
            }
            else
            {
                ret = this.CalculatedAmount*-1;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemMiscChargesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Item miscellaneous charges calculated amount.
    /// </summary>
    /// <param name="_tableRefRecId">
    /// Table Reference ID.
    /// </param>
    /// <param name="_refRecId">
    /// Record reference ID.
    /// </param>
    /// <param name="_transCurrency">
    /// Specifies the transaction currency; optional.
    /// </param>
    /// <param name="_exchRatesTriangulation">
    /// Specifies whether exchange rates should be included in triangulation; optional.
    /// </param>
    /// <param name="_exchRate">
    /// Specifies value of exchange rate; optional.
    /// </param>
    /// <param name="_exchRateSecond">
    /// Specifies value of secondary exchange rate; optional.
    /// </param>
    /// <returns>
    /// Total calculated amount for miscellaneous charges of type Item.
    /// </returns>
    public static AmountMST getItemMiscChargesAmount(
        MarkupTransRefTableId _tableRefRecId,
        MarkupTransRefRecId _refRecId,
        CurrencyCode _transCurrency = '',
        ExchRatesTriangulation _exchRatesTriangulation = UnknownNoYes::Unknown,
        ExchRate _exchRate = 0,
        ExchRate _exchRateSecond = 0)
    {
        MarkupTrans markupTrans;
        MarkupTable markupTable;
        AmountMST amount;
        AmountMST tempAmount;
        CurrencyExchangeHelper currencyExchangeHelper;
        CurrencyCode accountingCurrency = Ledger::accountingCurrency(CompanyInfo::findDataArea(curext()).RecId);

        // MarkupType Item can only be on the CustType (debit) side.
        // if 'Apply US Taxation rule' is enabled on TaxParameters
        // then CalculatedAmount field would include taxes associated with Miscellaneous charge line.

        if (MarkupTrans::isMarkupTransSalesRelated(_tableRefRecId))
        {
            // Since Item is always CustType and in sales related scenario the sign is negative on CalculatedAmount.
            while select CurrencyCode, TransDate, sum(CalculatedAmount) from markupTrans
                group by CurrencyCode, TransDate
                where markupTrans.TransTableId == _tableRefRecId
                && markupTrans.TransRecId == _refRecId
                && !markupTrans.IsDeleted
                && markupTrans.Voucher
            exists join markupTable
                where markupTable.ModuleType == markupTrans.ModuleType
                    && markupTable.MarkupCode == markupTrans.MarkupCode
                    && markupTable.CustType == MarkupType::Item
            {
                amount -= MarkupTrans::calcMarkupTransAmount(
                    accountingCurrency,
                    _transCurrency,
                    markupTrans.CurrencyCode,
                    markupTrans.CalculatedAmount,
                    markupTrans.TransDate,
                    _exchRatesTriangulation,
                    _exchRate,
                    _exchRateSecond);
            }
        }
        else
        {
            while select CurrencyCode, TransDate, sum(CalculatedAmount) from markupTrans
                group by CurrencyCode, TransDate
                where markupTrans.TransTableId == _tableRefRecId
                && markupTrans.TransRecId == _refRecId
                && !markupTrans.IsDeleted
                && markupTrans.Voucher
            exists join markupTable
                where markupTable.ModuleType == markupTrans.ModuleType
                    && markupTable.MarkupCode == markupTrans.MarkupCode
                    && markupTable.CustType == MarkupType::Item
                    && markupTable.VendType == MarkupType::CustVend
            {
                amount += MarkupTrans::calcMarkupTransAmount(
                    accountingCurrency,
                    _transCurrency,
                    markupTrans.CurrencyCode,
                    markupTrans.CalculatedAmount,
                    markupTrans.TransDate,
                    _exchRatesTriangulation,
                    _exchRate,
                    _exchRateSecond);
            }

            while select CurrencyCode, TransDate, sum(CalculatedAmount) from markupTrans
                group by CurrencyCode, TransDate
                where markupTrans.TransTableId == _tableRefRecId
                && markupTrans.TransRecId == _refRecId
                && !markupTrans.IsDeleted
                && markupTrans.Voucher
            exists join markupTable
                    where markupTable.ModuleType == markupTrans.ModuleType
                        && markupTable.MarkupCode == markupTrans.MarkupCode
                        && markupTable.CustType == MarkupType::Item
                        && markupTable.VendType != MarkupType::CustVend
            {
                amount += MarkupTrans::calcMarkupTransAmount(
                    accountingCurrency,
                    _transCurrency,
                    markupTrans.CurrencyCode,
                    markupTrans.CalculatedAmount,
                    markupTrans.TransDate,
                    _exchRatesTriangulation,
                    _exchRate,
                    _exchRateSecond);
            }
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMarkupTransAmount</Name>
				<Source><![CDATA[
    private static AmountMST calcMarkupTransAmount(
        CurrencyCode _accountingCurrency,
        CurrencyCode _transactionCurrency,
        CurrencyCode _markupTransCurrencyCode,
        AmountMST _markupTransCalculatedAmount,
        TransDate _markupTransTransDate,
        ExchRatesTriangulation _exchRatesTriangulation,
        ExchRate _exchRate,
        ExchRate _exchRateSecond)
    {
        AmountMST markupTransAmount;

        if (_accountingCurrency == _markupTransCurrencyCode)
        {
            markupTransAmount = _markupTransCalculatedAmount;
        }
        else
        {
            if (_markupTransCurrencyCode == _transactionCurrency)
            {
                markupTransAmount = CurrencyExchangeHelper::mstAmount(_markupTransCalculatedAmount, _markupTransCurrencyCode, _markupTransTransDate,
                                                            _exchRatesTriangulation, _exchRate, _exchRateSecond);
            }
            else
            {
                CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), _markupTransTransDate);
                markupTransAmount = currencyExchangeHelper.calculateTransactionToAccounting(_markupTransCurrencyCode, _markupTransCalculatedAmount, true);
            }
        }

        return markupTransAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineNumber_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets line number of a markup trans line.
    /// </summary>
    /// <returns>
    /// Line number of the markup trans line.
    /// </returns>
    public TradeLineNumber getLineNumber_MY()
    {
        const TradeLineNumber LineNumberInterval = 10;

        MarkupTrans markupTransLoc;

        select count(RecId) from markupTransLoc
            where markupTransLoc.TransTableId == this.TransTableId
                && markupTransLoc.TransRecId  == this.TransRecId
                && markupTransLoc.LineNum     <= this.LineNum;

        return LineNumberInterval * markupTransLoc.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkupRecIdsBySource</Name>
				<Source><![CDATA[
    public static SetEnumerator getMarkupRecIdsBySource(TableId _sourceTableId, RecId _sourceRecId)
    {
        Set markupSet = SysTransactionScopeCache::get(tableStr(MarkupTrans), [_sourceTableId, _sourceRecId], null);
        if (!markupSet)
        {
            markupSet = new Set(Types::Int64);

            MarkupTrans markupTrans;
            while select RecId from markupTrans where
                markupTrans.TransRecId == _sourceRecId &&
                markupTrans.TransTableId == _sourceTableId &&
                !markupTrans.IsDeleted
            {
                markupSet.add(markupTrans.RecId);
            }

            SysTransactionScopeCache::set(tableStr(MarkupTrans), [_sourceTableId, _sourceRecId], markupSet);
        }

        SetEnumerator markupSetEnumerator = markupSet.getEnumerator();
        return markupSetEnumerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkupRecIdsBySourceSortedByPosition</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static ListEnumerator getMarkupRecIdsBySourceSortedByPosition(TableId _sourceTableId, RecId _sourceRecId)
    {
        str scopeName = tableStr(MarkupTrans) + '_SortedByPosition';

        List markupList = SysTransactionScopeCache::get(scopeName, [_sourceTableId, _sourceRecId], null);
        if (!markupList)
        {
            markupList = new List(Types::Int64);

            MarkupTrans markupTrans;
            while select RecId from markupTrans
                order by Position asc
                where markupTrans.TransRecId == _sourceRecId &&
                    markupTrans.TransTableId == _sourceTableId &&
                    !markupTrans.IsDeleted
            {
                markupList.addEnd(markupTrans.RecId);
            }

            SysTransactionScopeCache::set(scopeName, [_sourceTableId, _sourceRecId], markupList);
        }

        ListEnumerator markupListEnumerator = markupList.getEnumerator();
        return markupListEnumerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUniqueMarkupCodes</Name>
				<Source><![CDATA[
    public static void getUniqueMarkupCodes(Set _uniqueMarkupCodes, MarkupTransRefTableId _tableId, MarkupTransRefRecId _refRecId)
    {
        MarkupTrans             markupTrans;

        while select MarkupCode from markupTrans
        where markupTrans.TransTableId == _tableId
        && markupTrans.TransRecId == _refRecId
        && !markupTrans.IsDeleted
        {
            if (!_uniqueMarkupCodes.in(markupTrans.MarkupCode))
            {
                _uniqueMarkupCodes.add(markupTrans.MarkupCode);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasVendorInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the misc. charge is connected to a purchase order invoice.
    /// </summary>
    /// <param name="_tableId">The <c>TableId</c> of the parent record.</param>
    /// <param name="_transRecId">The <c>RecId</c> of the parent record.</param>
    /// <returns>true if the misc. charge is connected to a purchase order invoice</returns>
    public static boolean hasVendorInvoice(TableId _tableId, RefRecId _transRecId)
    {
        switch (_tableId)
        {
            case tableNum(PurchTable):
                return PurchTable::findRecId(_transRecId).isInvoiceMatched();

            case tableNum(PurchLine):
                return PurchLine::findRecId(_transRecId).isInvoiceMatched();

            case tableNum(SalesTable):
                return SalesTable::findRecId(_transRecId).isInterCompanyPOInvoiceMatched();

            case tableNum(SalesLine):
                return SalesLine::findRecId(_transRecId).isInterCompanyOrderLineInvoiceMatched();

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>MarkupTrans</c> record was deleted.
    /// </summary>
    /// <param name="_recId">
    /// A <c>MarkupTrans</c> record record ID.
    /// </param>
    /// <returns>
    /// true if the markup is deleted; otherwise, false.
    /// </returns>
    public static boolean isDeleted(RecId _recId)
    {
        MarkupTrans  markupTrans;

        if (_recId)
        {
            select firstonly IsDeleted from markupTrans
                   where markupTrans.RecId == _recId;
        }

        return markupTrans.IsDeleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBOERelated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>MarkupTrans</c> is BOE journal related.
    /// </summary>
    /// <returns>true if yes; otherwise, false.</returns>
    internal boolean isBOERelated()
    {
        switch (this.TransTableId)
        {
            case tableNum(CustomsVendBOEJour_IN):
            case tableNum(CustomsVendBOETrans_IN):
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMarkupTransSalesRelated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the associated table Id is sales related.
    /// </summary>
    /// <param name="_transTableId">
    /// The table id.
    /// </param>
    /// <returns>
    /// True is the table is sales related else false.
    /// </returns>
    public static boolean isMarkupTransSalesRelated(MarkupTransRefTableId _transTableId)
    {
        switch (_transTableId)
        {
            case tableNum(SalesTable)           :
            case tableNum(SalesLine)            :
            case tableNum(CustInvoiceTable)     :
            case tableNum(CustQuotationJour)    :
            case tableNum(CustQuotationTrans)   :
            case tableNum(CustQuotationConfirmJour):
            case tableNum(CustQuotationConfirmTrans):
            case tableNum(CustConfirmJour)      :
            case tableNum(CustConfirmTrans)     :
            case tableNum(CustInvoiceJour)      :
            case tableNum(CustInvoiceTrans)     :
            case tableNum(SalesBasket)          :
            case tableNum(SalesBasketLine)      :
            case tableNum(SalesQuotationTable)  :
            case tableNum(SalesQuotationLine)   :
            // BeginMod
            case tableNum(WHSLoadLine)          :
            case tableNum(WHSLoadTable)         :
            case tableNum(CustInvoice4PaymJour_RU)  :
            case tableNum(CustInvoice4PaymTrans_RU) :
                return true;

            case tableNum(PurchTable)           :
            case tableNum(PurchLine)            :
            case tableNum(PurchRFQCaseTable)    :
            case tableNum(VendInvoiceInfoTable) :
            case tableNum(VendInvoiceInfoSubTable)    :
            case tableNum(VendInvoiceInfoLine)  :
            case tableNum(PurchRFQCaseLine)     :
            case tableNum(PurchRFQTable)        :
            case tableNum(PurchRFQLine)         :
            case tableNum(PurchReqLine)         :
            case tableNum(PurchReqLineHistory)         :
            case tableNum(VendInvoiceJour)      :
            case tableNum(VendInvoiceTrans)     :
            case tableNum(InventTransferTable)  :
            case tableNum(InventTransferLine)   :
            case tableNum(VendPackingSlipJour)  :
            case tableNum(VendPackingSlipTrans) :
            case tableNum(PurchParmLine):
            case tableNum(PurchParmTable):
            case tableNum(CustomsVendBOEJour_IN):
            case tableNum(CustomsVendBOETrans_IN):
                return false;

            default:
                if (_transTableId == tableNum(CustInvoiceLine) && SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
                {
                    return true;
                }
        }

        throw error(strFmt("@SYS23396", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    static LineNum  lastLineNum(TableId   _transTableId,
                                RecId     _transRecId)
    {
        //The where clause !<buffer>Isdeleted isn't added as soft-deleted line numbers shouldn't be reused.
        return (select maxof(LineNum) from markupTrans
                    index hint TableRecIdIdx
                    where markupTrans.TransTableId  == _transTableId &&
                          markupTrans.TransRecId    == _transRecId).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAllowed</Name>
				<Source><![CDATA[
    static boolean markupAllowed(Common _common)
    {
        boolean             markupAllowed = true;
        SalesTable          salesTable;
        SalesLine           salesLine;
        SalesQuotationTable salesQuotationTable;
        SalesQuotationLine  salesQuotationLine;

        switch (_common.TableId)
        {
            case tableNum(SalesTable):
                salesTable  = _common as SalesTable;
                markupAllowed = salesTable.markupAllowed();
                break;

            case tableNum(SalesLine):
                salesLine   = _common as SalesLine;
                markupAllowed = salesLine.markupAllowed();
                break;

            case tableNum(SalesQuotationTable):
                salesQuotationTable  = _common as SalesQuotationTable;
                markupAllowed = salesQuotationTable.markupAllowed();
                break;

            case tableNum(SalesQuotationLine):
                salesQuotationLine   = _common as SalesQuotationLine;
                markupAllowed = salesQuotationLine.markupAllowed();
                break;

            case tableNum(VendInvoiceInfoTable):
            case tableNum(VendInvoiceInfoSubTable):
            case tableNum(VendInvoiceInfoLine):
                markupAllowed = _common.markupAllowed();
                break;
        }

        return markupAllowed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrExistNotUserOrOverride</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether there exists any charges that is not a user overridden charge
    /// and is not a user added charge.
    /// and recid
    /// </summary>
    /// <param name="_tableId">
    /// Table number of record to check if charges attached.
    /// </param>
    /// <param name="_recId">
    /// Record number of record to check if charges attached.
    /// </param>
    /// <returns>
    /// true if at least one misc charge exists that is not overridden or user generated; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If only user generated misc. charges exist then this function will still return true.
    /// </remarks>
    static boolean mcrExistNotUserOrOverride(TableId   _tableId,
                                             RecId     _recId)
    {
        if (_tableId  &&  _recId)
        {
            return (select firstonly RecId from markupTrans
                        where markupTrans.TransTableId  == _tableId
                           && markupTrans.TransRecId    == _recId
                           && markupTrans.mcrMarkupTransCreatedBy != MCRMarkupTransCreatedBy::User
                           && markupTrans.mcrMiscChargeOverride   != NoYes::Yes
                           && !markupTrans.IsDeleted).RecId != 0;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetSalesRecs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Concatenates the <c>RecId</c> of <c>MarkupTrans</c> records
    /// associated with a <c>SalesTable</c> record and all the <c>SalesLine</c> records
    /// associated with the <c>SalesTable</c> record.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> record to find records for.
    /// </param>
    /// <returns>
    /// List of <c>MarkupTrans</c> recIds belonging to the header and lines on a sales order.
    /// </returns>
    static str mcrGetSalesRecs(SalesTable _salesTable)
    {
        MarkupTrans markupTrans;
        SalesLine   salesLine;
        str         recIds;

        while select RecId from markupTrans
            where markupTrans.TransRecId    == _salesTable.RecId
               && markupTrans.TransTableId  == tableNum(SalesTable)
        {
            recIds += int642str(markupTrans.RecId) + ",";
        }

        while select RecId from salesLine
            where salesLine.SalesId == _salesTable.SalesId
            join RecId from markupTrans
            where markupTrans.TransRecId    == salesLine.RecId
                && markupTrans.TransTableId == tableNum(SalesLine)
        {
            recIds += int642str(markupTrans.RecId) + ",";
        }
        return recIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptCopyTaxGroupToMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Asks the user whether to copy the new tax group to misc. charges.
    /// </summary>
    /// <param name="_tableId">
    /// The <c>TableId</c> of the entity.
    /// </param>
    /// <param name="_recId">
    /// The <c>RecId</c> of the entity.
    /// </param>
    /// <returns>
    /// The choice selected by the user in the prompt.
    /// </returns>
    static DialogButton promptCopyTaxGroupToMarkupTrans(TableId _tableId, RecId _recId)
    {
        DialogButton ret;

        if (MarkupTrans::exist(_tableId, _recId))
        {
            ret = Box::yesYesAllNoCancel(strFmt("@SYS310380", "@SYS5461", "@SYS54733"), DialogButton::Yes);
        }
        else
        {
            ret = DialogButton::No;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptCopyOverrideSalesTaxToMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Asks the user whether to copy the new override sales tax value to header misc. charges.
    /// </summary>
    /// <param name="_tableId">
    /// The <c>TableId</c> of the header table entity.
    /// </param>
    /// <param name="_recId">
    /// The <c>RecId</c> of the header table entity.
    /// </param>
    /// <param name="_isHeaderTable">
    /// A boolean flag to judge if it is for header markup trans table.
    /// </param>
    /// <returns>
    /// The choice selected by the user in the prompt.
    /// </returns>
    internal static DialogButton promptCopyOverrideSalesTaxToMarkupTrans(TableId _tableId, RecId _recId, boolean _isHeaderTable)
    {
        DialogButton ret;

        if (MarkupTrans::exist(_tableId, _recId))
        {
            if (_isHeaderTable)
            {
                ret = Box::yesNoCancel(strFmt("@TaxIntegration:BulkUpdateValueToHeaderCharge", "@TaxIntegration:OverrideSalesTax"), DialogButton::Yes);
            }
            else
            {
                ret = Box::yesNoCancel(strFmt("@TaxIntegration:BulkUpdateValueToLineCharge", "@TaxIntegration:OverrideSalesTax"), DialogButton::Yes);
            }
        }
        else
        {
            ret = DialogButton::No;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptCopyTaxItemGroupToMarkupTrans_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Asks the user whether to copy the new tax item group to misc. charges.
    /// </summary>
    /// <param name="_tableId">
    /// The <c>TableId</c> of the entity.
    /// </param>
    /// <param name="_recId">
    /// The <c>RecId</c> of the entity.
    /// </param>
    /// <returns>
    /// The choice selected by the user in the prompt.
    /// </returns>
    static DialogButton promptCopyTaxItemGroupToMarkupTrans_BR(TableId _tableId, RecId _recId)
    {
        DialogButton ret;

        if (MarkupTrans::exist(_tableId, _recId))
        {
            ret = Box::yesYesAllNoCancel(strFmt("@SYS4081672", "@SYS5461", "@SYS54733"), DialogButton::Yes);
        }
        else
        {
            ret = DialogButton::No;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCallerDatasource</Name>
				<Source><![CDATA[
    //#ISOCountryRegionCodes
    static void updateCallerDatasource(
        Common _common,
        MarkupUseInMatching _useInMatching = NoYes::No,
        boolean _deleteAllJournalLines = false)
    {
        Object          dataSource;
        boolean         useTotalsMatching;

        switch (_common.TableId)
        {
            case tableNum(VendInvoiceInfoTable):
            case tableNum(VendInvoiceInfoSubTable):
            case tableNum(VendInvoiceInfoLine):
                // Get matching flag for 3 VendInvoice tables, then fall through to update datasource
                useTotalsMatching = VendParameters::find().UseTotalPriceMatching == NoYes::Yes;

            case tableNum(PurchReqLine):
            case tableNum(CustInvoiceTable):
            case tableNum(CustInvoiceLine):
            case tableNum(SalesTable):
            case tableNum(SalesLine):
                if (FormDataUtil::isFormDataSource(_common))
                {
                    if (_common.TableId == tableNum(CustInvoiceLine) &&
                        !SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
                    {
                        break;
                    }
                    dataSource = FormDataUtil::getFormDataSource(_common);
                    if (dataSource)
                    {
                        if (formDataSourceHasMethod(dataSource, identifierStr(setTouched)))
                        {
                            dataSource.setTouched();
                        }

                        if (_deleteAllJournalLines && formDataSourceHasMethod(dataSource, identifierStr(setDeleteAllJournalLines)))
                        {
                            dataSource.setDeleteAllJournalLines();
                        }

                        if (formDataSourceHasMethod(dataSource, identifierStr(checkCreditLimit)))
                        {
                            dataSource.checkCreditLimit();
                        }

                        if ((_useInMatching == NoYes::Yes || useTotalsMatching) &&
                            formDataSourceHasMethod(dataSource, identifierStr(modifiedField)))
                        {
                            // Call back to the parent datasource, notifying that no fields changed, but the invoice should be unapproved
                            if (_common.TableId == tablenum(VendInvoiceInfoLine))
                            {
                                dataSource.modifiedField(0, true, true, false);
                            }
                            else
                            {
                                dataSource.modifiedField(0, true);
                            }
                        }

                        if (formDataSourceHasMethod(dataSource, identifierStr(updateBudgetCheckResultDisplay)))
                        {
                            dataSource.updateBudgetCheckResultDisplay();
                        }
                    }
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ])
                        && (   _common.TableId == tableNum(CustInvoiceTable)
                            || _common.TableId == tableNum(CustInvoiceLine)))
                    {
                        new CustFreeInvoiceCalcTotals(_common).calc();
                    }
                }
                break;

            case tableNum(PurchTable):
            case tableNum(PurchLine):
                if ( FormDataUtil::isFormDataSource(_common))
                {
                    dataSource = FormDataUtil::getFormDataSource(_common);

                    if (dataSource)
                    {
                        // Refresh the datasource after the budget check in order to update the budget check results indicator.
                        dataSource.reread();
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the tax group for the misc. charges associated with an entity.
    /// </summary>
    /// <param name="_tableId">
    /// The <c>TableId</c> of the entity.
    /// </param>
    /// <param name="_recId">
    /// The <c>RecId</c> of the entity.
    /// </param>
    /// <param name="_taxGroup">
    /// The new tax group.
    /// </param>
    /// <param name="_origTaxGroup">
    /// The prior tax group for the entity.
    /// </param>
    /// <param name="_dialogButtonResult">
    /// A result which indicates which misc. charges to update.
    /// </param>
    /// <param name="_onlyFixed">
    /// A boolean value indicating whether only misc charges of category <c>Fixed</c> should be updated, optional.
    /// </param>
    /// <remarks>
    /// If the <paramref name="_dialogButtonResult"/> parameter is YesToAll then all misc. charges are updated, if it is Yes then only those with the same original tax group are updated; otherwise, none are updated.
    /// </remarks>
    static void updateTaxGroup(
        TableId         _tableId,
        RecId           _recId,
        TaxGroup        _taxGroup,
        TaxGroup        _origTaxGroup,
        DialogButton    _dialogButtonResult,
        boolean         _onlyFixed = false)
    {
        if (_dialogButtonResult != DialogButton::Yes && _dialogButtonResult != DialogButton::YesToAll)
        {
            return;
        }
        ttsbegin;

        MarkupTrans::doUpdateTaxGroup(
            _tableId,
            _recId,
            _taxGroup,
            _origTaxGroup,
            _dialogButtonResult,
            _onlyFixed);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOverrideSalesTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the override sales tax for the misc. charges associated with an entity.
    /// </summary>
    /// <param name = "_tableId">The <c>TableId</c> of the entity.</param>
    /// <param name = "_recId">The <c>RecId</c> of the entity.</param>
    /// <param name = "_overrideSalesTax">The new override sales tax.</param>
    /// <param name = "_dialogButtonResult">A result which indicates which misc. charges to update.</param>
    /// <param name = "_onlyFixed">A boolean value indicating whether only misc charges of category <c>Fixed</c> should be updated, optional.</param>
    public static void updateOverrideSalesTax(
        TableId _tableId,
        RecId _recId,
        TaxIntegrationOverrideSalesTax _overrideSalesTax,
        DialogButton _dialogButtonResult,
        boolean _onlyFixed = false)
    {
        if (_dialogButtonResult != DialogButton::Yes)
        {
            return;
        }

        ttsbegin;

        MarkupTrans markupTrans;
        MarkupTable markupTable;

        update_recordset markupTrans
        setting
            OverrideSalesTax = _overrideSalesTax
        where markupTrans.TransTableId == _tableId
            && markupTrans.TransRecId == _recId
            && !markupTrans.IsDeleted
            && (!_onlyFixed || markupTrans.MarkupCategory == MarkupCategory::Fixed)
        exists join markupTable
            where markupTable.MarkupCode == markupTrans.MarkupCode
                && markupTable.ModuleType == markupTrans.ModuleType
                // Only update in customer faced scenarios with debit type = customer/vendor,
                // and in vendor faced scenarios with credit type = customer/vendor)
                && ((markupTable.CustType == MarkupType::CustVend
                    && markupTable.ModuleType == MarkupModuleType::Cust)
                    || (markupTable.VendType == MarkupType::CustVend
                        && markupTable.ModuleType == MarkupModuleType::Vend));

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUpdateTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs actual update of the tax group for markup transaction records.
    /// </summary>
    /// <param name="_tableId">The table Id of the related entity.</param>
    /// <param name="_recId">The <c>RecId</c> of the entity.</param>
    /// <param name="_taxGroup">The new tax group.</param>
    /// <param name="_origTaxGroup">The prior tax group for the record.</param>
    /// <param name="_dialogButtonResult">A result which indicates which misc. charges to update.</param>
    /// <param name="_onlyFixed">A boolean value indicating whether only misc charges of category <c>Fixed</c> should be updated, optional.</param>
    protected static void doUpdateTaxGroup(
        TableId         _tableId,
        RecId           _recId,
        TaxGroup        _taxGroup,
        TaxGroup        _origTaxGroup,
        DialogButton    _dialogButtonResult,
        boolean         _onlyFixed = false)
    {
        NoYes parentOverrideSalesTax = MarkupTrans::getOverrideSalesTaxFromParentRecord(_tableId, _recId);
        MarkupTrans markupTrans;
        MarkupTable markupTable;

        update_recordset markupTrans
        setting
            TaxGroup = _taxGroup,
            OverrideSalesTax = parentOverrideSalesTax || markupTrans.OverrideSalesTax
        where markupTrans.TransTableId  == _tableId
            && markupTrans.TransRecId   == _recId
            && !markupTrans.IsDeleted
            && (_dialogButtonResult     == DialogButton::YesToAll
                || markupTrans.TaxGroup == _origTaxGroup)
            && (!_onlyFixed || markupTrans.MarkupCategory == MarkupCategory::Fixed)
        exists join markupTable
            where markupTable.MarkupCode    == markupTrans.MarkupCode
                && markupTable.ModuleType   == markupTrans.ModuleType
                // Only update in customer faced scenarios with debit type = customer/vendor,
                // and in vendor faced scenarios with credit type = customer/vendor)
                && ((markupTable.CustType       == MarkupType::CustVend
                    && markupTable.ModuleType   == MarkupModuleType::Cust)
                    || (markupTable.VendType    == MarkupType::CustVend
                        && markupTable.ModuleType   == MarkupModuleType::Vend));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxItemGroup_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the tax item group for the misc. charges associated with an entity.
    /// </summary>
    /// <param name="_tableId">
    /// The <c>TableId</c> of the entity.
    /// </param>
    /// <param name="_recId">
    /// The <c>RecId</c> of the entity.
    /// </param>
    /// <param name="_taxItemGroup">
    /// The new tax item group.
    /// </param>
    /// <param name="_origTaxItemGroup">
    /// The prior tax item group for the entity.
    /// </param>
    /// <param name="_dialogButtonResult">
    /// A result which indicates which misc. charges to update.
    /// </param>
    /// <param name="_onlyFixed">
    /// A boolean value indicating whether only misc charges of category <c>Fixed</c> should be updated, optional.
    /// </param>
    /// <remarks>
    /// If the <paramref name="_dialogButtonResult"/> parameter is YesToAll then all misc. charges are updated, if it is Yes then only those with the same original tax item group are updated; otherwise, none are updated.
    /// </remarks>
    static void updateTaxItemGroup_BR(
        TableId         _tableId,
        RecId           _recId,
        TaxItemGroup    _taxItemGroup,
        TaxItemGroup    _origTaxItemGroup,
        DialogButton    _dialogButtonResult,
        boolean         _onlyFixed = false)
    {
        if (_dialogButtonResult != DialogButton::Yes && _dialogButtonResult != DialogButton::YesToAll)
        {
            return;
        }

        ttsbegin;

        MarkupTrans::doUpdateTaxItemGroup_BR(
            _tableId,
            _recId,
            _taxItemGroup,
            _origTaxItemGroup,
            _dialogButtonResult,
            _onlyFixed);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUpdateTaxItemGroup_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs actual update of the tax item group for markup transaction records.
    /// </summary>
    /// <param name="_tableId">The table Id of the related entity.</param>
    /// <param name="_recId">The <c>RecId</c> of the entity.</param>
    /// <param name="_taxItemGroup">The new tax item group.</param>
    /// <param name="_origTaxItemGroup">The prior tax item group for the record.</param>
    /// <param name="_dialogButtonResult">A result which indicates which misc. charges to update.</param>
    /// <param name="_onlyFixed">A boolean value indicating whether only misc charges of category <c>Fixed</c> should be updated.</param>
    protected static void doUpdateTaxItemGroup_BR(
        TableId         _tableId,
        RecId           _recId,
        TaxItemGroup    _taxItemGroup,
        TaxItemGroup    _origTaxItemGroup,
        DialogButton    _dialogButtonResult,
        boolean         _onlyFixed = false)
    {
        MarkupTrans markupTrans;
        MarkupTable markupTable;

        update_recordset markupTrans
        setting
            TaxItemGroup = _taxItemGroup
        where markupTrans.TransTableId  == _tableId
            && markupTrans.TransRecId   == _recId
            && !markupTrans.IsDeleted
            && (_dialogButtonResult         == DialogButton::YesToAll
                || markupTrans.TaxItemGroup == _origTaxItemGroup)
            && (!_onlyFixed || markupTrans.MarkupCategory == MarkupCategory::Fixed)
        exists join markupTable
            where markupTable.MarkupCode    == markupTrans.MarkupCode
                && markupTable.ModuleType   == markupTrans.ModuleType
                // Only update in customer faced scenarios with debit type = customer/vendor,
                // and in vendor faced scenarios with credit type = customer/vendor)
                && ((markupTable.CustType       == MarkupType::CustVend
                    && markupTable.ModuleType   == MarkupModuleType::Cust
                     )
                    || (markupTable.VendType    == MarkupType::CustVend
                    && markupTable.ModuleType   == MarkupModuleType::Vend
                ));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getICSOOrigChargeFromICPOVirtualCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the original charge in the intercompany sales order (ICSO) that, during invoice posting,
    /// generated the current virtual charge in the intercompany purchase order (ICPO).
    /// </summary>
    /// <returns>
    /// A MarkupTrans record for the charge in the ICSO that generated this virtual charge.
    /// If the method is invoked through a charge that it is not an
    /// intercompany virtual charge, it returns an empty buffer.
    /// </returns>
    /// <remarks>
    /// A virtual charge is created as a fixed charge with its keep flag set to no and it only occurs for charges
    /// in ICPOs. However, this is not enough to ensure that this is a virtual charge (see method isIntercompanyVirtualCharge
    /// for more information) and we need to retrieve the original charge in the ICSO to be sure. From the charge in the ICPO
    /// that we suspect is a virtual charge, we can retrieve the charge posted in the ICSO invoice, and from this one,
    /// the original charge in the sales order line or header.
    /// </remarks>
    public MarkupTrans getICSOOrigChargeFromICPOVirtualCharge()
    {
        MarkupTrans icsoInvoiceMarkupTrans, icsoMarkupTrans;

        if (this.InterCompanyInvoiceId
                && this.MarkupCategory == MarkupCategory::Fixed
                && this.Keep           == NoYes::No
                && (this.TransTableId  == tableNum(PurchLine) || this.TransTableId == tableNum(PurchTable))
            )
        {
            select firstOnly crossCompany origRecId from icsoInvoiceMarkupTrans
                where icsoInvoiceMarkupTrans.RecId == this.InterCompanyRefRecId
                    join icsoMarkupTrans
                        where icsoMarkupTrans.RecId == icsoInvoiceMarkupTrans.OrigRecId;
        }

        return icsoMarkupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIntercompanyVirtualCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// If this charge has been created just for synchronization purposes between Intercompany Purchase Order and
    /// Intercompany Sales Order, it should be skipped during tax calculation, should not create an entry in
    /// source document framework and it should not revert the confirmed state in the ICPO.
    /// </summary>
    /// <returns>
    /// true if current record is a virtual charge used for synchronization purposes between intercompany orders; otherwise, false.
    /// </returns>
    /// <remarks>
    /// When the ICSO is invoiced, any charge in the ICPO that is not fixed (keep = yes) gets re-created as a fixed charge with
    /// keep set to no and the appropriate fixed value to make synchronization and invoicing processes easier.
    /// The original charge, which has keep set to yes, cannot be removed and the ICPO ends with two
    /// charge records representing the same charge. This is what we call intercompany virtual charge.
    /// </remarks>
    public boolean isIntercompanyVirtualCharge()
    {
        return this.getICSOOrigChargeFromICPOVirtualCharge().Keep == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInterCompanyAndPercentCategory</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal  boolean isInterCompanyAndPercentCategory()
    {
        if ((   this.TransTableId == tableNum(SalesTable)
             || this.TransTableId == tableNum(PurchTable))
            && this.InterCompanyCompanyId
            && this.InterCompanyRefRecId
            && this.MarkupCategory == MarkupCategory::Percent)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetCallerReferenceFromRFQJourToRFQTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// When adding charge in Request for quotation reply form, the caller record is reference to request for quotation table or line,
    /// this means that charge record is link to request for quotation table or line, so need to reset caller reference record back to
    /// request for quotation table or line when opening charge from in Request for Quotation journals form.
    /// </summary>
    /// <param name="_callerTableId">
    /// The <c>TableId</c> of the entity.
    /// </param>
    /// <param name="_callerRecId">
    /// The <c>RecId</c> of the entity.
    /// </param>
    /// <returns>
    /// The container contains the reference table Id and record Id.
    /// </returns>
    public static container resetCallerReferenceFromRFQJourToRFQTable(TableId _callerTableId, RecId _callerRecId)
    {
        VendRFQJour     vendRFQJour;
        VendRFQTrans    vendRFQTrans;
        PurchRfqLine    purchRfqLine;
        TableId         callerTableId = _callerTableId;
        RecId           callerRecId   = _callerRecId;

        switch(_callerTableId)
        {
            case tableNum(VendRFQJour)  :
                select firstonly vendRFQJour
                            where vendRFQJour.RecId == _callerRecId;

                callerRecId = vendRFQJour.purchRFQTable().RecId;
                callerTableId = tableNum(PurchRFQTable);
                break;
            case tableNum(VendRFQTrans) :
                select firstonly RecId from purchRfqLine
                            exists join vendRFQTrans
                            where vendRFQTrans.RecId   == _callerRecId
                               && vendRFQTrans.RFQId   == purchRfqLine.RFQId
                               && VendRFQTrans.LineNum == purchRfqLine.LineNum;

                callerTableId = tableNum(PurchRfqLine);
                callerRecId = purchRfqLine.RecId;
                break;
        }

        return [callerTableId, callerRecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction header to which <c>MarkupTrans</c> record is attached
    /// </summary>
    /// <returns>
    /// The transaction header table buffer
    /// </returns>
    private SalesPurchJournalTable salesPurchJournalTable()
    {
        SalesPurchJournalTable   transHeader;
        SalesPurchJournalLine    transLine;

        if (this.TransTableId && this.TransRecId)
        {
            transLine = SalesPurchJournalLine::findRecId(this.TransTableId, this.TransRecId);

            if (transLine)
            {
                transHeader = transLine.SalesPurchJournalLine::salesPurchJournalTable();
            }
        }

        return transHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// If this is a charge on a salesLine, this will return the line number of that line; otherwise this will return 0.
    /// </summary>
    internal display str salesLineNum()
    {
        SalesLine salesLine;

        if (this.TransTableId == tableNum(SalesLine))
        {
            select firstonly LineNum from salesLine
                where salesLine.RecId == this.TransRecId;

            return strFmt('%1', salesLine.LineNum);
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChargesValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets sum of charges of line to which <c>MarkupTrans</c> record is attached.
    /// </summary>
    /// <param name="_refTableId">
    /// The <c>TableId</c> of the entity.
    /// </param>
    /// <param name="_refRecId">
    /// The <c>RecId</c> of the entity.
    /// </param>
    /// <param name="_taxGroup">
    /// The <c>TaxGroup</c> of the entity.
    /// </param>
    /// <param name="_taxItemGroup">
    /// The <c>TaxItemGroup</c> of the entity.
    /// </param>
    /// <returns>
    /// Sum of charges value of line.
    /// </returns>
    public static MarkupValue getChargesValue(
        RefTableId _refTableId,
        RefRecId _refRecId,
        TaxGroup _taxGroup,
        TaxItemGroup _taxItemGroup)
    {
        MarkupValue ret;
        MarkupValueCalculationContext_W context = MarkupValueCalculationContext_W::current();
        if (context)
        {
            MarkupTrans markupTrans;
            while select markupTrans
                where markupTrans.TransTableId == _refTableId
                    && markupTrans.TransRecId == _refRecId
                    && markupTrans.TaxGroup == _taxGroup
                    && markupTrans.TaxItemGroup == _taxItemGroup
            {
                ret += markupTrans.signedValue(Markup::calcTrans(
                    markupTrans,
                    context.parmLineQty(),
                    context.parmLineAmount()));
            }
        }
        else
        {
            ret = (select sum(Value) from MarkupTrans
                    where MarkupTrans.TransTableId == _refTableId
                        && MarkupTrans.TransRecId == _refRecId
                        && MarkupTrans.TaxGroup == _taxGroup
                        && MarkupTrans.TaxItemGroup == _taxItemGroup).Value;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetDistributions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes and regenerates the distributions for the current charge.
    /// </summary>
    /// <param name="_fullyDistribute">
    /// The boolean value that indicates if the sourcedocumentline should be fully distributed or not; optional.
    /// </param>
    /// <param name="_caller">
    /// The caller that invoked this method; optional;
    /// </param>
    /// <remarks>
    /// This is used to reset the accounting distributions for the current charge.
    /// </remarks>
    private void resetDistributions(boolean _fullyDistribute = false, SourceDocumentProcessorCaller _caller = null)
    {
        SourceDocumentLine sourceDocumentLine;

        // Check to see that there are existing distributions.
        if (AccountingDistribution::existSourceDocumentLine(this.SourceDocumentLine))
        {
            select firstonly sourceDocumentLine
                where sourceDocumentLine.RecId == this.SourceDocumentLine;

            // set the accounting state to draft
            SourceDocumentLineProcessor::submitSourceDocumentLine(sourceDocumentLine, false, SourceDocumentLineAccountingStatus::Draft, _caller);

            if (_fullyDistribute)
            {
                // set the accounting state back to fully distributed
                SourceDocumentLineProcessor::submitSourceDocumentLine(sourceDocumentLine, false, SourceDocumentLineAccountingStatus::FullyDistributed, _caller);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private static MarkupInstrumentationLogger instrumentationLogger()
    {
        return MarkupInstrumentationLogger::createLogger(tableStr(MarkupTrans));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Markup</ConfigurationKey>
	<DeveloperDocumentation>@SYS124472</DeveloperDocumentation>
	<FormRef>MarkupTrans</FormRef>
	<Label>@SYS13468</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>MarkupCode</TitleField1>
	<TitleField2>Voucher</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>TableRecIdIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProcurementAndSourcing</Modules>
	<PrimaryIndex>TableRecIdIdx</PrimaryIndex>
	<ReplacementKey>TableRecIdIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>MarkupTransMapping</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MarkupTransMapping</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAutogenerated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModuleCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Keep</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectedMarkupTrans</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATDocumentType_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupClassification_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Posted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAutogenerated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWriteCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModuleCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Keep</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalculatedAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyMarkupValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyMarkupUseValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanySkipUpdate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyCompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRMiscChargeOverride</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCROriginalMiscChargeValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRRetailInfocodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRMarkupTransCreatedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRCouponMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRSavedRecID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRSavedTableID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRInstallmentEligible</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRBrokerContractFee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxExemptPriceInclusiveOriginalPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxExemptPriceInclusiveReductionAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Allocated_RU</Name>
			<Label>@GLS104866</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustVendPosted_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemPosted_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Allocation_IN</Name>
			<Label>@SYS26697</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MarkUpAllocateAfter_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AmountsMST_W</Name>
			<Label>@GLS111602</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalculatedAmountMST_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmountMST_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmountExciseMST_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmountVATMST_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BankLCImportMarkupTrans_SA</Name>
			<Label>@SYS332252</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankLCImportChargeAllocation_SA</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Charges_IN</Name>
			<Label>@SYS8371</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NotionalCharges_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NotionalPct_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustInvoiceTemplate</Name>
			<Label>@SYS314183</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustInvoiceLineTemplate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customs_IN</Name>
			<Label>@GLS5007</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomsAssessableValue_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Facture_RU</Name>
			<Label>@GLS104582</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FacturedAmount_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GoodsInRoute_RU</Name>
			<Label>@GLS114756</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GoodsInRouteToDelivery_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GoodsInRouteId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InterCompany</Name>
			<Label>@SYS74106</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterCompanyCompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyInvoiceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InterCompanyInfo</Name>
			<Label>@SYS112324</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterCompanyRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyMarkupValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyMarkupUseValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Ledger</Name>
			<Label>@SYS13356</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Posted</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MCRMiscChargeReturnAdjustment</Name>
			<Label>@MCR21938</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MiscCharges</Name>
			<Label>@SYS8371</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PortalMiscellaneousCharges</Name>
			<Label>@SYS116804</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MarkupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PrecalculatedTaxes_RU</Name>
			<Label>@GLS102674</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxAmountVAT_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxValueVAT_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxVATType_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmountExcise_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWriteCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTaxGroup</Name>
			<Label>@SYS68899</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideSalesTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SourceDocumentLine</Name>
			<Label>@sys132694</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Value</Name>
			<Label>@SYS11762</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalculatedAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchRate_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchrateSecond_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VATDocumentType_RU</Name>
			<Label>@GLS110908</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VATDocumentType_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EInvoice_MX</Name>
			<Label>@SYS341123</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SATProductCode_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SATUnitCode_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CFDIWithholding_MX</Name>
			<Label>@MexicoCFDIWithholding:Withholding</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WithholdingTypeCode_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendInvoiceTemplate</Name>
			<Label>@AccountsPayable:VendorInvoiceTemplate</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceLineTemplate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceTemplate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceTableMarkupTrans</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankLCImportChargeAllocation_SA</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>SA</CountryRegionCodes>
			<ExtendedDataType>BankLCImportChargeAllocationRefRecId_SA</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CalculatedAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS69023</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CalculatedAmountMST_W</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasic</ConfigurationKey>
			<CountryRegionCodes>RU,CZ,EE,HU,LT,LV,PL,FR</CountryRegionCodes>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CorrectedMarkupTrans</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustInvoiceLineIdRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustInvoiceLineIdRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustInvoiceLineTemplate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CustomsAssessableValue_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS5298</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CustVendPosted_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasic</ConfigurationKey>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@GLS103215</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DocumentStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>DocumentStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchRate_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>ExchRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchrateSecond_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>ExchrateSecondary</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FacturedAmount_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FacturedAmount_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FromAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupFromAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GoodsInRouteId_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>GoodsInRouteId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GoodsInRouteToDelivery_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>GoodsInRouteToDelivery_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InterCompanyCompanyId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InterCompanyCompanyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InterCompanyInvoiceId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyInvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InterCompanyMarkupUseValue</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyMarkupUseValue</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InterCompanyMarkupValue</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyMarkupValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InterCompanyRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InterCompanySkipUpdate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeSkipUpdate</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAutoCharge</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IsAutoCharge</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsDeleted</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VersioningIsDeleted</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsModified</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VersioningIsModified</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsTieredCharge</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IsTieredCharge</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ItemPosted_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasic</ConfigurationKey>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS7407</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Keep</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupKeep</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MarkUpAllocateAfter_IN</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<EnumType>MarkupAllocateAfter</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MarkupCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupCategoryType</ExtendedDataType>
			<EnumType>MarkupCategory</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MarkupClassification_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>MarkupClassification_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MarkupCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MCRBrokerContractFee</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>TradeBroker</ConfigurationKey>
			<Label>@MCR33932</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MCRCouponMarkup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>MCRCoupon</ConfigurationKey>
			<Label>@MCR25483</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MCRInstallmentEligible</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRInstallmentEligible</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MCRMarkupTransCreatedBy</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LogisticsBasic</ConfigurationKey>
			<EnumType>MCRMarkupTransCreatedBy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MCRMiscChargeOverride</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>MCRCallCenter</ConfigurationKey>
			<Label>@SYS71906</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MCROriginalMiscChargeValue</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>MCRCallCenter</ConfigurationKey>
			<ExtendedDataType>MarkupValue</ExtendedDataType>
			<Label>@MCR11296</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRReasonCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>MCRCallCenter</ConfigurationKey>
			<ExtendedDataType>RetailInformationSubcodeId</ExtendedDataType>
			<Label>@SYS63086</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRRetailInfocodeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>MCRCallCenter</ConfigurationKey>
			<ExtendedDataType>RetailInfocodeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MCRSavedRecID</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>LogisticsBasic</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@MCR27883</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>MCRSavedTableID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LogisticsBasic</ConfigurationKey>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Label>@MCR27881</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ModuleCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupModuleCategory</ExtendedDataType>
			<EnumType>HeadingLine</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ModuleType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupModule</ExtendedDataType>
			<EnumType>MarkupModuleType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NotionalCharges_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS5298</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NotionalPct_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NotionalPct_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OrigRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>MarkupTransOrigRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>OrigTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupTransOrigRefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Posted</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@sys132694</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmountExcise_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountExcise_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmountExciseMST_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountExciseMST_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmountMST_W</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>TaxAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmountVAT_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountVAT_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmountVATMST_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountVATMST_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxAutogenerated</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAutoGenerated</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxValueVAT_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxValueVAT_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxVATType_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>VATType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWriteCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWriteCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ToAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupToAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TransRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>MarkupTransRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TransTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupTransRefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Txt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransactionTextLarge</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Value</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VATDocumentType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PurchBookVATDocumentType_Invoice_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SATProductCode_MX</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ExtendedDataType>SATProductCode_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SATUnitCode_MX</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ExtendedDataType>SATUnitCode_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WithholdingTypeCode_MX</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ExtendedDataType>CFDIWithholdingTypeCode_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MarkupAutoTableRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RetailMarkupAutoRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RetailShippingPromotionDiscount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ConfigurationKey>Retail</ConfigurationKey>
			<ExtendedDataType>DiscPct</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAdvancedLineProrated</Name>
			<ConfigurationKey>Retail</ConfigurationKey>
			<Label>@RetailAutoCharge:IsSalesLineMatchingProrate</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsOverriddenProratedLine</Name>
			<ConfigurationKey>Retail</ConfigurationKey>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MarkupAutoLineRecId</Name>
			<ExtendedDataType>MarkupAutoLineRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsOverriddenLine</Name>
			<ConfigurationKey>Retail</ConfigurationKey>
			<ExtendedDataType>RetailIsOverriddenCharge</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PreviousValue</Name>
			<ConfigurationKey>Retail</ConfigurationKey>
			<ExtendedDataType>MarkupValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxExemptPriceInclusiveOriginalPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTaxExemptOriginalPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxExemptPriceInclusiveReductionAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTaxExemptReductionAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PreviousOverriddenFieldValue</Name>
			<ExtendedDataType>RetailChargeOriginalValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CalculatedProratedAmount</Name>
			<ConfigurationKey>Retail</ConfigurationKey>
			<ExtendedDataType>RetailCalculatedProratedAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideSalesTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntegrationOverrideSalesTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsCompound</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupIsCompound</ExtendedDataType>
			<FeatureClass>AutoChargesSetupSequenceCompoundFeature</FeatureClass>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Sequence</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupSequence</ExtendedDataType>
			<FeatureClass>AutoChargesSetupSequenceCompoundFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SpecificUnitSymbol</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupSpecificUnitSymbol</ExtendedDataType>
			<FeatureClass>AutoChargesSetupLineLevelUnitOfMeasureFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Position</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupPosition</ExtendedDataType>
			<FeatureClass>AutoChargesSetupSequenceCompoundFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>MarkupTaxCharge</Name>
			<ExtendedDataType>MarkupTaxChargePacked</ExtendedDataType>
			<FeatureClass>AutoChargesSetupSequenceCompoundFeature</FeatureClass>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendInvoiceLineTemplate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendInvoiceTemplate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendInvoiceTableMarkupTrans</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TableRecIdIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TransRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InterCompanyRefIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>InterCompanyRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OrigTableRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>OrigTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OrigRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BankLCImportChargeAllocation_SAIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<ConfigurationKey>BankDocument</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BankLCImportChargeAllocation_SA</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>MarkupTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>CorrectedMarkupTrans</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentLine</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Keep</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustInvoiceLineIdRefIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>CustInvoiceLineIdRef</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OrigRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>OrigRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ModuleCodeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ModuleType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MarkupCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VoucherTransDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransTableId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>MarkupTransPerfIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>MCRSavedTableID</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MCRSavedRecID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>MarkupTransMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CalculatedAmount</MapField>
					<MapFieldTo>CalculatedAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CalculatedAmountMST_W</MapField>
					<MapFieldTo>CalculatedAmountMST_W</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustInvoiceLineIdRef</MapField>
					<MapFieldTo>CustInvoiceLineIdRef</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustInvoiceLineTemplate</MapField>
					<MapFieldTo>CustInvoiceLineTemplate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustVendPosted_RU</MapField>
					<MapFieldTo>CustVendPosted_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentStatus</MapField>
					<MapFieldTo>DocumentStatus</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchrateSecond_RU</MapField>
					<MapFieldTo>ExchrateSecond_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRate_RU</MapField>
					<MapFieldTo>ExchRate_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FacturedAmount_RU</MapField>
					<MapFieldTo>FacturedAmount_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FromAmount</MapField>
					<MapFieldTo>FromAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>GoodsInRouteId_RU</MapField>
					<MapFieldTo>GoodsInRouteId_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>GoodsInRouteToDelivery_RU</MapField>
					<MapFieldTo>GoodsInRouteToDelivery_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyCompanyId</MapField>
					<MapFieldTo>InterCompanyCompanyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyInvoiceId</MapField>
					<MapFieldTo>InterCompanyInvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyMarkupUseValue</MapField>
					<MapFieldTo>InterCompanyMarkupUseValue</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyMarkupValue</MapField>
					<MapFieldTo>InterCompanyMarkupValue</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyRefRecId</MapField>
					<MapFieldTo>InterCompanyRefRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanySkipUpdate</MapField>
					<MapFieldTo>InterCompanySkipUpdate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsCompound</MapField>
					<MapFieldTo>IsCompound</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemPosted_RU</MapField>
					<MapFieldTo>ItemPosted_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Keep</MapField>
					<MapFieldTo>Keep</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MarkupCategory</MapField>
					<MapFieldTo>MarkupCategory</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MarkupCode</MapField>
					<MapFieldTo>MarkupCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MarkupTaxCharge</MapField>
					<MapFieldTo>MarkupTaxCharge</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ModuleCategory</MapField>
					<MapFieldTo>ModuleCategory</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ModuleType</MapField>
					<MapFieldTo>ModuleType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrigRecId</MapField>
					<MapFieldTo>OrigRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrigTableId</MapField>
					<MapFieldTo>OrigTableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OverrideSalesTax</MapField>
					<MapFieldTo>OverrideSalesTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Position</MapField>
					<MapFieldTo>Position</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Posted</MapField>
					<MapFieldTo>Posted</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SATProductCode_MX</MapField>
					<MapFieldTo>SATProductCode_MX</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SATUnitCode_MX</MapField>
					<MapFieldTo>SATUnitCode_MX</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Sequence</MapField>
					<MapFieldTo>Sequence</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SpecificUnitSymbol</MapField>
					<MapFieldTo>SpecificUnitSymbol</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxAmount</MapField>
					<MapFieldTo>TaxAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxAmountExciseMST_RU</MapField>
					<MapFieldTo>TaxAmountExciseMST_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxAmountExcise_RU</MapField>
					<MapFieldTo>TaxAmountExcise_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxAmountMST_W</MapField>
					<MapFieldTo>TaxAmountMST_W</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxAmountVATMST_RU</MapField>
					<MapFieldTo>TaxAmountVATMST_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxAmountVAT_RU</MapField>
					<MapFieldTo>TaxAmountVAT_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxAutogenerated</MapField>
					<MapFieldTo>TaxAutogenerated</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxValueVAT_RU</MapField>
					<MapFieldTo>TaxValueVAT_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxVATType_RU</MapField>
					<MapFieldTo>TaxVATType_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWriteCode</MapField>
					<MapFieldTo>TaxWriteCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ToAmount</MapField>
					<MapFieldTo>ToAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransRecId</MapField>
					<MapFieldTo>TransRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransTableId</MapField>
					<MapFieldTo>TransTableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Txt</MapField>
					<MapFieldTo>Txt</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Value</MapField>
					<MapFieldTo>Value</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATDocumentType_RU</MapField>
					<MapFieldTo>VATDocumentType_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Voucher</MapField>
					<MapFieldTo>Voucher</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WithholdingTypeCode_MX</MapField>
					<MapFieldTo>WithholdingTypeCode_MX</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SourceDocumentLineImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>MarkupCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>CalculatedAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankLCImportChargeAllocation_SA</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankLCImportChargeAllocation_SA</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankLCImportChargeAllocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankLCImportTransAllocation_MarkupTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankLCImportChargeAllocation_SA</Name>
					<Field>BankLCImportChargeAllocation_SA</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Common</Name>
			<RelatedTable>Common</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CommonOrig</Name>
			<RelatedTable>Common</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigTableId</Name>
					<Field>OrigTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigRecId</Name>
					<Field>OrigRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustConfirmJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustConfirmJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustConfirmJour</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustConfirmTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustConfirmTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustConfirmTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoice4PaymJour_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoice4PaymJour_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoice4PaymJour_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoice4PaymTrans_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoice4PaymTrans_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoice4PaymTrans_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CustInvoiceLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceLineIdRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceLineIdRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustInvoiceLineIdRef</Name>
					<Field>CustInvoiceLineIdRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceLineTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceLineTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustInvoiceLineTemplate</Name>
					<Field>CustInvoiceLineTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustomsExportAssessableValue_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustomsExportAssessableValue_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustomsExportOrderLine_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustomsExportOrderLine_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustomsImportAssessableValue_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustomsImportAssessableValue_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustQuotationJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustQuotationJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustQuotationJour</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustQuotationTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustQuotationTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustQuotationTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>GoodsInRouteJour_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>GoodsInRouteJour_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>GoodsInRouteId_RU</Name>
					<SourceEDT>GoodsInRouteId_RU</SourceEDT>
					<Field>GoodsInRouteId_RU</Field>
					<RelatedField>GoodsInRouteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GoodsInRouteIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InterCompanyDataArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InterCompanyDataArea</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InterCompanyCompanyId</Name>
					<Field>InterCompanyCompanyId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InterCompanyMarkupTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MarkupTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InterCompanyMarkupTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InterCompanyCompanyId</Name>
					<Field>InterCompanyCompanyId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InterCompanyRefRecId</Name>
					<Field>InterCompanyRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MarkupTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MarkupTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ModuleType</Name>
					<Field>ModuleType</Field>
					<RelatedField>ModuleType</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MarkupCode</Name>
					<Field>MarkupCode</Field>
					<RelatedField>MarkupCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MarkupTrans_Corrected</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MarkupTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CorrectedMarkupTrans</Name>
					<Field>CorrectedMarkupTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MCRCommonSavedRecId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Common</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCRSavedTableID</Name>
					<Field>MCRSavedTableID</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCRSavedRecID</Name>
					<Field>MCRSavedRecID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MCRPriceOverrideReason</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailInformationSubcodeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCRRetailInfocodeId</Name>
					<SourceEDT>RetailInfocodeId</SourceEDT>
					<Field>MCRRetailInfocodeId</Field>
					<RelatedField>infocodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCRReasonCode</Name>
					<SourceEDT>RetailInformationSubcodeId</SourceEDT>
					<Field>MCRReasonCode</Field>
					<RelatedField>subcodeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjInvoiceItem</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjInvoiceItem</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjInvoiceItem</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchLineOrig</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchLineOrig</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigTableId</Name>
					<Field>OrigTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigRecId</Name>
					<Field>OrigRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchParmLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchParmLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchParmSubTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchParmSubTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchParmTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchParmTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchReqLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchReqLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchReqLineHistory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchReqLineHistory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchReqTableHistory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchReqTableHistory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchRFQCaseLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchRFQCaseLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchRFQCaseTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchRFQCaseTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchRFQLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchRFQLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchRFQReplyLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchRFQReplyLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchRFQReplyTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchRFQReplyTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchRFQTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchRFQTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchTableOrig</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchTableOrig</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigTableId</Name>
					<Field>OrigTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigRecId</Name>
					<Field>OrigRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLineOrig</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesLineOrig</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigTableId</Name>
					<Field>OrigTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigRecId</Name>
					<Field>OrigRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesQuotationLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesQuotationLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesQuotationTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesQuotationTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTableOrig</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesTableOrig</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigTableId</Name>
					<Field>OrigTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigRecId</Name>
					<Field>OrigRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SourceDocumentLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDocumentLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SourceDocumentLine_MarkupTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentLine</Name>
					<Field>SourceDocumentLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TmpCustomsInquiryTable_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TmpCustomsInquiryTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TmpExciseInquiryTable_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TmpExciseInquiryTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TmpIndirectTaxInquiryTable_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TmpIndirectTaxInquiryTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TmpServiceTaxInquiryTable_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TmpServiceTaxInquiryTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoice4PaymJour_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoice4PaymJour_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendInvoice4PaymJour_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoice4PaymTrans_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoice4PaymTrans_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendInvoice4PaymTrans_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceInfoLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceInfoLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceInfoSubTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceInfoSubTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceInfoTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceInfoTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendInvoiceJour</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendInvoiceTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendPackingSlipJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>VendPackingSlipJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendPackingSlipTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>VendPackingSlipTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjInvoiceJour</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CFDIWithholdingType_MX</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CFDIWithholdingType_MX</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WithholdingTypeCode_MX</Name>
					<Field>WithholdingTypeCode_MX</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MarkupAutoTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MarkupAutoTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MarkupAutoTableRecId</Name>
					<Field>MarkupAutoTableRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SpecificUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SpecificUnit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecificUnitSymbol</Name>
					<Field>SpecificUnitSymbol</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceLineTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceLineTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceLineTemplate</Name>
					<Field>VendInvoiceLineTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceTemplate</Name>
					<Field>VendInvoiceTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceTableMarkupTransTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceTableMarkupTransTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceTableMarkupTrans</Name>
					<Field>VendInvoiceTableMarkupTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>