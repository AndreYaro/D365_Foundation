<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostListParm</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventCostListParm extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromInventClosing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>InventCostListParm</c> record from the <c>InventClosing</c> record.
    /// </summary>
    /// <param name="_inventClosing">
    /// The <c>InventClosing</c> record from which to initialize the <c>InventCostListParm</c> record.
    /// </param>
    public void initFromInventClosing(InventClosing _inventClosing)
    {
        this.InventClosing = _inventClosing.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventCostListParm</Name>
				<Source><![CDATA[
/// <summary>
    /// Initializes the <c>InventCostListParm</c> record from the <c>InventCostListParm</c> record.
    /// </summary>
    /// <param name="_inventCostListParm">
    /// The <c>InventCostListParm</c> record from which to initialize the <c>InventCostListParm</c> record.
    /// </param>
    public void initFromInventCostListParm(InventCostListParm _inventCostListParm)
    {
        this.HasMarking         = _inventCostListParm.HasMarking;
        this.HasReturn          = _inventCostListParm.HasReturn;
        this.MinOfDateStatus    = _inventCostListParm.MinOfDateStatus;
        this.HasIssues          = _inventCostListParm.HasIssues;
        this.HasReceipts        = _inventCostListParm.HasReceipts;
    }
]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTrans</Name>
				<Source><![CDATA[
/// <summary>
    /// Initializes the <c>InventCostListParm</c> record from the <c>InventTrans</c> record.
    /// </summary>
    /// <param name="_inventTrans">
    /// The <c>InventTrans</c> record from which to initialize the <c>InventCostListParm</c> record.
    /// </param>
    public void initFromInventTrans(InventTrans _inventTrans)
    {
        this.ItemId             = _inventTrans.ItemId;
        this.MinOfDateStatus    = _inventTrans.DateStatus;

        if (_inventTrans.MarkingRefInventTransOrigin)
        {
            this.HasMarking = NoYes::Yes;
        }
        if (_inventTrans.ReturnInventTransOrigin)
        {
            this.HasReturn = NoYes::Yes;
        }
        if (_inventTrans.StatusIssue != StatusIssue::None)
        {
            this.HasIssues = NoYes::Yes;
        }
        else if (_inventTrans.StatusReceipt != StatusReceipt::None)
        {
            this.HasReceipts = NoYes::Yes;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>updateParm</Name>
				<Source><![CDATA[
/// <summary>
    /// Updates the <c>InventCostListParm</c> based on the specified <c>InventTrans</c> record.
    /// </summary>
    /// <param name="_inventTrans">
    /// The <c>InventTrans</c> record.
    /// </param>
    /// <returns>
    /// true if the <c>InventCostListParm</c> record was updated; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The record is updated to determine which processing that is required for the item.
    /// </remarks>
    public boolean updateParm(InventTrans _inventTrans)
    {
        boolean     updated;

        if (this.HasMarking == NoYes::No && _inventTrans.MarkingRefInventTransOrigin)
        {
            this.HasMarking = NoYes::Yes;
            updated = true;
        }
        if (this.HasReturn == NoYes::No && _inventTrans.ReturnInventTransOrigin)
        {
            this.HasReturn = NoYes::Yes;
            updated = true;
        }
        if (this.MinOfDateStatus > _inventTrans.DateStatus)
        {
            this.MinOfDateStatus = _inventTrans.DateStatus;
            updated = true;
        }
        if (this.HasIssues == NoYes::No && _inventTrans.StatusIssue != StatusIssue::None)
        {
            this.HasIssues = NoYes::Yes;
            updated = true;
        }
        if (this.HasReceipts == NoYes::No && _inventTrans.StatusReceipt != StatusReceipt::None)
        {
            this.HasReceipts = NoYes::Yes;
            updated = true;
        }

        return updated;
    }
]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>InventCostListParm</c> table.
    /// </summary>
    /// <param name="_inventClosing">
    /// The RecId of the <c>InventClosing</c> to find.
    /// </param>
    /// <param name="_itemId">
    /// The ItemId to find.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The specified record in the <c>InventCostListParm</c> table if it exists; otherwise, an empty record.
    /// </returns>
    public static InventCostListParm find(
        InventClosingRefRecId   _inventClosing,
        ItemId                  _itemId,
        boolean                 _update = false)
    {
        InventCostListParm  inventCostListParm;

        inventCostListParm.selectForUpdate(_update);

        if (_inventClosing && _itemId)
        {
            select firstonly inventCostListParm
                where inventCostListParm.InventClosing == _inventClosing
                   && inventCostListParm.ItemId == _itemId;
        }

        return inventCostListParm;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS4001030</DeveloperDocumentation>
	<Label>@SYS4001029</Label>
	<TableGroup>TransactionLine</TableGroup>
	<TitleField1>InventClosing</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<ClusteredIndex>InventClosingItemIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<OccEnabled>No</OccEnabled>
	<ReplacementKey>InventClosingItemIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinOfDateStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HasMarking</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HasReturn</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HasReceipts</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HasIssues</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventClosing</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinOfDateStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HasMarking</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HasReturn</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HasReceipts</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HasIssues</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventClosing</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HasMarking</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventCostHasMarking</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HasReturn</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventCostHasReturn</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InventClosing</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventClosingRefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>MinOfDateStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventCostMinOfDateStatus</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HasIssues</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventCostHasIssues</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HasReceipts</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventCostHasReceipts</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventClosingItemIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventClosing</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventClosing</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventClosing</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventClosing</Name>
					<Field>InventClosing</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>