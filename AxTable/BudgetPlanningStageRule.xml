<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanningStageRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetPlanningStageRule extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>BudgetPlanningStageRule</c> table; if not,
    /// an error message is displayed.
    /// </summary>
    /// <param name="_budgetPlanningStageRuleRecId">
    /// The record ID of the <c>BudgetPlanningStageRule</c> record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(BudgetPlanningStageRuleRecId _budgetPlanningStageRuleRecId)
    {
        boolean isExisting = true;

        if (!BudgetPlanningStageRule::exist(_budgetPlanningStageRuleRecId))
        {
            isExisting = checkFailed(strFmt(BudgetPlanningStageRule::txtNotExist(), _budgetPlanningStageRuleRecId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified record exists in the <c>BudgetPlanningStageRule</c> table.
    /// </summary>
    /// <param name="_budgetPlanningStageRuleRecId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false .
    /// </returns>
    public static boolean exist(BudgetPlanningStageRuleRecId _budgetPlanningStageRuleRecId)
    {
        return (BudgetPlanningStageRule::find(_budgetPlanningStageRuleRecId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BudgetPlanningStageRule</c> table.
    /// </summary>
    /// <param name="_budgetPlanningStageRuleRecId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanningStageRule</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanningStageRule find(
        BudgetPlanningStageRuleRecId    _budgetPlanningStageRuleRecId,
        boolean                         _forUpdate = false,
        ConcurrencyModel                _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanningStageRule budgetPlanningStageRule;

        if (_budgetPlanningStageRuleRecId)
        {
            budgetPlanningStageRule.selectForUpdate(_forUpdate);

            if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanningStageRule.concurrencyModel(_concurrencyModel);
            }

            select firstOnly budgetPlanningStageRule
                where budgetPlanningStageRule.RecId == _budgetPlanningStageRuleRecId;
        }

        return budgetPlanningStageRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProcessOrganizationStage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific record in the <c>BudgetPlanningStageRule</c> table.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of a <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_budgetingOrganizationRecId">
    /// The record ID of a <c>OMInternalOrganization</c> record.
    /// </param>
    /// <param name="_budgetPlanningStageRecId">
    /// The record ID of a <c>BudgetPlanningStage</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanningStageRule</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanningStageRule findByProcessOrganizationStage(
        BudgetPlanningProcessRecId  _budgetPlanningProcessRecId,
        BudgetingOrganizationRecId  _budgetingOrganizationRecId,
        BudgetPlanningStageRecId    _budgetPlanningStageRecId,
        boolean                     _forUpdate = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanningStageRule             budgetPlanningStageRule;
        BudgetPlanningWorkflowRecId         workflowRecId;
        BudgetPlanningWorkflowStageRecId    workflowStageRecId;

        if (_budgetPlanningProcessRecId
            && _budgetingOrganizationRecId
            && _budgetPlanningStageRecId)
        {
            workflowRecId = BudgetPlanningProcessAdministration::findByProcessOrganization(
                _budgetPlanningProcessRecId,
                _budgetingOrganizationRecId).BudgetPlanningWorkflow;

            workflowStageRecId = BudgetPlanningWorkflowStage::findByWorkflowStage(
                workflowRecId,
                _budgetPlanningStageRecId).RecId;

            budgetPlanningStageRule = BudgetPlanningStageRule::findByProcessWorkflowStage(
                _budgetPlanningProcessRecId,
                workflowStageRecId,
                _forUpdate,
                _concurrencyModel);
        }

        return budgetPlanningStageRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProcessWorkflowStage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BudgetPlanningStageRule</c> table.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of a <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_budgetPlanningWorkflowStageRecId">
    /// The record ID of a <c>BudgetPlanningWorkflowStage</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanningStageRule</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanningStageRule findByProcessWorkflowStage(
        BudgetPlanningProcessRecId          _budgetPlanningProcessRecId,
        BudgetPlanningWorkflowStageRecId    _budgetPlanningWorkflowStageRecId,
        boolean                             _forUpdate = false,
        ConcurrencyModel                    _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanningStageRule budgetPlanningStageRule;

        if (_budgetPlanningProcessRecId && _budgetPlanningWorkflowStageRecId)
        {
            budgetPlanningStageRule.selectForUpdate(_forUpdate);

            if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanningStageRule.concurrencyModel(_concurrencyModel);
            }

            select firstOnly budgetPlanningStageRule
                where budgetPlanningStageRule.BudgetPlanningProcess       == _budgetPlanningProcessRecId
                   && BudgetPlanningStageRule.BudgetPlanningWorkflowStage == _budgetPlanningWorkflowStageRecId;
        }

        return budgetPlanningStageRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the field on the <c>BudgetPlanningStageRule</c> record.
    /// </summary>
    /// <param name = "_fieldIdToCheck">The id of the field to validate.</param>
    /// <returns>true if the field is valid; otherwise, false.</returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean                 isValid;
        BudgetPlanLayout        budgetPlanLayout;
        BudgetPlanLayoutElement budgetPlanLayoutElement;
        BudgetPlanColumn        budgetPlanColumn;

        isValid = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(BudgetPlanningStageRule, Layout):
                select firstOnly RecId from budgetPlanColumn
                    exists join budgetPlanLayoutElement
                        where budgetPlanLayoutElement.ElementDefinition == budgetPlanColumn.RecId
                            && budgetPlanLayoutElement.Layout           == this.Layout;

                if (!budgetPlanColumn.RecId)
                {
                    isValid = checkFailed("@Budget:LayoutMissingColumnElement");
                }

                if (isValid)
                {
                    select count(RecId) from budgetPlanColumn
                        where budgetPlanColumn.ColumnPeriodLength == BudgetPlanColumnPeriodLength::Period
                            exists join budgetPlanLayoutElement
                            where budgetPlanLayoutElement.ElementDefinition == budgetPlanColumn.RecId
                                && budgetPlanLayoutElement.Layout           == this.Layout
                                && budgetPlanLayoutElement.InWorksheet      == NoYes::Yes;

                    if (budgetPlanColumn.RecId > 1)
                    {
                        isValid = !BudgetPlanOverlappingColumnValidator::checkOverlapExistsWithinLayout(
                                    BudgetPlanOverlappingLayoutValidatorRequest::construct()
                                        .setBudgetPlanLayoutRecId(this.Layout)
                                        .setBudgetCycleRecId(BudgetPlanningProcess::find(this.BudgetPlanningProcess).BudgetCycle)
                                        .setShowLayoutElementOverlapWarning(true));
                    }
                }
                break;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstByLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first <c>BudgetPlanningStageRule</c> that has a reference to the <c>BudgetPlanLayout</c> passed in.
    /// </summary>
    /// <param name = "_budgetPlanLayoutRecId">The reference to the <c>BudgetPlanLayout</c> record.</param>
    /// <returns>The first <c>BudgetPlanningStageRule</c> record with a reference to the <c>BudgetPlanLayout</c> passed in.</returns>
    public static BudgetPlanningStageRule findFirstByLayout(BudgetPlanLayoutRecId _budgetPlanLayoutRecId)
    {
        BudgetPlanningProcess   budgetPlanningProcess;
        BudgetPlanningStageRule budgetPlanningStageRule;

        if (_budgetPlanLayoutRecId)
        {
            select firstOnly budgetPlanningStageRule
                where budgetPlanningStageRule.Layout == _budgetPlanLayoutRecId
                exists join budgetPlanningProcess
                    where budgetPlanningProcess.RecId == budgetPlanningStageRule.BudgetPlanningProcess;
        }

        return budgetPlanningStageRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates associated budget plans when the field on the <c>BudgetPlanningStageRule</c> record is modified.
    /// </summary>
    /// <param name = "_fieldId">The id of the field that was modified.</param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(BudgetPlanningStageRule, Layout):
                if (this.orig().Layout != this.Layout)
                {
                    BudgetPlanAlternateLayout::deleteByStageRule(this.RecId);

                    BudgetPlanLayoutHelper::refreshLayout(
                        BudgetPlanMappingCacheDeleteType::DeleteMappingCacheByLayout,
                        this.orig().Layout,
                        BudgetPlanMappingRefreshType::RefreshByLayout,
                        this.Layout,
                        false);

                    BudgetPlanLineDefaultRowTemplateManager::createDefaultRowTemplateRecords(this.Layout, BudgetPlanningProcess::find(this.BudgetPlanningProcess));
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@GLS70187</DeveloperDocumentation>
	<Label>@GLS70185</Label>
	<SingularLabel>@GLS70186</SingularLabel>
	<TableGroup>Group</TableGroup>
	<TitleField1>BudgetPlanningProcess</TitleField1>
	<TitleField2>BudgetPlanningWorkflowStage</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>BudgetPlanningStageRuleIdx</ClusteredIndex>
	<Modules>Budget</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DeleteAlternateLayout</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>BudgetPlanningStageRule</Relation>
			<Table>BudgetPlanAlternateLayout</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CanAddChildBudgetPlans</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CanAddBudgetPlanLines</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CanModifyBudgetPlanLines</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningWorkflowStage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningProcess</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Layout</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningWorkflowStage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningProcess</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS55776</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningWorkflowStage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CanAddChildBudgetPlans</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CanAddBudgetPlanLines</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CanModifyBudgetPlanLines</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Layout</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningProcess</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningWorkflowStage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetPlanningProcess</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanningProcessRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetPlanningWorkflowStage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanningWorkflowStageRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CanAddBudgetPlanLines</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS70192</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CanAddChildBudgetPlans</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS70190</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CanModifyBudgetPlanLines</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS70194</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Layout</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanLayoutRecId</ExtendedDataType>
			<Label>@Budget:LayoutDisplayName</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BudgetPlanningStageRuleIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BudgetPlanningProcess</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BudgetPlanningWorkflowStage</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetPlanningProcess</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>BudgetPlanningProcess</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetPlanningProcess</Name>
					<Field>BudgetPlanningProcess</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetPlanningWorkflowStage</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BudgetPlanningWorkflowStage</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetPlanningWorkflowStage</Name>
					<Field>BudgetPlanningWorkflowStage</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>StageRuleLayout</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BudgetPlanLayout</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LayoutRecId</Name>
					<Field>Layout</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>