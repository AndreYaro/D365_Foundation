<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationMatchRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankReconciliationMatchRule extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Activates the matching rule.
    /// </summary>
    public void activate()
    {
        if (this.checkCanActivate())
        {
            this.updateActiveStatus(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCanActivate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether current matching rule can be activated.
    /// </summary>
    /// <returns>
    /// False if
    /// 1) In case of match with bank documents action,
    ///     a) Option "Search bank documents" is not checked
    ///     b) Or checked without any criteria to find bank documents;
    /// 2) In case of clear reversal statement lines action,
    ///     a) There is no any criteria to find original statement lines is set up;
    ///     b) Option "Search bank documents" is checked without any criteria to find bank documents.
    /// 3) In case of mark as new transaction action,
    ///     a) There is no any criteria to find statement lines;
    ///     b) Option "Search bank documents" is checked without any criteria to find bank documents.
    /// Otherwise, true.
    /// </returns>
    private boolean checkCanActivate()
    {
        boolean ret = true;
        boolean isBankModernReconciliationFeatureEnabled = FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance());

        switch (this.getMatchActionType())
        {
            case BankReconciliationMatchActionType::Match:
                if (!this.isSearchingMatchingEntry())
                {
                    ret = checkFailed("@GLS222283");
                }

                if (ret
                    && !this.existMatchRuleLineByTypeExcludeReversal(BankReconciliationMatchRuleLineType::Document))
                {
                    if (isBankModernReconciliationFeatureEnabled)
                    {
                        ret = checkFailed(strFmt("@Bank:EmptyCriterionError", strFmt("@CashManagement:DefineMatchingRule", '1')));
                    }
                    else
                    {
                        ret = checkFailed("@GLS222589");
                    }
                }

                if (ret
                    && !(this.validateMatchingType()
                        && this.validateGroupRule(this.BankDocumentGroupRule)
                        && this.validateGroupRule(this.BankStatementGroupRule)))
                {
                    ret = checkFailed("@CashManagement:GroupConditionIsEmpty");
                }

                ret = ret && this.validateRuleFields();

                break;

            case BankReconciliationMatchActionType::Reversal:
                if (!this.existMatchRuleLineByTypeExcludeReversal(BankReconciliationMatchRuleLineType::OrigStatement))
                {
                    if (isBankModernReconciliationFeatureEnabled)
                    {
                        ret = checkFailed(strFmt("@Bank:EmptyCriterionError", "@CashManagement:FindOriginalStatementLines"));
                    }
                    else
                    {
                        ret = checkFailed("@GLS222663");
                    }
                }

                if (this.isSearchingMatchingEntry()
                    && !this.existMatchRuleLineByTypeExcludeReversal(BankReconciliationMatchRuleLineType::Document))
                {
                    if (isBankModernReconciliationFeatureEnabled)
                    {
                        ret = checkFailed(strFmt("@Bank:EmptyCriterionError", "@CashManagement:FindDynamicsAXTransactionsStep3"));
                    }
                    else
                    {
                        ret = checkFailed("@GLS222589");
                    }
                }
                break;

            case BankReconciliationMatchActionType::Adjustment:
                if (isBankModernReconciliationFeatureEnabled)
                {
                    // Change label after BankModernReconciliationFeature becomes mandatory.
                    ret = checkFailed("@Bank:MarkAsNewMatchUnableToActivateError");
                }
                else
                {
                    if (!this.existMatchRuleLineByTypeExcludeReversal(BankReconciliationMatchRuleLineType::Statement))
                    {
                        ret = checkFailed("@GLS222314");
                    }

                    if (this.isSearchingMatchingEntry()
                        && !this.existMatchRuleLineByTypeExcludeReversal(BankReconciliationMatchRuleLineType::Document))
                    {
                        ret = checkFailed("@GLS222600");
                    }
                }

                break;

            case BankReconciliationMatchActionType::Voucher:
                if (!this.existNonSysGenMatchRuleLine(BankReconciliationMatchRuleLineType::GenerateVoucher))
                {
                    ret = checkFailed(strFmt("@Bank:EmptyCriterionError", "@Bank:GenVoucherCondition"));
                }

                break;

            case BankReconciliationMatchActionType::CustPaym:
                if (!this.existNonSysGenMatchRuleLine(BankReconciliationMatchRuleLineType::GenerateCustPaym))
                {
                    ret = checkFailed(strFmt("@Bank:EmptyCriterionError", "@Bank:GenCustPaymCondition"));
                }

                break;

            case BankReconciliationMatchActionType::VendPaym:
                if (!this.existNonSysGenMatchRuleLine(BankReconciliationMatchRuleLineType::GenerateVendPaym))
                {
                    ret = checkFailed(strFmt("@Bank:EmptyCriterionError", "@Bank:GenVendPaymCondition"));
                }

                break;

            case BankReconciliationMatchActionType::SettleCustInv:
                if (!this.existNonSysGenMatchRuleLine(BankReconciliationMatchRuleLineType::SettleCustInvoice))
                {
                    ret = checkFailed(strFmt("@Bank:EmptyCriterionError", "@Bank:SecondStepForSettleConditions"));
                }

                break;
        }

        if (ret
            && isBankModernReconciliationFeatureEnabled
            && BankReconciliationMatchRuleProcessor::isPostingRule(this.MatchActionType))
        {
            if (BankReconciliationMatchRule_PostingInfo::hasPostingInfoForMatchRule(this.RecId))
            {
                ret = this.checkMandatoryFieldsOfPostingParameters();
            }
            else
            {
                ret = checkFailed(strFmt("@Bank:PostingParameterNotExistForPostingRuleError", this.RuleId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMandatoryFieldsOfPostingParameters</Name>
				<Source><![CDATA[
    private boolean checkMandatoryFieldsOfPostingParameters()
    {
        boolean ret = true;
        BankReconciliationMatchRule_PostingInfo postingInfo;
        setPrefix(strFmt("@Bank:ActivateRuleFailsWarning", this.RuleId));
        switch (this.MatchActionType)
        {
            case BankReconciliationMatchActionType::CustPaym:
                while select LegalEntity, CustAccount from postingInfo
                    where postingInfo.BankReconciliationMatchRule == this.RecId
                        && postingInfo.AutoMatchCustAccount == NoYes::No
                        && postingInfo.CustAccount == ''
                {
                    ret = checkFailed(strFmt("@Bank:PostingParametersMandatoryFieldsEmptyWarning",
                        fieldPName(BankReconciliationMatchRule_PostingInfo, CustAccount),
                        "@Bank:CustPaymParameter",
                        CompanyInfo::getDataArea(postingInfo.LegalEntity)));
                }
                break;

            case BankReconciliationMatchActionType::VendPaym:
                while select LegalEntity, VendAccount from postingInfo
                    where postingInfo.BankReconciliationMatchRule == this.RecId
                        && postingInfo.VendAccount == ''
                {
                    ret = checkFailed(strFmt("@Bank:PostingParametersMandatoryFieldsEmptyWarning",
                        fieldPName(BankReconciliationMatchRule_PostingInfo, VendAccount),
                        "@Bank:VendPaymParameter",
                        CompanyInfo::getDataArea(postingInfo.LegalEntity)));
                }
                break;

            case BankReconciliationMatchActionType::Voucher:
                while select LegalEntity, OffsetLedgerDimension from postingInfo
                    where postingInfo.BankReconciliationMatchRule == this.RecId
                        && postingInfo.OffsetLedgerDimension == 0
                {
                    ret = checkFailed(strFmt("@Bank:PostingParametersMandatoryFieldsEmptyWarning",
                        fieldPName(BankReconciliationMatchRule_PostingInfo, OffsetLedgerDimension),
                        "@Bank:VoucherParameter",
                        CompanyInfo::getDataArea(postingInfo.LegalEntity)));
                }
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMatchingType</Name>
				<Source><![CDATA[
    private boolean validateMatchingType()
    {
        boolean ret;
        switch (this.MatchingType)
        {
            case BankReconciliationStmtMatchMathingType::OneToOne:
                ret = !this.BankStatementGroupRule && !this.BankDocumentGroupRule;
                break;

            case BankReconciliationStmtMatchMathingType::OneToMany:
                ret = !this.BankStatementGroupRule && this.BankDocumentGroupRule;
                break;

            case BankReconciliationStmtMatchMathingType::ManyToOne:
                ret = this.BankStatementGroupRule && !this.BankDocumentGroupRule;
                break;

            case BankReconciliationStmtMatchMathingType::ManyToMany:
                ret = this.BankStatementGroupRule && this.BankDocumentGroupRule;
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateGroupRule</Name>
				<Source><![CDATA[
    private boolean validateGroupRule(RecId _groupRule)
    {
        return !_groupRule || BankReconciliationGroupRuleLine::numberOfLinesForRule(_groupRule) > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRuleFields</Name>
				<Source><![CDATA[
    private boolean validateRuleFields()
    {
        boolean ret = true;
        BankReconciliationMatchRuleLine ruleLine;

        while select FieldId, SystemGeneratedType from ruleLine
            group by FieldId, SystemGeneratedType
            where ruleLine.BankReconciliationMatchRule == this.RecId
                && ruleLine.LineType == BankReconciliationMatchRuleLineType::Statement
                && ruleLine.CompareFieldId != 0
                && ruleLine.FieldId != fieldNum(BankReconciliationStatementOpenTmp, BankCurrencyAmount)
        {
            str criteriaTypeName = ruleLine.SystemGeneratedType == BankReconMatchRuleLineSysGeneratedType::None ? "@GLS222291" : "@GLS222242";

            if (this.BankStatementGroupRule && !BankReconciliationGroupRuleLine::fieldExist(this.BankStatementGroupRule, ruleLine.FieldId))
            {
                ret = checkFailed(strFmt("@CashManagement:FieldMustBeAddedToGroupConditionWarning", criteriaTypeName, fieldId2PName(tableNum(BankReconciliationStatementOpenTmp), ruleLine.FieldId), "@CashManagement:BankStmtLine", this.Name));
            }

            if (this.BankDocumentGroupRule && !BankReconciliationGroupRuleLine::fieldExist(this.BankDocumentGroupRule, ruleLine.CompareFieldId))
            {
                ret = checkFailed(strFmt("@CashManagement:FieldMustBeAddedToGroupConditionWarning", criteriaTypeName, fieldId2PName(tableNum(BankReconciliationDocumentOpenTmp), ruleLine.CompareFieldId), "@CashManagement:BankTransLine", this.Name));
            }
        }


        while select FieldId, SystemGeneratedType from ruleLine
            group by FieldId, SystemGeneratedType
            where ruleLine.BankReconciliationMatchRule == this.RecId
                && ruleLine.LineType == BankReconciliationMatchRuleLineType::Document
                && ruleLine.CompareFieldId != 0
                && ruleLine.FieldId != fieldNum(BankReconciliationDocumentOpenTmp, BankCurrencyAmount)
        {
            str criteriaTypeName = ruleLine.SystemGeneratedType == BankReconMatchRuleLineSysGeneratedType::None ? "@GLS222291" : "@GLS222242";

            if (this.BankDocumentGroupRule && !BankReconciliationGroupRuleLine::fieldExist(this.BankDocumentGroupRule, ruleLine.FieldId))
            {
                ret = checkFailed(strFmt("@CashManagement:FieldMustBeAddedToGroupConditionWarning", criteriaTypeName, fieldId2PName(tableNum(BankReconciliationDocumentOpenTmp), ruleLine.FieldId), "@CashManagement:BankTransLine", this.Name));
            }

            if (this.BankStatementGroupRule && !BankReconciliationGroupRuleLine::fieldExist(this.BankStatementGroupRule, ruleLine.CompareFieldId))
            {
                ret = checkFailed(strFmt("@CashManagement:FieldMustBeAddedToGroupConditionWarning", criteriaTypeName, fieldId2PName(tableNum(BankReconciliationStatementOpenTmp), ruleLine.CompareFieldId), "@CashManagement:BankStmtLine", this.Name));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanGroupRule</Name>
				<Source><![CDATA[
    internal void cleanGroupRule()
    {
        RecId documentGroupRule = this.BankDocumentGroupRule;
        RecId statementGroupRule = this.BankStatementGroupRule;

        switch (this.MatchingType)
        {
            case BankReconciliationStmtMatchMathingType::OneToMany:
                documentGroupRule = 0;
                break;

            case BankReconciliationStmtMatchMathingType::ManyToOne:
                statementGroupRule = 0;
                break;

            case BankReconciliationStmtMatchMathingType::ManyToMany:
                documentGroupRule = 0;
                statementGroupRule = 0;
                break;

            default:
                break;
        }

        if (documentGroupRule)
        {
            BankReconciliationGroupRule::find(documentGroupRule, true).delete();
            this.BankDocumentGroupRule = 0;
        }

        if (statementGroupRule)
        {
            BankReconciliationGroupRule::find(statementGroupRule, true).delete();
            this.BankStatementGroupRule = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertAllowedDifferenceExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the allowed difference expression to difference value.
    /// </summary>
    /// <param name="_compareFieldExpression">
    /// The allowed difference expression.
    /// </param>
    /// <param name="_result">
    /// The allowed difference value result.
    /// </param>
    /// <returns>
    /// The allowed difference value.
    /// </returns>
    protected anytype convertAllowedDifferenceExpression(BankReconciliationMatchFieldValue _compareFieldExpression, anytype _result)
    {
        anytype result = _result;
        #BankReconciliationMatchRuleOperator

        str expressionValue = subStr(_compareFieldExpression,
            strLen(#Plus) + 1,
            strLen(_compareFieldExpression) - strLen(#Plus));

        if (typeOf(result) == Types::Integer)
        {
            result = str2int(expressionValue);
        }
        else if (typeOf(result) == Types::Real)
        {
            result = str2num(expressionValue);
        }
        else
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deactivate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deactivates the matching rule.
    /// </summary>
    public void deactivate()
    {
        this.updateActiveStatus(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllMatchRuleLine</Name>
				<Source><![CDATA[
    private void deleteAllMatchRuleLine()
    {
        BankReconciliationMatchRuleLine matchRuleLine;

        delete_from matchRuleLine
            where matchRuleLine.BankReconciliationMatchRule == this.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllSystemGeneratedMatchRuleLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all system generated matching rule line.
    /// </summary>
    private void deleteAllSystemGeneratedMatchRuleLine()
    {
        BankReconciliationMatchRuleLine matchRuleLine;

        delete_from matchRuleLine
            where matchRuleLine.BankReconciliationMatchRule == this.RecId
                && matchRuleLine.SystemGeneratedType != BankReconMatchRuleLineSysGeneratedType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllPostingInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all posting info.
    /// </summary>
    private void deleteAllPostingInfo()
    {
        BankReconciliationMatchRule_PostingInfo postingInfo;

        delete_from postingInfo
            where postingInfo.BankReconciliationMatchRule == this.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSystemGeneratedMatchRuleLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes specified system generated matching rule line.
    /// </summary>
    /// <param name="_sysGeneratedType">
    /// Given system generated type.
    /// </param>
    /// <param name="_lineType">
    /// Given matching rule line type.
    /// </param>
    private void deleteSystemGeneratedMatchRuleLine(
        BankReconMatchRuleLineSysGeneratedType _sysGeneratedType,
        BankReconciliationMatchRuleLineType _lineType)
    {
        BankReconciliationMatchRuleLine matchRuleLine;

        delete_from matchRuleLine
            where matchRuleLine.BankReconciliationMatchRule == this.RecId
                && matchRuleLine.SystemGeneratedType == _sysGeneratedType
                && matchRuleLine.LineType == _lineType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDocumentAllowAmountDifference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets system generated type of "Allowed amount difference" for finding bank documents.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether system generated type of "Allowed amount difference" is set.
    /// </param>
    /// <param name="_value">
    /// The value to set.
    /// </param>
    /// <returns>
    /// True if system generated type of "Allowed amount difference" is set; otherwise, false.
    /// </returns>
    public edit boolean editDocumentAllowAmountDifference(
        boolean _set,
        boolean _value)
    {
        return this.getOrSetSystemGeneratedMatchRuleLine(
            _set,
            _value,
            BankReconciliationMatchRuleLineType::Document,
            BankReconMatchRuleLineSysGeneratedType::AllowedAmountDifference);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDocumentAllowDifferentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets system generated type of "Allowed different days" for finding bank documents.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether system generated type of "Allowed different days" is set.
    /// </param>
    /// <param name="_value">
    /// Given value.
    /// </param>
    /// <returns>
    /// Value to indicate whether system generated type of "Allowed different days" is set.
    /// </returns>
    public edit boolean editDocumentAllowDifferentDate(
        boolean _set,
        boolean _value)
    {
        return this.getOrSetSystemGeneratedMatchRuleLine(
            _set,
            _value,
            BankReconciliationMatchRuleLineType::Document,
            BankReconMatchRuleLineSysGeneratedType::AllowedDateDifference);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDocumentAllowedAmountDifference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets allowed amount difference for finding bank documents.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether allowed amount difference is set.
    /// </param>
    /// <param name="_difference">
    /// Allowed amount difference.
    /// </param>
    /// <returns>
    /// Allowed amount difference.
    /// </returns>
    public edit BankReconAllowedPennyDifference editDocumentAllowedAmountDifference(
        boolean _set,
        BankReconAllowedPennyDifference _difference)
    {
        if (_set)
        {
            this.updateAllowedDifference(
                BankReconciliationMatchRuleLineType::Document,
                BankReconMatchRuleLineSysGeneratedType::AllowedAmountDifference,
                _difference);
        }

        //search the upper limit of the date difference criteria.
        BankReconciliationMatchRuleLine matchRuleLine = BankReconciliationMatchRule::findAllowedDifferenceRuleLine(
            this.RecId,
            BankReconciliationMatchRuleLineType::Document,
            BankReconMatchRuleLineSysGeneratedType::AllowedAmountDifference,
            true);

        BankReconAllowedPennyDifference differenceResult;
        differenceResult = this.convertAllowedDifferenceExpression(matchRuleLine.CompareFieldExpression, differenceResult);

        return differenceResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDocumentAllowedDateDifference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets allowed different days for finding bank documents.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether allowed different days is set.
    /// </param>
    /// <param name="_days">
    /// Allowed different days.
    /// </param>
    /// <returns>
    /// Allowed different days.
    /// </returns>
    public edit BankReconciliationMatchDateDifference editDocumentAllowedDateDifference(
        boolean _set,
        BankReconciliationMatchDateDifference _days)
    {
        BankReconciliationMatchRuleLine matchRuleLine;

        if (_set)
        {
            this.updateAllowedDifference(
                BankReconciliationMatchRuleLineType::Document,
                BankReconMatchRuleLineSysGeneratedType::AllowedDateDifference,
                _days);
        }

        //search the upper limit of the date difference criteria.
        matchRuleLine = BankReconciliationMatchRule::findAllowedDifferenceRuleLine(
            this.RecId,
            BankReconciliationMatchRuleLineType::Document,
            BankReconMatchRuleLineSysGeneratedType::AllowedDateDifference,
            true);

        BankReconciliationMatchDateDifference days;
        days = this.convertAllowedDifferenceExpression(matchRuleLine.CompareFieldExpression, days);

        return days;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDocumentOppositeAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets system generated type of "Opposite amount" for finding bank documents.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether system generated type of "Opposite amount" is set.
    /// </param>
    /// <param name="_value">
    /// Given value.
    /// </param>
    /// <returns>
    /// Value to indicate whether system generated type of "Opposite amount" is set.
    /// </returns>
    public edit boolean editDocumentOppositeAmount(
        boolean _set,
        boolean _value)
    {
        return this.getOrSetSystemGeneratedMatchRuleLine(
            _set,
            _value,
            BankReconciliationMatchRuleLineType::Document,
            BankReconMatchRuleLineSysGeneratedType::OppositeAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDocumentSameBankTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets system generated type of "Map to the same transaction type" for finding bank documents.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether system generated type of "Map to the same transaction type" is set.
    /// </param>
    /// <param name="_value">
    /// Given value.
    /// </param>
    /// <returns>
    /// Value to indicate whether system generated type of "Map to the same transaction type" is set.
    /// </returns>
    public edit boolean editDocumentSameBankTransType(
        boolean _set,
        boolean _value)
    {
        return this.getOrSetSystemGeneratedMatchRuleLine(
            _set,
            _value,
            BankReconciliationMatchRuleLineType::Document,
            BankReconMatchRuleLineSysGeneratedType::SameBankTransType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDocumentSameDocumentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets system generated type of "Same document number" for finding bank documents.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether system generated type of "Same document number" is set.
    /// </param>
    /// <param name="_value">
    /// Given value.
    /// </param>
    /// <returns>
    /// Value to indicate whether system generated type of "Same document number" is set.
    /// </returns>
    public edit boolean editDocumentSameDocumentNumber(
        boolean _set,
        boolean _value)
    {
        return this.getOrSetSystemGeneratedMatchRuleLine(
            _set,
            _value,
            BankReconciliationMatchRuleLineType::Document,
            BankReconMatchRuleLineSysGeneratedType::SameDocumentNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDocumentSamePaymReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets system generated type of "Same payment reference" for finding bank documents.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether system generated type of "Same payment reference" is set.
    /// </param>
    /// <param name="_value">
    /// Given value.
    /// </param>
    /// <returns>
    /// Value to indicate whether system generated type of "Same payment reference" is set.
    /// </returns>
    public edit boolean editDocumentSamePaymReference(
        boolean _set,
        boolean _value)
    {
        return this.getOrSetSystemGeneratedMatchRuleLine(
            _set,
            _value,
            BankReconciliationMatchRuleLineType::Document,
            BankReconMatchRuleLineSysGeneratedType::SamePaymReference);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editMatchActionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits the match action type.
    /// </summary>
    /// <param name="_set">
    /// Whether it is set.
    /// </param>
    /// <param name="_type">
    /// The updated match action type.
    /// </param>
    /// <returns>
    /// The match action type after updating.
    /// </returns>
    public edit BankReconciliationMatchActionType editMatchActionType(
        boolean _set,
        BankReconciliationMatchActionType _type)
    {
        if (_set)
        {
            ttsBegin;

            this.MatchActionType = _type;
            if (this.validateFieldValue(fieldStr(BankReconciliationMatchRule, MatchActionType)))
            {
                this.modifiedFieldValue(fieldStr(BankReconciliationMatchRule, MatchActionType));
                if (this.validateWrite())
                {
                    this.write();
                }
            }
            else
            {
                this.MatchActionType = this.orig().MatchActionType;
            }
            ttsCommit;
        }

        return this.MatchActionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editOrigStatementAllowDifferentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets system generated type of "Allowed different days" for finding orig statement lines.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether system generated type of "Allowed different days" is set.
    /// </param>
    /// <param name="_value">
    /// Given value.
    /// </param>
    /// <returns>
    /// Value to indicate whether system generated type of "Allowed different days" is set.
    /// </returns>
    public edit boolean editOrigStatementAllowDifferentDate(
        boolean _set,
        boolean _value)
    {
        return this.getOrSetSystemGeneratedMatchRuleLine(
            _set,
            _value,
            BankReconciliationMatchRuleLineType::OrigStatement,
            BankReconMatchRuleLineSysGeneratedType::AllowedDateDifference);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editOrigStatementAllowedDateDifference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets allowed different days for finding original statement lines.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether allowed different days is set.
    /// </param>
    /// <param name="_days">
    /// Allowed different days.
    /// </param>
    /// <returns>
    /// Allowed different days.
    /// </returns>
    public edit BankReconciliationMatchDateDifference editOrigStatementAllowedDateDifference(
        boolean _set,
        BankReconciliationMatchDateDifference _days)
    {
        #BankReconciliationMatchRuleOperator

        if (_set)
        {
            this.updateAllowedDifference(
                BankReconciliationMatchRuleLineType::OrigStatement,
                BankReconMatchRuleLineSysGeneratedType::AllowedDateDifference,
                _days);
        }

        //search the upper limit
        BankReconciliationMatchRuleLine matchRuleLine = BankReconciliationMatchRule::findAllowedDifferenceRuleLine(
            this.RecId,
            BankReconciliationMatchRuleLineType::OrigStatement,
            BankReconMatchRuleLineSysGeneratedType::AllowedDateDifference,
            true);

        BankReconciliationMatchDateDifference days;
        days = this.convertAllowedDifferenceExpression(matchRuleLine.CompareFieldExpression, days);

        return days;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editOrigStatementOppositeAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets system generated type of "Opposite amount" for finding original statement lines.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether system generated type of "Opposite amount" is set.
    /// </param>
    /// <param name="_value">
    /// Given value.
    /// </param>
    /// <returns>
    /// Value to indicate whether system generated type of "Opposite amount" is set.
    /// </returns>
    public edit boolean editOrigStatementOppositeAmount(
        boolean _set,
        boolean _value)
    {
        return this.getOrSetSystemGeneratedMatchRuleLine(
            _set,
            _value,
            BankReconciliationMatchRuleLineType::OrigStatement,
            BankReconMatchRuleLineSysGeneratedType::OppositeAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editOrigDocumentOppositeAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets system generated type of "Opposite amount" for finding original document lines.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether system generated type of "Opposite amount" is set.
    /// </param>
    /// <param name="_value">
    /// Given value.
    /// </param>
    /// <returns>
    /// Value to indicate whether system generated type of "Opposite amount" is set.
    /// </returns>
    internal edit boolean editOrigDocumentOppositeAmount(
        boolean _set,
        boolean _value)
    {
        return this.getOrSetSystemGeneratedMatchRuleLine(
            _set,
            _value,
            BankReconciliationMatchRuleLineType::OrigDocument,
            BankReconMatchRuleLineSysGeneratedType::OppositeAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editOrigDocumentAlloweDifferentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets system generated type of "Allowed different days" for finding original document lines.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether system generated type of "Allowed different days" is set.
    /// </param>
    /// <param name="_value">
    /// Given value.
    /// </param>
    /// <returns>
    /// Value to indicate whether system generated type of "Allowed different days" is set.
    /// </returns>
    internal edit boolean editOrigDocumentAlloweDifferentDate(
        boolean _set,
        boolean _value)
    {
        return this.getOrSetSystemGeneratedMatchRuleLine(
            _set,
            _value,
            BankReconciliationMatchRuleLineType::OrigDocument,
            BankReconMatchRuleLineSysGeneratedType::AllowedDateDifference);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editOrigDocumentAllowedDateDifference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets allowed different days for finding original bank documents.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether allowed different days is set.
    /// </param>
    /// <param name="_days">
    /// Allowed different days.
    /// </param>
    /// <returns>
    /// Allowed different days.
    /// </returns>
    internal edit BankReconciliationMatchDateDifference editOrigDocumentAllowedDateDifference(
        boolean _set,
        BankReconciliationMatchDateDifference _days)
    {
        BankReconciliationMatchRuleLine matchRuleLine;

        if (_set)
        {
            this.updateAllowedDifference(
                BankReconciliationMatchRuleLineType::OrigDocument,
                BankReconMatchRuleLineSysGeneratedType::AllowedDateDifference,
                _days);
        }

        //search the upper limit of the date difference criteria.
        matchRuleLine = BankReconciliationMatchRule::findAllowedDifferenceRuleLine(
            this.RecId,
            BankReconciliationMatchRuleLineType::OrigDocument,
            BankReconMatchRuleLineSysGeneratedType::AllowedDateDifference,
            true);

        BankReconciliationMatchDateDifference days;
        days = this.convertAllowedDifferenceExpression(matchRuleLine.CompareFieldExpression, days);

        return days;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editOrigDocumentMatchDocumentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets system generated type of "Same document number" for finding original document lines.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether system generated type of "Same document number" is set.
    /// </param>
    /// <param name="_value">
    /// Given value.
    /// </param>
    /// <returns>
    /// Value to indicate whether system generated type of "Same document number" is set.
    /// </returns>
    internal edit boolean editOrigDocumentMatchDocumentNumber(
        boolean _set,
        boolean _value)
    {
        return this.getOrSetSystemGeneratedMatchRuleLine(
            _set,
            _value,
            BankReconciliationMatchRuleLineType::OrigDocument,
            BankReconMatchRuleLineSysGeneratedType::SameDocumentNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editOrigDocumentMatchTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets system generated type of "Same transaction type" for finding original document lines.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether system generated type of "Same transaction type" is set.
    /// </param>
    /// <param name="_value">
    /// Given value.
    /// </param>
    /// <returns>
    /// Value to indicate whether system generated type of "Same transaction type" is set.
    /// </returns>
    internal edit boolean editOrigDocumentMatchTransactionType(
        boolean _set,
        boolean _value)
    {
        return this.getOrSetSystemGeneratedMatchRuleLine(
            _set,
            _value,
            BankReconciliationMatchRuleLineType::OrigDocument,
            BankReconMatchRuleLineSysGeneratedType::SameBankTransType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editOrigDocumentMatchPaymentRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets system generated type of "Same payment reference" for finding original document lines.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether system generated type of "Same payment reference" is set.
    /// </param>
    /// <param name="_value">
    /// Given value.
    /// </param>
    /// <returns>
    /// Value to indicate whether system generated type of "Same payment reference" is set.
    /// </returns>
    internal edit boolean editOrigDocumentMatchPaymentRef(
        boolean _set,
        boolean _value)
    {
        return this.getOrSetSystemGeneratedMatchRuleLine(
            _set,
            _value,
            BankReconciliationMatchRuleLineType::OrigDocument,
            BankReconMatchRuleLineSysGeneratedType::SamePaymReference);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editOrigDocumentSameDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets system generated type of "Same document type" for finding original document lines.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether system generated type of "Same document type" is set.
    /// </param>
    /// <param name="_value">
    /// Given value.
    /// </param>
    /// <returns>
    /// Value to indicate whether system generated type of "Same document type" is set.
    /// </returns>
    internal edit boolean editOrigDocumentSameDocumentType(
        boolean _set,
        boolean _value)
    {
        return this.getOrSetSystemGeneratedMatchRuleLine(
            _set,
            _value,
            BankReconciliationMatchRuleLineType::OrigDocument,
            BankReconMatchRuleLineSysGeneratedType::SameDocumentType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editOrigDocumentSameRelatedPartyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets system generated type of "Map to the same related party name" for finding original document lines.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether system generated type of "Map to the same related party name" is set.
    /// </param>
    /// <param name="_value">
    /// Given value.
    /// </param>
    /// <returns>
    /// Value to indicate whether system generated type of "Map to the same related party name" is set.
    /// </returns>
    internal edit boolean editOrigDocumentSameRelatedPartyName(
        boolean _set,
        boolean _value)
    {
        return this.getOrSetSystemGeneratedMatchRuleLine(
            _set,
            _value,
            BankReconciliationMatchRuleLineType::OrigDocument,
            BankReconMatchRuleLineSysGeneratedType::SameRelatedPartyName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editOrigDocumentSameRelatedPartyType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets system generated type of "Map to the same related party type" for finding original document lines.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether system generated type of "Map to the same related party type" is set.
    /// </param>
    /// <param name="_value">
    /// Given value.
    /// </param>
    /// <returns>
    /// Value to indicate whether system generated type of "Map to the same related party type" is set.
    /// </returns>
    internal edit boolean editOrigDocumentSameRelatedPartyType(
        boolean _set,
        boolean _value)
    {
        return this.getOrSetSystemGeneratedMatchRuleLine(
            _set,
            _value,
            BankReconciliationMatchRuleLineType::OrigDocument,
            BankReconMatchRuleLineSysGeneratedType::SameRelatedPartyType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editOrigStatementSameBankTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets system generated type of "Map to the same transaction type" for finding original statement lines.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether system generated type of "Map to the same transaction type" is set.
    /// </param>
    /// <param name="_value">
    /// Given value.
    /// </param>
    /// <returns>
    /// Value to indicate whether system generated type of "Map to the same transaction type" is set.
    /// </returns>
    public edit boolean editOrigStatementSameBankTransType(
        boolean _set,
        boolean _value)
    {
        return this.getOrSetSystemGeneratedMatchRuleLine(
            _set,
            _value,
            BankReconciliationMatchRuleLineType::OrigStatement,
            BankReconMatchRuleLineSysGeneratedType::SameBankTransType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editOrigStatementSameDocumentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets system generated type of "Same document number" for finding original statement lines.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether system generated type of "Same document number" is set.
    /// </param>
    /// <param name="_value">
    /// Given value.
    /// </param>
    /// <returns>
    /// Value to indicate whether system generated type of "Same document number" is set.
    /// </returns>
    public edit boolean editOrigStatementSameDocumentNumber(
        boolean _set,
        boolean _value)
    {
        return this.getOrSetSystemGeneratedMatchRuleLine(
            _set,
            _value,
            BankReconciliationMatchRuleLineType::OrigStatement,
            BankReconMatchRuleLineSysGeneratedType::SameDocumentNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editOrigStatementSamePaymReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets system generated type of "Same payment reference" for finding original statement lines.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether system generated type of "Same payment reference" is set.
    /// </param>
    /// <param name="_value">
    /// Given value.
    /// </param>
    /// <returns>
    /// Value to indicate whether system generated type of "Same payment reference" is set.
    /// </returns>
    public edit boolean editOrigStatementSamePaymReference(
        boolean _set,
        boolean _value)
    {
        return this.getOrSetSystemGeneratedMatchRuleLine(
            _set,
            _value,
            BankReconciliationMatchRuleLineType::OrigStatement,
            BankReconMatchRuleLineSysGeneratedType::SamePaymReference);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editStatementReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets system generated type of "Reversal" for finding reversal satement lines.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether system generated type of "Reversal" is set.
    /// </param>
    /// <param name="_value">
    /// Given value.
    /// </param>
    /// <returns>
    /// Value to indicate whether system generated type of "Reversal" is set.
    /// </returns>
    public edit boolean editStatementReversal(
        boolean _set,
        boolean _value)
    {
        return this.getOrSetSystemGeneratedMatchRuleLine(
            _set,
            _value,
            BankReconciliationMatchRuleLineType::Statement,
            BankReconMatchRuleLineSysGeneratedType::Reversal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existMatchRuleLineByTypeExcludeReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether there is at least one matching rule line besides those of reversal for given line type exists.
    /// </summary>
    /// <param name="_lineType">
    /// Given matching rule line type.
    /// </param>
    /// <returns>
    /// True if there is at least one matching rule line besides those of reversal for given line type exists;
    /// Otherwise, false.
    /// </returns>
    protected boolean existMatchRuleLineByTypeExcludeReversal(BankReconciliationMatchRuleLineType _lineType)
    {
        BankReconciliationMatchRuleLine matchRuleLine;

        select firstonly RecId from matchRuleLine
            where matchRuleLine.LineType == _lineType
                && matchRuleLine.SystemGeneratedType != BankReconMatchRuleLineSysGeneratedType::Reversal
                && matchRuleLine.SystemGeneratedType != BankReconMatchRuleLineSysGeneratedType::NotReversal
                && matchRuleLine.BankReconciliationMatchRule == this.RecId;

        return (matchRuleLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existNonSysGenMatchRuleLine</Name>
				<Source><![CDATA[
    /// <summary>Indicates whether there is at least one non-sys generated matching rule line for given lineType.</summary>
    /// <param name="_lineType">Given matching rule line type.</param>
    /// <returns>true if there is at least one matching rule line for given lineType, otherwise false.</returns>
    internal boolean existNonSysGenMatchRuleLine(BankReconciliationMatchRuleLineType _lineType)
    {
        BankReconciliationMatchRuleLine matchRuleLine;

        select firstonly RecId from matchRuleLine
            where matchRuleLine.LineType == _lineType
                && matchRuleLine.BankReconciliationMatchRule == this.RecId
                && matchRuleLine.SystemGeneratedType == BankReconMatchRuleLineSysGeneratedType::None;

        return (matchRuleLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMatchActionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the action type of matching rule.
    /// </summary>
    /// <returns>
    /// The action type of matching rule.
    /// </returns>
    public BankReconciliationMatchActionType getMatchActionType()
    {
        return this.MatchActionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrSetSystemGeneratedMatchRuleLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets system generated matching rule line.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether system generated type is set.
    /// </param>
    /// <param name="_value">
    /// Given value.
    /// </param>
    /// <param name="_lineType">
    /// Given matching rule line type.
    /// </param>
    /// <param name="_sysGeneratedType">
    /// Given system generated type.
    /// </param>
    /// <returns>
    /// Value to indicate whether system generated type is set.
    /// </returns>
    protected boolean getOrSetSystemGeneratedMatchRuleLine(
        boolean _set,
        boolean _value,
        BankReconciliationMatchRuleLineType _lineType,
        BankReconMatchRuleLineSysGeneratedType _sysGeneratedType)
    {
        if (_set)
        {
            if (_value)
            {
                if (!BankReconciliationMatchRuleLine::findBySysGeneratedType(
                        this.RecId,
                        _sysGeneratedType,
                        _lineType))
                {
                    BankReconciliationMatchRuleLine::createSystemGeneratedMatchRuleLines(
                        this.RecId,
                        _sysGeneratedType,
                        _lineType);
                }
            }
            else
            {
                this.deleteSystemGeneratedMatchRuleLine(_sysGeneratedType, _lineType);
            }
        }

        BankReconciliationMatchRuleLine matchRuleLine = BankReconciliationMatchRuleLine::findBySysGeneratedType(
            this.RecId,
            _sysGeneratedType,
            _lineType);

        return (matchRuleLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.MatchActionType = BankReconciliationMatchActionType::Match;
        this.SearchMatchingEntry = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert data into bank reconciliation match rule.
    /// </summary>
    public void insert()
    {
        super();

        // Create default system generated type for new action.
        this.setOrResetDefaulMatchingRuleLine(this.MatchActionType, true);

        if (BankReconciliationMatchingRuleDefaultGroupConditionFlight::instance().isEnabled())
        {
            this.setOrResetDefaultGroupRuleLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether current matching rule is activated.
    /// </summary>
    /// <returns>
    /// True if current matching rule is activated; Otherwise, false.
    /// </returns>
    public boolean isActivated()
    {
        return this.IsActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSearchingMatchingEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether searching opposite side - bank document.
    /// </summary>
    /// <returns>
    /// True if searching opposite side; otherwise, false.
    /// </returns>
    public boolean isSearchingMatchingEntry()
    {
        return this.SearchMatchingEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modified field value.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index.
    /// </param>
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(BankReconciliationMatchRule, MatchActionType):
                if (this.MatchActionType == BankReconciliationMatchActionType::Match)
                {
                    this.SearchMatchingEntry = NoYes::Yes;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the matching rule name.
    /// </summary>
    /// <returns>
    /// Matching rule name.
    /// </returns>
    public BankReconciliationMatchRuleName name()
    {
        return this.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrResetDefaulMatchingRuleLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets or resets default system generated matching rule line according to given action type.
    /// </summary>
    /// <param name="_actionType">
    /// Given action type.
    /// </param>
    /// <param name="_isSet">
    /// Indicates whether the default system generated matching option is set.
    /// </param>
    protected void setOrResetDefaulMatchingRuleLine(
        BankReconciliationMatchActionType _actionType,
        boolean _isSet)
    {
        switch (_actionType)
        {
            case BankReconciliationMatchActionType::Match:
                // Same amount.
                this.getOrSetSystemGeneratedMatchRuleLine(
                    true,
                    _isSet,
                    BankReconciliationMatchRuleLineType::Document,
                    BankReconMatchRuleLineSysGeneratedType::AllowedAmountDifference);
                // Same document number.
                this.getOrSetSystemGeneratedMatchRuleLine(
                    true,
                    _isSet,
                    BankReconciliationMatchRuleLineType::Document,
                    BankReconMatchRuleLineSysGeneratedType::SameDocumentNumber);
                // Same payment reference.
                this.getOrSetSystemGeneratedMatchRuleLine(
                    true,
                    _isSet,
                    BankReconciliationMatchRuleLineType::Document,
                    BankReconMatchRuleLineSysGeneratedType::SamePaymReference);
                break;

            case BankReconciliationMatchActionType::Reversal:
                // Reversal flag.
                this.getOrSetSystemGeneratedMatchRuleLine(
                    true,
                    _isSet,
                    BankReconciliationMatchRuleLineType::Statement,
                    BankReconMatchRuleLineSysGeneratedType::Reversal);
                this.getOrSetSystemGeneratedMatchRuleLine(
                    true,
                    _isSet,
                    BankReconciliationMatchRuleLineType::Document,
                    BankReconMatchRuleLineSysGeneratedType::Reversal);
                this.getOrSetSystemGeneratedMatchRuleLine(
                    true,
                    _isSet,
                    BankReconciliationMatchRuleLineType::OrigStatement,
                    BankReconMatchRuleLineSysGeneratedType::NotReversal);
                // Opposite amount.
                this.getOrSetSystemGeneratedMatchRuleLine(
                    true,
                    _isSet,
                    BankReconciliationMatchRuleLineType::OrigStatement,
                    BankReconMatchRuleLineSysGeneratedType::OppositeAmount);
                // Same document number.
                this.getOrSetSystemGeneratedMatchRuleLine(
                    true,
                    _isSet,
                    BankReconciliationMatchRuleLineType::OrigStatement,
                    BankReconMatchRuleLineSysGeneratedType::SameDocumentNumber);
                // Same payment reference.
                this.getOrSetSystemGeneratedMatchRuleLine(
                    true,
                    _isSet,
                    BankReconciliationMatchRuleLineType::OrigStatement,
                    BankReconMatchRuleLineSysGeneratedType::SamePaymReference);
                break;

            case BankReconciliationMatchActionType::TransactionReversal:
                //Opposite amount
                this.getOrSetSystemGeneratedMatchRuleLine(
                    true,
                    _isSet,
                    BankReconciliationMatchRuleLineType::OrigDocument,
                    BankReconMatchRuleLineSysGeneratedType::OppositeAmount);
                //Same document type
                this.getOrSetSystemGeneratedMatchRuleLine(
                    true,
                    _isSet,
                    BankReconciliationMatchRuleLineType::OrigDocument,
                    BankReconMatchRuleLineSysGeneratedType::SameDocumentType);
                //Same transaction type
                this.getOrSetSystemGeneratedMatchRuleLine(
                    true,
                    _isSet,
                    BankReconciliationMatchRuleLineType::OrigDocument,
                    BankReconMatchRuleLineSysGeneratedType::SameBankTransType);
                //Same payment reference
                this.getOrSetSystemGeneratedMatchRuleLine(
                    true,
                    _isSet,
                    BankReconciliationMatchRuleLineType::OrigDocument,
                    BankReconMatchRuleLineSysGeneratedType::SamePaymReference);
                break;

            case BankReconciliationMatchActionType::SettleCustInv:
                // Same Debit/Credit indicator.
                this.getOrSetSystemGeneratedMatchRuleLine(
                    true,
                    _isSet,
                    BankReconciliationMatchRuleLineType::SettleCustInvoice,
                    BankReconMatchRuleLineSysGeneratedType::SameAmountDrCrIndicator);
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGroupBankTransaction</Name>
				<Source><![CDATA[
    internal boolean isGroupBankTransaction()
    {
        return this.MatchingType == BankReconciliationStmtMatchMathingType::OneToMany
            || this.MatchingType == BankReconciliationStmtMatchMathingType::ManyToMany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGroupBankStatement</Name>
				<Source><![CDATA[
    internal boolean isGroupBankStatement()
    {
        return this.MatchingType == BankReconciliationStmtMatchMathingType::ManyToOne
            || this.MatchingType == BankReconciliationStmtMatchMathingType::ManyToMany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrResetDefaultGroupRuleLine</Name>
				<Source><![CDATA[
    private void setOrResetDefaultGroupRuleLine()
    {
        if (this.MatchActionType == BankReconciliationMatchActionType::Match
            && this.MatchingType != BankReconciliationStmtMatchMathingType::OneToOne)
        {
            if (this.isGroupBankTransaction())
            {
                if (!this.BankDocumentGroupRule || !BankReconciliationGroupRule::find(this.BankDocumentGroupRule))
                {
                    this.BankDocumentGroupRule = BankReconciliationGroupRule::createNewRule(BankReconciliationGroupRuleType::BankDocumentGroup).RecId;
                }

                this.createBankReconciliationGroupRuleLine(this.BankDocumentGroupRule, true);
            }

            if (this.isGroupBankStatement())
            {
                if (!this.BankStatementGroupRule || !BankReconciliationGroupRule::find(this.BankStatementGroupRule))
                {
                    this.BankStatementGroupRule = BankReconciliationGroupRule::createNewRule(BankReconciliationGroupRuleType::BankStatementGroup).RecId;
                }

                this.createBankReconciliationGroupRuleLine(this.BankStatementGroupRule, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBankReconciliationGroupRuleLine</Name>
				<Source><![CDATA[
    private void createBankReconciliationGroupRuleLine(RecId _bankReconciliationGroupRuleRecId, boolean _isDocumentGroupRule)
    {
        BankReconciliationMatchRuleLine matchRuleLine;
        while select FieldId, CompareFieldId from matchRuleLine
            where matchRuleLine.BankReconciliationMatchRule == this.RecId
                && matchRuleLine.LineType == BankReconciliationMatchRuleLineType::Document
                && matchRuleLine.FieldId != fieldNum(BankReconciliationDocumentOpenTmp, BankCurrencyAmount)
        {
            RefFieldId fieldId = _isDocumentGroupRule ? matchRuleLine.FieldId : matchRuleLine.CompareFieldId;
            TableId tableId = _isDocumentGroupRule ? tableNum(BankReconciliationDocumentOpenTmp) : tableNum(BankReconciliationStatementOpenTmp);
            if (fieldId
                && !BankReconciliationGroupRuleLine::isFieldExcludedFromGroupingActions(tableId, fieldId)
                && !BankReconciliationGroupRuleLine::fieldExist(_bankReconciliationGroupRuleRecId, fieldId))
            {
                BankReconciliationGroupRuleLine groupRuleLine;
                groupRuleLine.BankReconciliationGroupRule = _bankReconciliationGroupRuleRecId;
                groupRuleLine.FieldId = fieldId;
                groupRuleLine.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates bank reconciliation match rule.
    /// </summary>
    public void update()
    {
        if (this.orig().MatchActionType != this.MatchActionType || this.orig().MatchingType != this.MatchingType)
        {
            if (BankReconciliationMatchActionChangeConfirmFlight::instance().isEnabled() && this.orig().MatchActionType != this.MatchActionType)
            {
                this.resetMatchRule();
            }
            else
            {
                // Remove all system generated type for original action.
                this.deleteAllSystemGeneratedMatchRuleLine();

                // Create default system generated type for new action.
                this.setOrResetDefaulMatchingRuleLine(
                    this.MatchActionType,
                    true);

                if (BankReconciliationMatchingRuleDefaultGroupConditionFlight::instance().isEnabled())
                {
                    // Create group condition lines from matching rule lines
                    this.cleanGroupRule();
                    this.setOrResetDefaultGroupRuleLine();
                }
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetMatchRule</Name>
				<Source><![CDATA[
    private void resetMatchRule()
    {
        // Reset "Require manual matching" to "No".
        this.RequireManualMatching = NoYes::No;

        // Reset "Matching type" to "One to One".
        this.MatchingType = BankReconciliationStmtMatchMathingType::OneToOne;
        this.cleanGroupRule();

        // Remove all matching rule line for original action.
        this.deleteAllMatchRuleLine();

        // Delete all posting info for original action.
        this.deleteAllPostingInfo();

        // Create default system generated type for new action.
        this.setOrResetDefaulMatchingRuleLine(
             this.MatchActionType,
             true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateActiveStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the active status for matching rule.
    /// </summary>
    /// <param name="_active">
    /// Indicates whether matching rule is active.
    /// </param>
    private void updateActiveStatus(boolean _active)
    {
        ttsBegin;
        this.selectForUpdate(true);
        this.IsActive = _active;
        this.update();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAllowedDifference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates allowed amount difference.
    /// </summary>
    /// <param name="_lineType">
    /// Given matching rule line type.
    /// </param>
    /// <param name="_sysGeneratedType">
    /// The system generated type.
    /// </param>
    /// <param name="_difference">
    /// The allowed amount difference.
    /// </param>
    protected void updateAllowedDifference(
        BankReconciliationMatchRuleLineType _lineType,
        BankReconMatchRuleLineSysGeneratedType _sysGeneratedType,
        anytype _difference)
    {
        anytype difference = _difference;
        #BankReconciliationMatchRuleOperator

        if (difference < 0)
        {
            difference = -1 * difference;
        }
        str differenceValue = System.Convert::ToString(difference);

        ttsBegin;
        // Update the upper limit
        BankReconciliationMatchRuleLine matchRuleLine = BankReconciliationMatchRule::findAllowedDifferenceRuleLine(
            this.RecId,
            _lineType,
            _sysGeneratedType,
            true,
            true);
        if (matchRuleLine)
        {
            matchRuleLine.CompareFieldExpression = #Plus + differenceValue;
            matchRuleLine.update();
        }

        // Update the lower limit
        matchRuleLine = BankReconciliationMatchRule::findAllowedDifferenceRuleLine(
            this.RecId,
            _lineType,
            _sysGeneratedType,
            false,
            true);
        if (matchRuleLine)
        {
            matchRuleLine.CompareFieldExpression = #Minus + differenceValue;
            matchRuleLine.update();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record exists in the <c>BankReconciliationMatchRule</c> table;
    /// If not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>BankReconciliationMatchRule</c> record.
    /// </param>
    /// <returns>
    /// True if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean isExisting = true;

        if (!BankReconciliationMatchRule::exist(_recId))
        {
            isExisting = checkFailed(strFmt(BankReconciliationMatchRule::txtNotExist(), _recId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>BankReconciliationMatchRule</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>BankReconciliationMatchRule</c> record.
    /// </param>
    /// <returns>
    /// True if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        BankReconciliationMatchRule matchRule;

        select firstOnly RecId from matchRule
            where matchRule.RecId == _recId;

        return matchRule.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds <c>BankReconciliationMatchRule</c> record according to RecId.
    /// </summary>
    /// <param name="_recId">
    /// Record Id
    /// </param>
    /// <param name="_forUpdate">
    /// Indicates whether selected record can be updated.
    /// </param>
    /// <param name="_concurrencyModel">
    /// Currency model
    /// </param>
    /// <returns>
    /// Record of <c>BankReconciliationMatchRule</c>.
    /// </returns>
    public static BankReconciliationMatchRule find(
        RecId _recId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        BankReconciliationMatchRule matchRule;

        matchRule.selectForUpdate(_forUpdate);

        if (_forUpdate
            && _concurrencyModel != ConcurrencyModel::Auto)
        {
            matchRule.concurrencyModel(_concurrencyModel);
        }

        select firstonly matchRule
            where matchRule.RecId == _recId;

        return matchRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAllowedDifferenceRuleLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the match rule line for the allowed difference.
    /// </summary>
    /// <param name="_matchRuleRecId">
    /// Given <c>BankReconciliationMatchRule</c> buffer Id.
    /// </param>
    /// <param name="_lineType">
    /// The match rule line type.
    /// </param>
    /// <param name="_sysGeneratedType">
    /// The system generated type.
    /// </param>
    /// <param name="_isUpperLimit">
    /// Whether it is the upper limit or not.
    /// </param>
    /// <param name="_forUpdate">
    /// Indicates whether selected record can be updated.
    /// </param>
    /// <returns>
    /// The match rule line.
    /// </returns>
    protected static BankReconciliationMatchRuleLine findAllowedDifferenceRuleLine(
        BankReconciliationMatchRuleRefRecId _matchRuleRecId,
        BankReconciliationMatchRuleLineType _lineType,
        BankReconMatchRuleLineSysGeneratedType _sysGeneratedType,
        boolean _isUpperLimit,
        boolean _forUpdate = false)
    {
        BankReconciliationMatchOperatorType operatorType;

        if (_isUpperLimit)
        {
            operatorType = BankReconciliationMatchOperatorType::LessThanOrEquals;
        }
        else
        {
            operatorType = BankReconciliationMatchOperatorType::GreaterThanOrEquals;
        }

        BankReconciliationMatchRuleLine matchRuleLine;
        select firstOnly matchRuleLine
            where matchRuleLine.BankReconciliationMatchRule == _matchRuleRecId
                && matchRuleLine.SystemGeneratedType == _sysGeneratedType
                && matchRuleLine.LineType == _lineType
                && matchRuleLine.Operator == operatorType;

        matchRuleLine.selectForUpdate(_forUpdate);

        return matchRuleLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRuleId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds <c>BankReconciliationMatchRule</c> record according to rule Id.
    /// </summary>
    /// <param name="_ruleId">
    /// Rule Id
    /// </param>
    /// <param name="_forUpdate">
    /// Indicates whether selected record can be updated.
    /// </param>
    /// <param name="_concurrencyModel">
    /// Currency model
    /// </param>
    /// <returns>
    /// Record of <c>BankReconciliationMatchRule</c>.
    /// </returns>
    public static BankReconciliationMatchRule findByRuleId(
        BankReconciliationMatchRuleId _ruleId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        BankReconciliationMatchRule matchRule;

        matchRule.selectForUpdate(_forUpdate);

        if (_forUpdate
            && _concurrencyModel != ConcurrencyModel::Auto)
        {
            matchRule.concurrencyModel(_concurrencyModel);
        }

        select firstonly matchRule
            where matchRule.RuleId == _ruleId;

        return matchRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message to use when a specific record in the <c>BankReconciliationMatchRule</c> table does not exist.
    /// </summary>
    /// <returns>
    /// A message that states that a record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the specified field value.
    /// </summary>
    /// <param name="_fieldName">
    /// The name of the field to validate.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field; optional.
    /// </param>
    /// <returns>
    /// Returns true if the field passes value validation; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            switch (_fieldName)
            {
                case fieldStr(BankReconciliationMatchRule, MatchActionType):
                    if (FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance())
                        && this.MatchActionType == BankReconciliationMatchActionType::Adjustment)
                    {
                        ret = checkFailed("@Bank:MarkAsNewMatchUnableToChooseError");
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<DeveloperDocumentation>@GLS222304</DeveloperDocumentation>
	<Label>@GLS222238</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>RuleId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Bank</Modules>
	<ReplacementKey>RuleIdIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RuleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MatchActionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SearchMatchingEntry</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RuleId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Action</Name>
			<Label>@SYS35989</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MatchActionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SearchMatchingEntry</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Active</Name>
			<Label>@SYS39462</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsActive</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RuleId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsActive</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankReconciliationMatchRuleActive</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MatchActionType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BankReconciliationMatchActionType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankReconciliationMatchRuleName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RuleId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankReconciliationMatchRuleId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SearchMatchingEntry</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankReconMatchSearchMatchingEntry</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankStatementGroupRule</Name>
			<ExtendedDataType>RecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankDocumentGroupRule</Name>
			<ExtendedDataType>RecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MatchingType</Name>
			<Label>@CashManagement:MatchingType</Label>
			<EnumType>BankReconciliationStmtMatchMathingType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RequireManualMatching</Name>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RuleIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RuleId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>