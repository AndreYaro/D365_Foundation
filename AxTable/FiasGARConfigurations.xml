<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiasGARConfigurations</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class FiasGARConfigurations extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findByAddressFileName</Name>
				<Source><![CDATA[
    internal static FiasGARConfigurations findByAddressFileName(str _fileName)
    {
        FiasGARConfigurations fiasGARConfigurations;

        select firstonly fiasGARConfigurations
            where fiasGARConfigurations.AddressFileName == _fileName;

        return fiasGARConfigurations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeGARFileNameConfiguration</Name>
				<Source><![CDATA[
    private static void writeGARFileNameConfiguration(str _configurationName, str _fileName, FiasGARFileType _fileType)
    {
        ERSolutionTable solutionTable;
        select firstonly RecId from solutionTable
            where solutionTable.Name == _configurationName;

        FiasGARConfigurations fiasGARConfigurations = FiasGARConfigurations::findByAddressFileName(_fileName);
        if (!fiasGARConfigurations.RecId && solutionTable.RecId)
        {
            fiasGARConfigurations.AddressFileName = _fileName;
            fiasGARConfigurations.ERSolutionRecId = solutionTable.RecId;
            fiasGARConfigurations.GARFileType = _fileType;
            fiasGARConfigurations.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initGARFileConfigurations</Name>
				<Source><![CDATA[
    internal static void initGARFileConfigurations()
    {
        FiasGARConfigurations::writeGARFileNameConfiguration(
            strFmt(FiasGARImportUtils::ConfigurationFormat, FiasGARImportUtils::HierarchyModelName, FiasGARImportUtils::MUN_HIERARCHY),
            strFmt(FiasGARImportUtils::AddressHeirarchyFileNameFormat, FiasGARImportUtils::MUN_HIERARCHY),
            FiasGARFileType::Hierarchy);

        for (int i = 1; i <= conLen(FiasGARImportUtils::MetadataTypes); i++)
        {
            str metadataType = conPeek(FiasGARImportUtils::MetadataTypes, i);
            FiasGARConfigurations::writeGARFileNameConfiguration(
                strFmt(FiasGARImportUtils::ConfigurationFormat, FiasGARImportUtils::MetadataModelName, metadataType),
                strFmt(FiasGARImportUtils::MeataDataFileNameFormat, metadataType),
                FiasGARFileType::Metadata);
        }

        for (int i = 1; i <= conLen(FiasGARImportUtils::AddressTypes); i++)
        {
            str addressFileNameSuffix = FiasGARImportUtils::getAddressFileNameSuffix(conPeek(FiasGARImportUtils::AddressTypes, i));
            FiasGARConfigurations::writeGARFileNameConfiguration(
                strFmt(FiasGARImportUtils::ConfigurationFormat, FiasGARImportUtils::AddrObjModelName, addressFileNameSuffix),
                strFmt(FiasGARImportUtils::AddressHeirarchyFileNameFormat, addressFileNameSuffix),
                FiasGARFileType::Address);

            FiasGARConfigurations::writeGARFileNameConfiguration(
                strFmt(FiasGARImportUtils::ConfigurationFormat, FiasGARImportUtils::ParamsModelName, addressFileNameSuffix),
                strFmt(FiasGARImportUtils::ParamsFileNameFormat, addressFileNameSuffix),
                FiasGARFileType::Params);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiasGARConfigurationByFileNameAndFileType</Name>
				<Source><![CDATA[
    internal static FiasGARConfigurations getFiasGARConfigurationByFileNameAndFileType(str _fileName, FiasGARFileType _garFileType)
    {
        FiasGARConfigurations fiasGARConfigurations;

        select firstonly fiasGARConfigurations
            where fiasGARConfigurations.GARFileType == _garFileType
                && fiasGARConfigurations.AddressFileName == _fileName;

        return fiasGARConfigurations;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>Tax</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AddressFileName</Name>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@FIAS:GARFileNamePrefix</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ERSolutionRecId</Name>
			<ExtendedDataType>RecId</ExtendedDataType>
			<Label>@FIAS:ERConfiguration</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GARFileType</Name>
			<Label>@FIAS:GARFileType</Label>
			<EnumType>FiasGARFileType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FileName</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>AddressFileName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>ERSolution</Name>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ERSolutionTable</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ERSolutionRecId</Name>
					<Field>ERSolutionRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>