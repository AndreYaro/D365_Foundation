<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RAssetLedgerAccounts</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RAssetLedgerAccounts extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetLedgerDimensionFind</Name>
				<Source><![CDATA[
    private LedgerDimensionDefaultAccount assetLedgerDimensionFind(PostingProfileAccountRelation _num,
        RAssetTransType _assetTransType,
        RAssetPostingProfile _assetPostingProfile,
        RAssetTableGroupAllStandard _assetTableGroupAllStandard)
    {
        RAssetLedgerAccounts  assetLedgerAccounts;

        select firstonly AssetLedgerDimension from assetLedgerAccounts
            where assetLedgerAccounts.PostingProfile == _assetPostingProfile
            && assetLedgerAccounts.AccountCode == _assetTableGroupAllStandard
            && assetLedgerAccounts.AssetTransType == _assetTransType
            && (assetLedgerAccounts.AccountCode == RAssetTableGroupAllStandard::All
                || assetLedgerAccounts.Num == _num);

        return assetLedgerAccounts.AssetLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetOffsetLedgerDimensionFind</Name>
				<Source><![CDATA[
    private LedgerDimensionDefaultAccount assetOffsetLedgerDimensionFind(PostingProfileAccountRelation _num,
        RAssetTransType _assetTransType,
        RAssetPostingProfile _assetPostingProfile,
        RAssetTableGroupAllStandard _assetTableGroupAllStandard)
    {
        RAssetLedgerAccounts  assetLedgerAccounts;

        select firstonly AssetOffsetLedgerDimension from assetLedgerAccounts
            where assetLedgerAccounts.PostingProfile == _assetPostingProfile
                && assetLedgerAccounts.AccountCode == _assetTableGroupAllStandard
                && assetLedgerAccounts.AssetTransType == _assetTransType
                && (assetLedgerAccounts.AccountCode == RAssetTableGroupAllStandard::All
                    || assetLedgerAccounts.Num == _num);

        return assetLedgerAccounts.AssetOffsetLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _p1)
    {
        boolean ret = super(_p1);

        switch (_p1)
        {
            case (fieldNum(RAssetLedgerAccounts, AssetLedgerDimension)):
                ret = MainAccount::checkAllowPosting(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(this.AssetLedgerDimension));
                break;

            case (fieldNum(RAssetLedgerAccounts, AssetOffsetLedgerDimension)):
                ret = MainAccount::checkAllowPosting(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(this.AssetOffsetLedgerDimension));
                break;

            case (fieldNum(RAssetLedgerAccounts, Num)):
                if ((this.AccountCode == RAssetTableGroupAllStandard::GroupId
                        || this.AccountCode == RAssetTableGroupAllStandard::Table
                        || this.AccountCode == RAssetTableGroupAllStandard::Standard)
                    && !this.Num)
                {
                    ret = checkFailed("@SYS24640");
                }
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();
        if ((this.AccountCode == RAssetTableGroupAllStandard::Table
                || this.AccountCode == RAssetTableGroupAllStandard::Standard
                || this.AccountCode == RAssetTableGroupAllStandard::GroupId)
            && !this.Num)
        {
            ret = checkFailed("@SYS24729");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// returns ledger dimension account for the current posting profile
    /// </summary>
    /// <param name="_assetId">
    /// the asset id which is used to select ledger account from the ledger setup
    /// </param>
    /// <param name="_assetTransType">
    /// the transaction type which is used to select ledger account from the posting profile
    /// </param>
    /// <param name="_assetStandardId">
    /// the asset value model
    /// </param>
    /// <param name="_assetPostingProfile">
    /// the posting profile of asset value model
    /// </param>
    /// <returns>
    /// ledger dimension account
    /// </returns>
    /// <exception cref="Exception::Error">
    /// shows the exception if the posting profile isn't set up
    /// </exception>
    public static LedgerDimensionDefaultAccount assetLedgerDimension(RAssetId _assetId,
        RAssetTransType _assetTransType,
        RAssetStandardId _assetStandardId,
        RAssetPostingProfile _assetPostingProfile = '')
    {
        LedgerDimensionDefaultAccount assetLedgerDimension;
        RAssetPostingProfile assetPostingProfile  = _assetPostingProfile;

        if (assetPostingProfile)
        {
            assetLedgerDimension = RAssetLedgerAccounts::findAssetLedger(
                _assetId,
                _assetTransType,
                _assetStandardId,
                assetPostingProfile,
                assetLedgerDimension);
        }

        if (!assetLedgerDimension)
        {
            if (!assetPostingProfile)
            {
                assetPostingProfile = RAssetStandardTable::find(_assetStandardId).PostingProfile;
            }

            if (assetPostingProfile)
            {
                assetLedgerDimension = RAssetLedgerAccounts::findAssetLedger(
                    _assetId,
                    _assetTransType,
                    _assetStandardId,
                    assetPostingProfile,
                    assetLedgerDimension);
            }
        }

        if (!assetLedgerDimension)
        {
            if (!assetPostingProfile)
            {
                assetPostingProfile = RAssetParameters::find().PostingProfile;
            }

            if (assetPostingProfile)
            {
                assetLedgerDimension = RAssetLedgerAccounts::findAssetLedger(
                    _assetId,
                    _assetTransType,
                    _assetStandardId,
                    assetPostingProfile,
                    assetLedgerDimension);
            }
            else
            {
                throw error("@GLS116275");
            }
        }

        return assetLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetOffsetLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// returns offset ledger dimension account for the current posting profile
    /// </summary>
    /// <param name="_assetId">
    /// the asset id which is used to select ledger account from the ledger setup
    /// </param>
    /// <param name="_assetTransType">
    /// the transaction type which is used to select ledger account from the posting profile
    /// </param>
    /// <param name="_assetStandardId">
    /// the asset value model
    /// </param>
    /// <param name="_assetPostingProfile">
    /// the posting profile of asset value model
    /// </param>
    /// <returns>
    /// offset ledger dimension account
    /// </returns>
    /// <exception cref="Exception::Error">
    /// shows the exception if the posting profile isn't set up
    /// </exception>
    public static LedgerDimensionDefaultAccount assetOffsetLedgerDimension(RAssetId _assetId,
        RAssetTransType _assetTransType,
        RAssetStandardId _assetStandardId,
        RAssetPostingProfile _assetPostingProfile = '')
    {
        LedgerDimensionDefaultAccount assetOffsetLedgerDimension;
        RAssetPostingProfile assetPostingProfile = _assetPostingProfile;
        
        if (assetPostingProfile)
        {
            assetOffsetLedgerDimension = RAssetLedgerAccounts::findAssetLedgerOffset(
                _assetId,
                _assetTransType,
                _assetStandardId,
                assetPostingProfile,
                assetOffsetLedgerDimension);
        }

        if (!assetOffsetLedgerDimension)
        {
            if (!assetPostingProfile)
            {
                assetPostingProfile = RAssetStandardTable::find(_assetStandardId).PostingProfile;
            }

            if (assetPostingProfile)
            {
                assetOffsetLedgerDimension = RAssetLedgerAccounts::findAssetLedgerOffset(
                    _assetId,
                    _assetTransType,
                    _assetStandardId,
                    assetPostingProfile,
                    assetOffsetLedgerDimension);
            }
        }

        if (!assetOffsetLedgerDimension)
        {
            if (!assetPostingProfile)
            {
                assetPostingProfile = RAssetParameters::find().PostingProfile;
            }

            if (assetPostingProfile)
            {
                assetOffsetLedgerDimension = RAssetLedgerAccounts::findAssetLedgerOffset(
                    _assetId,
                    _assetTransType,
                    _assetStandardId,
                    assetPostingProfile,
                    assetOffsetLedgerDimension);
            }
            else
            {
                throw error("@GLS116275");
            }
        }

        return assetOffsetLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetOffsetLedgerDimensionForGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns offset dimension account for the current posting profile and asset group.
    /// </summary>
    /// <param name="_assetGroupId">
    /// The asset group which is used for asset group depreciation.
    /// </param>
    /// <param name="_assetTransType">
    /// The transaction type which is used to select offset account from the posting profile.
    /// </param>
    /// <param name="_assetStandardId">
    /// The asset value model.
    /// </param>
    /// <param name="_assetPostingProfile">
    /// The posting profile of asset value model.
    /// </param>
    /// <returns>
    /// Offset ledger dimension account.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Shows the exception if the posting profile isn't set up.
    /// </exception>
    public static LedgerDimensionDefaultAccount assetOffsetLedgerDimensionForGroup(RAssetGroupId         _assetGroupId,
                                                                    RAssetTransType       _assetTransType,
                                                                    RAssetStandardId      _assetStandardId,
                                                                    RAssetPostingProfile  _assetPostingProfile = '')
    {
        LedgerDimensionDefaultAccount assetOffsetLedgerDimension;
        RAssetPostingProfile assetPostingProfile = _assetPostingProfile;

        if (!assetPostingProfile)
        {
            assetPostingProfile = RAssetStandardTable::find(_assetStandardId).PostingProfile;
        }

        if (!assetPostingProfile)
        {
            assetPostingProfile = RAssetParameters::find().PostingProfile;
        }

        if (assetPostingProfile)
        {
            assetOffsetLedgerDimension = RAssetLedgerAccounts::findAssetLedgerForGroup(
                _assetGroupId,
                _assetTransType,
                _assetStandardId,
                assetPostingProfile,
                assetOffsetLedgerDimension);
        }
        else
        {
            throw error("@GLS116275");
        }

        return assetOffsetLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAssetLedger</Name>
				<Source><![CDATA[
    private static LedgerDimensionDefaultAccount findAssetLedger(RAssetId _assetId,
        RAssetTransType _assetTransType,
        RAssetStandardId _assetStandardId,
        RAssetPostingProfile _rAssetPostingProfile,
        LedgerDimensionDefaultAccount _ledgerDimensionDefaultAccount)
    {
        LedgerDimensionDefaultAccount ledgerDimensionDefaultAccount = _ledgerDimensionDefaultAccount;
        RAssetLedgerAccounts rAssetLedgerAccounts;

        if (!ledgerDimensionDefaultAccount)
        {
            ledgerDimensionDefaultAccount = rAssetLedgerAccounts.assetLedgerDimensionFind(_assetId,
                _assetTransType,
                _rAssetPostingProfile,
                RAssetTableGroupAllStandard::Table);
        }

        if (!ledgerDimensionDefaultAccount)
        {
            ledgerDimensionDefaultAccount = rAssetLedgerAccounts.assetLedgerDimensionFind(RAssetStandards::find(_assetId, _assetStandardId).AssetGroup,
                _assetTransType,
                _rAssetPostingProfile,
                RAssetTableGroupAllStandard::GroupId);
        }

        if (!ledgerDimensionDefaultAccount)
        {
            ledgerDimensionDefaultAccount = rAssetLedgerAccounts.assetLedgerDimensionFind(_assetStandardId,
                _assetTransType,
                _rAssetPostingProfile,
                RAssetTableGroupAllStandard::Standard);
        }

        if (!ledgerDimensionDefaultAccount)
        {
            ledgerDimensionDefaultAccount = rAssetLedgerAccounts.assetLedgerDimensionFind('',
                _assetTransType,
                _rAssetPostingProfile,
                RAssetTableGroupAllStandard::All);
        }

        return ledgerDimensionDefaultAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAssetLedgerOffset</Name>
				<Source><![CDATA[
    private static LedgerDimensionDefaultAccount findAssetLedgerOffset(RAssetId _assetId,
        RAssetTransType _assetTransType,
        RAssetStandardId _assetStandardId,
        RAssetPostingProfile _assetPostingProfile,
        LedgerDimensionDefaultAccount _ledgerDimensionDefaultAccount)
    {
        LedgerDimensionDefaultAccount ledgerDimensionDefaultAccount = _ledgerDimensionDefaultAccount;
        RAssetLedgerAccounts rAssetLedgerAccounts;

        if (!ledgerDimensionDefaultAccount)
        {
            ledgerDimensionDefaultAccount = rAssetLedgerAccounts.assetOffsetLedgerDimensionFind(_assetId,
                _assetTransType,
                _assetPostingProfile,
                RAssetTableGroupAllStandard::Table);
        }

        if (!ledgerDimensionDefaultAccount)
        {
            ledgerDimensionDefaultAccount = rAssetLedgerAccounts.assetOffsetLedgerDimensionFind(RAssetStandards::find(_assetId, _assetStandardId).AssetGroup,
                _assetTransType,
                _assetPostingProfile,
                RAssetTableGroupAllStandard::GroupId);
        }

        if (!ledgerDimensionDefaultAccount)
        {
            ledgerDimensionDefaultAccount = rAssetLedgerAccounts.assetOffsetLedgerDimensionFind(_assetStandardId,
                _assetTransType,
                _assetPostingProfile,
                RAssetTableGroupAllStandard::Standard);
        }

        if (!ledgerDimensionDefaultAccount)
        {
            ledgerDimensionDefaultAccount = rAssetLedgerAccounts.assetOffsetLedgerDimensionFind("",
                _assetTransType,
                _assetPostingProfile,
                RAssetTableGroupAllStandard::All);
        }

        return ledgerDimensionDefaultAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAssetLedgerForGroup</Name>
				<Source><![CDATA[
    private static LedgerDimensionDefaultAccount findAssetLedgerForGroup(RAssetGroupId _assetGroupId,
        RAssetTransType _assetTransType,
        RAssetStandardId _assetStandardId,
        RAssetPostingProfile _assetPostingProfile,
        LedgerDimensionDefaultAccount _ledgerDimensionDefaultAccount)
    {
        LedgerDimensionDefaultAccount ledgerDimensionDefaultAccount = _ledgerDimensionDefaultAccount;
        RAssetLedgerAccounts rAssetLedgerAccounts;

        if (!ledgerDimensionDefaultAccount)
        {
            ledgerDimensionDefaultAccount = rAssetLedgerAccounts.assetOffsetLedgerDimensionFind(_assetGroupId,
                _assetTransType,
                _assetPostingProfile,
                RAssetTableGroupAllStandard::GroupId);
        }

        if (!ledgerDimensionDefaultAccount)
        {
            ledgerDimensionDefaultAccount = rAssetLedgerAccounts.assetOffsetLedgerDimensionFind(_assetStandardId,
                _assetTransType,
                _assetPostingProfile,
                RAssetTableGroupAllStandard::Standard);
        }

        if (!ledgerDimensionDefaultAccount)
        {
            ledgerDimensionDefaultAccount = rAssetLedgerAccounts.assetOffsetLedgerDimensionFind('',
                _assetTransType,
                _assetPostingProfile,
                RAssetTableGroupAllStandard::All);
        }

        return ledgerDimensionDefaultAccount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>RAsset</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<FormRef>RAssetPosting</FormRef>
	<Label>@SYS67358</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>PostingProfile</TitleField1>
	<TitleField2>AssetTransType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ProfileAccountIdx</ClusteredIndex>
	<Modules>RAsset</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Num</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetOffsetLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetTransType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Num</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LedgerPosting</Name>
			<Label>@SYS3881</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetOffsetLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetTransType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountCode</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RAssetTableGroupAll</ExtendedDataType>
			<EnumType>RAssetTableGroupAllStandard</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AssetLedgerDimension</Name>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AssetOffsetLedgerDimension</Name>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@SYS11162</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AssetTransType</Name>
			<AllowEdit>No</AllowEdit>
			<EnumType>RAssetTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Num</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>PostingProfileAccountRelation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RAssetPostingProfile</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AssetLedgerDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AssetLedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AssetOffsetLedgerDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AssetOffsetLedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProfileAccountIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Num</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AssetTransType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PostingProfile</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetLedgerAccounts</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetLedgerDimension</Name>
					<Field>AssetLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OffsetLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>OffsetLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetLedgerAccounts</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetOffsetLedgerDimension</Name>
					<Field>AssetOffsetLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RAssetGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RAssetGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetGroup</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>RAssetLedgerAccounts</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Num</Name>
					<Field>Num</Field>
					<RelatedField>AssetGroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountCode</Name>
					<Field>AccountCode</Field>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RAssetLedger</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RAssetLedger</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile</Name>
					<SourceEDT>RAssetPostingProfile</SourceEDT>
					<Field>PostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RAssetStandard</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RAssetStandardTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetStandardTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>RAssetLedgerAccounts</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Num</Name>
					<Field>Num</Field>
					<RelatedField>AssetStandardId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountCode</Name>
					<Field>AccountCode</Field>
					<Value>3</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RAssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RAssetTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>RAssetLedgerAccounts</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Num</Name>
					<Field>Num</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountCode</Name>
					<Field>AccountCode</Field>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>