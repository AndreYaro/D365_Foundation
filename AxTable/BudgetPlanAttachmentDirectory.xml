<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanAttachmentDirectory</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetPlanAttachmentDirectory extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        BudgetPlanningProcess   budgetPlanningProcess;
        boolean                 isValid;

        isValid = super();

        if (isValid && this.RecId)
        {
            budgetPlanningProcess = BudgetPlanningProcess::findFirstByAttachmentDirectory(this.RecId);

            if (budgetPlanningProcess)
            {
                isValid = checkFailed("@GLS70653");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean                           isValid;
        BudgetPlanAttachmentDirectoryType attachmentDirectory;

        isValid = super(_fieldIdToCheck);

        if (isValid)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(BudgetPlanAttachmentDirectory, AttachmentDirectory):
                    // Convert http or file path to absolute path
                    attachmentDirectory = this.AttachmentDirectory;

                    if (attachmentDirectory)
                    {
                        // Assign the converted value to the directory field
                        this.AttachmentDirectory = attachmentDirectory;
                    }

                    isValid = BudgetPlanAttachmentDirectory::checkExistFolderPath(this.AttachmentDirectory);
                    break;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>BudgetPlanAttachmentDirectory</c> table; if not,
    /// an error message is displayed.
    /// </summary>
    /// <param name="_budgetPlanAttachmentDirectoryRecId">
    /// The record ID of the <c>BudgetPlanSAttachmentDirectory</c> record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(BudgetPlanAttachmentDirectoryRecId _budgetPlanAttachmentDirectoryRecId)
    {
        boolean isExisting = true;

        if (!BudgetPlanAttachmentDirectory::exist(_budgetPlanAttachmentDirectoryRecId))
        {
            isExisting = checkFailed(strFmt(BudgetPlanAttachmentDirectory::txtNotExist(), _budgetPlanAttachmentDirectoryRecId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistFolderPath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified folder path exists; if not,
    /// an error message is displayed.
    /// </summary>
    /// <param name="_folderPath">
    /// The folder path to check for existence.
    /// </param>
    /// <returns>
    /// true if the folder path exists; otherwise, false.
    /// </returns>
    public static boolean checkExistFolderPath(Filename _folderPath)
    {
        boolean isValid = true;

        if (_folderPath)
        {
            isValid = checkFailed(strFmt("@SYS72247", _folderPath));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified record exists in the <c>BudgetPlanAttachmentDirectory</c> table.
    /// </summary>
    /// <param name="_budgetPlanAttachmentDirectoryRecId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(BudgetPlanAttachmentDirectoryRecId _budgetPlanAttachmentDirectoryRecId)
    {
        return (BudgetPlanAttachmentDirectory::find(_budgetPlanAttachmentDirectoryRecId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BudgetPlanAttachmentDirectory</c> table.
    /// </summary>
    /// <param name="_budgetPlanAttachmentDirectoryRecId">
    /// The record ID of the <c>BudgetPlanAttachmentDirectory</c> to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanAttachmentDirectory</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanAttachmentDirectory find(
        BudgetPlanAttachmentDirectoryRecId  _budgetPlanAttachmentDirectoryRecId,
        boolean                             _forupdate = false,
        ConcurrencyModel                    _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanAttachmentDirectory budgetPlanAttachmentDirectory;

        if (_budgetPlanAttachmentDirectoryRecId)
        {
            budgetPlanAttachmentDirectory.selectForUpdate(_forupdate);

            if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanAttachmentDirectory.concurrencyModel(_concurrencyModel);
            }

            select firstonly budgetPlanAttachmentDirectory
                where budgetPlanAttachmentDirectory.RecId == _budgetPlanAttachmentDirectoryRecId;
        }

        return budgetPlanAttachmentDirectory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAttachmentDirectory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BudgetPlanAttachmentDirectory</c> table.
    /// </summary>
    /// <param name="_budgetPlanAttachmentDirectoryType">
    /// The attachment directory path of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanAttachmentDirectory</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanAttachmentDirectory findByAttachmentDirectory(
        BudgetPlanAttachmentDirectoryType   _budgetPlanAttachmentDirectoryType,
        boolean                             _forupdate = false,
        ConcurrencyModel                    _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanAttachmentDirectory budgetPlanAttachmentDirectory;

        if (_budgetPlanAttachmentDirectoryType)
        {
            budgetPlanAttachmentDirectory.selectForUpdate(_forupdate);

            if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanAttachmentDirectory.concurrencyModel(_concurrencyModel);
            }

            select firstonly budgetPlanAttachmentDirectory
                where budgetPlanAttachmentDirectory.AttachmentDirectory == _budgetPlanAttachmentDirectoryType;
        }

        return budgetPlanAttachmentDirectory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>BudgetPlanAttachmentDirectory</c> record for a specified <c>BudgetPlanningProcess</c>
    /// record.
    /// </summary>
    /// <param name="_planningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanAttachmentDirectory</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanAttachmentDirectory findFromProcess(
        BudgetPlanningProcessRecId  _planningProcessRecId,
        boolean                     _forUpdate = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanAttachmentDirectory       budgetPlanAttachmentDirectory;
        BudgetPlanAttachmentDirectoryRecId  attachmentDirectoryRecId;

        if (_planningProcessRecId)
        {
            attachmentDirectoryRecId = BudgetPlanningProcess::find(_planningProcessRecId).BudgetPlanAttachmentDirectory;

            budgetPlanAttachmentDirectory = BudgetPlanAttachmentDirectory::find(
                attachmentDirectoryRecId,
                _forUpdate,
                _concurrencyModel);
        }

        return budgetPlanAttachmentDirectory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@GLS70234</DeveloperDocumentation>
	<FormRef>BudgetPlanningConfigurationAttachDir</FormRef>
	<Label>@GLS70236</Label>
	<SingularLabel>@GLS70235</SingularLabel>
	<TableGroup>Group</TableGroup>
	<TitleField1>AttachmentDirectory</TitleField1>
	<CacheLookup>Found</CacheLookup>
	<Modules>Budget</Modules>
	<ReplacementKey>AttachmentDirectoryIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AttachmentDirectory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AttachmentDirectory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AttachmentDirectory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AttachmentDirectory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AttachmentDirectory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanAttachmentDirectoryType</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AttachmentDirectoryIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AttachmentDirectory</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>