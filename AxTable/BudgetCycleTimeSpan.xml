<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetCycleTimeSpan</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetCycleTimeSpan extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateEndFiscalCalendarPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the ending period for the specified starting date.
    /// </summary>
    /// <param name="_startDate">
    /// The <c>FiscalPeriodStart</c> value for which ending period must be found.
    /// </param>
    /// <returns>
    /// A <c>FiscalCalendarPeriod</c> record ID of the ending date.
    /// </returns>
    public recId calculateEndFiscalCalendarPeriod(FiscalPeriodStart _startDate)
    {
        FiscalCalendarPeriod    lastPeriod;
        FiscalCalendarPeriod    period;
        FiscalCalendarYear      fiscalCalendarYear;
        BudgetNumberOfPeriods   defaultNumberOfPeriods;

        if (this.BudgetCycleLengthOption == BudgetCycleLengthOption::SpecifyPeriods)
        {
            defaultNumberOfPeriods = this.DefaultNumberOfAccountingPeriods;

            if (defaultNumberOfPeriods > 0)
            {
                // Loop over the FiscalCalendarPeriods until the number of periods is hit
                while select period
                    order by period.StartDate asc
                    exists join fiscalCalendarYear
                        where fiscalCalendarYear.RecId == period.FiscalCalendarYear &&
                            fiscalCalendarYear.FiscalCalendar == this.FiscalCalendar &&
                            period.StartDate >= _startDate &&
                            period.Type == FiscalPeriodType::Operating
                {
                    defaultNumberOfPeriods --;

                    if (defaultNumberOfPeriods == 0)
                    {
                        lastPeriod = period;
                        break;
                    }
                }
            }
        }
        else
        {
            fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(this.FiscalCalendar, _startDate);
            lastPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(this.FiscalCalendar, fiscalCalendarYear.EndDate, FiscalPeriodType::Operating);
        }

        return lastPeriod.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        BudgetCycle budgetCycle;

        if (this.validateDelete())
        {
            super();

            ttsbegin;

            delete_from budgetCycle
                where budgetCycle.BudgetCycleTimeSpan == this.RecId;

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCalendarId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>CalendarId</c> value of budget cycle time span.
    /// </summary>
    /// <returns>
    /// The <c>CalendarId</c> value for the budget cycle time span.
    /// </returns>
    public display CalendarId displayCalendarId()
    {
        CalendarId calendarId;

        if (hasTableAccess(tablenum(FiscalCalendar)))
        {
            calendarId = FiscalCalendar::find(this.FiscalCalendar).CalendarId;
        }

        return calendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetCycleLengthOption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the budget cycle length option is valid.
    /// </summary>
    /// <returns>
    /// true if the given budget cycle length option is valid; otherwise, false.
    /// </returns>
    public boolean validateBudgetCycleLengthOption()
    {
        boolean isValid = true;

        if (this.RecId && this.BudgetCycleLengthOption != this.orig().BudgetCycleLengthOption)
        {
            // The budget cycle time span has been saved, so the cycle length option cannot be changed.
            isValid = checkFailed("@Budget:BudgetCycleTimeSpanBudgetCycleLengthOptionChangedWarning");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        ret = ret && this.validateTimeSpanForControlConfiguration();

        ret = ret && this.validateTimeSpanPrimaryLedger();

        ret = ret && this.validateTimeSpanForControlRule();

        ret = ret && this.validateTimeSpanForBudgetGroup();

        if (ret)
        {
            BudgetCycle budgetCycle;

            while select budgetCycle where
                budgetCycle.BudgetCycleTimeSpan == this.RecId
            {
                if (!budgetCycle.validateDelete())
                {
                    ret = false;
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case (fieldnum(BudgetCycleTimeSpan, Name)) :
                    ret = this.validateTimeSpanName();
                    break;

                case (fieldnum(BudgetCycleTimeSpan, DefaultNumberOfAccountingPeriods)) :
                    ret = this.validateNumberOfPeriods();
                    break;

                case (fieldNum(BudgetCycleTimeSpan, BudgetCycleLengthOption)) :
                    ret = this.validateBudgetCycleLengthOption();
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNumberOfPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the number of periods is valid.
    /// </summary>
    /// <returns>
    /// true if the given number of periods is valid; otherwise, false.
    /// </returns>
    public boolean validateNumberOfPeriods()
    {
        boolean                 isValid = true;
        BudgetNumberOfPeriods   totalNumberOfFiscalPeriods;

        if (this.BudgetCycleLengthOption == BudgetCycleLengthOption::SpecifyPeriods)
        {
            if (this.DefaultNumberOfAccountingPeriods <= 0)
            {
                isValid = checkFailed("@SYS320421");
            }
            else
            {
                totalNumberOfFiscalPeriods = BudgetCycleTimeSpan::calculateTotalPeriodsForFiscalCalendar(this.FiscalCalendar);

                if (this.DefaultNumberOfAccountingPeriods > totalNumberOfFiscalPeriods)
                {
                    isValid = checkFailed(strfmt("@SYS320422", this.Name, this.DefaultNumberOfAccountingPeriods));
                }
            }
        }
        else
        {
            if (this.DefaultNumberOfAccountingPeriods != 0)
            {
                isValid = checkFailed("@Budget:BudgetCycleTimeSpanNonZeroNumberOfFiscalPeriodsWarning");
            }
        }

        if (this.RecId && this.DefaultNumberOfAccountingPeriods != this.orig().DefaultNumberOfAccountingPeriods)
        {
            // The budget cycle time span has been saved, so the number of accounting periods cannot be changed.
            isValid = checkFailed("@Budget:BudgetCycleTimeSpanDefaultNumberOfAccountingPeriodsChangedWarning");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTimeSpanForBudgetGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>BudgetCycleTimeSpan</c> record is used in the <c>BudgetGroup</c> form as
    /// part of budget group definition.
    /// </summary>
    /// <returns>
    /// true if the time span does not exists; otherwise, false.
    /// </returns>
    public boolean validateTimeSpanForBudgetGroup()
    {
        boolean                     isValid = true;
        BudgetControlConfiguration  budgetControlConfiguration;
        BudgetGroup                 budgetGroup;

        select firstonly RecId
            from budgetGroup
                where budgetGroup.BudgetCycleTimeSpan == this.RecId
            join RecId, PrimaryLedger
            from budgetControlConfiguration
                where budgetControlConfiguration.RecId == budgetGroup.BudgetControlConfiguration;

        if (budgetGroup)
        {
            isValid = checkFailed(strfmt("@SYS320430",
                                            this.Name,
                                            Ledger::name(budgetControlConfiguration.PrimaryLedger)));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTimeSpanForControlConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>BudgetCycleTimeSpan</c> record is used in the
    /// <c>BudgetControlConfiguration</c> table as default budget cycle time span.
    /// </summary>
    /// <returns>
    /// true if the time span does not exists; otherwise, false.
    /// </returns>
    public boolean validateTimeSpanForControlConfiguration()
    {
        boolean isValid = true;
        BudgetControlConfiguration budgetControlConfiguration;

        select firstonly RecId, PrimaryLedger
            from budgetControlConfiguration
                where budgetControlConfiguration.DefaultBudgetCycleTimeSpan == this.RecId;

        if (budgetControlConfiguration.RecId != 0)
        {
            isValid = checkFailed(strfmt("@SYS320430",
                                            this.Name,
                                            Ledger::name(budgetControlConfiguration.PrimaryLedger)));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTimeSpanForControlRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>BudgetCycleTimeSpan</c> record is used in the <c>BudgetControlRule</c>
    /// form as part of rule definition.
    /// </summary>
    /// <returns>
    /// true if the time span does not exists; otherwise, false.
    /// </returns>
    public boolean validateTimeSpanForControlRule()
    {
        boolean isValid = true;
        BudgetControlConfiguration budgetControlConfiguration;
        BudgetControlRule   budgetControlRule;

        select firstonly RecId
            from budgetControlRule
                where budgetControlRule.BudgetCycleTimeSpan == this.RecId
            join RecId, PrimaryLedger
            from budgetControlConfiguration
                where budgetControlConfiguration.RecId == budgetControlRule.BudgetControlConfiguration;

        if (budgetControlRule.RecId != 0)
        {
            isValid = checkFailed(strfmt("@SYS320430",
                                            this.Name,
                                            Ledger::name(budgetControlConfiguration.PrimaryLedger)));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTimeSpanName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the budget cycle timespan name.
    /// </summary>
    /// <returns>
    /// true if the cycle name is valid; otherwise, false.
    /// </returns>
    public boolean validateTimeSpanName()
    {
        CalendarId  fiscalCalendarId;
        boolean isValid = true;

        if (this.Name != '' && this.FiscalCalendar != 0)
        {
            fiscalCalendarId = FiscalCalendar::find(this.FiscalCalendar).CalendarId;

            if (this.Name != this.orig().Name)
            {
                if (BudgetCycleTimeSpan::findByNameAndCalendar(this.Name, this.FiscalCalendar))
                {
                    isValid = checkFailed(strfmt("@SYS320419", this.Name, fiscalCalendarId));
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTimeSpanPrimaryLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>BudgetCycleTimeSpan</c> record is used in the
    /// <c>BudgetControlBudgetCycle</c> table as part of assigning budget cycles to budget control and
    /// budget model.
    /// </summary>
    /// <returns>
    /// true if the time span does not exists; otherwise, false.
    /// </returns>
    public boolean validateTimeSpanPrimaryLedger()
    {
        boolean     isValid = true;
        BudgetCycle budgetCycle;
        BudgetControlBudgetCycle budgetControlBudgetCycle;
        BudgetControlConfiguration budgetControlConfiguration;

        select firstonly BudgetControlConfiguration from budgetControlBudgetCycle
            exists join budgetCycle
                where budgetCycle.RecId ==  budgetControlBudgetCycle.BudgetCycle
                    && budgetCycle.BudgetCycleTimeSpan == this.RecId;

        if (budgetControlBudgetCycle)
        {
            budgetControlConfiguration = BudgetControlConfiguration::find(budgetControlBudgetCycle.BudgetControlConfiguration);

            isValid = checkFailed(strfmt("@SYS320430",
                                    BudgetCycleTimeSpan::find(this.RecId).Name,
                                    Ledger::name(budgetControlConfiguration.PrimaryLedger)));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = ret && this.validateTimeSpanName();

        ret = ret && this.validateBudgetCycleLengthOption();

        ret = ret && this.validateNumberOfPeriods();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalPeriodsForFiscalCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total number of fiscal periods present in the fiscal calendar.
    /// </summary>
    /// <param name="_fiscalCalendarRecId">
    /// A record ID of the fiscal calendar for which the number of fiscal periods must be calculated.
    /// </param>
    /// <returns>
    /// The total number of periods present in a fiscal calendar.
    /// </returns>
    public static BudgetNumberOfPeriods calculateTotalPeriodsForFiscalCalendar(RefRecId _fiscalCalendarRecId)
    {
        FiscalCalendarYear          fiscalCalendarYear;
        FiscalCalendarPeriod        fiscalCalendarPeriod;
        BudgetNumberOfPeriods       totalNumberOfFiscalPeriods;

        select count(RecId)
            from fiscalCalendarPeriod
                where fiscalCalendarPeriod.Type == FiscalPeriodType::Operating
            exists join fiscalCalendarYear
                where fiscalCalendarPeriod.FiscalCalendarYear == fiscalCalendarYear.RecId &&
                    fiscalCalendarYear.FiscalCalendar == _fiscalCalendarRecId;

        if (fiscalCalendarPeriod != null)
        {
            totalNumberOfFiscalPeriods = int642int(fiscalCalendarPeriod.RecId);
        }
        else
        {
            totalNumberOfFiscalPeriods = 0;
        }

        return totalNumberOfFiscalPeriods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>BudgetCycleTimeSpan</c> table exists and displays
    ///    an error if it does not exist.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>BudgetCycleTimeSpan</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;

        if (!BudgetCycleTimeSpan::exist(_recId))
        {
            ret = checkFailed(strfmt(BudgetCycleTimeSpan::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>BudgetCycleTimeSpan</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>BudgetCycleTimeSpan</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        boolean found;

        found = (select firstonly RecId from budgetCycleTimeSpan
                    where budgetCycleTimeSpan.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetCycleTimeSpan</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetCycleTimeSpan</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetCycleTimeSpan find(
        RecId              _recId,
        boolean            _forupdate = false,
        ConcurrencyModel   _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetCycleTimeSpan budgetCycleTimeSpan;

        budgetCycleTimeSpan.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetCycleTimeSpan.concurrencyModel(_concurrencyModel);
        }

        select firstonly budgetCycleTimeSpan
            where budgetCycleTimeSpan.RecId == _recId;

        return budgetCycleTimeSpan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBudgetCycleTimeSpanStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the start date of a specified record in the <c>BudgetCycleTimeSpan</c> table.
    /// </summary>
    /// <param name="_budgetCycleTimeSpanRecId">
    /// The record ID of a <c>BudgetCycleTimeSpan</c> record.
    /// </param>
    /// <returns>
    /// The first date in the first <c>BudgetCycle</c> record; otherwise, an empty record.
    /// </returns>
    public static FiscalPeriodStart findBudgetCycleTimeSpanStartDate(RecId _budgetCycleTimeSpanRecId)
    {
        BudgetCycle             firstCycle;
        BudgetCycleTimeSpan     timespan;
        FiscalCalendarPeriod    startPeriod;
        FiscalPeriodStart       firstCycleStartDate = dateNull();

        if (BudgetCycleTimeSpan::hasBudgetCycle(_budgetCycleTimeSpanRecId))
        {
            timespan = BudgetCycleTimeSpan::find(_budgetCycleTimeSpanRecId);

            select firstonly StartFiscalCalendarPeriod from firstCycle
                order by startPeriod.StartDate asc
                    where firstCycle.BudgetCycleTimeSpan == timespan.RecId
                join RecId from startPeriod
                    where startPeriod.RecId          == firstCycle.StartFiscalCalendarPeriod
                       && startPeriod.FiscalCalendar == timespan.FiscalCalendar;

            firstCycleStartDate = firstCycle.getStartDate();
        }

        return firstCycleStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByNameAndCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified time span name and fiscal calendar in <c>BudgetCycleTimeSpan</c> table.
    /// </summary>
    /// <param name="_name">
    /// The <c>BudgetCycleTimeSpanName</c> value that needs to be found.
    /// </param>
    /// <param name="_fiscalCalendarRecId">
    /// The record ID of fiscal calendar that needs to be found.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetCycleTimeSpan</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetCycleTimeSpan findByNameAndCalendar(
            BudgetCycleTimeSpanName     _name,
            RefRecId                    _fiscalCalendarRecId,
            boolean                     _forupdate = false,
            ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetCycleTimeSpan budgetCycleTimeSpan;

        budgetCycleTimeSpan.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetCycleTimeSpan.concurrencyModel(_concurrencyModel);
        }

        if (_name != '' && _fiscalCalendarRecId != 0)
        {
            select firstonly budgetCycleTimeSpan
                where budgetCycleTimeSpan.Name == _name
                    && budgetCycleTimeSpan.FiscalCalendar == _fiscalCalendarRecId;
        }

        return budgetCycleTimeSpan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBudgetCycle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>BudgetCycle</c> record exists for a <c>BudgetCycleTimeSpan</c> record.
    /// </summary>
    /// <param name="_budgetCycleTimeSpanRecId">
    /// A record ID that the <c>BudgetCycle</c> records must be verified.
    /// </param>
    /// <returns>
    /// true if there is a <c>BudgetCycle</c> record; otherwise, false.
    /// </returns>
    public static boolean hasBudgetCycle(RecId _budgetCycleTimeSpanRecId)
    {
        boolean     found = false;
        BudgetCycle budgetCycle;

        select firstonly RecId
            from budgetCycle
            where budgetCycle.BudgetCycleTimeSpan == _budgetCycleTimeSpanRecId;

        if (budgetCycle.RecId != 0)
        {
            found = true;
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetCycleTimeSpan</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the lookup for the <c>BudgetCycleTimeSpan</c> records.
    /// </summary>
    /// <param name="_ctrl">
    ///    The form reference control for which to perform the lookup.
    /// </param>
    /// <returns>
    ///    The <c>BudgetCycleTimeSpan</c> record selected by the lookup.
    /// </returns>
    public static BudgetCycleTimeSpan lookupBudgetCycleTimeSpan(FormReferenceControl _ctrl)
    {
        SysReferenceTableLookup budgetCycleTimeSpanLookup;

        budgetCycleTimeSpanLookup = SysReferenceTableLookup::newParameters(tablenum(BudgetCycleTimeSpan), _ctrl, true);

        // Add the fields to be shown in the lookup form.
        budgetCycleTimeSpanLookup.addLookupfield(fieldnum(BudgetCycleTimeSpan, Name));
        budgetCycleTimeSpanLookup.addLookupfield(fieldnum(BudgetCycleTimeSpan, FiscalCalendar));

        // Perform the lookup.
        return budgetCycleTimeSpanLookup.performFormLookup() as BudgetCycleTimeSpan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetCtrl</ConfigurationKey>
	<DeveloperDocumentation>@SYS317170</DeveloperDocumentation>
	<FormRef>BudgetCycleTimeSpan</FormRef>
	<Label>@SYS314453</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>DefaultNumberOfAccountingPeriods</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>Budget</Modules>
	<ReplacementKey>BudgetCycleTimeSpanIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>BudgetCycle</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>BudgetCycle</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FiscalCalendar</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalCalendar</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS35583</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FiscalCalendar</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetCycleLengthOption</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Name</Name>
			<Label>@SYS7399</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NumberOfPeriods</Name>
			<Label>@SYS314443</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultNumberOfAccountingPeriods</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BudgetCycleLengthOption</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>BudgetCycleLengthOption</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DefaultNumberOfAccountingPeriods</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetNumberOfPeriods</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FiscalCalendar</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS105687</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetCycleTimeSpanName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BudgetCycleTimeSpanIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FiscalCalendar</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FiscalCalendar</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>FiscalCalendar</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>FiscalCalendar</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FiscalCalendar_BudgetCycleTimeSpan</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalCalendar</Name>
					<Field>FiscalCalendar</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>