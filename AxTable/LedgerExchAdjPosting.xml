<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerExchAdjPosting</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerExchAdjPosting extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the newly created <c>LedgerExchAdjPosting</c> table record.
    /// </summary>
    [Hookable(false)]
    public void initValue()
    {
        super();

        this.CurrencyCode = LedgerExchAdjPostingCurrencyCode::All;
        this.AccountCode = TableGroupAll::All;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes follow-up logic when a field is modified in a form.
    /// </summary>
    /// <param name="_fieldId">Table field id number of the field being modified.</param>
    [Hookable(false)]
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(LedgerExchAdjPosting, CurrencyCode):
                switch (this.CurrencyCode)
                {
                    case LedgerExchAdjPostingCurrencyCode::All:
                        if (this.Currency)
                        {
                            this.Currency = '';
                        }
                        break;
                }
                break;
            case fieldNum(LedgerExchAdjPosting, AccountCode):
                if (this.AccountRelation)
                {
                    this.AccountRelation = '';
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the <c>LedgerExchAdjPosting</c> table record can be written to the database.
    /// </summary>
    /// <returns>
    /// True if the record is valid; False, otherwise.
    /// </returns>
    [Hookable(false)]
    public boolean validateWrite()
    {
        boolean ret = super();

        if (this.isCurrencyRequired() && this.Currency == '')
        {
            ret = checkFailed("@GeneralLedger:LedgerExchAdjPostingEmptyCurrencyError");
        }

        if (!this.isCurrencyRequired() && this.Currency != '')
        {
            ret = checkFailed("@GeneralLedger:LedgerExchAdjPostingInvalidCurrencyError");
        }

        if (this.isAccountRelationRequired() && this.AccountRelation == '')
        {
            ret = checkFailed("@GeneralLedger:LedgerExchAdjPostingEmptyAccountError");
        }

        if (!this.isAccountRelationRequired() && this.AccountRelation != '')
        {
            ret = checkFailed("@GeneralLedger:LedgerExchAdjPostingInvalidAccountError");
        }

        if (!this.validateAccountType())
        {
            ret = checkFailed("@GeneralLedger:LedgerExchAdjPostingInvalidAccountTypeError");
        }

        ret = ret && this.validateDuplicateProfile();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>LedgerExchAdjPosting</c> table record.
    /// </summary>
    [Hookable(false)]
    public void delete()
    {
        super();

        LedgerExchAdjPostingCache::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts new <c>LedgerExchAdjPosting</c> table record.
    /// </summary>
    [Hookable(false)]
    public void insert()
    {
        this.DefaultLevel = LedgerExchAdjPosting::getDefaultLevel();

        super();

        LedgerExchAdjPostingCache::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>LedgerExchAdjPosting</c> table record.
    /// </summary>
    [Hookable(false)]
    public void update()
    {
        super();

        LedgerExchAdjPostingCache::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCurrencyRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the <c>Currency</c> field must contain a value
    /// </summary>
    /// <returns>
    /// True if the <c>Currency</c> field must contain a value; False, otherwise.
    /// </returns>
    [Hookable(false)]
    public boolean isCurrencyRequired()
    {
        return this.CurrencyCode == LedgerExchAdjPostingCurrencyCode::Table;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAccountRelationRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the <c>AccountRelation</c> field must contain a value
    /// </summary>
    /// <returns>
    /// True if the <c>AccountRelation</c> field must contain a value; False, otherwise.
    /// </returns>
    [Hookable(false)]
    public boolean isAccountRelationRequired()
    {
        return this.AccountCode != TableGroupAll::All;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSearchParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current instance with data from a ledger dimension posting search parameter.
    /// </summary>
    /// <param name = "_searchParameter">A ledger dimension posting search parameter.</param>
    [Hookable(false)]
    public void initSearchParm(LedgerExchAdjPostingSearchParameters _searchParameter)
    {
        this.Module = _searchParameter.parmModule();
        this.AccountType = _searchParameter.parmAccountType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimensionFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the specified posting ledger dimension.
    /// </summary>
    /// <param name = "_searchParameters">An <c>LedgerExchAdjPostingSearchParameters</c> instance which contains the parameters used to retrieve the posting ledger dimension.</param>
    /// <returns>The posting ledger dimension for the account item; otherwise, zero.</returns>
    public static LedgerDimensionDefaultAccount getLedgerDimensionFromParameters(LedgerExchAdjPostingSearchParameters _searchParameters)
    {
        LedgerExchAdjPostingSearchParameters searchParameters = _searchParameters.clone();
        
        container cachedResult = LedgerExchAdjPostingCache::getLedgerDimensionFromCache(searchParameters);

        if (conLen(cachedResult) >= 1)
        {
            return conPeek(cachedResult, 1);
        }

        searchParameters.populateAccountGroup();
        
        List criteriaList = LedgerExchAdjPosting::buildCriteriaList(searchParameters);

        LedgerExchAdjPostingSearchEngine searchEngine = new LedgerExchAdjPostingSearchEngine(criteriaList);

        LedgerDimensionDefaultAccount ledgerDimension = searchEngine.executeSearch();

        LedgerExchAdjPostingCache::insertLedgerDimensionIntoCache(searchParameters, ledgerDimension);

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimensionFromTableParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a ledger dimension that matches the passed search parameter.
    /// </summary>
    /// <param name = "_searchParameter">A search parameter.</param>
    /// <returns>The posting ledger dimension.</returns>
    public static LedgerDimensionDefaultAccount getLedgerDimensionFromTableParameter(LedgerExchAdjPosting _searchParameter)
    {
        return LedgerExchAdjPosting::findByRelationsFromParameter(_searchParameter).LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRelationsFromParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a foreign currency revaluation posting record based on provided search parameter.
    /// </summary>
    /// <param name = "_searchParameter">A search parameter.</param>
    /// <param name = "_forUpdate">Whether found record is supposed to be updated.</param>
    /// <returns>An foreign currency revaluation posting record.</returns>
    public static LedgerExchAdjPosting findByRelationsFromParameter(LedgerExchAdjPosting _searchParameter, boolean _forUpdate = false)
    {
        LedgerExchAdjPosting ledgerExchAdjPosting;

        if (_forUpdate)
        {
            ledgerExchAdjPosting.selectForUpdate(_forUpdate);
        }

        select firstonly ledgerExchAdjPosting
            where ledgerExchAdjPosting.Module == _searchParameter.Module
                && ledgerExchAdjPosting.AccountType == _searchParameter.AccountType
                &&  ledgerExchAdjPosting.CurrencyCode == _searchParameter.CurrencyCode
                &&  ledgerExchAdjPosting.Currency == _searchParameter.Currency
                &&  ledgerExchAdjPosting.AccountCode == _searchParameter.AccountCode
                &&  ledgerExchAdjPosting.AccountRelation == _searchParameter.AccountRelation;

        return ledgerExchAdjPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountRelationForAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves appropriate account number based on account code from search parameter.
    /// </summary>
    /// <param name = "_accountCode">Account code</param>
    /// <param name = "_accountNum">Account number if account code is Table</param>
    /// <param name = "_accountGroup">Account number if account code is Group</param>
    /// <returns>Account number based on account code</returns>
    [Hookable(false)]
    public static PostingProfileAccountRelation accountRelationForAccount(
        TableGroupAll _accountCode,
        MainAccountNum _accountNum,
        AccountCategory _accountGroup)
    {
        PostingProfileAccountRelation accountRel = '';
        
        if (_accountCode == TableGroupAll::Table)
        {
            accountRel = _accountNum;
        }
        else if (_accountCode == TableGroupAll::GroupId)
        {
            accountRel = _accountGroup;
        }

        return accountRel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyForCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves appropriate currency based on currency code from search parameter.
    /// </summary>
    /// <param name = "_currencyCode">Currency code</param>
    /// <param name = "_currency">Currency if currency code is Table</param>
    /// <returns>Currency based on currency code</returns>
    [Hookable(false)]
    public static CurrencyCode currencyForCurrencyCode(
        LedgerExchAdjPostingCurrencyCode _currencyCode,
        CurrencyCode _currency)
    {
        CurrencyCode currency = '';
        
        if (_currencyCode == LedgerExchAdjPostingCurrencyCode::Table)
        {
            currency = _currency;
        }

        return currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves lowest default level configured.
    /// </summary>
    /// <returns>Current lowest default level</returns>
    [Hookable(false)]
    public static LedgerExchAdjPostingDefaultLevel getDefaultLevel()
    {
        LedgerRecId curLedger = Ledger::current();
        container cachedResult = LedgerExchAdjPostingCache::getDefaultLevelFromCache(curLedger);

        if (conLen(cachedResult) >= 1)
        {
            return conPeek(cachedResult, 1);
        }

        LedgerExchAdjPosting ledgerExchAdjPosting;
        LedgerExchAdjPostingDefaultLevel currentDefaultLvl = LedgerExchAdjPostingDefaultLevel::Currency;
        
        select firstonly DefaultLevel from ledgerExchAdjPosting;

        if (ledgerExchAdjPosting)
        {
            currentDefaultLvl = ledgerExchAdjPosting.DefaultLevel;
        }

        LedgerExchAdjPostingCache::insertDefaultLevelIntoCache(curLedger, currentDefaultLvl);

        return currentDefaultLvl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves lowest default level configured.
    /// </summary>
    /// <param name = "_newDefaultLevel">New lowest default level</param>
    [Hookable(false)]
    public static void setDefaultLevel(LedgerExchAdjPostingDefaultLevel _newDefaultLevel)
    {
        LedgerExchAdjPosting ledgerExchAdjPosting;

        update_recordset ledgerExchAdjPosting
            setting DefaultLevel = _newDefaultLevel;

        LedgerExchAdjPostingCache::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDuplicateProfile</Name>
				<Source><![CDATA[
    private boolean validateDuplicateProfile()
    {
        boolean ret = true;
        LedgerExchAdjPosting ledgerExchAdjPosting;

        select firstonly ledgerExchAdjPosting
            where ledgerExchAdjPosting.Module == this.Module
                && ledgerExchAdjPosting.AccountType == this.AccountType
                && ledgerExchAdjPosting.CurrencyCode == this.CurrencyCode
                && ledgerExchAdjPosting.Currency == this.Currency
                && ledgerExchAdjPosting.AccountCode == this.AccountCode
                && ledgerExchAdjPosting.AccountRelation == this.AccountRelation
                && ledgerExchAdjPosting.RecId != this.RecId;

        if (ledgerExchAdjPosting.RecId)
        {
            ret = checkFailed("@GeneralLedger:LedgerExchAdjPostingDuplicateKeyError");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCriteriaList</Name>
				<Source><![CDATA[
    private static List buildCriteriaList(LedgerExchAdjPostingSearchParameters _searchParameter)
    {
        List criteriaList = new List(Types::Class);

        LedgerExchAdjPostingCurrencySearchCriteria currencyCriteria = LedgerExchAdjPostingCurrencySearchCriteria::construct(_searchParameter);
        LedgerExchAdjPostingAccountSearchCriteria accountCriteria = LedgerExchAdjPostingAccountSearchCriteria::construct(_searchParameter);
        LedgerExchAdjPostingDefaultLevel defaultLevel = LedgerExchAdjPosting::getDefaultLevel();

        if (defaultLevel ==LedgerExchAdjPostingDefaultLevel::Currency)
        {
            criteriaList.addEnd(currencyCriteria);
            criteriaList.addEnd(accountCriteria);
        }
        else
        {
            criteriaList.addEnd(accountCriteria);
            criteriaList.addEnd(currencyCriteria);
        }

        return criteriaList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccountType</Name>
				<Source><![CDATA[
    private boolean validateAccountType()
    {
        boolean ret = true;

        switch (this.Module)
        {
            case LedgerExchAdjPostingModule::Bank:
                ret = this.AccountType == CurrencyGainLossAccountType::UnrealizedGain 
                        || this.AccountType == CurrencyGainLossAccountType::UnrealizedLoss;
                break;
            case LedgerExchAdjPostingModule::AccountsReceivable:
            case LedgerExchAdjPostingModule::AccountsPayable:
            case LedgerExchAdjPostingModule::GeneralLedger:
                ret = this.AccountType == CurrencyGainLossAccountType::UnrealizedGain
                        || this.AccountType == CurrencyGainLossAccountType::UnrealizedLoss
                        || this.AccountType == CurrencyGainLossAccountType::RealizedGain
                        || this.AccountType == CurrencyGainLossAccountType::RealizedLoss;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@GeneralLedger:LedgerExchAdjPostingDevDoc</DeveloperDocumentation>
	<FormRef>LedgerExchAdjPosting</FormRef>
	<Label>@GeneralLedger:LedgerExchAdjPostingLabel</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>Module</TitleField1>
	<TitleField2>AccountType</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>LedgerExchAdjPostingIdx</ClusteredIndex>
	<Modules>Currency</Modules>
	<ReplacementKey>LedgerExchAdjPostingIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Module</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountRelation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Module</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerExchAdjPostingModule</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>CurrencyGainLossAccountType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DefaultLevel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerExchAdjPostingDefaultLevel</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS3392</Label>
			<EnumType>LedgerExchAdjPostingCurrencyCode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Currency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Label>@SYS125925</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PostingProfileAccountCode</ExtendedDataType>
			<Label>@SYS12243</Label>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountRelation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PostingProfileAccountRelation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LedgerExchAdjPostingIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Module</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CurrencyCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Currency</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountRelation</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CurrencyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CurrencyCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Currency</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AccountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountRelation</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Currency_LedgerExchAdjPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Currency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>Currency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_LedgerExchAdjPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AccountCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125989</EntityRelationshipRole>
			<RelatedTable>MainAccountCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>MainAccountCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerExchAdjPosting</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Module</Name>
					<Field>Module</Field>
					<ValueStr>LedgerExchAdjPostingModule::GeneralLedger</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountCode</Name>
					<Field>AccountCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountRelation</Name>
					<Field>AccountRelation</Field>
					<RelatedField>AccountCategory</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125070</EntityRelationshipRole>
			<RelatedTable>VendGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerExchAdjPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Module</Name>
					<Field>Module</Field>
					<ValueStr>LedgerExchAdjPostingModule::AccountsPayable</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountCode</Name>
					<Field>AccountCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountRelation</Name>
					<Field>AccountRelation</Field>
					<RelatedField>VendGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125070</EntityRelationshipRole>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerExchAdjPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Module</Name>
					<Field>Module</Field>
					<ValueStr>LedgerExchAdjPostingModule::AccountsPayable</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountCode</Name>
					<Field>AccountCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountRelation</Name>
					<Field>AccountRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125070</EntityRelationshipRole>
			<RelatedTable>CustGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerExchAdjPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Module</Name>
					<Field>Module</Field>
					<ValueStr>LedgerExchAdjPostingModule::AccountsReceivable</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountCode</Name>
					<Field>AccountCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountRelation</Name>
					<Field>AccountRelation</Field>
					<RelatedField>CustGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123523</EntityRelationshipRole>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerExchAdjPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Module</Name>
					<Field>Module</Field>
					<ValueStr>LedgerExchAdjPostingModule::AccountsReceivable</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountCode</Name>
					<Field>AccountCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountRelation</Name>
					<Field>AccountRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BankGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerExchAdjPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Module</Name>
					<Field>Module</Field>
					<ValueStr>LedgerExchAdjPostingModule::Bank</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountCode</Name>
					<Field>AccountCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountRelation</Name>
					<Field>AccountRelation</Field>
					<RelatedField>BankGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BankAccountTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankAccountTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerExchAdjPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Module</Name>
					<Field>Module</Field>
					<ValueStr>LedgerExchAdjPostingModule::Bank</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountCode</Name>
					<Field>AccountCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountRelation</Name>
					<Field>AccountRelation</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>