<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdParmScheduling</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdParmScheduling extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcDateTimeDirection</Name>
				<Source><![CDATA[
    container calcDateTimeDirection()
    {
        ProdParmScheduling  lastProdParmScheduling;
        ProdRouteJob        lastProdRouteJob;

        ReqTrans            reqTrans;
        ProdTable           prodTable;

        SchedDirection      schedDirection;
        SchedDate           schedDate;
        SchedTime           schedTime;
        ReqPlanVersion      reqPlanVersionDynamic = ReqPlanVersion::findActiveReqPlanIdDynamic();

        if (this.SchedDirection == ProdSchedDirection::None             ||
            this.SchedDirection == ProdSchedDirection::ForwardFromToday )
        {
            schedDate       = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            schedTime       = 0;
            schedDirection  = SchedDirection::Forward;
        }
        else if (this.SchedDirection == ProdSchedDirection::ForwardFromSchedStart)
        {
            prodTable        = ProdTable::find(this.ProdId);
            schedDate        = prodTable.SchedStart;
            schedTime        = prodTable.SchedFromTime;
            schedDirection   = SchedDirection::Forward;
        }
        else if (this.SchedDirection == ProdSchedDirection::ForwardFromSchedDate)
        {
            schedDate        = this.SchedDate;
            schedTime        = this.SchedTime;
            schedDirection   = SchedDirection::Forward;
        }
        else if (this.SchedDirection == ProdSchedDirection::BackwardFromDeliveryDate)
        {
            prodTable        = ProdTable::find(this.ProdId);
            schedDate        = prodTable.DlvDate;
            schedTime        = prodTable.DlvTime;
            schedDirection   = SchedDirection::Backward;
        }
        else if (this.SchedDirection == ProdSchedDirection::BackwardFromSchedEnd)
        {
            prodTable        = ProdTable::find(this.ProdId);
            schedDate        = prodTable.SchedEnd;
            schedTime        = prodTable.SchedToTime;
            schedDirection   = SchedDirection::Backward;
        }
        else if (this.SchedDirection == ProdSchedDirection::BackwardFromSchedDate)
        {
            schedDate        = this.SchedDate;
            schedTime        = this.SchedTime;
            schedDirection   = SchedDirection::Backward;
        }
        else if (this.SchedDirection == ProdSchedDirection::BackwardFromActionDate)
        {
            select firstOnly reqTrans
                order by reqTrans.ActionDate
                where reqTrans.PlanVersion              == reqPlanVersionDynamic.RecId   &&
                      reqTrans.RefType                  == ReqRefType::Production        &&
                      reqTrans.RefId                    == this.ProdId;

            if (reqTrans.RecId && reqTrans.ActionType)
            {
                schedDate      = reqTrans.ActionDate;
                schedTime      = this.getActionTimeFromCoveredIssues(reqTrans);
                schedDirection = SchedDirection::Backward;
            }
            else
            {
                prodTable       = ProdTable::find(this.ProdId);
                schedTime       = ProdMultiScheduling::maxSeconds();
                schedDate       = prodTable.LatestSchedDate      ? prodTable.LatestSchedDate      : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                schedDirection  = prodTable.LatestSchedDirection ? prodTable.LatestSchedDirection : SchedDirection::Forward;
                schedTime       = prodTable.LatestSchedDate      ? prodTable.LatestSchedTime      : ProdMultiScheduling::maxSeconds();
            }
        }
        else if (this.SchedDirection == ProdSchedDirection::BackwardFromFuturesDate)
        {
            select FuturesDate, FuturesTime from reqTrans
                where reqTrans.PlanVersion              == reqPlanVersionDynamic.RecId      &&
                      reqTrans.RefType                  == ReqRefType::Production           &&
                      reqTrans.RefId                    == this.ProdId;

            if (reqTrans.RecId && reqTrans.FuturesDate)
            {
                schedDate       = reqTrans.FuturesDate;
                schedTime       = reqTrans.FuturesTime;
                schedDirection  = SchedDirection::Backward;
            }
            else
            {
                prodTable       = ProdTable::find(this.ProdId);
                schedDate       = prodTable.LatestSchedDate      ? prodTable.LatestSchedDate      : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                schedDirection  = prodTable.LatestSchedDirection ? prodTable.LatestSchedDirection : SchedDirection::Forward;
                schedTime       = prodTable.LatestSchedDate      ? prodTable.LatestSchedTime      : ProdMultiScheduling::maxSeconds();
            }
        }
        else if (this.SchedDirection == ProdSchedDirection::AsLastSched)
        {
            prodTable       = ProdTable::find(this.ProdId);
            schedDate       = prodTable.LatestSchedDate      ? prodTable.LatestSchedDate      : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            schedDirection  = prodTable.LatestSchedDirection ? prodTable.LatestSchedDirection : SchedDirection::Forward;
            schedTime       = prodTable.LatestSchedDate      ? prodTable.LatestSchedTime      :
                                                              (schedDirection == SchedDirection::Forward ? 0 : ProdMultiScheduling::maxSeconds());
        }
        else if (this.SchedDirection == ProdSchedDirection::ForwardFromTomorrow)
        {
            schedDate       = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) + 1;
            schedTime       = 0;
            schedDirection  = SchedDirection::Forward;
        }
        else if (this.SchedDirection == ProdSchedDirection::ForwardFromPreviousJob)
        {
            select reverse lastProdParmScheduling
                index NumLineNumIdx
                where lastProdParmScheduling.ParmId  == this.ParmId &&
                      lastProdParmScheduling.LineNum <  this.LineNum;

            if (lastProdParmScheduling && lastProdParmScheduling.JobId)
            {
                lastProdRouteJob = ProdRouteJob::findJobId(lastProdParmScheduling.JobId);
                if (lastProdRouteJob)
                {
                    schedDate       = lastProdRouteJob.ToDate;
                    schedTime       = lastProdRouteJob.ToTime;
                    schedDirection  = SchedDirection::Forward;
                }
            }
        }
        else if (this.SchedDirection == ProdSchedDirection::BackwardFromPreviousJob)
        {
            select reverse lastProdParmScheduling
                index NumLineNumIdx
                where lastProdParmScheduling.ParmId == this.ParmId &&
                      lastProdParmScheduling.LineNum <  this.LineNum;

            if (lastProdParmScheduling && lastProdParmScheduling.JobId)
            {
                lastProdRouteJob = ProdRouteJob::findJobId(lastProdParmScheduling.JobId);
                if (lastProdRouteJob)
                {
                    schedDate       = lastProdRouteJob.FromDate;
                    schedTime       = lastProdRouteJob.FromTime;
                    schedDirection  = SchedDirection::Backward;
                }
            }
        }
        else
        {
            schedDirection      = SchedDirection::Forward;
            schedDate           = this.SchedDate ? this.SchedDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            schedTime           = this.SchedTime;
        }
        schedDate = schedDate ? schedDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        return [schedDate,schedTime,schedDirection];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdParametersDim</Name>
				<Source><![CDATA[
    public void initFromProdParametersDim(ProdParametersDim   _prodParametersDim)
    {
        this.SchedMethod               = _prodParametersDim.SchedMethod;
        this.SchedDirection            = _prodParametersDim.SchedDirection;
        this.MatLimited                = _prodParametersDim.MatLimited;
        this.CapLimited                = _prodParametersDim.CapLimit;
        this.PropertyLimited           = _prodParametersDim.PropertyLimited;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdRoute</Name>
				<Source><![CDATA[
    void initFromProdRoute(ProdRoute  prodRoute)
    {
        ProdRouteJob    prodRouteJob;

        select firstonly prodRouteJob
            index ProdOprIdx
            where prodRouteJob.ProdId  == prodRoute.ProdId    &&
                  prodRouteJob.OprNum  >= prodRoute.OprNumNext;

        this.initFromProdRouteJob(prodRouteJob);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdRouteJob</Name>
				<Source><![CDATA[
    void initFromProdRouteJob(ProdRouteJob  prodRouteJob)
    {
        this.ProdId = prodRouteJob.ProdId;
        this.JobId  = prodRouteJob.JobId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSplitFromProd</Name>
				<Source><![CDATA[
    void initFromSplitFromProd(ProdTable _prodTable)
    {
        ProdTable   prodTableRef;

        select firstonly SchedStart, SchedFromTime from prodTableRef
            index hint RefCollectIdx
            order by CollectRefLevel desc, SchedStart,SchedFromTime
            where prodTableRef.CollectRefProdId == _prodTable.CollectRefProdId;

        this.initParmDefault();
        this.initFromProdParametersDim(_prodTable.prodParametersDim());

        this.ProdId             = _prodTable.ProdId;
        this.SchedDirection     = ProdSchedDirection::ForwardFromSchedDate;
        this.SchedDate          = prodTableRef.SchedStart;
        this.SchedTime          = prodTableRef.SchedFromTime;
        this.SchedRef           = NoYes::Yes;
        this.SyncRef            = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSplitToProd</Name>
				<Source><![CDATA[
    void initFromSplitToProd(ProdTable _prodTable)
    {
        this.initParmDefault();
        this.initFromProdParametersDim(_prodTable.prodParametersDim());

        this.ProdId             = _prodTable.ProdId;
        this.SchedDirection     = ProdSchedDirection::BackwardFromDeliveryDate;
        this.SchedDate          = _prodTable.DlvDate;
        this.SchedTime          = _prodTable.DlvTime;
        this.SchedRef           = NoYes::Yes;
        this.SyncRef            = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWrkCtrParametersDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the scheduling parameters with the default values from the resource scheduling
    /// parameters.
    /// </summary>
    /// <param name="_wrkCtrParametersDim">
    /// A <c>WrkCtrParametersDim</c> record that contains the default resource scheduling parameters.
    /// </param>
    public void initFromWrkCtrParametersDim(WrkCtrParametersDim _wrkCtrParametersDim)
    {
        this.KeepProductionUnit         = _wrkCtrParametersDim.KeepProductionUnit;
        this.KeepWarehouseFromResource  = _wrkCtrParametersDim.KeepWarehouseFromResource;
        this.PrimaryResourceSelection   = _wrkCtrParametersDim.PrimaryResourceSelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        WrkCtrParametersDim wrkCtrParametersDim = WrkCtrParametersDim::findDefault();

        this.initValue();

        this.SchedTime                  = 0;
        this.SchedRef                   = NoYes::No;
        this.SyncRef                    = NoYes::No;
        this.CancelSetupTime            = NoYes::No;
        this.CancelProcessTime          = NoYes::No;
        this.CancelOverlap              = NoYes::No;
        this.CancelTransportTime        = NoYes::No;
        this.CancelQueueTime            = NoYes::No;
        this.AutoUpdate                 = NoYes::Yes;
        this.KeepProductionUnit         = NoYes::No;
        this.KeepWarehouseFromResource  = NoYes::No;
        this.ApplyIssueMargin           = NoYes::No;
        this.ApplyReceiptMargin         = NoYes::No;
        this.ApplyReorderMargin         = NoYes::No;

        this.initFromProdParametersDim(ProdParametersDim::findDefault());
        this.initFromWrkCtrParametersDim(wrkCtrParametersDim);
        this.initFromWrkCtrParametersDim(wrkCtrParametersDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void initValue()
    {
        super();

        this.SchedDate                 = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void insert()
    {
        this.JobStatus = ParmJobStatus::Waiting;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodName</Name>
				<Source><![CDATA[
    display ProdName prodName()
    {
        return ProdTable::find(this.ProdId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodStatus</Name>
				<Source><![CDATA[
    display ProdStatus prodStatus()
    {
        return ProdTable::find(this.ProdId).ProdStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodTable</Name>
				<Source><![CDATA[
    ProdTable prodTable()
    {
        return ProdTable::find(this.ProdId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteParameters</Name>
				<Source><![CDATA[
    static void deleteParameters(Num parmId)
    {
        ProdParmScheduling  prodParmScheduling;
        ttsbegin;

        delete_from prodParmScheduling
            index hint NumLineNumIdx
            where prodParmScheduling.ParmId == parmId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(ParmId    parmId,
                         ProdId    prodId)
    {
        return parmId && prodId && (select firstonly prodParmScheduling
                index hint NumProdNumIdx
                where prodParmScheduling.ParmId  == parmId   &&
                      prodParmScheduling.ProdId  == prodId
                ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static ProdParmScheduling find(Num       parmId,
                                   ProdId   prodId,
                                   boolean   _forUpdate = false
                                  )
    {
        ProdParmScheduling prodParmScheduling;
        prodParmScheduling.selectForUpdate(_forUpdate);

        if (parmId && prodId)
            select firstonly prodParmScheduling
                index hint NumProdNumIdx
                where prodParmScheduling.ParmId  == parmId   &&
                      prodParmScheduling.ProdId  == prodId;

        return prodParmScheduling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLast</Name>
				<Source><![CDATA[
    static ProdParmScheduling findLast(
        ProdId              prodId,
        ProdSchedMethod     method
        )
    {
        ProdParmScheduling prodParmScheduling;

        if (prodId)
            select reverse firstonly prodParmScheduling
                order ExecutedDateTime, ParmId
                where prodParmScheduling.ProdId         == prodId &&
                      prodParmScheduling.SchedMethod    == method;

        return prodParmScheduling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastExecuted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the last executed product scheduling parameters for a given production order ID.
    /// </summary>
    /// <param name = "_prodId">A production order ID.</param>
    /// <param name = "_method">A scheduling method.</param>
    /// <returns>Scheduling parameters.</returns>
    public static ProdParmScheduling findLastExecuted(
        ProdId              _prodId,
        ProdSchedMethod     _method
        )
    {
        ProdParmScheduling prodParmScheduling;

        if (_prodId)
        {
            select reverse firstonly prodParmScheduling
            index hint NumProdNumIdx
            where prodParmScheduling.ProdId         == _prodId
                && prodParmScheduling.SchedMethod   == _method
                && prodParmScheduling.JobStatus     == ParmJobStatus::Executed;
        }            

        return prodParmScheduling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    static LineNum lastLineNum(Num parmId)
    {
        return (select maxof(LineNum) from prodParmScheduling
                    where prodParmScheduling.ParmId == parmId).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodLookUpJob</Name>
				<Source><![CDATA[
    static void prodLookUpJob(Object lookupCtrl)
    {
        Query               q;
        ProdTable           prodTable;
        ProdStatusType      prodStatus;
        Counter             i = 0;
        int                 value;
        Common              anyBuffer;
        ProdLookup          prodLookup;
        SysDictEnum         sysDictEnum;

        q = new Query();
        q.addDataSource(tablenum(ProdTable));

        sysDictEnum = new SysDictEnum(enumnum(ProdStatus));
        value       = sysDictEnum.firstValue();

        while (i < enumcnt(ProdStatus))
        {
            prodTable.ProdStatus = value;
            prodStatus = prodTable.statusClient();

            if (prodStatus.runJobScheduling(anyBuffer as ProdParmScheduling,true))
                prodStatus.queryAddStatus(q);

            value = sysDictEnum.nextValue(value);
            i++;
        }
        prodLookup = new ProdLookup(lookupCtrl,q);
        prodLookup.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodLookUpOperation</Name>
				<Source><![CDATA[
    static void prodLookUpOperation(Object lookupCtrl)
    {
        Query               q;
        ProdTable           prodTable;
        ProdStatusType      prodStatus;
        Counter             i = 0;
        int                 value;
        Common              anyBuffer;
        ProdLookup          prodLookup;
        SysDictEnum         sysDictEnum;

        q = new Query();
        q.addDataSource(tablenum(ProdTable));

        sysDictEnum = new SysDictEnum(enumnum(ProdStatus));
        value       = sysDictEnum.firstValue();

        while (i < enumcnt(ProdStatus))
        {
            prodTable.ProdStatus = value;
            prodStatus = prodTable.statusClient();

            if (prodStatus.runOperationScheduling(anyBuffer as ProdParmScheduling,true))
                prodStatus.queryAddStatus(q);

            value = sysDictEnum.nextValue(value);
            i++;
        }
        prodLookup = new ProdLookup(lookupCtrl,q);
        prodLookup.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActionTimeFromCoveredIssues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the action time when the given receipt is required by the issues that are covered by it.
    /// </summary>
    /// <param name = "_receipt">The <c>ReqTrans</c> receipt.</param>
    /// <returns>The earliest time of all the issues that are covered by the given receipt on its action date.</returns>
    private ReqTime getActionTimeFromCoveredIssues(ReqTrans _receipt)
    {
        ReqTrans        issue;
        ReqTransCov     reqTransCov;
        ReqPlanVersion  reqPlanVersionDynamic = ReqPlanVersion::findActiveReqPlanIdDynamic();

        select firstonly ReqTime from issue
                order by issue.ReqTime
            where issue.PlanVersion == reqPlanVersionDynamic.RecId
               && issue.ReqDate     == _receipt.ActionDate
            exists join reqTransCov
            where  reqTransCov.IssueRecId   == issue.RecId
                && reqTransCov.ReceiptRecId == _receipt.RecId
                && reqTransCov.PlanVersion  == reqPlanVersionDynamic.RecId;

        if (issue)
        {
            return issue.ReqTime;
        }
        return ReqParameters::find().ReqTimePoDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldId)
    {
        boolean ret;

        ret = super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ProdParmScheduling, MatLimited):
                if (this.MatLimited && ReqParameters::find().ReqInactive)
                {
                    ret = checkFailed("@SCM:ReqParametersFormWarning") && ret;
                }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Prod</ConfigurationKey>
	<DeveloperDocumentation>@SYS124167</DeveloperDocumentation>
	<Label>@SYS21838</Label>
	<TableGroup>Worksheet</TableGroup>
	<TitleField1>ProdId</TitleField1>
	<TitleField2>SchedDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>NumLineNumIdx</ClusteredIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>NumLineNumIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoUpdate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SchedMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExecutedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SchedDirection</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SchedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SchedTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Cancellation</Name>
			<Label>@SYS4412</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CancelQueueTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CancelSetupTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CancelProcessTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CancelOverlap</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CancelTransportTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS2952</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SchedMethod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>JobScheduling</Name>
			<Label>@SYS16375</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SchedDirection</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SchedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SchedTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ScheduleSingleJob</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WrkCtrIdSched</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrimaryResourceSelection</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecalculateBomLevels</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Limitations</Name>
			<Label>@SYS22801</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CapLimited</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MatLimited</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PropertyLimited</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KeepProductionUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KeepWarehouseFromResource</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OperationsScheduling</Name>
			<Label>@SYS10062</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SchedDirection</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SchedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecalculateBomLevels</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>References</Name>
			<Label>@SYS14018</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SchedRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SyncRef</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExecutedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoUpdate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SafetyMargins</Name>
			<Label>@SCM:SafetyMargins</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ApplyReceiptMargin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApplyIssueMargin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApplyReorderMargin</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutoUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdAutoUpdate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CancelOverlap</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdSchedCancelOverlap</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CancelProcessTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdSchedCancelProcess</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CancelQueueTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdSchedCancelQueue</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CancelSetupTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdSchedCancelSetUp</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CancelTransportTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdSchedCancelTransport</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CapLimited</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ProdRouting</ConfigurationKey>
			<ExtendedDataType>SchedLimitCap</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ExecutedDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DateTimeExecuted</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JobId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdJobId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JobStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ParmJobStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>KeepProductionUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KeepProductionUnit</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>KeepWarehouseFromResource</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KeepWarehouseFromResource</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MatLimited</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SchedLimitMat</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParmId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdParmId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PrimaryResourceSelection</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS303221</Label>
			<EnumType>WrkCtrSchedulerPrimaryResourceSelection</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProdId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PropertyLimited</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SchedLimitProperty</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SchedDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SchedDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SchedDirection</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProdSchedDirection</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SchedMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProdSchedMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SchedRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SchedReference</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>SchedTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SchedTime</ExtendedDataType>
			<Label>@SYS8758</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ScheduleSingleJob</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdSchedSingleJob</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SyncRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SchedSyncRef</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TmpSortDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SchedDate</ExtendedDataType>
			<Label>@SYS4138</Label>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TmpSortInteger</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
			<Label>@SYS4138</Label>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>TmpSortTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SchedTime</ExtendedDataType>
			<Label>@SYS4138</Label>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WrkCtrIdSched</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WrkCtrIdSched</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RecalculateBomLevels</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS112515</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ApplyReorderMargin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqApplyReorderMargin</ExtendedDataType>
			<FeatureClass>ReqUseMarginsForProductionSchedulingFeature</FeatureClass>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ApplyReceiptMargin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqApplyReceiptMargin</ExtendedDataType>
			<FeatureClass>ReqUseMarginsForProductionSchedulingFeature</FeatureClass>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ApplyIssueMargin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqApplyIssueMargin</ExtendedDataType>
			<FeatureClass>ReqUseMarginsForProductionSchedulingFeature</FeatureClass>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NumLineNumIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>NumProdNumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProdId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProdId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>ParmBuffer</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Linenum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ParmId</MapField>
					<MapFieldTo>ParmId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Id</MapField>
					<MapFieldTo>ProdId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JobStatus</MapField>
					<MapFieldTo>JobStatus</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExecutedDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExecutedDateTime</MapField>
					<MapFieldTo>ExecutedDateTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LateSelection</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LateSelectionQuery</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>MRPRouteJob</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124168</EntityRelationshipRole>
			<RelatedTable>ProdRouteJob</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RouteJob</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Scheduling</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JobId</Name>
					<Field>JobId</Field>
					<RelatedField>JobId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdId</Name>
					<Field>ProdId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NewResourceWrkCtrTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WrkCtrTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>NewResourceWrkCtrTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProdParmScheduling</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WrkCtrIdSched</Name>
					<Field>WrkCtrIdSched</Field>
					<RelatedField>WrkCtrId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>IsIndividualResource_Extern</Name>
					<RelatedField>IsIndividualResource</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>WrkCtrIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdParmUpdate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdParmUpdate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParmId</Name>
					<Field>ParmId</Field>
					<RelatedField>ParmId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProdRouteJob</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdRouteJob</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JobId</Name>
					<Field>JobId</Field>
					<RelatedField>JobId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>JobIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdId</Name>
					<Field>ProdId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>