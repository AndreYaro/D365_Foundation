<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCommerceValidatorBatchJobs</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailCommerceValidatorBatchJobs extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a record on <c>RetailCommerceValidatorBatchJobs</c> table.
    /// </summary>
    /// <param name = "_validationId">The validation Id.</param>
    /// <param name = "_batchJobId">The batch job id.</param>
    /// <param name = "_forUpdate">Select for update (Y/N). Default false.</param>
    /// <returns>A table buffer of the <c>RetailCommerceValidatorBatchJobs</c> table.</returns>
    public static RetailCommerceValidatorBatchJobs find(RetailCommerceValidatorId _validationId, RefRecId _batchJobId, boolean _forUpdate = false)
    {
        RetailCommerceValidatorBatchJobs retailCommerceValidatorBatchJobs;
        RetailCommerceValidatorParameters parameters = retailCommerceValidatorParameters::find();
        System.Exception exception;

        if (_validationId && _batchJobId)
        {
            try
            {
                if (_forUpdate && !parameters.UsePessimisticLocks)
                {
                    select forupdate retailCommerceValidatorBatchJobs
                        where retailCommerceValidatorBatchJobs.ValidationId == _validationId
                        && retailCommerceValidatorBatchJobs.BatchJobId == _batchJobId;
                }
                else if (_forUpdate && parameters.UsePessimisticLocks)
                {
                    select pessimisticlock retailCommerceValidatorBatchJobs
                        where retailCommerceValidatorBatchJobs.ValidationId == _validationId
                        && retailCommerceValidatorBatchJobs.BatchJobId == _batchJobId;
                }
                else
                {
                    select retailCommerceValidatorBatchJobs
                        where retailCommerceValidatorBatchJobs.ValidationId == _validationId
                        && retailCommerceValidatorBatchJobs.BatchJobId == _batchJobId;
                }
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, tableStr(RetailCommerceValidatorBatchJobs), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, tableStr(RetailCommerceValidatorBatchJobs), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }

        return retailCommerceValidatorBatchJobs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBatchJobByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a record on <c>BatchJob</c> table.
    /// </summary>
    /// <param name = "_batchJobId">The batch job id.</param>
    /// <param name = "_forUpdate">Select for update (Y/N). Default false.</param>
    /// <returns>A table buffer of the <c>BatchJob</c> table.</returns>
    public static BatchJob findBatchJobByRecId(RefRecId _batchJobId, boolean _forUpdate = false)
    {
        BatchJob batchJob;
        RetailCommerceValidatorParameters parameters = retailCommerceValidatorParameters::find();
        System.Exception exception;

        if (_batchJobId)
        {
            try
            {
                if (_forUpdate && !parameters.UsePessimisticLocks)
                {
                    select forupdate batchJob
                        where batchJob.RecId == _batchJobId;
                }
                else if (_forUpdate && parameters.UsePessimisticLocks)
                {
                    select pessimisticlock batchJob
                        where batchJob.RecId == _batchJobId;
                }
                else
                {
                    select firstonly batchJob
                        where batchJob.RecId == _batchJobId;
                }
            }
            catch (exception)
            {
                RetailCommerceValidatorBatchJobs validatorbatchJobs;

                select firstonly ValidationId from validatorbatchJobs
                    where validatorbatchJobs.BatchJobId == _batchJobId;

                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(validatorbatchJobs.ValidationId, tableStr(BatchJob), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(validatorbatchJobs.ValidationId, tableStr(BatchJob), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }

        return batchJob;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@Retail:RetailCommerceValidatorBatchJobDevDoc</DeveloperDocumentation>
	<Label>@Retail:RetailCommerceValidatorBatchJob</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>ValidationId</TitleField1>
	<TitleField2>Status</TitleField2>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ValidationId</Name>
			<ExtendedDataType>RetailCommerceValidatorId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BatchJobId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS103567</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<EnumType>RetailCommerceValidatorExecutionStatus</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ValidatorBatchJobIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BatchJobId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>RetailCommerceValidator</Name>
			<RelatedTable>RetailCommerceValidator</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ValidationId</Name>
					<Field>ValidationId</Field>
					<RelatedField>ValidationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>