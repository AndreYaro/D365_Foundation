<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalizingDefinition</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JournalizingDefinition extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>definitionInUse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see whether the journalizing definition is being used.
    /// </summary>
    /// <returns>
    /// true if a journalizing definition is being used; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method is called by the <c>validateDelete</c> method to make sure that the journalizing
    /// definition can be deleted.
    /// </remarks>
    public boolean definitionInUse()
    {
        boolean ret = false;

        if (JournalizingDefinitionRelatedDefinition::existParentJournalizingDefinitions(this.RecId))
        {
            ret = true;
            checkFailed(strFmt("@SYS128564", tablePName(JournalizingDefinition), tablePName(JournalizingDefinitionRelatedDefinition)));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();
        JournalizingDefinitionCache::clearScope(JournalizingDefinitionCacheScope::GetSystemGeneratedEntries);
        JournalizingMainAccDimensionListProvider::clearCache();
        if (isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration)))
        {
            PayrollMainAccDimensionListProvider::clearCache();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRelatedData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the related data of all the versions of the current record.
    /// </summary>
    public void deleteRelatedData()
    {
        JournalizingDefinitionMatch         journalizingDefinitionMatch;
        JournalizingDefinitionVersion       localJournalizingDefinitionVersion;
        date                                beginDate,endDate;

        beginDate = dateNull();
        endDate = dateMax();

        SysDateEffectiveDataManager::construct(SysDateEffectiveSetupType::JournalizingDefinition).setMode(ValidTimeStateUpdate::Correction);

        ttsbegin;
        while select validTimeState(beginDate, endDate) RecId
            from localJournalizingDefinitionVersion
                where    localJournalizingDefinitionVersion.JournalizingDefinition == this.RecId
        {
            delete_from journalizingDefinitionMatch
                where   journalizingDefinitionMatch.JournalizingDefinitionVersion == localJournalizingDefinitionVersion.RecId;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTransactionJournalizingDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether records of a transaction posting definition exist that reference the current
    /// record.
    /// </summary>
    /// <param name="_journalizingDefinitionModuleId">
    /// The journalizing definition module to use.
    /// </param>
    /// <returns>
    /// true if a record that corresponds exists; otherwise, false.
    /// </returns>
    public boolean existTransactionJournalizingDefinition(JournalizingDefinitionModuleId  _journalizingDefinitionModuleId)
    {
        boolean ret;

        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;

        int                     tableID;
        int                     fieldID;

        tableID = this.journalizingDefinitionModuleId2TableNum(_journalizingDefinitionModuleId);
        fieldID = this.journalizingDefinitionModuleId2FieldNum(_journalizingDefinitionModuleId);

        if (!tableID)
        {
            ret = false;
        }
        else
        {
            queryBuildDataSource = query.addDataSource(tableID);
            queryBuildDataSource.addRange(fieldID).value(int642str(this.RecId));
            ret = QueryRun::getQueryRowCount(query, 1) > 0; // Only query for the first record since anything greater than zero means records exist
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParentJournalizingDefinitionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the parent journalizing definition.
    /// </summary>
    /// <returns>
    /// The record ID of the parent journalizing definition.
    /// </returns>
    public JournalizingDefinitionId getParentJournalizingDefinitionId()
    {
        JournalizingDefinitionVersionId         journalizingDefinitionVersionId;
        JournalizingDefinitionRelatedDefinition journalizingDefinitionRelatedDefinition;

        select firstonly ParentJournalizingDefinitionVersion
            from  journalizingDefinitionRelatedDefinition
                where
                    journalizingDefinitionRelatedDefinition.JournalizingDefinitionRelated == this.RecId;

        if (journalizingDefinitionRelatedDefinition)
        {
            journalizingDefinitionVersionId = journalizingDefinitionRelatedDefinition.ParentJournalizingDefinitionVersion;
        }

        return journalizingDefinitionVersionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedJournalizingDefinitionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related journalizing definition.
    /// </summary>
    /// <returns>
    /// The record ID of a related journalizing definition.
    /// </returns>
    public JournalizingDefinitionId getRelatedJournalizingDefinitionId()
    {
        JournalizingDefinitionId        journalizingDefinitionId;
        JournalizingDefinitionVersion   journalizingDefinitionVersion;

        while select journalizingDefinitionVersion
            where journalizingDefinitionVersion.JournalizingDefinition == this.RecId
        {
            journalizingDefinitionId = journalizingDefinitionVersion.getRelatedJournalizingDefinitionId();
            if (journalizingDefinitionId)
            {
                break;
            }
        }

        return journalizingDefinitionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        SysDateEffectiveDataManager sysDateEffectiveDataManager = SysDateEffectiveDataManager::construct(SysDateEffectiveSetupType::JournalizingDefinition);

        if ( !sysDateEffectiveDataManager.findCurrentVersionByParentId(this.RecId).RecId)
        {
            if ( !sysDateEffectiveDataManager.findFutureVersionByParentId(this.RecId).RecId &&
                 !sysDateEffectiveDataManager.findPastVersionByParentId(this.RecId).RecId)
            {
                super();
            }
        }
        else
        {
            super();
        }

        JournalizingDefinitionCache::clearScope(JournalizingDefinitionCacheScope::GetSystemGeneratedEntries);
        JournalizingMainAccDimensionListProvider::clearCache();
        if (isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration)))
        {
            PayrollMainAccDimensionListProvider::clearCache();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLinkedJournalizingDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the posting definition is linked to any other posting definition.
    /// </summary>
    /// <returns>
    /// true if the posting definition is linked to another posting definition; otherwise, false.
    /// </returns>
    public boolean isLinkedJournalizingDefinition()
    {
        JournalizingDefinitionVersion   journalizingDefinitionVersion;
        boolean                         isLinked = false;

        while select journalizingDefinitionVersion
            where journalizingDefinitionVersion.JournalizingDefinition == this.RecId
        {
            isLinked = journalizingDefinitionVersion.isLinkedJournalizingDefinition();
            if (isLinked)
            {
                isLinked = true;
                break;
            }
        }

        return isLinked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalizingDefinitionModuleId2FieldNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the field ID of the <c>JournalizingDefinition</c> field of a table, which is used to
    /// store the information about the transaction posting definition of a
    /// <c>journalizingDefinitionModuleId</c> module.
    /// </summary>
    /// <param name="_journalizingDefinitionModuleId">
    /// The journalizing definition module to use.
    /// </param>
    /// <returns>
    /// The field ID for the <c>JournalizingDefinition</c> field of a table.
    /// </returns>
    int journalizingDefinitionModuleId2FieldNum(JournalizingDefinitionModuleId  _journalizingDefinitionModuleId)
    {
        int     fieldID;

        switch (_journalizingDefinitionModuleId)
        {
            case  JournalizingDefinitionModuleId::AccountsPayable:
                fieldID = fieldNum(JournalizingDefinitionPayablesTrans,JournalizingDefinition);
                break;

            case  JournalizingDefinitionModuleId::Purchasing:
                fieldID = fieldNum(JournalizingDefinitionPurchTrans,JournalizingDefinition);
                break;

            case  JournalizingDefinitionModuleId::Budget:
                fieldID = fieldNum(JournalizingDefinitionBudgetTrans, JournalizingDefinition);
                break;

            case  JournalizingDefinitionModuleId::AccountsReceivable:
                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                {
                    fieldID = fieldnum(JournalizingDefinitionCustomerTrans, JournalizingDefinition);
                }
                break;
            case  JournalizingDefinitionModuleId::Payroll:
                if (isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration)))
                {
                    fieldID = fieldNum(JournalizingDefinitionPayrollTrans, JournalizingDefinition);
                }
                break;
            case JournalizingDefinitionModuleId::BudgetReservation_PSN:
                fieldID = fieldNum(JournalizingDefinitionBudgetReservation_PSN, JournalizingDefinition);
                break;

            default:
                fieldID = 0;
        }
        return  fieldID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalizingDefinitionModuleId2TableNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID of a table to use to store the information about a transaction posting
    /// definition of a <c>journalizingDefinitionModuleId</c> module.
    /// </summary>
    /// <param name="_journalizingDefinitionModuleId">
    /// The journalizing definition module to use.
    /// </param>
    /// <returns>
    /// The table ID of the <c>JournalizingDefinition</c> field of a table.
    /// </returns>
    int journalizingDefinitionModuleId2TableNum(JournalizingDefinitionModuleId  _journalizingDefinitionModuleId)
    {
        int     tableID;

        switch (_journalizingDefinitionModuleId)
        {
            case  JournalizingDefinitionModuleId::AccountsPayable:
                tableID = tableNum(JournalizingDefinitionPayablesTrans);
                break;

            case  JournalizingDefinitionModuleId::Purchasing:
                tableID = tableNum(JournalizingDefinitionPurchTrans);
                break;

            case  JournalizingDefinitionModuleId::Budget:
                tableID = tableNum(JournalizingDefinitionBudgetTrans);
                break;

            case  JournalizingDefinitionModuleId::AccountsReceivable:
                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                {
                    tableID = tablenum(JournalizingDefinitionCustomerTrans);
                }
                break;
            case  JournalizingDefinitionModuleId::Payroll:
                if (isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration)))
                {
                    tableID = tableNum(JournalizingDefinitionPayrollTrans);
                }
                break;
            case JournalizingDefinitionModuleId::BudgetReservation_PSN:
                if (PublicSectorUtils::isBudgetReservationEnabled())
                {
                    tableID = tableNum(JournalizingDefinitionBudgetReservation_PSN);
                }
                break;

            default:
                tableID = 0;
        }
        return  tableID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();
        JournalizingDefinitionCache::clearScope(JournalizingDefinitionCacheScope::GetSystemGeneratedEntries);
        JournalizingMainAccDimensionListProvider::clearCache();
        if (isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration)))
        {
            PayrollMainAccDimensionListProvider::clearCache();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super() && (!this.definitionInUse());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(JournalizingDefinition, JournalizingDefinitionModuleValue):
                    //If the user is modifying the value
                    if (this.orig().JournalizingDefinitionModuleValue != this.JournalizingDefinitionModuleValue)
                    {
                        //Check If it is linked
                        if (this.isLinkedJournalizingDefinition())
                        {
                            if (this.getParentJournalizingDefinitionId() != 0)
                            {
                                info(strFmt("@SYS132139",
                                            this.JournalizingDefinitionCode,
                                            JournalizingDefinition::findByRecId(JournalizingDefinitionVersion::find(this.getParentJournalizingDefinitionId()).JournalizingDefinition).JournalizingDefinitionCode));
                            }
                            else
                            {
                                info(strFmt("@SYS132139",
                                            this.JournalizingDefinitionCode,
                                            JournalizingDefinition::findByRecId(this.getRelatedJournalizingDefinitionId()).JournalizingDefinitionCode));
                            }
                            ret = false;
                        }
                        else if ( this.existTransactionJournalizingDefinition(this.orig().JournalizingDefinitionModuleValue) )
                        {
                            info(strFmt("@SYS132138",
                                                     this.JournalizingDefinitionCode,
                                                     enum2str(this.orig().JournalizingDefinitionModuleValue)));
                            ret = false;
                        }
                    }
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified journalizing definition code exists in the table and reports an error if it does not exist.
    /// </summary>
    /// <param name="_journalizingDefinitionCode">
    /// The journalizing definition code to find.
    /// </param>
    /// <returns>
    /// true if the journalizing definition code exists in the table; otherwise, false.
    /// </returns>
    public static boolean checkExist(JournalizingDefinitionCode _journalizingDefinitionCode)
    {
        boolean ret = true;

        if (!JournalizingDefinition::exist(_journalizingDefinitionCode))
        {
            ret = checkFailed(strFmt(JournalizingDefinition::txtNotExist(), _journalizingDefinitionCode));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistJournalizingDefinitionByModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified journalizing definition code exists in the table and reports an error if it does not exist.
    /// </summary>
    /// <param name="_journalizingDefinitionCode">
    /// The journalizing definition code to find.
    /// </param>
    /// <param name="_journalizingDefinitionModuleId">
    /// The journalizing definition module to find
    /// </param>
    /// <returns>
    /// true if the journalizing definition code exists in the table; otherwise, false.
    /// </returns>
    public static boolean checkExistJournalizingDefinitionByModule(
                    JournalizingDefinitionCode      _journalizingDefinitionCode,
                    JournalizingDefinitionModuleId  _journalizingDefinitionModuleId)

    {
        boolean ret = true;

        if (!JournalizingDefinition::existJournalizingDefinitionByModule(_journalizingDefinitionCode,_journalizingDefinitionModuleId))
        {
            ret = checkFailed(strFmt("@SYS133932", _journalizingDefinitionCode));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistJournalizingDefinitionToLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that any other journalizing definition can link with a <paramref
    /// name="_journalizingDefinitionId" /> parameter; if not, an error message is displayed.
    /// </summary>
    /// <param name="_journalizingDefinitionId">
    /// The journalizing definition record ID to use.
    /// </param>
    /// <param name="_journalizingDefinitionModuleValue">
    /// The journalizing definition module to use.
    /// </param>
    /// <returns>
    /// true if a journalizing definition record to be linked exists; otherwise, false.
    /// </returns>
    public static boolean checkExistJournalizingDefinitionToLink(
                    JournalizingDefinitionId _journalizingDefinitionId,
                    JournalizingDefinitionModuleValue _journalizingDefinitionModuleValue)
    {
        boolean ret = true;

        if (!JournalizingDefinition::existJournalizingDefinitionToLink(_journalizingDefinitionId,_journalizingDefinitionModuleValue))
        {
            ret = checkFailed(strFmt(JournalizingDefinition::txtNotExist(), JournalizingDefinition::findByRecId(_journalizingDefinitionId).JournalizingDefinitionCode));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified journalizing definition code exists in the
    /// <c>JournalizingDefinition</c> table.
    /// </summary>
    /// <param name="_journalizingDefinitionCode">
    /// The journalizing definition code to check for existence.
    /// </param>
    /// <returns>
    /// true if the journalizing definition exists; otherwise, false.
    /// </returns>
    public static boolean exist(JournalizingDefinitionCode _journalizingDefinitionCode)
    {
        boolean found;

        found = (select firstonly RecId from journalizingDefinition
                    where
                        journalizingDefinition.JournalizingDefinitionCode == _journalizingDefinitionCode).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existJournalizingDefinitionByModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified journalizing definition code exists in the
    /// <c>JournalizingDefinition</c> table.
    /// </summary>
    /// <param name="_journalizingDefinitionCode">
    /// The journalizing definition code to find.
    /// </param>
    /// <param name="_journalizingDefinitionModuleId">
    /// The journalizing definition module to find.
    /// </param>
    /// <returns>
    /// true if the journalizing definition exists; otherwise, false.
    /// </returns>
    public static boolean existJournalizingDefinitionByModule(
                            JournalizingDefinitionCode _journalizingDefinitionCode,
                            JournalizingDefinitionModuleId  _journalizingDefinitionModuleId)
    {
        boolean found;

        found = (select firstonly RecId from journalizingDefinition
                    where
                        journalizingDefinition.JournalizingDefinitionCode == _journalizingDefinitionCode &&
                        journalizingDefinition.JournalizingDefinitionModuleValue == _journalizingDefinitionModuleId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existJournalizingDefinitionToLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether any other journalizing definition can link with the <paramref
    /// name="_journalizingDefinitionId" /> parameter.
    /// </summary>
    /// <param name="_journalizingDefinitionId">
    /// The journalizing definition record ID to use.
    /// </param>
    /// <param name="_journalizingDefinitionModuleValue">
    /// The journalizing definition module to use.
    /// </param>
    /// <returns>
    /// true if a journalizing definition record that can link exists; otherwise, false.
    /// </returns>
    public static boolean existJournalizingDefinitionToLink(
                                                    JournalizingDefinitionId _journalizingDefinitionId,
                                                    JournalizingDefinitionModuleValue _journalizingDefinitionModuleValue)
    {
        boolean found;

        found = (   select firstonly RecId
                    from  journalizingDefinition
                    where journalizingDefinition.RecId != _journalizingDefinitionId &&
                          journalizingDefinition.JournalizingDefinitionModuleValue == _journalizingDefinitionModuleValue).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existRelatedAccountsData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether any record of match accounts in any version with the specified journalizing
    /// definition ID exists.
    /// </summary>
    /// <param name="_journalizingDefinitionId">
    /// The journalizing definition ID.
    /// </param>
    /// <returns>
    /// true if a related account exists otherwise, false.
    /// </returns>
    public static boolean existRelatedAccountsData(JournalizingDefinitionId  _journalizingDefinitionId)
    {
        JournalizingDefinition          journalizingDefinition;
        JournalizingDefinitionVersion   journalizingDefinitionVersion;
        JournalizingDefinitionMatch     journalizingDefinitionMatch;

        select RecId from journalizingDefinition
            where journalizingDefinition.RecId == _journalizingDefinitionId
                join  RecId from journalizingDefinitionVersion
                where journalizingDefinitionVersion.JournalizingDefinition == journalizingDefinition.RecId
                    join  RecId from journalizingDefinitionMatch
                    where journalizingDefinitionMatch.JournalizingDefinitionVersion == journalizingDefinitionVersion.RecId;

        return journalizingDefinitionMatch.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified journalizing definition code in a <c>JournalizingDefinition</c> table.
    /// </summary>
    /// <param name="_journalizingDefinitionCode">
    /// The journalizing definition code to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model to use when the program reads the record.
    /// </param>
    /// <returns>
    /// A <c>JournalizingDefinition</c> table buffer.
    /// </returns>
    public static JournalizingDefinition find(
        JournalizingDefinitionCode _journalizingDefinitionCode,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        JournalizingDefinition journalizingDefinition;

        journalizingDefinition.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            journalizingDefinition.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            journalizingDefinition
            where
            journalizingDefinition.JournalizingDefinitionCode == _journalizingDefinitionCode;

        return journalizingDefinition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByJournalizingDefinitionMatchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches the <c>JournalizingDefinition</c> table for the specified record ID of <c>JournalizingDefinitionMatch</c> table.
    /// </summary>
    /// <param name="_journalizingDefinitionMatchId">
    /// The record ID of <c>JournalizingDefinitionMatch</c> table to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model to use.
    /// </param>
    /// <returns>
    /// A <c>JournalizingDefinition</c> table buffer.
    /// </returns>
    public static JournalizingDefinition findByJournalizingDefinitionMatchId(
        RefRecId         _journalizingDefinitionMatchId,
        boolean          _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        JournalizingDefinition          journalizingDefinition;
        JournalizingDefinitionMatch     journalizingDefinitionMatch;
        JournalizingDefinitionVersion   journalizingDefinitionVersion;

        journalizingDefinition.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            journalizingDefinition.concurrencyModel(_concurrencyModel);
        }

        select  journalizingDefinition
            exists join journalizingDefinitionVersion
            where journalizingDefinitionVersion.JournalizingDefinition == journalizingDefinition.RecId
                exists join journalizingDefinitionMatch
                where journalizingDefinitionMatch.JournalizingDefinitionVersion == journalizingDefinitionVersion.RecId &&
                      journalizingDefinitionMatch.RecId == _journalizingDefinitionMatchId;

        return journalizingDefinition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified journalizing definition record ID value in the <c>JournalizingDefinition</c>
    /// table.
    /// </summary>
    /// <param name="_journalizingDefinitionId">
    /// The journalizing definition ID to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model to use.
    /// </param>
    /// <returns>
    /// A <c>JournalizingDefinition</c> table buffer.
    /// </returns>
    public static JournalizingDefinition findByRecId(
        JournalizingDefinitionId _journalizingDefinitionId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        JournalizingDefinition journalizingDefinition;

        journalizingDefinition.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            journalizingDefinition.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            journalizingDefinition
            where
            journalizingDefinition.RecId == _journalizingDefinitionId;

        return journalizingDefinition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>JournalizingDefinition</c> table.
    /// </summary>
    /// <param name="_formStringControl">
    /// The <c>FormStringControl</c> object with which to perform the lookup.
    /// </param>
    static void lookup(FormStringControl _formStringControl)
    {
        Query query = new Query();
        QueryBuildDataSource dsJournalizingDefinition;
        QueryBuildRange qrRecId;
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(JournalizingDefinition), _formStringControl);

        dsJournalizingDefinition = query.addDataSource(tableNum(JournalizingDefinition));
        qrRecId = dsJournalizingDefinition.addRange(fieldNum(JournalizingDefinition, RecId));
        sysTableLookup.parmQuery(query);
        sysTableLookup.addLookupfield(fieldNum(JournalizingDefinition, JournalizingDefinitionCode));
        sysTableLookup.addLookupfield(fieldNum(JournalizingDefinition, JournalizingDefinitionDesc));
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupjournalizingDefinitionPerModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>JournalizingDefinition</c> table.
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control object with which to perform the lookup.
    /// </param>
    /// <param name="_journalizingDefinitionModuleId">
    /// The Module ID on which to filter the lookup.
    /// </param>
    static void lookupjournalizingDefinitionPerModule(FormStringControl _ctrl,
                    JournalizingDefinitionModuleId _journalizingDefinitionModuleId )
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(JournalizingDefinition),_ctrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(JournalizingDefinition));

        queryBuildDataSource.addRange(fieldNum(JournalizingDefinition,JournalizingDefinitionModuleValue)).value(enum2str(_journalizingDefinitionModuleId));

        sysTableLookup.addLookupfield(fieldNum(JournalizingDefinition,JournalizingDefinitionCode));
        sysTableLookup.addLookupfield(fieldNum(JournalizingDefinition,JournalizingDefinitionDesc));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupRefCtrlJournalizingDefByModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>JournalizingDefinition</c> table.
    /// </summary>
    /// <param name="_ctrl">
    /// The reference group control object with which to perform the lookup.
    /// </param>
    /// <param name="_journalizingDefinitionModuleId">
    /// The Module ID on which to filter the lookup.
    /// </param>
    public static Common lookupRefCtrlJournalizingDefByModule(FormReferenceControl _ctrl,
                    JournalizingDefinitionModuleId _journalizingDefinitionModuleId )
    {
        SysReferenceTableLookup          sysReferenceTableLookup = SysReferenceTableLookup::newParameters(tableNum(JournalizingDefinition), _ctrl, true);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(JournalizingDefinition));

        queryBuildDataSource.addRange(fieldNum(JournalizingDefinition, JournalizingDefinitionModuleValue)).value(int2str(enum2int(_journalizingDefinitionModuleId)));

        sysReferenceTableLookup.addLookupfield(fieldNum(JournalizingDefinition, JournalizingDefinitionCode));
        sysReferenceTableLookup.addLookupfield(fieldNum(JournalizingDefinition, JournalizingDefinitionDesc));
        sysReferenceTableLookup.parmQuery(query);

        return sysReferenceTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message to use when a specific record in the <c>JournalizingDefinition</c> table does not exist.
    /// </summary>
    /// <returns>
    /// A message that indicates the record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS128269";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS128341</DeveloperDocumentation>
	<FormRef>JournalizingDefinition</FormRef>
	<Label>@SYS128173</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>JournalizingDefinitionCode</TitleField1>
	<TitleField2>JournalizingDefinitionDesc</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>JournalizingDefinitionCodeIdx</ClusteredIndex>
	<Modules>AccountingFoundation</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>JournalizingDefinitionCodeIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>JournalizingDefinitionBudgetTrans</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>JournalizingDefinitionBudgetTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>JournalizingDefinitionCustomerTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>JournalizingDefinitionCustomerTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>JournalizingDefinitionGeneralLedgerTrans</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>JournalizingDefinitionGeneralLedgerTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>JournalizingDefinitionMatch</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>JournalizingDefinitionMatch</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>JournalizingDefinitionPayablesTrans</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>JournalizingDefinitionPayablesTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>JournalizingDefinitionPurchTrans</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>JournalizingDefinitionPurchTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>JournalizingDefinitionRelatedDefinition</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>JournalizingDefinitionRelatedDefinition</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>JournalizingDefinitionVersion</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>JournalizingDefinitionVersion</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation>JournalizingDefinition</Relation>
			<Table>JournalizingDefinitionBudgetReservation_PSN</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionModuleValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionDesc</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionDesc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionModuleValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS80470</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionDesc</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>JournalizingDefinitionMemo</Name>
			<Label>@SYS80402</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LongDesc</Name>
			<Label>@SYS132151</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Module</Name>
			<Label>@SYS9941</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionModuleValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS110924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionDesc</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalizingDefinitionCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JournalizingDefinitionCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalizingDefinitionDesc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JournalizingDefinitionDesc</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JournalizingDefinitionModuleValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JournalizingDefinitionModuleValue</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<EnumType>JournalizingDefinitionModuleId</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>JournalizingDefinitionCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalizingDefinitionCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>