<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailInstanceAttributeValuesTmp</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System;
using System.Text;

public class RetailInstanceAttributeValuesTmp extends Common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initAttributeValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize attribute values from this table.
    /// </summary>
    /// <param name = "_attributeDefinitions">The attribute definition dictionary.</param>
    /// <param name = "_instanceRecId">The instance record identifier.</param>
    public static void initAttributeValues(Map _attributeDefinitions, RefRecId _instanceRecId)
    {
        RetailInstanceAttributeValuesTmp riav;
        System.Text.StringBuilder attrValueBuilder;
        Map attributeDefinitionDetails, attributeValueDetails;
        RefRecId attrDefinitionRecId, attrValueRecId;
        Set attributeValueSet;
        SetEnumerator attributeValueSetEnumerator;
        MapEnumerator attrDefinitionEnumerator;
        Map attributeValues;
        EcoResValue erv;
        AttributeValueText attrValueText;
        Set attrDefinitionRecIdSet = new Set(Types::Int64);

        attrDefinitionEnumerator = _attributeDefinitions.getEnumerator();

        // Iterate through attribute definition.
        while (attrDefinitionEnumerator.moveNext())
        {
            RefRecId importedAttribRecId;

            importedAttribRecId = RetailInstanceAttributeValuesTmp::getImportedAttribRecId(attrDefinitionEnumerator.currentKey(),_instanceRecId);

            //get the attribute which is imported through DMF
            //Retail attributes form should display imported attribute values if there are any
            //else display attribute definition values/user setup values
            if (importedAttribRecId)
            {
                attrDefinitionRecIdSet.add(importedAttribRecId);
            }
            else 
            {
                attrDefinitionRecIdSet.add(attrDefinitionEnumerator.currentKey());
            }
        }

        attributeValues = RetailAttributeHelper::getAttributeValues(_instanceRecId, attrDefinitionRecIdSet);

        ttsbegin;

        // Iterate through attribute definitions.
        // Attribute values outside the attribute definition won't be displayed on the form.
        attrDefinitionEnumerator.reset();
        while (attrDefinitionEnumerator.moveNext())
        {
            RefRecId importedAttribRecId;

            riav.initValue();  

            attrValueBuilder = new System.Text.StringBuilder();
            attributeDefinitionDetails = _attributeDefinitions.lookup(attrDefinitionEnumerator.currentKey());
            attrDefinitionRecId = attributeDefinitionDetails.lookup(RetailAttributeHelper::AttributeDefinitionRecIdKey);

            //get the attribute's RecId which is imported through DMF
            //Retail attributes form should display imported attribute values if there are any
            //else display attribute definition values/user setup values
            importedAttribRecId = RetailInstanceAttributeValuesTmp::getImportedAttribRecId(attrDefinitionRecId,_instanceRecId); 
            attrDefinitionRecId = importedAttribRecId ? importedAttribRecId :attrDefinitionRecId; 
            // Check if there are attribute value on this attribute definition.
            // If exists, set the value and add separator (in case there are multiple values of an attribute)
            // If there are no value on this attribute definition, then UI will display empty string.
            if (attributeValues.exists(attrDefinitionRecId))
            {
                attributeValueSet = attributeValues.lookup(attrDefinitionRecId);
                attributeValueSetEnumerator = attributeValueSet.getEnumerator();

                while (attributeValueSetEnumerator.moveNext())
                {
                    // Multiple values on UI form is not yet supported.
                    // For now, just show the first value on grid.
                    if (attrValueBuilder.Length > 0)
                    {
                        break;
                    }

                    attributeValueDetails = attributeValueSetEnumerator.current();
                    attrValueRecId = attributeValueDetails.lookup(RetailAttributeHelper::AttributeValueRecIdKey);

                    erv.disableCache(true);  // Disable cache to avoid issues where table is updated via Data Entity.
                    select firstonly * from erv
                        where erv.RecId == attrValueRecId;

                    attrValueText = erv.getValueAsText('', false);
                    attrValueBuilder.Append(attrValueText);
                }
            }

            RetailInstanceAttributeValuesTmp riavt;
            container attrRef = riavt.getAttributeReferenceFromAll(_instanceRecId);

            // Finds attributes data when the data is not deleted because of unintentional close of form like refreshing the session.
            // Creates attributes data when there is no existing attributes found.
            RetailInstanceAttributeValuesTmp::findOrCreate(attrDefinitionRecId, any2Int64(conpeek(attrRef, 2)), any2Int(conpeek(attrRef, 1)), attrValueBuilder.ToString());
        }

        //Output table would be:
        // AttributeDefinitionRecId |   AttributeValueString
        // 12345                    |   '1'
        // 12346                    |   '23.34'
        // 12347                    |   'Home'

        // This temp table is create so we can able to customize grid for multi values on the same attribute definition.
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh the attribute value on the table.
    /// </summary>
    /// <param name = "_attributeDefinitionRecId">The attribute definition record identifier.</param>
    /// <param name = "_instanceRecId">The instance record identifier.</param>
    public static void refreshAttributeValue(RefRecId _attributeDefinitionRecId, RefRecId _instanceRecId)
    {
        // No need to update if any of both values are not valid.
        if (_attributeDefinitionRecId <= 0 || _instanceRecId <= 0)
        {
            return;
        }

        RetailInstanceAttributeValuesTmp riav;
        EcoResAttributeValue erav;
        EcoResValue erv;
        System.Text.StringBuilder attrValueBuilder = new System.Text.StringBuilder();
        AttributeValueText attrValueText;

        erv.disableCache(true);  // Disable cache to avoid issues where table is updated via Data Entity.

        // Get the original value from EcoResValue table.
        while select * from  erv
            join erav
            where erv.RecId == erav.Value
            && erav.Attribute == _attributeDefinitionRecId
            && erav.InstanceValue == _instanceRecId
        {
            // Multiple values on UI form is not yet supported.
            // For now, just show the first value on grid.
            if (attrValueBuilder.Length > 0)
            {
                break;
            }

            attrValueText = erv.getValueAsText('', false);
            attrValueBuilder.Append(attrValueText);
        }

        container attrRef = riav.getAttributeReferenceFromAll(_instanceRecId);

        // Update the table.
        ttsbegin;
        update_recordset riav
            setting AttributeValueString = attrValueBuilder.ToString()
            where riav.AttributeRecId == _attributeDefinitionRecId
            && riav.RefTableId == any2Int(conpeek(attrRef, 1))
            && riav.RefRecId == any2Int64(conpeek(attrRef, 2));
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImportedAttribRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the recId of the attribute which is imported through DMF.
    /// </summary>
    /// <param name = "_attribRecId">The Attribute defition's identifier.</param>
    /// <param name = "_instanceRecId">The instance record identifier.</param>
    /// <returns>The imported attribute's recId.</returns>
    public static RecId getImportedAttribRecId(RefRecId  _attribRecId, RefRecId _instanceRecId)
    {
        RetailEcoResInstanceAttributeValuesView attributeValuesTable;
        EcoResAttribute                         ecoResAttrib;
        RefRecId                                ecoResAttribRecId;

        select firstonly attributeValuesTable
            where attributeValuesTable.InstanceRecId == _instanceRecId
            &&    attributeValuesTable.AttributeDefinitionRecId == _attribRecId;

        if (attributeValuesTable.AttributeDefinitionRecId)
        {
            ecoResAttribRecId = attributeValuesTable.AttributeDefinitionRecId;
        }
        else 
        {
            select firstonly ecoResAttrib where ecoResAttrib.recId == _attribRecId;

            select firstonly attributeValuesTable
                where attributeValuesTable.AttributeDefinitionName == ecoResAttrib.Name
                &&    attributeValuesTable.InstanceRecId == _instanceRecId;

            if ( attributeValuesTable.AttributeDefinitionRecId)
            {
                ecoResAttribRecId = attributeValuesTable.AttributeDefinitionRecId;
            }
        }

        return ecoResAttribRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributeReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the attribute reference identifiers based on the attribute recid.
    /// </summary>
    /// <param name = "_instanceRecId">The imported attribute's recId.</param>
    /// <returns>Returns the attribute reference identifiers.</returns>
    internal static container getAttributeReference(RefRecId _instanceRecId)
    {
        RetailSalesTableInstanceValue salesTableInstanceValue = RetailSalesTableInstanceValue::find(_instanceRecId);
        RefTableId refTableId;
        RefRecId refRecId;

        // Fills the RefRecId and RefTableId if they are open from either sales order or sales line or customer or price simulator.
        if (salesTableInstanceValue.RecId && !salesTableInstanceValue.HeaderOrLineNum)
        {
            refTableId = tableNum(SalesTable);
            RefRecId = SalesTable::find(salesTableInstanceValue.SalesId).RecId;
        }
        else if (salesTableInstanceValue.RecId && salesTableInstanceValue.HeaderOrLineNum)
        {
            refTableId = tableNum(SalesLine);
            RefRecId = SalesLine::find(salesTableInstanceValue.SalesId, salesTableInstanceValue.HeaderOrLineNum).RecId;
        }
        else
        {
            CustomerInstanceValue customerInstanceValue = CustomerInstanceValue::findRecId(_instanceRecId);

            if (customerInstanceValue.RecId)
            {
                refTableId = tableNum(CustTable);
                refRecId = CustTable::find(customerInstanceValue.AccountNum).RecId;
            }
            else
            {
                RetailPricingSimulatorInstanceValue pricingSimulatorInstanceValue = RetailPricingSimulatorInstanceValue::find(_instanceRecId);

                if (pricingSimulatorInstanceValue.RecId && !pricingSimulatorInstanceValue.SimulationHeaderOrLineNum)
                {
                    refTableId = tableNum(RetailPricingSimulatorSalesTransaction);
                    refRecId = pricingSimulatorInstanceValue.SimulationRecId;
                }
                else if (pricingSimulatorInstanceValue.RecId && pricingSimulatorInstanceValue.SimulationHeaderOrLineNum)
                {
                    refTableId = tableNum(RetailPricingSimulatorSalesLine);
                    refRecId = RetailPricingSimulatorSalesLine::findSalesLineNum(pricingSimulatorInstanceValue.SimulationRecId, pricingSimulatorInstanceValue.SimulationHeaderOrLineNum).RecId;
                }
            }
        }

        return [refTableId, refRecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find or create the <c>RetailInstanceAttributeValuesTmp</c> table instance given attribute record id, reference recid and reference table id.
    /// </summary>
    /// <param name = "_attribRecId">The attribute defition's identifier.</param>
    /// <param name = "_refRecId">The reference record id.</param>
    /// <param name = "_refTableId">The reference table id.</param>
    /// <param name = "_attrValueStr">The attribute value string.</param>
    /// <returns>An instance of <c>RetailInstanceAttributeValuesTmp</c> table.</returns>
    internal static RetailInstanceAttributeValuesTmp findOrCreate(RefRecId _attribRecId, RefRecId _refRecId, RefTableId _refTableId, str _attrValueStr)
    {
        RetailInstanceAttributeValuesTmp riavt;

        if (_attribRecId && _refRecId && _refTableId)
        {
            riavt = RetailInstanceAttributeValuesTmp::find(_attribRecId, _refRecId, _refTableId);

            // Insert new value if no record identifier found.
            if (!riavt.RecId)
            {
                ttsbegin;
                riavt.initValue();
                riavt.AttributeRecId = _attribRecId;
                riavt.RefRecId = _refRecId;
                riavt.RefTableId = _refTableId;
                riavt.AttributeValueString = _attrValueStr;
                riavt.insert();
                ttscommit;
            }
        }

        return riavt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the specified record in the <c>RetailInstanceAttributeValuesTmp</c> table.
    /// </summary>
    /// <param name = "_attribRecId">The Attribute defition's identifier.</param>
    /// <param name = "_refRecId">Reference table record id.</param>
    /// <param name = "_refTableId">Reference table id.</param>
    /// <param name = "_forupdate">A boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>A record in the <c>RetailInstanceAttributeValuesTmp</c> table; otherwise, an empty.</returns>
    internal static RetailInstanceAttributeValuesTmp find(RefRecId _attribRecId, RefRecId _refRecId, RefTableId _refTableId, boolean _forupdate = false)
    {
        RetailInstanceAttributeValuesTmp riavt;

        if (_attribRecId)
        {
            riavt.selectForUpdate(_forupdate);

            select firstonly riavt
                where riavt.AttributeRecId == _attribRecId
                   && riavt.RefRecId == _refRecId
                   && riavt.RefTableId == _refTableId;
        }

        return riavt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributeReferenceFromAll</Name>
				<Source><![CDATA[
    public container getAttributeReferenceFromAll(RefRecId _instanceRecId)
    {
        return RetailInstanceAttributeValuesTmp::getAttributeReference(_instanceRecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<Modules>Retail</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AttributeRecId</Name>
			<AssetClassification>Customer Content</AssetClassification>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AttributeValueString</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<StringSize>-1</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS22569</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AttributeRefRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AttributeRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AttributeRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AttributeRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>