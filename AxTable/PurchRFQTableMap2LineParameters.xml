<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQTableMap2LineParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchRFQTableMap2LineParameters extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fieldName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of a field in the <c>PurchRFQTableMap</c> table.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field ID of a field in the <c>PurchRFQTableMap</c> table.
    /// </param>
    /// <returns>
    ///    The name of the field in the <c>PurchRFQTableMap</c> table.
    /// </returns>
    display FieldLabel fieldName(fieldId _fieldId = this.FieldId)
    {
        if (_fieldId == fieldnum(PurchRFQTableMap, DefaultDimension))
            return "@SYS14926"; // Dimension

        return fieldid2pname(tablenum(PurchRFQTableMap), _fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a record in the <c>PurchRFQTableMap2LineParameters</c> table exists.
    /// </summary>
    /// <param name="_fieldId">
    /// The <c>FieldId</c> field of a <c>PurchRFQTableMap2LineParameters</c> record.
    /// </param>
    /// <returns>
    /// true if the <c>PurchRFQTableMap2LineParameters</c> record exists; otherwise, false.
    /// </returns>
    static boolean exist(fieldId    _fieldId)

    {
        if (!_fieldId)
            return false;

        return (select firstonly RecId
                    from purchRFQTableMap2LineParameters
                        where purchRFQTableMap2LineParameters.FieldId == _fieldId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a field on the <c>PurchRFQTableMap</c> table is enabled.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of a field on the <c>PurchRFQTableMap</c> table.
    /// </param>
    /// <returns>
    /// true if the field is enabled; otherwise, false.
    /// </returns>
    static boolean fieldEnabled(fieldId _fieldId)
    {
        boolean                 enabled                 = true;
        DictField               dictField               = new DictField(tablenum(PurchRFQTableMap), _fieldId);
        DictConfigurationKey    dictConfigurationKey    = new DictConfigurationKey(dictField.configurationKeyId());

        if (dictConfigurationKey)
            enabled = dictConfigurationKey.enabled();

        if (_fieldId == fieldNum(PurchRFQTableMap, OverrideSalesTax)
            && !Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Purchase))
        {
            enabled = false;
        }

        return enabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a <c>PurchRFQTableMap2LineParameters</c> record.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field ID on a <c>PurchRFQTableMap2LineParameters</c> record.
    /// </param>
    /// <param name="_update">
    ///    A Boolean value that indicates whether the <c>PurchRFQTableMap2LineParameters</c> record has to be
    ///    selected for update.
    /// </param>
    /// <returns>
    ///    A <c>PurchRFQTableMap2LineParameters</c> record buffer.
    /// </returns>
    static PurchRFQTableMap2LineParameters find(fieldId   _fieldId,
                                                 boolean   _update = false)
    {
        PurchRFQTableMap2LineParameters   purchRFQTableMap2LineParameters;

        if (_fieldId)
        {
            purchRFQTableMap2LineParameters.selectForUpdate (_update);

            select firstonly purchRFQTableMap2LineParameters
                where purchRFQTableMap2LineParameters.FieldId == _fieldId;
        }

        return purchRFQTableMap2LineParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header2LineFieldIdList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a container of fields in the <c>HeaderToLineUpdate</c> record on the
    ///    <c>PurchRFQTableMap</c> table.
    /// </summary>
    /// <returns>
    ///    A container of fields in the <c>HeaderToLineUpdate</c> record on the <c>PurchRFQTableMap</c> table.
    /// </returns>
    static container header2LineFieldIdList()
    {
        int             i,h;
        container       fList;
        SysDictField    sysDictField;
        DictFieldGroup  dictFieldGroup;
        DictTable       dictTable = new DictTable(tablenum(PurchRFQTableMap));

        for (i=1;i<=dictTable.fieldGroupCnt();i++)
        {
            if (dictTable.fieldGroup(i) == tablefieldgroupstr(PurchRFQTableMap, HeaderToLineUpdate))
            {
                dictFieldGroup = new DictFieldGroup(tablenum(PurchRFQTableMap),dictTable.fieldGroup(i));
                for (h=1;h<=dictFieldGroup.numberOfFields();h++)
                {
                    sysDictField = new SysDictField(tablenum(PurchRFQTableMap), dictFieldGroup.field(h));
                    fList += sysDictField.id();
                }
                return fList;
            }
        }
        return fList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>PurchRFQTableMap2LineParameters</c> record buffer.
    /// </summary>
    static void initiate()
    {
        PurchRFQTableMap2LineParameters     purchRFQTableMap2LineParameters;
        container                           header2LineFieldIds;
        int                                 pos = 1;

        if (!PurchRFQTableMap2LineParameters::initiated())
        {
            header2LineFieldIds = PurchRFQTableMap2LineParameters::header2LineFieldIdList();

            ttsbegin;

            while (pos <= conlen(header2LineFieldIds))
            {
                purchRFQTableMap2LineParameters.clear();
                purchRFQTableMap2LineParameters.initValue();
                purchRFQTableMap2LineParameters.FieldId           = conpeek(header2LineFieldIds, pos);
                purchRFQTableMap2LineParameters.Table2LineUpdate  = TradeTable2LineUpdate::Prompt;
                purchRFQTableMap2LineParameters.insert();

                pos++;
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether a <c>PurchRFQTableMap2LineParameters</c> record exists.
    /// </summary>
    /// <returns>
    ///    true if a <c>PurchRFQTableMap2LineParameters</c> record exists; otherwise, false.
    /// </returns>
    static boolean initiated()
    {
        PurchRFQTableMap2LineParameters    purchRFQTableMap2LineParameters;

        select firstonly RecId
        from   purchRFQTableMap2LineParameters;

        return purchRFQTableMap2LineParameters.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124590</DeveloperDocumentation>
	<Label>@SYS106851</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>FieldId</TitleField1>
	<TitleField2>Table2LineUpdate</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>PurchRFQTableMap2LineParametersIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>ProcurementAndSourcing</Modules>
	<PrimaryIndex>PurchRFQTableMap2LineParametersIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Table2LineUpdate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS80392</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FieldId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Update</Name>
			<Label>@SYS71207</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Table2LineUpdate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FieldId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FieldId</ExtendedDataType>
			<RelatedTable>PurchRFQTableMap</RelatedTable>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Table2LineUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TradeTable2LineUpdate</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PurchRFQTableMap2LineParametersIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>FieldId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SalesPurchTableToLineParameters</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>FieldId</MapField>
					<MapFieldTo>FieldId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Table2LineUpdate</MapField>
					<MapFieldTo>Table2LineUpdate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations />
	<StateMachines />
</AxTable>