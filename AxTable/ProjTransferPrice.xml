<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransferPrice</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjTransferPrice extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkPriceModel</Name>
				<Source><![CDATA[
    private boolean checkPriceModel()
    {
        boolean ret = true;

        switch (this.PriceModel)
        {
            case ProjTransferPriceModel::Contributionratio:
            case ProjTransferPriceModel::PercentMarkup:
            case ProjTransferPriceModel::PercentSalePrice:
            if (this.Currency != '')
                {
                    ret = checkFailed("@SYS4005068");
                }
                break;

            case ProjTransferPriceModel::AmountMarkup:
            case ProjTransferPriceModel::AmountSalesPrice:
            case ProjTransferPriceModel::TransferPrice:
            if (this.Currency == '')
                {
                    ret = checkFailed("@SYS4005069");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProject</Name>
				<Source><![CDATA[
    private boolean checkProject()
    {
        ProjTable projTable;

        if (this.ProjectDataAreaId != curext() && this.ProjTable != 0)
        {
            changecompany(this.ProjectDataAreaId)
            {
                projTable = ProjTable::findRecId(this.ProjTable);
                if (!projTable)
                {
                    return checkFailed(strFmt("@SYS4005070", projTable.ProjId, this.ProjectDataAreaId));
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits the company currency value in the <c>ProjectTransPrice</c> class.
    /// </summary>
    /// <returns>
    /// The <c>CurrencyCode</c> value.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display CurrencyCode companyCurrency()
    {
        ProjTransferPrice projTransferPrice;
        container c = [this.DataAreaId];

        select firstonly crossCompany:c DataAreaId from projTransferPrice where projTransferPrice.RecId == this.RecId;

        return Ledger::accountingCurrency(projTransferPrice.companyInfo().RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>editCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits the category value of a <c>ProjTable</c> record.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates when the data in the control is changed.
    /// </param>
    /// <param name="_categoryId">
    /// The category ID that is entered from the control.
    /// </param>
    /// <returns>
    /// The category ID.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public edit ProjCategoryId editCategory(boolean _set, ProjCategoryId _categoryId)
    {
        ProjCategory   projCategory;

        if (!this.ProjectDataAreaId)
        {
            this.ProjectDataAreaId = curext();
        }

        if (_set)
        {
            select firstonly crossCompany RecId, CategoryId from projCategory where projCategory.CategoryId == _categoryId &&
                                                                               projCategory.DataAreaId == this.ProjectDataAreaId &&
                                                                               (projCategory.CategoryType == ProjCategoryType::Hour ||
                                                                                projCategory.CategoryType == ProjCategoryType::Cost);

            this.ProjCategory = projCategory.RecId;
        }
        else
        {
            if (this.ProjCategory)
            {
                select firstonly crossCompany RecId, CategoryId from projCategory where projCategory.RecId == this.ProjCategory &&
                                                                                   projCategory.DataAreaId == this.ProjectDataAreaId;
            }
        }

        return projCategory.CategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits the project ID of a <c>ProjTable</c> record.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the data in the control is changed.
    /// </param>
    /// <param name="_projId">
    /// The project ID.
    /// </param>
    /// <returns>
    /// The project ID value of the <c>ProjTable</c> record.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public edit ProjId editProject(boolean _set, ProjId _projId)
    {
        ProjTable   projTable;

        if (!this.ProjectDataAreaId)
        {
            this.ProjectDataAreaId = curext();
        }

        if (_set)
        {
            select firstonly crossCompany RecId,ProjId from projTable where projTable.ProjId == _projId &&
                                                                        projTable.DataAreaId == this.ProjectDataAreaId;

            this.ProjTable = projTable.RecId;
        }
        else
        {
            if (this.ProjTable)
            {
                select firstonly crossCompany RecId, ProjId from projTable where projTable.RecId == this.ProjTable &&
                                                                             projTable.DataAreaId == this.ProjectDataAreaId;
            }
        }

        return projTable.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.TransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls methods appropriate to modified fields.
    /// </summary>
    /// <param name="_fieldId">
    ///    The ID of the field that is modified.
    /// </param>
    /// <remarks>
    ///    This method executes when any field in the table is modified.
    /// </remarks>
    public void modifiedField(FieldId _fieldId)
    {
        CustTable                   custTable;
        InterCompanyTradingPartner  tradingPartner;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ProjTransferPrice, ProjTable) :
            if (isConfigurationkeyEnabled(configurationKeyNum(Project))
                && this.ProjTable != 0
                && this.ProjInvoiceTable != 0)
                {
                    this.ProjInvoiceTable = 0;
                }
                break;

            case fieldNum(ProjTransferPrice, ProjInvoiceTable) :
            if (isConfigurationkeyEnabled(configurationKeyNum(Project))
                && this.ProjInvoiceTable != 0
                && this.ProjTable != 0)
                {
                    this.ProjTable = 0;
                }
                break;

            case fieldNum(ProjTransferPrice, PriceModel):
            case fieldNum(ProjTransferPrice, ProjectDataAreaId):
            switch (this.PriceModel)
                {
                    case ProjTransferPriceModel::Contributionratio:
                    case ProjTransferPriceModel::PercentMarkup:
                    case ProjTransferPriceModel::PercentSalePrice:
                        this.Currency = '';
                        break;

                    case ProjTransferPriceModel::AmountMarkup:
                    case ProjTransferPriceModel::AmountSalesPrice:
                    case ProjTransferPriceModel::TransferPrice:
                    if (this.ProjectDataAreaId)
                        {
                            tradingPartner = InterCompanyTradingPartner::findTradingCustomer(curext(), this.ProjectDataAreaId);
                            if (tradingPartner)
                            {
                                custTable = CustTable::findByPartyRecId(tradingPartner.CustomerParty);
                                this.Currency = custTable.Currency;
                            }
                            if (!this.Currency)
                            {
                                // To handle the case that the borrowing LE is not yet configured as a customer, we use
                                // that LE's accounting currency since the currency field cannot be left blank for these cases.
                                changecompany(this.ProjectDataAreaId)
                                {
                                    this.Currency = Ledger::accountingCurrency();
                                }
                            }
                        }
                        break;
                }

            default :
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(ProjTransferPrice, TransferPrice),
             fieldNum(ProjTransferPrice, PriceModel)     :

            if ((this.PriceModel == ProjTransferPriceModel::Contributionratio) &&
                (this.TransferPrice > 100.00))
                {
                    return checkFailed("@SYS102503");
                }
                if ((this.PriceModel == ProjTransferPriceModel::TransferPrice) &&
                (this.TransferPrice < 0))
                {
                    ret = checkFailed("@SYS99117");
                    this.TransferPrice = 0;
                }
                break;

            case fieldNum(ProjTransferPrice, Currency):
                ret = this.checkPriceModel() && ret;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        CustTable                   custTable;
        InterCompanyTradingPartner  tradingPartner;
        ProjTransferPrice           orig    = this.orig();
        boolean                     isValid;

        isValid = super() &
              ResourceFacade::checkResourceIsInCurrentCompany(this.Resource) &
              this.checkPriceModel() &
              this.checkProject();

        if (isValid && this.Currency)
        {
            // The project LE has a 0-1 relationship to a customer entry in the intercompany framework.
            tradingPartner = InterCompanyTradingPartner::findTradingCustomer(this.DataAreaId, this.ProjectDataAreaId);
            if (tradingPartner)
            {
                custTable = CustTable::findByPartyRecId(tradingPartner.CustomerParty);
            }

            if (!custTable || custTable.Currency != this.Currency)
            {
                // We only give the user a warning because they may decide to either change the customer's or
                // the transfer price's currency, thus this is not necessarily an error.
                warning("@SYS4001478");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>ProjTransferPrice</c> record based on certain criteria set from the parameters and best currency selection
    /// </summary>
    /// <param name="_resourceRecId">
    /// Resource RecId
    /// </param>
    /// <param name="_projectLegalEntity">
    /// Project's Legal Entity DataAreaId
    /// </param>
    /// <param name="_projTable">
    /// Project RecId
    /// </param>
    /// <param name="_projCategory">
    /// Category RecId
    /// </param>
    /// <param name="_transDate">
    /// Effective Date
    /// </param>
    /// <param name="_forUpdate">
    /// Updateable if true
    /// </param>
    /// <param name="_resourceDataAreaId">
    /// The resource's Legal Entity dataAreaId
    /// </param>
    /// <param name="_transferCurrency">
    /// The currency which the transfer price will be in.
    /// </param>
    /// <param name="_contract">
    /// The contract associated to the project on the transaction
    /// </param>
    /// <param name="_transType">
    /// The transaction type the price relates to.
    /// </param>
    /// <param name="_resourceCategory">
    /// The resource category for which a price is searched against.
    /// </param>
    /// <returns>
    /// ProjTransferPrice record
    /// </returns>
    public static ProjTransferPrice find(RefRecId               _resourceRecId,
                                     DataAreaId                 _projectLegalEntity,
                                     RefRecId                   _projTable,
                                     RefRecId                   _projCategory,
                                     TransDate                  _transDate          = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                     boolean                    _forUpdate          = false,
                                     DataAreaId                 _resourceDataAreaId   = curext(),
                                     CurrencyCode               _transferCurrency   = '',
                                     ProjInvoiceTableRecId      _contract           = 0,
                                     ProjTransferPriceTransType _transType          = ProjTransferPriceTransType::All,
                                     ResourceCategoryRecId      _resourceCategory   = 0)
    {
        ProjTransferPrice projTransferPrice;

        projTransferPrice.selectForUpdate(_forUpdate);

        select firstonly crossCompany projTransferPrice
        order by TransDate desc, TransType desc
        where   projTransferPrice.Resource              == _resourceRecId   &&
                projTransferPrice.ProjectDataAreaId     == _projectLegalEntity &&
                projTransferPrice.ProjTable             == _projTable   &&
                projTransferPrice.ProjCategory          == _projCategory   &&
                projTransferPrice.TransDate             <= _transDate      &&
                projTransferPrice.DataAreaId            == _resourceDataAreaId &&
                projTransferPrice.ProjInvoiceTable      == _contract &&
                (projTransferPrice.Currency             == _transferCurrency ||
                 projTransferPrice.Currency             == '') &&
                (projTransferPrice.TransType            == _transType ||
                 projTransferPrice.TransType            == ProjTransferPriceTransType::All) &&
                 projTransferPrice.ResourceCategory     == _resourceCategory;

        return projTransferPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransferPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the transfer price based on information provided in the parameters.
    /// </summary>
    /// <param name="_resourceRecId">
    /// The resource record id where you want to get the transfer price for.
    /// </param>
    /// <param name="_projectLegalEntity">
    /// The project's legal entity
    /// </param>
    /// <param name="_projTable">
    /// The record id of project.
    /// </param>
    /// <param name="_projCategory">
    /// The record id of category.
    /// </param>
    /// <param name="_linePropertyId">
    /// The line property id used in the transaction.
    /// </param>
    /// <param name="_transDate">
    /// Transaction date where you want to get the effect date transfer price; optional.
    /// </param>
    /// <param name="_resourceDataAreaId">
    /// The resource's Legal Entity dataAreaId; optional.
    /// </param>
    /// <param name="_transferCurrency">
    /// The currency the transfer price will be in.
    /// </param>
    /// <param name="_contract">
    /// The contract associated to the project on the transaction; optional.
    /// </param>
    /// <param name="_costPrice">
    /// The cost price of the transaction in the resouce's company accounting currency; optional.
    /// </param>
    /// <param name="_salesPrice">
    /// The sales price used by the contracting company expresssed in the transfer currency; optional.
    /// </param>
    /// <param name="_transType">
    /// The transaction type the transfer price relates to; optional.
    /// </param>
    /// <param name="_resourceCategory">
    /// The resource category for which a price is searched against.
    /// </param>
    /// <returns>
    /// The transfer price.
    /// </returns>
    public static CostPrice findTransferPrice(
        RefRecId                    _resourceRecId,
        DataAreaId                  _projectLegalEntity,
        RefRecId                    _projTable,
        RefRecId                    _projCategory,
        ProjLinePropertyId          _linePropertyId,
        TransDate                   _transDate            = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        DataAreaId                  _resourceDataAreaId   = ResourceFacade::getLegalEntityId(_resourceRecId),
        CurrencyCode                _transferCurrency     = '',
        ProjInvoiceTableRecId       _contract             = 0,
        CostPrice                   _costPrice            = 0.00,
        SalesPrice                  _salesPrice           = 0.00,
        ProjTransferPriceTransType  _transType            = ProjTransferPriceTransType::All,
        ResourceCategoryRecId       _resourceCategory     = 0)
    {
        ProjTransferPriceParameters transferPriceParams = ProjTransferPriceParameters::construct();
        transferPriceParams.parmResourceRecId(_resourceRecId);
        transferPriceParams.parmResourceCategoryRecId(_resourceCategory);
        transferPriceParams.parmProjectDataAreaId(_projectLegalEntity);
        transferPriceParams.parmProjectRecId(_projTable);
        transferPriceParams.parmProjectCategoryRecId(_projCategory);
        transferPriceParams.parmLinePropertyId(_linePropertyId);
        transferPriceParams.parmTransDate(_transDate);
        transferPriceParams.parmTransferCurrencyCode(_transferCurrency);
        transferPriceParams.parmContractRecId(_contract);
        transferPriceParams.parmCostPrice(_costPrice);
        transferPriceParams.parmSalesPrice(_salesPrice);
        transferPriceParams.parmTransferPriceTransType(_transType);
        transferPriceParams.parmResourceCategoryRecId(_resourceCategory);
         
        ProjTransferPriceLookup transferPriceLookup = ProjTransferPriceLookup::construct(transferPriceParams);
        
        return CurrencyExchangeHelper::Amount(transferPriceLookup.findTransferPrice(), _transferCurrency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResBorrowingCostPriceEstimate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an estimate cost for borrowing a given employee from another company.
    /// </summary>
    /// <param name="_resourceRecId">
    /// The RecId of the resource to be borrowed.
    /// </param>
    /// <param name="_resourceDataAreaId">
    /// The company to borrow the resource from.
    /// </param>
    /// <param name="_projId">
    /// The ID of the project entry that the resource will work on.
    /// </param>
    /// <param name="_categoryId">
    /// The project category of the work entry that the resource will do.
    /// </param>
    /// <param name="_transDate">
    /// The date of the transaction; optional.
    /// </param>
    /// <param name="_resourceCategory">
    /// The resource category for which a borrowing cost is specified.
    /// </param>
    /// <returns>
    /// An estimate of the employee's cost, per hour, in the borrowing (calling) company's currency.
    /// </returns>
    /// <remarks>
    /// This is an estimate because the currency of the actual invoice may be different than the borrowing
    /// company's currency, thus differences due to exchange rate variation may happen. Also, no tax amount
    /// is taken into account.
    /// </remarks>
    public static AmountMST getResBorrowingCostPriceEstimate(RefRecId                     _resourceRecId,
                                                          DataAreaId                  _resourceDataAreaId,
                                                          ProjId                      _projId,
                                                          ProjCategoryId              _categoryId,
                                                          TransDate                   _transDate            = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                          ResourceCategoryRecId       _resourceCategory     = 0)
    {
        AmountMST                   costPriceEstimate;
        CurrencyCode                costPriceCurrency;
        InterCompanyTradingPartner  tradingPartner;
        CustTable                   custTable;
        DataAreaId                  projectDataAreaId = curext();
        CostPrice                   costPrice;
        SalesPrice                  finalSalesPrice;
        RecId                       categoryRecId;
        RecId                       projRecId;

        if (!_resourceDataAreaId)
        {
            return 0;
        }

        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
			_projId, 
			_resourceRecId, 
			_categoryId, 
			'', 
			0, 
			CompanyInfoHelper::standardCurrency(), 
			DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), 
			'', 
			'', 
			'', 
			_resourceCategory);
        [finalSalesPrice] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(priceParams, false);

		projRecId = ProjTable::find(_projId).RecId;
        categoryRecId = ProjCategory::find(_categoryId).RecId;

        changecompany (_resourceDataAreaId)
        {
            priceParams = ProjHourCostPrice::constructPriceParametersForFindCostPrice(_projId, _resourceRecId, _categoryId, '', _transDate, '', '', '', _resourceCategory);
            costPrice = ProjHourCostPrice::findCostPriceByPriceParameters(priceParams, false);
            // We first look for the transfer price in the currency in which the borrowing company will be billed
            tradingPartner      = InterCompanyTradingPartner::findTradingCustomer(_resourceDataAreaId, projectDataAreaId);
            if (tradingPartner)
            {
                custTable           = CustTable::findByPartyRecId(tradingPartner.CustomerParty);
            }
            if (custTable)
            {
                costPriceCurrency   = custTable.Currency;
                costPriceEstimate = ProjTransferPrice::findTransferPrice(_resourceRecId,
                                                                     projectDataAreaId,
                                                                     projRecId,
                                                                     categoryRecId,
                                                                     '',
                                                                     _transDate,
                                                                     _resourceDataAreaId,
                                                                     costPriceCurrency,
                                                                     0,
                                                                     costPrice,
                                                                     finalSalesPrice,
                                                                     ProjTransferPriceTransType::Timesheet,
                                                                     _resourceCategory);
            }

            // If not transfer price was found, we try one more time using the lending company's currency
            if (!costPriceEstimate)
            {
                costPriceCurrency = Ledger::accountingCurrency();
                costPriceEstimate = ProjTransferPrice::findTransferPrice(_resourceRecId,
                                                                     projectDataAreaId,
                                                                     projRecId,
                                                                     categoryRecId,
                                                                     '',
                                                                     _transDate,
                                                                     _resourceDataAreaId,
                                                                     costPriceCurrency,
                                                                     0,
                                                                     costPrice,
                                                                     finalSalesPrice,
                                                                     ProjTransferPriceTransType::Timesheet,
                                                                     _resourceCategory);
            }
        }

        if (costPriceEstimate)
        {
            costPriceEstimate = ExchangeRateHelper::mstPrice(costPriceEstimate, costPriceCurrency);
        }

        return costPriceEstimate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate an entered category is valid or not.
    /// </summary>
    /// <param name="_categoryId">
    /// Category to validate.
    /// </param>
    /// <param name="_transType">
    /// Transaction type value.
    /// </param>
    /// <param name="_projectDataAreaId">
    /// Borrowing Company dataAreaId.
    /// </param>
    /// <returns>
    /// If categoryId found return true; otherwise false.
    /// </returns>
    public static boolean isValidCategory(CategoryId  _categoryId,
											ProjTransferPriceTransType _transType,
                                            DataAreaId  _projectDataAreaId)
    {
        ProjCategory	projCategory;
		boolean			isValidCategory = true;

        if (_categoryId)
        {
            switch (_transType)
            {
                case ProjTransferPriceTransType::Expense:

                select firstonly crossCompany RecId from projCategory
                    where projCategory.CategoryId == _categoryId
                    && projCategory.DataAreaId == _projectDataAreaId
                    && projCategory.CategoryType == ProjCategoryType::Cost;

                    if (!projCategory.RecId)
                    {
                        isValidCategory = false;
                    }
                    break;

                case ProjTransferPriceTransType::Timesheet:

                select firstonly crossCompany RecId from projCategory
                    where projCategory.CategoryId == _categoryId
                    && projCategory.DataAreaId == _projectDataAreaId
                    && projCategory.PSAIndirectComponent == NoYes::No
                    && projCategory.CategoryType == ProjCategoryType::Hour;

                    if (!projCategory.RecId)
                    {
                        isValidCategory = false;
                    }
                    break;

                case ProjTransferPriceTransType::All:
                case ProjTransferPriceTransType::VendInvoiceLine:

                select firstonly crossCompany RecId from projCategory
                    where projCategory.CategoryId == _categoryId
                    && projCategory.DataAreaId == _projectDataAreaId
                    && projCategory.PSAIndirectComponent == NoYes::No
                    && (projCategory.CategoryType == ProjCategoryType::Hour
                    || projCategory.CategoryType == ProjCategoryType::Cost);

                    if (!projCategory.RecId)
                    {
                        isValidCategory = false;
                    }
                    break;
            }
        }

        return isValidCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when a buffer is inserted as a new record.
    /// This is overriden to ensure that the ExtensionHash field is calculated before insertion into the database.
    /// </summary>
    public void insert()
    {
        // Compute the hash for this instance
        ProjExtensionHashCalculator hashCalculator = ProjExtensionHashCalculator::construct();
        ProjTransferPrice::getExtensionFields(hashCalculator);
        this.ExtensionHash = hashCalculator.calculateHash(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when a buffer is updated in a transaction.
    /// This is override to ensure that the ExtensionHash field is calculated before insertion into the database.
    /// </summary>
    public void update()
    {
        // Update the hash for this instance
        ProjExtensionHashCalculator hashCalculator = ProjExtensionHashCalculator::construct();
        ProjTransferPrice::getExtensionFields(hashCalculator);
        this.ExtensionHash = hashCalculator.calculateHash(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtensionFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enumerates extension fields of this table, by registering them with the '_hashCalculator' object.
    /// This is the the intended CoC extension point for table extensions to register fields included in the hash.
    /// </summary>
    public static void getExtensionFields(ProjExtensionHashCalculator _hashCalculator)
    {
        // ex: _hashCalculator.addExtensionField(fieldNum(ProjTransferPrice, MyCustomField), defaultFieldValue);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@FPK270094</DeveloperDocumentation>
	<Label>@SYS4005093</Label>
	<TitleField1>Resource</TitleField1>
	<TitleField2>ProjTable</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>ProjectManagementAndAccounting</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransferPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransferPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjectDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Currency</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS56480</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PriceModel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjTransferPriceModel</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjCategory</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS69410</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjectDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<Label>@FPK270095</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjInvoiceTable</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjTable</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS80304</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Resource</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ResourceRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ResourceCategory</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ResourceCategoryRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS35161</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransferPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesPricing</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjTransferPriceTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>ProjWorkerRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExtensionHash</Name>
			<ExtendedDataType>ProjExtensionHash</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProjTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjectDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjCategoryIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjCategory</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjectDataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FindTransferPrice</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ResourceCategory</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjectDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjInvoiceTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjCategory</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Currency</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ExtensionHash</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CrossCompanyResourceIndex</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjectDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Currency</Name>
					<Field>Currency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategory</Name>
					<Field>ProjCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjInvoiceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjInvoiceTable</Name>
					<Field>ProjInvoiceTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjTransferPrice</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTable</Name>
					<Field>ProjTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Resource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceCategoryView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ResourceCategory</Name>
					<Field>ResourceCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ResResourceIdentifier</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>