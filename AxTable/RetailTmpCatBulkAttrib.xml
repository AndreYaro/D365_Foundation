<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTmpCatBulkAttrib</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailTmpCatBulkAttrib extends common
{
    #RetailBulkProductAttributeValue

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createOrUpdateTextValueTranslation</Name>
				<Source><![CDATA[
    private void createOrUpdateTextValueTranslation(EcoResAttributeValue _attributeValue, EcoResInstanceValue _instanceValue)
    {
        EcoResTextValue textValue;
        EcoResTextValueTranslation textValueTranslation;
        SystemLanguageId systemLanguageId;
        RetailTmpCatBulkAttrib retailTmpCatBulkAttribLocal;

        void createTextValueTranslation()
        {
            textValueTranslation.Language = this.LanguageId;
            textValueTranslation.TextValueTable = textValue.RecId;
            textValueTranslation.TextValue = this.TextValue;
            textValueTranslation.insert();
        }

        if (!this.LanguageId)
        {
            return;
        }

        if (_attributeValue)
        {
            textValue = EcoResTextValue::find(_attributeValue.Value);
            textValueTranslation = EcoResTextValueTranslation::findByTextValueLanguage(textValue.RecId, this.LanguageId, true);
            if (textValueTranslation)
            {
                textValueTranslation.TextValue = this.TextValue;
                textValueTranslation.update();
            }
            else
            {
                createTextValueTranslation();
            }
        }
        else
        {
            systemLanguageId = SystemParameters::getSystemLanguageId();

            _attributeValue.InstanceValue = _instanceValue.RecId;
            _attributeValue.Attribute = this.Attribute;

            // insert textValue as blank in table to create an entry in ecoResTextValue
            // once we have entry in ecoResTextValue, create translation for the language
            if (systemLanguageId != this.LanguageId)
            {
                // if we have default value from some other source, populate that as a value in ecoResTextValue
                select firstOnly retailTmpCatBulkAttribLocal
                    where retailTmpCatBulkAttribLocal.Attribute == this.Attribute
                        && retailTmpCatBulkAttribLocal.Product == this.Product
                        && retailTmpCatBulkAttribLocal.Catalog == this.Catalog
                        && retailTmpCatBulkAttribLocal.InternalOrganization == this.InternalOrganization
                        && retailTmpCatBulkAttribLocal.LanguageId == systemLanguageId;

                if (retailTmpCatBulkAttribLocal)
                {
                     textValue.TextValue = retailTmpCatBulkAttribLocal.TextValue;
                }
                else
                {
                    textValue.TextValue = '';
                }
            }
            else
            {
                // if the published attribute language is same as system language
                // store the value in ecoResTextValue
            textValue.TextValue = this.TextValue;
            }
            textValue.insert();

            createTextValueTranslation();

            _attributeValue.Value = textValue.RecId;
            _attributeValue.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCatalogProductAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update catalog product attribute related to this row.
    /// </summary>
    /// <returns>
    /// Error message if any.
    /// </returns>
    /// <remarks>
    /// RetailTmpCatBulkAttrib is only an intermediate table. This is to update product attributes in the catalog.
    /// </remarks>
    public str updateCatalogProductAttribute()
    {
        EcoResInstanceValue instanceValue;
        EcoResAttributeValue attributeValue;
        CatalogManager catalogManager;
        RetailInternalOrgProduct internalOrgProduct;

        if (this.Catalog)
        {
            if (this.InternalOrganization)
            {
                instanceValue = RetailCatalogProdInternalOrgInstanceVal::findOrCreateByCatalogProductInternalOrg(this.CatalogProduct, this.InternalOrganization);
            }
            else
            {
                instanceValue = CatalogProductInstanceValue::findOrCreateByCatalogProduct(this.CatalogProduct);
            }
        }
        else
        {
            internalOrgProduct = RetailInternalOrgProduct::findOrCreateByInternalOrgProduct(this.InternalOrganization, this.Product);
            instanceValue = RetailInternalOrgProductInstanceValue::findOrCreateByInternalOrgProduct(internalOrgProduct.RecId);
        }

        attributeValue = EcoResAttributeValue::findByInstanceAttribute(instanceValue.RecId, this.Attribute);

        if (this.LanguageId && AttributeDataTypeDiscriminator::checkAttributeDataTypeText(this.DataType))
        {
            this.createOrUpdateTextValueTranslation(attributeValue, instanceValue);
            return '';
        }

        if (!attributeValue)
        {
            attributeValue.InstanceValue = instanceValue.RecId;
            attributeValue.Attribute = this.Attribute;
        }

        this.updateRetailAttributeValue(this.DataType, attributeValue);

        if (attributeValue.RecId == 0)
        {
            attributeValue.insert();
        }

        RetailCatalogProductStatus::setHasUnpublishedChange(this.CatalogProduct, NoYes::Yes);

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetailAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates retail attribute value based on <c>AttributeDataType</c>.
    /// </summary>
    /// <param name = "_dataType">
    ///     An attribute data type.
    /// </param>
    /// <param name = "attributeValue">
    ///     A table buffer holding attribute values for product or component instance.
    /// </param>
    protected void updateRetailAttributeValue(AttributeDataType _dataType, EcoResAttributeValue attributeValue)
    {
        EcoResTextValue textValue;
        EcoResIntValue intValue;
        EcoResBooleanValue booleanValue;
        EcoResFloatValue floatValue;
        EcoResDateTimeValue dateTimeValue;
        EcoResCurrencyValue currencyValue;

        switch (_dataType)
        {
            case AttributeDataType::TrueFalse:
                #RetailUpdateAttributeValue(booleanValue, EcoResBooleanValue, BooleanValue)
                break;
            case AttributeDataType::Integer:
                #RetailUpdateAttributeValueDbl(intValue, EcoResIntValue, IntValue, IntUnitOfMeasure, UnitOfMeasure)
                break;
            case AttributeDataType::Decimal:
                #RetailUpdateAttributeValueDbl(floatValue, EcoResFloatValue, FloatValue, FloatUnitOfMeasure, UnitOfMeasure)
                break;
            case AttributeDataType::Text:
                #RetailUpdateAttributeValue(textValue, EcoResTextValue, TextValue)
                break;
            case AttributeDataType::DateTime:
                #RetailUpdateAttributeValue(dateTimeValue, EcoResDateTimeValue, DateTimeValue)
                break;
            case AttributeDataType::Currency:
                #RetailUpdateAttributeValueDbl(currencyValue, EcoResCurrencyValue, CurrencyValue, CurrencyCode, CurrencyCode)
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteByCatalogRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete rows related to the catalog.
    /// </summary>
    /// <param name="_catalogRecId">
    /// Catalog rec id.
    /// </param>
    /// <remarks>
    /// RetailTmpCatBulkAttrib is only a temporary table.
    /// </remarks>
    public static void deleteByCatalogRecId(CatalogRefRecId _catalogRecId)
    {
        RetailTmpCatBulkAttrib retailTmpCatBulkAttrib;
        delete_from retailTmpCatBulkAttrib where retailTmpCatBulkAttrib.Catalog == _catalogRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteIfExceedingMaxRows</Name>
				<Source><![CDATA[
    private static boolean deleteIfExceedingMaxRows(CatalogRefRecId _catalogRecId, int _maxRows
    , RetailInternalOrgRefRecId _internalOrganizationRecId
    )
    {
        RetailTmpCatBulkAttrib catBulkAttribCount, catBulkAttribeDelete;

        int numRounds = 0, idx = 0;

        #define.NumberPerRounds(1000)

        if (!_maxRows)
        {
            _maxRows = 65000;
        }

        select count(RecId) from catBulkAttribCount
            where catBulkAttribCount.Catalog == _catalogRecId
                  && (_internalOrganizationRecId == 0) ||
                  (_catalogRecId == 0
                   && catBulkAttribCount.InternalOrganization == _internalOrganizationRecId
                   && catBulkAttribCount.Catalog == _catalogRecId);

        if (catBulkAttribCount.RecId > _maxRows)
        {
            numRounds = real2int((catBulkAttribCount.RecId - _maxRows) / #NumberPerRounds);
            if (catBulkAttribCount.RecId > numRounds * #NumberPerRounds + _maxRows)
            {
                numRounds += 1;
            }

            RetailTmpRecId recIdToDelete;

            try
            {
                // firstOnly1000 only works with select. It doesn't work with delete_from or join.
                // We have to create a temp table first before we could delete in bulk.
                for (idx = 0; idx < numRounds; idx += 1)
                {
                    insert_recordset recIdToDelete (ReferenceRecId)
                        select firstOnly1000 RecId from catBulkAttribeDelete
                            where catBulkAttribCount.Catalog == _catalogRecId
                                   && (_internalOrganizationRecId == 0) ||
                                   (_catalogRecId == 0
                                   && catBulkAttribCount.InternalOrganization == _internalOrganizationRecId)
                    ;

                    delete_from catBulkAttribeDelete
                        exists join recIdToDelete
                            where recIdToDelete.ReferenceRecId == catBulkAttribeDelete.RecId
                    ;

                    delete_from recIdToDelete;
                }
            }
            finally
            {
                // Dispose TempDb table variable instances since they are no longer needed. This will ensure quick cleanup
                // and better for performance.
                recIdToDelete.dispose();
            }
        }

        return numRounds > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find RetailTmpCatBulkAttrib by rec id.
    /// </summary>
    /// <param name="recId">
    /// Rec id.
    /// </param>
    /// <param name="_forUpdate">
    /// Whether this is for update.
    /// </param>
    /// <returns>
    /// The record.
    /// </returns>
    public static RetailTmpCatBulkAttrib find(RecId recId, boolean _forUpdate = false )
    {
        RetailTmpCatBulkAttrib tmpCatAttrib;

        if (recId)
        {
            tmpCatAttrib.selectForUpdate(_forUpdate);

            select firstonly tmpCatAttrib
            where tmpCatAttrib.RecId == recId;
        }

        return tmpCatAttrib;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeRetailTmpCatBulkAttrib</Name>
				<Source><![CDATA[
    private static boolean initializeRetailTmpCatBulkAttrib(
        RetailInternalOrgRefRecId _internalOrganization,
        CatalogRefRecId _catalogRecId,
        RefRecId _categoryHierarchyRecId,
        RetailCatalogCategoryTreeNode _categoryTreeNode,
        int _maxRows,
        RetailTmpInternalOrgCatalogProduct _tmpCatalogProduct,
        utcDatetime _channelHierarchyDateTime)
    {
        CatalogProduct catalogProduct;
        RetailTmpCatBulkAttrib retailTmpCatBulkAttrib, checkCatBulkAttrib, existingTmpCatBulkAttrib;
        RetailInternalOrgAttributeGroupCollapsed retailInternalOrgAttributeGroupCollapsed;
        EcoResAttributeGroupAttribute ecoResAttributeGroupAttribute;
        CatalogTranslation catalogTranslation;
        EcoResCategoryAttributeLookup ecoResCategoryAttributeLookup;
        EcoResProductCategory ecoResProductCategory;
        RetailTmpProductCategory tmpProductCategory;
        str tmpProductCategoryPhysicalTableName = RetailUtilities::getPhysicalTableName(tmpProductCategory);

        RetailCatalogInternalOrg retailCatalogInternalOrg;
        RetailInternalOrganization retailInternalOrganization;
        OMInternalOrganization omInternalOrganization;
        RetailOnlineChannelTable onlineChannelTable;
        EcoResCategory ecoResCategory;
        EcoResCategoryHierarchyRole ecoResCategoryHierarchyRole;
        EcoResAttribute ecoResAttribute;
        EcoResAttributeDefaultValue attributeReference;
        EcoResReferenceValue ecoResReferenceValue;
        CatalogName catalogName;
        RetailInternalOrgProductExploded internalOrgProductExploded;
        RetailInternalOrgExploded retailInternalOrgExploded;
        CatalogDisplayProductAll allProduct;
        RetailCategoryContainmentLookup categoryContainmentLookup;
        RecId selectedCategoryRecId;
        RetailCatalogCategoryTreeNodeType categoryNodeType;
        RetailOnlineChannelLanguages channelLanguage;
        boolean hasMultipleLanguage = false;
        boolean isFirstChannelLanguage = true;
        Map allChannelLanguageIds;
        MapEnumerator allChannelLanguageIdsEn;
        LanguageIdAll localLanguageId, firstChannelLanguageId;
        RetailStoreTable retailStoreTable;
        RetailTmpInternalOrgLanguage retailTmpInternalOrgLanguage;
        EcoResAttributeType ecoResAttributeType;
        RetailSharedParameters sharedParams = RetailSharedParameters::find();
        RetailAttributeSourceName sourceNameDefault = "@RET490406";
        boolean isMaxedOut = false;
        RetailProductAttributeRelationType attributeSourceType;
        DirPartyTable dirPartyTable;
        DirPartyName internalOrganizationName;
        RetailStandardAttribute retailStandardAttribute;
        RetailInternalOrgCatHierarchyCollapsed retailInternalOrgCatHierarchyCollapsed;
        RetailTmpCatalogInternalOrg retailTmpCatalogInternalOrg, linkRetailTmpCatalogInternalOrg;
        RefRecId internalOrg;
        RetailInternalOrgRefRecId previousInternalOrg;
        RetailTmpProdBulkAttrib retailTmpProdBulkAttrib;
        RetailCatalogInternalOrgLanguage retailCatalogInternalOrgLanguage;

        Debug::assert((_catalogRecId == 0 && _internalOrganization > 0) || (_catalogRecId > 0 && _internalOrganization == 0));

        if (_catalogRecId)
        {
            catalogTranslation = CatalogTranslation::find(_catalogRecId, LanguageTable::defaultLanguage());
            catalogName = catalogTranslation.FriendlyName;

            delete_from retailTmpProdBulkAttrib where retailTmpProdBulkAttrib.Catalog == _catalogRecId;
            RetailTmpCatBulkAttrib::deleteByCatalogRecId(_catalogRecId);
        }
        else if (_internalOrganization)
        {
            select firstOnly Name from dirPartyTable
                where dirPartyTable.RecId == _internalOrganization
                    && dirPartyTable.LanguageId == LanguageTable::defaultLanguage();

            internalOrganizationName = dirPartyTable.Name;

            delete_from retailTmpProdBulkAttrib
               where retailTmpProdBulkAttrib.InternalOrganization == _internalOrganization
                && retailTmpProdBulkAttrib.Catalog == 0;

            delete_from retailTmpCatBulkAttrib
               where retailTmpCatBulkAttrib.InternalOrganization == _internalOrganization
                && retailTmpCatBulkAttrib.Catalog == 0;

            internalOrg = RetailInternalOrganization::findByRecId(_internalOrganization).InternalOrganization;
        }

        // Prepare RetailTmpInternalOrgCatalogProduct which is filtered by selected category tree node.
        categoryNodeType = RetailCatalogCategoryTreeNodeType::Root;
        if (_categoryTreeNode)
        {
            categoryNodeType = _categoryTreeNode.getTreeNodeType();
            selectedCategoryRecId = _categoryTreeNode.getCategoryRecId();
        }

        if (_catalogRecId)
        {
            insert_recordset retailTmpCatalogInternalOrg (Catalog, InternalOrganization)
                select Catalog, InternalOrganization from retailCatalogInternalOrg
                    where retailCatalogInternalOrg.Catalog == _catalogRecId;

            insert_recordset retailTmpInternalOrgLanguage(InternalOrganization, LanguageId)
            select InternalOrganization, LanguageId from retailCatalogInternalOrgLanguage
                where retailCatalogInternalOrgLanguage.Catalog == _catalogRecId
                    && retailCatalogInternalOrgLanguage.ValidFrom <= _channelHierarchyDateTime
                    && retailCatalogInternalOrgLanguage.ValidTo >= _channelHierarchyDateTime;

            switch (categoryNodeType)
            {
                case RetailCatalogCategoryTreeNodeType::Root:
                    insert_recordset _tmpCatalogProduct(Catalog, CatalogProduct, Product)
                        select Catalog, RecId, Product from catalogProduct
                            where catalogProduct.Catalog == _catalogRecId
                    ;
                    break;
                case RetailCatalogCategoryTreeNodeType::Uncategorized:
                    insert_recordset _tmpCatalogProduct(Catalog, CatalogProduct, Product)
                        select Catalog, RecId, Product from catalogProduct
                            where catalogProduct.Catalog == _catalogRecId
                        notExists join allProduct
                            where allProduct.Catalog == _catalogRecId
                                && allProduct.Product == catalogProduct.Product
                                && allProduct.CategoryHierarchy == _categoryHierarchyRecId
                    ;
                    break;
                case RetailCatalogCategoryTreeNodeType::Category:
                    insert_recordset _tmpCatalogProduct(Catalog, CatalogProduct, Product)
                        select Catalog, RecId, Product from catalogProduct
                            where catalogProduct.Catalog == _catalogRecId
                        exists join categoryContainmentLookup
                            where categoryContainmentLookup.Category == selectedCategoryRecId
                        join allProduct
                            where allProduct.Catalog == _catalogRecId
                                && allProduct.Category == categoryContainmentLookup.ContainedCategory
                                && allProduct.Product == catalogProduct.Product
                    ;
                    break;
            }
        }
        else if (_internalOrganization)
        {
            retailTmpCatalogInternalOrg.InternalOrganization = _internalOrganization;
            retailTmpCatalogInternalOrg.insert();

            // get all languages for online channel
            insert_recordset retailTmpInternalOrgLanguage(InternalOrganization, AncestorInternalOrg, LanguageId)
                select InternalOrganization, _internalOrganization from retailInternalOrgExploded
                    where retailInternalOrgExploded.AncestorInternalOrg == _internalOrganization
                        && retailInternalOrgExploded.ValidFrom <= _channelHierarchyDateTime
                        && retailInternalOrgExploded.ValidTo >= _channelHierarchyDateTime
                    join retailInternalOrganization
                        where retailInternalOrganization.RecId == retailInternalOrgExploded.InternalOrganization
                    join onlineChannelTable
                        where onlineChannelTable.OMOperatingUnitID == retailInternalOrganization.InternalOrganization
                    join LanguageId from channelLanguage
                        where channelLanguage.OnlineChannel == onlineChannelTable.RecId;

            // get all languages for retail store
            insert_recordset retailTmpInternalOrgLanguage(InternalOrganization, AncestorInternalOrg, LanguageId)
                select InternalOrganization, _internalOrganization from retailInternalOrgExploded
                    where retailInternalOrgExploded.AncestorInternalOrg == _internalOrganization
                        && retailInternalOrgExploded.ValidFrom <= _channelHierarchyDateTime
                        && retailInternalOrgExploded.ValidTo >= _channelHierarchyDateTime
                    join retailInternalOrganization
                        where retailInternalOrganization.RecId == retailInternalOrgExploded.InternalOrganization
                    join cultureName from retailStoreTable
                        where retailStoreTable.OMOperatingUnitID == retailInternalOrganization.InternalOrganization
                            && retailStoreTable.cultureName != '';

            // Allow enrich current and future assorted products
            insert_recordset _tmpCatalogProduct(Product, InternalOrg)
            select Product, _internalOrganization from internalOrgProductExploded
                group by internalOrgProductExploded.Product
                where internalOrgProductExploded.InternalOrganization == _internalOrganization
                    && internalOrgProductExploded.ValidFrom <= _channelHierarchyDateTime
                    && internalOrgProductExploded.ValidTo >= _channelHierarchyDateTime;
        }

        linkRetailTmpCatalogInternalOrg.linkPhysicalTableInstance(retailTmpCatalogInternalOrg);

        RetailProductParentView productParent;

        tmpProductCategory.skipDatabaseLog(true);
        tmpProductCategory.skipEvents(true);

        delete_from tmpProductCategory;

        // 1. attributes from channel navigation hierarchies
        attributeSourceType = RetailProductAttributeRelationType::Category;
        while select CategoryHierarchy from retailInternalOrgCatHierarchyCollapsed
            group by CategoryHierarchy
            exists join linkRetailTmpCatalogInternalOrg
                where linkRetailTmpCatalogInternalOrg.Catalog == _catalogRecId
                      && linkRetailTmpCatalogInternalOrg.InternalOrganization == retailInternalOrgCatHierarchyCollapsed.InternalOrganization
        {
            if (!isMaxedOut)
            {
                // Ensure set based operations to not be downgraded to record-by-record operations
                insert_recordset tmpProductCategory(Product, Category)
                    select Product, Category from ecoResProductCategory
                        join ecoResCategory
                            where ecoResCategory.CategoryHierarchy == retailInternalOrgCatHierarchyCollapsed.CategoryHierarchy
                                && ecoResProductCategory.Category == ecoResCategory.RecId;

                insert_recordset retailTmpProdBulkAttrib(Attribute, Catalog, Product, InternalOrganization)
                select Attribute from ecoResCategoryAttributeLookup
                        join _catalogRecId, Product, _internalOrganization from _tmpCatalogProduct
                            where _tmpCatalogProduct.Catalog == _catalogRecId
                                  && _tmpCatalogProduct.InternalOrg == _internalOrganization
                        join productParent
                            where productParent.Product == _tmpCatalogProduct.Product
                        exists join tmpProductCategory
                            where tmpProductCategory.Product == productParent.ParentProduct
                               && tmpProductCategory.Category == ecoResCategoryAttributeLookup.Category
                        notExists join checkCatBulkAttrib
                            where checkCatBulkAttrib.Attribute == ecoResCategoryAttributeLookup.Attribute
                                    && checkCatBulkAttrib.Product == _tmpCatalogProduct.Product
                                    && checkCatBulkAttrib.Catalog == _catalogRecId
                                    && checkCatBulkAttrib.InternalOrganization == _internalOrganization;

                insert_recordset retailTmpCatBulkAttrib (Attribute, AttributeGroupAttribute, Category, AttributeSourceType, AttributeSourceName, Catalog, CatalogName, CatalogProduct
                ,Product, InternalOrganization, IdentityKey
                )
                    select Attribute, AttributeGroupAttribute from ecoResCategoryAttributeLookup
                        join RecId, attributeSourceType, Name from ecoResCategory
                            where ecoResCategory.CategoryHierarchy == retailInternalOrgCatHierarchyCollapsed.CategoryHierarchy
                               && ecoResCategory.RecId == ecoResCategoryAttributeLookup.Category
                        join _catalogRecId, catalogName, CatalogProduct, Product, _internalOrganization from _tmpCatalogProduct
                            where _tmpCatalogProduct.Catalog == _catalogRecId
                                  && _tmpCatalogProduct.InternalOrg == _internalOrganization
                        join productParent
                            where productParent.Product == _tmpCatalogProduct.Product
                        join RecId from retailTmpProdBulkAttrib
                            where retailTmpProdBulkAttrib.Attribute == ecoResCategoryAttributeLookup.Attribute
                                && retailTmpProdBulkAttrib.Catalog == _catalogRecId
                                && retailTmpProdBulkAttrib.Product == _tmpCatalogProduct.Product
                                && retailTmpProdBulkAttrib.InternalOrganization == _internalOrganization
                        exists join tmpProductCategory
                            where tmpProductCategory.Product == productParent.ParentProduct
                               && tmpProductCategory.Category == ecoResCategoryAttributeLookup.Category
                        notExists join checkCatBulkAttrib
                            where checkCatBulkAttrib.Attribute == ecoResCategoryAttributeLookup.Attribute
                                    && checkCatBulkAttrib.Product == _tmpCatalogProduct.Product
                                    && checkCatBulkAttrib.Catalog == _catalogRecId
                                    && checkCatBulkAttrib.InternalOrganization == _internalOrganization;

                isMaxedOut = RetailTmpCatBulkAttrib::deleteIfExceedingMaxRows(_catalogRecId, _maxRows, _internalOrganization
                );
            }
        }

        // 2. attributes from retail product hierarchy
        if (!isMaxedOut)
        {
            // Ensure set based operations to not be downgraded to record-by-record operations
            delete_from tmpProductCategory;

            insert_recordset tmpProductCategory(Product, Category)
                select Product, Category from ecoResProductCategory
                    join ecoResCategory
                        where ecoResProductCategory.Category == ecoResCategory.RecId
                    exists join ecoResCategoryHierarchyRole
                        where ecoResCategoryHierarchyRole.CategoryHierarchy == ecoResCategory.CategoryHierarchy
                            && ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::Retail;

            insert_recordset retailTmpProdBulkAttrib(Attribute, Catalog, Product, InternalOrganization)
             select Attribute from ecoResCategoryAttributeLookup
                    join _catalogRecId, Product, _internalOrganization from _tmpCatalogProduct
                        where _tmpCatalogProduct.Catalog == _catalogRecId
                              && _tmpCatalogProduct.InternalOrg == _internalOrganization
                    join productParent
                        where productParent.Product == _tmpCatalogProduct.Product
                    exists join tmpProductCategory
                        where tmpProductCategory.Product == productParent.ParentProduct
                           && tmpProductCategory.Category == ecoResCategoryAttributeLookup.Category
                    notExists join checkCatBulkAttrib
                        where checkCatBulkAttrib.Attribute == ecoResCategoryAttributeLookup.Attribute
                            && checkCatBulkAttrib.Catalog == _catalogRecId
                            && ((_internalOrganization == 0
                                && checkCatBulkAttrib.CatalogProduct == _tmpCatalogProduct.CatalogProduct
                                && !checkCatBulkAttrib.InternalOrganization) ||
                                (_catalogRecId == 0
                                && checkCatBulkAttrib.Product == _tmpCatalogProduct.Product
                                && checkCatBulkAttrib.InternalOrganization == _tmpCatalogProduct.InternalOrg));

            insert_recordset retailTmpCatBulkAttrib (Attribute, AttributeGroupAttribute, Category, AttributeSourceType, AttributeSourceName, Catalog, CatalogName, CatalogProduct
            ,Product, InternalOrganization, IdentityKey
            )
                select Attribute, AttributeGroupAttribute from ecoResCategoryAttributeLookup
                    join RecId, attributeSourceType, Name from ecoResCategory
                        where ecoResCategoryAttributeLookup.Category == ecoResCategory.RecId
                    join _catalogRecId, catalogName, CatalogProduct, Product, _internalOrganization from _tmpCatalogProduct
                        where _tmpCatalogProduct.Catalog == _catalogRecId
                              && _tmpCatalogProduct.InternalOrg == _internalOrganization
                    join productParent
                        where productParent.Product == _tmpCatalogProduct.Product
                    join RecId from retailTmpProdBulkAttrib
                        where retailTmpProdBulkAttrib.Attribute == ecoResCategoryAttributeLookup.Attribute
                            && retailTmpProdBulkAttrib.Catalog == _catalogRecId
                            && retailTmpProdBulkAttrib.Product == _tmpCatalogProduct.Product
                            && retailTmpProdBulkAttrib.InternalOrganization == _internalOrganization
                    exists join tmpProductCategory
                        where tmpProductCategory.Product == productParent.ParentProduct
                           && tmpProductCategory.Category == ecoResCategoryAttributeLookup.Category
                    notExists join checkCatBulkAttrib
                        where checkCatBulkAttrib.Attribute == ecoResCategoryAttributeLookup.Attribute
                            && checkCatBulkAttrib.Catalog == _catalogRecId
                            && ((_internalOrganization == 0
                                && checkCatBulkAttrib.CatalogProduct == _tmpCatalogProduct.CatalogProduct
                                && !checkCatBulkAttrib.InternalOrganization) ||
                                (_catalogRecId == 0
                                && checkCatBulkAttrib.Product == _tmpCatalogProduct.Product
                                && checkCatBulkAttrib.InternalOrganization == _tmpCatalogProduct.InternalOrg));

            isMaxedOut = RetailTmpCatBulkAttrib::deleteIfExceedingMaxRows(_catalogRecId, _maxRows
            , _internalOrganization
            );
        }

        // 3. attributes from default product attribute group
        if (!isMaxedOut)
        {
            insert_recordset retailTmpProdBulkAttrib(Attribute, Catalog, Product, InternalOrganization)
             select Attribute from ecoResAttributeGroupAttribute
                    where ecoResAttributeGroupAttribute.AttributeGroup == sharedParams.ProductDefaultAttributeGroup
                    join _catalogRecId, Product, _internalOrganization from _tmpCatalogProduct
                        where _tmpCatalogProduct.Catalog == _catalogRecId
                              && _tmpCatalogProduct.InternalOrg == _internalOrganization
                    notExists join checkCatBulkAttrib
                          where checkCatBulkAttrib.Attribute == ecoResCategoryAttributeLookup.Attribute
                            && checkCatBulkAttrib.Catalog == _catalogRecId
                            && ((_internalOrganization == 0
                                && checkCatBulkAttrib.CatalogProduct == _tmpCatalogProduct.CatalogProduct
                                && !checkCatBulkAttrib.InternalOrganization) ||
                                (_catalogRecId == 0
                                && checkCatBulkAttrib.Product == _tmpCatalogProduct.Product
                                && checkCatBulkAttrib.InternalOrganization == _tmpCatalogProduct.InternalOrg));

            attributeSourceType = RetailProductAttributeRelationType::StandardProduct;
            insert_recordset retailTmpCatBulkAttrib (Attribute, AttributeGroupAttribute, Catalog, CatalogName, CatalogProduct, Product, InternalOrganization, AttributeSourceType,
                AttributeSourceName, IdentityKey)
                select Attribute, RecId from ecoResAttributeGroupAttribute
                    where ecoResAttributeGroupAttribute.AttributeGroup == sharedParams.ProductDefaultAttributeGroup
                    join _catalogRecId, catalogName, CatalogProduct, Product, _internalOrganization, attributeSourceType, sourceNameDefault from _tmpCatalogProduct
                        where _tmpCatalogProduct.Catalog == _catalogRecId
                            && _tmpCatalogProduct.InternalOrg == _internalOrganization
                    join RecId from retailTmpProdBulkAttrib
                        where retailTmpProdBulkAttrib.Attribute == ecoResAttributeGroupAttribute.Attribute
                            && retailTmpProdBulkAttrib.Catalog == _catalogRecId
                            && retailTmpProdBulkAttrib.Product == _tmpCatalogProduct.Product
                            && retailTmpProdBulkAttrib.InternalOrganization == _internalOrganization
                    notExists join checkCatBulkAttrib
                          where checkCatBulkAttrib.Attribute == ecoResCategoryAttributeLookup.Attribute
                            && checkCatBulkAttrib.Catalog == _catalogRecId
                            && ((_internalOrganization == 0
                                && checkCatBulkAttrib.CatalogProduct == _tmpCatalogProduct.CatalogProduct
                                && !checkCatBulkAttrib.InternalOrganization) ||
                                (_catalogRecId == 0
                                && checkCatBulkAttrib.Product == _tmpCatalogProduct.Product
                                && checkCatBulkAttrib.InternalOrganization == _tmpCatalogProduct.InternalOrg));

            isMaxedOut = RetailTmpCatBulkAttrib::deleteIfExceedingMaxRows(_catalogRecId, _maxRows
            , _internalOrganization
            );
        }

        // 4. channel specific product attributes
        if (!isMaxedOut)
        {
            insert_recordset retailTmpProdBulkAttrib(Attribute, AttributeGroupAttribute, InternalOrganization, Product, Catalog)
             select Attribute, maxof(RecId) from ecoResAttributeGroupAttribute
                    group by ecoResAttributeGroupAttribute.Attribute, retailInternalOrganization.RecId, omInternalOrganization.Name, _tmpCatalogProduct.Product, _tmpCatalogProduct.CatalogProduct
                    join retailInternalOrgAttributeGroupCollapsed
                        where retailInternalOrgAttributeGroupCollapsed.AttributeGroup == ecoResAttributeGroupAttribute.AttributeGroup
                            && retailInternalOrgAttributeGroupCollapsed.Modifier == RetailChannelAttributeModifier::Product
                            && retailInternalOrgAttributeGroupCollapsed.ValidFrom <= _channelHierarchyDateTime
                            && retailInternalOrgAttributeGroupCollapsed.ValidTo >= _channelHierarchyDateTime
                    join retailTmpCatalogInternalOrg
                        where retailTmpCatalogInternalOrg.InternalOrganization == retailInternalOrgAttributeGroupCollapsed.InternalOrganization
                              && ((_internalOrganization == 0
                                   && retailTmpCatalogInternalOrg.Catalog == _catalogRecId) ||
                                  (_catalogRecId == 0
                                   && retailInternalOrgAttributeGroupCollapsed.InternalOrganization == _internalOrganization))
                    join RecId from retailInternalOrganization
                        where retailInternalOrganization.RecId == retailInternalOrgAttributeGroupCollapsed.InternalOrganization
                    join omInternalOrganization
                        where omInternalOrganization.RecId == retailInternalOrganization.InternalOrganization
                    join Product, _catalogRecId from _tmpCatalogProduct
                        where _tmpCatalogProduct.Catalog == _catalogRecId
                              && _tmpCatalogProduct.InternalOrg == _internalOrganization
                    notExists join checkCatBulkAttrib
                        where checkCatBulkAttrib.Catalog == _catalogRecId
                            && checkCatBulkAttrib.InternalOrganization == retailInternalOrganization.RecId
                            && checkCatBulkAttrib.Attribute == ecoResAttributeGroupAttribute.Attribute
                            && checkCatBulkAttrib.Product == _tmpCatalogProduct.Product;

            attributeSourceType = RetailProductAttributeRelationType::Channel;
            insert_recordset retailTmpCatBulkAttrib (Attribute, AttributeGroupAttribute, InternalOrganization, AttributeSourceType, AttributeSourceName, Product, Catalog,
                CatalogName, CatalogProduct, IdentityKey)
            select Attribute, maxof(RecId) from ecoResAttributeGroupAttribute
                    group by ecoResAttributeGroupAttribute.Attribute, retailInternalOrganization.RecId, omInternalOrganization.Name, _tmpCatalogProduct.Product,
                    _tmpCatalogProduct.CatalogProduct, retailTmpProdBulkAttrib.RecId
                    join retailInternalOrgAttributeGroupCollapsed
                        where retailInternalOrgAttributeGroupCollapsed.AttributeGroup == ecoResAttributeGroupAttribute.AttributeGroup
                            && retailInternalOrgAttributeGroupCollapsed.Modifier == RetailChannelAttributeModifier::Product
                            && retailInternalOrgAttributeGroupCollapsed.ValidFrom <= _channelHierarchyDateTime
                            && retailInternalOrgAttributeGroupCollapsed.ValidTo >= _channelHierarchyDateTime
                    join retailTmpCatalogInternalOrg
                        where retailTmpCatalogInternalOrg.InternalOrganization == retailInternalOrgAttributeGroupCollapsed.InternalOrganization
                              && ((_internalOrganization == 0
                                   && retailTmpCatalogInternalOrg.Catalog == _catalogRecId) ||
                                  (_catalogRecId == 0
                                   && retailInternalOrgAttributeGroupCollapsed.InternalOrganization == _internalOrganization))
                    join RecId from retailInternalOrganization
                        where retailInternalOrganization.RecId == retailInternalOrgAttributeGroupCollapsed.InternalOrganization
                    join attributeSourceType, Name from omInternalOrganization
                        where omInternalOrganization.RecId == retailInternalOrganization.InternalOrganization
                    join Product, _catalogRecId, catalogName, CatalogProduct from _tmpCatalogProduct
                        where _tmpCatalogProduct.Catalog == _catalogRecId
                            && _tmpCatalogProduct.InternalOrg == _internalOrganization
                    join RecId from retailTmpProdBulkAttrib
                        where retailTmpProdBulkAttrib.Attribute == ecoResAttributeGroupAttribute.Attribute
                            && retailTmpProdBulkAttrib.Catalog == _catalogRecId
                            && retailTmpProdBulkAttrib.Product == _tmpCatalogProduct.Product
                            && retailTmpProdBulkAttrib.InternalOrganization == retailInternalOrganization.RecId
                            && retailTmpProdBulkAttrib.AttributeGroupAttribute == ecoResAttributeGroupAttribute.RecId
                    notExists join checkCatBulkAttrib
                        where checkCatBulkAttrib.Catalog == _catalogRecId
                            && checkCatBulkAttrib.InternalOrganization == retailInternalOrganization.RecId
                            && checkCatBulkAttrib.Attribute == ecoResAttributeGroupAttribute.Attribute
                            && checkCatBulkAttrib.Product == _tmpCatalogProduct.Product;

            isMaxedOut = RetailTmpCatBulkAttrib::deleteIfExceedingMaxRows(_catalogRecId, _maxRows, _internalOrganization);
        }

        // Remove non editable attributes from temp table
        delete_from retailTmpProdBulkAttrib
            exists join retailTmpCatBulkAttrib
                where retailTmpCatBulkAttrib.IdentityKey == retailTmpProdBulkAttrib.RecId
            exists join attributeReference
                where attributeReference.Attribute == retailTmpCatBulkAttrib.Attribute
            join RecId, RefTableId from ecoResReferenceValue
                where ecoResReferenceValue.RecId == attributeReference.Value
                && ecoResReferenceValue.RefTableId == tableNum(EcoResAttribute)
            join StandardAttributeID from retailStandardAttribute
                where  retailStandardAttribute.Attribute == ecoResReferenceValue.RefRecId
                       && (retailStandardAttribute.StandardAttributeID == RetailStandardAttributeID::Color ||
                           retailStandardAttribute.StandardAttributeID == RetailStandardAttributeID::Style ||
                           retailStandardAttribute.StandardAttributeID == RetailStandardAttributeID::Size  ||
                           retailStandardAttribute.StandardAttributeID == RetailStandardAttributeID::Config ||
                           retailStandardAttribute.StandardAttributeID == RetailStandardAttributeID::SalesTaxGroup ||
                           retailStandardAttribute.StandardAttributeID == RetailStandardAttributeID::NavigationCategory);

        // Remove non editable attributes
        delete_from retailTmpCatBulkAttrib
            exists join attributeReference
                where attributeReference.Attribute == retailTmpCatBulkAttrib.Attribute
            join RecId, RefTableId from ecoResReferenceValue
                where ecoResReferenceValue.RecId == attributeReference.Value
                && ecoResReferenceValue.RefTableId == tableNum(EcoResAttribute)
            join StandardAttributeID from retailStandardAttribute
                where  retailStandardAttribute.Attribute == ecoResReferenceValue.RefRecId
                       && (retailStandardAttribute.StandardAttributeID == RetailStandardAttributeID::Color ||
                           retailStandardAttribute.StandardAttributeID == RetailStandardAttributeID::Style ||
                           retailStandardAttribute.StandardAttributeID == RetailStandardAttributeID::Size  ||
                           retailStandardAttribute.StandardAttributeID == RetailStandardAttributeID::Config ||
                           retailStandardAttribute.StandardAttributeID == RetailStandardAttributeID::SalesTaxGroup ||
                           retailStandardAttribute.StandardAttributeID == RetailStandardAttributeID::NavigationCategory);

        // ********** Setting the AttributeType field **********
        update_recordSet retailTmpCatBulkAttrib
            setting AttributeType = ecoResAttribute.AttributeType,
                RawAttributeType = ecoResAttribute.AttributeType
                where (( _internalOrganization == 0
                         && retailTmpCatBulkAttrib.Catalog == _catalogRecId) ||
                       ( _catalogRecId == 0
                         && retailTmpCatBulkAttrib.InternalOrganization == _internalOrganization
                         && retailTmpCatBulkAttrib.Catalog == _catalogRecId))
            join ecoResAttribute
                where ecoResAttribute.RecId == retailTmpCatBulkAttrib.Attribute;

        update_recordSet retailTmpCatBulkAttrib
            setting AttributeType = ecoResAttribute.AttributeType
                where (( _internalOrganization == 0
                         && retailTmpCatBulkAttrib.Catalog == _catalogRecId) ||
                       ( _catalogRecId == 0
                         && retailTmpCatBulkAttrib.InternalOrganization == _internalOrganization
                         && retailTmpCatBulkAttrib.Catalog == _catalogRecId))
            join attributeReference
                where attributeReference.Attribute == retailTmpCatBulkAttrib.Attribute
            join ecoResReferenceValue
                where ecoResReferenceValue.RecId == attributeReference.Value
                   && ecoResReferenceValue.RefTableId == tableNum(EcoResAttribute)
            join ecoResAttribute
                where ecoResAttribute.RecId == ecoResReferenceValue.RefRecId;

        // Fix language if needed.

        allChannelLanguageIds = new Map(Types::String, Types::Int64);
        isFirstChannelLanguage = true;

        while select LanguageId from retailTmpInternalOrgLanguage
            group by retailTmpInternalOrgLanguage.LanguageId
        {
            if (!allChannelLanguageIds.exists(retailTmpInternalOrgLanguage.LanguageId))
            {
                allChannelLanguageIds.insert(retailTmpInternalOrgLanguage.LanguageId, 1);

                if (!isFirstChannelLanguage)
                {
                    hasMultipleLanguage = true;
                }
            }

            isFirstChannelLanguage = false;
        }

        if (hasMultipleLanguage)
        {
            allChannelLanguageIdsEn = allChannelLanguageIds.getEnumerator();
            isFirstChannelLanguage = true;
            while (allChannelLanguageIdsEn.moveNext())
            {
                localLanguageId = allChannelLanguageIdsEn.currentKey();
                // 1.1. Update ChannelLanguage field for non-channel text attribute
                if (isFirstChannelLanguage)
                {
                    isFirstChannelLanguage = false;
                    firstChannelLanguageId = localLanguageId;
                    update_recordSet retailTmpCatBulkAttrib
                     setting LanguageId = localLanguageId
                            where  retailTmpCatBulkAttrib.Catalog == _catalogRecId
                                   && (_internalOrganization == 0
                                   && retailTmpCatBulkAttrib.InternalOrganization == _internalOrganization) ||
                                   (_catalogRecId == 0
                                   && retailTmpCatBulkAttrib.InternalOrganization == _internalOrganization
                                   && retailTmpCatBulkAttrib.AttributeSourceType != RetailProductAttributeRelationType::Channel)
                        join ecoResAttributeType
                            where ecoResAttributeType.RecId == retailTmpCatBulkAttrib.AttributeType
                                && ecoResAttributeType.DataType == AttributeDataType::Text
                    ;
                }
                // 1.2. Duplicate retailTmpCatBulkAttrib for non-channel text attribute per additional language.
                else if (!isMaxedOut)
                {
                    insert_recordset retailTmpProdBulkAttrib(Attribute, Language, Product, InternalOrganization, Catalog)
                    select Attribute,  /* <SYS> channelLanguageRecId, </SYS> */
                        localLanguageId,
                        Product,
                        InternalOrganization,
                        Catalog
                        from existingTmpCatBulkAttrib
                        where existingTmpCatBulkAttrib.LanguageId == firstChannelLanguageId
                              && existingTmpCatBulkAttrib.Catalog == _catalogRecId
                              && ((_internalOrganization == 0
                                 && existingTmpCatBulkAttrib.InternalOrganization == _internalOrganization) ||
                                 (_catalogRecId == 0
                                 && existingTmpCatBulkAttrib.InternalOrganization == _internalOrganization
                                 && existingTmpCatBulkAttrib.AttributeSourceType != RetailProductAttributeRelationType::Channel))
                                // </RETAIL>
                    join ecoResAttributeType
                        where ecoResAttributeType.RecId == existingTmpCatBulkAttrib.AttributeType
                            && ecoResAttributeType.DataType == AttributeDataType::Text;

                    insert_recordset retailTmpCatBulkAttrib (Attribute, AttributeType, RawAttributeType, AttributeGroupAttribute,
                    LanguageId,
                    Product,
                    InternalOrganization,
                    AttributeSourceType,
                    Catalog, CatalogName, CatalogProduct, AttributeSourceName, Category, IdentityKey)
                    select Attribute, AttributeType, RawAttributeType, AttributeGroupAttribute,
                        localLanguageId,
                        Product,
                        InternalOrganization,
                        AttributeSourceType,
                        Catalog, CatalogName, CatalogProduct, AttributeSourceName, Category
                        from existingTmpCatBulkAttrib
                        where existingTmpCatBulkAttrib.LanguageId == firstChannelLanguageId
                              && existingTmpCatBulkAttrib.Catalog == _catalogRecId
                              && ((_internalOrganization == 0
                                 && existingTmpCatBulkAttrib.InternalOrganization == _internalOrganization) ||
                                 (_catalogRecId == 0
                                 && existingTmpCatBulkAttrib.InternalOrganization == _internalOrganization
                                 && existingTmpCatBulkAttrib.AttributeSourceType != RetailProductAttributeRelationType::Channel))
                    join ecoResAttributeType
                        where ecoResAttributeType.RecId == existingTmpCatBulkAttrib.AttributeType
                            && ecoResAttributeType.DataType == AttributeDataType::Text
                    join RecId from retailTmpProdBulkAttrib
                        where retailTmpProdBulkAttrib.Attribute == existingTmpCatBulkAttrib.Attribute
                            && retailTmpProdBulkAttrib.Product == existingTmpCatBulkAttrib.Product
                            && retailTmpProdBulkAttrib.InternalOrganization == _internalOrganization
                            && retailTmpProdBulkAttrib.Catalog == _catalogRecId
                            && retailTmpProdBulkAttrib.Language == localLanguageId;
                    isMaxedOut = RetailTmpCatBulkAttrib::deleteIfExceedingMaxRows(_catalogRecId, _maxRows, _internalOrganization);
                }
            }
            // 2. Fix ChannelLanguage for channel text attribute.
            while select InternalOrganization, LanguageId from retailTmpInternalOrgLanguage
                order by retailTmpInternalOrgLanguage.InternalOrganization
            {
                if (previousInternalOrg != retailTmpInternalOrgLanguage.InternalOrganization)
                {
                    previousInternalOrg = retailTmpInternalOrgLanguage.InternalOrganization;
                    isFirstChannelLanguage = true;
                }
                localLanguageId = retailTmpInternalOrgLanguage.LanguageId;
                // 2.1. Update ChannelLanguage field for channel text attribute
                if (isFirstChannelLanguage)
                {
                    isFirstChannelLanguage = false;
                    firstChannelLanguageId = localLanguageId;
                    update_recordSet retailTmpCatBulkAttrib
                            setting LanguageId = firstChannelLanguageId
                            where   retailTmpCatBulkAttrib.Catalog == _catalogRecId
                                    && ((_internalOrganization == 0
                                        && retailTmpCatBulkAttrib.InternalOrganization == retailTmpInternalOrgLanguage.InternalOrganization) ||
                                       (_catalogRecId == 0
                                        && retailTmpCatBulkAttrib.InternalOrganization == _internalOrganization
                                        && retailTmpCatBulkAttrib.AttributeSourceType == RetailProductAttributeRelationType::Channel))
                        join ecoResAttributeType
                            where ecoResAttributeType.RecId == retailTmpCatBulkAttrib.AttributeType
                                && ecoResAttributeType.DataType == AttributeDataType::Text
                    ;
                }
                // 2.2. Duplicate retailTmpCatBulkAttrib for channel text attribute per additional language.
                else if (!isMaxedOut)
                {
                    insert_recordset retailTmpProdBulkAttrib(Attribute, Language, Product, InternalOrganization, Catalog)
                      select Attribute,localLanguageId,
                            Product,
                            InternalOrganization,
                            Catalog
                            from existingTmpCatBulkAttrib
                            where existingTmpCatBulkAttrib.Catalog == _catalogRecId
                                && existingTmpCatBulkAttrib.LanguageId == firstChannelLanguageId
                                && ((_internalOrganization == 0
                                   && existingTmpCatBulkAttrib.InternalOrganization == retailTmpInternalOrgLanguage.InternalOrganization) ||
                                   (_catalogRecId == 0
                                   && existingTmpCatBulkAttrib.InternalOrganization == _internalOrganization
                                   && existingTmpCatBulkAttrib.AttributeSourceType == RetailProductAttributeRelationType::Channel))
                        join ecoResAttributeType
                            where ecoResAttributeType.RecId == existingTmpCatBulkAttrib.AttributeType
                                && ecoResAttributeType.DataType == AttributeDataType::Text;

                    insert_recordset retailTmpCatBulkAttrib (Attribute, AttributeType, RawAttributeType, AttributeGroupAttribute,
                    LanguageId,
                    Product,
                    InternalOrganization,
                    Catalog, CatalogName, CatalogProduct, AttributeSourceName, IdentityKey)
                        select Attribute, AttributeType, RawAttributeType, AttributeGroupAttribute,
                            localLanguageId,
                            Product,
                            InternalOrganization,
                            Catalog, CatalogName, CatalogProduct, AttributeSourceName
                            from existingTmpCatBulkAttrib
                            where existingTmpCatBulkAttrib.Catalog == _catalogRecId
                                && existingTmpCatBulkAttrib.LanguageId == firstChannelLanguageId
                                && ((_internalOrganization == 0
                                   && existingTmpCatBulkAttrib.InternalOrganization == retailTmpInternalOrgLanguage.InternalOrganization) ||
                                   (_catalogRecId == 0
                                   && existingTmpCatBulkAttrib.InternalOrganization == _internalOrganization
                                   && existingTmpCatBulkAttrib.AttributeSourceType == RetailProductAttributeRelationType::Channel))
                        join ecoResAttributeType
                            where ecoResAttributeType.RecId == existingTmpCatBulkAttrib.AttributeType
                                && ecoResAttributeType.DataType == AttributeDataType::Text
                        join RecId from retailTmpProdBulkAttrib
                            where retailTmpProdBulkAttrib.Attribute == existingTmpCatBulkAttrib.Attribute
                                && retailTmpProdBulkAttrib.InternalOrganization == existingTmpCatBulkAttrib.InternalOrganization
                                && retailTmpProdBulkAttrib.Product == existingTmpCatBulkAttrib.Product
                                && retailTmpProdBulkAttrib.Catalog == _catalogRecId
                                && retailTmpProdBulkAttrib.Language == localLanguageId;

                    isMaxedOut = RetailTmpCatBulkAttrib::deleteIfExceedingMaxRows(_catalogRecId, _maxRows, _internalOrganization);
                }
            }
        }

        if (isMaxedOut)
        {
            info("@RET4160646");
        }

        update_recordset retailTmpCatBulkAttrib
            setting DataType = ecoResAttributeType.DataType
            join ecoResAttributeType
                where ecoResAttributeType.RecId == retailTmpCatBulkAttrib.AttributeType;

        CatalogProduct catalogProductMaster;
        EcoResDistinctProductVariant distinctProductVariant;
        update_recordset retailTmpCatBulkAttrib
            setting CatalogProductMaster = catalogProductMaster.RecId
            join distinctProductVariant
                where distinctProductVariant.RecId == retailTmpCatBulkAttrib.Product
            join catalogProductMaster
                where catalogProductMaster.Catalog == retailTmpCatBulkAttrib.Catalog
                    && catalogProductMaster.Product == distinctProductVariant.ProductMaster;

        update_recordset retailTmpCatBulkAttrib
            setting ParentProduct = productParent.ParentProduct
            join productParent
                where productParent.Product == retailTmpCatBulkAttrib.Product;

        return hasMultipleLanguage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeAttributeValues</Name>
				<Source><![CDATA[
    private static void mergeAttributeValues(CatalogRefRecId _catalogRecId, RetailInternalOrgRefRecId _internalOrganization)
    {
        RetailTmpCatBulkAttrib retailTmpCatBulkAttrib;
        RetailTmpCatBulkAttribView retailTmpCatBulkAttribView;
        RetailTmpCatBulkAttributeValue retailTmpCatBulkAttributeValue;

        insert_recordset retailTmpCatBulkAttributeValue (TmpCatBulkAttrib, Value)
            select TmpCatBulkAttrib, Value from retailTmpCatBulkAttribView
                where ((_internalOrganization == 0
                        && retailTmpCatBulkAttribView.Catalog == _catalogRecId) ||
                        (_catalogRecId == 0
                        && retailTmpCatBulkAttribView.InternalOrganization == _internalOrganization
                        && retailTmpCatBulkAttribView.Catalog == _catalogRecId));

        update_recordSet retailTmpCatBulkAttrib
            setting TextValue = retailTmpCatBulkAttributeValue.Value
            where ((_internalOrganization == 0
                    && retailTmpCatBulkAttrib.Catalog == _catalogRecId) ||
                    (_catalogRecId == 0
                    && retailTmpCatBulkAttrib.InternalOrganization == _internalOrganization
                    && retailTmpCatBulkAttrib.Catalog == _catalogRecId))
            join retailTmpCatBulkAttributeValue
                where retailTmpCatBulkAttributeValue.TmpCatBulkAttrib == retailTmpCatBulkAttrib.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeColumns</Name>
				<Source><![CDATA[
    private static void mergeColumns(CatalogRefRecId _catalogRecId, RetailInternalOrgRefRecId _internalOrganization)
    {
        RetailTmpCatBulkAttrib::mergeLanguageUomAndCurrency(_catalogRecId, _internalOrganization);
        RetailTmpCatBulkAttrib::mergeAttributeValues(_catalogRecId, _internalOrganization);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeLanguageUomAndCurrency</Name>
				<Source><![CDATA[
    private static void mergeLanguageUomAndCurrency(CatalogRefRecId _catalogRecId, RetailInternalOrgRefRecId _internalOrganization)
    {
        RetailTmpCatBulkAttrib retailTmpCatBulkAttrib;
        EcoResAttributeType ecoResAttributeType;
        UnitOfMeasure unitOfMeasure;

        update_recordSet retailTmpCatBulkAttrib
            setting AttributeProperty = retailTmpCatBulkAttrib.LanguageId
                where ((_internalOrganization == 0
                        && retailTmpCatBulkAttrib.Catalog == _catalogRecId) ||
                        (_catalogRecId == 0
                        && retailTmpCatBulkAttrib.InternalOrganization == _internalOrganization
                        && retailTmpCatBulkAttrib.Catalog == _catalogRecId))
             join ecoResAttributeType
                where ecoResAttributeType.RecId == retailTmpCatBulkAttrib.AttributeType
                    && ecoResAttributeType.DataType == AttributeDataType::Text;

        update_recordSet retailTmpCatBulkAttrib
            setting AttributeProperty = unitOfMeasure.Symbol
                where (( _internalOrganization == 0
                        && retailTmpCatBulkAttrib.Catalog == _catalogRecId) ||
                        (_catalogRecId == 0
                        && retailTmpCatBulkAttrib.InternalOrganization == _internalOrganization
                        && retailTmpCatBulkAttrib.Catalog == _catalogRecId))
                        && (retailTmpCatBulkAttrib.AttributeType == AttributeDataType::Integer
                        ||  retailTmpCatBulkAttrib.AttributeType == AttributeDataType::Decimal)
            join unitOfMeasure
                where unitOfMeasure.RecId == retailTmpCatBulkAttrib.UnitOfMeasure;

         update_recordSet retailTmpCatBulkAttrib
            setting AttributeProperty = retailTmpCatBulkAttrib.CurrencyCode
                where ((_internalOrganization == 0
                        && retailTmpCatBulkAttrib.Catalog == _catalogRecId) ||
                        (_catalogRecId == 0
                        && retailTmpCatBulkAttrib.InternalOrganization == _internalOrganization
                        && retailTmpCatBulkAttrib.Catalog == _catalogRecId))
                join ecoResAttributeType
                    where ecoResAttributeType.RecId == retailTmpCatBulkAttrib.AttributeType
                        && ecoResAttributeType.DataType == AttributeDataType::Currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshFromCatalog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh RetailTmpCatBulkAttrib from the catalog.
    /// </summary>
    /// <param name="_catalogRecId">
    /// Catalog rec id.
    /// </param>
    /// <param name="_categoryHierarchyRecId">
    /// Category hierarchy id filter.
    /// </param>
    /// <param name="_categoryTreeNode">
    /// Category tree node filter.
    /// </param>
    /// <param name="_maxRows">
    /// Max number of rows.
    /// </param>
    /// <remarks>
    /// RetailTmpCatBulkAttrib is an intermediate table for excel bulk edit.
    /// </remarks>
    public static void refreshFromCatalog(CatalogRefRecId _catalogRecId, RefRecId _categoryHierarchyRecId, RetailCatalogCategoryTreeNode _categoryTreeNode, int _maxRows = 65000)
    {
        RetailTmpCatBulkAttrib::refreshProductAttributesValue(0, _catalogRecId, _categoryHierarchyRecId, _categoryTreeNode, _maxRows);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshProductAttributesValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh RetailTmpCatBulkAttrib from either catalog or InternalOrg
    /// </summary>
    /// <param name="_internalOrganization">
    /// InternalOrganization RecId
    /// </param>
    /// <param name="_catalogRecId">
    /// Catalog rec id
    /// </param>
    /// <param name="_categoryHierarchyRecId">
    /// Category hierarchy id filter
    /// </param>
    /// <param name="_categoryTreeNode">
    /// Category tree node filter.
    /// </param>
    /// <param name="_maxRows">
    /// Max number of rows.
    /// </param>
    /// <remarks>
    /// RetailTmpCatBulkAttrib is an intermediate table for excel bulk edit.
    /// </remarks>
    public static void refreshProductAttributesValue(RetailInternalOrgRefRecId _internalOrganization, CatalogRefRecId _catalogRecId, RefRecId _categoryHierarchyRecId, RetailCatalogCategoryTreeNode _categoryTreeNode, int _maxRows = 65000)
    {
        RetailTmpCatBulkAttrib retailTmpCatBulkAttrib;
        EcoResAttributeGroupAttribute ecoResAttributeGroupAttribute;
        CatalogProductInstanceValue catalogProductInstanceValue;
        EcoResAttributeType ecoResAttributeType;
        EcoResAttributeTypeUnitOfMeasure ecoResAttributeTypeUnitOfMeasure;
        EcoResProductInstanceValue ecoResProductInstanceValue;
        EcoResAttributeDefaultValue ecoResAttributeDefaultValue;
        EcoResAttributeValue ecoResAttributeValue;
        EcoResTextValue ecoResTextValue;
        EcoResAttributeDefaultValue attributeReference;
        EcoResReferenceValue ecoResReferenceValue;
        EcoResIntValue ecoResIntValue;
        EcoResFloatValue ecoResFloatValue;
        EcoResBooleanValue ecoResBooleanValue;
        EcoResDateTimeValue ecoResDateTimeValue;
        EcoResCurrencyValue ecoResCurrencyValue;
        RetailStandardAttribute retailStandardAttribute;
        boolean hasMultipleLanguage;
        CurrencyCode defaultCurrency;
        RetailCatalogProdInternalOrgInstanceVal retailCatalogProdInternalOrgInstanceVal;
        RetailTmpIntOrgProdAttribValCollapsed tmpIntOrgProdAttribValCollapsed;
        RetailTmpCatProdIntOrgAttribValInherited tmpCatProdIntOrgAttrValInherited;

        RetailTmpCatProdInternalOrgInstanceVal tmpCatProdInternalOrgInstanceVal;
        str tmpCatProdInternalOrgInstanceValPhysicalTableName;
        RetailTmpInternalOrgProductInstanceValue tmpInternalOrgProductInstanceValue;
        str tmpInternalOrgProductInstanceValuePhysicalTableName = RetailUtilities::getPhysicalTableName(tmpInternalOrgProductInstanceValue);;

        RetailTmpInternalOrgCatalogProduct tmpCatalogProduct;
        str tmpCatalogProductPhysicalTableName = RetailUtilities::getPhysicalTableName(tmpCatalogProduct);

        RetailInternalOrgProductInstanceValue retailInternalOrgProductInstanceValue;
        RetailInternalOrgProduct retailInternalOrgProduct;
        utcDateTime channelHierarchyDateTime = DateTimeUtil::utcNow();
        DirPartyName internalOrgName;
        utcDateTime dateTimeValue;
        str dateTimeStringValue;
        CreatedTransactionId currentTransactionId;

        if (_catalogRecId)
        {
            channelHierarchyDateTime = Catalog::getChannelHierarchyDateTime(_catalogRecId);
        }

        ttsBegin;

        delete_from tmpCatalogProduct;

        hasMultipleLanguage = RetailTmpCatBulkAttrib::initializeRetailTmpCatBulkAttrib(_internalOrganization, _catalogRecId, _categoryHierarchyRecId, _categoryTreeNode, _maxRows, tmpCatalogProduct, channelHierarchyDateTime);

        tmpInternalOrgProductInstanceValue.skipDatabaseLog(true);
        tmpInternalOrgProductInstanceValue.skipEvents(true);

        if (_catalogRecId)
        {
            tmpCatProdInternalOrgInstanceValPhysicalTableName = RetailUtilities::getPhysicalTableName(tmpCatProdInternalOrgInstanceVal);

            // Ensure set based operations to not be downgraded to record-by-record operations
            tmpCatProdInternalOrgInstanceVal.skipDatabaseLog(true);
            tmpCatProdInternalOrgInstanceVal.skipEvents(true);

            insert_recordset tmpCatProdInternalOrgInstanceVal
            (
                CatalogProduct,
                InternalOrganization,
                InstanceValue
            )
            select CatalogProd, InternalOrganization, RecId from retailCatalogProdInternalOrgInstanceVal
            join tmpCatalogProduct
                where tmpCatalogProduct.CatalogProduct == retailCatalogProdInternalOrgInstanceVal.CatalogProd
                    && tmpCatalogProduct.Catalog == _catalogRecId;

            insert_recordset tmpInternalOrgProductInstanceValue
            (
                InternalOrgProduct,
                InstanceValue
            )
            select tmpCatalogProduct
            join retailInternalOrgProduct
                where retailInternalOrgProduct.Product == tmpCatalogProduct.Product
            join InternalOrgProduct, RecId from retailInternalOrgProductInstanceValue
                where retailInternalOrgProductInstanceValue.InternalOrgProduct == retailInternalOrgProduct.RecId;
        }
        else
        {
            insert_recordset tmpInternalOrgProductInstanceValue
            (
                InternalOrgProduct,
                InstanceValue
            )
            select InternalOrgProduct, RecId from retailInternalOrgProductInstanceValue
            join tmpCatalogProduct
                    where tmpCatalogProduct.InternalOrg == _internalOrganization
            join retailInternalOrgProduct
                where retailInternalOrgProduct.RecId == retailInternalOrgProductInstanceValue.InternalOrgProduct
                    && retailInternalOrgProduct.Product == tmpCatalogProduct.Product
                    && retailInternalOrgProduct.InternalOrganization == tmpCatalogProduct.InternalOrg;
        }

        currentTransactionId = appl.curTransactionId();

        // Text values
        if (hasMultipleLanguage)
        {
            RetailTmpCatBulkAttrib::updateTextValue4MultiLanguage(_catalogRecId, _internalOrganization, channelHierarchyDateTime, currentTransactionId);
        }
        else
        {
            // Catalog/channel product attribute values
            #RetailInsertCatBulkAttributeChannel(TextValue, TextValue, ecoResTextValue, CatalogProduct)
            #RetailInsertCatBulkAttribCatProduct(TextValue, TextValue, ecoResTextValue, CatalogProduct)
            #RetailInsertCatBulkAttribIntOrg(TextValue, TextValue, ecoResTextValue, Product)

            // Catalog/channel product attribute values from product master
            #RetailInsertCatBulkAttributeChannel(TextValue, TextValue, ecoResTextValue, CatalogProductMaster)
            #RetailInsertCatBulkAttribCatProduct(TextValue, TextValue, ecoResTextValue, CatalogProductMaster)
            #RetailInsertCatBulkAttribIntOrg(TextValue, TextValue, ecoResTextValue, ParentProduct)

            #RetailInsertCatBulkAttributeProduct(TextValue, TextValue, ecoResTextValue)
            #RetailInsertCatBulkAttributeGroupDef(TextValue, TextValue, ecoResTextValue)
            #RetailInsertCatBulkAttributeDefault(TextValue, TextValue, ecoResTextValue)
        }

        // catalog Channel product attribute values
        #RetailInsertCatBulkAttributeChannel(BooleanValue, BooleanValue, ecoResBooleanValue, CatalogProduct)
        #RetailInsertCatBulkAttributeChannel(DateTimeValue, DateTimeValue, ecoResDateTimeValue, CatalogProduct)
        #RetailInsertCatBulkAttributeDblChannel(IntValue, UnitOfMeasure, IntValue, IntUnitOfMeasure, ecoResIntValue, CatalogProduct)
        #RetailInsertCatBulkAttributeDblChannel(FloatValue, UnitOfMeasure, FloatValue, FloatUnitOfMeasure, ecoResFloatValue, CatalogProduct)
        #RetailInsertCatBulkAttributeDblChannel(CurrencyValue, CurrencyCode, CurrencyValue, CurrencyCode, ecoResCurrencyValue, CatalogProduct)

        // catalog product attribute values
        #RetailInsertCatBulkAttribCatProduct(BooleanValue, BooleanValue, ecoResBooleanValue, CatalogProduct)
        #RetailInsertCatBulkAttribCatProduct(DateTimeValue, DateTimeValue, ecoResDateTimeValue, CatalogProduct)
        #RetailInsertCatBulkAttribDblCatProduct(IntValue, UnitOfMeasure, IntValue, IntUnitOfMeasure, ecoResIntValue, CatalogProduct)
        #RetailInsertCatBulkAttribDblCatProduct(FloatValue, UnitOfMeasure, FloatValue, FloatUnitOfMeasure, ecoResFloatValue, CatalogProduct)
        #RetailInsertCatBulkAttribDblCatProduct(CurrencyValue, CurrencyCode, CurrencyValue, CurrencyCode, ecoResCurrencyValue, CatalogProduct)

        // channel product attribute values
        #RetailInsertCatBulkAttribIntOrg(BooleanValue, BooleanValue, ecoResBooleanValue, Product)
        #RetailInsertCatBulkAttribIntOrg(DateTimeValue, DateTimeValue, ecoResDateTimeValue, Product)
        #RetailInsertCatBulkAttribDblIntOrg(IntValue, UnitOfMeasure, IntValue, IntUnitOfMeasure, ecoResIntValue, Product)
        #RetailInsertCatBulkAttribDblIntOrg(FloatValue, UnitOfMeasure, FloatValue, FloatUnitOfMeasure, ecoResFloatValue, Product)
        #RetailInsertCatBulkAttribDblIntOrg(CurrencyValue, CurrencyCode, CurrencyValue, CurrencyCode, ecoResCurrencyValue, Product)

        // catalog Channel product attribute values from product master
        #RetailInsertCatBulkAttributeChannel(BooleanValue, BooleanValue, ecoResBooleanValue, CatalogProductMaster)
        #RetailInsertCatBulkAttributeChannel(DateTimeValue, DateTimeValue, ecoResDateTimeValue, CatalogProductMaster)
        #RetailInsertCatBulkAttributeDblChannel(IntValue, UnitOfMeasure, IntValue, IntUnitOfMeasure, ecoResIntValue, CatalogProductMaster)
        #RetailInsertCatBulkAttributeDblChannel(FloatValue, UnitOfMeasure, FloatValue, FloatUnitOfMeasure, ecoResFloatValue, CatalogProductMaster)
        #RetailInsertCatBulkAttributeDblChannel(CurrencyValue, CurrencyCode, CurrencyValue, CurrencyCode, ecoResCurrencyValue, CatalogProductMaster)

        // catalog product attribute values from product master
        #RetailInsertCatBulkAttribCatProduct(BooleanValue, BooleanValue, ecoResBooleanValue, CatalogProductMaster)
        #RetailInsertCatBulkAttribCatProduct(DateTimeValue, DateTimeValue, ecoResDateTimeValue, CatalogProductMaster)
        #RetailInsertCatBulkAttribDblCatProduct(IntValue, UnitOfMeasure, IntValue, IntUnitOfMeasure, ecoResIntValue, CatalogProductMaster)
        #RetailInsertCatBulkAttribDblCatProduct(FloatValue, UnitOfMeasure, FloatValue, FloatUnitOfMeasure, ecoResFloatValue, CatalogProductMaster)
        #RetailInsertCatBulkAttribDblCatProduct(CurrencyValue, CurrencyCode, CurrencyValue, CurrencyCode, ecoResCurrencyValue, CatalogProductMaster)

        // channel product attribute values from product master
        #RetailInsertCatBulkAttribIntOrg(BooleanValue, BooleanValue, ecoResBooleanValue, ParentProduct)
        #RetailInsertCatBulkAttribIntOrg(DateTimeValue, DateTimeValue, ecoResDateTimeValue, ParentProduct)
        #RetailInsertCatBulkAttribDblIntOrg(IntValue, UnitOfMeasure, IntValue, IntUnitOfMeasure, ecoResIntValue, ParentProduct)
        #RetailInsertCatBulkAttribDblIntOrg(FloatValue, UnitOfMeasure, FloatValue, FloatUnitOfMeasure, ecoResFloatValue, ParentProduct)
        #RetailInsertCatBulkAttribDblIntOrg(CurrencyValue, CurrencyCode, CurrencyValue, CurrencyCode, ecoResCurrencyValue, ParentProduct)

        // product attribute values
        #RetailInsertCatBulkAttributeProduct(BooleanValue, BooleanValue, ecoResBooleanValue)
        #RetailInsertCatBulkAttributeProduct(DateTimeValue, DateTimeValue, ecoResDateTimeValue)
        #RetailInsertCatBulkAttributeDblProduct(IntValue, UnitOfMeasure, IntValue, IntUnitOfMeasure, ecoResIntValue)
        #RetailInsertCatBulkAttributeDblProduct(FloatValue, UnitOfMeasure, FloatValue, FloatUnitOfMeasure, ecoResFloatValue)
        #RetailInsertCatBulkAttributeDblProduct(CurrencyValue, CurrencyCode, CurrencyValue, CurrencyCode, ecoResCurrencyValue)

        // attribute group default values
        #RetailInsertCatBulkAttributeGroupDef(BooleanValue, BooleanValue, ecoResBooleanValue)
        #RetailInsertCatBulkAttributeGroupDef(DateTimeValue, DateTimeValue, ecoResDateTimeValue)
        #RetailInsertCatBulkAttributeDblGroupDef(IntValue, UnitOfMeasure, IntValue, IntUnitOfMeasure, ecoResIntValue)
        #RetailInsertCatBulkAttributeDblGroupDef(FloatValue, UnitOfMeasure, FloatValue, FloatUnitOfMeasure, ecoResFloatValue)
        #RetailInsertCatBulkAttributeDblGroupDef(CurrencyValue, CurrencyCode, CurrencyValue, CurrencyCode, ecoResCurrencyValue)

        // default attribute values
        #RetailInsertCatBulkAttributeDefault(BooleanValue, BooleanValue, ecoResBooleanValue)
        #RetailInsertCatBulkAttributeDefault(DateTimeValue, DateTimeValue, ecoResDateTimeValue)
        #RetailInsertCatBulkAttributeDblDefault(IntValue, UnitOfMeasure, IntValue, IntUnitOfMeasure, ecoResIntValue)
        #RetailInsertCatBulkAttributeDblDefault(FloatValue, UnitOfMeasure, FloatValue, FloatUnitOfMeasure, ecoResFloatValue)
        #RetailInsertCatBulkAttributeDblDefault(CurrencyValue, CurrencyCode, CurrencyValue, CurrencyCode, ecoResCurrencyValue)

        if (_catalogRecId)
        {
            // Clean up for this transaction
            delete_from tmpCatProdInternalOrgInstanceVal where tmpCatProdInternalOrgInstanceVal.CreatedTransactionId == currentTransactionId;
        }

        // ********** Setting the StandardAttributeTextValue field ***********
        while select forUpdate retailTmpCatBulkAttrib
            where retailTmpCatBulkAttrib.IsValueSet == NoYes::No
                && ((_internalOrganization == 0
                    && retailTmpCatBulkAttrib.Catalog == _catalogRecId) ||
                    (_catalogRecId == 0
                    && retailTmpCatBulkAttrib.InternalOrganization == _internalOrganization
                    && retailTmpCatBulkAttrib.Catalog == _catalogRecId))
            join ecoResAttributeType
                where ecoResAttributeType.RecId == retailTmpCatBulkAttrib.AttributeType
                    && ecoResAttributeType.DataType == AttributeDataType::Text
            join tmpCatalogProduct
                where tmpCatalogProduct.Catalog == _catalogRecId
                      && tmpCatalogProduct.Product == retailTmpCatBulkAttrib.Product
                      && tmpCatalogProduct.InternalOrg == _internalOrganization
            join StandardAttributeID from retailStandardAttribute
            exists join attributeReference
                where attributeReference.Attribute == retailTmpCatBulkAttrib.Attribute
            join ecoResReferenceValue
                where ecoResReferenceValue.RecId == attributeReference.Value
                   && ecoResReferenceValue.RefTableId == tableNum(EcoResAttribute)
                   && ecoResReferenceValue.RefRecId == retailStandardAttribute.Attribute
        {
            if (hasMultipleLanguage)
            {
                retailTmpCatBulkAttrib.TextValue = RetailAttributeHelper::getStandardAttributeValueTranslation(
                    retailStandardAttribute.StandardAttributeID, tmpCatalogProduct.Product, retailTmpCatBulkAttrib.LanguageId, _internalOrganization, _catalogRecId);
            }
            else
            {
                retailTmpCatBulkAttrib.TextValue = RetailAttributeHelper::getStandardAttributeValue(
                    retailStandardAttribute.StandardAttributeID, tmpCatalogProduct.Product, _internalOrganization, _catalogRecId);
            }

            if (retailTmpCatBulkAttrib.TextValue)
            {
                retailTmpCatBulkAttrib.IsValueSet = NoYes::Yes;
                retailTmpCatBulkAttrib.update();
            }
        }

        defaultCurrency = CompanyInfoHelper::standardCurrency();
        update_recordSet retailTmpCatBulkAttrib
            setting CurrencyCode = defaultCurrency
            where retailTmpCatBulkAttrib.CurrencyCode == ''
        join ecoResAttributeType
            where ecoResAttributeType.RecId == retailTmpCatBulkAttrib.AttributeType
                && ecoResAttributeType.DataType == AttributeDataType::Currency
        ;

        update_recordSet retailTmpCatBulkAttrib
            setting UnitOfMeasure = ecoResAttributeTypeUnitOfMeasure.DefaultUnitOfMeasure
            where retailTmpCatBulkAttrib.UnitOfMeasure == 0
        join ecoResAttributeTypeUnitOfMeasure
            where ecoResAttributeTypeUnitOfMeasure.AttributeType == retailTmpCatBulkAttrib.AttributeType
        ;

        RetailTmpCatBulkAttrib::updateRangeForDataTypes(_catalogRecId, _internalOrganization);
        RetailTmpCatBulkAttrib::updateDataValidationMessage(_catalogRecId, _internalOrganization);
        RetailTmpCatBulkAttrib::updateRichMediaType(_catalogRecId, _internalOrganization);

        RetailTmpCatBulkAttrib::mergeColumns(_catalogRecId, _internalOrganization);

        if (_internalOrganization)
        {
            internalOrgName = DirPartyTable::findRec(RetailInternalOrganization::findByRecId(_internalOrganization).InternalOrganization).Name;

            update_recordSet  retailTmpCatBulkAttrib
                setting InternalOrgName = internalOrgName;
        }

        // Apply user preferred time zone so Excel matches AX form for date time values.
        TimeZone userPreferredTimeZone = DateTimeUtil::getUserPreferredTimeZone();

        while select forUpdate DateTimeValue, TextValue from retailTmpCatBulkAttrib
            join ecoResAttributeType
                where ecoResAttributeType.RecId == retailTmpCatBulkAttrib.AttributeType
                && ecoResAttributeType.DataType == AttributeDataType::DateTime
        {
            dateTimeValue = DateTimeUtil::applyTimeZoneOffset(retailTmpCatBulkAttrib.DateTimeValue, userPreferredTimeZone);
            dateTimeStringValue = DateTimeUtil::toStr(dateTimeValue);
            retailTmpCatBulkAttrib.TextValue = dateTimeStringValue;
            retailTmpCatBulkAttrib.update();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDataValidationMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// update custom validation message based on data type for catalog or internalOrganization
    /// </summary>
    /// <param name="_catalogRecId">
    /// Catalog rec id.
    /// </param>
    /// <param name="_internalOrganization">
    /// InternalOrganization rec id.
    /// </param>
    /// <remarks>
    /// RetailTmpCatBulkAttrib is an intermediate table for excel bulk edit.
    /// </remarks>
    public static void updateDataValidationMessage(RefRecId _catalogRecId, RetailInternalOrgRefRecId _internalOrganization)
    {
        RetailTmpCatBulkAttrib tmpCatBulkAttrib;
        RetailTmpAttribTypeMsg tmpValidationMessage;

        RecordInsertList tmpValidationMessageList;

        EcoResAttributeType ecoResAttributeType;
        EcoResBoundedAttributeTypeValue ecoResBoundedAttributeTypeValue;

        EcoResFloatValue ecoResFloatLowerBound;
        EcoResFloatValue ecoResFloatUpperBound;
        EcoResIntValue ecoResIntLowerBound;
        EcoResIntValue ecoResIntUpperBound;
        EcoResCurrencyValue ecoResCurrencyLowerBound;
        EcoResCurrencyValue ecoResCurrencyUpperBound;
        EcoResDateTimeValue ecoResDateTimeLowerBound;
        EcoResDateTimeValue ecoResDateTimeUpperBound;

        Dictionary dictionary;
        DictType dictType;

        int intMin, intMax, sysIntMin, sysIntMax, currentSessionId, attrTextValueMaxLen;
        utcDateTime sysMinDate, sysMaximumDate, maxDateWithOffset;
        str dateTimeStr;
        Timezone timeZone;

        sysIntMin = intMin();
        sysIntMax = intMax();

        timeZone = DateTimeUtil::getUserPreferredTimeZone();
        sysMinDate = DateTimeUtil::minValue();
        sysMaximumDate = DateTimeUtil::maxValue();

        maxDateWithOffset = DateTimeUtil::applyTimeZoneOffset(sysMaximumDate, timeZone);

        datetimeStr = '1900-01-01T00:00:00';

        currentSessionId = sessionId();

        dictionary = new Dictionary();
        dictType = dictionary.typeObject(dictionary.typeName2Id(extendedTypeStr(AttributeValueText)));
        attrTextValueMaxLen = dictType.stringLen();

        delete_from tmpValidationMessage
            where tmpValidationMessage.SessionId == currentSessionId;

        // insert localized message in table
        tmpValidationMessageList = new RecordInsertList(tableNum(RetailTmpAttribTypeMsg));

        while select RecId, DataType from ecoResAttributeType
                where (ecoResAttributeType.DataType == AttributeDataType::Currency ||
                       ecoResAttributeType.DataType == AttributeDataType::DateTime ||
                       ecoResAttributeType.DataType == AttributeDataType::Decimal ||
                       ecoResAttributeType.DataType == AttributeDataType::Integer)
            outer join AttributeType from ecoResBoundedAttributeTypeValue
                where ecoResBoundedAttributeTypeValue.AttributeType == ecoResAttributeType.RecId
            outer join RecId, FloatValue from ecoResFloatLowerBound
                where ecoResFloatLowerBound.RecId == ecoResBoundedAttributeTypeValue.LowerBound
            outer join RecId, FloatValue from ecoResFloatUpperBound
                where ecoResFloatUpperBound.RecId == ecoResBoundedAttributeTypeValue.UpperBound
            outer join RecId, IntValue from ecoResIntLowerBound
                where ecoResIntLowerBound.RecId == ecoResBoundedAttributeTypeValue.LowerBound
            outer join RecId, IntValue from ecoResIntUpperBound
                where ecoResIntUpperBound.RecId == ecoResBoundedAttributeTypeValue.UpperBound
            outer join RecId, CurrencyValue from ecoResCurrencyLowerBound
                where ecoResCurrencyLowerBound.RecId == ecoResBoundedAttributeTypeValue.LowerBound
            outer join RecId, CurrencyValue from ecoResCurrencyUpperBound
                where ecoResCurrencyUpperBound.RecId == ecoResBoundedAttributeTypeValue.UpperBound
            outer join RecId, DateTimeValue from ecoResDateTimeLowerBound
                where ecoResDateTimeLowerBound.RecId == ecoResBoundedAttributeTypeValue.LowerBound
            outer join RecId, DateTimeValue from ecoResDateTimeUpperBound
                where ecoResDateTimeUpperBound.RecId == ecoResBoundedAttributeTypeValue.UpperBound
            exists join tmpCatBulkAttrib
                where tmpCatBulkAttrib.AttributeType == ecoResAttributeType.RecId
                    && (_internalOrganization == 0
                        && tmpCatBulkAttrib.Catalog == _catalogRecId) ||
                        (_catalogRecId == 0
                        && tmpCatBulkAttrib.InternalOrganization == _internalOrganization
                        && tmpCatBulkAttrib.Catalog == _catalogRecId)
            {
                tmpValidationMessage.SessionId = currentSessionId;
                tmpValidationMessage.AttributeType = ecoResAttributeType.RecId;

                switch (ecoResAttributeType.DataType)
                {
                    case AttributeDataType::Currency:
                        if (ecoResBoundedAttributeTypeValue.RecId)
                        {
                            tmpValidationMessage.ValidationMessage =
                                strFmt("@REX4040066", ecoResCurrencyLowerBound.CurrencyValue, ecoResCurrencyUpperBound.CurrencyValue);
                        }
                        else
                        {
                            tmpValidationMessage.ValidationMessage = "@REX4040067";
                        }
                        break;
                    case AttributeDataType::Decimal:
                        if (ecoResBoundedAttributeTypeValue.RecId)
                        {
                            tmpValidationMessage.ValidationMessage =
                                strFmt("@REX4040068", ecoResFloatLowerBound.FloatValue, ecoResFloatUpperBound.FloatValue);
                        }
                        else
                        {
                            tmpValidationMessage.ValidationMessage = "@REX4040069";
                        }
                        break;
                    case AttributeDataType::Integer:
                        if (ecoResBoundedAttributeTypeValue.RecId)
                        {
                            intMin = ecoResIntLowerBound.IntValue;
                            intMax = ecoResIntUpperBound.IntValue;
                        }
                        else
                        {
                            intMin = sysIntMin;
                            intMax = sysIntMax;
                        }
                        tmpValidationMessage.ValidationMessage = strFmt("@REX4040070", intMin, intMax);
                        break;
                    case AttributeDataType::DateTime:
                        if (ecoResBoundedAttributeTypeValue.RecId)
                        {
                            tmpValidationMessage.ValidationMessage = strFmt(
                                "@REX4040071",
                                DateTimeUtil::toStr(DateTimeUtil::applyTimeZoneOffset(ecoResDateTimeLowerBound.DateTimeValue, timeZone)),
                                DateTimeUtil::toStr(DateTimeUtil::applyTimeZoneOffset(ecoResDateTimeUpperBound.DateTimeValue, timeZone)));
                        }
                        else
                        {
                            tmpValidationMessage.ValidationMessage = strFmt("@REX4040071", datetimeStr, maxDateWithOffset);
                        }

                        break;
            }

            tmpValidationMessageList.add(tmpValidationMessage);
        }

        tmpValidationMessageList.insertDatabase();

        update_recordSet tmpCatBulkAttrib
            setting ValidationMessage = tmpValidationMessage.ValidationMessage
                where (_internalOrganization == 0
                        && tmpCatBulkAttrib.Catalog == _catalogRecId) ||
                        (_catalogRecId == 0
                        && tmpCatBulkAttrib.InternalOrganization == _internalOrganization
                        && tmpCatBulkAttrib.Catalog == _catalogRecId)
            join tmpValidationMessage
                where tmpValidationMessage.AttributeType == tmpCatBulkAttrib.AttributeType
                    && tmpValidationMessage.SessionId == currentSessionId;

        update_recordSet tmpCatBulkAttrib
            setting ValidationMessage = "@REX4040072"
                where (_internalOrganization == 0
                        && tmpCatBulkAttrib.Catalog == _catalogRecId) ||
                        (_catalogRecId == 0
                        && tmpCatBulkAttrib.InternalOrganization == _internalOrganization
                        && tmpCatBulkAttrib.Catalog == _catalogRecId)
                    && tmpCatBulkAttrib.IsEnumeration == NoYes::Yes
            exists join ecoResAttributeType
                where ecoResAttributeType.RecId == tmpCatBulkAttrib.AttributeType
                    && ecoResAttributeType.DataType == AttributeDataType::Text;

        update_recordSet tmpCatBulkAttrib
            setting ValidationMessage = strFmt("@REX4040073", attrTextValueMaxLen)
                where (_internalOrganization == 0
                        && tmpCatBulkAttrib.Catalog == _catalogRecId) ||
                        (_catalogRecId == 0
                        && tmpCatBulkAttrib.InternalOrganization == _internalOrganization
                        && tmpCatBulkAttrib.Catalog == _catalogRecId)
                    && tmpCatBulkAttrib.IsEnumeration == NoYes::No
            exists join ecoResAttributeType
                where ecoResAttributeType.RecId == tmpCatBulkAttrib.AttributeType
                    && ecoResAttributeType.DataType == AttributeDataType::Text;

        str booleanValidationMessage = strFmt("@REX4040074", enum2Str(NoYes::Yes), enum2Str(NoYes::No));
        update_recordSet tmpCatBulkAttrib
            setting ValidationMessage = booleanValidationMessage
                where (_internalOrganization == 0
                        && tmpCatBulkAttrib.Catalog == _catalogRecId) ||
                        (_catalogRecId == 0
                        && tmpCatBulkAttrib.InternalOrganization == _internalOrganization
                        && tmpCatBulkAttrib.Catalog == _catalogRecId)
            exists join ecoResAttributeType
                where ecoResAttributeType.RecId == tmpCatBulkAttrib.AttributeType
                    && ecoResAttributeType.DataType == AttributeDataType::TrueFalse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRangeForDataTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update range of attributes based on data types for catalog or internalOrganization
    /// </summary>
    /// <param name="_catalogRecId">
    /// Catalog rec id.
    /// </param>
    /// <param name="_internalOrganization">
    /// InternalOrganization rec id.
    /// </param>
    /// <remarks>
    /// RetailTmpCatBulkAttrib is an intermediate table for excel bulk edit.
    /// </remarks>

    public static void updateRangeForDataTypes(RefRecId _catalogRecId, RetailInternalOrgRefRecId _internalOrganization)
    {
        RetailTmpCatBulkAttrib tmpCatBulkAttrib;
        RetailTmpAttribTypeEnumList tmpAttribTypeEnumList;

        RetailProdAttributeInternalOrgMetadata retailProdAttributeInternalOrgMetadata;
        RecordInsertList recordInserEnumtList;

        EcoResAttributeType ecoResAttributeType;
        EcoResBoundedAttributeTypeValue range;
        EcoResEnumerationAttributeTypeValue enumValue;

        EcoResFloatValue ecoResFloatValueLowerBound;
        EcoResFloatValue ecoResFloatValueUpperBound;
        EcoResIntValue ecoResIntValueLowerBound;
        EcoResIntValue ecoResIntValueUpperBound;
        EcoResDateTimeValue ecoResDateTimeValueLowerBound;
        EcoResDateTimeValue ecoResDateTimeValueUpperBound;
        EcoResCurrencyValue ecoResCurrencyLowerBound;
        EcoResCurrencyValue ecoResCurrencyUpperBound;
        EcoResTextValue ecoResTextValue;

        int currentSessionId;
        str enumList, replacedValue;
        RecId attrTypeId;
        RecId attrTypePreviousId;
        str attributeTypeName;
        currentSessionId = sessionId();

        // get enum values as comma seperated values

        delete_from tmpAttribTypeEnumList
            where tmpAttribTypeEnumList.SessionId == currentSessionId;

        recordInserEnumtList = new RecordInsertList(tableNum(RetailTmpAttribTypeEnumList));

        while select AttributeType, Value from enumValue
                order by enumValue.AttributeType, enumValue.OrdinalNumber
            join Name from ecoResAttributeType
                where ecoResAttributeType.RecId == enumValue.AttributeType
            join RecId, TextValue from ecoResTextValue
                where ecoResTextValue.RecId == enumValue.Value
            exists join tmpCatBulkAttrib
                where enumValue.AttributeType == tmpCatBulkAttrib.AttributeType
                && (_internalOrganization == 0
                       && tmpCatBulkAttrib.Catalog == _catalogRecId) ||
                   (_catalogRecId == 0
                       && tmpCatBulkAttrib.InternalOrganization == _internalOrganization
                       && tmpCatBulkAttrib.Catalog == _catalogRecId)

        {
            attrTypeId = enumValue.AttributeType;
            attributeTypeName = ecoResAttributeType.Name;
            // if fetched attributeType is equal to previously fetched attribute type then concatenate value
            if (attrTypePreviousId == enumValue.AttributeType)
            {
                // replace comma ',' with fake comma character alt0130
                replacedValue = strReplace(ecoResTextValue.TextValue, #Comma, #FakeComma);
                enumList = enumList + #Comma + replacedValue;
            }
            else
            {
                if (attrTypePreviousId)
                {
                    tmpAttribTypeEnumList.SessionId = currentSessionId;
                    tmpAttribTypeEnumList.AttributeType = attrTypePreviousId;
                    tmpAttribTypeEnumList.TextEnumList = enumList;

                    recordInserEnumtList.add(tmpAttribTypeEnumList);
                }

                // replace comma ',' with fake comma character alt0130
                replacedValue = strReplace(ecoResTextValue.TextValue, ',', '‚');
                enumList = replacedValue;

                attrTypePreviousId = enumValue.AttributeType;
            }
        }

        // update textEnumList
        if (attrTypePreviousId)
        {
            tmpAttribTypeEnumList.SessionId = currentSessionId;
            tmpAttribTypeEnumList.AttributeType = attrTypeId;
            tmpAttribTypeEnumList.TextEnumList = enumList;

            recordInserEnumtList.add(tmpAttribTypeEnumList);
            recordInserEnumtList.insertDatabase();

            update_recordSet tmpCatBulkAttrib
            setting
                IsEnumeration = NoYes::Yes,
                TextEnumList = tmpAttribTypeEnumList.TextEnumList
                where (_internalOrganization == 0
                        && tmpCatBulkAttrib.Catalog == _catalogRecId) ||
                      (_catalogRecId == 0
                        && tmpCatBulkAttrib.InternalOrganization == _internalOrganization
                        && tmpCatBulkAttrib.Catalog == _catalogRecId)
            join AttributeType, TextEnumList from tmpAttribTypeEnumList
                where tmpAttribTypeEnumList.AttributeType == tmpCatBulkAttrib.AttributeType
                    && tmpAttribTypeEnumList.SessionId == currentSessionId;
        }

        // update float lower and upper bound
        update_recordSet tmpCatBulkAttrib
            setting
                FloatLowerBound = ecoResFloatValueLowerBound.FloatValue,
                FloatUpperBound = ecoResFloatValueUpperBound.FloatValue,
                IsBounded = NoYes::Yes
                where (_internalOrganization == 0
                        && tmpCatBulkAttrib.Catalog == _catalogRecId) ||
                      (_catalogRecId == 0
                        && tmpCatBulkAttrib.InternalOrganization == _internalOrganization
                        && tmpCatBulkAttrib.Catalog == _catalogRecId)
            join range
                where range.AttributeType ==  tmpCatBulkAttrib.AttributeType
            join ecoResFloatValueLowerBound
                where ecoResFloatValueLowerBound.RecId == range.LowerBound
            join ecoResFloatValueUpperBound
                where ecoResFloatValueUpperBound.RecId == range.UpperBound;

        // update int lower and upper bound
        update_recordSet tmpCatBulkAttrib
            setting
                IntLowerBound = ecoResIntValueLowerBound.IntValue,
                IntUpperBound = ecoResIntValueUpperBound.IntValue,
                IsBounded = NoYes::Yes
                where (_internalOrganization == 0
                        && tmpCatBulkAttrib.Catalog == _catalogRecId) ||
                      (_catalogRecId == 0
                        && tmpCatBulkAttrib.InternalOrganization == _internalOrganization
                        && tmpCatBulkAttrib.Catalog == _catalogRecId)
            join range
                where range.AttributeType == tmpCatBulkAttrib.AttributeType
            join  ecoResIntValueLowerBound
                where ecoResIntValueLowerBound.RecId == range.LowerBound
            join ecoResIntValueUpperBound
                where ecoResIntValueUpperBound.RecId == range.UpperBound;

        // update datetime lower and upper bound
        update_recordSet tmpCatBulkAttrib
            setting
                DateTimeLowerBound = ecoResDateTimeValueLowerBound.DateTimeValue,
                DateTimeUpperBound = ecoResDateTimeValueUpperBound.DateTimeValue,
                IsBounded = NoYes::Yes
                where (_internalOrganization == 0
                        && tmpCatBulkAttrib.Catalog == _catalogRecId) ||
                      (_catalogRecId == 0
                        && tmpCatBulkAttrib.InternalOrganization == _internalOrganization
                        && tmpCatBulkAttrib.Catalog == _catalogRecId)
            join range
                where range.AttributeType ==  tmpCatBulkAttrib.AttributeType
            join ecoResDateTimeValueLowerBound
                where ecoResDateTimeValueLowerBound.RecId == range.LowerBound
            join ecoResDateTimeValueUpperBound
                where ecoResDateTimeValueUpperBound.RecId == range.UpperBound;

        // update currency lower and upper bound
        update_recordSet tmpCatBulkAttrib
            setting
                CurrencyLowerBound = ecoResCurrencyLowerBound.CurrencyValue,
                CurrencyUpperBound = ecoResCurrencyUpperBound.CurrencyValue,
                IsBounded = NoYes::Yes
                where (_internalOrganization == 0
                        && tmpCatBulkAttrib.Catalog == _catalogRecId) ||
                      (_catalogRecId == 0
                        && tmpCatBulkAttrib.InternalOrganization == _internalOrganization
                        && tmpCatBulkAttrib.Catalog == _catalogRecId)
            join range
                where range.AttributeType ==  tmpCatBulkAttrib.AttributeType
            join ecoResCurrencyLowerBound
                where ecoResCurrencyLowerBound.RecId == range.LowerBound
            join ecoResCurrencyUpperBound
                where ecoResCurrencyUpperBound.RecId ==  range.UpperBound;

        // updating attribute isRequired flag
        update_recordSet tmpCatBulkAttrib
            setting IsRequired = retailProdAttributeInternalOrgMetadata.IsRequired
                where (_internalOrganization == 0
                        && tmpCatBulkAttrib.Catalog == _catalogRecId) ||
                      (_catalogRecId == 0
                        && tmpCatBulkAttrib.InternalOrganization == _internalOrganization
                        && tmpCatBulkAttrib.Catalog == _catalogRecId)
            join Attribute, InternalOrganization, IsRequired from retailProdAttributeInternalOrgMetadata
                where retailProdAttributeInternalOrgMetadata.Attribute == tmpCatBulkAttrib.Attribute
                    && (retailProdAttributeInternalOrgMetadata.InternalOrganization == tmpCatBulkAttrib.InternalOrganization || !tmpCatBulkAttrib.InternalOrganization)
                    && retailProdAttributeInternalOrgMetadata.AttributeRelationType == tmpCatBulkAttrib.AttributeSourceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRichMediaType</Name>
				<Source><![CDATA[
    /// <summary>
    /// update Rich media type for catalog
    /// </summary>
    /// <param name="_catalogRecId">
    /// Catalog rec id.
    /// </param>
    /// <param name="_internalOrganization">
    /// InternalOrganization rec id.
    /// </param>
    /// <remarks>
    /// RetailTmpCatBulkAttrib is an intermediate table for excel bulk edit.
    /// </remarks>
    public static void updateRichMediaType(RefRecId _catalogRecId, RetailInternalOrgRefRecId _internalOrganization)
    {
        RetailTmpCatBulkAttrib tmpCatBulkAttrib;
        RetailSharedParameters retailSharedParameters;

        retailSharedParameters = RetailSharedParameters::find();

        // Remove Image attribute from temp table.
		delete_from tmpCatBulkAttrib
                where ((_internalOrganization == 0
                        && tmpCatBulkAttrib.Catalog == _catalogRecId) ||
                      (_catalogRecId == 0
                        && tmpCatBulkAttrib.InternalOrganization == _internalOrganization
                        && tmpCatBulkAttrib.Catalog == _catalogRecId))
                    && tmpCatBulkAttrib.AttributeType == retailSharedParameters.ImagesAttributeType;

         update_recordSet tmpCatBulkAttrib
            setting RichMediaType = RetailRichMediaType::Videos
                where ((_internalOrganization == 0
                        && tmpCatBulkAttrib.Catalog == _catalogRecId) ||
                      (_catalogRecId == 0
                        && tmpCatBulkAttrib.InternalOrganization == _internalOrganization
                        && tmpCatBulkAttrib.Catalog == _catalogRecId))
                    && tmpCatBulkAttrib.AttributeType == retailSharedParameters.VideosAttributeType;

          update_recordSet tmpCatBulkAttrib
            setting RichMediaType = RetailRichMediaType::Html
                where ((_internalOrganization == 0
                        && tmpCatBulkAttrib.Catalog == _catalogRecId) ||
                      (_catalogRecId == 0
                        && tmpCatBulkAttrib.InternalOrganization == _internalOrganization
                        && tmpCatBulkAttrib.Catalog == _catalogRecId))
                    && tmpCatBulkAttrib.AttributeType == retailSharedParameters.HtmlAttributeType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTextValue4MultiLanguage</Name>
				<Source><![CDATA[
    private static void updateTextValue4MultiLanguage(CatalogRefRecId _catalogRecId
    , RetailInternalOrgRefRecId _internalOrganization
    , utcDatetime _channelHierarchyDateTime
    , CreatedTransactionId _currentTransactionId)
    {
        RetailTmpCatBulkAttrib retailTmpCatBulkAttrib;
        EcoResAttributeGroupAttribute ecoResAttributeGroupAttribute;
        RetailTmpCatProdIntOrgAttribValInherited tmpCatProdIntOrgAttrValInherited;
        EcoResProductInstanceValue ecoResProductInstanceValue;
        EcoResAttributeDefaultValue ecoResAttributeDefaultValue;
        EcoResAttributeValue ecoResAttributeValue;
        EcoResTextValue ecoResTextValue;
        EcoResAttributeDefaultValue attributeReference;
        EcoResReferenceValue ecoResReferenceValue;
        EcoResTextValueTranslation ecoResTextValueTranslation;
        LanguageTable languageTable;
        RetailCatalogProdInternalOrgInstanceVal retailCatalogProdInternalOrgInstanceVal;
        RetailTmpCatProdInternalOrgInstanceVal tmpCatProdInternalOrgInstanceVal;
        RetailTmpIntOrgProdAttribValCollapsed tmpIntOrgProdAttribValCollapsed;
        LanguageId defaultLanguageId = LanguageTable::defaultLanguage();

        #RetailInsertCatBulkAttribText(CatalogProduct, Product);
        #RetailInsertCatBulkAttribText(CatalogProductMaster, ParentProduct);

        // 3.1. product attribute values
        update_recordSet retailTmpCatBulkAttrib
            setting TextValue = ecoResTextValueTranslation.TextValue, IsValueSet = NoYes::Yes
            where retailTmpCatBulkAttrib.IsValueSet == NoYes::No
                && (_internalOrganization == 0
                    && retailTmpCatBulkAttrib.Catalog == _catalogRecId
                    && retailTmpCatBulkAttrib.InternalOrganization == 0) ||
                    (_catalogRecId == 0
                     && retailTmpCatBulkAttrib.InternalOrganization == _internalOrganization
                     && retailTmpCatBulkAttrib.Catalog == _catalogRecId
                     && retailTmpCatBulkAttrib.AttributeSourceType != RetailProductAttributeRelationType::Channel)
        join languageTable
            where languageTable.LanguageId == retailTmpCatBulkAttrib.LanguageId
        join ecoResProductInstanceValue
            where ecoResProductInstanceValue.Product == retailTmpCatBulkAttrib.ParentProduct
        join ecoResAttributeValue
            where ecoResAttributeValue.InstanceValue == ecoResProductInstanceValue.RecId
                && ecoResAttributeValue.Attribute == retailTmpCatBulkAttrib.Attribute
        join ecoResTextValue
            where ecoResAttributeValue.Value == ecoResTextValue.RecId
        join ecoResTextValueTranslation
            where ecoResTextValueTranslation.TextValueTable == EcoResTextValue.RecId
            && ecoResTextValueTranslation.Language == languageTable.LanguageId;

        // 3.2. product attribute values for reference attribute
        update_recordSet retailTmpCatBulkAttrib
            setting TextValue = ecoResTextValueTranslation.TextValue, IsValueSet = NoYes::Yes
                where retailTmpCatBulkAttrib.IsValueSet == NoYes::No
                && (_internalOrganization == 0
                    && retailTmpCatBulkAttrib.Catalog == _catalogRecId
                    && retailTmpCatBulkAttrib.InternalOrganization == 0) ||
                    (_catalogRecId == 0
                     && retailTmpCatBulkAttrib.InternalOrganization == _internalOrganization
                     && retailTmpCatBulkAttrib.Catalog == _catalogRecId
                     && retailTmpCatBulkAttrib.AttributeSourceType != RetailProductAttributeRelationType::Channel)
        join ecoResProductInstanceValue
            where ecoResProductInstanceValue.Product == retailTmpCatBulkAttrib.ParentProduct
        join attributeReference
            where attributeReference.Attribute == retailTmpCatBulkAttrib.Attribute
        join ecoResReferenceValue
            where ecoResReferenceValue.RecId == attributeReference.Value
                && ecoResReferenceValue.RefTableId == tableNum(EcoResAttribute)
        join ecoResAttributeValue
            where ecoResAttributeValue.InstanceValue == ecoResProductInstanceValue.RecId
                && ecoResAttributeValue.Attribute == ecoResReferenceValue.RefRecId
        join ecoResTextValue
            where ecoResAttributeValue.Value == ecoResTextValue.RecId
        join languageTable
            where languageTable.LanguageId == retailTmpCatBulkAttrib.LanguageId
        join ecoResTextValueTranslation
            where ecoResTextValueTranslation.TextValueTable == EcoResTextValue.RecId
                && ecoResTextValueTranslation.Language == languageTable.LanguageId;

        // 3.3. product attribute values: default value (from TextValue) for default language
        update_recordSet retailTmpCatBulkAttrib
            setting TextValue = ecoResTextValue.TextValue, IsValueSet = NoYes::Yes
                where retailTmpCatBulkAttrib.IsValueSet == NoYes::No
                && (_internalOrganization == 0
                    && retailTmpCatBulkAttrib.Catalog == _catalogRecId
                    && retailTmpCatBulkAttrib.InternalOrganization == 0) ||
                    (_catalogRecId == 0
                     && retailTmpCatBulkAttrib.InternalOrganization == _internalOrganization
                     && retailTmpCatBulkAttrib.Catalog == _catalogRecId
                     && retailTmpCatBulkAttrib.AttributeSourceType != RetailProductAttributeRelationType::Channel)
        join languageTable
            where languageTable.LanguageId == retailTmpCatBulkAttrib.LanguageId
                && languageTable.LanguageId == defaultLanguageId
        join ecoResProductInstanceValue
            where ecoResProductInstanceValue.Product == retailTmpCatBulkAttrib.ParentProduct
        join ecoResAttributeValue
            where ecoResAttributeValue.InstanceValue == ecoResProductInstanceValue.RecId
                && ecoResAttributeValue.Attribute == retailTmpCatBulkAttrib.Attribute
        join ecoResTextValue
            where ecoResAttributeValue.Value == ecoResTextValue.RecId;

        // 3.4. product attribute values: default value (from TextValue) for reference attribute for default language
        update_recordSet retailTmpCatBulkAttrib
            setting TextValue = ecoResTextValue.TextValue, IsValueSet = NoYes::Yes
                where retailTmpCatBulkAttrib.IsValueSet == NoYes::No
                && (_internalOrganization == 0
                    && retailTmpCatBulkAttrib.Catalog == _catalogRecId
                    && retailTmpCatBulkAttrib.InternalOrganization == 0) ||
                    (_catalogRecId == 0
                     && retailTmpCatBulkAttrib.InternalOrganization == _internalOrganization
                     && retailTmpCatBulkAttrib.Catalog == _catalogRecId
                     && retailTmpCatBulkAttrib.AttributeSourceType != RetailProductAttributeRelationType::Channel)
        join languageTable
            where languageTable.LanguageId == retailTmpCatBulkAttrib.LanguageId
                && languageTable.LanguageId == defaultLanguageId
        join ecoResProductInstanceValue
            where ecoResProductInstanceValue.Product == retailTmpCatBulkAttrib.ParentProduct
        join attributeReference
            where attributeReference.Attribute == retailTmpCatBulkAttrib.Attribute
        join ecoResReferenceValue
            where ecoResReferenceValue.RecId == attributeReference.Value
                && ecoResReferenceValue.RefTableId == tableNum(EcoResAttribute)
        join ecoResAttributeValue
            where ecoResAttributeValue.InstanceValue == ecoResProductInstanceValue.RecId
                && ecoResAttributeValue.Attribute == ecoResReferenceValue.RefRecId
        join ecoResTextValue
            where ecoResAttributeValue.Value == ecoResTextValue.RecId;

        // 4.1. attribute group default values
        update_recordSet retailTmpCatBulkAttrib
            setting TextValue = ecoResTextValueTranslation.TextValue, IsValueSet = NoYes::Yes
                where retailTmpCatBulkAttrib.IsValueSet == NoYes::No
                && (_internalOrganization == 0
                    && retailTmpCatBulkAttrib.Catalog == _catalogRecId) ||
                    (_catalogRecId == 0
                     && retailTmpCatBulkAttrib.InternalOrganization == _internalOrganization
                     && retailTmpCatBulkAttrib.Catalog == _catalogRecId)
        join ecoResTextValue
        join languageTable
            where languageTable.LanguageId == retailTmpCatBulkAttrib.LanguageId
        join ecoResTextValueTranslation
            where ecoResTextValueTranslation.TextValueTable == EcoResTextValue.RecId
                  && ecoResTextValueTranslation.Language == languageTable.LanguageId
        exists join ecoResAttributeGroupAttribute
            where ecoResAttributeGroupAttribute.RecId == retailTmpCatBulkAttrib.AttributeGroupAttribute
                && ecoResAttributeGroupAttribute.DefaultValue == ecoResTextValue.RecId;

        // 4.2. attribute group default values for reference attribute
        update_recordSet retailTmpCatBulkAttrib
            setting TextValue = ecoResTextValueTranslation.TextValue, IsValueSet = NoYes::Yes
            where retailTmpCatBulkAttrib.IsValueSet == NoYes::No
              && (_internalOrganization == 0
                  && retailTmpCatBulkAttrib.Catalog == _catalogRecId) ||
                  (_catalogRecId == 0
                  && retailTmpCatBulkAttrib.InternalOrganization == _internalOrganization
                  && retailTmpCatBulkAttrib.Catalog == _catalogRecId)
        join ecoResTextValue
        join languageTable
            where languageTable.LanguageId == retailTmpCatBulkAttrib.LanguageId
        join ecoResTextValueTranslation
            where ecoResTextValueTranslation.TextValueTable == EcoResTextValue.RecId
                 && ecoResTextValueTranslation.Language == languageTable.LanguageId
        exists join attributeReference
            where attributeReference.Attribute == retailTmpCatBulkAttrib.Attribute
        join ecoResReferenceValue
            where ecoResReferenceValue.RecId == attributeReference.Value
                && ecoResReferenceValue.RefTableId == tableNum(EcoResAttribute)
        join ecoResAttributeGroupAttribute
            where ecoResAttributeGroupAttribute.RecId == retailTmpCatBulkAttrib.AttributeGroupAttribute
                && ecoResAttributeGroupAttribute.DefaultValue == ecoResTextValue.RecId;

        // 4.3. attribute group default values: default value (from TextValue) for default language
        update_recordSet retailTmpCatBulkAttrib
            setting TextValue = ecoResTextValue.TextValue, IsValueSet = NoYes::Yes
            where retailTmpCatBulkAttrib.IsValueSet == NoYes::No
            && ((_internalOrganization == 0
                && retailTmpCatBulkAttrib.Catalog == _catalogRecId) ||
                (_catalogRecId == 0
                && retailTmpCatBulkAttrib.InternalOrganization == _internalOrganization
                && retailTmpCatBulkAttrib.Catalog == _catalogRecId))
        join languageTable
            where languageTable.LanguageId == retailTmpCatBulkAttrib.LanguageId
                && languageTable.LanguageId == defaultLanguageId
        join ecoResTextValue
        exists join ecoResAttributeGroupAttribute
            where ecoResAttributeGroupAttribute.RecId == retailTmpCatBulkAttrib.AttributeGroupAttribute
                && ecoResAttributeGroupAttribute.DefaultValue == ecoResTextValue.RecId;

        // 4.4. attribute group default values: default value (from TextValue) for reference attribute for default language
        update_recordSet retailTmpCatBulkAttrib
            setting TextValue = ecoResTextValue.TextValue, IsValueSet = NoYes::Yes
            where retailTmpCatBulkAttrib.IsValueSet == NoYes::No
            && ((_internalOrganization == 0
                && retailTmpCatBulkAttrib.Catalog == _catalogRecId) ||
                (_catalogRecId == 0
                && retailTmpCatBulkAttrib.InternalOrganization == _internalOrganization
                && retailTmpCatBulkAttrib.Catalog == _catalogRecId))
        join languageTable
            where languageTable.LanguageId == retailTmpCatBulkAttrib.LanguageId
                && languageTable.LanguageId == defaultLanguageId
        join ecoResTextValue
        exists join attributeReference
            where attributeReference.Attribute == retailTmpCatBulkAttrib.Attribute
        join ecoResReferenceValue
            where ecoResReferenceValue.RecId == attributeReference.Value
                && ecoResReferenceValue.RefTableId == tableNum(EcoResAttribute)
        join ecoResAttributeGroupAttribute
            where ecoResAttributeGroupAttribute.RecId == retailTmpCatBulkAttrib.AttributeGroupAttribute
                && ecoResAttributeGroupAttribute.DefaultValue == ecoResTextValue.RecId;

        // 5.1. attribute default values
        update_recordSet retailTmpCatBulkAttrib
            setting TextValue = ecoResTextValueTranslation.TextValue, IsValueSet = NoYes::Yes
            where retailTmpCatBulkAttrib.IsValueSet == NoYes::No
                && ((_internalOrganization == 0
                    && retailTmpCatBulkAttrib.Catalog == _catalogRecId) ||
                   (_catalogRecId == 0
                    && retailTmpCatBulkAttrib.InternalOrganization == _internalOrganization
                    && retailTmpCatBulkAttrib.Catalog == _catalogRecId))
        join ecoResTextValue
        join languageTable
            where languageTable.LanguageId == retailTmpCatBulkAttrib.LanguageId
        join ecoResTextValueTranslation
            where ecoResTextValueTranslation.TextValueTable == EcoResTextValue.RecId
                && ecoResTextValueTranslation.Language == languageTable.LanguageId
        exists join ecoResAttributeDefaultValue
            where ecoResAttributeDefaultValue.Attribute == retailTmpCatBulkAttrib.Attribute
                && ecoResAttributeDefaultValue.Value == ecoResTextValue.RecId;

        // 5.2. attribute default values for reference attribute
        update_recordSet retailTmpCatBulkAttrib
            setting TextValue = ecoResTextValueTranslation.TextValue, IsValueSet = NoYes::Yes
            where retailTmpCatBulkAttrib.IsValueSet == NoYes::No
                && ((_internalOrganization == 0
                    && retailTmpCatBulkAttrib.Catalog == _catalogRecId) ||
                   (_catalogRecId == 0
                    && retailTmpCatBulkAttrib.InternalOrganization == _internalOrganization
                    && retailTmpCatBulkAttrib.Catalog == _catalogRecId))
        join ecoResTextValue
        join languageTable
            where languageTable.LanguageId == retailTmpCatBulkAttrib.LanguageId
        join ecoResTextValueTranslation
            where ecoResTextValueTranslation.TextValueTable == EcoResTextValue.RecId
                && ecoResTextValueTranslation.Language == languageTable.LanguageId
        exists join attributeReference
            where attributeReference.Attribute == retailTmpCatBulkAttrib.Attribute
        join ecoResReferenceValue
            where ecoResReferenceValue.RecId == attributeReference.Value
                && ecoResReferenceValue.RefTableId == tableNum(EcoResAttribute)
        join ecoResAttributeDefaultValue
            where ecoResAttributeDefaultValue.Attribute == ecoResReferenceValue.RefRecId
                && ecoResAttributeDefaultValue.Value == ecoResTextValue.RecId;

        // 5.3. attribute default values: default value (from TextValue) for default language
        update_recordSet retailTmpCatBulkAttrib
            setting TextValue = ecoResTextValue.TextValue, IsValueSet = NoYes::Yes
            where retailTmpCatBulkAttrib.IsValueSet == NoYes::No
                && ((_internalOrganization == 0
                    && retailTmpCatBulkAttrib.Catalog == _catalogRecId) ||
                   (_catalogRecId == 0
                    && retailTmpCatBulkAttrib.InternalOrganization == _internalOrganization
                    && retailTmpCatBulkAttrib.Catalog == _catalogRecId))
        join languageTable
            where languageTable.LanguageId == retailTmpCatBulkAttrib.LanguageId
                   && languageTable.LanguageId == defaultLanguageId
        join ecoResTextValue
        exists join ecoResAttributeDefaultValue
            where ecoResAttributeDefaultValue.Attribute == retailTmpCatBulkAttrib.Attribute
                && ecoResAttributeDefaultValue.Value == ecoResTextValue.RecId;

        // 5.4. attribute default values: default value (from TextValue) for reference attribute for default language
        update_recordSet retailTmpCatBulkAttrib
            setting TextValue = ecoResTextValue.TextValue, IsValueSet = NoYes::Yes
            where retailTmpCatBulkAttrib.IsValueSet == NoYes::No
                && ((_internalOrganization == 0
                    && retailTmpCatBulkAttrib.Catalog == _catalogRecId) ||
                   (_catalogRecId == 0
                    && retailTmpCatBulkAttrib.InternalOrganization == _internalOrganization
                    && retailTmpCatBulkAttrib.Catalog == _catalogRecId))
        join languageTable
            where languageTable.LanguageId == retailTmpCatBulkAttrib.LanguageId
                && languageTable.LanguageId == defaultLanguageId
        join ecoResTextValue
        exists join attributeReference
            where attributeReference.Attribute == retailTmpCatBulkAttrib.Attribute
        join ecoResReferenceValue
            where ecoResReferenceValue.RecId == attributeReference.Value
                && ecoResReferenceValue.RefTableId == tableNum(EcoResAttribute)
        join ecoResAttributeDefaultValue
            where ecoResAttributeDefaultValue.Attribute == ecoResReferenceValue.RefRecId
                && ecoResAttributeDefaultValue.Value == ecoResTextValue.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@SYP5070035</DeveloperDocumentation>
	<Label>@SYP5070034</Label>
	<TitleField1>Attribute</TitleField1>
	<TitleField2>CatalogProduct</TitleField2>
	<Modules>SystemAdministration</Modules>
	<ReplacementKey>IdentityIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Attribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CatalogName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FloatValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TextValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitOfMeasure</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BooleanValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CatalogProduct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Catalog</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DateTimeValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeSourceName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeSourceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InternalOrganization</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InternalOrgName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeProperty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Attribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FloatValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TextValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitOfMeasure</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IdentityKey</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Attribute</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AttributeGroupAttribute</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AttributeProperty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AttributeProperty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AttributeSourceName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailAttributeSourceName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AttributeSourceType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailProductAttributeRelationType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AttributeType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BooleanValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AttributeValueBoolean</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Catalog</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CatalogRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CatalogName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CatalogName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CatalogProduct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Category</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CurrencyLowerBound</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AttributeValueCurrency</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CurrencyUpperBound</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AttributeValueCurrency</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CurrencyValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AttributeValueCurrency</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>DateTimeLowerBound</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AttributeValueDateTime</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>DateTimeUpperBound</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AttributeValueDateTime</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>DateTimeValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AttributeValueDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FloatLowerBound</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AttributeValueFloat</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FloatUpperBound</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AttributeValueFloat</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FloatValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AttributeValueFloat</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>IdentityKey</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IdentityRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InternalOrganization</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailInternalOrgRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InternalOrgName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DirPartyName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>IntLowerBound</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AttributeValueInt</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>IntUpperBound</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AttributeValueInt</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>IntValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AttributeValueInt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsBounded</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsEnumeration</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsRequired</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AttributeIsRequired</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsValueSet</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LanguageIdAll</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Product</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RichMediaType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>RetailRichMediaType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TextEnumList</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TextEnumList</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TextValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AttributeValueText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>UnitOfMeasure</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS96151</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ValidationMessage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AttributeValueText</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DataType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS1201</Label>
			<Mandatory>Yes</Mandatory>
			<EnumType>AttributeDataType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RawAttributeType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResAttributeTypeRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CatalogProductMaster</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CatalogProductId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ParentProduct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ChannelLanguage</Name>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RetailChannel</Name>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>RetailChannelRecId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProductAttributeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Catalog</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InternalOrganization</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Product</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Attribute</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LanguageId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>IdentityIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>IdentityKey</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CatalogProduct</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CatalogProduct</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CatalogProductMasterIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CatalogProductMaster</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ParentProductIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ParentProduct</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Catalog</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Catalog</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Catalog</Name>
					<Field>Catalog</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CatalogProduct</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CatalogProduct</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CatalogProduct</Name>
					<Field>CatalogProduct</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResAttribute</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EcoResAttribute</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Attribute</Name>
					<Field>Attribute</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResAttributeGroupAttribute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResAttributeGroupAttribute</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AttributeGroupAttribute</Name>
					<Field>AttributeGroupAttribute</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResAttributeType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResAttributeType</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AttributeType</Name>
					<Field>AttributeType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Category</Name>
					<Field>Category</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResProduct</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResProduct</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Product</Name>
					<Field>Product</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InternalOrganization</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailInternalOrganization</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InternalOrganization</Name>
					<Field>InternalOrganization</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LanguageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LanguageTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LanguageId</Name>
					<Field>LanguageId</Field>
					<RelatedField>LanguageId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Key</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitOfMeasure</Name>
					<Field>UnitOfMeasure</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>