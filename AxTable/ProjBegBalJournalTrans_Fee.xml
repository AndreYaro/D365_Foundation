<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBegBalJournalTrans_Fee</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjBegBalJournalTrans_Fee extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the selected category is active and exists in the <c>ProjCategory</c> table.
    /// </summary>
    /// <returns>
    ///    true if the category for the journal line is valid; otherwise, false.
    /// </returns>
    public boolean checkCategoryId()
    {
        boolean         ret = true;
        ProjCategory    projCategory;

        if (this.CategoryId)
        {
            projCategory    = ProjCategory::find(this.CategoryId);

            if (projCategory.CategoryType    != ProjCategoryType::Revenue)
            {
                ret = checkFailed(strFmt("@SYS54897", this.CategoryId));
            }
            ret = ret && projCategory.validateIfInactiveAllowed();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFundingLimits</Name>
				<Source><![CDATA[
    private boolean checkFundingLimits()
    {
        ProjTrans   orginalProjTrans;
        ProjTrans   newProjTrans;
        boolean     retValue = true;

        if (this.orig())
        {
            // Revert the original reservations
            orginalProjTrans = ProjTrans::construct(this.orig());
            if (orginalProjTrans)
            {
                ProjFundingLimitTrackingManager::updateUsingProjTrans(orginalProjTrans, ProjFundingLimitTrackingAction::Release);
            }
        }

        // Check new reservatioons
        newProjTrans = ProjTrans::construct(this);
        if (!ProjFundingEngine::isAmountWithinFundingLimits(newProjTrans, newProjTrans.fundingSource(), newProjTrans.transTurnover()))
        {
            retValue = checkFailed("@SYS344241");
        }

        if (this.orig())
        {
            // Re-instate the original reservations
            if (orginalProjTrans)
            {
                ProjFundingLimitTrackingManager::updateUsingProjTrans(orginalProjTrans, ProjFundingLimitTrackingAction::Allocate);
            }
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the project ID specified for a journal line is valid.
    /// </summary>
    /// <returns>
    ///    true if the project ID is valid; otherwise, false.
    /// </returns>
    public boolean checkProjId()
    {
        boolean ret = true;
        
        if (this.ProjId)
        {
            ProjTable projTableLocal = ProjTable::find(this.ProjId);
            if (!projTableLocal.status().activeInTree())
            {
                ret = checkFailed(strFmt("@Proj:ProjectIsHeaderOrFinished", this.ProjId));
            }

            if (ret && ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
            {
                if (!ProjMultipleContractLinesForProjectFeatureHelper::isTransTypeIncludedByBillingMethod(projTableLocal.ProjId, projTableLocal.ProjInvoiceProjId, ProjTransType::Revenue, ProjContractBillingMethod::TimeMaterial))
                {
                    ret = checkFailed("@Proj:FeeBegBalNotAllowedForProjWithoutTMContractLineForFee");
                }
            }
            else if (ret && projTableLocal.Type != ProjType::TimeMaterial)
            {
                ret = checkFailed(strFmt("@SYS136759", projTableLocal.Type));
            }

            if (ret && !ProjTable::isBegBalRuleDefined(this.ProjId))
            {
                ret = checkFailed(strFmt("@SYS135526", ProjTable::find(this.ProjId).Stage()));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the terminated resource is allowed.
    /// </summary>
    /// <param name="_suppressInfolog">
    /// A Boolean value that indicates whether to show an Infolog; optional.
    /// </param>
    /// <returns>
    /// true if the resource number is valid; otherwise, false.
    /// </returns>
    public boolean checkResource(boolean _suppressInfolog = false)
    {
        boolean ret = true;
	ret = ResourceFacade::validateNotTerminated(this.Resource);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkResourceAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the resource number specified for a journal line is valid.
    /// </summary>
    /// <returns>
    /// true if the resource number is valid; otherwise, false.
    /// </returns>
    private boolean checkResourceAllowed()
    {
        return ProjJournalTrans::checkCategoryResourceOption(this.CategoryId, this.Resource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was created by using the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on the current record.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>
    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this, this.companyInfo().RecId)
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjTransPosting</Name>
				<Source><![CDATA[
    protected ProjTransPosting createProjTransPosting(ProjLedgerPostingLine _line, ProjCostSales _costSales, DebitCredit _debitCredit)
    {
        ProjFundingSource       projFundingSource;
        ProjTransPosting        projTransPosting;
        ProjLedgerUpdate        projLedgerUpdate;

        projTransPosting.ProjTransDate      = this.ProjTransDate;

        projTransPosting.ProjId             = this.ProjId;
        projTransPosting.CategoryId         = this.CategoryId;
        projTransPosting.ProjType           = ProjTable::find(this.ProjId).Type;
        projTransPosting.ProjTransType      = ProjTransType::Revenue;
        projTransPosting.TransId            = this.TransId;
        projTransPosting.TransactionOrigin  = ProjOrigin::BeginningBalance;
        projTransPosting.ProjFundingSource  = this.ProjFundingSource;        
        projTransPosting.Resource           = this.Resource;
        projTransPosting.ResourceCategory   = this.ResourceCategory;

        projTransPosting.CostSales          = _costSales;

        if (_debitCredit == DebitCredit::Credit)
        {
            projTransPosting.AmountMst  = -1 * this.ProjSalesAmount;
        }
        else
        {
            projTransPosting.AmountMst  = this.ProjSalesAmount;
        }

        projTransPosting.LedgerTransDate        = this.TransDate;
        projTransPosting.Voucher                = this.Voucher;
        projTransPosting.PostingType            = _line.parmLedgerPostingType();
        projTransPosting.LedgerOrigin           = ProjOrigin::BeginningBalance;

        projTransPosting.LedgerDimension = _line.parmLedgerAccount();

        projFundingSource = ProjFundingSource::find(this.ProjFundingSource);
        projTransPosting.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(this.DefaultDimension, projFundingSource.DefaultDimension);

        projLedgerUpdate = new ProjLedgerUpdate();
        projLedgerUpdate.setPaymentDateStatus(projTransPosting);

        return projTransPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ProjTrans   projTrans = ProjTrans::construct(this);
        ProjFundingLimitTrackingManager::updateUsingProjTrans(projTrans, ProjFundingLimitTrackingAction::Release);

        super();        
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates a voucher number.
    /// </summary>
    /// <param name="_journalNameId">
    ///    The journal ID associated with the specified record.
    /// </param>
    public void generateVoucher(JournalNameId _journalNameId)
    {
        NumberSeq                   numberSeq;
        NumberSequenceTable         numberSequenceTableVoucher  = ProjJournalName::find(_journalNameId).getNumberSequenceTable();
        ProjBegBalJournalTrans_Fee  projBegBalJournalTrans_Fee;

        select firstonly projBegBalJournalTrans_Fee where projBegBalJournalTrans_Fee.JournalId == this.JournalId;
        if (projBegBalJournalTrans_Fee)
        {
             this.Voucher = projBegBalJournalTrans_Fee.Voucher ;
        }
        else
        {
            numberSeq = NumberSeq::newGetVoucherFromCode(numberSequenceTableVoucher.NumberSequence);
            this.Voucher = numberSeq.voucher();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerPostingLines</Name>
				<Source><![CDATA[
    public ProjLedgerPostingLines getLedgerPostingLines()
    {
        ProjLedgerPostingLines  ret;
        ProjLedgerPostingLine   costDebit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine   costCredit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine   saleDebit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine   saleCredit = ProjLedgerPostingLine::construct(LedgerPostingType::None);

        LedgerPostingType               ledgerPostingType;
        LedgerDimensionDefaultAccount   ledgerAccount;
        ProjTable projTableLocal = ProjTable::find(this.ProjId);

            switch (projTableLocal.Type)
            {
                case ProjType::TimeMaterial:
                    if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Invoiced
                        && this.ProjAccruable               == NoYes::No
                                            && ProjLineProperty::find(this.LinePropertyId).ToBeInvoiced)
                    {
                        costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                        costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                        saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                        saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::ProjTurnover);
                    }

                if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Posted
                    && this.ProjAccruable               == NoYes::No)
                {
                    costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                    costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                    saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                    saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                }

                if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Posted
                    && this.ProjAccruable               == NoYes::Yes
                    && ProjLineProperty::find(this.LinePropertyId).ToBeAccrued == NoYes::Yes)
                {
                    costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                    costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                    saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjSalesvalueOffset);
                    saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::ProjSalesvalue);
                }

                break;

            case ProjType::FixedPrice:
            case ProjType::Investment:
            case ProjType::Internal:
            case ProjType::Cost:
                break;
            case ProjType::None:
                if (projTableLocal.ProjInvoiceProjId && ProjMultipleContractLinesForProjectFeatureHelper::isTransTypeIncludedByBillingMethod(projTableLocal.ProjId, projTableLocal.ProjInvoiceProjId, ProjTransType::Revenue, ProjContractBillingMethod::TimeMaterial))
                {
                    if (this.ProjTransStatusPostedInvoiced == ProjTransStatusPostedInvoiced::Invoiced &&
                        this.ProjAccruable == NoYes::No && ProjLineProperty::find(this.LinePropertyId).ToBeInvoiced)
                    {
                        costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                        costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                        saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                        saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::ProjTurnover);
                    }

                    if (this.ProjTransStatusPostedInvoiced == ProjTransStatusPostedInvoiced::Posted &&
                        this.ProjAccruable == NoYes::No)
                    {
                        costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                        costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                        saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                        saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                    }

                    if (this.ProjTransStatusPostedInvoiced == ProjTransStatusPostedInvoiced::Posted &&
                        this.ProjAccruable == NoYes::Yes && ProjLineProperty::find(this.LinePropertyId).ToBeAccrued == NoYes::Yes)
                    {
                        costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                        costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                        saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjSalesvalueOffset);
                        saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::ProjSalesvalue);
                    }
                }
                break;
        }

        ret = new ProjLedgerPostingLines();

        ret.parmCostCredit(costCredit);
        ret.parmCostDebit(costDebit);
        ret.parmSaleCredit(saleCredit);
        ret.parmSaleDebit(saleDebit);

        if (!ret)
        {
            return ret;
        }

        if (ret.parmCostDebit())
        {
            ledgerPostingType = ret.parmCostDebit().parmLedgerPostingType();
            ledgerAccount = ProjPosting::getLedgerDimensionLedgerPostingType(ledgerPostingType, this.ProjId, this.CategoryId, this.ProjFundingSource);
            ret.parmCostDebit().parmLedgerAccount(ledgerAccount);
        }

        if (ret.parmCostCredit())
        {
            ledgerPostingType = ret.parmCostCredit().parmLedgerPostingType();
            ledgerAccount = ProjPosting::getLedgerDimensionLedgerPostingType(ledgerPostingType, this.ProjId, this.CategoryId, this.ProjFundingSource);
            ret.parmCostCredit().parmLedgerAccount(ledgerAccount);
        }

        if (ret.parmSaleDebit())
        {
            ledgerPostingType = ret.parmSaleDebit().parmLedgerPostingType();
            ledgerAccount = ProjPosting::getLedgerDimensionLedgerPostingType(ledgerPostingType, this.ProjId, this.CategoryId, this.ProjFundingSource);
            ret.parmSaleDebit().parmLedgerAccount(ledgerAccount);
        }

        if (ret.parmSaleCredit())
        {
            ledgerPostingType = ret.parmSaleCredit().parmLedgerPostingType();
            ledgerAccount = ProjPosting::getLedgerDimensionLedgerPostingType(ledgerPostingType, this.ProjId, this.CategoryId, this.ProjFundingSource);
            ret.parmSaleCredit().parmLedgerAccount(ledgerAccount);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBegBalJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the appropriate fields in a beginning balance journal line with the values of the
    ///    corresponding fields of the specified beginning balance journal line.
    /// </summary>
    /// <param name="_projBegBalJournalTrans_Fee">
    ///    The beginning balance journal line to use for initialization.
    /// </param>
    public void initFromBegBalJournalTrans(ProjBegBalJournalTrans_Fee _projBegBalJournalTrans_Fee)
    {
        this.JournalId              = _projBegBalJournalTrans_Fee.JournalId;
        this.LineNum                = _projBegBalJournalTrans_Fee.LineNum;
        this.Voucher                = _projBegBalJournalTrans_Fee.Voucher;

        this.ProjId                 = _projBegBalJournalTrans_Fee.ProjId;
        this.CategoryId             = _projBegBalJournalTrans_Fee.CategoryId;
        this.LinePropertyId         = _projBegBalJournalTrans_Fee.LinePropertyId;

        this.Txt                    = _projBegBalJournalTrans_Fee.Txt;

        this.ProjSalesAmount        = _projBegBalJournalTrans_Fee.ProjSalesAmount;

        this.ProjSalesCurrencyId    = _projBegBalJournalTrans_Fee.ProjSalesCurrencyId;
        this.ProjTaxGroupId         = _projBegBalJournalTrans_Fee.ProjTaxGroupId;
        this.ProjTaxItemGroupId     = _projBegBalJournalTrans_Fee.ProjTaxItemGroupId;

        this.TransDate              = _projBegBalJournalTrans_Fee.TransDate;
        this.ProjTransDate          = _projBegBalJournalTrans_Fee.ProjTransDate;

        this.TransId                = ProjParameters::newTransId();

        this.ProjAccruable          = _projBegBalJournalTrans_Fee.ProjAccruable;
        this.ProjFundingSource      = _projBegBalJournalTrans_Fee.ProjFundingSource;

        this.ProjTransStatusPostedInvoiced = _projBegBalJournalTrans_Fee.ProjTransStatusPostedInvoiced;

        this.ProjTotalRevenue       = _projBegBalJournalTrans_Fee.ProjTotalRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ProjTrans   projTrans;

        if (this.LineNum == 0)
        {
            this.LineNum = ProjBegBalJournalTrans_Fee::nextLineNum(this.JournalId);
        }

        super();

        projTrans = ProjTrans::construct(this);
        ProjFundingLimitTrackingManager::updateUsingProjTrans(projTrans, ProjFundingLimitTrackingAction::Allocate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was previously instantiated with the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when merging.
    /// Additionally, the entity specifier defaulting will be considered.
    /// </remarks>
    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeResourceDimensionDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merges the default dimension for the journal line with worker resource default dimension.
    /// </summary>
    private void mergeResourceDimensionDefault()
    {
        if (this.Resource)
        {
            this.DefaultDimension = this.mergeDimension(ResourceFacade::getDefaultDimension(this.Resource));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        ProjTable           projTable;
        ProjFundingSource   projFundingSource;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ProjBegBalJournalTrans_Fee, ProjTransDate) :
            case fieldNum(ProjBegBalJournalTrans_Fee, ProjSalesCurrencyId) :
                this.setRevenueSalesPrice();
                this.setSalesAmount();
                break;

            case fieldNum(ProjBegBalJournalTrans_Fee, ProjTotalRevenue) :
                this.setSalesAmount();
                break;

            case fieldNum(ProjBegBalJournalTrans_Fee, ProjId):
                projTable = ProjTable::find(this.ProjId);
                this.ProjSalesCurrencyId = projTable.currencyId();
                this.LinePropertyId = '';
                this.setLineProperty();
                this.setRevenueSalesPrice();
                this.setSalesAmount();
                this.ProjFundingSource = 0;
                this.DefaultDimension = projTable.DefaultDimension;
                this.mergeResourceDimensionDefault();

                if (ProjFundingSource::numberOfFundingSources(projTable.ProjInvoiceProjId) == 1)
                {
                    select firstonly RecId from projFundingSource where projFundingSource.ContractId == projTable.ProjInvoiceProjId;
                    this.ProjFundingSource = projFundingSource.RecId;
                    if (!ProjFundingSource::isExternalFunding(this.ProjFundingSource))
                    {
                        this.ProjAccruable = NoYes::No;
                        this.ProjTransStatusPostedInvoiced = ProjTransStatusPostedInvoiced::Posted;
                    }
                }
                break;

            case fieldNum(ProjBegBalJournalTrans_Fee, ProjFundingSource) :
                if (!ProjFundingSource::isExternalFunding(this.ProjFundingSource))
                {
                    this.ProjAccruable = NoYes::No;
                    this.ProjTransStatusPostedInvoiced = ProjTransStatusPostedInvoiced::Posted;
                }
                break;

            case fieldNum(ProjBegBalJournalTrans_Fee, CategoryId):
                this.setRevenueSalesPrice();
                this.setSalesAmount();
                break;

            case fieldNum(ProjBegBalJournalTrans_Fee, Resource):
                this.setResourceCategory();
                this.setRevenueSalesPrice();
                this.setSalesAmount();
                this.setProjectDimensionDefault();
                this.mergeResourceDimensionDefault();
                break;

            case fieldNum(ProjBegBalJournalTrans_Fee, ResourceCategory):
                this.setRevenueSalesPrice();
                this.setSalesAmount();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjLedger</Name>
				<Source><![CDATA[
    private boolean postProjLedger()
    {
        ProjTrans               projTrans;
        ProjTransPosting        projTransPosting;
        ProjLedgerPostingLines  projLedgerPostingLines;
        ProjLedgerPostingLine   line;
        boolean                 ret = false;

        boolean                 postPL;
        boolean                 postWIP;
        boolean                 postPayroll;

        ProjJournalTable        projJournalTable = this.projJournalTable();

        postPL                  = projJournalTable.PostPL;
        postWIP                 = projJournalTable.PostWIP;
        postPayroll             = projJournalTable.PostPayroll;

        projLedgerPostingLines = this.getLedgerPostingLines();

        if (!projLedgerPostingLines)
        {
            return false;
        }

        if (!projLedgerPostingLines.parmCostDebit())
        {
            return false;
        }

        if (!projLedgerPostingLines.parmCostCredit())
        {
            return false;
        }

        if (!projLedgerPostingLines.parmSaleDebit())
        {
            return false;
        }

        if (!projLedgerPostingLines.parmSaleCredit())
        {
            return false;
        }

        if (projLedgerPostingLines.parmCostDebit().parmLedgerPostingType() == LedgerPostingType::None
            && projLedgerPostingLines.parmCostCredit().parmLedgerPostingType() == LedgerPostingType::None
            && projLedgerPostingLines.parmSaleDebit().parmLedgerPostingType() == LedgerPostingType::None
            && projLedgerPostingLines.parmSaleCredit().parmLedgerPostingType() == LedgerPostingType::None)
        {
            throw Global::error(strFmt("@SYS309459", enum2str(ProjTransType::Revenue), this.CategoryId, this.ProjSalesAmount, this.ProjTransDate));
        }

        ttsbegin;
        //Cost debit
        line = projLedgerPostingLines.parmCostDebit();
        line.filter(postPL, postWIP, postPayroll);
        if (line.parmLedgerPostingType() != LedgerPostingType::None)
        {
            projTransPosting = this.createProjTransPosting(line, ProjCostSales::Cost, DebitCredit::Debit);
            projTransPosting.insert();
        }

        //Cost credit
        line = projLedgerPostingLines.parmCostCredit();
        line.filter(postPL, postWIP, postPayroll);
        if (line.parmLedgerPostingType() != LedgerPostingType::None)
        {
            projTransPosting = this.createProjTransPosting(line, ProjCostSales::Cost, DebitCredit::Credit);
            projTransPosting.insert();
        }

        //Sale debit
        line = projLedgerPostingLines.parmSaleDebit();
        line.filter(postPL, postWIP, postPayroll);
        if (line.parmLedgerPostingType() != LedgerPostingType::None)
        {
            projTransPosting = this.createProjTransPosting(line, ProjCostSales::Sales, DebitCredit::Debit);
            projTransPosting.insert();
        }

        //Sale credit
        line = projLedgerPostingLines.parmSaleCredit();
        line.filter(postPL, postWIP, postPayroll);
        if (line.parmLedgerPostingType() != LedgerPostingType::None)
        {
            projTransPosting = this.createProjTransPosting(line, ProjCostSales::Sales, DebitCredit::Credit);
            projTransPosting.insert();
        }

        projTrans = ProjTrans::construct(this);
        ProjFundingLimitTrackingManager::updateUsingProjTrans(projTrans, ProjFundingLimitTrackingAction::Release);
        ProjFundingEngine::updateFundingLimits(ProjTrans::construct(this), this.ProjFundingSource, this.ProjSalesAmount);

        ret = true;
        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates related project transactions.
    /// </summary>
    /// <returns>
    /// true if the posting completes successfully; otherwise, false.
    /// </returns>
    protected boolean postProjTransaction()
    {
        boolean ret = false;

        ttsbegin;

        this.postProjTransaction_ProjRevenueTrans();

        this.postProjTransaction_ProjRevenueTransSale();

        ret = true;

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransaction_ProjRevenueTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>ProjRevenueTrans</c> record.
    /// </summary>
    protected void postProjTransaction_ProjRevenueTrans()
    {
        ProjRevenueTrans projRevenueTrans = this.postProjTransaction_InitializeProjRevenueTrans();

        projRevenueTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransaction_InitializeProjRevenueTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProjRevenueTrans</c> record.
    /// </summary>
    /// <returns>
    /// An initialized <c>ProjRevenueTrans</c> table buffer.
    /// </returns>
    protected ProjRevenueTrans postProjTransaction_InitializeProjRevenueTrans()
    {
        ProjRevenueTrans projRevenueTrans;

        projRevenueTrans.TransDate              = this.ProjTransDate;
        projRevenueTrans.ProjId                 = this.ProjId;
        projRevenueTrans.CategoryId             = this.CategoryId;
        projRevenueTrans.Resource               = this.Resource;
        projRevenueTrans.ResourceCategory       = this.ResourceCategory;

        projRevenueTrans.LinePropertyId         = this.LinePropertyId;
        projRevenueTrans.TransId                = this.TransId;
        projRevenueTrans.TransIdRef             = this.TransId;
        projRevenueTrans.VoucherJournal         = this.Voucher;
        projRevenueTrans.Txt                    = this.Txt;
        projRevenueTrans.TransactionOrigin      = ProjOrigin::BeginningBalance;

        projRevenueTrans.CurrencyId             = this.ProjSalesCurrencyId;
        projRevenueTrans.TaxGroupId             = this.ProjTaxGroupId;
        projRevenueTrans.TaxItemGroupId         = this.ProjTaxItemGroupId;

        // The data entry form does not provide this value. It is assumed to be 1
        projRevenueTrans.Qty                    = 1;
        projRevenueTrans.DefaultDimension       = this.DefaultDimension;

        return projRevenueTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransaction_ProjRevenueTransSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>ProjRevenueTransSale</c> record.
    /// </summary>
    protected void postProjTransaction_ProjRevenueTransSale()
    {
        ProjRevenueTransSale projRevenueTransSale = this.postProjTransaction_InitializeProjRevenueTransSale();

        projRevenueTransSale.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransaction_InitializeProjRevenueTransSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProjRevenueTransSale</c> record.
    /// </summary>
    /// <returns>
    /// An initialized <c>ProjRevenueTransSale</c> table buffer.
    /// </returns>
    protected ProjRevenueTransSale postProjTransaction_InitializeProjRevenueTransSale()
    {
        ProjRevenueTransSale projRevenueTransSale;

        ProjFundingSource projFundingSource = ProjFundingSource::find(this.ProjFundingSource);

        projRevenueTransSale.TransId            = this.TransId;
        projRevenueTransSale.LedgerTransdate    = this.ProjTransDate;
        projRevenueTransSale.LedgerSalesPosted  = this.ProjAccruable;
        if (projRevenueTransSale.LedgerSalesPosted)
        {
            projRevenueTransSale.LedgerSalesAmount  = this.ProjSalesAmount;
        }
        projRevenueTransSale.FundingSource      = this.ProjFundingSource;
        projRevenueTransSale.SalesPrice         = this.ProjTotalRevenue;
        projRevenueTransSale.LineAmount         = this.ProjTotalRevenue;

        if (this.ProjTransStatusPostedInvoiced == ProjTransStatusPostedInvoiced::Invoiced)
        {
            projRevenueTransSale.TransStatus   = ProjTransStatus::Invoiced;
        }
        else if (this.ProjTransStatusPostedInvoiced == ProjTransStatusPostedInvoiced::Posted)
        {
            projRevenueTransSale.TransStatus   = ProjTransStatus::Posted;
        }

        projRevenueTransSale.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(this.DefaultDimension, projFundingSource.DefaultDimension);

        return projRevenueTransSale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTrans</Name>
				<Source><![CDATA[
    public boolean postTrans()
    {
        ProjBudgetTransaction           projBudgetTransaction;
        ProjBudgetTransactionManager    projBudgetTransactionManager;
        boolean ret = false;

        ttsbegin;

        ret = this.postProjLedger();
        ret = ret && this.postProjTransaction();

        if (ret && ProjTable::find(this.ProjId).UseBudgeting)
        {
            projBudgetTransaction = ProjBudgetTransaction::construct(this);
            projBudgetTransactionManager = ProjBudgetTransactionManager::newProjBudgetTransactionManager(projBudgetTransaction);
            projBudgetTransactionManager.parmSupressMessages(true);
            ret = projBudgetTransactionManager.adjustBudget(ProjBudgetAdjustmentType::Decrement);
        }

        if (!ret)
        {
            throw Global::error(strFmt("@SYS309459", enum2str(ProjTransType::Revenue), this.CategoryId, this.ProjSalesAmount, this.ProjTransDate));
        }
        else
        {
            ttscommit;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the project journal that contains the journal line.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to select the record for update; optional.
    /// </param>
    /// <returns>
    ///    The desired project journal.
    /// </returns>
    public ProjJournalTable projJournalTable(boolean _forUpdate = false)
    {
        return ProjJournalTable::find(this.JournalId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTrans</Name>
				<Source><![CDATA[
    public void reverseTrans()
    {
        this.ProjSalesAmount    = this.ProjSalesAmount * -1;
        this.ProjTotalRevenue   = this.ProjTotalRevenue * -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineProperty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the line property of the project journal line.
    /// </summary>
    /// <remarks>
    /// The line property is set to the line property set up in the <c>ProjLinePropertySetup</c> table to
    /// cover the project and category that is associated to the journal line.
    /// </remarks>
    public void setLineProperty()
    {
        if (!this.LinePropertyId || (this.LinePropertyId && this.LinePropertyId != ProjJournalTable::find(this.JournalId).LinePropertyId))
        {
            this.LinePropertyId = ProjLinePropertySetup::findLinePropertyId(this.ProjId, this.CategoryId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjectDimensionDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default dimension for the journal line with the project default dimension.
    /// </summary>
    private void setProjectDimensionDefault()
    {
        if (this.ProjId)
        {
            this.DefaultDimension = ProjTable::find(this.ProjId).DefaultDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setResourceCategory</Name>
				<Source><![CDATA[
    public void setResourceCategory()
    {
        this.ResourceCategory = ResourceFacade::getResourceCategory(this.Resource,
            (this.ProjTransDate ? this.ProjTransDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRevenueSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the Revenue sales price of the specified project journal line.
    /// </summary>
    /// <returns>
    ///    true if the price is found; otherwise, false.
    /// </returns>
    public boolean setRevenueSalesPrice()
    {
        boolean     priceFound = false;

        [this.ProjTotalRevenue, priceFound] = ProjRevenueSalesPrice::findProjRevenueSalesPrice(this.ProjId, this.Resource, this.CategoryId, ProjTable::find(this.ProjId).currencyId(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), '', false, this.ResourceCategory);

        return priceFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesAmount</Name>
				<Source><![CDATA[
    private void setSalesAmount()
    {
        if (this.ProjTotalRevenue && this.ProjTransDate && this.ProjSalesCurrencyId)
        {
            this.ProjSalesAmount = CurrencyExchangeHelper::amountCur2MST(this.ProjTotalRevenue, this.ProjSalesCurrencyId, 0, this.ProjTransDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ProjTrans   projTransOriginal;
        ProjTrans   projTransNew;

        projTransOriginal = ProjTrans::construct(this.orig());
        ProjFundingLimitTrackingManager::updateUsingProjTrans(projTransOriginal, ProjFundingLimitTrackingAction::Release);

        super();

        projTransNew = ProjTrans::construct(this);
        ProjFundingLimitTrackingManager::updateUsingProjTrans(projTransNew, ProjFundingLimitTrackingAction::Allocate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates a specified field.
    /// </summary>
    /// <param name="p1">
    ///    The field ID of the field to validate.
    /// </param>
    /// <returns>
    ///    true if the value of the field is valid; otherwise, false.
    /// </returns>
    public boolean validateField(FieldId p1)
    {
        boolean         ret;

        ret = super(p1);

        switch (p1)
        {
            case fieldNum(ProjBegBalJournalTrans_Fee, ProjId):
                ret = ret && this.checkProjId();
                break;

            case fieldNum(ProjBegBalJournalTrans_Fee, CategoryId):
                ret = ret && this.checkCategoryId();
                break;

            case fieldNum(ProjBegBalJournalTrans_Fee, Resource):
                ret = ret && this.checkResource();
                ret = ret && ResourceFacade::checkResourceIsInCurrentCompany(this.Resource);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the current <c>ProjBegBalJournalTrans_Fee</c> record before it is written to the database.
    /// </summary>
    /// <returns>
    ///    true if the current <c>ProjJournal</c> record is valid; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        ProjValCheckTrans   projValCheckTrans   = new ProjValCheckTrans();
        ProjJournalTable    projJournalTable    = this.projJournalTable();
        boolean             ret;

        ret = super();

        ret = ret && this.checkProjId() && this.checkCategoryId() && this.checkResource();
        ret = ret && ProjJournalTable::exist(this.JournalId);
        if (ret)
        {
            ret = this.checkResourceAllowed();
        }
        if (ret)
        {
            ret = projValCheckTrans.validateMandatory(this);
        }

            if (ret && this.ProjFundingSource && this.ProjId && ProjFundingSource::find(this.ProjFundingSource).ContractId != ProjTable::find(this.ProjId).ProjInvoiceProjId)
            {
                ret = checkFailed("@SYS152804");
            }

        if (ret && this.ProjAccruable && !ProjLineProperty::find(this.LinePropertyId).ToBeAccrued)
        {
            ret = checkFailed("@SYS152819");
        }

            if (ret && this.ProjTransStatusPostedInvoiced == ProjTransStatusPostedInvoiced::Invoiced && !ProjLineProperty::find(this.LinePropertyId).ToBeInvoiced)
            {
                ret = checkFailed("@SYS152821");
            }

        if (ret && this.ProjTransStatusPostedInvoiced == ProjTransStatusPostedInvoiced::Posted && !this.ProjAccruable)
        {
            ret = checkFailed("@SYS309591");
        }

        ret = ret && ResourceFacade::checkResourceIsInCurrentCompany(this.Resource);

        // Validate limits
        ret = ret && this.checkFundingLimits();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified record exists in the <c>ProjBegBalJournalTrans_Fee</c> table, if not,
    ///    an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record.
    /// </param>
    /// <returns>
    ///    true if the record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;

        if (!ProjBegBalJournalTrans_Fee::exist(_recId))
        {
            ret = checkFailed(strFmt(ProjBegBalJournalTrans_Fee::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>ProjBegBalJournalTrans_Fee</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record.
    /// </param>
    /// <returns>
    ///    true if the record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     projBegBalJournalTrans_Fee
                 where
                     projBegBalJournalTrans_Fee.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a specified <c>ProjBegBalJournalTrans_Fee</c> record.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to select the record for update; optional.
    /// </param>
    /// <returns>
    ///    A <c>ProjBegBalJournalTrans_Fee</c> table buffer.
    /// </returns>
    public static ProjBegBalJournalTrans_Fee find(
        RecId _recId,
        boolean                 _forupdate = false)
    {
        ProjBegBalJournalTrans_Fee projBegBalJournalTrans_Fee;

        projBegBalJournalTrans_Fee.selectForUpdate(_forupdate);

        select firstonly
                projBegBalJournalTrans_Fee
            where
                projBegBalJournalTrans_Fee.RecId == _recId;

        return projBegBalJournalTrans_Fee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the message to use when a specific record in the <c>ProjBegBalJournalTrans_Fee</c> table does
    ///    not exist.
    /// </summary>
    /// <returns>
    ///    The message that indicates a record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the next line number for the journal transaction line.
    /// </summary>
    /// <returns>
    /// An integer that indicates the next line number for a new transaction line.
    /// </returns>
    public static LineNum nextLineNum(ProjJournalId _projJournalId)
    {
        ProjBegBalJournalTrans_Fee begBalJournalTrans;

        select maxof(LineNum) from begBalJournalTrans where begBalJournalTrans.JournalId == _projJournalId;

        return begBalJournalTrans.LineNum + 1;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124922</DeveloperDocumentation>
	<Label>@SYS135521</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>ProjId</TitleField1>
	<TitleField2>CategoryId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS80470</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimensions</Name>
			<Label>@SYS80374</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FundingSourceRef</Name>
			<Label>@SYS128116</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjFundingSource</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTotalRevenue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesCurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTaxItemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTransStatusPostedInvoiced</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjAccruable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjJournalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LinePropertyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjAccruable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjAccruable</ExtendedDataType>
			<EnumType>boolean</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjFundingSource</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS128116</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProjSalesAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesAmount</ExtendedDataType>
			<Label>@SYS10074</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjSalesCurrencyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxItemGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxItemGroup</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProjTotalRevenue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesPriceRevenue</ExtendedDataType>
			<Label>@SYS13754</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ProjTransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjTransStatusPostedInvoiced</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjTransStatusPostedInvoiced</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Resource</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ResourceRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ResourceCategory</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ResourceCategoryRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JournalTransDate</ExtendedDataType>
			<Label>@SYS16658</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Txt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransTxt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>ProjWorkerRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VoucherIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjFundingSourceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjFundingSource</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ResourceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjBegBalJournalTrans_Fee</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjSalesCurrencyId</Name>
					<SourceEDT>ProjSalesCurrencyCode</SourceEDT>
					<Field>ProjSalesCurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FundingSource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjFundingSource</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjFundingSource</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjFundingSource_ProjBegBalJournalTrans_Fee</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjFundingSource</Name>
					<Field>ProjFundingSource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategory</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjBegBalJournalTrans_Fee</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryId</Name>
					<SourceEDT>ProjCategoryId</SourceEDT>
					<Field>CategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjJournalTable_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjBegBalJournalTrans_Fee</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalId</Name>
					<SourceEDT>ProjJournalId</SourceEDT>
					<Field>JournalId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>JournalIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>projJournalTxt</Name>
			<EntityRelationshipRole>@SYS124924</EntityRelationshipRole>
			<RelatedTable>ProjJournalTxt</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Txt</Name>
					<Field>Txt</Field>
					<RelatedField>Txt</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjLineProperty</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjBegBalJournalTrans_Fee</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LinePropertyId</Name>
					<SourceEDT>ProjLinePropertyId</SourceEDT>
					<Field>LinePropertyId</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjBegBalJournalTrans_Fee</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Resource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceCategoryView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ResourceCategory</Name>
					<Field>ResourceCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjBegBalJournalTrans_Fee</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxGroupId</Name>
					<SourceEDT>ProjTaxGroup</SourceEDT>
					<Field>ProjTaxGroupId</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxItemGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjBegBalJournalTrans_Fee</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxItemGroupId</Name>
					<SourceEDT>ProjTaxItemGroup</SourceEDT>
					<Field>ProjTaxItemGroupId</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ResResourceIdentifier</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>