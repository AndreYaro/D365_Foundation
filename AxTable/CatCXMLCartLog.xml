<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatCXMLCartLog</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CatCXMLCartLog extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>extractSupplierAux</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extract the supplier auxiliary container
    /// </summary>
    /// <param name = "_punchOut">
    /// An instance of <c>CatPunchoutRequestRecId</c> data type
    /// </param>
    /// <returns>
    /// An instance of <c>container</c> data type
    /// </returns>
    static container extractSupplierAux(CatPunchoutRequestRecId _punchOut)
    {
        CatCXMLCartLog      cartLog;
        XmlDocument         xmlDoc;
        ItemId              prodId;
        PurchSupplierAuxId  supplierPartAuxiliaryId;
        container           supplierAuxIdCont;

        select firstonly * from cartLog
            where cartLog.PunchOutRequest == _punchOut;

        xmlDoc = new XmlDocument();
        xmlDoc.loadXml(cartLog.cXMLCartEdit(false, ''));

        supplierPartAuxiliaryId = '';
        
        System.Exception exception;
        try
        {
            XmlNodeList punchOutOrderMessageNodeChildNodes = xmlDoc.selectSingleNode('descendant::PunchOutOrderMessage').childNodes();
            int  punchOutOrderMessageNodeChildNodesElements =  punchOutOrderMessageNodeChildNodes.length();

            for (int i = 0; i < punchOutOrderMessageNodeChildNodesElements; i++)
            {
                XmlNode childNode= punchOutOrderMessageNodeChildNodes.item(i);
            
                if (childNode.name() == 'ItemIn')
                {
                    XmlNamedNodeMap childNodeAttributes = childNode.attributes();
                    XmlNodeList itemInNodeChildNodes = childNode.childNodes();
                    int itemInNodeChildNodesItem = itemInNodeChildNodes.length();

                    for (int j = 0; j < itemInNodeChildNodesItem; j++)
                    {
                        XmlNode innerChildNode = itemInNodeChildNodes.item(j);
              
                        if (innerChildNode.name() == 'ItemID')
                        {
                            prodId = innerChildNode.selectSingleNode('descendant::SupplierPartID').innerText();

                            //Process the Aux as a separate method. Some vendors might not include this field and hence the xml won't find it and fail
                            //so want to continue if this vendor doesn't include.
                            supplierPartAuxiliaryId = CatCXMLCartLog::processAuxID(innerChildNode);
                            supplierAuxIdCont = conPoke(supplierAuxIdCont,i,supplierPartAuxiliaryId);
                        }
                    }
                }
            }
        }
        catch(exception)
        {
            throw error(strFmt("@SCM:CXMLParseError", exception.Message));
        }

        return supplierAuxIdCont;

    }

]]></Source>
			</Method>
			<Method>
				<Name>processAuxID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the auxiliary ID
    /// </summary>
    /// <param name = "innerChildNode">
    /// An instance of <c>XmlNode</c> data type
    /// </param>
    /// <returns>
    /// The Supplier part Aux ID
    /// </returns>
    private static PurchSupplierAuxId processAuxID(XmlNode innerChildNode)
    {
        PurchSupplierAuxId supplierPartAuxiliaryId = '';

        System.Exception exception;
        try
        {
            XmlNode auxIdNode = innerChildNode.selectSingleNode('descendant::SupplierPartAuxiliaryID');
            if (auxIdNode)
            {
                supplierPartAuxiliaryId = auxIdNode.innerText();
            }
        }
        catch(exception)
        {
            throw error(strFmt("@SCM:CXMLParseError", exception.Message));
        }

        return supplierPartAuxiliaryId;

    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the specified record in the <c>CatCXMLCartLog</c> table
    /// </summary>
    /// <param name = "_requestId">
    /// The punchout request ID
    /// </param>
    /// <param name = "_forUpdate">
    /// An instance of the <c>boolean</c> data type
    /// </param>
    /// <returns>
    /// An instance of the <c>CatCXMLCartLog</c> data type
    /// </returns>
    static CatCXMLCartLog find(CatPunchoutRequestRecId _requestId, boolean _forUpdate = false)
    {
        CatCXMLCartLog catCXMLCartLog;

        if(_requestId)
        {
            catCXMLCartLog.selectForUpdate(_forUpdate);

            select firstOnly catCXMLCartLog
            where catCXMLCartLog.PunchOutRequest == _requestId;

        }

        return catCXMLCartLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts <c>CatCXMLCartLog</c> record.
    /// </summary>
    [Wrappable(false)]
    public void insert()
    {
        Global::handleEncryptedTablePreInsert(this);
        super();
        Global::handleEncryptedTablePostInsert(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>CatCXMLCartLog</c> record.
    /// </summary>
    [Wrappable(false)]
    public void update()
    {
        Global::handleEncryptedTablePreUpdate(this);
        super();
        Global::handleEncryptedTablePostUpdate(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cXMLCartEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to encrypt or decrypt the PunchOutOrderMessage.
    /// </summary>
    /// <param name = "_set">Indicates whether to encrypt or decrypt the field True = encrypt and False = decrypt</param>
    /// <param name = "_value">The value to encrypt.</param>
    /// <returns>The decrypted value of the field.</returns>
    public edit CXMLCart cXMLCartEdit(boolean _set, str _value)
    {
        return Global::editEncryptedStringField(this, _value, fieldNum(CatCXMLCartLog, CXMLCart), _set);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cXMLPunchOutTraceEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to encrypt or decrypt the PunchOut trace.
    /// </summary>
    /// <param name = "_set">Indicates whether to encrypt or decrypt the field True = encrypt and False = decrypt</param>
    /// <param name = "_value">The value to encrypt.</param>
    /// <returns>The decrypted value of the field.</returns>
    public edit CXMLPunchOutTrace cXMLPunchOutTraceEdit(boolean _set, str _value)
    {
        return Global::editEncryptedStringField(this, _value, fieldNum(CatCXMLCartLog, CXMLPunchOutTrace), _set);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cXMLSetupRequestEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to encrypt or decrypt the PunchOutSetupRequest.
    /// </summary>
    /// <param name = "_set">Indicates whether to encrypt or decrypt the field True = encrypt and False = decrypt</param>
    /// <param name = "_value">The value to encrypt.</param>
    /// <returns>The decrypted value of the field.</returns>
    public edit CXMLSetupRequest cXMLSetupRequestEdit(boolean _set, str _value)
    {
        return Global::editEncryptedStringField(this, _value, fieldNum(CatCXMLCartLog, CXMLSetupRequest), _set);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cXMLSetupResponseEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to encrypt or decrypt the PunchOutSetupResponse.
    /// </summary>
    /// <param name = "_set">Indicates whether to encrypt or decrypt the field True = encrypt and False = decrypt</param>
    /// <param name = "_value">The value to encrypt.</param>
    /// <returns>The decrypted value of the field.</returns>
    public edit CXMLSetupResponse cXMLSetupResponseEdit(boolean _set, str _value)
    {
        return Global::editEncryptedStringField(this, _value, fieldNum(CatCXMLCartLog, CXMLSetupResponse), _set);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ProcCatalog</ConfigurationKey>
	<Label>@CXM:CatCXMLCartLog</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Worksheet</TableGroup>
	<TitleField1>ExternalCatalog</TitleField1>
	<TitleField2>PurchReqTable</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProcurementAndSourcing</Modules>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CatCXMLCartLines</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CatCXMLCartLines</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CXMLCart</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CXMLCart</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExternalCatalog</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CatExternalCatalogRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchReqTable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReqRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>PunchOutID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CatCXMLPunchoutId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchReqId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReqId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PunchOutRequest</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CatPunchoutRequestRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CXMLSetupRequest</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CXMLSetupRequest</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CXMLSetupResponse</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CXMLSetupResponse</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Requisitioner</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReqRequesterRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Originator</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReqPreparerRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>PunchOutTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReqDateTime</ExtendedDataType>
			<Label>@CXM:PunchOutTime</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CXMLPunchOutTrace</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CXMLPunchOutTrace</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ExternalCatalogIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ExternalCatalog</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PurchReqTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PunchOutIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PunchOutID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PunchOutRequestIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PunchOutRequest</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CatExternalCatalog</Name>
			<RelatedTable>CatExternalCatalog</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExternalCatalog</Name>
					<Field>ExternalCatalog</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CatPunchoutRequest</Name>
			<RelatedTable>CatPunchoutRequest</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PunchOutRequest</Name>
					<Field>PunchOutRequest</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Requisitioner</Name>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Requisitioner</Name>
					<Field>Requisitioner</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Originator</Name>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Originator</Name>
					<Field>Originator</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>