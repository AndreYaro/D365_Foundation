<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTillLayoutLegacy</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailTillLayoutLegacy extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailTillLayoutLegacy</c> table by using the specified
    /// <c>layoutId</c> value.
    /// </summary>
    /// <param name="_layoutId">
    /// The ID value.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailTillLayoutLegacy</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailTillLayoutLegacy find(RetailLayoutId _layoutId, boolean _forUpdate = false)
    {
        RetailTillLayoutLegacy tillLayout;

        if (_layoutId)
        {
            tillLayout.selectForUpdate(_forUpdate);

            select firstonly tillLayout
                where tillLayout.layoutId == _layoutId;
        }

        return tillLayout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByConfigurationLayoutSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailTillLayoutLegacy</c> table mapped for the specified <c>RetailTillLayoutConfiguration</c>.
    /// </summary>
    /// <param name = "_retailTillLayoutConfiguration">The record to match based upon the LayoutId and SizeId.</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>A record in the <c>RetailTillLayoutLegacy</c> table; otherwise, an empty record.</returns>
    public static RetailTillLayoutLegacy findByConfigurationLayoutSize(RetailTillLayoutConfiguration _retailTillLayoutConfiguration, boolean _forUpdate = false)
    {
        RetailTillLayoutLegacy tillLayout;

        if (_retailTillLayoutConfiguration.RecId != 0)
        {
            tillLayout.selectForUpdate(_forUpdate);

            select firstonly tillLayout
                where 
                ((tillLayout.ConfiguraitonLayoutId == _retailTillLayoutConfiguration.LayoutId) && (tillLayout.ConfigurationSizeId == _retailTillLayoutConfiguration.SizeId));
        }

        return tillLayout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RandomLayoutId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate a random <c>RetailLayoutId</c> that is prefixed with and underscore ('_').
    /// </summary>
    /// <returns>The random string.</returns>
    private static str RandomLayoutId()
    {
        int i;
        RandomGenerate rand = new RandomGenerate();
        str result;
        int length = 10;

        // Prefix generated IDs with '_'
        result = '_';
        length -= 1;

        for (i = 1; i <= length; i++)
        {
            result += num2Char(rand.randomInt(char2Num('a',1), char2Num('z', 1)));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GenerateLayoutId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the LayoutId if only 1 related size record; otherwise, generate a new one for the other sizes
    /// </summary>
    /// <param name = "retailTillLayoutConfiguration">RetailTillLayoutConfiguration</param>
    /// <returns>The <c>RetailLayoutId</c>.</returns>
    private static RetailLayoutId GenerateLayoutId(RetailTillLayoutConfiguration retailTillLayoutConfiguration)
    {
        RetailTillLayoutLegacy retailTillLayoutLegacy;
        RetailLayoutId result = retailTillLayoutConfiguration.LayoutId;

        while select retailTillLayoutLegacy 
            where retailTillLayoutLegacy.layoutId == result
        {
            // The layout ID is already taken - try to find a unique alternative
            result = RetailTillLayoutLegacy::RandomLayoutId();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purgeObsoleteRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Purge the records that no longer have valid references
    /// </summary>
    /// <returns>Number of records purged.</returns>
    private static int64 purgeObsoleteRecords()
    {
        RetailTillLayoutLegacy retailTillLayoutLegacy;
        RetailTillLayoutConfiguration retailTillLayoutConfiguraiton;

        int64 deleteCount = 0;

        while select forupdate retailTillLayoutLegacy
            outer join retailTillLayoutConfiguraiton where 
                ((retailTillLayoutLegacy.ConfiguraitonLayoutId == retailTillLayoutConfiguraiton.LayoutId) && 
                (retailTillLayoutLegacy.ConfigurationSizeId == retailTillLayoutConfiguraiton.SizeId))
        {
            if (retailTillLayoutConfiguraiton.RecId == 0)
            {
                retailTillLayoutLegacy.delete();
                deleteCount += 1;
            }
        }

        return deleteCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateDowngradeData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicate data into <c>RetailTillLayout</c> for AX2012 "downgrade" N-1 compatiblity.
    /// </summary>
    /// <returns>Number of records updated.</returns>
    public static int64 duplicateDowngradeData()
    {
        RetailTillLayoutLegacy retailTillLayoutLegacy;
        RetailTillLayout retailTillLayout;
        RetailTillLayoutConfiguration retailTillLayoutConfiguration;
        RetailTillLayoutSize retailTillLayoutSize;
        RetailLayoutId layoutId;
        RetailDeviceTypes eposDevice;
        RetailDeviceTypes mposDevice;

        int64 updateCount = 0;

        if (isConfigurationkeyEnabled(configurationKeyNum(RetailCDXBackwardCompatibility)))
        {   // This feature is only enabled for N-1 AX2012 legacy support

            eposDevice = RetailDeviceTypes::find(RetailDeviceTypeBase::EnterprisePOS);
            mposDevice = RetailDeviceTypes::find(RetailDeviceTypeBase::ModernPOS);

            ttsbegin;

            while select retailTillLayoutConfiguration
                order by retailTillLayoutConfiguration.LayoutId
                join retailTillLayoutSize
                where retailTillLayoutConfiguration.SizeId == retailTillLayoutSize.LayoutSizeId
            {
                retailTillLayout = RetailTillLayout::find(retailTillLayoutConfiguration.LayoutId, true);

                if (retailTillLayout.RecId && retailTillLayoutSize.RecId)
                {   // We have valid data

                    // Find (if exit) matching record to update
                    retailTillLayoutLegacy = RetailTillLayoutLegacy::findByConfigurationLayoutSize(RetailTillLayoutConfiguration, true);

                    // Copy data from retailTillLayout
                    if (retailTillLayoutSize.LayoutType == RetailLayoutType::EPOS)
                    {   // If layoutType is EPOS - provide explict mapping to Devicetype for EnterprisePOS
                        retailTillLayoutLegacy.DeviceType = eposDevice.RecId;
                    }
                    else
                    {   // Otherise use mapping provided
                        retailTillLayoutLegacy.DeviceType = mposDevice.RecId;
                    }
                    retailTillLayoutLegacy.name = retailTillLayout.name;
                    retailTillLayoutLegacy.StartScreen = retailTillLayout.StartScreen;

                    // Copy data from retailTillLayoutConfiguration
                    retailTillLayoutLegacy.CashChangerLayoutXML = retailTillLayoutConfiguration.CashChangerLayout;
                    retailTillLayoutLegacy.customerLayoutId = retailTillLayoutConfiguration.customerLayoutId;
                    retailTillLayoutLegacy.CustomerLayoutXML = retailTillLayoutConfiguration.CustomerLayout;
                    retailTillLayoutLegacy.IMG_CashChangerLayoutXML = retailTillLayoutConfiguration.IMG_CashChangerLayout;
                    retailTillLayoutLegacy.layoutXML = retailTillLayoutConfiguration.LayoutLandscape;
                    retailTillLayoutLegacy.receiptId = retailTillLayoutConfiguration.receiptId;
                    retailTillLayoutLegacy.ReceiptItemsLayoutXML = retailTillLayoutConfiguration.ReceiptItemsLayout;
                    retailTillLayoutLegacy.ReceiptPaymentLayoutXML = retailTillLayoutConfiguration.ReceiptPaymentLayout;
                    retailTillLayoutLegacy.totalId = retailTillLayoutConfiguration.totalId;
                    retailTillLayoutLegacy.TotalsLayoutXML = retailTillLayoutConfiguration.TotalsLayout;
                    retailTillLayoutLegacy.layoutXMLPortrait = retailTillLayoutConfiguration.LayoutPortrait;

                    // Copy data from retailTillLayoutSize
                    retailTillLayoutLegacy.height = retailTillLayoutSize.Height;
                    retailTillLayoutLegacy.width = retailTillLayoutSize.Width;

                    if (retailTillLayoutLegacy.RecId)
                    {   // Pre-existing record - needs to be updated
                        retailTillLayoutLegacy.update();
                    }
                    else
                    {   // New record - needs to be created

                        // Set Master data
                        retailTillLayoutLegacy.layoutId = RetailTillLayoutLegacy::GenerateLayoutId(RetailTillLayoutConfiguration);
                        retailTillLayoutLegacy.ConfiguraitonLayoutId = retailTillLayoutConfiguration.LayoutId;
                        retailTillLayoutLegacy.ConfigurationSizeId = retailTillLayoutConfiguration.SizeId;
                    
                        retailTillLayoutLegacy.insert();
                    }

                    updateCount += 1;
                }
            }

            // NOTE: For N-1 w do not support changing Register LayoutId to groups.  If we did, then we would need to 
            // consider make sure exactly 1 entry for each group has the original LayoutId
            // This may happen if the LayoutId size is deleted while the group remains with the random generated Ids...

            RetailTillLayoutLegacy::purgeObsoleteRecords();
 
            ttscommit;
        }

        return updateCount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>RetailCDXBackwardCompatibility</ConfigurationKey>
	<DeveloperDocumentation>@RET6121</DeveloperDocumentation>
	<FormRef>RetailTillLayout</FormRef>
	<Label>@RET2346</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>layoutId</TitleField1>
	<TitleField2>name</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>LayoutIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>BrickAndMortarStore</Modules>
	<PrimaryIndex>LayoutIdx</PrimaryIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>receiptId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>totalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>customerLayoutId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>layoutXML</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashChangerLayoutXML</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalsLayoutXML</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiptPaymentLayoutXML</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiptItemsLayoutXML</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerLayoutXML</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>layoutId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>layoutXMLPortrait</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS7576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DetailsHeader</Name>
			<Label>@SYS318405</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>layoutId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeviceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>height</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>width</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>layoutId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Resolution</Name>
			<Label>@RET2355</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>width</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>height</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SelectedItem</Name>
			<Label>@SYS27573</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>layoutId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLayoutId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CashChangerLayoutXML</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Notes</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>customerLayoutId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCustomerLayoutId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomerLayoutXML</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLayoutXML</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeviceType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>height</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailHeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>IMG_CashChangerLayoutXML</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Bitmap</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>layoutXML</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLayoutXML</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailNameEx5</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>receiptId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailReceiptIdEx5</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReceiptItemsLayoutXML</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLayoutXML</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReceiptPaymentLayoutXML</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLayoutXML</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>totalId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTotalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TotalsLayoutXML</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLayoutXML</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>width</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailWidth</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>layoutXMLPortrait</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLayoutXML</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StartScreen</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Retail:DefaultStartScreenLabel</Label>
			<EnumType>RetailStartScreen</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConfiguraitonLayoutId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLayoutId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConfigurationSizeId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLayoutSizeId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LayoutIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>layoutId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ConfigurationLayoutSizeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ConfiguraitonLayoutId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ConfigurationSizeId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailDeviceTypes</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>RetailDeviceTypes</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeviceType</Name>
					<Field>DeviceType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailTillLayoutConfiguration</Name>
			<RelatedTable>RetailTillLayoutConfiguration</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ConfigurationLayoutId</Name>
					<Field>ConfiguraitonLayoutId</Field>
					<RelatedField>LayoutId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ConfigurationSizeId</Name>
					<Field>ConfigurationSizeId</Field>
					<RelatedField>SizeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>