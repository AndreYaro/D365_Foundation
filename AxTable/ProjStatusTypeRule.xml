<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjStatusTypeRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjStatusTypeRule extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (this.ProjStatusRule == ProjStatusRule::AllowUse)
            {
                if (this.ProjStatus == ProjStatus::Completed)
                {
                    ret = checkFailed(strfmt("@SYS106511", ProjStatus::Completed));
                }
                else if (this.shouldCheckForProjectStageRule())
                {
                    if (this.findCountProjStatusTypeRule() == 1)
                    {
                        ret = checkFailed(this.getCountProjStatusTypeRuleErrorMessage());
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountProjStatusTypeRuleErrorMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the error message for the <c>ProjStatusTypeRule</c> record count check.
    /// </summary>
    /// <returns>
    /// A string.
    /// </returns>
    protected SysInfoLogStr getCountProjStatusTypeRuleErrorMessage()
    {
        return strfmt("@SYS106512", ProjStatus::InProcess, ProjStatus::User1, ProjStatus::User2, ProjStatus::User3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCountProjStatusTypeRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the count of <c>ProjStatusTypeRule</c> records.
    /// </summary>
    /// <returns>
    /// The count of <c>ProjStatusTypeRule</c> records.
    /// </returns>
    protected RecId findCountProjStatusTypeRule()
    {
        ProjStatusTypeRule projStatusTypeRule;

        select count(RecId)
                    from projStatusTypeRule
                    where  (projStatusTypeRule.ProjStatus       == ProjStatus::InProcess ||
                            projStatusTypeRule.ProjStatus       == ProjStatus::User1 ||
                            projStatusTypeRule.ProjStatus       == ProjStatus::User2 ||
                            projStatusTypeRule.ProjStatus       == ProjStatus::User3) &&
                            projStatusTypeRule.ProjType         == this.ProjType &&
                            projStatusTypeRule.ProjStatusRule   == ProjStatusRule::AllowUse;

        return projStatusTypeRule.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCheckForProjectStageRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>ProjStatusTypeRule</c> records should be attempted to be found.
    /// </summary>
    /// <returns>
    /// true if the <c>ProjStatusTypeRule</c> records should be attempted to be found; otherwise, false.
    /// </returns>
    protected boolean shouldCheckForProjectStageRule()
    {
        return this.ProjStatus == ProjStatus::InProcess ||
                this.ProjStatus == ProjStatus::User1 ||
                this.ProjStatus == ProjStatus::User2 ||
                this.ProjStatus == ProjStatus::User3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStatus</Name>
				<Source><![CDATA[
    public static boolean checkStatus(ProjType _type, ProjStatus _status)
    {
        return ProjStatusTypeRule::exist(_status, _type, ProjStatusRule::AllowUse);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStatusNext</Name>
				<Source><![CDATA[
    public static boolean checkStatusNext(ProjType _type, ProjStatus _oldStatus, ProjStatus _newStatus)
    {
        return (_newStatus == ProjStatusTypeRule::nextStage(_type, _oldStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStatusPrev</Name>
				<Source><![CDATA[
    public static boolean checkStatusPrev(ProjType _type, ProjStatus _oldStatus, ProjStatus _newStatus)
    {
        return (_newStatus == ProjStatusTypeRule::prevStage(_type, _oldStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables default project stages for all project types.
    /// </summary>
    static public void createDefaultData()
    {
        Counter     i;
        DictEnum    dictEnum = new DictEnum(enumnum(ProjType));
        ProjType    projType;

        // Enable stage In process for all project types and Finished for all except Time
        for (i = 0; i < dictEnum.values(); i++)
        {
            projType = dictEnum.index2Value(i);
            ProjStatusTypeRule::enableRule(ProjStatus::InProcess, projType, ProjStatusRule::AllowUse, true);
            if (!ProjStatusTypeRule::checkProjTypeIsTime(projType))
            {
                ProjStatusTypeRule::enableRule(ProjStatus::Completed, projType, ProjStatusRule::AllowUse, true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjTypeIsTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Check if the project type is of type time.
    /// </summary>
    /// <param name = "_projType">
    ///     An instance of <c>ProjType</c>.
    /// </param>
    /// <returns>
    ///     true if the project type is time; otherwise, false.
    /// </returns>
    protected static boolean checkProjTypeIsTime(ProjType _projType)
    {
        return _projType == ProjType::Time;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableAllAllowedRules</Name>
				<Source><![CDATA[
    //enables all rules that are allowed for a given project status and type
    protected static void enableAllAllowedRules(ProjStatus _projStatus, ProjType _projType)
    {
        if (_projStatus != ProjStatus::Completed)
        {
            ProjStatusTypeRule::enableRule(_projStatus, _projType, ProjStatusRule::CreateForecast, true);
        }

        if (_projStatus != ProjStatus::Completed &&
            (_projType == ProjType::TimeMaterial || _projType == ProjType::FixedPrice || _projType == ProjType::None))
        {
            ProjStatusTypeRule::enableRule(_projStatus, _projType, ProjStatusRule::CreateQuotation, true);
        }

        if (_projStatus != ProjStatus::Completed && _projStatus != ProjStatus::Created &&
            (_projType == ProjType::FixedPrice || _projType == ProjType::Investment || _projType == ProjType::None))
        {
            ProjStatusTypeRule::enableRule(_projStatus, _projType, ProjStatusRule::CreateEstimate, true);
        }

        if (ProjStatusTypeRule::shouldEnableRuleForProjStatus(_projStatus, _projType) && (_projType != ProjType::Time))
        {
            ProjStatusTypeRule::enableRule(_projStatus, _projType, ProjStatusRule::CreateItemTask, true);
        }

        if (ProjStatusTypeRule::shouldEnableRuleForProjStatus(_projStatus, _projType))
        {
            ProjStatusTypeRule::enableRule(_projStatus, _projType, ProjStatusRule::CreateJournal, true);
        }

        if (ProjStatusTypeRule::shouldEnableRuleForProjStatus(_projStatus, _projType) &&
            (_projType == ProjType::TimeMaterial || _projType == ProjType::FixedPrice || _projType == ProjType::None))
        {
            ProjStatusTypeRule::enableRule(_projStatus, _projType, ProjStatusRule::CreateInvoiceProposal, true);
        }

        if (ProjStatusTypeRule::shouldEnableReverseEliminateForProjStatus(_projStatus, _projType))
        {
            ProjStatusTypeRule::enableRule(_projStatus, _projType, ProjStatusRule::ReverseEliminate, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldEnableRuleForProjStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the project stage rule should be enabled based on the specified <c>ProjStatus</c> value.
    /// </summary>
    /// <param name = "_projStatus">
    /// A <c>ProjStatus</c> enumeration value.
    /// </param>
    /// <param name = "_projType">
    /// A <c>ProjType</c> enumeration value.
    /// </param>
    /// <returns>
    /// true if the project stage rule should be enabled based on the specified <c>ProjStatus</c> value; otherwise, false.
    /// </returns>
    protected static boolean shouldEnableRuleForProjStatus(ProjStatus _projStatus, ProjType _projType)
    {
        return _projStatus == ProjStatus::InProcess ||
                _projStatus == ProjStatus::User1 ||
                _projStatus == ProjStatus::User2 ||
                _projStatus == ProjStatus::User3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldEnableReverseEliminateForProjStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the project stage rule should be enabled based on the specified <c>ProjStatus</c> and <c>ProjType</c> values.
    /// </summary>
    /// <param name = "_projStatus">
    /// A <c>ProjStatus</c> enumeration value.
    /// </param>
    /// <param name = "_projType">
    /// A <c>ProjType</c> enumeration value.
    /// </param>
    /// <returns>
    /// true if the project stage rule should be enabled based on the specified <c>ProjStatus</c> and <c>ProjType</c> values; otherwise, false.
    /// </returns>
    public static boolean shouldEnableReverseEliminateForProjStatus(ProjStatus _projStatus, ProjType _projType)
    {
        if (_projType == ProjType::FixedPrice || _projType == ProjType::Investment || (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled() && _projType == ProjType::None))
        {
            return _projStatus == ProjStatus::InProcess ||
                    _projStatus == ProjStatus::Completed ||
                    _projStatus == ProjStatus::User1 ||
                    _projStatus == ProjStatus::User2 ||
                    _projStatus == ProjStatus::User3;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableRule</Name>
				<Source><![CDATA[
    public static boolean enableRule(ProjStatus _projStatus, ProjType _projType, ProjStatusRule _projStatusRule, boolean _enable)
    {
        boolean             ret = true;
        ProjStatusTypeRule  projStatusTypeRule;

        if (_enable && !ProjStatusTypeRule::exist(_projStatus, _projType, _projStatusRule))
        {
            ttsbegin;
            projStatusTypeRule.ProjStatus       = _projStatus;
            projStatusTypeRule.ProjType         = _projType;
            projStatusTypeRule.ProjStatusRule   = _projStatusRule;
            projStatusTypeRule.insert();
            ttscommit;
            // automatically create all allowed action rules when project stage enabled
            if (_projStatusRule == ProjStatusRule::AllowUse)
            {
                ProjStatusTypeRule::enableAllAllowedRules(_projStatus, _projType);
            }
        }
        else if (!_enable)
        {
            ttsbegin;
            projStatusTypeRule = ProjStatusTypeRule::find(_projStatus, _projType, _projStatusRule, true);
            if (projStatusTypeRule)
            {
                if (projStatusTypeRule.validateDelete())
                {
                    // Delete all rules when the project stage is disabled
                    if (_projStatusRule == ProjStatusRule::AllowUse)
                    {
                        delete_from projStatusTypeRule
                            where   projStatusTypeRule.ProjStatus   == _projStatus &&
                                    projStatusTypeRule.ProjType     == _projType;
                    }
                    else
                    {
                        projStatusTypeRule.delete();
                    }
                }
                else
                {
                    ret = false;
                }
            }
            ttscommit;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(ProjStatus _projStatus, ProjType _projType, ProjStatusRule _projStatusRule)
    {
        return (select projStatusTypeRule
                where projStatusTypeRule.ProjStatus == _projStatus
                &&    projStatusTypeRule.ProjType == _projType
                &&    projStatusTypeRule.ProjStatusRule == _projStatusRule).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ProjStatusTypeRule find(ProjStatus _projStatus, ProjType _projType, ProjStatusRule _projStatusRule, boolean _forupdate = false)
    {
        ProjStatusTypeRule   projStatusTypeRule = null;
        projStatusTypeRule.selectForUpdate(_forupdate);

        select projStatusTypeRule
        where projStatusTypeRule.ProjStatus == _projStatus
        &&    projStatusTypeRule.ProjType == _projType
        &&    projStatusTypeRule.ProjStatusRule == _projStatusRule;

        return projStatusTypeRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstStage</Name>
				<Source><![CDATA[
    public static ProjStatus firstStage(ProjType _projType)
    {
        ProjStatus          firstStatus;

        if (ProjStatusTypeRule::checkStatus(_projType, ProjStatus::Created))
        {
            firstStatus = ProjStatus::Created;
        }
        else
        if (ProjStatusTypeRule::checkStatus(_projType, ProjStatus::Estimated))
        {
            firstStatus = ProjStatus::Estimated;
        }
        else
        if (ProjStatusTypeRule::checkStatus(_projType, ProjStatus::Scheduled))
        {
            firstStatus = ProjStatus::Scheduled;
        }
        else
        if (ProjStatusTypeRule::checkStatus(_projType, ProjStatus::InProcess))
        {
            firstStatus = ProjStatus::InProcess;
        }
        else
        if (ProjStatusTypeRule::checkStatus(_projType, ProjStatus::User1))
        {
            firstStatus = ProjStatus::User1;
        }
        else
        if (ProjStatusTypeRule::checkStatus(_projType, ProjStatus::User2))
        {
            firstStatus = ProjStatus::User2;
        }
        else
        if (ProjStatusTypeRule::checkStatus(_projType, ProjStatus::User3))
        {
            firstStatus = ProjStatus::User3;
        }
        else
        if (ProjStatusTypeRule::checkStatus(_projType, ProjStatus::Completed))
        {
            firstStatus = ProjStatus::Completed;
        }

        return firstStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextStage</Name>
				<Source><![CDATA[
    public static ProjStatus nextStage(ProjType _type, ProjStatus _status)
    {
        if (_status == ProjStatus::Created)
        {
            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::Estimated))
            {
                return ProjStatus::Estimated;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::Scheduled))
            {
                return ProjStatus::Scheduled;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::InProcess))
            {
                return ProjStatus::InProcess;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::User1))
            {
                return ProjStatus::User1;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::User2))
            {
                return ProjStatus::User2;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::User3))
            {
                return ProjStatus::User3;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::Completed))
            {
                return ProjStatus::Completed;
            }
        }

        if (_status == ProjStatus::Estimated)
        {
            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::Scheduled))
            {
                return ProjStatus::Scheduled;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::InProcess))
            {
                return ProjStatus::InProcess;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::User1))
            {
                return ProjStatus::User1;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::User2))
            {
                return ProjStatus::User2;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::User3))
            {
                return ProjStatus::User3;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::Completed))
            {
                return ProjStatus::Completed;
            }
        }

        if (_status == ProjStatus::Scheduled)
        {
            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::InProcess))
            {
                return ProjStatus::InProcess;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::User1))
            {
                return ProjStatus::User1;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::User2))
            {
                return ProjStatus::User2;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::User3))
            {
                return ProjStatus::User3;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::Completed))
            {
                return ProjStatus::Completed;
            }
        }

        if (_status == ProjStatus::InProcess)
        {
            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::User1))
            {
                return ProjStatus::User1;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::User2))
            {
                return ProjStatus::User2;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::User3))
            {
                return ProjStatus::User3;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::Completed))
            {
                return ProjStatus::Completed;
            }
        }

        if (_status == ProjStatus::User1)
        {
            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::User2))
            {
                return ProjStatus::User2;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::User3))
            {
                return ProjStatus::User3;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::Completed))
            {
                return ProjStatus::Completed;
            }
        }

        if (_status == ProjStatus::User2)
        {
            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::User3))
            {
                return ProjStatus::User3;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::Completed))
            {
                return ProjStatus::Completed;
            }
        }

        if (_status == ProjStatus::User3)
        {
            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::Completed))
            {
                return ProjStatus::Completed;
            }
        }

        return any2Enum(-1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevStage</Name>
				<Source><![CDATA[
    public static ProjStatus prevStage(ProjType _type, ProjStatus _status)
    {
        if (_status == ProjStatus::Completed)
        {
            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::User3))
            {
                return ProjStatus::User3;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::User2))
            {
                return ProjStatus::User2;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::User1))
            {
                return ProjStatus::User1;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::InProcess))
            {
                return ProjStatus::InProcess;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::Scheduled))
            {
                return ProjStatus::Scheduled;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::Estimated))
            {
                return ProjStatus::Estimated;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::Created))
            {
                return ProjStatus::Created;
            }
        }

        if (_status == ProjStatus::User3)
        {
            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::User2))
            {
                return ProjStatus::User2;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::User1))
            {
                return ProjStatus::User1;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::InProcess))
            {
                return ProjStatus::InProcess;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::Scheduled))
            {
                return ProjStatus::Scheduled;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::Estimated))
            {
                return ProjStatus::Estimated;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::Created))
            {
                return ProjStatus::Created;
            }
        }

        if (_status == ProjStatus::User2)
        {
            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::User1))
            {
                return ProjStatus::User1;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::InProcess))
            {
                return ProjStatus::InProcess;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::Scheduled))
            {
                return ProjStatus::Scheduled;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::Estimated))
            {
                return ProjStatus::Estimated;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::Created))
            {
                return ProjStatus::Created;
            }
        }

        if (_status == ProjStatus::User1)
        {
            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::InProcess))
            {
                return ProjStatus::InProcess;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::Scheduled))
            {
                return ProjStatus::Scheduled;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::Estimated))
            {
                return ProjStatus::Estimated;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::Created))
            {
                return ProjStatus::Created;
            }
        }

        if (_status == ProjStatus::InProcess)
        {
            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::Scheduled))
            {
                return ProjStatus::Scheduled;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::Estimated))
            {
                return ProjStatus::Estimated;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::Created))
            {
                return ProjStatus::Created;
            }
        }

        if (_status == ProjStatus::Scheduled)
        {
            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::Estimated))
            {
                return ProjStatus::Estimated;
            }

            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::Created))
            {
                return ProjStatus::Created;
            }
        }

        if (_status == ProjStatus::Estimated)
        {
            if (ProjStatusTypeRule::checkStatus(_type, ProjStatus::Created))
            {
                return ProjStatus::Created;
            }
        }

        return any2Enum(-1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableRulesForNoneTypeProj</Name>
				<Source><![CDATA[
	/// <summary>
    /// Enables rules for all staged for none type project used with multiple contract line feature.
    /// </summary>
    protected internal static void enableRulesForNoneTypeProj()
    {
		ProjStatusTypeRule::enableRule(ProjStatus::Created, ProjType::None, ProjStatusRule::AllowUse, true);
		ProjStatusTypeRule::enableRule(ProjStatus::Estimated, ProjType::None, ProjStatusRule::AllowUse, true);
		ProjStatusTypeRule::enableRule(ProjStatus::Scheduled, ProjType::None, ProjStatusRule::AllowUse, true);
		ProjStatusTypeRule::enableRule(ProjStatus::InProcess, ProjType::None, ProjStatusRule::AllowUse, true);
		ProjStatusTypeRule::enableRule(ProjStatus::Completed, ProjType::None, ProjStatusRule::AllowUse, true);
	}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124882</DeveloperDocumentation>
	<Label>@SYS106002</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>ProjStatus</TitleField1>
	<TitleField2>ProjType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>ProjStatusTypeRuleIdx</ClusteredIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>ProjStatusTypeRuleIdx</PrimaryIndex>
	<ReplacementKey>ProjStatusTypeRuleIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjStatusRule</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjStatusRule</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS106002</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjStatusRule</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>ProjStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjStatusRule</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>ProjStatusRule</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>ProjType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProjStatusTypeRuleIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjStatusRule</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>