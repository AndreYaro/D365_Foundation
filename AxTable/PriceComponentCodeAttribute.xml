<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceComponentCodeAttribute</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PriceComponentCodeAttribute extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static PriceComponentCodeAttribute find(PriceComponent _priceComponent, Name _componentCodeName, PriceAttributeStatus _status, Name _attributeName, boolean _update = false)
    {
        PriceComponentCodeAttribute componentAttribute;
        componentAttribute.selectForUpdate(_update);

        select firstonly componentAttribute
            where componentAttribute.PriceComponent == _priceComponent
            && componentAttribute.PriceComponentCodeName == _componentCodeName
            && componentAttribute.Status == _status
            && componentAttribute.PriceAttributeName == _attributeName;

        return componentAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDraft</Name>
				<Source><![CDATA[
    internal static void copyDraft(PriceComponent _priceComponent, Name _componentCodeName)
    {
        ttsbegin;
        
        PriceComponentCodeAttribute attributes;
        PriceComponentCodeAttribute draftAttributes; // We need 2 table buffers here - see ADO #885907.
        PriceAttributeStatus newStatus = PriceAttributeStatus::Draft;

        PriceComponentCodeAttribute::clearDraft(_priceComponent, _componentCodeName);

        insert_recordset draftAttributes
            (PriceComponent, PriceComponentCodeName, PriceAttributeName, Status, DisplayOrder, PriorityNumber)
        select PriceComponent, PriceComponentCodeName, PriceAttributeName, newStatus, DisplayOrder, PriorityNumber
        from attributes
        where attributes.PriceComponent == _priceComponent
            && attributes.PriceComponentCodeName == _componentCodeName
            && attributes.Status == PriceAttributeStatus::Published;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearDraft</Name>
				<Source><![CDATA[
    internal static void clearDraft(PriceComponent _priceComponent, Name _componentCodeName)
    {
        PriceComponentCodeAttribute attributes;
        ttsbegin;

        delete_from attributes
        where attributes.PriceComponent == _priceComponent
            && attributes.PriceComponentCodeName == _componentCodeName
            && attributes.Status != PriceAttributeStatus::Published;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveUp</Name>
				<Source><![CDATA[
    internal void moveUp()
    {
        if (this.Status == PriceAttributeStatus::Published)
        {
            // Published attributes cannot be modified.
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        
        PriceComponentCodeAttribute prevDefinition;

        ttsbegin;

        select firstonly forupdate prevDefinition
        order by prevDefinition.DisplayOrder desc
        where prevDefinition.Status != PriceAttributeStatus::Published
            && prevDefinition.Status != PriceAttributeStatus::Deleted
            && prevDefinition.DisplayOrder < this.DisplayOrder;

        if (!prevDefinition)
        {
            // There is no one has lower display order.
            // This one is already the top.
        }
        else
        {
            int tempOrder = prevDefinition.DisplayOrder;
            prevDefinition.DisplayOrder = this.DisplayOrder;
            this.DisplayOrder = tempOrder;

            prevDefinition.update();
            this.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveDown</Name>
				<Source><![CDATA[
    internal void moveDown()
    {
        if (this.Status == PriceAttributeStatus::Published)
        {
            // Published attributes cannot be modified.
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        
        PriceComponentCodeAttribute nextDefinition;

        ttsbegin;

        select firstonly forupdate nextDefinition
        order by nextDefinition.DisplayOrder asc
        where nextDefinition.Status != PriceAttributeStatus::Published
            && nextDefinition.Status != PriceAttributeStatus::Deleted
            && nextDefinition.DisplayOrder > this.DisplayOrder;

        if (!nextDefinition)
        {
            // There is no one has larger display order.
            // This one is already the bottom.
        }
        else
        {
            int tempOrder = nextDefinition.DisplayOrder;
            nextDefinition.DisplayOrder = this.DisplayOrder;
            this.DisplayOrder = tempOrder;

            nextDefinition.update();
            this.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextDisplayOrder</Name>
				<Source><![CDATA[
    internal static DisplayOrder nextDisplayOrder(PriceComponent _component, PriceComponentCodeName _componentCodeName)
    {
        PriceComponentCodeAttribute componentCodeAttributes;

        select maxof(DisplayOrder) from componentCodeAttributes
            where componentCodeAttributes.PriceComponent == _component 
            && componentCodeAttributes.Status != PriceAttributeStatus::Published
            && componentCodeAttributes.PriceComponentCodeName == _componentCodeName;

        return componentCodeAttributes.DisplayOrder + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publish</Name>
				<Source><![CDATA[
    internal static void publish(PriceComponent _priceComponent, Name _componentCodeName)
    {
        PriceComponentCodeAttribute attributes;
        PriceAttributeDefinition attributeDefinition;
        // Firstly mark the component code as 'publishing'.
        ttsbegin;
        PriceComponentCode componentCode = PriceComponentCode::findByName(_priceComponent, _componentCodeName, true);
        componentCode.PublishStatus = PriceAttributePublishStatus::Publishing;
        componentCode.update();
        ttscommit;


        // To publish -
        // 1. Lock the table.
        ttsbegin;
        select pessimisticlock attributes
        where attributes.PriceComponent == _priceComponent
            && attributes.PriceComponentCodeName == _componentCodeName;

        // 2. Delete published records.
        delete_from attributes 
        where attributes.PriceComponent == _priceComponent
            && attributes.PriceComponentCodeName == _componentCodeName
            && attributes.Status == PriceAttributeStatus::Published;
        
        // 3. Clear rule conditions with deleted attributes' seqence number.
        PricingRuleApplicability applicability;
        container clearFieldNumbers;
        while select attributes
        where attributes.PriceComponent == _priceComponent
            && attributes.PriceComponentCodeName == _componentCodeName
            && attributes.Status == PriceAttributeStatus::Deleted
        join attributeDefinition
        where attributes.PriceComponent == attributeDefinition.PriceComponent
           && attributes.PriceAttributeName == attributeDefinition.Name
        {
            clearFieldNumbers += PricingRuleApplicability::getValueFieldStr(attributeDefinition.Sequence);

            IPriceAttributeProvider provider = attributeDefinition.findProvider();
            if (provider && provider.dataType(attributeDefinition) == PriceAttributeDataType::Reference)
            {
                // We need to clear reference values as well.
                clearFieldNumbers += provider.referenceFieldNum(attributeDefinition);
            }
        }

        if (conLen(clearFieldNumbers) > 0)
        {
            PricingRuleApplicability::clearColumns(_priceComponent, _componentCodeName, clearFieldNumbers);
        }

        // 4. Move draft records to published.
        PriceComponentCodeAttribute publishedAttributes; // We need 2 table buffers here - see ADO #885907.
        PriceAttributeStatus newStatus = PriceAttributeStatus::Published;
        insert_recordset publishedAttributes
            (PriceComponent, PriceComponentCodeName, PriceAttributeName, Status, DisplayOrder, PriorityNumber)
        select PriceComponent, PriceComponentCodeName, PriceAttributeName, newStatus, DisplayOrder, PriorityNumber
        from attributes
        where attributes.PriceComponent == _priceComponent
            && attributes.PriceComponentCodeName == _componentCodeName
            && (attributes.Status == PriceAttributeStatus::Draft || attributes.Status == PriceAttributeStatus::Added);


        // 5. Clear draft.
        delete_from attributes 
        where attributes.PriceComponent == _priceComponent
            && attributes.PriceComponentCodeName == _componentCodeName
            && attributes.Status != PriceAttributeStatus::Published;

        ttscommit;

        // Finnlly mark the component code as 'published'.
        ttsbegin;
        componentCode = PriceComponentCode::findByName(_priceComponent, _componentCodeName, true);
        componentCode.PublishStatus = PriceAttributePublishStatus::Published;
        componentCode.update();
        ttscommit;
        
        Info('@UnifiedPricing:PriceAttributePublish');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@UnifiedPricing:PriceAttribute</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>PriceComponentCodeName</TitleField1>
	<TitleField2>PriceAttributeName</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ComponentCodeAttribute</ClusteredIndex>
	<PrimaryIndex>ComponentCodeAttribute</PrimaryIndex>
	<ReplacementKey>ComponentCodeAttribute</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PriceComponent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceComponentCodeName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceAttributeName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PriceComponent</Name>
			<AllowEdit>No</AllowEdit>
			<Mandatory>Yes</Mandatory>
			<EnumType>PriceComponent</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PriceComponentCodeName</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>Name</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PriceAttributeName</Name>
			<ExtendedDataType>Name</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<EnumType>PriceAttributeStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DisplayOrder</Name>
			<ExtendedDataType>DisplayOrder</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PriorityNumber</Name>
			<ExtendedDataType>RetailPricingPriorityNumber</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@UnifiedPricing:Rank</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ComponentCodeAttribute</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PriceComponent</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PriceComponentCodeName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PriceAttributeName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PriceComponentCode</Name>
			<RelatedTable>PriceComponentCode</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PriceComponent</Name>
					<Field>PriceComponent</Field>
					<RelatedField>PriceComponent</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PriceComponentCodeName</Name>
					<Field>PriceComponentCodeName</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PriceAttribute</Name>
			<RelatedTable>PriceAttributeDefinition</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PriceComponent</Name>
					<Field>PriceComponent</Field>
					<RelatedField>PriceComponent</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PriceAttributeName</Name>
					<Field>PriceAttributeName</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>