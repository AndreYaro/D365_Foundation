<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollPayStatementTaxLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PayrollPayStatementTaxLine extends PayrollPayStatementLine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates/inserts a new record into <c>PayrollPayStatementTaxLine</c> table.
    /// </summary>
    /// <param name="_earningStatementLines">
    ///     List of earning statement lines
    /// </param>
    /// <param name="_createSourceDocument">
    ///     A boolean indicating if the source document needs to be created.
    /// </param>
    /// <remarks>
    ///     The earning statement lines are null for this table method always.
    /// </remarks>
    public void insert(List _earningStatementLines = null, boolean _createSourceDocument=true)
    {
        this.updatePoliticalSubDivisionId();
        super(_earningStatementLines, _createSourceDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.updatePoliticalSubDivisionId();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePoliticalSubDivisionId</Name>
				<Source><![CDATA[
    public void updatePoliticalSubDivisionId()
    {
        PayrollTaxEngineTaxCodeForSymmetry taxCodeForSymmetry = PayrollTaxEngineTaxCodeForSymmetry::find(PayrollTaxEngineTaxCode::findByPayrollTaxCode(this.TaxCode).RecId);
        this.PoliticalSubDivisionId = PayrollTaxEngineUtil::getPoliticalSubDivisionByTaxCode(taxCodeForSymmetry.Code, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if it is safe to create a new <c>PayrollPayStatementTaxLine</c> on the current pay statement
    /// for the specified tax code.
    /// </summary>
    /// <param name="_taxCode">
    /// The tax code record identifier for which to see if tax line records exist.
    /// </param>
    /// <param name="_payStatement">
    /// The <c>PayrollPayStatement</c> record identifier to verify for existance.
    /// </param>
    /// <returns>
    /// True if it is safe to create a new tax line for the current pay statement for
    /// the specified tax code.
    /// </returns>
    /// <remarks>
    /// This method is used to ensure that during a recalculation of a pay statement any
    /// lines that were modified or removed by the user do not get replaced by the
    /// recalculation process.
    /// </remarks>
    public static boolean canCreate(PayrollTaxCodeRecId _taxCode, PayrollPayStatementRecId _payStatement)
    {
        PayrollPayStatementTaxLine      taxLine;

        // Determine if a modified tax line record exists on the specified pay statement for the specified tax
        select firstOnly TaxCode, PayStatement, IsPayStatementLineOverridden from taxLine
            where taxLine.TaxCode == _taxCode
                &&    taxLine.PayStatement == _payStatement
                &&    taxLine.IsPayStatementLineOverridden == NoYes::Yes;

        // If no record is found, true is returend since it is safe to create a new record; else false is returned
        return (taxLine.RecId == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>PayrollPayStatementTaxLine</c> table and shows an infolog message if record does not exist.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;

        if (!PayrollPayStatementTaxLine::exist(_recId))
        {
            ret = checkFailed(strfmt(PayrollPayStatementTaxLine::txtNotExist(), tableStr(PayrollPayStatementTaxLine)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates and inserts a new record into the <c>PayrollPayStatementTaxLine</c> table.
    /// </summary>
    /// <param name="_payStatement">
    ///     The value of the <c>PayStatement</c> field of the record to create.
    /// </param>
    /// <param name="_periodEndDate">
    ///     The value of the <c>AccountingDate</c> field of the record to create.
    /// </param>
    /// <param name="_taxCode">
    ///     The record ID of PayrollTaxCode table.
    /// </param>
    /// <param name="_accountingDistributionTemplateRecId">
    ///     The value of the <c>AccountingDistributionTemplate</c> field to the record to create.
    /// </param>
    /// <param name="_taxAmount">
    ///     The value of the <c>AccountingCurrencyAmount</c> field of the record to create.
    /// </param>
    /// <param name="_lineSource">
    ///     The value of the <c>PayrollPayStatementLineSource</c> of the record to create.
    /// </param>
    /// <param name="_isPayStatementLineOverridden">
    ///     The value of the <c>IsPayStatementLineOverridden</c> field of the record to create.
    /// </param>
    /// <returns>
    ///     The newly created <c>PayrollPayStatementTaxLine</c> record.
    /// </returns>
    public static PayrollPayStatementTaxLine create(
        PayrollPayStatement                 _payStatement,
        TransDate                           _periodEndDate,
        PayrollTaxCode                      _taxCode,
        AccountingDistributionTemplateRecId _accountingDistributionTemplateRecId,
        AmountCur                           _taxAmount,
        PayrollPayStatementLineSource       _lineSource = PayrollPayStatementLineSource::WorkerTaxCode,
        NoYes                               _isPayStatementLineOverridden = NoYes::No)
    {
        PayrollPayStatementTaxLine      payStatTaxLine;
        boolean                         doAccounting = (_payStatement.SourceDocumentHeader != 0);

        ttsBegin;
        payStatTaxLine.AccountingDate                   = _periodEndDate;
        payStatTaxLine.TaxCode                          = _taxCode.RecId;
        payStatTaxLine.AccountingCurrencyAmount         = CurrencyExchange::round(_taxAmount, PayrollSetup::currencyCode());
        payStatTaxLine.PayStatement                     = _payStatement.RecId;

        if (doAccounting)
        {
            payStatTaxLine.AccountingDistributionTemplate = _accountingDistributionTemplateRecId;
        }

        payStatTaxLine.IsPayStatementLineOverridden     = _isPayStatementLineOverridden;
        payStatTaxLine.IsMarkedForRemoval               = NoYes::No;
        payStatTaxLine.IsEmployer                       = _taxCode.IsEmployerTax;
        payStatTaxLine.IsLineLocked                     = PayrollPayStatementTaxLine::getIsLineLocked(_payStatement.PaymentType, _taxCode.RecId);
        payStatTaxLine.Source                           = _lineSource;

        if (payStatTaxLine.AccountingCurrencyAmount != 0)
        {
            payStatTaxLine.insert(null, doAccounting);
        }
        else
        {
            // Don't create the line if the rounded amount is 0
            payStatTaxLine.clear();
        }
        ttsCommit;

        return payStatTaxLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsLineLocked</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Check if the <c>PayrollPayStatementTaxLine</c> record is locked.
    /// </summary>
    /// <param name="_paymentType">
    ///     A payment run type of the <c>PayrollPayStatement</c> record.
    /// </param>
    /// <param name="_benefitRecId">
    ///     A RecdId of the <c>PayrollTaxCode</c> record.
    /// </param>
    /// <returns>
    ///     Yes if the <c>PayrollPayStatementTaxLine</c> is locked; otherwise, no.
    /// </returns>
    public static NoYes  getIsLineLocked(PayrollPaymentType _paymentType, PayrollTaxCodeRecId _taxCodeRecId)
    {
        NoYes isLineLocked;

        if (_paymentType == PayrollPaymentType::Manual)
        {
            isLineLocked = NoYes::No;
        }
        else
        {
            PayrollTaxCode taxcode = PayrollTaxCode::find(_taxCodeRecId);

            isLineLocked = taxcode.IsPayStatementLineLocked;
        }

        return isLineLocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>PayrollPayStatementTaxLine</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        return _recId && (select firstonly RecId from PayrollPayStatementTaxLine
                    where PayrollPayStatementTaxLine.RecId == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>PayrollPayStatementTaxLine</c> table based on a record ID value.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>PayrollPayStatementTaxLine</c> table.
    /// </returns>
    public static PayrollPayStatementTaxLine find(
        RecId         _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollPayStatementTaxLine payrollPayStatementTaxLine;

        payrollPayStatementTaxLine.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollPayStatementTaxLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly payrollPayStatementTaxLine
             where payrollPayStatementTaxLine.RecId == _recId;

        return payrollPayStatementTaxLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS321009";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PayrollAdministration</ConfigurationKey>
	<DeveloperDocumentation>@Payroll:ThePayrollpaystatementtaxlineTableHoldsThePayStatementTaxLin</DeveloperDocumentation>
	<Label>@Payroll:PayStatementTaxLines</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>TaxCode</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<Extends>PayrollPayStatementLine</Extends>
	<Modules>Payroll</Modules>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PoliticalSubDivisionId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollPoliticalSubdivisionId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollTaxCodeRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxCodeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PayStatementLineTax_FK</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>PayrollPayStatementLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxLine</RelatedTableRole>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxCode_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PayrollTaxCode</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxCode</Name>
					<Field>TaxCode</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>