<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRRoyaltyTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MCRRoyaltyTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkIfMCRRoyaltyItemCodeExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the agreement has existing related <c>MCRRoyaltyItemCode</c> record.
    /// </summary>
    /// <returns>
    /// true if any related <c>MCRRoyaltyItemCode</c> record exists; otherwise false.
    /// </returns>
    public boolean checkIfMCRRoyaltyItemCodeExist()
    {
        MCRRoyaltyItemCode  mcrRoyaltyItemCode;
        boolean             ret = true;

        if (this.RoyaltyCode)
        {
            select firstonly RecId from mcrRoyaltyItemCode
                where mcrRoyaltyItemCode.RoyaltyCode    == this.RoyaltyCode;

            if (!mcrRoyaltyItemCode.RecId)
            {
                ret = checkFailed("@PDS1306");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfMCRRoyaltyTablePricingExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the agreement has existing related <c>MCRRoyaltyTablePricing</c> record.
    /// </summary>
    /// <returns>
    /// true if any related <c>MCRRoyaltyTablePricing</c> record exists; otherwise false.
    /// </returns>
    public boolean checkIfMCRRoyaltyTablePricingExists()
    {
        MCRRoyaltyTablePricing      mcrRoyaltyTablePricing;
        boolean                     ret = true;

        select firstonly RecId from mcrRoyaltyTablePricing
            where mcrRoyaltyTablePricing.RoyaltyCode    == this.RoyaltyCode;

        if (!mcrRoyaltyTablePricing.RecId)
        {
            ret = checkFailed("@MCR4410022");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLineBreaks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the agreement line breaks are valid.
    /// </summary>
    /// <returns>
    /// false if one of the line breaks is invalid; otherwise, true.
    /// </returns>
    public boolean checkLineBreaks()
    {
        MCRRoyaltyTablePricing  mcrRoyaltyTablePricing;
        UnitOfMeasureSymbol     prevUOM;
        MCRRoyaltyToValue       prevToValue = 0;
        boolean                 ok        = true;
        boolean                 firstLine = true;
        MCRRoyaltyContract      mcrRoyaltyContract;

        while select mcrRoyaltyTablePricing order by UnitID, FromValue
            where mcrRoyaltyTablePricing.RoyaltyCode  == this.RoyaltyCode
        {
            if (firstLine)
            {
                firstLine = false;
            }
            else
            {
                if (mcrRoyaltyTablePricing.UnitID != prevUOM)
                {
                    mcrRoyaltyContract  = this.royaltyContract();
                    ok = this.royaltyAmtTypeForUpperThresCheckValid(prevToValue, mcrRoyaltyContract.RoyaltyLineBreakType);
                }
                else
                {
                    ok = !MCRRoyaltyTable::lineValueHasGapOrOverlap(mcrRoyaltyTablePricing.FromValue, prevToValue);
                }
            }

            if (!ok)
            {
                return ok;
            }

            prevUOM             = mcrRoyaltyTablePricing.UnitID;
            prevToValue         = mcrRoyaltyTablePricing.toValue();
        }

        // check for the last line if any lines exist
        if (!firstLine)
        {
            mcrRoyaltyContract  = this.royaltyContract();
            ok = this.royaltyAmtTypeForUpperThresCheckValid(prevToValue, mcrRoyaltyContract.RoyaltyLineBreakType);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUOMConvert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the unit of measure conversion method is valid according to the <c>MCRRoyaltyTablePricing</c> records.
    /// </summary>
    /// <returns>
    /// false if there is a quantity overlap; otherwise, true.
    /// </returns>
    public boolean checkUOMConvert()
    {
        MCRRoyaltyContract      mcrRoyaltyContract    = this.royaltyContract();
        MCRRoyaltyTablePricing  mcrRoyaltyTablePricing;
        boolean                 ok = true;

        if (mcrRoyaltyContract.RoyaltyUOMOption == MCRRoyaltyUOMOption::Convert)
        {
            select firstonly RecId
                from mcrRoyaltyTablePricing
                where mcrRoyaltyTablePricing.RoyaltyCode    == this.RoyaltyCode
                    && mcrRoyaltyTablePricing.UnitID        != this.UnitID;

            if (mcrRoyaltyTablePricing.RecId)
            {
                ok = checkFailed("@MCR4410020");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the date is within the date effective range.
    /// </summary>
    /// <param name="_date">
    /// The date to validate based on the date effective range.
    /// </param>
    /// <returns>
    /// True if the date is within the date effective range; otherwise false.
    /// </returns>
    public boolean checkValidDate(date _date)
    {
        boolean ret = true;

        if (this.EffectiveFromDate
            && this.EffectiveFromDate   > _date)
        {
            ret = false;
        }
        else if (this.EffectiveToDate
            && this.EffectiveToDate     < _date)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateRangeValidation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates that the royalty is within the date range specified.
    /// </summary>
    /// <param name="_mcrRoyaltyTable">
    ///    <c>MCRRoyaltyTable</c> for which dates are being checked against.
    /// </param>
    /// <param name="_date">
    ///     <c>Date</c> value passed in to be checked against valid date range of royalty.
    /// </param>
    /// <returns>
    ///     true if royalty is within specified dates; otherwise false.
    /// </returns>
    /// <remarks>
    ///     Validates date range for specified Royalty contract.
    /// </remarks>
    public boolean dateRangeValidation(
        MCRRoyaltyTable _mcrRoyaltyTable,
        date            _date)
    {
        boolean withinDateRange = false;

        if ((_date   >= _mcrRoyaltyTable.EffectiveFromDate
            || !_mcrRoyaltyTable.EffectiveFromDate)
            && (_date   <= _mcrRoyaltyTable.EffectiveToDate
                || !_mcrRoyaltyTable.EffectiveToDate))
        {
            withinDateRange = true;
        }
        return withinDateRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVendName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the name of the related vendor.
    /// </summary>
    /// <returns>
    /// The name of the related vendor.
    /// </returns>
    public display VendName displayVendName()
    {
        return VendTable::find(this.VendAccount).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromMCRRoyaltyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>MCRRoyaltyTable</c> table buffer based on the associated <c>MCRRoyaltyContract</c> passed parameter.
    /// </summary>
    /// <param name="_royaltyContract">
    /// The associated <c>MCRRoyaltyContract</c> record for the royalty definition.
    /// </param>
    /// <remarks>
    /// Initialize the <c>MCRRoyaltyTable</c> table buffer based on the associated <c>MCRRoyaltyContract</c> record that is passed in as a parameter.
    /// </remarks>
    public void initFromMCRRoyaltyContract(MCRRoyaltyContract _royaltyContract)
    {
        this.CalcDates          = _royaltyContract.CalcDates;
        this.Currency           = _royaltyContract.Currency;
        this.Description        = _royaltyContract.Description;
        this.EffectiveFromDate  = _royaltyContract.EffectiveFromDate;
        this.EffectiveToDate    = _royaltyContract.EffectiveToDate;
        this.RoyaltyContract    = _royaltyContract.RoyaltyContract;
        this.RoyaltyDetails     = _royaltyContract.RoyaltyDetails;
        this.UnitID             = _royaltyContract.UnitID;
        this.VendAccount        = _royaltyContract.VendAccount;

        // Default the amount type to something that is valid for both calculate by values
        if (_royaltyContract.RoyaltyLineBreakType   == MCRRoyaltyLineBreakType::Quantity)
        {
            this.RoyaltyAmtType = MCRRoyaltyAmtType::AmountPerUnit;
        }
        else
        {
            this.RoyaltyAmtType = MCRRoyaltyAmtType::Percentage;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert <c>MCRRoyaltyItem</c> table and call inserts of the <c>MCRRoyaltyItemCode</c> and <c>MCRRoyaltyTablePricing</c>.
    /// </summary>
    public void insert()
    {
        MCRRoyaltyItemCode       mcrRoyaltyItemCode;
        MCRRoyaltyTablePricing   mcrRoyaltyTablePricing;
        super();
        //set pricing
        mcrRoyaltyTablePricing.insertFromMCRRoyaltyTable(this);
        //set items
        mcrRoyaltyItemCode.insertFromMCRRoyaltyItemTable(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates field values in the <c>MCRRoyaltyTable</c> table based on changes.
    /// </summary>
    /// <param name="_fieldId">
    /// The field being modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);
        switch (_fieldId)
        {
            case fieldNum(MCRRoyaltyTable, VendAccount):
                this.Currency = VendTable::find(this.VendAccount).Currency;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>royaltyAmtTypeForUpperThresCheckValid</Name>
				<Source><![CDATA[
    private boolean royaltyAmtTypeForUpperThresCheckValid(MCRRoyaltyToValue         _toValue,
                                                          MCRRoyaltyLineBreakType   _lineBreakType)
    {
        boolean checkValid = true;

        if ((this.RoyaltyAmtType == MCRRoyaltyAmtType::Percentage)
            && _lineBreakType == MCRRoyaltyLineBreakType::Quantity
            && (_toValue != realMax()))
        {
            checkValid = checkFailed(strFmt("@MCR4410737",
											MCRRoyaltyLineBreakType::Quantity,
                                            MCRRoyaltyAmtType::Percentage,
                                            _toValue,
                                            SysDictField::findFieldById(tableNum(MCRRoyaltyTablePricing),
                                                                                        fieldNum(MCRRoyaltyTablePricing,
                                                                                                 ToValue)).label()));
        }
        else if ((this.RoyaltyAmtType == MCRRoyaltyAmtType::AmountPerUnit)
            && _lineBreakType == MCRRoyaltyLineBreakType::Amount
            && (_toValue != realMax()))
        {
            checkValid = checkFailed(strFmt("@MCR4410737", MCRRoyaltyLineBreakType::Amount,
                                                           MCRRoyaltyAmtType::AmountPerUnit,
                                                           _toValue,
                                                           SysDictField::findFieldById(tableNum(MCRRoyaltyTablePricing),
                                                                                       fieldNum(MCRRoyaltyTablePricing,
                                                                                                ToValue)).label()));
        }

        return checkValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>royaltyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the associated <c>MCRRoyaltyContract</c> buffer.
    /// </summary>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The <c>MCRRoyaltyContract</c> table record.
    /// </returns>
    /// <remarks>
    /// Finds the associated <c>MCRRoyaltyContract</c> buffer based on the current royalty contract number.
    /// </remarks>
    public MCRRoyaltyContract royaltyContract(boolean _forUpdate = false)
    {
        return MCRRoyaltyContract::findByRoyaltyContract(this.RoyaltyContract, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCalcDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the date used for comparison based on the calculation date
    /// selected on the royalty agreement.
    /// </summary>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> record for which to find the comparison date.
    /// </param>
    /// <returns>
    /// The date that will be used for comparison based on the calculation date field.
    /// </returns>
    public date setCalcDate(SalesLine  _salesLine)
    {
        date    retDate;

        if (this.CalcDates  == MCRTradeCustCalcDates::CreatedDate)
        {
            retDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
        else if (this.CalcDates  == MCRTradeCustCalcDates::RequestShipDate)
        {
            retDate = _salesLine.ShippingDateRequested;
        }
        else if (this.CalcDates  == MCRTradeCustCalcDates::RequestReceiptDate)
        {
            retDate = _salesLine.ReceiptDateRequested;
        }

        return retDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        MCRRoyaltyTablePricing  mcrRoyaltyTablePricing;

        super();

        // if units were changed, need to update the pricing record units as well
        mcrRoyaltyTablePricing.skipDataMethods(true);

        update_recordset mcrRoyaltyTablePricing
            setting UnitID  = this.UnitID
            where mcrRoyaltyTablePricing.RoyaltyCode    == this.RoyaltyCode
               && mcrRoyaltyTablePricing.UnitID         != this.UnitID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDates</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates all dates on a royalty are entered so that the
    ///         from date is less than the to date.
    /// </summary>
    /// <param name="_fromDate">
    ///     <c>TransDate</c> that specifies the start of a royalty contract.
    /// </param>
    /// <param name="_toDate">
    ///     <c>TransDate</c> that specifies the end of a royalty contract.
    /// </param>
    /// <returns>
    ///     true if _fromDate is before _toDate; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     The _toDate should never be less than the _fromDate.
    /// </remarks>
    private boolean validateDates(TransDate _fromDate, TransDate _toDate)
    {
        if ((_toDate < _fromDate)
			&&  _toDate
			&&  _fromDate)
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the record is ready for deletion.
    /// </summary>
    /// <returns>
    ///     true if the record is eligible for deletion; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     Deletion should only rarely happen. Only allow the deletion of royalties that do not have
    ///     any sales orders that have hit against the royalty.
    /// </remarks>
    public boolean validateDelete()
    {
        boolean                 ret;
        MCRRoyaltyVendTable     mcrRoyaltyVendTable;

        ret = super();

        select firstonly RecId from mcrRoyaltyVendTable
            where mcrRoyaltyVendTable.RoyaltyCode   == this.RoyaltyCode;
        if (mcrRoyaltyVendTable.RecId)
        {
            checkFailed("@MCR34056");
            return false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOrderDates</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates that order dates on royalty are entered correctly.
    /// </summary>
    /// <remarks>
    ///     Validate that the from date is less than the to date.
    /// </remarks>
    /// <exception cref="Exception::Error">
    ///     Error describing the nature of the problem.
    /// </exception>
    private void validateOrderDates()
    {
        boolean datesValid;

        datesValid = this.validateDates(this.EffectiveFromDate,this.EffectiveToDate);

        if (!datesValid)
        {
            throw error(strFmt("@MCR25961","@MCR25206", "@MCR25207"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a write to the <c>MCRRoyaltyTable</c> table.
    /// </summary>
    /// <returns>
    /// true if the write is valid; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        // validate end date is not less than start date
        if (this.EffectiveToDate  < this.EffectiveFromDate
        &&  this.EffectiveToDate)
        {
            ret = checkFailed("@MCR34499");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a royalty record based on the passed in <c>MCRRoyaltyCode</c>.
    /// </summary>
    /// <param name="_mcrRoyaltyCode">
    /// The <c>MCRRoyaltyCode</c> value for which to search the royalty table.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that defines whether to select the record for update or not.
    /// </param>
    /// <returns>
    /// The royalty record that was found based on the passed in parameters.
    /// </returns>>
    public static MCRRoyaltyTable find(
        MCRRoyaltyCode  _mcrRoyaltyCode,
        boolean         _forUpdate = false)
    {
        MCRRoyaltyTable  mcrRoyaltyTable;

        if (_mcrRoyaltyCode)
        {
            if (_forUpdate)
            {
                mcrRoyaltyTable.selectForUpdate (_forUpdate);
            }

            select firstonly mcrRoyaltyTable
                where mcrRoyaltyTable.RoyaltyCode == _mcrRoyaltyCode;
        }

        return mcrRoyaltyTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a royalty record based on the passed in <c>RecId</c>.
    /// </summary>
    /// <param name="_recId">
    /// The <c>recId</c> value for which to search the royalty table.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that defines whether to select the record for update or not.
    /// </param>
    /// <returns>
    /// The royalty record that was found based on the passed in parameters.
    /// </returns>>
    public static MCRRoyaltyTable findByRecId(
        RecId   _recId,
        boolean _forUpdate = false)
    {
        MCRRoyaltyTable  mcrRoyaltyTable;

        if (_recId)
        {
            if (_forUpdate)
            {
                mcrRoyaltyTable.selectForUpdate (_forUpdate);
            }

            select firstonly mcrRoyaltyTable
                where mcrRoyaltyTable.RecId == _recId;
        }

        return mcrRoyaltyTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineValueHasGapOrOverlap</Name>
				<Source><![CDATA[
    private static boolean lineValueHasGapOrOverlap(MCRRoyaltyFromValue _currentFromValue, MCRRoyaltyToValue _previousToValue)
    {
        if (_currentFromValue == _previousToValue)
        {
            return false;
        }

        if (_currentFromValue < _previousToValue)
        {
            checkFailed("@MCR4410023");
        }
        else
        {
            checkFailed("@MCR4410021");
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>MCRRoyalty</ConfigurationKey>
	<DeveloperDocumentation>@MCR34014</DeveloperDocumentation>
	<Label>@MCR33917</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>RoyaltyCode</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<CreatedTransactionId>Yes</CreatedTransactionId>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ModifiedTransactionId>Yes</ModifiedTransactionId>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>RoyaltyCodeIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>MCRRoyaltyItemCode</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MCRRoyaltyItemCode</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>MCRRoyaltyTablePricing</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MCRRoyaltyTablePricing</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RoyaltyContract</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyDetails</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcDates</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffectiveFromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffectiveToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RoyaltyContract</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcDates</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RoyaltyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyContract</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalcDates</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffectiveFromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffectiveToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyAmtType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyContract</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyDetails</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dates</Name>
			<Label>@SYS80293</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EffectiveFromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffectiveToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Details</Name>
			<Label>@SYS80118</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RoyaltyDetails</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GeneralDescription</Name>
			<Label>@SYS41042</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RoyaltyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyDetails</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GeneralDetails</Name>
			<Label>@SYS318405</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcDates</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RoyaltyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcDates</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyAmtType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Royalty</Name>
			<Label>@MCR33559</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RoyaltyContract</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyDetails</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Vendor</Name>
			<Label>@SYS8079</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalcDates</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS59030</Label>
			<EnumType>MCRTradeCustCalcDates</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Currency</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EffectiveFromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCREffectiveFromDate</ExtendedDataType>
			<Label>@SYS35856</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EffectiveToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCREffectiveToDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RoyaltyAmtType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>MCRRoyaltyAmtType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RoyaltyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRRoyaltyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RoyaltyContract</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRRoyaltyContractCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RoyaltyDetails</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Notes</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RoyaltyCodeIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RoyaltyCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RoyaltyContract</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>Royalty</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>RoyaltyContract</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Currency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>Currency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MCRRoyaltyContract</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MCRRoyaltyContract</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RoyaltyContract</Name>
					<Field>RoyaltyContract</Field>
					<RelatedField>RoyaltyContract</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitID</Name>
					<Field>UnitID</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>