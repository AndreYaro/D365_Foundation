<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceChangeTrackingDataArea</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailPriceChangeTrackingDataArea extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findByDataAreaId</Name>
				<Source><![CDATA[
    public static RetailPriceChangeTrackingDataArea findByDataAreaId(DataAreaId _dataAreaId)
    {
        RetailPriceChangeTrackingDataArea trackedCompany;
        
        select firstonly trackedCompany where trackedCompany.TrackedDataArea == _dataAreaId;

        return trackedCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate write on the table.
    /// </summary>
    /// <returns>True is validate success, otherwise, false.</returns>
    public boolean validateWrite()
    {
        boolean ret = super();

        RetailPriceChangeTrackingDataArea existingRecord;

        select firstonly existingRecord
            where existingRecord.TrackedDataArea == this.TrackedDataArea
                && existingRecord.RecId != this.RecId;

        if (existingRecord)
        {
            ret = checkFailed(strFmt("@RetailPricing:DataAreaAlreadyExistsInRetailPriceChangeTrackingDataAreaTable", this.TrackedDataArea));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshDataAreaList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh the data area list.
    /// </summary>
    internal static void refreshDataAreaList()
    {
        CompanyInfo companyInfo;
        RetailPriceChangeTrackingDataArea trackedDataArea;

        // Delete no longer exist data area.
        delete_from trackedDataArea
            notexists join companyInfo
            where companyInfo.DataArea == trackedDataArea.TrackedDataArea;

        // Add newly created data area with azure search enabled(not yet added when first upgrade).
        while select crosscompany DataArea from companyInfo
            notexists join trackedDataArea
            where companyInfo.DataArea == trackedDataArea.TrackedDataArea
        {
            changecompany(companyInfo.DataArea)
            {
                boolean isAzureSearchConfigured = RetailConfigurationParameters::IsUseAzureSearchEnabled();

                if (isAzureSearchConfigured)
                {
                    RetailPriceChangeTrackingDataArea newRecord;
                    newRecord.TrackedDataArea = companyInfo.DataArea;
                    newRecord.insert();

                    RetailPriceChangeTrackingStatusSwitcher::updateChangeTrackingStatusForLegalEntity(companyInfo.DataArea, true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDataAreaTrackingStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the price change tracking status of given data area.
    /// </summary>
    /// <param name = "_dataArea">The data area to update.</param>
    /// <param name = "_priceChangeTrackingStatus">The price change tracking status of this company.</param>
    internal static void updateDataAreaTrackingStatus(DataAreaId _dataArea, boolean _priceChangeTrackingStatus)
    {
        // Insert or Delete record in the RetailPriceChangeTrackingDataArea table to identify the status.
        RetailPriceChangeTrackingDataArea trackedCompany;
        select firstonly forupdate trackedCompany where trackedCompany.TrackedDataArea == _dataArea;
        
        if (_priceChangeTrackingStatus && !trackedCompany)
        {
            // Insert if not tracked when status is enabled.
            ttsbegin;
            trackedCompany.TrackedDataArea = _dataArea;
            trackedCompany.insert();
            ttscommit;
        }
        else if (!_priceChangeTrackingStatus && trackedCompany)
        {
            // Delete if already tracked when status is disabled.
            ttsbegin;
            trackedCompany.delete();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        RetailPriceChangeTrackingStatusSwitcher::updateChangeTrackingStatusForLegalEntity(this.TrackedDataArea, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        DataAreaId originDataArea = this.orig().TrackedDataArea;
        DataAreaId newDataArea = this.TrackedDataArea;

        super();

        if (originDataArea != newDataArea)
        {
            // Update status for the new data area first to avoid disable entire feature and enable again.
            RetailPriceChangeTrackingStatusSwitcher::updateChangeTrackingStatusForLegalEntity(newDataArea, true);
            RetailPriceChangeTrackingStatusSwitcher::updateChangeTrackingStatusForLegalEntity(originDataArea, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        RetailPriceChangeTrackingStatusSwitcher::updateChangeTrackingStatusForLegalEntity(this.TrackedDataArea, false);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<Label>@RetailPricing:RetailPriceChangeTrackingDataAreaTableLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Group</TableGroup>
	<CacheLookup>EntireTable</CacheLookup>
	<ReplacementKey>DataAreaIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TrackedDataArea</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TrackedDataArea</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TrackedDataArea</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TrackedDataArea</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TrackedDataArea</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TrackedDataArea</Name>
			<ExtendedDataType>SelectableDataArea</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DataAreaIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TrackedDataArea</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CompanyInfo</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TrackedDataArea</Name>
					<Field>TrackedDataArea</Field>
					<RelatedField>DataArea</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>