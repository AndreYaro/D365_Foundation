<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchLine extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountItemExtendParm_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a posting account for the purchase order line with site.
    /// </summary>
    /// <param name="_inventAccountType">
    /// The posting account type.
    /// </param>
    /// <returns>
    /// The posting account number for the account type for the purchase order line.
    /// </returns>
    LedgerDimensionDefaultAccount accountItemExtendParm_CN(InventAccountType _inventAccountType)
    {
        return InventPosting::accountItemExtendParmFromParameter_CN(
            InventPostingAccountItemLedgerDimensionParameters::newFromPurchLine(
                this,
                _inventAccountType,
                this.inventTable().itemGroupId(),
                null,
                InventPostingExtendParm_CN::constructInventDim(this.inventDim()).parmInventSiteId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipEvents</Name>
				<Source><![CDATA[
    internal boolean shouldSkipEvents()
    {
        return PurchParameters::find().IsPurchUpdateSkipPurchLineEventsEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjResourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns project resource associated with the worker used by the project invoice.
    /// </summary>
    /// <returns>
    /// Id of the project resource record
    /// </returns>
    public ResourceRecId getProjResourceRecId()
    {
        return ResourceFacade::findByWorker(this.ProjWorker);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the purchase order line is invoiced.
    /// </summary>
    /// <returns>true if the purchase order line is invoiced; otherwise, false.</returns>
    public boolean isInvoiced()
    {
        return (this.PurchStatus == PurchStatus::Invoiced);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReceived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the purchase order line is received.
    /// </summary>
    /// <returns>true if the purchase order line is received; otherwise, false.</returns>
    public boolean isReceived()
    {
        return (this.PurchStatus == PurchStatus::Received);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isThreeWayMatchEnabled</Name>
				<Source><![CDATA[
    internal boolean isThreeWayMatchEnabled()
    {
        return this.MatchingPolicy == PurchMatchingPolicyOption::ThreeWayMatch 
            && VendParameters::find().editUseInvoiceMatching() 
            && !this.isIntercompanySalesLineCreditOnly();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCanceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the purchase order line is canceled.
    /// </summary>
    /// <returns>true if the purchase order line is canceled; otherwise, false.</returns>
    public boolean isCanceled()
    {
        return (this.PurchStatus == PurchStatus::Canceled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOpenOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the purchase order line is an open order line.
    /// </summary>
    /// <returns>true if the purchase order line is an open order line; otherwise, false.</returns>
    public boolean isOpenOrder()
    {
        return (this.PurchStatus == PurchStatus::Backorder || this.PurchStatus == PurchStatus::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Change which account is returned when getting the ledger account so that all the fixed asset
    /// transactions will use PurchReceiptFA account instead of the PurchReceipt account.
    /// </summary>
    /// <returns>
    /// LedgerAccount for the receipt transaction.
    /// </returns>
    display LedgerAccount accountReceipt()
    {
        LedgerAccount                   ledgerAccount;
        LedgerDimensionDefaultAccount   ledgerDimension;

        if (this.LedgerDimension && InventMovement::construct(this).mustBeBookedBalanceSheet())
        {
            ledgerDimension = this.LedgerDimension;
            ledgerAccount   = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(this.LedgerDimension);
        }
        else
        {
            if (this.AssetId)
            {
                ledgerDimension = InventPosting::accountItemWithBackupLedgerDimensionFromParameters(this.accountItemWithBackupLedgerDimensionParameters(InventAccountType::PurchReceiptFixedAsset,
                    InventAccountType::PurchReceipt,
                    0));    //V6 itemCategory
                ledgerAccount   = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerDimension);
            }
            else
            {
                ledgerDimension = InventPosting::accountItemLedgerDimensionFromParameters(
                    this.buildAccountItemLedgerDimensionParameter(
                        InventAccountType::PurchReceipt,
                        0,
                        //V6 itemCategory
                        this.VendAccount,
                        this.VendGroup));
                ledgerAccount   = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerDimension);
            }
        }

        return ledgerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementSkipAutoLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether this line should skip automatic <c>AgreementLine</c> matching
    /// </summary>
    /// <returns>
    /// True if no automatic matching should be done for this line
    /// </returns>
    /// <remarks>
    /// For delivery lines auto-linking should be always skipped,
    /// so this method always returns true for delivery lines.
    /// </remarks>
    public boolean agreementSkipAutoLink()
    {
        return (this.AgreementSkipAutoLink || this.LineDeliveryType == LineDeliveryType::DeliveryLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditReturnActionId</Name>
				<Source><![CDATA[
    boolean allowEditReturnActionId()
    {
        return this.type().allowEditReturnActionId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditScrap</Name>
				<Source><![CDATA[
    boolean allowEditScrap()
    {
        return this.type().allowEditScrap() && this.isStocked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditStockedProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>StockedProduct</c> field can be changed.
    /// </summary>
    /// <returns>
    /// true if the line is item based, the item is of type item, not a fixed asset,
    /// and the line has not been packing slip or invoice updated; otherwise, false.
    /// </returns>
    boolean allowEditStockedProduct()
    {
        return this.ItemId
            && !this.isPackingSlipOrInvoiceUpdated()
            && this.AssetId == ''
            && !this.CreateFixedAsset
            && this.inventTable().ItemType == ItemType::Item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditTax1099</Name>
				<Source><![CDATA[
    boolean allowEditTax1099()
    {
        boolean  ok = true;

        if (this.isInvoiced())
        {
            ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowInventProfileIdChange_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if InventProfileId_RU inventory dimension could be changed
    /// </summary>
    /// <param name="_showWarning">
    /// If "true" warning message is shown in case method returns false
    /// </param>
    /// <returns>
    /// true if InventProfileId_RU is allowed to change, otherwise, false.
    /// </returns>
    public boolean allowInventProfileIdChange_RU(boolean _showWarning = true)
    {
        if (this.isInvoiced()   ||
            (this.InventTransId                         &&
            (this.existInvoice_RU()                     ||
             VendInvoiceTrans::findInventTransId(this.InventTransId))))
        {
            if (_showWarning)
            {
                checkFailed(strFmt("@GLS116011", this.PurchId, fieldId2pname(tableNum(InventDim), fieldNum(InventDim, InventProfileId_RU))));
            }
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowPostingProfileChange_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if PostingProfile_RU field value could be changed
    /// </summary>
    /// <param name="_showWarning">
    /// If "true" warning message is shown in case method returns false
    /// </param>
    /// <returns>
    /// true if PostingProfile_RU is allowed to change, otherwise, false.
    /// </returns>
    public boolean allowPostingProfileChange_RU(boolean _showWarning = true)
    {
        if (this.isInvoiced() ||
            (this.InventTransId                         &&
            (this.existInvoice_RU()                    ||
             VendInvoiceTrans::findInventTransId(this.InventTransId))))
        {
            if (_showWarning)
            {
                checkFailed(strFmt("@GLS116011", this.PurchId, fieldId2pname(tableNum(PurchLine_W), fieldNum(PurchLine_W, PostingProfile_RU))));
            }
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowUpdateWithQualityOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the update of the purchase line is enabled, even if an open quality order exists.
    /// </summary>
    /// <returns>
    /// true if the update is enabled; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Normally an update is not enabled, but if the invoice posting fails, a pending invoice is saved and
    /// the remaining quantity is reset.
    /// </remarks>
    boolean allowUpdateWithQualityOrder()
    {
        PurchLine   purchLine_orig;

        if (!InventParameters::find().UseQualityManagement)
        {
            // Not using quality management for this company
            return true;
        }

        if (this.qualityOrderStatusDisplay() != InventTestOrderStatusDisplay::Open)
        {
            // No open quality order exists
            return true;
        }
        purchLine_orig = this.orig().data();

        // Changing the following fields is allowed so make those equal before comparing
        this.copyNoComparingFields(purchLine_orig);

        if (this.PackedExtensions               != conNull()
            || purchLine_orig.PackedExtensions  != conNull())
        {
            return this.SysExtensionSerializerMap::equal(purchLine_orig);
        }

        return this.equal(purchLine_orig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyNoComparingFields</Name>
				<Source><![CDATA[
    protected void copyNoComparingFields(PurchLine _purchLine)
    {
        _purchLine.PurchReceivedNow    = this.PurchReceivedNow;
        _purchLine.InventReceivedNow   = this.InventReceivedNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountItemWithBackupLedgerDimensionParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>InventPostingAccountItemWithBackupLedgerDimension</c> instance which is used for retrieving with backup ledger dimension.
    /// </summary>
    /// <param name="_inventAccountType">
    ///    The primary account type.
    /// </param>
    /// <param name="_inventbackupAccountType">
    ///    The backup account type.
    /// </param>
    /// <param name="_inventCategoryRelation">
    ///    The item category.
    /// </param>
    /// <returns>
    /// An <c>InventPostingAccountItemWithBackupLedgerDimension</c> instance.
    /// </returns>
    protected InventPostingAccountItemWithBackupLedgerDimensionParameters accountItemWithBackupLedgerDimensionParameters(InventAccountType _inventAccountType,
        InventAccountType _inventbackupAccountType,
        InventCategoryRelation _inventCategoryRelation)
    {
        InventPostingAccountItemWithBackupLedgerDimensionParameters backupParameters = InventPostingAccountItemWithBackupLedgerDimensionParameters::construct();

        backupParameters.accountType = _inventAccountType;
        backupParameters.backupAccountType = _inventbackupAccountType;
        backupParameters.itemId = this.ItemId;
        backupParameters.itemGroup = this.inventTable().itemGroupId();
        backupParameters.itemCategory = _inventCategoryRelation; // If a category relation is added to the table it can be supplied here
        backupParameters.accountNum = this.VendAccount;
        backupParameters.accountGroup = this.VendGroup;
        backupParameters.taxGroup = this.TaxGroup;
        // <GEERU>
        #ISOCountryRegionCodes
        backupParameters.inventDim_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) ? this.inventDim() : null;
        // </GEERU>

        return backupParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustExecutePurchTotalSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether <c>PurchTotalsSummaryController</c> is handled in <c>PurchLine</c> operations or not;
    /// </summary>
    /// <returns>true if the <c>PurchTotalsSummaryController</c> is handled in <c>PurchLine</c> operations; otherwise, false.</returns>
    protected boolean mustExecutePurchTotalSummary()
    {
        return isConfigurationkeyEnabled(configurationKeyNum(PublicSector));
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur amountExclTax(AmountCur amountCur, Qty  qty, TransDate transDate, Tax _tax = null, boolean _skipRounding = false, boolean _useRoundedTaxOrigin = true)
    {
        return this.salesPurchLineInterface().amountExclTax(amountCur, qty, transDate, _tax, _skipRounding, _useRoundedTaxOrigin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the company currency amount for a given amount.
    /// </summary>
    /// <param name="amountCur">
    /// The amount to convert.
    /// </param>
    /// <param name="exchRateDate">
    /// The date used to calculate the exchange rate; optional.
    /// </param>
    /// <param name="exchRate">
    /// The exchange rate to use, if known; optional.
    /// </param>
    /// <param name="exchrateSecondary">
    /// The secondary exchange rate to use, if known; optional.
    /// </param>
    /// <param name="exchRatesTriangulation">
    /// The exchange rate triangulation to use, if known; optional.
    /// </param>
    /// <returns>
    /// The amount in company currency.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public AmountMST amountMST(AmountCur               amountCur,
                               TransDate               exchRateDate            = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                               ExchRate                exchRate                = 0,
                               ExchrateSecondary       exchrateSecondary       = 0,
                               ExchRatesTriangulation  exchRatesTriangulation  = UnknownNoYes::Unknown)

    {
        return this.salesPurchLineInterface().amountMST(amountCur, exchRateDate, exchRate, exchrateSecondary, exchRatesTriangulation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>arrived</Name>
				<Source><![CDATA[
    display InventQtyArrived arrived()
    {
        if (this.InventTransId && this.isStocked())
        {
            return InventTransIdSumSingleStatus::qtyArrived(this.inventTransOriginId());
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>arrivedInPurchUnit</Name>
				<Source><![CDATA[
    display PurchQtyArrived arrivedInPurchUnit()
    {
        PurchQtyArrived purchQtyArrived = this.arrived();

        if (!purchQtyArrived)
        {
            return 0;
        }

        return this.unitConvertInvent2Purch(purchQtyArrived);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the account that is returned when getting the ledger dimension so that all fixed asset
    /// transactions will use the <c>PurchRecieptFA</c> account instead of the <c>PurchConsump</c> account.
    /// </summary>
    /// <returns>
    /// A <c>LedgerDimensionDefaultAccount</c> value.
    /// </returns>
    private LedgerDimensionDefaultAccount assetLedgerDimension()
    {
        AssetTransType  assetTransType;
        AssetBook       assetBook;

        assetBook = AssetBook::find(this.AssetId, this.AssetBookId);
        assetTransType = AssetPost::assetTransTypePurch2AssetTransType(this.AssetTransTypePurch);

        return AssetLedgerAccounts::assetLedgerDimension(this.AssetId, this.AssetBookId, assetTransType,
                            assetBook.PostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetUpdateInventTrans</Name>
				<Source><![CDATA[
    void assetUpdateInventTrans()
    {
        if (this.InventTransId && this.isStocked())
        {
            AssetInventTrans::changeAssetId(
                this.inventTransOriginId(),
                this.orig().AssetId,
                this.AssetId,
                this.AssetBookId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGrossAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcGrossAmount(Qty qty   = this.PurchQty)
    {
        return this.salesPurchLineInterface().calcGrossAmount(qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGrossAmountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcGrossAmountExclTax(Qty  qty = this.PurchQty, TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null)
    {
        return this.salesPurchLineInterface().calcGrossAmountExclTax(qty, this.taxDate(transDate), _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmount(Qty  qty = this.PurchQty)
    {
        return this.salesPurchLineInterface().calcLineAmount(Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmountExclTax(Qty  qty = this.PurchQty, TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null, boolean _skipRounding = false)
    {
        return this.calculateLineAmountExcludingTax(qty, transDate, _tax, _skipRounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLineAmountExcludingTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calculateLineAmountExcludingTax(
        Qty         _qty                    = this.PurchQty,
        TransDate   _transDate              = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        Tax         _tax                    = null,
        boolean     _skipRounding           = false,
        boolean     _useRoundedTaxOrigin    = true)
    {
        return this.salesPurchLineInterface().calcLineAmountExclTax(_qty, this.taxDate(_transDate), _tax, _skipRounding, _useRoundedTaxOrigin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountForced</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmountForced(Qty _qty = this.PurchQty, PriceDiscPolicyCheckPolicy  _checkPolicy = null)
    {
        return this.salesPurchLineInterface().calcLineAmountForced(_qty, _checkPolicy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountForcedInteraction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the line amount with user interaction if associated link to agreement line becomes invalid.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID for the field which changes require recalculation of line amount.
    /// </param>
    /// <param name="_qty">
    /// The purchase quantity used for calculating the line amount.
    /// </param>
    /// <param name="_recalcValidLink">
    /// A Boolean value that indicates whether to calculate line amount if the agreement link is valid; optional.
    /// </param>
    /// <returns>
    /// The line amount.
    /// </returns>
    /// <remarks>
    /// Used when there is a need for the option to dissociate agreement line via prompt if changes will make the existing association to a agreement line invalid.
    /// </remarks>
    public AmountCur calcLineAmountForcedInteraction(
        FieldId _fieldId,
        Qty     _qty             = this.PurchQty,
        boolean _recalcValidLink = true)
    {
        PurchLine   purchLineOrig;
        AmountCur   ret;
        boolean     isAgreementLinkRefreshed = true;

        AmountCur   localOrigLineAmount  = this.LineAmount; //This variable is needed for the uncommitted scenario as <>.orig.LineAmont returns the database value.

        if (_recalcValidLink && this.purchTable().MatchingAgreement)
        {
            //The impact on line amount should be included in the agreement link validation.
            this.LineAmount      = this.calcLineAmountForced(this.PurchQty);
            isAgreementLinkRefreshed = this.refreshAgreementLink(new AgreementAutolinkHelperPurchLine());

            this.LineAmount      = localOrigLineAmount;
        }

        if (!isAgreementLinkRefreshed)
        {
            if (this.unLinkAgreementLinePrompt(_fieldId))
            {
                if (_fieldId)
                {
                    this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, _fieldId);
                }
                if (this.ManualEntryChangepolicy
                   && this.SystemEntryChangePolicy)
                {
                    this.PriceDiscResultFields::mergerPriceDiscPolicies(ModuleSalesPurch::Purch);
                }

                if (this.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries
                    || (this.LineDeliveryType == LineDeliveryType::OrderLine
                    && this.doReCalcPricesFromBasePrompt()))
                {
                    purchLineOrig.data(this);
                    PurchLine::modifyPurchQty(this, this.inventDim());
                    this.(_fieldId) = purchLineOrig.(_fieldId);
                }
                ret = this.calcLineAmountForced(_qty);
            }
            else
            {
                ret = this.LineAmount;

                if (!ret && PurchLineMaxEnforcedAgreementExcessRevertedFlight::instance().isEnabled())
                {
                    this.(_fieldId) = this.orig().(_fieldId);
                }
            }
        }
        else
        {
            ret = _recalcValidLink ? this.calcLineAmountForced(_qty) : this.LineAmount;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountInclTax_RU</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmountInclTax_RU(Qty  qty = this.PurchQty, TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return this.salesPurchLineInterface().calcLineAmountInclTax_RU(qty, this.taxDate(transDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountInteraction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the line amount with user interaction if associated link to agreement line becomes
    /// invalid.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID for the field which changes require recalculation of line amount.
    /// </param>
    /// <param name="_qty">
    /// The purchase quantity to calculate line amount for.
    /// </param>
    /// <returns>
    /// The calculated line amount.
    /// </returns>
    /// <remarks>
    /// Used when you need the option to dissociate an agreement line via prompt if changes will make the
    /// existing association to a agreement line invalid.
    /// </remarks>
    public AmountCur calcLineAmountInteraction(FieldId _fieldId, Qty _qty = this.PurchQty)
    {
        PurchLine   purchLineOrig;
        AmountCur   ret;

        if (this.RecId && this.purchTable().MatchingAgreement && !this.refreshAgreementLink(new AgreementAutolinkHelperPurchLine()))
        {
            if (this.unLinkAgreementLinePrompt(_fieldId))
            {
                if (this.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries
                    || (this.LineDeliveryType == LineDeliveryType::OrderLine
                        && this.doReCalcPricesFromBasePrompt()))
                {
                    purchLineOrig.data(this);
                    PurchLine::modifyPurchQty(this, this.inventDim());
                    this.(_fieldId) = purchLineOrig.(_fieldId);
                }
                ret = this.calcLineAmount(_qty);
            }
            else
            {
                ret = this.LineAmount;
            }
        }
        else
        {
            ret = this.calcLineAmount(_qty);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineDisc</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public DiscAmount calcLineDisc(Qty    qty   = this.PurchQty)
    {
        return this.salesPurchLineInterface().calcLineDisc(qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineDiscExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public DiscAmount calcLineDiscExclTax(Qty qty = this.PurchQty, TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null)
    {
        return this.salesPurchLineInterface().calcLineDiscExclTax(qty, this.taxDate(transDate), _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineDiscUnit</Name>
				<Source><![CDATA[
    display public UnitDiscountAmountCur calcLineDiscUnit()
    {
        if (this.PurchQty)
        {
            return this.calcLineDisc() / this.PurchQty * this.PriceUnit;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPendingLineAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a sum of the <c>LineAmount</c> values that are in transaction and company currency for
    /// all pending invoice lines that are connected to this record in the <c>PurchLine</c> table.
    /// </summary>
    /// <param name="_excludeTableRefId">
    /// A <c>TableRefId</c> value for which to exclude invoices; optional.
    /// </param>
    /// <returns>
    /// A container with the sum of the <c>LineAmount</c> values and the <c>LineAmount</c> values in the
    /// default currency.
    /// </returns>
    /// <remarks>
    /// Records in the <c>VendInvoiceInfoLine</c> table are used in the calculation. The exchange rate from
    /// the <c>VendInvoiceInfoTable</c> table is used if populated; otherwise, the exchange rate is
    /// retrieved.
    /// </remarks>
    public container calcPendingLineAmounts(TradeLineRefId _excludeTableRefId = '')
    {
        VendInvoiceInfoLine     vendInvoiceInfoLine;
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        container               lineAmounts;
        LineAmount              lineAmount, lineAmountMST;

        // sum for all saved invoice lines connected to this PO line

        while select * from vendInvoiceInfoLine
            where
                vendInvoiceInfoLine.InventTransId == this.InventTransId &&
                (!_excludeTableRefId || vendInvoiceInfoLine.TableRefId != _excludeTableRefId)
            join * from vendInvoiceInfoTable
                where
                    vendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId &&
                    vendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId &&
                    (vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Waiting ||
                        vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::ContainErrors)
        {
            lineAmount += vendInvoiceInfoLine.LineAmount;
            lineAmountMST += vendInvoiceInfoLine.lineAmountMST(vendInvoiceInfoTable.updateDate(), vendInvoiceInfoTable.ExchRate,
                vendInvoiceInfoTable.ExchRateSecondary, Currency::noYes2UnknownNoYes(vendInvoiceInfoTable.euroTriangulation));
        }

        lineAmounts = [lineAmount,lineAmountMST];
        return lineAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPendingMatchedQtyInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a sum of the <c>InventNow</c> quantities for invoice lines that are connected to this
    /// record in the <c>PurchLine</c> table that are matched to a packing slip.
    /// </summary>
    /// <param name="_pendingOnly">
    /// A Boolean value that indicates whether only pending invoice lines are considered connected;
    /// optional.
    /// </param>
    /// <returns>
    /// The calculated <c>InventNow</c> quantity.
    /// </returns>
    /// <remarks>
    /// Records in the <c>VendInvoiceInfoSubLine</c> table are used in the calculation.
    /// </remarks>
    public InventQty calcPendingMatchedQtyInvent(boolean _pendingOnly = true)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceInfoSubLine vendInvoiceInfoSubLine;

        // sum for all saved invoice sub lines connected to this PO line

        select sum(InventNow) from vendInvoiceInfoSubLine
            exists join vendInvoiceInfoLine
                where
                    vendInvoiceInfoLine.RecId == vendInvoiceInfoSubLine.LineRefRecId &&
                    vendInvoiceInfoLine.InventTransId == this.InventTransId
            exists join vendInvoiceInfoTable
                where
                    vendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId &&
                    vendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId &&
                    (vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Waiting ||
                        vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::ContainErrors) &&
                    (!_pendingOnly || vendInvoiceInfoTable.VendInvoiceSaveStatus == VendInvoiceSaveStatus::Pending);

        return vendInvoiceInfoSubLine.InventNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPendingMatchedQtyPurch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of the <c>ReceiveNow</c> quantity for invoice lines that are connected to this
    /// <c>PurchLine</c> table record, which are matched to a packing slip.
    /// </summary>
    /// <param name="_pendingOnly">
    /// A Boolean value that specifies whether only pending invoice lines are considered connected.
    /// </param>
    /// <param name="_openEndedOnly">
    /// A Boolean value which determines whether to consider only sub lines without a relationship to a
    /// packing slip.
    /// </param>
    /// <returns>
    /// The calculated <c>ReceiveNow</c> quantity.
    /// </returns>
    /// <remarks>
    /// Records from the <c>VendInvoiceInfoSubLine</c> table are used in the calculation.
    /// </remarks>
    public PurchQty calcPendingMatchedQtyPurch(boolean _pendingOnly = true, boolean _openEndedOnly = false)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceInfoSubLine vendInvoiceInfoSubLine;

        // sum for all saved invoice sub lines connected to this PO line

        select sum(ReceiveNow) from vendInvoiceInfoSubLine
            exists join vendInvoiceInfoLine
                where
                    vendInvoiceInfoLine.RecId == vendInvoiceInfoSubLine.LineRefRecId &&
                    vendInvoiceInfoLine.InventTransId == this.InventTransId &&
                    (!_openEndedOnly || vendInvoiceInfoSubLine.JournalRefRecId == 0)
            exists join vendInvoiceInfoTable
                where
                    vendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId &&
                    vendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId &&
                    (vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Waiting ||
                        vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::ContainErrors) &&
                    (!_pendingOnly || vendInvoiceInfoTable.VendInvoiceSaveStatus == VendInvoiceSaveStatus::Pending);

        return vendInvoiceInfoSubLine.ReceiveNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPendingQtyInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a sum of the <c>InventNow</c> quantities for all pending invoice lines that are
    /// connected to this record in the <c>PurchLine</c> table.
    /// </summary>
    /// <returns>
    /// The calculated <c>InventNow</c> quantity.
    /// </returns>
    /// <remarks>
    /// Records in the <c>VendInvoiceInfoLine</c> table are used in the calculation.
    /// </remarks>
    public InventQty calcPendingQtyInvent()
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceInfoTable vendInvoiceInfoTable;

        // sum for all saved invoice lines connected to this PO line
        select sum(InventNow) from vendInvoiceInfoLine
            where
                vendInvoiceInfoLine.InventTransId == this.InventTransId
            exists join vendInvoiceInfoTable
                where
                    vendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId &&
                    vendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId &&
                    (vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Waiting ||
                        vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::ContainErrors);

        return vendInvoiceInfoLine.InventNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPendingQtyPurch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a sum of the <c>ReceiveNow</c> quantities for all pending invoice lines that are
    /// connected to this record in the <c>PurchLine</c> table.
    /// </summary>
    /// <returns>
    /// The calculated <c>ReceiveNow</c> quantity.
    /// </returns>
    /// <remarks>
    /// Records from the <c>VendInvoiceInfoLine</c> table are used in the calculation.
    /// </remarks>
    public PurchQty calcPendingQtyPurch()
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceInfoTable vendInvoiceInfoTable;

        if (!this.InventTransId)
        {
            return 0;
        }

        // sum for all saved invoice lines connected to this PO line
        select sum(ReceiveNow) from vendInvoiceInfoLine
            where
                vendInvoiceInfoLine.InventTransId == this.InventTransId
            exists join vendInvoiceInfoTable
                where
                    vendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId &&
                    vendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId &&
                    (vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Waiting ||
                        vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::ContainErrors);

        return vendInvoiceInfoLine.ReceiveNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPendingQtyPurchDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sum of the <c>ReceiveNow</c> quantities for all pending invoice lines that are
    /// connected to this record in the <c>PurchLine</c> table.
    /// </summary>
    /// <returns>
    /// The calculated <c>ReceiveNow</c> quantity.
    /// </returns>
    /// <remarks>
    /// Records from both the <c>PurchParmLine</c> table and the <c>VendInvoiceInfoLine</c> table are used
    /// in the calculation.
    /// </remarks>
    public display UnpostedInvoicePurchQty calcPendingQtyPurchDisplay()
    {
        return this.calcPendingQtyPurch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPrice2LineAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcPrice2LineAmount(Qty _qty, boolean _forceLineAmountCalculation)
    {
        return this.salesPurchLineInterface().calcPrice2LineAmount(_qty, _forceLineAmountCalculation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProjSalesPriceIfDefault</Name>
				<Source><![CDATA[
    private AmountCur calcProjSalesPriceIfDefault()
    {
        AmountCur amountCur = this.PurchQty != 0 ? (this.LineAmount / this.PurchQty) : 0;

        if (this.defaultCostPriceAsSalesPrice() && this.CurrencyCode != this.ProjSalesCurrencyId)
        {
            amountCur = CurrencyExchangeHelper::curAmount2CurAmount(amountCur,
                                                               this.CurrencyCode,
                                                               this.ProjSalesCurrencyId,
                                                               this.DeliveryDate,
                                                               false);
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyOrdered</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public InventQty calcQtyOrdered(Qty    purchQty = this.PurchQty)
    {
        return this.salesPurchLineInterface().calcQtyOrdered(purchQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAgreementBeLinked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the purchase line can be linked to an agreement line.
    /// </summary>
    /// <returns>
    /// true if the purchase order line can be linked to an agreement line; otherwise, false.
    /// </returns>
    public boolean canAgreementBeLinked()
    {
        return this.type().canAgreementBeLinked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canApplyAllocationOrDistributionTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether to use an allocation or distribution template to create the distributions of the
    /// transaction line.
    /// </summary>
    /// <returns>
    /// true if the distribution template will be used; otherwise, false.
    /// </returns>
    public boolean canApplyAllocationOrDistributionTemplate()
    {
        boolean projMultipleFundingSources = false;

        projMultipleFundingSources = (this.ProjId && ProjInvoiceTable::hasMultipleFundingSources(ProjTable::projInvoiceStatic(this.ProjId).ProjInvoiceProjId));

        if (!this.hasAssetAssociated() && !this.isStocked() && !(projMultipleFundingSources) && !this.isInvoiceMatched())
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAutoUpdatePurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the table buffer is restricted by the change management functionality.
    /// </summary>
    /// <returns>
    /// true if the buffer can be updated; otherwise, false.
    /// </returns>
    public boolean canAutoUpdatePurchLine()
    {
        return !this.purchTable().ChangeRequestRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditDisc</Name>
				<Source><![CDATA[
    // This method is called when setting disc fields
    boolean canEditDisc()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditLedgerDimensionDefaultAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the ledger dimension default account can be edited.
    /// </summary>
    /// <returns>
    /// True if the ledger dimension default account is editable; otherwise false.
    /// </returns>
    public boolean canEditLedgerDimensionDefaultAccount()
    {
        boolean             canEditLedgerDimensionDefaultAccount;
        #isoCountryRegionCodes

        if (this.isStocked()            == false
            && this.ProjId              == ''
            && this.AssetGroup          == ''
            && this.AssetId             == ''
            && this.isSubcontracted()   == false
            && (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
                || !this.purchLine_W().MarkupCode_RU)
        )
        {
            canEditLedgerDimensionDefaultAccount = true;
        }
        else
        {
            canEditLedgerDimensionDefaultAccount = false;
        }

        return canEditLedgerDimensionDefaultAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canFinalize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the purchase order line can be finalized.
    /// </summary>
    /// <param name="_checkHeader">
    ///    Check header status.
    /// </param>
    /// <returns>
    ///    true if the the purchase order line can be finalized; otherwise, false.
    /// </returns>
    public boolean canFinalize(boolean _checkHeader = true)
    {
        boolean isInvoiced = this.isInvoiced();
        boolean isCanceled = this.isCanceled();

        boolean lineCanFinalize = (isInvoiced || isCanceled || this.IsDeleted == NoYes::Yes)
            && (this.IsFinalized == NoYes::No
                || (PurchLineCanFinalizeFlight::instance().isEnabled()
                    && this.sourceDocumentLine().AccountingStatus == SourceDocumentLineAccountingStatus::Completed));

        using (SysInstrumentationActivityContext activityContext = PurchInstrumentationLogger::createLogger(tableStr(PurchLine)).purchFinalize().canFinalizeLine(this, isInvoiced, isCanceled, _checkHeader))
        {
            if (_checkHeader)
            {
                lineCanFinalize = lineCanFinalize
                                    && this.purchTable().DocumentState == VersioningDocumentState::Confirmed;
            }

            activityContext.addCustomProperty('LineCanFinalize', int2Str(lineCanFinalize));
        }

        return lineCanFinalize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method are testing if the current <c>PurchLine</c> can be submitted to workflow.
    /// </summary>
    /// <param name="workflowType">Workflow type</param>
    /// <returns>
    ///     Returns true if the current record can be submitted to workflow, otherwise false.
    /// </returns>
    public boolean canSubmitToWorkflow(str workflowType = '')
    {
        boolean     canSubmit = false;

        if (this.RecId
        &&  this.WorkflowState  == TradeWorkflowState::NotSubmitted)
        {
            canSubmit = true;
        }

        return canSubmit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public str caption()
    {
        return strFmt("%1: %2, %3, %4",
            "@SYS15812", this.PurchId,
            strFmt("@SYS343102", this.LineNumber),
            this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkActivity</Name>
				<Source><![CDATA[
    boolean checkActivity()
    {
        boolean ret = true;

        if (this.ActivityNumber)
        {
            ret = ProjActivityHelper::validateProjActivityParentLinkV2(this.ProjId, this.ActivityNumber);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndPromptFixedLineAmount</Name>
				<Source><![CDATA[
    boolean checkAndPromptFixedLineAmount()
    {
        return this.PriceDiscLine::checkAndPromptFixedLineAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAssetBookId</Name>
				<Source><![CDATA[
    boolean checkAssetBookId()
    {
        boolean ret  = true;

        // check that AssetId is always set for current AssetBookId
        if (this.AssetBookId && !this.AssetId)
        {
            ret = ret && checkFailed(strFmt("@FixedAssets:FA_MessageValidation_AssetBookDoesNotExist",this.AssetId,this.AssetBookId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBudgetReservationBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the budget reservation balance.
    /// </summary>
    public void checkBudgetReservationBalance()
    {
        if (this.isBudgetReservationLineReferenced())
        {
            BudgetReservation_PSN::checkBudgetReservationBalance(
                this.BudgetReservationLine_PSN,
                this.purchTable().SourceDocumentHeader);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkChangedFieldsForConsignmentAreValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the line is for consignment and any of the quantity fields is being updated.
    /// </summary>
    /// <returns>
    /// true if line is not consignment or if none of the quantity fields are being updated; otherwise, false.
    /// </returns>
    /// <param name = "_purchLineOrig">
    /// The original purchase order line which is updated.
    /// </param>
    /// <remarks>
    /// For a purchase order line which originates from consignment we don't allow edit on quantity, unit, over delivery, under delivery or deliver remainder fields.
    /// </remarks>
    public boolean checkChangedFieldsForConsignmentAreValid(PurchLine _purchLineOrig)
    {
        boolean ret = true;

        if (this.isConsignmentOrder())
        {
            ret = ret && this.checkChangedFieldForConsignmentAreValid(_purchLineOrig, fieldNum(PurchLine, PurchQty));
            ret = ret && this.checkChangedFieldForConsignmentAreValid(_purchLineOrig, fieldNum(PurchLine, PurchUnit));
            ret = ret && this.checkChangedFieldForConsignmentAreValid(_purchLineOrig, fieldNum(PurchLine, QtyOrdered));
            ret = ret && this.checkChangedFieldForConsignmentAreValid(_purchLineOrig, fieldNum(PurchLine, OverDeliveryPct));
            ret = ret && this.checkChangedFieldForConsignmentAreValid(_purchLineOrig, fieldNum(PurchLine, UnderDeliveryPct));
            ret = ret && this.checkChangedFieldForConsignmentAreValid(_purchLineOrig, fieldNum(PurchLine, RemainInventPhysical));
            ret = ret && this.checkChangedFieldForConsignmentAreValid(_purchLineOrig, fieldNum(PurchLine, RemainPurchPhysical));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkChangedFieldForConsignmentAreValid</Name>
				<Source><![CDATA[
    private boolean checkChangedFieldForConsignmentAreValid(PurchLine _purchLineOrig, FieldId _purchaseOrderLineFieldId)
    {
        boolean ret = true;

        if (_purchLineOrig.(_purchaseOrderLineFieldId) != this.(_purchaseOrderLineFieldId))
        {
            ret = checkFailed(strFmt("@Consignment:MessageValidation_PurchaseOrderLine_FieldChanged",
                    new SysDictField(tableNum(PurchLine), _purchaseOrderLineFieldId).label()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCommitmentVendorMatchesOrderAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the order account for the current purchase order header matches the vendor account
    /// on the commitment related to the current purchase order line, if the commitment has a vendor account specified.
    /// </summary>
    /// <param name="_newOrderAccount">
    /// The account number that should be validated against.  If no value is specified then it will be retrieved from the purchase order header.
    /// </param>
    /// <returns>
    /// true if the vendor account on the related commitment is blank or matches the order account on the purchase order header; otherwise, false.
    /// </returns>
    public boolean checkCommitmentVendorMatchesOrderAccount(VendAccount _newOrderAccount = '')
    {
        PurchCommitmentHeader_PSN       purchCommitmentHeader;
        VendAccount                     orderAccount;

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            purchCommitmentHeader = this.getPurchCommitmentLine_PSN().getPurchCommitmentHeader_PSN();

            // If the _newOrderAccount is specified, then we want to use that value, otherwise we retrieve it from the header table.
            if (_newOrderAccount != '')
            {
                orderAccount = _newOrderAccount;
            }
            else
            {
                orderAccount = this.purchTable().OrderAccount;
            }

            // Verify that the order account on the PO matches the vendor account on the commitment.
            if (purchCommitmentHeader.VendorAccount != ''
                && orderAccount != purchCommitmentHeader.VendorAccount)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCrossdocking</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Checks whether the relevant cross docking quantity exceeds the ordered quantity.
    /// </summary>
    void checkCrossdocking()
    {
        RetailBuyersPushLine   buyersPushLine;
        Qty                    buyerPushQty;

        select firstonly buyersPushLine
        where buyersPushLine.RefRecId == this.RecId;

        if (buyersPushLine)
        {
            buyerPushQty = buyersPushLine.totalQty();
        
            if (buyersPushLine.UnitID != this.PurchUnit)
            {
                buyerPushQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                                     this.InventDimId,
                                                                                                     buyerPushQty,
                                                                                                     buyersPushLine.UnitID,
                                                                                                     this.PurchUnit,
                                                                                                     NoYes::No);
            }
        
            if (buyerPushQty > this.PurchQty)
            {
                info(strFmt("@RET820",this.PurchId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCurrencyCode</Name>
				<Source><![CDATA[
    boolean checkCurrencyCode()
    {
        boolean  ok = true;

        if (! Currency::exist(this.CurrencyCode))
        {
            ok = checkFailed(strFmt("@SYS1458", this.CurrencyCode));
        }

        if (this.purchTable().CurrencyCode   != this.CurrencyCode)
        {
            ok = checkFailed("@SYS20793");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustomerRef</Name>
				<Source><![CDATA[
    boolean checkCustomerRef()
    {
        boolean     ok = true;
        PurchLine   purchLine;

        select count(RecId) from purchLine
            index hint PurchLineIdx
            where purchLine.PurchId             == this.PurchId
               && purchLine.DeliveryPostalAddress == this.DeliveryPostalAddress
               && purchLine.CustomerRef         != this.CustomerRef
               && purchLine.RecId               != this.RecId
               && !purchLine.IsDeleted;

        if (purchLine.RecId)
        {
            ok = checkFailed("@SYS78581");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustPurchaseOrderFormNum</Name>
				<Source><![CDATA[
    boolean checkCustPurchaseOrderFormNum()
    {
        boolean     ok = true;
        PurchLine   purchLine;

        select count(RecId) from purchLine
            index hint PurchLineIdx
            where purchLine.PurchId                     == this.PurchId
               && purchLine.DeliveryPostalAddress       == this.DeliveryPostalAddress
               && purchLine.CustPurchaseOrderFormNum    != this.CustPurchaseOrderFormNum
               && purchLine.RecId                       != this.RecId
               && !purchLine.IsDeleted;

        if (purchLine.RecId)
        {
            ok = checkFailed("@SYS78581");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDelete</Name>
				<Source><![CDATA[
    boolean checkDelete(boolean _useWarning = true, PurchTable _purchTable = this.purchTable())
    {
        return this.type(_purchTable).checkDelete(_useWarning);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistsInvoiceWithBudgetCheckResults</Name>
				<Source><![CDATA[
    public boolean checkExistsInvoiceWithBudgetCheckResults()
    {
        boolean ok = true;

        if (this.getBudgetCheckResult() != BudgetCheckResult::NoCheck
            && this.existInvoice())
        {
            // Updates are not allowed when there is a pending invoice and the line has budget check results.
            ok = checkFailed("@SCM:PurchaseOrderLineUpdateWithPendingInvoiceError");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFullyDistributedAndQualified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the purchase order line is fully distributed and fully qualified.
    /// </summary>
    /// <param name="_caller">
    /// The calling source document processor.
    /// </param>
    /// <param name="_user">
    /// The user that submitted the source document implementation for processing; optional.
    /// </param>
    /// <returns>
    /// true if the purchase order line is fully distributed and qualified; otherwise, false.
    /// </returns>
    boolean checkFullyDistributedAndQualified(
        SourceDocumentProcessorCaller           _caller = null,
        UserId                                  _user = curUserId()
        )
    {
        SourceDocumentLine  sourceDocumentLine = this.sourceDocumentLine();

        if (sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Draft
            || sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::PartlyDistributed)
        {
            // Make sure the line is fully distributed
            SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(
                this, true, SourceDocumentLineAccountingStatus::FullyDistributed, _caller, _user);
        }

        // Check that line distributions are fully qualified.
        return SourceDocumentProvider::areSourceDocLineAccDistAccountValid(
            SourceDocumentLine::find(this.SourceDocumentLine), true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfInvoiceRegistered_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the invoice is registered.
    /// </summary>
    /// <returns>
    /// Returns true if the invoice is registered.
    /// </returns>
    public boolean checkIfInvoiceRegistered_IN()
    {
        boolean ok = true;

        if (PurchTable::find(this.PurchId).purchTable_W().CustomsImportOrder_IN == NoYes::Yes
            && CustomsInvoiceRegnTrans_IN::findByPurchLineRecId(this.RecId).RecId != 0)
        {
            ok = checkFailed("@GLS5764");
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInitFromInventTable</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public boolean checkInitFromInventTable(InventTable inventTable)
    {
        return this.salesPurchLineInterface().checkInitFromInventTable(inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIntrastat</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Validates the intrastat setting on the item associated to the order line.
    /// </summary>
    /// <returns>
    ///   true if the validation passes; Otherwise, false.
    /// </returns>
    public boolean checkIntrastat()
    {
        VendTable            vendTable;
        IntrastatParameters  intrastatParameters;
        InventTable          inventTable;
        boolean              ret = true;
        boolean              checkIntrastatLT;
        PurchLineForeignTradeCategory   purchLineForeignTradeCategory;
        #ISOCountryRegionCodes

        vendTable           = VendTable::find(this.purchTable().OrderAccount);
        intrastatParameters = IntrastatParameters::find();
        inventTable         = this.inventTable();

        if (! inventTable.IntrastatExclude
            //only perform check when vendor is from an EU country
            && IntrastatCountryRegionParameters::isCountryRegionStateInEU(vendTable.postalAddress()))
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
            {
                if (intrastatParameters.IntrastatFulfillmentDateEmptyWarning_HU && ! this.IntrastatFulfillmentDate_HU)
                {
                    ret = checkFailed(strFmt("@SYS4080006", fieldPName(PurchLine, IntrastatFulfillmentDate_HU), this.InventTransId));
                }
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
            {
                VendInvoiceTrans vendInvoiceTrans;
                vendInvoiceTrans.initFromPurchLine(this, null);
                if (this.isCategoryBased())
                {
                    vendInvoiceTrans.initFromPurchLineForeignTradeCategory(PurchLineForeignTradeCategory::findpurchLine(this));
                }
                checkIntrastatLT = Intrastat::isIntrastatLine(vendInvoiceTrans);

                if (checkIntrastatLT)
                {
                    if (intrastatParameters.State             && ! this.deliveryAddress().State)
                    {
                        ret = checkFailed("@SYS57801");
                    }

                    if (intrastatParameters.TransactionCode   && ! this.TransactionCode)
                    {
                        ret = checkFailed("@SYS27175");
                    }

                    if (intrastatParameters.TransportMode     && ! this.Transport)
                    {
                        ret = checkFailed("@GLS107639");
                    }

                    if (intrastatParameters.Port              && ! this.Port)
                    {
                        ret = checkFailed("@GLS107640");
                    }

                    if (this.ItemId)
                    {
                        if (intrastatParameters.IntrastatItemcode && ! this.IntrastatCommodity)
                        {
                            ret = checkFailed(strFmt("@GLS107643", inventTable.ItemId));
                        }

                        if (intrastatParameters.OrigCountryRegion && ! this.OrigCountryRegionId)
                        {
                            ret = checkFailed(strFmt("@GLS107645", inventTable.ItemId));
                        }

                        if (intrastatParameters.Weight            && ! inventTable.NetWeight)
                        {
                            ret = checkFailed(strFmt("@GLS107646", inventTable.ItemId));
                        }

                        if (intrastatParameters.AdditionalUnit    && ! IntrastatUnitUtil::isAdditionalUnitSet(this.IntrastatCommodity))
                        {
                            ret = checkFailed(strFmt("@GLS107644", inventTable.ItemId));
                        }
                    }
                    else
                    {
                        if (intrastatParameters.Weight            && ! purchLineForeignTradeCategory.UnitWeight)
                        {
                            ret = checkFailed(strFmt("@SYS4082092", this.ProcurementCategory));
                        }

                        if (intrastatParameters.OrigCountryRegion && ! this.OrigCountryRegionId)
                        {
                            ret = checkFailed(strFmt("@SYS4082093", this.ProcurementCategory));
                        }
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventReceivedNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the received now quantity is valid.
    /// </summary>
    /// <returns>
    /// true if the received now quantity is valid; otherwise, false.
    /// </returns>
    boolean checkInventReceivedNow()
    {
        boolean  ok = true;

        if (this.QtyOrdered * this.InventReceivedNow < 0)
        {
            ok = checkFailed("@SYS323005");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvoiceConstraints</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether there were no field changes that would require a distribution update if the line
    /// is invoice-matched.
    /// </summary>
    /// <param name = "_purchLineOrig">
    /// The original purchase order line which is updated.
    /// </param>
    protected void checkInvoiceConstraints(PurchLine _purchLineOrig)
    {
        if (this.isInvoiceMatched())
        {
            var invoiceConstraintFieldsValidationResult = this.validateInvoiceConstraintFields(_purchLineOrig);
            if ((this.LineNumber != _purchLineOrig.LineNumber
                    && this.LineNumber != -_purchLineOrig.LineNumber)
                || !invoiceConstraintFieldsValidationResult
                || !DimensionDefaultFacade::areEqual(this.DefaultDimension, _purchLineOrig.DefaultDimension)
                || !LedgerDimensionFacade::areEqual(this.LedgerDimension, _purchLineOrig.LedgerDimension)
                || (this.InventDimId != _purchLineOrig.InventDimId
                    && (this.inventDim().InventLocationId != _purchLineOrig.inventDim().InventLocationId
                        || this.inventDim().InventSiteId != _purchLineOrig.inventDim().InventSiteId)
                )
                )
            {
                throw error(strFmt("@SCM:PurchSourceDocumentUpdateLine",
                    _purchLineOrig.PurchId,
                    _purchLineOrig.ItemId ? _purchLineOrig.ItemId : EcoResCategory::find(_purchLineOrig.ProcurementCategory).Name,
                    _purchLineOrig.QtyOrdered,
                    _purchLineOrig.LineNumber));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoiceConstraintFields</Name>
				<Source><![CDATA[
    private boolean validateInvoiceConstraintFields(PurchLine _purchLineOrig)
    {
        Set fieldIds;
        SetEnumerator se;
        FieldId currentFieldId;

        fieldIds = this.retrieveConstraintFields();
        se = fieldIds.getEnumerator();

        while(se.moveNext())
        {
            currentFieldId = se.current();
            if (this.(currentFieldId) != _purchLineOrig.(currentFieldId))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveConstraintFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the fields for constraint validation.
    /// </summary>
    /// <returns>
    /// The set of fields to be validated.
    /// </returns>
    [Replaceable]
    protected Set retrieveConstraintFields()
    {
        Set constraintFieldIDs = new Set(Types::Integer);
        
        constraintFieldIDs.add(fieldNum(PurchLine, PurchQty));
        constraintFieldIDs.add(fieldNum(PurchLine, PurchUnit));
        constraintFieldIDs.add(fieldNum(PurchLine, PurchPrice));
        constraintFieldIDs.add(fieldNum(PurchLine, LineDisc));
        constraintFieldIDs.add(fieldNum(PurchLine, LinePercent));
        constraintFieldIDs.add(fieldNum(PurchLine, MultiLnDisc));
        constraintFieldIDs.add(fieldNum(PurchLine, MultiLnPercent));
        constraintFieldIDs.add(fieldNum(PurchLine, PriceUnit));
        constraintFieldIDs.add(fieldNum(PurchLine, PurchMarkup));
        constraintFieldIDs.add(fieldNum(PurchLine, LineAmount));
        constraintFieldIDs.add(fieldNum(PurchLine, TaxGroup));
        constraintFieldIDs.add(fieldNum(PurchLine, TaxItemGroup));
        constraintFieldIDs.add(fieldNum(PurchLine, DeliveryPostalAddress));
        constraintFieldIDs.add(fieldNum(PurchLine, ProjId));
        constraintFieldIDs.add(fieldNum(PurchLine, ActivityNumber));
        constraintFieldIDs.add(fieldNum(PurchLine, ProjCategoryId));
        constraintFieldIDs.add(fieldNum(PurchLine, ProjLinePropertyId));
        constraintFieldIDs.add(fieldNum(PurchLine, ProjTaxGroupId));
        constraintFieldIDs.add(fieldNum(PurchLine, ProjTaxItemGroupId));
        constraintFieldIDs.add(fieldNum(PurchLine, ProjSalesCurrencyId));
        constraintFieldIDs.add(fieldNum(PurchLine, ProjSalesUnitId));
        constraintFieldIDs.add(fieldNum(PurchLine, ProjSalesPrice));
        constraintFieldIDs.add(fieldNum(PurchLine, CreateFixedAsset));
        constraintFieldIDs.add(fieldNum(PurchLine, AssetGroup));
        constraintFieldIDs.add(fieldNum(PurchLine, AssetId));
        constraintFieldIDs.add(fieldNum(PurchLine, AssetBookId));
        constraintFieldIDs.add(fieldNum(PurchLine, AssetTransTypePurch));

        return constraintFieldIDs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemId</Name>
				<Source><![CDATA[
    public boolean checkItemId()
    {
        boolean  ok = true;
        EcoResProductValidator productValidator;
        ItemId                 origItemId = this.orig().ItemId;
        InventTable            inventTable = this.inventTable();

        if (origItemId
            && origItemId != this.ItemId
            && this.InventTransId
            && this.RecId)
        {
            ok = checkFailed("@SYS19376");
        }

        if (this.ItemId
            && !inventTable.hasProductDimensions()
            && this.InventDimId != InventDim::inventDimIdBlank()
            && this.isProductStopped())
        {
            ok = false;
        }

        if (this.purchTable().isInterCompanyOrder()
            && (!this.ItemId
            || inventTable.interCompanyBlockedPurch()))
        {
            ok = checkFailed(strFmt("@SYS74812", this.ItemId));
        }

        if (this.ItemId)
        {
            productValidator = EcoResProductValidator::construct(inventTable);
            if (!productValidator.isEssentialFieldValuesSet())
            {
                if (productValidator.errorFieldList().elements() == 1)
                {
                    ok = checkFailed(strFmt("@SCM:ProductValidatorErrorListSingular",
                                            productValidator.getErrorFieldList(),
                                            this.ItemId));
                }
                else
                {
                    ok = checkFailed(strFmt("@SCM:ProductValidatorErrorListPlural",
                                            productValidator.getErrorFieldList(),
                                            this.ItemId));
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductStopped</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the product is stopped through the default purchase order settings.
    /// </summary>
    /// <returns>
    ///     true if the product is stopped; otherwise, false.
    /// </returns>
    [Replaceable]
    protected internal boolean isProductStopped()
    {
        return !InventDistinctProductValidator::checkProductNotStopped(this.ItemId, this.getInventItemOrderSetupType(), this.inventDim(), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLine_RU</Name>
				<Source><![CDATA[
    boolean checkLine_RU()
    {
        boolean                 ret = true;
        CustomJournalTrans_RU   customJournalTrans;
        CustomJournalTable_RU   customJournalTable;
        container               customJournalTables;
        UnitOfMeasureSymbol     unitIdTo;
        Qty                     remainPurchPhysical, customJournalQty;
        List                    dimensionBoolean = new List(Types::Integer);

        CustomJournalTrans_RU   customJournalTransUpdate;
        DialogButton            updateDimension;

        if (this.RecId == 0 || ! this.InventTransId)
        {
            return true;
        }

        while select sum(Qty) from customJournalTrans group by CustomJournalId
            where customJournalTrans.SalesPurchInventTransId            == this.InventTransId
                exists join customJournalTable
                    where customJournalTable.CustomJournalId            == customJournalTrans.CustomJournalId &&
                          customJournalTable.CustomJournalType          == CustomJournalType_RU::Import       &&
                          customJournalTable.CustomInventTransStatus    == CustomInventTransStatus_RU::Ordered
        {
            customJournalQty    += customJournalTrans.Qty;
            customJournalTables += customJournalTrans.CustomJournalId;
        }
        if (ret && customJournalQty != 0)
        {
            setPrefix(strFmt("@GLS115270", con2Str(customJournalTables)));
            ret = (Box::yesNo(strFmt("@GLS115271", con2Str(customJournalTables)), DialogButton::No, "@GLS111162") == DialogButton::Yes);

            unitIdTo            = InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent).UnitId;
            remainPurchPhysical = this.RemainPurchPhysical + (this.PurchQty - this.orig().PurchQty);
            if (InventTable::unitConvert(this.ItemId, this.PurchUnit, unitIdTo, unitIdTo, remainPurchPhysical, this.InventDimId) < customJournalQty)
            {
                error(strFmt("@GLS115274", remainPurchPhysical,
                                            this.PurchUnit,
                                            customJournalQty,
                                            unitIdTo));
                this.QtyOrdered = this.orig().QtyOrdered;
                this.PurchQty   = this.orig().PurchQty;
            }
            if (this.PurchPrice != this.orig().PurchPrice)
            {
                checkFailed("@GLS115277");
                this.PurchPrice = this.orig().PurchPrice;
                this.LineAmount = this.calcLineAmount();
            }

            if (!DimensionDefaultFacade::areEqual(this.DefaultDimension, this.orig().DefaultDimension))
            {
                updateDimension = Box::yesNoCancel(strFmt("@GLS115280", con2Str(customJournalTables)), DialogButton::Cancel, "@GLS111162");
                switch (updateDimension)
                {
                    case DialogButton::Yes:
                        ttsbegin;

                        while select forupdate customJournalTransUpdate
                            where customJournalTransUpdate.SalesPurchInventTransId      == this.InventTransId
                                exists join customJournalTable
                                    where customJournalTable.CustomJournalId            == customJournalTransUpdate.CustomJournalId &&
                                          customJournalTable.CustomJournalType          == CustomJournalType_RU::Import             &&
                                          customJournalTable.CustomInventTransStatus    == CustomInventTransStatus_RU::Ordered
                        {
                            customJournalTransUpdate.DefaultDimension = this.DefaultDimension;
                            customJournalTransUpdate.update();
                        }

                        ttscommit;
                        break;
                    case DialogButton::No       :
                        break;
                    case DialogButton::Cancel   :
                        this.DefaultDimension = this.orig().DefaultDimension;
                        ret = checkFailed("@GLS115281");
                        break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a line number is unique within the scope of an order; if it is not, issues an
    /// error message.
    /// </summary>
    /// <returns>
    /// true if the line number is unique; otherwise, false.
    /// </returns>
    public boolean checkLineNumber()
    {
        boolean ret = true;

        if (ret)
        {
            ret = TradeLineNumberManager::newLine(this).checkLineNumber();
        }

        if (ret
         && this.LineDeliveryType == LineDeliveryType::DeliveryLine
         && PurchDeliverySchedule::findOrderLineForDeliveryLine(this.InventTransId).LineNumber > this.LineNumber)
        {
            ret = checkFailed(strFmt("@SYS319727", this.LineNumber));
        }

        if (ret
         && this.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries
         && this.TradeLineNumbering::getNextLineNumber(this.orig().LineNumber) < this.LineNumber)
        {
            ret = checkFailed(strFmt("@SYS319727", this.LineNumber));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMarkupCode_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks values of markup related fields
    /// </summary>
    /// <returns>
    /// True if check succeed;otherwise false
    /// </returns>
    public boolean checkMarkupCode_RU()
    {
        boolean     ret = true;
        MarkupTable markupTable;
        PurchLine_W purchLine_W;
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            purchLine_W = this.purchLine_W();
            if (this.isMarkupCodeEnabled_RU())
            {
                if (purchLine_W.MarkupCode_RU)
                {
                    markupTable = MarkupTable::find(MarkupModuleType::Vend, purchLine_W.MarkupCode_RU);

                    if (markupTable.CustType != MarkupType::LedgerAccount)
                    {
                        ret = checkFailed(strFmt("@SYS95333", fieldPName(MarkupTable, CustType), MarkupType::LedgerAccount));
                    }
                    if (markupTable.VendType != MarkupType::CustVend)
                    {
                        ret = checkFailed(strFmt("@SYS95333", fieldPName(MarkupTable, VendType), MarkupType::CustVend));
                    }
                }
            }
            else
            {
                if (purchLine_W.MarkupCode_RU)
                {
                    ret = checkFailed(strFmt("@SYS95333", fieldPName(PurchLine_W, MarkupCode_RU)), "@SYS19186");
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMatchingPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the matching policy can be changed.
    /// </summary>
    /// <returns>
    /// true if the changed matching policy is valid; otherwise, false.
    /// </returns>
    public boolean checkMatchingPolicy()
    {
        boolean ok = true;

        if (!this.RecId || this.MatchingPolicy != this.orig().MatchingPolicy)
        {
            if (PurchMatchingPolicyManager::canMatchingPolicyBeChanged(this.MatchingPolicy) == false)
            {
                ok = checkFailed(strFmt("@SYS130454", VendParameters::find().MatchingPolicy));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOperationType_MX</Name>
				<Source><![CDATA[
    public boolean checkOperationType_MX()
    {
        boolean ok = true;

        if (this.OperationType_MX == VendorOperationType_MX::Blank)
        {
            ok = checkFailed("@SYS312596");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOverDelivery</Name>
				<Source><![CDATA[
    boolean checkOverDelivery()
    {
        boolean  ok = true;

        if (this.OverDeliveryPct < 0)
        {
            ok = checkFailed("@SYS26776");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPostingProfile_RU</Name>
				<Source><![CDATA[
    boolean checkPostingProfile_RU()
    {
        boolean                         ok = true;
        InventProfileCustVendLedger_RU  inventProfileCustVendLedger;
        Set                             inventProfileTypeSet = new Set(Types::Enum);
        PurchLine_W                     purchLine_W = this.purchLine_W();

        if (EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(this.ItemId, fieldNum(InventDim, InventProfileId_RU)) &&
            purchLine_W.PostingProfile_RU              &&
            this.inventDim().InventProfileId_RU &&
            (!purchLine_W.orig() || purchLine_W.PostingProfile_RU != purchLine_W.orig().PostingProfile_RU))
        {
            while select InventProfileTypeAll, InventProfileId, InventProfileType
                from inventProfileCustVendLedger
                order by InventProfileTypeAll asc
                where inventProfileCustVendLedger.VendPostingProfile == purchLine_W.PostingProfile_RU
            {
                switch (inventProfileCustVendLedger.InventProfileTypeAll)
                {
                    case InventProfileTypeAll_RU::Profile:
                        inventProfileTypeSet.add(InventProfile_RU::find(inventProfileCustVendLedger.InventProfileId).InventProfileType);
                        break;
                    case InventProfileTypeAll_RU::Type:
                        inventProfileTypeSet.add(inventProfileCustVendLedger.InventProfileType);
                        break;
                }
            }

            if (! inventProfileTypeSet.in(this.inventDim().inventProfile_RU().InventProfileType))
            {
                ok = checkFailed("@GLS113766");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPriceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Triggers price recalculation after a date change according to the <c>PurchPriceDateType</c>
    /// enumeration value.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the <c>PurchLine</c> table that changed.
    /// </param>
    /// <remarks>
    /// The <c>PurchPriceDateType</c> enumeration value can be set to a <c>Today</c> or <c>DeliveryDate</c>
    /// value.
    /// </remarks>
    void checkPriceDate(FieldId _fieldId)
    {
        PurchParameters purchParameters = PurchParameters::find();

        if (purchParameters.PriceDateType == PurchPriceDateType::DeliveryDate
            && _fieldId == fieldNum(PurchLine, DeliveryDate)
            && !this.isLinkedToAgreement())
        {
            PurchLine::modifyPurchQty(this, this.inventDim());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProcurementCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the <c>ProcurementCategory</c> field is filled correctly.
    /// </summary>
    /// <returns>
    /// true if the <c>ProcurementCategory</c> field is filled correctly; otherwise, false.
    /// </returns>
    boolean checkProcurementCategory()
    {
        // Check that the hierarchy matches the module
        return !this.ProcurementCategory
            || EcoResCategory::checkCategoryRole(this.ProcurementCategory, EcoResCategoryNamedHierarchyRole::Procurement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjCategory</Name>
				<Source><![CDATA[
    boolean checkProjCategory()
    {
        boolean         ok = true;
        ProjCategory    projCategory;

        if (this.ProjCategoryId)
        {
            projCategory = ProjCategory::find(this.ProjCategoryId);

            if (this.ItemId)
            {
                if (projCategory.CategoryType != ProjCategoryType::Item)
                {
                    ok = checkFailed(strFmt("@SYS54897",this.ProjCategoryId));
                }
            }
            else
            {
                if (projCategory.CategoryType == ProjCategoryType::Revenue)
                {
                    ok = checkFailed(strFmt("@SYS54897",this.ProjCategoryId));
                }
            }

            ok = ok && projCategory.validateIfInactiveAllowed();
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurchCommitmentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs validations for the commitment line reference on the purchase order line.
    /// </summary>
    /// <returns>
    /// true if the commitment line reference is valid; otherwise, false
    /// </returns>
    public boolean checkPurchCommitmentLine()
    {
        FiscalCalendarYear          fiscalCalendarYear;
        PurchCommitmentLine_PSN     purchCommitmentLine = this.getPurchCommitmentLine_PSN();
        PurchCommitmentHeader_PSN   purchCommitmentHeader = purchCommitmentLine.getPurchCommitmentHeader_PSN();
        str                         error = "@SPS2134";

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            //Verify that the vendor account on the PO matches the vendor account on the commitment.
            if (!this.checkCommitmentVendorMatchesOrderAccount())
            {
                return checkFailed(error);
            }

            //Verify that the commitment line is of the current fiscal year
            fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(Ledger::fiscalCalendar(CompanyInfo::current()), this.purchTable().AccountingDate);

            if (purchCommitmentLine.LineDate < fiscalCalendarYear.StartDate ||
                purchCommitmentLine.LineDate > fiscalCalendarYear.EndDate)
            {
                return checkFailed(error);
            }

            //Verify that the entered commitment header has a status of complete.
            if (purchCommitmentHeader.DocumentStatus != PurchCommitmentDocumentStatus_PSN::Complete)
            {
                return checkFailed(error);
            }

            //
            //Verify that the Purchase Agreement Line on the commitment document
            //line matches the Purchase Order Line Purchase Agreement field, if present
            //
            if (this.MatchingAgreementLine != 0 && this.MatchingAgreementLine != purchCommitmentLine.AgreementLine)
            {
                return checkFailed(error);
            }

            // validate that the source document line state is complete for the commitment line.
            if (purchCommitmentLine.getSourceDocumentLine().AccountingStatus != SourceDocumentLineAccountingStatus::Completed)
            {
                return checkFailed(error);
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurchQty</Name>
				<Source><![CDATA[
    boolean checkPurchQty()
    {
        boolean  ok = true;

        if ((this.PurchQty  != 0     && this.QtyOrdered   == 0)     ||
            (this.PurchQty  == 0     && this.QtyOrdered   != 0)    )
        {
            ok = checkFailed(strFmt("@SYS18441",this.PurchId));
        }
        else
        {
            if (this.PurchQty  * this.QtyOrdered   < 0)
            {
                ok = checkFailed(strFmt("@SYS18442",this.PurchId));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurchReceivedNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the received now quantity is valid.
    /// </summary>
    /// <returns>
    /// true if the received now quantity is valid; otherwise, false.
    /// </returns>
    boolean checkPurchReceivedNow()
    {
        boolean  ok = true;

        if (this.PurchQty * this.PurchReceivedNow < 0)
        {
            ok = checkFailed("@SYS323005");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurchType</Name>
				<Source><![CDATA[
    boolean checkPurchType()
    {
        if (this.purchTable().PurchaseType   != this.PurchaseType)
        {
            return checkFailed("@SYS17095");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurchUnit</Name>
				<Source><![CDATA[
    boolean checkPurchUnit()
    {
        boolean  ok = true;

        if (!EcoResProductUnitConverter::canBeConvertedGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                          this.InventDimId,
                                                                                          InventTable::find(this.ItemId).inventUnitId(),
                                                                                          this.PurchUnit))
            ok = checkFailed(strFmt("@SYS28690", InventTable::find(this.ItemId).inventUnitId(), this.PurchUnit));
        

        if (IntercompanyPurchLineCheckQuantityAndUnitChangeFlight::instance().isEnabled())
        {
            if (this.orig() 
                && this.orig().PurchUnit != this.PurchUnit)
            {
                PurchQty purchaseQty = this.isInterCompanyOrder() ? this.PurchQty : this.orig().PurchQty;
                if (purchaseQty != this.RemainPurchPhysical)
                {
                    ok = checkFailed("@SYS81896");
                }               
            }
        }
        else
        {
            if (this.orig() 
                &&  this.orig().PurchUnit != this.PurchUnit 
                &&  this.orig().PurchQty != this.RemainPurchPhysical)
            {
                ok = checkFailed("@SYS81896");
            }
        }

        if (this.RecId
            && this.PurchUnit != this.orig().PurchUnit
            && (   this.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries
                || this.LineDeliveryType == LineDeliveryType::DeliveryLine))
        {
            // Unit cannot be changed on a Delivery Schedule.
            ok = checkFailed("@SYS131415");
        }

        if (ok)
        {
            ok = this.type().checkPurchUnit();
        }

        if (ok)
        {
            ok = this.runPriceDiscPolicyDialog();
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRBOPackage</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Checks whether a package line have more than one related purchase order line.
    /// </summary>
    /// <param name="_purchId">
    ///   A <c>PurchId</c>.
    /// </param>
    /// <param name="_packageId">
    ///   A <c>RetailPackageId</c>.
    /// </param>
    /// <param name="_lineNum">
    ///   A <c>LineNum</c>.
    /// </param>
    /// <returns>
    ///   true if a package line does not have more than one related purchase order line; otherwise, false.
    /// </returns>
    boolean checkRBOPackage(PurchId _purchId, RetailPackageId _packageId,LineNum _lineNum)
    {
        PurchLine   purchLine;

        if (_purchId && _packageId && _lineNum)
        {
            select count(rboPackageLineNum) from purchLine
            index hint RBOPackageIdx
            where purchLine.PurchId           == _purchId   &&
                  purchLine.RetailPackageId      == _packageId &&
                  purchLine.rboPackageLineNum == _lineNum;

            if (purchLine.rboPackageLineNum > 1)
                return checkFailed(strFmt("@RET4768",_packageId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReqActivity</Name>
				<Source><![CDATA[
    boolean checkReqActivity()
    {
        boolean ret = true;

        RequireActivity requireActivity = ProjTable::checkRequireActivity(this.ProjId, tableNum(PurchLine), this.ProjCategoryId);

        if (requireActivity && (!this.ActivityNumber))
        {
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStatusChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether it is allowed to change to status on the order line.
    /// </summary>
    /// <returns>
    /// true if change of status is allowed; otherwise, false.
    /// </returns>
    public boolean checkStatusChange()
    {
        boolean ok = true;

        if (this.PurchStatus == PurchStatus::Backorder)
        {
            PurchLine origPurchLine = PurchLine::findRecId(this.RecId); //this.orig() cannot be used in all scenarios.

            if (origPurchLine.RecId
                && (origPurchLine.isInvoiced()
                ||  origPurchLine.isCanceled())
                && origPurchLine.isStocked() != this.inventTable().isStocked())
            {
                ok = checkFailed(strFmt("@SYS324424", fieldPName(InventModelGroup, StockedProduct)));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStockedProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>StockedProduct</c> field is not set for category based lines.
    /// </summary>
    /// <returns>
    /// true if the <c>StockedProduct</c> field is set to a valid value; otherwise, false.
    /// </returns>
    boolean checkStockedProduct()
    {
        boolean  ok = true;

        if (this.isStocked() && this.isCategoryBased())
        {
            ok = checkFailed("@SYS134348");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxItemGroup</Name>
				<Source><![CDATA[
    boolean checkTaxItemGroup()
    {
        if (this.TaxItemGroup   && ! TaxItemGroupHeading::exist(this.TaxItemGroup))
        {
            return checkFailed(strFmt("@SYS21973", this.TaxItemGroup));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUnderDelivery</Name>
				<Source><![CDATA[
    boolean checkUnderDelivery()
    {
        boolean  ok = true;

        if (this.UnderDeliveryPct > 100)
        {
            ok = checkFailed("@SYS26778");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdatePhysical</Name>
				<Source><![CDATA[
    boolean checkUpdatePhysical()
    {
        return this.type().checkUpdatePhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAddressReference</Name>
				<Source><![CDATA[
    public void clearAddressReference()
    {
        this.AddressRefRecId    = 0;
        this.AddressRefTableId  = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAllPriceDiscChangePolicies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears all of the stored <c>PriceDiscChangePolicy</c> instances for the <c>PurchLine</c> table.
    /// </summary>
    /// <remarks>
    /// Removes policies from both the manual and system groups.
    /// </remarks>
    void clearAllPriceDiscChangePolicies()
    {
        PurchLineType purchLineType;

        purchLineType = this.type();
        purchLineType.clearAllPriceDiscChangePolicies();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearingPeriod</Name>
				<Source><![CDATA[
    display ClearingPeriod clearingPeriod()
    {
        return this.purchTable().payer().clearingPeriod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearInventReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the inventory reference fields on the <c>PurchLine</c> record.
    /// </summary>
    public void clearInventReference()
    {
        this.InventRefTransId  = '';
        this.InventRefId       = '';
        this.ItemRefType       = InventRefType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCurrencyCode</Name>
				<Source><![CDATA[
    void convertCurrencyCode(CurrencyCode _currencyCode, TradeCurencyConversion _tradeCurrencyConversion = TradeCurencyConversion::ExchRate,TransDate _exchRateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        ttsbegin;

        this.updateMarkupTransBasedOnCurrencyCodeConversion(_currencyCode, _exchRateDate);

        this.updateRelatedFieldsToCurrencyCodeConversion(_currencyCode, _exchRateDate);

        this.updateBasedOnTradeCurrencyConversion(_tradeCurrencyConversion);

        this.LineAmount   = this.calcLineAmount();

        this.resetAgreementLink();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarkupTransBasedOnCurrencyCodeConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the markup transactions based on the currency code conversion.
    /// </summary>
    /// <param name = "_currencyCode">The code of the currency.</param>
    /// <param name = "_exchRateDate">The date of exchange.</param>
    protected void updateMarkupTransBasedOnCurrencyCodeConversion(CurrencyCode _currencyCode, TransDate _exchRateDate )
    {
        MarkupTrans     markupTrans;
        while select forupdate markupTrans
              where markupTrans.TransTableId  == this.TableId &&
                    markupTrans.TransRecId    == this.RecId   &&
                   !markupTrans.IsDeleted
        {
            markupTrans.convertCurrencyCode(_currencyCode,_exchRateDate);
            markupTrans.IsModified = NoYes::Yes;
            markupTrans.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarkupTransBasedOnIntercompanySkipUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the markup transactions based on the invent dim.
    /// </summary>
    /// <param name = "_findMarkup">If it is true, it finds makup</param>
    /// <param name = "_deleteExistingMarkupTrans">if it is true it deletes existing record in <c>MarkupTrans</c> table</param>
    protected void updateMarkupTransBasedOnIntercompanySkipUpdate(boolean _findMarkup = true, boolean _deleteExistingMarkupTrans = true)
    {
        PurchTable purchTable = this.purchTable(true);
        PurchInstrumentation instrumentation = PurchInstrumentation::newInstrumentation(funcName(), '0');
        TradeInstrumentationStopwatch stopWatch = TradeInstrumentationStopwatch::newStopwatch();
        PurchLineType purchLineType = this.type(purchTable);

        if (_findMarkup
        && (this.PurchQty   >= 0
        || (this.PurchQty   <  0 &&
            this.SkipUpdate == InterCompanySkipUpdate::No)))
        {
            this.createMarkupTrans(purchTable, _deleteExistingMarkupTrans);
            PurchLine::logMeasure(instrumentation, tableStr(PurchLine), tableMethodStr(PurchLine, createMarkupTrans), stopWatch);
        }

        if (_findMarkup
        &&  this.PurchQty   <  0
        &&  this.SkipUpdate == InterCompanySkipUpdate::Internal)
        {
            this.interCompanyRevertMarkupTrans();
            PurchLine::logMeasure(instrumentation, tableStr(PurchLine), tableMethodStr(PurchLine, interCompanyRevertMarkupTrans), stopWatch);
        }

        if (this.SkipUpdate   != InterCompanySkipUpdate::InterCompany
        &&  this.SkipUpdate   != InterCompanySkipUpdate::Both)
        {
            purchLineType.interCompanyMarkupMirror();
            PurchLine::logMeasure(instrumentation, classStr(PurchLineType), methodStr(PurchLineType, interCompanyMarkupMirror), stopWatch);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRelatedFieldsToCurrencyCodeConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the line amounts based on the currency code conversion.
    /// </summary>
    /// <param name = "_currencyCode">The code of the currency.</param>
    /// <param name = "_exchRateDate">The date of exchange.</param>
    protected void updateRelatedFieldsToCurrencyCodeConversion(CurrencyCode _currencyCode, TransDate _exchRateDate )
    {
        this.PurchPrice   = ExchangeRateHelper::curPrice2CurPrice(this.PurchPrice, this.CurrencyCode, _currencyCode, _exchRateDate);
        this.LineDisc     = ExchangeRateHelper::curPrice2CurPrice(this.LineDisc, this.CurrencyCode, _currencyCode, _exchRateDate);
        this.MultiLnDisc  = ExchangeRateHelper::curPrice2CurPrice(this.MultiLnDisc, this.CurrencyCode, _currencyCode, _exchRateDate);
        this.DiscAmount   = this.discAmount();
        this.PurchMarkup  = ExchangeRateHelper::curPrice2CurPrice(this.PurchMarkup, this.CurrencyCode, _currencyCode, _exchRateDate);

        if (TaxParameters::checkTaxParameters_IN())
        {
            this.purchLine_IN().convertCurrencyCode(_currencyCode);
        }
        if (this.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries)
        {
            this.LineAmount   = CurrencyExchangeHelper::curAmount2CurAmount(this.LineAmount, this.CurrencyCode, _currencyCode, _exchRateDate);
        }

        this.CurrencyCode = _currencyCode;

        if (TaxParameters::checkParameterForPosting_IN(TaxType_IN::Customs))
        {
            if (PurchTable::find(this.PurchId).purchTable_W().CustomsImportOrder_IN != NoYes::Yes)
            {
                PurchLine_IN purchLine_IN = this.purchLine_IN();
                purchLine_IN.AssessableValueTransactionCurrency = this.getMiscChargesAmount_IN();
                this.packPurchLine_IN(purchLine_IN);
            }
            else
            {
                this.purchLine_IN().convertCurrencyCode(_currencyCode);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetAgreementLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reset the agreement link when currency code is converted.
    /// </summary>
    protected void resetAgreementLink()
    {
        if (   this.LineDeliveryType != LineDeliveryType::DeliveryLine
                && this.MatchingAgreementLine)
        {
            // Agreement line should NOT be unlinked if it is Quantity-based AND has IsPriceInformationMandatory set to false!
            AgreementLine linkedAgreementLine = AgreementLine::find(this.MatchingAgreementLine, false);

            if (   linkedAgreementLine.RecId
                    && ( (linkedAgreementLine.isQuantityBased() == false) || linkedAgreementLine.IsPriceInformationMandatory))
            {
                this.unLinkAgreementLine();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBasedOnTradeCurrencyConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the line amounts, price and discounts based on <c>TradeCurencyConversion</c>.
    /// </summary>
    /// <param name = "_tradeCurrencyConversion">A trade currency conversion value.</param>
    [Hookable(true)]
    private void updateBasedOnTradeCurrencyConversion(TradeCurencyConversion _tradeCurrencyConversion)
    {
        switch (_tradeCurrencyConversion)
        {
            case TradeCurencyConversion::ExchRate:
                break;
            case TradeCurencyConversion::TradeAgreements:
                if (this.LineDeliveryType == LineDeliveryType::DeliveryLine)
                {
                    this.LineAmount = this.calcLineAmountForced();
                }
                else
                {
                    this.salesPurchLineInterface().resetPriceAgreement();
                    this.setPriceDisc(this.inventDim());
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was instantiated with the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>
    [SysObsolete('Use method DefaultDimensionDefaultingStrategy::newCopy instead', false, 31\03\2019)]
    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this,
                                                                      this.companyInfo().RecId
                                                                      )
        )
    {
        return DefaultDimensionDefaultingStrategy::newCopy(
            DefaultDimensionDefaultingDimensionTarget::newFromRecord(this),
            DefaultDimensionDefaultingDimensionUnknownSource::newFromDimensionDefault(_defaultDimension),
            _dimensionCopy).getDefaultDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFromPurchLineHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies data from a <c>PurchLineHistory</c> record.
    /// </summary>
    /// <param name="_purchLineHistory">
    /// A <c>PurchLineHistory</c> record to copy data from.
    /// </param>
    /// <param name="_copyPrecisely">
    /// A Boolean value that indicates whether precise copy should be made.
    /// </param>
    /// <param name="_copyPriceDisc">
    /// A Boolean value that indicates whether price and discount information should be copied.
    /// </param>
    /// <param name="_copyQty">
    /// A Boolean value that indicates whether quantity should be copied.
    /// </param>
    /// <param name="_qty">
    /// A quantity value to be used on the copied line.
    /// </param>
    /// <param name="_cwQty">
    /// The CW quantity value to be used on the copied line.
    /// </param>
    void copyFromPurchLineHistory(PurchLineHistory       _purchLineHistory,
                                  boolean                _copyPrecisely = true,
                                  boolean                _copyPriceDisc = true,
                                  boolean                _copyQty       = true,
                                  Qty                    _qty           = _purchLineHistory.PurchQty,
                                  PdsCWInventQty         _cwQty         = _purchLineHistory.PdsCWQty
                                  )
    {
        InventDim   inventDim;

        this.initFromItemOrCategory(_purchLineHistory.ItemId, _purchLineHistory.ProcurementCategory, _purchLineHistory.Name);

        if (_copyQty)
        {
            this.setInventDimId(_purchLineHistory.InventDimId);
            this.PurchQty           = _qty;
            this.PdsCWQty           = _cwQty;
            this.PurchUnit          = _purchLineHistory.PurchUnit;
            this.QtyOrdered         = this.calcQtyOrdered();
        }
        else
        {
            if (this.isCategoryBased())
            {
                this.setInventDimId(_purchLineHistory.InventDimId);
            }
            else
            {
                inventDim               = this.inventDim();
                EcoResProductDimGroupSetup::copyProductDimensionsForItem(this.ItemId, _purchLineHistory.inventDim(), inventDim);
                this.setInventDimIdFromInventDim(inventDim);
            }
        }

        if (_copyPriceDisc)
        {
            this.PurchPrice         = _purchLineHistory.PurchPrice;
            this.PriceUnit          = _purchLineHistory.PriceUnit;
            this.LinePercent        = _purchLineHistory.LinePercent;
            this.LineDisc           = _purchLineHistory.LineDisc;
            this.MultiLnDisc        = _purchLineHistory.MultiLnDisc;
            this.MultiLnPercent     = _purchLineHistory.MultiLnPercent;
            this.PurchMarkup        = _purchLineHistory.PurchMarkup;
            this.LineAmount         = _purchLineHistory.LineAmount;
            this.DiscAmount         = _purchLineHistory.DiscAmount;
            this.DiscPercent        = _purchLineHistory.DiscPercent;
        }

        if (_copyPrecisely)
        {
            this.Name               = _purchLineHistory.Name;
            this.ExternalItemId     = _purchLineHistory.ExternalItemId;
            this.TaxGroup           = _purchLineHistory.TaxGroup;
            this.TaxItemGroup       = _purchLineHistory.TaxItemGroup;
            this.DefaultDimension   = _purchLineHistory.DefaultDimension;
            this.AccountingDistributionTemplate = _purchLineHistory.AccountingDistributionTemplate;
        }
        this.setAddressFromInventDim(this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>corItemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the item name considering if the item is category based or not
    /// </summary>
    /// <returns>
    /// Item name
    /// </returns>
    display public PurchLineShowItemName corItemName()
    {
        PurchLineShowItemName itemName;

        if (this.isCategoryBased())
        {
            itemName = this.Name;
        }
        else
        {
            itemName = this.itemName();
        }
        return itemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates the agreement line to link to the purchase line
    /// and if not successful searches for other agreement lines that could match;
    /// If valid agreement line is found the link between the agreement line and the purchase line is established;
    /// </summary>
    /// <param name="_agreementLine">
    /// An existing <c>AgreementLine</c> record that is evaluated for linking to the purchase line;
    /// </param>
    /// <param name="_searchOtherAgreementLines">
    /// true if search should consider other agreement lines than the given <c>AgreementLine</c> record; otherwise false.
    /// Optional - defaults to true.
    /// </param>
    public void createAgreementLine(AgreementLine _agreementLine, boolean _searchOtherAgreementLines = true)
    {
        PurchLine       agreementPurchLine;

        buf2Buf(this, agreementPurchLine);
        if (_agreementLine)
        {
            agreementPurchLine.initFromAgreementLine(_agreementLine);
            if (!_agreementLine.isLinkValid(agreementPurchLine, false))
            {
                _agreementLine = null;
            }
        }

        ttsbegin;

        if (!_agreementLine && _searchOtherAgreementLines)
        {
            _agreementLine = AgreementLine::findLineForAutoMatch(agreementPurchLine, this.purchTable().MatchingAgreement, true);
            if (_agreementLine)
            {
                agreementPurchLine.initFromAgreementLine(_agreementLine);
            }
        }

        if (_agreementLine)
        {
            buf2Buf(agreementPurchLine, this);
            this.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromTmpFrmVirtual</Name>
				<Source><![CDATA[
    void createFromTmpFrmVirtual(PurchTable _purchTable, TmpFrmVirtual tmpFrmVirtual)
    {
        boolean doSearchForAgreementLine = (_purchTable.MatchingAgreement != 0);
        while select tmpFrmVirtual
                where tmpFrmVirtual.Qty
        {
            try
            {
                ttsbegin;

                this.clear();
                this.PurchId = _purchTable.PurchId;
                this.initializeFromTmpFrmVirtual(tmpFrmVirtual);

                this.createLine(true,  //  validation
                true,  //  initFromPurchTable
                true,  //  initFromInventTableModule
                true,  //  calcInventQty
                true,  //  searchMarkup
                true,  //  searchPrice
                true,  //  ignorePurchTableInventDim
                doSearchForAgreementLine    //  searchAgreementLine
                );

                ttscommit;

                tmpFrmVirtual.delete();
            }

            catch (Exception::Error)
            {
                checkFailed("@SYS18447");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromTmpFrmVirtual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the purchase line record.
    /// </summary>
    /// <param name="_tmpFrmVirtual">
    /// The <c>TmpFrmVirtual</c> record that carries information for purchase line.
    /// </param>
    protected void initializeFromTmpFrmVirtual(TmpFrmVirtual _tmpFrmVirtual)
    {
        this.ItemId = _tmpFrmVirtual.ItemId;
        this.PurchQty = _tmpFrmVirtual.Qty;
        this.PdsCWQty = _tmpFrmVirtual.PdsCWQty;
        this.setInventDimId(_tmpFrmVirtual.InventDimId);
        this.initVariantId(this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLine</Name>
				<Source><![CDATA[
    public void createLine(
        boolean _validation                  = false,
        boolean _initFromPurchTable          = false,
        boolean _initFromItemOrCategory      = false,
        boolean _calcInventQty               = false,
        boolean _searchMarkup                = true,
        boolean _searchPrice                 = false,
        boolean _ignorePurchTableInventDim   = false,
        boolean _searchAgreementLine         = false,
        boolean _setRemain                   = true,  // Obsolete
        boolean _skipPurchTableUpdate        = false,
        boolean _skipInterCompanyCalcDisc    = false)
    {


        this.initializeCreateLine(_initFromPurchTable, _initFromItemOrCategory, _calcInventQty, _searchMarkup, _searchPrice, _ignorePurchTableInventDim, _searchAgreementLine);

        if (WHSInventEnabled::exist(this.ItemId)
            && !WHSFilter::vendFilterMatch(this.VendAccount, this.ItemId))
        {
            throw error("@WAX1003");
        }

        if (_validation && !this.validateWrite())
        {
            throw error("@SYS18447");
        }

        if (TaxParameters::checkParameterForPosting_IN(TaxType_IN::Customs) &&
            PurchTable::find(this.PurchId).purchTable_W().CustomsImportOrder_IN == NoYes::Yes &&
            CustomsVendBOETrans_IN::findPurchLineRecId(PurchLine::findInventTransId(this.InventRefTransId).RecId).RecId != 0 &&
            this.PurchId == this.InventRefId)
        {
            checkFailed("@GLS5764");
        }
        else
        {
            this.insert(false, _searchMarkup, true, _skipPurchTableUpdate, _skipInterCompanyCalcDisc);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCreateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialized the create line based on the provided parameters.
    /// </summary>
    /// <param name = "_initFromPurchTable">A Boolean value that specifies whether to initialize from <c>PurchTable</c> record; optional.</param>
    /// <param name = "_initFromItemOrCategory">A Boolean value that specifies whether to initialize from <c>InventTable</c> record; optional.</param>
    /// <param name = "_calcInventQty">A Boolean value that specifies whether to calculate inventory quantity; optional.</param>
    /// <param name = "_searchMarkup">A Boolean value that specifies whether to search for markup; optional.</param>
    /// <param name = "_searchPrice">A Boolean value that specifies whether to search for price; optional.</param>
    /// <param name = "_ignorePurchTableInventDim">A Boolean value that specifies whether to ignore <c>PurchTable</c> record inventory dimension; optional.</param>
    /// <param name = "_searchAgreementLine">A Boolean value that specifies whether to search for agreement line; optional.</param>
    protected void initializeCreateLine(
        boolean _initFromPurchTable          = false,
        boolean _initFromItemOrCategory      = false,
        boolean _calcInventQty               = false,
        boolean _searchMarkup                = true,
        boolean _searchPrice                 = false,
        boolean _ignorePurchTableInventDim   = false,
        boolean _searchAgreementLine         = false)
    {
        PurchTable purchTable;

        if (_initFromPurchTable)
        {
            purchTable = this.purchTable();
            this.initFromPurchTable(purchTable, _ignorePurchTableInventDim);
        }

        if (_initFromItemOrCategory)
        {
            if (this.ItemId)
            {
                InventTable inventTable = this.inventTable();

                if (! this.checkInitFromInventTable(inventTable))
                {
                    throw error("@SYS18447");
                }
            }

            this.initFromItemOrCategory(this.ItemId, this.ProcurementCategory, this.Name);
        }

        this.initFromVendTable(this.vendTable_OrderAccount());

        if (_calcInventQty)
        {
            this.QtyOrdered = this.calcQtyOrdered();
        }

        this.RemainPurchPhysical            = this.PurchQty;
        this.RemainPurchFinancial           = 0;
        this.RemainInventPhysical           = this.QtyOrdered;
        this.RemainInventFinancial          = 0;
        this.PdsCWRemainInventPhysical      = this.PdsCWQty;
        this.PdsCWRemainInventFinancial     = 0;

        this.type().initReturn();

        if (_searchPrice)
        {
            this.setPriceDisc(this.inventDim());
        }

        if (_searchAgreementLine && this.canAgreementBeLinked())
        {
            if (!purchTable.RecId)
            {
                purchTable = this.purchTable();
            }

            if (purchTable.MatchingAgreement)
            {
                AgreementLine agreementLine = AgreementLine::findLineForAutoMatch(this, purchTable.MatchingAgreement, true);
                if (agreementLine)
                {
                    this.initFromAgreementLine(agreementLine);
                }
            }
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)) && !this.VariantId)
        {
            this.initVariantId(this.inventDim());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates markup transactions for the purchase line.
    /// </summary>
    /// <param name="purchTable">
    ///     A buffer of the <c>PurchTable</c> table.
    /// </param>
    /// <param name="_deleteExistingMarkupTrans">
    ///     A Boolean value that specifies whether to delete existing markup transactions; optional.
    /// </param>
    /// <param name="_markupGroupId">
    ///     A <c>MarkupGroupId</c> type specifying the markup group ID; optional.
    /// </param>
    void createMarkupTrans(
        PurchTable      purchTable,
        boolean         _deleteExistingMarkupTrans  = true,
        MarkupGroupId   _markupGroupId              = InventTableModule::find(this.ItemId,ModuleInventPurchSales::Purch).MarkupGroupId

    )
    {
        if (this.SkipCreateMarkup == NoYes::No)
        {
            InventDim   inventDim;

            //Set the InventDim paramters for Purch Line in <c>Markup</c> class if the configuration key is enabled
            if (this.InventDimId)
            {
                inventDim = InventDim::find(this.InventDimId);
                Markup::parmInventDimParameters(inventDim);
            }

            Markup::insertMarkupTrans(HeadingLine::Line,
                                    MarkupModuleType::Vend,
                                    this,
                                    purchTable.OrderAccount,
                                    purchTable.MarkupGroup,
                                    purchTable.CurrencyCode,
                                    purchTable.LanguageId,
                                    this.ItemId,
                                    _markupGroupId,
                                    (this.LineAmount < 0), // invert sign on credit notes
                                    _deleteExistingMarkupTrans);

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditNoteLine</Name>
				<Source><![CDATA[
    boolean creditNoteLine(PurchTable _purchTable = this.purchTable())
    {
        return this.type(_purchTable).creditNoteLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCostPriceAsSalesPrice</Name>
				<Source><![CDATA[
    private boolean defaultCostPriceAsSalesPrice()
    {
        return ProjParameters::find().DefaultCostPriceAsSalesPrice
            && !this.ItemId && ProjCategory::isProjCategoryTypeItem(this.ProjCategoryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultingTax1099Amount</Name>
				<Source><![CDATA[
    public void defaultingTax1099Amount()
    {
        #ISOCountryRegionCodes
        if ((this.orig().LineAmount != this.LineAmount) && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoUS]))
        {
            if (this.purchTable().vendTable_InvoiceAccount().Tax1099Reports)
            {
                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                {
                    if (this.Tax1099Fields)
                    {
                        this.Tax1099Amount = this.LineAmount;
                    }
                    else
                    {
                        this.Tax1099Amount = 0;
                    }
                }
                else
                {
                    this.Tax1099Amount = this.LineAmount;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete(boolean _showInfoDelReserv = true, boolean updateOrderLineOfDeliverySchedule = true)
    {
        #ISOCountryRegionCodes

        if (!updateOrderLineOfDeliverySchedule)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        if (this.isTmp())
        {
            this.doDelete();
            return;
        }

        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        PurchLine   purchLineOrig               = this.extensionOrig();
        NoYes       skipDeliveryScheduleUpdate  = this.SkipDeliveryScheduleUpdate;

        PurchTable  purchTable = this.purchTable(true);
        PurchTable  purchTableOrig;
        // Set the original purchTable for later use
        purchTableOrig.data(purchTable);
        
        PurchLineType purchLineType = this.type(purchTable);
        
        purchLineType.deleting();

        if (this.isInvoiceMatched())
        {
            throw error(strFmt("@AccountsPayable:PurchSourceDocumentUpdate",
                purchLineOrig.PurchId,
                purchLineOrig.ItemId ? purchLineOrig.ItemId : EcoResCategory::find(purchLineOrig.ProcurementCategory).Name,
                purchLineOrig.QtyOrdered));
        }

        if (!this.whsCheckDeleteLoadline())
        {
            throw error("@WAX5594");
        }
        
        PurchPurchaseOrderInstrumentationActivities purchaseOrderActivities = PurchInstrumentationLogger::createLogger(tableStr(PurchLine)).purchPurchaseOrderActivities();
        
        using (var activityContext = purchaseOrderActivities.delete(this))
        {
            if (this.mcrDropShipment)
            {
                this.MCRDropShipStatus = MCRDropShipStatus::None;
                MCRDropShipStatusUpdate::synchronizeSalesStatus(this, MCRDropShipStatus::ToBeDropShipped);
            }

            if (this.SkipUpdate != InterCompanySkipUpdate::InterCompany
                && this.SkipUpdate != InterCompanySkipUpdate::Both)
            {
                purchLineType.interCompanyDelete();
            }

            if (this.MatchingAgreementLine)
            {
                this.unLinkAgreementLine();
            }

            if (this.SkipUpdate   != InterCompanySkipUpdate::Internal
            &&  this.SkipUpdate   != InterCompanySkipUpdate::Both)
            {
                purchLineType.deleteSalesLine();
            }

            if (this.SkipUpdate    != InterCompanySkipUpdate::Internal
                && this.SkipUpdate != InterCompanySkipUpdate::Both
                && this.ProjId
                && purchTable.isProjectSalesItemReqPO()
                && ProjParameters::find().CreateItemReqForPO == NoYes::Yes)
            {
                SalesLine salesLine = SalesLine::findInventTransId(this.InventRefTransId, true);
                if (salesLine)
                {
                    salesLine.delete();
                }
            }

            LedgerCov::deleteTransact(this.TableId,this.RecId);
            
            if (this.isStocked())
            {
                purchLineType.updateInventoryOnDelete(_showInfoDelReserv);
            }

            //Delete the pending registration records for the purchase line.
            if (!this.isStocked() && !purchLineType.isChangeRequestRequired())
            {
                this.deletePendingRegistrationsNonStocked();
            }

            boolean isUpdatedSalesLine = false;
            if (!purchLineType.isChangeRequestRequired() && purchLineType.mustUpdateSalesLineOnDeletePurchLine())
            {
                purchLineType.updateSalesLineOnDeletePurchLine(true);
                isUpdatedSalesLine = true;
            }

            this.reread();
            //Need to set this back to its value before reread
            this.SkipDeliveryScheduleUpdate = skipDeliveryScheduleUpdate;

            if (this.TableId && this.RecId)
            {
                RAssetPurchTrans::deleteAssetPurchTrans(this.TableId, this.RecId);
            }

            // The tax information is out of date and needs to be flushed.
            purchLineType.deleteTaxUncommitted(true);

            if (TaxWithholdingGlobalFeature::isCalcWHTInInvoiceEnabled())
            {
                purchLineType.deleteTaxWithholdUncommitted();
            }

            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                purchLineType.deleteTaxWithholdUncommitted_IN(true);
            }

            SourceDocumentLine sourceDocumentLine = SourceDocumentLine::find(this.SourceDocumentLine, true);

            if (this.isVersioned())
            {
                this.deleteSoft(purchTable, purchLineType, sourceDocumentLine);
            }
            else
            {
                if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && this.ProjId)
                {
                    ProjectCommitmentFacade::deleteProjectCommitments(this.SourceDocumentLine);
                }

                purchaseOrderActivities.logPurchaseOrderLine(activityContext, purchTable, this, false, this.isStocked());

                super();

                sourceDocumentLine.delete();

                // Do not transition the purchase requisition line to approved if a budget reservation line is referencing it.
                if (!this.BudgetReservationLine_PSN)
                {
                    PurchReqLine::clearPurchLineRef(this.PurchReqLineRefId);
                }

                if (purchLineType.isChangeRequestRequired() && purchLineType.mustUpdateSalesLineOnDeletePurchLine() && !isUpdatedSalesLine)
                {
                    purchLineType.updateSalesLineOnDeletePurchLine(true);
                }
            }

            // Here need to delete taxUncommitted again since tax is recalculated with current line during deleteSoft() submitting source document line.
            purchLineType.deleteTaxUncommitted(true);

            if (TaxWithholdingGlobalFeature::isCalcWHTInInvoiceEnabled())
            {
                purchLineType.deleteTaxWithholdUncommitted();
            }

            if (!PurchTableStatusDelayUpdate::instance().isDelayUpdating(this.PurchId, this.DataAreaId))
            {
                purchTable.updateStatusFromPurchLines();
            }

            purchTable.updatePurchLineDelete();

            if (this.LineDeliveryType == LineDeliveryType::DeliveryLine)
            {
                if (!this.SkipDeliveryScheduleUpdate)
                {
                    purchLineType.updateOrderLineOfDeliverySchedule();
                }

                PurchDeliverySchedule purchDeliverySchedule;

                delete_from purchDeliverySchedule where purchDeliverySchedule.DeliveryLine == this.InventTransId;
            }

            this.updateSalesLineCommittedCost(purchLineOrig);

            this.updateDropShipStatusForPurchaseOrder(purchTable, purchTableOrig);

            if (this.mustExecutePurchTotalSummary())
            {
                PurchTotalsSummaryController::onDelete(this);
            }

            PlSADPurchTable::puchLineRemoved(this);

            if (TaxIntegrationUtils::isTransitDocumentEnabled())
            {
                this.TransitDocumentTransactionMap_IN::deleteTransitDocuments();
            }

            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                this.markCurrentTaxDocumentTaxStatusDirty();
            }

            purchLineType.deleted();
            activityContext.addCustomProperty(PurchPurchaseOrderInstrumentationActivities::PurchId, this.PurchId);
            activityContext.addCustomProperty(tableStr(CompanyInfo), int642str(CompanyInfo::current()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateInventory</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether to update inventory.
    /// </summary>
    /// <param name = "_purchTable">
    ///     A <c>PurchTable</c> table buffer.
    /// </param>
    /// <param name = "_purchLineType">
    ///     An instance of the <c>PurchLineType</c> class.
    /// </param>
    /// <returns>
    ///     true if inventory must be updated; otherwise, false.
    /// </returns>
    protected boolean mustUpdateInventory(PurchLineType _purchLineType)
    {
        return !_purchLineType.isChangeRequestRequired();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdatePurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the purchase order must be updated.
    /// </summary>
    /// <returns>
    ///     true if the purchase order must be updated; otherwise, false.
    /// </returns>
    [Replaceable]
    protected boolean mustUpdatePurchaseOrder()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSetPriceDiscPriceUnitMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether price discount needs to be set.
    /// </summary>
    /// <returns>
    ///     true if price discount must to be set; otherwise, false.
    /// </returns>
    protected boolean mustSetPriceDiscPriceUnitMarkup()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipAssignInventTransId</Name>
				<Source><![CDATA[
    public boolean skipAssignInventTransId()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteWithoutUpdatingDeliveryScheduleLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the purchase order line without updating associated delivery schedule lines.
    /// </summary>
    /// <remarks>
    /// When calling this method, it is the responsibility of the caller to update the order line.
    /// This is typically done when updating multiple delivery lines in a single transaction and the order line recalculation is performed only once.
    /// </remarks>
    public void deleteWithoutUpdatingDeliveryScheduleLines()
    {
        try
        {
            this.SkipDeliveryScheduleUpdate = NoYes::Yes;

            this.delete();
        }
        finally
        {
            this.SkipDeliveryScheduleUpdate = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInventTrans_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Delete the <c>inventTrans</c> related to the current <c>purchLine</c> if order operation is configured to do not create inventory transactions.
    /// </summary>
    public void deleteInventTrans_BR()
    {
        if (!this.purchTable().createInventTrans_BR())
        {
            InventUpd_DeleteMovement::newMovement(InventMovement::construct(this, InventMovSubType::None, this)).updateNow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePendingRegistrationsNonStocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the pending registration records for the line.
    /// </summary>
    private void deletePendingRegistrationsNonStocked()
    {
        if (!this.isStocked() && this.isTangible())
        {
            TradeNonStockedRegistrationHelper::newFromSalesPurchLine(this).deletePendingRegistration();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSoft</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the record as deleted.
    /// </summary>
    /// <param name="_purchTable">
    /// The purchase order associated with the current purchase order line select for update.
    /// </param>
    /// <param name="_purchLineType">
    /// The <c>PurchLineType</c> object instantiated from the current purchase order line.
    /// </param>
    /// <param name="_sourceDocumentLine">
    /// The <c>SourceDocumentLine</c> table instance for the deleted record.
    /// </param>
    /// <remarks>
    /// This method also performs cascade deletion of related records. The document change management is
    /// notified about the change.
    /// </remarks>
    protected void deleteSoft(PurchTable _purchTable, PurchLineType _purchLineType, SourceDocumentLine _sourceDocumentLine)
    {
        this.IsModified    = NoYes::Yes;
        this.IsDeleted     = NoYes::Yes;
        this.deleteSoftClearValues();

        if (!_purchLineType.checkQuantityUpdateValid())
        {
            this.reread();
            throw error("@SYS18447");
        }

        VersioningPurchaseOrder::newPurchaseOrder(_purchTable).change(null, this);

        using (var purchLineSkipBusinessLogicContext = PurchLineSkipBusinessLogicContext::construct())
        {
            purchLineSkipBusinessLogicContext.parmSkipUpdate(true);
            this.update();
        }

        _purchLineType.updateDistribution();

        // When removing PO line PurchQty is updated to zero after update of DistributionAmountSource.
        if (this.PurchQty)
        {
            this.PurchQty = 0;
            this.doUpdate();
        }

        _sourceDocumentLine.softDelete();

        if (this.whsCheckDeleteLoadline())
        {
            WHSLoadLine::deleteAllForInventTransId(this.InventTransId);
        }

        _purchLineType.deletePurchLinkFromProdBom();

        // As the cascade delete is not executed in this case

        MarkupTrans markupTrans;

        markupTrans.skipDataMethods(false);
        markupTrans.skipDeleteMethod(false);

        delete_from markupTrans
            where markupTrans.TransTableId == this.TableId
            &&    markupTrans.TransRecId   == this.RecId
            &&   !markupTrans.IsDeleted;

        PurchLineForeignTradeCategory purchLineForeignTradeCategory;

        purchLineForeignTradeCategory.skipDataMethods(false);
        purchLineForeignTradeCategory.skipDeleteMethod(false);

        delete_from purchLineForeignTradeCategory
            where purchLineForeignTradeCategory.PurchLineDataAreaId     == this.DataAreaId
            &&    purchLineForeignTradeCategory.PurchLineInventTransId  == this.InventTransId
            &&   !purchLineForeignTradeCategory.IsDeleted;

        AgreementLineReleasedLine agreementLineReleasedLine;

        agreementLineReleasedLine.skipDataMethods(false);
        agreementLineReleasedLine.skipDeleteMethod(false);

        delete_from agreementLineReleasedLine
            where agreementLineReleasedLine.PurchLineInventTransId == this.InventTransId
            &&    agreementLineReleasedLine.PurchLineDataAreaId    == this.DataAreaId
            &&   !agreementLineReleasedLine.IsDeleted;

        PurchDeliverySchedule purchDeliverySchedule;

        purchDeliverySchedule.skipDataMethods(false);
        purchDeliverySchedule.skipDeleteMethod(false);

        delete_from purchDeliverySchedule
            where (purchDeliverySchedule.OrderLine      == this.InventTransId ||
                   purchDeliverySchedule.DeliveryLine   == this.InventTransId   )
            &&    !purchDeliverySchedule.IsDeleted;

        PdsVendBatchInfo pdsVendBatchInfo;

        pdsVendBatchInfo.skipDataMethods(false);
        pdsVendBatchInfo.skipDeleteMethod(false);

        delete_from pdsVendBatchInfo
            where pdsVendBatchInfo.SourceRef == this.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSoftClearValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Zeroes out record fields so the record does not interfere with code unaware of the deleted status.
    /// </summary>
    protected void deleteSoftClearValues()
    {
        if (this.PurchQty == 0)
        {
            this.ProjSalesPrice  = 0;
        }

        if (!this.ProjTransId && !this.ProjSalesPrice)
        {
            this.PurchQty = 0;
        }

        this.QtyOrdered             = 0;
        this.PurchReceivedNow       = 0;
        this.RemainPurchPhysical    = 0;
        this.RemainPurchFinancial   = 0;
        this.PurchPrice             = 0;
        this.LinePercent            = 0;
        this.LineDisc               = 0;
        this.LineAmount             = 0;
        this.PurchMarkup            = 0;
        this.InventReceivedNow      = 0;
        this.MultiLnDisc            = 0;
        this.MultiLnPercent         = 0;
        this.RemainInventPhysical   = 0;
        this.RemainInventFinancial  = 0;
        this.Tax1099Amount          = 0;
        this.Tax1099StateAmount     = 0;
        this.DiscAmount             = 0;
        this.DiscPercent            = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddress</Name>
				<Source><![CDATA[
    LogisticsPostalAddress deliveryAddress()
    {
        return LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress ? this.DeliveryPostalAddress : this.purchTable().DeliveryPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryCNPJCPFNUM_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the delivery CNPJ or CPF for the current record.
    /// </summary>
    /// <returns>
    /// Returns the CNPJ or CPF of the customer if the address is a primary address.
    /// Returns the CNPJ or CPF related to delivery <c>logisticsPostalAddress</c> if the address is not a primary address.
    /// </returns>
    public display CNPJCPFNum_BR deliveryCNPJCPFNUM_BR()
    {
        DirPartyLocation dirPartyLocation;

        if (!BrazilParameters::isEnabled())
            return '';

        VendTable vendTable = VendTable::find(this.VendAccount);

        dirPartyLocation = DirPartyLocation::findByPartyLocation(vendTable.Party, this.deliveryLocation());

        if (!dirPartyLocation.IsPrimary)
        {
            return (select cnpjcpfNum_BR from logisticsLocationExt
                where logisticsLocationExt.Location == this.deliveryLocation()).cnpjcpfNum_BR;
        }

        return vendTable.cnpjcpfNum_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDate</Name>
				<Source><![CDATA[
    public PurchLineDlvDate deliveryDate(PurchLineDlvDate _blankDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        if (this.ConfirmedDlv)
        {
            return this.ConfirmedDlv;
        }

        if (this.DeliveryDate)
        {
            return this.DeliveryDate;
        }

        if (this.purchTable().DeliveryDate)
        {
            return this.purchTable().DeliveryDate;
        }

        return _blankDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryIENum_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the delivery IE for the current record.
    /// </summary>
    /// <returns>
    /// Returns the IE of the customer if the address is a primary address.
    /// Returns the IE related to delivery <c>logisticsPostalAddress</c> if the address is not a primary address.
    /// </returns>
    public display IENum_BR deliveryIENum_BR()
    {
        DirPartyLocation dirPartyLocation;

        if (!BrazilParameters::isEnabled())
            return '';

        dirPartyLocation = DirPartyLocation::findByPartyLocation(VendTable::find(this.VendAccount).Party, this.deliveryLocation());

        if (!dirPartyLocation.IsPrimary)
        {
            return (select ieNum_BR from logisticsLocationExt
                where logisticsLocationExt.Location == this.deliveryLocation()).ieNum_BR;
        }

        return VendTable::find(this.VendAccount).ieNum_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>RecId</c> value of the <c>LogisticsLocation</c> record that is associated with
    /// selected <c>DeliveryPostalAddress</c> record.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c> value of the <c>LogisticsLocation</c> record that is associated with selected
    /// <c>DeliveryPostalAddress</c> record.
    /// </returns>
    public LogisticsLocationRecId deliveryLocation()
    {
        return LogisticsPostalAddress::getLocation(this.DeliveryPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryStatusImage</Name>
				<Source><![CDATA[
    display ImageRes deliveryStatusImage()
    {
        #resAppl

        if (!this.RecId)
        {
            return 0;
        }

        if (this.receivedInTotal())
        {
            if (this.RemainPurchPhysical > 0)
            {
                return #ImageNew;
            }
            return #ImageOverlayYes;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryStatusTxt</Name>
				<Source><![CDATA[
    str deliveryStatusTxt()
    {
        if (!this.RecId)
        {
            return '';
        }

        if (this.receivedInTotal())
        {
            if (this.RemainPurchPhysical > 0)
            {
                return "@SYS89798";
            }
            return "@SYS89797";
        }

        return "@SYS99500";
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryTerm</Name>
				<Source><![CDATA[
    DlvTermId deliveryTerm()
    {
        return this.purchTable().DlvTerm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryTransDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the delivery date at midnight in the time zone of the site on the purchase order line.
    /// </summary>
    /// <returns>
    ///    Delivery date and time in UTC when it is midnight on the delivery date on the site on the purchase order line.
    /// </returns>
    public TransDateTime deliveryTransDateTime()
    {
        return DateTimeUtil::newDateTime(this.deliveryDate(), 0, this.timeZoneSite());
    }

]]></Source>
			</Method>
			<Method>
				<Name>discAmount</Name>
				<Source><![CDATA[
    DiscAmount discAmount()
    {
        return PriceDisc::discAmount(PurchParameters::find().Disc, this.LineDisc, this.MultiLnDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    DiscPct   discPercent()
    {
        return PriceDisc::discPercent(PurchParameters::find().Disc, this.LinePercent, this.MultiLnPercent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget check result value for the record.
    /// </summary>
    /// <returns>
    /// The budget check result value for the record.
    /// </returns>
    public display BudgetCheckResult displayBudgetCheckResult()
    {
        return this.getBudgetCheckResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDistributionUpdateNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c>PurchLine</c> table buffer should update the associated <c>SourceDocumentDistribution</c> table.
    /// </summary>
    /// <param name = "_purchLineOrig">
    /// The original purchase order line which is updated.
    /// </param>
    /// <returns>
    /// true, if the the associated <c>SourceDocumentDistribution</c> records should be updated; otherwise, false.
    /// </returns>
    protected final boolean isDistributionUpdateNeeded(PurchLine _purchLineOrig)
    {
        #ISOcountryRegionCodes

        return this.ItemId != _purchLineOrig.ItemId
            || this.PriceUnit != _purchLineOrig.PriceUnit
            || this.PurchPrice != _purchLineOrig.PurchPrice
            || this.LinePercent != _purchLineOrig.LinePercent
            || this.LineDisc != _purchLineOrig.LineDisc
            || this.PurchQty != _purchLineOrig.PurchQty
            || this.TaxItemGroup != _purchLineOrig.TaxItemGroup
            || this.TaxGroup != _purchLineOrig.TaxGroup
            || this.MultiLnDisc != _purchLineOrig.MultiLnDisc
            || this.MultiLnPercent != _purchLineOrig.MultiLnPercent
            || this.ProjTaxGroupId != _purchLineOrig.ProjTaxGroupId
            || this.ProjTaxItemGroupId != _purchLineOrig.ProjTaxItemGroupId
            || this.ProcurementCategory != _purchLineOrig.ProcurementCategory
            || this.PurchMarkup != _purchLineOrig.PurchMarkup
            || this.LineAmount != _purchLineOrig.LineAmount
            || this.AccountingDistributionTemplate != _purchLineOrig.AccountingDistributionTemplate
            || this.ProjId != _purchLineOrig.ProjId
            || this.ActivityNumber != _purchLineOrig.ActivityNumber
            || this.ProjCategoryId != _purchLineOrig.ProjCategoryId
            || this.ProjLinePropertyId != _purchLineOrig.ProjLinePropertyId
            || this.ProjSalesCurrencyId != _purchLineOrig.ProjSalesCurrencyId
            || this.ProjSalesUnitId != _purchLineOrig.ProjSalesUnitId
            || this.ProjSalesPrice != _purchLineOrig.ProjSalesPrice
            || this.ProjTaxGroupId != _purchLineOrig.ProjTaxGroupId
            || this.ProjTaxItemGroupId != _purchLineOrig.ProjTaxItemGroupId
            || this.AssetId != _purchLineOrig.AssetId
            || this.AssetGroup != _purchLineOrig.AssetGroup
            || this.AssetBookId != _purchLineOrig.AssetBookId
            || this.AssetTransTypePurch != _purchLineOrig.AssetTransTypePurch
            || this.CurrencyCode != _purchLineOrig.CurrencyCode
            || !LedgerDimensionFacade::areEqual(this.LedgerDimension, _purchLineOrig.LedgerDimension)
            || !DimensionDefaultFacade::areEqual(this.DefaultDimension, _purchLineOrig.DefaultDimension)
            || this.hasIndirectTaxFieldChanged_IN()
            || (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
                && (this.inventDim().InventProfileId_RU != _purchLineOrig.inventDim().InventProfileId_RU
                    || this.purchLine_W().MarkupCode_RU != _purchLineOrig.purchLine_W().MarkupCode_RU))
            || this.isDistributionUpdateNeededForTaxIntegration(_purchLineOrig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDistributionUpdateNeededForTaxIntegration</Name>
				<Source><![CDATA[
    /// <summary>
    /// When tax integration is enabled
    /// Determines whether a change to the <c>PurchLine</c> table buffer should update the associated <c>SourceDocumentDistribution</c> table.
    /// </summary>
    /// <param name = "_purchLineOrig">
    /// The original purchase order line which is updated.
    /// </param>
    /// <returns>
    /// true, if the the associated <c>SourceDocumentDistribution</c> records should be updated for tax integration; otherwise, false.
    /// </returns>
    protected boolean isDistributionUpdateNeededForTaxIntegration(PurchLine _purchLineOrig)
    {
        return Tax::isTaxIntegrationEnabledforBusinessProcess(TaxIntegrationBusinessProcess::Purchase)
            && (this.InventDimId != _purchLineOrig.InventDimId
                || this.InventTransId != _purchLineOrig.InventTransId
                || this.VariantId != _purchLineOrig.VariantId
                || this.MCRDropShipment != _purchLineOrig.MCRDropShipment
                || this.OverrideSalesTax != _purchLineOrig.OverrideSalesTax
                || this.DeliveryPostalAddress != _purchLineOrig.DeliveryPostalAddress
                || this.ProjId != _purchLineOrig.ProjId
                || this.IntrastatCommodity != _purchLineOrig.IntrastatCommodity
                || this.DlvTerm != _purchLineOrig.DlvTerm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doDistributionsExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs a check whether any distributions exist for a line
    /// </summary>
    /// <returns>
    ///    True, if the line has at least one distribution; otherwise false.
    /// </returns>
    public boolean doDistributionsExist()
    {
        return SourceDocumentLineProvider::isLineDistributed(this.sourceDocumentLine(), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doReCalcPricesFromBasePrompt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prompts the user to specify whether to recalculate prices based on trade agreements.
    /// </summary>
    /// <returns>
    /// true if the prices should be recalculated; otherwise, false.
    /// </returns>
    public boolean doReCalcPricesFromBasePrompt()
    {
        // Run the price discount policy dialog in order to let the user determine which agreement values to recalculate.
        return this.runPriceDiscPolicyDialog(0, false, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editableInWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the user can modify the record when an active workflow is running.
    /// </summary>
    /// <returns>
    /// A Boolean value that indicates whether the user has rights to modify the record.
    /// </returns>
    public boolean editableInWorkflow()
    {
        return ((this.EditableInWorkflow
                || this.WorkflowState == TradeWorkflowState::Returned
                || this.WorkflowState == TradeWorkflowState::ChangeRequest)
                && this.isUserWorkItemOwner());
    }

]]></Source>
			</Method>
			<Method>
				<Name>editProductDimensionsAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the product dimensions on the line can be edited.
    /// </summary>
    /// <returns>
    ///     true for order lines without delivery lines; otherwise, false.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public boolean editProductDimensionsAllowed()
    {
        return this.salesPurchLineInterface().editProductDimensionsAllowed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public boolean endDisc()
    {
        return this.salesPurchLineInterface().endDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exceptionCode_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the exception code of the item in the current purchase order line.
    /// </summary>
    /// <returns>
    /// The exception code of the item.
    /// </returns>
    display ExceptionCode_BR exceptionCode_BR()
    {
        return this.inventTable().ExceptionCode_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether saved unposted invoices exist for the current record.
    /// </summary>
    /// <returns>
    /// true if a saved pending invoice exists for this purchase order line; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The current record includes unposted invoices saved in batches or in the process of being edited.
    /// Additionally it includes those invoices that are actually saved as pending.
    /// </remarks>
    public boolean existInvoice()
    {
        VendInvoiceInfoLine     vendInvoiceInfoLine;
        VendInvoiceInfoTable    vendInvoiceInfoTable;

        if (this.purchTable().isOpenOrder() || this.purchTable().isReceived())
        {
            select firstonly RecId from vendInvoiceInfoLine
                    where vendInvoiceInfoLine.InventTransId == this.InventTransId
            exists join vendInvoiceInfoTable
                    where vendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId
                        && vendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId
                        && vendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed;

            if (vendInvoiceInfoLine.RecId != 0)
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existInvoice_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if invoice line exist for the current record.
    /// </summary>
    /// <returns>
    /// true if invoice line exists for this purchase order line, otherwise, false.
    /// </returns>
    public boolean existInvoice_RU()
    {
        VendInvoiceInfoLine     vendInvoiceInfoLine;

        if (this.isOpenOrder() || this.isReceived())
        {
            select firstonly RecId from vendInvoiceInfoLine
                where vendInvoiceInfoLine.InventTransId == this.InventTransId;

            if (vendInvoiceInfoLine.RecId != 0)
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandBOM</Name>
				<Source><![CDATA[
    void expandBOM(TmpFrmVirtual  _tmpFrmVirtual, BOM tmpBOM)
    {
        PurchTable              purchTable;
        PurchLine               purchLine;
        BOMCalcData             bomCalcData;
        InventTable             inventTable;
        RouteId                 routeNum;
        TradeLineNumberManager  lineNumberManager;
        Counter                 x = 1;

        ttsbegin;
        purchTable          = this.purchTable();
        inventTable         = this.inventTable();
        bomCalcData         = BOMCalcData::newInventTable(this.QtyOrdered,inventTable);
        routeNum            = inventTable.routeId(purchTable.DeliveryDate, this.QtyOrdered, this.inventDim());
        lineNumberManager   = TradeLineNumberManager::newLine(this);
        lineNumberManager.moveLineToLast(false);

        while select _tmpFrmVirtual
        {
            this.resetInvent();
            break;
        }

        while select _tmpFrmVirtual
        {
            purchLine.clear();
            select tmpBOM where tmpBOM.RecId == _tmpFrmVirtual.RecordNo;
            purchLine.initFromPurchTable(purchTable);
            purchLine.initFromBOM(tmpBOM, this);
            purchLine.setAddressFromPurchLine(this);

            purchLine.QtyOrdered	= EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(tmpBOM.ItemId,
                                                                                                            tmpBOM.InventDimId,
                                                                                                            BOMCalcConsumption::construct(tmpBOM.Formula, bomCalcData).calcConsumption(tmpBOM,
                                                                                                                                                                                       Route::accError(routeNum,
                                                                                                                                                                                                       tmpBOM.OprNum)),
                                                                                                            tmpBOM.UnitId,
                                                                                                            purchLine.inventTable().inventUnitId(),
                                                                                                            NoYes::Yes);

            purchLine.PurchQty		= EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(tmpBOM.ItemId,
                                                                                                            tmpBOM.InventDimId,
                                                                                                            purchLine.QtyOrdered,
                                                                                                            purchLine.inventTable().inventUnitId(),
                                                                                                            purchLine.PurchUnit,
                                                                                                            NoYes::Yes);

            lineNumberManager.setLine(purchLine);
            lineNumberManager.preUpdateLineNumber(false);

            purchLine.ActivityNumber = this.ActivityNumber;
            if (!purchLine.ProjCategoryId)
            {
                purchLine.ProjCategoryId = this.ProjCategoryId;
            }

            purchLine.createLine(true,false,false,false,true,true, false, true);
            purchLine.LineHeader    = strFmt("@SYS25825", this.inventTable().defaultProductName());
            purchLine.write();
            lineNumberManager.postUpdateLineNumber();
            x++;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extensionOrig</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>PurchLine</c> record based on the original purchase order line record including extension table records.
    /// </summary>
    /// <returns>The original purchase order line record including extension table records.</returns>
    [Hookable(false)]
    public PurchLine extensionOrig()
    {
        PurchLine purchLineOrig = this.orig();

        if (PurchLine::hasExensionTableEnabled())
        {
            purchLineOrig.SysExtensionSerializerMap::copyExtensionTableData(purchLineOrig, true);
        }

        return purchLineOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldChanged</Name>
				<Source><![CDATA[
    boolean fieldChanged(FieldId  fieldId)
    {
        boolean  ok = false;

        if (!this.RecId)
        {
            ok = true;
        }

        if (this.orig().(fieldId) != this.(fieldId))
        {
            ok = true;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if an agreement line exists
    /// </summary>
    /// <returns>
    /// An <c>AgreementLine</c> record.
    /// </returns>
    public AgreementLine findAgreementLine()
    {
        PurchTable      purchTable = this.purchTable();
        AgreementLine   agreementLine;

        if (this.MatchingAgreementLine && purchTable.OrderAccount == this.VendAccount )
        {
            agreementLine = AgreementLine::find(this.MatchingAgreementLine);
            if (agreementLine.Agreement != purchTable.MatchingAgreement || agreementLine.IsDeleted)
            {
                agreementLine = null;
            }
        }

        return agreementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findApproved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the original purchase line.
    /// </summary>
    /// <returns>
    /// A <c>PurchLine</c> record.
    /// </returns>
    /// <remarks>
    /// If the purchase order has change request enabled, then the approved record is fetched from the
    /// <c>PurchLineHistory</c> table, otherwise the original record would be returned.
    /// </remarks>
    public PurchLine findApproved()
    {
        PurchLineHistory    purchLineHistory;
        PurchLine           purchLineApproved;

        if (!this.RecId)
        {
            return null;
        }

        if (this.type().isChangeRequestRequired() && !this.isLatestPOVersionNotArchived())
        {
            purchLineHistory = PurchLineHistory::find(this);
            if (!purchLineHistory)
            {
                return null;
            }

            purchLineApproved.setTmp();
            purchLineApproved.data(this.data());
            purchLineApproved.doInsert();

            purchLineApproved.initFromPurchLineHistory(purchLineHistory);

            return purchLineApproved;
        }

        return(this.orig());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fshCrossDocking</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns the total transfer order quantity for the given purchase order line.
    /// </summary>
    /// <param name="_tPurchLine">
    ///   A <c>PurchLine</c> record.
    /// </param>
    /// <returns>
    ///   A purchase quantity.
    /// </returns>
    display PurchQty fshCrossDocking(PurchLine _tPurchLine)
    {
        real                rQty;

        InventTransferLine      tInventTransferLine;
        InventLocation          tInventLocation;

        while select * from tInventLocation
            index InventLocationIdx
            where tInventLocation.fshStore == NoYes::Yes
        {
            tInventTransferLine = RetailReplenishmentTransferOrder::findTransferOrderLine(tableNum(PurchLine), _tPurchLine.RecId, tInventLocation.InventLocationId, false);

            if (tInventTransferLine)
            {
                rQty += tInventTransferLine.QtyTransfer;
            }
        }

        return rQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>BudgetCheckResult</c> value for the <c>PurchLine</c> record.
    /// </summary>
    /// <returns>
    /// A <c>BudgetCheckResult</c> value which is calculated by the query.
    /// </returns>
    public BudgetCheckResult getBudgetCheckResult()
    {
        return BudgetSourceSourceDocumentLine::findBudgetCheckResult(this.SourceDocumentLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDebitCredit</Name>
				<Source><![CDATA[
    DebitCredit getDebitCredit()
    {
        DebitCredit debitCredit;

        if (this.LineAmount < 0 || this.QtyOrdered < 0 || this.PurchQty < 0)
        {
            debitCredit = DebitCredit::Credit;
        }
        else
        {
            debitCredit = DebitCredit::Debit;
        }

        return debitCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryEntityRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the delivery entity record based on the postal address.
    /// </summary>
    /// <returns>
    ///    A <c>CompanyInfo</c>, <c>InventLocation</c> or <c>InventSite</c> record.
    /// </returns>
    public Common getDeliveryEntityRecord()
    {
        return this.TradePostalAddress::getDeliveryEntityRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEffectiveLinePrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the effective price for the purchase order line.
    /// </summary>
    /// <returns>
    ///     The effective price for the purchase order line.
    /// </returns>
    /// <remarks>
    ///     For a line that uses advanced pricing, this will be the adjusted unit price, otherwise it is the
    ///     standard unit price value on the line.
    /// </remarks>
    public PurchPrice getEffectiveLinePrice()
    {
        PurchPrice              purchPrice;
        PDSAdvancedPriceInfo    advancedPriceInfo = this.pdsAdvancedPriceInfo();

        if (advancedPriceInfo && advancedPriceInfo.CalculatedUnitPrice)
        {
            purchPrice = advancedPriceInfo.CalculatedUnitPrice;
        }
        else
        {
            purchPrice = this.PurchPrice;
        }

        return purchPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGrossVolumePerItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the gross volume per item for the given <c>PurchLine</c> record.
    /// </summary>
    /// <returns>
    /// A <c>Volume</c> value, which is the gross volume per item on the line.
    /// </returns>
    public Volume getGrossVolumePerItem()
    {
        InventTable         inventTable;
        InventTableModule   inventTableModule;
        Volume              grossVolume;

        if (this.isStocked())
        {
            grossVolume = this.inventTable().grossVolume();
        }
        else
        {
            if (!this.isCategoryBased())
            {
                //Volume of non-stocked item is derived from the volume defined on InventTable,
                //by converting the UnitOfMeasure defined on Purchase Line to the UnitOfMeasure defined on InventTable
                inventTable         = this.inventTable();
                inventTableModule   = inventTable.inventTableModulePurch();

                grossVolume = inventTable.grossVolume();
                if (this.PurchUnit && inventTableModule.UnitId && this.PurchUnit != inventTableModule.UnitId)
                {
                    grossVolume = grossVolume * this.unitConvertPurch2Invent(1);
                }
            }
        }
        return grossVolume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGrossWeightPerItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the gross weight per item for the given <c>PurchLine</c> record.
    /// </summary>
    /// <returns>
    /// A <c>Weight</c> value, which is the gross weight per item on the line.
    /// </returns>
    public Weight getGrossWeightPerItem()
    {
        InventTable         inventTable;
        InventTableModule   inventTableModule;
        Weight              grossWeight;

        if (this.isStocked())
        {
            grossWeight = this.inventTable().grossWeight();
        }
        else
        {
            if (this.isCategoryBased())
            {
                grossWeight = PurchLineForeignTradeCategory::findpurchLine(this).UnitWeight;
            }
            else
            {
                //Weight of non-stocked item is derived from the weight defined on InventTable,
                //by converting the UnitOfMeasure defined on Purchase Line to the UnitOfMeasure defined on InventTable
                inventTable         = this.inventTable();
                inventTableModule   = inventTable.inventTableModulePurch();

                grossWeight = inventTable.grossWeight();
                if (this.PurchUnit && inventTableModule.UnitId && this.PurchUnit != inventTableModule.UnitId)
                {
                    grossWeight = grossWeight * this.unitConvertPurch2Invent(1);
                }
            }
        }
        return grossWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the <c>ItemType</c> value for the item.
    /// </summary>
    /// <returns>
    /// The <c>ItemType</c> value for the item.
    /// </returns>
    display ItemType getItemType()
    {
        return InventTable::find(this.ItemId).ItemType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventItemOrderSetupType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the inventory order setup type for the purchase line.
    /// </summary>
    /// <returns>Inventory order setup type for the purchase line.</returns>
    public InventItemOrderSetupType getInventItemOrderSetupType()
    {
        return InventItemOrderSetupType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMiscChargesAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the amount.
    /// </summary>
    /// <returns>
    /// Returns the amount.
    /// </returns>
    public Amount getMiscChargesAmount_IN()
    {
        return this.SalesPurchJournalLine::getMiscChargesAmountPlusLineAmount(this.TableId, this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjCreditNoteSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the original purchase line.
    /// </summary>
    /// <param name="update">
    ///    A Boolean value that determines whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    ///    A <c>PurchLine</c> record.
    /// </returns>
    PurchLine getProjCreditNoteSource(boolean  update = false)
    {
        PurchLine               sourcePurchLine;
        RefRecId                projCreditNoteSourceRefRecId;
        ProjCreditNoteSource    projCreditNoteSource;

        projCreditNoteSourceRefRecId = SysTransactionScopeCache::get(classStr(PurchCopying), identifierStr(projCreditNoteSourceRefRecId));
        if (projCreditNoteSourceRefRecId)
        {
            sourcePurchLine = PurchLine::findRecId(projCreditNoteSourceRefRecId, update);
        }
        else
        {
            projCreditNoteSource = ProjCreditNoteSource::find(this.RecId);
            if (projCreditNoteSource)
            {
                sourcePurchLine = PurchLine::findRecId(projCreditNoteSource.ProjCreditNoteSource, update);
            }
        }

        return sourcePurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchCommitmentLine_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the commitment line record that the current <c>PurchLine</c> record is associated with.
    /// </summary>
    /// <param name="_forupdate">
    /// true if the commitment line record should be selected for update; otherwise, false.
    /// </param>
    /// <returns>
    /// The commitment line record that the current <c>PurchLine</c> record is associated with.
    /// </returns>
    public PurchCommitmentLine_PSN getPurchCommitmentLine_PSN(boolean _forupdate = false)
    {
        PurchCommitmentLine_PSN purchCommitmentLine;

        if (_forupdate)
        {
            select firstonly forupdate purchCommitmentLine
                where purchCommitmentLine.RecId == this.PurchCommitmentLine_PSN;
        }
        else
        {
            select firstonly purchCommitmentLine
                where purchCommitmentLine.RecId == this.PurchCommitmentLine_PSN;
        }

        return purchCommitmentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchReqItemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the name of the item associated with the related requisition line.
    /// </summary>
    /// <returns>
    /// The name of the item associated with the related requisition line.
    /// </returns>
    public display ItemNameDisplay getPurchReqItemName()
    {
        if (this.PurchReqLineRefId)
        {
            return PurchReqLine::findLineRefId(this.PurchReqLineRefId).itemName();
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAmountChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a change to the <c>PurchLine</c> table buffer should trigger a recalculation of the
    /// <c>PurchTotals</c>.
    /// </summary>
    /// <param name = "_purchLineOrig">
    /// The original purchase order line which is updated.
    /// </param>
    /// <returns>
    /// true if the <c>PurchTotals</c> should be triggered.
    /// </returns>
    private boolean hasAmountChanged(PurchLine _purchLineOrig)
    {
        return     ((this.PriceUnit            != _purchLineOrig.PriceUnit) ||
                    (this.PurchPrice           != _purchLineOrig.PurchPrice) ||
                    (this.LinePercent          != _purchLineOrig.LinePercent) ||
                    (this.LineDisc             != _purchLineOrig.LineDisc) ||
                    (this.PurchQty             != _purchLineOrig.PurchQty) ||
                    (this.MultiLnDisc          != _purchLineOrig.MultiLnDisc) ||
                    (this.MultiLnPercent       != _purchLineOrig.MultiLnPercent) ||
                    (this.LineAmount           != _purchLineOrig.LineAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTaxChanged</Name>
				<Source><![CDATA[
    private boolean hasTaxChanged(PurchLine _purchLineOrig)
    {
        return     ((this.TaxGroup             != _purchLineOrig.TaxGroup) ||
                    (this.TaxItemGroup         != _purchLineOrig.TaxItemGroup));
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAssetAssociated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the line has an associated asset.
    /// </summary>
    /// <returns>
    /// true if the line has asset information set; otherwise, false.
    /// </returns>
    boolean hasAssetAssociated()
    {
        return (this.AssetId != '' || this.CreateFixedAsset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOnlyLineAmount</Name>
				<Source><![CDATA[
    boolean hasOnlyLineAmount()
    {
        return this.PriceDiscLine::hasOnlyLineAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasRetentionTerms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if the Purchase Order Line item has retention terms.
    /// </summary>
    /// <returns>
    /// true if the line has retention terms; otherwise, false.
    /// </returns>
    public boolean hasRetentionTerms()
    {
        return (this.psaRetainScheduleId != "");
    }

]]></Source>
			</Method>
			<Method>
				<Name>ICMSReceivableLongTerm_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>ICMS</c> asset is receivable long term.
    /// </summary>
    /// <returns>
    /// True if the <c>ICMS</c> asset is receivable long term; otherwise, false.
    /// </returns>
    public NoYes ICMSReceivableLongTerm_BR()
    {
        if (!BrazilParameters::isEnabled() || (!this.AssetId && !this.AssetGroup))
        {
            return false;
        }

        if (!this.CreateFixedAsset)
        {
            return AssetTable::find(this.AssetId).TaxICMSOutgoing_BR;
        }
        else
        {
            return AssetGroup::find(this.AssetGroup).TaxICMSOutgoing_BR;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public boolean inclTax()
    {
        return this.salesPurchLineInterface().inclTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBarcode</Name>
				<Source><![CDATA[
    void initBarcode(InventDim _inventDim = this.inventDim())
    {
        InventItemBarcode inventItemBarcode = this.lookupBarcode(_inventDim);

        this.BarCode        = inventItemBarcode.ItemBarCode;
        this.BarCodeType    = inventItemBarcode.BarcodeSetupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBarcode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up the <c>InventItemBarcode</c> record to initialize barcode fields from.
    /// </summary>
    /// <param name = "_inventDim">
    /// The <c>InventDim</c> record.
    /// </param>
    /// <returns>
    /// <c>InventItemBarcode</c> record.
    /// </returns>
    [Replaceable]
    protected InventItemBarcode lookupBarcode(InventDim _inventDim)
    {
        InventItemBarcode inventItemBarcode = InventItemBarcode::findPurchBarcodeDimension(this.ItemId, _inventDim, '', this.PurchUnit);

        if (!inventItemBarcode.RecId)
        {
            inventItemBarcode = InventItemBarcode::findPurchBarcodeDimension(this.ItemId, _inventDim);
        }
        return inventItemBarcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>PurchLine</c> table record with the values from the <c>AgreementLine</c> table record.
    /// </summary>
    /// <param name="_agreementLine">
    /// A record of the <c>AgreementLine</c> table.
    /// </param>
    public void initFromAgreementLine(AgreementLine _agreementLine)
    {
        this.type().initFromAgreementLine(_agreementLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBOM</Name>
				<Source><![CDATA[
    void initFromBOM(BOM        bom,
                     PurchLine  parentLine)
    {
        InventDim                       inventDim;
        PurchTable_RU                   purchTable_RU;

        if (this.InventDimId)
        {
            inventDim = this.inventDim();
        }

        this.ItemId             = bom.ItemId;
        EcoResProductDimGroupSetup::copyProductDimensionsForItem(this.ItemId, bom.inventDim(), inventDim);

        if (EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(this.ItemId, fieldNum(InventDim, InventProfileId_RU)) &&
            ! inventDim.InventProfileId_RU)
        {
            if (! inventDim.InventProfileId_RU)
            {
                inventDim.InventProfileId_RU = bom.inventDim().InventProfileId_RU;
            }

            if (! inventDim.InventProfileId_RU)
            {
                inventDim.InventProfileId_RU = BOMParameters::find().InventProfileId_RU;
            }

            purchTable_RU = parentLine.purchTable().purchTable_RU();
            if (purchTable_RU.InventProfileType_RU &&
                purchTable_RU.InventProfileType_RU != inventDim.inventProfile_RU().InventProfileType)
            {
                throw error(strFmt("@GLS113739",
                                    this.ItemId,
                                    inventDim.InventProfileId_RU,
                                    purchTable_RU.InventProfileType_RU));
            }
        }
        inventDim.InventLocationId  = bom.inventDim().InventLocationId;
        inventDim.initFromInventLocation(inventDim.inventLocation());
        this.setInventDimIdFromInventDim(inventDim);

        this.initFromInventTable(this.inventTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCORPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>purchLine</c> table buffer based on a <c>purchLine</c> table buffer used for unconfirmed product receipts.
    /// </summary>
    /// <param name="_purchLine">
    ///    The <c>purchLine</c> table buffer that is to be copied.
    /// </param>
    void initFromCORPurchLine(PurchLine _purchLine)
    {
        this.Requester          = _purchLine.Requester;

        this.AssetGroup         = _purchLine.AssetGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>PurchLine</c> based on the given item.
    /// </summary>
    /// <param name="_inventTable">
    ///     The <c>InventTable</c> buffer to initialize from.
    /// </param>
    /// <param name="_initDateFields">
    ///     A Boolean that specifies whether the delivery dates should be recalculated; optional.
    /// </param>
    /// </param>
    /// <param name="_executeOnlyIfProductIsFullySpecified">
    ///     A Boolean value indicating whether to perform variant validation; optional.
    /// </param>
    [Hookable(false)]
    public void initFromInventTable(InventTable _inventTable, boolean _initDateFields = true, boolean _executeOnlyIfProductIsFullySpecified = false)
    {
        if (PurchLine::hasExensionTableEnabled())
        {
            this.SysExtensionSerializerMap::packAll();
        }

        PurchLineType purchLineType = this.type();
        purchLineType.initFromInventTable(_inventTable, true, true, _initDateFields, _executeOnlyIfProductIsFullySpecified);

        if (PurchLine::hasExensionTableEnabled())
        {
            this.SysExtensionSerializerMap::unpackAll();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromItemOrCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initiates a <c>PurchLine</c> table buffer from an based on a item or category.
    /// </summary>
    /// <param name="_itemId">
    ///     A <c>ItemId</c> type.
    /// </param>
    /// <param name="_procurementCategory">
    ///     A <c>PurchCategory</c> type.
    /// </param>
    /// <param name="_name">
    ///     The name of the category item.
    /// </param>
    /// <param name="_searchPrice">
    ///     A Boolean that specifies whether prices and discounts should be initiated; optional.
    /// </param>
    /// <param name="_setAddressFromInventDim">
    ///     A Boolean that specifies whether the address should be initiated from the inventory dimension; optional.
    /// </param>
    public void initFromItemOrCategory(
        ItemId          _itemId,
        PurchCategory   _procurementCategory,
        ItemFreeTxt     _name,
        boolean         _searchPrice                = true,
        boolean         _setAddressFromInventDim    = true)
    {
        this.type().initFromItemOrCategory(_itemId, _procurementCategory, _name, _searchPrice, _setAddressFromInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromOrderLineWithMultipleDeliveries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a delivery line based on its order line.
    /// </summary>
    /// <param name="_purchLine">
    /// The order line based on which to initialize.
    /// </param>
    /// <param name="_onlyCommercialAttributes">
    /// A Boolean value that indicates whether to initialize only the commercial attributes; optional.
    /// </param>
    /// <remarks>
    /// When the <paramref name="_onlyCommercialAttributes" /> parameter is true it can be used to reset
    /// commercial attributes on an existing delivery line.When the <paramref
    /// name="_onlyCommercialAttributes" /> parameter is false it can be used to initialize new delivery
    /// lines.
    /// </remarks>
    void initFromOrderLineWithMultipleDeliveries(PurchLine _purchLine, boolean _onlyCommercialAttributes = false)
    {
        if (!_onlyCommercialAttributes)
        {
            this.initFromPurchTable(_purchLine.purchTable());
            this.initFromPurchLine(_purchLine, true, false, false, false);

            this.PurchUnit               = _purchLine.PurchUnit;
            this.DeliveryDate            = _purchLine.DeliveryDate;
            this.ConfirmedDlv            = _purchLine.ConfirmedDlv;
            this.MatchingAgreementLine   = _purchLine.MatchingAgreementLine;
            this.PurchReqId              = _purchLine.PurchReqId;
            this.LineDeliveryType        = LineDeliveryType::DeliveryLine;
            this.CustomerRef             = _purchLine.CustomerRef;
            this.ReqPlanIdSched          = _purchLine.ReqPlanIdSched;
            this.ReqPOId                 = _purchLine.ReqPOId;

            if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
            {
                this.RequestedShipDate  = _purchLine.RequestedShipDate;
                this.ConfirmedShipDate  = _purchLine.ConfirmedShipDate;
                this.ShipCalendarId     = _purchLine.ShipCalendarId;
            }
        }

        this.PurchPrice         = _purchLine.PurchPrice;
        this.PriceUnit          = _purchLine.PriceUnit;
        this.LinePercent        = _purchLine.LinePercent;
        this.LineDisc           = _purchLine.LineDisc;
        this.MultiLnDisc        = _purchLine.MultiLnDisc;
        this.MultiLnPercent     = _purchLine.MultiLnPercent;
        this.DiscAmount         = _purchLine.DiscAmount;
        this.DiscPercent        = _purchLine.DiscPercent;
        this.PurchMarkup        = _purchLine.PurchMarkup;
        this.LineAmount         = this.calcLineAmountForced();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPriceDisc</Name>
				<Source><![CDATA[
    void initFromPriceDisc(PriceDisc_Price _priceDisc, PriceDiscPolicyCheckPolicy _checkPolicy = null, boolean _initDateFields = true)
    {
        this.setDeliveryDate(_priceDisc,_initDateFields,true);
        this.setPriceDiscount(_priceDisc, _checkPolicy);  
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryDate</Name>
				<Source><![CDATA[
    private void setDeliveryDate(PriceDisc_Price _priceDisc, boolean _initDateFields,boolean _setPriceDate)
    {
        if (_initDateFields
            && this.SkipUpdate == InterCompanySkipUpdate::No
            && this.LineDeliveryType == LineDeliveryType::OrderLine)
        {
            if (!this.DeliveryDate)
            {
                this.DeliveryDate = this.purchTable().DeliveryDate;
            }

            if (!this.RequestedShipDate && PurchParameters::find().IsSupplierShipmentDatesEnabled)
            {
                this.RequestedShipDate = this.purchTable().RequestedShipDate;
            }

            if ((_priceDisc.deliveryDays() || _priceDisc.calendarDays()) && this.ManualModifiedField != fieldNum(PurchLine, DeliveryDate))
            {
                if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
                {
                    this.calculateRequestedShipAndReceiptDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), dateNull(), SchedDirection::Forward, _priceDisc.deliveryDays(), _priceDisc.calendarDays());
                }
                else
                {
                    // Customer receipt calendar is taken care on the sales order in case of direct delivery
                    CalendarId ourCompanyReceiptCalendar = this.DeliveryType == TradeLineDlvType::DropShip ? '' : this.type().internalCalendarId();
                    WorkCalendarSched workCalendarSched = new WorkCalendarSched();
                    SchedDate schedDate = workCalendarSched.schedDate(
                                                                SchedDirection::Forward,
                                                                DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),      // FromDate
                                                                _priceDisc.deliveryDays(),                                                  // LeadTime
                                                                _priceDisc.calendarDays(),
                                                                this.vendTable_OrderAccount().PurchCalendarId,
                                                                ourCompanyReceiptCalendar);

                    this.DeliveryDate = max(schedDate, this.DeliveryDate);
                }

                if(_setPriceDate)
                {
                    PurchParameters purchParameters = PurchParameters::find();
                    if (purchParameters.PriceDateType == PurchPriceDateType::DeliveryDate) 
                    {
                        _priceDisc.parmPriceDate(this.DeliveryDate);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDiscount</Name>
				<Source><![CDATA[
    private void setPriceDiscount(PriceDisc_Price _priceDisc, PriceDiscPolicyCheckPolicy _checkPolicy)
    {
        if (this.mustSetPriceDiscPriceUnitMarkup())
        {
            if (TaxParameters::checkTaxParameters_IN())
            {
                PurchLine_IN purchLine_IN = this.purchLine_IN();
                purchLine_IN.MaximumRetailPrice = _priceDisc.maxRetailPrice_IN();
                this.packPurchLine_IN(purchLine_IN);
            }
            this.salesPurchLineInterface().setPriceDiscPriceUnitMarkup(_priceDisc, _checkPolicy);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>PurchLine</c> record from the <c>ProdBOM</c> record.
    /// </summary>
    /// <param name="_prodBOM">
    ///    The <c>ProdBOM</c> record from which to initialize the <c>PurchLine</c> record.
    /// </param>
    void initFromProdBOM(ProdBOM   _prodBOM)
    {
        InventDim       inventDim;

        this.ItemId                 = _prodBOM.ItemId;
        this.ProcurementCategory    = EcoResProductCategory::findByItemIdCategoryHierarchyRole(
                                            _prodBOM.ItemId,
                                            EcoResCategoryNamedHierarchyRole::Procurement).Category;
        this.QtyOrdered             = _prodBOM.QtyInventCalc;
        this.RemainInventPhysical   = _prodBOM.QtyInventCalc;

        this.PdsCWQty                   = _prodBOM.PdsCWInventCalc;
        this.PdsCWRemainInventPhysical  = _prodBOM.PdsCWInventCalc;

        if (this.InventDimId)
        {
            inventDim = this.inventDim();
        }

        inventDim.mergeUsedDim(InventDimGroupSetup::newItemId(this.ItemId), _prodBOM.inventDim());

        this.setAddressFromInventDim(inventDim);

        this.setInventDimIdFromInventDim(inventDim);

        this.ReqPlanIdSched         = _prodBOM.ReqPlanIdSched;
        this.ReqPOId                = _prodBOM.ReqPOId;

        this.DeliveryDate           = max(this.DeliveryDate, _prodBOM.RawMaterialDate);
        this.InventRefId            = _prodBOM.ProdId;
        this.InventRefTransId       = _prodBOM.InventTransId;
        this.ItemRefType            = InventRefType::ProdLine;

        this.initName();
        this.initFromVendExternalItemDescription();
        this.initVariantId(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProductDimensions</Name>
				<Source><![CDATA[
    void initFromProductDimensions(InventDim _inventDim = this.inventDim())
    {
        this.initName();
        this.initFromVendExternalItemDescription(_inventDim);
        this.initBarcode(_inventDim);
        this.initVariantId(_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjActivity</Name>
				<Source><![CDATA[
    public void initFromProjActivity(ProjActivity _projActivity)
    {
        if (!_projActivity || !_projActivity.CategoryDefault ||
                ProjCategory::find(_projActivity.CategoryDefault).CategoryType != ProjCategoryType::Item)
        {
            return;
        }

        this.ProjCategoryId = _projActivity.CategoryDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjTable</Name>
				<Source><![CDATA[
    void initFromProjTable(ProjTable projTable, boolean updateSalesPriceOnly = false)
    {
        PriceMarkup     markUpDummy;
        PriceUnit       salesUnitDummy;
        BudgetReservationLine_PSN budgetReservationLine = BudgetReservationLine_PSN::find(this.BudgetReservationLine_PSN);

        if (!updateSalesPriceOnly)
        {
            this.ProjSalesCurrencyId    = projTable.currencyId();
            this.ProjLinePropertyId     = ProjLinePropertySetup::findLinePropertyId(this.ProjId,this.ProjCategoryId);
            this.ProjTaxGroupId         = ProjParameters::taxGroupInvoice(this.ProjId);
            this.ProjTaxItemGroupId     = ProjParameters::taxItemGroupItem(this.ProjCategoryId,this.ItemId);
        }

        if (ProjMultipleContractLinesForProjectFeatureHelper::isInternalProject(projTable))
        {
            this.ProjSalesPrice     = 0;
        }
        else if (budgetReservationLine.recId != 0 && budgetReservationLine.ProjId)
        {
            this.ProjSalesPrice = budgetReservationLine.ProjSalesPrice;
        }
        else if (this.canUpdateSalesPrice())
        {
            this.ProjSalesPrice = this.InventAutoSalesPriceMap::updateSalesPrice(this.inventTable(), this, this.PurchPrice);
        }
        else if (this.ProjId && ProjParameters::find().CreateItemReqForPO == NoYes::Yes)
        {
            this.ProjSalesPrice = this.PurchPrice;
        }
        else if (this.ProjCategoryId)
        {
            this.setProjSalesPrice();
        }
        else
        {
            [this.ProjSalesPrice,
             salesUnitDummy,
             markUpDummy]   = this.inventTable().salesPriceAgreement(
                                    (this.ConfirmedDlv ? this.ConfirmedDlv : this.DeliveryDate),
                                    this.inventDim(),
                                    this.PurchQty,
                                    this.inventTable().inventUnitId(),
                                    projTable.CustAccount,
                                    this.ProjSalesCurrencyId ? this.ProjSalesCurrencyId : projTable.currencyId(),
                                    ProjTable::findPriceGroup(projTable.ProjId));
        }

        this.Scrap                  = NoYes::Yes;
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            this.IsPwp                  = this.psaGetPWPSetting();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateSalesPrice</Name>
				<Source><![CDATA[
    public boolean canUpdateSalesPrice()
    {
        InventTable inventTable= this.inventTable();

        return (inventTable &&
            (inventTable.SalesModel == SalesPriceModel::Contributionratio && inventTable.SalesContributionRatio > 0) &&
            !this.purchTable().isProjectSalesItemReqPO() &&
            !this.getProjCreditNoteSource().purchTable().isProjectSalesItemReqPO());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>PurchLine</c> table buffer based on another <c>PurchLine</c> table buffer.
    /// </summary>
    /// <param name="_purchLine">
    ///    The <c>PurchLine</c> table buffer that is to be copied.
    /// </param>
    /// <param name="_copyPrecisely">
    ///    A Boolean value that specifies whether to precisely copy all the account and tax details; optional.
    /// </param>
    /// <param name="_copyPriceDisc">
    ///    A Boolean value that specifies whether to copy the price discount fields; optional.
    /// </param>
    /// <param name="_copyQty">
    ///    A Boolean value that specifies whether to copy the quantify information; optional.
    /// </param>
    /// <param name="_copyProject">
    ///    A Boolean value that specifies whether to copy the project information; optional.
    /// </param>
    /// <param name="_qty">
    ///    A <c>quantity</c> object that sets the <c>PurchQty</c> field value of the new <c>PurchLine</c>
    ///    table buffer to be different than value of the other table buffer; optional.
    /// </param>
    /// <param name="_cwQty">
    ///    A catch weight quantity object that sets the <c>PdsCWQtyy</c> field value of the new <c>purchLine</c>
    ///    table buffer to be different than value of the other table buffer; optional.
    /// </param>
    /// <param name="_setAddressFromInventDim">
    ///     Boolean value that specifies whether to retrieve the address from the inventory dimension; optional.
    /// </param>
    void initFromPurchLine(
        PurchLine       _purchLine,
        boolean         _copyPrecisely              = true,
        boolean         _copyPriceDisc              = true,
        boolean         _copyQty                    = true,
        boolean         _copyProject                = false,
        Qty             _qty                        = _purchLine.PurchQty,
        PdsCWInventQty  _cwQty                      = _purchLine.PdsCWQty,
        boolean         _setAddressFromInventDim    = true)
    {
        #ISOCountryRegionCodes
        InventDim   inventDim;
        PurchLine_W     toPurchLine_W;
        PurchLine_W     fromPurchLine_W;
        #ISOCountryRegionCodes

        this.setInventDimId(_purchLine.InventDimId);

        this.initFromItemOrCategory(_purchLine.ItemId, _purchLine.ProcurementCategory, _purchLine.Name, !_copyPriceDisc, false);

        this.CreateFixedAsset     = _purchLine.CreateFixedAsset;
        this.AssetGroup           = _purchLine.AssetGroup;
        this.AssetId              = _purchLine.AssetId;
        this.AssetBookId          = _purchLine.AssetBookId;
        this.AssetTransTypePurch  = _purchLine.AssetTransTypePurch;
        this.PlanningPriority     = _purchLine.PlanningPriority;

        if (_copyQty)
        {
            this.PurchQty           = _qty;
            this.PurchUnit          = _purchLine.PurchUnit;
            this.QtyOrdered         = _purchLine.PurchQty == _qty ? _purchLine.QtyOrdered : this.calcQtyOrdered();

            this.PdsCWQty           = _cwQty;
        }
        else
        {
            if (this.isCategoryBased())
            {
                this.PurchUnit          = _purchLine.PurchUnit;
            }
        }

        if (!_copyPrecisely)
        {
            this.initBarcode();
        }

        if (_copyPriceDisc)
        {
            this.PurchPrice         = _purchLine.PurchPrice;
            this.PriceUnit          = _purchLine.PriceUnit;
            this.LinePercent        = _purchLine.LinePercent;
            this.LineDisc           = _purchLine.LineDisc;
            this.MultiLnDisc        = _purchLine.MultiLnDisc;
            this.MultiLnPercent     = _purchLine.MultiLnPercent;
            this.PurchMarkup        = _purchLine.PurchMarkup;
            this.LineAmount         = _purchLine.LineAmount;
            this.DiscAmount         = _purchLine.DiscAmount;
            this.DiscPercent        = _purchLine.DiscPercent;

            this.pdsCalculationId   = _purchLine.pdsCalculationId;
        }

        if (_copyPrecisely)
        {
            this.setInventDimId(_purchLine.InventDimId);
            this.Name               = _purchLine.Name;
            this.ExternalItemId     = _purchLine.ExternalItemId;
            this.LedgerDimension    = _purchLine.LedgerDimension;
            this.Blocked            = _purchLine.Blocked;
            this.Complete           = _purchLine.Complete;
            this.TaxGroup           = _purchLine.TaxGroup;
            this.TaxItemGroup       = _purchLine.TaxItemGroup;
            this.OverrideSalesTax   = _purchLine.OverrideSalesTax;
            this.DefaultDimension   = _purchLine.DefaultDimension;
            this.OverDeliveryPct    = _purchLine.OverDeliveryPct;
            this.UnderDeliveryPct   = _purchLine.UnderDeliveryPct;
            this.Transport          = _purchLine.Transport;
            this.Port               = _purchLine.Port;
            this.StatProcId         = _purchLine.StatProcId;
            this.IntrastatCommodity = _purchLine.IntrastatCommodity;
            this.OrigCountryRegionId = _purchLine.OrigCountryRegionId;
            this.OrigStateId        = _purchLine.OrigStateId;
            this.AccountingDistributionTemplate = _purchLine.AccountingDistributionTemplate;

            if (FinTagConfiguration::isFinTagConfigurationSet(_purchLine.DataAreaId)
                && PurchaseOrderFinTagFeature::isEnabled())
            {
                this.FinTag = _purchLine.FinTag;
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                fromPurchLine_W = _purchLine.purchLine_W();
                toPurchLine_W   = this.purchLine_W();
                toPurchLine_W.PostingProfile_RU     = fromPurchLine_W.PostingProfile_RU;
                toPurchLine_W.MarkupCode_RU         = fromPurchLine_W.MarkupCode_RU;
                this.packPurchLine_W(toPurchLine_W);
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
            {
                toPurchLine_W   = this.purchLine_W();
                toPurchLine_W.WithholdingTypeCode_MX = _purchLine.purchLine_W().WithholdingTypeCode_MX;
                this.packPurchLine_W(toPurchLine_W);
            }

            this.BarCode            = _purchLine.BarCode;
            this.BarCodeType        = _purchLine.BarCodeType;

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoUS]) && this.purchTable().vendTable_InvoiceAccount().Tax1099Reports)
            {
                this.Tax1099Fields      = _purchLine.Tax1099Fields;
                this.Tax1099Amount      = _purchLine.Tax1099Amount;
                this.Tax1099State       = _purchLine.Tax1099State;
                this.Tax1099StateAmount = _purchLine.Tax1099StateAmount;
            }

            this.setAddressFromPurchLine(_purchLine);

            if (BrazilParameters::isEnabled())
            {
                this.cfopTable_BR        = _purchLine.cfopTable_BR;
                this.type().updateFiscalDocumentText_BR(FiscalDocumentTextType_BR::CFOP);
            }
        }
        else
        {
            if (_setAddressFromInventDim)
            {
                this.setAddressFromInventDim(this.inventDim());
            }
        }

        if (_copyProject)
        {
            this.ProjId             = _purchLine.ProjId;
            this.ActivityNumber     = _purchLine.ActivityNumber;
            this.ProjCategoryId     = _purchLine.ProjCategoryId;
            this.ProjLinePropertyId = _purchLine.ProjLinePropertyId;
            this.ProjSalesCurrencyId= _purchLine.ProjSalesCurrencyId;
            this.ProjSalesUnitId    = _purchLine.ProjSalesUnitId;
            this.ProjSalesPrice     = _purchLine.ProjSalesPrice;
            this.ProjTaxGroupId     = _purchLine.ProjTaxGroupId;
            this.ProjTaxItemGroupId = _purchLine.ProjTaxItemGroupId;
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            this.VariantId             = _purchLine.VariantId;
        }

        if (TaxParameters::checkTaxParameters_IN() || TaxWithholdParameters_IN::checkTaxParameters())
        {
            this.initFromPurchLine_IN(_purchLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the fields of <c> PurchLine </c> from given <c> PurchLine </c> buffer.
    /// </summary>
    /// <param name="_purchLine">
    /// Buffer of <c> PurchLine </c>.
    /// </param>
    public void initFromPurchLine_IN(PurchLine _purchLine)
    {
        PurchLine_IN    purchLineFrom_IN    = _purchLine.purchLine_IN();
        PurchLine_IN    purchLineTo_IN      = this.purchLine_IN();

        if (TaxParameters::checkTaxParameters_IN())
        {
            purchLineTo_IN.AssessableValueTransactionCurrency   = purchLineFrom_IN.AssessableValueTransactionCurrency;
            purchLineTo_IN.AssessableValueAccountingCurrency    = purchLineFrom_IN.AssessableValueAccountingCurrency;
            purchLineTo_IN.MaximumRetailPrice                   = purchLineFrom_IN.MaximumRetailPrice;

            if (TaxParameters::checkParameterForPosting_IN(TaxType_IN::Customs) &&
                _purchLine.purchTable().purchTable_W().CustomsImportOrder_IN &&
                this.purchTable().purchTable_W().CustomsImportOrder_IN)
            {
                purchLineTo_IN.CustomsMaxRetailPrice   = purchLineFrom_IN.CustomsMaxRetailPrice;
                purchLineTo_IN.MaximumRetailPrice      = CurrencyHelper_IN::customsCurAmount_IN(purchLineFrom_IN.CustomsMaxRetailPrice,
                                                                                _purchLine.CurrencyCode,
                                                                                Direction_IN::Import,
                                                                                DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                                                false);
            }
        }
        if (TaxParameters::checkTaxParameters_IN())
        {
            purchLineTo_IN.tdsGroup                    = purchLineFrom_IN.tdsGroup;
            purchLineTo_IN.tcsGroup                    = purchLineFrom_IN.tcsGroup;
        }

        this.packPurchLine_IN(purchLineTo_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLineHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the history record that is based on a <c>PurchLineHistory</c> record.
    /// </summary>
    /// <param name="_purchLineHistory">
    /// A <c>PurchLineHistory</c> record on which to base initialization.
    /// </param>
    public void initFromPurchLineHistory(PurchLineHistory _purchLineHistory)
    {
        PurchLineMap_W          purchLineMap_W;
        PurchLine_W             purchLine_W;
        PurchLineMap_IN         purchLineMap_IN;
        PurchLine_IN            purchLine_IN;

        this.purchLineVersioning().copyVersion(_purchLineHistory.purchLineVersioning());

        if (PurchLine_IN::isExtensionEnabled())
        {
            purchLineMap_IN.data(_purchLineHistory.purchLineHistory_IN());
            purchLine_IN.data(purchLineMap_IN.data());
            this.SysExtensionSerializerMap::packExtensionTable(purchLine_IN);
        }
        if (PurchLine_W::isExtensionEnabled())
        {
            purchLineMap_W.data(_purchLineHistory.purchLineHistory_W());
            purchLine_W.data(purchLineMap_W.data());
            this.SysExtensionSerializerMap::packExtensionTable(purchLine_W);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchParmLine_Asset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the asset-related field values of the <c>PurchLine</c> table.
    /// </summary>
    /// <param name="_parmLine_Asset">
    /// A <c>PurchParmLine_Asset</c> or <c>VendInvoiceInfoLine_Asset</c> table buffer which will be used to
    /// set the asset-related field values of the <c>PurchLine</c> table.
    /// </param>
    void initFromPurchParmLine_Asset(VendDocumentLineAssetMap _parmLine_Asset)
    {
        if  (_parmLine_Asset.CreateFixedAsset == NoYes::Yes)
        {
            if (AssetParameters::find().AssetAllowCreate)
            {
                this.CreateFixedAsset    = _parmLine_Asset.CreateFixedAsset;
                this.AssetGroup          = _parmLine_Asset.AssetGroup;
            }
            else
            {
                this.CreateFixedAsset =  NoYes::No;
                this.AssetGroup       = '';
            }
        }
        else
        {
            this.AssetGroup          = '';
            this.CreateFixedAsset    = _parmLine_Asset.CreateFixedAsset;
        }

        this.AssetId             = _parmLine_Asset.AssetId;
        this.AssetBookId         = _parmLine_Asset.AssetBookId;
        this.AssetTransTypePurch = _parmLine_Asset.AssetTransTypePurch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchRFQLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>PurchLine</c> record from the <c>PurchRFQLine</c> record.
    /// </summary>
    /// <param name="_purchRFQLine">
    ///    The <c>PurchRFQLine</c> record from which to initialize the <c>PurchLine</c> record.
    /// </param>
    void initFromPurchRFQLine(PurchRFQLine _purchRFQLine)
    {
        // <GIN>
        #ISOCountryRegionCodes
        PurchLine_IN        purchLine_IN;
        // </GIN>

        this.ItemId                     = _purchRFQLine.ItemId;

        if (_purchRFQLine.ItemId)
        {
            this.ProcurementCategory    = EcoResProductCategory::findByItemIdCategoryHierarchyRole(
                                              _purchRFQLine.ItemId,
                                              EcoResCategoryNamedHierarchyRole::Procurement).Category;
        }
        else if (!_purchRFQLine.ItemId && _purchRFQLine.LineType == PurchRFQLineItemType::Category)
        {
            this.ProcurementCategory    = _purchRFQLine.CategoryId;
        }

        this.DeliveryDate               = _purchRFQLine.DeliveryDate;
        this.QtyOrdered                 = _purchRFQLine.QtyOrdered;
        this.PurchUnit                  = _purchRFQLine.PurchUnit;
        this.LineDisc                   = _purchRFQLine.LineDisc;
        this.LinePercent                = _purchRFQLine.LinePercent;
        this.LineAmount                 = _purchRFQLine.LineAmount;
        this.setInventDimId(_purchRFQLine.InventDimId);
        this.Name                       = _purchRFQLine.Name;
        this.ExternalItemId             = _purchRFQLine.ExternalItemId;
        this.DeliveryPostalAddress      = _purchRFQLine.DeliveryPostalAddress;
        this.AddressRefTableId          = _purchRFQLine.AddressRefTableId;
        this.AddressRefRecId            = _purchRFQLine.AddressRefRecId;
        this.DeliveryName               = _purchRFQLine.DeliveryName;
        this.MultiLnDisc                = _purchRFQLine.MultiLnDisc;
        this.MultiLnPercent             = _purchRFQLine.MultiLnPercent;
        this.PurchMarkup                = _purchRFQLine.PurchMarkup;
        this.ReqPOId                    = _purchRFQLine.ReqPOId;
        this.ReqPlanIdSched             = _purchRFQLine.ReqPlanIdSched;
        this.AssetId                    = _purchRFQLine.AssetId;
        this.AssetBookId                = _purchRFQLine.AssetBookId;
        this.AssetTransTypePurch        = _purchRFQLine.AssetTransTypePurch;
        this.PurchPrice                 = _purchRFQLine.PurchPrice;
        this.PurchQty                   = _purchRFQLine.PurchQty;
        this.DefaultDimension           = _purchRFQLine.DefaultDimension;
        this.TaxGroup                   = _purchRFQLine.TaxGroup;
        this.AddressRefRecId            = _purchRFQLine.AddressRefRecId;
        this.AddressRefTableId          = _purchRFQLine.AddressRefTableId;
        this.ConfirmedDlv               = _purchRFQLine.ConfirmedDlv;
        this.TaxItemGroup               = _purchRFQLine.TaxItemGroup;

        if (_purchRFQLine.InventRefType)
        {
            this.ItemRefType                = _purchRFQLine.InventRefType;
        }

        if (_purchRFQLine.InventRefTransId)
        {
            this.InventRefTransId           = _purchRFQLine.InventRefTransId;
        }

        if (_purchRFQLine.InventRefId)
        {
            this.InventRefId                = _purchRFQLine.InventRefId;
        }

        this.PdsCWQty                   = _purchRFQLine.PdsCWQty;
        this.DiscAmount                 = this.discAmount();
        this.DiscPercent                = this.discPercent();

        if (_purchRFQLine.ProjId)
        {
            this.ProjId                 = _purchRFQLine.ProjId;
            this.ActivityNumber         = _purchRFQLine.ActivityNumber;
            this.ProjCategoryId         = _purchRFQLine.ProjCategoryId;
            this.ProjLinePropertyId     = _purchRFQLine.ProjLinePropertyId;
            this.ProjSalesCurrencyId    = _purchRFQLine.ProjSalesCurrencyId;
            this.ProjSalesUnitId        = _purchRFQLine.ProjSalesUnitId;
            this.ProjSalesPrice         = _purchRFQLine.ProjSalesPrice;
            this.ProjTaxGroupId         = _purchRFQLine.ProjTaxGroupId;
            this.ProjTaxItemGroupId     = _purchRFQLine.ProjTaxItemGroupId;
            this.ProjTransId            = _purchRFQLine.ProjTransId;
        }

        if (BrazilParameters::isEnabled())
        {
            this.cfopTable_BR           = _purchRFQLine.cfopTable_BR;
            this.TaxServiceCode_BR      = _purchRFQLine.TaxServiceCode_BR;
            this.type().updateFiscalDocumentText_BR(FiscalDocumentTextType_BR::CFOP);
        }

        if (TaxParameters::checkTaxParameters_IN())
        {
            purchLine_IN = this.purchLine_IN();
            this.packPurchLine_IN(purchLine_IN);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchRFQReplyLine</Name>
				<Source><![CDATA[
    void initFromPurchRFQReplyLine(PurchRFQReplyLine _purchRFQReplyLine)
    {
        CompanyInfo             companyInfo;
        WorkCalendarSched       workCalendar;
        InventItemPurchSetup    itemPurchSetup;
        int                     leadTime;
        CalendarDays            calDays;
        PurchLine_IN            purchLine_IN;

        this.DeliveryDate   = _purchRFQReplyLine.DeliveryDate;
        if (!this.DeliveryDate)
        {
            if (_purchRFQReplyLine.LeadTime > 0)
            {
                leadTime = _purchRFQReplyLine.LeadTime;
                calDays  = _purchRFQReplyLine.CalendarDays;
            }
            else
            {
                itemPurchSetup  = InventItemPurchSetup::find(PurchRFQLine::findRecId(_purchRFQReplyLine.rfqLineRecId).ItemId, this.InventDimId);
                leadTime        = itemPurchSetup.getLeadTime();
                calDays         = itemPurchSetup.calendarDays();
            }

            if (leadTime > 0)
            {
                companyInfo       = CompanyInfo::find();
                workCalendar      = new WorkCalendarSched();
                this.DeliveryDate = workCalendar.schedDate(
                                                    SchedDirection::Forward, 
                                                    DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                    leadTime, 
                                                    calDays, 
                                                    companyInfo.ShippingCalendarId);
            }
        }
        this.ConfirmedDlv   = _purchRFQReplyLine.DeliveryDate;
        this.calculateRequestedShipAndReceiptDate(dateNull(), this.DeliveryDate, SchedDirection::Backward);
        if (this.ConfirmedDlv)
        {
            this.calculateConfirmedShipAndReceiptDate(dateNull(), this.DeliveryDate, SchedDirection::Backward, 0, NoYes::No, this.ShipCalendarId);
        }
        this.PurchQty       = _purchRFQReplyLine.PurchQty;
        this.PurchUnit      = _purchRFQReplyLine.PurchUnit;
        this.PurchPrice     = _purchRFQReplyLine.PurchPrice;
        this.PriceUnit      = _purchRFQReplyLine.PriceUnit;
        this.LineDisc       = _purchRFQReplyLine.LineDisc;
        this.LinePercent    = _purchRFQReplyLine.LinePercent;
        this.LineAmount     = _purchRFQReplyLine.LineAmount;
        this.ExternalItemId = _purchRFQReplyLine.ExternalItemId;
        this.MultiLnDisc    = _purchRFQReplyLine.MultiLnDisc;
        this.MultiLnPercent = _purchRFQReplyLine.MultiLnPercent;
        this.PurchMarkup    = _purchRFQReplyLine.PurchMarkup;
        this.Name           = _purchRFQReplyLine.Name;

        this.PdsCWQty       = _purchRFQReplyLine.PdsCWQty;
        this.DiscAmount     = this.discAmount();
        this.DiscPercent    = this.discPercent();
        if (TaxParameters::checkTaxParameters_IN())
        {
            purchLine_IN = this.purchLine_IN();
            purchLine_IN.MaximumRetailPrice = _purchRFQReplyLine.MaximumRetailPrice_IN;
            this.packPurchLine_IN(purchLine_IN);
            this.assessableValue_IN(_purchRFQReplyLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void initFromPurchTable(PurchTable _purchTable, boolean _ignoreInventDim = false)
    {
        this.PurchaseType = _purchTable.PurchaseType;

        this.type(_purchTable).initFromPurchTable(_purchTable, _ignoreInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchReqLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current record from a purchase requisition line.
    /// </summary>
    /// <param name = "_reqLine">
    /// A <c>PurchReqLine</c> record to initialize from.
    /// </param>
    /// <param name = "_purchReqPurchaseOrderGenerationRule">
    /// A <c>PurchReqPurchaseOrderGenerationRule</c> object describing the rules for how to initialize from the purchase requisition line.
    /// </param>
    public void initFromPurchReqLine(PurchReqLine _reqLine, PurchReqPurchaseOrderGenerationRule _purchReqPurchaseOrderGenerationRule)
    {
        this.ItemId             = _reqLine.ItemId;
        this.InventDimId        = _reqLine.InventDimId;

        ItemFreeTxt productName = _reqLine.resolveProductName();

        boolean isPurchReqLineReferencedByBudgetReservation;

        if (PublicSectorUtils::isBudgetReservationEnabled())
        {
            isPurchReqLineReferencedByBudgetReservation = _reqLine.isReferencedByBudgetReservation();

            if (isPurchReqLineReferencedByBudgetReservation)
            {
                //
                // When the current requisition line is referenced by a budget reservation then we want the PO to use some
                // values from the budget reservation and some values from the purchase requisition.
                //

                this.initFromItemOrCategory(_reqLine.ItemId, _reqLine.ProcurementCategory, productName, false);

                BudgetReservationLine_PSN budgetReservationLine = BudgetReservationLine_PSN::findByPurchaseRequisitionLine(_reqLine.RecId);

                this.initFromBudgetReservationLine(budgetReservationLine);

                //
                // When the current requisition line is referenced by a budget reservation then we do not want taxes to be
                // copied from the purchase requisition to the purchase order.
                //
                this.TaxItemGroup = '';
            }
            else if (_reqLine.BudgetReservationLine_PSN)
            {
                //
                // When the current requisition line references a budget reservation then that budget reservation by design must not
                // reference a requisition line so all we want to do is set the budget reservation line on the purchase order.
                //

                this.BudgetReservationLine_PSN = _reqLine.BudgetReservationLine_PSN;
            }
        }

        if (!isPurchReqLineReferencedByBudgetReservation)
        {
            this.initFromItemOrCategory(_reqLine.ItemId, _reqLine.ProcurementCategory, productName);
        }

        this.Name                      = this.resolveNameFromPurchReqLine(_reqLine, _purchReqPurchaseOrderGenerationRule);
        this.PurchUnit                 = UnitOfMeasure::find(_reqLine.PurchUnitOfMeasure).Symbol;
        this.PriceUnit                 = _reqLine.PriceUnit;
        this.DeliveryPostalAddress     = _reqLine.DeliveryPostalAddress;
        this.DeliveryName              = _reqLine.DeliveryName;
        this.ReqAttention              = _reqLine.Attention;
        this.Complete                  = _reqLine.LineComplete;
        this.ExternalItemId            = _reqLine.ExternalItemId?_reqLine.ExternalItemId: this.ExternalItemId;
        this.PurchReqId                = _reqLine.purchReqId();
        this.PurchReqLineRefId         = _reqLine.LineRefId;
        this.Requester                 = _reqLine.Requisitioner;
        this.AccountingDistributionTemplate = _reqLine.AccountingDistributionTemplate;

        if (!isPurchReqLineReferencedByBudgetReservation)
        {
            this.CurrencyCode          = _reqLine.CurrencyCode;
        }

        if (strLen(_reqLine.AssetGroup) > 0)
        {
            this.CreateFixedAsset      = NoYes::Yes;
        }
        else
        {
            this.CreateFixedAsset      = NoYes::No;
        }

        this.AssetGroup                = _reqLine.AssetGroup;
        this.AssetTransTypePurch       = AssetTransTypePurch::Acquisition;
        this.ProcurementCategory       = _reqLine.ProcurementCategory;
        this.StockedProduct = _reqLine.forInventory() ? NoYes::Yes : NoYes::No;

        // <GTE>
        if (TaxIntegrationUtils::isTaxInformationEnabled()
            && !TransTaxInformationHelper::newHelper().findTransTaxInformation(_reqLine.TableId, _reqLine.RecId).VendorLocation)
        {
            TransTaxInformationHelper::initFromCustVendByRecord(_reqLine, VendTable::find(_reqLine.VendAccount));
        }
        // </GTE>
        // <GIN>
        boolean isIndiaTaxesMarked  = TaxParameters::checkTaxParameters_IN();
        if (isIndiaTaxesMarked)
        {
            if (!_reqLine.ProjId && this.RecId)
            {
                TransTaxInformationHelper::copyTransTaxInformation(_reqLine, this);
            }
        }
        // </GIN>

        // Copy Project fields
        if (_reqLine.ProjId && !isPurchReqLineReferencedByBudgetReservation)
        {
            this.ProjId                = _reqLine.ProjId;
            this.ActivityNumber        = _reqLine.ActivityNumber;
            this.ProjCategoryId        = _reqLine.ProjCategoryId;
            this.ProjLinePropertyId    = _reqLine.ProjLinePropertyId;
            this.ProjSalesCurrencyId   = _reqLine.ProjSalesCurrencyId;
            this.ProjSalesUnitId       = UnitOfMeasure::find(_reqLine.ProjSalesUnitOfMeasure).Symbol;
            this.ProjSalesPrice        = _reqLine.ProjSalesPrice;
            this.ProjTaxGroupId        = _reqLine.ProjTaxGroupId;
            this.ProjTaxItemGroupId    = _reqLine.ProjTaxItemGroupId;
            this.ProjTransId           = _reqLine.ProjTransId;
        }

        PurchReqConsolidationLine purchReqConsolidationLine = PurchReqConsolidationLine::findByReqLineId(_reqLine.RecId);
        PurchReqConsolidation purchReqConsolidation     = PurchReqConsolidation::find(purchReqConsolidationLine.PurchReqConsolidationId);
        if (purchReqConsolidationLine && purchReqConsolidation.Status == PurchReqConsolidationActiveStatus::Closed)
        {
            this.LineDisc      = purchReqConsolidationLine.calcConsolidationLineDisc();
            this.LinePercent   = purchReqConsolidationLine.calcConsolidationLinePercent();
            this.PurchPrice    = purchReqConsolidationLine.calcConsolidationPrice();
            this.PurchQty      = purchReqConsolidationLine.NewPurchQty;
        }
        else if (!isPurchReqLineReferencedByBudgetReservation)
        {
            this.LineDisc      = _reqLine.LineDisc;
            this.LinePercent   = _reqLine.LinePercent;
            this.PurchPrice    = _reqLine.PurchPrice ? _reqLine.PurchPrice : (!_reqLine.PurchQty ? _reqLine.LineAmount : 0);
            this.PurchQty      = _reqLine.PurchQty ? _reqLine.PurchQty : 1;
        }

        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            this.PdsCWQty = PdsCatchWeight::convertQtyToCWQty(
                    this.ItemId,
                    this.PurchQty,
                    this.PurchUnit);
        }

        this.DiscAmount    = this.discAmount();
        this.DiscPercent   = this.discPercent();

        if (!isPurchReqLineReferencedByBudgetReservation)
        {
            this.PurchMarkup   = _reqLine.PurchMarkup;
            PurchReqLine reqLineOrig = PurchReqLine::find(_reqLine.RecId);
            if (reqLineOrig.VendAccount != _reqLine.VendAccount)
            {
                VendTable vendTable = VendTable::find(_reqLine.VendAccount);
                this.TaxGroup = vendTable.TaxGroup;
                this.OverrideSalesTax = vendTable.OverrideSalesTax;
            }
            else
            {
                this.TaxGroup  = _reqLine.TaxGroup;
                this.OverrideSalesTax = _reqLine.OverrideSalesTax;
            }
            this.TaxItemGroup  = _reqLine.TaxItemGroup;
        }

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.cfopTable_BR          = _reqLine.cfopTable_BR;
            this.TaxServiceCode_BR     = _reqLine.TaxServiceCode_BR;
        }
        // </GBR>

        this.LineAmount    = this.calcLineAmountForced();

        if (this.LineAmount == 0
                && this.PurchPrice == 0
                && _reqLine.LineAmount != 0
                && _reqLine.ItemIdNonCatalog != "")
        {
            this.LineAmount = _reqLine.LineAmount;
        }

        if (_reqLine.DefaultDimension)
        {
            this.DefaultDimension = _reqLine.DefaultDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveNameFromPurchReqLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the purchase line name from a requisition line.
    /// </summary>
    /// <param name = "_reqLine">The requisition line.</param>
    /// <param name = "_purchReqPurchaseOrderGenerationRule">The rule for generation of the purchase order.</param>
    /// <returns>The purchase line name.</returns>
    protected ItemFreeTxt resolveNameFromPurchReqLine(PurchReqLine _reqLine, PurchReqPurchaseOrderGenerationRule _purchReqPurchaseOrderGenerationRule)
    {
        ItemFreeTxt ret = this.Name;

        switch (_reqLine.LineType)
        {
            case PurchReqLineType::External:
                ret = _reqLine.Name;
                break;
            case PurchReqLineType::Item:
                // we will use the item description policy only when for the requisition line is of type item and there is accepted a request for quotation
                if (_purchReqPurchaseOrderGenerationRule.hasPolicy()
                    && _reqLine.purchRFQCaseLine().StatusHigh == PurchRFQStatus::Accepted
                    && _purchReqPurchaseOrderGenerationRule.purchReqSourcingPolicyRule().ItemDescriptionTransfer == PurchReqItemDescriptionTransfer::FromRequisition)
                {
                    ret = _reqLine.Name;
                }
                break;
            case PurchReqLineType::Category:
                if (_purchReqPurchaseOrderGenerationRule.hasPolicy()
                    && _purchReqPurchaseOrderGenerationRule.purchReqSourcingPolicyRule().PurchReqOverrideItemDescription)
                {
                    ret = _reqLine.Name;
                }
                break;
            default :
                // default behavior is to copy product description name
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimIdFromReqPO</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the inventory dimension for initializing a <c>PurchLine</c> record from the <c>ReqPO</c> record.
    /// </summary>
    /// <param name="_reqPO">
    ///    The <c>ReqPO</c> record from which to initialize the <c>PurchLine</c> record.
    /// </param>
    /// <returns>The inventory dimension id.</returns>
    protected InventDimId inventDimIdFromReqPO(ReqPO _reqPO)
    {
        return _reqPO.CovInventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromReqPO</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the <c>PurchLine</c> record from the <c>ReqPO</c> record.
    /// </summary>
    /// <param name="_reqPO">
    ///    The <c>ReqPO</c> record from which to initialize the <c>PurchLine</c> record.
    /// </param>
    void initFromReqPO(ReqPO _reqPO)
    {
        this.ItemId                 = _reqPO.ItemId;
        this.ProcurementCategory    = EcoResProductCategory::findByItemIdCategoryHierarchyRole(
                                            _reqPO.ItemId,
                                            EcoResCategoryNamedHierarchyRole::Procurement).Category;
        
        this.setInventDimId(this.inventDimIdFromReqPO(_reqPO));

        this.ReqPOId                = _reqPO.RefId;
        this.ReqPlanIdSched         = ReqPlanVersion::find(_reqPO.PlanVersion).ReqPlanId;

        this.PurchQty                   = _reqPO.PurchQty;
        this.PdsCWQty                   = _reqPO.PdsCWReqQty;

        this.RemainPurchPhysical        = _reqPO.PurchQty;
        this.PurchUnit                  = _reqPO.PurchUnit;

        this.PlanningPriority           = _reqPO.PlanningPriority;

        this.QtyOrdered                 = this.calcQtyOrdered();
        this.RemainInventPhysical       = this.QtyOrdered;
        this.PdsCWRemainInventPhysical  = _reqPO.PdsCWReqQty;

        this.initBarcode(this.inventDim());

        this.initName();
        this.initFromVendExternalItemDescription();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>PurchLine</c> record from the <c>SalesLine</c> record.
    /// </summary>
    /// <param name="_salesLine">
    ///    The <c>SalesLine</c> record from which to initialize the <c>PurchLine</c> record.
    /// </param>
    void initFromSalesLine(SalesLine _salesLine)
    {
        SalesTable                  salesTable = _salesLine.salesTable();
        InventDim                   inventDim = this.inventDim();
        MCRSalesLineDropShipment    mcrSalesLineDropShipment = _salesLine.mcrSalesLineDropShipment();
        #ISOCountryRegionCodes

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            this.ActivityNumber = _salesLine.ActivityNumber;
        }

        this.ItemId = _salesLine.ItemId;
        // SalesCategory cannot be used for purchase so we look it up from the item
        this.ProcurementCategory = EcoResProductCategory::findByItemIdCategoryHierarchyRole(
                                        _salesLine.ItemId,
                                        EcoResCategoryNamedHierarchyRole::Procurement).Category;
        this.setStockedProduct();
        this.Name = _salesLine.Name;

        inventDim.mergeUsedDim(InventDimGroupSetup::newItemId(this.ItemId), _salesLine.inventDim());

        this.setAddressFromInventDim(inventDim);

        this.setInventDimIdFromInventDim(inventDim);

        this.InventRefId                = _salesLine.SalesId;
        this.InventRefTransId           = _salesLine.InventTransId;
        this.ItemRefType                = InventRefType::Sales;
        this.ReturnStatus               = _salesLine.ReturnStatus;

        if (!salesTable.isInterCompanyOrder()
            && PurchLineCopyCustomerReferenceFromSalesLineFeature::isEnabled() 
            && (PurchLineCopyCustomerReferenceDirectDeliveryFlight::instance().isEnabled()
            || !this.isDropShipment()))
        {
            if (_salesLine.CustomerRef)
            {
                this.CustomerRef = _salesLine.CustomerRef;
            }

            if (_salesLine.PurchorderFormNum)
            {
                this.CustPurchaseOrderFormNum = _salesLine.PurchorderFormNum;
            }
        }
        else if (this.isDropShipment() 
            && (salesTable.isInterCompanyOrder()
            || !PurchLineCopyCustomerReferenceFromSalesLineFeature::isEnabled() 
            || !PurchLineCopyCustomerReferenceDirectDeliveryFlight::instance().isEnabled()))
        {
            this.CustomerRef = salesTable.CustomerRef;
            this.CustPurchaseOrderFormNum = salesTable.PurchOrderFormNum;
        }

        if (this.mustSetProjId())
        {
            this.ProjId = _salesLine.ProjId;
        }
        this.ProjCategoryId = _salesLine.ProjCategoryId;
        if (this.ProjId && !_salesLine.ProjId)
        {
            this.Scrap = NoYes::No;
        }

        // If no ItemId, then keep the name from sales.
        if (this.ItemId)
        {
            if (!this.isDropShipment() || !this.Name)
            {
                this.initName();
            }

            this.initFromVendExternalItemDescription();
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && this.RecId)
        {
            TransTaxInformationHelper::copyTransTaxInformation(_salesLine, this);
        }

        if (mcrSalesLineDropShipment.DropShipment)
        {
            this.mcrDropShipComment  = mcrSalesLineDropShipment.DropShipComment;
            this.mcrDropShipStatus   = MCRDropShipStatus::POCreated;
            this.mcrDropShipment     = NoYes::Yes;
        }

        // Set delivery date of purchase line to match sales Line
        if (_salesLine.deliveryDate())
        {
            this.DeliveryDate  = _salesLine.deliveryDate();
        }

        // Foreign trade
        this.IntrastatCommodity = _salesLine.IntrastatCommodity;
        this.OrigCountryRegionId = _salesLine.OrigCountryRegionId;
        this.OrigStateId = _salesLine.OrigStateId;

        this.initVariantId();
        this.initBarcode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSetProjId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to set project id.
    /// </summary>
    /// <returns>
    /// true if project id must be set; otherwise, false.
    /// </returns>
    protected boolean mustSetProjId()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initiates a <c>PurchLine</c> record with values based on <c>TmpPurchLine</c> record.
    /// </summary>
    /// <param name="_tmpPurchLine">
    ///    A record of the table <c>TmpPurchLine</c>.
    /// </param>
    public void initFromTmpPurchLine(TmpPurchLine _tmpPurchLine)
    {
        this.type().initFromTmpPurchLine(_tmpPurchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpPurchLinePrice</Name>
				<Source><![CDATA[
    void initFromTmpPurchLinePrice(TmpPurchLinePrice _tmpPurchLinePrice)
    {
        this.LineAmount     = _tmpPurchLinePrice.LineAmount;
        this.PurchPrice     = _tmpPurchLinePrice.Price;

        this.LineDisc       = _tmpPurchLinePrice.LineDisc;
        this.LinePercent    = _tmpPurchLinePrice.LinePercent;

        this.MultiLnDisc    = _tmpPurchLinePrice.MultiLineDisc;
        this.MultiLnPercent = _tmpPurchLinePrice.MultiLinePercent;

        this.DiscAmount     = this.discAmount();
        this.DiscPercent    = this.discPercent();

        this.PurchMarkup    = _tmpPurchLinePrice.Markup;

        this.PriceUnit      = _tmpPurchLinePrice.PriceUnit;

        if (this.salesPurchLineInterface().priceDisc_PriceCache().price() != this.PurchPrice)
        {
            this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, fieldNum(PurchLine, PurchPrice));
        }

        if (this.salesPurchLineInterface().priceDisc_LineDiscCache().discAmount() != this.LineDisc)
        {
            this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, fieldNum(PurchLine, LineDisc));
        }

        if (this.salesPurchLineInterface().priceDisc_LineDiscCache().discPct() != this.LinePercent)
        {
            this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, fieldNum(PurchLine, LinePercent));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpSuppItem</Name>
				<Source><![CDATA[
    void initFromTmpSuppItem(TmpSuppItem _tmpSuppItem)
    {
        InventDim               inventDim;
        this.ItemId             = _tmpSuppItem.ItemId;
        inventDim               = this.inventDim();
        inventDim.mergeUsedDim(InventDimGroupSetup::newItemId(this.ItemId), InventDim::find(_tmpSuppItem.InventDimId));
        this.setInventDimIdFromInventDim(inventDim);

        this.initFromInventTable(this.inventTable());
        this.initFromVendExternalItemDescription();

        this.PurchQty           = _tmpSuppItem.Qty;
        this.QtyOrdered         = this.calcQtyOrdered();

        if (SalesPurchInitCWSuppItemFlight::instance().isEnabled()
            && PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            this.PdsCWQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                this.InventDimId,
                this.PurchQty,
                this.PurchUnit,
                this.pdsCWUnitId(),
                NoYes::Yes);
        }

        if (_tmpSuppItem.SuppItemFree)
        {
            this.PurchPrice     = 0.0;
            this.LinePercent    = 0.0;
            this.LineDisc       = 0.0;
            this.MultiLnDisc    = 0.0;
            this.MultiLnPercent = 0.0;
            this.PurchMarkup    = 0.0;
            this.DiscAmount     = 0.0;
            this.DiscPercent    = 0.0;
        }
        else if (this.purchTable().MatchingAgreement)
        {
            this.salesPurchLineInterface().autoMatchAgreementLine(this.purchTable().MatchingAgreement);
        }

        this.LineAmount         = this.calcLineAmountForced();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendExternalItemDescription</Name>
				<Source><![CDATA[
    void initFromVendExternalItemDescription(InventDim _inventDim = this.inventDim())
    {
        VendExternalItemDescription vendExternalItemDescription = new VendExternalItemDescription(this.ItemId, _inventDim, this.purchTable().OrderAccount);

        if (vendExternalItemDescription.findExternalDescription())
        {
            this.ExternalItemId = vendExternalItemDescription.externalItemId();
            if (vendExternalItemDescription.externalItemFreeTxt())
            {
                if (VendFormletterParameters::find().ExternalItemOverwriteAppend == OverwriteAppend::Overwrite)
                {
                    this.Name =  vendExternalItemDescription.externalItemFreeTxt();
                }
                else
                {
                    if (!this.isDropShipment() || !this.Name)
                    {
                        this.initName(this.inventTable());
                    }

                    if (this.Name)
                    {
                        this.Name += '\n';
                    }
                    this.Name += vendExternalItemDescription.externalItemFreeTxt();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendInvoice4PaymTrans_RU</Name>
				<Source><![CDATA[
    public void initFromVendInvoice4PaymTrans_RU(VendInvoice4PaymTrans_RU _vendInvoice4PaymTrans,
                                                        boolean                  _copyPrecisely = true,
                                                        boolean                  _copyPriceDisc = true,
                                                        boolean                  _copyQty       = true,
                                                        Qty                      _qty           = _vendInvoice4PaymTrans.Qty,
                                                        PdsCWInventQty           _pdsCWQty      = _vendInvoice4PaymTrans.PdsCWQty
                                                        )
    {
        InventDim inventDim;

        this.initFromItemOrCategory(_vendInvoice4PaymTrans.ItemId, _vendInvoice4PaymTrans.Category, _vendInvoice4PaymTrans.Name);

        if (_copyQty)
        {
            this.InventDimId    = _vendInvoice4PaymTrans.InventDimId;
            this.PurchQty       = _qty;
            this.PurchUnit      = _vendInvoice4PaymTrans.PurchUnit;
            this.PdsCWQty       = _pdsCWQty;
            this.QtyOrdered     = this.calcQtyOrdered();
        }
        else
        {
            inventDim           = this.inventDim();
            EcoResProductDimGroupSetup::copyProductDimensionsForItem(this.ItemId, _vendInvoice4PaymTrans.inventDim(), inventDim);

            this.InventDimId    = InventDim::findOrCreate(inventDim).InventDimId;
        }

        if (_copyPriceDisc)
        {
            this.PurchPrice     = _vendInvoice4PaymTrans.PurchPrice;
            this.PriceUnit      = _vendInvoice4PaymTrans.PriceUnit;
            this.LinePercent    = _vendInvoice4PaymTrans.LinePercent;
            this.LineDisc       = _vendInvoice4PaymTrans.LineDisc;
            this.MultiLnDisc    = _vendInvoice4PaymTrans.MultiLnDisc;
            this.MultiLnPercent = _vendInvoice4PaymTrans.MultiLnPercent;
            this.PurchMarkup    = _vendInvoice4PaymTrans.PurchMarkup;
            this.LineAmount     = _vendInvoice4PaymTrans.LineAmount;
        }

        if (_copyPrecisely)
        {
            this.InventDimId      = _vendInvoice4PaymTrans.InventDimId;
            this.Name             = _vendInvoice4PaymTrans.Name;
            this.ExternalItemId   = _vendInvoice4PaymTrans.ExternalItemId;
            this.TaxGroup         = _vendInvoice4PaymTrans.TaxGroup;
            this.TaxItemGroup     = _vendInvoice4PaymTrans.TaxItemGroup;
            this.DefaultDimension = _vendInvoice4PaymTrans.DefaultDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>PurchLine</c> table buffer based on a packing invoice line.
    /// </summary>
    /// <param name="_vendInvoiceTrans">
    ///    The <c>VendInvoiceTrans</c> buffer to initialize from.
    /// </param>
    /// <param name="_copyPrecisely">
    ///    A <c>Boolean</c> value that specifies whether to precisely copy all details; optional.
    /// </param>
    /// <param name="_copyPriceDisc">
    ///    A <c>Boolean</c> value that specifies whether to copy the price discount fields; optional.
    /// </param>
    /// <param name="_copyQty">
    ///    A <c>Boolean</c> value that specifies whether to copy the quantity information; optional.
    /// </param>
    /// <param name="_qty">
    ///    A quantity which overrides the <c>PurchQty</c> field value of the new <c>PurchLine</c>
    ///    buffer to be different than value of the other table buffer; optional.
    /// </param>
    /// <param name="_pdsCWQty">
    ///    A catch weight quantity which overrides the <c>PdsCWQty</c> field value of the new <c>PurchLine</c>
    ///    buffer to be different than the value of the other table buffer; optional.
    /// </param>
    void initFromVendInvoiceTrans(VendInvoiceTrans  _vendInvoiceTrans,
                                  boolean           _copyPrecisely = true,
                                  boolean           _copyPriceDisc = true,
                                  boolean           _copyQty       = true,
                                  Qty               _qty           = _vendInvoiceTrans.Qty,
                                  PdsCWInventQty    _pdsCWQty      = _vendInvoiceTrans.PdsCWQty
                                  )
    {
        InventDim   inventDim;

        PurchLine_W     purchLine_W;
        #isoCountryRegionCodes

        this.initFromItemOrCategory(_vendInvoiceTrans.ItemId, _vendInvoiceTrans.ProcurementCategory, _vendInvoiceTrans.Name);

        if (_copyQty)
        {
            this.setInventDimId(_vendInvoiceTrans.InventDimId);
            this.PurchQty           = _qty;
            this.PurchUnit          = _vendInvoiceTrans.PurchUnit;
            if (this.ProjId && _vendInvoiceTrans.ProcurementCategory && !this.ProjSalesUnitId)
            {
                this.ProjSalesUnitId = this.PurchUnit;
            }
            this.QtyOrdered         = _vendInvoiceTrans.Qty == _qty ? _vendInvoiceTrans.InventQty : this.calcQtyOrdered();

            this.PdsCWQty           = _pdsCWQty;
        }
        else
        {
            if (this.isCategoryBased())
            {
                this.setInventDimId(_vendInvoiceTrans.InventDimId);
            }
            else
            {
                inventDim               = this.inventDim();
                EcoResProductDimGroupSetup::copyProductDimensionsForItem(this.ItemId, _vendInvoiceTrans.inventDim(), inventDim);
                this.setInventDimIdFromInventDim(inventDim);
            }
        }

        if (_copyPriceDisc)
        {
            this.PurchPrice         = _vendInvoiceTrans.PurchPrice;
            this.PriceUnit          = _vendInvoiceTrans.PriceUnit;
            this.LinePercent        = _vendInvoiceTrans.LinePercent;
            this.LineDisc           = _vendInvoiceTrans.LineDisc;
            this.MultiLnDisc        = _vendInvoiceTrans.MultiLnDisc;
            this.MultiLnPercent     = _vendInvoiceTrans.MultiLnPercent;
            this.PurchMarkup        = _vendInvoiceTrans.PurchMarkup;
            this.LineAmount         = _vendInvoiceTrans.returnLineAmount(this.PurchQty);
            this.DiscAmount         = this.discAmount();
            this.DiscPercent        = this.discPercent();
        }

        if (_copyPrecisely)
        {
            this.setInventDimId(_vendInvoiceTrans.InventDimId);
            this.Name               = _vendInvoiceTrans.Name;
            this.ExternalItemId     = _vendInvoiceTrans.ExternalItemId;
            this.LedgerDimension    = _vendInvoiceTrans.LedgerDimension;
            this.TaxGroup           = _vendInvoiceTrans.TaxGroup;
            this.TaxItemGroup       = _vendInvoiceTrans.TaxItemGroup;
            this.OverrideSalesTax   = _vendInvoiceTrans.OverrideSalesTax;
            this.DefaultDimension   = _vendInvoiceTrans.DefaultDimension;
            this.StatProcId         = _vendInvoiceTrans.StatProcId;
            this.Transport          = _vendInvoiceTrans.Transport;
            this.Port               = _vendInvoiceTrans.Port;
            this.StatProcId         = _vendInvoiceTrans.StatProcId;
            this.IntrastatCommodity = _vendInvoiceTrans.IntrastatCommodity;
            this.OrigCountryRegionId= _vendInvoiceTrans.OrigCountryRegionId;
            this.OrigStateId        = _vendInvoiceTrans.OrigStateId;

            if (FinTagConfiguration::isFinTagConfigurationSet(_vendInvoiceTrans.DataAreaId)
                && PurchaseOrderFinTagFeature::isEnabled())
            {
                this.FinTag = _vendInvoiceTrans.FinTag;
            }

            // <GBR>
            if (BrazilParameters::isEnabled())
            {
                if (this.PurchaseType == PurchaseType::ReturnItem)
                {
                    this.setCFOP_BR();
                    this.setTaxGroupAndTaxItemGroupFields_BR();
                }
                else
                {
                    this.cfopTable_BR = CFOPTable_BR::findByCFOPId(_vendInvoiceTrans.fiscalDocumentLine_BR().cfop).RecId;
                }
            }
            // </GBR>
        }

        if (TaxParameters::checkTaxParameters_IN() || TaxWithholdParameters_IN::checkTaxParameters())
        {
            this.initFromVendInvoiceTrans_IN(_vendInvoiceTrans, _qty);
        }

        this.setAddressFromInventDim(this.inventDim()
        , !_copyPrecisely
        );

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            purchLine_W = this.purchLine_W();
            purchLine_W.MarkupCode_RU          = _vendInvoiceTrans.MarkupCode_RU;
            this.packPurchLine_W(purchLine_W);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            purchLine_W = this.purchLine_W();
            purchLine_W.WithholdingTypeCode_MX = _vendInvoiceTrans.vendInvoiceTrans_W().WithholdingTypeCode_MX;
            this.packPurchLine_W(purchLine_W);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendInvoiceTrans_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the table buffer and initialize the field of current table.
    /// </summary>
    /// <param name="_vendInvoiceTrans">
    /// The table buffer is used to find the record.
    /// </param>
    /// <param name="_qty">
    /// The value is set.
    /// </param>
    private void initFromVendInvoiceTrans_IN(VendInvoiceTrans  _vendInvoiceTrans, Qty _qty)
    {
        PurchLine       purchLineLoc;
        VendInvoiceJour vendInvoiceJourLoc;
        RealBase        factor;
        AmountMST       perUnitAssessableValue;

        VendInvoiceTrans_IN vendInvoiceTransIN;
        PurchLine_IN    purchLine_IN = this.purchLine_IN();

        purchLine_IN.tdsGroup                		= _vendInvoiceTrans.tdsGroup_IN;
        purchLine_IN.tcsGroup                		= _vendInvoiceTrans.tcsGroup_IN;
        purchLine_IN.CreditNoteDate          		= _vendInvoiceTrans.InvoiceDate;
        purchLine_IN.TaxWithholdLineNum      		= _vendInvoiceTrans.LineNum;
        purchLine_IN.AssessableValueTransactionCurrency = _vendInvoiceTrans.AssessableValue_IN;
        purchLine_IN.MaximumRetailPrice      		= _vendInvoiceTrans.MaximumRetailPrice_IN;

        vendInvoiceJourLoc  = _vendInvoiceTrans.vendInvoiceJour();
        vendInvoiceTransIN  = _vendInvoiceTrans.vendInvoiceTrans_IN();

        if (vendInvoiceJourLoc)
        {
            purchLine_IN.TaxWithholdVoucher = vendInvoiceJourLoc.LedgerVoucher;
        }

        purchLineLoc = PurchLine::findInventTransId(_vendInvoiceTrans.InventTransId);

        if (TaxParameters::checkParameterForPosting_IN(TaxType_IN::Customs) &&
            purchLineLoc.purchTable().purchTable_W().CustomsImportOrder_IN &&
            this.purchTable().purchTable_W().CustomsImportOrder_IN)
        {
            purchLine_IN.CustomsMaxRetailPrice   = purchLineLoc.purchLine_IN().CustomsMaxRetailPrice;
            purchLine_IN.MaximumRetailPrice      = CurrencyHelper_IN::customsCurAmount_IN(purchLine_IN.CustomsMaxRetailPrice, purchLineLoc.CurrencyCode, Direction_IN::Import, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), false);
        }

        if (_vendInvoiceTrans.Qty != _qty)
        {
            factor = _vendInvoiceTrans.AssessableValue_IN / _vendInvoiceTrans.Qty;
            purchLine_IN.AssessableValueTransactionCurrency = factor * _qty;
            perUnitAssessableValue = vendInvoiceTransIN.AssessableValueAccountingCurrency/_vendInvoiceTrans.Qty;
            purchLine_IN.AssessableValueAccountingCurrency = perUnitAssessableValue * _qty;
        }
        else
        {
            purchLine_IN.AssessableValueTransactionCurrency = _vendInvoiceTrans.AssessableValue_IN;
            purchLine_IN.AssessableValueAccountingCurrency  = vendInvoiceTransIN.AssessableValueAccountingCurrency;
        }

        this.packPurchLine_IN(purchLine_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendPackingSlipTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>PurchLine</c> table buffer based on a packing slip line.
    /// </summary>
    /// <param name="_vendPackingSlipTrans">
    ///    The <c>VendPackingSlipTrans</c> buffer to initialize from.
    /// </param>
    /// <param name="_copyPrecisely">
    ///    A Boolean value that specifies whether to precisely copy all details.
    /// </param>
    /// <param name="_copyPriceDisc">
    ///    A Boolean value that specifies whether to copy the price discount fields.
    /// </param>
    /// <param name="_copyQty">
    ///    A Boolean value that specifies whether to copy the quantity information.
    /// </param>
    /// <param name="_qty">
    ///    A quantity which overrides the <c>PurchQty</c> field value of the new <c>PurchLine</c>
    ///    buffer to be different than value of the other table buffer.
    /// </param>
    /// <param name="_cwQty">
    ///    A catch weight quantity which is used to set the value of the <c>PurchLine</c> catch weight quantity field.
    /// </param>
    void initFromVendPackingSlipTrans(VendPackingSlipTrans          _vendPackingSlipTrans,
                                      boolean                       _copyPrecisely,
                                      boolean                       _copyPriceDisc,
                                      boolean                       _copyQty,
                                      Qty                           _qty,
                                      PdsCWInventQty                _cwQty  = #PdsCatchWeightEnabled ? _vendPackingSlipTrans.PdsCWQty: 0
                                      )
    {
        InventDim                   inventDim;

        this.initFromItemOrCategory(_vendPackingSlipTrans.ItemId, _vendPackingSlipTrans.ProcurementCategory, _vendPackingSlipTrans.Name);

        if (_copyQty)
        {
            this.setInventDimId(_vendPackingSlipTrans.InventDimId);
            this.PurchQty           = _qty;
            this.PurchUnit          = _vendPackingSlipTrans.PurchUnit;
            this.QtyOrdered         = _vendPackingSlipTrans.Qty == _qty ? _vendPackingSlipTrans.InventQty : this.calcQtyOrdered();

            this.PdsCWQty           = _cwQty;
        }
        else
        {
            if (this.isCategoryBased())
            {
                this.setInventDimId(_vendPackingSlipTrans.InventDimId);
            }
            else
            {
                inventDim               = this.inventDim();
                EcoResProductDimGroupSetup::copyProductDimensionsForItem(this.ItemId, _vendPackingSlipTrans.inventDim(), inventDim);
                this.setInventDimIdFromInventDim(inventDim);
            }
        }

        if (_copyPrecisely)
        {
            this.Name               = _vendPackingSlipTrans.Name;
            this.ExternalItemId     = _vendPackingSlipTrans.ExternalItemId;
            this.DefaultDimension   = _vendPackingSlipTrans.DefaultDimension;
            this.Transport          = _vendPackingSlipTrans.Transport;
            this.Port               = _vendPackingSlipTrans.Port;
            this.StatProcId         = _vendPackingSlipTrans.StatProcId;
            this.IntrastatCommodity = _vendPackingSlipTrans.IntrastatCommodity;
            this.OrigCountryRegionId = _vendPackingSlipTrans.OrigCountryRegionId;
            this.OrigStateId        = _vendPackingSlipTrans.OrigStateId;
            this.AccountingDistributionTemplate = _vendPackingSlipTrans.purchLine().AccountingDistributionTemplate;
            if (FinTagConfiguration::isFinTagConfigurationSet(_vendPackingSlipTrans.DataAreaId)
                && PurchaseOrderFinTagFeature::isEnabled())
            {
                this.FinTag = _vendPackingSlipTrans.FinTag;
            }
        }
        this.setAddressFromInventDim(this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>PurchLine</c> record from the <c>VendTable</c> record.
    /// </summary>
    /// <param name="_vendTable">
    ///    The <c>VendTable</c> record from which to initialize the <c>PurchLine</c> record; optional.
    /// </param>
    void initFromVendTable (VendTable _vendTable = VendTable::find(this.VendAccount))
    {
        DirPartyLocation        dirPartyLocation;
        PurchLine_IN            purchLine_IN;

        if (TaxParameters::checkTaxParameters_IN())
        {
            select firstonly Location from dirPartyLocation
                where dirPartyLocation.Party == _vendTable.Party;

            purchLine_IN = this.purchLine_IN();
            this.packPurchLine_IN(purchLine_IN);
        }
        #ISOCountryRegionCodes

        this.Tax1099Fields = _vendTable.Tax1099Fields;
        if (_vendTable
            && _vendTable.TaxWithholdCalculate == NoYes::Yes
            && (TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled()
                || BrazilParameters::isEnabled()))
        {
            this.TaxWithholdGroup_TH = _vendTable.TaxWithholdGroup;
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            this.OperationType_MX = _vendTable.OperationType_MX;
        }

        ProjPurchLineParameters insertParameters = ProjPurchLineParameters::current();
        boolean copyPrecisely;

        if (insertParameters)
        {
            copyPrecisely = insertParameters.skipDimUpdate;
        }

        if (this.ProjId && !copyPrecisely)
        {
            this.setDefaultDimension();
        }

        if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
        {
            PurchTable purchTableLocal = this.purchTable();
            if (purchTableLocal.RecId)
            {
                this.ShipCalendarId = purchTableLocal.ShipCalendarId;
            }
            else if (this.VendAccount)
            {
                VendTable vendor = VendTable::findByCompany(this.dataAreaId, this.VendAccount);
                if (!this.ShipCalendarId)
                {
                    this.ShipCalendarId = vendor.PurchaseShipCalendarId;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initName</Name>
				<Source><![CDATA[
    void initName(InventTable inventTable = this.inventTable(), EcoResCategoryId _procurementCategory = this.ProcurementCategory)
    {
        this.Name = PurchParameters::nameAndOrDescription(inventTable, this.purchTable().LanguageId, this.InventDimId, EcoResCategory::find(_procurementCategory));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchQty</Name>
				<Source><![CDATA[
    void initPurchQty()
    {
        PurchLineType  purchLineType;

        purchLineType = this.type();
        purchLineType.initPurchQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void initValue(PurchaseType _purchaseType = this.PurchaseType)
    {
        this.PurchaseType   = _purchaseType;

        super();

        this.type().initValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVariantId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>VariantId</c> field in the <c>RetailVariantId</c> value of the current <c>InventDim</c> record
    /// if there is a <c>InventDimCombination</c> table record for the current item and its inventory dimensions available.
    /// Otherwise the <c>VariantId</c> field is initialized in the empty string.
    /// </summary>
    /// <param name="_inventDim">
    /// The related <c>InventDim</c> table record.
    /// </param>
    public void initVariantId(InventDim _inventDim = this.inventDim())
    {
        InventDimCombination comb;
        comb = InventDimCombination::findByInventDim(this.ItemId, _inventDim);

        if (comb)
        {
            this.VariantId = comb.RetailVariantId;
        }
        else
        {
            this.VariantId = "";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert(
        boolean     dropInvent                      = false,
        boolean     findMarkup                      = true,
        boolean     updatePurchTableDistributions   = true,
        boolean     _skipPurchTableUpdate           = false,
        boolean     _skipInterCompanyCalcDisc       = false)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }
        
        PurchLine               purchLineOrig           = this.extensionOrig();
        InterCompanySkipUpdate  interCompanySkipUpdate  = this.SkipUpdate;

        #ISOcountryRegionCodes

        PurchTable purchTable = this.purchTable(true);

        PurchPurchaseOrderInstrumentationActivities purchaseOrderActivities = PurchInstrumentationLogger::createLogger(tableStr(PurchLine)).purchPurchaseOrderActivities();
        
        using (var activityContext = purchaseOrderActivities.insert(this))
        {
            PurchInstrumentation instrumentation = PurchInstrumentation::newInstrumentation(funcName(), '0');
            TradeInstrumentationStopwatch stopWatch = TradeInstrumentationStopwatch::newStopwatch();

            PurchLineType purchLineType = this.type(purchTable);
        
            purchLineType.inserting();
            PurchLine::logMeasure(instrumentation, classStr(PurchLineType), methodStr(PurchLineType, inserting), stopWatch);

            if (purchLineType.isPurchTableInterCompanyOrder() && this.inventTable().interCompanyBlockedPurch())
            throw error(strFmt("@SYS74812", this.ItemId));

            if (this.isDropShipment()
            && !this.InventRefTransId
            &&  purchTable.interCompanyAllowIndirectCreationOrig())
            {
                if (purchTable.InterCompanyOriginalSalesId
                    && InterCompanyAllowIndirectCreationErrorMessageFlight::instance().isEnabled())
                {
                    throw error(strFmt("@SCM:IntercompanyAllowIndirectCreationPurchaseError", purchTable.PurchId, "@SYS95174", purchTable.InterCompanyOriginalSalesId, purchTable.DataAreaId));
                }
                else
                {
                    throw error(purchTable.interCompanyAllowIndirectCreationOrig());
                }
            }

            if(PurchLineHistoryThrowErrorWhenOrphanRecordsExistFlight::instance().isEnabled() && this.hasOrphanedHistoryRecords())
            {
                throw error(strFmt("@SCM:PurchLineHistoryOrphanRecords", funcName()));
            }
               
            if (purchTable)
            {
                VersioningPurchaseOrder::newPurchaseOrder(purchTable).change(this, null);
            }

            this.SourceDocumentLine = 0;
            SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);
            PurchLine::logMeasure(instrumentation, classStr(SourceDocumentProcessorFacade), staticMethodStr(SourceDocumentProcessorFacade, submitSourceDocumentLineImplementation), stopWatch);

            if (this.creditNoteLine(purchTable))
            {
                this.TransactionCode = IntrastatParameters::find().DefaultCreditNote;

                if (!TaxIntegrationManualAddNegativeLineFlight::instance().isEnabled())
                {
                    // For credit note and return order process, override sales tax should be yes to ensure the sales tax is the same as original ones.
                    this.OverrideSalesTax = NoYes::Yes;
                }
            }

            // InventTransId is set when coming from DMF data import or OData.
            if (!this.InventTransId || !this.skipAssignInventTransId())
            {
                this.InventTransId = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
            }

            if (!this.VendAccount || !this.VendGroup)
            {
                this.VendAccount      = purchTable.OrderAccount;
                this.VendGroup        = purchTable.VendGroup;
            }

            boolean lineNumberIsSet = this.LineNumber;

            TradeLineNumberManager::updateLineNumberOfNewOrder(this);
            purchLineType.associateWithAgreementLine();
            PurchLine::logMeasure(instrumentation, classStr(PurchLineType), methodStr(PurchLineType, associateWithAgreementLine), stopWatch);

            if (this.SkipUpdate   != InterCompanySkipUpdate::InterCompany
            &&  this.SkipUpdate   != InterCompanySkipUpdate::Both)
            {
                purchLineType.interCompanySyncEngine().synchronize();
                PurchLine::logMeasure(instrumentation, classStr(InterCompanySyncPurchLineType), methodStr(InterCompanySyncPurchLineType, synchronize), stopWatch);
            }

            this.setPurchStatus();

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                this.setPostingProfile_RU();
                PurchLine::logMeasure(instrumentation, tableStr(PurchLine), tableMethodStr(PurchLine, setPostingProfile_RU), stopWatch);
            }

            if (this.mustCreateItemRequirement())
            {
                ProjTable projTable = this.projTable();

                if (projTable.validateCreateItemReqFromPOLine())
                {
                    SalesLine salesLine = SalesLine::createItemRequirementFromPOLine(this);

                    PurchLine::logMeasure(instrumentation, tableStr(SalesLine), tableStaticMethodStr(SalesLine, createItemRequirementFromPOLine), stopWatch);

                    this.InventRefId = salesLine.SalesId;
                    this.InventRefTransId = salesLine.InventTransId;
                    this.ItemRefType = InventRefType::Sales;
                }
            }

            InventUpd_Estimated estimated;

            // For category based lines we do not have an item and inventory transaction may never be created.
            // For non-inventoried items InventUpd should still be invoked since it deletes transactions when QtyOrdered is set to 0.
            if (this.canInventUpdNow(dropInvent, purchLineType))
            {
                estimated = purchLineType.updateInventoryOnInsert();
                PurchLine::logMeasure(instrumentation, classStr(InventUpd_Estimated), methodStr(InventUpd_Estimated, updateNow), stopWatch);

                if (this.ProjId && !this.RecId && FeatureStateProvider::isFeatureEnabled(ProjEnableInventoryMarkingTelemetryFlight::instance()))
                {
                    this.logTelemetryForProject('insert');
                }
            }

            if (PdsGlobal::pdsIsCWItem(this.ItemId))
            {
                if (!purchTable.isReturnOrPurchaseOrder())
                {
                    throw error("@PDS122");
                }   
            }

            if (this.QtyOrdered < 0)
            {
                this.mcrDropShipment = NoYes::No;
                this.mcrDropShipStatus = MCRDropShipStatus::None;
            }

            this.tamItemVendRebateGroupId = this.mcrInventTable().ItemVendRebateGroupId;

            if (this.LinePercent || this.MultiLnPercent)
            {
                this.DiscPercent = this.discPercent();
                PurchLine::logMeasure(instrumentation, tableStr(PurchLine), tableMethodStr(PurchLine, discPercent), stopWatch);
            }

            if (this.LineDisc || this.MultiLnDisc)
            {
                this.DiscAmount = this.discAmount();
                PurchLine::logMeasure(instrumentation, tableStr(PurchLine), tableMethodStr(PurchLine, discAmount), stopWatch);
            }

            if (!this.SkipShipReceiptDateCalculation && this.DeliveryPostalAddress && !purchTable.InterCompanyOrder && !purchTable.InterCompanySalesId)
            {
                this.calculateRequestedAndConfirmedShipAndReceiptDate(this.RequestedShipDate, this.ConfirmedShipDate);
            }

            this.IsModified = NoYes::Yes;
        
            purchaseOrderActivities.logPurchaseOrderLine(activityContext, purchTable, this, dropInvent, false);

            if (PurchLineDuplicateLineNumFlight::instance().isEnabled()
                && !lineNumberIsSet 
                && this.isInterCompanyOrder())
            {
                #OCCRetryCount 

                try
                {
                    super();
                }
                catch (Exception::DuplicateKeyException)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::DuplicateKeyExceptionNotRecovered;
                    }
                    else
                    {
                        this.LineNumber = 0;
                        TradeLineNumberManager::updateLineNumberOfNewOrder(this);
                        retry;
                    }
                }
            }
            else
            {
                super();
            }

            PurchLine::logMeasure(instrumentation, tableStr(PurchLine), tableMethodStr(PurchLine, insert), stopWatch);

            this.updateAssessableValueAndWriteForDataSource_IN();

            this.SysExtensionSerializerMap::postInsert();
            PurchLine::logMeasure(instrumentation, tableStr(SysExtensionSerializerMap), tableMethodStr(SysExtensionSerializerMap, postInsert), stopWatch);

            this.updateSalesLineCommittedCost(purchLineOrig);
            PurchLine::logMeasure(instrumentation, tableStr(PurchLine), tableMethodStr(PurchLine, updateSalesLineCommittedCost), stopWatch);

            purchLineType.deleteTaxUncommitted();
            PurchLine::logMeasure(instrumentation, classStr(PurchLineType), methodStr(PurchLineType, deleteTaxUncommitted), stopWatch);

            if (TaxWithholdingGlobalFeature::isCalcWHTInInvoiceEnabled())
            {
                purchLineType.deleteTaxWithholdUncommitted();
                PurchLine::logMeasure(instrumentation, classStr(PurchLineType), methodStr(PurchLineType, deleteTaxWithholdUncommitted), stopWatch);
            }

            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                purchLineType.deleteTaxWithholdUncommitted_IN();
                PurchLine::logMeasure(instrumentation, classStr(PurchLineType), methodStr(PurchLineType, deleteTaxWithholdUncommitted_IN), stopWatch);
            }

            //Create pending registration records for a non-stocked line that does not have change management enabled.
            if (!this.isStocked() && !purchLineType.isChangeRequestRequired())
            {
                purchLineType.updatePendingRegistrationsNonStocked(true);
                PurchLine::logMeasure(instrumentation, classStr(PurchLineType), methodStr(PurchLineType, updatePendingRegistrationsNonStocked), stopWatch);
            }

            if (estimated)
            {
                estimated.updateOwnerRelationship();
            }

            if (this.SkipUpdate != InterCompanySkipUpdate::Internal
            &&  this.SkipUpdate != InterCompanySkipUpdate::Both)
            {
                purchLineType.saveSynchronizedSalesLine(purchLineOrig, true);
                PurchLine::logMeasure(instrumentation, classStr(PurchLineType), methodStr(PurchLineType, saveSynchronizedSalesLine), stopWatch);
            }

            if (estimated)
            {
                estimated.updateReservation();
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && !TaxUpdateAssessableValueWhileWriteBaseTable_INFlight::instance().isEnabled())
            {
                // As the PurchLine_IN is used later before its form data source write it to
                // DB, insert it at here to make it accessible from databases
                PurchLine_IN purchLine_IN = this.SysExtensionSerializerMap::getExtensionTable(tableNum(PurchLine_IN), false);
                if (purchLine_IN.RecId == 0 && FormDataUtil::isFormDataSource(purchLine_IN))
                {
                    purchLine_IN.SysExtensionSerializerExtensionMap::insertAfterBaseTable(this);
                }
            }

            this.updateMarkupTransBasedOnIntercompanySkipUpdate(findMarkup, false);

            this.SkipUpdate = InterCompanySkipUpdate::No;
            this.doUpdate();

            if (!_skipPurchTableUpdate
                && !PurchTableStatusDelayUpdate::instance().isDelayUpdating(this.PurchId, this.DataAreaId))
            {
                purchTable.updateStatusFromPurchLines();
                PurchLine::logMeasure(instrumentation, tableStr(PurchTable), tableMethodStr(PurchTable, updateStatusFromPurchLines), stopWatch);
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
            && purchTable.purchTable_W().CustomsImportOrder_IN
            && this.PurchQty >= 0
            && TaxParameters::find().EximIncentiveSchemes_IN)
            {
                EximPurchLine_IN::insertFromPurchLine(this.RecId, this.ItemId);
            }

            if (BrazilParameters::isEnabled())
            {
                purchLineType.updateFiscalDocumentText_BR(FiscalDocumentTextType_BR::Inventory);
                purchLineType.updateFiscalDocumentText_BR(FiscalDocumentTextType_BR::CFOP);
                PurchLine::logMeasure(instrumentation, classStr(PurchLineType), methodStr(PurchLineType, updateFiscalDocumentText_BR), stopWatch);
            }

            if (interCompanySkipUpdate == InterCompanySkipUpdate::No && !_skipInterCompanyCalcDisc)
            {
                purchLineType.interCompanyCalcDisc();
                PurchLine::logMeasure(instrumentation, classStr(PurchLineType), methodStr(PurchLineType, interCompanyCalcDisc), stopWatch);
            }

            if (this.mustExecutePurchTotalSummary())
            {
                PurchTotalsSummaryController::onInsert(this);
                PurchLine::logMeasure(instrumentation, classStr(PurchTotalsSummaryController), staticmethodstr(PurchTotalsSummaryController, onInsert), stopWatch);
            }

            if (WHSPurchLine::isExtensionRecordNeeded(this))
            {
                WHSPurchLine whsPurchLine = this.whsPurchLineForInsert();
                whsPurchLine.initFromPurchLine(this);
                whsPurchLine.insert();
            }

            WHSAutoCreateLoadLine::newFromSourceLineTableBuffer(this).autoCreateLoadLine();

            PlSADPurchTable::puchLineAdded(this);

            if (TaxIntegrationUtils::isTransitDocumentEnabled())
            {
                this.transitDocument();
                PurchLine::logMeasure(instrumentation, tableStr(PurchLine), tableMethodStr(PurchLine, transitDocument), stopWatch);
            }

            // <GTE>
            if (TaxIntegrationUtils::isTaxInformationEnabled())
            {
                //Copy tax information from REQ line to purchase line.
                if (this.PurchReqLineRefId)
                {
                    TransTaxInformationHelper::copyTransTaxInformation(PurchReqLine::findLineRefId(this.PurchReqLineRefId), this);
                }

                //Copy tax information from sales line to purchase line.
                if (this.ItemRefType == InventRefType::Sales && this.InventRefTransId)
                {
                    TransTaxInformationHelper::copyTransTaxInformation(SalesLine::findInventTransId(this.InventRefTransId), this);

                    TransTaxInformationHelper::newHelper().updateCustVendLocationFromTransTable(this);
                }
            }
            // </GTE>

            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                this.markCurrentTaxDocumentTaxStatusDirty();
                PurchLine::logMeasure(instrumentation, tableStr(PurchLine), tableMethodStr(PurchLine, markCurrentTaxDocumentTaxStatusDirty), stopWatch);
            }

            purchLineType.inserted();
            PurchLine::logMeasure(instrumentation, classStr(PurchLineType), methodStr(PurchLineType, inserted), stopWatch);
        
            instrumentation.logMeasures();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssessableValueAndWriteForDataSource_IN</Name>
				<Source><![CDATA[
    private void updateAssessableValueAndWriteForDataSource_IN(boolean _updateAssessableValue = true)
    {
        if (TaxParameters::checkTaxParameters_IN()
            && TaxUpdateAssessableValueWhileWriteBaseTable_INFlight::instance().isEnabled())
        {
            PurchLine_IN purchLine_IN = this.purchLine_IN();

            if (_updateAssessableValue && this.isInterCompanyOrder())
            {
                purchLine_IN.assessableValueV2(this);
            }

            this.writeExtensionTableForDataSource_IN();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeExtensionTableForDataSource_IN</Name>
				<Source><![CDATA[
    private void writeExtensionTableForDataSource_IN()
    {
        PurchLine_IN purchLine_IN = this.SysExtensionSerializerMap::getExtensionTable(tableNum(PurchLine_IN), false);

        // Explicitly save the extension table when it's a form data source.
        // Current table extension mechanisms assume that the form's default save operation includes the extension table.
        // See SysExtensionSerializerMap::packExtensionTable for the underlying assumptions.
        // The save order between the extension table and the base table is not guaranteed.
        // Saving the extension table first may result in lost updates if the base table modifies it during its save operation.
        // Conversely, the base table may access the extension table's record before it's written to the database by the form data source.
        // To ensure database accessibility, insert the extension table record here.
        if (FormDataUtil::isFormDataSource(purchLine_IN))
        {
            if (purchLine_IN.RecId == 0)
            {
                purchLine_IN.SysExtensionSerializerExtensionMap::insertAfterBaseTable(this);
            }
            else if (this.isInterCompanyOrder())
            {
                FormDataSource dataSource = FormDataUtil::getFormDataSource(purchLine_IN);
                if(dataSource.validateWrite())
                {
                    dataSource.write();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logTelemetryForProject</Name>
				<Source><![CDATA[
    private void logTelemetryForProject(str _action)
    {
        ProjOpsManagementLogger logger = ProjOpsManagementLogger::createLogger(tablestr(PurchLine));
        using (var activityContext1 = logger.projOpsManagementActivity().projInventTransMarkingUpdateContext())
        {
            logger.logInformation(strFmt("ProjPurchLine info during %1. PurchId: %2, LineNumber: %3, InventTransId: %4, call stack: %5", _action, this.PurchId, this.LineNumber, this.InventTransId,  ProjOpsInstrumentationLogger::getCallStack(xSession::xppCallStack())));
        }
                    
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventUpdNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that if we can update the inventory when a purchase line is inserted into the database.
    /// </summary>
    /// <param name = "_dropInvent">If it is a category based line.</param>
    /// <param name = "_purchLineType">The value of <c>PurchLineType</c>.</param>
    /// <returns>True if we can update it; otherwise, false</returns>
    protected boolean canInventUpdNow(boolean _dropInvent, PurchLineType _purchLineType)
    {
        return (!_dropInvent && this.isStocked() && this.mustUpdateInventory(_purchLineType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyIsBeingUpdated</Name>
				<Source><![CDATA[
    public boolean interCompanyIsBeingUpdated(boolean _showWarning = true)
    {
        SalesLine           salesLine;
        InventTransOrigin   inventTransOrigin;
        InventTrans         inventTrans;
        PurchTable          purchTable = this.purchTable();
        boolean             ret = false;

        if (this.RecId
        &&  purchTable.InterCompanyOrder
        &&  purchTable.InterCompanyCompanyId)
        {
            if (this.isStocked())
            {
                inventTransOrigin = null;
                select firstonly RecId from inventTransOrigin
                    where inventTransOrigin.InventTransId == this.InventTransId
                    exists join inventTrans
                       where inventTrans.InventTransOrigin  == inventTransOrigin.RecId
                         && (((inventTrans.StatusReceipt    == StatusReceipt::Received
                         || inventTrans.StatusReceipt       == StatusReceipt::Registered
                         || inventTrans.StatusReceipt       == StatusReceipt::Arrived)
                         && inventTrans.StatusIssue         == StatusIssue::None)
                         || ((inventTrans.StatusIssue       == StatusIssue::Deducted
                         || inventTrans.StatusIssue         == StatusIssue::Picked)
                         && inventTrans.StatusReceipt       == StatusReceipt::None)
                         || inventTrans.TransChildType      != InventTransChildType::None);

                if (inventTransOrigin.RecId)
                {
                    ret = true;
                    if (_showWarning)
                    {
                        setPrefix(strFmt("@SYS93821",TradeInterCompany::curCompanyName()));
                        setPrefix(#PreFixField(purchTable, PurchId));
                        checkFailed("@SYS93839");
                    }
                }
                else
                {
                    if (!this.isInvoiced())
                    {
                        select firstonly TableId from inventTransOrigin
                            where inventTransOrigin.InventTransId == this.InventTransId
                            join sum(Qty) from inventTrans
                                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                                &&   (inventTrans.StatusReceipt     == StatusReceipt::Purchased
                                   || inventTrans.StatusIssue       == StatusIssue::Sold);

                        if (inventTrans.Qty != 0)
                        {
                            ret = true;
                            if (_showWarning)
                            {
                                setPrefix(strFmt("@SYS93821",TradeInterCompany::curCompanyName()));
                                setPrefix(#PreFixField(purchTable, PurchId));
                                checkFailed("@SYS93839");
                            }
                        }
                    }
                }
            }
            else
            {
                ret = this.interCompanyIsBeingUpdatedNonInventoried(_showWarning);
            }

            if (!ret
            &&  this.InterCompanyInventTransId)
            {
                changecompany(purchTable.InterCompanyCompanyId)
                {
                    setPrefix(strFmt("@SYS93821",TradeInterCompany::curCompanyName()));

                    salesLine = SalesLine::findInventTransId(this.InterCompanyInventTransId);
                    if (salesLine)
                    {
                        ret = salesLine.interCompanyIsBeingUpdated(_showWarning);
                    }
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInterCompanyOrderInvoiced</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean isInterCompanyOrderInvoiced(PurchTable _purchTable = null, boolean _showWarning = true)
    {
        boolean ret;

        PurchTable purchTable = _purchTable;

        if (!_purchTable)
        {
            purchTable = this.purchTable();
        }

        if (this.RecId && purchTable.isInterCompanyOrder() && this.isStocked())
        {
            changecompany(purchTable.InterCompanyCompanyId)
            {
                setPrefix(strFmt("@SYS93821", TradeInterCompany::curCompanyName()));

                SalesLine salesLine = SalesLine::findInventTransId(this.InterCompanyInventTransId);
                if (salesLine && salesLine.isStocked() && salesLine.SalesStatus == SalesStatus::Invoiced)
                {
                    ret = true;
                    if (_showWarning)
                    {
                        setPrefix(#PreFixField(salesLine, SalesId));
                        warning("@SYS93839");
                    }
                }
             }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateRemainingPurchaseQuantity</Name>
				<Source><![CDATA[
    internal PurchQty calculateRemainingPurchaseQuantity(PurchLine _purchLine)
    {
        PurchQty qtyUpdate;

        if (_purchLine.RemainPurchFinancial * _purchLine.RemainPurchPhysical < 0)
        {
            qtyUpdate = _purchLine.RemainPurchFinancial;
        }
        else
        {
            qtyUpdate = _purchLine.RemainPurchPhysical + _purchLine.RemainPurchFinancial;
        }

        return qtyUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyIsBeingUpdatedNonInventoried</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the non stocked intercompany order line is being updated.
    /// </summary>
    /// <param name="_showWarning">
    /// A Boolean value that specifies whether to show warnings for failed checks; optional.
    /// </param>
    /// <returns>
    /// true if the non stocked intercompany order line is being updated; otherwise, false.
    /// </returns>
    public boolean interCompanyIsBeingUpdatedNonInventoried(boolean _showWarning = true)
    {
        PurchTable          purchTable = this.purchTable();
        boolean             ret = false;

        if (this.RecId
        &&  purchTable.InterCompanyOrder
        &&  purchTable.InterCompanyCompanyId)
        {
            if (this.registered() || this.receivedInTotal())
            {
                ret = true;
                if (_showWarning)
                {
                    setPrefix(strFmt("@SYS93821",TradeInterCompany::curCompanyName()));
                    setPrefix(#PreFixField(purchTable, PurchId));
                    checkFailed("@SYS93839");
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyLineAmount</Name>
				<Source><![CDATA[
    AmountCur interCompanyLineAmount(PurchQty      _purchQty    = this.PurchQty,
                                     InvoiceDate   _invoiceDate = this.DeliveryDate,
                                     Tax           _tax         = null)
    {
        AmountCur       lineAmount;
        SalesLine       salesLine;

        lineAmount = 0;
        if (this.InventRefTransId)
        {
            salesLine = SalesLine::findInventTransId(this.InventRefTransId);
            if (salesLine.RecId)
            {
                lineAmount = CurrencyExchangeHelper::curAmount2CurAmount(salesLine.calcLineAmountExclTax(_purchQty, _invoiceDate, _tax), salesLine.CurrencyCode, this.CurrencyCode, _invoiceDate);
            }
            else
            {
                lineAmount = this.calcLineAmountExclTax(_purchQty, _invoiceDate, _tax);
            }
        }
        else
        {
            lineAmount = this.calcLineAmountExclTax(_purchQty, _invoiceDate, _tax);
        }
        return lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyOriginDisplay</Name>
				<Source><![CDATA[
    display InterCompanyOriginDisplay interCompanyOriginDisplay()
    {
        InterCompanyOriginDisplay   interCompanyOriginDisplay;
        DictEnum                    dictEnum = new DictEnum(enumNum(InterCompanyOrigin));

        if (this.InterCompanyInventTransId)
        {
            interCompanyOriginDisplay = dictEnum.value2Name(this.InterCompanyOrigin);
        }
        return interCompanyOriginDisplay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyPurchaseLeadDate</Name>
				<Source><![CDATA[
    TransDate interCompanyPurchaseLeadDate(TransDate _deliveryDate)
    {
        LeadTime                leadTime;
        CalendarDays            calendarDays;
        ReqItemTable            reqItemTable            = ReqItemTable::find(this.ItemId,this.InventDimId);
        PriceDisc               priceDisc;
        InventItemPurchSetup    inventItemPurchSetup    = InventItemPurchSetup::find(this.ItemId,this.InventDimId);
        TransDate               leadTimeDate;
        WorkCalendarSched       workCalendarSched;

        if (reqItemTable.LeadTimePurchaseActive)
        {
            leadTime     = reqItemTable.LeadTimePurchase;
            calendarDays = reqItemTable.CalendarDaysPurchase;
        }
        else
        {
            priceDisc = PriceDisc::newFromSalesPurchLine(this, this.inventDim());
            priceDisc.findPrice(this.priceGroupId());
            if (priceDisc.deliveryDays())
            {
                leadTime     = priceDisc.deliveryDays();
                calendarDays = priceDisc.calendarDays();
            }
            else
            {
                leadTime     = inventItemPurchSetup.getLeadTime();
                calendarDays = inventItemPurchSetup.calendarDays();
            }
        }

        workCalendarSched = new WorkCalendarSched();
        leadTimeDate = workCalendarSched.schedDate(SchedDirection::Backward,
                                                   _deliveryDate,
                                                   leadTime,
                                                   calendarDays,
                                                   this.vendTable_OrderAccount().PurchCalendarId,
                                                   this.type().internalCalendarId());

        return leadTimeDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyPurchLineExist</Name>
				<Source><![CDATA[
    boolean interCompanyPurchLineExist()
    {
        return SalesLine::findInventTransId(this.InventRefTransId).InterCompanyInventTransId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyRevertMarkupTrans</Name>
				<Source><![CDATA[
    void interCompanyRevertMarkupTrans()
    {
        SalesLine           salesLine;
        CustInvoiceTrans    custInvoiceTrans;
        VendInvoiceTrans    vendInvoiceTrans;

        if (this.purchTable().isInterCompanyOrder()
        &&  this.ItemRefType == InventRefType::Sales
        &&  this.InventRefTransId)
        {
            salesLine = SalesLine::findInventTransId(this.InventRefTransId);
            if (salesLine.InventTransIdReturn)
            {
                select firstonly InventRefType, InventRefTransId from custInvoiceTrans
                       where custInvoiceTrans.InventTransId ==  salesLine.InventTransIdReturn
                       &&    custInvoiceTrans.Qty           == -salesLine.SalesQty;
                if (custInvoiceTrans.InventRefType == InventRefType::Purch
                &&  custInvoiceTrans.InventRefTransId)
                {
                    select firstonly vendInvoiceTrans
                           where vendInvoiceTrans.InventTransId ==  custInvoiceTrans.InventRefTransId
                           &&    vendInvoiceTrans.Qty           == -salesLine.SalesQty;
                    if (vendInvoiceTrans)
                    {
                        Markup::copy(true,vendInvoiceTrans,this);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanySalesLine</Name>
				<Source><![CDATA[
    SalesLine interCompanySalesLine(boolean  _forUpdate = false)
    {
        SalesLine   salesLine = null;

        if (this.InterCompanyInventTransId)
        {
            changecompany(this.purchTable().InterCompanyCompanyId)
            {
                salesLine = SalesLine::findInventTransId(this.InterCompanyInventTransId,_forUpdate);
            }
        }
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanySalesLineOriginal</Name>
				<Source><![CDATA[
    SalesLine interCompanySalesLineOriginal(boolean  _forUpdate = false)
    {
        SalesLine   salesLine = null;

        if (this.ItemRefType == InventRefType::Sales
        &&  this.InventRefTransId)
        {
            changecompany(
                          this.company()
                          )
            {
                salesLine = SalesLine::findInventTransId(this.InventRefTransId,_forUpdate);
            }
        }
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyUpdateNow</Name>
				<Source><![CDATA[
    boolean interCompanyUpdateNow()
    {
        PurchLine_IN    purchLine_IN;
        boolean         taxParameterEnabled_IN = TaxParameters::checkTaxParameters_IN();

        if (!this.RecId)
        {
            return true;
        }

        if (taxParameterEnabled_IN)
        {
            purchLine_IN = this.purchLine_IN();
        }

        if (this.orig().ItemId                      != this.ItemId
        ||  this.orig().InventDimId                 != this.InventDimId
        ||  this.orig().DeliveryDate                != this.DeliveryDate
        ||  this.orig().ConfirmedDlv                != this.ConfirmedDlv
        ||  this.orig().ShippingDateRequested       != this.ShippingDateRequested
        ||  this.orig().ShippingDateConfirmed       != this.ShippingDateConfirmed
        ||  this.orig().LineNumber                  != this.LineNumber
        ||  this.orig().InventTransId               != this.InventTransId
        ||  this.orig().PurchQty                    != this.PurchQty
        ||  this.orig().PurchUnit                   != this.PurchUnit
        ||  this.orig().OverDeliveryPct             != this.OverDeliveryPct
        ||  this.orig().UnderDeliveryPct            != this.UnderDeliveryPct
        ||  this.orig().DeliveryPostalAddress       != this.DeliveryPostalAddress
        ||  this.orig().DeliveryName                != this.DeliveryName
        ||  this.orig().PurchPrice                  != this.PurchPrice
        ||  this.orig().PriceUnit                   != this.PriceUnit
        ||  this.orig().LineAmount                  != this.LineAmount
        ||  this.orig().PurchMarkup                 != this.PurchMarkup
        ||  this.orig().LineDisc                    != this.LineDisc
        ||  this.orig().LinePercent                 != this.LinePercent
        ||  this.orig().MultiLnDisc                 != this.MultiLnDisc
        ||  this.orig().MultiLnPercent              != this.MultiLnPercent
        ||  this.orig().Complete                    != this.Complete
        ||  this.orig().Blocked                     != this.Blocked
        ||  this.orig().ReturnDispositionCodeId     != this.ReturnDispositionCodeId
        ||  this.orig().ReturnStatus                != this.ReturnStatus
        ||  this.orig().MatchingAgreementLine       != this.MatchingAgreementLine
        ||  this.orig().PlanningPriority       		!= this.PlanningPriority
        ||  this.IntercompanyOSOSourcingInventSiteId
        ||  this.IntercompanyOSOSourcingInventLocationId
        ||  !DimensionDefaultFacade::areEqual(this.orig().DefaultDimension, this.DefaultDimension)
        ||  (taxParameterEnabled_IN
            &&  (purchLine_IN.orig().AssessableValueTransactionCurrency != purchLine_IN.AssessableValueTransactionCurrency
                 ||  purchLine_IN.orig().MaximumRetailPrice       	!= purchLine_IN.MaximumRetailPrice))
        ||  (PurchParameters::find().IsSupplierShipmentDatesEnabled
                && (   this.orig().RequestedShipDate   != this.RequestedShipDate
                    || this.orig().ConfirmedShipDate   != this.ConfirmedShipDate
                    || this.orig().ShipCalendarId      != this.ShipCalendarId)))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    InventDim inventDim(boolean  update = false)
    {
        return InventDim::find(this.InventDimId, update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimProfileRAsset_RU</Name>
				<Source><![CDATA[
    public InventDim inventDimProfileRAsset_RU(InventDim _inventDim)
    {
        if (! this.ItemId)
            return _inventDim;

        RAssetParameters assetParameters = RAssetParameters::find();
        if (! assetParameters.LowCostAssetInventProfileId)
            return _inventDim;

        InventTable inventTable      = this.inventTable();
        if (! inventTable.AssetGroupId_RU)
            return _inventDim;

        if (EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(this.ItemId, fieldNum(InventDim, InventProfileId_RU))
            && RAssetMainGroup::find(inventTable.AssetGroupId_RU).GroupType == RAssetGroupTypes::LowCostAssets
            && RAssetTable::acquisitionPriceFromPurchLine(this) <= assetParameters.LowCostAmountLimit)
        {
            _inventDim.InventProfileId_RU = assetParameters.LowCostAssetInventProfileId;
        }

        return _inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventProfileType_RU</Name>
				<Source><![CDATA[
    InventProfileType_RU inventProfileType_RU(boolean _forceGeneral = true)
    {
        InventProfileType_RU inventProfileType = this.inventDim().inventProfile_RU().InventProfileType;

        if (inventProfileType == InventProfileType_RU::NotSpecified && _forceGeneral)
        {
            inventProfileType = InventProfileType_RU::General;
        }

        return inventProfileType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSiteChanged_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Method called wherever the InventsiteId is changed.
    /// </summary>

    public void inventSiteChanged_BR()
    {
        if (this.PurchaseType == PurchaseType::ReturnItem)
            this.setAddressFromPurchTable();

        this.setCFOP_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable(
        ItemId  _itemId       = this.ItemId,
        boolean _forUpdate    = false)
    {
        return InventTable::find(_itemId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTableModule</Name>
				<Source><![CDATA[
    InventTableModule inventTableModule(ItemId     itemId = this.ItemId)
    {
        return InventTableModule::find(itemId, this.moduleType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    VendInvoiceAccount invoiceAccount()
    {
        return this.purchTable().InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedInTotal</Name>
				<Source><![CDATA[
    display PurchQty   invoicedInTotal()
    {
        if (!this.InventTransId)
        {
            return 0;
        }
        return this.invoicedInTotalServer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedInTotalServer</Name>
				<Source><![CDATA[
    PurchQty invoicedInTotalServer()
    {
        return this.type().invoicedInTotal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedInventInTotal</Name>
				<Source><![CDATA[
    display InventQty    invoicedInventInTotal()
    {
        InventTransIdSum    inventTransIdSum;
        InventQty           inventQty = 0;

        if (this.InventTransId && this.isStocked())
        {
            inventTransIdSum = InventTransIdSum::newTransOriginId(this.inventTransOriginId());

            inventQty = inventTransIdSum.financial();
        }

        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedOnPackingSlipInTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity invoiced on packing slips.
    /// </summary>
    /// <returns>
    /// The quantity invoiced on packing slips.
    /// </returns>
    public PurchQty invoicedOnPackingSlipInTotal()
    {
        VendInvoiceTrans                    vendInvoiceTrans;
        VendInvoicePackingSlipQuantityMatch vendInvoicePackingSlipQuantityMatch;
        VendPackingSlipTrans                vendPackingSlipTrans;

        select sum(Qty) from vendInvoiceTrans
            where vendInvoiceTrans.InventTransId == this.InventTransId
            exists join vendInvoicePackingSlipQuantityMatch
                where vendInvoicePackingSlipQuantityMatch.InvoiceSourceDocumentLIne == vendInvoiceTrans.SourceDocumentLine
            exists join vendPackingSlipTrans
                where vendPackingSlipTrans.SourceDocumentLine == vendInvoicePackingSlipQuantityMatch.PackingSlipSourceDocumentLine;

        return vendInvoiceTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalInvoicedPackingSlipQuantityMatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the matched quantity invoiced on packing slips.
    /// </summary>
    /// <returns>
    /// The matched quantity invoiced on packing slips.
    /// </returns>
    [Hookable(false)]
    internal PurchQty totalInvoicedPackingSlipQuantityMatch()
    {
        VendInvoicePackingSlipQuantityMatch vendInvoicePackingSlipQuantityMatch;
        VendInvoiceTrans                    vendInvoiceTrans;
        VendPackingSlipTrans                vendPackingSlipTrans;

        select sum(Quantity) from vendInvoicePackingSlipQuantityMatch
            exists join vendInvoiceTrans
                where vendInvoiceTrans.SourceDocumentLine == vendInvoicePackingSlipQuantityMatch.InvoiceSourceDocumentLine
                    && vendInvoiceTrans.InventTransId == this.InventTransId
            exists join vendPackingSlipTrans
                where vendPackingSlipTrans.SourceDocumentLine == vendInvoicePackingSlipQuantityMatch.PackingSlipSourceDocumentLine;

        return vendInvoicePackingSlipQuantityMatch.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAgreementLinkValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the link between the agreement line and the purchase line is valid.
    /// </summary>
    /// <param name="_showInfolog">
    /// A Boolean value that indicates whether to print the errors in the Infolog; optional.
    /// </param>
    /// <returns>
    /// true if the link between the purchase order line and agreement line is valid; otherwise, false.
    /// </returns>
    public boolean isAgreementLinkValid(boolean _showInfolog = false)
    {
        if (this.isLinkedToAgreement())
        {
            return AgreementLine::find(this.MatchingAgreementLine).isLinkValid(this,_showInfolog);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the order line is category based.
    /// </summary>
    /// <returns>
    /// true if the order line is category based; otherwise, false.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public boolean isCategoryBased()
    {
        return this.salesPurchLineInterface().isCategoryBased();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDropShipment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the order line is part of a drop shipment.
    /// </summary>
    /// <returns>
    ///    true if the order line is part of a drop shipment; otherwise, false.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public boolean isDropShipment()
    {
        return this.salesPurchLineInterface().isDropShipment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if this line is related to a project.
    /// </summary>
    /// <returns>
    /// true if the line is related to a project; false otherwise.
    /// </returns>
    public boolean isForProject()
    {
        return (this.ProjId != '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFullyDistributed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs a check whether line is fully distributed.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    ///    A <c>SourceDocumentLine</c> record; optional.
    /// </param>
    /// <returns>
    ///    True, if the line is full distributed; otherwise false.
    /// </returns>
    /// <exception cref="M:exception::Warning">
    ///    This action can only be completed after the line number %1 is fully distributed.
    /// </exception>
    public boolean isFullyDistributed(SourceDocumentLine _sourceDocumentLine = this.sourceDocumentLine())
    {
        if (!SourceDocumentLineProvider::isLineFullyDistributed(_sourceDocumentLine, this))
        {
            //This action can only be completed after the line number %1 is fully distributed
            return checkFailed(strFmt("@SYS341833", this.LineNumber));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInterCompanyOrder</Name>
				<Source><![CDATA[
    boolean isInterCompanyOrder()
    {
        boolean  ok = false;

        if (this.InterCompanyInventTransId  &&  this.purchTable().isInterCompanyOrder())
        {
            ok = true;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIntercompanySalesLineCreditOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether purchase line has a related intercompany sales return line with disposition code that has action Credit only.
    /// </summary>
    /// <returns>
    /// true if a related intercompany sales return line has disposition code with action Credit only; otherwise, false.
    /// </returns>
    public boolean isIntercompanySalesLineCreditOnly()
    
    {
        SalesLine               localSalesLine;
        ReturnDispositionCode   returnDispositionCode;
        boolean                 ret;
        PurchTable              purchTable;
        
        if (this.InterCompanyInventTransId)
        {
            purchTable = this.purchTable();
            
            changeCompany(purchTable.InterCompanyCompanyId)
            {
                select firstonly RecId from localSalesLine
                    where localSalesLine.InventTransId == this.InterCompanyInventTransId
                    exists join returnDispositionCode
                        where returnDispositionCode.DispositionCodeId == localSalesLine.ReturnDispositionCodeId &&
                              returnDispositionCode.DispositionAction == DispositionAction::CreditOnly;
                
                if (localSalesLine.RecId)
                {
                    ret = true;
                }
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConsignmentOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if line originates from consignment.
    /// </summary>
    /// <returns>
    /// true if line originates from consignment; otherwise, false.
    /// </returns>
    public boolean isConsignmentOrder()
    {
        return this.PurchaseOrderLineCreationMethod == PurchPurchaseOrderCreationMethod::Consignment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConsignmentOrderLineLinkedToProductionBOMLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if line originates from consignment and is linked to a production BOM line.
    /// </summary>
    /// <returns>
    /// true if line originates from consignment and is linked to a production BOM line; otherwise, false.
    /// </returns>
    public boolean isConsignmentOrderLineLinkedToProductionBOMLine()
    {
        InventTransOriginProdBomOwnershipChangeJournalTransLink inventTransOriginProdBomOwnershipChangeJournalTransLink;

        if (this.isConsignmentOrder())
        {
            InventTransOriginPurchLine inventTransOriginPurchaseLine;
            InventTransOriginOwnershipChangeJournalTransPurchLineLink inventTransOriginOwnershipChangeJournalTransPurchLineLink;

            select firstonly RecId from inventTransOriginProdBomOwnershipChangeJournalTransLink
                exists join inventTransOriginOwnershipChangeJournalTransPurchLineLink
                    where inventTransOriginOwnershipChangeJournalTransPurchLineLink.OwnershipChangeJournalLine == inventTransOriginProdBomOwnershipChangeJournalTransLink.JournalLineInventTransOrigin
                exists join inventTransOriginPurchaseLine
                    where inventTransOriginOwnershipChangeJournalTransPurchLineLink.PurchaseOrderLine == inventTransOriginPurchaseLine.InventTransOrigin
                       && inventTransOriginPurchaseLine.PurchLineInventTransId == this.InventTransId
                       && inventTransOriginPurchaseLine.PurchLineDataAreaId    == this.DataAreaId;
        }

        return inventTransOriginProdBomOwnershipChangeJournalTransLink.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoiceMatched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if line was partially or fully invoiced.
    /// </summary>
    /// <returns>
    /// true if line was partially or fully invoiced; otherwise, false.
    /// </returns>
    public boolean isInvoiceMatched()
    {
        return this.IsInvoiceMatched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLatestPOVersionNotArchived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the last version of the purchase order that this line belongs to was not yet archived to the history tables.
    /// </summary>
    /// <returns>
    /// true if the last version has not yet been archived to the history tables; otherwise, false.
    /// </returns>
    public boolean isLatestPOVersionNotArchived()
    {
        PurchTableVersion purchTableVersion = PurchTableVersion::findLatest(this.PurchId, this.DataAreaId);
        return purchTableVersion && (purchTableVersion.IsArchived == NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLinkedToAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the purchase line is linked to an agreement line.
    /// </summary>
    /// <returns>
    /// true if the purchase line is linked to an agreement line; otherwise, false.
    /// </returns>
    public boolean isLinkedToAgreement()
    {
        return this.MatchingAgreementLine != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetailPricingUsed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a value indicating whether the retail pricing engine is used.
    /// </summary>
    /// <returns>
    /// True if retail pricing engine is used; otherwise, false;
    /// </returns>
    public boolean isRetailPricingUsed()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMarkupCodeEnabled_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///  The field MarkupCode_RU is enabled
    /// </summary>
    /// <returns>
    ///  true if enabled; otherwise, false
    /// </returns>
    public boolean isMarkupCodeEnabled_RU()
    {
        return ! this.ItemId || this.inventTable().isMarkupCodeEnabled_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPackingSlipOrInvoiceUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the line has been packing slip or invoice updated.
    /// </summary>
    /// <returns>
    /// true if the line has been packing slip or invoice updated; otherwise, false.
    /// </returns>
    public boolean isPackingSlipOrInvoiceUpdated()
    {
        PurchLine purchOrig = this.orig();

        return this.RecId                                       // Saved?
            && (this.isReceived()                               // Fully received?
                || this.RemainPurchFinancial != 0               // Partially received?
                || this.isInvoiced()                            // Fully invoiced?
                || (this.RemainPurchPhysical != this.PurchQty    // Partially invoiced/received?
                    && !(this.RemainPurchPhysical == purchOrig.RemainPurchPhysical && this.PurchQty != purchOrig.PurchQty))  //The 'and' part excludes lines which are being checked during an update before remainPurchPhysical was calculated.
                );
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjItemBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the line is related to an item.
    /// </summary>
    /// <returns>
    /// true if the line is related to an item; otherwise, false.
    /// </returns>
    public boolean isProjItemBased()
    {
        ProjCategory    projCategory;
        boolean         retVal = false;

        if (this.ItemId)
        {
            retVal = true;
        }
        else if (this.ProjCategoryId)
        {
            projCategory = ProjCategory::find(this.ProjCategoryId);
            if (projCategory.CategoryType == ProjCategoryType::Item)
            {
                retVal = true;
            }
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStocked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the order line is tracked in inventory.
    /// </summary>
    /// <returns>
    ///    true if the order line is tracked in inventory; otherwise, false.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public boolean isStocked()
    {
        return this.salesPurchLineInterface().isStocked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSubcontracted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the purchase line is originating from a lean subcontracting activity.
    /// </summary>
    /// <returns>
    /// true if it is linked to lean kanban jobs, otherwise false.
    /// </returns>
    public boolean isSubcontracted()
    {
        return this.PlanReference != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTangible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the item in the order line is tangible.
    /// </summary>
    /// <returns>
    /// true if the line is tangible; otherwise, false.
    /// </returns>
    public boolean isTangible()
    {
        //For non-stocked item based lines where the ItemType is service
        //or for description based lines where the procurementCategory is non-tangible, return false.
        if (!this.isStocked()
            && ((this.ItemId && this.inventTable().ItemType == ItemType::Service)
            || (!this.ItemId && !EcoResCategory::isTangible(this.ProcurementCategory))))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserWorkItemOwner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the work item status of the pending task for the current record.
    /// </summary>
    /// <param name="_user">
    /// The user ID of the work item owner; optional.
    /// </param>
    /// <returns>
    /// A Boolean value that indicates whether the user has a pending work item.
    /// </returns>
    boolean isUserWorkItemOwner(WorkflowUser  _user = curUserId())
    {
        return Workflow::findWorkItemsForCurrentUser(this).empty() == false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVersioned</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the order line has been versioned, i.e. whether it has been confirmed or approved with change management enabled.
    /// </summary>
    /// <returns>true if the order line has been versioned; otherwise, false.</returns>
    public boolean isVersioned()
    {
        return this.RecId
            &&  !this.IsDeleted
            && (!this.IsModified || PurchLine::historyExistsOrLatestVersionNotArchived(this.InventTransId, this.PurchId, this.DataAreaId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemIdChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event when the item changes.
    /// </summary>
    /// <param name = "_matchingAgreement">The <c>RecId</c> of the matching agreement.</param>
    /// <param name="_executeOnlyIfProductIsFullySpecified">
    ///     A Boolean value indicating whether to perform product variant validation; optional.
    /// </param>
    public void itemIdChanged(AgreementHeaderRecId _matchingAgreement = 0, boolean _executeOnlyIfProductIsFullySpecified = false)
    {
        PurchTable  purchTable;
        PurchLine_W purchLine_W;
        #isoCountryRegionCodes

        this.initFromInventTable(this.inventTable(), true, _executeOnlyIfProductIsFullySpecified);

        if (#PmfEnabled)
        {
            InventMovement::setMinMaxQty(this);
        }

        if (this.inventTable().modelGroup().InventModel == InventModel::StdCost)
        {
            this.CreateFixedAsset = NoYes::No;
            this.AssetGroup = '';
            this.AssetId = '';
            this.AssetGroup = '';
            this.AssetBookId = '';
        }

        this.salesPurchLineInterface().autoMatchAgreementLine(_matchingAgreement);

        PurchLine::modifyPurchQty(this, this.inventDim(), !this.MatchingAgreementLine);
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            purchLine_W = this.purchLine_W();
            if (purchLine_W.MarkupCode_RU && ! this.isMarkupCodeEnabled_RU())
            {
                purchLine_W.MarkupCode_RU = '';
                this.packPurchLine_W(purchLine_W);
            }

            if (this.inventTable().isMarkupCodeEnabled_RU() && this.inventTable().MarkupCode_RU)
            {
                this.LedgerDimension = MarkupTable::find(MarkupModuleType::Vend, this.inventTable().MarkupCode_RU).CustomerLedgerDimension;
            }
        }

        if (this.isProjectPurchase())
        {
            this.setProjSalesPrice();
        }

        this.calculateRequestedAndConfirmedShipAndReceiptDate(this.RequestedShipDate, this.ConfirmedShipDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemLineDisc</Name>
				<Source><![CDATA[
    LineDiscCode itemLineDisc()
    {
        return this.inventTable().purchLineDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the item name of the purchase order line.
    /// </summary>
    /// <returns>
    /// The item name.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display PurchLineShowItemName itemName()
    {
        PurchLineShowItemName purchLineShowItemName;

        if (this.isItemNameFromPurchLine())
        {
            purchLineShowItemName = this.inventTable().itemName(this.inventDim());
        }
        else
        {
            purchLineShowItemName = this.Name;
        }

        return purchLineShowItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemNameFromPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the item id has value.
    /// </summary>
    /// <returns>
    /// true if item id has value; otherwise, false.
    /// </returns>
    protected boolean isItemNameFromPurchLine()
    {
        return (this.ItemId != '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionClearing</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount ledgerDimensionClearing()
    {
        #ISOCountryRegionCodes
        PurchLine_W     purchLine_W;
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            purchLine_W = this.purchLine_W();
            if (purchLine_W.PostingProfile_RU)
            {
                return VendLedgerAccounts::clearingLedgerDimension(this.purchTable().InvoiceAccount,
                                                           purchLine_W.PostingProfile_RU);
            }
        }
        return VendLedgerAccounts::clearingLedgerDimension(this.purchTable().InvoiceAccount,
                                                           this.purchTable().PostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the account that is returned when getting the ledger account so that all fixed asset
    /// transactions will use the <c>PurchReceiptFA</c> account instead of the <c>PurchConsump</c> account.
    /// </summary>
    /// <returns>
    /// The ledger account for the consumption transaction.
    /// </returns>
    display LedgerDimensionDefaultAccount ledgerDimensionConsumption()
    {
        LedgerDimensionDefaultAccount   ledgerAccount;

        if (this.isStocked())
        {
            ledgerAccount = this.ledgerDimensionItem(InventAccountType::PurchConsump);
        }
        else if ((this.AssetId) && (AssetParameters::canUserCreateAssetAcquisition()))
        {
            ledgerAccount = this.assetLedgerDimension();
        }
        else
        {
            ledgerAccount = this.ledgerDimensionItem(InventAccountType::PurchExpense);
        }

        return ledgerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionDiscount</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount ledgerDimensionDiscount()
    {
        return this.ledgerDimensionItem(InventAccountType::PurchDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a ledger dimension for the purchase order line.
    /// </summary>
    /// <param name="_inventAccountType">
    /// The posting account type.
    /// </param>
    /// <returns>
    /// The posting ledger dimension for the account type of the purchase order line.
    /// </returns>
    [Replaceable]
    LedgerDimensionDefaultAccount ledgerDimensionItem(InventAccountType _inventAccountType)
    {
        #ISOCountryRegionCodes
        VendInvoiceAccount vendInvoiceAccount = this.invoiceAccount();
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return InventPosting::accountItemLedgerDimensionFromParameters(
                this.buildAccountItemLedgerDimensionParameter(
                    _inventAccountType,
                    this.ProcurementCategory,
                    vendInvoiceAccount,
                    VendTable::find(vendInvoiceAccount).VendGroup,
                    this.inventDim()));
        }
        return InventPosting::accountItemLedgerDimensionFromParameters(
            this.buildAccountItemLedgerDimensionParameter(
                _inventAccountType,
                this.ProcurementCategory,
                vendInvoiceAccount,
                VendTable::find(vendInvoiceAccount).VendGroup));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAccountItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting account ledger dimension for an item.
    /// </summary>
    /// <param name="_accountType">An inventory account type.</param>
    /// <param name="_itemCategory">An item category.</param>
    /// <param name="_vendInvoiceAccount">A vendor invoice account.</param>
    /// <param name="_vendGroupId">A vendor group Id.</param>
    /// <param name="_inventDim">An inventory dimension.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingAccountItemLedgerDimensionParameters buildAccountItemLedgerDimensionParameter(InventAccountType _accountType, InventCategoryRelation _itemCategory, VendInvoiceAccount _vendInvoiceAccount, VendGroupId _vendGroupId, InventDim _inventDim = null)
    {
        return InventPostingAccountItemLedgerDimensionParameters::newFromParameters(
            _accountType,
            this.ItemId,
            this.inventTable().itemGroupId(),
            _itemCategory,
            _vendInvoiceAccount,
            _vendGroupId,
            this.TaxGroup,
            _inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionOffsetAccountPckSlp</Name>
				<Source><![CDATA[
    display LedgerDimensionDefaultAccount ledgerDimensionOffsetAccountPckSlp()
    {
        return this.ledgerDimensionItem(InventAccountType::PurchPackingSlipOffsetAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the account that is returned when getting the ledger account so that all the fixed asset
    /// transactions will use the <c>PurchReceiptFA</c> account instead of the <c>PurchReceipt</c> account.
    /// </summary>
    /// <returns>
    /// A ledger account for the receipt transaction.
    /// </returns>
    display LedgerDimensionDefaultAccount ledgerDimensionReceipt()
    {
        #ISOCountryRegionCodes
        LedgerDimensionDefaultAccount ledgerAccount;

        if (this.LedgerDimension && InventMovement::construct(this).mustBeBookedBalanceSheet())
        {
            ledgerAccount  = this.LedgerDimension;
        }
        else
        {
            if (this.AssetId)
            {
                InventPostingAccountItemWithBackupLedgerDimensionParameters searchParameterWithBackup = this.accountItemWithBackupLedgerDimensionParameters(
                    InventAccountType::PurchReceiptFixedAsset,
                    InventAccountType::PurchReceipt,
                    this.ProcurementCategory);

                if (InventPostingExtendParm_CN::checkExtendParmEnabled())
                {
                    searchParameterWithBackup.SiteRelation = InventPostingExtendParm_CN::constructInventDim(this.inventDim()).parmInventSiteId();
                }

                ledgerAccount = InventPosting::accountItemWithBackupLedgerDimensionFromParameters(searchParameterWithBackup);
            }
            else
            {
                if (InventPostingExtendParm_CN::checkExtendParmEnabled())
                {
                    ledgerAccount = this.accountItemExtendParm_CN(InventAccountType::PurchReceipt);
                }
                else
                {
                    ledgerAccount = this.ledgerDimensionItem(InventAccountType::PurchReceipt);
                }
            }
        }
        return ledgerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionVend_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns ledger dimension value for posting
    /// </summary>
    /// <returns>
    /// Ledger dimension value for posting
    /// </returns>
    LedgerDimensionDefaultAccount ledgerDimensionVend_RU()
    {
        PurchLine_W     purchLine_W = this.purchLine_W();
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
            && purchLine_W.PostingProfile_RU)
        {
            return VendLedgerAccounts::summaryLedgerDimension(this.purchTable().InvoiceAccount,
                                                              purchLine_W.PostingProfile_RU);
        }
        return VendLedgerAccounts::summaryLedgerDimension(this.purchTable().InvoiceAccount,
                                              this.purchTable().PostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public PurchLineAmount lineAmountExclTax(TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null, boolean _skipRounding = false)
    {
        return this.lineAmountExcludingTax(transDate, _tax, _skipRounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountExcludingTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public PurchLineAmount lineAmountExcludingTax(
        TransDate   _transDate              = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        Tax         _tax                    = null,
        boolean     _skipRounding           = false,
        boolean     _useRoundedTaxOrigin    = true)
    {
        return this.salesPurchLineInterface().lineAmountExcludingTax(this.taxDate(_transDate), _tax, _skipRounding, _useRoundedTaxOrigin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountModified</Name>
				<Source><![CDATA[
    public void lineAmountModified()
    {
        this.salesPurchLineInterface().lineAmountModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountMST</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountMST lineAmountMST(TransDate               exchRateDate            = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                   ExchRate                exchRate                = 0,
                                   ExchrateSecondary       exchrateSecondary       = 0,
                                   ExchRatesTriangulation  exchRatesTriangulation  = UnknownNoYes::Unknown)

    {
        return this.salesPurchLineInterface().lineAmountMST(exchRateDate, exchRate, exchrateSecondary, exchRatesTriangulation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountMSTExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountMST lineAmountMSTExclTax(TransDate               exchRateDate            = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                          ExchRate                exchRate                = 0,
                                          ExchrateSecondary       exchrateSecondary       = 0,
                                          ExchRatesTriangulation  exchRatesTriangulation  = UnknownNoYes::Unknown,
                                          Tax                     _tax                    = null)

    {
        return this.salesPurchLineInterface().lineAmountMSTExclTax(exchRateDate, exchRate, exchrateSecondary, exchRatesTriangulation, _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDisc</Name>
				<Source><![CDATA[
    LineDiscCode lineDisc()
    {
        return this.purchTable().LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkInventDim2Dimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies default <c>PurchLine.dimension</c> values, depending on the <c>InventDim</c> record buffer
    ///    values.
    /// </summary>
    /// <param name="_newInventDim">
    ///    The <c>InventDim</c> record buffer linked to the current <c>PurchLine</c> record buffer.
    /// </param>
    /// <param name="_oldInventDim">
    ///    The <c>InventDim</c> record buffer that was previously linked to the current <c>PurchLine</c>
    ///    record buffer.
    /// </param>
    public void linkInventDim2Dimension(InventDim _newInventDim, InventDim _oldInventDim)
    {
        _newInventDim.setInventSiteFromParentIfModified(this, _oldInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAllowed</Name>
				<Source><![CDATA[
    public boolean markupAllowed()
    {
        return this.type().markupAllowed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchingAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the value of the <c>this.MatchingAgreementLine</c>.
    /// </summary>
    /// <returns>
    /// A <c>RefRecId</c> type.
    /// </returns>
    public RefRecId matchingAgreementLine()
    {
        return this.MatchingAgreementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the invent table record for the item.
    /// </summary>
    /// <param name="_itemId">
    /// An item.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The inventory table record.
    /// </returns>
    public MCRInventTable mcrInventTable(ItemId _itemId = this.ItemId,
                                   boolean _forUpdate = false)
    {
        return MCRInventTable::findByItemId(_itemId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that contains the merged combination of the current
    /// <c>defaultDimension</c> field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was instantiated with the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that contains the merged combination of the current <c>defaultDimension</c> field
    /// on this table and the specified dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>
    [SysObsolete('This method will be deprecated, use method DefaultDimensionDefaultingStrategy::newMerge instead', false, 31\03\2019)]
    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )
        )
    {
        return DefaultDimensionDefaultingStrategy::newMerge(
            DefaultDimensionDefaultingDimensionTarget::newFromRecord(this),
            DefaultDimensionDefaultingDimensionCollection::construct()
                .add(DefaultDimensionDefaultingDimensionUnknownSource::newFromDimensionDefault(_primaryDefaultDimension))
                .add(DefaultDimensionDefaultingDimensionUnknownSource::newFromDimensionDefault(_secondaryDefaultDimension)),
            _dimensionMerge).getDefaultDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs specific actions when a field is modified.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field that has been modified.
    /// </param>
    /// <param name="_userInput">
    /// A Boolean value indicating whether the field change is initiated through direct user input; optional.
    /// </param>
    /// <remarks>
    /// This is overridden to allow for specific actions when a field is modified.
    /// </remarks>
    public void modifiedField(FieldId _fieldId, boolean _userInput = true)
    {
        InventDim inventDim;
        InventDimParm inventDimParm;

        CompanyInfo                     companyInfoLoc = CompanyInfo::find();
        VendTable                       vendTable = VendTable::find(this.VendAccount);

        boolean isAssetDocumentEnabled = AssetDocumentUtility_JP::isAssetDocumentEnabled();
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(PurchLine, ProcurementCategory):
                // Clear all except site and location
                inventDim = this.inventDim();
                inventDimParm.setActiveSiteAndWarehouseDimensions();
                inventDim.clearNotSelectedDim(inventDimParm);
                this.setInventDimIdFromInventDim(inventDim);
                this.setAddressFromInventDim(inventDim);
                this.initFromItemOrCategory(this.ItemId, this.ProcurementCategory, this.Name);
                this.ProjTaxItemGroupId =   ProjCategory::find(this.ProjCategoryId).TaxItemGroupId;

                this.initName();

                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                {
                    this.setAgreementLine();
                }

                if (!this.AssetGroup && PurchLineUpdatingProcurementCategorySetAssetGroupFlight::instance().isEnabled())
                {
                    this.updateAssetGroupBasedOnAssetRule();
                }

                this.calculateRequestedAndConfirmedShipAndReceiptDate(this.RequestedShipDate, this.ConfirmedShipDate);
                break;

            case fieldNum(PurchLine, PurchReceivedNow):
                this.setInventReceivedNow();
                this.Tax1099Amount = 0;
                this.Tax1099StateAmount = 0;
                break;

            case fieldNum(PurchLine, PriceUnit):
                this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, _fieldId);
                this.LineAmount = this.calcLineAmountInteraction(_fieldId);
                if (TaxParameters::checkTaxParameters_IN())
                {
                    this.purchLine_IN().assessableValue();
                }
                break;

            case fieldNum(PurchLine, PurchPrice):
                this.LineAmount = this.calcLineAmountForcedInteraction(_fieldId);
                this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, _fieldId);
                if (TaxParameters::checkTaxParameters_IN())
                {
                    this.purchLine_IN().assessableValue();
                }

                if (this.isForProject())
                {
                    this.setProjSalesPrice();
                }

                this.setAssetGroupBasedOnAssetRule();

                break;

            case fieldNum(PurchLine, LinePercent):
                this.DiscPercent = this.discPercent();
                this.LineAmount = this.calcLineAmountForcedInteraction(_fieldId);
                this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, _fieldId);
                if (TaxParameters::checkTaxParameters_IN())
                {
                    this.purchLine_IN().assessableValue();
                }
                if (this.defaultCostPriceAsSalesPrice())
                {
                    this.ProjSalesPrice = this.calcProjSalesPriceIfDefault();
                }
                else
                {
                    this.setProjSalesPrice();
                }
                break;

            case fieldNum(PurchLine, LineDisc):
                this.DiscAmount = this.discAmount();
                this.LineAmount = this.calcLineAmountForcedInteraction(_fieldId);
                this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, _fieldId);
                if (TaxParameters::checkTaxParameters_IN())
                {
                    this.purchLine_IN().assessableValue();
                }
                if (this.defaultCostPriceAsSalesPrice())
                {
                    this.ProjSalesPrice = this.calcProjSalesPriceIfDefault();
                }
                else
                {
                    this.setProjSalesPrice();
                }
                break;

            case fieldNum(PurchLine, LineAmount):
                if (_userInput)
                {
                    this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, _fieldId);
                    this.lineAmountModified();
                }
                this.LineAmount = this.calcLineAmountForcedInteraction(_fieldId, this.PurchQty, false);
                if (TaxParameters::checkTaxParameters_IN())
                {
                    this.purchLine_IN().assessableValue();
                }
                if (this.defaultCostPriceAsSalesPrice())
                {
                    this.ProjSalesPrice = this.calcProjSalesPriceIfDefault();
                }
                break;

            case fieldNum(PurchLine, PurchUnit):
                this.purchUnitModified();
                if (TaxParameters::checkTaxParameters_IN())
                {
                    this.purchLine_IN().assessableValue();
                }
                break;

            case fieldNum(PurchLine, PurchMarkup):
                this.LineAmount = this.calcLineAmountForced();
                this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, _fieldId);
                if (TaxParameters::checkTaxParameters_IN())
                {
                    this.purchLine_IN().assessableValue();
                }
                break;

            case fieldNum(PurchLine, MultiLnDisc):
                this.DiscAmount = this.discAmount();
                this.LineAmount = this.calcLineAmountForced();
                this.type().setPriceDiscChangePolicyMultiLine();
                if (TaxParameters::checkTaxParameters_IN())
                {
                    this.purchLine_IN().assessableValue();
                }
                break;

            case fieldNum(PurchLine, MultiLnPercent):
                this.DiscPercent = this.discPercent();
                this.LineAmount = this.calcLineAmountForced();
                this.type().setPriceDiscChangePolicyMultiLine();
                if (TaxParameters::checkTaxParameters_IN())
                {
                    this.purchLine_IN().assessableValue();
                }
                break;

            case fieldNum(PurchLine, ProjCategoryId):
                this.ProjLinePropertyId    = ProjLinePropertySetup::findLinePropertyId(this.ProjId,this.ProjCategoryId);
                if (this.ProcurementCategory)
                {
                    this.ProjTaxItemGroupId =   ProjCategory::find(this.ProjCategoryId).TaxItemGroupId;
                }
                else
                {
                    this.ProjTaxItemGroupId    = ProjParameters::taxItemGroupItem(this.ProjCategoryId,this.ItemId);
                }

                this.setProjSalesPrice();
                if (this.ProjWorker && this.isProjItemBased())
                {
                    this.ProjWorker = 0;
                }
                break;

            case fieldNum(PurchLine, ProjWorker):
                this.setProjSalesPrice();
                break;

            case fieldNum(PurchLine, ActivityNumber):
                this.initFromProjActivity(ProjActivity::find(this.ActivityNumber));
                this.ProjLinePropertyId    = ProjLinePropertySetup::findLinePropertyId(this.ProjId,this.ProjCategoryId);
                this.ProjTaxItemGroupId    = ProjParameters::taxItemGroupItem(this.ProjCategoryId,this.ItemId);
                this.setProjSalesPrice();
                break;

            case fieldNum(PurchLine, AssetId):
                this.modifyAssetId();
                if (isAssetDocumentEnabled)
                {
                    AssetDocumentReductionEntryPurchLnk_JP::deleteDocumentExtensionsByRef(this.TableId, this.RecId);
                }
                break;

            case fieldNum(PurchLine, AssetBookId):
                if (this.AssetId && this.AssetBookId)
                {
                    this.DefaultDimension = this.mergeDimension(AssetTable::find(this.AssetId).defaultDimension(this.AssetBookId));
                }
                if (isAssetDocumentEnabled)
                {
                    AssetDocumentReductionEntryPurchLnk_JP::deleteDocumentExtensionsByRef(this.TableId, this.RecId);
                }
                break;

            case fieldNum(PurchLine, DeliveryPostalAddress):
                LogisticsLocationSelectForm_PurchLine::construct(this).copyAddressToCaller(this.getDeliveryEntityRecord(), this.DeliveryPostalAddress);
                if (TaxIntegrationUtils::isTaxInformationEnabled())
                {
                    TransTaxInformationHelper::newHelper().UpdateCompanyLocationFromTransTable(this, this.DeliveryPostalAddress);
                }

                this.calculateRequestedAndConfirmedShipAndReceiptDate(this.RequestedShipDate, this.ConfirmedShipDate);
                break;

            case fieldNum(PurchLine, Requester):
                this.ReqAttention = HcmWorkerTitle::findByWorker(this.Requester).OfficeLocation;
                if (PurchCORPolicyTable::decentralized(this))
                {
                    PurchCORPolicyTable::setLocation(this, true);
                }
                else if (PurchCORPolicyTable::decentralized(this.orig()))
                {
                    PurchCORPolicyTable::setLocation(this, false);
                }
                break;

            case fieldNum(PurchLine, ConfirmedDlv):
                if (this.ProjId)
                {
                    this.initFromProjTable(this.projTable(),true);
                }
                this.calculateConfirmedShipAndReceiptDate(this.ConfirmedShipDate, this.ConfirmedDlv, SchedDirection::Backward);
                break;
            
            case fieldNum(PurchLine, ShippingDateConfirmed):
                this.calculateConfirmedShipAndReceiptDate(this.ShippingDateConfirmed);
                break;

            case fieldNum(PurchLine, ConfirmedShipDate):
                this.calculateConfirmedShipAndReceiptDate(this.ConfirmedShipDate);
                break;
            
            case fieldNum(PurchLine, DlvMode):
                this.calculateRequestedAndConfirmedShipAndReceiptDate(this.RequestedShipDate, this.ConfirmedShipDate);
                break;

            case fieldNum(PurchLine, ShipCalendarId):
                this.calculateRequestedAndConfirmedShipAndReceiptDate(this.RequestedShipDate, this.ConfirmedShipDate);
                break;
            
            case fieldNum(PurchLine, PurchaseType):
                if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
                {
                    if (this.PurchaseType == PurchaseType::ReturnItem)
                    {
                        this.RequestedShipDate = dateNull();
                    }
                    else if (this.RequestedShipDate == dateNull())
                    {
                        this.RequestedShipDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                        this.calculateRequestedAndConfirmedShipAndReceiptDate(this.RequestedShipDate, this.ConfirmedShipDate);
                    }
                }
                break;

            case fieldNum(PurchLine, ShippingDateRequested):
                this.calculateRequestedShipAndReceiptDate(this.ShippingDateRequested);
                break;

            case fieldNum(PurchLine, RequestedShipDate):

                if (PurchCalculateBackwardBasedOnRequestedShipDateFlight::instance().isEnabled())
                {
                    this.calculateRequestedShipAndReceiptDate(this.RequestedShipDate, dateNull(), SchedDirection::Backward);
                }
                else
                {
                    this.calculateRequestedShipAndReceiptDate(this.RequestedShipDate);
                }
                break;

            case fieldNum(PurchLine, DeliveryDate):
                this.ManualModifiedField = _fieldId;
                this.unLinkAgreementDeliveryDates(_fieldId);

                this.calculateRequestedShipAndReceiptDate(this.RequestedShipDate, this.DeliveryDate, SchedDirection::Backward);

                // When enabling <c>ProjModifyPODeliveryDateFlight</c> and modifying PO delivery date, the PO line should not
                // re-initialize from projtable. This is the expected behavior and will allow the workflow to get auto-approved 
                // when CreateItemReqForPO parameter is enabled based on the PO workflow set up and policies. When the flight is
                // deprecated, this code should be removed. 
                if (this.ProjId && !this.ConfirmedDlv && !ProjModifyPODeliveryDateFlight::instance().isEnabled())
                {
                    this.initFromProjTable(this.projTable(),true);
                }
                this.checkPriceDate(_fieldId);
                this.ManualModifiedField = 0;

                if (this.ProjId && this.ItemId)
                {
                    ProjParameters projParameters = ProjParameters::find();
                    if (projParameters.CreateItemReqForPO == NoYes::Yes && projParameters.SkipPOAndItemReqSync == NoYes::No)
                    {
                        SalesLine salesLine = SalesLine::findInventTransId(this.InventRefTransId);

                        if (salesLine)
                        {
                            LeadTime salesLeadTime = SalesParameters::find().LeadTimeSalesDefault;
                            LeadTime PurchLeadTime = InventItemPurchSetup::find(this.ItemId, this.InventDimId).leadTime;

                            ttsbegin;
                            salesLine.selectForUpdate(true);
                            salesLine.ReceiptDateRequested = this.deliveryDate;
                            salesLine.ShippingDateRequested = this.deliveryDate + salesLeadTime - PurchLeadTime;
                            salesLine.update();
                            ttscommit;
                        }
                    }
                }

                break;

            case fieldNum(PurchLine, ProjSalesCurrencyId):
                if (this.ProjId)
                {
                    this.initFromProjTable(this.projTable(),true);
                    this.setProjSalesPrice();
                }
                break;

            case fieldNum(PurchLine, ProjId):
                this.ProjSalesCurrencyId = this.projTable().currencyId();
                this.projIdModified();
                this.setDefaultDimension();
                this.ProjTaxGroupId = ProjParameters::taxGroupInvoice(this.ProjId);

                // Call the event handler to handle other modifications in higher layers...
                PurchLineTableHandler::modifiedField_ProjId(_fieldId, this);
                break;

            case fieldNum(PurchLine, ItemId):
                if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && this.ItemId)
                {
                    this.ProjWorker = 0;
                }

                if (TaxIntegrationUtils::isMultipleTaxIdEnabledForIntrastat())
                {
                    PurchTable purchTable = this.purchTable();
                    this.StatProcId = purchTable.StatProcId ? purchTable.StatProcId : InventTable::find(this.ItemId).IntrastatProcId_CZ;
                }
                break;
            case fieldNum(PurchLine, BudgetReservationLine_PSN) :
                BudgetReservationLine_PSN::purchLineBudgetResLineFieldModified(this);
                break;
            case fieldNum(PurchLine, CreateFixedAsset):
                if (isAssetDocumentEnabled)
                {
                    AssetDocumentReductionEntryPurchLnk_JP::deleteDocumentExtensionsByRef(this.TableId, this.RecId);
                }
                break;
            case fieldNum(PurchLine, OrigCountryRegionId) :
                this.OrigStateId = '';
                break;
            // Call the event handler to handle other cases that may be present in higher layers...
            default:
                PurchLineTableHandler::modifiedField_OtherFields(_fieldId, this);
                break;
        }

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.modifiedField_BR(_fieldId);
        }
        // </GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes after a field modification.
    /// </summary>
    /// <param name="_fieldId">The modified field ID.</param>
    public void modifiedField_BR(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(PurchLine, DeliveryPostalAddress):
                this.onDeliveryPostalAddressChange_BR();
                break;

            case fieldNum(PurchLine, cfopTable_BR):
                this.onCFOPChange_BR();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modify a specified field.
    /// </summary>
    /// <param name="_fieldName">
    /// The field Name of the field to modify.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field.
    /// </param>
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        #isoCountryRegionCodes

        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(PurchLine, PurchQty):
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    if (TaxParameters::find().Customs_IN
                        && PurchTable::find(this.PurchId).purchTable_W().CustomsImportOrder_IN == NoYes::Yes
                        && CustomsInvoiceRegnTrans_IN::checkInvoiceRegnComplete(this.RecId)
                        && this.PurchQty < this.orig().PurchQty)
                    {
                        this.PurchQty = this.orig().PurchQty;
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyAssetId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the related field values when the value of the <c>AssetId</c> field is changed.
    /// </summary>
    /// <remarks>
    /// The value of the <c>AssetGroup</c> field and the <c>AssetBookId</c> field will be updated based on
    /// the new value of the <c>AssetId</c> field.
    /// </remarks>
    public void modifyAssetId()
    {
        AssetBook       assetBook;
        AssetBookId     bookIdDefault;
        AssetTable      assetTable;

        select firstonly AssetGroup from assetTable
            where assetTable.AssetId == this.AssetId;
        if (assetTable)
        {
            this.AssetGroup = assetTable.AssetGroup;
            this.ItemRefType = InventRefType::FixedAsset;

            // If asset is assigned, need to clear "createFixedAsset" flag.
            this.CreateFixedAsset = false;
        }
        else
        {
            this.AssetGroup = '';
            this.ItemRefType = InventRefType::None;
        }

        bookIdDefault = AssetParameters::find().BookIdDefault;
        assetBook = AssetBook::find(this.AssetId, bookIdDefault);

        if (assetBook
            && assetBook.assetBookTable().CurrentOperationsTax == CurrentOperationsTax::Current
            && (assetBook.Status == AssetStatus::NoAcquisition
                || assetBook.Status == AssetStatus::Open))
        {
            this.AssetBookId = bookIdDefault;
        }
        else
        {
            assetBook = AssetBook::findOpenOrNotAcquiredAssetBookByAssetIdLayer(this.AssetId, CurrentOperationsTax::Current);

            this.AssetBookId = assetBook.BookId;
        }
        if (this.AssetId && this.AssetBookId)
        {
            this.DefaultDimension = this.mergeDimension(AssetTable::find(this.AssetId).defaultDimension(this.AssetBookId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyCreateFixedAsset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the related fields when the value of the <c>CreateFixedAsset</c> field is changed.
    /// </summary>
    /// <remarks>
    /// If the <c>CreateFixedAsset</c> field is checked, the <c>AssetId</c> field will be cleared. It will
    /// always clear the <c>AssetGroup</c> field and set the <c>AssetTransTypePurch</c> field to
    /// <c>Acquisition</c>.
    /// </remarks>
    public void modifyCreateFixedAsset()
    {
        if (this.CreateFixedAsset == NoYes::Yes)
        {
            this.AssetId = '';
            this.modifyAssetId();
            this.ItemRefType = InventRefType::FixedAsset;
        }
        else
        {
            this.ItemRefType = InventRefType::None;
        }

        this.AssetGroup = '';
        this.AssetTransTypePurch = AssetTransTypePurch::Acquisition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return  [
                    [fieldNum(PurchLine, PlanningPriority),
                        [
                            fieldNum(PurchLine, ItemId),
                            fieldNum(PurchLine, InventDimId)
                        ]
                    ]
                ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the related fields when an inventory dimension field is modified.
    /// </summary>
    /// <param name="_inventDim">
    /// The new inventory dimension record.
    /// </param>
    /// <param name="_dimFieldId">
    /// The ID of the modified <c>InventDim</c> field.
    /// </param>
    /// <param name="_resetPrice">
    /// A Boolean value that indicates whether the price agreements are to be reset; optional.
    /// </param>
    /// <returns>
    /// true if the inventory dimensions was modified; Otherwise false.
    /// </returns>
    public boolean modifyInventDim(
        InventDim   _inventDim,
        FieldId     _dimFieldId,
        boolean     _resetPrice = true)
    {
        Set dimFieldIdSet = new Set(Types::Integer);
        dimFieldIdSet.add(_dimFieldId);

        boolean inventDimModified = this.modifyInventDimSet(_inventDim, dimFieldIdSet, _resetPrice);

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            if (_dimFieldId == fieldNum(InventDim, InventSiteId))
            {
                this.inventSiteChanged_BR();
            }
        }
        // </GBR>

        return inventDimModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldModifyWarehouseLocation</Name>
				<Source><![CDATA[
    private boolean shouldModifyWarehouseLocation(Set _dimFieldIdSet)
    {
        boolean isSiteOrWarehouseModified  = _dimFieldIdSet.in(fieldNum(InventDim, InventLocationId)) || _dimFieldIdSet.in(fieldNum(InventDim, InventSiteId));
        boolean shouldSetDefaultLocation   = !_dimFieldIdSet.in(fieldNum(InventDim, wMSLocationId));
        var inventDistinctProductOrderDefaultingController = InventDistinctProductOrderDefaultingController::constructFromFieldSet(_dimFieldIdSet);
        boolean isProductDimensionModified = inventDistinctProductOrderDefaultingController.isProductDimensionModified();

        if ((isSiteOrWarehouseModified || isProductDimensionModified) 
            && shouldSetDefaultLocation)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDimSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the related fields when multiple inventory dimension fields are modified.
    /// </summary>
    /// <param name="_inventDim">
    /// The new inventory dimension record.
    /// </param>
    /// <param name="_dimFieldIdSet">
    /// A set containing the ID's of the modified <c>InventDim</c> field.
    /// </param>
    /// <param name="_resetPrice">
    /// A Boolean value that indicates whether the price agreements are to be reset; optional.
    /// </param>
    /// <returns>
    /// true if dimensions were modified; Otherwise false.
    /// </returns>
    public boolean modifyInventDimSet(
        InventDim   _inventDim,
        Set         _dimFieldIdSet,
        boolean     _resetPrice = true)
    {
        InventDimGroupSetup     inventDimGroupSetup = InventDimGroupSetup::newItemId(this.ItemId);
        InventDim               inventDimLocal      = InventDim::findOrCreate(_inventDim);
        InventDimId             oldInventDimId;
        AgreementHeaderRecId    matchingPurchAgreementHeaderRecId;

        boolean                 isSiteOrWarehouseModified;
        boolean                 isProductDimensionModified;

        if (!this.ItemId)
        {
            return false;
        }

        if (!InventDistinctProductValidator::construct().isDistinctProductFullySpecified(this.ItemId, inventDimLocal))
        {
            return false;
        }

        // Remember the old value to check for changes
        oldInventDimId      = this.InventDimId;

        var defaultingArguments = InventDistinctProductDimensionSpecificDefaultingArgsPurchLine::construct(InventTable::find(this.ItemId),
                                                _resetPrice,
                                                true,
                                                true,
                                                false);

        var inventDistinctProductOrderDefaultingController = InventDistinctProductOrderDefaultingController::constructFromFieldSet(_dimFieldIdSet);

        inventDimLocal = inventDistinctProductOrderDefaultingController.inventDimModified(  this.type(),
                                                                                            inventDimLocal,
                                                                                            defaultingArguments);

        isProductDimensionModified = inventDistinctProductOrderDefaultingController.isProductDimensionModified();

        this.InventDimId    = InventDim::findOrCreate(inventDimLocal).InventDimId;

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            if (inventDistinctProductOrderDefaultingController.isSiteModified())
            {
                this.inventSiteChanged_BR();
            }
        }
        // </GBR>

        if (inventDistinctProductOrderDefaultingController.isProductDimensionOrSiteModified())
        {
            if (isProductDimensionModified)
            {
                this.ExternalItemId = '';
                this.initFromProductDimensions(inventDimLocal);
            }

            if (EcoResProductUnitConverter::hasRequiredProductDimensionsForUnitConversion(this.ItemId, inventDimLocal))
            {
                PurchLine::modifyPurchQty(this, inventDimLocal, _resetPrice);
            }
        }

        isSiteOrWarehouseModified = _dimFieldIdSet.in(fieldNum(InventDim, InventLocationId)) || _dimFieldIdSet.in(fieldNum(InventDim, InventSiteId));
        
        if (this.shouldModifyWarehouseLocation(_dimFieldIdSet))
        {
            this.modifyWMSLocation(inventDimLocal, true, InventDirection::Receipt, InventDirection::Receipt);
        }

        if (this.InventDimId != oldInventDimId && isSiteOrWarehouseModified)
        {
            this.DefaultDimension = this.copyDimension(this.DefaultDimension);
        }

        if (_resetPrice
            && this.LineDeliveryType != LineDeliveryType::DeliveryLine
            && InventDim::doesFieldSetContainActiveEnabledPurchPriceDisc(_dimFieldIdSet, inventDimGroupSetup)
            && EcoResProductUnitConverter::hasRequiredProductDimensionsForUnitConversion(this.ItemId, inventDimLocal))
        {
            this.salesPurchLineInterface().resetPriceAgreement();
            this.setPriceDisc(inventDimLocal);
        }

        // ONLY if Purchase Order (header) is linked to agreement
        // call a server method to handle auto-link to agreement line:
        matchingPurchAgreementHeaderRecId = this.purchTable().MatchingAgreement;
        if (matchingPurchAgreementHeaderRecId)
        {
            this.salesPurchLineInterface().autoMatchAgreementLine(matchingPurchAgreementHeaderRecId);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyWMSLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies an <c>InventDim</c> record with WMS values.
    /// </summary>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record to modify.
    /// </param>
    /// <param name="_resetWMSLocationId">
    /// A Boolean value that indicates whether the <c>wMSLocationId</c> field is to be reset even when the
    /// <c>LocationId</c> field is unchanged.
    /// </param>
    /// <param name="_defaultInventDirection">
    ///    Indicates whether it is per default an issue or a receipt transaction. Obsolete.
    /// </param>
    /// <param name="_positiveInventDirection">
    ///    Indicates whether it is an issue or a receipt transaction for a positive quantity ordered amount. Obsolete.
    /// </param>
    /// <remarks>
    /// When changing the warehouse on a purchase order line, the location is updated with default WMS
    /// values for items where the attached dimension group has the location set to active.
    /// </remarks>
    [Hookable(false), Wrappable(false)]
    public void modifyWMSLocation(
        InventDim           _inventDim,
        boolean             _resetWMSLocationId,
        InventDirection     _defaultInventDirection,
        InventDirection     _positiveInventDirection)
    {
        this.salesPurchLineInterface().modifyWMSLocation(_inventDim, _resetWMSLocationId, this.defaultInventDirection(), this.positiveInventDirection());
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventDirection</Name>
				<Source><![CDATA[
    private InventDirection defaultInventDirection()
    {
        return this.type().defaultInventDirection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>positiveInventDirection</Name>
				<Source><![CDATA[
    private InventDirection positiveInventDirection()
    {
        return this.type().positiveInventDirection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleType</Name>
				<Source><![CDATA[
    ModuleInventPurchSales moduleType()
    {
        return ModuleInventPurchSales::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeCovPlanned</Name>
				<Source><![CDATA[
    boolean mustBeCovPlanned()
    {
        return (this.RemainPurchPhysical ||  this.RemainPurchFinancial);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateItemRequirement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an item requirement should by created for the purchase order line.
    /// </summary>
    /// <returns>true if an item requirement should be created for the purchase order line; otherwise false.</returns>
    protected boolean mustCreateItemRequirement()
    {
        return (this.ProjId
                && (!this.InventRefId || (this.InventRefId && !salesLine::findInventTransId(this.InventRefTransId).RecId))
                && ProjParameters::find().CreateItemReqForPO == NoYes::Yes
                && ((ProjEnableItemRequirementForNonStockedProductFeature::isEnabled() && !this.isCategoryBased()) || this.isStocked()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLineNum</Name>
				<Source><![CDATA[
    [SysObsolete('Method is no longer supported', false, 30\11\2017)]
    public LineNum nextLineNum()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCFOPChange_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates tax information and the fiscal document texts when the CFOP is changed.
    /// </summary>
    /// <param name="_modifiedField">
    /// The ID of the field that was modified.
    /// </param>
    public void onCFOPChange_BR(FieldId _modifiedField = fieldNum(PurchLine, cfopTable_BR))
    {
        if (this.cfopTable_BR)
        {
            this.setTaxGroupAndTaxItemGroupFields_BR();
            this.onTaxChange_BR(_modifiedField);
        }

        this.type().updateFiscalDocumentText_BR(FiscalDocumentTextType_BR::CFOP);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDeliveryPostalAddressChange_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates CFOP information when the delivery address is changed to a different state or country.
    /// </summary>
    public void onDeliveryPostalAddressChange_BR()
    {
        CFOPValidation_BR       cfopValidation;
        LogisticsPostalAddress  currentAddress, originAddress;

        currentAddress      = LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress);
        originAddress       = LogisticsPostalAddress::findRecId(this.orig().DeliveryPostalAddress);

        if (currentAddress.State != originAddress.State || currentAddress.CountryRegionId != originAddress.CountryRegionId)
        {
            cfopValidation      = CFOPValidation_BR::construct(this);
            this.cfopTable_BR   = cfopValidation.getDefaultCFOP();

            this.onCFOPChange_BR(fieldNum(PurchLine, DeliveryPostalAddress));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTaxChange_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the current purchase order line amount when tax is changed.
    /// </summary>
    /// <param name="_modifiedField">
    /// The ID of the field that was modified.
    /// </param>
    public void onTaxChange_BR(FieldId _modifiedField)
    {
        this.LineAmount = this.calcLineAmountForcedInteraction(fieldNum(PurchLine, DeliveryPostalAddress));
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderAccount</Name>
				<Source><![CDATA[
    CustVendAC orderAccount()
    {
        return this.VendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ordered</Name>
				<Source><![CDATA[
    display InventQtyOrdered ordered()
    {
        InventQtyOrdered qtyOrdered;
        InventTransIdSum inventTransIdSum;

        if (!this.InventTransId && !this.isStocked())
        {
            return 0;
        }

        if (this.purchTable().DocumentState == VersioningDocumentState::Draft)
        {
            inventTransIdSum = InventTransIdSum::newTransOriginId(this.inventTransOriginId());
            qtyOrdered = this.RemainInventPhysical - (inventTransIdSum.arrived() + inventTransIdSum.registered());
        }
        else
        {
            qtyOrdered = InventTransIdSumSingleStatus::qtyOrdered(this.inventTransOriginId());
        }

        return qtyOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderedInPurchUnit</Name>
				<Source><![CDATA[
    display PurchQtyOrdered orderedInPurchUnit()
    {
        InventQtyOrdered inventQtyOrdered;
        PurchQtyOrdered  purchQtyOrdered;

        if (this.isStocked())
        {
            inventQtyOrdered = this.ordered();
            if (inventQtyOrdered)
            {
                purchQtyOrdered = this.unitConvertInvent2Purch(inventQtyOrdered);
            }
        }
        else
        {
            purchQtyOrdered = this.RemainPurchPhysical - this.registeredInPurchUnit();
        }

        return purchQtyOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overDeliveryPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the allowed over-delivery percent.
    /// </summary>
    /// <returns>
    /// The over-delivery percent that is defined on the purchase order line if over-delivery is allowed;
    /// otherwise, 0.
    /// </returns>
    public Percent overDeliveryPct()
    {
        if (!PurchParameters::find().OverDelivery)
        {
            return 0;
        }

        return this.OverDeliveryPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packExtensionTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs an extension table record to the container field <C>PackedExtensions</C>.
    /// </summary>
    /// <param name="_extensionTable">
    /// The extension table record.
    /// </param>
    /// <returns>
    /// true if success; otherwise false.
    /// </returns>
    public boolean packExtensionTable(SysExtensionSerializerExtensionMap _extensionTable)
    {
        boolean ret = false;

        if (_extensionTable.SysExtensionSerializerExtensionMap::baseTableId() == this.TableId)
        {
            ret = this.SysExtensionSerializerMap::packExtensionTable(_extensionTable);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packPurchLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs an extension table record to the container field <C>PackedExtensions</C>.
    /// </summary>
    /// <param name="_purchLine_IN">
    /// The extension table record.
    /// </param>
    public void packPurchLine_IN(PurchLine_IN _purchLine_IN)
    {
        _purchLine_IN.PurchLine = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_purchLine_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packPurchLine_Intrastat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs <c>PurchLine_Intrastat</c> extension table record.
    /// </summary>
    /// <param name="_purchLine_Intrastat">
    /// The extension table record to pack.
    /// </param>
    public void packPurchLine_Intrastat(PurchLine_Intrastat _purchLine_Intrastat)
    {
        _purchLine_Intrastat.PurchLine = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_purchLine_Intrastat);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packPurchLine_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs an extension table record to the container field <C>PackedExtensions</C>.
    /// </summary>
    /// <param name="_purchLine_W">
    /// The extension table record.
    /// </param>
    public void packPurchLine_W(PurchLine_W _purchLine_W)
    {
        _purchLine_W.PurchLine = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_purchLine_W);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRateDate</Name>
				<Source><![CDATA[
    public AccountingDate parmExchangeRateDate()
    {
        return this.purchTable().parmExchangeRateDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceDocumentLine</Name>
				<Source><![CDATA[
    public SourceDocumentLine parmParentSourceDocumentLine()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumName</Name>
				<Source><![CDATA[
    public EnumName parmSourceDocLineTypeEnumName()
    {
        return enumStr(SourceDocumentLine_ProductOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumValue</Name>
				<Source><![CDATA[
    public SourceDocumentTypeEnumValue parmSourceDocLineTypeEnumValue()
    {
        return SourceDocumentLine_ProductOrder::PurchaseOrderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeader</Name>
				<Source><![CDATA[
    public SourceDocumentHeader parmSourceDocumentHeader()
    {
        return SourceDocumentHeader::find(this.purchTable().SourceDocumentHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsAdvancedPriceInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the advanced pricing extension information record for this <c>PurchLine</c>.
    /// </summary>
    /// <param name="_forUpdate">
    ///     Determines whether to select the record for updating; optional.
    /// </param>
    /// <returns>
    ///     The <c>PDSAdvancedPriceInfo</c> related to this purchase order line.
    /// </returns>
    /// <remarks>
    ///     This will always return an empty buffer if the line does not have an advanced calculation ID.
    ///     Otherwise, if the <c>PDSAdvancedPriceInfo</c> record does not yet exist for the line and the
    ///     purchase order line has been written to the database (it has a <c>RecId</c>) then this will
    ///     create a new <c>PDSAdvancedPriceInfo</c> record automatically.
    /// </remarks>
    public PDSAdvancedPriceInfo pdsAdvancedPriceInfo(boolean _forUpdate = false)
    {
        PDSAdvancedPriceInfo    advancedPriceInfo;

        if (this.RecId && this.pdsCalculationId)
        {
            advancedPriceInfo = PDSAdvancedPriceInfo::findByPurchLineRecId(this.RecId, _forUpdate);
            if (!advancedPriceInfo)
            {
                ttsbegin;
                advancedPriceInfo.PurchLineRefRecId = this.RecId;
                advancedPriceInfo.insert();
                ttscommit;

                if (_forUpdate)
                {
                    advancedPriceInfo = PDSAdvancedPriceInfo::findByPurchLineRecId(this.RecId, _forUpdate);
                }
            }
        }

        return advancedPriceInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCancelRemainWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets CW item RemainInvnetPhysical to zero if
    /// PdsCWRemainInventPhysical is zero.
    /// </summary>
    /// <remarks>
    /// This is meant to allow for variance in actual weight.
    /// If CW quantity is set to zero, and there is still some actual weight remaining,
    /// this method will cancel it out.
    /// <syntax>
    /// public void pdsCancelRemainWeight()
    /// </syntax>
    /// </remarks>
    public void pdsCancelRemainWeight()
    {
        if (PdsGlobal::pdsIsCWItem(this.ItemId)
            && this.RemainInventPhysical != 0
            && this.PdsCWRemainInventPhysical == 0)
        {
            this.RemainInventPhysical = 0;
            this.RemainPurchPhysical = 0;
            this.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCheckApprovedVendorList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method validates if the purchase line item has valid approved vendor
    /// list entry if controlled by AVL functionality.
    /// </summary>
    /// <returns>Returns True / false</returns>
    /// <remarks>
    /// <syntax>
    /// private  Boolean pdsCheckApprovedVendorList()
    /// </syntax>
    /// </remarks>
    public boolean pdsCheckApprovedVendorList()
    {
        PdsApprovedVendorListCheck avlCheck;
        boolean ret = true;

        avlCheck = this.type().pdsApprovedVendorListCheck();
        ret = avlCheck.validateCheck();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWArrived</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates and returns the CW quantity arrived for the purchase order line.
    /// </summary>
    /// <returns>
    ///     The catch weight arrived quantity.
    /// </returns>
    public display PdsCWArrived pdsCWArrived()
    {
        if (this.InventTransId)
        {
            return InventTransIdSumSingleStatus::pdsCWQtyArrived(this.inventTransOriginId());
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcPendingMatchedQtyInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates a sum of the <c>PdsCWInventNow</c> quantity for invoice lines connected to this <c>PurchLine</c> table
    ///    record, which are matched to a packing slip.
    /// </summary>
    /// <param name="_pendingOnly">
    ///    A Boolean value which determines whether only pending invoice lines are considered connected. True,
    ///    if only pending invoice lines are considered connected; otherwise, false; optional.
    /// </param>
    /// <param name="_openEndedOnly">
    ///    A Boolean value which determines whether only sub lines without a relationship to a packing slip should be considered.
    ///    True, if only sub lines without a relationship to a packing slip are considered in the calculation; otherwise, false; optional.
    /// </param>
    /// <returns>
    ///    The calculated <c>PdsCWInventNow</c> quantity.
    /// </returns>
    /// <remarks>
    ///    Records from the <c>VendInvoiceInfoSubLine</c> table are used in the calculation.
    /// </remarks>
    public PdsCWInventQty pdsCWCalcPendingMatchedQtyInvent(
        boolean _pendingOnly = true,
        boolean _openEndedOnly = false)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceInfoSubLine vendInvoiceInfoSubLine;

        // sum for all saved invoice sub lines connected to this PO line

        select sum(PdsCWInventNow) from vendInvoiceInfoSubLine
            exists join vendInvoiceInfoLine
                where
                    vendInvoiceInfoLine.RecId == vendInvoiceInfoSubLine.LineRefRecId &&
                    vendInvoiceInfoLine.InventTransId == this.InventTransId &&
                    (!_openEndedOnly || vendInvoiceInfoSubLine.JournalRefRecId == 0)
            exists join vendInvoiceInfoTable
                where
                    vendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId &&
                    vendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId &&
                    (vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Waiting ||
                        vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::ContainErrors) &&
                    (!_pendingOnly || vendInvoiceInfoTable.VendInvoiceSaveStatus == VendInvoiceSaveStatus::Pending);

        return vendInvoiceInfoSubLine.PdsCWInventNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcPendingQtyPurch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a sum of ReceiveNow quantity for all pending invoice
    /// lines connected to this <c>PurchLine</c> table record.
    /// </summary>
    /// <returns>
    /// The calculated ReceiveNow quantity.
    /// </returns>
    /// <remarks>
    /// Records from both the <c>PurchParmLine</c> and the
    /// <c>VendInvoiceInfoLine</c> tables are used in the calculation.
    /// </remarks>
    public PdsCWInventQty pdsCWCalcPendingQtyPurch()
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceInfoTable vendInvoiceInfoTable;

        // sum for all saved invoice lines connected to this PO line
        select sum(PdsCWReceiveNow) from vendInvoiceInfoLine
            where   vendInvoiceInfoLine.InventTransId == this.InventTransId
            exists join vendInvoiceInfoTable
                where   vendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId
                    &&  vendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId
                    && (vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Waiting
                    ||  vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::ContainErrors)
                    &&  vendInvoiceInfoTable.VendInvoiceSaveStatus == VendInvoiceSaveStatus::Pending;

        return vendInvoiceInfoLine.PdsCWReceiveNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcPendingQtyPurchDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the sum of PdsCWInventNow quantities for all pending
    /// invoice lines connected to this <c>PurchLine</c> table record.
    /// </summary>
    /// <returns>
    /// Calculated PdsCWInventNow quantity.
    /// </returns>
    /// <remarks>
    /// Records from both <c>PurchParmLine</c> and <c>VendInvoiceInfoLine</c>
    /// tables are used in the calculation.
    /// </remarks>
    public display PdsCWPendingInvoice pdsCWCalcPendingQtyPurchDisplay()
    {
        return this.pdsCWCalcPendingQtyPurch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWInvoicedInTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the CW quantity Invoiced in total for the purchase order line.
    /// </summary>
    /// <returns>CW quantity invoiced in total for purchase order line.</returns>
    /// <remarks>
    /// <syntax>
    /// public PdsCWInvoiced PdsCWInvoicedInTotal()
    /// </syntax>
    /// </remarks>
    public display PdsCWInvoiced pdsCWInvoicedInTotal()
    {
        PdsCWInvoiced   pdsCWInvoiced = 0;

        //Check if user has security access
        if (hasFieldAccess(tableNum(PurchLine),
                           fieldNum(PurchLine, InventTransId),
                           AccessType::View))
        {
            if (PdsGlobal::pdsIsCWItem(this.ItemId) &&
                this.InventTransId)
            {
                pdsCWInvoiced = this.type().pdsCWInvoicedInTotal();
            }
        }
        return pdsCWInvoiced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the CW quantity ordered for the purchase order line.
    /// </summary>
    /// <returns>CW quantity Ordered</returns>
    /// <remarks>
    /// <syntax>
    /// public PdsCWOrdered PdsCWOrdered()
    /// </syntax>
    /// </remarks>
    public display PdsCWOrdered pdsCWOrdered()
    {
        PdsCWOrdered        pdsCWOrdered = 0;
        InventTransIdSum    inventTransIdSum;

        //Check if user has security access
        if (hasFieldAccess(tableNum(InventSum),
                           fieldNum(InventSum, PdsCWOrdered),
                           AccessType::View))
        {
            if (this.InventTransId)
            {
                inventTransIdSum = InventTransIdSum::newTransOriginId(
                InventTransOriginPurchLine::findInventTransOriginId(
                    this.DataAreaId, this.InventTransId));

                pdsCWOrdered = inventTransIdSum.pdsCWOrdered();
            }
        }

        return pdsCWOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWPurchReceivedNowConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts CW quantity to standard quantity or standard quantity to
    /// CW quantity for the purchase order line.
    /// </summary>
    /// <param name="_fromCW">If true, converts from CW
    /// quantity and sets the PurchReceiveNow field.  If false the opposite is done.
    /// </param>
    public void pdsCWPurchReceivedNowConversion(boolean _fromCW = false)
    {
        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            if (_fromCW)
            {
                this.PurchReceivedNow = PdsCatchWeight::inventQty(
                                            this.ItemId,
                                            this.PdsCWInventReceivedNow,
                                            this.PurchUnit);
            }
            else if (!this.PdsCWInventReceivedNow)
            {
                this.PdsCWInventReceivedNow = PdsCatchWeight::cwQty(
                                                this.ItemId,
                                                this.InventReceivedNow);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the CW quantity to the standard quantity and sets the
    /// purchLine.PurchQty to the converted value.
    /// </summary>
    /// <remarks>
    /// <syntax>
    /// private void pdsCWQtyConversion()
    /// </syntax>
    /// </remarks>
    public void pdsCWQtyConversion()
    {
        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            this.PurchQty = PdsCatchWeight::inventQty(
                                this.ItemId,
                                this.PdsCWQty,
                                this.PurchUnit);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the catch weight quantity entered is valid.
    /// </summary>
    /// <returns>
    /// true if CW quantity is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Checks that catch weight quantity is not negative, and that it is within the range set
    /// up for the item.
    /// </remarks>
    public boolean pdsCWQtyValidation()
    {
        boolean ret = true;
        boolean isNegative = false;

        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            if (this.purchTable().PurchaseType == PurchaseType::ReturnItem
                || this.PdsCWQty < 0)
            {
                isNegative = true;
            }

            if (!this.PdsCWQty
                && !isNegative)
            {
                ret = checkFailed("@PDS113");
            }

            if (ret
                && this.PdsCWInventReceivedNow
                && !PdsCatchWeightItem::pdsCWIsValidQty(this.ItemId,
                                                    this.InventReceivedNow,
                                                    this.PdsCWInventReceivedNow))
            {
                ret = checkFailed(PdsCatchWeightItem::pdsCWErrorMsgForUnit(
                                                    this.ItemId,
                                                    this.PdsCWInventReceivedNow,
                                                    this.PurchUnit));
            }

            if (ret
                // <GBR>
                && (!BrazilParameters::isEnabled() || this.purchTable().createInventTrans_BR())
                // <GBR>
                && !PdsCatchWeightItem::pdsCWIsValidQty(this.ItemId,
                                                        this.QtyOrdered,
                                                        this.PdsCWQty))
            {
                ret = checkFailed(PdsCatchWeightItem::pdsCWErrorMsgForUnit(
                                                        this.ItemId,
                                                        this.PdsCWQty,
                                                        this.PurchUnit));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReceivedInTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the CW quantity received in total for
    /// the purchase order line.
    /// </summary>
    /// <returns>CW quantity received in total.</returns>
    /// <remarks>
    /// <syntax>
    /// public PdsCWQtyReceived PdsCWReceivedInTotal()
    /// </syntax>
    /// </remarks>
    public display PdsCWQtyReceived pdsCWReceivedInTotal()
    {
        PdsCWQtyReceived pdsCWQtyReceived = 0;

        //Check if user has security access
        if (hasFieldAccess(tableNum(VendInvoiceTrans),
                           fieldNum(VendInvoiceTrans, PdsCWQtyPhysical),
                           AccessType::View)
            && hasFieldAccess(tableNum(VendPackingSlipTrans),
                              fieldNum(VendPackingSlipTrans, PdsCWQty),
                              AccessType::View))
        {
            if (PdsGlobal::pdsIsCWItem(this.ItemId)
                && this.InventTransId)
            {
                pdsCWQtyReceived = this.type().pdsCWReceivedInTotal();
            }
        }

        return pdsCWQtyReceived;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRegistered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the CW quantity registered for the purchase order line.
    /// </summary>
    /// <returns>CW quantity registered.</returns>
    /// <remarks>
    /// <syntax>
    /// public PdsCWRegistered PdsCWRegistered()
    /// </syntax>
    /// </remarks>
    public display PdsCWRegistered pdsCWRegistered()
    {
        PdsCWRegistered     pdsCWRegistered = 0;
        InventTransIdSum    inventTransIdSum;

        //Check if user has security access
        if (hasFieldAccess(tableNum(InventSum),
                              fieldNum(InventSum, PdsCWRegistered),
                              AccessType::View))
        {
            if (this.InventTransId)
            {
                inventTransIdSum = InventTransIdSum::newTransOriginId(
                InventTransOriginPurchLine::findInventTransOriginId(
                    this.DataAreaId, this.InventTransId));

                pdsCWRegistered = inventTransIdSum.pdsCWRegistered();
            }
        }

        return pdsCWRegistered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight unit for the item.
    /// </summary>
    /// <returns>
    /// The catch weight unit for the item.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsVendBatchInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>PdsVendBatchInfo</c> related record for the <c>PurchLine</c> record.
    /// </summary>
    /// <returns>
    /// The <c>PdsVendBatchInfo</c> record.
    /// </returns>
    public PdsVendBatchInfo pdsVendBatchInfo()
    {
        return PdsVendBatchInfo::findBySourceRecId(PdsVendBatchInfoSourceRefType::PurchaseOrderLine, this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PISCOFINSReceivableLongTerm_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>PISCONFINS</c> asset is receivable long term.
    /// </summary>
    /// <returns>
    /// True if the <c>PISCOFINS</c> asset is receivable long term; otherwise, false.
    /// </returns>
    public NoYes PISCOFINSReceivableLongTerm_BR()
    {
        if (!BrazilParameters::isEnabled() || (!this.AssetId && !this.AssetGroup))
        {
            return false;
        }

        if (!this.CreateFixedAsset)
        {
            return AssetTable::find(this.AssetId).PISCOFINSReceivableLongTerm_BR;
        }
        else
        {
            return AssetGroup::find(this.AssetGroup).PISCOFINSReceivableLongTerm_BR;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the date for which to calculate the price according to the <c>PriceDateType</c> field.
    /// </summary>
    /// <returns>
    /// The date for which to calculate the price.
    /// </returns>
    /// <remarks>
    /// The <c>PriceDateType</c> field can be set up to <c>Today</c> or <c>DeliveryDate</c> as a price date.
    /// </remarks>
    TransDate priceDate()
    {
        PurchParameters purchParameters;
        PurchLine_W     purchLine_W;
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            purchLine_W = this.purchLine_W();
            if (purchLine_W.PriceAgreementDate_RU)
            {
                return purchLine_W.PriceAgreementDate_RU;
            }
        }

        purchParameters = PurchParameters::find();

        switch (purchParameters.PriceDateType)
        {
            case PurchPriceDateType::DeliveryDate:
                return this.DeliveryDate;

            case PurchPriceDateType::Today:
                return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                this.retrievePriceDateDelegate(this, purchParameters.PriceDateType, result);

                if (result.hasResult())
                {
                    return result.result();
                }
                else
                {
                    throw error(strFmt("@SCM:PurchPriceDateNotFound", purchParameters.PriceDateType));
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrievePriceDateDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for providing the date for price calculations.
    /// </summary>
    /// <param name = "_purchLine">A <c>PurchLine</c> value.</param>
    /// <param name = "_purchPriceDateType">A <c>PurchPriceDateType</c> value.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> to provide the result.</param>
    delegate void retrievePriceDateDelegate(
        PurchLine                   _purchLine,
        PurchPriceDateType          _purchPriceDateType,
        EventHandlerResult          _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceGroupId</Name>
				<Source><![CDATA[
    PriceGroupId priceGroupId()
    {
        return this.purchTable().PriceGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projIdModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the purchase line based on changes in the project ID unit field.
    /// </summary>
    /// <remarks>
    /// Called from the <c>modifiedField</c> method.
    /// </remarks>
    public void projIdModified()
    {
        if (this.RecId && !this.refreshAgreementLink(new AgreementAutolinkHelperPurchLine()))
        {
            this.unLinkAgreementLinePrompt(fieldNum(PurchLine, ProjId));
        }
        this.psaRetainScheduleId = ProjPWPVendorRetentionSetting::findByProjVendor(this.ProjId, this.purchTable().OrderAccount).RuleId;
        this.ProjLinePropertyId = ProjLinePropertySetup::findLinePropertyId(this.ProjId, this.ProjCategoryId);
        this.setProjSalesPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projQueryValueInventTransId</Name>
				<Source><![CDATA[
    str projQueryValueInventTransId()
    {
        return ProjItemTrans::projQueryValueInventTransId(this.InventTransId, this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTable</Name>
				<Source><![CDATA[
    ProjTable projTable(
        ProjId     projId = this.ProjId,
        boolean    update = false)
    {
        return ProjTable::find(projId, update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>psAeditActivityPurpose</Name>
				<Source><![CDATA[
    public edit smmActivityPurpose psAeditActivityPurpose(boolean _set, ProjActivityNumber _activityNumber)
    {
        smmActivities smmActivities;
        str name;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            if (_set)
            {
                this.ActivityNumber = _activityNumber;
                this.initFromProjActivity(ProjActivity::find(_activityNumber));
            }
            else
            {
                smmActivities = smmActivities::find(this.ActivityNumber);
                name = smmActivities.Purpose;
            }
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaGetPWPSetting</Name>
				<Source><![CDATA[
    public boolean psaGetPWPSetting()
    {
        boolean     isPwpSetting;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            if (ProjPWPVendorRetentionSetting::findByProjVendor(this.ProjId, this.purchTable().OrderAccount).PwpThresholdPercent > 0)
            {
                isPwpSetting = true;
            }
            else
            {
                isPwpSetting = false;
            }
        }

        return isPwpSetting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaInitFromForecastSales</Name>
				<Source><![CDATA[
    // Description    : Initialize a purchase line from a forecast sales line
    //                  Based on initFromPurchLine
    // Parameters     : _ForecastSales: Record to initialize from
    //                  _CopyPrecisely: Copy line precisely
    //                  _CopyPriceDisc: Initialize price and discount
    //                  _CopyQty: Initialize quantity
    //                  _Qty: Quantity to initialize from
    // Return value   : None
    public void psaInitFromForecastSales(ForecastSales    _forecastSales,
                                   boolean          _copyPrecisely = true,
                                   boolean          _copyPriceDisc = true,
                                   boolean          _copyQty       = true,
                                   Qty              _qty           = _forecastSales.SalesQty)
    {
        InventDim   inventDim;

        if (!isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            return;
        }

        this.ItemId             = _forecastSales.ItemId;
        this.initFromInventTable(this.inventTable());

        if (_copyQty)
        {
            this.InventDimId        = _forecastSales.InventDimId;
            this.PurchQty           = _qty;
            this.PurchUnit          = _forecastSales.SalesUnitId;
            this.QtyOrdered         = _forecastSales.SalesQty == _qty ? _forecastSales.InventQty : this.calcQtyOrdered();
        }
        else
        {
            inventDim               = this.inventDim();
            EcoResProductDimGroupSetup::copyProductDimensionsForItem(this.ItemId,_forecastSales.inventDim(),inventDim);
            this.InventDimId        = InventDim::findOrCreate(inventDim).InventDimId;
        }

        if (_copyPriceDisc)
        {
            this.PurchPrice         = _forecastSales.CostPrice;
            this.ProjSalesPrice     = _forecastSales.SalesPrice;
            this.PriceUnit          = _forecastSales.PriceUnit;
            this.LinePercent        = _forecastSales.DiscPercent;
            this.LineDisc           = _forecastSales.DiscAmount;
            this.PurchMarkup        = _forecastSales.SalesMarkup;
            this.LineAmount         = _forecastSales.Amount;
        }

        if (_copyPrecisely)
        {
            this.InventDimId        = _forecastSales.InventDimId;
            this.Name               = _forecastSales.itemName();
            if (!Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Purchase))
            {
                this.TaxItemGroup   = _forecastSales.TaxItemGroupId;
            }
            this.DefaultDimension   = _forecastSales.DefaultDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaInvoicedAmount</Name>
				<Source><![CDATA[
    public AmountCur psaInvoicedAmount()
    {
        AmountCur   rInvoiceAmount = 0;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && this.InventTransId)
        {
            rInvoiceAmount = (select sum(LineAmount) from vendInvoiceTrans
                            where vendInvoiceTrans.InventTransId == this.InventTransId).LineAmount;
        }

        return rInvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaInvoicedQty</Name>
				<Source><![CDATA[
    public PurchQty psaInvoicedQty()
    {
        PurchQty   invoicedQty = 0.00;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && this.InventTransId)
        {
            invoicedQty = (select sum(Qty) from vendInvoiceTrans
                            where vendInvoiceTrans.InventTransId == this.InventTransId).Qty;
        }

        return invoicedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaPwpPercent</Name>
				<Source><![CDATA[
    public display PSAPercent psaPwpPercent(PurchLine _purchLine)
    {
        return ProjPWPVendorRetentionSetting::getPwpThresholdPercent(_purchLine.ProjId, _purchLine.IsPwp, _purchLine.VendAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>PurchLine_IN</c> table.
    /// </summary>
    /// <returns>
    /// The table <c>PurchLine_IN</c> associated with the current record.
    /// </returns>
    public PurchLine_IN purchLine_IN()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(PurchLine_IN));
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLine_Intrastat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves <c>PurchLine_Intrastat</c> extension table record.
    /// </summary>
    /// <returns>
    /// The extension table record related to current record.
    /// </returns>
    public PurchLine_Intrastat purchLine_Intrastat()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(PurchLine_Intrastat));
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLine_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>PurchLine_W</c> table.
    /// </summary>
    /// <returns>
    /// The table <c>PurchLine_W</c> associated with the current record.
    /// </returns>
    public PurchLine_W purchLine_W()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(PurchLine_W));
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchQtyModifiedInteraction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs code with regard to changes in the purchase line when purchase quantity is changed with
    /// user interaction if associated link to agreement line becomes invalid.
    /// </summary>
    /// <param name="_inventDim">
    /// The inventory dimensions of the changed line.
    /// </param>
    /// <remarks>
    /// Prompt appears if linked purchase agreement line is set to enforce max quantity.
    /// </remarks>
    public void purchQtyModifiedInteraction(InventDim _inventDim = this.inventDim())
    {
        boolean     isAgreementLinkRefreshed;

        AmountCur   localOrigLineAmount = this.LineAmount; //This variable is needed for the uncommitted scenario.

        if (!this.isTmp() && this.purchTable().MatchingAgreement)
        {
            //The impact on line amount should be included in the agreement link validation.
            this.LineAmount      = this.calcLineAmountForced(this.PurchQty);
            isAgreementLinkRefreshed = this.refreshAgreementLink(new AgreementAutolinkHelperPurchLine());
            this.LineAmount      = localOrigLineAmount;

            if (isAgreementLinkRefreshed)
            {
                PurchLine::modifyPurchQty(this, _inventDim);
            }
            else
            {
                if (this.unLinkAgreementLinePrompt(fieldNum(PurchLine, PurchQty)))
                {
                    if (this.LineDeliveryType != LineDeliveryType::DeliveryLine
                        && this.doReCalcPricesFromBasePrompt())
                    {
                        PurchLine::modifyPurchQty(this, _inventDim);
                    }
                    else
                    {
                        PurchLine::modifyPurchQty(this, _inventDim, false);
                    }
                }
                else
                {
                    this.PurchQty = this.orig().PurchQty;
                }
            }
        }
        else
        {
            PurchLine::modifyPurchQty(this, _inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchReceivedNowAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>ReceivedNow</c> field can be edited.
    /// </summary>
    /// <returns>
    /// false for order lines with multiple deliveries; otherwise, true.
    /// </returns>
    boolean purchReceivedNowAllowEdit()
    {
        if (this.PurchStatus == PurchStatus::Canceled)
        {
            return false;
        }

        if (this.DeliveryType == TradeLineDlvType::DropShip
            && PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            return false;
        }
        else
        {
            return this.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchTable</Name>
				<Source><![CDATA[
    PurchTable purchTable(boolean  update = false)
    {
        return PurchTable::find(this.PurchId, update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchUnitModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the purchase line based on changes in the <c>PurchUnit</c> field.
    /// </summary>
    /// <remarks>
    /// This method is called from the <c>modifiedField</c> method.
    /// </remarks>
    public void purchUnitModified()
    {
        boolean modifyPurchUnit = true;
        InventItemBarcode   inventItemBarcode = InventItemBarcode::findPurchBarcodeDimension(this.ItemId, this.inventDim(), '', this.PurchUnit);

        if (this.RecId && this.purchTable().MatchingAgreement && !this.refreshAgreementLink(new AgreementAutolinkHelperPurchLine()))
        {
            if (!this.unLinkAgreementLinePrompt(fieldNum(PurchLine, PurchUnit)))
            {
                modifyPurchUnit = false;
            }
        }

        if (modifyPurchUnit
            && EcoResProductUnitConverter::hasRequiredProductDimensionsForUnitConversion(this.ItemId, this.inventDim()))
        {
            InventMovement::bufferSetTransQtyUnit(this);
            this.setInventReceivedNow();
        }

        if (this.ProjId && this.PurchUnit && !this.ItemId && !this.ProjSalesUnitId)
        {
            this.ProjSalesUnitId = this.PurchUnit;
        }

        if (inventItemBarcode.RecId)
        {
            this.BarCode        = inventItemBarcode.ItemBarCode;
            this.BarCodeType    = inventItemBarcode.BarcodeSetupId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyMarked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the amount of the inventory items marked for the purchase order line.
    /// </summary>
    /// <returns>
    ///    The amount of inventory marked for the inventory transaction related to the purchase order line.
    /// </returns>
    public InventQtyMarked qtyMarked()
    {
        InventTransOriginId     inventTransOriginId;
        InventQtyMarked         inventQtyMarked;

        if (this.isStocked())
        {
            inventTransOriginId = this.inventTransOriginId();
            if (inventTransOriginId)
            {
                inventQtyMarked = InventTransOrigin::qtyMarked(inventTransOriginId);
            }
        }

        return inventQtyMarked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qualityOrderStatusDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the status of the associated quality orders.
    /// </summary>
    /// <returns>
    /// The current quality order status.
    /// </returns>
    display InventTestOrderStatusDisplay qualityOrderStatusDisplay()
    {
        return InventQualityOrderTable::referenceDocumentStatusDisplay(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>quantityToDistribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the quantity to be distributed to the <c>AccountingDistribution</c> table.
    /// </summary>
    /// <returns>
    /// Returns the quantity to be distributed to the <c>AccountingDistribution</c> table.
    /// </returns>
    /// <remarks>
    /// The <c>PurchQty</c> value is not used. Instead, the sum of the quantity invoiced plus the quantity
    /// that remains to be invoiced, plus the quantity that remains to be delivered is used.
    /// </remarks>
    public PurchQty quantityToDistribute()
    {
        return this.PurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateDeliveryScheduleOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates the <c>Quantity</c> field as a sum of the <c>Quantity</c> fields on all the delivery
    /// lines and delivery dates and as a minimum of corresponding dates on delivery lines.
    /// </summary>
    /// <remarks>
    /// If the <c>Quantity</c> field has to be changed and the line does not have an agreement reference,
    /// it resets the commercial attributes by looking for trade agreements.
    /// </remarks>
    public void recalculateDeliveryScheduleOrderLine()
    {
        this.type().recalculateDeliveryScheduleOrderLine(this.extensionOrig());
    }

]]></Source>
			</Method>
			<Method>
				<Name>receivedInTotal</Name>
				<Source><![CDATA[
    display PurchQty   receivedInTotal()
    {
        if (!this.InventTransId)
        {
            return 0;
        }

        return this.receivedInTotalServer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>receivedInTotalPrice</Name>
				<Source><![CDATA[
    display AmountCur receivedInTotalPrice()
    {
        AmountCur   receivedAmount;

        if (this.ItemId)
        {
            receivedAmount   = (select sum(LineAmount) from vendInvoiceTrans
                                    index hint TransIdIdx
                                    where vendInvoiceTrans.InventTransId == this.InventTransId).LineAmount;

            receivedAmount  += (this.receivedOnPackingSlipInTotal() * InventTable::findCostPcsPrice(this.ItemId, this.InventDimId));
        }

        return receivedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receivedInTotalServer</Name>
				<Source><![CDATA[
    PurchQty receivedInTotalServer()
    {
        return this.type().receivedInTotal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>receivedInventInTotal</Name>
				<Source><![CDATA[
    display InventQty receivedInventInTotal()
    {
        InventTransIdSum    inventTransIdSum;
        InventQty           inventQty = 0;

        if (this.InventTransId && this.isStocked())
        {
            inventTransIdSum = InventTransIdSum::newTransOriginId(this.inventTransOriginId());

            inventQty = (inventTransIdSum.physical() + inventTransIdSum.financial());
        }

        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receivedOnPackingSlipInTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity received on packing slips.
    /// </summary>
    /// <returns>
    /// The quantity received on packing slips.
    /// </returns>
    public PurchQty receivedOnPackingSlipInTotal()
    {
        VendPackingSlipTrans            vendPackingSlipTrans;

        select sum(Qty) from vendPackingSlipTrans
            where vendPackingSlipTrans.InventTransId == this.InventTransId;

        return vendPackingSlipTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reductionEntryAmount_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the asset reduction entry amount
    /// </summary>
    /// <param name="_set">
    /// Set or get the reduction entry amount
    /// </param>
    /// <param name="_amount">
    /// Instance of <c>AssetReductionEntryAmount_JP</c>
    /// </param>
    /// <returns>
    /// The reduction entry amount for asset
    /// </returns>
    public edit AssetReductionEntryAmount_JP reductionEntryAmount_JP(
        boolean                            _set,
        AssetReductionEntryAmount_JP       _amount)
    {
        AssetReductionEntryAmount_JP           amountLoc;
        AssetDocumentReductionEntry_JP         reductionEntryDocumentLoc;
        AssetDocumentReductionEntryPurchLnk_JP assetDocumentLnk           = AssetDocumentLink_JP::construct(
                                                                            AssetDocumentLinkType_JP::Purch,
                                                                            AssetDocumentType_JP::AssetReductionEntry_DirectOff);

        if (this.AssetId && this.AssetBookId && this.RecId)
        {
            reductionEntryDocumentLoc = AssetReductionEntryManager_JP::getAssetReductionEntryDocByAssetBook(
                                            this.AssetId,
                                            this.AssetBookId);
            if (reductionEntryDocumentLoc != null)
            {
                assetDocumentLnk.findByReference(this.TableId, this.RecId, reductionEntryDocumentLoc.parmAssetDocumentEntry().RecId);
                if (_set)
                {
                    if (_amount)
                    {
                        if (assetDocumentLnk.parmRecId())
                        {
                            // update
                            assetDocumentLnk.parmReductionEntryAmount(_amount * -1);
                            assetDocumentLnk.parmReductionEntryCurrencyCode(this.CurrencyCode);
                            assetDocumentLnk.update();
                        }
                        else
                        {
                            // new
                            assetDocumentLnk.parmPurchLine(this);
                            assetDocumentLnk.parmAssetDocumentEntryRecId(reductionEntryDocumentLoc.parmAssetDocumentEntry().RecId);
                            assetDocumentLnk.parmReductionEntryAmount(_amount * -1);
                            assetDocumentLnk.parmReductionEntryCurrencyCode(this.CurrencyCode);
                            assetDocumentLnk.create();
                        }
                    }
                    else
                    {
                        // remove
                        assetDocumentLnk.delete();
                    }
                }
                else
                {
                    amountLoc = assetDocumentLnk.parmReductionEntryAmount() * -1;
                }
            }
        }

        return amountLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reductionEntryDocumentId_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the asset reduction entry document id
    /// </summary>
    /// <returns>
    /// The document id for asset reduction entry
    /// </returns>
    public display AssetReductionEntryProfileId_JP reductionEntryDocumentId_JP()
    {
        AssetReductionEntryProfileId_JP    reductionEntryDocumentIdLoc;
        AssetDocumentReductionEntry_JP     reductionEntryDocumentLoc;
        if (this.AssetId && this.AssetBookId)
        {
            reductionEntryDocumentLoc = AssetReductionEntryManager_JP::getAssetReductionEntryDocByAssetBook(
                this.AssetId,
                this.AssetBookId);
            if (reductionEntryDocumentLoc != null)
            {
                reductionEntryDocumentIdLoc = reductionEntryDocumentLoc.parmAssetDocumentTable().DocumentId;
            }
        }
        return reductionEntryDocumentIdLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateWarningTxtPurchLineInventRefTypeDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the warning text for the reference.
    /// </summary>
    /// <param name = "_currentRecord">The <c>PurchLine</c> record for which this delegate is called.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> instance, where subscribers can provide the expected result of type <c>str</c>.</param>
    delegate void generateWarningTxtPurchLineInventRefTypeDelegate(PurchLine _currentRecord, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateWarningTxtPurchLineInventRefTypeDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscriber for getting the warning text for the reference.
    /// </summary>
    /// <param name = "_currentRecord">The <c>PurchLine</c> record for which this delegate is called.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> instance, where subscribers can provide the expected result of type <c>str</c>.</param>
    [SubscribesTo(tableStr(PurchLine), delegateStr(PurchLine, generateWarningTxtPurchLineInventRefTypeDelegate))]
    public static void generateWarningTxtPurchLineInventRefTypeDelegateHandler(PurchLine _currentRecord, EventHandlerResult _result)
    {
        switch (_currentRecord.ItemRefType)
        {
            case InventRefType::Sales:
                SalesLine salesLine = SalesLine::findInventTransId(_currentRecord.InventRefTransId);
                if (salesLine)
                {
                    _result.result(strFmt("@SYS75609", salesLine.SalesId, salesLine.SalesStatus, _currentRecord.ItemId));
                }
                break;
            case InventRefType::Purch:
                PurchLine purchLine = PurchLine::findInventTransId(_currentRecord.InventRefTransId);
                if (purchLine)
                {
                    _result.result(strFmt("@SYS75607", purchLine.PurchId, purchLine.PurchStatus, _currentRecord.ItemId));
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceWarningTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a warning message used for a line which references other entities.
    /// </summary>
    /// <returns>A warning message used for a line which references other entities.</returns>
    str referenceWarningTxt()
    {
        PurchReqLine    purchReqLine;

        if (this.InventRefId)
        {
            var eventHandlerResult = EventHandlerResult::newSingleResponse();
            this.generateWarningTxtPurchLineInventRefTypeDelegate(this, eventHandlerResult);
            if (eventHandlerResult.hasResult())
            {
                return eventHandlerResult.result();
            }
        }
        // Show warning when deleting unconfirmed purchase line connected to a requisition.
        else if (this.PurchReqLineRefId)
        {
            purchReqLine = PurchReqLine::findLineRefId(this.PurchReqLineRefId);
            if (this.isVersioned())
            {
                if (!PurchTableHistory::existDocumentState(this.PurchId, VersioningDocumentState::Confirmed))
                {
                    return strFmt("@SCM:PurchRequisitionReopenAfterPOLineDeleteApprove", purchReqLine.SequenceNumber, this.PurchReqId, this.LineNumber);
                }
                else
                {
                    return '';
                }
            }

            return strFmt("@SYS342715", purchReqLine.SequenceNumber, this.PurchReqId, this.LineNumber);
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshAgreementLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the link between the <c>AgreementLine</c> and the <c>PurchLine</c>. If the current link has
    /// become invalid, or if there is no current link, this will search for the best matching <c>AgreementLine</c>
    /// and update the <c>PurchLine</c> if a new match is found.
    /// </summary>
    /// <param name="_helper">
    /// An implementation of the <c>AgreementAutolinkHelper</c> interface suitable for the concrete <c>SalesPurchLine</c> type.
    /// </param>
    /// <param name="_showInfolog">
    /// A flag that indicates whether to print the errors in the Infolog; optional.
    /// </param>
    /// <returns>
    /// false if the link could not be refreshed; this happens when the current link is invalid and no better match could be found
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public boolean refreshAgreementLink(AgreementAutolinkHelper _helper, boolean _showInfolog = true)
    {
        return this.salesPurchLineInterface().refreshAgreementLink(_helper, _showInfolog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registered</Name>
				<Source><![CDATA[
    display InventQtyRegistered registered()
    {
        if (this.InventTransId && this.isStocked())
        {
            return InventTransIdSumSingleStatus::qtyRegistered(this.inventTransOriginId());
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registeredInPurchUnit</Name>
				<Source><![CDATA[
    display PurchQtyRegistered registeredInPurchUnit()
    {
        PurchQtyRegistered purchQtyRegistered;

        if (this.isStocked())
        {
            purchQtyRegistered = this.registered();
            if (purchQtyRegistered)
            {
                purchQtyRegistered = this.unitConvertInvent2Purch(purchQtyRegistered);
            }
        }
        else
        {
            purchQtyRegistered = TradeNonStockedRegistrationHelper::qtyRegistered(this.SourceDocumentLine);
        }

        return purchQtyRegistered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registeredQuantityAndServices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the registered quantity for the line or the line quantity for a non-tangible line that cannot
    /// be registered.
    /// </summary>
    /// <returns>
    /// A <c>PurchQty</c> value.
    /// </returns>
    /// <remarks>
    /// This method is used during posting for the <c>PurchUpdate</c> enumeration option to show the
    /// registered quantity and services.
    /// </remarks>
    public InventQty registeredQuantityAndServices()
    {
        InventQty   quantity;

        if (this.isTangible())
        {
            //For lines with tangible items the registered quantity is returned
            quantity =  this.registered();
        }
        else
        {
            //For non-tangible lines, the ordered quantity is returned
            quantity = this.unitConvertPurch2Invent(this.PurchQty);
        }

        return quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registeredQuantityAndServicesInPurchUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the registered quantity for the line or the line quantity for a non-tangible line that cannot
    /// be registered.
    /// </summary>
    /// <returns>
    /// A <c>PurchQty</c> value.
    /// </returns>
    /// <remarks>
    /// This method is used during posting for the <c>PurchUpdate</c> enumeration option to show the
    /// registered quantity and services.
    /// </remarks>
    public PurchQty registeredQuantityAndServicesInPurchUnit()
    {
        PurchQty quantity;

        if (this.isTangible())
        {
            //For lines with tangible items the registered quantity is returned
            quantity = this.registeredInPurchUnit();
        }
        else
        {
            //For non-tangible lines, the line quantity is returned
            quantity = this.PurchQty;
        }

        return quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the corresponding record in the <c>ReqTrans</c> table for the current record in the
    /// <c>PurchLine</c> table.
    /// </summary>
    /// <param name="_reqPlanVersionRefRecId">
    /// The ID of the record in the <c>ReqPlanVersion</c> table; optional.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>ReqTrans</c> table; otherwise, an empty record.
    /// </returns>
    ReqTrans reqTrans(
        RefRecId _reqPlanVersionRefRecId = ReqPlanVersion::findActiveReqPlanIdDynamic().RecId,
        boolean  _forupdate              = false)
    {
        ReqTrans                    reqTrans;
        InventTransOriginPurchLine  inventTransOriginPurchLine;

        reqTrans.selectForUpdate(_forupdate);

        select firstonly reqTrans
            where reqTrans.PlanVersion  == _reqPlanVersionRefRecId
               && reqTrans.RefType      == ReqRefType::Purch
               && reqTrans.RefId        == this.PurchId
            exists join inventTransOriginPurchLine
                where inventTransOriginPurchLine.InventTransOrigin      == reqTrans.InventTransOrigin
                   && inventTransOriginPurchLine.PurchLineDataAreaId    == this.DataAreaId
                   && inventTransOriginPurchLine.PurchLineInventTransId == this.InventTransId;

        return reqTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPurchaseRelatedPostingRulesWithTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if some invent posting rule with tax group specified and related to purchase orders exists
    /// </summary>
    /// <returns>true if at least one record with tax exists</returns>
    public boolean existPurchaseRelatedPostingRulesWithTax()
    {
        return (select firstonly RecId from InventPosting
                    where InventPosting.TaxGroupId != ''
                       && (InventPosting.InventAccountType == InventAccountType::PurchPackingSlip
                       ||  InventPosting.InventAccountType == InventAccountType::PurchPackingSlipOffsetAccount
                       ||  InventPosting.InventAccountType == InventAccountType::PurchReceipt
                       ||  InventPosting.InventAccountType == InventAccountType::PurchReceiptFixedAsset
                       ||  InventPosting.InventAccountType == InventAccountType::PurchConsump
                       ||  InventPosting.InventAccountType == InventAccountType::PurchDisc
                       ||  InventPosting.InventAccountType == InventAccountType::PurchStdProfit
                       ||  InventPosting.InventAccountType == InventAccountType::PurchStdLoss
                       ||  InventPosting.InventAccountType == InventAccountType::PurchStdOffsetAccount
                       ||  InventPosting.InventAccountType == InventAccountType::PurchCharge
                       ||  InventPosting.InventAccountType == InventAccountType::PurchStockVariation
                       ||  InventPosting.InventAccountType == InventAccountType::PurchPackingSlipPurchaseOffsetAccount
                       ||  InventPosting.InventAccountType == InventAccountType::PurchPackingSlipTax
                       ||  InventPosting.InventAccountType == InventAccountType::PurchExpense
                       ||  InventPosting.InventAccountType == InventAccountType::PurchAdvance)).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetDistributions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes and regenerates the distributions for the current document.
    /// </summary>
    /// <remarks>
    /// This is used by the commitments feature to reset the accounting distributions after the commitment for the current line is changed.
    /// </remarks>
    public void resetDistributions()
    {
        SourceDocumentLine  sourceDocumentLine;
 
        // Check to see that the commitments or budget reservation feature is enabled and that there are existing distributions.
        if (AccountingDistribution::existSourceDocumentLine(this.SourceDocumentLine))
        {
            select firstonly sourceDocumentLine
                where sourceDocumentLine.RecId == this.SourceDocumentLine;

            SourceDocumentLineProcessor::submitSourceDocumentLineImplementation(this, false, SourceDocumentLineAccountingStatus::Draft);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetDistribution_RU</Name>
				<Source><![CDATA[
    private void resetDistribution_RU()
    {
        SourceDocumentLineAccountingStatus accountingStatus = this.sourceDocumentLine().AccountingStatus;

        if (   accountingStatus == SourceDocumentLineAccountingStatus::Canceled
            || accountingStatus == SourceDocumentLineAccountingStatus::Finalized)
        {
            return;
        }

        if (accountingStatus == SourceDocumentLineAccountingStatus::Completed)
        {
            SourceDocumentLineProcessor::submitSourceDocumentLineImplementation(this, false, SourceDocumentLineAccountingStatus::FullyDistributed);
        }

        SourceDocumentLineProcessor::submitSourceDocumentLineImplementation(this, false, SourceDocumentLineAccountingStatus::Draft);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetProjectFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the project field values on the current purchase order line.
    /// </summary>
    public void resetProjectFields()
    {
        PurchTable  purchTable  = PurchTable::find(this.PurchId);
        ProjTable   projTable   = ProjTable::find(purchTable.ProjId);

        this.ProjId                 = '';
        this.ActivityNumber         = '';
        this.ProjCategoryId         = '';
        this.ProjLinePropertyId     = '';
        this.ProjSalesCurrencyId    = '';
        this.ProjSalesUnitId        = '';
        this.ProjSalesPrice         = 0;
        this.ProjTaxGroupId         = '';
        this.ProjTaxItemGroupId     = '';
        this.ProjWorker             = 0;

        if (projTable.RecId != 0)
        {
            this.ProjId         = projTable.ProjId;
            this.ProjCategoryId = ProjParameters::find().ItemCategory;
            this.initFromProjTable(projTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetInvent</Name>
				<Source><![CDATA[
    void resetInvent(boolean update = true)
    {
        this.PurchQty                       = 0;
        this.QtyOrdered                     = 0;

        this.PurchPrice    = 0;
        this.LineAmount    = 0;

        this.RemainPurchPhysical    = this.PurchQty;
        this.RemainPurchFinancial   = 0;
        this.RemainInventPhysical   = this.QtyOrdered;
        // 1877
        this.RemainInventFinancial  = 0;
        // 1877

        InventMovement::bufferSetTransQtyUnit(this);
        this.setInventReceivedNow();

        if (update)
        {
            this.update();
            this.PurchStatus   = PurchStatus::Canceled;
            this.doUpdate();

            InterCompanyUpdateStatus::synchronize(this);
        }
        else
        {
            this.PurchStatus   = PurchStatus::Canceled;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnActionChanged</Name>
				<Source><![CDATA[
    void returnActionChanged(InventDim inventDim = null)
    {
        ReturnActionDefaults  returnActionDefaults = ReturnActionDefaults::find(this.moduleType(), this.ReturnActionId);

        if (returnActionDefaults.RecId)
        {
            if (!inventDim)
            {
                inventDim = this.inventDim();
            }

            inventDim.mergeUsedDim(InventDimGroupSetup::newItemId(this.ItemId), returnActionDefaults.inventDim());
            this.setInventDimIdFromInventDim(inventDim);

            if (this.ProjId && !this.purchTable().isProjectSalesItemReqPO()
                && !this.getProjCreditNoteSource().purchTable().isProjectSalesItemReqPO())
            {
                this.Scrap          = returnActionDefaults.Scrap;

                if (this.ItemRefType != InventRefType::Sales &&
                    this.ItemRefType != InventRefType::InventJournal)
                {
                    this.Scrap  = true;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPriceDiscPolicyDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launches the price discount user dialog.
    /// </summary>
    /// <param name="_fieldId">
    /// The id of the field in question.
    /// </param>
    /// <param name="_showLineItem">
    /// An optional Boolean controlling if item and line number should be displayed in the dialog. Default value is false.
    /// </param>
    /// <param name="_skipTriggerFieldCheck">
    /// A Boolean specifying whether changes to price discount trigger fields should be verified; optional.
    /// </param>
    /// <returns>
    /// true if the user press OK or no policy exists; otherwise, false.
    /// </returns>
    public boolean runPriceDiscPolicyDialog(
        RefFieldId  _fieldId                = 0,
        boolean     _showLineItem           = false,
        boolean     _skipTriggerFieldCheck  = false)
    {
        return this.PriceDiscResultFields::runPriceDiscPolicyDialog(_fieldId, _showLineItem, _skipTriggerFieldCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLine</Name>
				<Source><![CDATA[
    SalesLine salesLine(boolean _update = false)
    {
        SalesLine salesLine;

        if (this.ItemRefType == InventRefType::Sales && this.InventRefId && this.InventRefTransId)
        {
            salesLine = SalesLine::findInventTransId(this.InventRefTransId, _update);
        }

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchTable</Name>
				<Source><![CDATA[
    public SalesPurchTable salesPurchTable()
    {
        return this.salesPurchLineInterface().salesPurchTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets address based on invent dimension information.
    /// </summary>
    /// <param name="_inventDim">
    /// Invent dimension information.
    /// </param>
    /// <param name="_setTaxGroupFromPurchTable">
    /// True to set tax group from purchase order.
    /// </param>
    /// <remarks>
    /// Currently, the second param is only used in PurchLine::initFromVendInvoiceTrans()
    /// to pass !_copyPrecisely information. IN code is reusing this to avoid duplicating
    /// param passing.
    /// </remarks>
    public void setAddressFromInventDim(InventDim _inventDim
                                        , boolean _setTaxGroupFromPurchTable = true
    )
    {
        InventLocation              inventLocation;
        InventSite                  inventSite;
        LogisticsLocationRecId      location;
        // <GIN>
        #ISOCountryRegionCodes
        // </GIN>

        if (_inventDim.RecId
        &&  !this.isDropShipment())
        {
            inventLocation  = InventLocation::find(_inventDim.InventLocationId);
            location        = LogisticsLocationDefault::findSimpleDefault(inventLocation,
                                LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery)).RecId;

            if (location)
            {
                this.setLocation(location, inventLocation);
            }
            else if (inventLocation.VendAccount
                    || this.PurchaseType == PurchaseType::ReturnItem
                    )
            {
                if (this.PurchaseType != PurchaseType::ReturnItem)
                {
                    this.setAddressFromVendTable(VendTable::find(inventLocation.VendAccount));
                }
                else
                {
                    this.setAddressFromPurchTable();
                }
            }
            else
            {
                inventSite  = InventSite::find(_inventDim.InventSiteId);
                if (inventSite)
                {
                    location   = LogisticsLocationDefault::findSimpleDefault(inventSite, LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery)).RecId;
                }

                if (location)
                {
                    this.setLocation(location, inventSite);
                }
                else
                {
                    this.setAddressFromPurchTable();

                    if (_setTaxGroupFromPurchTable)
                    {
                        this.TaxGroup = this.purchTable().TaxGroup;
                    }
                }
            }

            // <GIN>
            // Note: Please ignore the naming for variable _setTaxGroupFromPurchTable here.
            // See details in xml doc <remarks> part.
            if (_setTaxGroupFromPurchTable
                && (TaxIntegrationUtils::isTaxInformationEnabled() || TaxWithholdParameters_IN::checkTaxParameters()))
            {
                TransTaxInformationHelper::newHelper().UpdateCompanyLocationFromTransTable(this, LogisticsPostalAddress::findByLocation(TaxLogisticsLocationControllerHelper_IN::getDefaultLogisticsLocation(_inventDim.InventLocationId, _inventDim.InventSiteId)).RecId);
            }
            // </GIN>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromPurchLine</Name>
				<Source><![CDATA[
    public void setAddressFromPurchLine(PurchLine  _purchLine)
    {
        this.DeliveryPostalAddress      = _purchLine.DeliveryPostalAddress;
        this.DeliveryName               = _purchLine.DeliveryName;
        this.AddressRefRecId            = _purchLine.AddressRefRecId;
        this.AddressRefTableId          = _purchLine.AddressRefTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromPurchTable</Name>
				<Source><![CDATA[
    public void setAddressFromPurchTable(PurchTable  _purchTable = this.purchTable())
    {
        //Note: Any change made here must also be made in purchTable.copyAddressToLine

        this.DeliveryPostalAddress      = _purchTable.DeliveryPostalAddress;
        this.DeliveryName               = _purchTable.DeliveryName;
        this.AddressRefRecId            = _purchTable.AddressRefRecId;
        this.AddressRefTableId          = _purchTable.AddressRefTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromVendTable</Name>
				<Source><![CDATA[
    void setAddressFromVendTable(VendTable _vendTable)
    {
        this.DeliveryName               =_vendTable.name();
        this.DeliveryPostalAddress      = DirParty::primaryPostalAddress(_vendTable.Party).RecId;
        this.AddressRefRecId            = _vendTable.RecId;
        this.AddressRefTableId          = _vendTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>AgreementLine</c> when the procurement category is changed for a purchase line.
    /// </summary>
    private void setAgreementLine()
    {
        if (this.isCategoryBased() && this.purchTable().MatchingAgreement)
        {
            this.salesPurchLineInterface().autoMatchAgreementLine(this.purchTable().MatchingAgreement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAgreementPrice</Name>
				<Source><![CDATA[
    void setAgreementPrice(AgreementLineQuantityCommitment _agreementLine)
    {
        this.PurchUnit = _agreementLine.ProductUnitOfMeasure;
        this.salesPurchLineInterface().setAgreementQtyAndPrice(_agreementLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAgreementSkipAutoLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a value for the AgreementSkipAutoLink field of <c>PurchLine</c>
    /// </summary>
    /// <param name="_agreementSkipAutoLink">
    /// Value for the AgreementSkipAutoLink field to be set on the instance of <c>PurchLine</c>
    /// </param>
    /// <remarks>
    /// This value determines whether or not automatic attempt to link this line to agreement line should take place or not
    /// in case when agreement specific information is changed for this instance of <c>PurchLine</c>
    /// </remarks>
    public void setAgreementSkipAutoLink(AgreementSkipAutoLink _agreementSkipAutoLink)
    {
        this.AgreementSkipAutoLink = _agreementSkipAutoLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCFOP_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// It is responsible for setting CFOP code
    /// </summary>
    /// <param name="_askToUser">
    /// Boolean to define if should request user interaction
    /// </param>
    public void setCFOP_BR(boolean _askToUser = false)
    {
        CFOPValidation_BR           cfopValidation;

        cfopValidation       = CFOPValidation_BR::construct(this);
        if (!cfopValidation.checkCFOP(_askToUser))
        {
            this.cfopTable_BR    = cfopValidation.getDefaultCFOP(_askToUser);
            this.onCFOPChange_BR();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the delivery name field based on the specified logistic location.
    /// </summary>
    /// <param name="_skipDeliveryRoleCheck">
    ///     A flag indicating whether to skip the check for determining the delivery role; optional.
    /// </param>
    public void setDeliveryName(boolean _skipDeliveryRoleCheck = false)
    {
        this.TradePostalAddress::setDeliveryName(_skipDeliveryRoleCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDepreciationStartDate</Name>
				<Source><![CDATA[
    void setDepreciationStartDate(boolean _forceSet = false)
    {
        if (this.AssetId != this.orig().AssetId ||
            this.AssetBookId != this.orig().AssetBookId || _forceSet)
        {
            this.DepreciationStartDate = AssetBook::getDepreciationStartDate(this.AssetId, this.AssetBookId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the <c>InventDimId</c> parameter to the <c>InventDimId</c> field and applies default
    /// values, depending on the new inventory dimensions.
    /// </summary>
    /// <param name="_inventDimId">
    /// The <c>InventDimId</c> value that should be applied to the <c>InventDimId</c> field.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record buffer related to the <c>InventDimId</c> parameters; optional.
    /// </param>
    public void setInventDimId(InventDimId _inventDimId, InventDim _inventDim = InventDim::find(_inventDimId))
    {
        InventDim   currentInventDim = this.InventDimId == _inventDimId ? _inventDim : this.inventDim();

        this.InventDimId = _inventDimId;
        this.linkInventDim2Dimension(_inventDim, currentInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimIdFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates an <c>InventDimId</c> value for the <c>InventDim</c> parameter and applies the
    /// found <c>InventDimId</c> value to the <c>PurchLine.inventDimId</c> field.
    /// </summary>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> record buffer that should be referenced by the current <c>PurchLine</c> record
    /// buffer.
    /// </param>
    public void setInventDimIdFromInventDim(InventDim _inventDim)
    {
        InventDim   inventDim;

        inventDim = InventDim::findOrCreate(_inventDim);
        this.setInventDimId(inventDim.InventDimId, inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventReceivedNow</Name>
				<Source><![CDATA[
    void setInventReceivedNow()
    {
        if (this.isStocked())
        {
            if (EcoResProductUnitConverter::hasRequiredProductDimensionsForUnitConversion(this.ItemId, this.inventDim()))
            {
                this.InventReceivedNow = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                                               this.InventDimId,
                                                                                                               this.PurchReceivedNow,
                                                                                                               this.PurchUnit,
                                                                                                               this.inventTable().inventUnitId(),
                                                                                                               NoYes::Yes);
            }
        }
        else
        {
            this.InventReceivedNow = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setListCode</Name>
				<Source><![CDATA[
    void setListCode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets delivery address information and related information.
    /// </summary>
    /// <param name="_locationRecId">
    ///    The record ID of the logistics location.
    /// </param>
    /// <param name="_source">
    ///    The record that has an associated address.
    /// </param>
    /// <remarks>
    ///    If <c>_source</c> parameter is not specified, the address related information will be set based on the logistics location.
    /// </remarks>
    void setLocation(LogisticsLocationRecId  _locationRecId, Common _source = null)
    {
        LogisticsLocation location = LogisticsLocation::find(_locationRecId);

        if (this.PurchaseType != PurchaseType::ReturnItem)
        {
            if (location.Description)
            this.DeliveryName       = location.Description;

            this.DeliveryPostalAddress  = LogisticsPostalAddress::addressRecIdFromLocationRecId(location.RecId);

            if (_source)
            {
                LogisticsLocationSelectForm_PurchLine::construct(this).copyAddressToCaller(_source,
                this.DeliveryPostalAddress);
            }
            else
            {
                LogisticsLocationSelectForm_PurchLine::construct(this).copyAddressToCaller(this.getDeliveryEntityRecord(),
                this.DeliveryPostalAddress);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPostingProfile_RU</Name>
				<Source><![CDATA[
    void setPostingProfile_RU()
    {
        InventProfileId_RU  inventProfile = this.inventDim().InventProfileId_RU;

        if (EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(this.ItemId, fieldNum(InventDim, InventProfileId_RU)) &&
            (inventProfile && (! this.RecId || inventProfile != this.orig().inventDim().InventProfileId_RU)))
        {
            PurchLine_W purchLine_W = this.purchLine_W();
            purchLine_W.PostingProfile_RU = InventProfileCustVendLedger_RU::vendPostingProfile(inventProfile);
            this.packPurchLine_W(purchLine_W);
            FormDataSource formDataSource = purchLine_W.dataSource();

            if (formDataSource)
            {
                formDataSource.refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>setPriceAgreement</c> method of the <c>SalesPurchLine</c> table map.
    /// </summary>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> record that contains the dimensions the price disc should apply for.
    /// </param>
    /// <param name="_doCallPriceDate">
    ///    A Boolean value that specifies whether to use the price date or the system date for the price calculation; optional.
    /// </param>
    /// <param name="_checkPolicy">
    /// An instance of the <c>PriceDiscPolicyCheckPolicy</c> class defining if price and discount fields
    /// should be updated; optional.
    /// </param>
    /// <param name="_initDateFields">
    /// Indicates if the dates related to prices should be set or not; optional.
    /// </param>
    [Hookable(false), Wrappable(false)]
    public void setPriceAgreement(
        InventDim					_inventDim,
        boolean						_doCallPriceDate	= false,
        PriceDiscPolicyCheckPolicy  _checkPolicy		= null,
        boolean						_initDateFields		= true,
        PriceDiscPriceAgreementParameters _parameters   = this.createPriceDiscPriceAgreementParameterInstance())

    {
        this.salesPurchLineInterface().setPriceAgreement(_inventDim, _doCallPriceDate, _checkPolicy, _initDateFields, _parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets prices and discounts on the <c>PurchLine</c>.
    /// </summary>
    /// <param name = "_inventDim">An <c>InventDim</c> record.</param>
    /// <param name = "_initDateFields">A <c>boolean</c> value.</param>
    /// <param name = "_parameters">An instance of the <c>PriceDiscPriceAgreementParameters</c> class, used to pass any additional parameters.</param>
    [Hookable(false), Wrappable(false)]
    public void setPriceDisc(InventDim _inventDim,
                             boolean   _initDateFields = true,
                             PriceDiscPriceAgreementParameters _parameters = this.createPriceDiscPriceAgreementParameterInstance())
    {
        if (this.SkipPriceDiscCalc == NoYes::No)
        {
            this.salesPurchLineInterface().setPriceDisc(_inventDim, _initDateFields, _parameters);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscPriceAgreementParameterInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of the <c>PriceDiscPriceAgreementParameters</c> class.
    /// </summary>
    /// <returns>An instance of the <c>PriceDiscPriceAgreementParameters</c> class.</returns>
    protected PriceDiscPriceAgreementParameters createPriceDiscPriceAgreementParameterInstance()
    {
        return PriceDiscPriceAgreementParameters::createInstance(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDiscChangePolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>createPriceDiscChangePolicy</c> method of the <c>PriceDiscResultFields</c> table map.
    /// </summary>
    /// <param name="_policySource">
    /// An outcome of the <c>PriceDiscSystemSource</c> enumeration that specifies the source of the policy.
    /// </param>
    /// <param name="_fieldId">
    /// A field ID.
    /// </param>
    void setPriceDiscChangePolicy(PriceDiscSystemSource _policySource, RefFieldId _fieldId = 0)
    {        
        this.PriceDiscResultFields::createPriceDiscChangePolicy(ModuleSalesPurch::Purch, _policySource, _fieldId);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>setManualEntryChangePolicyFromSalesLine</Name>
				<Source><![CDATA[
    internal void setManualEntryChangePolicyFromSalesLine(SalesLine _salesLine)
    {
        if (this.ManualEntryChangePolicy || _salesLine.ManualEntryChangePolicy)
        {
            this.ManualEntryChangePolicy = 0;

            PriceDiscPolicyCheckPolicy checkPolicy = PriceDiscPolicyCheckPolicy::newFromParm(_salesLine);
            container priceDiscChangePolicyFieldIds = checkPolicy.getPolicyFields();
            
            for (int i = 1; i <= conLen(priceDiscChangePolicyFieldIds); i++)
            {
                RefFieldId salesLineFieldId = conPeek(priceDiscChangePolicyFieldIds, i);
                if (salesLineFieldId)
                {
                    PriceDiscPolicyField policyField = PriceDiscResultFields::tableFieldMapping().tableField2PolicyField(_salesLine.TableId, salesLineFieldId);

                    if (policyField && checkPolicy.hasManualPolicyField(policyField))
                    {
                        RefFieldId purchLineManualPolicyField = PriceDiscResultFields::tableFieldMapping().policyField2TableField(this.TableId, policyField);
                        
                        this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, purchLineManualPolicyField);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDiscMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>setPriceDiscMarkup</c> method on the <c>SalesPurchLine</c> table map.
    /// </summary>
    /// <param name="_priceDisc">
    /// An instance of the <c>PriceDisc</c> class.
    /// </param>
    /// <param name="_checkPolicy">
    /// An instance of the <c>PriceDiscPolicyCheckPolicy</c> class.
    /// </param>
    public void setPriceDiscMarkup(PriceDisc_Price _priceDisc, PriceDiscPolicyCheckPolicy _checkPolicy)
    {
        this.salesPurchLineInterface().setPriceDiscMarkup(_priceDisc, _checkPolicy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDiscPriceUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>setPriceDiscPriceUnit</c> method on the <c>SalesPurchLine</c> table map.
    /// </summary>
    /// <param name="_priceDisc">
    /// An instance of the <c>PriceDisc</c> class.
    /// </param>
    /// <param name="_checkPolicy">
    /// An instance of the <c>PriceDiscPolicyCheckPolicy</c> class.
    /// </param>
    /// <param name="_retailCalculator">
    /// A <c>RetailSalesOrderCalculator</c> object.
    /// </param>
    public void setPriceDiscPriceUnit(PriceDisc_Price _priceDisc, PriceDiscPolicyCheckPolicy _checkPolicy, RetailOrderCalculator _retailCalculator = null)
    {
        this.salesPurchLineInterface().setPriceDiscPriceUnit(_priceDisc, _checkPolicy, _retailCalculator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate and set the project sales price field.
    /// </summary>
    protected void setProjSalesPrice()
    {
        Debug::assert(this.ProjId != '');

        if (this.PurchPrice)
        {
            if (this.defaultCostPriceAsSalesPrice())
            {
                this.ProjSalesPrice = this.calcProjSalesPriceIfDefault();
            }
            else if (this.isProjectBudgetReservationLineReferenced())
            {
                BudgetReservationLine_PSN budgetReservationLine = BudgetReservationLine_PSN::find(this.BudgetReservationLine_PSN);

                this.ProjSalesPrice = budgetReservationLine.ProjSalesPrice;
            }
            else if (this.ProjCategoryId)
            {
                boolean priceFound;
                ProjCategory category = ProjCategory::find(this.ProjCategoryId);
                ProjPriceParameters priceParams;
                Price actualCostPrice = (this.LineDisc || this.LinePercent) ?
                    ProjectSourceDocumentLineItemHelper::getCostPriceWithDiscountApplied(this.PurchPrice, this.LineDisc, this.LinePercent):
                    this.PurchPrice;
           
                switch (category.CategoryType)
                {
                    case ProjCategoryType::Item:
                        InventTable inventTable = this.inventTable();
                        boolean modelFound;
                        boolean salesPriceFound;

                        if (inventTable &&
                            inventTable.SalesPriceModelBasic == SalesPriceModelBasic::PurchPrice &&
                            inventTable.SalesModel != SalesPriceModel::None &&
                            !(inventTable.SalesModel == SalesPriceModel::Contributionratio && inventTable.SalesContributionRatio >= 100) &&
                            !this.purchTable().isProjectSalesItemReqPO() &&
                            !this.getProjCreditNoteSource().purchTable().isProjectSalesItemReqPO())
                        {
                            this.ProjSalesPrice = this.InventAutoSalesPriceMap::updateSalesPrice(inventTable, this, actualCostPrice);
                            modelFound = true;
                        }
                        else if (this.InventRefTransId && SalesLine::findInventTransId(this.InventRefTransId))
                        {
                            this.ProjSalesPrice = SalesLine::findInventTransId(this.InventRefTransId).SalesPrice;
                            salesPriceFound = true;
                        }
                        else
                        {
                            if (!this.ProcurementCategory)
                            {
                                this.ProjSalesPrice = 0;
                            }
                            
                            salesPriceFound = this.setProjSalesPriceFromPriceAgreement();

                            // For <c>ProcurementCategory</c> by default we are setting the variable <c>salesPriceFound</c> to true
                            // so that it will not update project sales price with cost price when parameter is marked as No.
                            if (!salesPriceFound
                                && this.ProcurementCategory
                                && !this.defaultCostPriceAsSalesPrice()
                                && ProjCorrectSalesPriceInProjPOWithProcCategoryFlight::instance().isEnabled())
                            {
                                salesPriceFound = true;
                            }
                        }

                        // If a sales agreement price is found, it already uses project sales currency
                        if (this.CurrencyCode != this.ProjSalesCurrencyId && !salesPriceFound)
                        {
                            this.ProjSalesPrice =  ExchangeRateHelper::curPrice2CurPrice(modelFound ? this.ProjSalesPrice : actualCostPrice,
                                                                           this.CurrencyCode,
                                                                           this.ProjSalesCurrencyId,
                                                                           this.DeliveryDate,
                                                                           true);
                        }
                        break;

                    case ProjCategoryType::Hour:
                        priceParams = ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
                            this.ProjId,
                            this.getProjResourceRecId(),
                            this.ProjCategoryId,
                            this.ProjLinePropertyId,
                            actualCostPrice,
                            this.ProjSalesCurrencyId);
                        [this.ProjSalesPrice, priceFound] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(priceParams);

                        if (!this.ProjSalesPrice)
                        {
                            this.setProjSalesPriceFromPriceAgreement();
                        }
                        break;

                    case ProjCategoryType::Cost:
                        priceParams = ProjCostSalesPrice::constructPriceParametersForFindCostSalesPrice(
                            this.ProjId,
                            this.getProjResourceRecId(),
                            this.ProjCategoryId,
                            actualCostPrice,
                            this.CurrencyCode,
                            this.ProjSalesCurrencyId,
                            this.parmExchangeRateDate());
                        [this.ProjSalesPrice, priceFound] = ProjCostSalesPrice::findCostSalesPriceByPriceParameters(priceParams);

                        if (!this.ProjSalesPrice)
                        {
                            this.setProjSalesPriceFromPriceAgreement();
                        }
                        break;
                }
            }
        }
        else
        {
            this.setProjCostSalesPriceFromPriceSetup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjSalesPriceFromPriceAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates project sales price based on sales price agreement.
    /// </summary>
    /// <returns>
    /// true if a price agreement is found; otherwise, false.
    /// </returns>
    private boolean setProjSalesPriceFromPriceAgreement()
    {
        if (this.inventTable())
        {
            PriceUnit salesUnitDummy;
            PriceMarkup markUpDummy;
            ProjTable projTableLoc = this.projTable();

            [this.ProjSalesPrice, salesUnitDummy, markUpDummy] = this.inventTable().salesPriceAgreement((this.ConfirmedDlv ? this.ConfirmedDlv : this.DeliveryDate),
                                                                    this.inventDim(),
                                                                    this.PurchQty,
                                                                    this.inventTable().inventUnitId(),
                                                                    projTableLoc.CustAccount,
                                                                    this.ProjSalesCurrencyId ? this.ProjSalesCurrencyId : projTableLoc.currencyId(),
                                                                    ProjTable::findPriceGroup(projTableLoc.ProjId));

            return this.ProjSalesPrice != 0;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchStatus</Name>
				<Source><![CDATA[
    void setPurchStatus(boolean _updateHeader = false)
    {
        this.type().updatePurchStatus(this.extensionOrig(), null, _updateHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRAssetInventProfileId_RU</Name>
				<Source><![CDATA[
    public void setRAssetInventProfileId_RU()
    {
        RAssetParameters assetParameters = RAssetParameters::find();

        if (this.ItemId                                    &&
            InventTable::find(this.ItemId).AssetGroupId_RU &&
            assetParameters.LowCostAssetInventProfileId)
        {
            if (RAssetTable::acquisitionPriceFromPurchLine(this) <= assetParameters.LowCostAmountLimit)
            {
                InventDim inventDim = InventDim::find(this.InventDimId);
                inventDim.InventProfileId_RU = assetParameters.LowCostAssetInventProfileId;
                this.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStockedProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>StockedProduct</c> field for the line based on line type and item model group for the associated item.
    /// </summary>
    public void setStockedProduct()
    {
        this.type().setStockedProduct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxGroup</Name>
				<Source><![CDATA[
    void setTaxGroup(TaxGroup  _taxGroup)
    {
        PurchLineType  purchLineType;

        purchLineType = this.type();
        purchLineType.setTaxGroup(_taxGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxGroupAndTaxItemGroupFields_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set PurchLine.TaxGroup and PurchLine.TaxItemGroup based on <c>TaxesMatrix</c>
    /// </summary>
    public void setTaxGroupAndTaxItemGroupFields_BR()
    {
        TaxGroup            taxGroup;
        TaxItemGroup        taxItemGroup;

        [taxGroup, taxItemGroup] = TaxesMatrix_BR::findTaxGroupAndTaxItemGroup(this.cfopTable_BR,
                                                                               this.purchTable().purchTable_BR().SalesPurchOperationType_BR,
                                                                               SalesPurchTrntype_BR::Purchase,
                                                                               CustVendType_BR::Vendor,
                                                                               this.purchTable().OrderAccount,
                                                                               this.ItemId,
                                                                               this.inventDim().inventSite().fiscalEstablishment().fiscalEstablishmentGroup());

        this.TaxGroup      = taxGroup     ? taxGroup     : this.purchTable().TaxGroup;
        this.TaxItemGroup  = taxItemGroup ? taxItemGroup : this.inventTable().purchTaxItemGroupId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentLine</Name>
				<Source><![CDATA[
    public SourceDocumentLine sourceDocumentLine()
    {
        return SourceDocumentLine::find(this.SourceDocumentLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>stockedProductChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies default values or sets the inventory related field values to null when the <c>StockedProduct</c> field value is changed.
    /// </summary>
    void stockedProductChanged()
    {
        if (this.isStocked())
        {
            // default inventory fields
            this.QtyOrdered             = this.calcQtyOrdered();
            this.RemainInventPhysical   = this.QtyOrdered;
            this.RemainInventFinancial  = 0;
            this.Scrap                  = NoYes::No;
            this.setInventReceivedNow();
            TradeNonStockedRegistrationHelper::newFromSalesPurchLine(this).deletePendingRegistration();
        }
        else
        {
            // blank out inventory fields
            this.QtyOrdered             = 0;
            this.InventReceivedNow      = 0;
            this.RemainInventPhysical   = 0;
            this.RemainInventFinancial  = 0;
            this.Scrap                  = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Activates the purchase order line workflow.
    /// </summary>
    /// <param name="_workflowTemplateName">
    /// The AOT name of the workflow template the purchase order line will be submitted to.
    /// </param>
    /// <param name="_workflowComment">
    /// The reason for submitting.
    /// </param>
    /// <param name="_activatingFromWeb">
    /// A Boolean value that indicates whether the submission is coming from the enterprise portal.
    /// </param>
    /// <remarks>
    /// This method starts the workflow configuration by calling the <c>ActivateWorkflowTemplate</c> method
    /// on the <c>Workflow</c> class with information about the purchase order line record.
    /// </remarks>
    public void submitToWorkflow(WorkflowTypeName		 _workflowTemplateName,
                                  WorkflowComment       _workflowComment,
                                  boolean               _activatingFromWeb = false)
    {
        ttsbegin;

        Workflow::activateFromWorkflowType(_workflowTemplateName,
                                               this.RecId,
                                               _workflowComment,
                                               _activatingFromWeb,
                                               curUserId());

        PurchLine::setWorkflowState(this.RecId, TradeWorkflowState::Submitted);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxationOrigin_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the origin of the item in the current purchase order line.
    /// </summary>
    /// <returns>
    /// The origin of the item to be used for taxation.
    /// </returns>
    display FITaxationOrigin_BR taxationOrigin_BR()
    {
        return this.inventTable().TaxationOrigin_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxByLine</Name>
				<Source><![CDATA[
    real taxByLine()
    {
        TaxTrans taxTrans;

        if (this.InventTransId)
        {
            select sum(TaxAmount) from taxTrans
            where taxTrans.InventTransId == this.InventTransId;
        }

        return taxTrans.TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxDate</Name>
				<Source><![CDATA[
    TransDate taxDate(TransDate transDate)
    {
        return TaxParameters::find().TaxCalculationDateType == TaxCalculationDateType::DeliveryDate ? this.deliveryDate(transDate) : transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxFiscalClassification_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the fiscal classification code of the item in the purchase order line.
    /// </summary>
    /// <returns>
    /// The fiscal classification code of the item.
    /// </returns>
    display TaxFiscalClassificationId_BR taxFiscalClassification_BR()
    {
        return this.inventTable().TaxFiscalClassification_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPcsPrice</Name>
				<Source><![CDATA[
    public PriceCur taxPcsPrice(TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null)
    {
        return this.salesPurchLineInterface().taxPcsPrice(transDate, _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdCodeType_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax withhold code type.
    /// </summary>
    /// <returns>
    /// The instance of the <c>TaxWithholdCodeType_IN</c> class.
    /// </returns>
    public TaxWithholdCodeType_IN taxWithholdCodeType_IN()
    {
        TaxWithholdCodeType_IN  taxWithholdCodeType = TaxWithholdCodeType_IN::None;
        PurchLine_IN            purchLine_IN = this.purchLine_IN();

        if  (purchLine_IN.tdsGroup != '')
        {
            taxWithholdCodeType = TaxWithholdCodeType_IN::TDS;
        }
        else if (purchLine_IN.tcsGroup != '')
        {
            taxWithholdCodeType = TaxWithholdCodeType_IN::TCS;
        }
        return taxWithholdCodeType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeZoneSite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the time zone associated with the site on the current purchase order line.
    /// </summary>
    /// <returns>
    ///    The site time zone.
    /// </returns>
    public display Timezone timeZoneSite()
    {
        return InventSite::timeZoneSite(InventDim::find(this.InventDimId).InventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsVolume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transportation <c>Volume</c> for the <c>PurchLine</c>.
    /// </summary>
    /// <returns>
    /// The transportation volume for the <c>PurchLine</c>.
    /// </returns>
    Volume tmsVolume()
    {
        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            return this.PdsCWQty * this.inventTable().UnitVolume;
        }

        return this.inventTable().UnitVolume * this.QtyOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transportation <c>Weight</c> for the <c>PurchLine</c>.
    /// </summary>
    /// <returns>
    /// The transportation weight for the <c>PurchLine</c>.
    /// </returns>
    Weight tmsWeight()
    {
        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            return this.PdsCWQty * this.inventTable().grossWeight();
        }

        return this.inventTable().grossWeight() * this.QtyOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDiscountAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total discount amount.
    /// </summary>
    /// <returns>
    /// The total discount amount.
    /// </returns>
    public Amount totalDiscountAmount()
    {
        Amount          totalDiscountAmount;
        PurchTable      purchTable;

        purchTable = this.purchTable();

        totalDiscountAmount = (purchTable.DiscPercent  && this.endDisc()) ?
                              CurrencyExchangeHelper::amount(this.calcLineAmountExclTax() * purchTable.DiscPercent / 100, this.CurrencyCode) :
                              0;

        return totalDiscountAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    PurchLineType type(PurchTable _purchTable = this.purchTable())
    {
        return PurchLineType::construct(this, _purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>underDeliveryPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the allowed under-delivery percent.
    /// </summary>
    /// <returns>
    /// The under-delivery percent that is defined on the purchase order line if under-delivery is allowed;
    /// otherwise, 0.
    /// </returns>
    public Percent underDeliveryPct()
    {
        if (!PurchParameters::find().SubDelivery)
        {
            return 0;
        }

        return this.UnderDeliveryPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitConvertInvent2Purch</Name>
				<Source><![CDATA[
    PurchQty unitConvertInvent2Purch(InventQty _inventQty)
    {
        return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                     this.InventDimId,
                                                                                     _inventQty,
                                                                                     this.inventTable().inventUnitId(),
                                                                                     this.PurchUnit,
                                                                                     NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitConvertPurch2Invent</Name>
				<Source><![CDATA[
    PurchQty unitConvertPurch2Invent(PurchQty _purchQty)
    {
        if (this.ItemId)
        {
            return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                         this.InventDimId,
                                                                                         _purchQty,
                                                                                         this.PurchUnit,
                                                                                         this.inventTable().inventUnitId(),
                                                                                         NoYes::Yes);
        }
        return _purchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unLinkAgreementDeliveryDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the link to the agreement line is valid after changes have been made; if not, the
    /// user is given an option to remove the link to the associated agreement.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the delivery date field that has been changed.
    /// </param>
    public void unLinkAgreementDeliveryDates(FieldId _fieldId)
    {
        if (this.RecId
            && !this.isTmp()
            && this.purchTable().MatchingAgreement
            && !this.refreshAgreementLink(new AgreementAutolinkHelperPurchLine()))
        {
            this.unlinkAgreementLineDeliveryDates(_fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unlinkAgreementLineDeliveryDates</Name>
				<Source><![CDATA[
    /// <summary>
    ///     The user is given an option to remove the link to the associated agreement.
    /// </summary>
    /// <param name="_fieldId">
    ///     The field ID of the delivery date field that has been changed.
    /// </param>
    private void unlinkAgreementLineDeliveryDates(FieldId _fieldId)
    {
        PurchLine                           purchLineOrig;
        boolean                             canRecalculatePrices = true;
        PurchTable                          purchTable;
        InterCompanyEndpointActionPolicy    interCompanyEndpointActionPolicy;

        if (this.unLinkAgreementLinePrompt(_fieldId)
            && this.LineDeliveryType != LineDeliveryType::DeliveryLine)
        {
            purchTable = this.purchTable();
            if (purchTable.isInterCompanyOrder())
            {
                interCompanyEndpointActionPolicy = purchTable.interCompanyEndpointActionPolicy();

                canRecalculatePrices = interCompanyEndpointActionPolicy.PriceDiscountSearch ? true : false;
            }
            if (canRecalculatePrices
                && this.doReCalcPricesFromBasePrompt())
            {
                purchLineOrig.data(this);
                PurchLine::modifyPurchQty(this, this.inventDim());
                this.(_fieldId) = purchLineOrig.(_fieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unLinkAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the links between the purchase order line and the agreement line.
    /// </summary>
    /// <param name="_updateLine">
    /// A Boolean value that indicates whether to execute update for a <c>PurchLine</c> buffer; optional.
    /// </param>
    public void unLinkAgreementLine(boolean _updateLine = false)
    {
        AgreementLineReleasedLine agreementLineReleasedLine;

        // Set Price Discount Change Policy originated by PriceDiscSystemSource::Agreement.
        this.setPriceDiscChangePolicy(PriceDiscSystemSource::Agreement);
        if (this.ManualEntryChangepolicy
            && this.SystemEntryChangePolicy)
        {
            this.PriceDiscResultFields::mergerPriceDiscPolicies(ModuleSalesPurch::Purch);
        }

        switch (this.LineDeliveryType)
        {
            case LineDeliveryType::OrderLineWithMultipleDeliveries:
                AgreementLineReleasedLine::unlinkPurchDeliverySchedule(this.InventTransId);
                this.reread();
                break;
            case LineDeliveryType::DeliveryLine:
                AgreementLineReleasedLine::unlinkPurchDeliverySchedule(this.InventTransId);
                break;
            default:
                ttsbegin;

                if (this.RecId)
                {
                    delete_from agreementLineReleasedLine
                        where agreementLineReleasedLine.PurchLineInventTransId == this.InventTransId
                           && agreementLineReleasedLine.PurchLineDataAreaId    == this.DataAreaId
                           && agreementLineReleasedLine.ReferenceRelationType  == tableNum(PurchLine);
                }

                this.MatchingAgreementLine = 0;

                if (_updateLine)
                {
                    this.update();
                }

                ttscommit;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unLinkAgreementLinePrompt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prompts whether the user wants to delete the link between the agreement line and the purchase order
    /// line in a text box.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field that has the changes that introduced a conflict in the relation to the
    /// linked agreement line; optional.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the field that has changes that introduced a conflict in the relation to the linked
    /// agreement line; optional.
    /// </param>
    /// <param name="_doUpdate">
    /// Boolean indicating if an update of the purchase order line should be performed when unlinking the agreement line; optional.
    /// </param>
    /// <returns>
    /// true if the user wants to delete the link between the agreement line and the purchase order line;
    /// otherwise, false.
    /// </returns>
    public boolean unLinkAgreementLinePrompt(FieldId _fieldId = 0, TableId _tableId = tableNum(PurchLine), boolean _doUpdate = true)
    {
        boolean     unlink;
        DictField   dictField;
        PurchLine   localPurchLine;

        void unlink()
        {
            this.unLinkAgreementLine();
            unlink = true;
        }

        if (_fieldId)
        {
            dictField = new DictField(_tableId,_fieldId);
            unlink    = 
                this.canUnlinkAgreementLineByField(dictField);
              

            if (unlink)
            {
                this.unLinkAgreementLine();
            }
            else
            {
                if (_tableId == tableNum(InventDim))
                {
                    _fieldId = fieldNum(PurchLine, InventDimId);
                }

                if (this.RecId)
                {
                    this.(_fieldId) = this.orig().(_fieldId);
                }
                else
                {
                    localPurchLine.con2buf(this.buf2con());
                    localPurchLine.initFromAgreementLine(AgreementLine::find(localPurchLine.MatchingAgreementLine));
                    this.(_fieldId) = localPurchLine.(_fieldId);
                }
            }
        }
        else
        {
            if (this.canUnlinkAgreementLine())
            {
                // The price discount fixed policies will block recalculation of certain TA values when a sales line is related to an agreement hence, we need to unlink before recalculation.
                unlink();

                // Run the price discount policy dialog in order to let the user determine which agreement values to recalculate.
                this.runPriceDiscPolicyDialog(0, false, true);

                if (PurchTableUnlinkAgreementAcceptUserQtyFlight::instance().isEnabled())
                {
                    PurchLine::modifyPurchQty(this, this.inventDim(), true, InventMovementQuantityErrorCorrectionMethods::newParametersWithMultipleQtyCheck(true, false, false, false));
                }
                else
                {
                    PurchLine::modifyPurchQty(this,this.inventDim());
                }

                if (_doUpdate)
                {
                    ttsbegin;
                    this.update();
                    ttscommit;
                }
            }
        }

        return unlink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUnlinkAgreementLineByField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an agreement line can be unlinked based on a specific field.
    /// </summary>
    /// <param name="_field">The field being considered for unlinking the agreement line.</param>
    /// <returns>True if the agreement line can be unlinked by the specified field; otherwise, false.</returns>
    [Replaceable]
    protected boolean canUnlinkAgreementLineByField(DictField _field)
    {
        if(_field == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        return Box::okCancel(strFmt(this.agreementUnlinkMessageOnFieldChange(), _field.label()),DialogButton::Cancel,"@SYS306896") == DialogButton::Ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUnlinkAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an agreement line can be unlinked.
    /// </summary>
    /// <returns>True if the agreement line can be unlinked; otherwise, false.</returns>
    [Replaceable]
    protected boolean canUnlinkAgreementLine()
    {
        return Box::yesNo(this.agreementUnlinkMessageOnRemovingLink(),DialogButton::No) == DialogButton::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementUnlinkMessageOnFieldChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message shown for user confirmation of unlinking agreement from the purchase order, triggered due to a field value change.
    /// </summary>
    /// <returns>The message.</returns>
    protected str agreementUnlinkMessageOnFieldChange()
    {
        return "@SYS306897";
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementUnlinkMessageOnRemovingLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message shown for user confirmation when manually unlinking agreement from the purchase order.
    /// </summary>
    /// <returns>The message.</returns>
    protected str agreementUnlinkMessageOnRemovingLink()
    {
        return "@SYS306910";
    }

]]></Source>
			</Method>
			<Method>
				<Name>assertReadonlyFieldsAreUnchanged</Name>
				<Source><![CDATA[
    private void assertReadonlyFieldsAreUnchanged(PurchLine _purchLineOrig)
    {
        //Create dedicated methods for each assert statement to get the informatio in the call stack about which field was changed
        this.assertInventTransIdIsUnchanged(_purchLineOrig);
        this.assertItemIdIsUnchanged(_purchLineOrig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assertInventTransIdIsUnchanged</Name>
				<Source><![CDATA[
    private void assertInventTransIdIsUnchanged(PurchLine _purchLineOrig)
    {
        Debug::assert(_purchLineOrig.InventTransId == this.InventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assertItemIdIsUnchanged</Name>
				<Source><![CDATA[
    private void assertItemIdIsUnchanged(PurchLine _purchLineOrig)
    {
        Debug::assert(_purchLineOrig.ItemId == this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>PurchLine</c> record.
    /// </summary>
    /// <param name="dropInvent">
    /// A Boolean value that indicates whether the inventory movement that is associated with the line must
    /// be updated; optional; false by default.
    /// </param>
    /// <param name="updateOrderLineOfDeliverySchedule">
    /// A Boolean value that indicates whether to update the order line after updating its delivery line;
    /// optional; true by default. Parameter is obsolete.
    /// </param>
    /// <param name="updatePurchTableDropShipStatus">
    /// A Boolean value that indicates whether the drop shipment status should be updated for all lines on the purchase order;
    /// optional; true by default.
    /// </param>
    public void update(boolean  dropInvent                         = false,
                       boolean  updateOrderLineOfDeliverySchedule  = true,
                       boolean  updatePurchTableDropShipStatus     = true)
    {
        if (!updateOrderLineOfDeliverySchedule)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        PurchLineSkipBusinessLogicContext purchLineSkipBusinessLogicContext = PurchLineSkipBusinessLogicContext::current();

        if (purchLineSkipBusinessLogicContext && purchLineSkipBusinessLogicContext.parmSkipUpdate())
        {
            super();
            return;
        }

        PurchLine               purchLineOrig               = this.extensionOrig();
        InterCompanySkipUpdate  interCompanySkipUpdate      = this.SkipUpdate;
        NoYes                   skipDeliveryScheduleUpdate  = this.SkipDeliveryScheduleUpdate;

        PurchTable  purchTable = this.purchTable(true);
        PurchTable  purchTableOrig;
        purchTableOrig.data(purchTable);

        #ISOcountryRegionCodes

        this.assertReadonlyFieldsAreUnchanged(purchLineOrig);

        if (!this.allowUpdateWithQualityOrder())
        {
            throw error("@SYS113930");
        }

        PurchInstrumentation instrumentation = PurchInstrumentation::newInstrumentation(funcName(), '0');
        TradeInstrumentationStopwatch stopWatch = TradeInstrumentationStopwatch::newStopwatch();
        PurchOrderProcessState purchOrderProcessState = PurchOrderProcessState::instance();

        PurchPurchaseOrderInstrumentationActivities purchaseOrderActivities = PurchInstrumentationLogger::createLogger(tableStr(PurchLine)).purchPurchaseOrderActivities();

        using (var activityContext = purchaseOrderActivities.update(this))
        {
            boolean refreshAllLines;

            try
            {
                purchOrderProcessState.startLineUpdateProcess();
            
                PurchLineType purchLineType = this.type(purchTable);
 
                purchLineType.updating();

                PurchLine::logMeasure(instrumentation, classStr(PurchLineType), methodStr(PurchLineType, updating), stopWatch);

                PurchTotalsSummaryController purchTotalsSummaryController;

                if (this.mustExecutePurchTotalSummary())
                {
                    purchTotalsSummaryController = PurchTotalsSummaryController::construct(this.PurchId);
                    purchTotalsSummaryController.checkFields(this);
                    PurchLine::logMeasure(instrumentation, classStr(PurchTotalsSummaryController), methodStr(PurchTotalsSummaryController, checkFields), stopWatch);
                }

                boolean             whsEnabled = WHSInventEnabled::exist(this.ItemId);
                boolean             tmsEnabled = TMSInventEnabled::exist(this.ItemId);
                boolean             isCWItem;

                InventTransIdSum    inventTransIdSumDelivery;
                InventHandlingQty   origTotalQtyForLoad;

                if (whsEnabled || tmsEnabled)
                {
                    VersioningDocumentState purchTableState = this.purchTable().DocumentState;

                    inventTransIdSumDelivery = InventTransIdSum::newTransOriginId(InventTransOrigin::findByInventTransId(this.InventTransId).RecId);

                    isCWItem = PdsGlobal::pdsIsCWItem(this.ItemId);

                    if (isCWItem)
                    {
                        origTotalQtyForLoad = inventTransIdSumDelivery.pdsCWReceipt() + inventTransIdSumDelivery.pdsCWIssue();
                    }
                    else
                    {
                        origTotalQtyForLoad = inventTransIdSumDelivery.receipt() + inventTransIdSumDelivery.issue();
                    }

                    if (purchTableState == VersioningDocumentState::Rejected
                        && origTotalQtyForLoad == 0)
                    {
                        if (isCWItem)
                        {
                            origTotalQtyForLoad = purchLineOrig.PdsCWRemainInventPhysical;
                        }
                        else
                        {
                            origTotalQtyForLoad = purchLineOrig.RemainInventPhysical;
                        }
                    }

                    PurchLine::logMeasure(instrumentation, classStr(InventTransIdSum), methodStr(InventTransIdSum, issue), stopWatch);
                }
                
                if (!this.SkipShipReceiptDateCalculation && this.DeliveryPostalAddress != this.orig().DeliveryPostalAddress)
                {
                    this.calculateRequestedAndConfirmedShipAndReceiptDate(this.RequestedShipDate, this.ConfirmedShipDate);
                }

                boolean forceInterCompanyMirror = this.SyncIntercompanySalesLine;

                purchLineType.updatePurchStatus(purchLineOrig, null, false);
                PurchLine::logMeasure(instrumentation, classStr(PurchLineType), methodStr(PurchLineType, updatePurchStatus), stopWatch);

                boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        
                if (countryRegion_RU)
                {
                    this.setPostingProfile_RU();
                    if (!this.MatchingAgreementLine && this.MatchingAgreementLine != purchLineOrig.MatchingAgreementLine)
                    {
                        this.DefaultDimension = AgreementHeaderExt_RU::clearAgreementDimension(this.DefaultDimension);
                    }
                }

                if (forceInterCompanyMirror
                    || (this.SkipUpdate != InterCompanySkipUpdate::InterCompany && this.SkipUpdate != InterCompanySkipUpdate::Both))
                {
                    var syncEngine = purchLineType.interCompanySyncEngine();
                    syncEngine.forceSync(forceInterCompanyMirror);
                    syncEngine.synchronize();
                    PurchLine::logMeasure(instrumentation, classStr(InterCompanySyncPurchLineType), methodStr(InterCompanySyncPurchLineType, synchronize), stopWatch);
                }

                InventUpd_Estimated estimated;

                // For category based lines we do not have an item and inventory transaction may never be created.
                // For non-inventoried items InventUpd should still be invoked since it deletes transactions when QtyOrdered is set to 0.
                boolean isStocked = this.isStocked();
                if (!dropInvent && isStocked && this.mustUpdateInventory(purchLineType) && !VendTableRenamePrimaryKeyContext::isEnabled())
                {
                    estimated = purchLineType.updateInventoryOnUpdate();
                    if (this.ProjId && FeatureStateProvider::isFeatureEnabled(ProjEnableInventoryMarkingTelemetryFlight::instance()))
                    {
                        this.logTelemetryForProject('update');
                    }
                }

                if (this.SkipUpdate != InterCompanySkipUpdate::Internal && this.SkipUpdate != InterCompanySkipUpdate::Both)
                {
                    if (!purchLineType.isChangeRequestRequired() || this.shouldSyncPOwithSOForProject(purchLineType))
                    {
                        purchLineType.saveSynchronizedSalesLine(purchLineOrig, false);
                        PurchLine::logMeasure(instrumentation, classStr(PurchLineType), methodStr(PurchLineType, saveSynchronizedSalesLine), stopWatch);
                    }
                }

                if (this.mustUpdatePurchaseOrder())
                {
                    purchTable.reread();
                    refreshAllLines = this.updatePurchTable(purchTable, purchLineOrig, false);
                    PurchLine::logMeasure(instrumentation, tableStr(PurchLine), tableMethodStr(PurchLine, updatePurchTable), stopWatch);
                }

                // Update the drop ship status
                this.updateDropShipStatus(purchLineOrig, purchTable, purchTableOrig);
                PurchLine::logMeasure(instrumentation, tableStr(PurchLine), tableMethodStr(PurchLine, updateDropShipStatus), stopWatch);

                if (this.isConsignmentOrder() && !this.checkChangedFieldsForConsignmentAreValid(purchLineOrig))
                {
                    throw error("@SYS18447");
                }

                // For non-inventoried lines, the Quantity being updated should be checked.
                // The same check must be performed for lines with stocked items when change request is enabled as the inventory is first updated on post.
                if (!this.isStocked() || purchLineType.isChangeRequestRequired())
                {
                    if (!purchLineType.checkQuantityUpdateValid())
                    {
                        throw error("@SYS18447");
                    }

                    if (!purchLineType.isChangeRequestRequired())
                    {
                        purchLineType.updatePendingRegistrationsNonStocked(purchLineType.isPendingRegistrationsToBeCreated());
                        PurchLine::logMeasure(instrumentation, classStr(PurchLineType), methodStr(PurchLineType, updatePendingRegistrationsNonStocked), stopWatch);
                    }
                }

                this.SkipUpdate = InterCompanySkipUpdate::No;
                this.IsModified = NoYes::Yes;

                if (this.WorkflowState == TradeWorkflowState::Completed)
                {
                    this.updateWorkflowState(TradeWorkflowState::NotSubmitted);
                    PurchLine::logMeasure(instrumentation, tableStr(PurchLine), tableMethodStr(PurchLine, updateWorkflowState), stopWatch);
                }

                this.checkInvoiceConstraints(purchLineOrig);

                if (this.MatchingAgreementLine != purchLineOrig.MatchingAgreementLine)
                {
                    if (this.MatchingAgreementLine)
                    {
                        purchLineType.associateWithAgreementLine();
                        PurchLine::logMeasure(instrumentation, classStr(PurchLineType), methodStr(PurchLineType, associateWithAgreementLine), stopWatch);
                    }
                    else
                    {
                        this.unLinkAgreementLine();
                        PurchLine::logMeasure(instrumentation, tableStr(PurchLine), tableMethodStr(PurchLine, unLinkAgreementLine), stopWatch);
                    }
                }

                if (BrazilParameters::isEnabled())
                {
                    if (this.inventDim().InventSiteId != purchLineOrig.inventDim().InventSiteId)
                    {
                        this.inventSiteChanged_BR();
                    }

                    this.updateFiscalInfo_BR(purchLineOrig);
                    PurchLine::logMeasure(instrumentation, tableStr(PurchLine), tableMethodStr(PurchLine, updateFiscalInfo_BR), stopWatch);
                }

                if (this.mcrOrderLine2PriceHistoryRef != purchLineOrig.mcrOrderLine2PriceHistoryRef)
                {
                    MCROrderLine2PriceHistoryRef::deleteRef(purchLineOrig.mcrOrderLine2PriceHistoryRef);
                    PurchLine::logMeasure(instrumentation, tableStr(MCROrderLine2PriceHistoryRef), tableStaticMethodStr(MCROrderLine2PriceHistoryRef, deleteRef), stopWatch);
                }

                if (this.LinePercent != purchLineOrig.LinePercent || this.MultiLnPercent != purchLineOrig.MultiLnPercent)
                {
                    this.DiscPercent = this.discPercent();
                    PurchLine::logMeasure(instrumentation, tableStr(PurchLine), tableMethodStr(PurchLine, discPercent), stopWatch);
                }

                if (this.LineDisc != purchLineOrig.LineDisc || this.MultiLnDisc != purchLineOrig.MultiLnDisc)
                {
                    this.DiscAmount = this.discAmount();
                    PurchLine::logMeasure(instrumentation, tableStr(PurchLine), tableMethodStr(PurchLine, discAmount), stopWatch);
                }

                purchaseOrderActivities.logPurchaseOrderLine(activityContext, purchTable, this, dropInvent, isStocked);

                if (!this.InventTransId && PurchValidateInventTransIdFlight::instance().isEnabled())
                {
                    throw error(strFmt("@SCM:EmptyInventTransIdNotAllowed", fieldId2Pname(tableNum(PurchLine), fieldNum(PurchLine, InventTransId))));
                }

                super();

                PurchLine::logMeasure(instrumentation, tableStr(PurchLine), tableMethodStr(PurchLine, update), stopWatch);

                this.updateAssessableValueAndWriteForDataSource_IN(this.LineAmount != purchLineOrig.LineAmount);

                this.SysExtensionSerializerMap::postUpdate();

                PurchLine::logMeasure(instrumentation, tableStr(SysExtensionSerializerMap), tableMethodStr(SysExtensionSerializerMap, postUpdate), stopWatch);

                this.updateInventoryReservation(estimated);

                if (estimated)
                {
                    PurchLine::logMeasure(instrumentation, classStr(InventUpd_Estimated), methodStr(InventUpd_Estimated, updateReservation), stopWatch);
                }

                if ((this.PurchStatus  != purchLineOrig.PurchStatus
                     || this.ConfirmedDlv != purchLineOrig.ConfirmedDlv)
                    && !PurchTableStatusDelayUpdate::instance().isDelayUpdating(this.PurchId, this.DataAreaId))
                {
                    purchTable.updateStatusFromPurchLines();
                    PurchLine::logMeasure(instrumentation, tableStr(PurchTable), tableMethodStr(PurchTable, updateStatusFromPurchLines), stopWatch);
                }

                if (this.LineDeliveryType == LineDeliveryType::DeliveryLine
                && !skipDeliveryScheduleUpdate
                && (   this.PurchQty       != purchLineOrig.PurchQty
                    || this.PurchStatus    != purchLineOrig.PurchStatus
                    || this.DeliveryDate   != purchLineOrig.DeliveryDate
                    || this.ConfirmedDlv   != purchLineOrig.ConfirmedDlv))
                {
                    purchLineType.updateOrderLineOfDeliverySchedule();
                    PurchLine::logMeasure(instrumentation, classStr(PurchLineType), methodStr(PurchLineType, updateOrderLineOfDeliverySchedule), stopWatch);
                }

                if (this.shouldSyncPOwithSOForProject(purchLineType))
                {
                    purchLineType.saveSynchronizedSalesLine(purchLineOrig, true);
                    PurchLine::logMeasure(instrumentation, classStr(PurchLineType), methodStr(PurchLineType, saveSynchronizedSalesLine), stopWatch);
                }

                if (this.inventDim().inventDimId != purchLineOrig.inventDim().inventDimId)
                {
                    this.updateMarkupTransBasedOnIntercompanySkipUpdate();
                }

                if (FinTagConfiguration::isFinTagConfigurationSet(this.DataAreaId)
                    && PurchaseOrderFinTagFeature::isEnabled() && this.FinTag != purchLineOrig.FinTag)
                {
                    AccountingDistributionFinTagPropagator::updateForLine(this.SourceDocumentLine, this.FinTag);
                }

                boolean isDistributionUpdateNeeded = this.isDistributionUpdateNeeded(purchLineOrig);
                if (isDistributionUpdateNeeded)
                {
                    if (purchTable.InclTax &&
                    (this.hasAmountChanged(purchLineOrig) || this.hasTaxChanged(purchLineOrig)))
                    {
                        PurchTotals::newPurchTable(purchTable).calc(false, false, true);
                        PurchLine::logMeasure(instrumentation, classStr(PurchTotals), methodStr(PurchTotals, calc), stopWatch);
                    }

                    if (TaxSolutionScopeIntegrationUtil::IsCompanyEnabled())
                    {
                        this.markCurrentTaxDocumentTaxStatusDirty();
                        PurchLine::logMeasure(instrumentation, tableStr(PurchLine), tableMethodStr(PurchLine, markCurrentTaxDocumentTaxStatusDirty), stopWatch);
                    }

                    if (countryRegion_RU)
                    {
                        if (!DimensionDefaultFacade::areEqual(this.DefaultDimension, purchLineOrig.DefaultDimension))
                        {
                            this.resetDistribution_RU();
                            PurchLine::logMeasure(instrumentation, tableStr(PurchLine), tableMethodStr(PurchLine, resetDistribution_RU), stopWatch);
                        }
                    }

                    purchLineType.deleteTaxUncommitted((!this.TaxGroup || !this.TaxItemGroup));

                    if (!PurchLineClearFinDimForNotStockedItemFlight::instance().isEnabled())
                    {
                        SourceDocumentLineAccountingStatus sourceDocumentLineStatus = this.sourceDocumentLine().AccountingStatus;

                        if (!this.StockedProduct
                            && this.isFormDataSource()
                            && sourceDocumentLineStatus != SourceDocumentLineAccountingStatus::Draft
                            && sourceDocumentLineStatus != SourceDocumentLineAccountingStatus::Canceled
                            && PurchLineDistributionNotStockedWarningFlight::instance().isEnabled()
                            && this.isFinancialDimensionClearedOut(purchLineOrig.DefaultDimension))
                        {
                            warning("@SCM:AccountingDistributionNotAffectedByThisChange");
                        }
                    }

                    purchLineType.updateDistribution();
                    PurchLine::logMeasure(instrumentation, classStr(PurchLineType), methodStr(PurchLineType, updateDistribution), stopWatch);
                }

                if (TaxWithholdParameters_IN::checkTaxParameters()
                && (this.isWithholdUpdateNeeded_IN(purchLineOrig)
                    || isDistributionUpdateNeeded))
                {
                    purchLineType.deleteTaxWithholdUncommitted_IN();
                    PurchLine::logMeasure(instrumentation, classStr(PurchLineType), methodStr(PurchLineType, deleteTaxWithholdUncommitted_IN), stopWatch);
                }

                if (TaxWithholdingGlobalFeature::isCalcWHTInInvoiceEnabled() &&
                    (this.isWithholdUpdated(purchLineOrig) || isDistributionUpdateNeeded))
                {
                    purchLineType.deleteTaxWithholdUncommitted();
                }

                this.updateSalesLineCommittedCost(purchLineOrig);

                if (updatePurchTableDropShipStatus)
                {
                    this.updateDropShipStatusForPurchaseOrder(purchTable, purchTableOrig);
                    PurchLine::logMeasure(instrumentation, tableStr(PurchLine), tableMethodStr(PurchLine, updateDropShipStatusForPurchaseOrder), stopWatch);
                }

                if (interCompanySkipUpdate == InterCompanySkipUpdate::No
                    && (purchLineOrig.PurchQty != this.PurchQty || purchLineOrig.PurchUnit != this.PurchUnit))
                {
                    purchLineType.interCompanyCalcDisc();
                    PurchLine::logMeasure(instrumentation, classStr(PurchLineType), methodStr(PurchLineType, interCompanyCalcDisc), stopWatch);
                }

                if (InventPostingParameters::find().TaxCode && purchLineOrig.TaxGroup != this.TaxGroup && this.existPurchaseRelatedPostingRulesWithTax())
                {
                    this.resetDistributions();
                    PurchLine::logMeasure(instrumentation, tableStr(PurchLine), tableMethodStr(PurchLine, resetDistributions), stopWatch);
                }

                // Update load line and tag table
                if (whsEnabled || tmsEnabled)
                {
                    InventHandlingQty newTotalQtyForLoad;
                    VersioningDocumentState purchTableState = this.purchTable().DocumentState;

                    if (purchTableState == VersioningDocumentState::Draft
                    || purchTableState == VersioningDocumentState::InReview)
                    {
                        if (origTotalQtyForLoad)
                        {
                            if (isCWItem)
                            {
                                newTotalQtyForLoad = origTotalQtyForLoad - purchLineOrig.PdsCWRemainInventPhysical + this.PdsCWRemainInventPhysical;
                            }
                            else
                            {
                                newTotalQtyForLoad = origTotalQtyForLoad - purchLineOrig.RemainInventPhysical + this.RemainInventPhysical;
                            }
                        }
                        else
                        {
                            if (isCWItem)
                            {
                                origTotalQtyForLoad = purchLineOrig.PdsCWRemainInventPhysical;
                                newTotalQtyForLoad  = this.PdsCWRemainInventPhysical;
                            }
                            else
                            {
                                origTotalQtyForLoad = purchLineOrig.RemainInventPhysical;
                                newTotalQtyForLoad  = this.RemainInventPhysical;
                            }
                        }
                    }
                    else if (purchTableState == VersioningDocumentState::Rejected)
                    {
                        if (isCWItem)
                        {
                            newTotalQtyForLoad = this.PdsCWRemainInventPhysical;
                        }
                        else
                        {
                            newTotalQtyForLoad = this.RemainInventPhysical;
                        }
                    }
                    else
                    {
                        inventTransIdSumDelivery = InventTransIdSum::newTransOriginId(InventTransOrigin::findByInventTransId(this.InventTransId).RecId);
                        if (isCWItem)
                        {
                            newTotalQtyForLoad = inventTransIdSumDelivery.pdsCWReceipt() + inventTransIdSumDelivery.pdsCWIssue();
                        }
                        else
                        {
                            newTotalQtyForLoad = inventTransIdSumDelivery.receipt() + inventTransIdSumDelivery.issue();
                        }
                    }

                    NoYesId autoCreate = (whsEnabled && WHSParameters::find().AutoCreateLoadPO) ||
                                         (tmsEnabled && TMSParameters::find().AutoCreateLoadPO);

                    UnitOfMeasureSymbol purchLineOrigUnit = isCWItem ? purchLineOrig.pdsCWUnitId() : purchLineOrig.PurchUnit;

                    WHSSrcLineChangeLoadLineUpdater srcLineChangeLoadLineUpdater = WHSSrcLineChangeLoadLineUpdater::newFromUpdateParameters(this,
                                                                                                                                        this.InventTransId,
                                                                                                                                        this.InventDimId,
                                                                                                                                        purchLineOrig.InventDimId,
                                                                                                                                        newTotalQtyForLoad,
                                                                                                                                        origTotalQtyForLoad,
                                                                                                                                        isCWItem ? this.pdsCWUnitId() : this.PurchUnit,
                                                                                                                                        purchLineOrigUnit,
                                                                                                                                        autoCreate);

                    srcLineChangeLoadLineUpdater.updateLoadLines();

                    this.updateLoadStatusWhenCancellingDeliverRemainder(purchLineOrig);

                    using (var updateQtyLeftToLoad = WHSPurchLineQtyLeftUpdateContext::construct())
                    {
                        InventQty loadlLineDiff = srcLineChangeLoadLineUpdater.getloadLineDiffHandlingQty() ? srcLineChangeLoadLineUpdater.getloadLineDiffHandlingQty() : (newTotalQtyForLoad - origTotalQtyForLoad);

                        if (loadlLineDiff
                            && this.RemainInventPhysical == origTotalQtyForLoad)
                        {
                            updateQtyLeftToLoad.parmUpdateQtyLeftToLoad(true);
                        }

                        WHSPurchLineUpdater purchLineUpdater = WHSSourceLineUpdater::newFromSourceLineTableBuffer(this);
                        
                        purchLineUpdater.setHandlingUpdateQuantities(this, origTotalQtyForLoad, purchLineOrigUnit, loadlLineDiff);

                        purchLineUpdater.updateTable();
                        PurchLine::logMeasure(instrumentation, classStr(WHSPurchLineUpdater), methodStr(WHSPurchLineUpdater, updateTable), stopWatch);
                    }
                }

                if (this.mustExecutePurchTotalSummary())
                {
                    this.Tax1099RecId = Tax1099BoxDetail::deleteOrClear1099Detail(Tax1099Fields::find(this.Tax1099Fields).Tax1099Box, this.Tax1099RecId);

                    purchTotalsSummaryController.onUpdate(this);

                    // If the PurchCommitmentLine_PSN or BudgetReservationLine_PSN fields have been changed, then reset the distributions
                    if ((purchLineOrig.PurchCommitmentLine_PSN != this.PurchCommitmentLine_PSN)
                    || (purchLineOrig.BudgetReservationLine_PSN != this.BudgetReservationLine_PSN))
                    {
                        this.resetDistributions();
                        PurchLine::logMeasure(instrumentation, tableStr(PurchLine), tableMethodStr(PurchLine, resetDistributions), stopWatch);
                    }
                }

                if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
                {
                    this.checkCrossdocking();
                    PurchLine::logMeasure(instrumentation, tableStr(PurchLine), tableMethodStr(PurchLine, checkCrossdocking), stopWatch);
                }

                purchLineType.updated(purchLineOrig);
                PurchLine::logMeasure(instrumentation, classStr(PurchLineType), methodStr(PurchLineType, updated), stopWatch);
            }
            finally
            {
                if (purchOrderProcessState)
                {
                    purchOrderProcessState.completeLineUpdateProcess();
                }
            }


            // <GTE>
            if (TaxSolutionScopeIntegrationUtil::IsCompanyEnabled())
            {
                if (this.SalesPurchJournalLine::taxRecalculationNeeded(purchLineOrig))
                {
                    this.markCurrentTaxDocumentTaxStatusDirty();
                    PurchLine::logMeasure(instrumentation, tableStr(PurchLine), tableMethodStr(PurchLine, markCurrentTaxDocumentTaxStatusDirty), stopWatch);
                }
            }
            // </GTE>

            if (refreshAllLines && FormDataUtil::getFormDataSource(this))
            {
                this.refreshFormDataSource();
                PurchLine::logMeasure(instrumentation, tableStr(PurchLine), tableMethodStr(PurchLine, refreshFormDataSource), stopWatch);
            }

            instrumentation.logMeasures();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSyncPOwithSOForProject</Name>
				<Source><![CDATA[
    protected boolean shouldSyncPOwithSOForProject(PurchLineType _purchLineType)
    {
        boolean ret = false;
        if (this.ProjId
            && this.InventRefId
            && SalesLine::findInventTransId(this.InventRefTransId).RecId
            && this.DeliveryType != TradeLineDlvType::DropShip
            &&(!_purchLineType.isChangeRequestRequired() || FeatureStateProvider::isFeatureEnabled(ProjSyncPurchLineAndSalesLineOnPurchLineUpdateFeature::instance()))
            && !_purchLineType.isPurchTableInterCompanyOrder())
        {
            if (this.isStocked())
            {
                ret = true;
            }
            else //For non-stocked items
            {
                ret = ProjEnableItemRequirementForNonStockedProductFeature::isEnabled()
                    && !this.isCategoryBased();
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshFormDataSource</Name>
				<Source><![CDATA[
    private void refreshFormDataSource()
    {
        PurchLine       currentPurchLine;
        currentPurchLine.data(this);

        FormDataSource  dataSource = FormDataUtil::getFormDataSource(this);
        FormObjectSet   formObjectSet = FormDataUtil::getFormDataSource(this);

        // Use reread() to update each purchLine to the latest value from datasource in the form
        // research() will cause side effects.
        if (formObjectSet.formRun())
        {
            formObjectSet.formRun().lockWindowUpdate(true);
        }
            
        int i = 0;
        while (i <= dataSource.numberOfRowsLoaded())
        {
            ++i;

            PurchLine localPurchLine = dataSource.cursor(i);
            if (localPurchLine.RecId)
            {
                dataSource.positionToRecord(localPurchLine);
                dataSource.reread();
            }
        }

        dataSource.positionToRecord(currentPurchLine);

        if (formObjectSet.formRun())
        {
            formObjectSet.formRun().lockWindowUpdate(false);
        }

        if (this.RecId != currentPurchLine.RecId)
        {
            // if the original record is lost try to research again and find it.
            dataSource.research();
            dataSource.positionToRecord(currentPurchLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>forceIntercompanySynchronization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Force intercompany synchronization of purchase order line.
    /// </summary>
    public void forceIntercompanySynchronization()
    {
        try
        {
            this.SyncIntercompanySalesLine = NoYes::Yes;

            this.update();
        }
        finally
        {
            this.SyncIntercompanySalesLine = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWithoutUpdatingDropShipStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update purchase order line without updating drop ship status.
    /// </summary>
    public void updateWithoutUpdatingDropShipStatus()
    {
        this.update(false, true, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWithoutUpdatingDeliveryScheduleLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update purchase order line without updating the associated delivery schedule lines.
    /// </summary>
    /// <param name="dropInvent">
    /// A Boolean value that indicates whether the inventory movement that is associated with the line must
    /// be updated; optional.
    /// </param>
    /// <remarks>
    /// When calling this method, it is the responsibility of the caller to update the order line.
    /// This is typically done when updating multiple delivery lines in a single transaction and the order line recalculation is performed only once.
    /// </remarks>
    public void updateWithoutUpdatingDeliveryScheduleLines(boolean _dropInvent = false)
    {
        try
        {
            this.SkipDeliveryScheduleUpdate = NoYes::Yes;

            this.update(_dropInvent);
        }
        finally
        {
            this.SkipDeliveryScheduleUpdate = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Do extra updates when updating the <C>PurchLine_IN</C> record.
    /// </summary>
    public void updatePurchLine_IN()
    {
        PurchLine purchLineOrig = this.extensionOrig();
        
        if (this.hasIndirectTaxFieldChanged_IN())
        {
            this.type().deleteTaxUncommitted();
        }

        if (TaxWithholdParameters_IN::checkTaxParameters()
            && (this.isWithholdUpdateNeeded_IN(purchLineOrig)
                || this.isDistributionUpdateNeeded(purchLineOrig)))
        {
            this.type().deleteTaxWithholdUncommitted_IN();
        }

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::IsCompanyEnabled())
        {
            if (this.hasIndirectTaxFieldChanged_IN())
            {
                this.markCurrentTaxDocumentTaxStatusDirty();
            }
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchTable</Name>
				<Source><![CDATA[
    private boolean updatePurchTable(PurchTable _purchTable, PurchLine _purchLineOrig, boolean _updateDistributions)
    {
        #ISOCountryRegionCodes
        boolean ret;

        _purchTable.CovStatus  = 0;
        _purchTable.SkipUpdate = InterCompanySkipUpdate::Both;

        if (!VendTableRenamePrimaryKeyContext::isEnabled())
        {
            VersioningPurchaseOrder versioningPurchaseOrder = VersioningPurchaseOrder::newPurchaseOrder(_purchTable);

            // Skip change management validation for import order.
            if (this.skipChangeManagementProcessing(_purchTable))
            {
                versioningPurchaseOrder.parmSkipChangeRequest(true);
            }
            else if (IntentLetterContext_IT::current())
            {
                versioningPurchaseOrder.parmSkipChangeRequest(_purchTable.editAllowedByWorkflow());
            }

            ret = versioningPurchaseOrder.change(this, _purchLineOrig);
        }

        _purchTable.update(_updateDistributions);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipChangeManagementProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determined whether Change management processing should be skipped.
    /// </summary>
    /// <param name = "_purchTable">A <c>PurchTable</c> table buffer.</param>
    /// <returns>true if Change management processing should be skipped; otherwise, false.</returns>
    protected boolean skipChangeManagementProcessing(PurchTable _purchTable)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesLineCommittedCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the Committed Cost of project Item Requirement.
    /// </summary>
    /// <param name = "_purchLineOrig">
    /// The original purchase order line which is updated.
    /// </param>
    private void updateSalesLineCommittedCost(PurchLine _purchLineOrig)
    {
        if (this.ProjId && this.purchTable().isProjectSalesItemReqPO())
        {
            InventMovement inventMov_Sales;

            if (!this.InventRefId && this.purchTable().PurchStatus == PurchStatus::Canceled)
            {
                inventMov_Sales = InventMovement::construct(_purchLineOrig.salesLine());
            }
            else
            {
                inventMov_Sales = InventMovement::construct(this.salesLine());
            }

            if (inventMov_Sales.mustBeCostControlled() && inventMov_Sales.canCommittedCostBeReversed())
            {
                CostControlPosting::newCostControlPostingItem(inventMov_Sales).run(ProjCommittedCostUpdateAction::UpdateReverse);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDropShipStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates drop ship status value on the drop ship purchase order line
    /// if purchase order line status changed or the purchase order document state was changed,
    /// or if the purchase order line was newly created.
    /// </summary>
    /// <param name="_purchLineOrig">
    /// The original purchase order line which is updated.
    /// </param>
    /// <param name="_purchTable">
    /// The current purchase order.
    /// </param>
    /// <param name="_purchTableOrig">
    /// The original purchase order from before the purchase order line was updated.
    /// </param>
    public void updateDropShipStatus(PurchLine _purchLineOrig, PurchTable _purchTable, PurchTable _purchTableOrig)
    {
        // Update the drop ship status
        if (this.mcrDropShipment
            && (this.MCRDropShipStatus == MCRDropShipStatus::None
                || this.PurchStatus != _purchLineOrig.PurchStatus
                || _purchTable.DocumentState != _purchTableOrig.DocumentState))
        {
            PurchPurchaseOrderInstrumentationActivities purchaseOrderActivities = PurchInstrumentationLogger::createLogger(tableStr(PurchLine)).purchPurchaseOrderActivities();

            using (var activityContext = purchaseOrderActivities.updateDropShipStatus(this))
            {
                MCRDropShipStatus oldMCRDropShipStatus = this.MCRDropShipStatus;
                this.MCRDropShipStatus = MCRDropShipStatusUpdate::getDropShipStatus(this);

                purchaseOrderActivities.logUpdateDropShipStatus(activityContext,
                                                                oldMCRDropShipStatus,
                                                                this.MCRDropShipStatus,
                                                                _purchLineOrig.PurchStatus,
                                                                this.PurchStatus,
                                                                _purchTableOrig.DocumentState,
                                                                _purchTable.DocumentState);

                if (this.MCRDropShipStatus != oldMCRDropShipStatus
                    || !MCRDropShipStatusCheckPurchLineFlight::instance().isEnabled())
                {
                    MCRDropShipStatusUpdate::synchronizeSalesStatus(this, this.MCRDropShipStatus);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDropShipStatusForPurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates drop ship status value on all the drop ship purchase order lines that belong to the purchase order.
    /// </summary>
    /// <param name="_purchTable">
    /// The current purchase order.
    /// </param>
    /// <param name="_purchTableOrig">
    /// The original purchase order from before the purchase order line was updated.
    /// </param>
    private void updateDropShipStatusForPurchaseOrder(PurchTable _purchTable, PurchTable _purchTableOrig)
    {
        // Update the drop ship status
        if (_purchTable.mcrDropShipment && (_purchTable.DocumentState != _purchTableOrig.DocumentState))
        {
            MCRDropShipStatusUpdate::updateDropShipStatus(_purchTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFiscalInfo_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes after update is executed on original method.
    /// </summary>
    /// <param name = "_purchLineOrig">
    /// The original purchase order line which is updated.
    /// </param>
    private void updateFiscalInfo_BR(PurchLine _purchLineOrig)
    {
        if (this.cfopTable_BR != _purchLineOrig.cfopTable_BR)
        {
            this.type().updateFiscalDocumentText_BR(FiscalDocumentTextType_BR::CFOP);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventoryReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inventory reservation.
    /// </summary>
    /// <param name = "_estimated">The inventory reservation to update.</param>
    protected void updateInventoryReservation(InventUpd_Estimated _estimated)
    {
        if (_estimated)
        {
            _estimated.updateReservation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWhsCrossDock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>WHSCrossDock</c> field on the <c>WHSPurchLine</c> related table if available.
    /// </summary>
    /// <param name="_whsCrossDock">
    /// The value to set for the <c>WHSCrossDock</c> field.
    /// </param>
    /// <returns>
    /// true, if a related <c>WHSPurchLine</c> record was found and the update was done; otherwise, false.
    /// </returns>
    public boolean updateWhsCrossDock(WHSCrossDock _whsCrossDock)
    {
        boolean         ret;
        WHSPurchLine    whsPurchLine;

        ttsbegin;

        whsPurchLine = WHSPurchLine::find(this.InventTransId, true);
        if (whsPurchLine)
        {
            whsPurchLine.CrossDock = _whsCrossDock;
            whsPurchLine.update();
            ret = true;
        }

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkflowState</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method are setting the field <c>WorkflowState</c> on the current <c>PurchLine</c>
    /// </summary>
    /// <param name="_workflowState">
    ///     <c>WorkflowState</c> that the record must be updated with.
    /// </param>
    /// <param name="_editableInWorkflow">
    ///     <c>editableInWorkflow</c> that the record must be updated with.
    /// </param>
    void updateWorkflowState(TradeWorkflowState        _workflowState,
                             TradeEditableInWorkflow   _editableInWorkflow = NoYes::No)
    {
        this.WorkflowState      = _workflowState;
        this.EditableInWorkflow = _editableInWorkflow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    boolean validateDelete(boolean _interCompanyForce = false)
    {
        boolean         ok = true;
        PurchLineType   purchLineType;

        #ISOCountryRegionCodes

        ok = super();

        if (ok)
        {
            purchLineType = this.type();
            ok = purchLineType.validateDelete(_interCompanyForce);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail))
            && ok)
        {
            if (this.RetailPackageId)
                ok = checkFailed(strFmt("@RET4539",this.RetailPackageId));
        }

        if (ok
        &&  !this.whsCheckDeleteLoadline())
        {
            ok = checkFailed("@WAX5594");
        }

        if (TaxParameters::checkParameterForPosting_IN(TaxType_IN::Customs)
            &&  PurchTable::find(this.PurchId).purchTable_W().CustomsImportOrder_IN
            &&  CustomsVendBOETrans_IN::findPurchLineRecId(this.RecId).RecId)
        {
            ok = checkFailed("@GLS5764");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipValidateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the field if validation can be skipped.
    /// </summary>
    /// <param name = "_fieldId">
    ///  A <c>FieldId</c> type representing the field to be checked.
    /// </param>
    /// <returns>
    /// True if the field check was done and further validation will be skipped;
    /// otherwise false;
    /// </returns>
    protected boolean skipValidateField(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(PurchLine, InventTransId):
                if (this.PurchaseType == PurchaseType::Journal
                    || !this.isStocked())
                    // No inventory transactions so no need for consistency check to report this as error
                    return true;
                break;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the value of field.
    /// </summary>
    /// <param name="fieldId">
    ///     A FieldId type representing the field to be validated.
    /// </param>
    /// <returns>
    ///     true if the field value is valid; otherwise, false.
    /// </returns>
    public boolean validateField(FieldId  fieldId)
    {
        boolean         ok;
        PurchLineType   purchLineType;

        if (this.skipValidateField(fieldId))
        {
            return true;
        }

        if (fieldId == fieldNum(PurchLine, BudgetReservationLine_PSN))
        {
            return this.validateBudgetReservationLine_PSN();
        }

        ok = super(fieldId);

        if (ok && fieldId == fieldNum(PurchLine, ItemId))
        {
            if (WHSInventEnabled::exist(this.ItemId) && !WHSFilter::vendFilterMatch(this.VendAccount, this.ItemId))
            {
                throw error("@WAX1003");
            }
        }

        if (ok)
        {
            purchLineType = this.type();
            ok = purchLineType.validateField(fieldId);
        }

        if (ok && PublicSectorUtils::isFrenchRegulatoryEnabled() && fieldId == fieldNum(PurchLine, PurchCommitmentLine_PSN))
        {
            ok = this.checkPurchCommitmentLine();
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the parameter "_fieldName" field is valid.
    /// </summary>
    /// <param name="_fieldName">
    ///     The field name of the field to validate.
    /// </param>
    /// <param name="_arrayIndex">
    ///     The array index of the field to validate.
    /// </param>
    /// <returns>
    ///     true if the field is valid; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);
        if (ret)
        {
            switch (_fieldName)
            {
                case fieldStr(PurchLine, TaxItemGroup):
                    ret = TaxItemGroupHeading::validatePOTForGTA_IN(this.vendTable_OrderAccount(), this.TaxItemGroup);
                    break;

                case fieldStr(PurchLine, AccountingDistributionTemplate):
                    ret = PurchLine::isTemplateIdPresentInReferenceTable(this.AccountingDistributionTemplate);
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateModifyInventDim</Name>
				<Source><![CDATA[
    public boolean validateModifyInventDim(
        InventDim          _inventDim,
        FieldId            _dimFieldId)
    {
        return this.type().validateModifyInventDim(_inventDim, _dimFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean ok = true;

        ok = super();

        ok = ok && this.validateWrite_Server();

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite_Server</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates if the current <c>PurcLine</c> table buffer can be written to the database.
    /// </summary>
    /// <returns>
    ///     true if the buffer can be written; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     This method is forcing server side execution of the validation logic.
    /// </remarks>
    boolean validateWrite_Server()
    {
        boolean         ok;
        PurchLineType   purchLineType;
        container       taxCheck;
        AmountMST       totalAmt;
        AmountMST       taxAmount;

        PurchTable      purchTable;
        PurchTable_W    purchTable_W;
        #ISOCountryRegionCodes

        purchLineType = this.type();
        ok = purchLineType.validateWrite();

        if (ok)
        {
            taxAmount = this.taxByLine();
            totalAmt = this.LineAmount + taxAmount;
            taxCheck = [totalAmt, this.Tax1099Amount, this.Tax1099StateAmount, this.Tax1099Fields, this.Tax1099State];
            ok = Tax1099ElectronicCheck::tax1099EntryValidation(taxCheck);
        }

        // Verify that a tax code is derived for the given Tax Group and Tax Item Group.
        ok = ok
            && (CheckTaxGroups::Error != Tax::isValidTaxGroupIntersectionV2(
                                            this.TaxGroup,
                                            this.TaxItemGroup,
                                            Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Purchase)));

        // Verify that a withholding tax code is derived for the given Withholding tax Group and Item withholding tax Group.
        if (TaxWithholdingGlobalFeature::isCalcWHTInInvoiceEnabled())
        {
            ok = ok
                && TaxWithholdIntersection::isValidWHTGroupIntersection(
                    TaxWithholdParameters::find().CheckIntersection,
                    this.TaxWithholdGroup_TH,
                    this.TaxWithholdItemGroupHeading_TH) != TaxWithholdCheckWHTGroups::Error;
        }

        // Check to make sure the commitment line is still valid.
        // This needs to be done because it's possible one of the values verified against have changed (such as account number).
        if (ok && PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            ok = this.checkPurchCommitmentLine();
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
            && ok && TaxParameters::find().Customs_IN)
        {
            ttsbegin;

            purchTable = PurchTable::find(this.PurchId);
            purchTable_W = purchTable.purchTable_W();
            if (CustomsInvoiceRegnTrans_IN::checkInvoiceRegnComplete(this.RecId))
            {
                purchTable_W.CustomsInvoiceRegistered_IN = NoYes::Yes;
            }
            else
            {
                purchTable_W.CustomsInvoiceRegistered_IN = NoYes::No;
            }

            purchTable.packPurchTable_W(purchTable_W);
            purchTable.SysExtensionSerializerMap::postUpdate();
            ttscommit;
        }
        if (ok && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.checkLine_RU();
        }

        if (ok &&
            SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoHU]) &&
            this.purchTable().InclTax)
        {
            ok = this.salesPurchLineInterface().validateExcludeTaxFromInvoice(this.purchTable().InclTax);
        }

        if (ok && this.PdsCWQty)
        {
            ok = this.validatePurchQtyForCatchWeightItem();
        }

        if (ok)
        {
            ok = this.checkExistsInvoiceWithBudgetCheckResults();
        }

        if (ok && PurchLineClearFinDimForNotStockedItemFlight::instance().isEnabled())
        {
            ok = this.canFinancialDimentionBeCleared();
        }

        if (ok && PurchLineDefaulDimensionChangedForAccountingDistributionFlight::instance().isEnabled())
        {
            this.checkDefaultDimensionChangedForAccountingDistribution();
        }

        if (ok && BudgetControlPOModifyBlockFlight::instance().isEnabled())
        {
            if (!purchTable)
            {
                purchTable = PurchTable::find(this.PurchId);
            }

            if (purchTable.DocumentState == VersioningDocumentState::Confirmed
                && BudgetControlPurchaseOrderSettingsValidator::canUpdatedAccountingDateAffectBudget(purchTable))
            {
                ok = checkFailed((strFmt("@Budget:BudgetControlPOModifyBlockError", purchTable.AccountingDate)));
            }
        }
        
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canFinancialDimentionBeCleared</Name>
				<Source><![CDATA[
    private boolean canFinancialDimentionBeCleared()
    {
        boolean ret = true;

        if (!this.StockedProduct
            && this.isDistributionUpdateNeeded(this.orig())
            && this.isFinancialDimensionClearedOut(this.orig().DefaultDimension))
        {
            SourceDocumentLineAccountingStatus sourceDocumentLineStatus = this.sourceDocumentLine().AccountingStatus;
            
            if (sourceDocumentLineStatus != SourceDocumentLineAccountingStatus::None
                && sourceDocumentLineStatus != SourceDocumentLineAccountingStatus::Draft
                && sourceDocumentLineStatus != SourceDocumentLineAccountingStatus::Canceled)
            {
                this.DefaultDimension = this.orig().DefaultDimension;
                ret = checkFailed("@SCM:YouAreNotAllowedClearFinDimForNonStockedProductError");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDefaultDimensionChangedForAccountingDistribution</Name>
				<Source><![CDATA[
    private void checkDefaultDimensionChangedForAccountingDistribution()
    {
        if (this.RecId
            && this.PurchReqId
            && this.DefaultDimension != this.orig().DefaultDimension
            && !this.doDistributionsExist())
        {
            warning("@SCM:PurchLineDefaulDimensionChangedForAccountingDistribution");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>variencePrice</Name>
				<Source><![CDATA[
    display AmountCur variencePrice()
    {
        return this.calcLineAmount(this.varienceQty());
    }

]]></Source>
			</Method>
			<Method>
				<Name>varienceQty</Name>
				<Source><![CDATA[
    display PurchQty varienceQty()
    {
        return this.receivedInTotal() - this.PurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>varienceQtyPct</Name>
				<Source><![CDATA[
    display Percent varienceQtyPct()
    {
        if (this.PurchQty)
        {
            return (this.receivedInTotal() * 100) / this.PurchQty;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTable_OrderAccount</Name>
				<Source><![CDATA[
    VendTable vendTable_OrderAccount()
    {
        return this.purchTable().vendTable_OrderAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>warningForReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Show a warning for a line which references other entities.
    /// </summary>
    /// <returns>true if the line can be deleted; otherwise, false.</returns>
    boolean warningForReference()
    {
        str warningTxt = this.referenceWarningTxt();

        if (warningTxt && (!this.canAutoUpdatePurchLine() || !this.PurchReqId))
        {
            return Box::yesNo(warningTxt+'\n\n'+"@SYS75610",DialogButton::Yes) == DialogButton::Yes;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsCheckDeleteLoadline</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Prevent the delete of purchase lines that are already associated with a load line if the warehouse
    ///     parameter 'Automatically delete upon order delete' is not enabled.
    /// </summary>
    /// <returns>
    ///     true, if purchase line is not associated to a load; otherwise, false
    /// </returns>
    public boolean whsCheckDeleteLoadline()
    {
        boolean ret                     = true;
        WHSParameters whsParameteres    = WHSParameters::find();

        if (whsParameteres.RecId
            && !whsParameteres.AutoCleanEmptyLoadManifest
            &&  WHSLoadLine::existsForInventTransId(this.InventTransId))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsGetLoads</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>WHSLoadLine</c> record ID associated with this <c>PurchLine</c>.
    /// </summary>
    /// <returns>
    /// The <c>WHSLoadLine</c> record ID associated with this <c>PurchLine</c>.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display WHSLoadId whsGetLoads()
    {
        WHSLoadLine loadLine;
        WHSLoadId   ret;
        int         counter;

        if (this.InventTransId
        &&  (WHSInventEnabled::exist(this.ItemId)
        ||  TMSInventEnabled::exist(this.ItemId)))
        {
            // For efficiency: Check counter before inventTransId to avoid a SQL call
            while select firstOnly10 LoadId from loadLine
                where loadLine.InventTransId == this.InventTransId
            {
                ++counter;

                if (counter > 1)
                {
                    break;
                }

                ret = loadLine.LoadId;
            }

            switch (counter)
            {
                case 0:
                    ret = '';
                    break;

                case 1:
                    break;

                default:
                    ret = "@WAX402";
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadStatusWhenCancellingDeliverRemainder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>WHSLoadTable</c> record Status associated with this <c>PurchLine</c>.
    /// </summary>
    /// <param name="_purchLineOrig">
    /// A <c>PurchLine</c> record which needs to be checked for changes of Delivery Remainder quantities.
    /// </param>
    private void updateLoadStatusWhenCancellingDeliverRemainder(PurchLine _purchLineOrig)
    {
        if (_purchLineOrig.RemainPurchPhysical != 0
            && (_purchLineOrig.RemainInventPhysical != 0 || _purchLineOrig.PdsCWRemainInventPhysical != 0)
            && this.RemainPurchPhysical == 0
            && this.RemainInventPhysical == 0
            && this.PdsCWRemainInventPhysical == 0)
        {
            WHSLoadTable loadTable;
            WHSLoadLine loadLine;

            if (WHSPurchLineCancelDeliverRemainderSkipReceivedLoadStatusUpdateFlight::instance().isEnabled())
            {
                while select LoadId from loadTable
                    where loadTable.LoadStatus != WHSLoadStatus::Received
                exists join loadLine
                    where loadLine.LoadId == loadTable.LoadId
                       && loadLine.InventTransId == this.InventTransId
                {
                    WHSLoadStatusUpdater::newFromLoadId(loadTable.LoadId).updateWhenCancellingDeliverRemainder();
                }
            }
            else
            {
                while select LoadId from loadLine
                    group by LoadId
                    where loadLine.InventTransId == this.InventTransId
                {
                    WHSLoadStatusUpdater::newFromLoadId(loadLine.LoadId).updateWhenCancellingDeliverRemainder();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsItemGrossWeight</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the gross weight for an item
    /// </summary>
    /// <returns>
    ///     A decimal representing the gross weight
    /// </returns>
    public display ItemGrossWeight whsItemGrossWeight()
    {
        return this.inventTable().grossWeight();
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsItemUnitVolume</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the volume for an item
    /// </summary>
    /// <returns>
    ///     A decimal representing the item volume
    /// </returns>
    public display Volume whsItemUnitVolume()
    {
        return this.inventTable().UnitVolume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsPurchLineForInsert</Name>
				<Source><![CDATA[
    private WHSPurchLine whsPurchLineForInsert()
    {
        WHSPurchLine whsPurchLine;

        if (this.PackedWHSLine)
        {
            whsPurchLine = con2Buf(this.PackedWHSLine);
        }

        return whsPurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsVendDeliveryAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the delivery address of the vendor. If there is not one defined, it displays the primary one.
    /// </summary>
    /// <returns>
    /// The vendors delivery address or the primary address if there is not one defined.
    /// </returns>
    public display Addressing whsVendDeliveryAddress()
    {
        LogisticsPostalAddressRecId logisticsPostalAddressRecId = TMSAddressPhone::initFromVendAccount(this.VendAccount).parmPostalAddressRecId();
        return LogisticsPostalAddress::addressFromRecId(logisticsPostalAddressRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTransType</Name>
				<Source><![CDATA[
    public WHSWorkTransType workTransType()
    {
        return WHSWorkTransType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransType</Name>
				<Source><![CDATA[
    public InventTransType inventTransType()
    {
        return InventTransType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originType</Name>
				<Source><![CDATA[
    public WHSOriginType originType()
    {
        return WHSOriginType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendBatchRefType</Name>
				<Source><![CDATA[
    public PdsVendBatchInfoSourceRefType vendBatchRefType()
    {
        return PdsVendBatchInfoSourceRefType::PurchaseOrderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendAccount</Name>
				<Source><![CDATA[
    public AccountNum vendAccount()
    {
        return this.VendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitConvertInvent2Order</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ProductQuantity unitConvertInvent2Order(InventQty _inventQty)
    {
        return this.unitConvertInvent2Purch(_inventQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitConvertOrder2Invent</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public InventQty unitConvertOrder2Invent(ProductQuantity _orderQty)
    {
        return this.unitConvertPurch2Invent(_orderQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected InventTransOriginId inventTransOriginId()
    {
        return InventTransOriginPurchLine::findInventTransOriginId(this.DataAreaId, this.InventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowInstructions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the latest workflow step instructions for this record.
    /// </summary>
    /// <returns>
    /// The instructions for the latest work item for this record.
    /// </returns>
    display public WorkflowStepInstruction workflowInstructions()
    {
        List                        workItemList;
        ListEnumerator              enumerator;

        WorkflowWorkItemInstanceId  workItemInstanceId;

        WorkflowWorkItemTable       workflowWorkItemTable;
        WorkflowDueDateTime         dueDateTime;
        WorkflowStepInstruction     stepInstruction;

        void getRecord()
        {
            workItemInstanceId = enumerator.current();
            select firstonly DueDateTime, Description from workflowWorkItemTable
                where workflowWorkItemTable.Id == workItemInstanceId;
        }

        workItemList = Workflow::findWorkItemsForCurrentUser(this);

        if (workItemList)
        {
            enumerator   = workItemList.getEnumerator();

            switch (workItemList.elements())
            {
                case    0 : stepInstruction = '';
                    break;

                case    1 : enumerator.moveNext();

                    getRecord();
                    stepInstruction = workflowWorkItemTable.Description;

                    break;

                default   : dueDateTime = DateTimeUtil::minValue();

                            while (enumerator.moveNext())
                    {
                        getRecord();

                        if (workflowWorkItemTable.DueDateTime > dueDateTime)
                        {
                            dueDateTime = workflowWorkItemTable.DueDateTime;
                            stepInstruction = workflowWorkItemTable.Description;
                        }
                    }
            }
        }

        return stepInstruction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowLastComment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the last workflow comment for this record.
    /// </summary>
    /// <returns>
    /// The last comment entered by any user for this record.
    /// </returns>
    display public WorkflowComment workflowLastComment()
    {
        WorkflowTrackingTable           workflowTrackingTable;
        WorkflowTrackingStatusTable     workflowTrackingStatusTable;
        WorkflowTrackingCommentTable    workflowTrackingCommentTable;

        select firstonly ContextCompanyId, ContextTableId, ContextRecId from workflowTrackingStatusTable
            where workflowTrackingStatusTable.ContextCompanyId    == curext()
               && workflowTrackingStatusTable.ContextTableId      == this.TableId
               && workflowTrackingStatusTable.ContextRecId        == this.RecId
            join firstonly TrackingId, CreatedDateTime from workflowTrackingTable order by CreatedDateTime desc
                where workflowTrackingTable.WorkflowTrackingStatusTable == workflowTrackingStatusTable.RecId
            join Comment from workflowTrackingCommentTable
                where workflowTrackingCommentTable.WorkflowTrackingTable == workflowTrackingTable.RecId;

        return workflowTrackingCommentTable.Comment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowWorkItemDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the latest workflow due date for this record.
    /// </summary>
    /// <returns>
    /// The due date for the latest work item for this record.
    /// </returns>
    display public WorkflowDueDateTime workflowWorkItemDueDate()
    {
        List                        workItemList;
        ListEnumerator              enumerator;

        WorkflowWorkItemInstanceId  workItemInstanceId;

        WorkflowWorkItemTable       workflowWorkItemTable;
        WorkflowDueDateTime         dueDateTime;

        void getRecord()
        {
            workItemInstanceId = enumerator.current();
            select firstonly DueDateTime from workflowWorkItemTable
                where workflowWorkItemTable.Id == workItemInstanceId;
        }

        workItemList = Workflow::findWorkItemsForCurrentUser(this);

        if (workItemList)
        {
            enumerator   = workItemList.getEnumerator();

            switch (workItemList.elements())
            {
                case    0 : dueDateTime = DateTimeUtil::minValue();
                    break;

                case    1 : enumerator.moveNext();

                    getRecord();
                    dueDateTime = workflowWorkItemTable.DueDateTime;

                    break;

                default   : dueDateTime = DateTimeUtil::minValue();

                            while (enumerator.moveNext())
                    {
                        getRecord();

                        if (workflowWorkItemTable.DueDateTime > dueDateTime)
                                    dueDateTime = workflowWorkItemTable.DueDateTime;
                    }
            }
        }

        return dueDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMultipleAccountingDistExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>PurchLine</c> buffer has more than one <c>AccountingDistribution</c>
    /// records.
    /// </summary>
    /// <param name="_purchLine">
    /// A <c>PurchLine</c> record which needs to be checked for multiple distributions.
    /// </param>
    /// <returns>
    /// true when the count is more than 1; otherwise, false.
    /// </returns>
    public static boolean checkMultipleAccountingDistExist(PurchLine _purchLine)
    {
        return SourceDocumentLineProvider::isAccountingDistributionSplit(_purchLine.sourceDocumentLine(), MonetaryAmount::ExtendedPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReceiveQty_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether exist the receive quantity.
    /// </summary>
    /// <param name="_purchId">
    /// The purchase id is used to find record.
    /// </param>
    /// <returns>
    /// Returns true, if exist the receive quantity; otherwise, false.
    /// </returns>
    public static boolean checkReceiveQty_IN(PurchId _purchId)
    {
        PurchLine purchLine;
        boolean insert;

        while select purchLine
            where purchLine.PurchId == _purchId
        {
            if (CustomsInvoiceRegistrateForm_IN::calcReceiveQty(purchLine))
            {
                insert = true;
            }
        }

        return insert;
    }

]]></Source>
			</Method>
			<Method>
				<Name>earliestConfirmedDlv</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the purchase order line that have the earliest confirmed delivery date.
    /// </summary>
    /// <param name="_purchId">
    /// The purchase ID that will be used to search for confirmed delivery dates.
    /// </param>
    /// <returns>
    /// The earliest confirmed delivery date for the purchase lines.
    /// </returns>
    /// <remarks>
    /// The returned confirmed delivery date can be passed to the <c>datenull</c> method in order to fully
    /// confirm the purchase order.
    /// </remarks>
    static PurchLineDlvDate earliestConfirmedDlv(PurchId  _purchId)
    {
        return (select minof(ConfirmedDlv) from purchLine
                    where purchLine.PurchId == _purchId
                       && !purchLine.IsDeleted).ConfirmedDlv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(
        PurchId             _purchId,
        TradeLineNumber     _lineNumber = int64Min())
    {
        if (_purchId)
        {
            if (_lineNumber == int64Min())
                return (select firstonly RecId from purchLine
                            index PurchLineIdx
                            where purchLine.PurchId         == _purchId
                               && purchLine.IsDeleted       == NoYes::No
                       ).RecId     != 0;

            return (select firstonly RecId from purchLine
                            index PurchLineIdx
                            where purchLine.PurchId         == _purchId
                               && purchLine.LineNumber      == _lineNumber
                               && purchLine.IsDeleted       == NoYes::No
                       ).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDifferentCurrency</Name>
				<Source><![CDATA[
    static boolean existDifferentCurrency(PurchId   purchId, CurrencyCode currencyCode)
    {
        if (!purchId || !currencyCode)
        {
            return false;
        }

        return (select firstonly RecId from purchLine
                       index hint PurchLineIdx
                       where purchLine.PurchId          == purchId
                          && purchLine.CurrencyCode     != currencyCode
                          && purchLine.IsDeleted        == NoYes::No).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existNonFinalizedLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if one or more purchase order lines exist that are not finalized.
    /// </summary>
    /// <param name="_purchId">
    ///    The ID of the purchase order.
    /// </param>
    /// <returns>
    ///    true if one or more purchase order lines are not finalized; otherwise, false.
    /// </returns>
    static boolean existNonFinalizedLines(PurchId _purchId)
    {
        return (select firstonly RecId from purchLine
                       where purchLine.PurchId          == _purchId
                          && purchLine.IsFinalized      == NoYes::No).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static PurchLine find(
        PurchId           _purchId,
        TradeLineNumber   _lineNumber = int64Min(),
        boolean           _update     = false)
    {
        PurchLine  purchLine;

        if (_purchId)
        {
            purchLine.selectForUpdate(_update);

            if (_lineNumber == int64Min())
            {
                select firstonly purchLine
                    index hint PurchLineIdx
                    where purchLine.PurchId         == _purchId
                       && !purchLine.IsDeleted;
            }
            else
            {
                select firstonly purchLine
                    index hint PurchLineIdx
                    where purchLine.PurchId         == _purchId
                       && purchLine.LineNumber      == _lineNumber
                       && !purchLine.IsDeleted;
            }
        }

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>PurchLine</c> record.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    ///    A <c>SourceDocumentLine</c> record RecId.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that determines whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    ///    A <c>PurchLine</c> record.
    /// </returns>
    static public PurchLine findBySourceDocumentLine(   RefRecId _sourceDocumentLine,
                                                        boolean  _forUpdate = false)

    {
        PurchLine     purchLine;

        if (_sourceDocumentLine)
        {
            purchLine.selectForUpdate(_forUpdate);

            select firstonly purchLine
                where purchLine.SourceDocumentLine  == _sourceDocumentLine
                    ;
        }

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransId</Name>
				<Source><![CDATA[
    static PurchLine findInventTransId(TradeInventTransId   _inventTransId,
                                       boolean              _update = false)
    {
        PurchLine purchLine;

        if (_inventTransId)
        {
            purchLine.selectForUpdate(_update);

            select firstonly purchLine
                where purchLine.InventTransId == _inventTransId
                   && !purchLine.IsDeleted;
        }

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findItemIdInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Finds the specified record in the <c>PurchLine</c> table.
    /// </summary>
    /// <param name="purchId">
    ///   A <c>PurchId</c>
    /// </param>
    /// <param name="itemId">
    ///   An <c>ItemId</c>.
    /// </param>
    /// <param name="inventDimId">
    ///   An <c>InventDimId</c>.
    /// </param>
    /// <param name="lineNum">
    ///   A line number; optional.
    /// </param>
    /// <param name="update">
    ///   A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///   A record in the <c>PurchLine</c> table; otherwise, an empty record.
    /// </returns>
    static PurchLine findItemIdInventDimId(PurchId          purchId,
                                           ItemId           itemId,
                                           InventDimId      inventDimId,
                                           TradeLineNumber  lineNum     = int64Min(),
                                           boolean          update      = false)
    {
        PurchLine  purchLine;

        if (purchId)
        {
            purchLine.selectForUpdate(update);

            if (lineNum == int64Min())
            {
                select firstonly purchLine
                    index hint PurchLineIdx
                    where purchLine.PurchId     == purchId      &&
                          purchLine.ItemId      == itemId       &&
                          purchLine.InventDimId == inventDimId  &&
                          !purchLine.IsDeleted;
            }
            else
            {
                select firstonly purchLine
                    index hint PurchLineIdx
                    where purchLine.PurchId     == purchId      &&
                          purchLine.LineNumber  == lineNum      &&
                          purchLine.ItemId      == itemId       &&
                          purchLine.InventDimId == inventDimId    &&
                          !purchLine.IsDeleted;
            }
        }

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPurchIdPurchType</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Finds the specified record in the <c>PurchLine</c> table.
    /// </summary>
    /// <param name="purchId">
    ///   A <c>PurchId</c>.
    /// </param>
    /// <param name="purchType">
    ///   A <c>PurchType</c>.
    /// </param>
    /// <param name="lineNum">
    ///   A line number; optional.
    /// </param>
    /// <param name="update">
    ///   A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///   A record in the <c>PurchLine</c> table; otherwise, an empty record.
    /// </returns>
    static PurchLine findPurchIdPurchType(PurchId           purchId,
                                          PurchaseType      purchType,
                                          TradeLineNumber   lineNum     = int64Min(),
                                          boolean           update      = false)
    {
        PurchLine  purchLine;

        if (purchId)
        {
            purchLine.selectForUpdate(update);

            if (lineNum == int64Min())
            {
                select firstonly purchLine
                    index hint PurchLineIdx
                    where purchLine.PurchId == purchId     &&
                          purchLine.PurchaseType == purchType &&
                          !purchLine.IsDeleted;
            }
            else
            {
                select firstonly purchLine
                    index hint PurchLineIdx
                    where purchLine.PurchId == purchId     &&
                          purchLine.LineNumber == lineNum     &&
                          purchLine.PurchaseType == purchType &&
                          !purchLine.IsDeleted;
            }
        }

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPurchTypeItemIdVarinatId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Finds the specified record in the <c>PurchLine</c> table.
    /// </summary>
    /// <param name="purchId">
    ///   A <c>PurchId</c>.
    /// </param>
    /// <param name="purchType">
    ///   A <c>PurchType</c>.
    /// </param>
    /// <param name="itemId">
    ///   An <c>ItemId</c>.
    /// </param>
    /// <param name="variantId">
    ///   A <c>RetailVariantId</c>.
    /// </param>
    /// <param name="update">
    ///   A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///   A record in the <c>PurchLine</c> table; otherwise, an empty record.
    /// </returns>
    static PurchLine findPurchTypeItemIdVarinatId(PurchId      purchId,
                          PurchaseType  purchType,
                          ItemId        itemId,
                          RetailVariantId  variantId,
                          boolean       update      = false)
    {
        PurchLine  purchLine;

        if (purchId)
        {
            purchLine.selectForUpdate(update);

            select firstonly purchLine
                index hint PurchLineIdx
                where purchLine.PurchId == purchId          &&
                      purchLine.PurchaseType == purchType   &&
                      purchLine.ItemId == itemId            &&
                      purchLine.VariantId == variantId      &&
                      !purchLine.IsDeleted;
        }

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static PurchLine findRecId(RecId    _recId,
                               boolean  _update = false)
    {
        PurchLine purchLine;

        if (_recId)
        {
            purchLine.selectForUpdate(_update);

            select firstonly purchLine
                where purchLine.RecId == _recId
                   && !purchLine.IsDeleted;
        }

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySubConLineNumber</Name>
				<Source><![CDATA[
    internal static PurchLine findBySubConLineNumber(ProjSubcontractLine _subConLine,
                                                     boolean _update = false)
    {
        PurchLine purchLine;

        purchLine.selectForUpdate(_update);

        if (_subConLine)
        {
            select firstonly purchLine
                where purchLine.ProjSubContractLineNumber == _subConLine;
        }

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSerialToReceive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the serial Id from the purchase order line
    /// </summary>
    /// <param name="_purchId">
    /// The Id of the purchase order.
    /// </param>
    /// <param name="_lineNum">
    /// The line number of the purchase line.
    /// </param>
    /// <returns>
    /// The serial Id of either the purchase order or the associated <c>InventTrans</c> table
    /// </returns>
    [SysObsolete('Logic has been moved to getSerialToReceiveForCurrentLine', false, 20\02\2023)]
    public static InventSerialId getSerialToReceive(
        PurchId             _purchId,
        TradeLineNumber     _lineNum)
    {
        PurchLine purchLine = PurchLine::find(_purchId, _lineNum);
        return purchLine.getSerialToReceiveForCurrentLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSerialToReceiveForCurrentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the serial Id from the current purchase order line.
    /// </summary>
    /// <returns>
    /// The serial Id of either the purchase order or the associated <c>InventTrans</c> table.
    /// </returns>
    public InventSerialId getSerialToReceiveForCurrentLine()
    {
        return this.WHSReceiptOrderLine::getSerialToReceiveForCurrentLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerPostingType</Name>
				<Source><![CDATA[
    public static LedgerPostingType getLedgerPostingType(ItemId _itemId)
    {
        LedgerPostingType ledgerPostingType;
        InventModelGroup  inventoryModelGroup;

        inventoryModelGroup = InventTable::find(_itemId).modelGroup();

        if (inventoryModelGroup.PostPhysicalPurchase ||
                    (!inventoryModelGroup.PostOnhandPhysical &&
                     !inventoryModelGroup.PostPhysicalPurchase))
        {
            ledgerPostingType = LedgerPostingType::PurchConsump;
        }
        else if (inventoryModelGroup.PostOnhandPhysical &&
                !inventoryModelGroup.PostPhysicalPurchase)
        {
            ledgerPostingType = LedgerPostingType::PurchReceipt;
        }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasExensionTableEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks is there any extension table of table <C>PurchLine</C> is enabled.
    /// </summary>
    /// <returns>
    /// true if there is one or more extension tables are enabled. Otherwise, return false.
    /// </returns>
    public static boolean hasExensionTableEnabled()
    {
        return SysExtensionSerializerMap::hasExensionTableEnabled(tableNum(PurchLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasICMSSTTax_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if current line has ICMS-ST tax.
    /// </summary>
    /// <returns>
    /// True if current line has ICMS-ST tax; otherwise false.
    /// </returns>
    public boolean hasICMSSTTax_BR()
    {
        TaxOnItem taxOnItem = TaxOnItem::getTaxOnItemByGroupsAndType_BR(this.TaxItemGroup, this.TaxGroup, TaxType_BR::ICMSST);
        return TaxOnItem.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>highestPurchStatus</Name>
				<Source><![CDATA[
    static PurchStatus highestPurchStatus(PurchId _purchId)
    {
        PurchLine purchLine;
        Set                     purchOrderStatusesSet = new Set(Types::Enum);
        PurchStatusOrderedList  purchStatusOrderedList = PurchStatusOrderedList::newFromOrder(SortOrder::Descending);

        while select PurchStatus from purchLine
            group by PurchStatus
            where purchLine.PurchId == _purchId
                && purchLine.PurchStatus != PurchStatus::None
                && !purchLine.IsDeleted
        {
            purchOrderStatusesSet.add(purchLine.PurchStatus);
        }

        ListEnumerator purchStatusHighToLowEnumerator = purchStatusOrderedList.getEnumerator();
        while (purchStatusHighToLowEnumerator.moveNext())
        {
            if (purchOrderStatusesSet.in(purchStatusHighToLowEnumerator.current()))
            {
                return purchStatusHighToLowEnumerator.current();
            }
        }

        return PurchStatus::Backorder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>historyExistsOrLatestVersionNotArchived</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method checks if the line is versioned i.e. line is archived i.e. has historical records,
    /// or the last version of the purchase order and purchase line is not archived yet.
    /// </summary>
    /// <param name="_inventTransId">
    /// The <c>InventTransId</c> value for the purchase order line.
    /// </param>
    /// <param name="_purchId">
    /// The <c>PurchId</c> value of the purchase order line.
    /// </param>
    /// <param name="_purchDataAreaId">
    /// The <c>DataAreaId</c> value of the purchase order line.
    /// </param>
    /// <returns>
    /// true if the line is archived or the last version has not yet been archived; otherwise false.
    /// </returns>
    private static boolean historyExistsOrLatestVersionNotArchived(TradeInventTransId _inventTransId, PurchId _purchId, DataAreaId _purchDataAreaId)
    {
        PurchTableVersion purchTableLatestVersion;

        if (PurchLineHistory::existFromInventTrans(_inventTransId))
        {
            return true;
        }

        purchTableLatestVersion = PurchTableVersion::findLatest(_purchId, _purchDataAreaId);

        return purchTableLatestVersion.RecId && !purchTableLatestVersion.IsArchived;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the <c>PurchLine</c> record is deleted.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecId</c> field of the <c>PurchLine</c> table record.
    /// </param>
    /// <returns>
    /// true if the <c>PurchLine</c> table record is deleted; otherwise, false.
    /// </returns>
    public static boolean isDeleted(RecId _recId)
    {
        PurchLine  purchLine;

        if (_recId)
        {
            select firstonly IsDeleted from purchLine
                   where purchLine.RecId == _recId;
        }

        return purchLine.IsDeleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDistributionForCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the accounting distribution originates from a credit note.
    /// </summary>
    /// <param name="_accountingDistribution">
    /// An <c>AccountingDistribution</c> record.
    /// </param>
    /// <returns>
    /// true if the accounting distribution originates from a credit note; otherwise, false.
    /// </returns>
    public static boolean isDistributionForCreditNote(AccountingDistribution _accountingDistribution)
    {
        SourceDocumentLine  sourceDocumentLine;
        PurchLine           purchLine;
        PurchLineType       purchLineType;

        select firstonly RecId from sourceDocumentLine
            where sourceDocumentLine.RecId == _accountingDistribution.SourceDocumentLine
        join firstonly purchLine
            where purchLine.SourceDocumentLine == sourceDocumentLine.RecId;

        purchLineType = PurchLineType::construct(purchLine);

        return purchLineType.creditNoteLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxExist</Name>
				<Source><![CDATA[
    static boolean isTaxExist(TradeInventTransId _inventTransId, TaxCode _taxCode)
    {
        PurchLine       purchLineloc;
        TaxOnItem       taxOnItem;

        if (_inventTransId && _taxCode)
        {
            select firstonly RecId from taxOnItem
                where taxOnItem.TaxCode == _taxCode
                exists join purchLineloc
                    where purchLineloc.InventTransId    == _inventTransId
                       && purchLineloc.TaxItemGroup     == taxOnItem.TaxItemGroup
                       && !purchLineloc.IsDeleted;
        }
        return taxOnItem.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    static TradeLineNumber lastLineNum(PurchId _purchId)
    {
        return (select maxof(LineNumber) from purchLine
                    index hint PurchLineIdx
                    where purchLine.PurchId == _purchId).LineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCountryRegionName_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs lookup on <c>LogisticsAddressCountryRegionTranslation</c> table
    /// </summary>
    /// <param name="_ctrl">
    /// Control lookup linked to
    /// </param>
    /// <param name="_languageId">
    /// Code of language to search for
    /// </param>
    public static void lookupCountryRegionName_RU(FormStringControl _ctrl, LanguageId _languageId)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(LogisticsAddressCountryRegionTranslation), _ctrl);
        Query          query          = new Query();

        query.addDataSource(tableNum(LogisticsAddressCountryRegionTranslation));

        query.dataSourceNo(1).addRange(fieldNum(LogisticsAddressCountryRegionTranslation, LanguageId)).value(_languageId);

        sysTableLookup.addLookupfield(fieldNum(LogisticsAddressCountryRegionTranslation, ShortName));
        sysTableLookup.addLookupfield(fieldNum(LogisticsAddressCountryRegionTranslation, LongName));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupRetailVariantId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the <c>RetailVariantId</c> field.
    /// </summary>
    /// <param name="_ctrl">
    /// The form control for which to perform the lookup.
    /// </param>
    /// <param name="_itemIdFilter">
    /// An item id to filter the variants.
    /// </param>
    public static void lookupRetailVariantId(FormStringControl _ctrl, ItemId _itemIdFilter)
    {
        FormRun formRun = classfactory.formRunClass(new Args(formStr(RetailVariantLookup)));

        formRun.args().parm(_itemIdFilter);
        formRun.args().caller(_ctrl);
        formRun.init();

        formRun.run();
        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lowestPurchStatus</Name>
				<Source><![CDATA[
    public static PurchStatus   lowestPurchStatus(PurchId  _purchId)
    {
        PurchLine purchLine;
        Set                     purchOrderStatusesSet = new Set(Types::Enum);
        PurchStatusOrderedList  purchStatusOrderedList = PurchStatusOrderedList::newFromOrder(SortOrder::Ascending);

        while select PurchStatus from purchLine
            group by PurchStatus
            where purchLine.PurchId == _purchId
                && purchLine.PurchStatus != PurchStatus::None
                && !purchLine.IsDeleted
        {
            purchOrderStatusesSet.add(purchLine.PurchStatus);
        }

        ListEnumerator purchStatusHighToLowEnumerator = purchStatusOrderedList.getEnumerator();
        while (purchStatusHighToLowEnumerator.moveNext())
        {
            if (purchOrderStatusesSet.in(purchStatusHighToLowEnumerator.current()))
            {
                return purchStatusHighToLowEnumerator.current();
            }
        }

        if (PurchTable::find(_purchId).DocumentStatus != DocumentStatus::None)
        {
            return PurchStatus::Canceled;
        }

        return PurchStatus::Backorder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyPurchQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event when ordered purchase quantity changes on the purchase order line record.
    /// </summary>
    /// <param name = "_purchLine">The purchase order line record.</param>
    /// <param name = "_inventDim">The inventory dimension values.</param>
    /// <param name = "_resetPrice">A Boolean value indicating whether price should be reset; optional.</param>
    /// <param name = "_quantityErrorCorrectionMethods">The quantity error correction methods; optional.</param>
    public static void modifyPurchQty(
        PurchLine                                       _purchLine,
        InventDim                                       _inventDim,
        boolean                                         _resetPrice = true,
        InventMovementQuantityErrorCorrectionMethods    _quantityErrorCorrectionMethods = InventMovementQuantityErrorCorrectionMethods::newStandard())
    {
        if (!_purchLine.interCompanyIsBeingUpdated())
        {
            boolean allowConvert;

            if (EcoResProductUnitConverter::hasRequiredProductDimensionsForUnitConversion(_purchLine.ItemId, _purchLine.inventDim()))
            {
                // Set value so we don't have to perform same check again
                allowConvert = true;

                InventMovement::ensureTransQtyIsAcceptableForBuffer(_purchLine, _quantityErrorCorrectionMethods);
            }

            if (!IntercompanyUpdatePriceDiscOnPurchaseDeliveryDateChangeFlight::instance().isEnabled()
                && _purchLine.purchTable().isInterCompanyOrder()
                && !_purchLine.purchTable().interCompanyEndpointActionPolicy().PriceDiscountSearch)
            {
                _resetPrice = false;
            }

            if (_purchLine.LineDeliveryType == LineDeliveryType::DeliveryLine
                || !_resetPrice) //we should recalculate amount even though we do not reset price
            {
                _purchLine.LineAmount = _purchLine.calcLineAmountForced();
            }
            else if (_resetPrice
                     && allowConvert)
            {
                _purchLine.salesPurchLineInterface().resetPriceAgreement();
                _purchLine.setPriceDisc(_inventDim);
            }

            if (allowConvert)
            {
                _purchLine.initPurchQty();

                InventMovement::bufferSetTransQtyUnit(_purchLine);

                _purchLine.setInventReceivedNow();
            }

            // Added ProjParameter clause because this was resetting the sales price.
            if (_purchLine.ProjId && !_purchLine.purchTable().isProjectSalesItemReqPO()
                    && !_purchLine.getProjCreditNoteSource().purchTable().isProjectSalesItemReqPO()
                    && !ProjParameters::find().DefaultCostPriceAsSalesPrice)
            {
                // Recalculate the project sales price
                _purchLine.initFromProjTable(_purchLine.projTable(), true);
            }
        }
        else
        {
            _purchLine.PurchQty = _purchLine.orig().PurchQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetAxPurchLinePolicies</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the price discount policies.
    /// </summary>
    /// <param name="_axPurchLine">
    ///    An <c>AxPurchLine</c> object representing the order line that should have the policies reset.
    /// </param>
    public static void resetAxPurchLinePolicies(AxPurchLine _axPurchLine)
    {
        _axPurchLine.parmSystemEntrySource(PriceDiscSystemSource::None);
        _axPurchLine.parmSystemEntryChangePolicy(0);
        _axPurchLine.parmManualEntryChangepolicy(0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnedLotQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the returned quantity and catch weight quantity for a purchase order line.
    ///     These quantities include other open return lines as well partially or fully processed return lines (current purchase order line is not included).
    /// </summary>
    /// <param name="_inventTransId">
    ///     The inventTransId which identifies a purchase order line (lot id of the initial purchase order line).
    /// </param>
    /// <param name="_inventTransIdCurrent">
    ///     The inventTransId which identifies the current return purchase order line (Reference Lot id); optional.
    /// </param>
    /// <returns>
    ///     A container with the quantity and the catch weight quantity that is already returned for the current purchase order line.
    /// </returns>
    public static container returnedLotQty(InventTransId _inventTransId,
                                                  InventTransId _inventTransIdCurrent = '')
    {
        PurchLine   purchLine;

        select sum(PurchQty), sum(PdsCWQty) from purchLine
            where (purchLine.PurchQty < 0                                                       // Only credit lines
                && !(purchLine.IsDeleted && purchLine.PurchStatus == PurchStatus::Backorder)    // Exclude deleted non-invoiced lines
                && purchLine.InventRefTransId == _inventTransId                                 // Find the lines that reference the original line
                && purchLine.InventTransId    != _inventTransIdCurrent);                        // Exclude current line

        return [-purchLine.PurchQty, -purchLine.PdsCWQty];                                      // Quantities are negative. Want to return a positive quantity.
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryDueWorkflowState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>PurchLine</c> workflow state for the COR: Delivery due in xx days workflow.
    /// </summary>
    /// <param name="_purchLineRecId">
    /// The record ID <c>PurchLine</c> record.
    /// </param>
    /// <param name="_purchCORWorkflowState">
    /// The workflow state enumeration value to set on the <c>PurchLine</c> record.
    /// </param>
    static void setDeliveryDueWorkflowState(RecId _purchLineRecId,
                                            TradeWorkflowState _purchCORWorkflowState)
    {
        PurchLine purchLine;

        ttsbegin;

        purchLine = PurchLine::findRecId(_purchLineRecId, true);
        purchLine.WfDeliveryDueState = _purchCORWorkflowState;
        purchLine.doUpdate();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvReceivedWorkflowState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>PurchLine</c> workflow state for the COR: Invoice received, items not received workflow.
    /// </summary>
    /// <param name="_purchLineRecId">
    /// The record ID of the <c>PurchLine</c> record.
    /// </param>
    /// <param name="_purchCORWorkflowState">
    /// The workflow state enumeration value to set on the <c>PurchLine</c> record.
    /// </param>
    static void setInvReceivedWorkflowState(RecId _purchLineRecId,
                                            TradeWorkflowState _purchCORWorkflowState)
    {
        PurchLine purchLine;

        ttsbegin;

        purchLine = PurchLine::findRecId(_purchLineRecId, true);
        purchLine.WfInvReceivedState = _purchCORWorkflowState;
        purchLine.doUpdate();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkflowState</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method update the <c>WorkflowState</c> on the specified <c>PurchLine</c>
    /// </summary>
    /// <param name="_recId">
    ///     <c>RecId</c> of the record to update.
    /// </param>
    /// <param name="_workflowState">
    ///     <c>WorkflowState</c> that the record must be updated with.
    /// </param>
    /// <param name="_editableInWorkflow">
    ///     <c>editableInWorkflow</c> that the record must be updated with.
    /// </param>
    static void setWorkflowState(RecId                     _recId,
                                 TradeWorkflowState        _workflowState,
                                 TradeEditableInWorkflow   _editableInWorkflow = NoYes::No)
    {
        PurchLine  purchLine;

        ttsbegin;

        purchLine = PurchLine::findRecId(_recId, true);
        purchLine.updateWorkflowState(_workflowState, _editableInWorkflow);
        purchLine.doUpdate();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>earliestDueDate</Name>
				<Source><![CDATA[
    public static Date earliestDueDate(date _requestedDlv, date _confirmedDlv)
    {
        if (_confirmedDlv && _requestedDlv)
        {
            return (_confirmedDlv <= _requestedDlv ? _confirmedDlv : _requestedDlv);
        }
        else
        {
            return (_confirmedDlv ? _confirmedDlv : _requestedDlv);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFinancialDimensionClearedOut</Name>
				<Source><![CDATA[
    /// <summary>
    /// To check if some of the Financial (Default) dimension was cleared out we cannot just compare the value.
    /// For each dimension value, we have a related record at <c>DimensionAttributeValue</c>, but if the value is empty from UI then the record doesn't exist.
    /// So, to understand if the value was cleared out we have to find which type of dimension doesn't exist.
    /// </summary>
    /// <param name = "_origDefaultDimnsion">Original Default dimension set.</param>
    /// <returns>True if one of the Default dimensions is cleared out.</returns>
    private boolean isFinancialDimensionClearedOut(InventSiteLinkedDimensionValueSet _origDefaultDimnsion)
    {
        DimensionAttributeValueSetItem valueSetItemOrig, valueSetItemCurr;
        DimensionAttributeValue dimensionAttributeValueOrig, dimensionAttributeValueCurr;

        select firstonly RecId from valueSetItemOrig
            where valueSetItemOrig.DimensionAttributeValueSet == _origDefaultDimnsion
            exists join dimensionAttributeValueOrig
                where dimensionAttributeValueOrig.RecId == valueSetItemOrig.DimensionAttributeValue
            notexists join valueSetItemCurr
                where valueSetItemCurr.DimensionAttributeValueSet == this.DefaultDimension
                join dimensionAttributeValueCurr
                where dimensionAttributeValueCurr.RecId == valueSetItemCurr.DimensionAttributeValue
                    && dimensionAttributeValueCurr.DimensionAttribute == dimensionAttributeValueOrig.DimensionAttribute;

        return valueSetItemOrig.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SalesPurchModifiedTableExtension::newNonRecursive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetReservationLine_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs validations on the <c>BudgetReservationLine_PSN</c> field on the <c>PurchLine</c> table.
    /// </summary>
    /// <returns>
    /// true if all validations pass or the budget reservation feature is disabled; otherwise, false.
    /// </returns>
    private boolean validateBudgetReservationLine_PSN()
    {
        boolean                     isValid = true;
        BudgetReservationLine_PSN   budgetReservationLine;
        PurchTable                  purchTable = this.purchTable();

        if (this.orig().BudgetReservationLine_PSN != this.BudgetReservationLine_PSN
            && this.isBudgetReservationLineReferenced())
        {
            budgetReservationLine = BudgetReservationLine_PSN::find(this.BudgetReservationLine_PSN);

            if (budgetReservationLine.PurchReqLine)
            {
                isValid = BudgetReservation_PSN::validatePurchaseRequisitionLineVendor(
                    budgetReservationLine.PurchReqLine,
                    this.VendAccount);
            }

            boolean validateRelievingDocumentType = !(this.PurchReqId && !budgetReservationLine.PurchReqLine);

            isValid = isValid && BudgetReservation_PSN::validateBudgetReservationToBeRelieved(
                purchTable.AccountingDate,
                budgetReservationLine.BudgetReservationHeader_PSN,
                BudgetReservationRelievingDocument_PSN::PurchaseOrder,
                "@Budgeting_BudgetReservationPS:POAccountingDateNotInFiscalYearError",
                "@Budgeting_BudgetReservationPS:POAccountingDateNotWithinGBRDatesError",
                validateRelievingDocumentType);

            if (isValid && purchTable.ProjId && !budgetReservationLine.ProjId)
            {
                isValid = checkFailed("@Budgeting_BudgetReservationPS:GBRDoesNotReferenceProjectError");
            }

            if (isValid && !purchTable.ProjId && budgetReservationLine.ProjId)
            {
                isValid = checkFailed("@Budgeting_BudgetReservationPS:GBRReferencingProjectNotValidForPOError");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetReservationLineReferenced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the budget reservation line is referenced on the purchase order line or not.
    /// </summary>
    /// <returns>
    /// true if the budget reservation line is referenced; otherwise, false
    /// </returns>
    public boolean isBudgetReservationLineReferenced()
    {
        boolean isReferenced;

        isReferenced = this.BudgetReservationLine_PSN != 0 && PublicSectorUtils::isBudgetReservationEnabled();

        return isReferenced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectBudgetReservationLineReferenced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the budget reservation line with project is referenced.
    /// </summary>
    /// <returns>
    /// true if the budget reservation line is referenced; otherwise, false.
    /// </returns>
    public boolean isProjectBudgetReservationLineReferenced()
    {
        boolean                     isReferenced;
        BudgetReservationLine_PSN   budgetReservationLine = BudgetReservationLine_PSN::find(this.BudgetReservationLine_PSN);

        isReferenced = budgetReservationLine.RecId != 0 && budgetReservationLine.ProjId;

        return isReferenced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSourceDocumentLineCompletedOrFinalized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the purchase order line's source document line accounting status is completed or finalized.
    /// </summary>
    /// <returns>
    /// true if the purchase order line's source document line accounting status is completed or finalized; otherwise, false.
    /// </returns>
    public boolean isSourceDocumentLineCompletedOrFinalized()
    {
        boolean             isSourceDocumentLineCompletedOrFinalized;
        SourceDocumentLine  purchLineSourceDocumentLine = SourceDocumentLine::find(this.SourceDocumentLine);

        isSourceDocumentLineCompletedOrFinalized =
            purchLineSourceDocumentLine.AccountingStatus    == SourceDocumentLineAccountingStatus::Completed
            || purchLineSourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Finalized;

        return isSourceDocumentLineCompletedOrFinalized;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBudgetReservationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the information on the purchase order line from a budget reservation line record.
    /// </summary>
    /// <param name="_budgetReservationLine">
    /// The <c>BudgetReservationLine_PSN</c> record from which to initialize the <c>PurchLine</c> record.
    /// </param>
    public void initFromBudgetReservationLine(BudgetReservationLine_PSN _budgetReservationLine)
    {
        ProjParameters  projParameters;

        if (_budgetReservationLine.RecID != 0)
        {
            this.ProjId                 = _budgetReservationLine.ProjId;
            this.ActivityNumber         = _budgetReservationLine.ActivityNumber;
            this.ProjCategoryId         = _budgetReservationLine.ProjCategoryId;
            this.ProjLinePropertyId     = _budgetReservationLine.ProjLinePropertyId;
            this.ProjSalesCurrencyId    = _budgetReservationLine.ProjSalesCurrencyId;
            this.ProjSalesUnitId        = _budgetReservationLine.ProjSalesUnitId;
            this.ProjTaxGroupId         = _budgetReservationLine.ProjTaxGroupId;
            this.ProjTaxItemGroupId     = _budgetReservationLine.ProjTaxItemGroupId;
            this.ProjWorker             = _budgetReservationLine.ProjWorker;

            projParameters = ProjParameters::find();

            if (!projParameters.DefaultCostPriceAsSalesPrice)
            {
                this.ProjSalesPrice = _budgetReservationLine.ProjSalesPrice;
            }

            if (_budgetReservationLine.PurchReqLine)
            {
                this.BudgetReservationLine_PSN  = _budgetReservationLine.RecId;
                this.PurchQty                   = _budgetReservationLine.Quantity;
                this.LineAmount                 = _budgetReservationLine.LineAmount;
                this.PurchPrice                 = _budgetReservationLine.UnitPrice;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePurchQtyForCatchWeightItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the purchase order quantity is consistent with the item catch weight quantity.
    /// </summary>
    /// <returns>true if the ordered purchase quantity is consistent with the catch weight quantity; otherwise, false.</returns>
    protected boolean validatePurchQtyForCatchWeightItem()
    {
        
        if (!PdsCatchWeight::validateQty(this.itemId, this.PurchQty, UnitOfMeasure::unitOfMeasureIdBySymbol(this.PurchUnit), this.pdsCWQty, false))
        {
            return checkFailed("@SCM:PurchPurchaseOrderLineEntityPurchQtyInconsistentWithCWQty");
        }


        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ICMSCreditInstallments_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates the number of installments of the <c>PIS/COFINS</c> credit appropriation.
    /// </summary>
    /// <returns>
    /// True if the <c>ICMS</c> asset is receivable long term; otherwise, false.
    /// </returns>
    public ICMSCreditInstallments_BR ICMSCreditInstallments_BR()
    {
        if (!BrazilParameters::isEnabled() || (!this.AssetId && !this.AssetGroup))
        {
            return false;
        }

        if (!this.CreateFixedAsset)
        {
            return AssetTable::find(this.AssetId).icmsCreditInstallments_BR;
        }
        else
        {
            return AssetGroup::find(this.AssetGroup).icmsCreditInstallments_BR;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PISCOFINSFixedAssetCreditAppropMethod_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates the asset group appropriation method of the PIS/COFINS.
    /// </summary>
    /// <returns>
    /// The asset group appropriation method of the PIS/COFINS.
    /// </returns>
    public FBPISCOFINSFixedAssetAppropMethod_BR PISCOFINSFixedAssetCreditAppropMethod_BR()
    {
        if (!(BrazilParameters::isEnabled() && (this.AssetId || this.AssetGroup)))
        {
            return FBPISCOFINSFixedAssetAppropMethod_BR::None;
        }

        if (this.CreateFixedAsset)
        {
            return AssetGroup::find(this.AssetGroup).PISCOFINSAppropriationMethod_BR;
        }

        return AssetTable::find(this.AssetId).PISCOFINSAppropriationMethod_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PISCOFINSFixedAssetCreditGroup_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates the asset group classification of the PIS/COFINS credit appropriation.
    /// </summary>
    /// <returns>
    /// The asset group classification of the PIS/COFINS credit appropriation.
    /// </returns>
    public FBPISCOFINSFixedAssetCreditGroup_BR PISCOFINSFixedAssetCreditGroup_BR()
    {
        if (!BrazilParameters::isEnabled() || (!this.AssetId && !this.AssetGroup))
        {
            return FBPISCOFINSFixedAssetCreditGroup_BR::None;
        }

        if (!this.CreateFixedAsset)
        {
            return AssetTable::find(this.AssetId).PISCOFINSCreditGroup_BR;
        }
        else
        {
            return AssetGroup::find(this.AssetGroup).PISCOFINSCreditGroup_BR;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PISCOFINSFixedAssetCreditInstallments_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates the number of installments of the PIS/COFINS credit appropriation.
    /// </summary>
    /// <returns>
    /// The number of installments of the PIS/COFINS credit appropriation.
    /// </returns>
    public FBPisCofinsFixedAssetCreditInstls_BR PISCOFINSFixedAssetCreditInstallments_BR()
    {
        if (!BrazilParameters::isEnabled() || (!this.AssetId && !this.AssetGroup))
        {
            return 0;
        }

        if (!this.CreateFixedAsset)
        {
            return AssetTable::find(this.AssetId).PISCOFINSCreditInstallments_BR;
        }
        else
        {
            return AssetGroup::find(this.AssetGroup).PISCOFINSCreditInstallments_BR;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PISCOFINSFixedAssetCreditPurpose_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates the asset utilization purpose of the PIS/COFINS credit appropriation.
    /// </summary>
    /// <returns>
    /// The asset utilization purpose of the PIS/COFINS credit appropriation.
    /// </returns>
    public FBPISCOFINSFixedAssetCreditPurpose_BR PISCOFINSFixedAssetCreditPurpose_BR()
    {
        if (!BrazilParameters::isEnabled() || (!this.AssetId && !this.AssetGroup))
        {
            return FBPISCOFINSFixedAssetCreditPurpose_BR::None;
        }

        if (!this.CreateFixedAsset)
        {
            return AssetTable::find(this.AssetId).PISCOFINSCreditPurpose_BR;
        }
        else
        {
            return AssetGroup::find(this.AssetGroup).PISCOFINSCreditPurpose_BR;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimIdFromVariantId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes product dimensions based on a product variant ID.
    /// </summary>
    /// <param name = "_retailVariantId">The product variant ID.</param>
    public void initInventDimIdFromVariantId(RetailVariantId _retailVariantId = this.VariantId)
    {
        if  (_retailVariantId)
        {
            var inventDimCombination = InventDimCombination::findVariantId(_retailVariantId);
            var inventDim = this.inventDim();
            inventDim.initFromInventDim(inventDimCombination.inventDim(), InventDim::dimProductDimensionEnabledFieldList());
            this.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxModelDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize tax model doc line by this purchase line record.
    /// </summary>
    /// <returns>The <c>TaxModelDocLinePurchLineImpl</c> object </returns>
    public TaxModelDocLinePurchLineImpl initTaxModelDocLine()
    {
        TaxModelDocLinePurchLineImpl taxModelDocLine;

        taxModelDocLine = TaxModelDocLineFactory::newTaxModelDocLine(this) as TaxModelDocLinePurchLineImpl;

        return taxModelDocLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxModelDocLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize tax model doc line by this purchase line record for India.
    /// </summary>
    /// <returns>The <c>TaxModelDocLinePurchLineImpl_IN</c> object </returns>
    public TaxModelDocLinePurchLineImpl_IN initTaxModelDocLine_IN()
    {
        TaxModelDocLinePurchLineImpl_IN taxModelDocLine;

        taxModelDocLine = TaxModelDocLineFactory::newTaxModelDocLine(this) as TaxModelDocLinePurchLineImpl_IN;

        return taxModelDocLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjCostSalesPriceFromPriceSetup</Name>
				<Source><![CDATA[
    private void setProjCostSalesPriceFromPriceSetup()
    {
        boolean		priceFound;

        if (this.ProjId && !this.ItemId)
        {
            ProjCategoryType projCategoryType = ProjCategory::find(this.ProjCategoryId).CategoryType;
            ProjPriceParameters priceParams;
            Price actualCostPrice;

            switch (projCategoryType)
            {
                case ProjCategoryType::Cost:
                    priceParams = ProjCostPriceExpense::constructPriceParametersForFindCostPrice(
                        this.ProjId,
                        this.getProjResourceRecId(),
                        this.ProjCategoryId);
                    this.PurchPrice = ProjCostPriceExpense::findCostPriceByPriceParameters(priceParams);
                    actualCostPrice = (this.LineDisc || this.LinePercent) ?
                        ProjectSourceDocumentLineItemHelper::getCostPriceWithDiscountApplied(this.PurchPrice, this.LineDisc, this.LinePercent) :
                        this.PurchPrice;
                    this.LineAmount = this.calcLineAmountForced();

                    priceParams = ProjCostSalesPrice::constructPriceParametersForFindCostSalesPrice(
                        this.ProjId,
                        this.getProjResourceRecId(),
                        this.ProjCategoryId,
                        actualCostPrice,
                        this.currencyCode,
                        this.ProjSalesCurrencyId);
                    [this.ProjSalesPrice, priceFound] = ProjCostSalesPrice::findCostSalesPriceByPriceParameters(priceParams);
                    break;

                case ProjCategoryType::Hour:
                    priceParams = ProjHourCostPrice::constructPriceParametersForFindCostPrice(
                        this.ProjId,
                        this.getProjResourceRecId(),
                        this.ProjCategoryId,
                        this.ProjLinePropertyId);
                    this.PurchPrice = ProjHourCostPrice::findCostPriceByPriceParameters(priceParams);
                    actualCostPrice = (this.LineDisc || this.LinePercent) ?
                        ProjectSourceDocumentLineItemHelper::getCostPriceWithDiscountApplied(this.PurchPrice, this.LineDisc, this.LinePercent) :
                        this.PurchPrice;
                    this.LineAmount = this.calcLineAmountForced();

                    priceParams = ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
                        this.ProjId,
                        this.getProjResourceRecId(),
                        this.ProjCategoryId,
                        this.ProjLinePropertyId,
                        actualCostPrice,
                        this.ProjSalesCurrencyId);
                    [this.ProjSalesPrice, priceFound] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(priceParams);
                    break;

                case ProjCategoryType::Item:
                    this.ProjSalesPrice = 0;
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markCurrentTaxDocumentTaxStatusDirty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Mark current tax status of <c> PurchLine </c> to dirty
    /// </summary>
    public void markCurrentTaxDocumentTaxStatusDirty()
    {
        TaxableDocumentDescriptor descriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(this.purchTable());
        ITaxableDocument taxableDocument = TaxableDocumentObject::construct(descriptor);
        TaxBusinessService::markTaxDocumentTaxStatus(taxableDocument, TaxDocumentCalculationLevel::Dirty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the header table.
    /// </summary>
    /// <returns>The record for PurchTable.</returns>
    public SalesPurchJournalTable salesPurchJournalTable()
    {
        return this.purchTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDocumentRowDisplayString</Name>
				<Source><![CDATA[
    /// <summary>
    /// The callback method on tax engine tax document display
    /// </summary>
    /// <returns>The tax document display string.</returns>
    public TaxDocumentDisplayString getTaxDocumentRowDisplayString()
    {
        return strFmt("@ApplicationSuiteTaxEngineIntegration:PurchLineTaxDocumentRowDisplayFormat", this.LineNumber, this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the default dimension by using the entity dimension specifiers from the PurchLine buffer.
    /// </summary>

    public void setDefaultDimension()
    {
        DefaultDimensionDefaultingDimensionCollection dimensionSpecifiers = DefaultDimensionDefaultingDimensionCollection::construct();

        if (this.ProjId)
        {
            // If PO is created from RFQ then the default dimension must be set from RFQ line.
            PurchRFQLineParameter insertParameter = PurchRFQLineParameter::current();
            if (insertParameter && ProjSetFinDimFromRFQLineToPOFlight::instance().isEnabled())
            {
                PurchRFQLine purchRFQLine = insertParameter.setPurchRFQLine();
                if (purchRFQLine)
                {
                    dimensionSpecifiers.add(DefaultDimensionDefaultingDimensionSource::newFromDimensionDefault(purchRFQLine, purchRFQLine.DefaultDimension));
                }
            }

            if (this.ItemRefType == InventRefType::Sales && this.InventRefTransId)
            {
                if (ProjUpdateFinDimOnProjChangeFlight::instance().isEnabled() && this.RecId &&
                    this.ProjId != this.orig().ProjId && this.purchTable().isProjectSalesItemReqPO())
                {
                    // Apply defaults from project
                    ProjTable projTable = ProjTable::find(this.ProjId);
                    dimensionSpecifiers.add(DefaultDimensionDefaultingDimensionSource::newFromDimensionDefaultMap(projTable));
                }
                else
                {
                    // Apply dimensions from item requirement
                    SalesLine salesLine = SalesLine::findInventTransId(this.InventRefTransId);
                    dimensionSpecifiers.add(DefaultDimensionDefaultingDimensionSource::newFromDimensionDefaultMap(salesLine));
                }
            }
            else
            {
                // Apply defaults from project
                ProjTable projTable = ProjTable::find(this.ProjId);
                dimensionSpecifiers.add(DefaultDimensionDefaultingDimensionSource::newFromDimensionDefaultMap(projTable));
            }
        }

        // Vendor
        if (this.VendAccount)
        {
            VendTable vendor = VendTable::findByCompany(this.dataAreaId, this.VendAccount);
            dimensionSpecifiers.add(DefaultDimensionDefaultingDimensionSource::newFromDimensionDefaultMap(vendor));
        }

        // Product
        if (this.ItemId)
        {
            InventTable inventTable = InventTable::findInLegalEntity(this.ItemId, this.dataAreaId);
            dimensionSpecifiers.add(DefaultDimensionDefaultingDimensionSource::newFromDimensionDefaultMap(inventTable));
        }

        // Employee
        HcmEmployment employee = HcmEmployment::findByWorkerLegalEntity(this.purchTable().WorkerPurchPlacer, CompanyInfo::findDataArea(this.dataAreaId).RecId);
        if (employee)
        {
            dimensionSpecifiers.add(DefaultDimensionDefaultingDimensionSource::newFromDimensionDefault(employee, employee.DefaultDimension));
        }

        if (!this.ProjId)
        {
            dimensionSpecifiers.add(DefaultDimensionDefaultingDimensionSource::newFromDimensionDefaultMap(this));
        }

        this.DefaultDimension = DefaultDimensionDefaultingStrategy::newDefaultingEngine(
            DefaultDimensionDefaultingDimensionTarget::newFromRecord(this), dimensionSpecifiers).getDefaultDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasIndirectTaxFieldChanged_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c> PurchLine </c> table buffer on India fields should update the associated <c>SourceDocumentDistribution</c> table.
    /// </summary>
    /// <param name="_origTransactionTable">
    /// The <c>Transaction table</c> record, optional.
    /// </param>
    /// <returns>
    /// True if the associated <c>SourceDocumentDistribution</c> records should be updated, otherwise false.
    /// </returns>
    public boolean hasIndirectTaxFieldChanged_IN(Common _origTransactionTable = this.orig())
    {
        boolean         indirectTaxChanged = false;
        PurchLine_IN    purchLine_IN;
        PurchLine_IN    purchLine_Orig_IN;
        PurchLine       purchLine_Orig = _origTransactionTable ? _origTransactionTable : this.orig();

        if (TaxParameters::checkTaxParameters_IN())
        {
            purchLine_IN        = this.purchLine_IN();
            purchLine_Orig_IN   = purchLine_Orig.purchLine_IN();

            indirectTaxChanged =
                purchLine_IN.AssessableValueTransactionCurrency != purchLine_Orig_IN.AssessableValueTransactionCurrency
                || purchLine_IN.CustomsMaxRetailPrice           != purchLine_Orig_IN.CustomsMaxRetailPrice
                || purchLine_IN.MaximumRetailPrice              != purchLine_Orig_IN.MaximumRetailPrice
                || purchLine_IN.CreditNoteDate                  != purchLine_Orig_IN.CreditNoteDate
                || purchLine_IN.TaxAsPerOriginalInvoice         != purchLine_Orig_IN.TaxAsPerOriginalInvoice;
        }

        return indirectTaxChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxRecalculationNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c>PurchLine</c> table will update the Tax
    /// </summary>
    /// <param name="_origTransactionTable">
    /// The <c>Transaction table</c> record, optional.
    /// </param>
    /// <returns>True if current line tax should be recalculated, otherwise false </returns>
    public boolean taxRecalculationNeeded(Common _origTransactionTable = this.orig())
    {
        PurchLine   purchLine_Orig = _origTransactionTable ? _origTransactionTable : this.orig();

        boolean     updateNeeded =
                        (
                        (this.ItemId                != purchLine_Orig.ItemId) ||
                        (this.PriceUnit             != purchLine_Orig.PriceUnit) ||
                        (this.LinePercent           != purchLine_Orig.LinePercent) ||
                        (this.LineDisc              != purchLine_Orig.LineDisc) ||
                        (this.PurchQty              != purchLine_Orig.PurchQty) ||
                        (this.TaxItemGroup          != purchLine_Orig.TaxItemGroup) ||
                        (this.TaxGroup              != purchLine_Orig.TaxGroup) ||
                        (this.MultiLnDisc           != purchLine_Orig.MultiLnDisc) ||
                        (this.MultiLnPercent        != purchLine_Orig.MultiLnPercent) ||
                        (this.LineAmount            != purchLine_Orig.LineAmount) ||
                        (this.ProjId                != purchLine_Orig.ProjId) ||
                        (this.ActivityNumber        != purchLine_Orig.ActivityNumber) ||
                        (this.ProjCategoryId        != purchLine_Orig.ProjCategoryId) ||
                        (this.ProjLinePropertyId    != purchLine_Orig.ProjLinePropertyId) ||
                        (this.CurrencyCode          != purchLine_Orig.CurrencyCode) ||
                        (this.DeliveryPostalAddress != purchLine_Orig.DeliveryPostalAddress) ||
                        !DimensionDefaultFacade::areEqual(this.DefaultDimension, purchLine_Orig.DefaultDimension)
                        );

        return updateNeeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWithholdUpdated</Name>
				<Source><![CDATA[
    private boolean isWithholdUpdated(PurchLine _purchLineOrig)
    {
        return this.TaxWithholdGroup_TH != _purchLineOrig.TaxWithholdGroup_TH ||
            this.TaxWithholdItemGroupHeading_TH != _purchLineOrig.TaxWithholdItemGroupHeading_TH;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWithholdUpdateNeeded_IN</Name>
				<Source><![CDATA[
    private boolean isWithholdUpdateNeeded_IN(PurchLine _purchLineOrig)
    {
        PurchLine_IN    purchLine_IN        = this.purchLine_IN();
        PurchLine_IN    purchLine_Orig_IN   = _purchLineOrig.purchLine_IN();

        return purchLine_IN.tdsGroup != purchLine_Orig_IN.tdsGroup
            || purchLine_IN.tcsGroup != purchLine_Orig_IN.tcsGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registeredInDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the register quantity of the purchase line in specified inventory dimension.
    /// </summary>
    /// <param name = "_newInventDim">
    /// The inventory dimension to be used to calculate registered quantity.
    /// </param>
    /// <returns>
    /// Return the registered quantity in the dimension.
    /// </returns>
    public InventQtyRegistered registeredInDimension(InventDim _newInventDim)
    {
        InventDimParm inventDimParm;
        inventDimParm.initFromInventDim(_newInventDim);
        InventTransIdSum inventTransIdSum = InventTransIdSum::newTransOriginIdDimension(
                                                                this.inventTransOriginId(),
                                                                _newInventDim,
                                                                inventDimParm);
        return inventTransIdSum.registered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectPurchase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>PurchLine</c> is related to a project.
    /// </summary>
    /// <returns>
    /// true if the <c>PurchLine</c> is related to a project; otherwise false
    /// </returns>
    public boolean isProjectPurchase()
    {
        return (this.ProjId != '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLineView_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <C>PurchLineView_IN</C> based on current buffer.
    /// </summary>
    /// <returns>
    /// A <C>PurchLineView_IN</C>.
    /// </returns>
    public PurchLineView_IN purchLineView_IN()
    {
        PurchLineView_IN    purchLineView_IN;

        purchLineView_IN.initFromPurchLine(this);
        purchLineView_IN.initFromPurchLine_IN(this.purchLine_IN());

        // If the view doesn't have a RecId then it will assume
        // this is an insert scenario when it isn't.  So we will
        // let the view borrow the RecId from the PurchLine.  Since
        // no writes are done using this view this will work okay.
        purchLineView_IN.RecId = this.RecId;

        return purchLineView_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLineInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SalesPurchLineInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// The <c>SalesPurchLineInterface</c> object.
    /// </returns>
    public SalesPurchLineInterface salesPurchLineInterface()
    {
        return this.SalesPurchLine::salesPurchLineInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLineVersioning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>PurchLineVersioning</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// The <c>PurchLineVersioning</c> object.
    /// </returns>
    public PurchLineVersioning purchLineVersioning()
    {
        return this.PurchLineMap::purchLineVersioning();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchReqLineInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>PurchReqLineInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// The <c>PurchReqLineInterface</c> object.
    /// </returns>
    public PurchReqLineInterface purchReqLineInterface()
    {
        return this.PurchReqLineMap::purchReqLineInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>EGAISUnsettledQty_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns quantity from the purchase order line which is available for the settlement with EGAIS waybill line.
    /// </summary>
    /// <returns>
    ///    Quantity from the purchase order line which is available for the settlement with EGAIS waybill line.
    /// </returns>
    /// <remarks>
    ///    Quantity is being calculated only if purchase unit is equal to the EGAIS unit of the item stored in the purchase order line.
    ///    Quantity is equal to the physically not posted quantity in the purchase order line minus all the quantity from the line which has been settled,
    ///    but has not yet been posted (waybill status less than registered).
    /// </remarks>
    public display Qty EGAISUnsettledQty_RU()
    {
        EGAISWaybillSettlement_RU       settlement;
        EGAISWaybillJour_RU             waybillJour;
        EGAISWaybillLine_RU             waybillLine;
        EGAISAlcoholProduction_RU       alcoholProduction;
        Qty                             ret;

        alcoholProduction = EGAISAlcoholProduction_RU::findByItemInventDim(this.ItemId, this.inventDim());

        if (this.PurchUnit == alcoholProduction.Unit)
        {
            select sum(Qty) from settlement
            where settlement.InventTransId  == this.InventTransId
               && settlement.InventTrans    == 0    // only incoming settlements
            exists join waybillLine
            where waybillLine.RecId == settlement.WaybillLine
        exists join waybillJour
            where waybillJour.RecId == waybillLine.WaybillJour
               && waybillJour.Direction == EGAISDocumentDirection_RU::Incoming
               && waybillJour.StatusReceipt <= EGAISWaybillStatusReceipt_RU::Registered;

            ret = this.RemainPurchPhysical - settlement.Qty;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assessableValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the assessable value for the specified transaction line.
    /// </summary>
    /// <param name = "_purchRFQReplyLine">The purchase RFQ reply line.</param>
    public void assessableValue_IN(PurchRFQReplyLine _purchRFQReplyLine = null)
    {
        CustomsImportAssessableValue_IN customsImportAssessableValue;
        MarkupValue                     value;
        CustomsAmount_IN                landingCharges;
        PurchLine_IN                    purchLine_IN;
        VendInvoiceTrans                vendInvoiceTrans;
        InventDim                       inventDim;
        InventBatchId                   inventBatchId;
        PurchLineOrigin                 purchLineOrigin;
        ExciseType_IN                   exciseType;

        purchLine_IN = this.purchLine_IN();
        if (_purchRFQReplyLine)
        {
            exciseType = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(_purchRFQReplyLine).ExciseType;
        }
        else
        {
            exciseType = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(this).ExciseType;
        }

        if (this.creditNoteLine() && exciseType == ExciseType_IN::Trader)
        {
            //If the return order line is created manually and ForceBatchValidation does not exists, AV should not be according to Original Invoice
            if (!this.InventRefTransId)
            {
                purchLine_IN.TaxAsPerOriginalInvoice = NoYes::No;
            }
            else
            {
                purchLine_IN.TaxAsPerOriginalInvoice = NoYes::Yes;
            }
        }
        else
        {
            purchLine_IN.TaxAsPerOriginalInvoice = NoYes::No;
        }

        if (PurchTable::find(this.PurchId).purchTable_W().CustomsImportOrder_IN == NoYes::Yes)
        {
            customsImportAssessableValue = CustomsImportAssessableValue_IN::findInventTransId(this.InventTransId);
            if (customsImportAssessableValue.RecId)
            {
                ttsbegin;
                customsImportAssessableValue.selectForUpdate(true);
                customsImportAssessableValue.Amount = this.LineAmount;
                customsImportAssessableValue.Value  = CustomsImportAssessableValue_IN::getMarkupValue(this.TableId, this.RecId, this.InventTransId);
                customsImportAssessableValue.update();
                ttscommit;

                if(!purchLine_IN.TaxAsPerOriginalInvoice)
                {
                    purchLine_IN.AssessableValueTransactionCurrency = CustomsImportAssessableValue_IN::findInventTransId(this.InventTransId).invoiceAssessableValue();
                }
            }
            else
            {
                value                   = CustomsImportAssessableValue_IN::getMarkupValue(this.TableId, this.RecId, this.InventTransId);
                landingCharges          = (this.LineAmount + value) * VendParameters::find().CustomsLandingChargesPct_IN/100;

                if (!purchLine_IN.TaxAsPerOriginalInvoice)
                {
                    purchLine_IN.AssessableValueTransactionCurrency = this.LineAmount + value + landingCharges;
                }
            }
        }
        else
        {
            if (!purchLine_IN.TaxAsPerOriginalInvoice)
            {
                purchLine_IN.AssessableValueTransactionCurrency = this.getMiscChargesAmount_IN();
            }
        }

        if (purchLine_IN.TaxAsPerOriginalInvoice)
        {
            if (this.InventRefTransId && this.InventRefId)
            {
                select firstOnly OriginSourceDocumentLine from purchLineOrigin
                    where purchLineOrigin.PurchLineInventTransId == this.InventTransId
                    && purchLineOrigin.PurchLineDataAreaId == this.dataAreaId;

                vendInvoiceTrans = VendInvoiceTrans::findSourceDocumentLine(purchLineOrigin.OriginSourceDocumentLine);
            }
            
            if (vendInvoiceTrans)
            {
                purchLine_IN.AssessableValueTransactionCurrency =  this.PurchQty * vendInvoiceTrans.AssessableValue_IN / vendInvoiceTrans.Qty;
            }
        }

        purchLine_IN.AssessableValueAccountingCurrency = TaxAssessableValueHandler_IN::calcAssessableValueAccountingCurrency(purchLine_IN.AssessableValueTransactionCurrency,this.CurrencyCode,this.purchTable().AccountingDate);
        this.packPurchLine_IN(purchLine_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsItemReqForPO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether there is a salesTable of type ItemReq associated with the PO
    /// </summary>
    /// <returns>
    /// Returns true if the sales order of type ItemReq exists for the PO.
    /// </returns>
    public boolean existsItemReqForPO()
    {
        InterCompanyPurchSalesReference     interCompanyPurchSalesReference;
        SalesTable                          salesTable;
        boolean                             existsItemReq = false;

        ProjId projIdAssocWithPurchLine = this.ProjId ? this.ProjId : this.purchTable().ProjId;

        if (!projIdAssocWithPurchLine)
        {
            return false;
        }

        select firstonly RecId from interCompanyPurchSalesReference
            where interCompanyPurchSalesReference.PurchId == this.PurchId
                exists join salesTable
                    where salesTable.SalesId == interCompanyPurchSalesReference.SalesId
                        && salesTable.ProjId == projIdAssocWithPurchLine;

        existsItemReq = interCompanyPurchSalesReference.RecId;

        if (!existsItemReq)
        {
            SalesLine salesLine;

            select firstonly RecId from salesLine
                where salesLine.InventTransId == this.InventRefTransId
                    && this.ItemRefType == InventRefType::Sales
                exists join salesTable
                    where salesTable.SalesId == salesLine.SalesId
                        && salesTable.ProjId == projIdAssocWithPurchLine
                        && salesTable.SalesType == SalesType::ItemReq;
                        
            existsItemReq = salesLine.RecId;
        }

        return existsItemReq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLinkedItemRequirement</Name>
				<Source><![CDATA[
    public SalesLine getLinkedItemRequirement()
    {
        SalesLine salesLine;
        SalesTable salesTable;

        if (this.ProjId && this.InventRefTransId)
        {
            select firstonly salesLine
                where salesLine.InventTransId == this.InventRefTransId
                    && salesLine.ProjId == this.ProjId
                    && this.ItemRefType == InventRefType::Sales
                exists join salesTable
                    where salesTable.SalesId == salesLine.SalesId
                        && salesTable.ProjId == this.ProjId
                        && salesTable.SalesType == SalesType::ItemReq;
        }

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPurchLineLinkedToItemRequirement</Name>
				<Source><![CDATA[
    public boolean isPurchLineLinkedToItemRequirement()
    {
        SalesLine linkedItemRequirement = this.getLinkedItemRequirement();

        return linkedItemRequirement.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchPriceInSalesCurrencyPerSalesUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to get purchPrice in currency code of sales lines per sales unit.
    /// </summary>
    /// <param name = "_salesLine">Sales line record</param>
    /// <returns> Purch price in the sales Line currency.</returns>
    internal AmountMST getPurchPriceInSalesCurrencyPerSalesUnit(SalesLine _salesLine)
    {
        CurrencyCode salesCurrencyCode = _salesLine.CurrencyCode;
        AmountMST costPrice = this.getPurchPriceInSalesCurrency(salesCurrencyCode);
        
        if (this.PurchUnit != _salesLine.SalesUnit && costPrice != 0)
        {
            //Converts cost price in purch unit to cost price in sales unit
            costPrice = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_salesLine.ItemId,
                                                                                                        _salesLine.InventDimId,
                                                                                                        costPrice,
                                                                                                        _salesLine.SalesUnit,
                                                                                                        this.PurchUnit,
                                                                                                        NoYes::Yes,
                                                                                                        NoYes::No);
        }
        return costPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchPriceInSalesCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to convert purchPrice to given currency code in sales lines.
    /// </summary>
    /// <param name = "_salesCurrencyCode">Currency code on sales line</param>
    /// <returns> Purch price in the salesLine currency.</returns>
    internal AmountMST getPurchPriceInSalesCurrency(CurrencyCode _salesCurrencyCode)
    {
        AmountMST costPrice;
        if (this.PurchQty)
        {
            costPrice = this.LineAmount/this.PurchQty;
            if (_salesCurrencyCode && _salesCurrencyCode != this.CurrencyCode)
            {
                return CurrencyExchangeHelper::curAmount2CurAmount(costPrice, this.CurrencyCode, _salesCurrencyCode);
            }
        }
        return costPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchPriceInCompanyCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to convert purchPrice to company currency code.
    /// </summary>
    /// <returns> Purch price in the company currency.</returns>
    internal AmountMST getPurchPriceInCompanyCurrency()
    {
        AmountMST costPrice;

        if (this.PurchQty)
        {
            CurrencyCode companyCurrencyCode = Ledger::accountingCurrency(CompanyInfo::current());
            costPrice = this.LineAmount / this.PurchQty;

            if (companyCurrencyCode != this.CurrencyCode)
            {
                return CurrencyExchangeHelper::curAmount2CurAmount(costPrice, this.CurrencyCode, companyCurrencyCode);
            }
        }

        return costPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProjectItemTransId</Name>
				<Source><![CDATA[
    // </GIN>

    /// <summary>
    ///    Finds the <c>PurchLine</c> record.
    /// </summary>
    /// <param name="_projItemTransId">
    ///    A <c>ProjItemTransId</c> record RecId.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that determines whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    ///    A <c>PurchLine</c> record.
    /// </returns>
    static PurchLine findProjectItemTransId(ProjItemTransId _projItemTransId, boolean _update = false)
    {
        PurchLine purchLine;

        if (_projItemTransId)
        {
            purchLine.selectForUpdate(_update);

            select firstonly purchLine
                where purchLine.ProjTransId == _projItemTransId;
        }

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transitDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transit documents
    /// </summary>
    private void transitDocument()
    {
        PurchTable purchTable;
        TransitDocumentManager_IN transitDocManager = TransitDocumentManager_IN::newManager();

        if (transitDocManager.existsAnyTransitDocType() &&
                transitDocManager.existTransitRuleForTransType(tableNum(PurchTable)))
        {
            purchTable = PurchTable::find(this.PurchId);
            transitDocManager.transit(purchTable, this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logMeasure</Name>
				<Source><![CDATA[
    private static void logMeasure(PurchInstrumentation _instrumentation, UtilElementName _objectName, MethodName _methodName, TradeInstrumentationStopwatch _stopWatch)
    {
        _instrumentation.addMeasureElapsedMilliseconds(TradeInstrumentation::getMeasureNameByMethodName(_objectName, _methodName), _stopWatch.elapsedMilliseconds());

        _stopWatch.restart();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAssetGroupBasedOnAssetRule</Name>
				<Source><![CDATA[
    public void setAssetGroupBasedOnAssetRule()
    {
        if (this.RecId)
        {
            this.updateAssetGroupBasedOnAssetRule();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssetGroupBasedOnAssetRule</Name>
				<Source><![CDATA[
    private void updateAssetGroupBasedOnAssetRule()
    {
        if (this.allowCreateFixedAsset())
        {
            AssetGroupId assetGroup = this.getAssetGroupBasedOnAssetRule();
            this.AssetGroup = assetGroup;

            if (assetGroup)
            {
                this.CreateFixedAsset = NoYes::Yes;
            }
            else
            {
                this.CreateFixedAsset = NoYes::No;
            }
        }
        else
        {
            this.CreateFixedAsset = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetGroupBasedOnAssetRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the asset fixed asset group if fixed asset business rules are applied to the procurement product of the purchase line
    /// and the price threshold is met.
    /// </summary>
    public AssetGroupId getAssetGroupBasedOnAssetRule()
    {
        AssetGroupId assetGroup = this.AssetGroup;

        #AssetRules
        if (this.ProcurementCategory
            && this.PurchaseType == PurchaseType::Purch
            && AssetParameters::canAssetBeAutoCreated()
            && !this.receivedInTotalServer()
            && !this.invoicedInTotalServer())
        {
            container assetRules = this.findAndProcessRule();

            assetGroup = conPeek(assetRules, #AssetQualifierAssetGroupPosition);
        }

        return assetGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAndProcessRule</Name>
				<Source><![CDATA[
    public container findAndProcessRule()
    {
        return AssetRule::findAndProcessRule(
            this.ProcurementCategory,
            DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
            this.CurrencyCode, 
            this.PurchPrice, 
            CompanyInfo::findDataArea(curext()).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFixedAssetWithPurchRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the purchase line record ID.
    /// </summary>
    /// <param name = "_purchLineRecId">The purchase order line record ID.</param>
    /// <param name = "_assetId">The purchase order asset ID.</param>
    internal static void updateFixedAssetWithPurchRecId(PurchLineRefRecId _purchLineRecId, AssetId _assetId)
    {
        AssetTable assetTable;

        if ((_purchLineRecId) && (_assetId))
        {
            update_recordset assetTable setting PurchLineRecId = _purchLineRecId
                where assetTable.AssetId == _assetId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTemplateIdPresentInReferenceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the template id is present in the reference table <c>AccountingDistributionTemplate</c>.
    /// </summary>
    /// <param name="_accDistributionTemplateRecId">
    /// A <c>_accDistributionTemplateRecId</c> record RecId.
    /// </param>
    /// <returns>
    /// true if template id is present in the reference table <c>AccountingDistributionTemplate</c>; otherwise false.
    /// </returns>
    public static boolean isTemplateIdPresentInReferenceTable(AccountingDistributionTemplateRecId _accDistributionTemplateRecId)
    {
        boolean ret = true;

        if (_accDistributionTemplateRecId
            && AccountingDistributionTemplate::find(_accDistributionTemplateRecId).legalEntity != CompanyInfo::findDataArea(curext()).RecId)
        {
            ret = checkFailed(strFmt(
                "@SYS304909",
                AccountingDistributionTemplate::find(_accDistributionTemplateRecId).Name,
                fieldPName(AccountingDistributionTemplate, Name),
                tablePName(AccountingDistributionTemplate)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOrphanedHistoryRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether there are purchase order line history records, that correspond to hard-deleted purchase order lines.
    /// </summary>
    /// <returns>
    /// Returns true if there are orphan purchase order history lines.
    /// </returns>

    private boolean hasOrphanedHistoryRecords()
    {
        PurchLineHistory purchLineHistory;
        PurchLine purchLine;
        select firstonly purchLineHistory 
            where purchLineHistory.PurchId == this.PurchId 
            notexists join purchLine 
            where purchLine.InventTransId == purchLineHistory.InventTransId ;

        return purchLineHistory.RecId > 0;
 
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConfirmed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if a Purchase Order line is already confirmed
    /// </summary>
    /// <returns>
    /// true if the condition matches; otherwise false
    /// </returns>
    internal boolean isConfirmed()
    {
        boolean isConfirmed = this.purchTable().isDocumentConfirmed();

        if (!isConfirmed)
        {
            PurchLineAllVersions purchLineAllVersions;

            select firstonly RecId from purchLineAllVersions
                where purchLineAllVersions.SourceDocumentLine == this.SourceDocumentLine;

            isConfirmed = purchLineAllVersions.RecId ? true: false;
        }

        return isConfirmed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateRequestedAndConfirmedShipAndReceiptDate</Name>
				<Source><![CDATA[
    internal void calculateRequestedAndConfirmedShipAndReceiptDate(
        DlvDate         _requestedShipDate,
        DlvDate         _confirmedShipDate)
    {
        this.calculateRequestedShipAndReceiptDate(_requestedShipDate);
        this.calculateConfirmedShipAndReceiptDate(_confirmedShipDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateRequestedShipAndReceiptDate</Name>
				<Source><![CDATA[
    internal void calculateRequestedShipAndReceiptDate(
        DlvDate         _requestedShipDate,
        DlvDate         _requestedReceiptDate = dateNull(),
        SchedDirection  _calculateDirection = SchedDirection::Forward,
        Days            _leadtime = 0,
        CalendarDays    _useCalendarDays = NoYes::No)
    {
        if (PurchParameters::find().IsSupplierShipmentDatesEnabled
            && this.PurchaseType != PurchaseType::ReturnItem)
        {
            VendCustTransportPointCalculateInput input = this.createTransportPointInput(_calculateDirection, _leadtime, _useCalendarDays);
            input.RequestedShipDate = _requestedShipDate;
            input.RequestedReceiptDate = _requestedReceiptDate;
            VendCustTransportPointCalculateOutput output = VendCustTransportPointLine::calculateRequestedShipAndReceiptDate(input);

            setPrefix(strFmt("@SCM:VendorDispatchDateCalculatePurchaseOrderLinePrefix", this.PurchId, this.itemName()));
            if (output && (output.RequestedShipDate != this.RequestedShipDate || this.orig().RequestedShipDate != this.RequestedShipDate))
            {
                output = VendCustTransportPointLine::evaluateRequestedShipDate(input, output);
            }
            else if (output && (output.RequestedReceiptDate != this.DeliveryDate || this.orig().DeliveryDate != this.DeliveryDate))
            {
                output = VendCustTransportPointLine::evaluateRequestedReceiptDate(input, output);
            }

            this.ShippingDateRequested = output.RequestedShipDate;
            this.RequestedShipDate = output.RequestedShipDate;
            this.DeliveryDate = output.RequestedReceiptDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateConfirmedShipAndReceiptDate</Name>
				<Source><![CDATA[
    internal void calculateConfirmedShipAndReceiptDate(
        DlvDate                   _confirmedShipDate,
        DlvDate                   _confirmedReceiptDate = dateNull(),
        SchedDirection            _calculateDirection = SchedDirection::Forward,
        Days                      _leadtime = 0,
        CalendarDays              _useCalendarDays = NoYes::No,
        PurchVendorShipCalendarId _vendorShipCalendar = '')
    {
        if (PurchParameters::find().IsSupplierShipmentDatesEnabled
            && this.PurchaseType != PurchaseType::ReturnItem)
        {
            VendCustTransportPointCalculateInput input = this.createTransportPointInput(_calculateDirection, _leadtime, _useCalendarDays);
            input.VendorShipCalendarId = _vendorShipCalendar;
            input.ConfirmedShipDate = _confirmedShipDate;
            input.ConfirmedReceiptDate = _confirmedReceiptDate;
            VendCustTransportPointCalculateOutput output = VendCustTransportPointLine::calculateConfirmedShipAndReceiptDate(input);

            if (output && output.ConfirmedShipDate && output.ConfirmedShipDate != this.ConfirmedShipDate)
            {
                this.ShippingDateConfirmed = output.ConfirmedShipDate;
                this.ConfirmedShipDate = output.ConfirmedShipDate;
            }

            if (output && output.ConfirmedReceiptDate && output.ConfirmedReceiptDate != this.ConfirmedDlv)
            {
                this.ConfirmedDlv = output.ConfirmedReceiptDate;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransportPointInput</Name>
				<Source><![CDATA[
    protected VendCustTransportPointCalculateInput createTransportPointInput(
        SchedDirection  _calculateDirection = SchedDirection::Forward,
        Days            _leadtime = 0,
        CalendarDays    _useCalendarDays = NoYes::No)
    {
        VendTable localVendTable = this.VendAccount ? VendTable::find(this.VendAccount) : this.vendTable_OrderAccount();

        VendCustTransportPointCalculateInput input = VendCustTransportPointCalculateInput::construct();
        input.ShippingAddress = localVendTable.postalAddress();
        input.ReceivingAddress = this.deliveryAddress();
        input.DeliveryMode = this.DlvMode;
        input.PurchaseCalendarId = localVendTable.PurchCalendarId;
        input.VendorShipCalendarId = this.ShipCalendarId;
        if (this.ItemId && this.DeliveryType != TradeLineDlvType::DropShip)
        {
            input.ItemCoverageGroupCalendarId = this.type().internalCalendarId();
        }
        input.CalculateDirection = _calculateDirection;
        input.LeadTime = _leadtime;
        input.UseCalendarDays = _useCalendarDays;
        input.RequestedShipDateInPast = PurchParameters::find().RequestedShipDateInPast;
        return input;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowCreateFixedAsset</Name>
				<Source><![CDATA[
    internal boolean allowCreateFixedAsset()
    {
        boolean ret = true;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project))
            && AssetVendInvoiceLineProjectCreateFixedAssetFeature::isEnabled()
            && this.ProjId != '')
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124476</DeveloperDocumentation>
	<Label>@SYS9664</Label>
	<SingularLabel>@SYS22957</SingularLabel>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>PurchId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>PurchLineIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProcurementAndSourcing</Modules>
	<PrimaryIndex>TransIdIdx</PrimaryIndex>
	<ReplacementKey>TransIdIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>MCROrderLine2PriceHistoryRef</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MCROrderLine2PriceHistoryRef</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustomsExportOrderTable_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustomsExportOrderTable_IN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustomsImportAssessableValue_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustomsImportAssessableValue_IN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EximPurchLine_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EximPurchLine_IN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustVendCreditInvoicingLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustVendCreditInvoicingLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DocuRef</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>DocuRef</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>MarkupTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MarkupTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PurchLineForeignTradeCategory</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PurchLineForeignTradeCategory</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressLookup</Name>
			<Label>@SYS88672</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressReference</Name>
			<Label>@SYS88679</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AddressRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressRefTableId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AgreementLine</Name>
			<Label>@SYS184156</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MatchingAgreementLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetailLineNumEx1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailPackageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RBOPackageLineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailTempValueEx2</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Attention</Name>
			<Label>@SYS1593</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqAttention</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Barcode</Name>
			<Label>@SYS24296</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BarCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BarCodeType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Block</Name>
			<Label>@SYS28075</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Blocked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Complete</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BOMRoute</Name>
			<Label>@SYS22227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemRouteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemBOMId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Calculated</Name>
			<Label>@SYS22050</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DiscPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfirmedTaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfirmedTaxWriteCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CaseMoreInformation</Name>
			<Label>@SYS314356</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Delivery</Name>
			<Label>@SYS4508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OverDeliveryPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnderDeliveryPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfirmedDlv</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDeliveryType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedShipDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfirmedShipDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipCalendarId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeliveryAddress</Name>
			<Label>@SYS7924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeliveryRef</Name>
			<Label>@SYS78577</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustPurchaseOrderFormNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerRef</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS342338</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountingDistributionTemplate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DiotInformation_MX</Name>
			<Label>@SYS312478</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OperationType_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Discount</Name>
			<Label>@SYS11829</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLnDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLnPercent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DocumentPreview</Name>
			<Label>@SYS117648</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalInformation_BR</Name>
			<Label>@GLS56</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CFOPTable_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>taxationOrigin_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>taxFiscalClassification_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>exceptionCode_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxServiceCode_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FixedAssets</Name>
			<Label>@SYS12578</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CreateFixedAsset</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetBookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetTransTypePurch</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepreciationStartDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FixedAssets_RU</Name>
			<Label>@SYS12578</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetTransTypePurch</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ForeignTrade</Name>
			<Label>@SYS27650</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Port</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatProcId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatTriangularDeal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountyOrigDest</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatisticValue_LT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatFulfillmentDate_HU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatCommodity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigCountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigStateId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>g1099Fields</Name>
			<Label>@SYS24226</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Tax1099Fields</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099State</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099StateAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GSTHSTTaxType_CA</Name>
			<Label>@SYS313827</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GSTHSTTaxType_CA</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Intercompany</Name>
			<Label>@SYS74106</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>interCompanyOriginDisplay</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InterCompanyReference</Name>
			<Label>@SYS14018</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterCompanyInventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InterCompanyReturn</Name>
			<Label>@SYS95177</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReturnDispositionCodeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Intrastat</Name>
			<Label>@SYS6530</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Port</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatProcId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountyOrigDest</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatCommodity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigCountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigStateId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyOrdered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWRemainInventPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainInventPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWInventReceivedNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventReceivedNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWRemainInventFinancial</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainInventFinancial</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceMatching</Name>
			<Label>@SYS113690</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MatchingPolicy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemReference</Name>
			<Label>@SYS24659</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemRefType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MCRDropShip</Name>
			<Label>@MCR23774</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MCRDropShipStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRDropShipComment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRDropShipment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PayWhenPaid</Name>
			<Label>@PSA3342</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsPwp</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCWInventory</Name>
			<Label>@PDS83</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWInventReceivedNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWInvoicedInTotal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWRemainInventFinancial</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWReceivedInTotal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWRemainInventPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWRegistered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWArrived</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWOrdered</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCWMain</Name>
			<Label>@PDS72</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWUnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PDSPotency</Name>
			<Label>@PSC61</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PDSCalculationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PlannedOrder</Name>
			<Label>@SYS8597</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqPOId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqPlanIdSched</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PlanReference</Name>
			<Label>@SYS152559</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlanReference</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting</Name>
			<Label>@SYS5943</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectCostPrice</Name>
			<Label>@SYS13134</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectIdentification</Name>
			<Label>@SYS89920</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjLinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectSalesPrice</Name>
			<Label>@SYS5755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjSalesCurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectSalesTax</Name>
			<Label>@SYS67871</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTaxItemGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjTransaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSA</Name>
			<Label>@PSA43</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventInvoiceNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Remainder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSARetainage</Name>
			<Label>@PSA2704</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PSARetainScheduleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSATotalRetainAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchaseLines</Name>
			<Label>@SYS9664</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxAutogenerated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchaseType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CovRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineHeader</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdBaseCur_TH</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VariantId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchaseQuantity</Name>
			<Label>@SYS11187</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchReceivedNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainPurchPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainPurchFinancial</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchCommitmentLine_PSN</Name>
			<Label>@SPS1834</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchCommitmentLine_PSN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchLine</Name>
			<Label>@SYS22957</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProcurementCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchReq</Name>
			<Label>@SYS94925</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchReqId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>getPurchReqItemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchSupplierAuxId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchReqReference</Name>
			<Label>@SYS110285</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchReqId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Requisitioner</Name>
			<Label>@SYS108788</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Requester</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReturnedItem</Name>
			<Label>@SYS24700</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReturnActionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Scrap</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideSalesTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS25587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Blocked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Complete</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkflowState</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>qualityOrderStatusDisplay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsFinalized</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAddedByChannel</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TableGroup</Name>
			<Label>@SYS21958</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TAMItemVendRebateGroup</Name>
			<Label>@PRO1317</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TAMItemVendRebateGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WithholdingTax</Name>
			<Label>@SYS7372</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdGroup_TH</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdItemGroupHeading_TH</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BudgetReservation_PSN</Name>
			<Label>@Budgeting_BudgetReservationPS:GeneralBudgetReservation</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetReservationLine_PSN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AccountingDistributionTemplate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AccountingDistributionTemplateRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjActivityNumber</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AddressRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AddressRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AddressRefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AddressRefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AgreementSkipAutoLink</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AgreementSkipAutoLink</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetBookId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetBookIdPurchSalesInvent</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetIdOpen</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AssetTransTypePurch</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetTransTypePurchEDT</ExtendedDataType>
			<EnumType>AssetTransTypePurch</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BarCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchBarCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BarCodeType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BarcodeSetupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Blocked</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineStopped</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CFOPTable_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS200</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Complete</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineComplete</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ConfirmedDlv</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLineConfirmedReceiptDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ConfirmedTaxAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConfirmedTaxWriteCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWriteCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountyOrigDest</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AddressCountyOrigDest</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CovRef</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PurchCovRef</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CreateFixedAsset</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CreateFixedAsset</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomerRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustRefLine</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustPurchaseOrderFormNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPurchaseOrder</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteLinkedDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DeliveryDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLineRequestedReceiptDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsDeliveryName</ExtendedDataType>
			<GroupPrompt>@SYS7399</GroupPrompt>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DeliveryType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeLineDlvTypeId</ExtendedDataType>
			<EnumType>TradeLineDlvType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DepreciationStartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IT</CountryRegionCodes>
			<ExtendedDataType>AssetDepreciationStartDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DiscAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchDiscAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DiscPercent</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchDiscPercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EditableInWorkflow</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeEditableInWorkflow</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExternalItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchExternalItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GSTHSTTaxType_CA</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>GSTHSTTaxType_CA</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InterCompanyInventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>TradeInterCompany</ConfigurationKey>
			<ExtendedDataType>InventRefTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InterCompanyOrigin</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>InterCompanyOrigin</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>IntrastatFulfillmentDate_HU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatFulfillmentDate_HU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventInvoiceNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@PSA795</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventReceivedNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SCM:InventReceivedNowLabel</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventRefTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventRefTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeInventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsDeleted</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VersioningIsDeleted</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsFinalized</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLineIsFinalized</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsInvoiceMatched</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLineIsInvoiceMatched</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsModified</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VersioningIsModified</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPwp</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@PSA3342</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemBOMId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemBOMId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemIdSmall</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ItemRefType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventRefType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemRouteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemRouteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@SYS8343</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLineAmount</ExtendedDataType>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LineDeliveryType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>LineDeliveryType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLineDisc</ExtendedDataType>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LineHeader</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineHeader</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LineNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeLineNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LinePercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLinePercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ManualEntryChangepolicy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceDiscPolicyManual</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ManualModifiedField</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FieldId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MatchingAgreementLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AgreementLineRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MatchingPolicy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS129852</Label>
			<EnumType>PurchMatchingPolicyOption</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRDropShipComment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRDropShipComment</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MCRDropShipment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRDropShipment</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MCRDropShipStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>MCRDropShipStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MCROrderLine2PriceHistoryRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCROrderLinePriceHistoryReference</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MultiLnDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchMultiLnDisc</ExtendedDataType>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MultiLnPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchMultiLnPercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemFreeTxt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OperationType_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>VendorOperationType_MX</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OverDeliveryPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchOverDeliveryPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedWHSLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>WHSandTMS</ConfigurationKey>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PDSCalculationId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSCalculationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWInventReceivedNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWQtyReceiveNow</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWRemainInventFinancial</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS75</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWRemainInventPhysical</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS96</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PlanReference</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlanReferenceRefRecId</ExtendedDataType>
			<Label>@SYS333324</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Port</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatPortId</ExtendedDataType>
			<FeatureClass>IntrastatPortToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProcurementCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchCategory</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS6114</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjLinePropertyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjSalesCurrencyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Label>@SYS56480</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProjSalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesPriceCost</ExtendedDataType>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjSalesUnitId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
			<Label>@SCM:ProjSalesUnit</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxGroup</ExtendedDataType>
			<Label>@SCM:ProjectSalesTaxGroup</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxItemGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxItemGroup</ExtendedDataType>
			<Label>@SCM:ProjectItemSalesTaxGroup</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjItemTransId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjWorker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>HcmWorkerRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSARetainScheduleId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PSAPurchRetainScheduleId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PSATotalRetainAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS3494</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PurchaseType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS1201</Label>
			<EnumType>PurchaseType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchCommitmentLine_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PurchFrenchRegulatory_PSN</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SPS1834</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchIdBase</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PurchMarkup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchMarkup</ExtendedDataType>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PurchPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchPrice</ExtendedDataType>
			<Label>@SYS11770</Label>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PurchQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchOrderedQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PurchReceivedNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchQty</ExtendedDataType>
			<Label>@SYS1743</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchReqId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReqId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>PurchReqLineRefId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReqLineRefId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PurchStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS7161</Label>
			<EnumType>PurchStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyOrdered</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SCM:InventQty</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RBOPackageLineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Retail</ConfigurationKey>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Label>@RET4403</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Remainder</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS53728</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainInventFinancial</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS22380</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainInventPhysical</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SCM:PurchLineRemainInventPhysicalLabel</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainPurchFinancial</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchQty</ExtendedDataType>
			<Label>@SYS22380</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainPurchPhysical</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchQty</ExtendedDataType>
			<Label>@SYS22556</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReqAttention</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReqAttention</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReqPlanIdSched</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPlanIdSched</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReqPOId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPOId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Requester</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PurchRequester</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RetailLineNumEx1</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Retail</ConfigurationKey>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailPackageId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailPackageId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RetailTempValueEx2</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTempValueEx2</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReturnActionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReturnActionId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReturnDispositionCodeId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnDispositionCodeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReturnStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>ReturnStatusLine</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Scrap</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS24894</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServiceAddress</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ConfigurationKey>TradeMultiShipTo</ConfigurationKey>
			<ExtendedDataType>Addressing</ExtendedDataType>
			<Label>@SYS88743</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ServiceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DlvDate</ExtendedDataType>
			<Label>@SYS88746</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ShippingDateConfirmed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesShippingDateConfirmed</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ShippingDateRequested</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesShippingDateRequested</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipDistributionUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<IsObsolete>Yes</IsObsolete>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>InterCompanySkipUpdate</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS132694</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>StatisticValue_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LtIntrastatStatisticValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StatProcId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatProcId</ExtendedDataType>
			<FeatureClass>IntrastatProcToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StatTriangularDeal</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTriangularDeal</ExtendedDataType>
			<FeatureClass>IntrastatTriangularDealToggle</FeatureClass>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StockedProduct</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeStockedProduct</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SystemEntryChangePolicy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceDiscPolicySystem</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SystemEntrySource</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>PriceDiscSystemSource</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TAMItemVendRebateGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMItemVendRebateGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Tax1099Amount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099Amount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Tax1099Fields</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099FieldsRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Tax1099RecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Tax1099RecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Tax1099State</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099State</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Tax1099StateAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099StateAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxAutogenerated</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAutoGenerated</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxServiceCode_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxServiceCodeId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxWithholdBaseCur_TH</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>TH,SA,GB,IE</CountryRegionCodes>
			<ExtendedDataType>TaxWithholdBaseCur</ExtendedDataType>
			<Label>@SYS314127</Label>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWithholdGroup_TH</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdGroup</ExtendedDataType>
			<FeatureClass>TaxWithholdingGlobalItemGroupToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdItemGroupHeading_TH</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdItemGroupId_TH</ExtendedDataType>
			<FeatureClass>TaxWithholdingGlobalItemGroupToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransactionCodeId</ExtendedDataType>
			<FeatureClass>IntrastatTransactionCodeToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Transport</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransport</ExtendedDataType>
			<FeatureClass>IntrastatTransportToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UnderDeliveryPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchUnderDeliveryPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VariantId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailVariantId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS3815</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WfDeliveryDueState</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>TradeWorkflowState</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WfInvReceivedState</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>TradeWorkflowState</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkflowState</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TradeWorkflowState</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CreditedVendInvoiceTrans</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendInvoiceTransRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>IntrastatCommodity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatCommodityId</ExtendedDataType>
			<FeatureClass>IntrastatCommodityToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigCountryRegionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemOrigCountryRegionId</ExtendedDataType>
			<FeatureClass>ItemOrigCountryRegionIdToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS27196</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigStateId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemOrigStateId</ExtendedDataType>
			<FeatureClass>ItemOrigStateIdToggle</FeatureClass>
			<Label>@SYS73785</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipCreateMarkup</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupSkipCreateMarkup</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntercompanyOSOSourcingInventSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesSourcingInventSiteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntercompanyOSOSourcingInventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesSourcingInventLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PurchaseOrderLineCreationMethod</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PurchPurchaseOrderCreationMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetReservationLine_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetReservationLineRecId_PSN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SyncIntercompanySalesLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipDeliveryScheduleUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipPriceDiscCalc</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>SalesPurchSkipPriceDiscCalc</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchSupplierAuxId</Name>
			<ExtendedDataType>PurchSupplierAuxId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAddedByChannel</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Retail</ConfigurationKey>
			<ExtendedDataType>RetailPurchLineIsAddedByChannel</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PlanningPriority</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPlanningPriority</ExtendedDataType>
			<FeatureClass>ReqPriorityBasedPlanningFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideSalesTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntegrationOverrideSalesTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RequestedShipDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchRequestedShipDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ConfirmedShipDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchConfirmedShipDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipCalendarId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchVendorShipCalendarId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipShipReceiptDateCalculation</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PurchSkipShipReceiptDateCalculation</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsIntegration</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>TradeIntegrationType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipPriceDiscCalcOnImport</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesPurchSkipPriceDiscCalc</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjSubContractLineNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>ProjSubcontractLine</ExtendedDataType>
			<FeatureClass>ProjOpsSubcontractPurchaseOrderFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FinTag</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FinTagRecId</ExtendedDataType>
			<FeatureClass>PurchaseOrderFinTagFeature</FeatureClass>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PurchLineIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PurchStatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PurchStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StatusItemIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AgreementLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>MatchingAgreementLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>Tax1099FieldsIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Tax1099Fields</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentLine</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CFOPTable_BRIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>CFOPTable_BR</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RBOPackageIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RetailPackageId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RBOPackageLineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PurchIdLineNumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>LineNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PurchId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PurchStatusAndQuantitiesIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PurchId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IsDeleted</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PurchQty</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RemainPurchFinancial</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RemainPurchPhysical</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DeliveryDate</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ConfirmedDlv</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventDimIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PurchId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DeliveryPostalAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PurchStatusInventIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<ConfigurationKey>Retail</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>QtyOrdered</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RemainInventPhysical</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PurchStatusAndDelivery</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<ConfigurationKey>CashFlowForecasting</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PurchId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ConfirmedDlv</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DeliveryDate</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PurchStatusProjIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PurchStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SubConLineNumberIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjSubContractLineNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CurrencyCodeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>FormletterJournalTrans</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Category</MapField>
					<MapFieldTo>ProcurementCategory</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InternalJournalId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JournalId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderId</MapField>
					<MapFieldTo>PurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrigOrderId</MapField>
					<MapFieldTo>PurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>MCRMarginAlertMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccountNum</MapField>
					<MapFieldTo>VendAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
					<MapFieldTo>LinePercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
					<MapFieldTo>PurchMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
					<MapFieldTo>PurchPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitId</MapField>
					<MapFieldTo>PurchUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitQty</MapField>
					<MapFieldTo>PurchQty</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PriceDiscLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccountNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Currency</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Included</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDeliveryType</MapField>
					<MapFieldTo>LineDeliveryType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
					<MapFieldTo>LinePercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
					<MapFieldTo>PurchMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnDisc</MapField>
					<MapFieldTo>MultiLnDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnPercent</MapField>
					<MapFieldTo>MultiLnPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
					<MapFieldTo>PurchPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>PurchQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>PurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Unit</MapField>
					<MapFieldTo>PurchUnit</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PriceDiscResultFields</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DiscPercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
					<MapFieldTo>LinePercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ManualEntryChangePolicy</MapField>
					<MapFieldTo>ManualEntryChangepolicy</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
					<MapFieldTo>PurchMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLineDiscCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnDisc</MapField>
					<MapFieldTo>MultiLnDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnPercent</MapField>
					<MapFieldTo>MultiLnPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWQty</MapField>
					<MapFieldTo>PdsCWQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
					<MapFieldTo>PurchPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RecieptDeliveryDate</MapField>
					<MapFieldTo>DeliveryDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>PurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
					<MapFieldTo>PurchQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchUnit</MapField>
					<MapFieldTo>PurchUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateConfirmed</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateRequested</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SystemEntryChangePolicy</MapField>
					<MapFieldTo>SystemEntryChangePolicy</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SystemEntrySource</MapField>
					<MapFieldTo>SystemEntrySource</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PurchLineMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccountingDistributionTemplate</MapField>
					<MapFieldTo>AccountingDistributionTemplate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ActivityNumber</MapField>
					<MapFieldTo>ActivityNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AddressRefRecId</MapField>
					<MapFieldTo>AddressRefRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AddressRefTableId</MapField>
					<MapFieldTo>AddressRefTableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AgreementSkipAutoLink</MapField>
					<MapFieldTo>AgreementSkipAutoLink</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetBookId</MapField>
					<MapFieldTo>AssetBookId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetGroup</MapField>
					<MapFieldTo>AssetGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetId</MapField>
					<MapFieldTo>AssetId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetTransTypePurch</MapField>
					<MapFieldTo>AssetTransTypePurch</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BarCode</MapField>
					<MapFieldTo>BarCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BarCodeType</MapField>
					<MapFieldTo>BarCodeType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Blocked</MapField>
					<MapFieldTo>Blocked</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CFOPTable_BR</MapField>
					<MapFieldTo>CFOPTable_BR</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Complete</MapField>
					<MapFieldTo>Complete</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConfirmedDlv</MapField>
					<MapFieldTo>ConfirmedDlv</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConfirmedShipDate</MapField>
					<MapFieldTo>ConfirmedShipDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConfirmedTaxAmount</MapField>
					<MapFieldTo>ConfirmedTaxAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConfirmedTaxWriteCode</MapField>
					<MapFieldTo>ConfirmedTaxWriteCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CountyOrigDest</MapField>
					<MapFieldTo>CountyOrigDest</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CovRef</MapField>
					<MapFieldTo>CovRef</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CreateFixedAsset</MapField>
					<MapFieldTo>CreateFixedAsset</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustomerRef</MapField>
					<MapFieldTo>CustomerRef</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustPurchaseOrderFormNum</MapField>
					<MapFieldTo>CustPurchaseOrderFormNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryDate</MapField>
					<MapFieldTo>DeliveryDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryName</MapField>
					<MapFieldTo>DeliveryName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryType</MapField>
					<MapFieldTo>DeliveryType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DepreciationStartDate</MapField>
					<MapFieldTo>DepreciationStartDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DiscAmount</MapField>
					<MapFieldTo>DiscAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DiscPercent</MapField>
					<MapFieldTo>DiscPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExternalItemId</MapField>
					<MapFieldTo>ExternalItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>GSTHSTTaxType_CA</MapField>
					<MapFieldTo>GSTHSTTaxType_CA</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyInventTransId</MapField>
					<MapFieldTo>InterCompanyInventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyOrigin</MapField>
					<MapFieldTo>InterCompanyOrigin</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IntrastatCommodity</MapField>
					<MapFieldTo>IntrastatCommodity</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventReceivedNow</MapField>
					<MapFieldTo>InventReceivedNow</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventRefId</MapField>
					<MapFieldTo>InventRefId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventRefTransId</MapField>
					<MapFieldTo>InventRefTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsFinalized</MapField>
					<MapFieldTo>IsFinalized</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemBOMId</MapField>
					<MapFieldTo>ItemBOMId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemRefType</MapField>
					<MapFieldTo>ItemRefType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemRouteId</MapField>
					<MapFieldTo>ItemRouteId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LedgerDimension</MapField>
					<MapFieldTo>LedgerDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDeliveryType</MapField>
					<MapFieldTo>LineDeliveryType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineHeader</MapField>
					<MapFieldTo>LineHeader</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNumber</MapField>
					<MapFieldTo>LineNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
					<MapFieldTo>LinePercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MatchingAgreementLine</MapField>
					<MapFieldTo>MatchingAgreementLine</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MatchingPolicy</MapField>
					<MapFieldTo>MatchingPolicy</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRDropShipComment</MapField>
					<MapFieldTo>MCRDropShipComment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRDropShipment</MapField>
					<MapFieldTo>MCRDropShipment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRDropShipStatus</MapField>
					<MapFieldTo>MCRDropShipStatus</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnDisc</MapField>
					<MapFieldTo>MultiLnDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnPercent</MapField>
					<MapFieldTo>MultiLnPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Name</MapField>
					<MapFieldTo>Name</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrigCountryRegionId</MapField>
					<MapFieldTo>OrigCountryRegionId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrigStateId</MapField>
					<MapFieldTo>OrigStateId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OverDeliveryPct</MapField>
					<MapFieldTo>OverDeliveryPct</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWInventReceivedNow</MapField>
					<MapFieldTo>PdsCWInventReceivedNow</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWQty</MapField>
					<MapFieldTo>PdsCWQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWRemainInventFinancial</MapField>
					<MapFieldTo>PdsCWRemainInventFinancial</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWRemainInventPhysical</MapField>
					<MapFieldTo>PdsCWRemainInventPhysical</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Port</MapField>
					<MapFieldTo>Port</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProcurementCategory</MapField>
					<MapFieldTo>ProcurementCategory</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCategoryId</MapField>
					<MapFieldTo>ProjCategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjLinePropertyId</MapField>
					<MapFieldTo>ProjLinePropertyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjSalesCurrencyId</MapField>
					<MapFieldTo>ProjSalesCurrencyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjSalesPrice</MapField>
					<MapFieldTo>ProjSalesPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjSalesUnitId</MapField>
					<MapFieldTo>ProjSalesUnitId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTaxGroupId</MapField>
					<MapFieldTo>ProjTaxGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTaxItemGroupId</MapField>
					<MapFieldTo>ProjTaxItemGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTransId</MapField>
					<MapFieldTo>ProjTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjWorker</MapField>
					<MapFieldTo>ProjWorker</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchaseOrderLineCreationMethod</MapField>
					<MapFieldTo>PurchaseOrderLineCreationMethod</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchaseType</MapField>
					<MapFieldTo>PurchaseType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchCommitmentLine_PSN</MapField>
					<MapFieldTo>PurchCommitmentLine_PSN</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchId</MapField>
					<MapFieldTo>PurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchMarkup</MapField>
					<MapFieldTo>PurchMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchPrice</MapField>
					<MapFieldTo>PurchPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchQty</MapField>
					<MapFieldTo>PurchQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchReceivedNow</MapField>
					<MapFieldTo>PurchReceivedNow</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchReqId</MapField>
					<MapFieldTo>PurchReqId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchReqLineRefId</MapField>
					<MapFieldTo>PurchReqLineRefId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchStatus</MapField>
					<MapFieldTo>PurchStatus</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchUnit</MapField>
					<MapFieldTo>PurchUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>QtyOrdered</MapField>
					<MapFieldTo>QtyOrdered</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RemainInventFinancial</MapField>
					<MapFieldTo>RemainInventFinancial</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RemainInventPhysical</MapField>
					<MapFieldTo>RemainInventPhysical</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RemainPurchFinancial</MapField>
					<MapFieldTo>RemainPurchFinancial</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RemainPurchPhysical</MapField>
					<MapFieldTo>RemainPurchPhysical</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReqAttention</MapField>
					<MapFieldTo>ReqAttention</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReqPlanIdSched</MapField>
					<MapFieldTo>ReqPlanIdSched</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReqPOId</MapField>
					<MapFieldTo>ReqPOId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RequestedShipDate</MapField>
					<MapFieldTo>RequestedShipDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Requester</MapField>
					<MapFieldTo>Requester</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReturnActionId</MapField>
					<MapFieldTo>ReturnActionId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReturnDispositionCodeId</MapField>
					<MapFieldTo>ReturnDispositionCodeId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReturnStatus</MapField>
					<MapFieldTo>ReturnStatus</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Scrap</MapField>
					<MapFieldTo>Scrap</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCalendarId</MapField>
					<MapFieldTo>ShipCalendarId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateConfirmed</MapField>
					<MapFieldTo>ShippingDateConfirmed</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateRequested</MapField>
					<MapFieldTo>ShippingDateRequested</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SkipUpdate</MapField>
					<MapFieldTo>SkipUpdate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StatProcId</MapField>
					<MapFieldTo>StatProcId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StatTriangularDeal</MapField>
					<MapFieldTo>StatTriangularDeal</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StockedProduct</MapField>
					<MapFieldTo>StockedProduct</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Tax1099Amount</MapField>
					<MapFieldTo>Tax1099Amount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Tax1099Fields</MapField>
					<MapFieldTo>Tax1099Fields</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Tax1099RecId</MapField>
					<MapFieldTo>Tax1099RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Tax1099State</MapField>
					<MapFieldTo>Tax1099State</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Tax1099StateAmount</MapField>
					<MapFieldTo>Tax1099StateAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxAutogenerated</MapField>
					<MapFieldTo>TaxAutogenerated</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxServiceCode_BR</MapField>
					<MapFieldTo>TaxServiceCode_BR</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdBaseCur_TH</MapField>
					<MapFieldTo>TaxWithholdBaseCur_TH</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdGroup_TH</MapField>
					<MapFieldTo>TaxWithholdGroup_TH</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdItemGroupHeading_TH</MapField>
					<MapFieldTo>TaxWithholdItemGroupHeading_TH</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransactionCode</MapField>
					<MapFieldTo>TransactionCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Transport</MapField>
					<MapFieldTo>Transport</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnderDeliveryPct</MapField>
					<MapFieldTo>UnderDeliveryPct</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendAccount</MapField>
					<MapFieldTo>VendAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendGroup</MapField>
					<MapFieldTo>VendGroup</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PurchReqLineMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Attention</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CFPSTable_BR</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryName</MapField>
					<MapFieldTo>DeliveryName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchId</MapField>
					<MapFieldTo>PurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Requisitioner</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Category</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConfirmedDlv</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExternalItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemBOMId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemRouteId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDeliveryType</MapField>
					<MapFieldTo>LineDeliveryType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRCustVendAC</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCROrderLine2PriceHistoryRef</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRReceiptDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRShipDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSCalculationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWSalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchSalesUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>QtyOrdered</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RequiredDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RetailVariantId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>PurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SkipPriceDiscCalcInBulkCreation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StockedProduct</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SystemEntrySource</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitOfMeasure</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SourceDocumentLineImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TMSLoadLineSource</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransIdIssue</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransIdReceive</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitOfMeasureSymbol</MapField>
					<MapFieldTo>PurchUnit</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TradeLineNumbering</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>HeaderId</MapField>
					<MapFieldTo>PurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>HeaderRecId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsDeleted</MapField>
					<MapFieldTo>IsDeleted</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNumber</MapField>
					<MapFieldTo>LineNumber</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TradePostalAddress</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DeliveryName</MapField>
					<MapFieldTo>DeliveryName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TransitDocumentTransactionMap_IN</MappingTable>
			<Connections />
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PurchaseOrderResponseLineMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ConfirmedDlv</MapField>
					<MapFieldTo>ConfirmedDlv</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsumptionState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Delivering</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryDate</MapField>
					<MapFieldTo>DeliveryDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExternalItemId</MapField>
					<MapFieldTo>ExternalItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNumber</MapField>
					<MapFieldTo>LineNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
					<MapFieldTo>LinePercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Name</MapField>
					<MapFieldTo>Name</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProcurementCategory</MapField>
					<MapFieldTo>ProcurementCategory</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchaseOrderResponseHeader</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchLine</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchPrice</MapField>
					<MapFieldTo>PurchPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchQty</MapField>
					<MapFieldTo>PurchQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchUnit</MapField>
					<MapFieldTo>PurchUnit</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CategoryId</MapField>
					<MapFieldTo>ProcurementCategory</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IntrastatCommodity</MapField>
					<MapFieldTo>IntrastatCommodity</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OverrideSalesTax</MapField>
					<MapFieldTo>OverrideSalesTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
					<MapFieldTo>PurchQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchUnit</MapField>
					<MapFieldTo>PurchUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
					<MapFieldTo>PurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>DeliveryDate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>InventAutoSalesPriceMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
					<MapFieldTo>PurchMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MarkupSecCur_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
					<MapFieldTo>PurchPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceQty</MapField>
					<MapFieldTo>PurchQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceSecCur_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitID</MapField>
					<MapFieldTo>PurchUnit</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>WHSReceiptOrderLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderNumber</MapField>
					<MapFieldTo>PurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNumber</MapField>
					<MapFieldTo>LineNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OverDeliveryPct</MapField>
					<MapFieldTo>OverDeliveryPct</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWQty</MapField>
					<MapFieldTo>PdsCWQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>PurchQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventQty</MapField>
					<MapFieldTo>QtyOrdered</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Unit</MapField>
					<MapFieldTo>PurchUnit</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AccountingDistributionTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AccountingDistributionTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountingDistributionTemplate</Name>
					<Field>AccountingDistributionTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AgreementLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AgreementLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AgreementLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AgreementLine_PurchLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MatchingAgreementLine</Name>
					<Field>MatchingAgreementLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AssetBook</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetBook</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetBookId</Name>
					<Field>AssetBookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetBookTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetBookTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetBookId</Name>
					<Field>AssetBookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BookIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetGroup</Name>
					<Field>AssetGroup</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BarcodeSetup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BarcodeSetup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BarCodeType</Name>
					<Field>BarCodeType</Field>
					<RelatedField>barcodeSetupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BarcodeSetupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOMTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOMTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemBOMId</Name>
					<Field>ItemBOMId</Field>
					<RelatedField>BOMId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CFOPTable_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CFOPTable_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CFOPTable_BR</Name>
					<Field>CFOPTable_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Common</Name>
			<RelatedTable>Common</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AddressRefRecId</Name>
					<Field>AddressRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AddressRefTableId</Name>
					<Field>AddressRefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CountyOrigDest</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCounty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CountyOrigDest</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountyOrigDest</Name>
					<Field>CountyOrigDest</Field>
					<RelatedField>CountyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>VendCurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_PurchLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DeliveryPostalAddress</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsPostalAddress</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsPostalAddress_PurchLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatPort</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatPort</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Port</Name>
					<Field>Port</Field>
					<RelatedField>PortId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PortIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatStatProc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatStatProc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StatProcId</Name>
					<Field>StatProcId</Field>
					<RelatedField>StatProcId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatProcIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransactionCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatTransactionCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransactionCode</Name>
					<Field>TransactionCode</Field>
					<RelatedField>TransactionCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransportMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatTransportMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Transport</Name>
					<Field>Transport</Field>
					<RelatedField>TransPortCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransPortCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventDimCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDimCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VariantId</Name>
					<SourceEDT>RetailVariantId</SourceEDT>
					<Field>VariantId</Field>
					<RelatedField>RetailVariantId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventItemBarcode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventItemBarcode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BarCode</Name>
					<Field>BarCode</Field>
					<RelatedField>itemBarCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventJournalTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ItemRefType</Name>
					<Field>ItemRefType</Field>
					<ValueStr>InventRefType::InventJournal</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefId</Name>
					<Field>InventRefId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_PurchLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MCROrderLine2PriceHistoryRef</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>MCROrderLine2PriceHistoryRef</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCROrderLine2PriceHistoryRef</Name>
					<Field>MCROrderLine2PriceHistoryRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MCRSalesLineRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ItemRefType</Name>
					<Field>ItemRefType</Field>
					<ValueStr>InventRefType::Sales</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefTransId</Name>
					<Field>InventRefTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PlanReference</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PlanReference</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PlanReference</Name>
					<Field>PlanReference</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PriceDiscChangePolicyRecId1</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PriceDiscChangePolicy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PriceDiscChangePolicy</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PriceDiscChangePolicy_PurchLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SystemEntryChangePolicy</Name>
					<Field>SystemEntryChangePolicy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PriceDiscChangePolicyRecId2</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PriceDiscChangePolicy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PriceDiscChangePolicy_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PriceDiscChangePolicy_1_PurchLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ManualEntryChangepolicy</Name>
					<Field>ManualEntryChangepolicy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProcurementCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResCategory_PurchLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProcurementCategory</Name>
					<Field>ProcurementCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdLineRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProdLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefId</Name>
					<Field>InventRefId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ItemRefType</Name>
					<Field>ItemRefType</Field>
					<ValueStr>InventRefType::ProdLine</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProdTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ItemRefType</Name>
					<Field>ItemRefType</Field>
					<ValueStr>InventRefType::Production</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefId</Name>
					<Field>InventRefId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjectSalesCurrency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjectSalesCurrency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjSalesCurrencyId</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>ProjSalesCurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjectTaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjectTaxGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxGroupId</Name>
					<SourceEDT>ProjTaxGroup</SourceEDT>
					<Field>ProjTaxGroupId</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjectTaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjectTaxItemGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxItemGroupId</Name>
					<SourceEDT>ProjTaxItemGroup</SourceEDT>
					<Field>ProjTaxItemGroupId</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjItemTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjItemTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTransId</Name>
					<Field>ProjTransId</Field>
					<RelatedField>ProjTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjLinePropertyId</Name>
					<Field>ProjLinePropertyId</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjSalesUnitId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjSalesUnitId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjSalesUnitId</Name>
					<Field>ProjSalesUnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjWorker</Name>
					<Field>ProjWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PSAVendorRetentionTermsTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PSAVendorRetentionTermsTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSARetainScheduleId</Name>
					<SourceEDT>PSAPurchRetainScheduleId</SourceEDT>
					<Field>PSARetainScheduleId</Field>
					<RelatedField>VendorRetentionTermId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchCommitmentLine_PSN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchCommitmentLine_PSN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchCommitmentLine_PSN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchCommitmentLine_PSN</Name>
					<Field>PurchCommitmentLine_PSN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchReqLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>PurchReqLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchReqLineRefId</Name>
					<Field>PurchReqLineRefId</Field>
					<RelatedField>LineRefId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>LineRefIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchReqTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchReqTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchReqId</Name>
					<Field>PurchReqId</Field>
					<RelatedField>PurchReqId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchReqIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchReturnActionDefaults</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReturnActionDefaults</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchReturnActionDefaults</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReturnActionId</Name>
					<Field>ReturnActionId</Field>
					<RelatedField>ReturnActionId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventPurchSales::Purch</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchId</Name>
					<Field>PurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchUnit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchUnit</Name>
					<Field>PurchUnit</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReqPlanSched</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReqPlanSched</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReqPlanIdSched</Name>
					<Field>ReqPlanIdSched</Field>
					<RelatedField>ReqPlanIdSched</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PlanIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Requester_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Requester</Name>
					<Field>Requester</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailPackageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailPackageTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailPackageId</Name>
					<SourceEDT>RetailPackageId</SourceEDT>
					<Field>RetailPackageId</Field>
					<RelatedField>PackageId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReturnDispositionCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReturnDispositionCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReturnDispositionCodeId</Name>
					<Field>ReturnDispositionCodeId</Field>
					<RelatedField>DispositionCodeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DispositionCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RouteTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RouteTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemRouteId</Name>
					<Field>ItemRouteId</Field>
					<RelatedField>RouteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ItemRefType</Name>
					<Field>ItemRefType</Field>
					<ValueStr>InventRefType::Sales</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefId</Name>
					<Field>InventRefId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SourceDocumentLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>SourceDocumentLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentLine</Name>
					<Field>SourceDocumentLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>State</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressState</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Tax1099State</Name>
					<Field>Tax1099State</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TAMItemVendRebateGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TAMItemVendRebateGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TAMItemVendRebateGroupId</Name>
					<Field>TAMItemVendRebateGroupId</Field>
					<RelatedField>ItemVendRebateGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TAMItemVendRebateGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Tax1099BoxDetail</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Tax1099BoxDetail</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Tax1099BoxDetail</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Tax1099BoxDetail_PurchLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Tax1099RecId</Name>
					<Field>Tax1099RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Tax1099Fields</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Tax1099Fields</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Tax1099Fields</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Tax1099Fields</Name>
					<Field>Tax1099Fields</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<SourceEDT>TaxGroup</SourceEDT>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxItemGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<SourceEDT>TaxItemGroup</SourceEDT>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxServiceCode_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TaxServiceCode_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchLine_TaxServiceCode_BR</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxServiceCode_BR</Name>
					<Field>TaxServiceCode_BR</Field>
					<RelatedField>ServiceCodeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdGroup_TH</Name>
					<Field>TaxWithholdGroup_TH</Field>
					<RelatedField>TaxWithholdGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxWithholdGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdItemGroupHeading_TH</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdItemGroupHeading_TH</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdItemGroupHeading_TH</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdItemGroupHeading_TH_PurchLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdItemGroupHeading_TH</Name>
					<Field>TaxWithholdItemGroupHeading_TH</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendGroup</Name>
					<Field>VendGroup</Field>
					<RelatedField>VendGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<Field>VendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CreditedVendInvoiceTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CreditedVendInvoiceTrans</Name>
					<Field>CreditedVendInvoiceTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OrigCountryRegion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressCountryRegion</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsAddressCountryRegion_PurchLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigCountryRegionId</Name>
					<Field>OrigCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OrigState</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressState</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressState</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsAddressState_PurchLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigCountryRegionId</Name>
					<Field>OrigCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigStateId</Name>
					<Field>OrigStateId</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionStateIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatCommodity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IntrastatCommodity</Name>
					<Field>IntrastatCommodity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsPostalAddressBaseEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddressBaseEntity</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>AddressRecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetReservationLine_PSN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BudgetReservationLine_PSN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetReservationLine_PSN</Name>
					<Field>BudgetReservationLine_PSN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchTableRef</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefId</Name>
					<Field>InventRefId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ItemRefType</Name>
					<Field>ItemRefType</Field>
					<ValueStr>InventRefType::Purch</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FinTag</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FinTag</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>FinTag</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FinTag</Name>
					<Field>FinTag</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>