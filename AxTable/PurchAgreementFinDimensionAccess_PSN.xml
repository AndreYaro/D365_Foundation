<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAgreementFinDimensionAccess_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchAgreementFinDimensionAccess_PSN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayAvailableAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and displays the available amount.
    /// </summary>
    /// <returns>
    /// A real containing the available amount for the financial dimension value.
    /// </returns>
    public display AmountCur displayAvailableAmount()
    {
        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            return this.AuthorizedAmount - this.displayFulfilledAmount();
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFulfilledAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and displays the fulfilled amount.
    /// </summary>
    /// <returns>
    /// A real containing the fulfilled amount for the financial dimension value.
    /// </returns>
    public display AmountCur displayFulfilledAmount()
    {
        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            return PurchAgreementFinDimensionAccess_PSN::calculateFulfilledAmount(this.PurchAgreementHeader, this.DimensionAttributeValue);
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPurchAgreementFinDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets or gets the record ID of the <c>DimensionAttributeValue</c> record for the <c>PurchAgreementFinDimensionAccess_PSN</c> table.
    /// </summary>
    /// <param name="_set">
    /// The indicator on whether to update or not.
    /// </param>
    /// <param name="_dimensionValue">
    /// The ID of the dimension value.
    /// </param>
    /// <returns>
    /// The ID of the dimension value.
    /// </returns>
    public edit DimensionValue editPurchAgreementFinDimensionValue(boolean _set, DimensionValue _dimensionValue)
    {
        DimensionValue          dimensionValue = "";
        DimensionAttributeValue dimensionAttributeValue;

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            if (_set)
            {
                if (_dimensionValue == "")
                {
                    this.DimensionAttributeValue = 0;
                }
                else
                {
                    dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndValue(DimensionAttribute::find(VendParameters::find().PurchAgreementFinancialDimension_PSN), _dimensionValue, false, false);

                    if (dimensionAttributeValue)
                    {
                        if (PurchAgreementFinDimensionAccess_PSN::isFinDimensionValueValid(dimensionAttributeValue))
                        {
                            this.DimensionAttributeValue = dimensionAttributeValue.RecId;
                        }
                    }
                    else
                    {
                        this.DimensionAttributeValue = 0;
                    }
                }
            }
            else
            {
                if (this.DimensionAttributeValue != 0)
                {
                    dimensionValue = DimensionAttributeValue::find(this.DimensionAttributeValue).getValue();
                }
            }
        }

        return dimensionValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);
        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            if (ret)
            {
                switch (_fieldIdToCheck)
                {
                    case fieldNum(PurchAgreementFinDimensionAccess_PSN, AuthorizedAmount) :
                        if (this.AuthorizedAmount < this.displayFulfilledAmount())
                        {
                            ret = checkFailed(strFmt("@SPS2150", this.displayFulfilledAmount()));
                        }
                        break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFulfilledAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the fulfilled amount for the specified purchase agreement header record and financial dimension value.
    /// </summary>
    /// <param name="_purchAgreementHeaderRecId">
    /// The record ID of the <c>PurchAgreementHeader</c> record.
    /// </param>
    /// <param name="_dimensionAttributeValueRecId">
    /// The record ID of the <c>DimensionAttributeValue</c> record.
    /// </param>
    /// <returns>
    /// A real containing the fulfilled amount for the financial dimension value.
    /// </returns>
    public static AmountCur calculateFulfilledAmount(recId _purchAgreementHeaderRecId, recId _dimensionAttributeValueRecId)
    {
        AccountingDistribution                  parentAccountingDistribution;
        AccountingDistribution                  childAccountingDistribution;
        SourceDocumentLine                      sourceDocumentLine;
        PurchLine                               purchLine;
        PurchTable                              purchTable;
        VendInvoiceTrans                        vendInvoiceTrans;
        VendInvoiceJour                         vendInvoiceJour;
        VendInvoiceInfoTable                    vendInvoiceInfoTable;
        VendInvoiceInfoLine                     vendInvoiceInfoLine;
        PurchAgreementHeader                    purchAgreementHeader;
        PurchAgreementFinDimensionAccess_PSN    purchAgreementFinDimensionAccess_PSN;
        DimensionAttribute                      dimensionAttribute;
        DimensionAttributeValue                 dimensionAttributeValue;
        DimensionAttributeLevelValueView        dimensionAttributeLevelValueView;

        recId                                   dimensionAttributeValueCombinationRecId;

        AmountCur                               fulfilledAmountForReleasedPO;
        AmountCur                               fulfilledAmountForDirectInvoice;
        AmountCur                               fulfilledAmountForCurrentDirectInvoice;
        AmountCur                               fulfilledAmount;

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            if (VendParameters::find().PurchAgreementFinancialDimension_PSN != 0 && _purchAgreementHeaderRecId != 0 && _dimensionAttributeValueRecId != 0)
            {
                while select TransactionCurrencyAmount, LedgerDimension, MonetaryAmount, ParentDistribution from parentAccountingDistribution
                        where parentAccountingDistribution.MonetaryAmount == MonetaryAmount::ExtendedPrice
                            && parentAccountingDistribution.ParentDistribution == 0
                    exists join sourceDocumentLine
                        where parentAccountingDistribution.SourceDocumentLine == sourceDocumentLine.RecId
                            && sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Completed
                    exists join purchLine
                        where sourceDocumentLine.RecId == purchLine.SourceDocumentLine
                    exists join purchTable
                        where purchLine.PurchId == purchTable.PurchId
                    exists join purchAgreementHeader
                        where purchTable.MatchingAgreement == purchAgreementHeader.RecId
                            && purchAgreementHeader.RecId == _purchAgreementHeaderRecId
                    exists join purchAgreementFinDimensionAccess_PSN
                        where purchAgreementHeader.RecId == purchAgreementFinDimensionAccess_PSN.PurchAgreementHeader
                            && purchAgreementFinDimensionAccess_PSN.DimensionAttributeValue == _dimensionAttributeValueRecId
                {
                    select sum(TransactionCurrencyAmount) from childAccountingDistribution
                        where parentAccountingDistribution.RecId == childAccountingDistribution.ParentDistribution
                            && (childAccountingDistribution.MonetaryAmount == MonetaryAmount::Discount
                            || childAccountingDistribution.MonetaryAmount == MonetaryAmount::PriceAdjustment);

                    dimensionAttributeValueCombinationRecId = parentAccountingDistribution.LedgerDimension;

                    if (dimensionAttributeValueCombinationRecId != 0)
                    {
                        dimensionAttribute = DimensionAttribute::find(VendParameters::find().PurchAgreementFinancialDimension_PSN);

                        select firstonly DisplayValue from dimensionAttributeLevelValueView
                            where dimensionAttributeLevelValueView.ValueCombinationRecId == dimensionAttributeValueCombinationRecId
                                && dimensionAttributeLevelValueView.DimensionAttribute == dimensionAttribute.RecId;

                        dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndValue(dimensionAttribute,
                                                                                                            dimensionAttributeLevelValueView.DisplayValue,
                                                                                                            false,
                                                                                                            false);

                        if (_dimensionAttributeValueRecId == dimensionAttributeValue.RecId)
                        {
                            fulfilledAmountForReleasedPO += parentAccountingDistribution.TransactionCurrencyAmount + childAccountingDistribution.TransactionCurrencyAmount;
                        }
                    }
                }

                while select TransactionCurrencyAmount, LedgerDimension, MonetaryAmount, ParentDistribution from parentAccountingDistribution
                        where parentAccountingDistribution.MonetaryAmount == MonetaryAmount::ExtendedPrice
                            && parentAccountingDistribution.ParentDistribution == 0
                    exists join sourceDocumentLine
                        where parentAccountingDistribution.SourceDocumentLine == sourceDocumentLine.RecId
                            && sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Completed
                    exists join vendInvoiceTrans
                        where sourceDocumentLine.RecId == vendInvoiceTrans.SourceDocumentLine
                    exists join vendInvoiceJour
                        where vendInvoiceTrans.PurchID == vendInvoiceJour.PurchId
                            && vendInvoiceTrans.InvoiceId == vendInvoiceJour.InvoiceId
                            && vendInvoiceTrans.InvoiceDate == vendInvoiceJour.InvoiceDate
                            && vendInvoiceTrans.NumberSequenceGroup == vendInvoiceJour.NumberSequenceGroup
                            && vendInvoiceTrans.InternalInvoiceId == vendInvoiceJour.InternalInvoiceId
                    exists join purchAgreementHeader
                        where vendInvoiceJour.PurchAgreementHeader_PSN == purchAgreementHeader.RecId
                            && purchAgreementHeader.RecId == _purchAgreementHeaderRecId
                    exists join purchAgreementFinDimensionAccess_PSN
                        where purchAgreementHeader.RecId == purchAgreementFinDimensionAccess_PSN.PurchAgreementHeader
                {
                    select sum(TransactionCurrencyAmount) from childAccountingDistribution
                        where parentAccountingDistribution.RecId == childAccountingDistribution.ParentDistribution
                            && (childAccountingDistribution.MonetaryAmount == MonetaryAmount::Discount
                            || childAccountingDistribution.MonetaryAmount == MonetaryAmount::PriceAdjustment);

                    dimensionAttributeValueCombinationRecId = parentAccountingDistribution.LedgerDimension;

                    if (dimensionAttributeValueCombinationRecId != 0)
                    {
                        dimensionAttribute = DimensionAttribute::find(VendParameters::find().PurchAgreementFinancialDimension_PSN);

                        select firstonly DisplayValue from dimensionAttributeLevelValueView
                            where dimensionAttributeLevelValueView.ValueCombinationRecId == dimensionAttributeValueCombinationRecId
                                && dimensionAttributeLevelValueView.DimensionAttribute == dimensionAttribute.RecId;

                        dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndValue(dimensionAttribute, dimensionAttributeLevelValueView.DisplayValue, false, false);

                        if (_dimensionAttributeValueRecId == dimensionAttributeValue.RecId)
                        {
                            fulfilledAmountForDirectInvoice += parentAccountingDistribution.TransactionCurrencyAmount + childAccountingDistribution.TransactionCurrencyAmount;
                        }
                    }
                }

                while select TransactionCurrencyAmount from parentAccountingDistribution
                    where parentAccountingDistribution.MonetaryAmount == MonetaryAmount::ExtendedPrice
                        && parentAccountingDistribution.ParentDistribution == 0
                    exists join sourceDocumentLine
                        where parentAccountingDistribution.SourceDocumentLine == sourceDocumentLine.RecId
                    exists join vendInvoiceInfoLine
                        where vendInvoiceInfoLine.SourceDocumentLine == sourceDocumentLine.RecId
                            && sourceDocumentLine.SourceRelationType == tableNum(VendInvoiceInfoLine)
                    exists join vendInvoiceInfoTable
                        where vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
                            && vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
                            && vendInvoiceInfoLine.ParmId != ''
                    exists join purchAgreementHeader
                        where vendInvoiceInfoTable.PurchAgreementHeader_PSN == purchAgreementHeader.RecId
                            && purchAgreementHeader.RecId == _purchAgreementHeaderRecId
                {
                    select sum(TransactionCurrencyAmount) from childAccountingDistribution
                        where parentAccountingDistribution.RecId == childAccountingDistribution.ParentDistribution
                            && (childAccountingDistribution.MonetaryAmount == MonetaryAmount::Discount
                            || childAccountingDistribution.MonetaryAmount == MonetaryAmount::PriceAdjustment);

                    fulfilledAmountForCurrentDirectInvoice += parentAccountingDistribution.TransactionCurrencyAmount + childAccountingDistribution.TransactionCurrencyAmount;
                }

                fulfilledAmount = fulfilledAmountForReleasedPO + fulfilledAmountForDirectInvoice + fulfilledAmountForCurrentDirectInvoice;
            }
        }

        return fulfilledAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>PurchAgreementFinDimensionAccess_PSN</c> table; if not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>PurchAgreementFinDimensionAccess_PSN</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(recId _recId)
    {
        boolean isExisting = true;

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            if (!PurchAgreementFinDimensionAccess_PSN::exist(_recId))
            {
                isExisting = checkFailed(strFmt(PurchAgreementFinDimensionAccess_PSN::txtNotExist(), _recId));
            }
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>PurchAgreementFinDimensionAccess_PSN</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>PurchAgreementFinDimensionAccess_PSN</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        PurchAgreementFinDimensionAccess_PSN purchAgreementFinDimensionAccess_PSN;

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            select firstonly
                RecId
            from
                purchAgreementFinDimensionAccess_PSN
            where
                purchAgreementFinDimensionAccess_PSN.RecId == _recId;
        }

        return purchAgreementFinDimensionAccess_PSN != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PurchAgreementFinDimensionAccess_PSN</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>PurchAgreementFinDimensionAccess_PSN</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PurchAgreementFinDimensionAccess_PSN</c> table; otherwise, an empty record.
    /// </returns>
    public static PurchAgreementFinDimensionAccess_PSN find(
        recId _recId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        PurchAgreementFinDimensionAccess_PSN purchAgreementFinDimensionAccess_PSN;

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            purchAgreementFinDimensionAccess_PSN.selectForUpdate(_forUpdate);
            if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                purchAgreementFinDimensionAccess_PSN.concurrencyModel(_concurrencyModel);
            }

            select firstonly
                    purchAgreementFinDimensionAccess_PSN
                where
                    purchAgreementFinDimensionAccess_PSN.RecId == _recId;
        }

        return purchAgreementFinDimensionAccess_PSN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDepartmentAndAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PurchAgreementFinDimensionAccess_PSN</c> table.
    /// </summary>
    /// <param name="_dimensionAttributeValueRecId">
    /// The record ID of the <c>DimensionAttributeValue</c> record.
    /// </param>
    /// <param name="_purchAgreementHeaderRecId">
    /// The record ID of the <c>PurchAgreementHeader</c> record.
    /// </param>
    /// <returns>
    /// A record in the <c>PurchAgreementFinDimensionAccess_PSN</c> table; otherwise, an empty record.
    /// </returns>
    public static PurchAgreementFinDimensionAccess_PSN findByDepartmentAndAgreement(recId _dimensionAttributeValueRecId, recId _purchAgreementHeaderRecId)
    {
        PurchAgreementFinDimensionAccess_PSN purchAgreementFinDimensionAccess_PSN;

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            select firstonly
                    purchAgreementFinDimensionAccess_PSN
                where
                    purchAgreementFinDimensionAccess_PSN.DimensionAttributeValue == _dimensionAttributeValueRecId
                    && purchAgreementFinDimensionAccess_PSN.PurchAgreementHeader == _purchAgreementHeaderRecId;
        }

        return purchAgreementFinDimensionAccess_PSN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinDimensionValueFromLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a record in the <c>DimensionAttributeValue</c> table for the specified dimension attribute value combination.
    /// </summary>
    /// <param name="_dimensionAttributeValueCombination">
    /// The record ID of the <c>DimensionAttributeValueCombination</c> record.
    /// </param>
    /// <returns>
    /// A record in the <c>DimensionAttributeValue</c> table; otherwise, an empty record.
    /// </returns>
    public static DimensionAttributeValue getFinDimensionValueFromLedgerDimension(recId _dimensionAttributeValueCombination)
    {
        DimensionAttribute                  dimensionAttribute;
        DimensionAttributeLevelValueView    dimensionAttributeLevelValueView;
        DimensionAttributeValue             dimensionAttributeValue;

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            if (VendParameters::find().PurchAgreementFinancialDimension_PSN != 0 && _dimensionAttributeValueCombination != 0)
            {
                dimensionAttribute = DimensionAttribute::find(VendParameters::find().PurchAgreementFinancialDimension_PSN);

                select firstonly DisplayValue from dimensionAttributeLevelValueView
                    where dimensionAttributeLevelValueView.ValueCombinationRecId == _dimensionAttributeValueCombination
                        && dimensionAttributeLevelValueView.DimensionAttribute == dimensionAttribute.RecId;

                dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndValue(dimensionAttribute,
                                                                                                    dimensionAttributeLevelValueView.DisplayValue,
                                                                                                    false,
                                                                                                    false);
            }
        }

        return dimensionAttributeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFinDimensionAmountAuthorized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the financial dimension value is authorized to consume the amount entered.
    /// </summary>
    /// <param name="_purchAgreementLineRecId">
    /// The record ID of the <c>AgreementLine</c> record.
    /// </param>
    /// <param name="_sourceDocumentLine">
    /// The record ID of the <c>SourceDocumentLine</c> record.
    /// </param>
    /// <returns>
    /// true if the financial dimension value is authorized; otherwise, false.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The release order cannot be created because the release amount exceeds the maximum amount of purchase agreement.
    /// </exception>
    public static boolean isFinDimensionAmountAuthorized(recId _purchAgreementLineRecId, recId _sourceDocumentLine)
    {
        AccountingDistribution                  parentAccountingDistribution;
        SourceDocumentLine                      sourceDocumentLine;
        PurchAgreementFinDimensionAccess_PSN    purchAgreementFinDimensionAccess_PSN;
        DimensionAttribute                      dimensionAttribute;
        DimensionAttributeValue                 dimensionAttributeValue;
        DimensionAttributeLevelValueView        dimensionAttributeLevelValueView;

        recId                                   dimensionAttributeValueCombinationRecId;
        recId                                   purchAgreementHeaderRecId;

        boolean                                 isAuthorized = true;

        AmountCur                               fulfilledAmount;
        AmountCur                               authorizedAmount;

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            if (VendParameters::find().PurchAgreementFinancialDimension_PSN != 0 && _purchAgreementLineRecId !=0 && _sourceDocumentLine != 0)
            {
                purchAgreementHeaderRecId = AgreementLine::find(_purchAgreementLineRecId).agreementHeader().RecId;

                if (purchAgreementHeaderRecId != 0)
                {
                    select LedgerDimension from parentAccountingDistribution
                        where parentAccountingDistribution.MonetaryAmount == MonetaryAmount::ExtendedPrice
                            && parentAccountingDistribution.ParentDistribution == 0
                        exists join sourceDocumentLine
                            where parentAccountingDistribution.SourceDocumentLine == sourceDocumentLine.RecId
                                && sourceDocumentLine.RecId == _sourceDocumentLine;

                    dimensionAttributeValueCombinationRecId = parentAccountingDistribution.LedgerDimension;

                    if (dimensionAttributeValueCombinationRecId != 0)
                    {
                        dimensionAttribute = DimensionAttribute::find(VendParameters::find().PurchAgreementFinancialDimension_PSN);

                        select firstonly DisplayValue from dimensionAttributeLevelValueView
                            where dimensionAttributeLevelValueView.ValueCombinationRecId == dimensionAttributeValueCombinationRecId
                                && dimensionAttributeLevelValueView.DimensionAttribute == dimensionAttribute.RecId;

                        dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndValue(dimensionAttribute,
                                                                                                            dimensionAttributeLevelValueView.DisplayValue,
                                                                                                            false,
                                                                                                            false);

                        purchAgreementFinDimensionAccess_PSN = PurchAgreementFinDimensionAccess_PSN::findByDepartmentAndAgreement(dimensionAttributeValue.RecId,
                                                                                                                                    purchAgreementHeaderRecId);
                        if (purchAgreementFinDimensionAccess_PSN.RecId != 0)
                        {
                            fulfilledAmount = PurchAgreementFinDimensionAccess_PSN::calculateFulfilledAmount(purchAgreementHeaderRecId, dimensionAttributeValue.RecId);
                            authorizedAmount = purchAgreementFinDimensionAccess_PSN.AuthorizedAmount;
                            if (authorizedAmount < fulfilledAmount)
                            {
                                isAuthorized = false;
                                throw error (strFmt("@SPS2459", PurchAgreementHeader::find(purchAgreementHeaderRecId).PurchNumberSequence, authorizedAmount - fulfilledAmount));
                            }
                        }
                    }
                }
            }
        }

        return isAuthorized;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFinDimensionValueAuthorizedSegmentedEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the financial dimension value is authorized to be used for the specified purchase agreement.
    /// </summary>
    /// <param name="_purchAgreementHeaderRecId">
    /// The record ID of the <c>PurchAgreementHeader</c> record.
    /// </param>
    /// <param name="_dimensionAttributeValueCombinationRecId">
    /// The record ID of the <c>DimensionAttributeValueCombination</c> record.
    /// </param>
    /// <param name="_segmentedEntryControl">
    /// An object of the <c>SegmentedEntryControl</c> class.
    /// </param>
    /// <returns>
    /// true if the financial dimension value is authorized for the specified purchase agreement; otherwise, false.
    /// </returns>
    public static boolean isFinDimensionValueAuthorizedSegmentedEntry(RefRecId _purchAgreementHeaderRecId,
                                                                RefRecId _dimensionAttributeValueCombinationRecId = 0,
                                                                SegmentedEntryControl _segmentedEntryControl = null
                                                                )
    {
        DimensionAttribute                      dimensionAttribute;
        DimensionAttributeValue                 dimensionAttributeValue;
        PurchAgreementFinDimensionAccess_PSN    purchAgreementFinDimensionAccess_PSN;
        DimensionAttributeLevelValueView        dimensionAttributeLevelValueView;
        DimensionAttributeRecId                 dimensionAttributeRecId;
        boolean                                 isAuthorized = true;
        int                                     segmentCounter = 1;
        RefRecId                                purchAgreementFinancialDimension_PSN;
        DimensionControlSegment                 dimensionValue;

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            purchAgreementFinancialDimension_PSN = VendParameters::find().PurchAgreementFinancialDimension_PSN;

            if (purchAgreementFinancialDimension_PSN != 0  && _purchAgreementHeaderRecId != 0)
            {
                select firstonly RecId from purchAgreementFinDimensionAccess_PSN
                    where purchAgreementFinDimensionAccess_PSN.PurchAgreementHeader == _purchAgreementHeaderRecId;

                if (purchAgreementFinDimensionAccess_PSN.RecId != 0)
                {
                    if (_dimensionAttributeValueCombinationRecId != 0
                        && _segmentedEntryControl == null)
                    {
                        dimensionAttribute = DimensionAttribute::find(purchAgreementFinancialDimension_PSN);

                        select firstonly DisplayValue from dimensionAttributeLevelValueView
                            where dimensionAttributeLevelValueView.ValueCombinationRecId == _dimensionAttributeValueCombinationRecId
                                && dimensionAttributeLevelValueView.DimensionAttribute == dimensionAttribute.RecId;

                        dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndValue(dimensionAttribute,
                                                                                                            dimensionAttributeLevelValueView.DisplayValue,
                                                                                                            false,
                                                                                                            false);

                        purchAgreementFinDimensionAccess_PSN = PurchAgreementFinDimensionAccess_PSN::findByDepartmentAndAgreement(dimensionAttributeValue.RecId,
                                                                                                                                    _purchAgreementHeaderRecId);
                    }

                    else if (_dimensionAttributeValueCombinationRecId == 0
                        && _segmentedEntryControl != null)
                    {
                        while (segmentCounter <= _segmentedEntryControl.segmentCount())
                        {
                            dimensionAttributeRecId = _segmentedEntryControl.getDimensionAttributeByControlIndex(segmentCounter);

                            if (dimensionAttributeRecId == purchAgreementFinancialDimension_PSN)
                            {
                                dimensionValue = _segmentedEntryControl.parmValidatedSegments().value(segmentCounter);
                                dimensionAttributeValue = dimensionValue.parmDimensionAttributeValue();

                                purchAgreementFinDimensionAccess_PSN = PurchAgreementFinDimensionAccess_PSN::findByDepartmentAndAgreement(dimensionAttributeValue.RecId,
                                                                                                                                            _purchAgreementHeaderRecId);
                                break;
                            }

                            segmentCounter++;
                        }
                    }

                    if (purchAgreementFinDimensionAccess_PSN.RecId == 0)
                    {
                        isAuthorized = checkFailed("@SPS2360");
                    }
                }
            }
        }

        return isAuthorized;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFinDimensionValueUtilized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the specified financial dimension value associated with the specified purchase agreement is utilized in purchase orders or vendor invoices.
    /// </summary>
    /// <param name="_purchAgreementHeaderRecId">
    /// The record ID of the <c>PurchAgreementHeader</c> record.
    /// </param>
    /// <param name="_dimensionAttributeValueRecId">
    /// The record ID of the <c>DimensionAttributeValue</c> record.
    /// </param>
    /// <returns>
    /// true if the financial dimension value is utilized; otherwise, false.
    /// </returns>
    public static boolean isFinDimensionValueUtilized(recId _purchAgreementHeaderRecId,
                                                        recId _dimensionAttributeValueRecId)
    {
        PurchAgreementHeader                purchAgreementHeader;
        AgreementLine                       purchAgreementLine;
        PurchCommitmentLine_PSN             purchCommitmentLine_PSN;
        PurchTable                          purchTable;
        PurchLine                           purchLine;
        VendInvoiceInfoTable                vendInvoiceInfoTable;
        VendInvoiceInfoLine                 vendInvoiceInfoLine;
        VendInvoiceJour                     vendInvoiceJour;
        VendInvoiceTrans                    vendInvoiceTrans;
        DimensionAttributeValue             dimensionAttributeValue;

        boolean                             isUtilized;

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            if (VendParameters::find().PurchAgreementFinancialDimension_PSN != 0 && _purchAgreementHeaderRecId != 0 && _dimensionAttributeValueRecId != 0)
            {
                while select RecId, LedgerDimension from purchCommitmentLine_PSN
                    exists join purchAgreementLine
                        where purchCommitmentLine_PSN.AgreementLine == purchAgreementLine.RecId
                    exists join purchAgreementHeader
                        where purchAgreementLine.Agreement == purchAgreementHeader.RecId
                            && purchAgreementHeader.RecId == _purchAgreementHeaderRecId
                    exists join purchLine
                        where purchCommitmentLine_PSN.RecId == purchLine.PurchCommitmentLine_PSN
                    exists join purchTable
                        where purchLine.PurchId == purchTable.PurchId
                            && purchTable.MatchingAgreement == _purchAgreementHeaderRecId
                {
                    dimensionAttributeValue = PurchAgreementFinDimensionAccess_PSN::getFinDimensionValueFromLedgerDimension(purchCommitmentLine_PSN.LedgerDimension);

                    if (dimensionAttributeValue.RecId == _dimensionAttributeValueRecId)
                    {
                        isUtilized = true;
                        break;
                    }
                }

                if (!isUtilized)
                {
                    while select RecId, LedgerDimension from purchCommitmentLine_PSN
                        exists join purchAgreementLine
                            where purchCommitmentLine_PSN.AgreementLine == purchAgreementLine.RecId
                        exists join purchAgreementHeader
                            where purchAgreementLine.Agreement == purchAgreementHeader.RecId
                                && purchAgreementHeader.RecId == _purchAgreementHeaderRecId
                        exists join vendInvoiceInfoLine
                            where purchCommitmentLine_PSN.RecId == vendInvoiceInfoLine.PurchCommitmentLine_PSN
                        exists join vendInvoiceInfoTable
                            where vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
                                && vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
                                && vendInvoiceInfoTable.PurchAgreementHeader_PSN == _purchAgreementHeaderRecId
                    {
                        dimensionAttributeValue = PurchAgreementFinDimensionAccess_PSN::getFinDimensionValueFromLedgerDimension(purchCommitmentLine_PSN.LedgerDimension);

                        if (dimensionAttributeValue.RecId == _dimensionAttributeValueRecId)
                        {
                            isUtilized = true;
                            break;
                        }
                    }
                }

                if (!isUtilized)
                {
                    while select RecId, LedgerDimension from purchCommitmentLine_PSN
                        exists join purchAgreementLine
                            where purchCommitmentLine_PSN.AgreementLine == purchAgreementLine.RecId
                        exists join purchAgreementHeader
                            where purchAgreementLine.Agreement == purchAgreementHeader.RecId
                                && purchAgreementHeader.RecId == _purchAgreementHeaderRecId
                        exists join vendInvoiceTrans
                            where purchCommitmentLine_PSN.RecId == vendInvoiceTrans.PurchCommitmentLine_PSN
                        exists join vendInvoiceJour
                            where vendInvoiceTrans.PurchID == vendInvoiceJour.PurchId
                                && vendInvoiceTrans.InvoiceId == vendInvoiceJour.InvoiceId
                                && vendInvoiceTrans.InvoiceDate == vendInvoiceJour.InvoiceDate
                                && vendInvoiceTrans.NumberSequenceGroup == vendInvoiceJour.NumberSequenceGroup
                                && vendInvoiceTrans.InternalInvoiceId == vendInvoiceJour.InternalInvoiceId
                                && vendInvoiceJour.PurchAgreementHeader_PSN == _purchAgreementHeaderRecId
                    {
                        dimensionAttributeValue = PurchAgreementFinDimensionAccess_PSN::getFinDimensionValueFromLedgerDimension(purchCommitmentLine_PSN.LedgerDimension);

                        if (dimensionAttributeValue.RecId == _dimensionAttributeValueRecId)
                        {
                            isUtilized = true;
                            break;
                        }
                    }
                }
            }
        }

        return isUtilized;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFinDimensionValueValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the specified value for the <c>DimensionAttibuteValue</c> table record.
    /// </summary>
    /// <param name="_dimensionAttributeValue">
    /// The record of the <c>DimensionAttibuteValue</c> table.
    /// </param>
    /// <returns>
    /// true if the record validation is successful; otherwise, false.
    /// </returns>
    public static boolean isFinDimensionValueValid(DimensionAttributeValue _dimensionAttributeValue)
    {
        boolean     isValid;

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            isValid = _dimensionAttributeValue.IsSuspended == NoYes::No && (_dimensionAttributeValue.ActiveTo == dateNull() || _dimensionAttributeValue.ActiveTo >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDepartmentDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides lookup for the <c>DimensionAttributeValue</c> table.
    /// </summary>
    /// <param name="_ctrl">
    /// The instance of <c>FormStringControl</c> class.
    /// </param>
    public static void lookupDepartmentDimensionValue(FormStringControl _ctrl)
    {
        DimensionAttributeValue                 dimensionAttributeValue;
        DimensionAttributeDirCategory           dimensionAttributeDirCategory;
        DictTable                               dictTable;
        fieldId                                 categorizationField;
        Common                                  common;
        DimensionAttribute                      dimensionAttribute;
        PurchAgreementTmpDimensionValues_PSN    purchAgreementTmpDimensionValues_PSN;

        SysTableLookup                          sysTableLookup = SysTableLookup::newParameters(tableNum(PurchAgreementTmpDimensionValues_PSN), _ctrl);

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            dimensionAttribute = DimensionAttribute::find(VendParameters::find().PurchAgreementFinancialDimension_PSN);
            dictTable = new DictTable(dimensionAttribute.BackingEntityType);
            common = dictTable.makeRecord();

            if (DimensionCache::instance().dimensionAttributeHasCategorization(dimensionAttribute.RecId))
            {
                if (dimensionAttribute.BackingEntityType == tableNum(DimensionFinancialTag))
                {
                    categorizationField = fieldNum(DimensionFinancialTag, FinancialTagCategory);
                }

                select firstonly DirCategory from dimensionAttributeDirCategory
                    where dimensionAttributeDirCategory.DimensionAttribute == dimensionAttribute.RecId;

                while select common
                    where common.(categorizationField) == dimensionAttributeDirCategory.DirCategory
                {
                    dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndEntityInst(dimensionAttribute.RecId, common.(dimensionAttribute.KeyAttribute), false, false);

                    if (dimensionAttributeValue)
                    {
                        dimensionAttributeValue.CachedDisplayValue = common.(dimensionAttribute.ValueAttribute);
                        if (PurchAgreementFinDimensionAccess_PSN::isFinDimensionValueValid(dimensionAttributeValue))
                        {
                            purchAgreementTmpDimensionValues_PSN.clear();
                            purchAgreementTmpDimensionValues_PSN.DimensionValue = dimensionAttributeValue.CachedDisplayValue;
                            purchAgreementTmpDimensionValues_PSN.insert();
                        }
                    }
                }
            }
            else
            {
                while select common
                {
                    dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndEntityInst(dimensionAttribute.RecId, common.(dimensionAttribute.KeyAttribute), false, false);

                    if (dimensionAttributeValue)
                    {
                        dimensionAttributeValue.CachedDisplayValue = common.(dimensionAttribute.ValueAttribute);
                        if (PurchAgreementFinDimensionAccess_PSN::isFinDimensionValueValid(dimensionAttributeValue))
                        {
                            purchAgreementTmpDimensionValues_PSN.clear();
                            purchAgreementTmpDimensionValues_PSN.DimensionValue = dimensionAttributeValue.CachedDisplayValue;
                            purchAgreementTmpDimensionValues_PSN.insert();
                        }
                    }
                }
            }

            sysTableLookup.parmTmpBuffer(purchAgreementTmpDimensionValues_PSN);
            sysTableLookup.addLookupfield(fieldNum(PurchAgreementTmpDimensionValues_PSN, DimensionValue));

            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message to use when a specific record in the <c>PurchAgreementFinDimensionAccess_PSN</c> table does not exist.
    /// </summary>
    /// <returns>
    /// The message that indicates a record does not exists.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PurchFrenchRegulatory_PSN</ConfigurationKey>
	<DeveloperDocumentation>@SPS2464</DeveloperDocumentation>
	<FormRef>PurchAgreementFinDimensionAccess_PSN</FormRef>
	<Label>@SPS2463</Label>
	<TitleField1>DimensionAttributeValue</TitleField1>
	<TitleField2>AuthorizedAmount</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>PurchAgreementFinDimensionAccessIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchAgreementHeader</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionAttributeValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AuthorizedAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchAgreementHeader</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionAttributeValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AuthorizedAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DimensionAttributeValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchAgreementHeader</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchAgreementFinDimensionAccess</Name>
			<Label>@SPS2100</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchAgreementHeader</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionAttributeValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AuthorizedAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AuthorizedAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SPS2103</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DimensionAttributeValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchAgreementHeader</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PurchAgreementFinDimensionAccessIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>DimensionAttributeValue</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PurchAgreementHeader</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttributeValue</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValue</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttriuteValue</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchAgreementFinDimensionAccess_PSN</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DimensionAttributeValue</Name>
					<Field>DimensionAttributeValue</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchAgreementHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchAgreementHeader</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PurchAgreementHeader</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchAgreementFinDimensionAccess_PSN</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchAgreementHeader</Name>
					<Field>PurchAgreementHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>