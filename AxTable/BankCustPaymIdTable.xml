<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankCustPaymIdTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankCustPaymIdTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>paymIdTest</Name>
				<Source><![CDATA[
    display PaymId paymIdTest()
    {
        BankPaymId_NO custPaymId = new BankPaymId_NO();

        str account = this.AccountFromPos ? subStr('111111111111',1,this.AccountToPos-this.AccountFromPos+1)  : '';
        str invoice = this.InvoiceFromPos ? subStr('222222222222',1,this.InvoiceToPos-this.InvoiceFromPos+1)  : '';
        str prefix  = this.PrefixFromPos  ? subStr('333333333333',1,this.PrefixToPos-this.PrefixFromPos+1)    : '';
        str suffix  = this.SuffixFromPos  ? subStr('444444444444',1,this.SuffixToPos-this.SuffixFromPos+1)    : '';
        str extRef  = this.ExtRefFromPos  ? subStr('555555555555',1,this.ExtRefToPos-this.ExtRefFromPos+1)    : '';
        ;

        return custPaymId.createCustPaymId(account,invoice,true, str2int(preFix),str2int(suffix),extRef,'',this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        #isoCountryRegionCodes
        BankCustPaymIdTable paymIdTable;
        boolean             errorCode;

        int invLen;
        int custInv;
        int saleInv;
        int projInv;
        int intrInv;
        int collInv;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            select firstonly RecId from paymIdTable
                where paymIdTable.Length == this.Length
                    && paymIdTable.PaymIdType != this.PaymIdType;

            if (paymIdTable.RecId)
            {
                if (hasGUI())
                {
                    Box::stop ("@SYS119797");
                }
                return false;
            }
        }

        if (this.InvoiceToPos != 0 && this.InvoiceFromPos == 0)
        {
            error (strFmt("@SYS128228", fieldPName(BankCustPaymIdTable, InvoiceFromPos), fieldPName(BankCustPaymIdTable, InvoiceToPos)));
            errorCode = 1;
        }
        if (this.AccountToPos != 0 && this.AccountFromPos == 0)
        {
            error (strFmt("@SYS128228", fieldPName(BankCustPaymIdTable, AccountFromPos), fieldPName(BankCustPaymIdTable, AccountToPos)));
            errorCode = 1;
        }
        if (errorCode == 1)
        {
            return false;
        }

        invLen  = this.InvoiceFromPos ? this.InvoiceToPos - this.InvoiceFromPos +1 : 0;
        custInv = strLen(int2str(NumberSeq::highest(CustParameters::numRefCustInvoiceId().NumberSequenceId)));
        saleInv = strLen(int2str(NumberSeq::highest(SalesParameters::numRefInvoiceId().NumberSequenceId)));
        projInv = strLen(int2str(NumberSeq::highest(ProjParameters::numRefProjNormalInvoiceId().NumberSequenceId)));
        intrInv = strLen(int2str(NumberSeq::highest(CustParameters::numRefInterestNote().NumberSequenceId)));
        collInv = strLen(int2str(NumberSeq::highest(CustParameters::numRefCollectionLetterNum().NumberSequenceId)));

        if (invLen < custInv)
        {
            warning ("@SYS119815");
        }
        if (invLen < saleInv)
        {
            warning ("@SYS119817");
        }
        if (invLen < projInv)
        {
            warning ("@SYS119818");
        }
        if (invLen < intrInv)
        {
            warning ("@SYS119819");
        }
        if (invLen < collInv)
        {
            warning ("@SYS119820");
        }
        if (this.Modulo != BankModuloCheck_NO::None  &&
           (this.Length <= this.InvoiceToPos ||
            this.Length <= this.AccountToPos ||
            this.Length <= this.PrefixToPos  ||
            this.Length <= this.SuffixToPos  ||
            this.Length <= this.ExtRefToPos))
        {
            error ("@SYS119821");
            return false;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>del_getExtRef</Name>
				<Source><![CDATA[
        public static CustAccountExt del_getExtRef(PaymId _paymId)
    {
        CustAccountExt custAccountExt = '';
        BankCustPaymIdTable paymIdTable;
        ;

        paymIdTable = BankCustPaymIdTable::findOnLength(_paymId);
        if (paymIdTable.ExtRefFromPos)
        {
            custAccountExt = subStr(_paymId,paymIdTable.ExtRefFromPos, paymIdTable.ExtRefToPos - paymIdTable.ExtRefFromPos +1);
            custAccountExt = int2str(str2int(custAccountExt));
        }
        return custAccountExt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>del_getPreFixValue</Name>
				<Source><![CDATA[
        static BankPaymIdPreFixValue del_getPreFixValue(PaymId _paymId)
    {
        BankPaymIdPreFixValue     preFixValue = 0;
        BankCustPaymIdTable paymIdTable;
        ;

        paymIdTable = BankCustPaymIdTable::findOnLength(_paymId);
        if (paymIdTable.PrefixFromPos)
        {
            preFixValue = str2int(subStr(_paymId,paymIdTable.PrefixFromPos, paymIdTable.PrefixToPos - paymIdTable.PrefixFromPos +1));
        }
        return preFixValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>del_getSuffixValue</Name>
				<Source><![CDATA[
        static BankPaymIdSuffixValue del_getSuffixValue(PaymId _paymId)
    {
        BankPaymIdSuffixValue     suffixValue = 0;
        BankCustPaymIdTable paymIdTable;
        ;

        paymIdTable = BankCustPaymIdTable::findOnLength(_paymId);
        if (paymIdTable.SuffixFromPos)
        {
            suffixValue = str2int(subStr(_paymId,paymIdTable.SuffixFromPos, paymIdTable.SuffixToPos - paymIdTable.SuffixFromPos +1));
        }
        return suffixValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
        static boolean exist(BankCustPaymIdType _paymIdType)
    {
        return BankCustPaymIdTable::findByPaymIdType(_paymIdType).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BankCustPaymIdTable</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BankCustPaymIdTable</c> table.
    /// </returns>
    public static BankCustPaymIdTable find(
        RecId                   _recId,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        BankCustPaymIdTable bankCustPaymIdTable;

        bankCustPaymIdTable.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            bankCustPaymIdTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly bankCustPaymIdTable
            where
                bankCustPaymIdTable.RecId == _recId;

        return bankCustPaymIdTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPaymIdType</Name>
				<Source><![CDATA[
        public static BankCustPaymIdTable findByPaymIdType(BankCustPaymIdType _paymIdType,
                                           boolean            _forUpdate = false)
    {
        BankCustPaymIdTable paymIdTable;

        if (_paymIdType)
        {
            paymIdTable.selectForUpdate(_forUpdate);

            select firstonly paymIdTable
                where paymIdTable.PaymIdType == _paymIdType;
        }
        return paymIdTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOnAccount</Name>
				<Source><![CDATA[
        static BankCustPaymIdTable findOnAccount(CustAccount          _custAccount,
                                                    boolean              _forUpdate  = false,
                                                    NumberSequenceCode   _numSeqCode = "")
    {
        BankCustPaymIdTable     paymIdTable;
        RefRecId                bankCustPaymIdTableRecId;
        CustTable               custTable;

        custTable = CustTable::find(_custAccount);

        if (custTable.FactoringAccount)                                         //CustTable Factoring Account
        {
            bankCustPaymIdTableRecId = CustTable::find(custTable.FactoringAccount).BankCustPaymIdTable;
        }
        if (!bankCustPaymIdTableRecId && custTable.BankCustPaymIdTable)                              //CustTable
        {
            bankCustPaymIdTableRecId = custTable.BankCustPaymIdTable;
        }

        if (!bankCustPaymIdTableRecId)                                                       //CustGroup
        {
            bankCustPaymIdTableRecId = CustGroup::find(custTable.CustGroup).BankCustPaymIdTable;
        }
        if (!bankCustPaymIdTableRecId)                                                       //PaymMode
        {
            bankCustPaymIdTableRecId = CustPaymModeTable::find(custTable.PaymMode).BankCustPaymIdTable;
        }

        if (!bankCustPaymIdTableRecId)                                                       //Country
        {
            bankCustPaymIdTableRecId = LogisticsCountryRegionPaymentIdType_NO::findByCountryRegionId(
                custTable.postalAddress().CountryRegionId).BankCustPaymIdTable;
        }
        if (!bankCustPaymIdTableRecId)                                                       //CustParameters
        {
            bankCustPaymIdTableRecId = CustParameters::find().BankCustPaymIdTable;
        }

        if (bankCustPaymIdTableRecId)     //Find the paymIdTable record
        {
            paymIdTable.selectForUpdate(_forUpdate);

            select firstonly paymIdTable
                where paymIdTable.RecId == bankCustPaymIdTableRecId;
        }

        return paymIdTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOnLength</Name>
				<Source><![CDATA[
        static BankCustPaymIdTable findOnLength(PaymId  _paymId,
                                                   boolean _forUpdate = false)
    {
        BankCustPaymIdTable paymIdTable;
        ;

        if (_paymId)
        {
            paymIdTable.selectForUpdate(_forUpdate);

            select firstonly paymIdTable
                index hint LengthIdx
                where paymIdTable.Length == strLen(_paymId);
        }
        return paymIdTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccount</Name>
				<Source><![CDATA[
        static CustAccount getAccount(PaymId _paymId)
    {
        CustAccount                 custAccount = '';
        BankCustPaymIdTable         paymIdTable;
        CustTrans                   custTrans;
        CustCollectionLetterJour    collectionLetter;
        CustInterestJour            interestJour;
        InvoiceId                   invoiceId;
        NumberSequenceTable         numberSeq;
        int                         i;

        paymIdTable = BankCustPaymIdTable::findOnLength(_paymId);
        if (paymIdTable.AccountFromPos)
        {
            custAccount = subStr(_paymId,paymIdTable.AccountFromPos, paymIdTable.AccountToPos - paymIdTable.AccountFromPos +1);
            custAccount = int2str(str2int(custAccount));
            numberSeq   = NumberSequenceTable::find(NumberSeqReference::findReference(extendedTypeNum(CustAccount)).NumberSequenceId);
            for (i=strLen(custAccount);i<strLen(numberSeq.Format);i++)
            {
                custAccount = '0' + custAccount;
            }
            CustTable::checkExist(custAccount);
        }
        else
        {
            if (paymIdTable.InvoiceFromPos)
            {
                invoiceId = BankCustPaymIdTable::getInvoice(_paymId);
                select firstonly RecId, AccountNum from custTrans
                    where custTrans.Voucher == invoiceId;
                if (custTrans.RecId)
                {
                    custAccount = custTrans.AccountNum;
                }
                else
                {
                    select firstonly RecId, AccountNum from collectionLetter
                        index hint PaymIdIdx
                        where collectionLetter.PaymId == _paymId;
                    if (collectionLetter.RecId)
                    {
                        custAccount = collectionLetter.AccountNum;
                    }
                    else
                    {
                        select firstonly RecId, AccountNum from interestJour
                            index hint PaymIdIdx
                            where interestJour.PaymId == _paymId;
                        if (interestJour.RecId)
                        {
                            custAccount = interestJour.AccountNum;
                        }
                    }
                }
            }
        }
        return custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoice</Name>
				<Source><![CDATA[
        static InvoiceId getInvoice(PaymId _paymId)
    {
        InvoiceId invoiceId = '';
        BankCustPaymIdTable paymIdTable;
        ;

        paymIdTable = BankCustPaymIdTable::findOnLength(_paymId);
        if (paymIdTable.InvoiceFromPos)
        {
            invoiceId = subStr(_paymId,paymIdTable.InvoiceFromPos, paymIdTable.InvoiceToPos - paymIdTable.InvoiceFromPos +1);
            invoiceId = int2str(str2int(invoiceId));
        }
        return invoiceId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS325299</DeveloperDocumentation>
	<FormRef>BankCustPaymIdTable</FormRef>
	<Label>@SYS11443</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>PaymIdType</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<DataSharingType>Single</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<Modules>Bank</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>PaymIdTypeIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymIdType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Length</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Modulo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymIdType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Length</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymIdType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AccountNumber</Name>
			<Label>@SYS1996</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountFromPos</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountToPos</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExternalReference</Name>
			<Label>@SYS21697</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExtRefFromPos</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExtRefToPos</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceNumber</Name>
			<Label>@SYS4726</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceFromPos</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceToPos</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Modulo</Name>
			<Label>@SYS119769</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Modulo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymIdType</Name>
			<Label>@SYS119763</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymIdType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Length</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Prefix</Name>
			<Label>@SYS22501</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrefixFromPos</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrefixToPos</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrefixValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Setup</Name>
			<Label>@SYS2186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BlankPaymId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Suffix</Name>
			<Label>@SYS51013</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SuffixFromPos</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SuffixToPos</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SuffixValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Text</Name>
			<Label>@SYS2595</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PreFixStrValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SuffixStrValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AccountFromPos</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankPaymIdAccountFromPos</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AccountToPos</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankPaymIdAccountToPos</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BlankPaymId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankBlankPaymId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ExtRefFromPos</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankPaymIdExtRefFromPos</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ExtRefToPos</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankPaymIdExtRefToPos</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>InvoiceFromPos</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankPaymIdInvoiceFromPos</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>InvoiceToPos</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankPaymIdInvoiceToPos</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Length</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymIdLength</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Modulo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankPaymIdModulo</ExtendedDataType>
			<EnumType>BankModuloCheck_NO</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymIdType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankCustPaymIdType</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PrefixFromPos</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankPaymIdPreFixFromPos</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PreFixStrValue</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>BankPaymIdPreFixStrValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PrefixToPos</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankPaymIdPreFixToPos</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PrefixValue</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankPaymIdPreFixValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SuffixFromPos</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankPaymIdSuffixFromPos</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SuffixStrValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankPaymIdSuffixStrValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SuffixToPos</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankPaymIdSuffixToPos</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SuffixValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankPaymIdSuffixValue</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PaymIdTypeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PaymIdType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LengthIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Length</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>