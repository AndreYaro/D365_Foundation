<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RequisitionPurposeRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RequisitionPurposeRule extends SysPolicyRule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record based on the input parameters
    /// </summary>
    /// <param name="_policy">
    /// The policy this record relates to
    /// </param>
    /// <param name="_policyType">
    /// the policy type
    /// </param>
    /// <param name="_validFrom">
    /// The date this record should be valid from, valid to is automatically calculated based on this input
    /// </param>
    public void initValues(RefRecId _policy, RefRecId _policyType, ValidFromDateTime _validFrom)
    {
        RequisitionPurposeRule  nextRequisitionPurposeRule;
        date                    beginDate = dateNull();
        date                    endDate   = maxDate();

        this.Policy             = _policy;
        this.PolicyRuleType     = _policyType;

        if (!this)
        {
            this.ValidFrom      = _validFrom;

            select firstonly validtimestate(beginDate, endDate) nextRequisitionPurposeRule order by ValidFrom
                where nextRequisitionPurposeRule.Policy          == _policy
                    && nextRequisitionPurposeRule.PolicyRuleType == _policyType
                    && nextRequisitionPurposeRule.ValidFrom      >  this.ValidFrom;

            if (nextRequisitionPurposeRule)
            {
                this.ValidTo = DateTimeUtil::addSeconds(nextRequisitionPurposeRule.ValidFrom, -1);
            }
            else
            {
                this.ValidTo    = DateTimeUtil::maxValue();
            }
        }
        this.IsInherited = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeReplenishmentRequisition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a requisition with purpose replenishment can be created for a legal entity.
    /// </summary>
    /// <param name="_buyingLegalEntity">
    /// A <c>RefRecId</c> for the legal entity to check.
    /// </param>
    /// <returns>
    /// true if a requisition can have purpose for the legal entity; otherwise false.
    /// </returns>
    public static boolean canBeReplenishmentRequisition(RefRecId _buyingLegalEntity)
    {
        int64                   orgArray[];
        RequisitionPurposeRule  requisitionPurposeRule;
        orgArray[1] = _buyingLegalEntity;

        requisitionPurposeRule = RequisitionPurposeRule::findByOrg(orgArray);
        return (requisitionPurposeRule.DefaultRequisitionPurpose || requisitionPurposeRule.AllowManualPurposeOverRide);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>RequisitionPurposeRule</c> table.
    /// </summary>
    /// <param name="_requisitionPurposeRuleRecId">
    ///    The record ID of the <c>RequisitionPurposeRule</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    The specified record in the <c>RequisitionPurposeRule</c> table; otherwise, an empty record.
    /// </returns>
    public static RequisitionPurposeRule find(RecId            _requisitionPurposeRuleRecId,
                                       boolean          _forUpdate            = false,
                                       ConcurrencyModel _concurrencyModel     = ConcurrencyModel::Auto)
    {
        RequisitionPurposeRule  reqequisitionPurposeRule;
        utcdatetime             minDateValue;
        utcdatetime             maxDateValue;

        minDateValue = DateTimeUtil::minValue();
        maxDateValue = DateTimeUtil::maxValue();

        if (_requisitionPurposeRuleRecId)
        {
            if (_forUpdate)
            {
                reqequisitionPurposeRule.selectForUpdate(_forUpdate);

                if (_concurrencyModel != ConcurrencyModel::Auto)
                {
                    reqequisitionPurposeRule.concurrencyModel(_concurrencyModel);
                }
            }

            reqequisitionPurposeRule.selectLocked(_forUpdate);

            select firstonly validtimestate( minDateValue ,maxDateValue ) reqequisitionPurposeRule
                where reqequisitionPurposeRule.RecId == _requisitionPurposeRuleRecId;
        }

        return reqequisitionPurposeRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByOrg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a purpose rule that is effective for the given organizations at a specific time.
    /// </summary>
    /// <param name="_orgArray">
    /// An array of organizations to search for the effective policy rule.
    /// </param>
    /// <param name="_forUpdate">
    ///   A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>RequisitionPurposeRule</c>.
    /// </returns>
    public static RequisitionPurposeRule findByOrg(int64 _orgArray[], boolean _forUpdate = false)
    {
        RequisitionPurposeRule requisitionPurposeRule     = null;
        RefRecId               requisitionPurposeRuleRecId;
        SysPolicyRuleType      ruleType;

        ruleType = SysPolicyRuleType::findByRuleTypePolicyType(SysPolicyRuleTypeEnum::RequisitionPurposeRule, SysPolicyTypeEnum::PurchasingPolicy);

        requisitionPurposeRuleRecId = SysPolicies::getPolicyRuleID(_orgArray, ruleType.RecId, SysPolicyTypeEnum::PurchasingPolicy);
        requisitionPurposeRule      = RequisitionPurposeRule::find(requisitionPurposeRuleRecId, _forUpdate);

        return requisitionPurposeRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findForCurrentCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>RequisitionPurposeRule</c> rule for current company.
    /// </summary>
    /// <param name="_forUpdate">
    ///   A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The <c>RequisitionPurposeRule</c> rule for current company.
    /// </returns>
    public static RequisitionPurposeRule findForCurrentCompany(boolean _forUpdate = false)
    {
        int64               orgArray[];

        orgArray[1] = CompanyInfo::findDataArea(curext()).RecId;

        return RequisitionPurposeRule::findByOrg(orgArray,_forUpdate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PurchReq</ConfigurationKey>
	<DeveloperDocumentation>@SYS4050001</DeveloperDocumentation>
	<Label>@GLS160317</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>DefaultRequisitionPurpose</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Extends>SysPolicyRule</Extends>
	<Modules>ProcurementAndSourcing</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@sys5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AllowManualPurposeOverRide</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultRequisitionPurpose</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowManualPurposeOverRide</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RequisitionAllowManualPurposeOverRide</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DefaultRequisitionPurpose</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RequisitionDefaultPurposeRule</ExtendedDataType>
			<EnumType>RequisitionPurpose</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SysPolicyRule1_101343</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>SysPolicyRule</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>SysPolicyRule</RelatedTableRole>
			<RelationshipType>Specialization</RelationshipType>
			<Role>SysPolicyRule_PurchReqPurposeRule</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>