<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AlcoholDailyJournalTable_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AlcoholDailyJournalTable_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canStatusBeChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the status of the record can be changed.
    /// </summary>
    /// <returns>
    ///    True, if the status can be changed. false otherwise.
    /// </returns>
    public boolean canStatusBeChanged()
    {
        return ! AlcoholDailyJournalTable_RU::nextJournalExists(this)
            && ! AlcoholDailyJournalTable_RU::previousNotCalculatedJournalExists(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes some record fields with default values.
    /// </summary>
    public void initValue()
    {
        super();

        this.TransDate              = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.AlcoholDeclarationType = AlcoholDeclarationType_RU::Retail11;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the record can be deleted.
    /// </summary>
    /// <returns>
    ///    True, if the record can be deleted; false otherwise.
    /// </returns>
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (AlcoholDailyJournalTable_RU::nextJournalExists(this))
                ret = checkFailed(strFmt("@SYS4003392", this.BranchId, this.AlcoholDeclarationType));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates <c>AlcoholDailyJournalTable_RU</c> table fields.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    ///    The field ID to be validated.
    /// </param>
    /// <returns>
    ///    True if the field is valid; false, otherwise.
    /// </returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean             ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case (fieldNum(AlcoholDailyJournalTable_RU, Status)):

                if (! this.canStatusBeChanged())
                {
                    ret = ret && checkFailed("@SYS4003395");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the record can be saved.
    /// </summary>
    /// <returns>
    ///    True, if the record can be saved; false otherwise.
    /// </returns>
    public boolean validateWrite()
    {
        boolean     ret;

        ret = super();

        if (ret)
        {
            if (!this.RecId && AlcoholDailyJournalTable_RU::nextJournalExists(this))
                ret = checkFailed(strFmt("@SYS4003392", this.BranchId, this.AlcoholDeclarationType));

            if (!this.RecId && AlcoholDailyJournalTable_RU::previousNotCalculatedJournalExists(this))
                ret = checkFailed(strFmt("@SYS4003393", this.BranchId, this.AlcoholDeclarationType));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record in the <c>AlcoholDailyJournalTable_RU</c> table.
    /// </summary>
    /// <param name="_transDate">
    ///    The date of the journal.
    /// </param>
    /// <param name="_branchId">
    ///    The separate division ID of the journal to find.
    /// </param>
    /// <param name="_alcoholDeclarationType">
    ///    The type of the alcohol declaration of the journal to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    Indicates whether to select the record for update or not.
    /// </param>
    /// <returns>
    ///    The record found in the <c>AlcoholDailyJournalTable_RU</c> table.
    /// </returns>
    public static AlcoholDailyJournalTable_RU find(TransDate                  _transDate,
                                                   BranchId_RU                _branchId,
                                                   AlcoholDeclarationType_RU  _alcoholDeclarationType,
                                                   boolean                    _forUpdate = false)
    {
        AlcoholDailyJournalTable_RU     dailyJournalTable;

        if (_transDate && _alcoholDeclarationType)
        {
            if (_forUpdate)
                dailyJournalTable.selectForUpdate(_forUpdate);

            select firstonly dailyJournalTable
                index hint DateBranchTypeIdx
                where dailyJournalTable.TransDate               == _transDate
                   && dailyJournalTable.BranchId                == _branchId
                   && dailyJournalTable.AlcoholDeclarationType  == _alcoholDeclarationType;
        }
        return dailyJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record in the <c>AlcoholDailyJournalTable_RU</c> table by its record ID.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID.
    /// </param>
    /// <param name="_forUpdate">
    ///    Indicates whether to select the record for update or not.
    /// </param>
    /// <returns>
    ///    The record found in the <c>AlcoholDailyJournalTable_RU</c> table.
    /// </returns>
    public static AlcoholDailyJournalTable_RU findRecId(RecId _recId, boolean _forUpdate = false)
    {
        AlcoholDailyJournalTable_RU     dailyJournalTable;

        dailyJournalTable.selectForUpdate(_forupdate);

        if (_recId)
        {
            select firstonly dailyJournalTable
                where dailyJournalTable.RecId == _recId;
        }
        return dailyJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextJournalExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the journals for the later period exist for the same branch and declaration type.
    /// </summary>
    /// <param name="_dailyJournalTable">
    ///    A table buffer instance which has to be checked.
    /// </param>
    /// <returns>
    ///    True, if at least one journal exists; false otherwise.
    /// </returns>
    public static boolean nextJournalExists(AlcoholDailyJournalTable_RU     _dailyJournalTable)
    {
        AlcoholDailyJournalTable_RU dailyJournalTable;

        select firstonly RecId from dailyJournalTable
            where dailyJournalTable.TransDate                   >  _dailyJournalTable.TransDate
                && dailyJournalTable.BranchId                   == _dailyJournalTable.BranchId
                && dailyJournalTable.AlcoholDeclarationType     == _dailyJournalTable.AlcoholDeclarationType;

        return (dailyJournalTable.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>previousNotCalculatedJournalExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the not calculated journals for the previous period exist for the same branch and declaration type.
    /// </summary>
    /// <param name="_dailyJournalTable">
    ///    A table buffer instance which has to be checked.
    /// </param>
    /// <returns>
    ///    True, if at least one journal exists; false otherwise.
    /// </returns>
    public static boolean previousNotCalculatedJournalExists(AlcoholDailyJournalTable_RU     _dailyJournalTable)
    {
        AlcoholDailyJournalTable_RU dailyJournalTable;

        select firstonly RecId from dailyJournalTable
            where dailyJournalTable.TransDate                   <  _dailyJournalTable.TransDate
                && dailyJournalTable.BranchId                   == _dailyJournalTable.BranchId
                && dailyJournalTable.AlcoholDeclarationType     == _dailyJournalTable.AlcoholDeclarationType
                && dailyJournalTable.Status                     == AlcoholDeclarationStatus_RU::NotCalculated;

        return (dailyJournalTable.RecId != 0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@SYS4003381</DeveloperDocumentation>
	<FormRef>AlcoholDailyJournalTable_RU</FormRef>
	<Label>@SYS4003389</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>TransDate</TitleField1>
	<TitleField2>BranchId</TitleField2>
	<ClusteredIndex>DateBranchTypeIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedTransactionId>Yes</CreatedTransactionId>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>EGAIS</Modules>
	<PrimaryIndex>DateBranchTypeIdx</PrimaryIndex>
	<ReplacementKey>DateBranchTypeIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AlcoholDeclarationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BranchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BranchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AlcoholDeclarationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS34991</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BranchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AlcoholDeclarationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AlcoholDeclarationType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>AlcoholDeclarationType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BranchId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BranchId_RU</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AlcoholDeclarationStatus_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DateBranchTypeIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BranchId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AlcoholDeclarationType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Branches_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>Branches_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BranchId</Name>
					<SourceEDT>BranchId_RU</SourceEDT>
					<Field>BranchId</Field>
					<RelatedField>BranchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BranchIdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>