<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjCDSTransactionRelationshipImport</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjCDSTransactionRelationshipImport extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findByTransactionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a record that includes the passed in TransactionId
    /// </summary>
    /// <param name = "_transactionId">The transaction to retrieve</param>
    /// <param name = "_transactionRole">The transaction role (corresponding to the passed in transactionId) of the record to retrieve</param>
    /// <param name = "_opposingTransactionRole">The transaction role of the opposing record</param>
    /// <param name = "_forUpdate">True if the record is to be editable</param>
    /// <returns>The record which includes the passed in Transaction ID in either the Transaction1Id
    /// or Transaction2Id fields</returns>
    public static ProjCDSTransactionRelationshipImport findByTransactionId(guid _transactionId, str _transactionRole, str _opposingTransactionRole, boolean _forUpdate = false)
    {
        ProjCDSTransactionRelationshipImport relationshipImport;

        relationshipImport.selectForUpdate(_forUpdate);

        select firstonly relationshipImport
            where (relationshipImport.Transaction1Id == _transactionId && relationshipImport.Transaction1Role == _transactionRole && relationshipImport.Transaction2Role == _opposingTransactionRole) ||
            (relationshipImport.Transaction2Id == _transactionId && relationshipImport.Transaction2Role == _transactionRole  && relationshipImport.Transaction1Role == _opposingTransactionRole);

        return relationshipImport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpposingTransactionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction id of the opposing record to the provided inputs from <c>ProjCDSTransactionRelationshipImport</c>
    /// </summary>
    /// <param name = "_actualId">The known transaction to get the opposing transaction of</param>
    /// <param name = "_transRole">The type of the known transaction</param>
    /// <param name = "_opposingTransRole">The type of the opposing transaction</param>
    /// <returns>The transaction id of the opposing transaction</returns>
    public static guid findOpposingTransactionId(guid _actualId, str _transRole, str _opposingTransRole)
    {
        ProjCDSActualsImport import;
        guid matchingTransactionId;

        if (_actualId != Global::emptyGuid())
        {
            ProjCDSTransactionRelationshipImport relationshipImport = ProjCDSTransactionRelationshipImport::findByTransactionId(_actualId, _transRole, _opposingTransRole);

            if (relationshipImport)
            {
                if (relationshipImport.Transaction1Id == _actualId)
                {
                    matchingTransactionId = relationshipImport.Transaction2Id;
                }
                else
                {
                    matchingTransactionId = relationshipImport.Transaction1Id;
                }
            }
        }

        return matchingTransactionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpposingTransaction1Id</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction id of the opposing record where the trans1Id is same as given id. I.e. the relation of Trans1 -> Trans2 where Trans1 is the ActualId passed in the argument.
    /// </summary>
    /// <param name = "_actualId">The transaction2Id to get the opposing transaction of</param>
    /// <param name = "_transRole">The type of the known transaction</param>
    /// <param name = "_opposingTransRole">The type of the opposing transaction</param>
    /// <returns>The transaction id of the opposing transaction</returns>
    public static guid findOpposingTransaction1Id(guid _actualId, str _transRole, str _opposingTransRole)
    {
        ProjCDSTransactionRelationshipImport relationshipImport;

        select firstonly Transaction1Id from relationshipImport
            where relationshipImport.Transaction2Id == _actualId 
                && relationshipImport.Transaction2Role == _transRole  
                && relationshipImport.Transaction1Role == _opposingTransRole;

        return relationshipImport.Transaction1Id;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpposingTransaction2Id</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction id of the opposing record where the trans1Id is same as given id. I.e. the relation of Trans1 -> Trans2 where Trans2 is the ActualId passed in the argument.
    /// </summary>
    /// <param name = "_actualId">The transaction1Id to get the opposing transaction of</param>
    /// <param name = "_transRole">The type of the known transaction</param>
    /// <param name = "_opposingTransRole">The type of the opposing transaction</param>
    /// <returns>The transaction id of the opposing transaction</returns>
    public static guid findOpposingTransaction2Id(guid _actualId, str _transRole, str _opposingTransRole)
    {
        ProjCDSTransactionRelationshipImport relationshipImport;

        select firstonly Transaction2Id from relationshipImport
            where relationshipImport.Transaction1Id == _actualId 
                && relationshipImport.Transaction1Role == _transRole 
                && relationshipImport.Transaction2Role == _opposingTransRole;

        return relationshipImport.Transaction2Id;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.TransactionRelationshipId = newGuid();
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@Proj:ProCDSTransactionRelationshipImportDevDoc</DeveloperDocumentation>
	<Label>@Proj:ProjCDSTransactionRelationshipImport</Label>
	<TitleField1>ConnectionId</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProjectManagementAndAccounting</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>TransactionRelationshipId</Name>
			<AllowEdit>No</AllowEdit>
			<Label>@Proj:ProjCDSTransactionRelationshipId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>ConnectionId</Name>
			<AllowEdit>No</AllowEdit>
			<Label>@SYS76440</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>Transaction1Id</Name>
			<Label>@Proj:Transaction1Id</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Transaction1Role</Name>
			<Label>@Proj:TransactionRole1</Label>
			<Mandatory>Yes</Mandatory>
			<StringSize>100</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Transaction1Type</Name>
			<ExtendedDataType>ProjTransactionTypeStr</ExtendedDataType>
			<Label>@Proj:TransactionType2</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>Transaction2Id</Name>
			<Label>@Proj:Transaction2Id</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Transaction2Role</Name>
			<Label>@Proj:TransactionRole2</Label>
			<Mandatory>Yes</Mandatory>
			<StringSize>100</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Transaction2Type</Name>
			<ExtendedDataType>ProjTransactionTypeStr</ExtendedDataType>
			<Label>@Proj:TransactionType2</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TransactionRelationshipId</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TransactionRelationshipId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ConnectionIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ConnectionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>Transaction1Id</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Transaction1Id</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Transaction2Role</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Transaction1Role</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>Transaction2Id</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Transaction2Id</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Transaction1Role</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Transaction2Role</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>