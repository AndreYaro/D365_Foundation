<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollectionAgencyFeeHeader_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustCollectionAgencyFeeHeader_W extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkInterval</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the dates defining the interval are correct.
    /// </summary>
    /// <returns>
    ///     true, if the dates defining the interval are correct; false otherwise.
    /// </returns>
    public boolean checkInterval()
    {
        if (this.FromDate &&
            this.ToDate &&
            (this.FromDate > this.ToDate))
        {
            return checkFailed("@SYS16982");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = this.checkInterval() && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCollectionAgencyFee</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates collection agency fee on the given date.
    /// </summary>
    /// <param name="_amount">
    ///    Collection letter journal summary amount based on which the collection agency fee has to be calculated.
    /// </param>
    /// <param name="_amountCurrencyCode">
    ///    Collection letter journal summary amount currency.
    /// </param>
    /// <param name="_transDate">
    ///    Date on which the collection agency fee has to be calculated.
    /// </param>
    /// <returns>
    ///    Returns containter with calculated collection agency fee and collection agency fee currency;
    /// </returns>
    public static container calcCollectionAgencyFee(Amount           _amount,
                                                           CurrencyCode     _amountCurrencyCode,
                                                           TransDate        _transDate)
    {
        CustCollectionAgencyFeeHeader_W     feeHeader;
        CustCollectionAgencyFeeLine_W       feeLine;
        Amount                              amount, currentAmount, feeAmount;
        Currency                            currency;

        const str LocalizationFeatureReference = 'EUR-00009';
        GlobalizationInstrumentationHelper::featureRun(LocalizationFeatureReference, funcName());

        select firstOnly feeHeader
            where feeHeader.CurrencyCode == _amountCurrencyCode &&
                      (feeHeader.FromDate <= _transDate || ! feeHeader.FromDate) &&
                      (feeHeader.ToDate   >= _transDate || ! feeHeader.ToDate);

        if (! feeHeader)
        {
            select firstOnly feeHeader
                where (feeHeader.FromDate <= _transDate || ! feeHeader.FromDate) &&
                      (feeHeader.ToDate   >= _transDate || ! feeHeader.ToDate)
            exists join currency
                where currency.CurrencyCode == feeHeader.CurrencyCode
                    && currency.IsEuro == NoYes::Yes;
        }

        if (feeHeader)
        {
            amount = CurrencyExchangeHelper::curAmount2CurAmount(_amount, _amountCurrencyCode, feeHeader.CurrencyCode, _transDate);

            while select feeLine
                order by FromAmount asc
                where feeLine.CustCollectionAgencyFeeHeader == feeHeader.RecId
            {
                currentAmount = min(feeLine.ToAmount ? feeLine.ToAmount : realMax(), amount) - feeLine.FromAmount;
                currentAmount = max(0, currentAmount) * feeLine.Percent / 100;

                feeAmount += currentAmount;
            }

            if (feeHeader.MinFee && feeAmount < feeHeader.MinFee)
            {
                feeAmount = feeHeader.MinFee;
            }
            else if (feeHeader.MaxFee && feeAmount > feeHeader.MaxFee)
            {
                feeAmount = feeHeader.MaxFee;
            }
        }

        return [CurrencyExchangeHelper::amount(feeAmount, feeHeader.CurrencyCode), feeHeader.CurrencyCode];
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record exists in the
    ///    <c>CustCollectionAgencyFeeHeader_W</c> table; if not, an error message is displayed.
    /// </summary>
    /// <param name="_currencyCode">
    ///    Currency of the <c>CustCollectionAgencyFeeHeader_W</c> record.
    /// </param>
    /// <param name="_fromDate">
    ///    Effective start date of the <c>CustCollectionAgencyFeeHeader_W</c> record.
    /// </param>
    /// <param name="_toDate">
    ///    Effective end date of the <c>CustCollectionAgencyFeeHeader_W</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(CurrencyCode     _currencyCode,
                                     FromDate         _fromDate,
                                     ToDate           _toDate)
    {
        boolean isExisting = true;

        if (! CustCollectionAgencyFeeHeader_W::exist(_currencyCode, _fromDate, _toDate))
        {
            isExisting = checkFailed(strFmt(CustCollectionAgencyFeeHeader_W::txtNotExist(), _currencyCode, _fromDate, _toDate));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>CustCollectionAgencyFeeHeader_W</c>
    ///    table exists.
    /// </summary>
    /// <param name="_currencyCode">
    ///    Currency of the <c>CustCollectionAgencyFeeHeader_W</c> record.
    /// </param>
    /// <param name="_fromDate">
    ///    Effective start date of the <c>CustCollectionAgencyFeeHeader_W</c> record.
    /// </param>
    /// <param name="_toDate">
    ///    Effective end date of the <c>CustCollectionAgencyFeeHeader_W</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>

    public static boolean exist(CurrencyCode     _currencyCode,
                                FromDate         _fromDate,
                                ToDate           _toDate)
    {
        boolean found = false;

        if (_currencyCode)
        {
            found = (select firstonly RecId from CustCollectionAgencyFeeHeader_W
                         where CustCollectionAgencyFeeHeader_W.CurrencyCode == _currencyCode &&
                               CustCollectionAgencyFeeHeader_W.FromDate     == _fromDate &&
                               CustCollectionAgencyFeeHeader_W.ToDate       == _toDate).RecId != 0;
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record in the <c>CustCollectionAgencyFeeHeader_W</c> table.
    /// </summary>
    /// <param name="_currencyCode">
    ///    Currency of the <c>CustCollectionAgencyFeeHeader_W</c> record.
    /// </param>
    /// <param name="_fromDate">
    ///    Effective start date of the <c>CustCollectionAgencyFeeHeader_W</c> record.
    /// </param>
    /// <param name="_toDate">
    ///    Effective end date of the <c>CustCollectionAgencyFeeHeader_W</c> record.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    The record found in the <c>CustCollectionAgencyFeeHeader_W</c> table.
    /// </returns>
    public static CustCollectionAgencyFeeHeader_W find(CurrencyCode     _currencyCode,
                                                       FromDate         _fromDate,
                                                       ToDate           _toDate,
                                                       boolean          _forUpdate        = false,
                                                       ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustCollectionAgencyFeeHeader_W feeHeader;

        if (_currencyCode)
        {
            if (_forupdate)
            {
                feeHeader.selectForUpdate(_forupdate);
            }

            if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                feeHeader.concurrencyModel(_concurrencyModel);
            }

            select firstOnly feeHeader
                where feeHeader.CurrencyCode == _currencyCode &&
                      feeHeader.FromDate     == _fromDate &&
                      feeHeader.ToDate       == _toDate;
        }

        return feeHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the message to use when a specific record in the
    ///    <c>CustCollectionAgencyFeeHeader_W</c> table does not exist.
    /// </summary>
    /// <returns>
    ///    The message that indicates a record does not exists.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS4009964";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>CustCollectionLetter</ConfigurationKey>
	<CountryRegionCodes>AT,BE,CZ,DK,EE,FI,FR,DE,HU,IE,IT,LV,LT,NL,PL,ES,SE,GB</CountryRegionCodes>
	<DeveloperDocumentation>@SYS4009958</DeveloperDocumentation>
	<FormRef>CustCollectionAgencyFeeSetup_W</FormRef>
	<Label>@SYS4009957</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>CurrencyCode</TitleField1>
	<TitleField2>FromDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<Modules>AccountsReceivable</Modules>
	<ReplacementKey>CurrencyDatesIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinFee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxFee</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaxFee</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS4009959</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MinFee</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS4009961</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToDate</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CurrencyDatesIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CurrencyCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>