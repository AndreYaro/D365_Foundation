<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLoadLineFiscalDocument_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSLoadLineFiscalDocument_BR extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertLoadLinesForCustInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method creates a record at WHSLoadLineFiscalDocument_BR relating the load lines that are related to
    /// the posted fiscal document.
    /// It will create one record at WHSLoadLineFiscalDocument_BR per load line.
    /// </summary>
    /// <param name="_loadId">
    /// Id of the load that has been posted. The fiscal document has been generated for this load.
    /// </param>
    /// <param name="_custInvoiceJour">
    /// CustInvoiceJour record that has been posted. The load lines must be related to the CustInvoiceTrans lines that
    /// belong to this CustInvoiceJour.
    /// </param>
    /// <param name="_fiscalDocumentRecId">
    /// RecId of the fiscal document that has been posted.
    /// </param>
    public static void insertLoadLinesForCustInvoiceJour(WHSLoadId _loadId, CustInvoiceJour _custInvoiceJour, RefRecId _fiscalDocumentRecId)
    {
        WHSLoadLine                  loadLine;
        CustInvoiceTrans             custInvoiceTrans;
        WHSLoadLineFiscalDocument_BR loadLineFiscalDocument;

        if (_fiscalDocumentRecId && _loadId)
        {
            insert_recordset loadLineFiscalDocument
                (FiscalDocument_BR, WHSLoadLine)
                select _fiscalDocumentRecId, RecId from loadLine
                    where loadLine.LoadId == _loadId
                exists join custInvoiceTrans
                    where custInvoiceTrans.InvoiceId            == _custInvoiceJour.InvoiceId
                        && custInvoiceTrans.SalesId             == _custInvoiceJour.SalesId
                        && custInvoiceTrans.InvoiceDate         == _custInvoiceJour.InvoiceDate
                        && custInvoiceTrans.NumberSequenceGroup == _custInvoiceJour.NumberSequenceGroup
                        && custInvoiceTrans.InventTransId       == loadLine.InventTransId;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>insertLoadLinesForCustPackingSlipJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method creates a record at WHSLoadLineFiscalDocument_BR relating the load lines that are related to
    /// the posted fiscal document (delivery slip).
    /// It will create one record at WHSLoadLineFiscalDocument_BR per load line.
    /// </summary>
    /// <param name="_loadId">
    /// Id of the load that has been posted. The fiscal document has been generated for this load.
    /// </param>
    /// <param name="_custPackingSlipJour">
    /// CustPackingSlipJour record that has been posted. The load lines must be related to the CustPackingSlipTrans lines that
    /// belong to this CustInvoiceJour.
    /// </param>
    /// <param name="_fiscalDocumentRecId">
    /// RecId of the fiscal document that has been posted.
    /// </param>
    public static void insertLoadLinesForCustPackingSlipJour(WHSLoadId _loadId, CustPackingSlipJour _custPackingSlipJour, RefRecId _fiscalDocumentRecId)
    {
        WHSLoadLine                  loadLine;
        CustPackingSlipTrans         custPackingSlipTrans;
        WHSLoadLineFiscalDocument_BR loadLineFiscalDocument;

        if (_fiscalDocumentRecId && _loadId)
        {
            insert_recordset loadLineFiscalDocument
                (FiscalDocument_BR, WHSLoadLine)
                select _fiscalDocumentRecId, RecId from loadLine
                    where loadLine.LoadId == _loadId
                exists join custPackingSlipTrans
                    where custPackingSlipTrans.SalesId        == _custPackingSlipJour.SalesId
                        && custPackingSlipTrans.DeliveryDate  == _custPackingSlipJour.DeliveryDate
                        && custPackingSlipTrans.PackingSlipId == _custPackingSlipJour.PackingSlipId
                        && custPackingSlipTrans.InventTransId == loadLine.InventTransId;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>insertLoadLinesForInventTransferJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method creates a record at WHSLoadLineFiscalDocument_BR relating the load lines that are related to
    /// the posted fiscal document (transfer order).
    /// It will create one record at WHSLoadLineFiscalDocument_BR per load line.
    /// </summary>
    /// <param name="_loadId">
    /// Id of the load that has been posted. The fiscal document has been generated for this load.
    /// </param>
    /// <param name="_inventTransferJour">
    /// InventTransferJour record that has been posted. The load lines must be related to the InventTransferJour lines that
    /// belong to this InventTransferJour.
    /// </param>
    /// <param name="_fiscalDocumentRecId">
    /// RecId of the fiscal document that has been posted.
    /// </param>
    public static void insertLoadLinesForInventTransferJour(WHSLoadId _loadId, InventTransferJour _inventTransferJour, RefRecId _fiscalDocumentRecId)
    {
        WHSLoadLine                  loadLine;
        InventTransferJourLine    inventTransferJournalLine;
        WHSLoadLineFiscalDocument_BR loadLineFiscalDocument;

        if (_fiscalDocumentRecId && _loadId)
        {
            insert_recordset loadLineFiscalDocument
                (FiscalDocument_BR, WHSLoadLine)
                select _fiscalDocumentRecId, RecId from loadLine
                    where loadLine.LoadId == _loadId
                exists join inventTransferJournalLine
                    where inventTransferJournalLine.TransferId     == _inventTransferJour.TransferId
                        && inventTransferJournalLine.VoucherId     == _inventTransferJour.VoucherId
                        && inventTransferJournalLine.InventTransId == loadLine.InventTransId;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<CountryRegionCodes>BR</CountryRegionCodes>
	<DeveloperDocumentation>@SYP4881402</DeveloperDocumentation>
	<Label>@SYP4881401</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>FiscalDocument_BR</TitleField1>
	<TitleField2>WHSLoadLine</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>LoadLineIdx</ClusteredIndex>
	<Modules>FiscalBooksBrazil</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WHSLoadLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalDocument_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX3670</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WHSLoadLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalDocument_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FiscalDocument_BR</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS109778</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WHSLoadLine</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@WAX1955</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LoadLineIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>WHSLoadLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FiscalDocument_BR</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FiscalDocument_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FiscalDocument_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalDocument_BR</Name>
					<Field>FiscalDocument_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSLoadLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSLoadLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WHSLoadLine</Name>
					<Field>WHSLoadLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>