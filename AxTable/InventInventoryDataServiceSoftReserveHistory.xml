<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceSoftReserveHistory</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventInventoryDataServiceSoftReserveHistory extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>truncate</Name>
				<Source><![CDATA[
    public static void truncate()
    {
        SQLDataDictionary sqlDict = new SQLDataDictionary();

        new SQLDataDictionaryPermission(methodstr(SQLDataDictionary, tableTruncate)).assert();
        sqlDict.tableTruncate(tableNum(InventInventoryDataServiceSoftReserveHistory), false);
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransOriginId</Name>
				<Source><![CDATA[
    static InventInventoryDataServiceSoftReserveHistory findInventTransOriginId(InventTransoriginid _inventTransOriginId, boolean _update = false)
    {
        InventInventoryDataServiceSoftReserveHistory softReserveHistory;

        if (_inventTransOriginId)
        {
            if (_update)
            {
                softReserveHistory.selectForUpdate(_update);
            }

            select firstonly softReserveHistory
                where softReserveHistory.InventTransOrigin == _inventTransOriginId;
        }

        return softReserveHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransId</Name>
				<Source><![CDATA[
    public static InventInventoryDataServiceSoftReserveHistory findInventTransId(InventTransId _inventTransId, boolean _update = false)
    {
        InventInventoryDataServiceSoftReserveHistory softReserveHistory;

        if(_inventTransId)
        {
            if (_update)
            {
                softReserveHistory.selectForUpdate(_update);
            }

            InventTransOrigin inventTransOrigin;
            select firstonly softReserveHistory
                exists join inventTransOrigin
                where softReserveHistory.InventTransOrigin == inventTransOrigin.RecId
                && inventTransOrigin.InventTransId == _inventTransId;
        }
    
        return softReserveHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedSalesLine</Name>
				<Source><![CDATA[
    public SalesLine getRelatedSalesLine(boolean _update = false)
    {
        SalesLine salesLine;
        InventTransOrigin inventTransOrigin;

        if(_update)
        {
            salesLine.selectForUpdate(_update);
        }

        select firstonly salesLine
            exists join inventTransOrigin
            where inventTransOrigin.RecId == this.InventTransOrigin
            && salesLine.InventTransId == inventTransOrigin.InventTransId;
        
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsNonZereSoftReservedQuantity</Name>
				<Source><![CDATA[
    public boolean existsNonZereSoftReservedQuantity()
    {
        return (this.SuccessedQty != 0 || this.PendingQty != 0 || this.ProcessingQty != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanOffsetRelatedQuantity</Name>
				<Source><![CDATA[
    public void cleanOffsetRelatedQuantity()
    {
        if (this.OffsetedQty)
        {
            throw error("@SCM:InventoryServiceOffsetQtyShouldBeZeroWithoutSoftReservationError");
        }
        this.PendingOffsetQty = 0;
        this.update();       
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSoftReserveSuccessed</Name>
				<Source><![CDATA[
    public boolean isSoftReserveSuccessed()
    {
        return (this.PendingQty == 0 && this.ProcessingQty == 0 && ((this.UnprocessedQty + this.FailedQty + this.ValidateFailedQty) == 0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSoftReserveStarted</Name>
				<Source><![CDATA[
    public boolean isSoftReserveStarted()
    {
        return (this.PendingQty != 0
            || this.ProcessingQty != 0
            || this.FailedQty != 0
            || this.ValidateFailedQty != 0
            || this.SuccessedQty != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>readOffsetQtyForInventTransWithQty</Name>
				<Source><![CDATA[
    public static InventInventoryDataServiceReserveInfo readOffsetQtyForInventTransWithQty(InventTrans inventTrans, InventQty proposedQty)
    {
        InventInventoryDataServiceReserveInfo reservInfo = new InventInventoryDataServiceReserveInfo();;
        InventInventoryDataServiceSoftReserveHistory history = InventInventoryDataServiceSoftReserveHistory::findInventTransOriginId(inventTrans.InventTransOrigin, true);
        if (history)
        {
            reservInfo = history.readOffsetQty(proposedQty);
        }
        return reservInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readOffsetQty</Name>
				<Source><![CDATA[
    public InventInventoryDataServiceReserveInfo readOffsetQty(InventQty proposedQty)
    {
        // design Doc: https://msazure.visualstudio.com/FINOPS/_wiki/wikis/FINOPS.wiki/435494/Soft-Reservation-on-Sales-Order-Line
        InventQty offsetQty = 0;
        var reservInfo = new InventInventoryDataServiceReserveInfo();
        InventQty availableForOffsetQty = this.SuccessedQty - this.OffsetedQty;
        InventQty pendingOffsetQtyDiff = 0;

        if (proposedQty > 0)
        {
            offsetQty = min(proposedQty, availableForOffsetQty);
            pendingOffsetQtyDiff = proposedQty - offsetQty;
        }
        else if (proposedQty < 0)
        {
            if (this.PendingOffsetQty >= -(proposedQty))
            {
                pendingOffsetQtyDiff = proposedQty;
            }
            else
            {
                pendingOffsetQtyDiff = -this.PendingOffsetQty;
                offsetQty = max(proposedQty, -this.PendingOffsetQty - this.OffsetedQty) + this.PendingOffsetQty;
            }
        }
        reservInfo.parmOffsetQty(offsetQty);
        reservInfo.parmPendingOffsetQty(pendingOffsetQtyDiff);
        reservInfo.parmSoftReserveHistory(this);

        return reservInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        SalesLine salesLine;
        InventTransOrigin inventTransOrigin;

        ttsbegin; 

        if (this.SuccessedQty > this.orig().SuccessedQty)
        {
            this.PendingOffsetQty = max(0, this.PendingOffsetQty - (this.SuccessedQty - this.orig().SuccessedQty));
            InventQty offsetQty = this.orig().PendingOffsetQty - this.PendingOffsetQty;
            if (offsetQty)
            {
                InventInventoryDataServiceParameters parameter = InventInventoryDataServiceParameters::find();
                select firstonly1 salesLine 
                    join inventTransOrigin 
                    where inventTransOrigin.RecID == this.InventTransOrigin && salesLine.InventTransId == inventTransOrigin.inventTransID && inventTransOrigin.ReferenceCategory == InventTransType::Sales;
                InventInventoryDataServiceReservationOffsetProcessor::insertReservationRecords(this.ItemId, this.InventDimId, salesLine.InventoryServiceReservationID, offsetQty, parameter.IsProcessingQueueBackup);
                this.OffsetedQty += offsetQty;
            }
        }
        // When successed qty is reduced, pending offset qty is not changing as designed

        if (InventInventoryDataServiceSoftReservationCompatibleV0V1Flight::instance().isEnabled())
        {
            if (this.InventDimId != this.orig().inventDimId && this.existsNonZereSoftReservedQuantity())
            {
                throw error("Cant update dimensions of Inventory visibility soft reservation records when there is any successed or processing soft reservations.");
            }
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSoftReserveHistoryAndInsertSoftReserveQueue</Name>
				<Source><![CDATA[
    public void updateSoftReserveHistoryAndInsertSoftReserveQueue(boolean _isProcessingQueueBackup, boolean _isRevert = false)
    {
        if (this.RecId)
        {
            if (InventInventoryDataServiceSoftReservationCompatibleV0V1Flight::instance().isEnabled())
            {
                if (this.EventId != null)
                {
                    return;
                }
            }
            str eventId = 'ohre~' + guid2Str(newGuid());

            ttsbegin;

            real qty = this.updateHistoryAndGetQty(_isRevert);

            if (qty != 0)
            {
                this.PendingQty += qty;
                if(!_isRevert)
                {
                    this.UnprocessedQty -= qty;
                }
                if (InventInventoryDataServiceSoftReservationEventIdFlight::instance().isEnabled())
                {
                    this.EventId = eventId;
                }
                this.insertQueue(eventId, qty, _isProcessingQueueBackup, _isRevert);
            }
           
            this.update();
            Info(strFmt(!_isRevert ? "@SCM:InventoryServiceSoftReserveAddSoftReserveRequestInQueueInfo" : "@SCM:InventoryServiceSoftReserveAddRevertSoftReserveRequestInQueueInfo", this.ItemId, any2Str(qty)));            
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSoftReserveHistoryAndGetSoftReserveEvent</Name>
				<Source><![CDATA[
    public InventOnHandSoftReserveEvent updateSoftReserveHistoryAndGetSoftReserveEvent(boolean _isRevert = false)
    {
        InventOnHandSoftReserveEvent event;
        if (this.EventId == null)
        {
            if (!InventInventoryDataServiceSoftReservationUpdateDeliverRemainderFlight::instance().isEnabled() || this.RecId)
            {
                ttsbegin;

                var qty = this.updateHistoryAndGetQty(_isRevert);
                if(qty != 0)
                {
                    this.ProcessingQty += qty;
                    if (!_isRevert)
                    {
                        this.UnprocessedQty -= qty;
                    }

                    InventDim dim = InventDim::find(this.InventDimId);
                    event = InventOnHandSoftReserveEvent::transformSoftReserveHistory(this, dim, qty, _isRevert);
                    this.EventId = event.parmId();
                }

                this.update();

                ttscommit;
            }
        }

        return event;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertQueue</Name>
				<Source><![CDATA[
    public void insertQueue(str _eventId, real _qty, boolean _isProcessingQueueBackup, boolean _isRevert)
    {
        if (_isProcessingQueueBackup)
        {
            InventInventoryDataServiceSoftReserveQueueBackup queueBackup;
            queueBackup.ReservQty = _qty;
            queueBackup.ItemId = this.ItemId;
            queueBackup.InventDimId = this.InventDimId;
            queueBackup.InventTransOrigin = this.InventTransOrigin;
            queueBackup.EventId = _eventId;
            queueBackup.isRevert = _isRevert;

            queueBackup.insert();
        }
        else
        {
            InventInventoryDataServiceSoftReserveQueue queue;
            queue.ReservQty = _qty;
            queue.ItemId = this.ItemId;
            queue.InventDimId = this.InventDimId;
            queue.InventTransOrigin = this.InventTransOrigin;
            queue.EventId = _eventId;
            queue.isRevert = _isRevert;

            queue.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWithReservResult</Name>
				<Source><![CDATA[
    public void updateWithReservResult(InventOnHandSoftReserveEvent _event, real qty, boolean isBatch = false)
    {
        if (this.EventId == _event.parmId())
        {
            ttsbegin;

            SalesLine salesLine = this.getRelatedSalesLine(true);
            boolean isRevert = _event.parmIsRevert();

            switch (_event.parmStatus())
            {
                case InventInventoryDataServiceSoftReserveResponseStatus::Success:
                    this.EventId = null;
                    this.SuccessedQty += qty;
                    if (isBatch)
                    {
                        this.PendingQty -= qty;
                    }
                    else
                    {
                        this.ProcessingQty -= qty;
                    }

                    if (isRevert)
                    {
                        this.UnprocessedQty -= qty;
                        this.update();
                    }
                    else
                    {
                        this.update();
                        salesLine.InventoryServiceReservationId = _event.parmReservationId();
                        if (InventInventoryDataServiceSoftReservationCompatibleV0V1Flight::instance().isEnabled())
                        {
                            // doUpdate won't tirgger event handler, so move the logic here
                            InventInventoryDataServiceParameters parameter = InventInventoryDataServiceParameters::find();
                            InventInventoryDataServiceReservationOffsetProcessor::processSalesLine(salesLine, DataEventType::Updated, parameter);
                            
                            salesLine.doUpdate();
                        }
                        else
                        {
                            salesLine.update();
                        }
                    }

                    break;
                case InventInventoryDataServiceSoftReserveResponseStatus::ValidationFailed:
                    this.EventId = null;
                    this.ValidateFailedQty += qty;

                    if(isRevert)
                    {
                        this.UnprocessedQty -= qty;
                    }

                    if (isBatch)
                    {
                        this.PendingQty -= qty;
                    }
                    else
                    {
                        this.ProcessingQty -= qty;
                        Info(_event.parmResponseMessage());
                    }

                    this.update();
                    break;
                case InventInventoryDataServiceSoftReserveResponseStatus::Failed:
                    this.EventId = null;
                    if (isBatch)
                    {
                        if (_event.parmRetryCount() >= InventInventoryDataServiceSoftReservationHelper::maxRetryCount)
                        {
                            this.FailedQty += qty;
                
                            if(isRevert)
                            {
                                this.UnprocessedQty -= qty;
                            }
                            
                            this.PendingQty -= qty;
                        }
                    }
                    else
                    {
                        this.FailedQty += qty;
                
                        if(isRevert)
                        {
                            this.UnprocessedQty -= qty;
                        }
                        this.ProcessingQty -= qty;
                        Info(_event.parmResponseMessage());
                    }

                    this.update();
               
                    break;
                default:
                    break;
            }
            ttscommit;
            _event.parmIsSoftReservHistoryUpdated(true);

            if (!isBatch)
            {
            Info(strFmt("@SCM:InventoryServiceSoftReservationResultInfo",
                any2Str(salesLine.LineNum),
                qty > 0 ? 'Sales line has been soft reserved' : 'Soft reservation on sales line has been reverted',
                enum2Symbol(enumNum(InventInventoryDataServiceSoftReserveResponseStatus), _event.parmStatus()),
                any2Str(this.UnprocessedQty),
                any2Str(this.SuccessedQty),
                any2Str(this.PendingQty),
                any2Str(this.ProcessingQty),
                any2Str(this.ValidateFailedQty),
                any2Str(this.FailedQty),
                any2Str(this.OffsetedQty),
                any2Str(this.PendingOffsetQty)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSoftReserveQuantitiesEmpty</Name>
				<Source><![CDATA[
    public boolean isSoftReserveQuantitiesEmpty()
    {
        return this.UnprocessedQty == 0 && this.SuccessedQty == 0 && this.PendingQty == 0 && this.FailedQty == 0 && this.ValidateFailedQty == 0 && this.ProcessingQty == 0 && this.OffsetedQty == 0 && this.PendingOffsetQty == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostedQty</Name>
				<Source><![CDATA[
    public real getPostedQty()
    {
        return this.SuccessedQty + min(this.PendingQty, 0) + min(this.ProcessingQty, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxPossiblePostedQty</Name>
				<Source><![CDATA[
    public real getMaxPossiblePostedQty()
    {
        return this.SuccessedQty + max(this.PendingQty, 0) + max(this.ProcessingQty, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>combineUnpostedQty</Name>
				<Source><![CDATA[
    public void combineUnpostedQty()
    {
        this.UnprocessedQty += this.FailedQty + this.ValidateFailedQty;
        this.FailedQty = 0;
        this.ValidateFailedQty = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHistoryAndGetRevertQty</Name>
				<Source><![CDATA[
    public real updateHistoryAndGetRevertQty()
    {
        real ans = 0;
        
        this.combineUnpostedQty();
        real postedQty = this.getPostedQty();

        if(postedQty > this.offsetedQty)
        {
            ans = postedQty  - this.OffsetedQty;
        }

        this.SuccessedQty -= this.OffsetedQty;
        this.UnprocessedQty += this.OffsetedQty;
        this.PendingOffsetQty += max(this.OffsetedQty, 0);
        this.OffsetedQty = 0;
        return ans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSalesLine</Name>
				<Source><![CDATA[
    internal static InventInventoryDataServiceSoftReserveHistory newFromSalesLine(SalesLine _salesLine)
    {
        InventInventoryDataServiceSoftReserveHistory softReserveHistory;
        InventTable item = InventTable::find(_salesLine.ItemId);
        // init a soft reservation history
        if (!item.inventItemType().isServiceItem() && item.isStocked()) // Soft reservation is only valid for stocked, non-service items
        {
            softReserveHistory.ItemId = _salesLine.ItemId;
            softReserveHistory.InventDimId = _salesLine.InventDimId;
            InventTrans inventTrans;
            InventTransOriginSalesLine inventTransOriginSalesLine;
            while select inventTrans
                exists join inventTransOriginSalesLine
                where inventTransOriginSalesLine.SalesLineInventTransId == _salesLine.InventTransId
                && inventTrans.inventTransOrigin == inventTransOriginSalesLine.InventTransOrigin
            {
                // because there is no reservation id or auto reserve, so offsetqty == 0
                // in previous logic, the pendingToOffsetQty is updated when process offset(InventInventoryDataServiceReserveInfo.readOffsetQty)
                // or InventInventoryDataServiceSoftReservationHistory.update. 
                // If there is not any soft reservation, there will not any pendingToOffsetqty
                softReserveHistory.InventTransOrigin = inventTrans.InventTransOrigin;
                softReserveHistory.UnprocessedQty += -inventTrans.Qty;
            }

            if (softReserveHistory.UnprocessedQty != 0)
            {
                softReserveHistory.insert();
                _salesLine.IsSoftReservedExternally = false;
                _salesLine.doUpdate();
            }
        }

        return softReserveHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHistoryAndGetQty</Name>
				<Source><![CDATA[
    private real updateHistoryAndGetQty(boolean _isRevert)
    {
        return _isRevert ? -this.updateHistoryAndGetRevertQty() : this.updateHistoryAndGetReservQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHistoryAndGetReservQty</Name>
				<Source><![CDATA[
    private real updateHistoryAndGetReservQty()
    {
        this.combineUnpostedQty();
        return this.UnprocessedQty;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InventTransOrigin</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransOriginId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<StringSize>20</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<StringSize>20</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UnprocessedQty</Name>
			<Label>@SCM:InventoryServiceSoftReserveUnprocessedQtyLabel</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SuccessedQty</Name>
			<Label>@SCM:InventoryServiceSoftReserveSuccessedQtyLabel</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PendingQty</Name>
			<Label>@SCM:InventoryServiceSoftReservePendingQtyLabel</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FailedQty</Name>
			<Label>@SCM:InventoryServiceSoftReserveFailedQtyLabel</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ValidateFailedQty</Name>
			<Label>@SCM:InventoryServiceSoftReserveValidateFailedQtyLabel</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OffsetedQty</Name>
			<Label>@SCM:InventoryServiceSoftReserveOffsetedQtyLabel</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PendingOffsetQty</Name>
			<Label>@SCM:InventoryServiceSoftReservePendingOffsetQtyLabel</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProcessingQty</Name>
			<Label>@SCM:InventoryServiceSoftReserveProcessingQtyLabel</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EventId</Name>
			<StringSize>48</StringSize>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOrigin</RelatedTableRole>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransOrigin</Name>
					<Field>InventTransOrigin</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>DimIdIdx</EntityRelationshipRole>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>