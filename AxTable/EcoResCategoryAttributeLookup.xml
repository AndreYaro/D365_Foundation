<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResCategoryAttributeLookup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResCategoryAttributeLookup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>ecoResCategoryAttributeLookup</c> table.
    /// </summary>
    /// <param  name='_categoryRecId'>
    /// An instance of the <c>RecId</c> class denoting category.
    /// </param>
    /// <param  name='_attributeRecId'>
    /// An instance of the <c>RecId</c> class denoting attribute.
    /// </param>
    /// <returns>
    /// true if the record was found; otherwise, false.
    /// </returns>
    public static boolean checkExist(recId _categoryRecId, recId _attributeRecId)
    {
        if (!EcoResCategoryAttributeLookup::exist(_categoryRecId, _attributeRecId))
        {
            return checkFailed(strfmt(EcoResCategoryAttributeLookup::txtNotExist(), _categoryRecId, _attributeRecId));
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>ecoResCategoryAttributeLookup</c> table.
    /// </summary>
    /// <param  name='_categoryRecId'>
    /// An instance of the <c>RecId</c> class denoting category.
    /// </param>
    /// <param  name='_attributeRecId'>
    /// An instance of the <c>RecId</c> class denoting attribute.
    /// </param>
    /// <returns>
    /// true if the record was found; otherwise, false.
    /// </returns>
    public static boolean exist(recId _categoryRecId, recId _attributeRecId)
    {
        return (EcoResCategoryAttributeLookup::find(_categoryRecId, _attributeRecId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the <c>ecoResCategoryAttributeLookup</c> table.
    /// </summary>
    /// <param  name='_categoryRecId'>
    /// An instance of the <c>RecId</c> class denoting category.
    /// </param>
    /// <param  name='_attributeRecId'>
    /// An instance of the <c>RecId</c> class denoting attribute.
    /// </param>
    /// <param  name='_forUpdate'>
    /// A Boolean value to specify the selected record is for update; optional.
    /// </param>
    /// <returns>
    /// An instance of the <c>EcoResCategoryAttributeLookup</c> class.
    /// </returns>
    public static EcoResCategoryAttributeLookup find(recId _categoryRecId, recId _attributeRecId, boolean _forUpdate = false)
    {
        EcoResCategoryAttributeLookup ecoResCategoryAttributeLookup;
        if (_categoryRecId && _attributeRecId)
        {
            ecoResCategoryAttributeLookup.selectForUpdate(_forUpdate);
            select firstonly ecoResCategoryAttributeLookup
                where ecoResCategoryAttributeLookup.Category  == _categoryRecId
                   && ecoResCategoryAttributeLookup.Attribute == _attributeRecId;
        }
        return ecoResCategoryAttributeLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeWithCategoryAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Updates the records in the <c>EcoResCategoryAttributeLookup</c> table
    ///   based on the change in the association of searchable attributes to the procure category.
    /// </summary>
    /// <param  name='_ecoResCategoryUpdated'>
    /// An instance of the <c>EcoResCategory</c> class denoting the procurement category.
    /// </param>
    /// <remarks>
    ///   Updates the records in the <c>EcoResCategoryAttributeLookup</c> table
    ///   after the given category
    ///   - has its inheritance behavior changed
    ///   - has an association with an attribute added
    ///   - has an association with an attribute removed
    ///
    ///   In current implementation, this API is called after
    ///   - ProcCategoryModifier.IsProductAttributesInherited is toggled
    ///   - EcoResCategoryAttribute.delete
    ///   - EcoResCatalogControl.insert|update|delete
    /// </remarks>
    public static void synchronizeWithCategoryAttribute(EcoResCategory _ecoResCategoryUpdated)
    {
        if (isFlightEnabled(EcoResFlighting::CategoryLookupSynchronizationByLevelFlightingName))
        {
            EcoResCategoryAttributeLookup::synchronizeRecordByRecord(_ecoResCategoryUpdated);
        }
        else
        {
            boolean doFullSync = _ecoResCategoryUpdated.ForceFullLookupSync == NoYes::Yes;
            EcoResCategoryAttributeLookupSynchronization synchronization = EcoResCategoryAttributeLookupSynchronization::construct();
            synchronization.parmEcoResCategoryUpdated(_ecoResCategoryUpdated);
            synchronization.parmDoFullSync(doFullSync);
            synchronization.synchronize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeRecordByRecord</Name>
				<Source><![CDATA[
    private static void synchronizeRecordByRecord(EcoResCategory _ecoResCategoryUpdated)
    {
        ProcCategoryExpanded          iCategoryExpanded;
        EcoResCategory                myCategory;
        EcoResCategoryAttribute       myCategoryAttribute;
        EcoResCategoryAttributeLookup myCategoryAttributeLookup4DUI;
        EcoResCategoryAttributeLookup myCategoryAttributeLookup;
        EcoResCategoryAttributeLookup parentCategoryAttributeLookup;
        EcoResCategoryAttributeGroup  myCategoryAttributeGroup;
        EcoResAttributeGroupAttribute myAttributeGroupAttribute;
        Map                           categoryRecIdToSkip = new Map(Types::Int64, Types::AnyType);

        //When attribute/property is changed at higher node of category,
        //this change should be pushed down on all the child nodes whose IsProductAttributesInherited property is set to true.

        ttsbegin;
        //
        // for each of the child nodes of the given category (including itself) ...
        // 1. delete all from EcoResCategoryAttributeLookup for the category
        // 2. copy all for the category from EcoResCategoryAttribute to EcoResCategoryAttributeLookup
        // 3. if IsProductAttributesInherited=true,
        //     copy all from EcoResCategoryAttributeLookup for the category's parent,
        //       excluding the ones already there
        //
        // Due to above algorithm, we must start from the node closet to root first:
        //   processing a child relies on its parent's EcoResCategoryAttributeLookup has been processed.
        //
        while select ParentCategory, CategoryId, IsProductAttributesInherited
            from iCategoryExpanded
                order by Level asc
                where  iCategoryExpanded.NestedSetLeft     >= _ecoResCategoryUpdated.NestedSetLeft
                    && iCategoryExpanded.NestedSetRight    <= _ecoResCategoryUpdated.NestedSetRight
                    && iCategoryExpanded.CategoryHierarchy == _ecoResCategoryUpdated.CategoryHierarchy
        {
            // (for performance) we can skip nodes which
            // - is not _ecoResCategoryUpdated,
            // - and
            //      -- either has IsProductAttributesInherited==NO
            //      -- or has parent node that has been skipped
            if ( (iCategoryExpanded.CategoryId != _ecoResCategoryUpdated.RecId)
            &&  (
                    (iCategoryExpanded.IsProductAttributesInherited == NoYes::No)
                ||  (categoryRecIdToSkip.exists(iCategoryExpanded.ParentCategory))
                )
            )
            {
                categoryRecIdToSkip.insert(iCategoryExpanded.RecId, null);
            }
            else
            {
                // The algorithm *must not* delete a <c>EcoResCategoryAttributeLookup</c> record, only to add another for the same Category+Attribute.
                // Tables with FK on <c>EcoResCategoryAttributeLookup</c> would become invalid.
                // ****************************************************************
                // 1. delete
                //     if Inherit=NO:
                //         delete in my CAx those Attribute not in my CA
                //     if Inherit=YES:
                //         delete in my CAx those Attribute
                //                 not in my CA
                //              && not in my parent's CAx
                // 2. update CAx.CA
                //     if YES:
                //         update my CAx join my parent's CAx on Attribute
                //     update my CAx join my CA on Attribute
                // 3. insert
                //     insert in my CAx missing Attribute from my CA
                //     if YES:
                //         insert in my CAx missing Attribute from my parent's CAx
                // ****************************************************************

                // 1. delete
                if (iCategoryExpanded.IsProductAttributesInherited == NoYes::No)
                {
                    if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
                    {
                        delete_from myCategoryAttributeLookup4DUI
                            where  myCategoryAttributeLookup4DUI.Category == iCategoryExpanded.CategoryId
                            notexists join myCategoryAttribute
                                where  myCategoryAttribute.Category  == iCategoryExpanded.CategoryId
                                    && myCategoryAttribute.Attribute == myCategoryAttributeLookup4DUI.Attribute
                                    && myCategoryAttribute.Modifier  == EcoResCategoryAttributeModifier::Product
                            notexists join myCategoryAttributeGroup
                                where myCategoryAttributeGroup.Category == iCategoryExpanded.CategoryId
                                   && myCategoryAttributeGroup.Modifier == EcoResCategoryAttributeModifier::Product
                                 exists join myAttributeGroupAttribute
                                    where myAttributeGroupAttribute.AttributeGroup == myCategoryAttributeGroup.RecId
                                       && myAttributeGroupAttribute.Attribute      == myCategoryAttributeLookup4DUI.Attribute
                        ;
                    }
                    else
                    {
                        delete_from myCategoryAttributeLookup4DUI
                            where  myCategoryAttributeLookup4DUI.Category == iCategoryExpanded.CategoryId
                            notexists join myCategoryAttribute
                                where  myCategoryAttribute.Category  == iCategoryExpanded.CategoryId
                                    && myCategoryAttribute.Attribute == myCategoryAttributeLookup4DUI.Attribute
                                    && myCategoryAttribute.Modifier  == EcoResCategoryAttributeModifier::Product
                        ;
                    }
                }
                else
                {
                    if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
                    {
                        delete_from myCategoryAttributeLookup4DUI
                            where  myCategoryAttributeLookup4DUI.Category == iCategoryExpanded.CategoryId
                            notexists join myCategoryAttribute
                                where  myCategoryAttribute.Category  == iCategoryExpanded.CategoryId
                                    && myCategoryAttribute.Attribute == myCategoryAttributeLookup4DUI.Attribute
                                    && myCategoryAttribute.Modifier  == EcoResCategoryAttributeModifier::Product
                            notexists join parentCategoryAttributeLookup
                                where  parentCategoryAttributeLookup.Category  == iCategoryExpanded.ParentCategory
                                    && parentCategoryAttributeLookup.Attribute == myCategoryAttributeLookup4DUI.Attribute
                            notexists join myCategoryAttributeGroup
                                where myCategoryAttributeGroup.Category == iCategoryExpanded.CategoryId
                                   && myCategoryAttributeGroup.Modifier == EcoResCategoryAttributeModifier::Product
                                 exists join myAttributeGroupAttribute
                                    where myAttributeGroupAttribute.AttributeGroup == myCategoryAttributeGroup.RecId
                                       && myAttributeGroupAttribute.Attribute      == myCategoryAttributeLookup4DUI.Attribute
                        ;
                    }
                    else
                    {
                        delete_from myCategoryAttributeLookup4DUI
                            where  myCategoryAttributeLookup4DUI.Category == iCategoryExpanded.CategoryId
                            notexists join myCategoryAttribute
                                where  myCategoryAttribute.Category  == iCategoryExpanded.CategoryId
                                    && myCategoryAttribute.Attribute == myCategoryAttributeLookup4DUI.Attribute
                                    && myCategoryAttribute.Modifier  == EcoResCategoryAttributeModifier::Product
                            notexists join parentCategoryAttributeLookup
                                where  parentCategoryAttributeLookup.Category  == iCategoryExpanded.ParentCategory
                                    && parentCategoryAttributeLookup.Attribute == myCategoryAttributeLookup4DUI.Attribute
                        ;
                    }
                }

                // 2. update CAx.CA
                if (iCategoryExpanded.IsProductAttributesInherited == NoYes::Yes)
                {
                    if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
                    {
                        update_recordset myCategoryAttributeLookup4DUI
                        setting CategoryAttribute = parentCategoryAttributeLookup.CategoryAttribute
                                , AttributeGroupAttribute = parentCategoryAttributeLookup.AttributeGroupAttribute
                                , AttributeGroupType = parentCategoryAttributeLookup.AttributeGroupType
                            where  myCategoryAttributeLookup4DUI.Category == iCategoryExpanded.CategoryId
                            join parentCategoryAttributeLookup
                                where  parentCategoryAttributeLookup.Category  == iCategoryExpanded.ParentCategory
                                    && parentCategoryAttributeLookup.Attribute == myCategoryAttributeLookup4DUI.Attribute
                                    // skip the records not needing update:
                                    && parentCategoryAttributeLookup.CategoryAttribute != myCategoryAttributeLookup4DUI.CategoryAttribute
                        ;
                    }
                    else
                    {
                        update_recordset myCategoryAttributeLookup4DUI
                        setting CategoryAttribute = parentCategoryAttributeLookup.CategoryAttribute
                            where  myCategoryAttributeLookup4DUI.Category == iCategoryExpanded.CategoryId
                            join parentCategoryAttributeLookup
                                where  parentCategoryAttributeLookup.Category  == iCategoryExpanded.ParentCategory
                                    && parentCategoryAttributeLookup.Attribute == myCategoryAttributeLookup4DUI.Attribute
                                    // skip the records not needing update:
                                    && parentCategoryAttributeLookup.CategoryAttribute != myCategoryAttributeLookup4DUI.CategoryAttribute
                        ;
                    }
                }
                update_recordset myCategoryAttributeLookup4DUI
                setting CategoryAttribute = myCategoryAttribute.RecId
                    where  myCategoryAttributeLookup4DUI.Category == iCategoryExpanded.CategoryId
                    join myCategoryAttribute
                        where  myCategoryAttribute.Category  == iCategoryExpanded.CategoryId
                            && myCategoryAttribute.Attribute == myCategoryAttributeLookup4DUI.Attribute
                            && myCategoryAttribute.Modifier  == EcoResCategoryAttributeModifier::Product
                            // skip the records not needing update:
                            && myCategoryAttribute.RecId != myCategoryAttributeLookup4DUI.CategoryAttribute
                ;

                // 3. insert
                insert_recordset myCategoryAttributeLookup4DUI (Category, Attribute, CategoryAttribute)
                    select Category, Attribute, RecId from myCategoryAttribute
                        where  myCategoryAttribute.Category == iCategoryExpanded.CategoryId
                            && myCategoryAttribute.Modifier == EcoResCategoryAttributeModifier::Product
                    notexists join myCategoryAttributeLookup
                        where  myCategoryAttributeLookup.Category  == iCategoryExpanded.CategoryId
                            && myCategoryAttributeLookup.Attribute == myCategoryAttribute.Attribute
                ;

                if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
                {
                    insert_recordset myCategoryAttributeLookup4DUI (Category, Attribute, AttributeGroupAttribute)
                        select Category from myCategoryAttributeGroup
                        group by Category
                            where  myCategoryAttributeGroup.Category == iCategoryExpanded.CategoryId
                                && myCategoryAttributeGroup.Modifier == EcoResCategoryAttributeModifier::Product
                            join Attribute, maxof(RecId) from myAttributeGroupAttribute
                            group by Attribute
                                where myAttributeGroupAttribute.AttributeGroup == myCategoryAttributeGroup.AttributeGroup
                        notexists join myCategoryAttributeLookup
                            where  myCategoryAttributeLookup.Category  == iCategoryExpanded.CategoryId
                                && myCategoryAttributeLookup.Attribute == myAttributeGroupAttribute.Attribute;

                    update_recordSet myCategoryAttributeLookup4DUI
                        setting AttributeGroupType = myCategoryAttributeGroup.AttributeGroupType
                        where  myCategoryAttributeLookup4DUI.Category == iCategoryExpanded.CategoryId
                        join myAttributeGroupAttribute
                            where myAttributeGroupAttribute.RecId == myCategoryAttributeLookup4DUI.AttributeGroupAttribute
                        join myCategoryAttributeGroup
                            where myCategoryAttributeGroup.Category == myCategoryAttributeLookup4DUI.Category
                                && myCategoryAttributeGroup.AttributeGroup == myAttributeGroupAttribute.AttributeGroup
                                && myCategoryAttributeGroup.Modifier == EcoResCategoryAttributeModifier::Product
                                // skip the records not needing update:
                                && myCategoryAttributeGroup.AttributeGroupType != myCategoryAttributeLookup4DUI.AttributeGroupType;
                }

                if (iCategoryExpanded.IsProductAttributesInherited == NoYes::Yes)
                {
                    if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
                    {
                        insert_recordset myCategoryAttributeLookup4DUI (Attribute, CategoryAttribute, AttributeGroupAttribute, AttributeGroupType, Category)
                            select Attribute, CategoryAttribute, AttributeGroupAttribute, AttributeGroupType from parentCategoryAttributeLookup
                                where  parentCategoryAttributeLookup.Category == iCategoryExpanded.ParentCategory
                            join RecId from myCategory
                                where  myCategory.RecId == iCategoryExpanded.CategoryId
                            notexists join myCategoryAttributeLookup
                                where  myCategoryAttributeLookup.Category  == iCategoryExpanded.CategoryId
                                    && myCategoryAttributeLookup.Attribute == parentCategoryAttributeLookup.Attribute
                        ;
                    }
                    else
                    {
                        insert_recordset myCategoryAttributeLookup4DUI (Attribute, CategoryAttribute, Category)
                            select Attribute, CategoryAttribute from parentCategoryAttributeLookup
                                where  parentCategoryAttributeLookup.Category == iCategoryExpanded.ParentCategory
                            join RecId from myCategory
                                where  myCategory.RecId == iCategoryExpanded.CategoryId
                            notexists join myCategoryAttributeLookup
                                where  myCategoryAttributeLookup.Category  == iCategoryExpanded.CategoryId
                                    && myCategoryAttributeLookup.Attribute == parentCategoryAttributeLookup.Attribute
                        ;
                    }
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static str txtNotExist()
    {
        return "@SYS131155";
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldEntitySynchronize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the category attribute lookup should be synchronized for this entity in the given runtime context.
    /// </summary>
    /// <param name = "_entityCtx">The data entity runtime context.</param>
    /// <param name = "_entity">The data entity being processed.</param>
    /// <returns>true if the category should be synchronized; otherwise false.</returns>
    /// <remarks>
    /// Delete operations already trigger the synchronization and can be ignored.
    /// For performance reasons, synchronization should happen after the import in a data management context. See <c>postTargetProcess</c>.
    /// This behavior can be bypassed.
    /// </remarks>
    internal static boolean shouldEntitySynchronize(DataEntityRuntimeContext _entityCtx, Common _entity)
    {
        return _entityCtx.isDatabaseOperationInsertOrUpdate()
            && !_entity.isEntityInDataManagementContext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSynchronizePostImport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the category attribute lookup should be synchronized after the import.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The group execution definition.</param>
    /// <returns>true if the synchronization should be executed; false if not.</returns>
    internal static boolean shouldSynchronizePostImport(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        return _dmfDefinitionGroupExecution.StagingStatus == DMFBatchJobStatus::Finished;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS321527</DeveloperDocumentation>
	<Label>@SYS321526</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Category</TitleField1>
	<TitleField2>Attribute</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>CategoryAttributeIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Attribute</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Attribute</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS303404</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Attribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryAttribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeGroupAttribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeGroupType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Attribute</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS77030</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AttributeGroupAttribute</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Retail</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Category</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@sys69410</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CategoryAttribute</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS131176</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AttributeGroupType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailAttributeGroupType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CategoryAttributeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Category</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Attribute</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResAttributeGroupAttribute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResAttributeGroupAttribute</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AttributeGroupAttribute</Name>
					<Field>AttributeGroupAttribute</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategoryAttribute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategoryAttribute</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategoryAttribute</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResCategoryAttributeLookup_EcoResCategoryAttribute</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryAttribute</Name>
					<Field>CategoryAttribute</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RelAttribute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResAttribute</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResAttribute</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>EcoResCategoryAttributeLookup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Attribute</Name>
					<Field>Attribute</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RelCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategory</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>EcoResCategoryAttributeLookup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Category</Name>
					<Field>Category</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CategoryAttributeView</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategoryAttributeGroupAttrView</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategoryAttributeGroupAttrView</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Attribute</Name>
					<Field>Attribute</Field>
					<RelatedField>Attribute</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Category</Name>
					<Field>Category</Field>
					<RelatedField>Category</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AttributeGroupAttribute</Name>
					<Field>AttributeGroupAttribute</Field>
					<RelatedField>AttributeGroupAttribute</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>