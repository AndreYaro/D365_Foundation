<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqIntercompanyPlanningGroupMember</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqIntercompanyPlanningGroupMember extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Overrides the default caption that is displayed in a title of a form.
    /// </summary>
    /// <returns>
    ///    The form caption.
    /// </returns>
    public str caption()
    {
        str res = super();

        return strfmt("%1: %2, %3: %4",
                fieldpname(ReqIntercompanyPlanningGroupMember, LegalEntity), CompanyInfo::findRecId(this.LegalEntity).DataArea,
                fieldpname(ReqIntercompanyPlanningGroupMember, PlanningGroup), this.planningGroup().Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearIntercompanyPlanIfNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the intercompany plan field if the legal entity has changed.
    /// </summary>
    private void clearIntercompanyPlanIfNeeded()
    {
        if (this.LegalEntity != this.orig().LegalEntity)
        {
            this.IntercompanyPlanDataAreaId = '';
            this.IntercompanyPlanId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupIntercompanyPlanId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a lookup window for the intercompany plan.
    /// </summary>
    /// <param name="_lookupCallingControl">
    /// A <c>FormControl</c> object that identifies the calling control for which to write the value.
    /// </param>
    /// <remarks>
    /// The lookup is set up to allow for picking plans from the company that is stamped on the current
    /// group member record.
    /// </remarks>
    public void lookupIntercompanyPlanId(FormControl _lookupCallingControl)
    {
        Query query = new Query();
        QueryBuildDataSource reqPlanSchedDs;
        SysTableLookup sysTableLookup;

        if (!this.LegalEntity)
        {
            warning("@SYS339063");
            return;
        }

        sysTableLookup = SysTableLookup::newParameters(tableNum(ReqPlanSched), _lookupCallingControl);

        // Add fields to be shown in the lookup form.
        sysTableLookup.addLookupfield(fieldNum(ReqPlanSched, ReqPlanIdSched), true);
        sysTableLookup.addLookupfield(fieldNum(ReqPlanSched, DataAreaId));

        reqPlanSchedDs = query.addDataSource(tableNum(ReqPlanSched));
        query.allowCrossCompany(true);
        query.addCompanyRange(CompanyInfo::findRecId(this.LegalEntity).DataArea);

        // Perform the lookup.
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
        public void modifiedFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        if (_fieldName == fieldStr(ReqIntercompanyPlanningGroupMember, LegalEntity))
        {
            this.clearIntercompanyPlanIfNeeded();
            this.IntercompanyPlanDataAreaId = CompanyInfo::findRecId(this.LegalEntity).DataArea;
        }

        super(_fieldName, _arrayIndex);
    }

]]></Source>
			</Method>
			<Method>
				<Name>planningGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the associated <c>ReqIntercompanyPlanningGroup</c> record.
    /// </summary>
    /// <returns>
    /// The associated <c>ReqIntercompanyPlanningGroup</c> record if it exists,
    /// otherwise an empty buffer.
    /// </returns>
    public ReqIntercompanyPlanningGroup planningGroup()
    {
        return ReqIntercompanyPlanningGroup::find(this.PlanningGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
        public boolean validateFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        if ((_fieldName == fieldStr(ReqIntercompanyPlanningGroupMember, IntercompanyPlanId) ||
             _fieldName == fieldStr(ReqIntercompanyPlanningGroupMember, IntercompanyPlanDataAreaId)) &&
            this.IntercompanyPlanId)
        {
            if (this.IntercompanyPlanDataAreaId)
            {
                changecompany (this.IntercompanyPlanDataAreaId)
                {
                    if (!ReqPlanSched::find(this.IntercompanyPlanId))
                    {
                        ret = checkFailed(strFmt("@SYS334912", this.IntercompanyPlanId, this.IntercompanyPlanDataAreaId));
                    }
                    else
                    {
                        ret = true;
                    }
                }
            }
            else
            {
                ret = checkFailed("@SYS339063");
            }
        }
        else
        {
           ret = super(_fieldName, _arrayIndex);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        ReqIntercompanyPlanningGroupMember  groupMember;
        boolean                             ret;
        CompanyInfo                         companyInfo;

        ret = super();

        if (ret)
        {
            select firstonly SequenceNumber, LegalEntity from groupMember
                where   groupMember.PlanningGroup   == this.PlanningGroup
                &&      groupMember.RecId           != this.RecId
                &&      (groupMember.LegalEntity    == this.LegalEntity
                ||      groupMember.SequenceNumber  == this.SequenceNumber);
        }

        if (groupMember)
        {
            if (groupMember.SequenceNumber == this.SequenceNumber)
            {
                ret = checkFailed(strFmt("@SYS334913", this.SequenceNumber));
            }

            if (ret && groupMember.LegalEntity == this.LegalEntity)
            {
                companyInfo = CompanyInfo::findRecId(this.LegalEntity);
                ret = checkFailed(strFmt("@SYS334914", companyInfo.DataArea, companyInfo.Name));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>ReqIntercompanyPlanningGroupMember</c> table.
    /// </summary>
    /// <param name="_intercompanyPlanningGroup">
    /// The record ID of the intercompany planning group.
    /// </param>
    /// <param name="_legalEntity">
    /// The legal entity for which to find the member record.
    /// </param>
    /// <param name="_selectForUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>ReqIntercompanyPlanningGroupMember</c> table; otherwise, an empty record.
    /// </returns>
    public static ReqIntercompanyPlanningGroupMember find(ReqIntercompanyPlanningGroupRecId _intercompanyPlanningGroup,
                                                          LegalEntity                       _legalEntity,
                                                          boolean                           _selectForUpdate = false)
    {
        ReqIntercompanyPlanningGroupMember intercompanyGroupMember;

        intercompanyGroupMember.selectForUpdate(_selectForUpdate);

        select intercompanyGroupMember
        where   intercompanyGroupMember.PlanningGroup   == _intercompanyPlanningGroup
        &&      intercompanyGroupMember.LegalEntity     == _legalEntity;

        return intercompanyGroupMember;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || ReqEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Req</ConfigurationKey>
	<DeveloperDocumentation>@SYS334933</DeveloperDocumentation>
	<Label>@SYS334932</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>PlanningGroup</TitleField1>
	<TitleField2>LegalEntity</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>MasterPlanning</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlanningGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SequenceNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntercompanyPlanId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IntercompanyPlan</Name>
			<Label>@SYS334910</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntercompanyPlanId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntercompanyPlanDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PlanningGroupId</Name>
			<Label>@SYS334911</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlanningGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PlanningGroupMember</Name>
			<Label>@SYS334932</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SequenceNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntercompanyPlanId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CopyToStaticPlan</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CopyToDynamicPlan</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CopyToDynamicPlan</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqCopyToDynamicPlan</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CopyToStaticPlan</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqCopyToStaticPlan</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntercompanyPlanDataAreaId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SelectableDataArea</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntercompanyPlanId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqIntercompanyPlanId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LegalEntity</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LegalEntity</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PlanningGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqIntercompanyPlanningGroupRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SequenceNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanySchedulingOrder</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SequenceNumberIdx</Name>
			<ConfigurationKey>TradeInterCompany</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PlanningGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SequenceNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LegalEntityIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>PlanningGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LegalEntity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PlanIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PlanningGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IntercompanyPlanDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IntercompanyPlanId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CompanyInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LegalEntity</Name>
					<Field>LegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReqIntercompanyPlanningGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ReqIntercompanyPlanningGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PlanningGroup</Name>
					<Field>PlanningGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReqPlanSched</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReqPlanSched</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IntercompanyPlanDataAreaId</Name>
					<Field>IntercompanyPlanDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IntercompanyPlanId</Name>
					<SourceEDT>ReqIntercompanyPlanId</SourceEDT>
					<Field>IntercompanyPlanId</Field>
					<RelatedField>ReqPlanIdSched</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PlanIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>