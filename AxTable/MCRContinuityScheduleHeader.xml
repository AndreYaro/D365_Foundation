<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRContinuityScheduleHeader</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MCRContinuityScheduleHeader extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>advanceEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Advances this schedule to the next step, even if that is a repeat of
    /// the same step.
    /// </summary>
    /// <remarks>
    /// Note that this does not first determine if the schedule should be advanced.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown if the continuity schedule line cannot be updated.
    /// </exception>
    public void advanceEvent()
    {
        MCRContinuityScheduleHeader mcrContinuityScheduleHeader;
        MCRContinuityScheduleLine   mcrContinuityScheduleLine;
        date                        thisDate;

        if (this.OrderStart == MCRContinuityOrderStart::FirstEvent)
        {
            // Such orders do not advance in this manner.
            return;
        }

        thisDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        ttsBegin;

        mcrContinuityScheduleHeader = MCRContinuityScheduleHeader::find(this.ScheduleID, true);

        select forupdate mcrContinuityScheduleLine
            where mcrContinuityScheduleLine.ScheduleID == this.ScheduleID
               && mcrContinuityScheduleLine.EventID == this.CurrentEvent
               && mcrContinuityScheduleLine.NumTimesToRepeat > 0;

        if (mcrContinuityScheduleLine)
        {
            // Stay on the same event, but decrement the times to repeat.
            while (mcrContinuityScheduleLine)
            {
                mcrContinuityScheduleLine.NumTimesToRepeat--;

                if (mcrContinuityScheduleLine.validateWrite())
                {
                    mcrContinuityScheduleLine.update();
                }
                else
                {
                    throw error("@SYS18447");
                }
                next mcrContinuityScheduleLine;
            }
        }
        else
        {
            // Proceed to the next event
            mcrContinuityScheduleHeader.CurrentEvent = this.nextEvent();
        }

        update_recordset mcrContinuityScheduleLine
            setting DateStarted = thisDate
            where mcrContinuityScheduleLine.ScheduleID == this.ScheduleID
               && mcrContinuityScheduleLine.EventID    == mcrContinuityScheduleHeader.CurrentEvent;

        mcrContinuityScheduleHeader.LastChecked = thisDate;

        if (mcrContinuityScheduleHeader.validateWrite())
        {
            mcrContinuityScheduleHeader.update();
        }
        else
        {
            throw error("@SYS18447");
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the event ID which will come after the current event.
    /// </summary>
    /// <returns>
    /// The continuity even ID of the next event.
    /// </returns>
    /// <remarks>
    /// Will return the next line even if this line is set to repeat or end.
    /// An event ID of 0 means there is no next event.
    /// </remarks>
    private MCRContinuityEventId nextEvent()
    {
        MCRContinuityScheduleLine mcrContinuityScheduleLine;

        select firstOnly EventID from mcrContinuityScheduleLine
            order by EventID asc
            where mcrContinuityScheduleLine.ScheduleID  == this.ScheduleID
               && mcrContinuityScheduleLine.ActionCode  != MCRContinuityActionCode::Skip
               && mcrContinuityScheduleLine.EventID     >  this.CurrentEvent;

        return mcrContinuityScheduleLine.EventID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextEventStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates when the next event begins for schedules that begin at a set date.
    /// </summary>
    /// <returns>
    /// The starting date of the next event.  If a null date is returned there was
    /// an error finding the starting date.
    /// </returns>
    public date nextEventStartDate()
    {
        MCRContinuityScheduleLine   mcrContinuityScheduleLineThisLine;
        MCRContinuityScheduleLine   mcrContinuityScheduleLineNextLine;
        MCRContinuityScheduleLine   mcrContinuityScheduleLineEndLine;
        LedgerPeriodCode            ledgerPeriodCode;
        date                        nextStartDate;

        // Continuities not bound to a specific starting time do not have universal
        // event starting dates.
        if (this.OrderStart == MCRContinuityOrderStart::FirstEvent)
        {
            return dateNull();
        }

        select firstOnly mcrContinuityScheduleLineThisLine
            where mcrContinuityScheduleLineThisLine.ScheduleID == this.ScheduleID
               && mcrContinuityScheduleLineThisLine.EventID    == this.CurrentEvent;

        if (mcrContinuityScheduleLineThisLine.NumTimesToRepeat < 1)
        {
            // This event is not set to repeat.  Check for an End action on this event.
            // If there is one, no further lines should be processed.
            select firstOnly mcrContinuityScheduleLineEndLine
                where mcrContinuityScheduleLineEndLine.ScheduleID == this.ScheduleID
                   && mcrContinuityScheduleLineEndLine.EventID    == this.CurrentEvent
                   && mcrContinuityScheduleLineEndLine.ActionCode == MCRContinuityActionCode::End;

            if (mcrContinuityScheduleLineEndLine)
            {
                return dateNull();
            }

            // Determine the event ID of the next valid line, if it exists.
            if (mcrContinuityScheduleLineThisLine)
            {
                // We have a current line, so should be able to get
                // the next one from this one.
                select firstOnly mcrContinuityScheduleLineNextLine
                    where mcrContinuityScheduleLineNextLine.ScheduleID == this.ScheduleID
                       && mcrContinuityScheduleLineNextLine.EventID    == mcrContinuityScheduleLineThisLine.getNextEvent()
                       && mcrContinuityScheduleLineNextLine.ActionCode != MCRContinuityActionCode::Skip;
            }
            else
            {
                // Need the first line, since there is no previous event
                select firstOnly mcrContinuityScheduleLineNextLine
                    order by EventID asc
                    where mcrContinuityScheduleLineNextLine.ScheduleID == this.ScheduleID
                       && mcrContinuityScheduleLineNextLine.ActionCode != MCRContinuityActionCode::Skip;
            }
        }
        else
        {
            // This event is set to repeat, so the next event is also the current one.
            mcrContinuityScheduleLineNextLine = mcrContinuityScheduleLineThisLine;
        }

        // If there is no line to execute next, there is no start date.
        if (!mcrContinuityScheduleLineNextLine)
        {
            return dateNull();
        }

        // If there is a start date, use that.
        if (mcrContinuityScheduleLineNextLine.StartOrderDate)
        {
            nextStartDate = mcrContinuityScheduleLineNextLine.StartOrderDate;
        }

        // If there is days from last event info, use that.
        if (mcrContinuityScheduleLineNextLine.DaysFromLastEvent > 0)
        {
            nextStartDate = mcrContinuityScheduleLineThisLine.DateStarted + mcrContinuityScheduleLineNextLine.DaysFromLastEvent;
        }

        // If there is a date code info, use that.
        if (mcrContinuityScheduleLineNextLine.PeriodCode)
        {
            ledgerPeriodCode = LedgerPeriodCode::find(mcrContinuityScheduleLineNextLine.PeriodCode);
            nextStartDate = ledgerPeriodCode.fromDateAdded(mcrContinuityScheduleLineThisLine.DateStarted);
        }

        return nextStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the record in <c>MCRContinuityScheduleHeader</c> table.
    /// </summary>
    /// <remarks>
    /// If the continuity ID or payment schedule has been changed, then
    /// this changes the lines appropriately.
    /// </remarks>
    public void update()
    {
        MCRContinuityScheduleID     mcrContinuityScheduleIdOld;
        MCRContinuityScheduleID     mcrContinuityScheduleIdNew;
        PaymSchedId                 paymSchedIdOld;
        PaymSchedId                 paymSchedIdNew;
        MCRContinuityScheduleLine   mcrContinuityScheduleLine;

        mcrContinuityScheduleIdOld = this.orig().ScheduleID;
        paymSchedIdOld             = this.orig().PaymSchedId;

        ttsBegin;

        super();

        mcrContinuityScheduleIdNew = this.ScheduleID;
        paymSchedIdNew             = this.PaymSchedId;

        if (mcrContinuityScheduleIdNew != mcrContinuityScheduleIdOld)
        {
            update_recordset mcrContinuityScheduleLine
                setting ScheduleID = mcrContinuityScheduleIdNew
                where mcrContinuityScheduleLine.ScheduleID == mcrContinuityScheduleIdOld;
        }

        if (paymSchedIdNew != paymSchedIdOld)
        {
            update_recordset mcrContinuityScheduleLine
                setting PaymSchedId = paymSchedIdNew
                where mcrContinuityScheduleLine.PaymSchedId == paymSchedIdOld
                   && mcrContinuityScheduleLine.ScheduleID  == mcrContinuityScheduleIdNew;
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current record is valid and ready to be deleted
    /// from the database.
    /// </summary>
    /// <returns>
    /// true if the record is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The continuity schedules may not be deleted if the schedule is associated
    /// with an item.
    /// </remarks>
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (InventTable::mcrFindByContinuitySchedId(this.ScheduleID))
            {
                ret = checkFailed("@MCR24285");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean                   ret;
        MCRContinuityScheduleLine mcrContinuityScheduleLine;

        ret = super();

        // Ensure no lines have prices  if billing from header.
        if (this.BillUpfront)
        {
            select RecId from mcrContinuityScheduleLine
                where mcrContinuityScheduleLine.ScheduleID == this.ScheduleID
                   && mcrContinuityScheduleLine.PriceOverridden == NoYes::Yes;

            if (mcrContinuityScheduleLine)
            {
                ret = checkFailed("@MCR12116");
            }
        }

        // Non-active schedules cannot be tied to an item.
        if (!this.Active && InventTable::mcrFindByContinuitySchedId(this.ScheduleID, false))
        {
            ret = checkFailed("@MCR12135");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>MCRContinuityScheduleHeader</c> table.
    /// </summary>
    /// <param name="_mcrContinuityScheduleId">
    /// The continuity schedule ID of the <c>MCRContinuityScheduleHeader</c> table record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in <c>MCRContinuityScheduleHeader</c>; otherwise, an empty record.
    /// </returns>
    public static MCRContinuityScheduleHeader find(
        MCRContinuityScheduleID _mcrContinuityScheduleId,
        boolean                 _forUpdate = false)
    {
        MCRContinuityScheduleHeader mcrContinuityScheduleHeader;

        if (_mcrContinuityScheduleId)
        {
            mcrContinuityScheduleHeader.selectForUpdate(_forUpdate);

            select firstonly mcrContinuityScheduleHeader
                where mcrContinuityScheduleHeader.ScheduleID == _mcrContinuityScheduleId;
        }

        return mcrContinuityScheduleHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBillUPFrontWithNoPaymSched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a continuity schedule is bill up front without a payment schedule.
    /// </summary>
    /// <param name="_mcrContinuityScheduleID">
    /// The continuity schedule ID of the continuity schedule to check.
    /// </param>
    /// <returns>
    /// true if the schedule is bill up front without a payment schedule; otherwise, false.
    /// </returns>
    public static boolean isBillUPFrontWithNoPaymSched(MCRContinuityScheduleID _mcrContinuityScheduleID)
    {
        MCRContinuityScheduleHeader mcrContinuityScheduleHeader;
        mcrContinuityScheduleHeader = MCRContinuityScheduleHeader::find(_mcrContinuityScheduleID);

        if (mcrContinuityScheduleHeader.BillUpfront
            && !mcrContinuityScheduleHeader.PaymSchedId)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBillUPFrontWithPaymSched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a continuity schedule is bill up front with a payment schedule.
    /// </summary>
    /// <param name="_mcrContinuityScheduleID">
    /// The continuity schedule ID of the continuity schedule to check.
    /// </param>
    /// <returns>
    /// true if the schedule is bill up front with a payment schedule; otherwise, false.
    /// </returns>
    public static boolean isBillUPFrontWithPaymSched(MCRContinuityScheduleID _mcrContinuityScheduleID)
    {
        MCRContinuityScheduleHeader mcrContinuityScheduleHeader;
        mcrContinuityScheduleHeader = MCRContinuityScheduleHeader::find(_mcrContinuityScheduleID);

        if (mcrContinuityScheduleHeader.BillUpfront
            && mcrContinuityScheduleHeader.PaymSchedId)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retCurrentEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the current event for a continuity schedule.
    /// </summary>
    /// <param name="_schedId">
    /// The continuity schedule ID of the continuity schedule for which to find the
    /// next event.
    /// </param>
    /// <returns>
    /// The next continuity event ID.
    /// </returns>
    public static MCRContinuityEventId retCurrentEvent(MCRContinuityScheduleID _schedId)
    {
        return MCRContinuityScheduleHeader::find(_schedId, false).CurrentEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateContinuitySchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to validate that the continuity schedule line has not ended or does not already exist.
    /// </summary>
    /// <returns>
    ///  true if valid; otherwise false.
    /// </returns>
    public static boolean validateContinuitySchedule()
    {
        MCRContinuityScheduleLine   mcrContinuityScheduleLineLocal;
        MCRContinuityScheduleHeader mcrContinuityScheduleHeaderLocal;
        MCRValidPaymentSchedule    mcrValidPaymentScheduleLocal;
        boolean  ret = true;
        // Ensure that there is at least on schedule event that has an action of end.
        while select ScheduleID from mcrContinuityScheduleHeaderLocal
            notexists join mcrContinuityScheduleLineLocal
            where mcrContinuityScheduleLineLocal.ScheduleID == mcrContinuityScheduleHeaderLocal.ScheduleID
                && mcrContinuityScheduleLineLocal.ActionCode == MCRContinuityActionCode::End
        {
            ret = false;
            error(strfmt("@MCR12826", mcrContinuityScheduleHeaderLocal.ScheduleID));
        }
        //Ensure at least one payment schedule has been provided.
        while select ScheduleID from mcrContinuityScheduleHeaderLocal
            where mcrContinuityScheduleHeaderLocal.PromptForPaymSched == true
            notexists join mcrValidPaymentScheduleLocal
            where mcrValidPaymentScheduleLocal.ContinuityScheduleID == mcrContinuityScheduleHeaderLocal.ScheduleID
        {
            ret = false;
            error(strfmt("@MCR12959", mcrContinuityScheduleHeaderLocal.ScheduleID));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize fields for <c>MCRContitnuityScheduleHelper</c>.
    /// </summary>
    public void initValue()
    {
        super();

        this.Active = NoYes::No;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>MCRContinuity</ConfigurationKey>
	<DeveloperDocumentation>@MCR12605</DeveloperDocumentation>
	<FormRef>MCRContinuitySchedule</FormRef>
	<Label>@MCR12605</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>ScheduleID</TitleField1>
	<TitleField2>PaymSchedId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>MCRContinuityScheduleId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DataSharingType>Duplicate</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ModifiedTransactionId>Yes</ModifiedTransactionId>
	<Modules>TransactionsAndOrders</Modules>
	<PrimaryIndex>MCRContinuityScheduleId</PrimaryIndex>
	<ReplacementKey>MCRContinuityScheduleId</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>MCRContinuityScheduleLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MCRContinuityScheduleLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ScheduleID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSchedId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderStart</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BillUpfront</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrentEvent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastChecked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PromptForStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PromptForPaymSched</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ScheduleID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ScheduleID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSchedId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderStart</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BillUpfront</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrentEvent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastChecked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PromptForStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PromptForPaymSched</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>daysAfter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>consolidatePastOrders</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Active</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS14584</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BillUpfront</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRBillUpFront</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>consolidatePastOrders</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRConsolidatePastOrders</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CurrentEvent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRContinuityEventId</ExtendedDataType>
			<Label>@MCR12170</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>daysAfter</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRDaysAfter</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LastChecked</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRLastChecked</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OrderStart</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>MCRContinuityOrderStart</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymSchedId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymSchedId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PromptForPaymSched</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRPromptForPaymSched</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PromptForStartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRPromptForStartDate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ScheduleID</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRContinuityScheduleID</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>MCRContinuityScheduleId</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ScheduleID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymSched</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PaymSched</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymSchedId</Name>
					<SourceEDT>PaymSchedId</SourceEDT>
					<Field>PaymSchedId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NameIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>