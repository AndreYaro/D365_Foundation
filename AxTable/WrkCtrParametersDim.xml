<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrParametersDim</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WrkCtrParametersDim extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs checks on the deletion of records.
    /// </summary>
    /// <exception cref="M:exception::error">
    ///    Records with a default <c>InventDimId</c> object cannot be deleted.
    /// </exception>
    public void delete()
    {
        if (this.InventDimId == InventDim::inventDimIdBlank())
        {
            throw error("@SYS23721");
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes values from the <c>WrkCtrParametersDim</c> record.
    /// </summary>
    public void initValue()
    {
        #WrkCtrScheduler

        WrkCtrParametersDim parameter;

        super();

        // The WrkCtrParametersDim::find method is not used here because it would result in an indefinite loop
        select firstonly parameter where parameter.InventDimId == InventDim::inventDimIdBlank();
        if (parameter)
        {
            // If any non-site specific records exists, then initialize from that
            buf2Buf(parameter,this);
        }
        else
        {
            // Set default values
            if (!this.InventDimId)
            {
                this.InventDimId = InventDim::inventDimIdBlank();
            }

            this.SequenceScheduleTimeoutEnabled     = NoYes::Yes;
            this.SequenceOptimizationTimeoutEnabled = NoYes::Yes;
            this.SequenceScheduleRuntimeLimit       = #DefaultSequenceScheduleRuntimeLimit;
            this.SequenceOptimizationRuntimeLimit   = #DefaultSequenceOptimizationRuntimeLimit;
            this.LogOnlyOnErrorEnabled              = NoYes::Yes;
            this.RandomizeEqualResources            = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventSite</c> record based on the site ID in a related <c>InventDim</c> record.
    /// </summary>
    /// <returns>
    /// An <c>InventSite</c> record.
    /// </returns>
    public InventSite inventSite()
    {
        return InventSite::find(InventDim::find(this.InventDimId).InventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>siteName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the associated site.
    /// </summary>
    /// <returns>
    /// The name of the associated site.
    /// </returns>
    public display InventSiteName siteName()
    {
        return this.inventSite().Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLoggingOnError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables logging on error
    /// </summary>
    /// <param name = "_enable">A Boolean value specifying whether to enable logging on error.</param>
    public void enableLoggingOnError(boolean _enable)
    {
        this.selectForUpdate(true);
        this.LogOnlyOnErrorEnabled = _enable;

        this.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFromDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a copy of the company wide record and assigns the specified <c>InventDimId</c> value to it.
    /// </summary>
    /// <param name="_toInventDimId">
    /// The <c>InventDimId</c> to copy values to.
    /// </param>
    public static void copyFromDefault(InventDimId _toInventDimId)
    {
        if (!WrkCtrParametersDim::existInventDimId(_toInventDimId))
        {
            WrkCtrParametersDim    wrkCtrParametersDim;

            wrkCtrParametersDim.initValue();
            wrkCtrParametersDim.InventDimId = _toInventDimId;
            wrkCtrParametersDim.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>WrkCtrParametersDim</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID to check.
    /// </param>
    /// <returns>
    ///    true if a record exists with the provided record ID; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        return _recId &&
               (select firstonly RecId from wrkCtrParametersDim
                    where wrkCtrParametersDim.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a record in the <c>WrkCtrParametersDim</c> table with a given InventDimId exists.
    /// </summary>
    /// <param name="_inventDimId">
    ///    The InventDimId to check.
    /// </param>
    /// <returns>
    ///    true if a record exists with the provided InventDimId; otherwise, false.
    /// </returns>
    public static boolean existInventDimId(InventDimId _inventDimId)
    {
        return _inventDimId &&
               (select firstonly RecId from wrkCtrParametersDim
                    where wrkCtrParametersDim.InventDimId == _inventDimId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a <c>WrkCtrParametersDim</c> record based on the site ID from the specified
    ///    <c>InventDimId</c> extended data type.
    /// </summary>
    /// <param name="_inventDimId">
    ///    An <c>InventDimId</c> value on which to filter the search for the <c>WrkCtrParametersDim</c> record.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    ///    A <c>WrkCtrParametersDim</c> record.
    /// </returns>
    /// <remarks>
    ///    The lookup for a <c>WrkCtrParametersDim</c> record with an <c>inventDim</c> value that contains a
    ///    specific <c>siteId</c> value will only be done if this has been enabled in the
    ///    <c>ProdParameters</c> table. If no record is found and the search is based on the blank
    ///    <c>InventDim</c> record, a new record will be created in the <c>WrkCtrParametersDim</c> table.
    /// </remarks>
    public static WrkCtrParametersDim find(
        InventDimId _inventDimId,
        boolean     _forupdate = false)
    {
        WrkCtrParametersDim parameter;

        parameter.selectForUpdate(_forupdate);

        _inventDimId = WrkCtrParameters::resolveInventDimId(_inventDimId);

        select firstonly parameter
            where parameter.InventDimId == _inventDimId;

        if (!parameter && _inventDimId != InventDim::inventDimIdBlank())
        {
            //Try to get the non-site specific value
            select firstonly parameter
                where parameter.InventDimId == InventDim::inventDimIdBlank();
        }

        if (!parameter && !parameter.isTmp())
        {
            Company::createParameter(parameter);
        }

        return parameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>WrkCtrParametersDim</c> record based on the site ID from the default
    /// <c>inventDimId</c> value.
    /// </summary>
    /// <param name="_forupdate">
    /// A Boolean value that determines whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// A <c>WrkCtrParametersDim</c> record.
    /// </returns>
    static WrkCtrParametersDim findDefault(boolean _forupdate = false)
    {
        return WrkCtrParametersDim::find(InventDim::inventDimIdBlank(),_forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>WrkCtrParametersDim</c> table by using the specified record ID.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update.
    /// </param>
    /// <returns>
    ///    A record in the table; otherwise, an empty record.
    /// </returns>
    public static WrkCtrParametersDim findRecId(
        recId   _recId,
        boolean _forUpdate = false)
    {
        WrkCtrParametersDim wrkCtrParametersDim;

        if (_recId)
        {
            wrkCtrParametersDim.selectForUpdate(_forUpdate);

            select firstonly wrkCtrParametersDim
                where wrkCtrParametersDim.RecId == _recId;
        }

        return wrkCtrParametersDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLogging</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables logging.
    /// </summary>
    /// <param name = "_enable">A Boolean value specifying whether to enable logging.</param>
    public static void enableLogging(boolean _enable)
    {
        WrkCtrParametersDim wrkCtrParametersDim;

        WrkCtrParametersDim::findDefault();

        update_recordset wrkCtrParametersDim
            setting EnableLog = _enable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLoggingEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines of text logging is enabled.
    /// </summary>
    /// <returns>true if text logging is enabled; otherwise, false.</returns>
    public static boolean isLoggingEnabled()
    {
        WrkCtrParametersDim wrkCtrParametersDim;

        select firstonly RecId from wrkCtrParametersDim
            where wrkCtrParametersDim.EnableLog;

        return wrkCtrParametersDim.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WrkCtr</ConfigurationKey>
	<DeveloperDocumentation>@SYS124236</DeveloperDocumentation>
	<Label>@SYS109018</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>InventDimId</TitleField1>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>InventDim</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>MasterPlanning</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>InventDim</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>KeepProductionUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SequenceScheduleRuntimeLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KeepWarehouseFromResource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrimaryResourceSelection</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SequenceOptimizationRuntimeLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SequenceScheduleTimeoutEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SequenceOptimizationTimeoutEnabled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventDIm</Name>
			<Label>@SYS103211</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SchedulingParameters</Name>
			<Label>@SYS132233</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SequenceScheduleTimeoutEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SequenceScheduleRuntimeLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SequenceOptimizationTimeoutEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SequenceOptimizationRuntimeLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KeepProductionUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KeepWarehouseFromResource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrimaryResourceSelection</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RandomizeEqualResources</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LogOnlyOnErrorEnabled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>KeepProductionUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KeepProductionUnit</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>KeepWarehouseFromResource</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KeepWarehouseFromResource</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PrimaryResourceSelection</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS303221</Label>
			<EnumType>WrkCtrSchedulerPrimaryResourceSelection</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SequenceOptimizationRuntimeLimit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SequenceOptimizationRuntimeLimit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SequenceOptimizationTimeoutEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SequenceOptimizationTimeoutEnabled</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SequenceScheduleRuntimeLimit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SequenceScheduleRuntimeLimit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SequenceScheduleTimeoutEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SequenceScheduleTimeoutEnabled</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EnableLog</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LogOnlyOnErrorEnabled</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<Label>@SCM:LogOnlyOnErrorEnabled</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RandomizeEqualResources</Name>
			<ExtendedDataType>WrkCtrSchedulerRandomizeEqualResources</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventDim</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>InventDim</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdParametersDim</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EntityRelationshipRole>@SYS124237</EntityRelationshipRole>
			<RelatedTable>ProdParametersDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProductionParametersBySite</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ResourceParametersBySite</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>InventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>