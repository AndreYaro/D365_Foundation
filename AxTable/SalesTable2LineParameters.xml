<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTable2LineParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesTable2LineParameters extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fieldName</Name>
				<Source><![CDATA[
    display FieldLabel fieldName()
    {
        // <GEERU>
        TableId tableId;
        FieldId baseFieldId;

        tableId = SalesTable2LineParameters::getTableIdFromCombinedId(this.FieldId);

        if (tableId == tableNum(SalesTable_RU))
        {
            baseFieldId = SalesTable2LineParameters::getBaseFieldId(tableId, this.FieldId);

            if (baseFieldId == fieldNum(SalesTable_RU, InventProfileId_RU))
            {
                return "@GLS113769";
            }

            if (baseFieldId == fieldNum(SalesTable_RU, PriceAgreementDate_RU))
            {
                return "@SYS21763";
            }

            return fieldId2pname(tableNum(SalesTable), this.FieldId);
        }
        else if (tableId == tableNum(SalesTable_Intrastat))
        {
            baseFieldId = SalesTable2LineParameters::getBaseFieldId(tableId, this.FieldId);

            if (baseFieldId == fieldNum(SalesTable_Intrastat, SpecialMovement_CZ))
            {
                return "@SYS6530";
            }

            return fieldId2pname(tableNum(SalesTable), this.FieldId);
        }
        else
        {
        // </GEERU>
            if (this.FieldId == fieldNum(SalesTable, DefaultDimension))
            {
                return "@SYS14926";
            }            

            if (this.FieldId == fieldNum(SalesTable, DeliveryDate))
            {
                if (isConfigurationkeyEnabled(configurationKeyNum(SalesDeliveryDateControl)))
                {
                    return "@SYS88258";
                }
                else
                {
                    return "@SYS10178";
                }
            }

            if (this.FieldId == fieldNum(SalesTable, InventLocationId))
            {
                return "@SYS108783";
            }

            // <GEEHU>
            if (this.FieldId == fieldNum(SalesTable, IntrastatFulfillmentDate_HU))
            {
                return "@SYS6530";
            }
            // </GEEHU>

            if (this.FieldId == fieldNum(SalesTable, MpsExcludeSalesOrder))
            {
                return "@PRO2084";
            }

            return fieldId2pname(tableNum(SalesTable), this.FieldId);
        // <GEERU>
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForFieldIdListItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current record for an item from the field ID list.
    /// </summary>
    /// <param name="_fieldIdListItem">
    /// The field ID list item.
    /// </param>
    /// <remarks>
    /// This method encapsulates the contents of the field ID list.
    /// </remarks>
    public void initForFieldIdListItem(container _fieldIdListItem)
    {
        TableId tableId;
        FieldId baseFieldId;

        [tableId, baseFieldId] = _fieldIdListItem;

        this.FieldId = SalesTable2LineParameters::getCombinedFieldId(tableId, baseFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the field ID of the record based on the passed in parameters.
    /// </summary>
    /// <param name="_tableId">
    /// A table ID.
    /// </param>
    /// <param name="_fieldId">
    /// A field ID.
    /// </param>
    public void setFieldId(TableId _tableId, FieldId _fieldId)
    {
        this.FieldId = SalesTable2LineParameters::getCombinedFieldId(_tableId, _fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a <c>SalesTable2LineParameters</c> record exists for a specified field.
    /// </summary>
    /// <param name="_tableId">
    /// Field's table ID
    /// </param>
    /// <param name="_fieldId">
    /// Field ID to check.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise false.
    /// </returns>
    /// <remarks>
    /// Normally <c>_tableId</c> parameter should be <c>SalesTable</c> table ID.
    /// But it can also be any other table related to <c>SalesTable</c>. For example: <c>SalesTable_RU</c>.
    /// </remarks>
    static boolean exist(
        TableId _tableId,
        FieldId    _fieldId)
    {
        if (!_fieldId
            // <GEERU>
            || !_tableId
            // </GEERU>
            )
            return false;

        return (select firstonly RecId
                    from salesTable2LineParameters
                        where salesTable2LineParameters.FieldId ==
                            // <GEERU>
                            SalesTable2LineParameters::getCombinedFieldId(_tableId, _fieldId)
                            // </GEERU>
                            ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a specified field is enabled.
    /// </summary>
    /// <param name="_tableId">
    /// Field's table ID.
    /// </param>
    /// <param name="_fieldId">
    /// Field ID to check.
    /// </param>
    /// <returns>
    /// true if the the fiels is enabled; otherwise false.
    /// </returns>
    /// <remarks>
    /// Normally <c>_tableId</c> parameter should be <c>SalesTable</c> table ID.
    /// But it can also be any other table related to <c>SalesTable</c>. For example: <c>SalesTable_RU</c>.
    /// </remarks>
    static boolean fieldEnabled(
        TableId _tableId,
        FieldId _fieldId)
    {
        boolean                 enabled                 = true;
        // <GEERU>
        DictField               dictField               = new DictField(_tableId, _fieldId);
        // </GEERU>
        DictConfigurationKey    dictConfigurationKey    = new DictConfigurationKey(dictField.configurationKeyId());

        if (dictConfigurationKey)
            enabled = dictConfigurationKey.enabled();

        if (_tableId == tableNum(SalesTable)
            && _fieldId == fieldNum(SalesTable, OverrideSalesTax)
            && !Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Sales))
        {
            enabled = false;
        }

        return enabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static SalesTable2LineParameters find(
        TableId _tableId,
        FieldId   _fieldId,
        boolean   _update = false)
    {
        SalesTable2LineParameters   salesTable2LineParameters;

        if (_fieldId)
        {
            salesTable2LineParameters.selectForUpdate (_update);

            select firstonly salesTable2LineParameters
                where salesTable2LineParameters.FieldId ==
                    // <GEERU>
                    SalesTable2LineParameters::getCombinedFieldId(_tableId, _fieldId)
                    // </GEERU>
                    ;
        }

        return salesTable2LineParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBaseFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a table specific field ID.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID.
    /// </param>
    /// <param name="_combinedFieldId">
    /// The field ID that is a combination of the table ID and field ID.
    /// </param>
    /// <returns>
    /// A table specific field ID.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The table ID is not supported.
    /// </exception>
    public static FieldId getBaseFieldId(TableId _tableId, FieldId _combinedFieldId)
    {
        #define.FieldIdOffset_RU(1000000)
        #define.FieldIdOffset_Intrastat(2000000)

        switch (_tableId)
        {
            case tableNum(SalesTable):
                // SalesTable uses the base field ID
                return _combinedFieldId;

            case tableNum(SalesTable_RU):
                return _combinedFieldId - #FieldIdOffset_RU;

            case tableNum(SalesTable_Intrastat):
                return _combinedFieldId - #FieldIdOffset_Intrastat;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCombinedFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a field ID that is a combination of the table ID and field ID.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID.
    /// </param>
    /// <param name="_baseFieldId">
    /// The table specific field ID.
    /// </param>
    /// <returns>
    /// A field ID that is a combination of the table ID and field ID.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The table ID is not supported.
    /// </exception>
    public static FieldId getCombinedFieldId(TableId _tableId, FieldId _baseFieldId)
    {
        #define.FieldIdOffset_RU(1000000)
        #define.FieldIdOffset_Intrastat(2000000)

        switch (_tableId)
        {
            case tableNum(SalesTable):
                // SalesTable uses the base field ID
                return _baseFieldId;

            case tableNum(SalesTable_RU):
                return _baseFieldId + #FieldIdOffset_RU;

            case tableNum(SalesTable_Intrastat):
                return _baseFieldId + #FieldIdOffset_Intrastat;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableIdFromCombinedId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field ID from the combined field ID.
    /// </summary>
    /// <param name="_combinedFieldId">
    /// A field ID that is a combination of a table ID and a field ID.
    /// </param>
    /// <returns>
    /// A table ID.
    /// </returns>
    public static TableId getTableIdFromCombinedId(FieldId _combinedFieldId)
    {
        #define.FieldIdOffset_RU(1000000)
        #define.FieldIdOffset_Intrastat(2000000)

        if (_combinedFieldId > #FieldIdOffset_Intrastat)
        {
            return tableNum(SalesTable_Intrastat);
        }
        else if (_combinedFieldId > #FieldIdOffset_RU)
        {
            return tableNum(SalesTable_RU);
        }
        else
        {
            return tableNum(SalesTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>header2LineFieldIdList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a container of table ID and field ID pairs in a container.
    /// </summary>
    /// <returns>
    /// A container of table ID and field ID pairs in a container.
    /// </returns>
    /// <remarks>
    /// The outer container has zero or more containers. The inner containers each
    /// have a table ID and a field ID.
    /// </remarks>
    static container header2LineFieldIdList()
    {
        container                  fList;
        LogisticsCountryRegionCode countryInfo = SysCountryRegionCode::countryInfo();
        DictTable                  dictTable = new DictTable(tableNum(SalesTable));

        // <GIN>
        #ISOCountryRegionCodes
        // </GIN>

        int i,h;
        for (i=1;i<=dictTable.fieldGroupCnt();i++)
        {
            if (dictTable.fieldGroup(i) == tableFieldgroupStr(SalesTable, HeaderToLineUpdate))
            {
                DictFieldGroup dictFieldGroup = new DictFieldGroup(tableNum(SalesTable),dictTable.fieldGroup(i));

                if (dictFieldGroup)
                {
                    for (h=1;h<=dictFieldGroup.numberOfFields();h++)
                    {
                        SysDictField sysDictField = new SysDictField(tableNum(SalesTable), dictFieldGroup.field(h));

                        if (sysDictField)
                        {
                            // <GIN>
                            if (countryInfo == #isoIN && (sysDictField.getCountryRegionCodes() == [#isoIN]))
                            {
                                if ((sysDictField.id() == fieldNum(SalesTable, tdsGroup_IN) && !TaxWithholdParameters_IN::find().tdsActivate))
                                {
                                    continue;
                                }
                                else if ((sysDictField.id() == fieldNum(SalesTable, tcsGroup_IN) && !TaxWithholdParameters_IN::find().tcsActivate))
                                {
                                    continue;
                                }
                            }
                            else if (sysDictField.getCountryRegionCodes() == [#isoIN])
                            {
                                continue;
                            }
                            // </GIN>

                            //Exclude any field that has country context yet not in the current country context
                            if (conLen(sysDictField.getCountryRegionCodes())!= 0 && ! conFind(sysDictField.getCountryRegionCodes(), countryInfo))
                            {
                                continue;
                            }

                            if (sysDictField.getFeatureClassName())
                            {
                                Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.Implementation.IFeature featureInstance = DictClass::createObject(sysDictField.getFeatureClassName()) as Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.Implementation.IFeature;

                                if (featureInstance != null)
                                {
                                    if (!FeatureStateProvider::isFeatureEnabled(featureInstance))
                                    {
                                        continue;
                                    }
                                }
                            }

                            // <GEERU><GEECZ>
                            fList += [[dictTable.id(), sysDictField.id()]];
                            // </GEECZ></GEERU>
                        }
                    }
                }
            }
        }

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            dictTable = new DictTable(tableNum(SalesTable_RU));

            for (i = 1; i <= dictTable.fieldGroupCnt(); i++)
            {
                if (dictTable.fieldGroup(i) == tableFieldgroupStr(SalesTable_RU, HeaderToLineUpdate))
                {
                    DictFieldGroup dictFieldGroup = new DictFieldGroup(dictTable.id(), dictTable.fieldGroup(i));

                    if (dictFieldGroup)
                    {
                        for (h = 1; h <= dictFieldGroup.numberOfFields(); h++)
                        {
                            SysDictField sysDictField = new SysDictField(dictTable.id(), dictFieldGroup.field(h));

                            if (sysDictField)
                            {
                                fList += [[dictTable.id(), sysDictField.id()]];
                            }
                        }
                    }
                }
            }
        }
        // </GEERU>

        // <GEECZ>
        if (SysExtensionSerializerExtensionMap::isExtensionEnabled(tableNum(SalesTable_Intrastat)))
        {
            dictTable = new DictTable(tableNum(SalesTable_Intrastat));

            for (i = 1; i <= dictTable.fieldGroupCnt(); i++)
            {
                if (dictTable.fieldGroup(i) == tableFieldgroupStr(SalesTable_Intrastat, HeaderToLineUpdate))
                {
                    DictFieldGroup dictFieldGroup = new DictFieldGroup(dictTable.id(), dictTable.fieldGroup(i));

                    if (dictFieldGroup)
                    {
                        for (h = 1; h <= dictFieldGroup.numberOfFields(); h++)
                        {
                            SysDictField sysDictField = new SysDictField(dictTable.id(), dictFieldGroup.field(h));

                            if (sysDictField)
                            {
                                fList += [[dictTable.id(), sysDictField.id()]];
                            }
                        }
                    }
                }
            }
        }
        // </GEECZ>

        return fList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiate</Name>
				<Source><![CDATA[
    static void initiate()
    {
        SalesTable2LineParameters   salesTable2LineParameters;
        container                   header2LineFieldIds;
        int                         pos = 1;

        header2LineFieldIds = SalesTable2LineParameters::header2LineFieldIdList();

        ttsbegin;

        while (pos <= conLen(header2LineFieldIds))
        {
            salesTable2LineParameters.clear();
            salesTable2LineParameters.initValue();
            // <GEERU>
            salesTable2LineParameters.initForFieldIdListItem(conPeek(header2LineFieldIds, pos));
            // </GEERU>

            if (!SalesTable2LineParameters::initiated(salesTable2LineParameters.FieldId))
            {
                salesTable2LineParameters.Table2LineUpdate = TradeTable2LineUpdate::Prompt;
                salesTable2LineParameters.insert();
            }

            pos++;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiated</Name>
				<Source><![CDATA[
    static boolean initiated(FieldId _fieldId = 0)
    {
        SalesTable2LineParameters salesTable2LineParameters;

        select firstonly RecId from salesTable2LineParameters
            where salesTable2LineParameters.FieldId == _fieldId;

        return salesTable2LineParameters.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124533</DeveloperDocumentation>
	<Label>@SYS62919</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>FieldId</TitleField1>
	<TitleField2>Table2LineUpdate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>SalesTable2LineParametersIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>SalesTable2LineParametersIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Table2LineUpdate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FieldId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Update</Name>
			<Label>@SYS2934</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Table2LineUpdate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FieldId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FieldId</ExtendedDataType>
			<RelatedTable>SalesTable</RelatedTable>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Table2LineUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TradeTable2LineUpdate</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SalesTable2LineParametersIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>FieldId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SalesPurchTableToLineParameters</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>FieldId</MapField>
					<MapFieldTo>FieldId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Table2LineUpdate</MapField>
					<MapFieldTo>Table2LineUpdate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>RelationFieldId</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>SqlDictionary</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>FieldId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FieldId</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FieldId</Name>
					<Field>FieldId</Field>
					<RelatedField>fieldId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>