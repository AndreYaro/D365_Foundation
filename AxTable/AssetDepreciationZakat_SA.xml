<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepreciationZakat_SA</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetDepreciationZakat_SA extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentYrGrpValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the summary of the group value end of current year.
    /// </summary>
    /// <returns>
    /// The summary of the group value end of current year.
    /// </returns>
    display AmountMST currentYrGrpValue()
    {
        AssetDepreciationZakat_SA assetDepreciation;

        select sum(CurrentYrGroupValue)
            from assetDepreciation
                where assetDepreciation.Year == this.Year;

        return assetDepreciation.CurrentYrGroupValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCurrentYrGrpBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the summary of the group balance end of current year.
    /// </summary>
    /// <returns>
    /// The summary of the group balance end of current year.
    /// </returns>
    display AmountMST displayCurrentYrGrpBalance()
    {
        AssetDepreciationZakat_SA assetDepreciation;

        select sum(CurrentYrGroupBalance)
            from assetDepreciation
                where assetDepreciation.Year == this.Year;

        return assetDepreciation.CurrentYrGroupBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDepreciationValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the summary of the depreciation value.
    /// </summary>
    /// <returns>
    /// The summary of the depreciation value.
    /// </returns>
    display AmountMST displayDepreciationValue()
    {
        AssetDepreciationZakat_SA assetDepreciation;

        select sum(DepreciationValue)
            from assetDepreciation
                where assetDepreciation.Year == this.Year;

        return assetDepreciation.DepreciationValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayHalfPreviousYrCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the half of total summary cost of additions within current and previous year.
    /// </summary>
    /// <returns>
    /// The half of total summary cost of additions within current and previous year.
    /// </returns>
    display AmountMST displayHalfPreviousYrCost()
    {
        AssetDepreciationZakat_SA assetDepreciation;

        select sum(PreviousYrCost)
            from assetDepreciation
                where assetDepreciation.Year == this.Year;

        return (assetDepreciation.PreviousYrCost / 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayHalfTotalCompensations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the half of total summary compensations within current and previous year.
    /// </summary>
    /// <returns>
    /// The half of total summary compensations within current and previous year.
    /// </returns>
    display AmountMST displayHalfTotalCompensations()
    {
        AssetDepreciationZakat_SA assetDepreciation;

        select sum(TotalCompensations)
            from assetDepreciation
                where assetDepreciation.Year == this.Year;

        return (assetDepreciation.TotalCompensations / 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayMaintenanceExpenses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the summary of the maintenance expenses value.
    /// </summary>
    /// <returns>
    /// The summary of the maintenance expenses value.
    /// </returns>
    display AmountMST displayMaintenanceExpenses()
    {
        AssetDepreciationZakat_SA assetDepreciation;

        select sum(MaintenanceExpenses)
            from assetDepreciation
                where assetDepreciation.Year == this.Year;

        return assetDepreciation.MaintenanceExpenses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPreviousYrCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the summary of the total cost of additions within current and previous year.
    /// </summary>
    /// <returns>
    /// The summary of the total cost of additions within current and previous year.
    /// </returns>
    display AmountMST displayPreviousYrCost()
    {
        AssetDepreciationZakat_SA assetDepreciation;

        select sum(PreviousYrCost)
            from assetDepreciation
                where assetDepreciation.Year == this.Year;

        return assetDepreciation.PreviousYrCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPreviousYrGrpValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the summary of the group value end of previous year.
    /// </summary>
    /// <returns>
    /// The summary of the group value end of previous year.
    /// </returns>
    display AmountMST displayPreviousYrGrpValue()
    {
        AssetDepreciationZakat_SA assetDepreciation;

        select sum(PreviousYrGrpValue)
            from assetDepreciation
                where assetDepreciation.Year == this.Year;

        return assetDepreciation.PreviousYrGrpValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTotalCompensations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the total summary compensations within current and previous year.
    /// </summary>
    /// <returns>
    /// The total summary compensations within current and previous year.
    /// </returns>
    display AmountMST displayTotalCompensations()
    {
        AssetDepreciationZakat_SA assetDepreciation;

        select sum(TotalCompensations)
            from assetDepreciation
                where assetDepreciation.Year == this.Year;

        return assetDepreciation.TotalCompensations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>grpValueEndofYr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the summary of the group value end of year.
    /// </summary>
    /// <returns>
    /// The summary of the group value end of year.
    /// </returns>
    display AmountMST grpValueEndofYr()
    {
        AssetDepreciationZakat_SA assetDepreciation;

        select sum(GroupValueEndofYr)
            from assetDepreciation
                where assetDepreciation.Year == this.Year;

        return assetDepreciation.GroupValueEndofYr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>halfPreviousYrCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the half of the total cost of additions within current and previous year.
    /// </summary>
    /// <returns>
    /// The half of the total cost of additions within current and previous year
    /// </returns>
    display AmountMST halfPreviousYrCost()
    {
        return (this.PreviousYrCost / 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>halfTotalCompensations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the half of the total compensations within current and previous year.
    /// </summary>
    /// <returns>
    /// The half of the total compensations within current and previous year.
    /// </returns>
    display AmountMST halfTotalCompensations()
    {
        return (this.TotalCompensations / 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs any necessary logic when a field changes.
    /// </summary>
    /// <param name="_fieldId">
    /// The field that changed.
    /// </param>
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(AssetDepreciationZakat_SA, PreviousYrGrpValue) :
                this.GroupValueEndofYr  = this.PreviousYrGrpValue
                                          + (this.PreviousYrCost / 2)
                                          - (this.TotalCompensations / 2);
                break;

            case fieldNum(AssetDepreciationZakat_SA, PreviousYrCost) :
                this.GroupValueEndofYr      = this.PreviousYrGrpValue
                                              + (this.PreviousYrCost / 2)
                                              - (this.TotalCompensations / 2);
                break;

            case fieldNum(AssetDepreciationZakat_SA, TotalCompensations) :
                this.GroupValueEndofYr          = this.PreviousYrGrpValue
                                                  + (this.PreviousYrCost / 2)
                                                  - (this.TotalCompensations / 2);
                break;

            case fieldNum(AssetDepreciationZakat_SA, DepreciationRatio) :
                this.DepreciationValue      = (this.GroupValueEndofYr * this.DepreciationRatio)/100 ;
                this.CurrentYrGroupValue    = this.GroupValueEndofYr  - this.DepreciationValue;
                this.CurrentYrGroupBalance  = this.CurrentYrGroupValue + this.MaintenanceExpenses;
                break;

            case fieldNum(AssetDepreciationZakat_SA, MaintenanceExpenses) :
                this.CurrentYrGroupBalance = this.CurrentYrGroupValue + this.MaintenanceExpenses;
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDepreciationdiff</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates depreciation difference value of transaction in specify year.
    /// </summary>
    /// <param name="_year">
    /// The year of transaction.
    /// </param>
    public static void calcDepreciationdiff(LedgerFiscalYearZakat_SA _year)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceSA00004, funcName());

        AssetDepreciationZakat_SA   assetDepreciation;
        AmountCur                   depreciationDifference;

        select firstonly @Year, DepreciationAsPerBooks, RecId from assetDepreciation
            where assetDepreciation.Year == _year;

        if (assetDepreciation.RecId)
        {
            depreciationDifference = assetDepreciation.displayDepreciationValue()
                                     - assetDepreciation.DepreciationAsPerBooks;
        }

        ttsbegin;
        update_recordset assetDepreciation
            setting DepreciationDifference = depreciationDifference
                where assetDepreciation.Year == _year;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
        public static boolean checkExist(
        RefRecId                    _assetGroupZakatRecId,
        LedgerFiscalYearZakat_SA    _year)
    {
        boolean ret = true;

        if (! AssetDepreciationZakat_SA::exist(_assetGroupZakatRecId, _year))
        {
            ret = checkFailed(strFmt(AssetDepreciationZakat_SA::txtNotExist(), _assetGroupZakatRecId, _year));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the table.
    /// </summary>
    /// <param name="_assetGroupZakatRecId">
    /// The record ID of the related <c>AssetGroup</c> table record.
    /// </param>
    /// <param name="_year">
    /// The year of transaction.
    /// </param>
    /// <returns>
    /// true if the rule exits; otherwise, false.
    /// </returns>
    public static boolean exist(
        RefRecId                    _assetGroupZakatRecId,
        LedgerFiscalYearZakat_SA    _year)
    {
        return (_assetGroupZakatRecId
            && _year
            && (select firstonly RecId
                    from assetDepreciationZakat_SA
                        where assetDepreciationZakat_SA.AssetGroup == _assetGroupZakatRecId
                           && assetDepreciationZakat_SA.Year       == _year).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in <c>AssetDepreciationZakat_SA</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>AssetDepreciationZakat_SA</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>AssetDepreciationZakat_SA</c> table; otherwise, an empty record.
    /// </returns>
    public static AssetDepreciationZakat_SA find(
        recId               _recId,
        boolean             _forUpdate        = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetDepreciationZakat_SA assetDepreciation;

        assetDepreciation.selectForUpdate(_forUpdate);
        if (_forUpdate
            && _concurrencyModel != ConcurrencyModel::Auto)
        {
            assetDepreciation.concurrencyModel(_concurrencyModel);
        }

        select firstonly assetDepreciation
            where assetDepreciation.RecId == _recId;

        return assetDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAssetGroupsYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the primary <c>AssetDepreciationZakat_SA</c> record for a asset group in specified year.
    /// </summary>
    /// <param name="_assetGroupZakatRecId">
    /// The record ID of the related <c>AssetGroup</c> table record.
    /// </param>
    /// <param name="_year">
    /// The year of transaction.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>AssetDepreciationZakat_SA</c> table; otherwise, an empty record.
    /// </returns>
    public static AssetDepreciationZakat_SA findByAssetGroupsYear(
        RefRecId                    _assetGroupZakatRecId,
        LedgerFiscalYearZakat_SA    _year,
        boolean                     _forUpdate        = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetDepreciationZakat_SA assetDepreciation;

        if (_assetGroupZakatRecId && _year)
        {
            assetDepreciation.selectForUpdate(_forUpdate);
            if (_forUpdate
                && _concurrencyModel != ConcurrencyModel::Auto)
            {
                assetDepreciation.concurrencyModel(_concurrencyModel);
            }

            select firstonly assetDepreciation
                where assetDepreciation.AssetGroup == _assetGroupZakatRecId
                   && assetDepreciation.Year       == _year;
        }

        return assetDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "@SYS322392";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDepreciationBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the depreciation as per books of <c>AssetDepreciationZakat_SA</c> table in specified year .
    /// </summary>
    /// <param name="_fiscalYear">
    /// The year of transaction.
    /// </param>
    public static void updateDepreciationBook(LedgerFiscalYearZakat_SA _fiscalYear)
    {
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        GeneralJournalAccountEntryZakat_SA  generalJournalAccountEntryZakat;
        AssetDepreciationZakat_SA           assetDepreciationZakat;
        LedgerItemCodeZakat_SA              ledgerItemCodeZakat;

        select sum(TransactionCurrencyAmount) from generalJournalAccountEntry
            join GeneralJournalAccountEntry from generalJournalAccountEntryZakat
                where generalJournalAccountEntryZakat.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                   && generalJournalAccountEntryZakat.FiscalYr                   == _fiscalYear
            join ItemType from ledgerItemCodeZakat
                where ledgerItemCodeZakat.ItemCode   == generalJournalAccountEntryZakat.ItemCode
                   && ledgerItemCodeZakat.ItemType   == LedgerItemTypeZakat_SA::Depreciation;

        if (generalJournalAccountEntry.TransactionCurrencyAmount)
        {
            update_recordset assetDepreciationZakat
                setting DepreciationAsPerBooks = generalJournalAccountEntry.TransactionCurrencyAmount
                where assetDepreciationZakat.Year == _fiscalYear;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDepreciationDiff</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates DepreciationValue, CurrentYrGroupValue and CurrentYrGroupBalance of
    /// <c>AssetDepreciationZakat_SA</c> table in specified year.
    /// </summary>
    /// <param name="_year">
    /// The year of transaction.
    /// </param>
    public static void updateDepreciationDiff(LedgerFiscalYearZakat_SA _year)
    {
        AssetDepreciationZakat_SA assetDepreciation;

        ttsbegin;
        while select forupdate assetDepreciation
            where assetDepreciation.Year == _year
        {
            assetDepreciation.DepreciationValue     = (assetDepreciation.GroupValueEndofYr
                                                        * assetDepreciation.DepreciationRatio)/100;
            assetDepreciation.CurrentYrGroupValue   = assetDepreciation.GroupValueEndofYr
                                                        - assetDepreciation.DepreciationValue;
            assetDepreciation.CurrentYrGroupBalance = assetDepreciation.CurrentYrGroupValue
                                                        + assetDepreciation.MaintenanceExpenses;
            assetDepreciation.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>SA</CountryRegionCodes>
	<DeveloperDocumentation>@FixedAssets:FA_MessageDeveloper_AssetDepreciationZakat_SA</DeveloperDocumentation>
	<Label>@SYS321538</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>AssetGroup</TitleField1>
	<TitleField2>Year</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>AssetGroupsYearIdx</ClusteredIndex>
	<Modules>FixedAssets</Modules>
	<ReplacementKey>AssetGroupsYearIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DepreciationAsPerBooks</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepreciationDifference</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Year</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AssetsAndDepreciation</Name>
			<Label>@SYS179429</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PreviousYrGrpValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PreviousYrCost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalCompensations</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupValueEndofYr</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepreciationRatio</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepreciationValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrentYrGroupValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaintenanceExpenses</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrentYrGroupBalance</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Depreciation</Name>
			<Label>@SYS321606</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DepreciationAsPerBooks</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepreciationDifference</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalYear</Name>
			<Label>@SYS13292</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Year</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AssetGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS321566</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CurrentYrGroupBalance</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS321561</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CurrentYrGroupValue</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS321557</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DepreciationAsPerBooks</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS321605</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DepreciationDifference</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS321606</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DepreciationRatio</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Label>@SYS321553</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DepreciationValue</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS321555</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>GroupValueEndofYr</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS321550</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaintenanceExpenses</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS321559</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PreviousYrCost</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS321542</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PreviousYrGrpValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS321539</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerPeriodStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalCompensations</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS321546</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Year</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerFiscalYearZakat_SA</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AssetGroupsYearIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Year</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AssetGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetGroupZakat</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetGroupZakat_SA</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>AssetGroupZakat_SA</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>AssetDepreciationZakat_SA</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetGroup</Name>
					<Field>AssetGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>