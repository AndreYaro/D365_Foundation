<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSItemSamplingTracking</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSItemSamplingTracking extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateNumberOfTrackedLicensePlates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of tracked license plates.
    /// </summary>
    /// <param name = "_referenceType">Reference of the related source document</param>
    /// <param name = "_qualityAssociationRecId">Test association reference ID</param>
    /// <returns>Number of tracked license plates</returns>
    [Hookable(false)]
    internal static WHSNumberOfLicensePlates calculateNumberOfTrackedLicensePlates(
        InventQualityReferenceType      _referenceType,
        InventTestAssociationTableRecId _qualityAssociationRecId)
    {
        InventTestAssociationTable inventTestAssociationTable = InventTestAssociationTable::find(_qualityAssociationRecId);
        InventItemSampling itemSampling = InventItemSampling::find(inventTestAssociationTable.ItemSamplingId);

        WHSItemSamplingTracking			itemSampleTracking;
        InventDim                       inventDim;
        WHSLicensePlate                 licensePlate;

        switch (itemSampling.SamplingScope)
        {
            case WHSQualityManagementSamplingScope::OrderNumber:
                select count(RecId) from licensePlate
                    exists join inventDim
                        where inventDim.LicensePlateId == licenseplate.LicensePlateId
                        exists join itemSampleTracking
                            where itemSampleTracking.InventDimId == inventDim.inventDimId
                                && itemSampleTracking.InventTestAssociationTable == _qualityAssociationRecId
                                && itemSampleTracking.OrderNum == _referenceType.inventRefId()
                                && (!itemSampling.CountByItem
                                    || itemSampleTracking.InventTransId == _referenceType.inventTransId());
                break;
    
            case WHSQualityManagementSamplingScope::Load:
                select count(RecId) from licensePlate
                    exists join inventDim
                        where inventDim.LicensePlateId == licenseplate.LicensePlateId
                        exists join itemSampleTracking
                            where itemSampleTracking.InventDimId == inventDim.inventDimId
                                && itemSampleTracking.InventTestAssociationTable == _qualityAssociationRecId
                                && itemSampleTracking.OrderNum == _referenceType.inventRefId()
                                && itemSampleTracking.LoadId == _referenceType.loadId()
                                && (!itemSampling.CountByItem
                                    || itemSampleTracking.InventTransId == _referenceType.inventTransId());
                break;
    
            case WHSQualityManagementSamplingScope::Shipment:
                select count(RecId) from licensePlate
                    exists join inventDim
                        where inventDim.LicensePlateId == licenseplate.LicensePlateId
                        exists join itemSampleTracking
                            where itemSampleTracking.InventDimId == inventDim.inventDimId
                                && itemSampleTracking.InventTestAssociationTable ==_qualityAssociationRecId
                                && itemSampleTracking.OrderNum == _referenceType.inventRefId()
                                && itemSampleTracking.ShipmentId == _referenceType.shipmentId()
                                && (!itemSampling.CountByItem
                                    || itemSampleTracking.InventTransId == _referenceType.inventTransId());
                break;
    
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        return int642int(licensePlate.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackItemSampledQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the tracking record for the qty being item sampled.
    /// </summary>
    /// <param name = "_referenceType">The <c>InventQualityReferenceType</c> to use.</param>
    /// <param name = "_qualityAssociationRecId">The test association reference ID to use.</param>
    /// <param name = "_inventDimId">The <c>InventDimId</c> to use.</param>
    /// <param name = "_qty">The <c>InventQualityOrderQty</c> to use.</param>
    [Hookable(false)]
    internal static void trackItemSampledQty(
        InventQualityReferenceType      _referenceType,
        InventTestAssociationTableRecId _qualityAssociationRecId,
        InventDimId                     _inventDimId,
        InventQualityOrderQty           _qty)
    {
        WHSItemSamplingTracking   itemSamplingTracking;
    
        ttsbegin;
    
        if (!WHSItemSamplingTracking::exists(_qualityAssociationRecId, _referenceType.inventTransId(), _referenceType.inventRefId(), _referenceType.loadId(), _referenceType.shipmentId(), _inventDimId))
        {
            itemSamplingTracking.initFromReferenceType(_referenceType);
            itemSamplingTracking.QualityOrderQty = _qty;
            itemSamplingTracking.InventTestAssociationTable = _qualityAssociationRecId;
            itemSamplingTracking.InventDimId = _inventDimId;
    
            itemSamplingTracking.insert();
        }
        else
        {
            select firstOnly forUpdate itemSamplingTracking
                where itemSamplingTracking.InventTestAssociationTable == _qualityAssociationRecId
                    && itemSamplingTracking.InventTransId             == _referenceType.inventTransId()
                    && itemSamplingTracking.OrderNum                  == _referenceType.inventRefId()
                    && itemSamplingTracking.LoadId                    == _referenceType.loadId()
                    && itemSamplingTracking.ShipmentId                == _referenceType.shipmentId()
                    && itemSamplingTracking.InventDimId               == _inventDimId;
    
            itemSamplingTracking.QualityOrderQty += _qty;
    
            itemSamplingTracking.update();
        }
    
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromReferenceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the record based on a <c>InventQualityReferenceType</c>.
    /// </summary>
    /// <param name = "_referenceType">The <c>InventQualityReferenceType</c> to use when initializing</param>
    [Hookable(false)]
    internal void initFromReferenceType(InventQualityReferenceType _referenceType)
    {
        this.InventTransId              = _referenceType.inventTransId();
        this.OrderNum					= _referenceType.inventRefId();
        this.InventTestReferenceType	= _referenceType.referenceType();
        this.LoadId						= _referenceType.loadId();
        this.ShipmentId					= _referenceType.shipmentId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see whether or not the record exists.
    /// </summary>
    /// <param name = "_qualityAssociationRecId">The test association reference ID to search for.</param>
    /// <param name = "_inventTransId">The <c>InventTransId</c> to search for.</param>
    /// <param name = "_orderNum">The <c>WHSOrderNum</c> to search for.</param>
    /// <param name = "_loadId">The <c>WHSLoadId</c> to search for.</param>
    /// <param name = "_shipmentId">The <c>WHSShipmentId</c> to search for.</param>
    /// <param name = "_inventDimId">The <c>InventDimId</c> to search for.</param>
    /// <returns>true if the record exists; false otherwise.</returns>
    [Hookable(false)]
    internal static boolean exists(
        InventTestAssociationTableRecId _qualityAssociationRecId,
        InventTransId                   _inventTransId,
        WHSOrderNum                     _orderNum,
        WHSLoadId                       _loadId,
        WHSShipmentId                   _shipmentId,
        InventDimId                     _inventDimId)
    {
        return (_qualityAssociationRecId)
                && (select firstOnly RecId from WHSItemSamplingTracking
                        where WHSItemSamplingTracking.InventTestAssociationTable == _qualityAssociationRecId
                            && WHSItemSamplingTracking.InventTransId == _inventTransId
                            && WHSItemSamplingTracking.OrderNum == _orderNum
                            && WHSItemSamplingTracking.LoadId == _loadId
                            && WHSItemSamplingTracking.ShipmentId == _shipmentId
                            && WHSItemSamplingTracking.InventDimId == _inventDimid).RecId > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrackingPlaceHolder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a tracking record placeholder for the transaction. This is needed for tracking number of LPs.
    /// </summary>
    /// <param name = "_referenceType">The <c>InventQualityReferenceType</c>.</param>
    /// <param name = "_qualityAssociationRecId">The test association reference ID.</param>
    /// <param name = "_inventDimId">The <c>InventDimId</c>.</param>
    [Hookable(false)]
    internal static void createTrackingPlaceHolder(
        InventQualityReferenceType      _referenceType,
        InventTestAssociationTableRecId _qualityAssociationRecId,
        InventDimId                     _inventDimId)
    {
        if (!WHSItemSamplingTracking::exists(_qualityAssociationRecId, _referenceType.inventTransId(), _referenceType.inventRefId(), _referenceType.loadId(), _referenceType.shipmentId(), _inventDimId))
        {
            ttsbegin;

            WHSItemSamplingTracking   itemSamplingTracking;
    
            itemSamplingTracking.initFromReferenceType(_referenceType);
            itemSamplingTracking.InventTestAssociationTable = _qualityAssociationRecId;
            itemSamplingTracking.InventDimId                = _inventDimId;
    
            itemSamplingTracking.insert();
    
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQuantityAlreadySampled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity that has been sampled for a specified inventory dimension.
    /// </summary>
    /// <param name = "_referenceType">Reference of the related source document</param>
    /// <param name = "_qualityAssociationRecId">The test association reference ID</param>
    /// <param name = "_inventDImId">Inventory dimension</param>
    /// <returns>Quantity sampled for a specified inventory dimension</returns>
    [Hookable(false)]
    internal static InventQualityOrderQty calculateQuantityAlreadySampled(
        InventQualityReferenceType      _referenceType,
        InventTestAssociationTableRecId _qualityAssociationRecId,
        InventDimId                     _inventDImId)
    {
        InventTestAssociationTable inventTestAssociationTable = InventTestAssociationTable::find(_qualityAssociationRecId);
        InventItemSampling itemSampling = InventItemSampling::find(inventTestAssociationTable.ItemSamplingId);
    
        WHSItemSamplingTracking		itemSampleTracking;

        switch (itemSampling.SamplingScope)
        {
            case WHSQualityManagementSamplingScope::OrderNumber:
                select firstOnly QualityOrderQty from itemSampleTracking
                    where itemSampleTracking.InventDimId == _inventDimId
                        && itemSampleTracking.InventTestAssociationTable == _qualityAssociationRecId
                        && itemSampleTracking.OrderNum == _referenceType.inventRefId()
                        && itemSampleTracking.InventTransId == _referenceType.inventTransId();
                break;
    
            case WHSQualityManagementSamplingScope::Load:
                select firstOnly QualityOrderQty from itemSampleTracking
                    where itemSampleTracking.InventDimId == _inventDimId
                        && itemSampleTracking.InventTestAssociationTable == _qualityAssociationRecId
                        && itemSampleTracking.OrderNum == _referenceType.inventRefId()
                        && itemSampleTracking.LoadId == _referenceType.loadId()
                        && itemSampleTracking.InventTransId == _referenceType.inventTransId();
                break;
    
            case WHSQualityManagementSamplingScope::Shipment:
                select firstOnly QualityOrderQty from itemSampleTracking
                    where itemSampleTracking.InventDimId == _inventDimId
                        && itemSampleTracking.InventTestAssociationTable == _qualityAssociationRecId
                        && itemSampleTracking.OrderNum == _referenceType.inventRefId()
                        && itemSampleTracking.ShipmentId == _referenceType.shipmentId()
                        && itemSampleTracking.InventTransId == _referenceType.inventTransId();
                break;
    
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        return itemSampleTracking.QualityOrderQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:ItemSamplingTrackingDeveloperDocumentation</DeveloperDocumentation>
	<Label>@WAX:SamplingTracking</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Main</TableGroup>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>WHSTransIdAssociationRecIdOrderLoadShipDimIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QualityOrderQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQualityOrderQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventTestReferenceType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventTestReferenceType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>OII</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LoadId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOrderNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipmentId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSShipmentId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InventTestAssociationTable</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTestAssociationTableRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WHSTransIdAssociationRecIdOrderLoadShipDimIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTestAssociationTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OrderNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LoadId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ShipmentId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventDimIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLoadTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSLoadTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LoadId</Name>
					<Field>LoadId</Field>
					<RelatedField>LoadId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSShipmentTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSShipmentTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShipmentId</Name>
					<Field>ShipmentId</Field>
					<RelatedField>ShipmentId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTestAssociationTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTestAssociationTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTestAssociationTable</Name>
					<Field>InventTestAssociationTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>