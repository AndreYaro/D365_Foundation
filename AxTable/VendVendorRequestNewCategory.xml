<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendVendorRequestNewCategory</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendVendorRequestNewCategory extends VendVendorRequest
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the vendor request can be submitted by the user.
    /// </summary>
    /// <param name="_workflowType">
    /// The name of the workflow template.
    /// </param>
    /// <returns>
    /// True if the workflow can be submitted by the user; otherwise, false.
    /// </returns>
    public boolean canSubmitToWorkflow(str _workflowType = '')
    {
        return (this.RequestStatus == VendVendorRequestStatus::Draft || this.RequestStatus == VendVendorRequestStatus::WorkflowCanceled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>requestorName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the employee name of the user who requested a new category.
    /// </summary>
    /// <returns>
    /// The name of the employee who requested for the new category.
    /// </returns>
    public display VendVendorRequestRequestorName requestorName()
    {
        // CreatedBy isn't populated until the record is inserted
        userId createByUserId = this.CreatedBy != '' ? this.CreatedBy : curUserId();

        return DirPerson::find(DirPersonUser::find(createByUserId).PersonParty).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether there is at least one document attached to the vendor request.
    /// </summary>
    /// <returns>
    /// True if the vendor request has documents; otherwise, false.
    /// </returns>
    public display VendVendorRequestHasDocuments hasDocuments()
    {
        DocuRef docuRef;

        select firstonly RecId from docuRef
            where docuRef.RefCompanyId == this.DataAreaId
                && (docuRef.RefTableId == this.TableId 
                    || docuRef.RefTableId == tableNum(VendVendorRequest))
                && docuRef.RefRecId == this.RecId;

        return docuRef.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>requestTypeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the classification type of the vendor request, regardless of the subtype of the <c>VendRequest</c> table.
    /// </summary>
    /// <returns>
    /// An enumeration value that represents the classification type.
    /// </returns>
    public display VendRequestInstanceEntityType requestTypeName()
    {
        VendRequestInstanceEntityType entityType;

        return entityType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPendingReview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the status of the vendor request to pending reviewed.
    /// </summary>
    public void setPendingReview()
    {
        this.VendRequestWorkflowState = VendRequestWorkflowState::PendingCompletion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReviewed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the status of the vendor request to reviewed.
    /// </summary>
    public void setReviewed()
    {
        this.VendRequestWorkflowState = VendRequestWorkflowState::Complete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showVendorName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the vendor name for account number on a record.
    /// </summary>
    /// <returns>
    /// A string that represents a vendor name.
    /// </returns>
    public display VendRequestVendorName showVendorName()
    {
        Name ret = '';

        if (this.AccountNum)
        {
            ret = VendTable::find(this.AccountNum).name();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        return ret && this.VendRequestWorkflowState == VendRequestWorkflowState::NotSubmitted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels a workflow.
    /// </summary>
    /// <remarks>
    /// This is an abstract method.
    /// </remarks>
    public void workflowCancel()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCategoriesFromRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>VendCateory</c> table from a <c>VendRequestNewCategory</c> record of a vendor request.
    /// </summary>
    /// <param name="_vendRequestRecId">
    /// The record ID of a <c>VendRequest</c> record.
    /// </param>
    /// <remarks>
    /// Called when a vendor request with categories is approved through the workflow framework.
    /// </remarks>
    public static void addCategoriesFromRequest(VendRequestRecId _vendRequestRecId)
    {
        VendRequestNewCategory vendRequestCategory;
        VendProcurementCategoryStatus vendProcurementCategoryStatus;
        VendVendorRequestNewCategory vendRequest;
        VendCategory vendCategory;

        if (_vendRequestRecId)
        {
            select AccountNum, RecId
                from vendRequest
                where vendRequest.RecId == _vendRequestRecId;

            if (vendRequest.RecId)
            {
                while select Category, ValidFrom, ValidTo from vendRequestCategory
                    where vendRequestCategory.VendRequest == _vendRequestRecId
                {
                    if  (!VendCategory::exist(vendRequest.AccountNum,vendRequestCategory.Category,vendRequestCategory.DataAreaId))
                    {
                        vendCategory.Category = vendRequestCategory.Category;
                        vendCategory.VendorAccount = vendRequest.AccountNum;
                        vendCategory.VendorDataArea = vendRequest.DataAreaId;
                        vendCategory.insert();
                    }

                    vendProcurementCategoryStatus = VendProcurementCategoryStatus::findVendorCategoryAsOfDate(vendCategory.RecId,
                        DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),
                        true);

                    if (vendProcurementCategoryStatus)
                    {
                        vendProcurementCategoryStatus.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);

                        ttsbegin;
                        vendProcurementCategoryStatus.ValidFrom = vendRequestCategory.ValidFrom;
                        vendProcurementCategoryStatus.ValidTo = vendRequestCategory.ValidTo;
                        vendProcurementCategoryStatus.update();
                        ttscommit;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkHasCategories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the category request has at least one category.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the vendor request item to check.
    /// </param>
    /// <returns>
    /// True if request can be approved; otherwise false.
    /// </returns>
    public static boolean checkHasCategories(RecId _recId)
    {
        VendRequestNewCategory vendRequestCategory;
        boolean ret = true;

        // Check that at least one category is present
        select firstonly RecId from vendRequestCategory
            where vendRequestCategory.VendRequest == _recId;

        if  (!vendRequestCategory.RecId)
        {
            // At least one category has to be present to approve the request
            ret = checkFailed("@SYS342697");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>VendVendorRequestNewCategory</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>VendVendorRequestNewCategory</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>VendVendorRequestNewCategory</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static VendVendorRequestNewCategory find(RecId _recId, boolean _forUpdate = false)
    {
        VendVendorRequestNewCategory vendRequest;

        vendRequest.selectForUpdate(_forUpdate);

        select firstonly vendRequest
            where vendRequest.RecId == _recId;

        return vendRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByVendorParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>VendVendorRequestNewCategory</c> table that is based on the party for the vendor.
    /// </summary>
    /// <param name="_partyRecId">
    /// The record ID of the <c>DirPartyTable</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>VendVendorRequestNewCategory</c> table; otherwise, an empty record.
    /// </returns>
    public static VendVendorRequestNewCategory findByVendorParty(DirPartyRecId _partyRecId, boolean _forUpdate = false)
    {
        VendVendorRequestNewCategory vendRequest;

        vendRequest.selectForUpdate(_forUpdate);

        if (_partyRecId != 0)
        {
            select firstonly vendRequest
                where vendRequest.VendParty == _partyRecId;
        }

        return vendRequest;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>VendorPortal</ConfigurationKey>
	<DeveloperDocumentation>@SCM:VendVendorRequestNewCategoryDevDoc</DeveloperDocumentation>
	<FormRef>VendVendorRequestNewCategoryForm</FormRef>
	<Label>@SCM:VendVendorRequestNewCategoryTable</Label>
	<SingularLabel>@SCM:VendVendorRequestNewCategoryTable</SingularLabel>
	<TableGroup>Transaction</TableGroup>
	<TitleField2>VendParty</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Extends>VendVendorRequest</Extends>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Vendor</Modules>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendParty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendRequestWorkflowState</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendRequestOriginType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RejectionInformation</Name>
			<Label>@SYS191364</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>editReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editReasonComment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Request</Name>
			<Label>@SYS130390</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>createdDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendorInformation</Name>
			<Label>@SYS137195</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendParty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkflowState</Name>
			<Label>@SYS110684</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendRequestWorkflowState</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CompletedDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendRequestCompletionDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendParty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendRequestVendPartyRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VendRequestWorkflowState</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>VendRequestWorkflowState</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VendRequestOriginType</Name>
			<AssetClassification>End User Identifiable Information</AssetClassification>
			<EnumType>VendVendorRequestNewCategoryOriginType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VendPartyTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VendParty</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>DirAddressBookParty</Name>
			<RelatedTable>DirAddressBookPartyAllView</RelatedTable>
			<RelatedTableRole>DirAddressBookPartyAllView</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>VendRequest</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendParty</Name>
					<Field>VendParty</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendParty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DirPartyTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DirPartyTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DirPartyTable_VendRequest</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendParty</Name>
					<Field>VendParty</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendRequest</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendVendorRequest</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>VendVendorRequest</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>