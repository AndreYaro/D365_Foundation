<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TSTimesheetLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TSTimesheetLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityTxt</Name>
				<Source><![CDATA[
    public display smmActivityPurpose activityTxt()
    {
        changecompany(this.ProjectDataAreaId)
        {
            return smmActivities::find(this.ActivityNumber).Purpose;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyUserFieldsHaveChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Checks if any fields were changed
    /// </summary>
    /// <returns>
    ///  true if any field was changed
    /// </returns>
    public boolean anyUserFieldsHaveChanged()
    {
        TSTimesheetLine orig    = this.orig();
        boolean         ret     = false;

        if (
        this.ActivityComplete   != orig.ActivityComplete    ||
        this.ActivityNumber     != orig.ActivityNumber      ||
        this.ActivityRemaining  != orig.ActivityRemaining   ||
        this.CategoryId         != orig.CategoryId          ||
        this.CurrencyCode       != orig.CurrencyCode        ||
        this.DefaultDimension   != orig.DefaultDimension    ||
        this.Resource           != orig.Resource            ||
        this.LinePropertyId     != orig.LinePropertyId      ||
        this.ProjId             != orig.ProjId              ||
        this.TaxGroupId         != orig.TaxGroupId          ||
        this.TaxItemGroup       != orig.TaxItemGroup        ||
        this.WrkCtrId           != orig.WrkCtrId
    )
        ret = true;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusAllowSubmitToWorkflow</Name>
				<Source><![CDATA[
	protected boolean statusAllowSubmitToWorkflow(TSAppStatus _approvalStatus)
    {
        return _approvalStatus == TSAppStatus::Create;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    // This is to be checked if Submit is possible
    boolean canSubmitToWorkflow(str workflowType = '')
    {
        boolean ret = this.RecId != 0 && this.statusAllowSubmitToWorkflow(this.ApprovalStatus) &&
                      TSPolicyEvalEngine::evaluatePoliciesForTimesheet(this, SysPolicyTypeEnum::TimesheetPolicy);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the activity that is specified for a timesheet.
    /// </summary>
    /// <returns>
    /// true if the activity used in this timesheet is valid; otherwise, false.
    /// </returns>
    public boolean checkActivity()
    {
        boolean ret = true;

        if (this.ActivityNumber)
        {
            ret = ProjActivityHelper::validateProjActivityParentLinkV2(this.ProjId, this.ActivityNumber);

            // validate if activity is closed
            if (ret && this.isActivityClosed(this.ActivityNumber))
            {
                ret = checkFailed(strFmt("@Timesheet:ProjActivityClosedError", this.ActivityNumber, this.ProjId));
            }

            if (ret && !this.checkParentActivitySelection(this.ActivityNumber))
            {
                ret = checkFailed("@Proj:ParentActivityError");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActivityAssociatedWithProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the activity is associated with the project.
    /// </summary>
    /// <param name = "_activityNumber">
    /// A string that is the activity number.
    /// </param>
    /// <param name = "_projId">
    /// The project Id.
    /// </param>
    /// <returns>
    /// true if the activity is associated with the project; otherwise, false.
    /// </returns>
    [SysObsolete('This method is obsolete. Use ProjActivityHelper::validateProjActivityParentLink() instead.', false, 3\12\2021)]
    protected boolean isActivityAssociatedWithProject(ProjActivityNumber _activityNumber, ProjId _projId)
    {
        RecId projRecId = ProjTable::find(_projId).RecId;
        return (smmActivityParentLinkTable::findByActivityAndParent(_activityNumber, smmActivityParentType::Project, projRecId, tableNum(ProjTable)).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActivityClosed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the specified activity is closed.
    /// </summary>
    /// <param name = "_activityNumber">
    /// A string that is the activity number.
    /// </param>
    /// <returns>
    /// true if the activity is closed; otherwise, false.
    /// </returns>
    protected boolean isActivityClosed(ProjActivityNumber _activityNumber)
    {
        return smmActivities::find(_activityNumber).Closed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParentActivitySelection</Name>
				<Source><![CDATA[
    public boolean checkParentActivitySelection(ProjActivityNumber _activityNumber)
    {
        boolean ret = true;
        HierarchyTreeTable hierarchyTreeTable;

        // check if BlockParentActivitySelection is true
        if (ProjParameters::find().BlockParentActivitySelection)
        {
            select firstonly hierarchyTreeTable where hierarchyTreeTable.RefRecId == SmmActivities::find(_activityNumber).RecId;

            var childCount = HierarchyTreeTable::childNodeCount(hierarchyTreeTable.HierarchyId, hierarchyTreeTable.ElementNumber);
            if (childCount > 0)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the category specified for a timesheet.
    /// </summary>
    /// <returns>
    ///    True if the category used in this timesheet is valid; otherwise, false.
    /// </returns>
    public boolean checkCategoryId()
    {
        boolean         ret = true;
        ProjCategory    projCategory;

        if (this.CategoryId)
        {
            projCategory = ProjCategory::find(this.CategoryId);

            if (projCategory)
            {
                if (projCategory.CategoryType != ProjCategoryType::Hour)
                {
                    ret = checkFailed(strFmt("@SYS54897", this.CategoryId));
                }

                if (projCategory.psaIndirectComponent)
                {
                    ret = checkFailed("@PSA11059");
                }

                ret = projCategory.validateIfInactiveAllowed();
            }
            else
            {
                ret = checkFailed(strFmt("@Timesheet:TheValue1InField2IsNotFoundInTheRelatedTable3", this.CategoryId,
                                                fieldId2name(tableNum(TSTimesheetLine), fieldNum(TSTimesheetLine, CategoryId)),
                                                tableId2pname(tableNum(ProjCategory))));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the project associated with the line.
    /// </summary>
    /// <returns>true if the project is still in valid state; otherwise; false.</returns>
    public boolean checkProjId()
    {
        boolean ret = true;
        ProjTable projTable;

        if (this.ProjId)
        {
            changecompany(this.ProjectDataAreaId)
            {
                projTable = ProjTable::find(this.ProjId);

                if (!projTable)
                {
                    ret = checkFailed(strFmt("@Timesheet:NoProjectInLegalEntity", this.ProjId, this.ProjectDataAreaId));
                }
                if (ret && ! projTable.status().checkRule(ProjStatusRule::CreateJournal))
                {
                    ret = checkFailed(strFmt("@Timesheet:ProjectStageNotAllowEntryError", projTable.Stage(), projTable.ProjId));
                }
                if (ret && !projTable.status().activeInTree())
                {
                    ret = checkFailed(strFmt("@SYS96612",this.ProjId));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReqActivity</Name>
				<Source><![CDATA[
    public boolean checkReqActivity(TSTimesheetLine   _timesheetLine)
    {
        RequireActivity             requireActivity;
        boolean                     ret = true;

        requireActivity = ProjTable::checkRequireActivity(_timesheetLine.ProjId,tableNum(TSTimesheetLine));
        if (requireActivity && (!_timesheetLine.ActivityNumber))
        {
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidTaxCodes_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the tax codes is valid or not.
    /// </summary>
    /// <returns>
    /// true if the tax codes is valid ; otherwise, false.
    /// </returns>
    public boolean checkValidTaxCodes_IN()
    {
        FormulaDesigner_IN  formulaDesigner;
        TaxTable            taxTable;
        boolean             ret = true;

        select RecId from formulaDesigner
        join RecId from taxTable
            where formulaDesigner.TaxItemGroup == this.TaxItemGroup
               && taxTable.TaxCode == formulaDesigner.TaxCode
               && (taxTable.TaxType_IN == TaxType_IN::Customs
               || taxTable.TaxType_IN == TaxType_IN::Excise);

        if (formulaDesigner.RecId)
        {
            ret = checkFailed("@Timesheet:ExciseOrCustomsTaxesAreNotApplicableForTheJournal");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custAccount</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    edit CustAccount custAccount(boolean _set, CustAccount _custAccount)
    {
        ProjTable projTable;
        CustAccount custAccount = _custAccount;
        container c = [this.ProjectDataAreaId];

        if (!_set && this.ProjId)
        {
            select firstonly crossCompany:c CustAccount from projTable where projTable.ProjId == this.ProjId && projTable.DataAreaId == this.ProjectDataAreaId;

            custAccount = projTable.CustAccount;
        }
        else if (_set && _custAccount)

        {
            custAccount = CustTable::findByCompany(this.ProjectDataAreaId, _custAccount).AccountNum;
            if (custAccount == '')
            {
                error(strFmt("@SYP4986038", fieldPName(CustTable, AccountNum), _custAccount, tablePName(CustTable)));
            }

            if (this.ProjId)
            {
                select firstonly crossCompany:c RecId,ProjId,CustAccount from projTable where projTable.ProjId == this.ProjId && projTable.DataAreaId == this.ProjectDataAreaId;

                if (projTable.RecId != 0 && projTable.CustAccount != custAccount)
                {
                    this.ProjId = '';
                    this.ActivityNumber = '';
                }
            }
        }

        return custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custName</Name>
				<Source><![CDATA[
    display CustName custName()
    {
        changecompany(this.ProjectDataAreaId)
        {
            return ProjInvoiceTable::find(ProjTable::find(this.ProjId).ProjInvoiceProjId).payer().name();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs processing with regard to timesheet entry details for a form bound to a tax group lookup
    /// control.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the data in the control has changed.
    /// </param>
    /// <param name="_taxGroup">
    /// A tax group entered from the bound control.
    /// </param>
    /// <returns>
    /// A tax group ID.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public edit TaxGroup editTaxGroup(boolean _set, TaxGroup _taxGroup)
    {
        TaxGroupHeading taxGroupHeading;
        TaxGroup        taxGroup = this.TaxGroupId;

        if (_set)
        {
            changecompany(this.ProjectDataAreaId)
            {
                select firstonly RecId,TaxGroup from taxGroupHeading where taxGroupHeading.TaxGroup == _taxGroup;
            }
            this.TaxGroupId = taxGroupHeading.TaxGroup;
            taxGroup = this.TaxGroupId;
        }

        return taxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editTaxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs processing with regard to timesheet entry details for a form bound to a tax item group
    /// lookup control.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the data in the control has changed.
    /// </param>
    /// <param name="_taxItemGroup">
    /// A tax item group entered from the bound control.
    /// </param>
    /// <returns>
    /// A tax item group ID.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public edit TaxItemGroup editTaxItemGroup(boolean _set, TaxItemGroup _taxItemGroup)
    {
        TaxItemGroupHeading taxItemGroupHeading;
        TaxItemGroup        taxItemGroup = this.TaxItemGroup;

        if (_set)
        {
            changecompany(this.ProjectDataAreaId)
            {
                select firstonly RecId,TaxItemGroup from taxItemGroupHeading where taxItemGroupHeading.TaxItemGroup == _taxItemGroup;
            }
            this.TaxItemGroup = taxItemGroupHeading.TaxItemGroup;
            taxItemGroup = this.TaxItemGroup;
        }

        return taxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinTimeIncrement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the minimum time increment permitted for the timesheet line.
    /// </summary>
    /// <returns>
    /// The minimum time increment permitted for the transaction line represented as a decimal fraction of
    /// 1.
    /// </returns>
    public TSMinTimeIncrement getMinTimeIncrement()
    {
        ProjTable projTable;
        ProjParameters projParameters;
        SysGlobalCache  cache   = classfactory.globalCache();
        str cacheKey;

        container c = [this.ProjectDataAreaId];

        cacheKey = strFmt("%1-%2", funcName(), this.ProjId);

        if (cache.isSet(tableStr(TSTimesheetLine), cacheKey))
        {
            return cache.get(tableStr(TSTimesheetLine), cacheKey);
        }

        if (this.ProjId != '')
        {
            select firstonly crossCompany:c RecId,ProjId,MinTimeIncrement from projTable where projTable.ProjId == this.ProjId && projTable.DataAreaId == this.ProjectDataAreaId;
        }

        if (projTable.MinTimeIncrement > 0)
        {
            cache.set(tableStr(TSTimesheetLine), cacheKey, projTable.MinTimeIncrement);
            return projTable.MinTimeIncrement;
        }
        else
        {
            select firstonly crossCompany:c MinTimeIncrement from projParameters where projParameters.DataAreaId == this.ProjectDataAreaId;
            cache.set(tableStr(TSTimesheetLine), cacheKey, projParameters.MinTimeIncrement);
            return projParameters.MinTimeIncrement;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasActiveWorkflowStatus</Name>
				<Source><![CDATA[
    public display boolean hasActiveWorkflowStatus()
    {
        if (TSTimesheetHelper::recordHasLineItemApproval(this))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjTable</Name>
				<Source><![CDATA[
    void initFromProjTable(ProjTable _projTable)
    {
        DimensionDefault defaultDimension;

        TSTimesheetTable tSTimesheetTable = TSTimesheetTable::find(this.TimesheetNbr);

        using (TSTimesheetLineParameters insertParameters = TSTimesheetLineParameters::parmValidTo(tSTimesheetTable.PeriodTo))
        {
            defaultDimension = ResourceFacade::getDefaultDimensionByDate(this.Resource, tSTimesheetTable.PeriodFrom);
        }

        if (this.isIntercompany())
        {
            // If this is an intercompany timesheet line, it should have only employee's dimension.
            this.DefaultDimension = defaultDimension;
        }
        else
        {
            // If this is not an intercompany timesheet line, the financial dimensions should
            // be a merge of the dimensions from both resource and project this timesheet line
            // is associated with. Also considering the legal entity while getting the default
            // dimension of resource as the resource could be employed by multiple entities.
            this.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(
                                                                                _projTable.DefaultDimension,
                                                                                defaultDimension);
        }
        this.TaxGroupId = ProjParameters::taxGroupInvoice(this.ProjId);

        // Assign the tax item group
        changecompany(this.ProjectDataAreaId)
        {
            this.TaxItemGroup = ProjCategory::find(this.CategoryId, false).TaxItemGroupId;
        }

        if (!ProjValProjCategorySetUp::checkProjCategory(this.ProjId,this.CategoryId))
        {
            this.CategoryId = '';
        }

        this.setLineProperty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTSTimesheetLine</Name>
				<Source><![CDATA[
    void initFromTSTimesheetLine(TSTimesheetLine _tsLine)
    {
        this.ProjectDataAreaId = _tsLine.ProjectDataAreaId;
        this.initValue();
        this.ProjId          = _tsLine.ProjId;
        this.CategoryId      = _tsLine.CategoryId;

        this.ActivityNumber     = _tsLine.ActivityNumber;
        this.LinePropertyId     = _tsLine.LinePropertyId;
        this.WrkCtrId           = _tsLine.WrkCtrId;
        this.CurrencyCode       = _tsLine.CurrencyCode;
        this.DefaultDimension   = _tsLine.DefaultDimension;
        this.TaxGroupId         = _tsLine.TaxGroupId;
        this.TaxItemGroup       = _tsLine.TaxItemGroup;
        //   this.ActivityRemaining  = _tsLine.ActivityRemaining;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTSTimesheetTable</Name>
				<Source><![CDATA[
    void initFromTSTimesheetTable(TSTimesheetTable _tsTable)
    {
        this.TimesheetNbr   = _tsTable.TimesheetNbr;
        this.Resource       = _tsTable.Resource;
        this.ApprovalStatus = _tsTable.ApprovalStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromResource</Name>
				<Source><![CDATA[
    void initFromResource()
    {
        ResourceView                resourceView;
        WrkCtrResourceGroup         wrkCtrResourceGroup;
        WrkCtrResourceGroupResource wrkCtrResourceGroupResource;
        HcmWorkerRecId              workerRecId = TSResource::workerRecId(this.Resource);
        DataAreaId                  companyId = curExt();

        select count(RecId) from resourceView
            where resourceView.Worker == workerRecId
               && resourceView.ResourceCompanyId == companyId;

        if (resourceView.RecId == 1)
        {
            // Get the resource group that the resource belongs to as of todays date
            select firstonly WrkCtrId from wrkCtrResourceGroup
            exists join wrkCtrResourceGroupResource
                where wrkCtrResourceGroupResource.ResourceGroup == wrkCtrResourceGroup.RecId
            exists join resourceView
                where wrkCtrResourceGroupResource.WrkCtrId == resourceView.ResourceId
                   && resourceView.Worker                  == workerRecId
                   && resourceView.ResourceCompanyId       == companyId;

            this.WrkCtrId = wrkCtrResourceGroup.WrkCtrId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInterCompanyCategory</Name>
				<Source><![CDATA[
    private ProjCategoryId initializeInterCompanyCategory(ProjCategoryId _categoryId)
    {
        ProjCategory        projCategory;
        CategoryTable       categoryTable;
        SharedCategory      sharedCategory;
        ProjCategoryId      categoryId;

        categoryTable   = CategoryTable::find(_categoryId);
        sharedCategory  = SharedCategory::findRecId(categoryTable.SharedCategory);

        if (this.ProjectDataAreaId)
        {
            changecompany(this.ProjectDataAreaId)
            {
                categoryTable.clear();

                select CategoryId from categoryTable
                where categoryTable.SharedCategory == sharedCategory.RecId;

                projCategory = ProjCategory::find(categoryTable.CategoryId);
                select firstonly CategoryId from projCategory where
                projCategory.CategoryId   == categoryTable.CategoryId &&
                projCategory.CategoryType == ProjCategoryType::Hour &&
                projCategory.Active       == NoYes::Yes;

                if (projCategory.RecId && this.isCategoryValid(projCategory.CategoryId, true))
                {
                    categoryId = projCategory.CategoryId;
                }
            }
        }
        return categoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.initFromTSTimesheetTable(this.timesheetTable());
        this.CurrencyCode = CompanyInfoHelper::standardCurrency();

        if (this.ProjId)
        {
            ProjTable projTable = ProjTable::findByDataArea(this.ProjId, this.ProjectDataAreaId);

            if (projTable.RecId)
            {
                boolean isValidProjId;

                this.psaSetCurrencyId();

                changecompany(this.ProjectDataAreaId)
                {
                    isValidProjId = this.checkProjId();
                }

                if (isValidProjId)
                {
                    this.initFromProjTable(projTable);
                }
            }
        }

        this.setNextLineNum(this.TimesheetNbr);

        if (this.CategoryId == '')
        {
            this.CategoryId = this.setDefaultCategory();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        // <GIN>
        TSTimesheetLineTaxExtensionIN  tsTimesheetLineTaxExtensionINlocal;
        #ISOCountryRegionCodes
        // </GIN>
        super();
        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            tsTimesheetLineTaxExtensionINlocal = this.tsTimesheetLineTaxExtensionIN();
            tsTimesheetLineTaxExtensionINlocal.SysExtensionSerializerExtensionMap::insertAfterBaseTable(this);
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether project/category and/or employee/category is valid for the specified timesheets line.
    /// </summary>
    /// <param name="_categoryId">
    /// _categoryId is project category to validate.
    /// </param>
    /// <param name="_isIntercompany">
    /// _isIntercompany is True when the timesheet line's company is not the same as the timesheet header's company.
    /// </param>
    /// <returns>
    /// True, if <c>categoryId</c> is valid for both resource and project if validation is mandatory for the specified timesheets line, false otherwise.
    /// </returns>
    public boolean isCategoryValid(ProjCategoryId _categoryId, boolean  _isIntercompany = false)
    {
        ProjParameters              projParameters;
        ProjValEmplCategorySetUp    projValEmplCategorySetUp, projValEmplCategorySetUp2;
        ProjValProjCategorySetUp    projValProjCategorySetUp, projValProjCategorySetUp2;
        boolean                     isAbsence;

        if (_categoryId == '')
        {
            return false;
        }

        changecompany(this.ProjectDataAreaId)
        {
            // Use project parameters of the company that owns the project,
            // associsated with the current timesheet line
            projParameters  = ProjParameters::find(false);

            // Check to see if the ProjCategoryType is of type hour
            if (ProjCategory::find(_categoryId, false).CategoryType != ProjCategoryType::Hour)
            {
                return false;
            }

            if (projParameters.ValidationEmplCategory == ProjValParameter::Mandatory)
            {
                if (!this.Resource && ProjCategory::find(_categoryId).ProjCategoryEmplOption == ProjCategoryEmplOption::Mandatory)
                {
                    return false;
                }

                if (ResourceFacade::validateResourceCategory(this.Resource) == NoYes::Yes)
                {
                    select firstonly projValEmplCategorySetUp where
                    projValEmplCategorySetUp.Resource               == this.Resource  &&
                            projValEmplCategorySetUp.CategoryId     == _categoryId;

                    // Check group
                    if (!projValEmplCategorySetUp)
                    {
                        select projValEmplCategorySetUp where
                        projValEmplCategorySetUp.CategoryId         == _categoryId  &&
                        projValEmplCategorySetUp.GroupId
                            exists join projValEmplCategorySetUp2 where
                                projValEmplCategorySetUp2.Resource  == this.Resource  &&
                                projValEmplCategorySetUp2.GroupId   == projValEmplCategorySetUp.GroupId;

                        if (!projValEmplCategorySetUp)
                        {
                            return false;
                        }
                    }
                }
            }
            else if (projParameters.TimesheetValidateAbsence && projParameters.ValidationProjCategory != ProjValParameter::Mandatory)
            {
                isAbsence = projParameters.TimesheetAbsenceProjId == this.ProjId;
                if (ProjCategory::find(_categoryId).TsAbsence != isAbsence)
                {
                    return false;
                }
            }

            if (this.ProjId)
            {
                if (projParameters.ValidationProjCategory == ProjValParameter::Mandatory)
                {
                    if (ProjTable::find(this.ProjId).ValidateProjCategory == NoYes::Yes)
                    {
                        select firstonly projValProjCategorySetUp where
                        projValProjCategorySetUp.CategoryId                 == _categoryId  &&
                        projValProjCategorySetUp.ProjId                     == this.ProjId;

                        // Check group
                        if (!projValProjCategorySetUp)
                        {
                            select projValProjCategorySetUp where
                            projValProjCategorySetUp.ProjId                 == this.ProjId  &&
                            projValProjCategorySetUp.GroupId
                                exists join projValProjCategorySetUp2 where
                                    projValProjCategorySetUp2.CategoryId    == _categoryId  &&
                                    projValProjCategorySetUp2.GroupId       == projValProjCategorySetUp.GroupId;

                            if (!projValProjCategorySetUp)
                            {
                                return false;
                            }
                        }
                    }
                }
            }

            if (this.validateProjActivityMandatoryCategory(_categoryId) == false)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjActivityMandatoryCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns false if the project activity category is mandatory and is different than
    /// the category received in the parameter.
    /// </summary>
    /// <returns>
    /// <param name="_categoryId">
    /// Category to be validated.
    /// </param>
    /// Returns false if the selected category is different than the project activity category
    /// and the project activity category is mandatory.
    /// </returns>
    /// <remarks>
    /// This method will always return true if the activity field is empty or if the category is not
    /// mandatory for that activity of the project.
    /// </remarks>
    public boolean validateProjActivityMandatoryCategory(ProjCategoryId _categoryId)
    {
        ProjActivity projActivity;

        if (this.ActivityNumber)
        {
            select firstonly Mandatory, CategoryDefault from projActivity
                where projActivity.ActivityNumber == this.ActivityNumber;

            if (projActivity.Mandatory && _categoryId != projActivity.CategoryDefault)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIntercompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current timesheet line is an intercompany transaction.
    /// </summary>
    /// <returns>
    /// true if timesheet line is intercompany; otherwise, false.
    /// </returns>
    public boolean isIntercompany()
    {
        return this.ProjectDataAreaId != curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOwnerOrDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if current user is either owner of the timesheet line or owner's delegate.
    /// </summary>
    /// <param name="_resourceRecId">
    /// Resource for which to check whether owner or delegate relationship.
    /// </param>
    /// <param name="_date">
    /// Date for which to check delegate relationship.
    /// </param>
    /// <returns>
    /// True if current user is either owner of the timesheet line or owner's delegate; otherwise, false.
    /// </returns>
    public boolean isOwnerOrDelegate(
        TSResourceRecId _resourceRecId = ResourceFacade::findByCurrentWorker(),
        TSDate          _date          = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return this.Resource == _resourceRecId
                || TSTimesheetHelper::isDelegateUserForResource(this.Resource, curUserId(), _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjBudgetFailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the project budget check failed.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// The record ID of the related <c>TSTimesheetTrans</c> source document line record ID.
    /// </param>
    /// <returns>
    /// true if the project budget check failed; otherwise, false.
    /// </returns>
    public boolean isProjBudgetFailed(RefRecId _sourceDocumentLine)
    {
        ProjBudgetCheckResult budgetCheck = ProjBudgetCheckResult::Passed;

        changecompany(this.ProjectDataAreaId)
        {
            budgetCheck = ProjBudgetStatus::findBySourceDocumentLine(_sourceDocumentLine).BudgetCheckResult;
        }

        return (budgetCheck == ProjBudgetCheckResult::Failed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectBudgetControlEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether budget control for the project is enabled for the specified timesheet line.
    /// </summary>
    /// <returns>
    /// true if budget control for the project is enabled for the specified timesheet line; otherwise,
    /// false.
    /// </returns>
    public boolean isProjectBudgetControlEnabled()
    {
        ProjTable                       projTable;
        boolean useBudgeting = false;
        container c = [this.ProjectDataAreaId];

        select firstonly crossCompany:c RecId from projTable where projTable.ProjId == this.ProjId &&
                                                                    projTable.UseBudgeting == true &&
                                                                    projTable.DataAreaId == this.ProjectDataAreaId;

        useBudgeting = projTable.RecId != 0;

        return useBudgeting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        ProjTable               projTable;
        ProjActivity            projActivity;
        ProjCategory            projCategory;
        DimensionDefault        emplDimension;
        boolean                 checkProjId = true;

        container c = [this.ProjectDataAreaId];

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(TSTimesheetLine, ProjId):

                if(this.ProjId && this.ProjectDataAreaId)
                {
                    changecompany(this.ProjectDataAreaId)
                    {
                        checkProjId = this.checkProjId();
                    }

                    if (checkProjId)
                    {
                        if (this.ProjectDataAreaId == curExt())
                        {
                            projTable = ProjTable::find(this.ProjId);
                        }
                        else
                        {
                            select firstonly crossCompany:c RecId,Name from projTable
                                where projTable.ProjId     == this.ProjId
                                   && projTable.DataAreaId == this.ProjectDataAreaId;
                        }

                        this.initFromProjTable(projTable);
                    }

                    this.custAccount(false, '');

                    if (!this.isCategoryValid(this.CategoryId))
                    {
                        this.CategoryId = '';
                    }

                    this.psaSetCurrencyId();
                }

                this.ActivityNumber = '';
                break;

            case fieldNum(TSTimesheetLine, CategoryId):

                select firstonly crossCompany:c RecId,Name, CategoryId from projCategory
                    where projCategory.CategoryId == this.CategoryId
                       && projCategory.DataAreaId == this.ProjectDataAreaId;

                if (projCategory.RecId != 0)
                {
                    this.CategoryId = projCategory.CategoryId;

                    if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                    {
                        if (projCategory.psaIndirectComponent)
                        {
                            this.CategoryId = '';
                            throw error("@PSA11059");
                        }
                    }

                    this.setLineProperty();

                    changecompany(this.ProjectDataAreaId)
                    {
                        this.TaxItemGroup = ProjCategory::find(projCategory.CategoryId).TaxItemGroupId;
                    }
                }

                break;

            case fieldNum(TSTimesheetLine, ActivityNumber):
                this.setCategoryIdFromActivity();
                this.setLineProperty();
                break;

            case fieldNum(TSTimesheetLine, ProjectDataAreaId):
                if (this.orig().ProjectDataAreaId != this.ProjectDataAreaId)
                {
                    this.ProjId = '';
                    this.CategoryId = '';
                    this.ActivityNumber = '';
                    this.LinePropertyId = '';
                    this.custAccount(true, '');
                    this.psaSetCurrencyId();
                    this.CategoryId = this.setDefaultCategory(true);
                }
                if (this.isIntercompany())
                {
                    emplDimension         = TSResource::defaultDimension(this.Resource);
                    this.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(this.DefaultDimension, emplDimension);
                }

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packTSTimesheetLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the <c>TSTimesheetLineTaxExtensionIN</c> table
    /// </summary>
    /// <param name="_tsTimesheetLineTaxExtensionIN">
    /// TSTimesheetLineTaxExtensionIN is packed.
    /// </param>
    public void packTSTimesheetLine_IN(TSTimesheetLineTaxExtensionIN _tsTimesheetLineTaxExtensionIN)
    {
        _tsTimesheetLineTaxExtensionIN.tsTimesheetLine = this.RecId;

        this.SysExtensionSerializerMap::packExtensionTable(_tsTimesheetLineTaxExtensionIN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInDetail</Name>
				<Source><![CDATA[
    boolean postInDetail()
    {
        return (ProjTable::find(this.ProjId).TimePostDetailSummary == DetailSummary::Detail);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes timesheet lines that have a value of 0 hours when the user submits the timesheet to
    /// workflow.
    /// </summary>
    public void preSubmit()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCustName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display CustName projCustName()
    {
        return CustTable::find(ProjTable::find(this.ProjId).CustAccount).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display ProjName projName()
    {
        if (this.ProjectDataAreaId && Project::checkDataAreaAccessible(this.ProjectDataAreaId))
        {
            changecompany(this.ProjectDataAreaId)
            {
                return  projTable::find(this.ProjId).Name;
            }
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display Name linePropertyName()
    {
        if (this.ProjectDataAreaId && Project::checkDataAreaAccessible(this.ProjectDataAreaId))
        {
            changecompany(this.ProjectDataAreaId)
            {
                return  projLineProperty::find(this.LinePropertyId).Name;
            }
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSupportLineApproval</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display int getSupportLineApproval()
    {
        const int supportLineApproval = 1;
        const int notSupportLineApproval = 0;
        WorkflowWorkItemTable workItemTable;

        select firstonly RecId from  workItemTable where workItemTable.RefTableId == tableNum(TSTimesheetLine) &&
                                                             workItemTable.RefRecId == this.RecId &&
                                                             workItemTable.Status == WorkflowWorkItemStatus::Pending &&
                                                             workItemTable.UserId == curUserId() ;
        if (workItemTable.RecId != 0)
        {
            return supportLineApproval;
        }
        else
        {
            return notSupportLineApproval;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaProjCategoryName</Name>
				<Source><![CDATA[
    // Description    : Displays name of project category this line is linked to
    // Parameters     : None
    // Return value   : ProjCategory.Name
    public display ProjCategoryName psaProjCategoryName()
    {
        ProjCategoryName name;

        changecompany(this.ProjectDataAreaId)
        {
            name = ProjCategory::find(this.CategoryId).Name;
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaSetCurrencyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the value of the Currency id.
    /// </summary>
    /// <remarks>
    /// If the timesheet line is not intercompany, then, the project invoice currency id should be used.
    /// If the timesheet line is intercompany, then, the intercompany customer currency id should be used.
    /// In both situations, if the currency id remains blank, then, the company s currency id should be used.
    /// </remarks>
    public void psaSetCurrencyId()
    {
        CurrencyCode currency;

        if (this.ProjectDataAreaId && this.ProjectDataAreaId != this.DataAreaId)
        {
            var tradingPartner  = InterCompanyTradingPartner::findTradingCustomer(this.DataAreaId, this.ProjectDataAreaId);
            var custTable       = CustTable::findByPartyRecId(tradingPartner.CustomerParty);
            currency            = custTable.Currency;

            changecompany (this.ProjectDataAreaId)
            {
                if (!currency)
                {
                    currency = Ledger::accountingCurrency();
                }

                this.ProjCompanySalesCurrency = ProjInvoiceTable::find(ProjTable::find(this.ProjId).ProjInvoiceProjId).CurrencyId;
            }
        }
        else if (this.ProjId)
        {
            var projTable = ProjTable::find(this.ProjId);

            if (!ProjMultipleContractLinesForProjectFeatureHelper::isInternalProject(projTable))
            {
                ProjInvoiceTable projInvoiceTable = ProjInvoiceTable::find(projTable.ProjInvoiceProjId);

                if (projInvoiceTable.CurrencyId)
                {
                    currency = projInvoiceTable.CurrencyId;
                }
            }
        }

        if (!currency)
        {
            currency = Ledger::accountingCurrency();
        }

        this.CurrencyCode = currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaToBeInvoiced</Name>
				<Source><![CDATA[
    // Description    : Displays if the line is invoicable
    // Parameters     : None
    // Return value   : Customer Name
    public NoYes psaToBeInvoiced()
    {
        NoYes tobeInvoiced;

        changecompany(this.ProjectDataAreaId)
        {
            tobeInvoiced = ProjLineProperty::find(this.LinePropertyId).ToBeInvoiced;

            if (tobeInvoiced)
            {
                tobeInvoiced = ProjInvoiceTable::isBillingRuleInvoiceable(this.ProjId, this.CategoryId, '');
            }
        }

        return tobeInvoiced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the header table.
    /// </summary>
    /// <returns>The recode for TSTimessheetTable.</returns>
    public SalesPurchJournalTable salesPurchJournalTable()
    {
        return this.timesheetTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCategoryIdFromActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the default category id from the <c>ProjActivity</c> table.
    /// </summary>
    protected void setCategoryIdFromActivity()
    {
        ProjActivity	projActivity;

        changeCompany(this.ProjectDataAreaId)
        {
            select firstonly CategoryDefault from projActivity
                where projActivity.ActivityNumber == this.ActivityNumber;
        }

        if (this.isCategoryValid(projActivity.CategoryDefault))
        {
            this.CategoryId = projActivity.CategoryDefault;
        }
        else
        {
            this.CategoryId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to default the <c>CategoryId</c> from either the resource's default category or from the project parameters default Hour category.
    /// Category will be validated if necessary if resource/category or project/categroy validation is setup.
    /// </summary>
    /// <param name="_isInterCompany">
    /// Indicates whether additional valdation of the default category is necessary for intercompany timesheet lines.
    /// </param>
    /// <returns>
    /// The default Category Id.
    /// </returns>
    /// <remarks>
    /// This method returns the default category id which is used to initalize the <c>TSTimesheetLine</c>.
    /// </remarks>
    public ProjCategoryId setDefaultCategory(boolean _isInterCompany = false)
    {
        ProjCategoryId  categoryId;

        if (this.Resource)
        {
            categoryId = ResourceFacade::getDefaultTimeCategoryId(this.Resource);
            if (!_isInterCompany && !this.isCategoryValid(categoryId))
            {
                categoryId = '';
            }
        }

        if (categoryId != '' && _isInterCompany)
        {
            categoryId = this.initializeInterCompanyCategory(categoryId);
        }

        if (categoryId == '' && this.ActivityNumber)
        {
            this.setCategoryIdFromActivity();
            categoryId = this.CategoryId;
        }

        if (categoryId == '')
        {
            categoryId = ProjParameters::findByDataArea(this.ProjectDataAreaId).EmplCategory;
            if (!this.isCategoryValid(categoryId, _isInterCompany))
            {
                categoryId = '';
            }
        }

        return categoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineProperty</Name>
				<Source><![CDATA[
    public void setLineProperty()
    {
        if (this.ProjId && this.CategoryId)
        {
            changecompany(this.ProjectDataAreaId)
            {
                this.LinePropertyId = ProjLinePropertySetup::findLinePropertyId(this.ProjId, this.CategoryId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNextLineNum</Name>
				<Source><![CDATA[
    void setNextLineNum(TSTimesheetNbr _timesheetNbr)
    {
        TSTimesheetLine tsLine;

        select firstonly maxof(LineNum) from tsLine where tsLine.TimesheetNbr == _timesheetNbr;
        this.LineNum = tsLine.LineNum + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>timesheetTable</Name>
				<Source><![CDATA[
    public TSTimesheetTable timesheetTable()
    {
        return TSTimesheetTable::find(this.TimesheetNbr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalWeekHours</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute()]
    display TSHoursTotal totalWeekHours()
    {
        TSTimesheetLineWeek  summaryWeek;

        select sum(Hours) from summaryWeek
                           where summaryWeek.tsTimesheetLine == this.RecId;

        return  summaryWeek.Hours[1] +
            summaryWeek.Hours[2] +
            summaryWeek.Hours[3] +
            summaryWeek.Hours[4] +
            summaryWeek.Hours[5] +
            summaryWeek.Hours[6] +
            summaryWeek.Hours[7];
    }

]]></Source>
			</Method>
			<Method>
				<Name>tsTimesheetLineTaxExtensionIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>TSTimesheetLineTaxExtensionIN</c> table.
    /// </summary>
    /// <returns>
    /// The table <c>TSTimesheetLineTaxExtensionIN</c> associated with the current record.
    /// </returns>
    public TSTimesheetLineTaxExtensionIN tsTimesheetLineTaxExtensionIN()
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            return this.SysExtensionSerializerMap::getExtensionTable(tableNum(TSTimesheetLineTaxExtensionIN));
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        TSTimesheetTrans tsTimesheetTrans;
        TSTimesheetLineWeek tsTimesheetLineWeek;
        boolean hasChanged = false;

        ttsbegin;

        if (   this.orig().ProjId         != this.ProjId
            || this.orig().CategoryId     != this.CategoryId
            || this.orig().LinePropertyId != this.LinePropertyId)
        {
            select firstonly RecId from tsTimesheetLineWeek
                where tsTimesheetLineWeek.tsTimesheetLine == this.RecId;

            if (tsTimesheetLineWeek.RecId != 0)
            {
                while select forupdate tsTimesheetTrans
                    order by ProjTransDate desc
                            where tsTimesheetTrans.tsTimesheetLineWeek == tsTimesheetLineWeek.RecId
                {
                    tsTimesheetTrans.setTransDate();
                    tsTimesheetTrans.setCostPrice(this);
                    tsTimesheetTrans.setSalesPrice(this);
                    tsTimesheetTrans.doUpdate();
                }
            }

            hasChanged = true;
        }

        super();

        if (hasChanged)
        {
            TSTimesheetTable::checkHours(this.TimesheetNbr, true);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudget</Name>
				<Source><![CDATA[
    public boolean validateBudget()
    {
        TSTimesheetTrans    tsTimesheetTrans;
        TSTimesheetLineWeek tsTimesheetLineWeek;
        BudgetSource        budgetSource;

        while select tsTimesheetTrans
        join RecId from tsTimesheetLineWeek
            where tsTimesheetTrans.tsTimesheetLineWeek == tsTimesheetLineWeek.RecId &&
                  tsTimesheetLineWeek.tsTimesheetLine == this.RecId
        {
            SourceDocumentProcessorFacade::submitOnDemandSourceDocLineImpl(tsTimesheetTrans);

            select maxof(CheckResult) from budgetSource
                where budgetSource.SourceDocumentLine == tsTimesheetTrans.SourceDocumentLine
                    && budgetSource.BudgetSourceType == BudgetSourceType::SourceDocumentLine
                    && budgetSource.BudgetTransactionLine == 0
                    && budgetSource.LedgerEntryGeneralJournalEntry == 0
                    && budgetSource.LedgerEntryJournalNumber == ''
                    && budgetSource.LedgerEntryJournalReferenceNumber == ''
                    && budgetSource.LedgerEntryJournalLegalEntity == 0;

            if (budgetSource.CheckResult == BudgetCheckResult::Failed)
            {
                return false;
            }

            if (ProjBudgetStatus::findBySourceDocumentLine(tsTimesheetTrans.SourceDocumentLine).BudgetCheckResult == ProjBudgetCheckResult::Failed)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusAllowDeleteTSTimesheetLine</Name>
				<Source><![CDATA[
	protected boolean statusAllowDeleteTSTimesheetLine(TSAppStatus _approvalStatus)
    {
        return _approvalStatus == TSAppStatus::Create || _approvalStatus == TSAppStatus::Returned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusAllowDeleteTSTimesheetTable</Name>
				<Source><![CDATA[
    protected boolean statusAllowDeleteTSTimesheetTable(TSAppStatus _approvalStatus)
    {
        return _approvalStatus == TSAppStatus::Create || _approvalStatus == TSAppStatus::Returned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        ret = !TrvWorkflowUtilities::recordHasActiveWorkItem(this);

        ret = ret && this.statusAllowDeleteTSTimesheetLine(this.ApprovalStatus);

        // Only allow timesheet line deletion when timesheet workflow is in created or returned status.
        TSTimesheetTable tsTable = this.timesheetTable();
        ret = ret && this.statusAllowDeleteTSTimesheetTable(tsTable.ApprovalStatus);

        if (!ret)
        {
            error("@SYS184125");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjectDataAreaId</Name>
				<Source><![CDATA[
    public boolean checkProjectDataAreaId()
    {
        boolean ret;
        ret = this.ProjectDataAreaId == curext();

        if (!ret && ProjParameters::find().EnableIntercompanyTimesheet)
        {
            ret = ProjIntercompanyParameters::findByDataAreaIdAndBorrowingLegalEntity(curExt(), this.ProjectDataAreaId).RecId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxGroupId</Name>
				<Source><![CDATA[
    public boolean checkTaxGroupId()
    {
        boolean ret = true;

        if (this.TaxGroupId != '')
        {
            changecompany(this.ProjectDataAreaId)
            {
                ret = TaxGroupHeading::exist(this.TaxGroupId);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxItemGroup</Name>
				<Source><![CDATA[
    public boolean checkTaxItemGroup()
    {
        boolean ret = true;

        if (this.TaxItemGroup != '')
        {
            changecompany(this.ProjectDataAreaId)
            {
                ret = TaxItemGroupHeading::exist(this.TaxItemGroup);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates a specified field.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    ///    The field ID of the field to validate.
    /// </param>
    /// <returns>
    ///    true if the value of the field passed in as a parameter is valid; otherwise, false.
    /// </returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
     
        // <GIN>
        #ISOcountryRegionCodes
        // </GIN>

        switch (_fieldIdToCheck)
        {
            case fieldNum(TSTimesheetLine, ProjId):
                ret = super(_fieldIdToCheck);
                ret = ret && this.checkProjId();
                break;

            case fieldNum(TSTimesheetLine, ActivityNumber):
                changecompany(this.ProjectDataAreaId)
                {
                    ret = super(_fieldIdToCheck);
                    ret = ret && this.checkActivity();
                }
                break;

            case fieldNum(TSTimesheetLine, CategoryId):
                changecompany(this.ProjectDataAreaId)
                {
                    ret = super(_fieldIdToCheck);
                    ret = ret && this.checkCategoryId();
                }
                break;

                // <GIN>
            case fieldNum(TSTimesheetLine, TaxItemGroup):
                ret = this.checkTaxItemGroup();

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && this.TaxItemGroup)
                {
                    ret = ret && this.checkValidTaxCodes_IN();
                }
                break;
                // <GIN>

            case fieldNum(TSTimesheetLine, TaxGroupId):
                ret = this.checkTaxGroupId();
                break;

            case fieldNum(TSTimesheetLine, ProjectDataAreaId):
                ret = super(_fieldIdToCheck);

                if (!this.checkProjectDataAreaId())
                {
                    var worker = HcmWorker::worker2Name(TSResource::workerRecId(this.Resource));

                    ret = ret && checkFailed(strfmt("@Proj:CompanyIsNotValidLEForWorker", this.ProjectDataAreaId, worker));
                }
                break;
            default:
                ret = super(_fieldIdToCheck);
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the submition or resubmition of the timesheet document.
    /// </summary>
    /// <param name="showInfolog">
    /// A Boolean value that indicates whether to display the validation error messages.
    /// </param>
    /// <param name="deleteZeroHourLines">
    /// A Boolean value that indicates whether to delete the zero hour lines. Setting this to false does not delete the zero hour timesheet line and a workflow instance would be created for the timesheet line.
    /// </param>
    /// <returns>
    /// true if it is ok to submit the timesheet document; false if the action is canceled.
    /// </returns>
    public boolean validateSubmit(boolean showInfolog = true, boolean deleteZeroHourLines = true)
    {
        TSTimesheetLineWeek tsTimesheetLineWeek;
        TSTimesheetTrans    tsTimesheetTrans;
        boolean             updateTrans, updateLine;
        ProjSalesPriceEmpl  salesPrice;
        ProjParameters      projParameters;
        boolean             checkProjBudget = false;

        if (!this.ProjId || !this.CategoryId)
        {
            if (showInfolog)
            {
                return checkFailed("@SYS136548");
            }
            else
            {
                return false;
            }
        }
        else if (!this.LinePropertyId)
        {
            if (showInfolog)
            {
                return checkFailed("@SYS78499");
            }
            else
            {
                return false;
            }
        }
        else
        {
            select forupdate RecId,Hours,SalesPrice from tsTimesheetLineWeek where tsTimesheetLineWeek.tsTimesheetLine == this.RecId;

            // Delete the line only if the total hours is zero and the deleteZeroHourLines flag is set.
            if (tsTimesheetLineWeek.totalHours() == 0 && deleteZeroHourLines)
            {
                this.doDelete();
                return true;
            }

            changecompany(this.ProjectDataAreaId)
            {
                if (!this.checkProjId() || !this.checkActivity() || !new ProjValCheckTrans().validateMandatory(this))
                {
                    return false;
                }
                if (!this.TaxGroupId)
                {
                    this.TaxGroupId = ProjParameters::taxGroupInvoice(this.ProjId);
                    updateLine = true;
                }

                if (!this.TaxItemGroup)
                {
                    this.TaxItemGroup = ProjCategory::find(this.CategoryId).TaxItemGroupId;
                    updateLine = true;
                }
            }

            if (updateLine)
            {
                this.doUpdate();
            }

            if (tsTimesheetLineWeek.RecId != 0)
            {
                // Read project parameters to check if committed costs is enabled for timesheets
                projParameters = ProjParameters::find(false);

                if (projParameters.TrackCommittedCostTimesheets)
                {
                    ProjTable projTable = ProjTable::find(this.ProjId);
                    ProjCategory projCategory = ProjCategory::find(this.CategoryId);
                    ProjLineProperty projLineProperty = ProjLineProperty::find(this.LinePropertyId);

                    if (projTable && projCategory && projLineProperty)
                    {
                        LedgerDimensionDefaultAccount ledgerDimensionDefaultAccount = this.getProjectLedgerDimension(projTable, projCategory, null , projLineProperty, false);

                        if (!ledgerDimensionDefaultAccount)
                        {
                            return false;
                        }
                    }
                }

                while select forupdate tsTimesheetTrans
                order by ProjTransDate
                where tsTimesheetTrans.tsTimesheetLineWeek == tsTimesheetLineWeek.RecId
                {
                    updateTrans = false;

                    if (tsTimesheetTrans.CostPrice == 0)
                    {
                        tsTimesheetTrans.setCostPrice(this);
                        updateTrans = true;
                    }

                    if (tsTimesheetTrans.SalesPrice == 0)
                    {
                        tsTimesheetTrans.setSalesPrice(this);
                        updateTrans = true;
                    }

                    if (updateTrans)
                    {
                        tsTimesheetTrans.doUpdate();

                        if (projParameters.TrackCommittedCostTimesheets)
                        {
                            // We are specifying target accounting status of the source document line
                            // to be fully distributed because we need to calculate commited costs on submit
                            SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(tsTimesheetTrans,
                            false, SourceDocumentLineAccountingStatus::FullyDistributed);
                        }
                        else
                        {
                            // Submit source document implementation works faster with default parameters
                            // than when FullyDistributed is passed
                            SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(tsTimesheetTrans);
                        }

                        checkProjBudget = true;
                    }
                    else if (!projParameters.TrackCommittedCostTimesheets)
                    
                    {
                        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(tsTimesheetTrans);
                        checkProjBudget = true;
                    }
                    else if(this.isProjectBudgetControlEnabled())
                    {
                        SourceDocumentProcessorFacade::submitOnDemandSourceDocLineImpl(tsTimesheetTrans);
                    }
                    
                    if (checkProjBudget && this.isProjBudgetFailed(tsTimesheetTrans.SourceDocumentLine))
                    {
                        return false;
                    }

                    if (salesPrice == 0)
                    {
                        salesPrice = tsTimesheetTrans.SalesPrice;
                    }
                }

                tsTimesheetLineWeek.SalesPrice = salesPrice;
                tsTimesheetLineWeek.doUpdate();
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectLedgerDimension</Name>
				<Source><![CDATA[
    protected LedgerDimensionDefaultAccount getProjectLedgerDimension(
        ProjTable _projTable, 
        ProjCategory _projCategory, 
        ProjFundingSource _projFundingSource, 
        ProjLineProperty _projLineProperty, 
        boolean _isIntercompany)
    {
        return ProjectPosting::getProjectLedgerDimension(_projTable, _projCategory, _projFundingSource, _projLineProperty, _isIntercompany);
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusAllowEditLineProperty</Name>
				<Source><![CDATA[
	protected boolean statusAllowEditLineProperty(TSAppStatus _approvalStatus)
    {
        return _approvalStatus == TSAppStatus::Pending;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEditableFields</Name>
				<Source><![CDATA[
    public boolean checkEditableFields()
    {
        boolean ret = false;

        // LineProperty can be changed even in In Process state, so return true immediately
        if (this.statusAllowEditLineProperty(this.ApprovalStatus) && this.LinePropertyId != this.orig().LinePropertyId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
        ProjValCheckTrans projValCheckTrans = new ProjValCheckTrans();

        ret = super();

        if (this.CategoryId && !this.isCategoryValid(this.CategoryId))
        {
            ret = checkFailed(strFmt("@SYS135745", this.CategoryId));
        }

        if (!this.ProjectDataAreaId && Project::checkDataAreaAccessible(this.ProjectDataAreaId))
        {
            ret = false;
        }

        if (ret)
        {
            // Some fields can be changed even in In Process state, so return true immediately
            if (this.checkEditableFields())
            {
                return true;
            }

            if (this.anyUserFieldsHaveChanged())
            {
                if (! TSTimesheetValidation::isEditableStatus(this.ApprovalStatus))
                {
                    throw error("@SYS184126");
                }
            }

            changecompany(this.ProjectDataAreaId)
            {
                if (this.ProjId)
                {
                    ret = this.checkProjId() && ret;
                }

                if (this.CategoryId)
                {
                    ret = this.checkCategoryId() && ret;
                }

                if (this.ActivityNumber)
                {
                    ret = this.checkActivity() && ret;
                    if (!ret)
                    {
                        this.ActivityNumber = '';
                    }
                }

                ret = projValCheckTrans.validateMandatory(this) && ret;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryCompanyLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>Query</c> object for records of the <c>CompanyInfo</c> table where intercompany
    /// timesheets is enabled.
    /// </summary>
    /// <returns>
    /// A query that returns a list of companies with intercompany timesheets enabled.
    /// </returns>
    public static Query buildQueryCompanyLookup()
    {
        ProjIntercompanyParameters  projIntercompanyParameters;
        Query                       query;
        QueryBuildDataSource        queryBuildDataSource;

        query = new Query();
        queryBuildDataSource = query.addDataSource(tableNum(CompanyInfo));
        queryBuildDataSource.addOrderByField(fieldNum(CompanyInfo, DataArea), SortOrder::Ascending);
        queryBuildDataSource.addRange(fieldNum(CompanyInfo, DataArea)).value(curext());

        while select BorrowingLegalEntity from projIntercompanyParameters
            where projIntercompanyParameters.DataAreaId == curExt()
        {
            queryBuildDataSource.addRange(fieldNum(CompanyInfo, DataArea)).value(projIntercompanyParameters.BorrowingLegalEntity);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>Query</c> object that will be used for customer lookups for timesheet entries.
    /// </summary>
    /// <param name="_tsTimesheetLine">
    /// A <c>TSTimesheetLine</c> record.
    /// </param>
    /// <returns>
    /// A query that will be used for customer lookups.
    /// </returns>
    public static Query buildQueryCustomer(TSTimesheetLine _tsTimesheetLine)
    {
        var query = CustomerDataInteractorFactory::constructDefaultBaseQuery();

        if (_tsTimesheetLine.ProjectDataAreaId != curext())
        {
            query.allowCrossCompany(true);
            query.addCompanyRange(SysQuery::value(_tsTimesheetLine.ProjectDataAreaId));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryProjCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>Query</c> object that will be used for category lookups for timesheet entries.
    /// </summary>
    /// <param name="_tsTimesheetLine">
    /// A <c>TSTimesheetLine</c> record.
    /// </param>
    /// <returns>
    /// A query that is created based on the category-resource validation setup and filtered by project.
    /// </returns>
    public static Query buildQueryProjCategory(TSTimesheetLine _tsTimesheetLine)
    {
        Query                   query = new Query();
        ProjCategoryLookup      projCategoryLookup;
        boolean                 isInterCompany = (_tsTimesheetLine.ProjectDataAreaId != curext());

        changecompany(_tsTimesheetLine.ProjectDataAreaId)
        {
            projCategoryLookup = new ProjCategoryLookup();
            projCategoryLookup.parmCategoryType(ProjCategoryType::Hour);
            projCategoryLookup.parmIsIntercompany(isInterCompany);

            query = projCategoryLookup.buildQuery(tableNum(TSTimesheetLine), _tsTimesheetLine.ProjId,_tsTimesheetLine.Resource);
        }

        if (_tsTimesheetLine.ProjectDataAreaId != curext())
        {
            query.allowCrossCompany(true);
            query.addCompanyRange(SysQuery::value(_tsTimesheetLine.ProjectDataAreaId));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryProjLineProperty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>Query</c> object that will be used for project line property lookups for timesheet
    /// entries.
    /// </summary>
    /// <param name="_tsTimesheetLine">
    /// A <c>TSTimesheetLine</c> record.
    /// </param>
    /// <returns>
    /// A query that is filtered by project.
    /// </returns>
    public static Query buildQueryProjLineProperty(TSTimesheetLine _tsTimesheetLine)
    {
        Query                   query;
        QueryBuildDataSource    projLinePropertyQbds;

        query = new Query();
        projLinePropertyQbds = query.addDataSource(tableNum(ProjLineProperty));
        if (_tsTimesheetLine.ProjectDataAreaId != curext())
        {
            query.allowCrossCompany(true);
            query.addCompanyRange(SysQuery::value(_tsTimesheetLine.ProjectDataAreaId));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryProjTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>Query</c> object that will be used for project lookups for timesheet entries.
    /// </summary>
    /// <param name="_tsTimesheetLine">
    /// A <c>TSTimesheetLine</c> record.
    /// </param>
    /// <param name="_custAccount">
    /// A customer account; optional.
    /// </param>
    /// <returns>
    /// A query that is created based on the project-resource validation setup and customer account.
    /// </returns>
    public static Query buildQueryProjTable(TSTimesheetLine _tsTimesheetLine, CustAccount _custAccount = '')
    {
        Query                   query;
        Args                    args;
        ProjValCheckTrans       projValCheckTrans;
        ProjTableLookup         projTableLookup;
        ProjCategoryId          projCategoryId;
        ResourceRecId           resource;
        boolean                 isInterCompany = (_tsTimesheetLine.ProjectDataAreaId != curext());

        changecompany(_tsTimesheetLine.ProjectDataAreaId)
        {
            projValCheckTrans = new ProjValCheckTrans();
            args = new Args();
            args.record(_tsTimesheetLine);
            if (projValCheckTrans.checkBuffer(args))
            {
                projValCheckTrans.setVariablesFromBuffer(args, _tsTimesheetLine);
            }
            projCategoryId = projValCheckTrans.parmCategoryId();
            resource = projValCheckTrans.parmResource();

            projTableLookup = new ProjTableLookup();
            projTableLookup.parmCustAccount(_custAccount);
            projTableLookup.parmIsIntercompany(isInterCompany);

            query = projTableLookup.buildProjectLookupQueryResource(tableNum(TSTimesheetLine), projCategoryId, resource);
        }

        if (_tsTimesheetLine.ProjectDataAreaId != curext())
        {
            query.allowCrossCompany(true);
            query.addCompanyRange(SysQuery::value(_tsTimesheetLine.ProjectDataAreaId));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryProjectsForAbsence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>Query</c> object that will be used in the project lookup when selecting an absence project.
    /// </summary>
    /// <returns>A query of projects that represents what to show for what could be used as an absence project.</returns>
    /// <remarks>This will mimic the <c>TSTimesheetLine</c> project lookup with no additional validation or filters applied.</remarks>
    public static Query buildQueryProjectsForAbsence()
    {
        var projTableLookup = new ProjTableLookup();

        var query = projTableLookup.buildProjectLookupQueryResource(tableNum(TSTimesheetLine), '', 0);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuerySmmActivities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>Query</c> object that will be used for activity lookups for timesheet entries.
    /// </summary>
    /// <param name="_tsTimesheetLine">
    /// A <c>TSTimesheetLine</c> record.
    /// </param>
    /// <returns>
    /// A query of activities that are filtered by project.
    /// </returns>
    public static Query buildQuerySmmActivities(TSTimesheetLine _tsTimesheetLine)
    {
        Query                   query;
        QueryBuildDataSource    qbDataSource;
        QueryBuildRange         qbRange;
        ProjTable               projTable;
        HierarchyTreeTable      hierarchyTreeTable;
        HierarchyLinkTable      hierarchyLinkTable;
        HierarchyTreeLookup     hierarchyTreeLookup;
        smmActivities           smmActivities;

        select firstonly crossCompany RecId from projTable
            where projTable.ProjId == _tsTimesheetLine.ProjId
                && projTable.DataAreaId == _tsTimesheetLine.ProjectDataAreaId;

        hierarchyTreeLookup = new HierarchyTreeLookup();
        hierarchyTreeLookup.parmRefRecId(projTable.RecId);
        query = hierarchyTreeLookup.buildQueryListView(ProjParameters::find().BlockParentActivitySelection, TSTimesheetLine::buildQueryListViewShowClosedActivity(_tsTimesheetLine));

        if (_tsTimesheetLine.ProjectDataAreaId != curext())
        {
            query.allowCrossCompany(true);
            query.addCompanyRange(SysQuery::value(projTable.DataAreaId));
        }

        // Remove the root activity as it should not be shown in the dropdown
        select firstonly crossCompany ActivityNumber from smmActivities
                          join RecId from hierarchyTreeTable
                               where smmActivities.RecId                    == hierarchyTreeTable.RefRecId      &&
                                     hierarchyTreeTable.ParentElementNumber == ""
                          join HierarchyId, RefTableId, RefRecId from hierarchyLinkTable
                               where hierarchyLinkTable.HierarchyId         == hierarchyTreeTable.HierarchyId   &&
                                     hierarchyLinkTable.RefTableId          == tableNum(ProjTable)              &&
                                     hierarchyLinkTable.RefRecId            == projTable.RecId;

        qbDataSource = query.dataSourceTable(tableNum(smmActivities));
        qbRange      = qbDataSource.addRange(fieldNum(smmActivities, ActivityNumber));
        qbRange.value(SysQuery::valueNot(smmActivities.ActivityNumber));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryListViewShowClosedActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if closed activities should be included.
    /// </summary>
    /// <param name="_tsTimesheetLine">
    /// A <c>TSTimesheetLine</c> record.
    /// </param>
    /// <returns>
    /// false.
    /// </returns>
    /// <remarks>
    /// Add a post-method handler for returning a different value.
    /// </remarks>
    public static boolean buildQueryListViewShowClosedActivity(TSTimesheetLine _tsTimesheetLine)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryTaxGroupHeading</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>Query</c> object for the <c>TaxGroupHeading</c> table.
    /// </summary>
    /// <param name="_tsTimesheetLine">
    /// A <c>TSTimesheetLine</c> record.
    /// </param>
    /// <returns>
    /// A query that returns a list of tax groups.
    /// </returns>
    public static Query buildQueryTaxGroupHeading(TSTimesheetLine _tsTimesheetLine)
    {
        Query                   query;
        QueryBuildDataSource    taxGroupHeadingQbds;

        query = new Query();
        taxGroupHeadingQbds = query.addDataSource(tableNum(TaxGroupHeading));

        if (_tsTimesheetLine.ProjectDataAreaId != curext())
        {
            query.allowCrossCompany(true);
            query.addCompanyRange(SysQuery::value(_tsTimesheetLine.ProjectDataAreaId));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryTaxItemGroupHeading</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>Query</c> object for the <c>TaxItemGroupHeading</c> table.
    /// </summary>
    /// <param name="_tsTimesheetLine">
    /// A <c>TSTimesheetLine</c> record.
    /// </param>
    /// <returns>
    /// A query that returns a list of tax item groups.
    /// </returns>
    public static Query buildQueryTaxItemGroupHeading(TSTimesheetLine _tsTimesheetLine)
    {
        Query                   query;
        QueryBuildDataSource    taxItemGroupHeadingQbds;

        query = new Query();
        taxItemGroupHeadingQbds = query.addDataSource(tableNum(TaxItemGroupHeading));
        if (_tsTimesheetLine.ProjectDataAreaId != curext())
        {
            query.allowCrossCompany(true);
            query.addCompanyRange(SysQuery::value(_tsTimesheetLine.ProjectDataAreaId));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custSearchName2AccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customer account that match the search name passed in to the method.
    /// </summary>
    /// <param name="_custSearchName">
    /// String containing the customer search name.
    /// </param>
    /// <returns>
    /// A container that contains the customer account numbers.
    /// </returns>
    public static container custSearchName2AccountNum(CustName _custSearchName)
    {
        CustTable   custTable;
        DirPartyTable   dirPartyTable;
        container   res;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            while select AccountNum from custTable
            join NameAlias from dirPartyTable
                where dirPartyTable.NameAlias like _custSearchName
            {
                res += custTable.AccountNum;
            }
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableWFControl</Name>
				<Source><![CDATA[
    static boolean enableWFControl(TSTimesheetNbr _timesheetNbr)
    {
        TSTimesheetLine tsTimesheetLine;
        ;

        return (select firstonly RecId from tsTimesheetLine
                where tsTimesheetLine.TimesheetNbr == _timesheetNbr).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existFavorite</Name>
				<Source><![CDATA[
    static boolean existFavorite(TSTimesheetNbr _sTimesheetId, TSTimesheetFavorites _tFavorites, RefRecId _timesheetWeekRecId = 0)
    {
        return (select firstonly RecId from tsTimesheetLine
                index hint FavoritesIdx
                where tsTimesheetLine.TimesheetNbr == _sTimesheetId
                &&    tsTimesheetLine.ProjectDataAreaId == _tFavorites.ProjectDataAreaId
                &&    tsTimesheetLine.ProjId == _tFavorites.ProjId
                &&    tsTimesheetLine.ActivityNumber == _tFavorites.ActivityNumber
                &&    tsTimesheetLine.CategoryId == _tFavorites.CategoryId
                &&    tsTimesheetLine.ProjPeriodTimesheetWeek == _timesheetWeekRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTimesheet</Name>
				<Source><![CDATA[
    static boolean existTimesheet(TSTimesheetNbr _timesheetNbr)
    {
        return _timesheetNbr && (select firstonly RecId from tsTimesheetLine
                                index hint TimesheetLineIdx
                                where tsTimesheetLine.TimesheetNbr == _timesheetNbr).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static TSTimesheetLine find(TSTimesheetNbr  _sTimesheetNbr,
                            LineNum         _lineNum,
                            boolean         _bForUpdate = false)
    {
        TSTimesheetLine tTimesheetLine;

        if (_sTimesheetNbr)
        {
            tTimesheetLine.selectForUpdate(_bForUpdate);

            select firstonly tTimesheetLine
            index hint TimesheetLineIdx
            where tTimesheetLine.TimesheetNbr == _sTimesheetNbr &&
                  tTimesheetLine.LineNum == _lineNum;
        }
        return tTimesheetLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static TSTimesheetLine findRecId(RecId _iRecId, boolean _bForUpdate = false)
    {
        TSTimesheetLine tTimesheetLine;

        if (_iRecId)
        {
            tTimesheetLine.selectForUpdate(_bForUpdate);

            select firstonly tTimesheetLine
            where tTimesheetLine.RecId == _iRecId;
        }
        return tTimesheetLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the number of timesheet lines for a given timesheet record.
    /// </summary>
    /// <param name="_timesheetNbr">
    ///     The number of the timesheet.
    /// </param>
    /// <returns>
    ///     The number of timesheet lines for the given timesheet record.
    /// </returns>
    public static int getNumberOfLines(TSTimesheetNbr _timesheetNbr)
    {
        TSTimesheetLine tsTimesheetLine;

        select count(RecId) from tsTimesheetLine
            where tsTimesheetLine.TimesheetNbr == _timesheetNbr;

        return int642int(tsTimesheetLine.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ttsbegin;

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.TransitDocumentTransactionMap_IN::deleteTransitDocuments();
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@sys318121</DeveloperDocumentation>
	<Label>@SYS190460</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ProjId</TitleField1>
	<TitleField2>CategoryId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<CreatedTransactionId>Yes</CreatedTransactionId>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ModifiedTransactionId>Yes</ModifiedTransactionId>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>ResourceLineIdx</PrimaryIndex>
	<ReplacementKey>ResourceLineIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TimesheetNbr</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TimesheetNbr</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjPeriodTimesheetWeek</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Activity</Name>
			<Label>@SYS38381</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WrkCtrId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityComplete</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityRemaining</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Approval</Name>
			<Label>@SYS117460</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ApprovalStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApplyAction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApproverList</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EPM</Name>
			<Label>@SYS189948</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActivityComplete</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityRemaining</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IdentificationComments</Name>
			<Label>@SYS71295</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>projName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>activityTxt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IdentificationFee</Name>
			<Label>@SYS9154</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePropertyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IdentificationHour</Name>
			<Label>@SYS5269</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>projName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>activityTxt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePropertyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS22916</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Timesheet</Name>
			<Label>@SYS138979</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TimesheetNbr</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TimesheetLine</Name>
			<Label>@SYS190460</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>projName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>activityTxt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TSFavorites</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WrkCtrId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WebTransaction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjPeriodTimesheetWeek</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjectDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TimesheetLineDetails</Name>
			<Label>@SYS190461</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>projName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TSFavorites</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Workflow</Name>
			<Label>@SYS103643</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TimesheetNbr</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjectDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>totalWeekHours</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ActivityComplete</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TSActivityComplete</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ProjActivityNumber</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ActivityRemaining</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TSActivityRemaining</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ApplyAction</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<Label>@SYS110842</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ApprovalStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>TSAppStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>ApproverList</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TSApproverList</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CategoryId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ProjSalesCurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LinePropertyId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCompanySalesCurrency</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ProjSalesCurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjectDataAreaId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<Label>@SYS305493</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjPeriodTimesheetWeek</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroupId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ProjTaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ProjTaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TimesheetNbr</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TSTimesheetNbr</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TSFavorites</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TSFavorites</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WebTransaction</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WebTransaction</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WrkCtrId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WrkCtrId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Resource</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TSResourceRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>ProjWorkerRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TimesheetLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>TimesheetNbr</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjPeriodTimesheetWeek</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FavoritesIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>TimesheetNbr</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ActivityNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CategoryId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjPeriodTimesheetWeekIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjPeriodTimesheetWeek</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjectDataArea</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjectDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ResourceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ResourceLineIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TimesheetNbr</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjPeriodTimesheetWeek</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjDataAreaApprovalStatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjectDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ApprovalStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ActivityNumberIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ActivityNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjectDataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CreatedTransactionIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>CreatedTransactionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>ProjJournalTransMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ActivityNumber</MapField>
					<MapFieldTo>ActivityNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PeriodDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCategoryId</MapField>
					<MapFieldTo>CategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCostPrice</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjLinePropertyId</MapField>
					<MapFieldTo>LinePropertyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjSalesCurrencyId</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjSalesPrice</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTaxGroupId</MapField>
					<MapFieldTo>TaxGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTaxItemGroupId</MapField>
					<MapFieldTo>TaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTransDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Resource</MapField>
					<MapFieldTo>Resource</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Txt</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TSTimesheetLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>ProjSalesCurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntercompanyFinalSalesCurrency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>IntercompanyFinalCustomerCurrency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCompanySalesCurrency</Name>
					<Field>ProjCompanySalesCurrency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryId</Name>
					<SourceEDT>ProjCategoryId</SourceEDT>
					<Field>CategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CategoryType_Extern</Name>
					<RelatedField>CategoryType</RelatedField>
					<ValueStr>ProjCategoryType::Hour</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjectDataAreaId</Name>
					<Field>ProjectDataAreaId</Field>
					<RelatedField>DataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjLineProperty</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TSTimesheetLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjectDataAreaId</Name>
					<Field>ProjectDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LinePropertyId</Name>
					<Field>LinePropertyId</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjPeriodTimesheetWeek</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjPeriodTimesheetWeek</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjPeriodTimesheetWeek</Name>
					<Field>ProjPeriodTimesheetWeek</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>TSTimesheetLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjectDataAreaId</Name>
					<Field>ProjectDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmActivities</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TSTimesheetLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<SourceEDT>ProjActivityNumber</SourceEDT>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjectDataAreaId</Name>
					<Field>ProjectDataAreaId</Field>
					<RelatedField>DataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TSTimesheetLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroupId</Name>
					<SourceEDT>ProjTaxGroup</SourceEDT>
					<Field>TaxGroupId</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxItemGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TSTimesheetLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<SourceEDT>ProjTaxItemGroup</SourceEDT>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TSTimesheetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>TSTimesheetTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TimesheetNbr</Name>
					<Field>TimesheetNbr</Field>
					<RelatedField>TimesheetNbr</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WrkCtrTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WrkCtrTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WrkCtrTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TSTimesheetLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WrkCtrId</Name>
					<SourceEDT>WrkCtrId</SourceEDT>
					<Field>WrkCtrId</Field>
					<RelatedField>WrkCtrId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>IsIndividualResource_Extern</Name>
					<SourceEDT>WrkCtrId</SourceEDT>
					<RelatedField>IsIndividualResource</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Resource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceView</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ResResourceIdentifier</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>