<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSum</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventSum extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addInventSumDelta</Name>
				<Source><![CDATA[
    public void addInventSumDelta(InventSumDelta _inventSumDelta)
    {
        this.addInventSumDeltaQty(_inventSumDelta);
        this.addInventSumDeltaValues(_inventSumDelta);
        this.addInventSumDeltaDates(_inventSumDelta);
        if (InventSumInventDimDataUpdateToggle::instance().isEnabled())
        {
            this.initInventSumWithInventSumDelta(_inventSumDelta);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventSumDeltaDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets date fields that are based on the specified <c>InventSumDelta</c> buffer.
    /// </summary>
    /// <param name="_inventSumDelta">
    /// The <c>InventSumDelta</c> buffer from which to initialize.
    /// </param>
    private void addInventSumDeltaDates(InventSumDelta _inventSumDelta)
    {
        if (this.LastUpdDatePhysical < _inventSumDelta.LastUpdDatePhysical)
        {
            this.LastUpdDatePhysical  = _inventSumDelta.LastUpdDatePhysical;
        }
        if (this.LastUpdDateExpected < _inventSumDelta.LastUpdDateExpected)
        {
            this.LastUpdDateExpected  = _inventSumDelta.LastUpdDateExpected;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventSumDeltaQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets quantity fields based on the specified <c>InventSumDelta</c> buffer.
    /// </summary>
    /// <param name="_inventSumDelta">
    /// The <c>InventSumDelta</c> buffer to initialize from.
    /// </param>
    public void addInventSumDeltaQty(InventSumDelta _inventSumDelta)
    {
        this.PostedQty        += _inventSumDelta.PostedQty;
        this.Deducted         += _inventSumDelta.Deducted;
        this.Received         += _inventSumDelta.Received;
        this.ReservPhysical   += _inventSumDelta.ReservPhysical;
        this.ReservOrdered    += _inventSumDelta.ReservOrdered;
        this.OnOrder          += _inventSumDelta.OnOrder;
        this.Ordered          += _inventSumDelta.Ordered;
        this.QuotationIssue   += _inventSumDelta.QuotationIssue;
        this.QuotationReceipt += _inventSumDelta.QuotationReceipt;
        this.Registered       += _inventSumDelta.Registered;
        this.Picked           += _inventSumDelta.Picked;
        this.AvailOrdered     += _inventSumDelta.AvailOrdered;
        this.AvailPhysical    += _inventSumDelta.AvailPhysical;
        this.Arrived          += _inventSumDelta.Arrived;
        this.PhysicalInvent   += _inventSumDelta.PhysicalInvent;

        this.PdsCWPostedQty         += _inventSumDelta.PdsCWPostedQty;
        this.PdsCWDeducted          += _inventSumDelta.PdsCWDeducted;
        this.PdsCWReceived          += _inventSumDelta.PdsCWReceived;
        this.PdsCWReservPhysical    += _inventSumDelta.PdsCWReservPhysical;
        this.PdsCWReservOrdered     += _inventSumDelta.PdsCWReservOrdered;
        this.PdsCWOnOrder           += _inventSumDelta.PdsCWOnOrder;
        this.PdsCWOrdered           += _inventSumDelta.PdsCWOrdered;
        this.PdsCWQuotationIssue    += _inventSumDelta.PdsCWQuotationIssue;
        this.PdsCWQuotationReceipt  += _inventSumDelta.PdsCWQuotationReceipt;
        this.PdsCWRegistered        += _inventSumDelta.PdsCWRegistered;
        this.PdsCWPicked            += _inventSumDelta.PdsCWPicked;
        this.PdsCWAvailOrdered      += _inventSumDelta.PdsCWAvailOrdered;
        this.PdsCWAvailPhysical     += _inventSumDelta.PdsCWAvailPhysical;
        this.PdsCWArrived           += _inventSumDelta.PdsCWArrived;
        this.PdsCWPhysicalInvent    += _inventSumDelta.PdsCWPhysicalInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventSumDeltaValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets value fields that are based on the specified <c>InventSumDelta</c> buffer.
    /// </summary>
    /// <param name="_inventSumDelta">
    /// The <c>InventSumDelta</c> buffer from which to initialize.
    /// </param>
    public void addInventSumDeltaValues(InventSumDelta _inventSumDelta)
    {
        this.PostedValue      += _inventSumDelta.PostedValue;
        this.PhysicalValue    += _inventSumDelta.PhysicalValue;
        // <GEERU>
        this.PhysicalValueSecCur_RU += _inventSumDelta.PhysicalValueSecCur_RU;
        this.PostedValueSecCur_RU   += _inventSumDelta.PostedValueSecCur_RU;
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransDatesOnSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the relevant dates on this record based on the specified <c>InventTrans</c> buffer.
    /// </summary>
    /// <param name="_inventTrans">
    /// The <c>InventTrans</c> record from which to retrieve dates.
    /// </param>
    public void addInventTransDatesOnSum(InventTrans _inventTrans)
    {
        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        this.checkInvalidFieldAccess(false);

        if (_inventTrans.DatePhysical)
        {
            this.LastUpdDatePhysical = _inventTrans.DatePhysical;
        }
        else if (_inventTrans.DateInvent)
        {
            this.LastUpdDatePhysical = _inventTrans.DateInvent;
        }
        else if (_inventTrans.DateExpected)
        {
            this.LastUpdDateExpected = _inventTrans.DateExpected;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransOnSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the quantities and values of the specified <c>InventTrans</c> table buffer to this record.
    /// </summary>
    /// <param name="_inventTrans">
    /// The <c>InventTrans</c> record to add to this record.
    /// </param>
    /// <param name="_inventDimIdTransferIssue">
    ///    An <c>InventDimId</c> ID for the matching issue transaction for a transfer. This parameter is optional but can be passed to improve performance.
    /// </param>
    public void addInventTransOnSum(InventTrans _inventTrans, InventDimId _inventDimIdTransferIssue = '')
    {
        this.addInventTransQtyOnSum(_inventTrans);

        if (_inventTrans.StatusReceipt != StatusReceipt::None)
        {
            // only update dates when receiving items
            if (_inventTrans.isTransfer())
            {
                // Note: Can only determine if it is a transfer if InventTransOrigin field is selected/specified!
                this.setLastUpdDatesFromTransferIssue(_inventTrans, _inventDimIdTransferIssue);
            }
            else
            {
                this.addInventTransDatesOnSum(_inventTrans);
            }
        }

        this.addInventTransValuesOnSum(_inventTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransQtyOnSum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the quantity of the specified <c>InventTrans</c> buffer to this record.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The <c>InventTrans</c> record to add to this record.
    /// </param>
    public void addInventTransQtyOnSum(InventTrans _inventTrans)
    {
        if (_inventTrans.StatusReceipt== StatusReceipt::None)
        {
            switch (_inventTrans.StatusIssue)
            {
                case StatusIssue::Sold:
                    this.PostedQty          += _inventTrans.Qty;
                    this.PdsCWPostedQty     += _inventTrans.PdsCWQty;
                    break;
                case StatusIssue::Deducted:
                    this.Deducted           -= _inventTrans.Qty;
                    this.PdsCWDeducted      -= _inventTrans.PdsCWQty;
                    break;
                case StatusIssue::Picked:
                    this.Picked             -= _inventTrans.Qty;
                    this.PdsCWPicked        -= _inventTrans.PdsCWQty;
                    break;
                case StatusIssue::ReservPhysical:
                    this.ReservPhysical     -= _inventTrans.Qty;
                    this.PdsCWReservPhysical-= _inventTrans.PdsCWQty;
                    break;
                case StatusIssue::ReservOrdered:
                    this.ReservOrdered      -= _inventTrans.Qty;
                    this.PdsCWReservOrdered -= _inventTrans.PdsCWQty;
                    break;
                case StatusIssue::OnOrder:
                    this.OnOrder            -= _inventTrans.Qty;
                    this.PdsCWOnOrder       -= _inventTrans.PdsCWQty;
                    break;
                case StatusIssue::QuotationIssue:
                    this.QuotationIssue     -= _inventTrans.Qty;
                    this.PdsCWQuotationIssue-= _inventTrans.PdsCWQty;
                    break;
                default:
            }
        }
        else
        {
            switch (_inventTrans.StatusReceipt)
            {
                case StatusReceipt::Purchased:
                    this.PostedQty          += _inventTrans.Qty;
                    this.PdsCWPostedQty     += _inventTrans.PdsCWQty;
                    break;
                case StatusReceipt::Received:
                    this.Received           += _inventTrans.Qty;
                    this.PdsCWReceived      += _inventTrans.PdsCWQty;
                    break;
                case StatusReceipt::Registered:
                    this.Registered         += _inventTrans.Qty;
                    this.PdsCWRegistered    += _inventTrans.PdsCWQty;
                    break;
                case StatusReceipt::Arrived:
                    this.Arrived            += _inventTrans.Qty;
                    this.PdsCWArrived       += _inventTrans.PdsCWQty;
                    break;
                case StatusReceipt::Ordered:
                    this.Ordered            += _inventTrans.Qty;
                    this.PdsCWOrdered       += _inventTrans.PdsCWQty;
                    break;
                case StatusReceipt::QuotationReceipt:
                    this.QuotationReceipt       += _inventTrans.Qty;
                    this.PdsCWQuotationReceipt  += _inventTrans.PdsCWQty;
                    break;
                default:
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransValuesOnSum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the values of the specified <c>InventTrans</c> buffer to this record.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The <c>InventTrans</c> record to add to this record.
    /// </param>
    public void addInventTransValuesOnSum(InventTrans _inventTrans)
    {
        this.PostedValue += _inventTrans.costValue();
        this.PostedValueSecCur_RU += _inventTrans.costValueSecCur_RU();

        if (_inventTrans.isUpdatedPhysical())
        {
            this.PhysicalValue += _inventTrans.CostAmountPhysical;
            // <GEERU>
            this.PhysicalValueSecCur_RU += _inventTrans.CostAmountSecCurPhysical_RU;
            // </GEERU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransValuesOnSumWithoutRoundOff</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the values of the specified <c>InventTrans</c> buffer to this record without rounding off.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The <c>InventTrans</c> record to add to this record.
    /// </param>
    public void addInventTransValuesOnSumWithoutRoundOff(InventTrans _inventTrans)
    {
        this.PostedValue += _inventTrans.CostAmountPosted + _inventTrans.CostAmountAdjustment;
        this.PostedValueSecCur_RU += _inventTrans.CostAmountSecCurPosted_RU + _inventTrans.CostAmountSecCurAdjustment_RU;

        if (_inventTrans.isUpdatedPhysical())
        {
            this.PhysicalValue += _inventTrans.CostAmountPhysical;
            // <GEERU>
            this.PhysicalValueSecCur_RU += _inventTrans.CostAmountSecCurPhysical_RU;
            // </GEERU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>availOrderedCalculated</Name>
				<Source><![CDATA[
    display public InventQtyAvailOrdered   availOrderedCalculated(boolean _inclAvailPhysical = true)
    {
        return (_inclAvailPhysical ? this.availPhysicalCalculated() : 0) + this.Ordered + this.Arrived - this.ReservOrdered - this.OnOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>availPhysicalCalculated</Name>
				<Source><![CDATA[
    display public InventQtyAvailPhysical availPhysicalCalculated()
    {
        return (this.physicalInventCalculated() - this.ReservPhysical);
    }

]]></Source>
			</Method>
			<Method>
				<Name>availReservation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the quantity available for reservation.
    /// </summary>
    /// <param name="_reserveOnOrdered">
    ///    A Boolean value that defines if on order quantities are included; optional.
    /// </param>
    /// <param name="_inventDimId">
    ///    The inventory dimension ID to display the ordered quantity for; optional.
    /// </param>
    /// <returns>
    ///    The quantity available for reservation.
    /// </returns>
    display public InventQtyAvailReservation  availReservation(
        NoYes       _reserveOnOrdered = NoYes::Yes,
        InventDimId _inventDimId      = '')
    {
        InventQtyAvailReservation   availReservation;

        if (   _reserveOnOrdered
                && !PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            availReservation = this.availOrderedCalculated() + this.OnOrder;
        }
        else
        {
            availReservation = this.availPhysicalCalculated();
        }

        return availReservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>averageCostPrice</Name>
				<Source><![CDATA[
    display public CostPriceAverage  averageCostPrice()
    {
        return this.costPricePcs();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventTransBeUpdated</Name>
				<Source><![CDATA[
    public boolean canInventTransBeUpdated(InventTrans _inventTrans)
    {
        if (_inventTrans.ItemId         != this.ItemId           ||
            _inventTrans.InventDimId    != this.InventDimId)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPricePcs</Name>
				<Source><![CDATA[
    display public CostPrice costPricePcs(
        boolean      _onHandOnly = false,
        PriceDate    _priceDate  = maxDate())
    {
        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        this.checkInvalidFieldAccess(false);

        if (this.IsExcludedFromInventoryValue)
        {
            return 0;
        }

        InventModelGroup    inventModelGroup;
        InventModelType     inventModelType;

        inventModelGroup = InventTable::find(this.ItemId).modelGroup();
        inventModelType = inventModelGroup.inventModelType();
        return inventModelType.costPricePcs(this, inventModelGroup, _onHandOnly, _priceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPriceSecCurPcs_RU</Name>
				<Source><![CDATA[
    display CostPrice costPriceSecCurPcs_RU(
        boolean   _onHandOnly = false,
        PriceDate _priceDate  = maxDate())
    {
        if (this.IsExcludedFromInventoryValue)
        {
            return 0;
        }

        InventModelGroup    inventModelGroup = InventTable::find(this.ItemId).modelGroup();

        CostAmount  value = (this.PostedValueSecCur_RU) + (inventModelGroup.InclPhysicalValueInCost ? (this.PhysicalValueSecCur_RU)   : 0);
        InventQty   qty   = (this.PostedQty)            + (inventModelGroup.InclPhysicalValueInCost ? (this.Received - this.Deducted) : 0);

        if (_onHandOnly)
        {
            if (qty <= 0 || value <= 0)
            {
                return 0;
            }
        }
        else
        {
            if (qty <= 0 || value <= 0 || inventModelGroup.StandardCost || inventModelGroup.inventModelTypeSecCur_RU().stdCostBased())
            {
                return InventTable::findCostPcsPriceSecCur_RU(this.ItemId, this.InventDimId, this.inventDim(), _priceDate);
            }
        }

        return value / qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAvailOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the available ordered quantity.
    /// </summary>
    /// <param name="_inventDimId">
    ///    The inventory dimension ID to display the ordered quantity for; optional.
    /// </param>
    /// <returns>
    ///    The available ordered quantity.
    /// </returns>
    /// <remarks>
    ///    Call this method only, if the information cannot be retrieved in another way.
    ///    If the item in question is not a WHS item, then the field value can be used directly.
    ///    If the item is a WHS item, there may be other ways to retrieve the information faster
    ///    (for example through InventAvailabilityFormCache class).
    /// </remarks>
    [SysClientCacheDataMethodAttribute(true)]
    public display InventQtyAvailOrdered displayAvailOrdered(InventDimId _inventDimId = InventDim::inventDimIdBlank())
    {
        WHSInventReserveQty     whsInventReserveQty = this.whsInventReserveQty(InventDim::find(_inventDimId));

        return whsInventReserveQty ? whsInventReserveQty.availOrdered() : this.AvailOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAvailPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the available physical quantity.
    /// </summary>
    /// <param name="_inventDimId">
    ///    The inventory dimension ID to display the ordered quantity for; optional.
    /// </param>
    /// <returns>
    ///    The available physical quantity.
    /// </returns>
    /// <remarks>
    ///    Call this method only, if the information cannot be retrieved in another way.
    ///    If the item in question is not a WHS item, then the field value can be used directly.
    ///    If the item is a WHS item, there may be other ways to retrieve the information faster
    ///    (for example through WHSInventOnHandFormCache class).
    /// </remarks>
    [SysClientCacheDataMethodAttribute(true)]
    public display InventQtyAvailPhysical displayAvailPhysical(InventDimId _inventDimId = InventDim::inventDimIdBlank())
    {
        WHSInventReserveQty     whsInventReserveQty = this.whsInventReserveQty(InventDim::find(_inventDimId));

        return whsInventReserveQty ? whsInventReserveQty.availPhysical() : this.AvailPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOpenTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Queries whether any open <c>InventTrans</c> records exist for the item and dimension combination
    ///    related to the current record.
    /// </summary>
    /// <returns>
    ///    true if an open <c>InventTrans</c> record exists; otherwise, false.
    /// </returns>
    public boolean hasOpenTransactions()
    {
        return (select firstonly inventTrans
                where inventTrans.InventDimId       == this.InventDimId
                  &&  inventTrans.ItemId            == this.ItemId
                  &&  inventTrans.StatusIssue       != StatusIssue::Sold
                  &&  inventTrans.StatusReceipt     != StatusReceipt::Purchased).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTransactions</Name>
				<Source><![CDATA[
    private boolean hasTransactions()
    {
        return (select firstonly inventTrans
                where inventTrans.InventDimId       == this.InventDimId
                  &&  inventTrans.ItemId            == this.ItemId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTrans</Name>
				<Source><![CDATA[
    public void initFromInventTrans(InventTrans _inventTrans)
    {
        this.ItemId             = _inventTrans.ItemId;
        this.InventDimId        = _inventTrans.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsExcludedFromInventoryValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the the <c>InventSum</c> record should be included in the inventory value.
    /// </summary>
    public void setIsExcludedFromInventoryValue()
    {
        InventDim inventDim = InventDim::find(this.InventDimId);

        if (inventDim)
        {
            this.IsExcludedFromInventoryValue = !inventDim.isOwnerCurrentLegalEntity();
        }
        else
        {
            this.IsExcludedFromInventoryValue = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.ClosedQty = this.isAllQtyFieldsZero();
        this.Closed    = this.isAllValueFieldsZero() && this.ClosedQty;
        this.setAvailFields();
        this.setIsExcludedFromInventoryValue();

        if (InventSumInventDimDataUpdateToggle::instance().isEnabled())
        {
            this.initInventSumWithInventDim();
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventBatchId</Name>
				<Source><![CDATA[
    display public InventBatchId inventBatchId()
    {
        return InventDim::find(this.InventDimId).InventBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    public InventDim   inventDim()
    {
        return InventDim::find(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationId</Name>
				<Source><![CDATA[
    display public InventLocationId inventLocationId()
    {
        return InventDim::find(this.InventDimId).InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSerialId</Name>
				<Source><![CDATA[
    display public InventSerialId inventSerialId()
    {
        return InventDim::find(this.InventDimId).InventSerialId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable(boolean _forupdate = false)
    {
        return InventTable::find(this.ItemId,_forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAllFieldsZero</Name>
				<Source><![CDATA[
    public boolean isAllFieldsZero()
    {
        return (this.PostedQty          == 0  &&
                this.PostedValue        == 0  &&
                this.PhysicalValue      == 0  &&
                this.Deducted           == 0  &&
                this.Picked             == 0  &&
                this.Received           == 0  &&
                this.Registered         == 0  &&
                this.ReservPhysical     == 0  &&
                this.ReservOrdered      == 0  &&
                this.OnOrder            == 0  &&
                this.Arrived            == 0  &&
                this.Ordered            == 0  &&
                this.QuotationReceipt   == 0  &&
                this.QuotationIssue     == 0
                // <GEERU>
                &&
                this.PostedValueSecCur_RU   == 0 &&
                this.PhysicalValueSecCur_RU == 0
                // </GEERU>
                );
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAllQtyFieldsZero</Name>
				<Source><![CDATA[
    public boolean isAllQtyFieldsZero()
    {
        return (this.PostedQty          == 0  &&
                this.Deducted           == 0  &&
                this.Picked             == 0  &&
                this.Received           == 0  &&
                this.Registered         == 0  &&
                this.ReservPhysical     == 0  &&
                this.ReservOrdered      == 0  &&
                this.OnOrder            == 0  &&
                this.Arrived            == 0  &&
                this.Ordered            == 0  &&
                this.QuotationReceipt   == 0  &&
                this.QuotationIssue     == 0 );
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAllValueFieldsZero</Name>
				<Source><![CDATA[
    public boolean isAllValueFieldsZero()
    {
        return (this.PostedValue            == 0
            &&  this.PhysicalValue          == 0
            &&  this.PostedValueSecCur_RU   == 0
            &&  this.PhysicalValueSecCur_RU == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    display public ItemNameDisplay itemName()
    {
        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        this.checkInvalidFieldAccess(false);

        if (this.InventDimId)
        {
            return this.inventTable().itemName(InventDim::find(this.InventDimId));
        }
        return this.inventTable().itemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPhysicalDate</Name>
				<Source><![CDATA[
    public DatePhysical lastPhysicalDate(
        InventDim       _inventDimCriteria  = null,
        InventDimParm   _inventDimParm      = null)
    {
        Enumerator trackingDims = inventTrackingDimension::getEnumeratorForSelectiveDimensions();
        while (trackingDims.moveNext())
        {
            InventTrackingDimension dimension = trackingDims.current() as InventTrackingDimension;

            if (_inventDimParm.(dimension.parmInventDimParmFieldId()) 
                && _inventDimCriteria.(dimension.parmInventDimFieldId()))
            {
                #Query

                Query query = new Query();
                query.literals(#QueryForcePlaceholders);

                QueryBuildDataSource qbdsInventDim = query.addDataSource(tableNum(InventDim));

                InventDim::queryAddRangeCriteriaForSelectedDims(qbdsInventDim, _inventDimCriteria, _inventDimParm);
                qbdsInventDim.addSelectionField(fieldNum(InventDim, TableId));
                IndexId indexHint = dimension.indexHintForTable(tableNum(InventDim));
                if (indexHint)
                {
                    qbdsInventDim.addSortIndex(indexHint);
                    qbdsInventDim.indexIsHint(true);
                }
                QueryBuildDataSource qbdsInventTrans = qbdsInventDim.addDataSource(tableNum(InventTrans));

                qbdsInventTrans.addSelectionField(fieldNum(InventTrans, DatePhysical), SelectionField::Max);
                qbdsInventTrans.addLink(fieldNum(InventDim, InventDimId), fieldNum(InventTrans, InventDimId));
                qbdsInventTrans.addRange(fieldNum(InventTrans, ItemId)).value(queryValue(this.ItemId));
                qbdsInventTrans.addSortIndex(indexNum(InventTrans, DimIdIdx));
                qbdsInventTrans.indexIsHint(true);

                QueryRun queryRun = new QueryRun(query);
                if (queryRun.next())
                {
                    InventTrans result = queryRun.get(tableNum(InventTrans));
                    return result.DatePhysical;
                }

                return dateNull();
            }
        }

        InventTrans inventTrans;
        InventDim   inventDim;

        select maxof(DatePhysical) from inventTrans
            where inventTrans.ItemId == this.ItemId
        #InventDimExistsJoin(inventTrans.InventDimId,InventDim,_inventDimCriteria,_inventDimParm);

        return inventTrans.DatePhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>merge</Name>
				<Source><![CDATA[
    public void merge(Common _mergeInto)
    {
        InventSum mergeIntoSum;
        if (_mergeInto is InventSum)
        {
            mergeIntoSum = _mergeInto as InventSum;
            mergeIntoSum.PostedQty        += this.PostedQty;
            mergeIntoSum.PostedValue      += this.PostedValue;
            mergeIntoSum.Deducted         += this.Deducted;
            mergeIntoSum.Received         += this.Received;
            mergeIntoSum.ReservPhysical   += this.ReservPhysical;
            mergeIntoSum.ReservOrdered    += this.ReservOrdered;
            mergeIntoSum.OnOrder          += this.OnOrder;
            mergeIntoSum.Ordered          += this.Ordered;
            mergeIntoSum.QuotationIssue   += this.QuotationIssue;
            mergeIntoSum.QuotationReceipt += this.QuotationReceipt;
            mergeIntoSum.Registered       += this.Registered;
            mergeIntoSum.Picked           += this.Picked;
            mergeIntoSum.AvailOrdered     += this.AvailOrdered;
            mergeIntoSum.AvailPhysical    += this.AvailPhysical;
            mergeIntoSum.PhysicalValue    += this.PhysicalValue;
            mergeIntoSum.Arrived          += this.Arrived;
            mergeIntoSum.PhysicalInvent   += this.PhysicalInvent;

            mergeIntoSum.PdsCWPostedQty        += this.PdsCWPostedQty;
            mergeIntoSum.PdsCWDeducted         += this.PdsCWDeducted;
            mergeIntoSum.PdsCWReceived         += this.PdsCWReceived;
            mergeIntoSum.PdsCWReservPhysical   += this.PdsCWReservPhysical;
            mergeIntoSum.PdsCWReservOrdered    += this.PdsCWReservOrdered;
            mergeIntoSum.PdsCWOnOrder          += this.PdsCWOnOrder;
            mergeIntoSum.PdsCWOrdered          += this.PdsCWOrdered;
            mergeIntoSum.PdsCWQuotationIssue   += this.PdsCWQuotationIssue;
            mergeIntoSum.PdsCWQuotationReceipt += this.PdsCWQuotationReceipt;
            mergeIntoSum.PdsCWRegistered       += this.PdsCWRegistered;
            mergeIntoSum.PdsCWPicked           += this.PdsCWPicked;
            mergeIntoSum.PdsCWAvailOrdered     += this.PdsCWAvailOrdered;
            mergeIntoSum.PdsCWAvailPhysical    += this.PdsCWAvailPhysical;
            mergeIntoSum.PdsCWArrived          += this.PdsCWArrived;
            mergeIntoSum.PdsCWPhysicalInvent   += this.PdsCWPhysicalInvent;

            // <GEERU>
            mergeIntoSum.PhysicalValueSecCur_RU   += this.PhysicalValueSecCur_RU;
            mergeIntoSum.PostedValueSecCur_RU     += this.PostedValueSecCur_RU;
            // </GEERU>
            if (mergeIntoSum.LastUpdDatePhysical < this.LastUpdDatePhysical)
            {
                mergeIntoSum.LastUpdDatePhysical  = this.LastUpdDatePhysical;
            }
            if (mergeIntoSum.LastUpdDateExpected < this.LastUpdDateExpected)
            {
                mergeIntoSum.LastUpdDateExpected  = this.LastUpdDateExpected;
            }
            mergeIntoSum.ClosedQty                      = mergeIntoSum.isAllQtyFieldsZero();
            mergeIntoSum.Closed                         = mergeIntoSum.isAllValueFieldsZero() && mergeIntoSum.ClosedQty;
        }

        super(_mergeInto);
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderedSum</Name>
				<Source><![CDATA[
    display public inventQtyOrderedSum orderedSum()
    {
        return this.Ordered + this.Arrived;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsAddSum</Name>
				<Source><![CDATA[
    public void pdsAddSum(InventSum _inventSum)
    {
        if (this.ItemId == _inventSum.ItemId
            && this.InventDimId == _inventSum.InventDimId)
        {
            this.AvailOrdered           += _inventSum.AvailOrdered;
            this.AvailPhysical          += _inventSum.AvailPhysical;
            this.Deducted               += _inventSum.Deducted;
            this.OnOrder                += _inventSum.OnOrder;
            this.Ordered                += _inventSum.Ordered;
            this.PhysicalInvent         += _inventSum.PhysicalInvent;
            this.Picked                 += _inventSum.Picked;
            this.PostedQty              += _inventSum.PostedQty;
            this.QuotationIssue         += _inventSum.QuotationIssue;
            this.QuotationReceipt       += _inventSum.QuotationReceipt;
            this.Received               += _inventSum.Received;
            this.Registered             += _inventSum.Registered;
            this.ReservOrdered          += _inventSum.ReservOrdered;
            this.ReservPhysical         += _inventSum.ReservPhysical;
            this.PdsCWArrived           += _inventSum.PdsCWArrived;
            this.PdsCWAvailOrdered      += _inventSum.PdsCWAvailOrdered;
            this.PdsCWAvailPhysical     += _inventSum.PdsCWAvailPhysical;
            this.PdsCWDeducted          += _inventSum.PdsCWDeducted;
            this.PdsCWOnOrder           += _inventSum.PdsCWOnOrder;
            this.PdsCWOrdered           += _inventSum.PdsCWOrdered;
            this.PdsCWPhysicalInvent    += _inventSum.PdsCWPhysicalInvent;
            this.PdsCWPicked            += _inventSum.PdsCWPicked;
            this.PdsCWPostedQty         += _inventSum.PdsCWPostedQty;
            this.PdsCWQuotationIssue    += _inventSum.PdsCWQuotationIssue;
            this.PdsCWQuotationReceipt  += _inventSum.PdsCWQuotationReceipt;
            this.PdsCWReceived          += _inventSum.PdsCWReceived;
            this.PdsCWRegistered        += _inventSum.PdsCWRegistered;
            this.PdsCWReservOrdered     += _inventSum.PdsCWReservOrdered;
            this.PdsCWReservPhysical    += _inventSum.PdsCWReservPhysical;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsClearSum</Name>
				<Source><![CDATA[
    public void pdsClearSum()
    {
        this.AvailOrdered           = 0;
        this.AvailPhysical          = 0;
        this.Deducted               = 0;
        this.OnOrder                = 0;
        this.Ordered                = 0;
        this.PhysicalInvent         = 0;
        this.Picked                 = 0;
        this.PostedQty              = 0;
        this.QuotationIssue         = 0;
        this.QuotationReceipt       = 0;
        this.Received               = 0;
        this.Registered             = 0;
        this.ReservOrdered          = 0;
        this.ReservPhysical         = 0;
        this.PdsCWArrived           = 0;
        this.PdsCWAvailOrdered      = 0;
        this.PdsCWAvailPhysical     = 0;
        this.PdsCWDeducted          = 0;
        this.PdsCWOnOrder           = 0;
        this.PdsCWOrdered           = 0;
        this.PdsCWPhysicalInvent    = 0;
        this.PdsCWPicked            = 0;
        this.PdsCWPostedQty         = 0;
        this.PdsCWQuotationIssue    = 0;
        this.PdsCWQuotationReceipt  = 0;
        this.PdsCWReceived          = 0;
        this.PdsCWRegistered        = 0;
        this.PdsCWReservOrdered     = 0;
        this.PdsCWReservPhysical    = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCustExpiredPhysical</Name>
				<Source><![CDATA[
    public container pdsCustExpiredPhysical(
        PdsSellableDays             _sellDays,
        SalesReceiptDateRequested   _dateReq,
        InventDim                   _inventDim,
        InventBatch                 _inventBatch = null
        )
    {
        InventModelGroup    inventModelGroup;

        InventSum           inventSum;
        InventBatch         inventBatch;

        InventTable         inventTable = this.inventTable();

        if (#PdsShelfEnabled
            && inventTable.isItemBatchActivated())
        {
            inventModelGroup = this.inventTable().modelGroup();
            
            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                if (_inventBatch && !_inventDim.InventBatchId)
                {
                    select sum(PhysicalInvent), sum(PdsCWPhysicalInvent)
                    from inventSum
                    group by ItemId
                    where inventSum.ClosedQty       == NoYes::No
                        && inventSum.ItemId         == this.ItemId
                        && inventSum.InventBatchId  == _inventBatch.InventBatchId
                        && (_inventDim.InventLocationId     == ''
                            || inventSum.InventLocationId   == _inventDim.InventLocationId)
                        && (_inventDim.InventSiteId         == ''
                            || inventSum.InventSiteId       == _inventDim.InventSiteId)
                    join TableId
                    from inventBatch
                    where inventBatch.InventBatchId                 == inventSum.InventBatchId
                        && inventBatch.ItemId                       == this.ItemId
                        && ((inventModelGroup.PdsPickCriteria       == PdsPickCriteria::BestBeforeDate
                                && inventBatch.PdsBestBeforeDate    > _dateReq + _sellDays)
                            || (inventModelGroup.PdsPickCriteria    == PdsPickCriteria::ExpiryDate
                                && inventBatch.ExpDate              < _dateReq + _sellDays-1))
                        &&  inventBatch.ExpDate                     != dateNull();
                }
                else
                {
                    select sum(PhysicalInvent), sum(PdsCWPhysicalInvent)
                    from inventSum
                    group by ItemId
                    where inventSum.ClosedQty       == NoYes::No
                        && inventSum.ItemId         == this.ItemId
                        && (_inventDim.InventBatchId         == ''
                            || inventSum.InventBatchId      == _inventDim.InventBatchId)
                        && (_inventDim.InventLocationId     == ''
                            || inventSum.InventLocationId   == _inventDim.InventLocationId)
                        && (_inventDim.InventSiteId         == ''
                            || inventSum.InventSiteId       == _inventDim.InventSiteId)
                    join TableId
                    from inventBatch
                    where inventBatch.InventBatchId                 == inventSum.InventBatchId
                        && inventBatch.ItemId                       == this.ItemId
                        && ((inventModelGroup.PdsPickCriteria       == PdsPickCriteria::BestBeforeDate
                                && inventBatch.PdsBestBeforeDate    > _dateReq + _sellDays)
                            || (inventModelGroup.PdsPickCriteria    == PdsPickCriteria::ExpiryDate
                                && inventBatch.ExpDate              < _dateReq+ _sellDays-1))
                        &&  inventBatch.ExpDate                     != dateNull();
                }
            }
            else
            {
                InventDim           inventDim;

                if (_inventBatch && !_inventDim.InventBatchId)
                {
                    select sum(PhysicalInvent), sum(PdsCWPhysicalInvent)
                    from inventSum
                    group by ItemId
                    where inventSum.ClosedQty  == NoYes::No
                        && inventSum.ItemId     == this.ItemId
                    join TableId
                    from inventDim
                    where inventDim.InventDimId             == inventSum.InventDimId
                        && inventDim.InventBatchId          == _inventBatch.InventBatchId
                        && (!_inventDim.InventLocationId
                            || inventDim.InventLocationId   == _inventDim.InventLocationId)
                        && (!_inventDim.InventSiteId
                            || inventDim.InventSiteId       == _inventDim.InventSiteId)
                    join TableId
                    from inventBatch
                    where inventBatch.InventBatchId                 == inventDim.InventBatchId
                        && inventBatch.ItemId                       == this.ItemId
                        && ((inventModelGroup.PdsPickCriteria       == PdsPickCriteria::BestBeforeDate
                                && inventBatch.PdsBestBeforeDate    > _dateReq + _sellDays)
                            || (inventModelGroup.PdsPickCriteria    == PdsPickCriteria::ExpiryDate
                                && inventBatch.ExpDate              < _dateReq + _sellDays-1))
                        &&  inventBatch.ExpDate                     != dateNull();
                }
                else
                {
                    select sum(PhysicalInvent), sum(PdsCWPhysicalInvent)
                    from inventSum
                    group by ItemId
                    where inventSum.ClosedQty  == NoYes::No
                        && inventSum.ItemId     == this.ItemId
                    join TableId
                    from inventDim
                    where inventDim.InventDimId             == inventSum.InventDimId
                        && (!_inventDim.InventBatchId
                            || inventDim.InventBatchId      == _inventDim.InventBatchId)
                        && (!_inventDim.InventLocationId
                            || inventDim.InventLocationId   == _inventDim.InventLocationId)
                        && (!_inventDim.InventSiteId
                            || inventDim.InventSiteId       == _inventDim.InventSiteId)
                    join TableId
                    from inventBatch
                    where inventBatch.InventBatchId                 == inventDim.InventBatchId
                        && inventBatch.ItemId                       == this.ItemId
                        && ((inventModelGroup.PdsPickCriteria       == PdsPickCriteria::BestBeforeDate
                                && inventBatch.PdsBestBeforeDate    > _dateReq + _sellDays)
                            || (inventModelGroup.PdsPickCriteria    == PdsPickCriteria::ExpiryDate
                                && inventBatch.ExpDate              < _dateReq+ _sellDays-1))
                        &&  inventBatch.ExpDate                     != dateNull();
                }
            }
        }

        return [inventSum.PhysicalInvent, inventSum.PdsCWPhysicalInvent];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWAvailOrderedCalculated</Name>
				<Source><![CDATA[
    public display PdsCWAvailOrdered  pdsCWAvailOrderedCalculated(
        boolean _inclAvailPhysical = true)
    {
        return (_inclAvailPhysical ? this.pdsCWAvailPhysicalCalculated() : 0)
            + this.PdsCWOrdered
            + this.PdsCWArrived
            - this.PdsCWReservOrdered
            - this.PdsCWOnOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWAvailPhysicalCalculated</Name>
				<Source><![CDATA[
    public display PdsCWAvailPhysical pdsCWAvailPhysicalCalculated()
    {
        return (this.pdsCWPhysicalInventCalculated() - this.PdsCWReservPhysical);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWAvailReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves available for reservation inventory quantity in catch weight unit.
    /// </summary>
    /// <param name="_reserveOnOrdered">
    /// A <c>NoYes</c> parameter that specifies if reservation against ordered items should be allowed.
    /// </param>
    /// <returns>
    /// Available for reservation inventory quantity in catch weight unit.
    /// </returns>
    public display PdsCWAvailReservation pdsCWAvailReservation(NoYes _reserveOnOrdered = NoYes::Yes)
    {
        if (_reserveOnOrdered)
        {
            return this.pdsCWAvailOrderedCalculated() + this.PdsCWOnOrder;
        }

        return this.pdsCWAvailPhysicalCalculated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWOrderedSum</Name>
				<Source><![CDATA[
    public display PdsCWInventQtyOrderedSum pdsCWOrderedSum()
    {
        return this.PdsCWOrdered + this.PdsCWArrived;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWPhysicalInventCalculated</Name>
				<Source><![CDATA[
    public display PdsCWPhysicalInvent pdsCWPhysicalInventCalculated()
    {
        return this.PdsCWPostedQty
            + this.PdsCWReceived
            - this.PdsCWDeducted
            + this.PdsCWRegistered
            - this.PdsCWPicked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the catch weight unit of the item that is related to the current record.
    /// </summary>
    /// <returns>
    /// The catch weight unit of the item.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsExpiredPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the total physical inventory for batches that have expired.
    /// </summary>
    /// <param name="_inventDim">
    ///    A record for the <c>InventDim</c> table containing the criteria site, warehouse, and batch to search.
    /// </param>
    /// <param name="_inventBatch">
    ///    A record for the <c>InventBatch</c> table containing the batch to check; optional. This will only be used
    ///    if the inventory batch field in <paramref name="_inventDim"/> is empty.
    /// </param>
    /// <returns>
    ///    A container of two elements with the total inventory and total catch weight inventory for all the matching expired batches.
    /// </returns>
    public container pdsExpiredPhysical(
        InventDim   _inventDim,
        InventBatch _inventBatch = null)
    {
        InventSum               inventSum;
        InventDim               inventDim;
        InventTable             inventTable = this.inventTable();
        InventShelfLifeCriteria criteria;
        InventDimParm           inventDimParm;
        Query                   query;

        if (#PdsShelfEnabled
            && inventTable.PdsShelfLife
            && inventTable.isItemBatchActivated())
        {
            inventDim.data(_inventDim);
            if (!inventDim.InventBatchId && _inventBatch)
            {
                inventDim.InventBatchId = _inventBatch.InventBatchId;
            }
            inventDimParm.ItemIdFlag            = NoYes::Yes;
            #InventDimDevelop
            inventDimParm.InventSiteIdFlag      = (inventDim.InventSiteId     != "");
            inventDimParm.InventLocationIdFlag  = (inventDim.InventLocationId != "");
            inventDimParm.InventBatchIdFlag     = (inventDim.InventBatchId    != "");

            criteria = InventShelfLifeCriteria::newItemExpiry(this.ItemId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            criteria.parmSelectExpired(true);
            query = InventSum::newQuery(null, this.ItemId, inventDim, inventDimParm, null);
            criteria.applyToOnHand(query);
            inventSum = criteria.mergeMatchingRecords(query, tableNum(InventSum));
        }

        return [inventSum.PhysicalInvent, inventSum.PdsCWPhysicalInvent];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsNonNetPhysical</Name>
				<Source><![CDATA[
    public container pdsNonNetPhysical(
        InventDim   _inventDim,
        InventBatch _inventBatch = null)
    {
        InventSum               inventSum;
        boolean                 shelflifeItem;
        InventTable             inventTable = this.inventTable();

        if (#PdsEnabled
            && this.PhysicalInvent
            && inventTable.isItemBatchActivated())
        {
            shelflifeItem = inventTable.isShelfLifeItem();

            if (shelflifeItem)
            {
                inventSum = this.pdsNonNetPhysicalSLItem(_inventDim,_inventBatch);
            }
            else
            {
                inventSum = this.pdsNonNetPhysicalNonSL(_inventDim,_inventBatch);
            }
        }

        return [inventSum.PhysicalInvent, inventSum.PdsCWPhysicalInvent];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsNonNetPhysicalNonSL</Name>
				<Source><![CDATA[
    private InventSum pdsNonNetPhysicalNonSL(
        InventDim   _inventDim,
        InventBatch _inventBatch = null)
    {
        InventSum               inventSum;
        InventBatch             inventBatch;
        PdsDispositionMaster    dispositionMaster;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            if (_inventBatch && !_inventDim.InventBatchId)
            {
                select sum(PhysicalInvent), sum(PdsCWPhysicalInvent)
                from inventSum
                group by ItemId
                where inventSum.ClosedQty       == NoYes::No
                    && inventSum.ItemId         == this.ItemId
                    && inventSum.InventBatchId  == _inventBatch.InventBatchId
                    && (_inventDim.InventLocationId     == '' 
                        || inventSum.InventLocationId   == _inventDim.InventLocationId)
                    && (_inventDim.InventSiteId         == ''
                        || inventSum.InventSiteId       == _inventDim.InventSiteId)
                join TableId
                from inventBatch
                where inventBatch.InventBatchId == inventSum.InventBatchId
                    && inventBatch.ItemId       == this.ItemId
                join TableId
                from dispositionMaster
                where dispositionMaster.DispositionCode
                        == inventBatch.PdsDispositionCode
                    && dispositionMaster.Status == PdsStatus::Unavailable
                    && !dispositionMaster.PdsNettable;
            }
            else
            {
                select sum(PhysicalInvent), sum(PdsCWPhysicalInvent)
                from inventSum
                group by ItemId
                where inventSum.ClosedQty   == NoYes::No
                    && inventSum.ItemId     == this.ItemId
                    && (_inventDim.InventBatchId        == '' 
                        || inventSum.InventBatchId      == _inventDim.InventBatchId)
                    && (_inventDim.InventLocationId     == '' 
                        || inventSum.InventLocationId   == _inventDim.InventLocationId)
                    && (_inventDim.InventSiteId         == ''
                        || inventSum.InventSiteId       == _inventDim.InventSiteId)
                join TableId
                from inventBatch
                where inventBatch.InventBatchId == inventSum.InventBatchId
                    && inventBatch.ItemId       == this.ItemId
                join TableId
                from dispositionMaster
                where dispositionMaster.DispositionCode
                        == inventBatch.PdsDispositionCode
                    && dispositionMaster.Status == PdsStatus::Unavailable
                    && !dispositionMaster.PdsNettable;
            }
        }
        else
        {
            InventDim               inventDim;

            if (_inventBatch && !_inventDim.InventBatchId)
            {
                select sum(PhysicalInvent), sum(PdsCWPhysicalInvent)
                from inventSum
                group by ItemId
                where inventSum.ClosedQty == NoYes::No
                    && inventSum.ItemId == this.ItemId
                join TableId
                from inventDim
                where inventDim.InventDimId == inventSum.InventDimId
                    && inventDim.InventBatchId == _inventBatch.InventBatchId
                    && (!_inventDim.InventLocationId
                        || inventDim.InventLocationId
                            == _inventDim.InventLocationId)
                    && (!_inventDim.InventSiteId
                        || inventDim.InventSiteId == _inventDim.InventSiteId)
                join TableId
                from inventBatch
                where inventBatch.InventBatchId == inventDim.InventBatchId
                    && inventBatch.ItemId       == this.ItemId
                join TableId
                from dispositionMaster
                where dispositionMaster.DispositionCode
                        == inventBatch.PdsDispositionCode
                    && dispositionMaster.Status == PdsStatus::Unavailable
                    && !dispositionMaster.PdsNettable;
            }
            else
            {
                select sum(PhysicalInvent), sum(PdsCWPhysicalInvent)
                from inventSum
                group by ItemId
                where inventSum.ClosedQty == NoYes::No
                    && inventSum.ItemId == this.ItemId
                join TableId
                from inventDim
                where inventDim.InventDimId == inventSum.InventDimId
                    && (!_inventDim.InventBatchId
                        || inventDim.InventBatchId == _inventDim.InventBatchId)
                    && (!_inventDim.InventLocationId
                        || inventDim.InventLocationId
                            == _inventDim.InventLocationId)
                    && (!_inventDim.InventSiteId
                        || inventDim.InventSiteId == _inventDim.InventSiteId)
                join TableId
                from inventBatch
                where inventBatch.InventBatchId == inventDim.InventBatchId
                    && inventBatch.ItemId       == this.ItemId
                join TableId
                from dispositionMaster
                where dispositionMaster.DispositionCode
                        == inventBatch.PdsDispositionCode
                    && dispositionMaster.Status == PdsStatus::Unavailable
                    && !dispositionMaster.PdsNettable;
            }
        }

        return inventSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsNonNetPhysicalSLItem</Name>
				<Source><![CDATA[
    private InventSum pdsNonNetPhysicalSLItem(
        InventDim   _inventDim,
        InventBatch _inventBatch = null)
    {
        InventModelGroup    inventModelGroup;

        InventSum               inventSum;
        InventBatch             inventBatch;
        PdsDispositionMaster    dispositionMaster;

        TransDate               bestBeforeDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())-1;

        inventModelGroup = this.inventTable().modelGroup();
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            if (_inventBatch && !_inventDim.InventBatchId)
            {
                select sum(PhysicalInvent), sum(PdsCWPhysicalInvent)
                from inventSum
                group by ItemId
                where  inventSum.ClosedQty      == NoYes::No
                    && inventSum.ItemId         == this.ItemId
                    && inventSum.InventBatchId  == _inventBatch.InventBatchId
                    && (_inventDim.InventLocationId     == ''
                        || inventSum.InventLocationId   == _inventDim.InventLocationId)
                    && (_inventDim.InventSiteId         == ''
                        || inventSum.InventSiteId       == _inventDim.InventSiteId)
                join TableId
                from inventBatch
                where  inventBatch.InventBatchId                == inventSum.InventBatchId
                    && inventBatch.ItemId                       == this.ItemId
                    && !((inventModelGroup.PdsPickCriteria      == PdsPickCriteria::BestBeforeDate
                            && inventBatch.PdsBestBeforeDate    < bestBeforeDate)
                        || (inventModelGroup.PdsPickCriteria    == PdsPickCriteria::ExpiryDate
                            && inventBatch.ExpDate              < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
                join TableId
                from dispositionMaster
                where dispositionMaster.DispositionCode == inventBatch.PdsDispositionCode
                    && dispositionMaster.Status         == PdsStatus::Unavailable
                    && !dispositionMaster.PdsNettable;
            }
            else
            {
                select sum(PhysicalInvent), sum(PdsCWPhysicalInvent)
                from inventSum
                group by ItemId
                where  inventSum.ClosedQty  == NoYes::No
                    && inventSum.ItemId     == this.ItemId
                    && (_inventDim.InventBatchId        == ''
                        || inventSum.InventBatchId      == _inventDim.InventBatchId)
                    && (_inventDim.InventLocationId     == ''
                        || inventSum.InventLocationId   == _inventDim.InventLocationId)
                    && (_inventDim.InventSiteId         == ''
                        || inventSum.InventSiteId       == _inventDim.InventSiteId)
                join TableId
                from inventBatch
                where  inventBatch.InventBatchId                == inventSum.InventBatchId
                    && inventBatch.ItemId                       == this.ItemId
                    && !((inventModelGroup.PdsPickCriteria      == PdsPickCriteria::BestBeforeDate
                            && inventBatch.PdsBestBeforeDate    < bestBeforeDate)
                        || (inventModelGroup.PdsPickCriteria    == PdsPickCriteria::ExpiryDate
                            && inventBatch.ExpDate              < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
                join TableId
                from dispositionMaster
                where dispositionMaster.DispositionCode == inventBatch.PdsDispositionCode
                    && dispositionMaster.Status         == PdsStatus::Unavailable
                    && !dispositionMaster.PdsNettable;
            }
        }
        else
        {
            InventDim               inventDim;

            if (_inventBatch && !_inventDim.InventBatchId)
            {
                select sum(PhysicalInvent), sum(PdsCWPhysicalInvent)
                from inventSum
                group by ItemId
                where  inventSum.ClosedQty  == NoYes::No
                    && inventSum.ItemId     == this.ItemId
                join TableId
                from inventDim
                where  inventDim.InventDimId            == inventSum.InventDimId
                    && inventDim.InventBatchId          == _inventBatch.InventBatchId
                    && (!_inventDim.InventLocationId
                        || inventDim.InventLocationId   == _inventDim.InventLocationId)
                    && (!_inventDim.InventSiteId
                        || inventDim.InventSiteId       == _inventDim.InventSiteId)
                join TableId
                from inventBatch
                where  inventBatch.InventBatchId                == inventDim.InventBatchId
                    && inventBatch.ItemId                       == this.ItemId
                    && !((inventModelGroup.PdsPickCriteria      == PdsPickCriteria::BestBeforeDate
                            && inventBatch.PdsBestBeforeDate    < bestBeforeDate)
                        || (inventModelGroup.PdsPickCriteria    == PdsPickCriteria::ExpiryDate
                            && inventBatch.ExpDate              < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
                join TableId
                from dispositionMaster
                where dispositionMaster.DispositionCode == inventBatch.PdsDispositionCode
                    && dispositionMaster.Status         == PdsStatus::Unavailable
                    && !dispositionMaster.PdsNettable;
            }
            else
            {
                select sum(PhysicalInvent), sum(PdsCWPhysicalInvent)
                from inventSum
                group by ItemId
                where  inventSum.ClosedQty  == NoYes::No
                    && inventSum.ItemId     == this.ItemId
                join TableId
                from inventDim
                where  inventDim.InventDimId            == inventSum.InventDimId
                    && (!_inventDim.InventBatchId
                        || inventDim.InventBatchId      == _inventDim.InventBatchId)
                    && (!_inventDim.InventLocationId
                        || inventDim.InventLocationId   == _inventDim.InventLocationId)
                    && (!_inventDim.InventSiteId
                        || inventDim.InventSiteId       == _inventDim.InventSiteId)
                join TableId
                from inventBatch
                where  inventBatch.InventBatchId                == inventDim.InventBatchId
                    && inventBatch.ItemId                       == this.ItemId
                    && !((inventModelGroup.PdsPickCriteria      == PdsPickCriteria::BestBeforeDate
                            && inventBatch.PdsBestBeforeDate    < bestBeforeDate)
                        || (inventModelGroup.PdsPickCriteria    == PdsPickCriteria::ExpiryDate
                            && inventBatch.ExpDate              < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
                join TableId
                from dispositionMaster
                where dispositionMaster.DispositionCode == inventBatch.PdsDispositionCode
                    && dispositionMaster.Status         == PdsStatus::Unavailable
                    && !dispositionMaster.PdsNettable;
            }
        }

        return inventSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsSubSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subtract the value of one InventSum record from another.
    /// </summary>
    /// <param name="_subFrom">
    /// The InventSum Record from which to subtract.
    /// </param>
    /// <returns>
    /// Returns resulting InventSum record
    /// </returns>
    /// <remarks>
    /// The current InventSum record is subtracted from the record passed in
    /// via the _subFrom parameter.
    /// </remarks>
    public InventSum pdsSubSum(InventSum _subFrom)
    {
        _subFrom.PostedQty          -= this.PostedQty;
        _subFrom.PostedValue        -= this.PostedValue;
        _subFrom.Deducted           -= this.Deducted;
        _subFrom.Received           -= this.Received;
        _subFrom.ReservPhysical     -= this.ReservPhysical;
        _subFrom.ReservOrdered      -= this.ReservOrdered;
        _subFrom.OnOrder            -= this.OnOrder;
        _subFrom.Ordered            -= this.Ordered;
        _subFrom.QuotationIssue     -= this.QuotationIssue;
        _subFrom.QuotationReceipt   -= this.QuotationReceipt;
        _subFrom.Registered         -= this.Registered;
        _subFrom.Picked             -= this.Picked;
        _subFrom.AvailOrdered       -= this.AvailOrdered;
        _subFrom.AvailPhysical      -= this.AvailPhysical;
        _subFrom.PhysicalValue      -= this.PhysicalValue;
        _subFrom.Arrived            -= this.Arrived;
        _subFrom.PhysicalInvent     -= this.PhysicalInvent;

        _subFrom.PdsCWPostedQty         -= this.PdsCWPostedQty;
        _subFrom.PdsCWDeducted          -= this.PdsCWDeducted;
        _subFrom.PdsCWReceived          -= this.PdsCWReceived;
        _subFrom.PdsCWReservPhysical    -= this.PdsCWReservPhysical;
        _subFrom.PdsCWReservOrdered     -= this.PdsCWReservOrdered;
        _subFrom.PdsCWOnOrder           -= this.PdsCWOnOrder;
        _subFrom.PdsCWOrdered           -= this.PdsCWOrdered;
        _subFrom.PdsCWQuotationIssue    -= this.PdsCWQuotationIssue;
        _subFrom.PdsCWQuotationReceipt  -= this.PdsCWQuotationReceipt;
        _subFrom.PdsCWRegistered        -= this.PdsCWRegistered;
        _subFrom.PdsCWPicked            -= this.PdsCWPicked;
        _subFrom.PdsCWAvailOrdered      -= this.PdsCWAvailOrdered;
        _subFrom.PdsCWAvailPhysical     -= this.PdsCWAvailPhysical;
        _subFrom.PdsCWArrived           -= this.PdsCWArrived;
        _subFrom.PdsCWPhysicalInvent    -= this.PdsCWPhysicalInvent;

        _subFrom.ClosedQty                      = _subFrom.isAllQtyFieldsZero();
        _subFrom.Closed                         = _subFrom.isAllValueFieldsZero() && _subFrom.ClosedQty;

        return _subFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>physicalInventCalculated</Name>
				<Source><![CDATA[
    display public InventQtyPhysicalOnhand physicalInventCalculated()
    {
        return this.PostedQty + this.Received - this.Deducted + this.Registered - this.Picked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAvailFields</Name>
				<Source><![CDATA[
    public void setAvailFields()
    {
        this.AvailOrdered   = this.availOrderedCalculated();
        this.AvailPhysical  = this.availPhysicalCalculated();
        this.PhysicalInvent = this.physicalInventCalculated();

        this.PdsCWAvailOrdered  = this.pdsCWAvailOrderedCalculated();
        this.PdsCWAvailPhysical = this.pdsCWAvailPhysicalCalculated();
        this.PdsCWPhysicalInvent = this.pdsCWPhysicalInventCalculated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLastUpdDatesFromTransferIssue</Name>
				<Source><![CDATA[
    private void setLastUpdDatesFromTransferIssue(
        InventTrans _inventTransReceipt,
        InventDimId _inventDimIdTransferIssue = '')
    {
        InventTransOriginId         issueInventTransOriginId;
        InventTrans                 inventTrans;
        InventTrans                 inventTrans2;
        InventSum                   inventSumIssue;
        InventJournalTrans          inventJournalTrans;
        InventQuarantineOrder       inventQuarantineOrder;
        InventTransferLine          inventTransferLine;
        InventTransferTable         inventTransferTable;
        KanbanJob                   kanbanJob;

        InventDimParm               inventDimParmTransfer;
        InventDim                   inventDimTransferIssue;
        InventDim                   inventDimIssue;
        InventDimId                 inventDimIdFrom = '';
        InventTransOrigin           receiptInventTransOrigin;

        boolean issueTransactionExists(InventDimId inventDimId)
        {
            InventTrans inventTransLocal;

            select firstonly RecId from inventTransLocal
                where inventTransLocal.InventDimId          == inventDimId
                   && inventTransLocal.InventTransOrigin    == issueInventTransOriginId
                   && inventTransLocal.StatusReceipt        == StatusReceipt::None
                   && inventTransLocal.Qty                   < 0;

            return (inventTransLocal.RecId != 0);
        }

        void mergeDimWithOwnerAndTest(InventDim _inventDimOwner)
        {
            InventDim   inventDimIssueLocal;

            inventDimIssueLocal.data(_inventTransReceipt.inventDim());
            inventDimIssueLocal.mergeUsedDim(InventDimGroupSetup::newItemId(_inventTransReceipt.ItemId), _inventDimOwner);
            inventDimIssueLocal = InventDim::findOrCreate(inventDimIssueLocal);
            if (inventDimIssueLocal.InventDimId != _inventTransReceipt.InventDimId && issueTransactionExists(inventDimIssueLocal.InventDimId))
            {
                inventDimIdFrom = inventDimIssueLocal.InventDimId;
            }
        }

        if (_inventDimIdTransferIssue)
        {
            inventSumIssue = InventSum::find(_inventTransReceipt.ItemId,_inventDimIdTransferIssue);
            if (inventSumIssue.RecId)
            {
                this.LastUpdDateExpected = inventSumIssue.LastUpdDateExpected;
                this.LastUpdDatePhysical = inventSumIssue.LastUpdDatePhysical;
            }
            else
            {
                // When updating invent transaction, the related InventSum may not exists, it will be inserted into database later.
                // In this case, we need to query dates of inventSumDelta.
                InventSumDelta inventSumDelta;
                select maxOf(LastUpdDateExpected), maxOf(LastUpdDatePhysical) from inventSumDelta
                    where inventSumDelta.ItemId             == this.ItemId
                        && inventSumDelta.InventDimId       == inventTrans.InventDimId
                        && inventSumDelta.SQLTransactionID  == InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().sqlTransactionId();

                if (inventSumDelta.LastUpdDateExpected)
                {
                    this.LastUpdDateExpected = inventSumDelta.LastUpdDateExpected;
                }
                if (inventSumDelta.LastUpdDatePhysical)
                {
                    this.LastUpdDatePhysical = inventSumDelta.LastUpdDatePhysical;
                }
            }
            return;
        }

        issueInventTransOriginId = _inventTransReceipt.transferInventTransOrigin().RecId;
        receiptInventTransOrigin    = _inventTransReceipt.inventTransOrigin();
        // If all issues have same inventDimId then use that to find dates for transferred items
        select firstonly InventDimId from inventTrans
            where inventTrans.InventTransOrigin == issueInventTransOriginId
               && inventTrans.StatusReceipt     == StatusReceipt::None
            notexists join inventTrans2
                where inventTrans2.InventTransOrigin    == inventTrans.InventTransOrigin
                   && inventTrans2.StatusReceipt        == StatusReceipt::None
                   && inventTrans2.InventDimId          != inventTrans.InventDimId;

        if (inventTrans.InventDimId)
        {
            if (_inventTransReceipt.InventDimId != inventTrans.InventDimId)
            {
                inventSumIssue = InventSum::find(receiptInventTransOrigin.ItemId, inventTrans.InventDimId);
                if (inventSumIssue.RecId)
                {
                    this.LastUpdDateExpected = inventSumIssue.LastUpdDateExpected;
                    this.LastUpdDatePhysical = inventSumIssue.LastUpdDatePhysical;
                }
            }
            return;
        }

        switch (receiptInventTransOrigin.ReferenceCategory)
        {
            case InventTransType::InventTransfer:
                // for transfer journal it isn't possible to narrow the issue transactions much.
                inventJournalTrans = _inventTransReceipt.inventJournalTrans();
                if (inventJournalTrans.RecId)
                {
                    mergeDimWithOwnerAndTest(inventJournalTrans.inventDim());
                }
                break;

            case InventTransType::QuarantineOrder:
                inventQuarantineOrder = InventTransOriginQuarantineOrder::inventQuarantineOrder(receiptInventTransOrigin.RecId);
                if (inventQuarantineOrder.RecId)
                {
                    mergeDimWithOwnerAndTest(inventQuarantineOrder.inventDim());
                }
                break;

            case InventTransType::TransferOrderShip,
                 InventTransType::TransferOrderReceive:
                if (receiptInventTransOrigin.ReferenceCategory == InventTransType::TransferOrderShip)
                {
                    inventTransferLine = InventTransOriginTransferTransitTo::inventTransferLine(receiptInventTransOrigin.RecId);
                }
                else
                {
                    inventTransferLine = InventTransOriginTransferReceive::inventTransferLine(receiptInventTransOrigin.RecId);
                }
                if (inventTransferLine)
                {
                    inventTransferTable = inventTransferLine.inventTransferTable();
                    issueInventTransOriginId = InventTransOriginTransferShip::findInventTransOriginId(inventTransferLine.DataAreaId, inventTransferLine.TransferId, inventTransferLine.LineNum);
                    inventDimIssue = InventDim::find(_inventTransReceipt.InventDimId);
                    inventDimIssue.InventLocationId = inventTransferTable.InventLocationIdFrom;
                    inventDimIssue.initFromInventLocation(inventDimIssue.inventLocation());
                    inventDimParmTransfer.setAllInventDim();
                    inventDimParmTransfer.wmsLocationIdFlag = NoYes::No; // location won't be the same

                    select firstonly inventTrans
                        where inventTrans.InventTransOrigin == issueInventTransOriginId
                           && inventTrans.StatusReceipt     == StatusReceipt::None
                           && inventTrans.Qty                < 0
                        #InventDimExistsJoin(inventTrans.inventDimId, inventDimTransferIssue, inventDimIssue, inventDimParmTransfer);
                    if (inventTrans.RecId)
                    {
                        inventDimIdFrom = inventTrans.InventDimId;
                    }
                }
                break;
            case InventTransType::KanbanJobTransferReceipt:
                kanbanJob = InventTransOriginKanbanJobTrsReceipt::kanbanJob(receiptInventTransOrigin.RecId);
                if (kanbanJob.RecId)
                {
                    mergeDimWithOwnerAndTest(kanbanJob.issueInventDim());
                }
                break;
            case InventTransType::KanbanJobTransferIssue:
                kanbanJob = InventTransOriginKanbanJobTrsIssue::kanbanJob(receiptInventTransOrigin.RecId);
                if (kanbanJob.RecId)
                {
                    mergeDimWithOwnerAndTest(kanbanJob.issueInventDim());
                }
                break;
        }

        if (!inventDimIdFrom)
        {
            return;
        }

        inventSumIssue = InventSum::find(_inventTransReceipt.ItemId, inventDimIdFrom);
        if (inventSumIssue.RecId)
        {
            this.LastUpdDateExpected = inventSumIssue.LastUpdDateExpected;
            this.LastUpdDatePhysical = inventSumIssue.LastUpdDatePhysical;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>subInventTransOnSum</Name>
				<Source><![CDATA[
    public void subInventTransOnSum(InventTrans _inventTrans)
    {
        if (_inventTrans.StatusReceipt == StatusReceipt::None)
        {
            switch (_inventTrans.StatusIssue)
            {
                case StatusIssue::Sold:
                    this.PostedQty          -= _inventTrans.Qty;
                    this.PostedValue        -= _inventTrans.costValue();
                    this.PdsCWPostedQty     -= _inventTrans.PdsCWQty;
                    break;
                case StatusIssue::Deducted:
                    this.Deducted           += _inventTrans.Qty;
                    this.PdsCWDeducted      += _inventTrans.PdsCWQty;
                    break;
                case StatusIssue::Picked:
                    this.Picked             += _inventTrans.Qty;
                    this.PdsCWPicked        += _inventTrans.PdsCWQty;
                    break;
                case StatusIssue::ReservPhysical:
                    this.ReservPhysical      += _inventTrans.Qty;
                    this.PdsCWReservPhysical += _inventTrans.PdsCWQty;
                    break;
                case StatusIssue::ReservOrdered:
                    this.ReservOrdered      += _inventTrans.Qty;
                    this.PdsCWReservOrdered += _inventTrans.PdsCWQty;
                    break;
                case StatusIssue::OnOrder:
                    this.OnOrder            += _inventTrans.Qty;
                    this.PdsCWOnOrder       += _inventTrans.PdsCWQty;
                    break;
                case StatusIssue::QuotationIssue:
                    this.QuotationIssue      += _inventTrans.Qty;
                    this.PdsCWQuotationIssue += _inventTrans.PdsCWQty;
                    break;
                default:
            }
        }
        else
        {
            switch (_inventTrans.StatusReceipt)
            {
                case StatusReceipt::Purchased:
                    this.PostedQty      -= _inventTrans.Qty;
                    this.PostedValue    -= _inventTrans.costValue();
                    this.PdsCWPostedQty -= _inventTrans.PdsCWQty;
                    break;
                case StatusReceipt::Received:
                    this.Received       -= _inventTrans.Qty;
                    this.PdsCWReceived  -= _inventTrans.PdsCWQty;
                    break;
                case StatusReceipt::Registered:
                    this.Registered      -= _inventTrans.Qty;
                    this.PdsCWRegistered -= _inventTrans.PdsCWQty;
                    break;
                case StatusReceipt::Arrived:
                    this.Arrived        -= _inventTrans.Qty;
                    this.PdsCWArrived   -= _inventTrans.PdsCWQty;
                    break;
                case StatusReceipt::Ordered:
                    this.Ordered        -= _inventTrans.Qty;
                    this.PdsCWOrdered   -= _inventTrans.PdsCWQty;
                    break;
                case StatusReceipt::QuotationReceipt:
                    this.QuotationReceipt       -= _inventTrans.Qty;
                    this.PdsCWQuotationReceipt  -= _inventTrans.PdsCWQty;
                    break;
                default:
            }
        }

        this.PostedValueSecCur_RU -= _inventTrans.costValueSecCur_RU();

        if (_inventTrans.isUpdatedPhysical())
        {
            this.PhysicalValue          -= _inventTrans.CostAmountPhysical;
            this.PhysicalValueSecCur_RU -= _inventTrans.CostAmountSecCurPhysical_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.ClosedQty = this.isAllQtyFieldsZero();
        this.Closed    = this.isAllValueFieldsZero() && this.ClosedQty;
        this.setAvailFields();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates inventory on hand based on the specified transaction.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The inventory transaction.
    /// </param>
    /// <param name="_plus">
    ///    Yes if the transaction is added to on hand; otherwise, No.
    /// </param>
    /// <param name="_inventTrans_ORIG">
    ///    The originally selected values for the transaction.
    /// </param>
    /// <param name="_keepSequenceNumber">
    ///    true if the internal counter for log records to help secure correct order when rollback is
    ///    performed should remain unchanged; otherwise, false.
    /// </param>
    /// <param name="_canDropInventSumDelta">
    ///    Yes if <c>InventSum</c> record may be updated directly instead of using <c>InventSumDelta</c>
    /// </param>
    /// <param name="_inventDimIdTransferIssue">
    ///    An <c>InventDimId</c> ID for the matching issue transaction for a transfer. This parameter is optional but can be passed to improve performance.
    /// </param>
    public void updateInventTrans(
        InventTrans     _inventTrans,
        NoYes           _plus,
        InventTrans     _inventTrans_ORIG   = null,
        boolean         _keepSequenceNumber = false,
        NoYes           _canDropInventSumDelta = NoYes::No,
        InventDimId     _inventDimIdTransferIssue = '')
    {
        boolean         updateOnHandFromInventTransSync = false;

        this.updateInventSumDelta(_inventTrans, _plus, _inventTrans_ORIG, updateOnHandFromInventTransSync, _keepSequenceNumber, _canDropInventSumDelta, _inventDimIdTransferIssue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes inventory on hand based on the specified transaction.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The inventory transaction.
    /// </param>
    /// <param name="_plus">
    ///    Yes if the transaction is added to on hand; otherwise, No.
    /// </param>
    /// <param name="_inventTrans_ORIG">
    ///    The originally selected values for the transaction.
    /// </param>
    [Hookable(false)]
    internal void syncInventTrans(
        InventTrans     _inventTrans,
        NoYes           _plus,
        InventTrans     _inventTrans_ORIG   = null)
    {
        boolean         updateOnHandFromInventTransSync = true;
        boolean         keepSequenceNumber              = false;
        NoYes           canDropInventSumDelta           = NoYes::No;
        InventDimId     inventDimIdTransferIssue        = '';

        this.updateInventSumDelta(_inventTrans, _plus, _inventTrans_ORIG, updateOnHandFromInventTransSync, keepSequenceNumber, canDropInventSumDelta, inventDimIdTransferIssue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventSumDelta</Name>
				<Source><![CDATA[
    private void updateInventSumDelta(    
        InventTrans     _inventTrans,
        NoYes           _plus,
        InventTrans     _inventTrans_ORIG,
        boolean         _updateOnHandFromInventTransSync,
        boolean         _keepSequenceNumber,
        NoYes           _canDropInventSumDelta,
        InventDimId     _inventDimIdTransferIssue)
    {
        InventTable inventTable = _inventTrans.inventTable();

        if (inventTable.inventItemType().mustInventBeControlled())
        {
            if (_plus)
            {
                this.addInventTransOnSum(_inventTrans, _inventDimIdTransferIssue);
            }
            else
            {
                this.subInventTransOnSum(_inventTrans);
            }

            boolean addedInventSumLogTTS = false;

            if (!_updateOnHandFromInventTransSync)
            {
                // When the sumLogTTS updating of the orig part is handled separately, no check should be made if fields has changed
                boolean skipInventTransValidation = (_inventTrans_ORIG == null);

                addedInventSumLogTTS = InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().addInventSumLogTTS(_inventTrans, _plus, _keepSequenceNumber, skipInventTransValidation);
            }

            if (_inventTrans_ORIG)
            {
                if (!_plus)
                {
                    this.addInventTransOnSum(_inventTrans_ORIG);
                }
                else
                {
                    this.subInventTransOnSum(_inventTrans_ORIG);
                }

                if (addedInventSumLogTTS)
                {
                    InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().addInventSumLogTTS(_inventTrans_ORIG, !_plus, true, true);
                }
            }

            if (this.RecId && _canDropInventSumDelta)
            {
                this.update();
            }
            else
            {
                InventSumDelta      inventSumDelta;

                inventSumDelta.initFromInventTrans(_inventTrans);
                inventSumDelta.initFromInventSum(this);
                InventUpdateOnhand inventUpdateOnhand = InventUpdateOnhandGlobal::Instance().inventUpdateOnhand();
                if (_updateOnHandFromInventTransSync)
                {
                    inventUpdateOnhand.adjustOnHandFromInventSumDelta(inventSumDelta, _inventTrans);
                }
                else
                {
                    inventUpdateOnhand.addInventSumDelta(inventSumDelta, _inventTrans, inventTable);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        if (!this.isAllFieldsZero())
        {
            return checkFailed(strfmt("@SCM:InventSumHasQuantitiesAndCannotBeDeleted", this.ItemId, this.inventDim().preFix()));
        }

        if (this.hasOpenTransactions())
        {
            return checkFailed(strFmt("@SCM:OpenTransactionExistsForItem", this.ItemId, this.inventDim().preFix()));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsDisplayCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays cost price for forms.
    /// </summary>
    /// <returns>
    /// The string value representing cost price.
    /// </returns>
    display CostPrice whsDisplayCostPrice()
    {
        InventModelGroup    inventModelGroup;
        CostPrice           ret;

        inventModelGroup = InventModelGroup::find(InventModelGroupItem::findByItemIdLegalEntity(this.ItemId).ModelGroupId);

        if (inventModelGroup.StandardCost || inventModelGroup.inventModelType().stdCostBased())
        {
            ret = InventTable::findCostPcsPrice(this.ItemId, this.InventDimId, this.inventDim(), maxDate());  // Standard Cost
        }
        else
        {
            ret = this.costPricePcs();  // Average Cost
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsDisplayItemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays item description for forms
    /// </summary>
    /// <returns>
    /// Item description string
    /// </returns>
    display ItemName whsDisplayItemName()
    {
        return EcoResProductTranslation::findByProductLanguage(InventTable::itemProduct(this.ItemId), Global::currentUserLanguage()).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsInventReserveQty</Name>
				<Source><![CDATA[
    private WHSInventReserveQty whsInventReserveQty(InventDim _inventDim)
    {
        InventDimParm       inventDimParm;
        WHSInventReserveQty whsInventReserveQty;

        if (WHSInventEnabled::exist(this.ItemId))
        {
            inventDimParm.initFromInventDim(_inventDim);
            whsInventReserveQty = WHSInventReserveQty::newFromParms(this.inventTable(),_inventDim,inventDimParm,this);
        }

        return whsInventReserveQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsLocationId</Name>
				<Source><![CDATA[
    display public WMSLocationId wmsLocationId()
    {
        return InventDim::find(this.InventDimId).wmsLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(
        ItemId          itemId,
        InventDimId     inventDimId)
    {
        return itemId && (select firstonly RecId from inventSum
                              where inventSum.ItemId        == itemId
                                 && inventSum.InventDimId   == inventDimId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static InventSum find(
        ItemId            _itemId,
        InventDimId       _dimId,
        boolean           _forUpdate = false)
    {
        InventSum  inventSum;

        if (_forUpdate)
        {
            inventSum.selectForUpdate(_forUpdate);
        }
        else
        {
            inventSum.selectLocked(false);
        }

        if (_itemId)
        {
            select firstonly inventSum
                where inventSum.ItemId              == _itemId
                  &&  inventSum.InventDimId         == _dimId;
        }
        return inventSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSumWithSerialId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves on hand inventory when only serial number is set.
    /// </summary>
    /// <param name = "_itemId">An item ID</param>
    /// <param name = "_inventDimCriteria">The inventory dimension criteria.</param>
    /// <param name = "_inventDimParm">The inventory dimension parameters.</param>
    /// <param name = "_sumFields">An <c>InventSumFields</c> value.</param>
    /// <returns>An on hand inventory record.</returns>
    protected static InventSum findSumWithSerialId(
        ItemId              _itemId,
        InventDim           _inventDimCriteria,
        InventDimParm       _inventDimParm,
        InventSumFields     _sumFields)
    {
        InventSum   inventSum;
        InventDim   inventDim;

        inventSum.selectLocked(false);

        switch (_sumFields)
        {
            case InventSumFields::Financial:
                if (InventUseDimOfInventSumForPublicQueryToggle::instance().isEnabled())
                {
                    select sum(PostedQty), sum(PostedValue), sum(PostedValueSecCur_RU), sum(PdsCWPostedQty)
                    from inventSum
                    where inventSum.ItemId == _itemId
                       && inventSum.Closed == NoYes::No
                       && #inventDimFieldsFilter(inventSum, _inventDimCriteria, _inventDimParm);
                }
                else
                {
                    #inventDimSelect(inventDim,_inventDimCriteria,_inventDimParm,forcePlaceholders tableId from,serialIdIdx)
                    join sum(PostedQty),sum(PostedValue)
                    //<GEERU>
                    , sum(PostedValueSecCur_RU)
                    //</GEERU>
                    , sum(PdsCWPostedQty)
                    from inventSum
                        where inventSum.InventDimId == inventDim.InventDimId
                           && inventSum.ItemId      == _itemId
                           && inventSum.Closed      == NoYes::No;
                }
                break;
            
            case InventSumFields::Physical:
                if (InventUseDimOfInventSumForPublicQueryToggle::instance().isEnabled())
                {
                    select sum(PostedQty), sum(PostedValue), sum(Received), sum(Deducted), sum(Picked), sum(Registered), sum(PostedValueSecCur_RU),
                        sum(PdsCWPostedQty), sum(PdsCWReceived), sum(PdsCWDeducted), sum(PdsCWPicked), sum(PdsCWRegistered)
                    from inventSum
                    where inventSum.ItemId      == _itemId
                       && inventSum.Closed      == NoYes::No
                       && #inventDimFieldsFilter(inventSum, _inventDimCriteria, _inventDimParm);
                }
                else
                {
                    #inventDimSelect(inventDim,_inventDimCriteria,_inventDimParm,forcePlaceholders tableId from,serialIdIdx)
                    join sum(PostedQty),sum(PostedValue),sum(Received),sum(Deducted),sum(Picked),sum(Registered)
                    //<GEERU>
                    , sum(PostedValueSecCur_RU)
                    //</GEERU>
                    , sum(PdsCWPostedQty)
                    , sum(PdsCWReceived)
                    , sum(PdsCWDeducted)
                    , sum(PdsCWPicked)
                    , sum(PdsCWRegistered)
                    from inventSum
                        where inventSum.InventDimId == inventDim.InventDimId
                           && inventSum.ItemId      == _itemId
                           && inventSum.Closed      == NoYes::No;
                }
                break;
            
            case InventSumFields::All:
                inventSum =  InventSum::findInventSumAllWithSerialId(_itemId, _inventDimCriteria, _inventDimParm);
                break;

            default:
                // Support default to avoid breaking - because the default case was supported when the enum was made extensible.
                if (!InventSum::skipDefaultCaseForFindInventSumWithSerialId(_sumFields))
                {
                    inventSum = InventSum::findInventSumAllWithSerialId(_itemId, _inventDimCriteria, _inventDimParm);
                }
        }
        return inventSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventSumAllWithSerialId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the on hand inventory sum without serial id for InventSumFields::All.
    /// </summary>
    /// <param name = "_itemId">An item id.</param>
    /// <param name = "_inventDimCriteria">The inventory dimension criteria.</param>
    /// <param name = "_inventDimParm">The inventory dimension parameters.</param>
    /// <returns>An on-hand inventory record.</returns>
    [Replaceable]
    static protected InventSum findInventSumAllWithSerialId(
        ItemId              _itemId,
        InventDim           _inventDimCriteria,
        InventDimParm       _inventDimParm)
    {
        InventSum inventSum;
        InventDim inventDim;

        SysDaQueryObject queryObject = new SysDaQueryObject(inventSum);
        InventDim::dimAddInventSumFieldsQueryProjection(queryObject);
        
        SysDaQueryExpression whereClause = 
                     new SysDaEqualsExpression(new SysDaFieldExpression(inventSum, fieldStr(InventSum, ItemId)), new SysDaValueExpression(_itemId))           
                .and(new SysDaEqualsExpression(new SysDaFieldExpression(inventSum, fieldStr(InventSum, Closed)), new SysDaValueExpression(NoYes::No)));
        
        if (InventUseDimOfInventSumForPublicQueryToggle::instance().isEnabled())
        {
            whereClause = whereClause.and(InventSum::addInventSumQueryObject(inventSum, _inventDimCriteria, _inventDimParm));
            queryObject.whereClause(whereClause);
        }
        else
        {        
            queryObject.whereClause(whereClause);

            InventDim::dimAddInventDimExistsJoin(
                queryObject,
                new SysDaFieldExpression(inventSum, fieldStr(InventSum, InventDimId)),
                inventDim,
                _inventDimCriteria,
                _inventDimParm);
        }

        SysDaFindStatement findStatement = new SysDaFindStatement();
        findStatement.execute(new SysDaFindObject(queryObject));

        return inventSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipDefaultCaseForFindInventSumWithSerialId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to skip the default case for the finding on hand inventory with serial id;
    /// extenders of findSumWithSerialId where any extensions of <c>InventSumFields</c> has been handled must wrap this method to skip the default query.    
    /// </summary>
    /// <param name = "_inventSumFields">The on hand inventory fields to select.</param>
    /// <returns>true if the default case for the finding on hand inventory must be skipped; otherwise, false.</returns>
    protected static boolean skipDefaultCaseForFindInventSumWithSerialId(InventSumFields _inventSumFields)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSum</Name>
				<Source><![CDATA[
    public static InventSum findSum(
        ItemId              _itemId,
        InventDim           _inventDimCriteria,
        InventDimParm       _inventDimParm,
        InventSumFields     _sumFields  = InventSumFields::All)
    {
        #InventDimDevelop

        if (_inventDimParm.InventSerialIdFlag && _inventDimCriteria.InventSerialId)
        {
            return InventSum::findSumWithSerialId(_itemId, _inventDimCriteria, _inventDimParm, _sumFields);
        }
        else
        {
            return InventSum::findSumWithoutSerialId(_itemId, _inventDimCriteria, _inventDimParm, _sumFields);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSumWithoutSerialId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves on hand inventory when serial number is not set.
    /// </summary>
    /// <param name = "_itemId">An item ID.</param>
    /// <param name = "_inventDimCriteria">The inventory dimension criteria.</param>
    /// <param name = "_inventDimParm">The inventory dimension parameters.</param>
    /// <param name = "_sumFields">An <c>InventSumFields</c> value.</param>
    /// <returns>An on hand inventory record.</returns>
    protected static InventSum findSumWithoutSerialId(
        ItemId              _itemId,
        InventDim           _inventDimCriteria,
        InventDimParm       _inventDimParm,
        InventSumFields     _sumFields)
    {
        InventSum   inventSum;
        InventDim   inventDim;

        inventSum.selectLocked(false);

        switch (_sumFields)
        {
            case InventSumFields::Financial:
                if (InventUseDimOfInventSumForPublicQueryToggle::instance().isEnabled())
                {
                    select sum(PostedQty), sum(PostedValue)
                        // <GEERU>
                        , sum(PostedValueSecCur_RU)
                        // </GEERU>
                        , sum(PdsCWPostedQty)
                            from inventSum
                            where inventSum.ItemId      == _itemId   &&
                                  inventSum.Closed      == NoYes::No &&
                                  #InventDimFieldsFilter(inventSum, _InventDimCriteria, _InventDimParm);
                }
                else
                {
                    select sum(PostedQty),sum(PostedValue)
                        // <GEERU>
                    , sum(PostedValueSecCur_RU)
                        // </GEERU>
                    , sum(PdsCWPostedQty)
                         from inventSum
                            where inventSum.ItemId      == _itemId   &&
                                  inventSum.Closed      == NoYes::No
                         #inventDimExistsJoin(inventSum.InventDimId,inventDim,_InventDimCriteria,_InventDimParm);
                }
                break;

            case InventSumFields::Physical:
                if (InventUseDimOfInventSumForPublicQueryToggle::instance().isEnabled())
                {
                    select sum(PostedQty), sum(PostedValue), sum(Received), sum(Deducted), sum(Picked), sum(Registered)
                        // <GEERU>
                        , sum(PostedValueSecCur_RU)
                        // </GEERU>
                        , sum(PdsCWPostedQty)
                        , sum(PdsCWReceived)
                        , sum(PdsCWDeducted)
                        , sum(PdsCWPicked)
                        , sum(PdsCWRegistered)
                            from inventSum
                            where inventSum.ItemId      == _itemId   &&
                                  inventSum.Closed      == NoYes::No &&
                                  #InventDimFieldsFilter(inventSum, _InventDimCriteria, _InventDimParm);
                }
                else
                {
                    select sum(PostedQty),sum(PostedValue),sum(Received),sum(Deducted),sum(Picked),sum(Registered)
                        // <GEERU>
                    , sum(PostedValueSecCur_RU)
                        // </GEERU>
                    , sum(PdsCWPostedQty)
                        , sum(PdsCWReceived)
                        , sum(PdsCWDeducted)
                        , sum(PdsCWPicked)
                        , sum(PdsCWRegistered)
                        from inventSum
                            where inventSum.ItemId      == _itemId   &&
                                  inventSum.Closed      == NoYes::No
                        #inventDimExistsJoin(inventSum.InventDimId,inventDim,_InventDimCriteria,_InventDimParm);
                }
                break;

            case InventSumFields::All:
                inventSum =  InventSum::findInventSumAllWithoutSerialId(_itemId, _inventDimCriteria, _inventDimParm);
                break;

            default:
                // Support default to avoid breaking - because the default case was supported when the enum was made extensible.
                if (!InventSum::skipDefaultCaseForFindInventSumWithoutSerialId(_sumFields))
                {
                    inventSum =  InventSum::findInventSumAllWithoutSerialId(_itemId, _inventDimCriteria, _inventDimParm);
                }
        }

        return inventSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventSumAllWithoutSerialId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the on hand inventory sum without serial id for InventSumFields::All.
    /// </summary>
    /// <param name = "_itemId">An item id.</param>
    /// <param name = "_inventDimCriteria">The inventory dimension criteria.</param>
    /// <param name = "_inventDimParm">The inventory dimension parameters.</param>
    /// <returns>An on-hand inventory record.</returns>
    [Replaceable]
    protected static InventSum findInventSumAllWithoutSerialId(
        ItemId              _itemId,
        InventDim           _inventDimCriteria,
        InventDimParm       _inventDimParm)
    {
        InventSum inventSum;
        InventDim InventDim;

        SysDaQueryObject queryObject = new SysDaQueryObject(inventSum);
        InventDim::dimAddInventSumFieldsQueryProjection(queryObject);
        
        SysDaQueryExpression whereClause = new SysDaAndExpression(
            new SysDaEqualsExpression(new SysDaFieldExpression(inventSum, fieldStr(InventSum, ItemId)), new SysDaValueExpression(_itemId)),
            new SysDaEqualsExpression(new SysDaFieldExpression(inventSum, fieldStr(InventSum, Closed)), new SysDaValueExpression(NoYes::No)));
       
        if (InventUseDimOfInventSumForPublicQueryToggle::instance().isEnabled())
        {
            whereClause = whereClause.and(InventSum::addInventSumQueryObject(inventSum, _inventDimCriteria, _inventDimParm));
            queryObject.whereClause(whereClause);
        }
        else
        {        
            queryObject.whereClause(whereClause);

            InventDim::dimAddInventDimExistsJoin(
                queryObject,
                new SysDaFieldExpression(inventSum, fieldStr(InventSum, InventDimId)),
                inventDim,
                _inventDimCriteria,
                _inventDimParm);
        }

        SysDaFindStatement findStatement = new SysDaFindStatement();
        findStatement.execute(new SysDaFindObject(queryObject));

        return inventSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipDefaultCaseForFindInventSumWithoutSerialId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to skip the default case for the finding on hand inventory without serial id; 
    /// extenders of findSumWithoutSerialId where any extensions of <c>InventSumFields</c> has been handled must wrap this method to skip the default query.
    /// </summary>
    /// <param name = "_inventSumFields">The inventory sum fields type.</param>
    /// <returns>true if the default case for the finding inventory sum fields must be skipped; otherwise, false.</returns>
    protected static boolean skipDefaultCaseForFindInventSumWithoutSerialId(InventSumFields _inventSumFields)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSumQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves <c>InventSum</c> with only the quantity fields initialized.
    /// </summary>
    /// <param name="_itemId">
    ///     ItemId to use for search.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///     InventDim criteria to use for search.
    /// </param>
    /// <param name="_inventDimParm">
    ///     InventDimParm to use for search.
    /// </param>
    /// <returns>
    ///     Partially filled <c>InventSum</c> table.
    /// </returns>
    public static InventSum findSumQty(
        ItemId              _itemId,
        InventDim           _inventDimCriteria,
        InventDimParm       _inventDimParm)
    {
        #InventDimDevelop

        InventSum   inventSum;
        InventDim   inventDim;

        inventSum.selectLocked(false);

        if (InventUseDimOfInventSumForPublicQueryToggle::instance().isEnabled())
        {
            select
                #inventSumQtyFields
            from inventSum
                    where inventSum.ItemId      == _itemId
                       && inventSum.ClosedQty   == NoYes::No
                       && #InventDimFieldsFilter(inventSum, _inventDimCriteria, _inventDimParm);
        }
        else if (_inventDimParm.InventSerialIdFlag && _inventDimCriteria.InventSerialId)
        {
            #inventDimSelect(inventDim,_inventDimCriteria,_inventDimParm,forcePlaceholders tableId from,serialIdIdx)
            join
            #inventSumQtyFields
            from inventSum
                where inventSum.InventDimId == inventDim.InventDimId
                    && inventSum.ItemId     == _itemId
                    && inventSum.ClosedQty  == NoYes::No;
        }
        else
        {
            select
            #inventSumQtyFields
            from inventSum
                where inventSum.ItemId      == _itemId
                    && inventSum.ClosedQty   == NoYes::No
                    #inventDimExistsJoin(inventSum.InventDimId,inventDim,_inventDimCriteria,_inventDimParm);
        }

        return inventSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hhtAvailPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the physical quantity available for the specified item.
    /// </summary>
    /// <param name="_itemId">
    /// The item number of the specified item.
    /// </param>
    /// <returns>
    /// the available quantity of the item.
    /// </returns>
    public static InventQtyAvailPhysical hhtAvailPhysical(ItemId _itemId)
    {
        InventSum inventSum;

        if (_itemId)
            select sum(AvailPhysical) from inventSum
            where inventSum.ItemId == _itemId;

        return inventSum.AvailPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInventTransBeLogUpdated</Name>
				<Source><![CDATA[
    public static boolean mustInventTransBeLogUpdated(
        InventTrans     _inventTrans,
        InventTrans     _inventTrans_Orig   = null)
    {
        if  (_inventTrans_Orig.MarkingRefInventTransOrigin  != _inventTrans.MarkingRefInventTransOrigin
         && (_inventTrans_Orig.StatusIssue                  >= StatusIssue::ReservPhysical  || _inventTrans.StatusIssue == StatusIssue::None))
        {
            return true;
        }

        if (_inventTrans_Orig.TimeExpected != _inventTrans.TimeExpected)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInventTransBeUpdated</Name>
				<Source><![CDATA[
    public static boolean mustInventTransBeUpdated(
        InventTrans     _inventTrans,
        InventTrans     _inventTrans_Orig   = null)
    {
        if (_inventTrans_Orig.Qty                   == _inventTrans.Qty                  &&
            _inventTrans_Orig.CostAmountPhysical    == _inventTrans.CostAmountPhysical   &&
            _inventTrans_Orig.StatusIssue           == _inventTrans.StatusIssue          &&
            _inventTrans_Orig.StatusReceipt         == _inventTrans.StatusReceipt        &&
            _inventTrans_Orig.InventDimId           == _inventTrans.InventDimId          &&
            _inventTrans_Orig.ItemId                == _inventTrans.ItemId               &&
            _inventTrans_Orig.DatePhysical          == _inventTrans.DatePhysical         &&
            _inventTrans_Orig.DateInvent            == _inventTrans.DateInvent           &&
            _inventTrans_Orig.DateExpected          == _inventTrans.DateExpected         &&
            _inventTrans_Orig.costValue()           == _inventTrans.costValue()          &&
            _inventTrans_Orig.costValueSecCur_RU()  == _inventTrans.costValueSecCur_RU()
           )
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a query to find on hand for the specified parameters.
    /// </summary>
    /// <param name="_query">
    ///    The query to extend. Can be null.
    /// </param>
    /// <param name="_itemId">
    ///    The item.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    The inventory dimensions to limit to.
    /// </param>
    /// <param name="_inventDimParmCriteria">
    ///    Identification of which dimensions to limit to.
    /// </param>
    /// <param name="_inventDimParmGroupBy">
    ///    Identification of which dimensions to group the result by.
    /// </param>
    /// <param name="_dimFields">
    ///    The list of inventory dimension fields to be specified for performance reasons. Optional.
    /// </param>
    /// <param name="_onlyIncludeCWItems">
    ///    true if only catch weight items should be included; otherwise false. Optional.
    /// </param>
    /// <param name="_addSumFields">
    ///    true if all quantity and value fields from <c>InventSum</c> should be added as summation fields; otherwise, false. Optional
    /// </param>
    /// <returns>
    ///    A query.
    /// </returns>
    public static Query newQuery(
        Query           _query,
        ItemId          _itemId,
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimParmCriteria,
        InventDimParm   _inventDimParmGroupBy,
        List            _dimFields = InventDim::dimFieldsList(),
        boolean         _onlyIncludeCWItems = false,
        boolean         _addSumFields = true
        )
    {
        QueryBuildDataSource    qbsSum;
        QueryBuildDataSource    qbsDim;
        QueryBuildRange         queryRange;
        boolean                 doFindRange;
        QueryBuildDataSource    qbsCatchWeightItem;

        if (!_query)
        {
            _query = new Query();
        }

        if (_query.dataSourceTable(tableNum(InventSum)))
        {
            qbsSum = _query.dataSourceTable(tableNum(InventSum));
            qbsSum.sortClear();

            doFindRange = true;
        }
        else
        {
            qbsSum = _query.addDataSource(tableNum(InventSum));
        }

        if (_query.dataSourceTable(tableNum(InventDim)))
        {
            qbsDim = _query.dataSourceTable(tableNum(InventDim));
            qbsDim.sortClear();

            doFindRange = true;
        }
        else
        {
            qbsDim = qbsSum.addDataSource(tableNum(InventDim));
        }

        qbsDim.joinMode(JoinMode::InnerJoin);
        qbsDim.relations(true);

        if (!_inventDimParmCriteria.ClosedFlag)
        {
            queryRange = SysQuery::findOrCreateRange(qbsSum, fieldNum(InventSum,Closed));
            queryRange.value(queryValue(NoYes::No));
        }

        if (_inventDimParmCriteria.ItemIdFlag)
        {
            queryRange = doFindRange ? qbsSum.findRange(fieldNum(InventSum,ItemId)) : null;
            if (! queryRange)
            {
                queryRange = qbsSum.addRange(fieldNum(InventSum,ItemId));
            }

            if (_itemId)
            {
                queryRange.value(queryValue(_itemId));
            }
            else
            {
                queryRange.value(SysQuery::valueEmptyString());
            }
        }

        if (_onlyIncludeCWItems)
        {
            qbsCatchWeightItem = qbsSum.addDataSource(tableNum(PdsCatchWeightItem));
            qbsCatchWeightItem.joinMode(JoinMode::ExistsJoin);
            qbsCatchWeightItem.addLink(fieldNum(InventSum, ItemId), fieldNum(PdsCatchWeightItem, ItemId));
        }

        if (_inventDimParmGroupBy.ItemIdFlag)
        {
            qbsSum.addSortField(fieldNum(InventSum,ItemId));
            qbsSum.orderMode(OrderMode::GroupBy);
        }

        if (_addSumFields)
        {
            InventSum::queryAddSumFields(qbsSum);
        }
        InventDim::queryDatasourceAddRangeSortFromParms(qbsDim,doFindRange,_inventDimCriteria,_inventDimParmCriteria,_inventDimParmGroupBy,_dimFields);
        InventSum::queryAddHint(_query,_inventDimCriteria,_inventDimParmCriteria,qbsSum,qbsDim);

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventDimWithOwnerAndSumDatasources</Name>
				<Source><![CDATA[
    private static void addInventDimWithOwnerAndSumDatasources(
        InventDimParm           _inventDimParmGroupBy,
        Query                   _query,
        QueryBuildDataSource    _queryDataSourceInventBatch = null)
    {
        QueryBuildDataSource qbdsOwnerType;
            
        if (_queryDataSourceInventBatch)
        {
            qbdsOwnerType = _queryDataSourceInventBatch.addDataSource(tableNum(InventOwnerType));
        }
        else
        {
            qbdsOwnerType = _query.addDataSource(tableNum(InventOwnerType));
        }

        // Make sure our own inventory (owned by the current legal entity) is reserved first
        qbdsOwnerType.addSortField(fieldNum(InventOwnerType, IsCurrentLegalEntity), SortOrder::Descending);
        if (_inventDimParmGroupBy.ItemIdFlag || !_inventDimParmGroupBy.isAllFlagNo())
        {
            qbdsOwnerType.orderMode(OrderMode::GroupBy);
        }
        qbdsOwnerType.fetchMode(QueryFetchMode::One2One);

        if (InventReservSetSumDatasourceBeforeDimFlight::instance().isEnabled() &&
            InventUseDimOfInventSumForPublicQueryToggle::instance().isEnabled())
        {
            QueryBuildDataSource qbsSum = qbdsOwnerType.addDataSource(tableNum(InventSum));
            qbsSum.joinMode(JoinMode::InnerJoin);
            qbsSum.addLink(fieldNum(InventOwnerType, InventOwnerId), fieldNum(InventSum, InventOwnerId_RU), qbdsOwnerType.name());
            qbsSum.fetchMode(QueryFetchMode::One2One);

            QueryBuildDataSource qbsDim = qbsSum.addDataSource(tableNum(InventDim));
            qbsDim.joinMode(JoinMode::InnerJoin);
            qbsDim.addLink(fieldNum(InventSum, InventDimId), fieldNum(InventDim, inventDimId), qbsSum.name());
            qbsDim.fetchMode(QueryFetchMode::One2One);

            if (_queryDataSourceInventBatch)
            {
                qbsDim.addLink(fieldNum(InventBatch, InventBatchId), fieldNum(InventDim, InventBatchId), _queryDataSourceInventBatch.name());
            }
        }
        else
        {
            QueryBuildDataSource qbsDim = qbdsOwnerType.addDataSource(tableNum(InventDim));
            qbsDim.joinMode(JoinMode::InnerJoin);
            qbsDim.relations(true);
            qbsDim.fetchMode(QueryFetchMode::One2One);

            if (_queryDataSourceInventBatch)
            {
                qbsDim.addLink(fieldNum(InventBatch, InventBatchId), fieldNum(InventDim, InventBatchId), _queryDataSourceInventBatch.name());
            }

            QueryBuildDataSource qbsSum = qbsDim.addDataSource(tableNum(InventSum));
            qbsSum.joinMode(JoinMode::InnerJoin);
            qbsSum.relations(true);
            qbsSum.fetchMode(QueryFetchMode::One2One);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newQueryReservation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a query to find on hand for the specified parameters.
    /// </summary>
    /// <param name="_itemId">
    ///    The item.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    The inventory dimensions to limit to.
    /// </param>
    /// <param name="_inventDimParmCriteria">
    ///    Identification of which dimensions to limit to.
    /// </param>
    /// <param name="_inventDimParmGroupBy">
    ///    Identification of which dimensions to group the result by.
    /// </param>
    /// <param name="_cwItem">
    ///    true if catch weight fields should be included; otherwise false. Optional.
    /// </param>
    /// <param name="_dimFields">
    ///    The list of inventory dimension fields to be be specified for performance reasons. Optional.
    /// </param>
    /// <returns>
    ///    A query.
    /// </returns>
    public static Query newQueryReservation(
        ItemId          _itemId,
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimParmCriteria,
        InventDimParm   _inventDimParmGroupBy,
        boolean         _cwItem = false,
        List            _dimFields = InventDim::dimFieldsList())
    {
        Query query = new Query();

        QueryBuildDataSource qbsSum;
        QueryBuildDataSource qbsDim;

        boolean isItemInventoryOwnerActivated = false;

        if (_itemId)
        {
            isItemInventoryOwnerActivated = InventTable::find(_itemId).isItemInventoryOwnerActivated();
        }

        if (_itemId && isItemInventoryOwnerActivated)
        {
            InventSum::addInventDimWithOwnerAndSumDatasources(_inventDimParmGroupBy, query);

            qbsSum = query.dataSourceTable(tableNum(InventSum));
            qbsDim = query.dataSourceTable(tableNum(InventDim));
        }
        else
        {
            InventReserveByDateForInventoryOwnerContext context = InventReserveByDateForInventoryOwnerContext::current();
            if (context != null && context.inventReserveByDateForInventoryOwner)
            {
                context.inventReserveByDateForInventoryOwner = false;
            }

            qbsSum = query.addDataSource(tableNum(InventSum));

            qbsDim = qbsSum.addDataSource(tableNum(InventDim));
            qbsDim.joinMode(JoinMode::InnerJoin);
            qbsDim.relations(true);
        }

        // Only consider records with quantity values.
        SysQuery::findOrCreateRange(qbsSum, fieldNum(InventSum, ClosedQty)).value(queryValue(NoYes::No));
        SysQuery::findOrCreateRange(qbsSum, fieldNum(InventSum, Closed)).value(queryValue(NoYes::No));

        if (_inventDimParmCriteria.ItemIdFlag)
        {
            QueryBuildRange itemIdRange = qbsSum.addRange(fieldNum(InventSum, ItemId));

            if (_itemId)
            {
                itemIdRange.value(queryValue(_itemId));
            }
            else
            {
                itemIdRange.value(SysQuery::valueEmptyString());
            }
        }

        if (_inventDimParmGroupBy.ItemIdFlag)
        {
            qbsSum.addSortField(fieldNum(InventSum,ItemId));
            qbsSum.orderMode(OrderMode::GroupBy);
        }

        // Don't use a query plan with join from InventDim to InventSum if dimensions aren't selective
        if (!isItemInventoryOwnerActivated || !InventReservSkipSetForceOrderFlight::instance().isEnabled())
        {
            query.forceSelectOrder(!_inventDimParmCriteria.isFlagSelective());
        }

        // Only select the fields needed for reservation purposes and not all fields.
        qbsSum.addSelectionField(fieldNum(InventSum,AvailPhysical), SelectionField::Sum);
        qbsSum.addSelectionField(fieldNum(InventSum,AvailOrdered), SelectionField::Sum);
        qbsSum.addSelectionField(fieldNum(InventSum,OnOrder), SelectionField::Sum);
        if (_cwItem)
        {
            qbsSum.addSelectionField(fieldNum(InventSum,PdsCWAvailPhysical), SelectionField::Sum);
            qbsSum.addSelectionField(fieldNum(InventSum,PdsCWAvailOrdered), SelectionField::Sum);
            qbsSum.addSelectionField(fieldNum(InventSum,PdsCWOnOrder), SelectionField::Sum);
        }

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            InventDim::queryDatasourceAddRangeSortFromParmsWithInventSum(qbsDim, false, _inventDimCriteria, _inventDimParmCriteria, _inventDimParmGroupBy, _dimFields, qbsSum);
        }
        else
        {
            InventDim::queryDatasourceAddRangeSortFromParms(qbsDim, false, _inventDimCriteria, _inventDimParmCriteria, _inventDimParmGroupBy, _dimFields);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pds_FEFOQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a query to retrieve a batch or batches that best match the reservation request.
    /// </summary>
    /// <param name="_itemId">
    /// The <c>ItemId</c> to use in the query.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The inventory dimension criteria used to filter query.
    /// </param>
    /// <param name="_inventDimParmCriteria">
    /// The dimension parameters to determine the criteria fields to filter on.
    /// </param>
    /// <param name="_inventDimParmGroupBy">
    /// The dimension parameters to determine the criteria fields to group by.
    /// </param>
    /// <param name="_dimFields">
    /// A list of the inventory dimension fields used to filter the query.
    /// </param>
    /// <returns>
    /// A <c>Query</c> object generated based on the provided parameters.
    /// </returns>
    public static Query pds_FEFOQuery(
        ItemId          _itemId,
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimParmCriteria,
        InventDimParm   _inventDimParmGroupBy,
        List            _dimFields = InventDim::dimFieldsList()
        )
    {
        #define.InventBatchDSName('DS_INVENTBATCH')

        QueryBuildDataSource    qbsSum;
        QueryBuildDataSource    qbsDim;
        QueryBuildDataSource    qbsBatch;
        QueryBuildRange         queryRange;

        boolean                 doFindRange = false;

        Query                   query;

        query = new Query();

        qbsBatch = query.addDataSource(tableNum(InventBatch),#InventBatchDSName);
        qbsBatch.fetchMode(QueryFetchMode::One2One);

        if (_itemId && InventTable::find(_itemId).isItemInventoryOwnerActivated())
        {
            InventSum::addInventDimWithOwnerAndSumDatasources(_inventDimParmGroupBy, query, qbsBatch);

            qbsSum = query.dataSourceTable(tableNum(InventSum));
            qbsDim = query.dataSourceTable(tableNum(InventDim));

            qbsSum.addLink(fieldNum(InventBatch,ItemId),fieldNum(InventSum,ItemId),#InventBatchDSName);
        }
        else
        {
            qbsDim   = qbsBatch.addDataSource(tableNum(InventDim));
            qbsDim.joinMode(JoinMode::InnerJoin);
            qbsDim.fetchMode(QueryFetchMode::One2One);
            qbsDim.relations(true);
            qbsSum   = qbsDim.addDataSource(tableNum(InventSum));
            qbsSum.joinMode(JoinMode::InnerJoin);
            qbsSum.fetchMode(QueryFetchMode::One2One);
            qbsSum.relations(true);
            qbsSum.addLink(fieldNum(InventBatch,ItemId),fieldNum(InventSum,ItemId),#InventBatchDSName);
        }

        queryRange = SysQuery::findOrCreateRange(qbsSum, fieldNum(InventSum,ClosedQty));
        queryRange.value(queryValue(NoYes::No));
        queryRange = doFindRange ? qbsSum.findRange(fieldNum(InventSum,ItemId)) : null;

        if (!queryRange)
        {
            queryRange = qbsSum.addRange(fieldNum(InventSum,ItemId));
        }

        queryRange.value(queryValue(_itemId));
        qbsSum.addSortField(fieldNum(InventSum,ItemId));
        qbsSum.orderMode(OrderMode::GroupBy);
        InventSum::queryAddSumFields(qbsSum);

        if (_inventDimParmCriteria.ItemIdFlag
            && _itemId
            && InventDimParm::activeDimFlag(InventDimGroupSetup::newItemId(_itemId)).InventBatchIdFlag)
        {
            qbsDim.addSortField(fieldNum(InventDim, InventBatchId));
            qbsDim.orderMode(OrderMode::GroupBy);

            if (InventTable::find(_itemId).modelGroup().PdsPickCriteria == PdsPickCriteria::ExpiryDate)
            {
                qbsBatch.addSortField(fieldNum(InventBatch,ExpDate));
            }
            else
            {
                qbsBatch.addSortField(fieldNum(InventBatch,PdsBestBeforeDate));
            }

            qbsBatch.addSortField(fieldNum(InventBatch,InventBatchId));
            qbsBatch.orderMode(OrderMode::GroupBy);
        }

        InventDim::queryDatasourceAddRangeSortFromParms(
            qbsDim,
            doFindRange,
            _inventDimCriteria,
            _inventDimParmCriteria,
            _inventDimParmGroupBy,
            _dimFields);

        InventSum::queryAddHint(
            query,
            _inventDimCriteria,
            _inventDimParmCriteria,
            qbsSum,
            qbsDim);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsSameLotQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// instantiate the query relevant for the same lot batch reservation.
    /// </summary>
    /// <param name="_itemId">The item to search the batch for</param>
    /// <param name="_inventDimCriteria">The inventory dimensions to search the batch in</param>
    /// <param name="_inventDimParmCriteria">The flags for the inventory dimensions to search the batch</param>
    /// <param name="_inventDimParmGroupBy">Flags to group the query with</param>
    /// <param name="_dimFields">The dimension fields to check</param>
    /// <returns>The query to use for the same lot batch reservation search</returns>
    /// <remarks>
    /// Process 2.0 Same Batch Lot Reservation
    /// <syntax>
    /// public static Query pdsSameLotQuery(ItemId,InventDim,InventDimParm,InventDimParm,container)
    /// </syntax>
    /// </remarks>
    public static Query pdsSameLotQuery(
        ItemId          _itemId,
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimParmCriteria,
        InventDimParm   _inventDimParmGroupBy,
        List            _dimFields = InventDim::dimFieldsList()
        )
    {
        Query               query;
        InventModelGroup    inventModelGroup;

        if (InventTable::find(_itemId).pdsCheck())
        {
            query = InventSum::pds_FEFOQuery(
                        _itemId,
                        _inventDimCriteria,
                        _inventDimParmCriteria,
                        _inventDimParmGroupBy,
                        _dimFields);
        }
        else
        {
            query = InventSum::newQuery(
                        null,
                        _itemId,
                        _inventDimCriteria,
                        _inventDimParmCriteria,
                        _inventDimParmGroupBy,
                        _dimFields);

            inventModelGroup = InventTable::find(_itemId).modelGroup();

            if (inventModelGroup.ReserveByDate)
            {
                query.dataSourceTable(tableNum(InventSum)).addSortField(
                    fieldNum(InventSum, LastUpdDatePhysical),
                    inventModelGroup.ReserveReversed
                        ? SortOrder::Descending
                        : SortOrder::Ascending);
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddHint</Name>
				<Source><![CDATA[
    private static void queryAddHint(
        Query                   _query,
        InventDim               _inventDimCriteria,
        InventDimParm           _inventDimParmCriteria,
        QueryBuildDataSource    _qbsSum = _query.dataSourceTable(tableNum(InventSum)),
        QueryBuildDataSource    _qbsDim = _query.dataSourceTable(tableNum(InventDim))
        )
    {
        boolean doHint = false;

        Enumerator trackingDims = inventTrackingDimension::getEnumeratorForSelectiveDimensions();
        while (trackingDims.moveNext())
        {
            InventTrackingDimension dimension = trackingDims.current() as InventTrackingDimension;

            if (_inventDimParmCriteria.(dimension.parmInventDimParmFieldId()) 
                && _inventDimCriteria.(dimension.parmInventDimFieldId()))
            {
                IndexId indexHint = dimension.indexHintForTable(tableNum(InventDim));
                if (indexHint)
                {
                    if (_inventDimParmCriteria.ItemIdFlag)
                    {
                        _qbsSum.addSortIndex(indexNum(InventSum, ItemDimIdx));
                    }
                    else
                    {
                        _qbsSum.addSortIndex(indexNum(InventSum, DimIdIdx));
                    }

                    _qbsDim.addSortIndex(indexHint);

                    doHint = true;
                    break;
                }
            }
        }

        if (!doHint
         && !_inventDimParmCriteria.ClosedFlag
         &&  _inventDimParmCriteria.ItemIdFlag
         &&  _inventDimParmCriteria.allProductDimensionFlagSet()
         && !_inventDimParmCriteria.isFlagSelective())
        {
            _qbsSum.addSortIndex(indexNum(InventSum,ClosedItemDimIdx));
            _qbsDim.addSortIndex(indexNum(InventDim,DimIdIdx));

            doHint = true;
        }

        if (doHint)
        {
            _query.literals(2);

            _qbsSum.indexIsHint(true);
            _qbsDim.indexIsHint(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddHintFromCaller</Name>
				<Source><![CDATA[
    public static boolean queryAddHintFromCaller(
        QueryBuildDataSource    _qbs,
        Args                    _callerArgs)
    {
        boolean ret = false;

        switch (_callerArgs.dataset())
        {
            case(tableNum(InventBatch)):
            case(tableNum(InventSerial)):
            case(tableNum(WMSLocation)):
                _qbs.addSortIndex(indexNum(InventSum,DimIdIdx));
                _qbs.indexIsHint(true);
                ret = true;
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddSumFields</Name>
				<Source><![CDATA[
    public static void queryAddSumFields(
        QueryBuildDataSource    _qbS,
        boolean                 _onlyAvail = false)
    {
        QueryBuildFieldList qbfl = _qbS.fields();
        Set                 fields  = new Set(Types::Integer);
        Counter     i;

        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>

        void addField(FieldId fieldId)
        {
            if (!fields.in(fieldId))
            {
                qbfl.addField(fieldId,SelectionField::Sum);
            }
        }

        for (i = 1; i <= qbfl.fieldCount(); i++)
        {
            if (qbfl.fieldKind(i) == SelectionField::Sum)
            {
                fields.add(qbfl.field(i));
            }
        }

        if (! _onlyAvail)
        {
            addField(fieldNum(InventSum,PostedQty));
            addField(fieldNum(InventSum,PostedValue));
            addField(fieldNum(InventSum,PhysicalValue));
            addField(fieldNum(InventSum,Deducted));
            addField(fieldNum(InventSum,Registered));
            addField(fieldNum(InventSum,Received));
            addField(fieldNum(InventSum,Picked));
            addField(fieldNum(InventSum,ReservPhysical));
            addField(fieldNum(InventSum,ReservOrdered));
            addField(fieldNum(InventSum,OnOrder));
            addField(fieldNum(InventSum,Ordered));
            addField(fieldNum(InventSum,Arrived));
            addField(fieldNum(InventSum,QuotationReceipt));
            addField(fieldNum(InventSum,QuotationIssue));
            addField(fieldNum(InventSum,PhysicalInvent));
            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                addField(fieldNum(InventSum,PostedValueSecCur_RU));
                addField(fieldNum(InventSum,PhysicalValueSecCur_RU));
            }
            // </GEERU>
        }

        addField(fieldNum(InventSum,AvailPhysical));
        addField(fieldNum(InventSum,AvailOrdered));

        if (#PdsCatchWeightEnabled)
        {
            if (!_onlyAvail)
            {
                addField(fieldNum(InventSum,PdsCWPostedQty));
                addField(fieldNum(InventSum,PdsCWDeducted));
                addField(fieldNum(InventSum,PdsCWRegistered));
                addField(fieldNum(InventSum,PdsCWReceived));
                addField(fieldNum(InventSum,PdsCWPicked));
                addField(fieldNum(InventSum,PdsCWReservPhysical));
                addField(fieldNum(InventSum,PdsCWReservOrdered));
                addField(fieldNum(InventSum,PdsCWOnOrder));
                addField(fieldNum(InventSum,PdsCWOrdered));
                addField(fieldNum(InventSum,PdsCWArrived));
                addField(fieldNum(InventSum,PdsCWQuotationReceipt));
                addField(fieldNum(InventSum,PdsCWQuotationIssue));
                addField(fieldNum(InventSum,PdsCWPhysicalInvent));
            }

            addField(fieldNum(InventSum,PdsCWAvailPhysical));
            addField(fieldNum(InventSum,PdsCWAvailOrdered));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumBatchWithBatchAttrib</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a cumulative <c>InventSum</c> table buffer for batches available where the batch attribute values
    /// match the required batch attribute tolerances.
    /// </summary>
    /// <param name="_movement">
    /// The inventory movement.
    /// </param>
    /// <returns>
    /// A cumulative <c>InventSum</c> table buffer for available batches or an empty buffer if the item does not
    /// have any batch attributes assigned.
    /// </returns>
    public static InventSum sumBatchWithBatchAttrib(InventMovement _movement)
    {
        InventSum                           inventSum;
        InventDim                           inventDim = _movement.inventdim();
        InventReservationCriteriaBuilder    criteriaBuilder;
        InventOnHandCriteria                criteria;
        InventDimParm                       inventDimParm;
        Query                               query;

        if (#PdsBatchAttribEnabled
            && PdsBatchAttribByItem::existItemIdAny(_movement.itemId()))
        {
            inventDimParm.ItemIdFlag            = NoYes::Yes;
            #InventDimDevelop
            inventDimParm.InventSiteIdFlag      = (inventDim.InventSiteId     != "");
            inventDimParm.InventLocationIdFlag  = (inventDim.InventLocationId != "");
            inventDimParm.InventBatchIdFlag     = (inventDim.InventBatchId    != "");

            criteriaBuilder = InventReservationCriteriaBuilder::newMovement(_movement);
            criteriaBuilder.parmAlwaysApplyBatchAttributes(true);
            criteria = criteriaBuilder.buildCriteria();

            query = InventSum::newQuery(null, _movement.itemId(), inventDim, inventDimParm, null);
            criteria.applyToOnHand(query);
            inventSum = criteria.mergeMatchingRecords(query, tableNum(InventSum));
        }

        return inventSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyInventSumDeltaQuantitiesForSqlTransaction</Name>
				<Source><![CDATA[
    public void applyInventSumDeltaQuantitiesForSqlTransaction(CreatedTransactionId _sqlTransactionId)
    {
        this.addInventSumDeltaQty(this.retrieveMatchingInventSumDeltaForSQlTransaction(_sqlTransactionId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveMatchingInventSumDeltaForSQlTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the matching on hand inventory change for the current on hand inventory record based on the SQL transaction Id.
    /// </summary>
    /// <param name = "_transactionId">A sql transaction id.</param>
    /// <returns>A matching on hand inventory change record.</returns>
    protected InventSumDelta retrieveMatchingInventSumDeltaForSQlTransaction(CreatedTransactionId _transactionId)
    {
        InventSumDelta inventSumDelta;

        SysDaFindObject    findObject = new SysDaFindObject(this.instantiateInventSumDeltaQueryObjectForSQLTransaction(inventSumDelta, _transactionId));
        SysDaFindStatement findStatement = new SysDaFindStatement();

        findStatement.execute(findObject);

        return inventSumDelta;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventSumDeltaQueryObjectForSQLTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a query object for the <c>InventSumDelta</c> selection with SQL transaction id filter.
    /// </summary>
    /// <param name = "_inventSumDelta">An <c>InventSumDelta</c> record buffer.</param>
    /// <param name = "_sqlTransactionId">A SQL transaction id.</param>
    /// <returns>A query object for the find statement.</returns>
    protected SysDaQueryObject instantiateInventSumDeltaQueryObjectForSQLTransaction(InventSumDelta _inventSumDelta, CreatedTransactionId _sqlTransactionId)
    {
        SysDaQueryObject queryObject = new SysDaQueryObject(_inventSumDelta);

        InventDim::dimAddInventSumDeltaFieldsQueryProjection(queryObject);

        SysDaQueryExpression queryExpression = InventSumFieldsQueryBuilder::buildInventSumDeltaDimIdSQLTransactionFilter(_inventSumDelta, this.ItemId, this.InventDimId, _sqlTransactionId);

        queryObject.whereClause(queryExpression);

        return queryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemWHSEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if item is WHS enabled.
    /// </summary>
    /// <returns>
    /// NoYes::Yes if item is WHS enabled; otherwise, NoYes::No.
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    public display WHSIsItemWHSEnabled isItemWHSEnabled()
    {
        return WHSInventEnabled::exist(this.ItemId) ?
                NoYes::Yes                          :
                NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCustExpiredOrBlockPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the unavailable inventory quantity that is expired or sales-reserve-blocked.
    /// </summary>
    /// <param name="_sellDays">
    ///     Allowed sell days.
    /// </param>
    /// <param name="_dateReq">
    ///     A date value that contains a requested date for search.
    /// </param>
    /// <param name="_inventDim">
    ///     InventDim criteria to use for search.
    /// </param>
    /// <returns>
    ///     Retrieves the container that contains PhysicalInvent and PdsCWPhysicalInvent.
    /// </returns>
    public container pdsCustExpiredOrBlockPhysical(
        PdsSellableDays             _sellDays,
        SalesReceiptDateRequested   _dateReq,
        InventDim                   _inventDim
        )
    {
        InventModelGroup inventModelGroup;
        InventSum inventSum;
        InventDim inventDim;
        InventDimParm inventDimParm;
        InventBatch inventBatch;
        PdsDispositionMaster pdsDispositionMaster;
        InventQty expiredOrBlockQty;
        PdsCWInventQty expiredOrBlockCwQty;

        InventTable inventTable = this.inventTable();

        if (inventTable.isItemBatchActivated())
        {
            inventDimParm.initFromInventDim(_inventDim);
            inventModelGroup = this.inventTable().modelGroup();

            if (InventUseDimOfInventSumForPublicQueryToggle::instance().isEnabled())
            {
                select sum(PhysicalInvent), sum(PdsCWPhysicalInvent)
                    from inventSum
                    where inventSum.ClosedQty == NoYes::No
                        && inventSum.ItemId == this.ItemId
                        && #InventDimFieldsFilter(inventSum, _inventDim, inventDimParm)
                exists join inventBatch
                    where inventBatch.InventBatchId == inventSum.InventBatchId
                        && inventBatch.ItemId == this.ItemId
                    exists join pdsDispositionMaster
                    where (inventBatch.PdsDispositionCode == pdsDispositionMaster.DispositionCode
                               && pdsDispositionMaster.PdsSalesBlockReserve == NoYes::Yes);

                expiredOrBlockQty = inventSum.PhysicalInvent;
                expiredOrBlockCwQty = inventSum.PdsCWPhysicalInvent;

                select sum(PhysicalInvent), sum(PdsCWPhysicalInvent)
                    from inventSum
                    where inventSum.ClosedQty == NoYes::No
                        && inventSum.ItemId == this.ItemId
                        && #InventDimFieldsFilter(inventSum, _inventDim, inventDimParm)
                exists join inventBatch
                    where inventBatch.InventBatchId == inventSum.InventBatchId
                        && inventBatch.ItemId == this.ItemId
                        && (#PdsShelfEnabled
                                && inventBatch.ExpDate != dateNull()
                                && ((inventModelGroup.PdsPickCriteria == PdsPickCriteria::BestBeforeDate
                                        && inventBatch.PdsBestBeforeDate < _dateReq + _sellDays)
                                    || (inventModelGroup.PdsPickCriteria  == PdsPickCriteria::ExpiryDate
                                        && inventBatch.ExpDate < _dateReq + _sellDays - 1)))
                    notexists join pdsDispositionMaster
                    where inventBatch.PdsDispositionCode == pdsDispositionMaster.DispositionCode
                              && pdsDispositionMaster.PdsSalesBlockReserve == NoYes::Yes;

                expiredOrBlockQty += inventSum.PhysicalInvent;
                expiredOrBlockCwQty += inventSum.PdsCWPhysicalInvent;
            }
            else
            {
                select sum(PhysicalInvent), sum(PdsCWPhysicalInvent)
                    from inventSum
                    where inventSum.ClosedQty == NoYes::No
                        && inventSum.ItemId == this.ItemId
                    #inventDimExistsJoin(InventSum.inventDimId, inventDim, _inventDim, inventDimParm)
                exists join inventBatch
                    where inventBatch.InventBatchId == inventDim.InventBatchId
                        && inventBatch.ItemId == this.ItemId
                    exists join pdsDispositionMaster
                    where (inventBatch.PdsDispositionCode == pdsDispositionMaster.DispositionCode
                               && pdsDispositionMaster.PdsSalesBlockReserve == NoYes::Yes);

                expiredOrBlockQty = inventSum.PhysicalInvent;
                expiredOrBlockCwQty = inventSum.PdsCWPhysicalInvent;

                select sum(PhysicalInvent), sum(PdsCWPhysicalInvent)
                    from inventSum
                    where inventSum.ClosedQty == NoYes::No
                        && inventSum.ItemId == this.ItemId
                    #inventDimExistsJoin(InventSum.inventDimId, inventDim, _inventDim, inventDimParm)
                exists join inventBatch
                    where inventBatch.InventBatchId == inventDim.InventBatchId
                        && inventBatch.ItemId == this.ItemId
                        && (#PdsShelfEnabled
                                && inventBatch.ExpDate != dateNull()
                                && ((inventModelGroup.PdsPickCriteria == PdsPickCriteria::BestBeforeDate
                                        && inventBatch.PdsBestBeforeDate < _dateReq + _sellDays)
                                    || (inventModelGroup.PdsPickCriteria  == PdsPickCriteria::ExpiryDate
                                        && inventBatch.ExpDate < _dateReq + _sellDays - 1)))
                    notexists join pdsDispositionMaster
                    where inventBatch.PdsDispositionCode == pdsDispositionMaster.DispositionCode
                              && pdsDispositionMaster.PdsSalesBlockReserve == NoYes::Yes;

                expiredOrBlockQty += inventSum.PhysicalInvent;
                expiredOrBlockCwQty += inventSum.PdsCWPhysicalInvent;
            }
        }

        return [expiredOrBlockQty, expiredOrBlockCwQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTrans</Name>
				<Source><![CDATA[
    ReqTrans reqTrans(InventDimId   _covInventDimId,
                      RefRecId      _reqPlanVersion = ReqPlanVersion::findActiveReqPlanIdDynamic().RecId,
                      boolean       _forupdate      = false)
    {
        ReqTrans    reqTrans;

        reqTrans.selectForupdate(_forupdate);

        select firstonly reqTrans
                where reqTrans.itemid          == this.itemId
                    && reqTrans.CovInventDimId == _covInventDimId
                    && reqTrans.PlanVersion    == _reqPlanVersion;

        return reqTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the invent unit of the item that is related to the current record.
    /// </summary>
    /// <returns>
    /// The invent unit of the item.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display UnitOfMeasureSymbol inventUnitId(InventSum _inventSum)
    {
        return InventTableModule::find(_inventSum.ItemId, ModuleInventPurchSales::Invent).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOpenInventoryQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the item has any unclosed quantity.
    /// </summary>
    /// <param name = "_itemId">The item ID to check.</param>
    /// <returns>true if the item has open quantity; otherwise, false</returns>
    [Hookable(false)]
    internal static boolean hasOpenInventoryQuantity(ItemId _itemId)
    {
        return (select firstOnly RecId from InventSum
                    where InventSum.ItemId      == _itemId
                    &&    InventSum.ClosedQty   == NoYes::No).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventSumWithInventSumDelta</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize dimension fields on <c>InventSum</c> with <c>InventSumDelta</c> buffer.
    /// </summary>
    /// <param name="_inventSumDelta">
    /// The <c>InventSumDelta</c> buffer from which to initialize.
    /// </param>
    public void initInventSumWithInventSumDelta(InventSumDelta _inventSumDelta)
    {
        InventSumInventDimInitializer::initInventSumWithInventSumDelta(this, _inventSumDelta);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventSumWithInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set <c>InventSum</c> record with dimension fields.
    /// </summary>
    public void initInventSumWithInventDim()
    {
        InventSumInventDimInitializer::initInventSumWithInventDim(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventSumQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds InventSum for the active dimensions. It is a corresponding method to InventDim::dimAddInventDimExistsJoin.
    /// </summary>
    /// <param name="_inventSum">
    /// The <c>InventSum</c> table.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The <c>InventDim</c> criteria that will be set as ranges on the table.
    /// </param>
    /// <param name="_inventDimParm">
    /// The <c>InventDim</c> Parm that will be set as ranges on the table.
    /// </param>
    /// <returns>
    /// The query expression with active dimensions in <c>InventSum</c>.
    /// </returns>
    [Hookable(false)]
    public static SysDaQueryExpression addInventSumQueryObject(InventSum _inventSum, inventDim _inventDimCriteria, inventDimParm _inventDimParm)
    {
        InventSumQueryBuilder inventSumQueryBuilder = InventSumQueryBuilder::newFromQuery(_inventSum, _inventDimCriteria, _inventDimParm);
        return inventSumQueryBuilder.buildWhereClauseFromEnabledInventoryDimensions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeBasedOnInventDimCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ranges to an <c>InventSum</c> datasource based on the values in the <c>InventDim</c> criteria.
    /// </summary>
    /// <param name="_dsInventSum">
    /// The <c>InventSum</c> datasource.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The <c>InventDim</c> criteria that will be set as ranges on the data source.
    /// </param>
    /// <remarks>
    /// Ranges will only be added for non-empty inventory dimensions.
    /// </remarks>
    public static void queryAddRangeBasedOnInventDimCriteria(
        QueryBuildDataSource    _dsInventSum, 
        InventDim               _inventDimCriteria)
    {
        ListEnumerator      enumerator = InventDim::dimFieldsList().getEnumerator();
        FieldId             inventDimFieldId;
        QueryBuildRange     queryRange;

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDimCriteria.checkInvalidFieldAccess(false);

        while (enumerator.moveNext())
        {
            inventDimFieldId = enumerator.current();

            if (_inventDimCriteria.(inventDimFieldId))
            {
                queryRange = SysQuery::findOrCreateRange(_dsInventSum, InventDim::getInventSumFieldIdFromInventDimFieldId(inventDimFieldId));
                queryRange.value(queryValue(_inventDimCriteria.(inventDimFieldId)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeCriteriaForSelectedDims</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds up the query range conditions for <c>InventSum</c> fields based on the provided criteria record.
    /// </summary>
    /// <param name = "_qbdsInventSum">A <c>QueryBuildDataSource</c> instance for <c>InventSum</c> table.</param>
    /// <param name = "_inventDimCriteria">An <c>InventDim</c> record that contains the range values to apply.</param>
    /// <param name = "_inventDimParm">An <c>InventDimParm</c> record that contains the selection of dimensions to apply ranges to.</param>
    public static void queryAddRangeCriteriaForSelectedDims(QueryBuildDataSource _qbdsInventSum, InventDim _inventDimCriteria, InventDimParm _inventDimParm)
    {
        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDimCriteria.checkInvalidFieldAccess(false);
        _inventDimParm.checkInvalidFieldAccess(false);

        Enumerator enumerator = _inventDimParm.selectedDimFields().getEnumerator();
        while (enumerator.moveNext())
        {
            FieldId inventDimFieldId = enumerator.current();
            QueryBuildRange queryRange = SysQuery::findOrCreateRange(_qbdsInventSum, InventDim::getInventSumFieldIdFromInventDimFieldId(inventDimFieldId));
            queryRange.value(queryValue(_inventDimCriteria.(inventDimFieldId)));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123836</DeveloperDocumentation>
	<FormRef>InventOnhandItem</FormRef>
	<Label>@SYS7092</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ItemDimIdx</ClusteredIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<OccEnabled>No</OccEnabled>
	<PrimaryIndex>ItemDimIdx</PrimaryIndex>
	<ReplacementKey>ItemDimIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostedValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Deducted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Received</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReservOrdered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReservPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Ordered</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AvailablePhysical</Name>
			<Label>@SYS22389</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Deducted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Picked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Received</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Registered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReservPhysical</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AvailableQuantity</Name>
			<Label>@SYS54429</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AvailOrdered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AvailPhysical</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeltaFields</Name>
			<Label>@SYS98311</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWPostedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostedValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Deducted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Received</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReservOrdered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReservPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Ordered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationIssue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationReceipt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Registered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Picked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AvailOrdered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AvailPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PhysicalValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Arrived</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PhysicalInvent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWDeducted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWPicked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWReceived</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWRegistered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWReservPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWReservOrdered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWOnOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWOrdered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWArrived</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWQuotationIssue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWQuotationReceipt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWAvailOrdered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWAvailPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWPhysicalInvent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PhysicalValueSecCur_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostedValueSecCur_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeltaFieldsQty</Name>
			<Label>@SYS98312</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWPostedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Deducted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Picked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Received</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Registered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReservPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReservOrdered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Ordered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Arrived</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationIssue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationReceipt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWDeducted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWPicked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWReceived</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWRegistered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWReservPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWReservOrdered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWOnOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWOrdered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWArrived</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWQuotationIssue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWQuotationReceipt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AvailOrdered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AvailPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWAvailOrdered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWAvailPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PhysicalInvent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWPhysicalInvent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@Sys5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Closed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Item</Name>
			<Label>@SYS7407</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LastDate</Name>
			<Label>@SYS15992</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LastUpdDatePhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastUpdDateExpected</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PhysicalInventory</Name>
			<Label>@SYS23942</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PhysicalInvent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ClosedQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TotalAvailable</Name>
			<Label>@SYS24243</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Arrived</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Ordered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReservOrdered</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Value</Name>
			<Label>@SYS11762</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PhysicalValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostedValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ValueSecCur_RU</Name>
			<Label>@GLS101833</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PhysicalValueSecCur_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostedValueSecCur_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Various</Name>
			<Label>@SYS28008</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OnOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationReceipt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationIssue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProductDimensions</Name>
			<Label>@SYS70071</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>configId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSizeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventColorId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventStyleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventVersionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>StorageDimensions</Name>
			<Label>@SYS108783</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>wMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventStatusId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>wMSPalletId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TrackingDimensions</Name>
			<Label>@SYS317798</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>inventBatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventSerialId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventOwnerId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventGtdId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventoryDimensions</Name>
			<Label>@SYS53630</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>configId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSizeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventColorId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventStyleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventVersionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension3</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension4</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension5</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension6</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension7</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension8</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension9</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension10</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension11</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension12</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>wMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventStatusId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventBatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventSerialId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventOwnerId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventGtdId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>wMSPalletId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PreviewQuery</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReservPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AvailOrdered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AvailPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PhysicalInvent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Arrived</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQtyArrived</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AvailOrdered</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQtyAvailOrdered</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AvailPhysical</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQtyAvailPhysical</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Closed</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSumClosed</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ClosedQty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSumClosed</ExtendedDataType>
			<Label>@SYS4009638</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Deducted</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQtyDeducted</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LastUpdDateExpected</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DateExpected</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LastUpdDatePhysical</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DatePhysical</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OnOrder</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQtyOnOrder</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Ordered</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQtyOrdered</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWArrived</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWArrived</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWAvailOrdered</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWAvailOrdered</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWAvailPhysical</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWAvailPhysical</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWDeducted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWDeducted</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWOnOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWOnOrder</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWOrdered</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWOrdered</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWPhysicalInvent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWPhysicalInvent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWPicked</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWPicked</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWPostedQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWPostedQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQuotationIssue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWQuotationIssue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQuotationReceipt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWQuotationReceipt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWReceived</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWReceived</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWRegistered</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWRegistered</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWReservOrdered</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWReservOrdered</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWReservPhysical</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWReservPhysical</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PhysicalInvent</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQtyPhysicalOnhand</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PhysicalValue</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmountPhysical</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PhysicalValueSecCur_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmountPhysicalSecCur_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Picked</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQtyPicked</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PostedQty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQtyPosted</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PostedValue</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmountPosted</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PostedValueSecCur_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmountPostedSecCur_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QuotationIssue</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQtyQuotationIssue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QuotationReceipt</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQtyQuotationReceipt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Received</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQtyReceived</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Registered</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQtyRegistered</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReservOrdered</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQtyReservOrdered</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReservPhysical</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQtyReservPhysical</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsExcludedFromInventoryValue</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventIsExcludedFromInventoryValue</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>configId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResItemConfigurationName</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventBatchId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventBatchId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventColorId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResItemColorName</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventGtdId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventGTDId_RU</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventOwnerId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventOwnerId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventProfileId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventProfileId_RU</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSerialId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSerialId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSizeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResItemSizeName</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventStatusId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSInventStatusId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventStyleId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResItemStyleName</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventVersionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResVersionName</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LicensePlateId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLicensePlateId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>wMSLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>wMSPalletId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>WMSAdvancedUpgrade</ConfigurationKey>
			<ExtendedDataType>WMSPalletId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimension1</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimension1</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimension2</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimension2</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimension3</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimension3</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimension4</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimension4</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimension5</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimension5</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimension6</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimension6</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimension7</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimension7</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimension8</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimension8</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>InventDimension9</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimension9</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventDimension10</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimension10</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimension11</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimension11</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimension12</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimension12</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ClosedItemDimIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Closed</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemDimIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Closed</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimIdClosedQtyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ClosedQty</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PhysicalInvent</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ClosedQtyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ClosedQty</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ReservationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ClosedQty</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Closed</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AvailPhysical</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LastUpdDatePhysical</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AvailOrdered</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OnOrder</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PdsCWOnOrder</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PdsCWAvailPhysical</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PdsCWAvailOrdered</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>QtyWmsLocationPhysInventIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ClosedQty</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>wMSLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PhysicalInvent</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LPQtyPhysInventIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>LicensePlateId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ClosedQty</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PhysicalInvent</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>QtyInventSerialIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ClosedQty</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventSerialId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>QtyInventBatchIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ClosedQty</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventBatchId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LocationIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<ConfigurationKey>WMSBasic</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>wMSLocationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventProfileIdx_RU</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<ConfigurationKey>CRSERussia</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventProfileId_RU</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventJournalTrans</Name>
			<EntityRelationshipRole>@SYS123453</EntityRelationshipRole>
			<RelatedTable>InventJournalTrans</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventSum</Name>
			<EntityRelationshipRole>@SYS123816</EntityRelationshipRole>
			<RelatedTable>InventSum</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransferLine</Name>
			<EntityRelationshipRole>@SYS123837</EntityRelationshipRole>
			<RelatedTable>InventTransferLine</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdBOM</Name>
			<EntityRelationshipRole>@SYS123838</EntityRelationshipRole>
			<RelatedTable>ProdBOM</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdJournalBOM</Name>
			<EntityRelationshipRole>@SYS123839</EntityRelationshipRole>
			<RelatedTable>ProdJournalBOM</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdTable</Name>
			<EntityRelationshipRole>@SYS123840</EntityRelationshipRole>
			<RelatedTable>ProdTable</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchLine</Name>
			<EntityRelationshipRole>@SYS123841</EntityRelationshipRole>
			<RelatedTable>PurchLine</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReqTrans</Name>
			<EntityRelationshipRole>@SYS123842</EntityRelationshipRole>
			<RelatedTable>ReqTrans</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesOrderLine</Name>
			<EntityRelationshipRole>@SYS123843</EntityRelationshipRole>
			<RelatedTable>SalesLine</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>