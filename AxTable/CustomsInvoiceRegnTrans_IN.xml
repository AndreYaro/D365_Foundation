<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomsInvoiceRegnTrans_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustomsInvoiceRegnTrans_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromCustomsInvoiceRegnJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// initializes receive and CustomsInvoiceRegnJournalLineRecId fields from CustomsInvoiceRegnJournalLine_IN buffer.
    /// </summary>
    /// <param name="_customsInvoiceRegJournalLine">
    /// The CustomsInvoiceRegnJournalLine_IN table record for copying fields receive and CustomsInvoiceRegnJournalLineRecId fields.
    /// </param>
    public void initFromCustomsInvoiceRegnJournalLine(CustomsInvoiceRegnJournalLine_IN _customsInvoiceRegJournalLine)
    {
        this.Receive                            = _customsInvoiceRegJournalLine.Receive;
        this.CustomsInvoiceRegnJournalLineRecId = _customsInvoiceRegJournalLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfPurchQuantityConsumed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the total PurchLine Qty is updated for InvoiceRegistration
    /// </summary>
    /// <param name="_customsInvoiceRegnJournalLine">
    /// The CustomsInvoiceRegnJournalLine_IN table record to find quantity updated for InvoiceRegistration.
    /// </param>
    /// <returns>
    /// true if all PurchQty updated for invoiceRegistration, otherwise false.
    /// </returns>
    public static boolean checkIfPurchQuantityConsumed(CustomsInvoiceRegnJournalLine_IN _customsInvoiceRegnJournalLine)
    {
        CustomsInvoiceRegnTrans_IN          customsInvoiceRegnTrans;
        CustomsInvoiceRegnJournalTable_IN   customsInvoiceRegnJournalTable;
        CustomsQty_IN                       totalOrderedQty;
        CustomsQty_IN                       consumedQty;
        PurchLine                           purchLine;
        boolean                             isConsumed;

        customsInvoiceRegnJournalTable = CustomsInvoiceRegnJournalTable_IN::find(_customsInvoiceRegnJournalLine.CustomsInvoiceRegnJournalTableRecId);

        select sum(PurchQty) from purchLine
            group by PurchId
                where purchLine.PurchId == customsInvoiceRegnJournalTable.OrderId;

        totalOrderedQty = purchLine.PurchQty;

        select sum(Receive) from customsInvoiceRegnTrans
        join _customsInvoiceRegnJournalLine
            group by CustomsInvoiceRegnJournalTableRecId
                where customsInvoiceRegnTrans.CustomsInvoiceRegnJournalLineRecId == _customsInvoiceRegnJournalLine.RecId
                   && customsInvoiceRegnJournalTable.RecId                       == _customsInvoiceRegnJournalLine.CustomsInvoiceRegnJournalTableRecId;

        consumedQty = customsInvoiceRegnTrans.Receive;

        if (consumedQty == totalOrderedQty)
        {
            isConsumed = true;
        }
        return isConsumed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfQuantityConsumed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the total qty selected for invoiceRegistration is greater than PurchQty
    /// </summary>
    /// <param name="_customsInvoiceRegnJournalLine">
    /// The CustomsInvoiceRegnJournalLine_IN table record to find quantity updated for InvoiceRegistration.
    /// </param>
    /// <returns>
    /// True if qty selected for invoiceRegistration is greater than PurchQty, otherwise false.
    /// </returns>
    public static boolean checkIfQuantityConsumed(CustomsInvoiceRegnJournalLine_IN _customsInvoiceRegnJournalLine)
    {
        CustomsInvoiceRegnTrans_IN  customsInvoiceRegnTrans;
        CustomsQty_IN               totalOrderedQty;
        CustomsQty_IN               consumedQty;
        CustomsQty_IN               updatedQty;
        PurchLine                   purchLine;
        boolean                     isConsumed;

        select sum(PurchQty) from purchLine
            group by PurchId
                where purchLine.PurchId == CustomsInvoiceRegnJournalTable_IN::find(_customsInvoiceRegnJournalLine.CustomsInvoiceRegnJournalTableRecId).OrderId;

        totalOrderedQty = purchLine.PurchQty;

        select sum(Receive) from customsInvoiceRegnTrans
            group by CustomsInvoiceRegnJournalLineRecId
                where customsInvoiceRegnTrans.CustomsInvoiceRegnJournalLineRecId == _customsInvoiceRegnJournalLine.RecId;
        consumedQty = customsInvoiceRegnTrans.Receive;

        updatedQty  = consumedQty + _customsInvoiceRegnJournalLine.Receive;

        if (consumedQty && (abs(updatedQty) > abs(totalOrderedQty)))
        {
            isConsumed = true;
        }
        return isConsumed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvoiceRegnComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the InvoiceRegistration is complete for the specified purchLine.
    /// </summary>
    /// <param name="_purchLineRecId">
    /// The PurchLine table recId to find quantity updated for InvoiceRegistration and PurchQuantity.
    /// </param>
    /// <returns>
    /// True if the Invoice Registration is complete for specified PurchLine, otherwise false.
    /// </returns>
    public static boolean checkInvoiceRegnComplete(RefRecId _purchLineRecId)
    {
        CustomsInvoiceRegnTrans_IN          customsInvoiceRegnTrans;
        CustomsQty_IN                       totalOrderedQty;
        CustomsQty_IN                       consumedQty;
        PurchLine                           purchLine;
        boolean                             isInvoiceRegistrationComplete;
        CustomsInvoiceRegnJournalLine_IN    customsInvoiceRegnJournalLine;

        select PurchQty from purchLine
            where purchLine.RecId == _purchLineRecId;

        totalOrderedQty = purchLine.PurchQty;

        customsInvoiceRegnJournalLine = null;

        select sum(Receive) from customsInvoiceRegnTrans
            join  PurchLineRecId, RecId from customsInvoiceRegnJournalLine
                where customsInvoiceRegnTrans.CustomsInvoiceRegnJournalLineRecId == customsInvoiceRegnJournalLine.RecId
                      && customsInvoiceRegnJournalLine.PurchLineRecId == _purchLineRecId;

        consumedQty = customsInvoiceRegnTrans.Receive;

        if (consumedQty && (consumedQty == totalOrderedQty))
        {
            isInvoiceRegistrationComplete = true;
        }

        return isInvoiceRegistrationComplete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurchTableForUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the Invoice Registration is updated completely for specified PurchLine
    /// </summary>
    /// <param name="_purchId">
    /// The PurchId recId to find quantity updated for InvoiceRegistration and PurchQuantity.
    /// </param>
    /// <returns>
    /// True if InvoiceRegistration is complete otherwise, false.
    /// </returns>
    public static boolean checkPurchTableForUpdate(purchIdBase _purchId)
    {
        CustomsInvoiceRegnTrans_IN  customsInvoiceRegnTrans;
        CustomsQty_IN               totalOrderedQty;
        CustomsQty_IN               consumedQty;
        PurchLine                   purchLine, purchLineLoc;
        boolean                     update = true;

        CustomsInvoiceRegnJournalLine_IN  customsInvoiceRegnJournalLine;

        while select RecId from purchLineLoc
               where purchLineLoc.PurchId                 == _purchId
        {
            select sum(PurchQty) from purchLine
                where purchLine.RecId == purchLineLoc.RecId;

            totalOrderedQty = purchLine.PurchQty;

            select sum(Receive) from customsInvoiceRegnTrans
                join CustomsInvoiceRegnJournalTableRecId from customsInvoiceRegnJournalLine
                 where customsInvoiceRegnTrans.CustomsInvoiceRegnJournalLineRecId == customsInvoiceRegnJournalLine.RecId
                    && customsInvoiceRegnJournalLine.PurchLineRecId               == purchLineLoc.RecId;

            consumedQty = customsInvoiceRegnTrans.Receive;

            if (consumedQty != totalOrderedQty)
            {
                update = false;
            }
        }
        return update;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the CustomsInvoiceRegnTrans_IN table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing CustomsInvoiceRegnTrans_IN table.
    /// </returns>
    public static CustomsInvoiceRegnTrans_IN find(
        RefRecId            _recId,
        boolean             _forupdate          = false,
        ConcurrencyModel    _concurrencyModel   = ConcurrencyModel::Auto)
    {
        CustomsInvoiceRegnTrans_IN customsInvoiceRegnTrans;

        customsInvoiceRegnTrans.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            customsInvoiceRegnTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly customsInvoiceRegnTrans
            where customsInvoiceRegnTrans.RecId == _recId;

        return customsInvoiceRegnTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByInvoiceRegnJournalLineRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the CustomsInvoiceRegnTrans_IN table for the specified CustomsInvoiceRegnJournalLine Table RecId.
    /// </summary>
    /// <param name="_customsInvoiceRegnJournalLineRecId">
    /// The CustomsInvoiceRegnJournalLine_IN table RecId to find CustomsInvoiceRegnTrans_IN record.
    /// </param>
    /// <param name="_forUpdate">
    /// if true, select record for update.
    /// </param>
    /// <returns>
    /// The CustomsInvoiceRegnTrans_IN table record for specified CustomsInvoiceRegnJournalLine table RecId.
    /// </returns>
    public static CustomsInvoiceRegnTrans_IN findByInvoiceRegnJournalLineRecId(
        RefRecId    _customsInvoiceRegnJournalLineRecId,
        boolean     _forUpdate = false)
    {
        CustomsInvoiceRegnTrans_IN customsInvoiceRegnTrans;

        if (_customsInvoiceRegnJournalLineRecId)
        {
            customsInvoiceRegnTrans.selectForUpdate(_forUpdate);

            select firstonly customsInvoiceRegnTrans
                where customsInvoiceRegnTrans.CustomsInvoiceRegnJournalLineRecId == _customsInvoiceRegnJournalLineRecId;
        }

        return customsInvoiceRegnTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPurchLineRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the CustomsInvoiceRegnTrans_IN table for the specified purchLine RecId.
    /// </summary>
    /// <param name="_purchLineRecId">
    /// The PurchLine recId to find CustomsInvoiceRegnTrans_IN record.
    /// </param>
    /// <returns>
    /// The CustomsInvoiceRegnTrans_IN record for specified PurchLine RecId.
    /// </returns>
    public static CustomsInvoiceRegnTrans_IN findByPurchLineRecId(RefRecId _purchLineRecId)
    {
        CustomsInvoiceRegnTrans_IN          customsInvoiceRegnTrans;
        CustomsInvoiceRegnJournalLine_IN    customsInvoiceRegnJournalLine;

        if (_purchLineRecId)
        {
            select firstonly RecId, CustomsInvoiceRegnJournalLineRecId from customsInvoiceRegnTrans
                join  PurchLineRecId, RecId from customsInvoiceRegnJournalLine
                where customsInvoiceRegnTrans.CustomsInvoiceRegnJournalLineRecId == customsInvoiceRegnJournalLine.RecId
                && customsInvoiceRegnJournalLine.PurchLineRecId == _purchLineRecId;
        }
        return customsInvoiceRegnTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupImporterInvoiceNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>CustomsInvoiceRegnJournalTable_IN</c> table.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The form reference control object with which to perform the lookup.
    /// </param>
    /// <param name="_purchId">
    /// The PurchId to filter the CustomsInvoiceRegnJournalTable_IN records.
    /// </param>
    public static void lookupImporterInvoiceNumber(FormReferenceControl _formReferenceControl, PurchIdBase _purchId)
    {
        SysReferenceTableLookup          sysTableLookup = SysReferenceTableLookup::newParameters(tablenum(CustomsInvoiceRegnJournalTable_IN), _formReferenceControl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        queryBuildDataSource    = query.addDataSource(tablenum(CustomsInvoiceRegnJournalTable_IN));
        queryBuildRange         = queryBuildDataSource.addRange(fieldnum(CustomsInvoiceRegnJournalTable_IN, OrderId));
        queryBuildRange.value(queryValue(_purchId));
        sysTableLookup.addLookupfield(fieldnum(CustomsInvoiceRegnJournalTable_IN, CustomsImportInvoiceNumberTable));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS64138</DeveloperDocumentation>
	<Label>@GLS5751</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>CustomsInvoiceRegnJournalLineRecId</TitleField1>
	<TitleField2>CustomsPurchInternalBOEId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomsInvoiceRegnJournalLineRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomsPurchInternalBOEId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomsInvoiceRegnJournalLineRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OrderLines</Name>
			<Label>@SYS508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Receive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomsInvoiceRegnJournalLineRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomsPurchInternalBOEId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomsInvoiceRegnJournalLineRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomsPurchInternalBOEId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomsPurchInternalBOEId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Receive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomsQty_IN</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CustomsInvoiceRegnJournalLineRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustomsInvoiceRegnJournalLineRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustomsInvoiceRegnJournalLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustomsInvoiceRegnJournalLine_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomsInvoiceRegnJournalLineRecId</Name>
					<Field>CustomsInvoiceRegnJournalLineRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>