<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollBenefitTaxRule_US</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PayrollBenefitTaxRule_US extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event that is caused when a field is modified for a <c>PayrollBenefitTaxRule_US</c> record.
    /// </summary>
    /// <param name="_fieldId">
    /// A modified field ID.
    /// </param>
    /// <remarks>
    /// All the IsExemptFrom... fields are only used when the PreTaxBasis is set to Custom.
    /// This method resets the field vales to No, when the PreTaxBasis is changed to some value other than Custom.
    /// </remarks>

    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(PayrollBenefitTaxRule_US, PreTaxBasis):
                if ( this.orig().PreTaxBasis == PayrollPreTaxBasis::Custom &&
                    this.PreTaxBasis != PayrollPreTaxBasis::Custom )
                {
                    this.IsExemptFromFederalIncomeTax = NoYes::No;
                    this.IsExemptFromStateIncomeTax = NoYes::No;
                    this.IsExemptFromLocalIncomeTax = NoYes::No;
                    this.IsExemptFromMedicare = NoYes::No;
                    this.IsExemptFromFICA = NoYes::No;
                    this.IsExemptFromStateDisabilityInsurance = NoYes::No;
                    this.IsExemptFromStateUnemployment = NoYes::No;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>PayrollBenefitTaxRule_US</c> table and shows an infolog message if record does not exist.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>

    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;

        if (!PayrollBenefitTaxRule_US::exist(_recId))
        {
            ret = checkFailed(strFmt(PayrollBenefitTaxRule_US::txtNotExist(), tableStr(PayrollBenefitTaxRule_US)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>PayrollBenefitTaxRule_US</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>

    public static boolean exist(RecId _recId)
    {
        return _recId && (select firstonly RecId from payrollBenefitTaxRule_US
                    where payrollBenefitTaxRule_US.RecId == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>PayrollBenefitTaxRule_US</c> table based on a record ID value.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>PayrollBenefitTaxRule_US</c> table.
    /// </returns>

    public static PayrollBenefitTaxRule_US find(
    PayrollBenefitTaxRule_USRecId   _recId,
    boolean                         _forUpdate = false,
    ConcurrencyModel                _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollBenefitTaxRule_US payrollBenefitTaxRule_US;

        payrollBenefitTaxRule_US.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollBenefitTaxRule_US.concurrencyModel(_concurrencyModel);
        }

        select firstonly payrollBenefitTaxRule_US
             where payrollBenefitTaxRule_US.RecId == _recId;

        return payrollBenefitTaxRule_US;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBenefitPlan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>PayrollBenefitTaxRule_US</c> table based on supplied value of the <c>BenefitPlan</c> field.
    /// </summary>
    /// <param name="_benefitPlan">
    /// The value of the <c>BenefitPlan</c> field to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>PayrollBenefitTaxRule_US</c> table.
    /// </returns>

    public static PayrollBenefitTaxRule_US findByBenefitPlan(
    PayrollBenefitTaxRule_USRecId   _benefitPlan,
    boolean                         _forUpdate = false,
    ConcurrencyModel                _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollBenefitTaxRule_US payrollBenefitTaxRule_US;

        payrollBenefitTaxRule_US.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollBenefitTaxRule_US.concurrencyModel(_concurrencyModel);
        }

        select firstonly payrollBenefitTaxRule_US
            where payrollBenefitTaxRule_US.BenefitPlan == _benefitPlan;

        return payrollBenefitTaxRule_US;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message to use when a specific record in the <c>PayrollBenefitTaxRule_US</c>
    /// table does not exist.
    /// </summary>
    /// <returns>
    /// The message that indicates a record does not exist.
    /// </returns>

    public static TxtNotExist txtNotExist()
    {
        return "@SYS321009";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PayrollAdministrationUSA</ConfigurationKey>
	<DeveloperDocumentation>@Payroll:ThePayrollbenefittaxrule_USTableContainsThePretaxBasisForABe</DeveloperDocumentation>
	<Label>@Payroll:BenefitTaxRuleUS</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>BenefitPlan</TitleField1>
	<TitleField2>PreTaxBasis</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>Payroll</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PreTaxBasis</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsExemptFromFederalIncomeTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsExemptFromFICA</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsExemptFromLocalIncomeTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsExemptFromMedicare</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsExemptFromStateDisabilityInsurance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsExemptFromStateIncomeTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsExemptFromStateUnemployment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PreTaxBasis</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Custom</Name>
			<Label>@SYS97216</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsExemptFromFederalIncomeTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsExemptFromStateIncomeTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsExemptFromLocalIncomeTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsExemptFromMedicare</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsExemptFromFICA</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsExemptFromStateDisabilityInsurance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsExemptFromStateUnemployment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomPretaxMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PreTaxBasis</Name>
			<Label>@Payroll:PretaxBasis</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PreTaxBasis</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BenefitPlan</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmBenefitPlanRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CustomPretaxMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PayrollCustomPretaxMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsExemptFromFederalIncomeTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Payroll:FederalIncomeTax</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsExemptFromFICA</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Payroll:FICA</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsExemptFromLocalIncomeTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Payroll:LocalIncomeTax</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsExemptFromMedicare</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Payroll:Medicare</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsExemptFromStateDisabilityInsurance</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Payroll:DisabilityInsurance</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsExemptFromStateIncomeTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Payroll:StateIncomeTax</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsExemptFromStateUnemployment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Payroll:Unemployment</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PreTaxBasis</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PayrollPreTaxBasis</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxGroup</Name>
			<ExtendedDataType>PayrollTaxGroupRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>HcmBenefitPlanIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BenefitPlan</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmBenefitPlan</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>HcmBenefitPlan</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BenefitPlan</Name>
					<Field>BenefitPlan</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PayrollTaxGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PayrollTaxGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<Field>TaxGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>