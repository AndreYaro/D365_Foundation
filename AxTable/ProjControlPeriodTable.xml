<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjControlPeriodTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjControlPeriodTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEliminate</Name>
				<Source><![CDATA[
    public boolean allowEliminate()
    {
        boolean                 ret = true;
        ProjControlPeriodTable  localprojControlPeriodTable;

        if (!this.RecId)
        {
            ret = false;
        }
        else
        {
            select firstonly reverse RecId from localprojControlPeriodTable
                where   localprojControlPeriodTable.ProjId          == this.ProjId &&
                        localprojControlPeriodTable.PeriodStatus    == ProjControlPeriodStatus::Posted;

            if (localprojControlPeriodTable.RecId && (localprojControlPeriodTable.RecId != this.RecId))
            {
                ret = false;
            }
            else
            {
                if (this.ctcContract != 0)
                {
                    ret = false;
                }
                else
                {
                    if (this.CTCCostAmount > 0)
                    {
                        ret = false;
                    }
                    else
                    {
                        if (this.CompletePct != 100)
                        {
                            ret = false;
                        }
                        else
                        {
                            if (this.CompletePctCalculated != 100)
                            {
                                ret = false;
                            }
                            else
                            {
                                if ((select firstonly projControlPeriodCostGroup
                                       where    projControlPeriodCostGroup.ProjId        == this.ProjId
                                       &&       projControlPeriodCostGroup.PeriodFrom    == this.PeriodFrom
                                       &&       projControlPeriodCostGroup.Version       == this.Version
                                       &&       projControlPeriodCostGroup.ctcCostAmount > 0).RecId)
                                {
                                    ret = false;
                                }
                                else
                                {
                                    if ((select firstonly projControlPeriodCostGroup
                                           where    projControlPeriodCostGroup.ProjId       == this.ProjId
                                           &&       projControlPeriodCostGroup.PeriodFrom   == this.PeriodFrom
                                           &&       projControlPeriodCostGroup.Version      == this.Version
                                           &&       projControlPeriodCostGroup.ctcCostUnit  > 0).RecId)
                                    {
                                        ret = false;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bookId</Name>
				<Source><![CDATA[
    public AssetBookId bookId()
    {
        AssetBook       assetBook;
        AssetBookTable  assetBookTable;
        AssetBookId     bookIdDefault;
        AssetBookId     bookIdD;

        bookIdDefault = AssetParameters::find().BookIdDefault;
        assetBook = AssetBook::find(this.AssetIdNew, bookIdDefault);

        if (assetBook
            && assetBook.assetBookTable().CurrentOperationsTax == CurrentOperationsTax::Current
            && (assetBook.Status == AssetStatus::NoAcquisition
                || assetBook.Status == AssetStatus::Open))
        {
            bookIdD = bookIdDefault;
        }
        else
        {
            assetBook = AssetBook::findOpenOrNotAcquiredAssetBookByAssetIdLayer(this.AssetIdNew, CurrentOperationsTax::Current);

            bookIdD = assetBook.BookId;
        }
        return bookIdD;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCompleteActualCostAmount</Name>
				<Source><![CDATA[
    AmountMST calcCompleteActualCostAmount()
    {
        return (select sum(ActuelCostAmount) from projControlPeriodCostGroup
              where projControlPeriodCostGroup.ProjId     == this.ProjId      &&
                    projControlPeriodCostGroup.ControlId  == this.ControlId   &&
                    projControlPeriodCostGroup.PeriodFrom == this.PeriodFrom  &&
                    projControlPeriodCostGroup.Version    == this.Version     &&
                    projControlPeriodCostGroup.CompletePct).ActuelCostAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCompleteActualCostUnit</Name>
				<Source><![CDATA[
    UnitQty calcCompleteActualCostUnit()
    {
        return (select sum(ActuelCostUnit) from projControlPeriodCostGroup
              where projControlPeriodCostGroup.ProjId     == this.ProjId      &&
                    projControlPeriodCostGroup.ControlId  == this.ControlId   &&
                    projControlPeriodCostGroup.PeriodFrom == this.PeriodFrom  &&
                    projControlPeriodCostGroup.Version    == this.Version     &&
                    projControlPeriodCostGroup.CompletePct).ActuelCostUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCompleteCTCCostAmount</Name>
				<Source><![CDATA[
    AmountMST calcCompleteCTCCostAmount()
    {
        return (select sum(ctcCostAmount) from projControlPeriodCostGroup
                            where projControlPeriodCostGroup.ProjId     == this.ProjId      &&
                                  projControlPeriodCostGroup.ControlId  == this.ControlId   &&
                                  projControlPeriodCostGroup.PeriodFrom == this.PeriodFrom  &&
                                  projControlPeriodCostGroup.Version    == this.Version     &&
                                  projControlPeriodCostGroup.CompletePct).ctcCostAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCompleteCTCCostUnit</Name>
				<Source><![CDATA[
    UnitQty calcCompleteCTCCostUnit()
    {
        return (select sum(ctcCostUnit) from projControlPeriodCostGroup
                   where projControlPeriodCostGroup.ProjId     == this.ProjId      &&
                         projControlPeriodCostGroup.ControlId  == this.ControlId   &&
                         projControlPeriodCostGroup.PeriodFrom == this.PeriodFrom  &&
                         projControlPeriodCostGroup.Version    == this.Version     &&
                         projControlPeriodCostGroup.CompletePct).ctcCostUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkActivity</Name>
				<Source><![CDATA[
    boolean checkActivity()
    {
        boolean ret = true;

        if (this.ActivityNew)
        {
            ret = ProjActivityHelper::validateProjActivityParentLinkv2(this.ProjIdNew, this.ActivityNew);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReqActivity</Name>
				<Source><![CDATA[
    boolean checkReqActivity()
    {
        return ProjActivity::checkReqActivity(this.ProjIdNew, this.ActivityNew, tableNum(ProjCostTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>completePctForAmountUnitExt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements calculation of completion percent for <c>ProjControlPeriodTable::completePct</c> when <c>AmountUnit</c> has been extended..
    /// </summary>
    /// <param name = "_revenueCompletion">Value of the associated amount unit.</param>
    /// <returns>Completion percentage.</returns>
	[Replaceable]
	protected Percent completePctForAmountUnitExt(AmountUnit _revenueCompletion)
    {
        return 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>completePct</Name>
				<Source><![CDATA[
    Percent completePct()
    {
        Percent completePct = 100;
        AmountUnit      revenueCompletion;

        revenueCompletion = ProjControl::find(this.ControlId).AmountUnit;

        switch (revenueCompletion)
        {
            case AmountUnit::Amount:
				if (this.calcCompleteActualCostAmount() + this.calcCompleteCTCCostAmount())
				{
					completePct = (this.calcCompleteActualCostAmount() * 100) / (this.calcCompleteActualCostAmount() + this.calcCompleteCTCCostAmount());
				}
				break;

            case AmountUnit::Unit:
                if (this.calcCompleteActualCostUnit() + this.calcCompleteCTCCostUnit())
				{
					completePct = (this.calcCompleteActualCostUnit() * 100) / (this.calcCompleteActualCostUnit() + this.calcCompleteCTCCostUnit());
				}
                break;

            case AmountUnit::StraightLine:
                completePct = this.calcPctForStraightLine();
                break;

            case AmountUnit::WorkProgressPercentage:
                completePct = this.calcPctFromWBSEffortTracking();
                break;

            default:
                completePct = this.completePctForAmountUnitExt(revenueCompletion);
                break;
        }

        if (completePct > 100)
        {
            completePct = 100;
        }

        return completePct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>completePctBasedOnCostUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns percentage complete based on cost units
    /// </summary>
    /// <returns>
    /// The percentage complete
    /// </returns>
    Percent completePctBasedOnCostUnit()
    {
        Percent completePct = 100;

        if ((this.calcCompleteActualCostUnit() + this.calcCompleteCTCCostUnit()))
        {
                completePct = (this.calcCompleteActualCostUnit() * 100) / (this.calcCompleteActualCostUnit() + this.calcCompleteCTCCostUnit());
        }

        if (completePct > 100)
        {
            completePct = 100;
        }

        return completePct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contributionMargen</Name>
				<Source><![CDATA[
    display AmountMST contributionMargen()
    {
        return (this.totalContract() - this.totalCost());
    }

]]></Source>
			</Method>
			<Method>
				<Name>contributionMargenTxt</Name>
				<Source><![CDATA[
    display Name contributionMargenTxt()
    {
        return "@SYS16226";
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ProjTable                           projTable;
        ProjEmplTrans                       projEmplTrans;
        ProjEmplTransCost                   projEmplTransCost;
        ProjCostTrans                       projCostTrans;
        ProjCostTransCost                   projCostTransCost;
        ProjItemTrans                       projItemTrans;
        ProjItemTransCost                   projItemTransCost;
        CostControlTransCommittedCost       costControlTransCommittedCost;
        ProjRevRecContractLine  revRecContractLine;

        boolean contractLineBasedRevRecFeature = ProjContractLineBasedRevenueRecognitionFeatureHelper::isFeatureEnabled();
        boolean isContractLineUsed = ProjWIPTable::find(this.ProjId).IsContractLineUsed;

        ttsbegin;

        super();

        if(isContractLineUsed && contractLineBasedRevRecFeature)
        {
            while select ContractLineNum from revRecContractLine
                where revRecContractLine.RevenueRecognitionId  == this.ProjId
            {
                update_recordset projEmplTransCost
                    setting wipPeriod = dateNull()
                        where projEmplTransCost.wipPeriod == this.PeriodTo
                    join projEmplTrans
                        where projEmplTrans.TransId == projEmplTransCost.TransId
                            &&  projEmplTrans.PSAContractLineNum == revRecContractLine.ContractLineNum
                            && ((this.BeginningBalance && projEmplTrans.TransactionOrigin == ProjOrigin::BeginningBalance)
                            || (!this.BeginningBalance && projEmplTrans.TransactionOrigin != ProjOrigin::BeginningBalance));

                update_recordset projCostTransCost
                    setting wipPeriod = dateNull()
                        where projCostTransCost.wipPeriod == this.PeriodTo
                    join projCostTrans
                    where projCostTrans.TransId == projCostTransCost.TransId
                        && projCostTrans.PSAContractLineNum == revRecContractLine.ContractLineNum
                            && ((this.BeginningBalance && projCostTrans.TransactionOrigin == ProjOrigin::BeginningBalance)
                            || (!this.BeginningBalance && projCostTrans.TransactionOrigin != ProjOrigin::BeginningBalance));

                update_recordset projItemTransCost
                    setting wipPeriod = dateNull()
                        where projItemTransCost.wipPeriod == this.PeriodTo
                    join projItemTrans
                    where projItemTransCost.InventTransId == projItemTrans.InventTransId
                        && projItemTransCost.ProjAdjustRefId == projItemTrans.ProjAdjustRefId
                        && projItemTrans.PSAContractLineNum == revRecContractLine.ContractLineNum
                        && ((this.BeginningBalance && projItemTrans.TransactionOrigin == ProjOrigin::BeginningBalance)
                              || (!this.BeginningBalance && projItemTrans.TransactionOrigin != ProjOrigin::BeginningBalance));

            }
        }
        else
        {
        while select ProjId from projTable where projTable.wipProject  == this.ProjId
        {
            while select RecId from projEmplTrans
                where projEmplTrans.ProjId == projTable.ProjId
                    && ((this.BeginningBalance && projEmplTrans.TransactionOrigin == ProjOrigin::BeginningBalance)
                              || (!this.BeginningBalance && projEmplTrans.TransactionOrigin != ProjOrigin::BeginningBalance))
                    join forupdate projEmplTransCost
                        where projEmplTransCost.TransId == projEmplTrans.TransId &&
                              projEmplTransCost.wipPeriod == this.PeriodTo
            {
                projEmplTransCost.wipPeriod = dateNull();
                projEmplTransCost.update();
            }

            while select RecId from projCostTrans
                where projCostTrans.ProjId == projTable.ProjId
                    && ((this.BeginningBalance && projCostTrans.TransactionOrigin == ProjOrigin::BeginningBalance)
                              || (!this.BeginningBalance && projCostTrans.TransactionOrigin != ProjOrigin::BeginningBalance))
                    join forupdate projCostTransCost
                        where projCostTransCost.TransId == projCostTrans.TransId &&
                            projCostTransCost.wipPeriod == this.PeriodTo
            {
                projCostTransCost.wipPeriod = dateNull();
                projCostTransCost.update();
            }

            while select RecId from projItemTrans
                where projItemTrans.ProjId == projTable.ProjId
                    && ((this.BeginningBalance && projItemTrans.TransactionOrigin == ProjOrigin::BeginningBalance)
                              || (!this.BeginningBalance && projItemTrans.TransactionOrigin != ProjOrigin::BeginningBalance))
                    join forupdate projItemTransCost
                        where projItemTransCost.InventTransId == projItemTrans.InventTransId &&
                            projItemTransCost.ProjAdjustRefId == projItemTrans.ProjAdjustRefId &&
                            projItemTransCost.wipPeriod == this.PeriodTo
            {
                projItemTransCost.wipPeriod = dateNull();
                projItemTransCost.update();
            }

            while select forupdate costControlTransCommittedCost
                where costControlTransCommittedCost.ProjId == projTable.ProjId
                    && costControlTransCommittedCost.wipPeriod == this.PeriodTo
            {
                costControlTransCommittedCost.wipPeriod = dateNull();
                costControlTransCommittedCost.update();
            }
        }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayActualCostAmount</Name>
				<Source><![CDATA[
    display AmountMST displayActualCostAmount()
    {
        return (select sum(ActuelCostAmount) from projControlPeriodCostGroup
            where projControlPeriodCostGroup.ProjId == this.ProjId          &&
                  projControlPeriodCostGroup.ControlId  == this.ControlId   &&
                  projControlPeriodCostGroup.PeriodFrom == this.PeriodFrom  &&
                  projControlPeriodCostGroup.Version    == this.Version).ActuelCostAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCTCCostAmount</Name>
				<Source><![CDATA[
    display AmountMST displayCTCCostAmount()
    {
        return (select sum(ctcCostAmount) from projControlPeriodCostGroup
            where projControlPeriodCostGroup.ProjId     == this.ProjId      &&
                  projControlPeriodCostGroup.ControlId  == this.ControlId   &&
                  projControlPeriodCostGroup.PeriodFrom == this.PeriodFrom  &&
                  projControlPeriodCostGroup.Version    == this.Version).ctcCostAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPeriodId</Name>
				<Source><![CDATA[
    display ProjPeriodId displayPeriodId()
    {
        return this.PeriodId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPeriodStatus</Name>
				<Source><![CDATA[
    display ProjControlStatus displayPeriodStatus()
    {
        ProjControlStatus       projControlStatus;

        switch (this.PeriodStatus)
        {
            case ProjControlPeriodStatus::None:
                projControlStatus   = ProjControlStatus::Created;
                break;

            case ProjControlPeriodStatus::Created:
                projControlStatus   = ProjControlStatus::Created;
                break;

            case ProjControlPeriodStatus::Posted:
                projControlStatus   = ProjControlStatus::Posted;
                break;

            case ProjControlPeriodStatus::Reversal:
                if (this.EliminationOrig)
                {
                    projControlStatus   = ProjControlStatus::ReversedElimination;
                }
                else
                {
                    projControlStatus   = ProjControlStatus::ReversedEstimate;
                }
                break;

            case ProjControlPeriodStatus::Eliminate:
                projControlStatus   = ProjControlStatus::Eliminated;
                break;
        }

        return projControlStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjActivity</Name>
				<Source><![CDATA[
    void initFromProjActivity(ProjActivity _projActivity)
    {
        if (!_projActivity || !_projActivity.CategoryDefault ||
                ProjCategory::find(_projActivity.CategoryDefault).CategoryType != ProjCategoryType::Cost)
        {
            return;
        }

        this.CategoryNew = _projActivity.CategoryDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        ProjControlPeriodTable  projControlPeriodTable;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ProjControlPeriodTable, TotalMaxCapital):
                this.reCalcEstimate(ProjWIPType::Cost,this.TotalMaxCapital,true);
                break;

            case fieldNum(ProjControlPeriodTable, CompletePct):
                this.Recalculated  = NoYes::Yes;
                break;

            case fieldNum(ProjControlPeriodTable, ModelId):
                select firstonly projControlPeriodTable
                    where projControlPeriodTable.ProjId  == this.ProjId  &&
                          projControlPeriodTable.ModelId == this.ModelId;

                if (projControlPeriodTable)
                {
                    info (strFmt("@SYS54911", projControlPeriodTable.ModelId, projControlPeriodTable.PeriodFrom, projControlPeriodTable.ProjId));
                }
                break;

            case fieldNum(ProjControlPeriodTable, EstimateOutput):
                switch (this.EstimateOutput)
                {
                    case ProjEstimateOutput::Ledger:
                        this.ProjIdNew         = '';
                        this.AssetIdNew        = '';
                        this.CategoryNew       = '';
                        this.ActivityNew       = '';
                        this.LinePropertyIdNew = '';
                        this.QtyCostNew        = 0;
                        break;

                    case ProjEstimateOutput::Asset:
                        this.ProjIdNew         = '';
                        this.CategoryNew       = '';
                        this.ActivityNew       = '';
                        this.LedgerDimension   = 0;
                        this.LinePropertyIdNew = '';
                        this.QtyCostNew        = 0;
                        break;

                    case ProjEstimateOutput::Project:
                        this.AssetIdNew        = '';
                        this.LedgerDimension   = 0;
                        break;
                }
                break;

            case fieldNum(ProjControlPeriodTable, ActivityNew):
                this.initFromProjActivity(ProjActivity::find(this.ActivityNew));
                if (this.CategoryNew)
                {
                    if (ProjCategory::find(this.CategoryNew).CategoryType != ProjCategoryType::Cost)
                    {
                        this.CategoryNew = '';
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodName</Name>
				<Source><![CDATA[
    display Name periodName()
    {
        return ProjPeriodLine::find(this.PeriodId,this.PeriodFrom).PeriodName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projControlPeriodTableColumnAccEstimate</Name>
				<Source><![CDATA[
    public ProjControlPeriodTableColumn projControlPeriodTableColumnAccEstimate(boolean _update   = false)
    {
        return ProjControlPeriodTableColumn::find(this.ProjId, this.ControlId, this.PeriodFrom, this.Version, ProjEstimateColumn::Accumulated, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projControlPeriodTableColumnTotal</Name>
				<Source><![CDATA[
    public ProjControlPeriodTableColumn projControlPeriodTableColumnTotal(boolean _update   = false)
    {
        return ProjControlPeriodTableColumn::find(this.ProjId, this.ControlId, this.PeriodFrom, this.Version, ProjEstimateColumn::Total, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projGroup</Name>
				<Source><![CDATA[
    public ProjGroup projGroup()
    {
        boolean contractLineBasedRevRecFeature = ProjContractLineBasedRevenueRecognitionFeatureHelper::isFeatureEnabled();

        if (contractLineBasedRevRecFeature)
        {
            ProjWIPTable wipProject = ProjWIPTable::find(this.ProjId);
            if(wipProject && wipProject.IsContractLineUsed)
            {
                return ProjGroup::find('');
            }
        }

        return ProjGroup::find(ProjTable::find(this.ProjId).ProjGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTable</Name>
				<Source><![CDATA[
    public ProjTable projTable()
    {
        boolean contractLineBasedRevRecFeature = ProjContractLineBasedRevenueRecognitionFeatureHelper::isFeatureEnabled();

        if (contractLineBasedRevRecFeature)
        {
            ProjWIPTable wipProject = ProjWIPTable::find(this.ProjId);
            if(wipProject && wipProject.IsContractLineUsed)
            {
                return wipProject.projTable();
            }
        }
        return ProjTable::find(this.ProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projWIPTable</Name>
				<Source><![CDATA[
    public ProjWIPTable projWIPTable()
    {
        return ProjWIPTable::find(this.ProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reCalcEstimate</Name>
				<Source><![CDATA[
    private void reCalcEstimate(ProjWIPType _wipType, AmountMST _amount, boolean _investment = false)
    {
        FormRun                         formRun;
        FormDataSource                  formDataSource;
        Integer                         i;
        AmountMST                       amountAcc;
        ProjControlPeriodTableColumn    projControlColumnAccEstimatePrev = ProjControlPeriodTableColumn::findPrev(this.ProjId,
                                                                                                                  this.ControlId,
                                                                                                                  this.PeriodFrom,
                                                                                                                  ProjEstimateColumn::Accumulated,
                                                                                                                  false);
        boolean contractLineBasedRevRecFeature = ProjContractLineBasedRevenueRecognitionFeatureHelper::isFeatureEnabled();
        boolean isContractLineUsed = ProjWIPTable::find(this.ProjId).IsContractLineUsed;
        ProjControlCalc controlCalc;

        if(contractLineBasedRevRecFeature && isContractLineUsed)
        {
            controlCalc  = ProjControlCalc::constructFromWIPProjectOrRevenueProfile(ProjWIPTable::find(this.ProjId),this.Elimination, ProjContractBillingMethod::FixedPrice);
        }
        else
        {
            controlCalc  = ProjControlCalc::constructFromProjGroupOrRevenueProfile(ProjTable::find(this.ProjId), this.Elimination, ProjContractBillingMethod::FixedPrice);
        }
        controlCalc.parmProjId(this.ProjId);
        controlCalc.parmControlId(this.ControlId);
        controlCalc.parmPeriodFrom(this.PeriodFrom);
        controlCalc.parmControlVersion(this.Version);
        controlCalc.parmEliminate(this.Elimination);
        controlCalc.parmPeriodTo(this.PeriodTo);
        controlCalc.parmBeginningBalance(this.BeginningBalance);
        controlCalc.parmIsContractLineUsed(isContractLineUsed);

        controlCalc.parmCalledFromCode(true);

        switch (_wipType)
        {
            case ProjWIPType::AccruedTurnover:
                controlCalc.parmSalesValue(_amount);
                break;

            case ProjWIPType::AccruedTurnoverProfit:
                controlCalc.parmProfit(_amount);
                break;

            case ProjWIPType::Cost:
                if (_investment)
                {
                    controlCalc.parmMaxCapital(_amount);
                    amountAcc = this.totalTotalEstimateAccCost()-projControlColumnAccEstimatePrev.plCostAccCost;
                    controlCalc.parmAccruedCost(amountAcc);
                }
                else
                {
                    controlCalc.parmAccruedCost(_amount);
                }
                break;
        }

        controlCalc.run();

        formRun = FormDataUtil::getFormDataSource(this).formRun();

        for (i = 1; i <= formRun.dataSourceCount(); i++)
        {
            formDataSource = formRun.dataSource(i);
            formDataSource.reread();
            formDataSource.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateImage</Name>
				<Source><![CDATA[
    public display int recalculateImage(ProjControlPeriodTable _projControlPeriod)
    {
        #resAppl

        int ret = #ImageOk;

        if (_projControlPeriod.Recalculated == NoYes::Yes)
        {
            ret = #ImageError;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    display AmountMST   salesPrice()
    {
        ProjControlPeriodCostGroup  projControlPeriodCostGroup;
        ProjControlCostGroup        projControlCostGroup;

        select sum(ActuelCostAmount), sum(ctcCostAmount) from projControlPeriodCostGroup
            group by ProjId
            where projControlPeriodCostGroup.ProjId     == this.ProjId         &&
                  projControlPeriodCostGroup.ControlId  == this.ControlId      &&
                  projControlPeriodCostGroup.Version    == this.Version        &&
                  projControlPeriodCostGroup.PeriodFrom == this.PeriodFrom
            exists join projControlCostGroup
            where projControlCostGroup.ControlId        == projControlPeriodCostGroup.ControlId     &&
                  projControlCostGroup.CostGroupId      == projControlPeriodCostGroup.CostGroupId   &&
                  projControlCostGroup.CostType         == ProjCostType::Hour;

        if (projControlPeriodCostGroup.ActuelCostAmount + projControlPeriodCostGroup.ctcCostAmount)
        {
            return (this.ActualContract + this.ctcContract) / (projControlPeriodCostGroup.ActuelCostAmount + projControlPeriodCostGroup.ctcCostAmount);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalContract</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display AmountMST totalContract()
    {
        return (this.ActualContract + this.ctcContract + this.InternalContractTotal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCost</Name>
				<Source><![CDATA[
    display AmountMST totalCost()
    {
        return (this.ActualCostAmount + this.ctcCostAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalEstimateAccLoss</Name>
				<Source><![CDATA[
    display AmountMST totalEstimateAccLoss()
    {
        return -this.ActualCostAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalEstimatMaxCapital</Name>
				<Source><![CDATA[
    edit ProjAccruedCost totalEstimatMaxCapital(
        boolean     _set             = false,
        AmountMST   _totalMaxCapital = 0)
    {
        NoYes foreseablesLosses = ProjRevRecHelper::isForeseeableLossesActivatedForProject(this.ProjId);

        if (!foreseablesLosses)
        {
            this.TotalMaxCapital      = (this.ActualCostAmount + this.ctcCostAmount)-this.totalTotalEstimateNotCapital();
        }

        if (_set && foreseablesLosses)
        {
            this.TotalMaxCapital  = _totalMaxCapital;
        }

        return this.TotalMaxCapital;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTotalEstimateAccCost</Name>
				<Source><![CDATA[
    display AmountMST totalTotalEstimateAccCost()
    {
        AmountMST   accCost;

        accCost =  (this.totalTotalEstimateToBeCapital()-this.totalEstimatMaxCapital());

        if (accCost < 0)
        {
            accCost = 0;
        }

        return accCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTotalEstimateNotCapital</Name>
				<Source><![CDATA[
    display AmountMST totalTotalEstimateNotCapital()
    {
        if (this.Elimination)
        {
            return 0;
        }

        return this.projControlPeriodTableColumnAccEstimate().ConsumTotalNotCapital;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTotalEstimateToBeCapital</Name>
				<Source><![CDATA[
    display AmountMST totalTotalEstimateToBeCapital()
    {
        return (this.totalCost()-this.totalTotalEstimateNotCapital());
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && this.CompletePct > 100)
        {
            this.CompletePct = 100;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (this.PeriodStatus   != ProjControlPeriodStatus::Created)
        {
            // Posted periods cannot be deleted.
            ret = checkFailed("@SYS55605");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId p1)
    {
        boolean ret;
        ProjControlPeriodCostGroup projControlPeriodCostGroup;

        ret = super(p1);

        if (ret)
        {
            switch (p1)
            {
                case(fieldNum(ProjControlPeriodTable, CompletePct)):
                    if (this.CompletePct > 100)
                    {
                        // Percentage of completion must be less than 100.
                        ret = checkFailed("@SYS55528");
                    }
                    break;

                case(fieldNum(ProjControlPeriodTable, CategoryNew)):
                    if (this.CategoryNew)
                    {
                        if (ProjCategory::find(this.CategoryNew).CategoryType != ProjCategoryType::Cost)
                        {
                            // Type for category '%1' is incorrect.
                            ret = checkFailed(strFmt("@SYS54897", this.CategoryNew));
                        }
                    }
                    break;

                case(fieldNum(ProjControlPeriodTable, ActivityNew)):
                    ret = this.checkActivity();
                    break;

                case(fieldNum(ProjControlPeriodTable, ProjIdNew)):
                    // Check if Project can be selected.
                    boolean contractLineBasedRevRecFeature = ProjContractLineBasedRevenueRecognitionFeatureHelper::isFeatureEnabled();
                    boolean isContractLineUsed = ProjWIPTable::find(this.ProjId).IsContractLineUsed;
                    ret = true;

                    if(!contractLineBasedRevRecFeature || !isContractLineUsed)
                    {
                        ret = ProjTable::find(this.ProjIdNew).checkActiveInTree();
                    }
                    break;

                case(fieldNum(ProjControlPeriodTable, ModelId)):
                    if (!this.ModelId)
                    {
                        select firstonly projControlPeriodCostGroup
                        where projControlPeriodCostGroup.ProjId == this.ProjId &&
                        projControlPeriodCostGroup.ControlId == this.ControlId   &&
                        projControlPeriodCostGroup.PeriodFrom == this.PeriodFrom &&
                        projControlPeriodCostGroup.Version == this.Version &&
                        ((projControlPeriodCostGroup.ctcMethod == ProjControlPeriodCostGroupCTCMethod::RemainingEstimate) ||
                            (projControlPeriodCostGroup.ctcMethod == ProjControlPeriodCostGroupCTCMethod::TotBudgetMinusActual));

                        if (projControlPeriodCostGroup)
                        {
                            ret = checkFailed("@SYS76154");
                        }
                    }
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
        ret = super();

        if (this.EstimateOutput == ProjEstimateOutput::Project)
        {
            ret = ret && this.checkActivity();

            if (ret && !this.checkReqActivity())
            {
                ret = checkFailed("@Expense:ActivityNumberMissing");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>actualPeriodVersion</Name>
				<Source><![CDATA[
    public static ProjControlVersion actualPeriodVersion(ProjId          _projId,
                                                         ProjControlId   _controlId,
                                                         ProjPeriodTo    _periodTo)
    {
        return (select firstonly reverse projControlPeriodTable
            order by Version
                where projControlPeriodTable.ProjId         == _projId      &&
                      projControlPeriodTable.ControlId      == _controlId   &&
                      projControlPeriodTable.PeriodTo       == _periodTo  &&
                      projControlPeriodTable.PeriodStatus   == ProjControlPeriodStatus::Posted).Version;
    }

]]></Source>
			</Method>
			<Method>
				<Name>actualRevenueVersion</Name>
				<Source><![CDATA[
    public static ProjControlVersion actualRevenueVersion(ProjId          _projId,
                                                         ProjControlId   _controlId,
                                                         ProjPeriodTo    _periodTo)
    {
        if (ProjRevRecHelper::getCompletePrincipleForProject(_projId) == ProjCompletePrincip::CompletedPercentage)
        {
            return (select firstonly reverse projControlPeriodTable
                        order by Version
                            where projControlPeriodTable.ProjId         == _projId      &&
                                  projControlPeriodTable.ControlId      == _controlId   &&
                                  projControlPeriodTable.PeriodTo       == _periodTo  &&
                                  projControlPeriodTable.PeriodStatus   == ProjControlPeriodStatus::Posted).Version;
        }
        else
        {
            return (select firstonly reverse projControlPeriodTable
                        order by Version
                            where projControlPeriodTable.ProjId         == _projId      &&
                                  projControlPeriodTable.ControlId      == _controlId   &&
                                  projControlPeriodTable.PeriodTo       == _periodTo  &&
                                  projControlPeriodTable.PeriodStatus   == ProjControlPeriodStatus::Eliminate).Version;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>created</Name>
				<Source><![CDATA[
    public static boolean created(ProjId _projId, ProjControlId _controlId)
    {
        return (select projControlPeriodTable
                        where   projControlPeriodTable.ProjId       == _projId
                        &&      projControlPeriodTable.ControlId    == _controlId
                        &&      projControlPeriodTable.PeriodStatus == ProjControlPeriodStatus::Created).RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eliminated</Name>
				<Source><![CDATA[
    public static boolean eliminated(ProjId _projId, ProjControlId _controlId)
    {
        return (select firstonly projControlPeriodTable
                    where projControlPeriodTable.ProjId       == _projId        &&
                          projControlPeriodTable.ControlId    == _controlId     &&
                          projControlPeriodTable.PeriodStatus == ProjControlPeriodStatus::Eliminate &&
                          projControlPeriodTable.Elimination  == NoYes::Yes).RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(ProjId _projId, ProjControlId _controlId  = '', ProjPeriodFrom _periodFrom = dateNull())
    {
        boolean retval;

        if (_projId && _controlId && _periodFrom)
        {
            retval = (select projControlPeriodTable
                       where projControlPeriodTable.ProjId      == _projId      &&
                             projControlPeriodTable.ControlId   == _controlId   &&
                             projControlPeriodTable.PeriodFrom  == _periodFrom).RecId != 0;
        }
        else if (_projId && _controlId)
        {
            retval = (select projControlPeriodTable
                       where projControlPeriodTable.ProjId      == _projId      &&
                             projControlPeriodTable.ControlId   == _controlId).RecId != 0;
        }
        else if (_projId)
        {
            retval = (select projControlPeriodTable
                       where projControlPeriodTable.ProjId      == _projId).RecId != 0;
        }

        return retval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCreated</Name>
				<Source><![CDATA[
    public static boolean existCreated(ProjId _projId, ProjControlId _controlId)
    {
        return (select projControlPeriodTable
                       where    projControlPeriodTable.ProjId       == _projId
                       &&       projControlPeriodTable.ControlId    == _controlId
                       &&       projControlPeriodTable.PeriodStatus == ProjControlPeriodStatus::Created).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existNotReversal</Name>
				<Source><![CDATA[
    public static boolean existNotReversal(ProjId _projId)
    {
        return (select firstonly projControlPeriodTable
                       where    projControlPeriodTable.ProjId       == _projId &&
                                projControlPeriodTable.PeriodStatus != ProjControlPeriodStatus::Reversal).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ProjControlPeriodTable find(ProjId    _projId,
                                              ProjControlId  _controlId,
                                              ProjPeriodFrom _periodFrom,
                                              Integer        _version   = 999,
                                              boolean        _forUpdate = false)
    {
        ProjControlPeriodTable  projControlPeriod = null;

        projControlPeriod.selectForUpdate(_forUpdate);

        if (_projId && _controlId && _periodFrom)
        {
            select firstonly reverse projControlPeriod
                where projControlPeriod.ProjId      == _projId     &&
                      projControlPeriod.ControlId   == _controlId  &&
                      projControlPeriod.PeriodFrom  == _periodFrom  &&
                      projControlPeriod.Version     <= _version;
        }

        return projControlPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUsingBegBal</Name>
				<Source><![CDATA[
    public static ProjControlPeriodTable findUsingBegBal(ProjId _projId, ProjControlId _controlId,
                                                        ProjPeriodFrom _periodFrom, NoYes _begBal,
                                                        Integer _version   = 999, boolean _forUpdate = false)
    {
        ProjControlPeriodTable  projControlPeriod = null;

        projControlPeriod.selectForUpdate(_forUpdate);

        if (_projId && _controlId && _periodFrom)
        {
            select firstonly reverse projControlPeriod
                where projControlPeriod.ProjId == _projId &&
                      projControlPeriod.ControlId == _controlId &&
                      projControlPeriod.PeriodFrom == _periodFrom &&
                      projControlPeriod.Version <= _version &&
                      projControlPeriod.BeginningBalance == _begBal;
        }

        return projControlPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastPosted</Name>
				<Source><![CDATA[
    public static ProjControlPeriodTable findLastPosted(ProjId _projId, ProjControlId _controlId)
    {
        ProjControlPeriodTable  projControlPeriodTable;

        select firstonly reverse projControlPeriodTable
            order by PeriodFrom
            where   projControlPeriodTable.ProjId       == _projId
            &&      projControlPeriodTable.ControlId    == _controlId
            &&      projControlPeriodTable.PeriodStatus == ProjControlPeriodStatus::Posted
            &&      projControlPeriodTable.PeriodFrom   <= maxDate();

        return projControlPeriodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPrev</Name>
				<Source><![CDATA[
    public static ProjControlPeriodTable findPrev(ProjId       _projId,
                                                  ProjControlId       _controlId,
                                                  ProjPeriodFrom      _periodFrom,
                                                  boolean             _forUpdate      = false,
                                                  boolean             _elimination    = false)
    {
        ProjControlPeriodTable  projControlPeriod = null;

        projControlPeriod.selectForUpdate(_forUpdate);

        if (_elimination)
        {
            if (_projId && _controlId && _periodFrom)
            {
                select firstonly reverse projControlPeriod
                    order by PeriodFrom
                    where   projControlPeriod.ProjId            == _projId
                        &&  projControlPeriod.ControlId         == _controlId
                        &&  projControlPeriod.PeriodFrom        <  maxDate()
                        &&  projControlPeriod.PeriodStatus      == ProjControlPeriodStatus::Posted
                        &&  !projControlPeriod.Elimination;
            }
        }
        else if (_projId && _controlId && _periodFrom)
        {
            select firstonly reverse projControlPeriod
                where   projControlPeriod.ProjId        == _projId
                &&      projControlPeriod.ControlId     == _controlId
                &&      projControlPeriod.PeriodFrom    <=  _periodFrom
                &&      projControlPeriod.PeriodStatus  == ProjControlPeriodStatus::Posted;
        }

        return projControlPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPosted</Name>
				<Source><![CDATA[
    public static boolean lastPosted(ProjId _projId, ProjControlId _controlId, RecId _recId)
    {
        return (select firstonly reverse projControlPeriodTable
                    where   projControlPeriodTable.ProjId       == _projId
                    &&      projControlPeriodTable.ControlId    == _controlId
                    &&      projControlPeriodTable.PeriodFrom   <= maxDate()
                    &&      projControlPeriodTable.PeriodStatus == ProjControlPeriodStatus::Posted).RecId == _recId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodTo</Name>
				<Source><![CDATA[
    public static ProjPeriodTo periodTo(ProjPeriodId _periodId,ProjPeriodFrom _periodFrom)
    {
        return ProjPeriodLine::find(_periodId, _periodFrom).PeriodTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevVersion</Name>
				<Source><![CDATA[
    public static container prevVersion(ProjId _projId, ProjPeriodFrom _period)
    {
        ProjControlPeriodTable prevProjControlPeriodTable;

        select firstonly reverse PeriodFrom, Version from prevProjControlPeriodTable
            where prevProjControlPeriodTable.ProjId == _projId
            && prevProjControlPeriodTable.PeriodFrom < _period
            && prevProjControlPeriodTable.PeriodStatus != ProjControlPeriodStatus::Reversal;

        return [prevProjControlPeriodTable.PeriodFrom, prevProjControlPeriodTable.Version];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPctForStraightLine</Name>
				<Source><![CDATA[
    private ProjControlCompletePct calcPctForStraightLine()
    {
        Days                            elapsedDays;
        Days                            projDuration;
        ProjControlCompletePct          completePercentPerProject = 0;
        ProjTable                       projTable;
        AmountMST                       revenueToBeRecognized = 0;
        Percent                         totalCompletePercent = 0;
        ExchRate                        fixedExchRate;
        CurrencyCode                    contractCurrCode;
        ProjTable                       projTablenew;
        Percent							totalPercent = 0;
        ProjControlCompletePct          projRecordCount = 0;
        PSAContractLineItems            contractLine, contractLineNew;
        ProjRevRecContractLine          revRecContractLine;
        boolean contractLineBasedRevRecFeature = ProjContractLineBasedRevenueRecognitionFeatureHelper::isFeatureEnabled();
        boolean isContractLineUsed = ProjWIPTable::find(this.ProjId).IsContractLineUsed;

        
        void calcRevenueToBeRecognized(ProjTable _projTable, boolean _totalPct)
        {
            contractCurrCode = _projTable.contractCurrCode();
            fixedExchRate = ProjInvoiceCurrency::find(_projTable.ProjInvoiceProjId, contractCurrCode).ExchRate;
        
            if (fixedExchRate)
            {
                if (!_totalPct)
                {
                    revenueToBeRecognized += (completePercentPerProject * CurrencyExchangeHelper::mstAmount(_projTable.contractValue(),
                                                                                                            contractCurrCode,
                                                                                                            this.PeriodTo,
                                                                                                            UnknownNoYes::Unknown,
                                                                                                            fixedExchRate));
                }
                else
                {
                    totalCompletePercent =  revenueToBeRecognized / CurrencyExchangeHelper::mstAmount(projTablenew.contractValue(),
                                                                                                      contractCurrCode,
                                                                                                      this.PeriodTo,
                                                                                                      UnknownNoYes::Unknown,
                                                                                                      fixedExchRate);
                }
            }
            else
            {
                if (!_totalPct)
                {
                    revenueToBeRecognized += (completePercentPerProject * CurrencyExchangeHelper::mstAmount(_projTable.contractValue(),
                                                                                                            contractCurrCode,
                                                                                                            this.PeriodTo));
                }
                else
                {
                    if (PSAContractLineItems::hasBillingRules(projTablenew.ProjInvoiceProjId))
                    {
                        ProjContractValueAmount projContractValueAmountMST;
                        if (ProjParameters::find().EnableContractCurrencyForRevRec)
                        {
                            projContractValueAmountMST = CurrencyExchangeHelper::mstAmount(this.totalContract(),
                                                                                           contractCurrCode,
                                                                                           this.PeriodTo);
                        }
                        else
                        {
                            projContractValueAmountMST = this.totalContract();
                        }
                        
                        if (projContractValueAmountMST)
                        {
                            totalCompletePercent = revenueToBeRecognized / projContractValueAmountMST;
                        }
                    }
                    else
                    {
                        totalCompletePercent = revenueToBeRecognized / CurrencyExchangeHelper::mstAmount(projTablenew.contractValue(),
                                                                                                         contractCurrCode,
                                                                                                         this.PeriodTo);
                    }
                }
            }
        }

        if(contractLineBasedRevRecFeature && isContractLineUsed)
        {
            select count(RecId) from revRecContractLine where revRecContractLine.RevenueRecognitionId == this.ProjId;

            // Here we are enforcing a restriction that only one contract line should be part of Estimate project for 
            // straight line based calculation to work.
            if(revRecContractLine.RecId == 1)
            {
                select firstonly revRecContractLine
                 where revRecContractLine.RevenueRecognitionId == this.ProjId;

                contractLine = PSAContractLineItems::find(revRecContractLine.ContractLineNum);
                if (contractLine.StartDate && contractLine.EndDate && contractLine.StartDate <= this.PeriodTo && (contractLine.EndDate >= contractLine.StartDate))
                {
                    projDuration    = date2num(contractLine.EndDate) - date2num(contractLine.StartDate) + 1;

                    if (this.PeriodTo >= contractLine.EndDate)
                    {
                        ElapsedDays = projDuration;
                    }
                    else
                    {
                        ElapsedDays = date2num(this.PeriodTo) - date2num(contractLine.StartDate) + 1;
                    }

                    if (projDuration > 0)
                    {
                        totalCompletePercent = ((elapsedDays / projDuration));
                    }
                }
            }
        }
        else
        {

            while select projTable
                    where projTable.WIPProject == this.ProjId
            {
                if (projTable.StartDate && projTable.EndDate && projTable.StartDate <= this.PeriodTo && (projTable.EndDate >= projTable.StartDate))
                {
                    projDuration    = date2num(projTable.EndDate) - date2num(projTable.StartDate) + 1;

                    if (this.PeriodTo >= projTable.EndDate)
                    {
                        ElapsedDays = projDuration;
                    }
                    else
                    {
                        ElapsedDays = date2num(this.PeriodTo) - date2num(projTable.StartDate) + 1;
                    }

                    if (projDuration > 0)
                    {
                        completePercentPerProject = ((elapsedDays / projDuration));
                        totalPercent += completePercentPerProject;
                        projRecordCount++;
                        totalCompletePercent = (totalPercent/ projRecordCount);
                    }

                    if (projTable.contractValue() > 0)
                    {
                        calcRevenueToBeRecognized(projTable, false);
                    }
                }
            }

            projTablenew = ProjTable::find(this.ProjId);
        
            if (projTablenew.contractValue() > 0)
            {
                calcRevenueToBeRecognized(projTablenew, true);
            
            }
        }
        
        return totalCompletePercent * 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPctFromWBSEffortTracking</Name>
				<Source><![CDATA[
    private ProjControlCompletePct calcPctFromWBSEffortTracking()
    {
        ProjTable                   projTable;
        AmountMST                   revenueToBeRecognized = 0;
        real                        actualCost, plannedCost;
        ProjControlCompletePct      completePercentFromWBS;

        boolean contractLineBasedRevRecFeature = ProjContractLineBasedRevenueRecognitionFeatureHelper::isFeatureEnabled();
        boolean isContractLineUsed = ProjWIPTable::find(this.ProjId).IsContractLineUsed;

        if(contractLineBasedRevRecFeature && isContractLineUsed)
        {
            return 0;
        }

        while select projTable
            where projTable.WIPProject == this.ProjId
        {
            PSAActivitySetup        activitySetup;
            smmActivities           activityTable;
            ProjEmplTrans           projEmplTrans;
            HierarchyTreeTable      treeTable;
            HierarchyLinkTable      linkTable;

            // Compute actual cost
            select sum(Qty), sum(TotalCostAmountCur) from projEmplTrans
                where projEmplTrans.ProjId == projTable.ProjId
                && projEmplTrans.TransDate <= this.PeriodTo;
        
            // Compute effort at complete and cost at complete
            select firstOnly EffortAtComplete, CostAtComplete from activitySetup
            exists join activityTable
                where activityTable.ActivityNumber == activitySetup.ActivityNumber
            exists join treeTable
                where treeTable.RefRecId == activityTable.RecId
                   && treeTable.ParentElementNumber == ''
            exists join linkTable
                where linkTable.HierarchyId == treeTable.HierarchyId
                   && linkTable.RefTableId  == tableNum(projTable)
                   && linkTable.RefRecId    == projTable.RecId;

            if (activitySetup)
            {
                actualCost += projEmplTrans.TotalCostAmountCur;
                plannedCost += activitySetup.CostAtComplete;
                if (activitySetup.EffortAtComplete > 0)
                {
                    revenueToBeRecognized += (projEmplTrans.Qty/activitySetup.EffortAtComplete) * projTable.contractValue();

                    if (!ProjParameters::find().EnableContractCurrencyForRevRec)
                    {
                        CurrencyCode contractCurrCode = projTable.contractCurrCode();
						
						if (contractCurrCode)
						{
							revenueToBeRecognized = CurrencyExchangeHelper::mstAmount(revenueToBeRecognized,
																					  contractCurrCode,
																					  this.PeriodTo,
																					  UnknownNoYes::Unknown,
																					  projTable.exchRateSales());
						}
                    }
                }
            }
        }

        // When hour journal and work breakdown structure are not created against the project, then setting <c> ProjControlPeriodTable::completePct </c> to 100.
        if (plannedCost == 0
            && actualCost == 0
            && revenueToBeRecognized == 0)
        {
            completePercentFromWBS = 100;
        }
        else
        {
            if (this.totalContract() > 0)
            {
                completePercentFromWBS = (revenueToBeRecognized/this.totalContract()) * 100;
            }
            else
            {
                if (plannedCost > 0)
                {
                    completePercentFromWBS = (actualCost/plannedCost) * 100;
                }
                else if (plannedCost == 0 && actualCost > 0)
                {
                    completePercentFromWBS = 100;
                }
                else
                {
                    completePercentFromWBS = 0;
                }
            }
        }
        return completePercentFromWBS;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124977</DeveloperDocumentation>
	<FormRef>ProjControlPeriod</FormRef>
	<Label>@SYS54738</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>PeriodTo</TitleField1>
	<TitleField2>PeriodStatus</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ProjControlPeriodVersionIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<OccEnabled>No</OccEnabled>
	<PrimaryIndex>ProjControlPeriodVersionIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>ProjControlPeriodCostGroup</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProjControlPeriodCostGroup</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjControlPeriodTableColumn</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProjControlPeriodTableColumn</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjControlPeriodTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProjControlPeriodTrans</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ControlId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Version</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompletePct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Factor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AccRevenueEstimate</Name>
			<Label>@SYS78764</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WIPAccruedTurnover</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WIPAccruedTurnoverProd</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WIPAccruedTurnoverProfit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Calculation</Name>
			<Label>@SYS7895</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Factor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalMaxCapital</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValueAdded</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CostEstimate</Name>
			<Label>@SYS78765</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WIPCost</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Current</Name>
			<Label>@SYS10562</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActualContract</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActualCostAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InternalContractTotal</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dates</Name>
			<Label>@SYS7402</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EstimatedEndDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PeriodId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Version</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Recalculated</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Investment</Name>
			<Label>@SYS78353</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EstimateOutput</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetIdNew</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjIdNew</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryNew</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNew</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePropertyIdNew</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyCostNew</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetBookId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PercentageOfCompletion</Name>
			<Label>@SYS50074</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AutoManualCalculation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompletePct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompletePctCalculated</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PostToGeneralLedger</Name>
			<Label>@SYS302046</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BeginningBalance</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Remainder</Name>
			<Label>@SYS53728</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CTCContract</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CTCCostAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Version</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Elimination</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ControlId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Recalculated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EliminationOrig</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Voucher</Name>
			<Label>@SYS12371</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VoucherPosted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VoucherDatePosted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VoucherReverse</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VoucherDateReverse</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WIP</Name>
			<Label>@SYS50076</Label>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNew</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjActivityNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ActualContract</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS54592</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ActualCostAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS22990</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetBookId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetBookId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetIdNew</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>AssetId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutoManualCalculation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjAutoManual</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BeginningBalance</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjBeginningBalance</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CategoryNew</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryCostId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CompletePct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjControlCompletePct</ExtendedDataType>
			<Label>@SYS91121</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CompletePctCalculated</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjControlCompletePct</ExtendedDataType>
			<Label>@SYS91647</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ContractValue</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@PSA250</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ControlId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjControlId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CTCContract</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS54592</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CTCCostAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS87281</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Elimination</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjElimination</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EliminationOrig</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjElimination</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EstimatedEndDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjEndDate</ExtendedDataType>
			<Label>@SYS78491</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EstimateOutput</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjEstimateOutput</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Factor</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjControlFactor</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InternalContractTotal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS54592</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LinePropertyIdNew</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ModelId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ForecastModelId</ExtendedDataType>
			<Label>@SYS82923</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OverUnderBiling</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PeriodFrom</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjPeriodFrom</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PeriodId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjPeriodId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PeriodStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjControlPeriodStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PeriodTo</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjPeriodTo</ExtendedDataType>
			<Label>@SYS74643</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjWipId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS54531</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjIdNew</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyCostNew</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjQtyCost</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Recalculated</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS55661</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Reverse</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS54594</Label>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalMaxCapital</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS78492</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ValueAdded</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjValueAdded</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Version</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjControlVersion</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>VoucherDatePosted</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS23410</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>VoucherDateReverse</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS23410</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VoucherPosted</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Label>@SYS12336</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VoucherReverse</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Label>@SYS54594</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>WIPAccruedTurnover</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS55319</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>WIPAccruedTurnoverProd</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS55316</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>WIPAccruedTurnoverProfit</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS55315</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>WIPCost</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS4249</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProjControlPeriodVersionIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ControlId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PeriodFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Version</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjControlEliminationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ControlId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Elimination</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjControlPeriodToVersionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ControlId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PeriodTo</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Version</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LedgerDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PSAProjStatusPeriodIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PeriodStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PeriodTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>AssetBookId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetBook</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetBookId</Name>
					<Field>AssetBookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetIdNew</Name>
					<Field>AssetIdNew</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjControlPeriodTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetIdNew</Name>
					<SourceEDT>AssetId</SourceEDT>
					<Field>AssetIdNew</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ForecastModel</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ForecastModel</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<RelatedField>Type</RelatedField>
					<ValueStr>HeadingSub::Heading</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ModelId</Name>
					<SourceEDT>ForecastModelId</SourceEDT>
					<Field>ModelId</Field>
					<RelatedField>ModelId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_ProjControlPeriodTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjControlPeriodTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryNew</Name>
					<SourceEDT>ProjCategoryCostId</SourceEDT>
					<Field>CategoryNew</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjControl</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ProjControl</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjControl</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ProjControlPeriodTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ControlId</Name>
					<SourceEDT>ProjControlId</SourceEDT>
					<Field>ControlId</Field>
					<RelatedField>ControlId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ControlIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjectNew</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjectNew</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjControlPeriodTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjIdNew</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjIdNew</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjLineProperty</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjControlPeriodTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LinePropertyIdNew</Name>
					<SourceEDT>ProjLinePropertyId</SourceEDT>
					<Field>LinePropertyIdNew</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjPeriodTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjPeriodTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjPeriodTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjControlPeriodTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PeriodId</Name>
					<SourceEDT>ProjPeriodId</SourceEDT>
					<Field>PeriodId</Field>
					<RelatedField>PeriodId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PeriodIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjWipTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124979</EntityRelationshipRole>
			<RelatedTable>ProjWIPTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmActivities</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjControlPeriodTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNew</Name>
					<SourceEDT>ProjActivityNumber</SourceEDT>
					<Field>ActivityNew</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>