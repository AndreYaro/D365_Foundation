<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCreditCardAuthTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

public class RetailCreditCardAuthTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>RetailCreditCardAuthTrans</c> record by <c>CreditCardAuthTrans</c> record identifier.
    /// </summary>
    /// <param name="_creditCardAuthTransRecId">
    /// The record identifier for the credit card auth trans table.
    /// </param>
    /// <param name="_forUpdate">
    /// True if the record is selected for update; otherwise, false.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The default concurrency model to use when reading records.
    /// </param>
    /// <returns>
    /// The record that is found.
    /// </returns>
    /// <remarks>
    /// It is faster to use <c>RetailCreditCardAuthTrans::findCreditCardAuthTrans</c> if a caller already has <c>CreditCardAuthTrans</c>
    /// buffer selected to avoid potential RPC for reselecting <c>CreditCardAuthTrans</c> buffer.
    /// </remarks>
    public static RetailCreditCardAuthTrans find(RefRecId _creditCardAuthTransRecId, boolean _forUpdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        RetailCreditCardAuthTrans retailCreditCardAuthTrans;
        CreditCardAuthTrans creditCardAuthTrans;

        if (_creditCardAuthTransRecId)
        {
            // Exists join caching will not cache values based on a join if
            // they are not already in cache since the kernel doesn't know
            // which of the two records didn't exist. So to allow the
            // cache to warm up and reduce RPC and SQL load, perform
            // seperate queries for the join.
            creditCardAuthTrans = CreditCardAuthTrans::find(_creditCardAuthTransRecId, _forUpdate, _concurrencyModel);

            retailCreditCardAuthTrans = RetailCreditCardAuthTrans::findByCreditCardAuthTrans(creditCardAuthTrans, _forUpdate, _concurrencyModel);
        }

        return retailCreditCardAuthTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCreditCardAuthTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>RetailCreditCardAuthTrans</c> record by <c>CreditCardAuthTrans</c> record.
    /// </summary>
    /// <param name="_creditCardAuthTrans">
    /// The <c>CreditCardAuthTrans</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// True if the record is selected for update; otherwise, false.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The default concurrency model to use when reading records.
    /// </param>
    /// <returns>
    /// The record that is found.
    /// </returns>
    public static RetailCreditCardAuthTrans findByCreditCardAuthTrans(CreditCardAuthTrans _creditCardAuthTrans, boolean _forUpdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        RetailCreditCardAuthTrans retailCreditCardAuthTrans;

        if (_creditCardAuthTrans.RecId)
        {
            if (_forUpdate)
            {
                retailCreditCardAuthTrans.selectForUpdate(_forUpdate);
                if (_concurrencyModel != ConcurrencyModel::Auto)
                {
                    retailCreditCardAuthTrans.concurrencyModel(_concurrencyModel);
                }
            }
            retailCreditCardAuthTrans.selectLocked(_forUpdate);

            select firstOnly retailCreditCardAuthTrans where retailCreditCardAuthTrans.CreditCardAuthTrans == _creditCardAuthTrans.RecId;
        }

        return retailCreditCardAuthTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find or Create a <c>RetailCreditCardAuthTrans</c> record.
    /// </summary>
    /// <param name = "_creditCardAuthTrans">The <c>CreditCardAuthTrans</c> table buffer.</param>
    /// <param name = "_cardType">The card type id.</param>
    /// <param name = "_tenderType">The tender type id.</param>
    /// <returns>A <c>RetailCreditCardAuthTrans</c> table buffer.</returns>
    internal static RetailCreditCardAuthTrans findOrCreate(CreditCardAuthTrans _creditCardAuthTrans, RetailCardTypeId _cardType, RetailTenderTypeId _tenderType)
    {
        CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

        ttsbegin;

        // Insert/Update RetailCreditCardAuthTrans with card type and tender type for the payment
        RetailCreditCardAuthTrans retailCreditCardAuthTrans = RetailCreditCardAuthTrans::findByCreditCardAuthTrans(_creditCardAuthTrans, true);
        if (retailCreditCardAuthTrans)
        {
            // Only update if feld values have changed.
            // Note: We don't expect updates on this table, but we do support them. This code is added to account for 
            // any duplicates that may be generated due to connectivity issues, and other situations not accounted for.
            if (!(retailCreditCardAuthTrans.CardTypeId == _cardType && retailCreditCardAuthTrans.TenderTypeId == _tenderType))
            {
                retailCreditCardAuthTrans.CardTypeId = _cardType;
                retailCreditCardAuthTrans.TenderTypeId = _tenderType;
                retailCreditCardAuthTrans.update();

                eventSource.EventWritePaymentsCreditCardAuthDuplicateInsert(retailCreditCardAuthTrans.RecId);
            }
        }
        else
        {
            // Insert only in case there is a CreditCardAuthTrans to link.
            //Note: Other tenders may not have related CreditCardAuthTrans
            if ( _creditCardAuthTrans.RecId != 0 && _cardType != '' && _tenderType != '')
            {
                retailCreditCardAuthTrans.CreditCardAuthTrans = _creditCardAuthTrans.RecId;
                retailCreditCardAuthTrans.CardTypeId = _cardType;
                retailCreditCardAuthTrans.TenderTypeId = _tenderType;
                retailCreditCardAuthTrans.insert();

                eventSource.EventWritePaymentsCreditCardAuthInsertSuccessful(retailCreditCardAuthTrans.RecId);
            }
        }

        ttscommit;

        return retailCreditCardAuthTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRetailCrediCardAuthTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert a record in the <c>RetailCreditCardAuthTrans</c> when Tender type is not Known.
    /// </summary>
    /// <param name = "_salesId">The sales id.</param>
    /// <param name = "_creditCardAuthTransRecId">The <c>CreditCardAuthTrans</c> record id.</param>
    /// <returns>The <c>RetailCreditCardAuthTrans</c> inserted buffer.</returns>
    internal static RetailCreditCardAuthTrans insertRetailCrediCardAuthTrans(SalesId _salesId, RefRecId _creditCardAuthTransRecId)
    {
        RetailCreditCardAuthTrans retailCreditCardAuthTrans;

        // Tasks exclusive to Retail Sales
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            SalesTable salesTable = salesTable::find(_salesId);
            CreditCardAuthTrans creditCardAuthTrans = CreditCardAuthTrans::find(_creditCardAuthTransRecId);

            if (salesTable.RecId != 0  && creditCardAuthTrans.RecId != 0)
            {
                // Get CardType from token (creditcardcust) and find first
                // Tender type match for the combination of Channel and cardType
                CreditCardCust creditCardCust = CreditCardCust::find(salesTable.CreditCardCustRefId);

                // Get The Matching card type and tender type
                RetailStoreTenderTypeCardTable retailStoreTenderTypeCardTable =
                RetailStoreTenderTypeCardTable::findByChannelAndCardType(
                    salesTable.retailSalesTable().RetailChannel,
                    strRTrim(creditCardCust.CreditCardTypeName));

                RetailCardTypeId cardTypeId = retailStoreTenderTypeCardTable.cardTypeId;
                RetailTenderTypeId tenderTypeId = retailStoreTenderTypeCardTable.tenderTypeId;
                
                // If <c>RetailStoreTenderTypeCardTable</c> reord doesn't exists.
                // Then fetch the values from <c>McrCustPaymTable</c> record.
                if (cardTypeId == '' || tenderTypeId == '')
                {
                    McrCustPaymTable capturePaymentRecord = McrCustPaymTable::findByRecId(creditCardAuthTrans.MCRPaymRecId);
                    
                    if (capturePaymentRecord)
                    {
                        cardTypeId = (cardTypeId != '') ? cardTypeId : capturePaymentRecord.CardTypeId;
                        tenderTypeId = (tenderTypeId != '') ? tenderTypeId : capturePaymentRecord.TenderTypeId;
                    }
                }

                // Insert/Update RetailCreditCardAuthTrans with card type and tender type for the payment
                retailCreditCardAuthTrans = RetailCreditCardAuthTrans::findOrCreate(
                    creditCardAuthTrans,
                    cardTypeId,
                    tenderTypeId);
            }
        }

        return retailCreditCardAuthTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<Modules>Payments</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TenderTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CardTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditCardAuthTrans</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TenderTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CardTypeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TenderTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CardTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditCardAuthTrans</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CardTypeId</Name>
			<ExtendedDataType>RetailStoreCardTypeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TenderTypeId</Name>
			<ExtendedDataType>RetailStoreCardTypeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CreditCardAuthTrans</Name>
			<ExtendedDataType>CreditCardAuthTransRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CreditCardAuthTransIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>CreditCardAuthTrans</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CreditCardAuthTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CreditCardAuthTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CreditCardAuthTrans</Name>
					<Field>CreditCardAuthTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>