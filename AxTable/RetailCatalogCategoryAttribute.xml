<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCatalogCategoryAttribute</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailCatalogCategoryAttribute extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a unique key that identifies an attribute.
    /// </summary>
    /// <param name = "_attribute">Attribute buffer.</param>
    /// <param name = "_hostCatalog">Host catalog rec id</param>
    /// <param name = "_category">Product category rec id.</param>
    /// <returns>Retail Attribute key.</returns>
    public static RetailAttributeKeyName createKey(EcoResAttribute _attribute, CatalogRefRecId _hostCatalog, RefRecId _category)
    {
        RetailCatalogCategoryAttribute foundCategoryAttribute;
        RetailAttributeKeyName rawKeyName, keyName;
        int suffix = 2;

        // Create an unique attribute key (inside the category)
        rawKeyName = strRem(_attribute.Name, ' .,;/-:\\+_'); // Removes any punctunations from the name.
        keyName = rawKeyName;

        do
        {
            select firstOnly foundCategoryAttribute
                        where foundCategoryAttribute.HostCatalog == _hostCatalog
                           && foundCategoryAttribute.Category == _category
                           && foundCategoryAttribute.KeyName == keyName;

            // This key name has been used
            if (foundCategoryAttribute.RecId > 0)
            {
                keyName = rawKeyName + int2str(suffix);
                suffix ++;
            }
        } while (foundCategoryAttribute.RecId > 0);

        return keyName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add a category attribute to a hosting catalog if it does not exist
    /// </summary>
    /// <param name="_hostCatalog">
    /// Host catalog Id
    /// </param>
    /// <param name="_category">
    /// Product category Id
    /// </param>
    /// <param name="_attribute">
    /// Category attribute Id
    /// </param>
    public static void add(CatalogRefRecId _hostCatalog, RefRecId _category, RefRecId _attribute)
    {
        RetailCatalogCategoryAttribute catalogCategoryAttribute;
        EcoResAttribute attribute;

        catalogCategoryAttribute = RetailCatalogCategoryAttribute::findByIds(_hostCatalog, _category, _attribute);

        // Create the record if not exist
        if (catalogCategoryAttribute.RecId == 0)
        {
            // Get the attribute name
            attribute = EcoResAttribute::find(_attribute);

            if (attribute.RecId > 0 && strLen(attribute.Name) > 0)
            {
                // Insert record
                catalogCategoryAttribute.HostCatalog = _hostCatalog;
                catalogCategoryAttribute.Category = _category;
                catalogCategoryAttribute.Attribute = _attribute;
                catalogCategoryAttribute.KeyName
                    = RetailCatalogCategoryAttribute::createKey(attribute, _hostCatalog, _category);
                catalogCategoryAttribute.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a catalog category attribute by Ids
    /// </summary>
    /// <param name="_hostCatalog">
    /// Host catalog Id
    /// </param>
    /// <param name="_category">
    /// Product category Id
    /// </param>
    /// <param name="_attribute">
    /// Attribute Id
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>RetailCatalogCategoryAttribute</c> table; otherwise, an empty buffer.
    /// </returns>
    public static RetailCatalogCategoryAttribute findByIds(CatalogRefRecId _hostCatalog, RefRecId _category, RefRecId _attribute, boolean _forupdate = false)
    {
        RetailCatalogCategoryAttribute catalogCategoryAttribute;

        catalogCategoryAttribute.selectForUpdate(_forupdate);

        select firstOnly catalogCategoryAttribute
            where catalogCategoryAttribute.HostCatalog == _hostCatalog
               && catalogCategoryAttribute.Category == _category
               && catalogCategoryAttribute.Attribute == _attribute;

        return catalogCategoryAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCatalogCategoryAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate category attributes for a catalog.
    /// </summary>
    /// <param name="_catalogRefRecId">
    /// Catalog Rec Id.
    /// </param>
    /// <param name="_categoryHierarchyId">
    /// Customer Hierarchy Rec Id.
    /// </param>
    public static void populateCatalogCategoryAttributes(CatalogRefRecId _catalogRefRecId, EcoResCategoryHierarchyId _categoryHierarchyId)
    {
        RefRecId categoryHierarchyId;
        RetailCatalogCategoryAttribute catalogCategoryAttribute;
        EcoResCategoryAttributeGroupAttribute categoryAttributeGroupAttribute;
        EcoResCategoryInstanceValue categoryInstanceValue;
        EcoResAttributeValue attributeValue;
        EcoResCategoryAttributeGroupCollapsed categoryAttributeGroupCollapsed;
        EcoResAttributeGroupAttribute attributeGroupAttribute;
        RetailSharedParameters sharedParameters;
        EcoResAttributeGroupAttribute categoryDefaultAttributeGroupAttribute;
        EcoResCategory category;
        EcoResAttributeGroupAttribute ecoResAttributeGroupAttribute;
        EcoResAttributeDefaultValue attributeDefaultValue;
        EcoResValueRecId value;
        ttsBegin;

        // Find category hierarchy of the catalog
        Catalog catalog = Catalog::find(_catalogRefRecId);
        categoryHierarchyId = _categoryHierarchyId;

        if (categoryHierarchyId > 0)
        {
            select firstOnly CategoryDefaultAttributeGroup from sharedParameters;

            // Remove the catalog category attributes which category does not belong to the current category hierarchy
            delete_from catalogCategoryAttribute
                where catalogCategoryAttribute.HostCatalog == _catalogRefRecId
                notExists join category
                    where category.RecId == catalogCategoryAttribute.Category
                       && category.CategoryHierarchy == categoryHierarchyId;

            // Remove the catalog category attributes which are no longer associated with the channel.
            delete_from catalogCategoryAttribute 
                where catalogCategoryAttribute.HostCatalog == _catalogRefRecId
                notexists join categoryAttributeGroupAttribute
                    where categoryAttributeGroupAttribute.CategoryHierarchy == categoryHierarchyId
                       && categoryAttributeGroupAttribute.Category == catalogCategoryAttribute.Category
                       && categoryAttributeGroupAttribute.Attribute == catalogCategoryAttribute.Attribute
                       && categoryAttributeGroupAttribute.AttributeGroup == sharedParameters.CategoryDefaultAttributeGroup;
                      
            // Insert attributes from the category attribute groups for each category
            while select Category, Attribute from categoryAttributeGroupAttribute
                    where categoryAttributeGroupAttribute.CategoryHierarchy == categoryHierarchyId
                notExists join catalogCategoryAttribute
                    where catalogCategoryAttribute.HostCatalog == _catalogRefRecId
                        && catalogCategoryAttribute.Category == categoryAttributeGroupAttribute.Category
                        && catalogCategoryAttribute.Attribute == categoryAttributeGroupAttribute.Attribute
            {
                RetailCatalogCategoryAttribute::add(_catalogRefRecId, categoryAttributeGroupAttribute.Category, categoryAttributeGroupAttribute.Attribute);
            }

            // Insert rich media attributes from the category default attribute group for each category
            while select AttributeGroup, Attribute from  categoryDefaultAttributeGroupAttribute
                    where categoryDefaultAttributeGroupAttribute.AttributeGroup == sharedParameters.CategoryDefaultAttributeGroup
                            join CategoryHierarchy, RecId from category
                                where category.CategoryHierarchy == categoryHierarchyId
                                notExists join catalogCategoryAttribute
                                    where catalogCategoryAttribute.HostCatalog == _catalogRefRecId
                                       && catalogCategoryAttribute.Category == category.RecId
                                       && catalogCategoryAttribute.Attribute == categoryDefaultAttributeGroupAttribute.Attribute
            {
                RetailCatalogCategoryAttribute::add(_catalogRefRecId, category.RecId, categoryDefaultAttributeGroupAttribute.Attribute);
            }

            // Update values of category attributes
            while select forUpdate catalogCategoryAttribute
                where catalogCategoryAttribute.HostCatalog == _catalogRefRecId
            {
                // Find the current attribute value
                select RecId, Category, BuyingLegalEntity from categoryInstanceValue
                    where categoryInstanceValue.Category == catalogCategoryAttribute.Category
                        && categoryInstanceValue.BuyingLegalEntity == 0
                    join firstOnly RecId, InstanceValue, Attribute, Value from attributeValue
                    where attributeValue.InstanceValue == categoryInstanceValue.RecId
                        && attributeValue.Attribute == catalogCategoryAttribute.Attribute;

                if (attributeValue.RecId > 0)
                {
                    // Update the attribute value if it has been changed
                    if (catalogCategoryAttribute.AttributeValue != attributeValue.Value)
                    {
                        catalogCategoryAttribute.AttributeValue = attributeValue.Value;
                        catalogCategoryAttribute.update();
                    }
                }
                else
                {
                    // Find the default attribute value
                    select firstOnly Category, AttributeGroup from categoryAttributeGroupCollapsed
                        where categoryAttributeGroupCollapsed.Category == catalogCategoryAttribute.Category
                        join RecId, AttributeGroup, Attribute, DefaultValue from attributeGroupAttribute
                            where attributeGroupAttribute.AttributeGroup == categoryAttributeGroupCollapsed.AttributeGroup
                               && attributeGroupAttribute.Attribute == catalogCategoryAttribute.Attribute
                               && attributeGroupAttribute.DefaultValue != 0;

                    value = 0;

                    if (attributeGroupAttribute.RecId > 0)
                    {
                        value = attributeGroupAttribute.DefaultValue;
                    }
                    else
                    {
                        // update the Image/Video default attribute value.
                        ecoResAttributeGroupAttribute = EcoResAttributeGroupAttribute::findByGroupAndAttribute(sharedParameters.CategoryDefaultAttributeGroup, catalogCategoryAttribute.Attribute);

                        if (ecoResAttributeGroupAttribute.RecId)
                        {
                            value = ecoResAttributeGroupAttribute.DefaultValue;
                        }

                        if (!value)
                        {
                            // Find attribute default value.
                            attributeDefaultValue = EcoResAttributeDefaultValue::findByAttribute(catalogCategoryAttribute.Attribute);
                            if (attributeDefaultValue)
                            {
                                value = attributeDefaultValue.Value;
                            }
                        }
                    }

                    if (catalogCategoryAttribute.AttributeValue != value)
                    {
                        catalogCategoryAttribute.AttributeValue = value;
                        catalogCategoryAttribute.update();
                    }
                }
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove a category attribute form a hosting catalog if it exists
    /// </summary>
    /// <param name="_hostCatalog">
    /// Host catalog Id
    /// </param>
    /// <param name="_category">
    /// Product category Id
    /// </param>
    /// <param name="_attribute">
    /// Category attribute Id
    /// </param>
    public static void remove(RefRecId _hostCatalog, RefRecId _category, RefRecId _attribute)
    {
        RetailCatalogCategoryAttribute catalogCategoryAttribute;

        catalogCategoryAttribute = RetailCatalogCategoryAttribute::findByIds(_hostCatalog, _category, _attribute, true);

        // Delete the record if exist
        if (catalogCategoryAttribute.RecId > 0)
        {
            catalogCategoryAttribute.delete();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@Retail:RetailCatalogCategoryAttributesTableName</DeveloperDocumentation>
	<Label>@RET261226</Label>
	<TitleField1>Category</TitleField1>
	<TitleField2>Attribute</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>Retail</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Attribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HostCatalog</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KeyName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ChannelCategoryAttribute</Name>
			<Label>@RET261226</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Attribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HostCatalog</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KeyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Attribute</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AttributeValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Category</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HostCatalog</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CatalogRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>KeyName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailAttributeKeyName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ChannelCategoryAttributeKeyName</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>HostCatalog</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Category</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>KeyName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ChannelCategoryAttribute</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>HostCatalog</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Category</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Attribute</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResAttribute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>EcoResAttribute</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Attribute</Name>
					<Field>Attribute</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Category</Name>
					<Field>Category</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResValue</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>EcoResValue</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AttributeValue</Name>
					<Field>AttributeValue</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Catalog</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>Catalog</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HostCatalog</Name>
					<Field>HostCatalog</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>