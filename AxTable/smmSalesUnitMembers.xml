<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmSalesUnitMembers</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class smmSalesUnitMembers extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.SalesManager = NoYes::No;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsbegin;

        this.setMemberId();

        if (this.SalesPersonWorker != 0)
        {
            smmSalesUnitMembers parent = smmSalesUnitMembers::findParent2(this.SalesUnitId);

            if (parent.MemberId && parent.ParentId)
            {
                this.ParentId = parent.MemberId;
            }
            else
            {
                this.ParentId = smmSalesUnitMembers::findParent(this.SalesUnitId).MemberId;
            }
        }

        this.setIdentification();

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesManager</Name>
				<Source><![CDATA[
    public void salesManager()
    {
        ttsbegin;

        this.SalesManager = this.SalesManager ? NoYes::No :  NoYes::Yes;
        this.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesUnitDescription</Name>
				<Source><![CDATA[
    display smmDescription salesUnitDescription()
    {
        return smmSalesUnit::find(this.SalesUnitId).Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIdentification</Name>
				<Source><![CDATA[
    private void setIdentification()
    {
        if (this.ParentId)
        {
            if (this.SalesPersonWorker == 0)
            {
                this.Identification = this.SalesUnitId;
            }
            else
            {
                this.Identification = HcmWorker::find(this.SalesPersonWorker).PersonnelNumber;
            }
        }
        else
        {
            this.Identification = this.SalesUnitId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMemberId</Name>
				<Source><![CDATA[
    public void setMemberId()
    {
        if (!this.MemberId || smmSalesUnitMembers::findMemberId(this.MemberId))
        {
            this.MemberId = smmParameters::getNumber(smmNumbSeqUsed::SalesUnitMemberId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showEmail</Name>
				<Source><![CDATA[
    display Name showEmail()
    {
        return HcmWorker::find(this.SalesPersonWorker).email();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showName</Name>
				<Source><![CDATA[
    display Name showName()
    {
        return HcmWorker::worker2Name(this.SalesPersonWorker);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showSalesUnitManagerId</Name>
				<Source><![CDATA[
    display CrmWorkerRecId showSalesUnitManagerId()
    {
        return smmSalesUnitMembers::findCurrentSalesUnitManager(this.SalesUnitId).SalesPersonWorker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        ret = ret && this.validateDeleteSmmResponsibilitiesEmplTable();

        ret = ret && this.validateCrossCompany(tableMethodStr(smmSalesUnitMembers, validateDelete));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeleteSmmResponsibilitiesEmplTable</Name>
				<Source><![CDATA[
    private boolean validateDeleteSmmResponsibilitiesEmplTable()
    {
        boolean ret = true;
        
        smmSalesUnit smmSalesUnit = smmSalesUnit::find(this.SalesUnitId);
        smmResponsibilitiesEmplTable smmResponsibilitiesEmplTable;
        select firstonly RecId from smmResponsibilitiesEmplTable where
                smmResponsibilitiesEmplTable.RefRecId       == smmSalesUnit.RecId &&
                smmResponsibilitiesEmplTable.RefTableId     == smmSalesUnit.TableId &&
                smmResponsibilitiesEmplTable.Worker         == this.SalesPersonWorker;

        if (smmResponsibilitiesEmplTable.RecId)
        {
            ret = checkFailed("@SYS102621");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if SalesPersonWorker and SalesManagerWorker of <c>smmSalesUnitMembers</c> table belongs to the current Legal Entity.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    /// SalesPersonWorker of the record in the <c>smmSalesUnitMembers</c> table.
    /// SalesManagerWorker of the record in the <c>smmSalesUnitMembers</c> table.
    /// </param>
    /// <returns>
    /// True if Worker belongs to current Legal Entity otherwise false.
    /// </returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        ret = ret && this.validateFieldCurrentCompany(_fieldIdToCheck);

        ret = ret && this.validateCrossCompany(tableMethodStr(smmSalesUnitMembers, validateField), _fieldIdToCheck);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldCurrentCompany</Name>
				<Source><![CDATA[
    private boolean validateFieldCurrentCompany(FieldId _fieldIdToCheck)
    {
        boolean ret = true;

        switch (_fieldIdToCheck)
        {
            case fieldNum(smmSalesUnitMembers, SalesPersonWorker) :
                if (this.SalesPersonWorker)
                {
                    ret = smmUtility::isValidWorkerInCurrentCompany(this.SalesPersonWorker);
                }
                break;

            case fieldNum(smmSalesUnitMembers, SalesManagerWorker) :
                if (this.SalesManagerWorker)
                {
                    ret = smmUtility::isValidWorkerInCurrentCompany(this.SalesManagerWorker);
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite(boolean validateWorkerOnly = false)
    {
        boolean ret = true;
        smmSalesUnitMembers salesUnitMembersOrig = this.orig();

        if (!validateWorkerOnly)
        {
            ret = super();

            // If relation was changed from primary to secondary , check if it is primary in some other unit
            if (this.SalesPersonWorker && salesUnitMembersOrig.Relation == smmSalesUnitMemberRelation::Secondary
                && this.Relation == smmSalesUnitMemberRelation::Primary
                && !smmSalesUnitMembers::memberOkToInsert(this.SalesPersonWorker))
            {
                // %1 is already a primary member of another sales unit.
                ret = checkFailed(strFmt("@SYS102640",this.SalesPersonWorker));
            }
        }

        ret = ret && this.validateWriteIsValidWorkerCurrentCompany();

        ret = ret && this.validateCrossCompany(tableMethodStr(smmSalesUnitMembers, validateWrite));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteIsValidWorkerCurrentCompany</Name>
				<Source><![CDATA[
    private boolean validateWriteIsValidWorkerCurrentCompany()
    {
        boolean ret = true;
        
        if (this.SalesManagerWorker)
        {
            ret = smmUtility::isValidWorkerInCurrentCompany(this.SalesManagerWorker);
        }

        if (this.SalesPersonWorker)
        {
            ret = ret && smmUtility::isValidWorkerInCurrentCompany(this.SalesPersonWorker);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countMembers</Name>
				<Source><![CDATA[
    public static int countMembers(smmSalesUnitId _salesUnitId)
    {
        smmSalesUnitMembers salesUnitMembers;

        if (_salesUnitId)
        {
            select count (RecId) from salesUnitMembers
                where salesUnitMembers.SalesUnitId == _salesUnitId &&
                      salesUnitMembers.SalesPersonWorker != 0;

            return any2int(salesUnitMembers.RecId);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static smmSalesUnitMembers find(CrmWorkerRecId _smmSalesManId, boolean _forUpdate = false)
    {
        smmSalesUnitMembers salesUnitMembers = null;

        if (_smmSalesManId)
        {
            salesUnitMembers.selectForUpdate(_forUpdate);

            select firstonly salesUnitMembers
                index hint SalesManIdx
                where salesUnitMembers.SalesPersonWorker == _smmSalesManId;
        }

        return salesUnitMembers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCurrentSalesUnitManager</Name>
				<Source><![CDATA[
    public static smmSalesUnitMembers findCurrentSalesUnitManager(smmSalesUnitId _salesUnitId, boolean _forupdate = false)
    {
        smmSalesUnitMembers salesUnitMember = null;

        if (_salesUnitId)
        {
            salesUnitMember.selectForUpdate(_forupdate);

            select firstonly salesUnitMember
                where salesUnitMember.SalesUnitId   == _salesUnitId  &&
                      salesUnitMember.SalesManager  == NoYes::Yes;
        }

        return salesUnitMember;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMemberId</Name>
				<Source><![CDATA[
    public static smmSalesUnitMembers findMemberId(smmSalesUnitMemberID _smmSalesMemberId, boolean _forupdate = false)
    {
        smmSalesUnitMembers salesUnitMembers = null;

        if (_smmSalesMemberId)
        {
            salesUnitMembers.selectForUpdate(_forupdate);

            select firstonly salesUnitMembers
                index hint SalesManIdx
                where salesUnitMembers.MemberId == _smmSalesMemberId;
        }

        return salesUnitMembers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMemberPrimaryUnit</Name>
				<Source><![CDATA[
    public static smmSalesUnitId findMemberPrimaryUnit(CrmWorkerRecId _smmSalesManId, boolean _forupdate)
    {
        smmSalesUnitMembers smmSalesUnitMember = null;
        SysGlobalCache globalCache;
        str ownerString = tableStr(smmSalesUnitMembers) + '_'
            + tableStaticMethodStr(smmSalesUnitMembers, findMemberPrimaryUnit) + '_'
            + curext();

        globalCache = classfactory.globalCache();

        if (_smmSalesManId)
        {
            if (globalCache.isSet(ownerString, _smmSalesManId))
            {
                // Lookup
                return globalCache.get(ownerString, _smmSalesManId);
            }
            else
            {
                // Get value
                select firstonly SalesPersonWorker, Relation, SalesUnitId from smmSalesUnitMember
                index hint SalesManIdx
                where smmSalesUnitMember.SalesPersonWorker == _smmSalesManId &&
                      smmSalesUnitMember.Relation   == smmSalesUnitMemberRelation::Primary;

                // Cache value
                globalCache.set(ownerstring, _smmSalesManId, smmSalesUnitMember.SalesUnitId);
            }
        }

        return smmSalesUnitMember.SalesUnitId ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findParent</Name>
				<Source><![CDATA[
    public static smmSalesUnitMembers findParent(smmSalesUnitId _salesUnitId, boolean _forupdate = false)
    {
        smmSalesUnitMembers salesUnitMembers = null;

        if (_salesUnitId)
        {
            salesUnitMembers.selectForUpdate(_forupdate);

            select firstonly salesUnitMembers
                where salesUnitMembers.SalesUnitId == _salesUnitId &&
                      salesUnitMembers.ParentId    == '' ;
        }

        return salesUnitMembers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findParent2</Name>
				<Source><![CDATA[
    public static smmSalesUnitMembers findParent2(smmSalesUnitId _salesUnitId, boolean _forupdate = false)
    {
        smmSalesUnitMembers salesUnitMembers = null;

        if (_salesUnitId)
        {
            salesUnitMembers.selectForUpdate(_forupdate);

            select firstonly salesUnitMembers
                where salesUnitMembers.SalesUnitId == _salesUnitId &&
                      salesUnitMembers.SalesPersonWorker  == 0 ;
        }

        return salesUnitMembers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static smmSalesUnitMembers findRecId(RecId _recId, boolean _forupdate = false)
    {
        smmSalesUnitMembers smmSalesUnitMembers = null;

        if (_recId)
        {
            smmSalesUnitMembers.selectForUpdate(_forupdate);

            select firstonly smmSalesUnitMembers where smmSalesUnitMembers.RecId == _recId;
        }

        return smmSalesUnitMembers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSalesUnitMember</Name>
				<Source><![CDATA[
    public static smmSalesUnitMembers findSalesUnitMember(smmSalesUnitMemberID _salesUnitMemberId, boolean _forupdate = false)
    {
        smmSalesUnitMembers salesUnitMember = null;

        if (_salesUnitMemberId)
        {
            salesUnitMember.selectForUpdate(_forupdate);

            select firstonly salesUnitMember where salesUnitMember.MemberId == _salesUnitMemberId;
        }

        return salesUnitMember;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUnitAndMember</Name>
				<Source><![CDATA[
    public static smmSalesUnitMembers findUnitAndMember(smmSalesUnitId _smmSalesUnitId, CrmWorkerRecId  _smmSalesManId, boolean _forupdate = false)
    {
        smmSalesUnitMembers smmSalesUnitMember = null;

        if (_smmSalesUnitId || _smmSalesManId)
        {
            smmSalesUnitMember.selectForUpdate(_forupdate);

            select firstonly smmSalesUnitMember
                index hint SalesManIdx
                where smmSalesUnitMember.SalesUnitId ==  _smmSalesUnitId &&
                      smmSalesUnitMember.SalesPersonWorker  == _smmSalesManId ;
        }

        return smmSalesUnitMember;
    }

]]></Source>
			</Method>
			<Method>
				<Name>memberOkToInsert</Name>
				<Source><![CDATA[
    public static boolean memberOkToInsert(CrmWorkerRecId _salesManId)
    {
        smmSalesUnitMembers salesUnitMembers;

        if (_salesManId)
        {
            select count(RecId) from salesUnitMembers
                where salesUnitMembers.SalesPersonWorker  == _salesManId      &&
                      salesUnitMembers.Relation    == smmSalesUnitMemberRelation::Primary;
        }

        return (salesUnitMembers.RecId == 0 ? true : false );
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeAllMembersFromSalesUnit</Name>
				<Source><![CDATA[
    public static boolean removeAllMembersFromSalesUnit(smmSalesUnitId _salesUnitId, boolean _promptForConfirmation = true)
    {
        smmSalesUnitMembers salesUnitMembers = null;

        if (_salesUnitId)
        {
            // Warning: This will delete all members in this sales unit. Are you sure you want to continue?
            if (!_promptForConfirmation || Box::yesNo("@SYS80337", DialogButton::No) == DialogButton::Yes)
            {
                ttsbegin;

                salesUnitMembers.selectForUpdate(true);

                delete_from salesUnitMembers
                    where salesUnitMembers.SalesUnitId == _salesUnitId &&
                          salesUnitMembers.SalesPersonWorker  != 0;

                ttscommit;

                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeMemberFromSalesUnit</Name>
				<Source><![CDATA[
    public static boolean removeMemberFromSalesUnit(smmSalesUnitMembers _salesUnitMembers, HcmWorker _salesMan, boolean _promptForConfirmation = true)
    {
        if (_salesUnitMembers && _salesUnitMembers.validateDelete())
        {
            // Do you want to delete %1?
            if (!_promptForConfirmation || Box::yesNo(strFmt("@SYS55298", _salesMan.name()), DialogButton::No) == DialogButton::Yes)
            {
                smmSalesUnitMembers salesUnitMembers;

                ttsbegin;

                salesUnitMembers = smmSalesUnitMembers::findUnitAndMember(_salesUnitMembers.SalesUnitId, _salesUnitMembers.SalesPersonWorker, true);
                salesUnitMembers.delete();

                ttscommit;

                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAsSalesUnitManager</Name>
				<Source><![CDATA[
    public static boolean setAsSalesUnitManager(smmSalesUnitMembers _salesUnitMembers)
    {
        boolean ret = false;

        ttsbegin;

        if (_salesUnitMembers)
        {
            smmSalesUnitMembers currentSalesUnitmanager = smmSalesUnitMembers::findCurrentSalesUnitManager(_salesUnitMembers.SalesUnitId, true);

            if (currentSalesUnitmanager && (currentSalesUnitmanager.RecId != _salesUnitMembers.RecId))
            {
                currentSalesUnitmanager.SalesManager = NoYes::No;
                currentSalesUnitmanager.update();
            }

            // Find current sales unit manager
            _salesUnitMembers.salesManager();

            ret = true;
        }

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCrossCompany</Name>
				<Source><![CDATA[
    private boolean validateCrossCompany(str _methodName, FieldId _fieldIdToCheck = 0)
    {
        SysDataSharingPolicy policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(curExt(), tableId2name(this.TableId));
        if (policy.RecId && policy.IsEnabled)
        {
            Query       query = SysDataSharingCrossCompanyValidatorQueryBuilder::buildQuery(this.orig(), policy.RecId);
            QueryRun    queryRun = new QueryRun(query);
        
            while (queryRun.Next())
            {
                smmSalesUnitMembers companySmmSalesUnitMembers = queryRun.get(this.TableId);
                DataAreaId company = companySmmSalesUnitMembers.DataAreaId;

                if (companySmmSalesUnitMembers.RecId && company)
                {
                    changecompany(company)
                    {
                        smmSalesUnitMembers smmSalesUnitMembers = smmSalesUnitMembers::findRecId(companySmmSalesUnitMembers.RecId);
                        if (smmSalesUnitMembers.RecId)
                        {
                            buf2Buf(this, smmSalesUnitMembers);

                            switch (_methodName)
                            {
                                case tableMethodStr(smmSalesUnitMembers, validateField):
                                    if (_fieldIdToCheck && !smmSalesUnitMembers.validateFieldCurrentCompany(_fieldIdToCheck))
                                    {
                                        return false;
                                    }
                                    break;
                                case tableMethodStr(smmSalesUnitMembers, validateWrite):
                                    if (!smmSalesUnitMembers.validateWriteIsValidWorkerCurrentCompany())
                                    {
                                        return false;
                                    }
                                    break;
                                case tableMethodStr(smmSalesUnitMembers, validateDelete):
                                    if (!smmSalesUnitMembers.validateDeleteSmmResponsibilitiesEmplTable())
                                    {
                                        return false;
                                    }
                                    break;
                                default:
                                    return true;
                            }
                        }
                    }
                }
            }
        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SmmSM</ConfigurationKey>
	<DeveloperDocumentation>@SYS124779</DeveloperDocumentation>
	<FormRef>smmSalesUnit</FormRef>
	<Label>@SYS80474</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>SalesUnitId</TitleField1>
	<TitleField2>SalesPersonWorker</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>SalesUnitManRelation</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>smmSalesTarget</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>smmSalesTarget</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPersonWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPersonWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Relation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesPersonWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Relation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Identification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesManagerWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MemberId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesManager</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SortField</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Employee</Name>
			<Label>@SYS80745</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesPersonWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>showName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Identification</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Relation</Name>
			<Label>@SYS80109</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Relation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesManager</Name>
			<Label>@SYS79867</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesPersonWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesUnit</Name>
			<Label>@SYS79797</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>salesUnitDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Identification</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmUnitMemberName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MemberId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmSalesUnitMemberID</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParentId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmSalesUnitMemberID</ExtendedDataType>
			<Label>@SYS82007</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Relation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>smmSalesUnitMemberRelation</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SalesManager</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmSalesManager</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesManagerWorker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>smmSalesManagerWorker</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesPersonWorker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>smmSalesManWorker</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesUnitId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmSalesUnitId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SortField</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>HcmWorkerIdx1</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesManagerWorker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SalesUnitManRelation</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesUnitId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesPersonWorker</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Relation</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SalesManIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesPersonWorker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>MemberId</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>MemberId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesManagerWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_smmSalesUnitMembers</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesManagerWorker</Name>
					<Field>SalesManagerWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesPersonWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_1_smmSalesUnitMembers</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesPersonWorker</Name>
					<Field>SalesPersonWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmSalesUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmSalesUnit</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>smmSalesUnit</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>smmSalesUnitMembers</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesUnitId</Name>
					<SourceEDT>smmSalesUnitId</SourceEDT>
					<Field>SalesUnitId</Field>
					<RelatedField>SalesUnitId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesUnitIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>