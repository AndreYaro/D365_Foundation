<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgBulletinBoard</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JmgBulletinBoard extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the time of the <c>viewDateTimeTo</c> record to be midnight the same day and the public
    /// message to be <c>NoYes::No</c>.
    /// </summary>
    public void initValue()
    {
        super();

        this.ViewDateTimeTo = DateTimeUtil::newDateTime(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), 24 * 60 * 60 - 1, DateTimeUtil::getUserPreferredTimeZone());
        this.PublicMessage = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the two view date fields and inserts default values in each of them if they are empty.
    /// </summary>
    public void insert()
    {
        if (!this.ViewDateTimeTo)
        {
            this.ViewDateTimeTo = DateTimeUtil::newDateTime(DateTimeUtil::date(this.ViewDateTime), 24 * 60 * 60 - 1, DateTimeUtil::getUserPreferredTimeZone());
        }

        if (!this.ViewDateTime)
        {
            this.ViewDateTime = DateTimeUtil::minValue();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the record has been changed from a private to a public message.
    /// </summary>
    /// <remarks>
    /// If the record has been changed all related records in the two recipient tables are deleted.
    /// </remarks>
    public void update()
    {
        if (this.orig().PublicMessage != this.PublicMessage && this.PublicMessage == NoYes::Yes)
        {
            JmgBulletinBoardRecipient jmgBulletinBoardRecipient;

            delete_from jmgBulletinBoardRecipient
                where jmgBulletinBoardRecipient.MsgId   == this.MsgId;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (this.ViewDateTimeTo && this.ViewDateTimeTo < this.ViewDateTime)
        {
            ret = checkFailed("@SYS39558") && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMessages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds all the public messages that should be active at the specified point in time.
    /// </summary>
    /// <param name="_viewDateTime">
    /// The point in time for which to find the records; optional.
    /// </param>
    /// <returns>
    /// A dataset of messages in the <c>JmgBulletinBoard</c> table.
    /// </returns>
    /// <remarks>
    /// If the <paramref name="_viewDateTime" /> parameter is not present the current time is used
    /// </remarks>
    public static JmgBulletinBoard findMessages(utcdatetime _viewDateTime = DateTimeUtil::utcNow())
    {
        JmgBulletinBoard jmgBulletinBoard;
        JmgBulletinBoard ret;

        ttsbegin;

        jmgBulletinBoard.recordLevelSecurity(true);
        ret.setTmp();

        while select jmgBulletinBoard
            where jmgBulletinBoard.ViewDateTime <=  _viewDateTime &&
                jmgBulletinBoard.ViewDateTimeTo >=  _viewDateTime &&
                jmgBulletinBoard.PublicMessage == NoYes::Yes
        {
            ret.data(jmgBulletinBoard);
            ret.insert();
        }

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPersonalMessages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds all public messages that are intended for a specific terminal and the personal messages for
    /// the specified user.
    /// </summary>
    /// <param name="_worker">
    /// The ID of the worker for which to retrieve messages.
    /// </param>
    /// <param name="_unreadMessagesOnly">
    /// A <c>NoYes</c> enumeration value that indicates whether to retrieve only unread personal messages.
    /// </param>
    /// <param name="_viewDateTime">
    /// Indicates the point in time for which to find the records. If no parameter is present, the current
    /// time is used; optional.
    /// </param>
    /// <returns>
    /// The dataset of messages in the <c>JmgBulletinBoard</c> table.
    /// </returns>
    /// <remarks>
    /// If the <paramref name="_terminalID" /> parameter is not present, the ID of the executing client is
    /// used.If the <paramref name="_viewDateTime" /> parameter is not present, the current time is used.
    /// </remarks>
    public static JmgBulletinBoard findPersonalMessages(JmgWorkerRecId _worker, NoYes _unreadMessagesOnly = NoYes::No, utcdatetime _viewDateTime = DateTimeUtil::utcNow())
    {
        JmgBulletinBoard ret;
        JmgBulletinBoard jmgBulletinBoard;
        JmgBulletinBoardRecipient jmgBulletinBoardRecipient;

        ttsbegin;

        jmgBulletinBoard.recordLevelSecurity(true);
        jmgBulletinBoardRecipient.recordLevelSecurity(true);
        ret.setTmp();

        // First read all public messages.
        while select jmgBulletinBoard
            where jmgBulletinBoard.ViewDateTime   <= _viewDateTime
               && jmgBulletinBoard.ViewDateTimeTo >= _viewDateTime
               && jmgBulletinBoard.PublicMessage  == NoYes::Yes
        {
            ret.data(jmgBulletinBoard);
            ret.insert();
        }

        // Then read private messages according to the rules provided.
        while select jmgBulletinBoard
            where jmgBulletinBoard.ViewDateTime   <= _viewDateTime
               && jmgBulletinBoard.ViewDateTimeTo >= _viewDateTime
               && jmgBulletinBoard.PublicMessage  == NoYes::No
            join jmgBulletinBoardRecipient
               where jmgBulletinBoardRecipient.MsgId  == jmgBulletinBoard.MsgId
                  && jmgBulletinBoardRecipient.Worker == _worker
        {
            if (_unreadMessagesOnly == NoYes::No || jmgBulletinBoardRecipient.MessageRead == NoYes::No)
            {
                ret.data(jmgBulletinBoard);
                ret.insert();
            }
        }

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>JmgRegistrationEmployees</ConfigurationKey>
	<DeveloperDocumentation>@SYS317269</DeveloperDocumentation>
	<Label>@SYS38572</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ViewDateTime</TitleField1>
	<TitleField2>ViewDateTimeTo</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>MsgIdIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<CreatedBy>Yes</CreatedBy>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>MsgIdIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>JmgBulletinBoardRecipient</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>JmgBulletinBoardRecipient</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Message</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ViewDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EnhanceMsg</Name>
			<Label>@SYS309181</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>messageType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerSender</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MsgId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ViewDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Information</Name>
			<Label>@SYS53922</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Subject</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Message</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PublicMessage</Name>
			<Label>@SYS39942</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PublicMessage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Receipt</Name>
			<Label>@SYS106258</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Receipt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TimeInterval</Name>
			<Label>@SYS36034</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ViewDateTimeTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ViewDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Message</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Notes</ExtendedDataType>
			<Label>@SYS53922</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>messageType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>JmgMessageType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MsgId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgMsgId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PublicMessage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS39942</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Receipt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS106258</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Subject</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>@SYS74341</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ViewDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgDateTime</ExtendedDataType>
			<Label>@SYS38489</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ViewDateTimeTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgDateTime</ExtendedDataType>
			<Label>@SYS38490</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerSender</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>JmgWorkerRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>MsgIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>MsgId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HcmWorkerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkerSender</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TimeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PublicMessage</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ViewDateTimeTo</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ViewDateTime</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_JmgBulletinBoard</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerSender</Name>
					<Field>WorkerSender</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>