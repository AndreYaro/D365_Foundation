<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanningAllocationSchedule</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetPlanningAllocationSchedule extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>editAllocationTerm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Manages the setting of the allocation term of the allocation schedule.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether to set the allocation term.
    /// </param>
    /// <param name="_budgetAllocationTermId">
    /// The allocation term ID that was selected by a user.
    /// </param>
    /// <returns>
    /// The allocation term ID of the <c>BudgetAllocationTerm</c> record.
    /// </returns>
    public edit BudgetAllocationTermId editAllocationTerm(boolean _set, BudgetAllocationTermId _budgetAllocationTermId)
    {
        BudgetAllocationTermId budgetAllocationTermId = _budgetAllocationTermId;

        if (_set)
        {
            this.setAllocationTerm(budgetAllocationTermId);
        }
        else
        {
            budgetAllocationTermId = this.getAllocationTerm();
        }

        return budgetAllocationTermId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editLedgerAllocationKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Manages the setting of the ledger allocation key ID of the allocation schedule.
    /// </summary>
    /// <param name="_set">
    /// Determines if the ledger allocation key ID is set or read.
    /// </param>
    /// <param name="_ledgerAllocateKeyId">
    /// The ledger allocation key ID that was selected by a user.
    /// </param>
    /// <returns>
    /// The ledger allocation key ID of the allocation schedule.
    /// </returns>
    public edit LedgerAllocateKeyId editLedgerAllocationKey(boolean _set, LedgerAllocateKeyId _ledgerAllocateKeyId)
    {
        LedgerAllocateKey   ledgerAllocateKey;
        LedgerAllocateKeyId ledgerAllocateKeyId = _ledgerAllocateKeyId;

        if (_set)
        {
            if (_ledgerAllocateKeyId && hasTableAccess(tableNum(LedgerAllocateKey)))
            {
                changeCompany (CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(this.Ledger)))
                {
                    ledgerAllocateKey = LedgerAllocateKey::find(ledgerAllocateKeyId);

                    if (ledgerAllocateKey)
                    {
                        this.LedgerAllocationKey            = ledgerAllocateKeyId;
                        this.LedgerAllocationKeyDataAreaId  = ledgerAllocateKey.dataAreaId;
                    }
                    else
                    {
                        checkFailed(strFmt("@SYS112224", _ledgerAllocateKeyId, fieldPName(LedgerAllocateKey, Key), tablePName(LedgerAllocateKey)));
                    }
                }
            }
        }
        else
        {
            ledgerAllocateKeyId = this.LedgerAllocationKey;
        }

        return ledgerAllocateKeyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editLedgerAllocationRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Manages the setting of the ledger allocation rule of the allocation schedule.
    /// </summary>
    /// <param name="_set">
    /// Determines if the ledger allocation rule is set or read.
    /// </param>
    /// <param name="_ledgerAllocationRuleID">
    /// The <c>LedgerAllocationRule</c> table ID that was selected by a user.
    /// </param>
    /// <returns>
    /// The <c>LedgerAllocationRule</c> table ID of the allocation schedule.
    /// </returns>
    public edit BudgetPlanningAllocationRuleId editLedgerAllocationRule(
        boolean _set,
        BudgetPlanningAllocationRuleId _ledgerAllocationRuleID)
    {
        LedgerAllocationRule   ledgerAllocationRule;
        BudgetPlanningAllocationRuleId ledgerAllocationRuleID = _ledgerAllocationRuleID;

        if (_set)
        {
            if (_ledgerAllocationRuleID && hasTableAccess(tableNum(LedgerAllocationRule)))
            {
                changeCompany (CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(this.Ledger)))
                {
                    ledgerAllocationRule = LedgerAllocationRule::find(ledgerAllocationRuleID);

                    if (ledgerAllocationRule)
                    {
                        this.LedgerAllocationRule            = ledgerAllocationRuleID;
                        this.LedgerAllocationRuleDataAreaId  = ledgerAllocationRule.DataAreaId;
                    }
                    else
                    {
                        checkFailed(strFmt("@SYS112224", ledgerAllocationRuleID, fieldPName(LedgerAllocationRule, RuleId), tablePName(LedgerAllocationRule)));
                    }
                }
            }
        }
        else
        {
            ledgerAllocationRuleID = this.LedgerAllocationRule;
        }

        return ledgerAllocationRuleID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllocationTerm</Name>
				<Source><![CDATA[
    private BudgetAllocationTermId getAllocationTerm()
    {
        BudgetAllocationTermId budgetAllocationTermId;

        if (this.Ledger)
        {
            changecompany (CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(this.Ledger)))
            {
                budgetAllocationTermId = BudgetAllocationTerm::find(this.AllocationTerm).Name;
            }
        }

        return budgetAllocationTermId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.Factor = 1.0;
        this.Ledger = Ledger::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetForAllocationMethodChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the ledger allocation key, ledger allocation term and ledger allocation rule field values to empty.
    /// </summary>
    public void resetForAllocationMethodChange()
    {
        this.LedgerAllocationKey            = '';
        this.LedgerAllocationKeyDataAreaId  = '';
        this.AllocationTerm                 = 0;
        this.LedgerAllocationRule           = '';
        this.LedgerAllocationRuleDataAreaId = '';
        this.BasisPlanScenario              = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllocationTerm</Name>
				<Source><![CDATA[
    private void setAllocationTerm(BudgetAllocationTermId _budgetAllocationTermId)
    {
        BudgetAllocationTerm budgetAllocationTerm;

        if (this.Ledger)
        {
            changeCompany (CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(this.Ledger)))
            {
                budgetAllocationTerm = BudgetAllocationTerm::findByTermId(_budgetAllocationTermId);

                if (budgetAllocationTerm)
                {
                    this.AllocationTerm = budgetAllocationTerm.RecId;
                }
                else
                {
                    checkFailed(strFmt("@SYS112224", _budgetAllocationTermId, fieldPName(BudgetAllocationTerm, Name), tablePName(BudgetAllocationTerm)));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid;
        LedgerAllocationRule ledgerAllocationRule;

        isValid = super();

        switch (this.AllocationMethod)
        {
            case BudgetPlanAllocateType::AllocateByPeriod:
                if (!this.LedgerAllocationKey)
                {
                    isValid = checkFailed(strFmt("@SYS26332", fieldPName(BudgetPlanningAllocationSchedule, LedgerAllocationKey)));
                }
                break;

            case BudgetPlanAllocateType::AllocateByDimension:
                if (!this.AllocationTerm)
                {
                    isValid = checkFailed(strFmt("@SYS26332", fieldPName(BudgetPlanningAllocationSchedule, AllocationTerm)));
                }
                break;

            case BudgetPlanAllocateType::AllocateByLedgerRule:

                if (!this.LedgerAllocationRule)
                {
                    isValid = checkFailed(strFmt("@SYS26332", fieldPName(BudgetPlanningAllocationSchedule, LedgerAllocationRule)));
                }
                else
                {
                    changeCompany(CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(this.Ledger)))
                    {
                        ledgerAllocationRule = LedgerAllocationRule::find(this.LedgerAllocationRule);
                    }

                    if (ledgerAllocationRule.DataSource != LedgerAllocationSource::FixedValue && !this.SourcePlanScenario)
                    {
                        isValid = checkFailed(strFmt("@SYS26332", fieldPName(BudgetPlanningAllocationSchedule, SourcePlanScenario)));
                    }

                    if (ledgerAllocationRule.AllocationMethod == LedgerAllocationMethod::Basis && !this.BasisPlanScenario)
                    {
                        isValid = checkFailed(strFmt("@SYS26332", fieldPName(BudgetPlanningAllocationSchedule, BasisPlanScenario)));
                    }
                }
                break;
        }

        if (!this.SourcePlanScenario && this.AllocationMethod != BudgetPlanAllocateType::AllocateByLedgerRule)
        {
            isValid = checkFailed(strFmt("@SYS26332", fieldPName(BudgetPlanningAllocationSchedule, SourcePlanScenario)));
        }

        if (isValid
            && ((this.AllocationMethod == BudgetPlanAllocateType::AllocateByLedgerRule
            && ledgerAllocationRule.DataSource != LedgerAllocationSource::FixedValue
            && BudgetPlanScenario::find(this.SourcePlanScenario).UnitOfMeasureClass != UnitOfMeasureClass::Monetary
            && BudgetPlanScenario::find(this.DestinationPlanScenario).UnitOfMeasureClass != UnitOfMeasureClass::Monetary)
            || this.AllocationMethod != BudgetPlanAllocateType::AllocateByLedgerRule)
            && !BudgetPlan::areUnitOfMeasureValuesEqual(
                    BudgetPlanScenario::find(this.SourcePlanScenario).Name,
                    BudgetPlanScenario::find(this.DestinationPlanScenario).Name))
        {
            // In case of ledger allocation rules, the monetary to non-monetary scenario allocation is allowed.
            // When both source and target scenario are non-monetary, their unit of measure should be same.
            // For all the other allocation types, the unit of measure source and target scenario should always be same.
            // Bypassing if the ledger allocation rule data source is set to fix value as the source scenario field would be empty in that case.
            isValid = checkFailed("@GLS150220");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>BudgetPlanningAllocationSchedule</c> table;
    /// if not, an error message is displayed.
    /// </summary>
    /// <param name="_budgetPlanningAllocationScheduleRecId">
    /// The record ID of the <c>BudgetPlanningAllocationSchedule</c> record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(BudgetPlanningAllocationScheduleRecId _budgetPlanningAllocationScheduleRecId)
    {
        boolean isExisting = true;

        if (!BudgetPlanningAllocationSchedule::exist(_budgetPlanningAllocationScheduleRecId))
        {
            isExisting = checkFailed(strFmt(BudgetPlanningAllocationSchedule::txtNotExist(), _budgetPlanningAllocationScheduleRecId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>BudgetPlanningAllocationSchedule</c> table exists.
    /// </summary>
    /// <param name="_budgetPlanningAllocationScheduleRecId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(BudgetPlanningAllocationScheduleRecId _budgetPlanningAllocationScheduleRecId)
    {
        return (BudgetPlanningAllocationSchedule::find(_budgetPlanningAllocationScheduleRecId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetPlanningAllocationSchedule</c> table.
    /// </summary>
    /// <param name="_budgetPlanningAllocationScheduleRecId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanningAllocationSchedule</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanningAllocationSchedule find(
        BudgetPlanningAllocationScheduleRecId _budgetPlanningAllocationScheduleRecId,
        boolean                               _forupdate = false,
        ConcurrencyModel                      _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanningAllocationSchedule budgetPlanningAllocationSchedule;

        if (_budgetPlanningAllocationScheduleRecId)
        {
            budgetPlanningAllocationSchedule.selectForUpdate(_forupdate);

            if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanningAllocationSchedule.concurrencyModel(_concurrencyModel);
            }

            select firstonly budgetPlanningAllocationSchedule
                where budgetPlanningAllocationSchedule.RecId == _budgetPlanningAllocationScheduleRecId;
        }

        return budgetPlanningAllocationSchedule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetPlanningAllocationSchedule</c> table.
    /// </summary>
    /// <param name="_budgetPlanAllocationScheduleName">
    /// The name of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanningAllocationSchedule</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanningAllocationSchedule findByName(
        BudgetPlanAllocationScheduleName _budgetPlanAllocationScheduleName,
        boolean                          _forupdate = false,
        ConcurrencyModel                 _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanningAllocationSchedule budgetPlanningAllocationSchedule;

        if (_budgetPlanAllocationScheduleName)
        {
            budgetPlanningAllocationSchedule.selectForUpdate(_forupdate);

            if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanningAllocationSchedule.concurrencyModel(_concurrencyModel);
            }

            select firstonly budgetPlanningAllocationSchedule
                where budgetPlanningAllocationSchedule.Name == _budgetPlanAllocationScheduleName;
        }

        return budgetPlanningAllocationSchedule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetAllocationTerm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the <c>BudgetAllocationTerm</c> records.
    /// </summary>
    /// <param name="_formStringControl">
    /// The form string control to perform the lookup for.
    /// </param>
    /// <param name="_ledgerRecId">
    /// The record ID of the <c>Ledger</c> table.
    /// </param>
    /// <exception cref="Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    public static void lookupBudgetAllocationTerm(
        FormStringControl _formStringControl,
        LedgerRecId       _ledgerRecId)
    {
        Query                query;
        SysTableLookup       tableLookup;
        QueryBuildDataSource budgetAllocationTermDataSource;

        if (_formStringControl == null && !_ledgerRecId)
        {
            throw error(Error::missingParameter(null));
        }

        tableLookup = SysTableLookup::newParameters(tableNum(BudgetAllocationTerm), _formStringControl);
        query = new Query();

        // Add field that will be shown in the lookup form as columns
        tableLookup.addLookupfield(fieldNum(BudgetAllocationTerm, Name));
        tableLookup.addLookupfield(fieldNum(BudgetAllocationTerm, Description));

        // Build the query for the lookup form
        budgetAllocationTermDataSource = query.addDataSource(tableNum(BudgetAllocationTerm));
        budgetAllocationTermDataSource.company(CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(_ledgerRecId)));

        // Add the query to the lookup form
        tableLookup.parmQuery(query);

        // Perform the lookup
        tableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupLedgerAllocationKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the <c>LedgerAllocateKey</c> records.
    /// </summary>
    /// <param name="_formStringControl">
    /// The form string control to perform the lookup for.
    /// </param>
    /// <param name="_ledgerRecId">
    /// The record ID of <c>Ledger</c> table.
    /// </param>
    /// <exception cref="Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    public static void lookupLedgerAllocationKey(
        FormStringControl _formStringControl,
        LedgerRecId       _ledgerRecId)
    {
        Query                query;
        SysTableLookup       tableLookup;
        QueryBuildDataSource LedgerAllocateKeyDataSource;

        if (_formStringControl == null && !_ledgerRecId)
        {
            throw error(Error::missingParameter(null));
        }

        tableLookup = SysTableLookup::newParameters(tableNum(LedgerAllocateKey), _formStringControl);
        query = new Query();

        // Add fields that will be shown in the lookup form as columns
        tableLookup.addLookupfield(fieldNum(LedgerAllocateKey, Key));
        tableLookup.addLookupfield(fieldNum(LedgerAllocateKey, Txt));

        // Build the query for the lookup form
        LedgerAllocateKeyDataSource = query.addDataSource(tableNum(LedgerAllocateKey));
        LedgerAllocateKeyDataSource.company(CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(_ledgerRecId)));

        // Add the query to the lookup form
        tableLookup.parmQuery(query);

        // Perform the lookup
        tableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@GLS150452</DeveloperDocumentation>
	<FormRef>BudgetPlanningConfigurationAllocateSchd</FormRef>
	<Label>@GLS150450</Label>
	<SingularLabel>@GLS150451</SingularLabel>
	<TableGroup>Group</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>AllocationMethod</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>Budget</Modules>
	<ReplacementKey>NameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Ledger</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllocationMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editAllocationTerm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editLedgerAllocationKey</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editLedgerAllocationRule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourcePlanScenario</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DestinationPlanScenario</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BasisPlanScenario</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Factor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AppendLines</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS312922</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Ledger</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllocationMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editAllocationTerm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editLedgerAllocationKey</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editLedgerAllocationRule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AncestorLevel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourcePlanScenario</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DestinationPlanScenario</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BasisPlanScenario</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Factor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseSourceEffectiveDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AppendLines</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllocationMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>BudgetPlanAllocateType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AllocationTerm</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetAllocationTermRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BasisPlanScenario</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanScenarioRecId</ExtendedDataType>
			<Label>@SYS4006453</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DestinationPlanScenario</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanScenarioRecId</ExtendedDataType>
			<Label>@GLS150454</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Factor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanAllocationScheduleFactor</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Ledger</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerRecId</ExtendedDataType>
			<Label>@SYS13356</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LedgerAllocationKey</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerAllocateKeyId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LedgerAllocationKeyDataAreaId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LedgerAllocationRule</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanningAllocationRuleId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LedgerAllocationRuleDataAreaId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanAllocationScheduleName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourcePlanScenario</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanScenarioRecId</ExtendedDataType>
			<Label>@GLS150456</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseSourceEffectiveDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@Budget:UseSourceEffectiveDatesInAllocation</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AncestorLevel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanAncestorLevel</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AppendLines</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@Budget:BudgetPlanAllocateAppendToPlan</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BasisPlanScenario</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BudgetPlanScenario</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BasisBudgetPlanScenario</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetPlanningAllocationSchedule</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BasisPlanScenario</Name>
					<Field>BasisPlanScenario</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetAllocationTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BudgetAllocationTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AllocationTerm</Name>
					<Field>AllocationTerm</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DestinationPlanScenario</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>BudgetPlanScenario</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DestinationBudgetPlanScenario</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetPlanningAllocationSchedule</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DestinationPlanScenario</Name>
					<Field>DestinationPlanScenario</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Ledger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Ledger</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Ledger</Name>
					<Field>Ledger</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerAllocateKey</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerAllocateKey</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerAllocateKey</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerAllocationKeyDataAreaId</Name>
					<Field>LedgerAllocationKeyDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerAllocationKey</Name>
					<SourceEDT>LedgerAllocateKeyId</SourceEDT>
					<Field>LedgerAllocationKey</Field>
					<RelatedField>Key</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerAllocationRule</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerAllocationRule</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerAllocationRule</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerAllocationRuleDataAreaId</Name>
					<Field>LedgerAllocationRuleDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerAllocationRule</Name>
					<Field>LedgerAllocationRule</Field>
					<RelatedField>RuleId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RuleIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourcePlanScenario</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>BudgetPlanScenario</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>SourceBudgetPlanScenario</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetPlanningAllocationSchedule</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourcePlanScenario</Name>
					<Field>SourcePlanScenario</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>