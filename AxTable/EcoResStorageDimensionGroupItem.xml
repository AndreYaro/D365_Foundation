<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResStorageDimensionGroupItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResStorageDimensionGroupItem extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a record in <c>EcoResStorageDimensionGroupItem</c> table.
    /// If storage dimension group is enabled for WHS a record in <c>WHSInventEnabled</c> table is deleted.
    /// </summary>
    public void delete()
    {
        InventInstrumentationLogger logger = InventInstrumentationLogger::createLogger(tableStr(InventTable));

        using (var activityContext = logger.items().deleteStorageDimensionGroup())
        {
            logger.logStorageDimensionGroupItemInformation(InventTable::find(this.ItemId).RecId, this.StorageDimensionGroup);

            if (EcoResStorageDimensionGroupItemInstrumentationStackTraceFlight::instance().isEnabled())
            {
                logger.logStackTrace();
            }

            super();

            if (InventTable::find(this.ItemId).isCompanyEqualToPolicyMasterCompany(this.ItemDataAreaId))
            {
                changeCompany(this.ItemDataAreaId)
                {
                    WHSInventEnabled::removeItem(this.ItemId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in <c>EcoResStorageDimensionGroupItem</c> table.
    /// If storage dimension group is enabled for WHS a record in <c>WHSInventEnabled</c> table is inserted.
    /// </summary>
    public void insert()
    {
        super();

        if (EcoResStorageDimensionGroup::find(this.StorageDimensionGroup).IsWarehouseWHSEnabled)
        {
            if (InventTable::find(this.ItemId).isCompanyEqualToPolicyMasterCompany(this.ItemDataAreaId))
            {
                changeCompany(this.ItemDataAreaId)
                {
                    WHSInventEnabled::addItem(this.ItemId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the record in <c>EcoResStorageDimensionGroupItem</c> table.
    /// </summary>
    public void update()
    {
        InventInstrumentationLogger logger = InventInstrumentationLogger::createLogger(tableStr(InventTable));

        using (var activityContext = logger.items().updateStorageDimensionGroup())
        {
            logger.logStorageDimensionGroupItemInformation(InventTable::find(this.ItemId).RecId, this.StorageDimensionGroup);

            super();

            changeCompany(this.ItemDataAreaId)
            {
                WHSInventEnabled::updateItem(this.ItemId, EcoResStorageDimensionGroup::find(this.StorageDimensionGroup).IsWarehouseWHSEnabled);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        boolean skipValidation = WHSReservationHierarchyItemSkipValidateDeleteFlight::instance().isEnabled()
            && WHSReservationHierarchyItemSkipValidateDeleteContext::skipValidation();

        if (!skipValidation
         && WHSReservationHierarchyItem::findByItem(this.ItemDataAreaId, this.ItemId))
        {
            ret = checkFailed("@WAX4737");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        EcoResStorageDimensionGroup         storageDimensionGroup;
        InventModelGroupItem                inventModelGroupItem;
        boolean                             ret;
        WHSReservationHierarchyItem         reservationHierarchyItem;
        EcoResTrackingDimensionGroupItem    trackingDimensionGroupItem;

        ret = super();

        if (ret)
        {
            storageDimensionGroup = EcoResStorageDimensionGroup::find(this.StorageDimensionGroup);
            InventTable inventTable = InventTable::find(this.ItemId);

            if (storageDimensionGroup.IsWarehouseWHSEnabled)
            {
                if (!WHSCatchWeightConfigurationKeyManager::instance().isEnabled()  
                    && inventTable.productHasCWSetup())
                {
                    ret = checkFailed(strFmt("@WAX5500", storageDimensionGroup.Name));
                }  

                ret = ret && this.validateSerialWithWHSCatchWeightEnabledItem();
            }
            else 
            {
                if (inventTable.ProdFlushingPrincip == ProdFlushingPrincipItem::Picked)
                {
                    ret = checkFailed("@WAX:PickFlushPrincipValidation");
                }
            }

            if (ret)
            {
                if (storageDimensionGroup.IsWarehouseWHSEnabled)
                {
                    inventModelGroupItem = inventTable.inventModelGroupItem();

                    if (inventModelGroupItem.RecId
                        &&  inventModelGroupItem.ModelGroupId
                        &&  !inventModelGroupItem.modelGroup().isStocked())
                    {
                        ret = checkFailed("@WAX5667");
                    }

                    if (inventModelGroupItem.RecId
                        &&  inventModelGroupItem.ModelGroupId
                        &&  inventModelGroupItem.modelGroup().NegativePhysical
                        &&  WHSCatchWeightHelper::isCatchWeightProduct(inventTable.Product))
                    {
                        // If the item is catch weight enabled and physical negative inventory is enabled, its storage dimension group cannot be warehouse enabled.
                        ret = checkFailed("@WAX:Error_NegativeInventoryNotAllowedForWHSCWItems");
                    }
                }
                else if (!EcoResProductUnitConverter::isProductUnitConversionPerVariantEnabled()
                         && inventTable.isProductVariantUnitConversionEnabled())
                {
                    ret = checkFailed(strFmt("@SYP4861262", storageDimensionGroup.Name));
                }
            }

            if (ret)
            {
                reservationHierarchyItem = WHSReservationHierarchyItem::findByItem(this.ItemDataAreaId, this.ItemId);

                if (reservationHierarchyItem)
                {
                    trackingDimensionGroupItem = EcoResTrackingDimensionGroupItem::findByItem(this.ItemDataAreaId, this.ItemId);

                    ret = WHSInventTableReservationHierarchy::validatePhysicalDimMatchWithHierarchy(
                            reservationHierarchyItem.ReservationHierarchy,
                            InventDimGroupSetup::newDimensionGroups(0, storageDimensionGroup.RecId, trackingDimensionGroupItem.TrackingDimensionGroup),
                            WHSReservationHierarchyCache::construct());
                }
            }

            ret = ret && EcoResStorageDimensionGroupItem::validateStorageDimensionGroupIsSameAsInProduct(storageDimensionGroup, inventTable.Product);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSerialWithWHSCatchWeightEnabledItem</Name>
				<Source><![CDATA[
    private boolean validateSerialWithWHSCatchWeightEnabledItem()
    {
        boolean ret = true;

        if (WHSCatchWeightHelper::isCatchWeightProduct(InventTable::findInLegalEntity(this.ItemId, this.ItemDataAreaId).Product))
        {
            EcoResTrackingDimensionGroup trackingGroup = EcoResTrackingDimensionGroup::find(EcoResTrackingDimensionGroupItem::findByItem(this.ItemDataAreaId, this.ItemId).TrackingDimensionGroup);
            
            if (trackingGroup.IsSerialAtConsumptionEnabled)
            {
                ret = checkFailed(strFmt("@WAX:Error_TrackingGroupUsingConsumeSerialNotAllowedForWHSCatchWeightItem", this.ItemId));
            }

            if (trackingGroup.CaptureSerial == WHSWhenToCapture::Picking
                || trackingGroup.CaptureSerial == WHSWhenToCapture::Packing)
            {
                ret = checkFailed(strFmt("@WAX:Error_TrackingGroupWHSWhenToCaptureSerialValueNotAllowedForWHSCatchWeightItem", this.ItemId, trackingGroup.CaptureSerial));
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStorageDimensionGroupIsSameAsInProduct</Name>
				<Source><![CDATA[
    public static boolean validateStorageDimensionGroupIsSameAsInProduct(EcoResStorageDimensionGroup _storageDimensionGroup, EcoResProductRecId _productRecId)
    {
        boolean ret = true;

        EcoResStorageDimensionGroupProduct storageDimensionGroupProduct = EcoResStorageDimensionGroupProduct::findByProduct(_productRecId);

        if (storageDimensionGroupProduct.RecId)
        {
            if (storageDimensionGroupProduct.StorageDimensionGroup != _storageDimensionGroup.RecId)
            {
                ret = checkFailed("@SCM:ErrorStorageDimensionGroupDifferentInReleasedProduct");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a <c>EcoResStorageDimensionGroupItem</c> record that matches the specified item.
    /// </summary>
    /// <param name="_itemDataAreaId">
    ///    The <c>DataAreaId</c> field of the <c>InventTable</c> record for the item.
    /// </param>
    /// <param name="_itemId">
    ///    The <c>ItemId</c> field of the <c>InventTable</c> record for the item.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether the record is to be selected for update; optional.
    /// </param>
    /// <returns>
    ///    A <c>EcoResStorageDimensionGroupItem</c> record.
    /// </returns>
    static public EcoResStorageDimensionGroupItem findByItem
    (   DataAreaId          _itemDataAreaId,
        ItemId              _itemId,
        boolean             _forupdate  = false)
    {
        EcoResStorageDimensionGroupItem     ecoResStorageDimensionGroupItem;

        ecoResStorageDimensionGroupItem.selectForUpdate(_forupdate);

        if (_itemId)
        {
            select firstonly ecoResStorageDimensionGroupItem
                where ecoResStorageDimensionGroupItem.ItemDataAreaId    == _itemDataAreaId
                   && ecoResStorageDimensionGroupItem.ItemId            == _itemId;
        }

        return ecoResStorageDimensionGroupItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS312270</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<FormRef>EcoResProductDetailsExtended</FormRef>
	<Label>@SYS312247</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>StorageDimensionGroup</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>InventTableIdx</ClusteredIndex>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>InventTableIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StorageDimensionGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Item</Name>
			<Label>@SYS7407</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>StorageDimensionGroup</Name>
			<Label>@SYS312237</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StorageDimensionGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>StorageDimensionGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResStorageDimensionGroupRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>EcoResStorageDimensionGroupIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>StorageDimensionGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventTableIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemDataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemDataAreaIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StorageDimensionGroup</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResStorageDimensionGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResStorageDimensionGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResStorageDimensionGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResStorageDimensionGroup_EcoResStorageDimensionGroupItem</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StorageDimensionGroup</Name>
					<Field>StorageDimensionGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTable_EcoResStorageDimensionGroupItem</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemDataAreaId</Name>
					<Field>ItemDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>