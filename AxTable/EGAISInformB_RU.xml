<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EGAISInformB_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EGAISInformB_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>alcCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the related alcohol product code.
    /// </summary>
    /// <returns>
    /// The related alcohol product code.
    /// </returns>
    public display EGAISAlcCode_RU alcCode()
    {
        return this.alcoholProduction().AlcCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>alcoholProduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related alcohol product record.
    /// </summary>
    /// <returns>
    /// The related alcohol product record.
    /// </returns>
    public EGAISAlcoholProduction_RU alcoholProduction()
    {
        return EGAISAlcoholProduction_RU::findRecId(this.informA().AlcoholProduction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCanBeDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the Certificate B can be deleted.
    /// </summary>
    /// <param name="_silent">
    /// A Boolean value that indicates whether to display warning message when the certificate cannot be deleted.
    /// </param>
    /// <returns>
    /// true, if the Certificate B can be deleted; otherwise, false.
    /// </returns>
    public boolean checkCanBeDeleted(boolean _silent = false)
    {
        InventTrans         inventTrans;
        InventDim           inventDim;
        EGAISWaybillLine_RU waybillLine;

        boolean ret = true;

        if (this.RegId || this.RegIdNew)
        {
            ret = _silent ? false : checkFailed("@EGAIS:CertificateBIsRegisteredInEgaisAndCannotBeDeleted");
        }

        if (ret && this.InventBatchId)
        {
            select firstOnly RecId from inventTrans
            where inventTrans.ItemId        == this.alcoholProduction().ItemId
        exists join inventDim
            where inventDim.inventDimId     == inventTrans.inventDimId
                && inventDim.inventBatchId  == this.InventBatchId;

            if (inventTrans.RecId)
            {
                ret = _silent ? false : checkFailed("@EGAIS:CertificateBIsBeingUsedAndCannotBeDeleted");
            }
        }

        if (ret)
        {
            select firstOnly RecId from waybillLine
            where waybillLine.InformB       == this.RecId;

            if (waybillLine.RecId)
            {
                ret = _silent ? false : checkFailed("@EGAIS:CertificateBIsBeingUsedAndCannotBeDeleted");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>informA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related Certificate A record.
    /// </summary>
    /// <param name="_forUpdate">
    /// Indicates whether to select the Certificate A record for update or not.
    /// </param>
    /// <returns>
    /// Tthe related Certificate A record.
    /// </returns>
    public EGAISInformA_RU informA(boolean  _forUpdate = false)
    {
        return EGAISInformA_RU::findRecId(this.InformA, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInformA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes Certificate B from the parent Certificate A.
    /// </summary>
    public void initFromInformA()
    {
        if (!this.InformA)
        return;

        this.initItemFromAlcoholProduction();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInformB</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies EGAIS-related fields from the <paramref name="_informB"/> to the current record.
    /// </summary>
    /// <param name="_informB">
    /// <c>EGAISInformB_RU</c> table variable used to initialize the current record.
    /// </param>
    public void initFromInformB(EGAISInformB_RU     _informB)
    {
        this.Shipper            = _informB.Shipper;
        this.Consignee          = _informB.Consignee;
        this.WaybillNum         = _informB.WaybillNum;
        this.WaybillDate        = _informB.WaybillDate;
        this.Qty                = _informB.Qty;
        this.ShippingDate       = _informB.ShippingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWaybillJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes Certificate B record from the bill of lading journal.
    /// </summary>
    /// <param name="_waybillJour">
    /// The EGAIS bill of lading journal header.
    /// </param>
    public void initFromWaybillJour(EGAISWaybillJour_RU _waybillJour)
    {
        this.Shipper        = _waybillJour.Shipper;
        this.Consignee      = _waybillJour.Consignee;
        this.ShippingDate   = _waybillJour.ShippingDate;
        this.WaybillNum     = _waybillJour.WaybillNum;
        this.WaybillDate    = _waybillJour.WaybillDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWaybillNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes Certificate B record from the waybill number.
    /// </summary>
    public void initFromWaybillNum()
    {
        VendInvoiceJour vendInvoiceJour;

        if (this.Direction != EGAISDocumentDirection_RU::Incoming)
        return;

        if (!this.WaybillNum)
        return;

        select count(RecId) from vendInvoiceJour
        where vendInvoiceJour.InvoiceId == this.WaybillNum;
        if (vendInvoiceJour.RecId != 1)
        return;

        select firstOnly InvoiceDate, OrderAccount from vendInvoiceJour
        where vendInvoiceJour.InvoiceId == this.WaybillNum;

        this.WaybillDate    = vendInvoiceJour.InvoiceDate;
        this.Shipper        = EGAISClient_RU::findByParty(VendTable::find(vendInvoiceJour.OrderAccount).Party).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventBatchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the Batch number using the batch numbering group for the item.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// The EGAIS alcohol product for the current certificate B is not settled with an item.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Setup of batch number group for the item has not been specified.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Item numbering group does not exist.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Item numbering group setup does not contain a valid composition of the batch number.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Newly created inventory batch already exists for the item.
    /// </exception>
    public void initInventBatchId()
    {
        InventNumGroupId    numGroupId;
        InventNumGroup      inventNumGroup;
        InventBatchId       inventBatchId;
        InventBatch         inventBatch;

        this.initItemFromAlcoholProduction();
        if (!this.ItemId)
        {
            throw error(strFmt("@EGAIS:EgaisAlcoholProductIsNotSettledWithAnItem", this.alcoholProduction().AlcCode));
        }

        numGroupId = InventTable::find(this.ItemId).BatchNumGroupId;
        if (!numGroupId)
        {
            throw error(strFmt("@SYS68248", this.ItemId));
        }

        inventNumGroup = InventNumGroup::find(numGroupId);
        if (!inventNumGroup)
        {
            throw error(strFmt("@SYS3312", numGroupId));
        }

        ttsBegin;

        inventNumGroup.InclExpectedDate     = NoYes::No;
        inventNumGroup.InclInventTransId    = NoYes::No;
        inventNumGroup.InclReferenceId      = NoYes::No;
        inventNumGroup.InclNumber           = NoYes::Yes;

        inventBatchId = inventNumGroup.buildNumberParameters(dateNull(), '', '', extendedTypeNum(InventBatchId));

        if (!inventBatchId)
        {
            throw error(strFmt("@SYS54023", inventNumGroup.NumGroupId));
        }

        if (InventBatch::exist(this.ItemId, inventBatchId))
        {
            throw error(strFmt("@EGAIS:InventBatchForTheItemAlreadyExists", inventBatchId, this.ItemId));
        }

        inventBatch.InventBatchId   = inventBatchId;
        inventBatch.ItemId          = this.ItemId;
        inventBatch.insert();

        this.InventBatchId          = inventBatchId;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initItemFromAlcoholProduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes item ID from the alcohol product ID.
    /// </summary>
    /// <remarks>
    /// <c>ItemId</c> is not saved into the database.
    /// </remarks>
    public void initItemFromAlcoholProduction()
    {
        ItemId  itemId = this.alcoholProduction().ItemId;

        if (this.ItemId != itemId)
        {
            this.ItemId = itemId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupWaybillID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a lookup to select a vendor invoice number for the EGAIS BOL number.
    /// </summary>
    /// <param name="_formControl">
    /// The EGAIS BOL number control.
    /// </param>
    /// <param name="_filterStr">
    /// The filter string value.
    /// </param>
    public void lookupWaybillID(FormControl _formControl, str _filterStr)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    qbds;

        if (this.Direction != EGAISDocumentDirection_RU::Incoming)
        return;

        query   = new Query();
        qbds    = query.addDataSource(tableNum(VendInvoiceJour));
        qbds.addRange(fieldNum(VendInvoiceJour, InvoiceId)).value(_filterStr);

        sysTableLookup  = SysTableLookup::newParameters(tableNum(VendInvoiceJour), _formControl);
        sysTableLookup.parmQuery(query);
        sysTableLookup.addLookupfield(fieldNum(VendInvoiceJour, InvoiceId));
        sysTableLookup.addLookupfield(fieldNum(VendInvoiceJour, InvoiceDate));
        sysTableLookup.addLookupfield(fieldNum(VendInvoiceJour, OrderAccount));
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(EGAISInformB_RU, InformA) :
                this.initItemFromAlcoholProduction();
                break;

            case fieldNum(EGAISInformB_RU, WaybillNum) :
                this.initFromWaybillNum();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    public void postLoad()
    {
        if (this.isFormDataSource())
        {
            this.initItemFromAlcoholProduction();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        ret = this.checkCanBeDeleted() && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the Certificate B table.
    /// </summary>
    /// <param name="_regId">
    /// The Certificate B registration ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The record in the Certificate B table.
    /// </returns>
    public static EGAISInformB_RU find(
        EGAISInformBRegId_RU _regId,
        boolean _forUpdate = false)
    {
        EGAISInformB_RU  informB;

        if (_regId)
        {
            if (_forUpdate)
            {
                informB.selectForUpdate(_forUpdate);
            }

            select firstonly informB
            index hint RegIdx
            where informB.RegId == _regId;
        }

        return informB;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByItemBatchDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the Certificate B table.
    /// </summary>
    /// <param name="_itemId">
    /// Item ID.
    /// </param>
    /// /// <param name="_inventBatchId">
    /// The inventory batch number.
    /// </param>
    /// <param name="_direction">
    /// The document direction.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The record in the Certificate B table.
    /// </returns>
    public static EGAISInformB_RU findByItemBatchDirection(
    ItemId                      _itemId,
    InventBatchId               _inventBatchId,
    EGAISDocumentDirection_RU   _direction,
    boolean                     _forUpdate = false)
    {
        EGAISInformB_RU     informB;
        InventBatch         inventBatch;

        if (_itemId && _inventBatchId)
        {
            if (_forUpdate)
            {
                informB.selectForUpdate(_forUpdate);
            }

            select firstonly informB
            index hint BatchDirectionIdx
            where informB.InventBatchId == _inventBatchId
                && informB.Direction    == _direction
        exists join inventBatch
            where inventBatch.inventBatchId == informB.InventBatchId
               && inventBatch.itemId        == _itemId;
        }

        return informB;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRegIdNew</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the Certificate B table.
    /// </summary>
    /// <param name="_regIdNew">
    /// The Certificate B registration ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The record in the Certificate B table.
    /// </returns>
    public static EGAISInformB_RU findByRegIdNew(
        EGAISInformBRegId_RU _regIdNew,
        boolean _forUpdate = false)
    {
        EGAISInformB_RU  informB;

        if (_regIdNew)
        {
            if (_forUpdate)
            {
                informB.selectForUpdate(_forUpdate);
            }

            select firstonly informB
            index hint RegIdNewIdx
            where informB.RegIdNew == _regIdNew;
        }

        return informB;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the Certificate B table.
    /// </summary>
    /// <param name="_recId">
    /// The Certificate B table record ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The record in the Certificate B table.
    /// </returns>
    public static EGAISInformB_RU findRecId(
        RecId _recId,
        boolean _forUpdate = false)
    {
        EGAISInformB_RU     informB;

        if (_recId)
        {
            informB.selectForUpdate(_forUpdate);

            select firstonly informB
            where informB.RecId == _recId;
        }

        return informB;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@EGAIS:TheEgaisinformb_ruTableContainsTheInformationAbout</DeveloperDocumentation>
	<FormRef>EGAISInformB_RU</FormRef>
	<Label>@EGAIS:CertificatesB</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Main</TableGroup>
	<TitleField1>RegId</TitleField1>
	<TitleField2>InventBatchId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>EGAIS</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RegId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RegIdNew</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InformA</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventBatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RegIdNew</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Counteragents</Name>
			<Label>@GLS103507</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Shipper</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Consignee</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Details</Name>
			<Label>@SYS318405</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Direction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RegId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RegIdNew</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InformA</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShippingDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>alcCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaybillNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaybillDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventBatch</Name>
			<Label>@PRO103</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventBatchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS34991</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RegId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RegIdNew</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventBatchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Consignee</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS100752</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Direction</Name>
			<AllowEdit>No</AllowEdit>
			<EnumType>EGAISDocumentDirection_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InformA</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@EGAIS:CertificateA</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventBatchId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>InventBatchId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RegId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>EGAISInformBRegId_RU</ExtendedDataType>
			<HelpText>@EGAIS:EgaisRegistrationNumberOfTheParentCertificateB</HelpText>
			<Label>@EGAIS:ParentRegistrationId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RegIdNew</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>EGAISInformBRegId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Shipper</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS73079</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ShippingDate</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@GLS112581</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>WaybillDate</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>EGAISWaybillDate_RU</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WaybillNum</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>EGAISWaybillNum_RU</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RegIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RegId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BatchDirectionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventBatchId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Direction</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RegIdNewIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RegIdNew</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Consignee</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>EGAISClient_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Consignee</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Consignee</Name>
					<Field>Consignee</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EGAISInformA_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>EGAISInformA_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InformA</Name>
					<Field>InformA</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventBatch</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventBatch</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventBatchId</Name>
					<Field>InventBatchId</Field>
					<RelatedField>inventBatchId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>itemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Shipper</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>EGAISClient_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Shipper</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Shipper</Name>
					<Field>Shipper</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>