<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatExternalCatalogProperties</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CatExternalCatalogProperties extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether deleting a record is enabled.
    /// </summary>
    /// <returns>
    /// true if deleting is enabled; otherwise, false.
    /// </returns>
    public boolean canDelete()
    {
        // OK to delete unless all below are true:
        // - is an existing record
        // - IsFixed=Yes
        return ( ! (this.RecId && (this.IsFixed == NoYes::Yes)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>editCatPropertyName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>propertyName</c> value.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether to set the <c>propertyName</c> value.
    /// </param>
    /// <param name="_propertyName">
    ///    An instance of the <c>CatPropertyName</c> data type.
    /// </param>
    /// <returns>
    ///    An instance of the <c>CatPropertyName</c> data type.
    /// </returns>
    edit CatPropertyName editCatPropertyName(boolean _set, CatPropertyName _propertyName)
    {
        return Global::editEncryptedStringField(this, _propertyName, fieldNum(CatExternalCatalogProperties, Value), _set);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCatPropertyExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a <c>CatExternalCatalogProperties</c> record exists with the specific unique key combination.
    /// </summary>
    /// <param  name='_catExternalCatalog'>
    /// An instance of the <c>RefRecId</c> data type.
    /// </param>
    /// <param  name='_name'>
    /// An instance of the <c>CatPropertyName</c> data type.
    /// </param>
    /// <returns>
    /// <c>true</c> if the record was found; otherwise, <c>false</c>.
    /// </returns>
    public static boolean checkCatPropertyExist(RefRecId _catExternalCatalog, CatPropertyName _name)
    {
        if (!CatExternalCatalogProperties::exist(_catExternalCatalog, _name))
        {
            return checkFailed(strfmt(CatExternalCatalogProperties::txtNotExist(), _catExternalCatalog, _name));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a <c>CatExternalCatalogProperties</c> record exists with the specific unique key combination.
    /// </summary>
    /// <param  name='_catExternalCatalog'>
    /// An instance of the <c>RefRecId</c> data type.
    /// </param>
    /// <param  name='_name'>
    /// An instance of the <c>CatPropertyName</c> data type.
    /// </param>
    /// <returns>
    /// <c>true</c> if the record was found; otherwise, <c>false</c>.
    /// </returns>
    public static boolean exist(RefRecId _catExternalCatalog, CatPropertyName _name)
    {
        return (CatExternalCatalogProperties::find(_catExternalCatalog, _name).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>CatExternalCatalogProperties</c> record with the specific unique key combination.
    /// </summary>
    /// <param  name='_catExternalCatalog'>
    /// An instance of the <c>RefRecId</c> data type.
    /// </param>
    /// <param  name='_name'>
    /// An instance of the <c>CatPropertyName</c> data type.
    /// </param>
    /// <param  name='_forUpdate'>
    /// An instance of the <c>Boolean</c> data type.
    /// </param>
    /// <returns>
    /// An instance of the <c>CatExternalCatalogProperties</c> data type.
    /// </returns>
    public static CatExternalCatalogProperties find(RefRecId _catExternalCatalog, CatPropertyName _name, boolean _forUpdate = false)
    {
        CatExternalCatalogProperties catExternalCatalogProperties;
        ;

        if (_catExternalCatalog && _name)
        {
            if (_forUpdate)
            {
                catExternalCatalogProperties.selectForUpdate(_forUpdate);
            }

            select firstonly catExternalCatalogProperties
            index hint CatNameIdx
            where catExternalCatalogProperties.ExternalCatalog == _catExternalCatalog
               && catExternalCatalogProperties.Name == _name;
        }
        return catExternalCatalogProperties;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static str txtNotExist()
    {
        return "@SYS84736";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.Name = "@SYS318167";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        // we're checking for CHANGE to Name, which cannot happen if the record isn't in db yet
        if(ret && this.RecId)
        {
            if(this.IsFixed == NoYes::Yes)
            {
                // for Mandatory session properties, key/name cannot be changed (Value can).
                if(this.orig().Name != this.Name)
                {
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts catalog order property to <c>CatExternalCatalogProperties</c>.
    /// </summary>
    [Wrappable(false)]
    public void insert()
    {
        Global::handleEncryptedTablePreInsert(this);
        super();
        Global::handleEncryptedTablePostInsert(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates catalog order property to <c>CatExternalCatalogProperties</c>.
    /// </summary>
    [Wrappable(false)]
    public void update()
    {
        Global::handleEncryptedTablePreUpdate(this);
        super();
        Global::handleEncryptedTablePostUpdate(this);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ProcCatalog</ConfigurationKey>
	<Label>@SYS131260</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Main</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>Value</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>CatNameIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>CatNameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExternalCatalog</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsFixed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@SYS41070</HelpText>
			<Label>@SYS318173</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CatPropertyName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Value</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CatPropertyValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExternalCatalog</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CatNameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ExternalCatalog</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>ExternalCatalog</Name>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CatExternalCatalog</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExternalCatalog</Name>
					<Field>ExternalCatalog</Field>
					<RelatedField>RecID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>