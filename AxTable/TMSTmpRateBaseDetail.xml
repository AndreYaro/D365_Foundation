<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSTmpRateBaseDetail</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TMSTmpRateBaseDetail extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the label for a rate dimension field.
    /// </summary>
    /// <param name = "_rateCode">The rate code.</param>
    /// <param name = "sequence">The sequence number of the dimension.</param>
    /// <returns>The label of the field.</returns>
    public static str getLabel(TMSRateBaseCode _rateCode, int sequence)
    {
        TMSTmpRateBaseDetail rateDetail;
        container labels = rateDetail.getLabels(_rateCode);
        return conpeek(labels, sequence);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLabels</Name>
				<Source><![CDATA[
    public container getLabels(TMSRateBaseCode _rateCode)
    {
        TMSRateBase             rateBase;
        TMSRateBaseType         rateBaseType;
        TMSRateBaseTypeField    rateBaseTypeField;
        TMSBreakMaster          breakMaster;
        container               ret;
        container               details;
        int                     counter;
        int                     detailCount;
        TMSRateMaster           rateMaster;

        rateBase            = TMSRateBase::find(_rateCode);
        breakMaster         = TMSBreakMaster::find(rateBase.BreakMasterCode);

        while select RateBaseTypeCode from rateBaseType
            join rateBaseTypeField
            join Name from rateMaster
            order by rateBaseTypeField.Sequence
            where rateBaseType.RateBaseTypeCode   == rateBaseTypeField.RateBaseTypeCode   &&
                  rateBaseType.RateBaseTypeCode   == rateMaster.RateBaseTypeCode          &&
                  rateMaster.RateMasterCode       == rateBase.RateMasterCode              &&
                  rateBaseTypeField.FieldType     == TMSFieldType::RateBase
        {
            ret += rateBaseTypeField.Name;
        }

        if (conFind(ret, '') != 0)
        {
            ret = conDel(ret, conFind(ret, '') - 1, 1);
        }
        else
        {
            ret = conDel(ret, conLen(ret), 1);
        }

        details = TMSBreakDetail::getOrderedCon(breakMaster.BreakMasterCode);
        detailCount = conLen(details);

        for (counter = 1; counter <= detailCount; counter += 1)
        {
            ret += strFmt('%1%2 %3', breakMaster.Comparison, conPeek(details, counter), breakMaster.BreakUM);
        }

        while (conFind(ret, '') != 0)
        {
            ret = conDel(ret, conFind(ret, ''), 1);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRates</Name>
				<Source><![CDATA[
    public container getRates(TMSRateBaseDetail _rateBaseDetail, int _fields)
    {
        TMSBreakMaster      breakMaster = TMSBreakMaster::find(TMSRateBase::find(_rateBaseDetail.RateBaseCode).BreakMasterCode);
        container           ret;
        container           details;
        int                 counter;
        int                 detailCount;

        details = TMSBreakDetail::getOrderedCon(breakMaster.BreakMasterCode);
        detailCount = conLen(details);

        for (counter = 1; counter <= detailCount; ++counter)
        {
            ret += TMSRateBaseDetail::findRateByValue(_rateBaseDetail, conPeek(details, counter), _fields);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRateBaseDetails</Name>
				<Source><![CDATA[
    public void initFromRateBaseDetails(TMSRateBaseDetail _detail)
    {
        container   rateBaseDetailFieldTypes    = _detail.tmsRateBase().getRateBaseDetailFieldTypes();
        int         fieldCount                  = conLen(rateBaseDetailFieldTypes);

        TMSRateBaseDetail rateBaseDetail;

        while select rateBaseDetail
            where rateBaseDetail.RateBaseCode       == _detail.RateBaseCode
                && rateBaseDetail.Dimension1        == _detail.Dimension1
                && (rateBaseDetail.Dimension2       == _detail.Dimension2
                    || rateBaseDetail.Dimension2    == '')
                && (rateBaseDetail.Dimension3       == _detail.Dimension3
                    || rateBaseDetail.Dimension3    == '')
                && (rateBaseDetail.Dimension4       == _detail.Dimension4
                    || rateBaseDetail.Dimension4    == '')
                && (rateBaseDetail.Dimension5       == _detail.Dimension5
                    || rateBaseDetail.Dimension5    == '')
                && (rateBaseDetail.Dimension6       == _detail.Dimension6
                    || rateBaseDetail.Dimension6    == '')
        {
            container rateBaseDetailFields;

            // Get dimensions for the rate base metadata. The last value is not used as it is used as a value for the rate break details.
            for (int counter = 1; counter < fieldCount; counter++)
            {
                rateBaseDetailFields += rateBaseDetail.(TMSRateBase::dynamicFieldId(tableNum(TMSRateBaseDetail), literalStr(Dimension), counter));
            }

            container rateBreakDetails = this.getRates(rateBaseDetail, fieldCount);

            this.MinimumCharge              = rateBaseDetail.MinimumCharge;
            this.MaximumCharge              = rateBaseDetail.MaximumCharge;
            this.EffectiveUTCDateTimeFrom   = rateBaseDetail.EffectiveUTCDateTimeFrom;
            this.EffectiveUTCDateTimeTo     = rateBaseDetail.EffectiveUTCDateTimeTo;

            this.insertFromRateBaseDetailFieldsAndRateBreakDetails(rateBaseDetailFields, rateBaseDetailFieldTypes, rateBreakDetails);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCultureForUserInteractions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the culture used for all interactions with the user.
    /// </summary>
    /// <returns>The culture used for all interactions with the user.</returns>
    public static System.Globalization.CultureInfo getCultureForUserInteractions()
    {
        return System.Globalization.CultureInfo::CurrentUICulture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryParseDecimalStr</Name>
				<Source><![CDATA[
    static private container tryParseDecimalStr(str _input, System.Globalization.NumberFormatInfo _numFormatInfo)
    {
        System.Decimal decimal;
        str ret = _input;
        if (_input && System.Decimal::TryParse(_input, System.Globalization.NumberStyles::Number, TMSTmpRateBaseDetail::getCultureForUserInteractions(), byref decimal))
        {
            ret = decimal.ToString(_numFormatInfo);
        }
        return [decimal, ret];
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromRateBaseDetailFieldsAndRateBreakDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts <c>TMSTmpRateBaseDetail</c> records based on the rate base detail fields and rate break details.
    /// Rate base detail fields types are defined in the rate base type metadata.
    /// Rate breaks are defined in the rate master.
    /// </summary>
    /// <param name = "_rateBaseDetailFields">Container with rate base detail fields.</param>
    /// <param name = "_rateBaseDetailFieldTypes">Container with rate base detail field types.</param>
    /// <param name = "_rateBreakDetails">Container with rate break details (just value).</param>
    /// <remarks>
    /// Expected container structure for the parameters is as follows:
    /// For _rateBaseDetailFields it is [rateBaseValue1, rateBaseValue2].
    /// For _rateBaseDetailFieldTypes it is [rateBaseType1, rateBaseType2].
    /// For _rateBreakDetails it is [rateBreakValue1, rateBreakValue2]. The type must always be real.
    /// </remarks>
    private void insertFromRateBaseDetailFieldsAndRateBreakDetails(
        container _rateBaseDetailFields,
        container _rateBaseDetailFieldTypes,
        container _rateBreakDetails)
    {
        /*
            Container length for _rateBaseDetailFieldTypes should not be needed, as _rateBaseDetailFieldTypes should have one field more than _rateBaseDetailFields.
            The last value is not used as it is used as a value for the rate break details.
        */
        int rateBaseDetailFieldsCount   = conLen(_rateBaseDetailFields);
        int rateBreakDetailsCount       = conLen(_rateBreakDetails);

        System.Globalization.NumberFormatInfo numberFormatInfo = TMSTmpRateBaseDetail::getCultureForUserInteractions().NumberFormat;

        // These values are for the rate base metadata.
        for (int counter = 1; counter <= rateBaseDetailFieldsCount; counter++)
        {
            FieldId fieldId  = TMSRateBase::dynamicFieldId(tableNum(TMSTmpRateBaseDetail), literalStr(Dimension), counter, true);

            TMSDataType rateBaseDetailFieldType = conPeek(_rateBaseDetailFieldTypes, counter);

            if (rateBaseDetailFieldType == TMSDataType::Integer
                || rateBaseDetailFieldType == TMSDataType::Real)
            {
                str fieldText = conPeek(_rateBaseDetailFields, counter);
                System.Decimal rateBaseDetailFieldValue;
                [rateBaseDetailFieldValue, this.(fieldId)] = TMSTmpRateBaseDetail::tryParseDecimalStr(fieldText, numberFormatInfo);
            }
            else
            {
                this.(fieldId) = conPeek(_rateBaseDetailFields, counter);
            }

            if (counter == 1)
            {
                System.Decimal numDim = this.(fieldId);

                this.NumDim = numDim;
            }

        }

        // These value are for the rate base detail rate.
        for (int counter = 1; counter <= rateBreakDetailsCount; counter++)
        {
            FieldId fieldId  = TMSRateBase::dynamicFieldId(tableNum(TMSTmpRateBaseDetail), literalStr(Dimension), counter + rateBaseDetailFieldsCount, true);

            System.Decimal rateBreakDetailFieldValue = conPeek(_rateBreakDetails, counter);

            this.(fieldId) = rateBreakDetailFieldValue.ToString(numberFormatInfo);
        }

        if (rateBreakDetailsCount != 0)
        {
            this.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRateBaseDetails</Name>
				<Source><![CDATA[
    public static void deleteRateBaseDetails(TMSRateBaseCode _rateBaseCode, TMSTmpRateBaseDetail _detail)
    {
        TMSRateBase         rateBase;
        TMSRateBaseDetail   rateBaseDetail;
        TMSRateBaseDetail   tmpRateBaseDetail;
        int                 rateFields;
        int                 counter;
        str                 fId = literalStr(Dimension);
        FieldId             tmpId;
        FieldId             rateId;
        TMSBreakDetail      breakDetail;
        System.Globalization.NumberFormatInfo   numFormatInfo = TMSTmpRateBaseDetail::getCultureForUserInteractions().NumberFormat;

        rateBase        = TMSRateBase::find(_rateBaseCode);
        rateFields      = rateBase.findNumberOfRateBaseDetailFields();

        rateBaseDetail.RateBaseCode  = _rateBaseCode;

        // write dim values
        for (counter = 1; counter < rateFields; ++counter)
        {
            rateId  = TMSRateBase::dynamicFieldId(tableNum(TMSRateBaseDetail), fId, counter);
            tmpId   = TMSRateBase::dynamicFieldId(tableNum(TMSTmpRateBaseDetail), fId, counter, true);
            rateBaseDetail.(rateId) = _detail.(tmpId);
        }

        rateId  = TMSRateBase::dynamicFieldId(tableNum(TMSRateBaseDetail), fId, rateFields);

        rateBaseDetail.EffectiveUTCDateTimeFrom = _detail.EffectiveUTCDateTimeFrom;
        rateBaseDetail.EffectiveUTCDateTimeTo   = _detail.EffectiveUTCDateTimeTo;

        ttsbegin;

        while select Value from breakDetail
            where breakDetail.BreakMasterCode == rateBase.BreakMasterCode
        {
            if (rateId != 0)
            {
                System.Decimal decimal;
                [decimal, rateBaseDetail.(rateId)] = TMSTmpRateBaseDetail::tryParseDecimalStr(breakDetail.Value, numFormatInfo);
            }
            tmpRateBaseDetail = TMSRateBaseDetail::findByDimensions(_rateBaseCode,
                                                                    rateBaseDetail.Dimension1,
                                                                    rateBaseDetail.Dimension2,
                                                                    rateBaseDetail.Dimension3,
                                                                    rateBaseDetail.Dimension4,
                                                                    rateBaseDetail.Dimension5,
                                                                    rateBaseDetail.Dimension6,
                                                                    rateBaseDetail.EffectiveUTCDateTimeFrom,
                                                                    rateBaseDetail.EffectiveUTCDateTimeTo,
                                                                    true);
            if (tmpRateBaseDetail.RecId != 0)
            {
                tmpRateBaseDetail.delete();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLookupType</Name>
				<Source><![CDATA[
    public static TMSLookupType findLookupType(TMSRateBaseTypeCode _rateBaseTypeCode, TMSFieldType _fieldType, int _pos)
    {
        TMSRateBaseTypeField    rateBaseTypeField;

        select firstonly LookupType from rateBaseTypeField
            where rateBaseTypeField.RateBaseTypeCode == _rateBaseTypeCode    &&
                  rateBaseTypeField.FieldType        == _fieldType           &&
                  rateBaseTypeField.Sequence         == _pos;

        return rateBaseTypeField.LookupType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRateLookupType</Name>
				<Source><![CDATA[
    public static TMSLookupType findRateLookupType(TMSRateBaseTypeCode _rateBaseTypeCode, TMSFieldType _fieldType, int _pos)
    {
        TMSRateBaseTypeField    rateBaseTypeField;

        select LookupType from rateBaseTypeField
            where rateBaseTypeField.RateBaseTypeCode == _rateBaseTypeCode    &&
                  rateBaseTypeField.FieldType        == _fieldType           &&
                  rateBaseTypeField.Sequence         == _pos;

        return rateBaseTypeField.LookupType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@TRX1973</DeveloperDocumentation>
	<Label>@TRX143</Label>
	<TableGroup>Main</TableGroup>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex></ClusteredIndex>
	<PrimaryIndex></PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Dimension01</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension02</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension03</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension04</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension05</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension06</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension07</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension08</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension09</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension10</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension11</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension12</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinimumCharge</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaximumCharge</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension13</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension14</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension15</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension16</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension17</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension18</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension19</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension20</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumDim</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffectiveUTCDateTimeTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffectiveUTCDateTimeFrom</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Dimension01</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension02</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension03</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension04</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension05</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension06</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension07</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension08</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension09</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension10</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension11</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension12</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinimumCharge</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaximumCharge</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension13</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension14</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension15</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension16</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension17</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension18</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension19</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension20</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumDim</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffectiveUTCDateTimeTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffectiveUTCDateTimeFrom</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Dimension01</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TMSDimension</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Dimension02</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TMSDimension</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Dimension03</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TMSDimension</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Dimension04</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TMSDimension</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Dimension05</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TMSDimension</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Dimension06</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TMSDimension</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Dimension07</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TMSDimension</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Dimension08</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TMSDimension</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Dimension09</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TMSDimension</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Dimension10</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TMSDimension</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Dimension11</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TMSDimension</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Dimension12</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TMSDimension</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Dimension13</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TMSDimension</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Dimension14</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TMSDimension</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Dimension15</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TMSDimension</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Dimension16</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TMSDimension</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Dimension17</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TMSDimension</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Dimension18</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TMSDimension</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Dimension19</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TMSDimension</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Dimension20</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TMSDimension</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>EffectiveUTCDateTimeFrom</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TMSEffectiveUTCDateTimeFrom</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>EffectiveUTCDateTimeTo</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TMSEffectiveUTCDateTimeTo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaximumCharge</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TMSMaximumCharge</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MinimumCharge</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TMSMinimumCharge</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NumDim</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TMSNumDim</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DimensionsIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Dimension01</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Dimension02</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Dimension03</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Dimension04</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Dimension05</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Dimension06</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Dimension07</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Dimension08</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Dimension09</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Dimension10</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Dimension11</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Dimension12</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>NumDim01</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>NumDim</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Dimension01</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>