<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCashDeclaration</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailCashDeclaration extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateTotalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of amount in the <c>RetailCashDeclaration</c> table excluding the selected record and
    /// updates the <c>TotalAmount</c> field.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    boolean calculateTotalAmount()
    {
        RetailCashDeclaration  cashDeclaration,cashDeclaration2;

        select sum(TotalAmount) from cashDeclaration
            where cashDeclaration.StatementId == this.StatementId
            && cashDeclaration.CurrencyCode == this.CurrencyCode
            && cashDeclaration.LineNum == this.LineNum
            && cashDeclaration.Type != RetailCoinNoteTotalBase::Total
            && cashDeclaration.RecId != this.RecId;

        select forupdate cashDeclaration2
            where cashDeclaration2.StatementId == this.StatementId
            && cashDeclaration2.CurrencyCode == this.CurrencyCode
            && cashDeclaration2.Type == RetailCoinNoteTotalBase::Total
            && cashDeclaration2.AmountCur == 0
            && cashDeclaration2.LineNum == this.LineNum
            && cashDeclaration2.TotalLine == true;

        if (cashDeclaration2)
        {
            cashDeclaration2.TotalAmount = cashDeclaration.TotalAmount + this.TotalAmount;
            cashDeclaration2.update();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in <c>RetailCashDeclaration</c> table.
    /// </summary>
    /// <remarks>
    /// RetailCashDeclaration.calculateTotalAmount method gets the sum of amount in the table <c>RetailCashDeclaration</c> excluding the selected record and
    /// updates the field <c>TotalAmount</c>.
    /// </remarks>
    public void insert()
    {
        ttsbegin;

        super();

        this.calculateTotalAmount();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the record from the <c>RetailCashDeclaration</c> table, and inserts a record into the
    /// <c>RetailCashDeclaration</c> table
    /// </summary>
    /// <param name="_statementLine">
    /// The buffer for the <c>RetailStatementLine</c> table.
    /// </param>
    void insertData(RetailStatementLine _statementLine)
    {
        RetailCashDeclaration  cashDeclaration,cashDeclaration2;
        RetailStoreCashDeclarationTable    cashDeclarationSetup;
        Currency                        currency;

        if (_statementLine.Currency)
            currency = Currency::find(_statementLine.Currency);

        delete_from cashDeclaration2
        where cashDeclaration2.CurrencyCode != _statementLine.Currency
        &&  cashDeclaration2.StatementId == _statementLine.StatementId;
    //
        while select cashDeclarationSetup
            where cashDeclarationSetup.Currency == _statementLine.Currency
            &&    cashDeclarationSetup.StoreId == _statementLine.StoreId
        {
            cashDeclaration = RetailCashDeclaration::find(_statementLine.StatementId, _statementLine.Currency, this.type2type(cashDeclarationSetup.Type), cashDeclarationSetup.Amount, _statementLine.LineNum, false);

            if (!cashDeclaration)
            {
                cashDeclaration.initValue();
                cashDeclaration.StatementId = _statementLine.StatementId;
                cashDeclaration.CurrencyCode = _statementLine.Currency;
                if (cashDeclarationSetup.Type == RetailCoinNote::Coin)
                    cashDeclaration.Type = RetailCoinNoteTotalBase::Coin;
                else if (cashDeclarationSetup.Type == RetailCoinNote::Note)
                    cashDeclaration.Type = RetailCoinNoteTotalBase::Note;
                cashDeclaration.LineNum = _statementLine.LineNum;
                cashDeclaration.AmountCur = cashDeclarationSetup.Amount;
                cashDeclaration.insert();
            }
        }

        cashDeclaration = RetailCashDeclaration::find(_statementLine.StatementId, _statementLine.Currency, RetailCoinNoteTotalBase::Total, cashDeclarationSetup.Amount, _statementLine.LineNum, true);

        if (!cashDeclaration)
        {
            cashDeclaration.initValue();
            cashDeclaration.StatementId = _statementLine.StatementId;
            cashDeclaration.CurrencyCode = _statementLine.Currency;
            cashDeclaration.Type = RetailCoinNoteTotalBase::Total;
            cashDeclaration.LineNum = _statementLine.LineNum;
            cashDeclaration.AmountCur = 0;
            cashDeclaration.TotalLine = NoYes::Yes;
            cashDeclaration.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>type2type</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the enumeration <c>RetailCoinNoteTotalBase</c> value for the <c>RetailCoinNote</c> enumeration
    /// type.
    /// </summary>
    /// <param name="_type">
    /// The <c>RetailCoinNote</c> enumeration type.
    /// </param>
    /// <returns>
    /// The  <c>RetailCoinNoteTotalBase</c> enumeration value for the <c>RetailCoinNote</c> enumeration
    /// type.
    /// </returns>
    RetailCoinNoteTotalBase type2type(RetailCoinNote _type)
    {
        RetailCoinNoteTotalBase ret;

        switch (_type)
        {
            case RetailCoinNote::Coin  :   ret = RetailCoinNoteTotalBase::Coin;
                                        break;
            case RetailCoinNote::Note  :   ret = RetailCoinNoteTotalBase::Note;
                                        break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the field <c>Qty</c> of <c>RetailCashDeclaration</c> table.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    /// The field ID of the field to validate.
    /// </param>
    /// <returns>
    /// true if the field is valid; else false.
    /// </returns>
    /// <remarks>
    /// RetailCashDeclaration.validateQty method updates the field RetailCashDeclaration.TotalAmount with RetailCashDeclaration.AmountCur x RetailCashDeclaration.qty.
    /// Method calls RetailCashDeclaration.calculateTotalAmount and gets the sum of amount in the table <c>RetailCashDeclaration</c> excluding the selected record and updates
    /// the field <c>TotalAmount</c>, if the record exists in the <c>RetailCashDeclaration</c> table for the conditions applied.
    /// </remarks>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (fieldExt2Id(_fieldIdToCheck) == fieldNum(RetailCashDeclaration, Qty))
        {
            ttsbegin;
            this.validateQty();
            ttscommit;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method updates the field RetailCashDeclaration.TotalAmount with RetailCashDeclaration.AmountCur x RetailCashDeclaration.qty.
    /// </summary>
    /// <remarks>
    /// Method calls RetailCashDeclaration.calculateTotalAmount and gets the sum of amount in the table <c>RetailCashDeclaration</c> excluding the selected
    /// record and updates the field <c>TotalAmount</c>, if the record exists in the <c>RetailCashDeclaration</c> table for the conditions applied.
    /// </remarks>
    void validateQty()
    {
        this.TotalAmount = this.AmountCur * this.Qty;

        if (this)
        {
            this.calculateTotalAmount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailCashDeclaration</c> table by using the specified
    /// parameter values.
    /// </summary>
    /// <param name="_statementId">
    /// The statement number of the cash declaration record to find.
    /// </param>
    /// <param name="_currencyCode">
    /// The currency of the cash declaration record to find.
    /// </param>
    /// <param name="_type">
    /// The type of the cash declaration record to find.
    /// </param>
    /// <param name="_amountCur">
    /// The amount in transaction currency of the cash declaration record to find.
    /// </param>
    /// <param name="_lineNum">
    /// The line number of the cash declaration record to find.
    /// </param>
    /// <param name="_totalLine">
    /// The total line of the cash declaration record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailCashDeclaration</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailCashDeclaration find(RetailStatementId _statementId,
                                          CurrencyCode _currencyCode,
                                          RetailCoinNoteTotal _type,
                                          AmountCur _amountCur,
                                          LineNum _lineNum,
                                          RetailTotalLine _totalLine,
                                          boolean _forUpdate = false)
    {
        RetailCashDeclaration cashDeclaration;

        cashDeclaration.selectForUpdate(_forUpdate);

        if (_statementId && _currencyCode && _lineNum)
        {
            select firstonly cashDeclaration
                index hint primaryIdx
                where cashDeclaration.StatementId == _statementId
                   && cashDeclaration.CurrencyCode == _currencyCode
                   && cashDeclaration.Type == _type
                   && cashDeclaration.AmountCur == _amountCur
                   && cashDeclaration.LineNum == _lineNum
                   && cashDeclaration.TotalLine == _totalLine;
        }

        return cashDeclaration;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET4160441</DeveloperDocumentation>
	<FormRef>RetailCashDeclaration</FormRef>
	<Label>@RET3047</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>statementId</TitleField1>
	<TitleField2>type</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>primaryIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>TransactionsAndOrders</Modules>
	<PrimaryIndex>primaryIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>statementId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>lineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>totalLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>totalAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>administration</Name>
			<Label>@RET3049</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>totalLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>amounts</Name>
			<Label>@RET3050</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>totalAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>identification</Name>
			<Label>@RET3040</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>statementId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>lineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>header</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>type</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>lineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Label>@RET3048</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>statementId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStatementId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>totalAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTotalAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>totalLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTotalLine</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>type</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCoinNoteTotal</ExtendedDataType>
			<EnumType>RetailCoinNoteTotalBase</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>primaryIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>statementId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CurrencyCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>type</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AmountCur</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>lineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>totalLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailStatementTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailStatementTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>statementId</Name>
					<SourceEDT>RetailStatementId</SourceEDT>
					<Field>statementId</Field>
					<RelatedField>statementId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>statementIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailStatementTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailStatementTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<Field>CurrencyCode</Field>
					<RelatedField>currency</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>lineNum</Name>
					<Field>lineNum</Field>
					<RelatedField>lineNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>statementId</Name>
					<Field>statementId</Field>
					<RelatedField>statementId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>