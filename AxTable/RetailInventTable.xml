<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailInventTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailInventTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultBarcode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the bar code for the given item.
    /// </summary>
    /// <param name="_itemId">
    /// The ID number for the item.
    /// </param>
    /// <returns>
    /// The bar code number of the item.
    /// </returns>
    ItemBarCode defaultBarcode(ItemId   _itemId = this.ItemId)
    {
        if (InventItemBarcode::findShowForItem(_itemId))
            return InventItemBarcode::findShowForItem(_itemId).ItemBarCode;
        else
            return InventItemBarcode::findPurchBarcode(_itemId).ItemBarCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getComparisonPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a real value measured in one unit of measure to the real value measured in another unit of measure.
    /// </summary>
    /// <returns>
    /// Price value.
    /// </returns>
    display Price getComparisonPrice()
    {
        InventTableModule inventTableModule;

        select firstonly Price, UnitId
            from inventTableModule
                where inventTableModule.ItemId == this.ItemId &&
                        inventTableModule.ModuleType == ModuleInventPurchSales::Sales;

        return UnitOfMeasureConverter::convert(inventTableModule.Price,
                                                UnitOfMeasure::unitOfMeasureIdBySymbol(this.baseComparisonUnitCode),
                                                UnitOfMeasure::unitOfMeasureIdBySymbol(inventTableModule.UnitId),
                                                NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultBarcode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default bar code for the item.
    /// </summary>
    /// <returns>
    /// The bar code of the item.
    /// </returns>
    display ItemBarCode getDefaultBarcode()
    {
        return this.defaultBarcode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLinkedItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the linked item for the given unit of measure exists.
    /// </summary>
    /// <param name="_unitId">
    /// The ID number value for the unit of measure.
    /// </param>
    /// <returns>
    /// true if linked item exists; otherwise, false.
    /// </returns>
    boolean hasLinkedItems(UnitOfMeasureSymbol  _unitId)
    {
        RetailInventLinkedItem linkedItem;

        select firstonly linkedItem
        where   linkedItem.ItemId == this.ItemId
        &&      linkedItem.Unit == _unitId;

        if (!linkedItem)
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the item ID number from the <c>InventTable</c> table.
    /// </summary>
    /// <param name="_inventTable">
    /// A <c>InventTable</c> record.
    /// </param>
    void initFromInventTable(InventTable    _inventTable)
    {
        this.ItemId = _inventTable.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>InventTable</c> table record for the item.
    /// </summary>
    /// <returns>
    /// A <c>InventTable</c> record.
    /// </returns>
    InventTable inventTable()
    {
        return InventTable::find(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the product that this item represents.
    /// </summary>
    /// <returns>
    /// The name of a product.
    /// </returns>
    display ItemName itemName()
    {
        return this.InventTable().defaultProductName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceWithTax_DEL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sales price based on the tax amount.
    /// </summary>
    /// <param name="_rboInventTable">
    /// A <c>RetailInventTable</c> record.
    /// </param>
    /// <returns>
    /// The sales price including the tax amount.
    /// </returns>
    display RetailSalesPriceVAT priceWithTax_DEL(RetailInventTable _rboInventTable)
    {
        SalesPrice        salesPrice;
        SalesPrice        price;
        TaxAmount         vskPros;
        TaxTable          taxTable;

        ;
        salesPrice = _rboInventTable.InventTable().salesPcsPrice();

        vskPros = 0;
        taxTable.data(TaxTable::find(InventTableModule::find(_rboInventTable.ItemId, ModuleInventPurchSales::Sales, false).TaxItemGroupId));
        if (taxTable.RecId)
        {
            switch (taxTable.TaxBase)
            {
                case TaxBaseType::PctPerNet,
                     TaxBaseType::PctPerGross,
                     TaxBaseType::PctPerTax     :   vskPros = TaxData::find(taxTable.TaxCode, DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), 1).TaxValue;
                    break;
            }
        }

        price = (decRound(salesPrice * (1+(vskPros*0.01)),0) );
        return (price);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtySoldNotPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sales transaction quantity.
    /// </summary>
    /// <returns>
    /// The sum of the quantity of the transactions with an entry status of the
    /// <c>RetailiEntryStatus::None</c> enumeration value.
    /// </returns>
    display Qty qtySoldNotPosted()
    {
        RetailTransactionSalesTrans    transactionSalesTrans;
        Qty ret;

        select sum(Qty) from transactionSalesTrans
            where transactionSalesTrans.ItemId == this.ItemId
               && transactionSalesTrans.TransactionStatus == RetailEntryStatus::None;

        ret = -transactionSalesTrans.Qty;

        /*-Sum("Trans. Sales Entry".Quantity WHERE (Item No.=FIELD(No.),Transaction Status=CONST(" ")
        ,Store No.=FIELD(FILTER(Store Filter)),
        Variant Code=FIELD(FILTER(Variant Filter)),
        Date=FIELD(FILTER(Date Filter))))*/

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>errorOnRename</c> method of the <c>RetailConnActionManagement</c> class.
    /// </summary>
    public void renamePrimaryKey()
    {
        RetailConnActionManagement::errorOnRename(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the record in <c>RetailInventTable</c> table.
    /// </summary>
    /// <remarks>
    /// If replication of the record is allowed for the table, action is inserted into the <c>RetailConnPreactionTable</c> table
    /// Blocks the item if it is not part of a mix and match offer or the item is linked.
    /// </remarks>
    public void update()
    {
        RetailInventLinkedItem         linkedItem, linkedItem2;
        InventItemBarcode           barcode;

        if (this.orig().BlockedOnPOS != this.BlockedOnPOS)
        {
            if (this.BlockedOnPOS == true)
            {
                select firstonly linkedItem
                where linkedItem.LinkedItemId == this.ItemId;

                if (linkedItem)
                    checkFailed(strFmt("@RET3987",linkedItem.LinkedItemId));
            }

            if (this.BlockedOnPOS == true)
            {
                update_recordset barcode
                setting Blocked = true
                where barcode.ItemId == this.ItemId;

                update_recordset linkedItem2
                setting Blocked = true
                where linkedItem2.ItemId == this.ItemId;
            }
            else
            {
                update_recordset barcode
                setting Blocked = false
                where barcode.ItemId == this.ItemId;

                update_recordset linkedItem2
                setting Blocked = false
                where linkedItem2.ItemId == this.ItemId;
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBaseComparisonUnitCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether current BaseComparisonUnitCode is valid or not.
    /// </summary>
    /// <returns>
    /// true if UnitConversion is valid; otherwise false.
    /// </returns>
    boolean validateBaseComparisonUnitCode()
    {
        UnitOfMeasureSymbol toUnitOfMeasureSymbol = InventTableModule::find(this.itemId, ModuleInventPurchSales::Sales).UnitId;

        if (!EcoResProductUnitConverter::canBeConvertedGivenUnitSymbolsForReleasedProduct(
                                            this.ItemId,
                                            '', // no inventDimId linked to the RetailInventTable
                                            this.baseComparisonUnitCode,
                                            toUnitOfMeasureSymbol))
        {
            return checkFailed(strFmt("@SYS28690", this.baseComparisonUnitCode, toUnitOfMeasureSymbol));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBlockedOnPos</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that an item is blocked based on the item type.
    /// </summary>
    /// <returns>
    /// false if the item is not blocked for the <c>RetailStandardRetailDepartmentGroup::ItemDepartment</c>
    /// or <c>RetailStandRetailDepartmentGroup::ItemGroup</c> enumeration values.
    /// or false if the item is used as gift card item.
    /// </returns>
    boolean validateBlockedOnPos()
    {
        if (this.BlockedOnPOS)
        {
            if (this.dateToBeBlocked)
            {
                return checkFailed("@RET3992");
            }
            else
            {
                if (this.DateBlocked == dateNull())
                {
                    this.DateBlocked = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
                }
            }
        }
        else
        {
            this.DateBlocked = str2Date('', 123);

            // Validate if current item is set as giftcard item.
            if (Retailparameters::find().GiftcardItem == this.ItemId)
            {
                return checkFailed("@Retail:ItemIsGiftcardItem");
            }
        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDateToBeBlocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the date to be blocked parameter for the item is valid.
    /// </summary>
    /// <returns>
    /// false if the item is already blocked; otherwise, true
    /// </returns>
    boolean validateDateToBeBlocked()
    {
        if (this.DateToBeBlocked)
        {
            if (this.DateToBeBlocked < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
            {
                return checkFailed("@Retail:DateToBeBlockedLessThanToday");
            }
            else
            {
                if (this.BlockedOnPOS)
                {
                    return checkFailed("@RET3992");
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNoDiscountAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that if all discounts are not allowed, manual discount is not allowed.
    /// </summary>
    boolean validateNoDiscountAllowed()
    {
        this.NoManualDiscountAllowed = this.NoDiscountAllowed;
        this.noPeriodicDiscountAllowed = this.NoDiscountAllowed;
        this.noTenderDiscountsAllowed = this.NoDiscountAllowed;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (fieldExt2Id(_fieldIdToCheck))
        {
            case fieldNum(RetailInventTable, BlockedOnPOS):
                ret = this.validateBlockedOnPos();
                break;
            case fieldNum(RetailInventTable, DateToBeBlocked):
                ret = this.validateDateToBeBlocked();
                break;
            case fieldNum(RetailInventTable, ScaleItem):
                ret = this.validateScaleItem();
                break;
            case fieldNum(RetailInventTable, SeasonCode):
                ret = this.validateSeasonCode();
                break;
            case fieldNum(RetailInventTable, NoDiscountAllowed):
                ret = this.validateNoDiscountAllowed();
                break;
            //<GEERU>
            case fieldNum(RetailInventTable, LabelAttribute1):
            case fieldNum(RetailInventTable, LabelAttribute2):
            case fieldNum(RetailInventTable, LabelAttribute3):
            case fieldNum(RetailInventTable, LabelAttribute4):
            case fieldNum(RetailInventTable, LabelAttribute5):
                ret = this.validateAttribute(_fieldIdToCheck);
                break;
            //</GEERU>
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates field value.
    /// </summary>
    /// <param name="_fieldName">
    /// Field name.
    /// </param>
    /// <param name="_arrayIndex">
    /// Array index.
    /// </param>
    /// <returns>
    /// True if field value is valid, otherwise returns false.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case (fieldStr(RetailInventTable, BaseComparisonUnitCode)) :
                ret = this.validateBaseComparisonUnitCode();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemFamily</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns true.
    /// </summary>
    /// <returns>
    /// true
    /// </returns>
    boolean validateItemFamily()
    {
        /*
        if (this.itemFamily != "")
        {
            select firstonly item
            where item.itemId != this.itemId
            &&    item.itemFamily == this.itemFamily;
    */
    /*ATH
            if (item)
                if (InventTable::find(item.itemId).ModelGroupId != InventTable::find(this.itemId).ModelGroupId) //ATH
                    checkFailed(strfmt("The existing items in item family %1 have costing method %2\n" +
                                "while this item family has costing method %3.\nAll items in the same item family need to have the same costing method."
                                ,this.itemFamily,InventTable::find(item.itemId).ModelGroupId,InventTable::find(this.itemId).ModelGroupId));
                if (this
                    checkFailed("");
        }
    */
    //    }

    return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMultibuyGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns true.
    /// </summary>
    /// <returns>
    /// true
    /// </returns>
    boolean validateMultibuyGroupId() //Was used when field multibuyGroupId was a part of the table.
    {
        /*
        common  offer;
        RetailMultibuyDiscountTable    multibuyDiscountTable, multibuyDiscountTable2, multibuyDiscountTable3;
        RetailDiscountOfferTable       discountOfferTable;
        RetailDiscountOfferLine        discountOfferLine;
        RetailMixAndMatchTable         mixAndMatchTable;
        RetailMixAndMatchLine          mixAndMatchLine;
        RetailParameters               parameters;
        RetailInventItemActivityType   itemActivityType;
        RetailInventItemActivityTable  itemActivityTable;
        RetailInventItemActivityTrans  itemActivityTrans, itemActivityTrans2;

        if (this.multibuyGroupId != "")
        {
            if (this.noDiscountAllowed)
                return checkFailed("You cannot put the item in a multibuy discount group since it has 'No discount allowed' enabled");

            multibuyDiscountTable = RetailMultibuyDiscountTable::find(this.multibuyGroupId);
            if (multibuyDiscountTable.status == RetailDisabledEnabled::Enabled)
            {
                offer = this.findActiveOffer();
                if (offer)
                {
                    switch (offer.TableId)
                    {
                        case tablenum(RetailDiscountOfferLine) :
                        {
                            discountOfferLine = offer;
                            discountOfferTable = RetailDiscountOfferTable::find(discountOfferLine.offerId);

                            if (RetailPriceUtilities::checkValidationPeriodOverlap(multibuyDiscountTable.discountPeriodId,discountOfferTable.discountValidationPeriodId))
                                return checkFailed(strfmt("Item %1 belongs to enabled discount offer %2. It cannot have a multibuy discount at the same time.",this.itemId,discountOfferTable.offerId));
                        }

                        case tablenum(RetailMixAndMatchLine) :
                        {
                            mixAndMatchLine = offer;
                            mixAndMatchTable = RetailMixAndMatchTable::find(mixAndMatchLine.mixAndMatchId);

                            if (RetailPriceUtilities::checkValidationPeriodOverlap(multibuyDiscountTable.discountPeriodId,mixAndMatchTable.discountValidationPeriodId))
                                return checkFailed(strfmt("Item %1 belongs to enabled mix and match offer %2. It cannot have a multibuy discount at the same time.",this.itemId,mixAndMatchTable.mixAndMatchId));
                        }
                    }
                }
            }

            parameters = RetailParameters::find();
            if (parameters.multibuyActivityType == "")
                return checkFailed("No 'Multibuy activity type' is set up");

            multibuyDiscountTable2 = RetailMultibuyDiscountTable::find(this.multibuyGroupId);
            itemActivityType = RetailInventItemActivityType::find(parameters.multibuyActivityType);
            if (itemActivityType.automatic)
            {
                select forupdate firstonly itemActivityTable
                where   itemActivityTable.activityTypeId == parameters.multibuyActivityType
                &&      itemActivityTable.activityId     == this.multibuyGroupId;

                if (itemActivityTable)
                {
                    itemActivityTable.name              = multibuyDiscountTable2.name;
                    itemActivityTable.startingDate      = multibuyDiscountTable2.discountPeriodStartingDate();
                    itemActivityTable.endingDate        = multibuyDiscountTable2.discountPeriodEndingDate();
                    itemActivityTable.update();
                }
                else
                {
                    itemActivityTable.clear();
                    itemActivityTable.activityTypeId    = parameters.multibuyActivityType;
                    itemActivityTable.activityId        = this.multibuyGroupId;
                    itemActivityTable.name              = multibuyDiscountTable2.name;
                    itemActivityTable.startingDate      = multibuyDiscountTable2.discountPeriodStartingDate();
                    itemActivityTable.endingDate        = multibuyDiscountTable2.discountPeriodEndingDate();
                    itemActivityTable.insert();
                }

                select forupdate firstonly itemActivityTrans
                where   itemActivityTrans.itemId         == this.itemId
                &&      itemActivityTrans.activityTypeId == parameters.multibuyActivityType
                &&      itemActivityTrans.activityId     == this.multibuyGroupId;

                if (itemActivityTrans)
                {
                    itemActivityTrans.validateActivityId();
                    itemActivityTrans.automatic = itemActivityType.automatic;
                    itemActivityTrans.update();
                }
                else
                {
                    itemActivityTrans.clear();
                    itemActivityTrans.itemId         = this.itemId;
                    itemActivityTrans.activityTypeId = parameters.multibuyActivityType;
                    itemActivityTrans.activityId     = this.multibuyGroupId;
                    itemActivityTrans.automatic      = itemActivityType.automatic;
                    itemActivityTrans.validateActivityId();
                    itemActivityTrans.insert();
                }
            }
        }

        if (this.orig().multibuyGroupId != "")
        {
            multibuyDiscountTable3 = RetailMultibuyDiscountTable::find(this.orig().multibuyGroupId);

            if ( (today() < multibuyDiscountTable3.discountPeriodEndingDate()) || (multibuyDiscountTable3.discountPeriodEndingDate() == str2date("",123)) )
            {
                select forupdate firstonly itemActivityTrans2
                where   itemActivityTrans2.itemId         == this.itemId
                &&      itemActivityTrans2.activityTypeId == parameters.multibuyActivityType
                &&      itemActivityTrans2.activityId     == this.orig().multibuyGroupId;

                if (itemActivityTrans2)
                {
                    itemActivityTrans2.endingDate = today();
                    itemActivityTrans2.update();
                }
            }
        }
    */
    return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateScaleItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates and updates the unit Id.
    /// </summary>
    /// <returns>
    /// true if sales unit id is empty or equal to retail unit; otherwise, false.
    /// </returns>
    boolean validateScaleItem()
    {
        RetailUnit rboUnit;
        InventTableModule   inventTableModule;

        if (this.ScaleItem)
        {
            select firstonly rboUnit
            where rboUnit.WeightUnitOfMeasure == true;

            if (rboUnit)
            {
                if (InventTable::find(this.ItemId).salesUnitId() == "")
                {
                    ttsbegin;
                    inventTableModule = InventTableModule::find(this.ItemId,ModuleInventPurchSales::Sales,true);
                    inventTableModule.UnitId = rboUnit.UnitID;
                    inventTableModule.update();
                    ttscommit;
                }
                else
                {
                    if (InventTable::find(this.ItemId).salesUnitId() != rboUnit.UnitID)
                        return checkFailed("@RET4794");
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSeasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>LifeFrom</c> and <c>LifeTo</c> fields according to the season code.
    /// </summary>
    /// <returns>
    /// true if the season code is updated; false if the update of season code is canceled.
    /// </returns>
    boolean validateSeasonCode()
    {
        RetailSeasonTable  seasonTable;

        seasonTable = RetailSeasonTable::find(this.SeasonCode);

        if (seasonTable)
        {
            // this is added to check the buffer originates from a form data source
            if (this.isFormDataSource() && (this.LifeFrom || this.LifeTo))
            {
                switch (Box::yesNoCancel(strFmt("@RET792",fieldPName(RetailInventTable,LifeFrom),fieldPName(RetailInventTable,LifeTo),fieldPName(RetailInventTable,SeasonCode)), DialogButton::Cancel,"@RET791"))
                {
                    case DialogButton::No :
                        return true;
                    case DialogButton::Cancel :
                        return false;
                }
            }

            this.LifeFrom = seasonTable.StartDate;
            this.LifeTo = seasonTable.EndDate;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailInventTable</c> table.
    /// </summary>
    /// <param name="_itemId">
    /// The <c>ItemId</c> value of the item table record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailInventTable</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailInventTable find(ItemId _itemId, boolean _forUpdate = false)
    {
        RetailInventTable  retailInventTable;

        if (_itemId)
        {
            retailInventTable.selectForUpdate(_forUpdate);  // LIS.BG

            select firstonly retailInventTable
                index hint itemIdx
                where retailInventTable.ItemId == _itemId;
        }

        return retailInventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAttribute</Name>
				<Source><![CDATA[
    private boolean validateAttribute(FieldId _fieldIdToCheck)
    {
        RefRecId    attribute;

        attribute = this.(_fieldIdToCheck);
        if (!RetailInventTable::isValidAttributeForItem(this.ItemId, attribute))
        {
            return checkFailed(strFmt("@SYP4881070", EcoResAttribute::find(attribute).Name));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributeQuery</Name>
				<Source><![CDATA[
    private static Query getAttributeQuery(EcoResProductRecId _product, RefRecId _attribute = 0)
    {
        Query                       query = new Query();
        QueryBuildDataSource        qbdsEcoResAttribute;
        QueryBuildDataSource        qbdsEcoResCategoryAttributeLookup;
        QueryBuildDataSource        qbdsEcoResCategory;
        QueryBuildDataSource        qbdsEcoResProductCategory;
        QueryBuildDataSource        qbdsEcoResProduct;

        qbdsEcoResAttribute = query.addDataSource(tableNum(EcoResAttribute));
        if (_attribute)
        {
            qbdsEcoResAttribute.addRange(fieldNum(EcoResAttribute,RecId)).value(queryValue(_attribute));
        }

        qbdsEcoResCategoryAttributeLookup = qbdsEcoResAttribute.addDataSource(tableNum(EcoResCategoryAttributeLookup));
        qbdsEcoResCategoryAttributeLookup.relations(true);
        qbdsEcoResCategoryAttributeLookup.joinMode(JoinMode::InnerJoin);

        qbdsEcoResCategory = qbdsEcoResCategoryAttributeLookup.addDataSource(tableNum(EcoResCategory));
        qbdsEcoResCategory.relations(true);
        qbdsEcoResCategory.joinMode(JoinMode::InnerJoin);

        qbdsEcoResProductCategory = qbdsEcoResCategory.addDataSource(tableNum(EcoResProductCategory));
        qbdsEcoResProductCategory.relations(true);
        qbdsEcoResProductCategory.joinMode(JoinMode::InnerJoin);

        qbdsEcoResProduct = qbdsEcoResProductCategory.addDataSource(tableNum(EcoResProduct));
        qbdsEcoResProduct.relations(true);
        qbdsEcoResProduct.joinMode(JoinMode::InnerJoin);
        qbdsEcoResProduct.addRange(fieldNum(EcoResProduct,RecId)).value(queryValue(_product));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidAttributeForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if attribute is valid for item.
    /// </summary>
    /// <param name="_itemId">
    /// Item Id.
    /// </param>
    /// <param name="_attribute">
    /// Attribute RecId.
    /// </param>
    /// <returns>
    /// True if attribute is valid for item; false otherwise.
    /// </returns>
    public static boolean isValidAttributeForItem(ItemId _itemId, RefRecId _attribute)
    {
        InventTable inventTable;
        Query       query;
        QueryRun    queryRun;
        boolean     result = true;

        if (_attribute)
        {
            inventTable = InventTable::find(_itemId);
            query = RetailInventTable::getAttributeQuery(inventTable.Product, _attribute);
            queryRun = new QueryRun(query);
            result = queryRun.next();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>EcoResAttribute</c> table.
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control object in which to perform the lookup.
    /// </param>
    /// <param name="_product">
    /// Product RecId.
    /// </param>
    /// <returns>
    /// A record in the <c>EcoResAttribute</c> table.
    /// </returns>
    public static Common lookupReferenceAttribute(FormReferenceControl _ctrl, EcoResProductRecId _product)
    {
        SysReferenceTableLookup     sysReferenceTableLookup = SysReferenceTableLookup::newParameters(tableNum(EcoResAttribute), _ctrl);
        Query                       query;

        sysReferenceTableLookup.addLookupfield(fieldNum(EcoResAttribute, Name));
        sysReferenceTableLookup.addLookupfield(fieldNum(EcoResAttribute, AttributeType));

        query = RetailInventTable::getAttributeQuery(_product);
        sysReferenceTableLookup.parmQuery(query);

        return sysReferenceTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unsupportedDataSharingTableFieldSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a set of fields that cannot be shared when the <c>RetailInventTable</c> table is shared.
    /// </summary>
    /// <returns>
    /// The <c>Set</c> of fields.
    /// </returns>
    [Hookable(false)]
    internal static Set unsupportedDataSharingTableFieldSet()
    {
        Set sharingSet = new Set(Types::String);

        // Country specific fields
        sharingSet.add(fieldstr(RetailInventTable, ProhibitReturn_RU));
        sharingSet.add(fieldstr(RetailInventTable, LabelAttribute1)); //RU
        sharingSet.add(fieldstr(RetailInventTable, LabelAttribute2)); //RU
        sharingSet.add(fieldstr(RetailInventTable, LabelAttribute3)); //RU
        sharingSet.add(fieldstr(RetailInventTable, LabelAttribute4)); //RU
        sharingSet.add(fieldstr(RetailInventTable, LabelAttribute5)); //RU

        return sharingSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unsupportedDataSharingCountryRegions</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static container unsupportedDataSharingCountryRegions()
    {
        #ISOCountryRegionCodes

        return [#isoRU];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET4040275</DeveloperDocumentation>
	<Label>@SYS13654</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>itemId</TitleField1>
	<TitleField2>BarcodeSetupId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>itemIdx</ClusteredIndex>
	<DataSharingType>Single</DataSharingType>
	<Modules>Merchandising</Modules>
	<PrimaryIndex>itemIdx</PrimaryIndex>
	<ReplacementKey>itemIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>InventItemBarcode</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventItemBarcode</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RetailCompetitorPriceTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailCompetitorPriceTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RetailInfocodeTableSpecific</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailInfocodeTableSpecific</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RetailInventItemActivityTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailInventItemActivityTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RetailInventItemLabelSetup</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailInventItemLabelSetup</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RetailInventItemSectionLocation</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailInventItemSectionLocation</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RetailInventItemTxt</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailInventItemTxt</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RetailInventLinkedItem</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>RetailInventLinkedItem</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>itemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BarcodeSetupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>itemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>itemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Activation</Name>
			<Label>@RET4526</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>dateToActivateItem</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>useEanStandardBarcode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Barcode</Name>
			<Label>@RET3053</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BarcodeSetupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>getDefaultBarcode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Blocking</Name>
			<Label>@RET3149</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>blockedOnPOS</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>blockedOnSelfCheckout</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>dateBlocked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>dateToBeBlocked</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ComparisonPrice</Name>
			<Label>@RET3150</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>baseComparisonUnitCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemLifeCycle</Name>
			<Label>@RET788</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>seasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>lifeFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>lifeTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>POSTerminal</Name>
			<Label>@RET3277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>scaleItem</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>keyingInPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>keyingInQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>mustKeyInComment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>zeroPriceValid</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>qtyBecomesNegative</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>noDiscountAllowed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>noManualDiscountAllowed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>noPeriodicDiscountAllowed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>noTenderDiscountsAllowed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Return</Name>
			<Label>@RET2978</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProhibitReturn_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Variants</Name>
			<Label>@RET3153</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrintVariantsShelfLabels</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LabelAttributes</Name>
			<Label>@SYP4881069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LabelAttribute1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LabelAttribute2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LabelAttribute3</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LabelAttribute4</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LabelAttribute5</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BarcodeSetupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BarcodeSetupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>baseComparisonUnitCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
			<Label>@RET3148</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>blockedOnPOS</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailBlocked</ExtendedDataType>
			<Label>@RET3146</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>blockedOnSelfCheckout</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailBlocked</ExtendedDataType>
			<FeatureClass>RetailSelfCheckoutFeature</FeatureClass>
			<Label>@Retail:BlockedOnSelfCheckout</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>dateBlocked</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDateBlocked</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>dateToActivateItem</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDateToActivateItem</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>dateToBeBlocked</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDateToBeBlocked</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>itemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>keyingInPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailKeyingInPrice</ExtendedDataType>
			<EnumType>RetailPriceKeyingRequirement</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>keyingInQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailKeyingInQty</ExtendedDataType>
			<EnumType>RetailQtyKeyingRequirement</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>lifeFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLifeFrom</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>lifeTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLifeTo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>mustKeyInComment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailMustKeyInComment</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>noDiscountAllowed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailNoDiscountAllowed</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PrintVariantsShelfLabels</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailPrintVariantsShelfLabels</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProhibitReturn_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailProhibitReturn_RU</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>qtyBecomesNegative</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailQtyBecomesNegative</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>scaleItem</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailScaleItem</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>seasonCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailSeasonCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>useEanStandardBarcode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailUseEanStandardBarcode</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>zeroPriceValid</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailZeroPriceValid</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LabelAttribute1</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYP4881064</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LabelAttribute2</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYP4881065</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LabelAttribute3</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYP4881066</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LabelAttribute4</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYP4881067</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LabelAttribute5</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYP4881068</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>noManualDiscountAllowed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailNoManualDiscountAllowed</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>noPeriodicDiscountAllowed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailNoRetailDiscountAllowed</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>noTenderDiscountsAllowed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailNoTenderDiscountAllowed</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>itemIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>itemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BarcodeSetup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BarcodeSetup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BarcodeSetupId</Name>
					<SourceEDT>BarcodeSetupId</SourceEDT>
					<Field>BarcodeSetupId</Field>
					<RelatedField>barcodeSetupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BarcodeSetupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>itemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>itemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailSeasonTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailSeasonTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>seasonCode</Name>
					<SourceEDT>RetailSeasonCode</SourceEDT>
					<Field>seasonCode</Field>
					<RelatedField>seasonCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>seasonCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>baseComparisonUnitCode</Name>
					<Field>baseComparisonUnitCode</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SymbolIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LabelAttribute1</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResAttribute</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LabelAttribute1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LabelAttribute1</Name>
					<Field>LabelAttribute1</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LabelAttribute2</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResAttribute</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LabelAttribute2</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LabelAttribute2</Name>
					<Field>LabelAttribute2</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LabelAttribute3</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResAttribute</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LabelAttribute3</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LabelAttribute3</Name>
					<Field>LabelAttribute3</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LabelAttribute4</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResAttribute</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LabelAttribute4</Name>
					<Field>LabelAttribute4</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LabelAttribute5</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResAttribute</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LabelAttribute5</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LabelAttribute5</Name>
					<Field>LabelAttribute5</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>