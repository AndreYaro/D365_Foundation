<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXUploadSummaryCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailCDXUploadSummaryCache</c> table is used as a cache, to save summarized CDX upload session report. This data is used by charts in RetailIT workspace.
/// </summary>
public class RetailCDXUploadSummaryCache extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateCDXUploadSessionsSummaryData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds an aggregated summary of the upload sessions history.
    /// </summary>
    /// <param name = "dataGroupRecId"> Reference to record ID of CDX data group.</param>
    /// <param name = "_contextId"> Reference to the cache context Id.</param>
    public static void populateCDXUploadSessionsSummaryData(RetailCDXDataGroupRefRecId dataGroupRecId, SysDataCacheContextId _contextId)
    {
        RetailCDXUploadSession uploadSession;
        RetailConnDataBaseProfile retailConndatabaseProfile;
        RetailCDXUploadSummaryCache retailCDXUploadSessionsSummary;
        utcdatetime startofDay = RetailCDXUploadSummaryCache::getStartOfDate();
        int LOOK_BACK_PERIOD_IN_DAYS = -6;

        delete_from retailCDXUploadSessionsSummary where retailCDXUploadSessionsSummary.DataGroupRecId == dataGroupRecId ;

        // build a summary of the upload session filesize and status for the past seven days.
        for (int i = LOOK_BACK_PERIOD_IN_DAYS; i <= 0; i++)
        {
            int64 fileSizeSum, totalSessionCount = 0;

            while select count(RecId), Status, sum(FileSize) from uploadSession
            join retailConndatabaseProfile
            group by uploadSession.Status
            where retailConndatabaseProfile.RecId == uploadSession.DataStore &&
                uploadSession.Status != RetailCDXUploadSessionStatus::Canceled && // Filtering out cancelled sessions as it is not actionable.
                uploadSession.CreatedDateTime >= DateTimeUtil::addDays(startofDay, i) &&
                uploadSession.CreatedDateTime <= DateTimeUtil::addDays(startofDay, i + 1) &&
                (dataGroupRecId == 0 || retailConndatabaseProfile.DataGroup == dataGroupRecId) // if dataGroupRecId is 0 (i.e. if the datagroup filter value that came from the REtailITWorkspace is empty) then the summary will be aggregated accross all datagroups otherwise summary will be aggregated per data group.
            {
                fileSizeSum += uploadSession.FileSize;
                totalSessionCount += uploadSession.RecId;

                switch (uploadSession.Status)
                {
                    case RetailCDXUploadSessionStatus::ApplyFailed:
                    case RetailCDXUploadSessionStatus::UploadFailed:
                    case RetailCDXUploadSessionStatus::ReadFailed:
                        retailCDXUploadSessionsSummary.FailedJobsCount += uploadSession.RecId;
                        break;
                    case RetailCDXUploadSessionStatus::Started:
                    case RetailCDXUploadSessionStatus::Available:
                    case RetailCDXUploadSessionStatus::Uploaded:
                        retailCDXUploadSessionsSummary.InprogressSessions += uploadSession.RecId;
                        break;
                    case RetailCDXUploadSessionStatus::Applied:
                        retailCDXUploadSessionsSummary.PassedJobsCount += uploadSession.RecId;
                        break;
                }
            }

            retailCDXUploadSessionsSummary.RunDate = DateTimeUtil::addDays(startofDay, i);
            retailCDXUploadSessionsSummary.FileSize = fileSizeSum;
            retailCDXUploadSessionsSummary.DataGroupRecId = dataGroupRecId;
            retailCDXUploadSessionsSummary.insert();

            // Clear the instance for the next record insertion.
            retailCDXUploadSessionsSummary.clear();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStartOfDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the begining of the current date time for filter.
    /// </summary>
    static utcdatetime getStartOfDate()
    {
        utcdatetime currentDate;
        currentDate = DateTimeUtil::utcNow();

        currentDate = DateTimeUtil::addMinutes(currentDate, -1 * DateTimeUtil::minute(currentDate));
        currentDate = DateTimeUtil::addHours(currentDate, -1 * DateTimeUtil::hour(currentDate));
        currentDate = DateTimeUtil::addSeconds(currentDate, -1 * DateTimeUtil::second(currentDate));

        return currentDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Modules>NotApplicable</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PassedJobsCount</Name>
			<AssetClassification>Customer Content</AssetClassification>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FailedJobsCount</Name>
			<AssetClassification>Customer Content</AssetClassification>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>RunDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FileSize</Name>
			<AssetClassification>Customer Content</AssetClassification>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InprogressSessions</Name>
			<AssetClassification>Customer Content</AssetClassification>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SysDataCacheContextId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysDataCacheContextId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DataGroupRecId</Name>
			<AssetClassification>Customer Content</AssetClassification>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings>
		<AxTableMapping>
			<MappingTable>SysDataSetCacheTableMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Id</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SysDataCacheContextId</MapField>
					<MapFieldTo>SysDataCacheContextId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>RetailCDXDataGroup</Name>
			<RelatedTable>RetailCDXDataGroup</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DataGroupRecId</Name>
					<Field>DataGroupRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>