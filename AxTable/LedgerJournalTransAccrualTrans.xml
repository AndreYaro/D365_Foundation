<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTransAccrualTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalTransAccrualTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(tableId _refTableid, recId _refRecid )
    {
        boolean ret = true;

        if (!LedgerJournalTransAccrualTrans::exist(_refTableid, _refRecid))
        {
            ret = checkFailed(strfmt(LedgerJournalTransAccrualTrans::txtNotExist(), _refTableid, _refRecid));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteById</Name>
				<Source><![CDATA[
    public static void deleteById(tableId _refTableid, recId _refRecid)
    {
        LedgerJournalTransAccrualTrans accrualTrans;
        LedgerAccrualTable ledgerAccrualTable = LedgerAccrualTable::find(LedgerJournalTransAccrual::find(_refTableid, _refRecid).AccrualId);
        RefRecId numberSequenceRefRecId = ledgerAccrualTable.NumberSequenceTable;

        ttsbegin;

        if (LedgerJournalTransAccrualTrans::shouldReleaseVouchers())
        {
            LedgerJournalTransAccrualTrans::releaseVouchers(numberSequenceRefRecId, _refTableid, _refRecid);
        }

        delete_from accrualTrans
            where accrualTrans.RefTableid == _refTableid
                && accrualTrans.RefRecid == _refRecid;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseVouchers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases the vouchers based on number sequence record of accrual record and voucher.
    /// </summary>
    /// <param name="_numberSequenceRefRecId">The number sequence reference record ID.</param>
    /// <param name="_refTableid">Table ID of referenced table.</param>
    /// <param name="_refRecid">The record ID of referenced table.</param>
    protected static void releaseVouchers(RefRecId _numberSequenceRefRecId, TableId _refTableid, RecId _refRecid)
    {
        LedgerJournalTransAccrualTrans accrualTrans;

        if (_numberSequenceRefRecId)
        {
            while select Voucher from accrualTrans
                order by Voucher
                group by Voucher
                where accrualTrans.RefTableid == _refTableid
                    && accrualTrans.RefRecid == _refRecid
            {
                NumberSeq::releaseNumber(_numberSequenceRefRecId, accrualTrans.Voucher);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldReleaseVouchers</Name>
				<Source><![CDATA[
	/// <summary>
    /// Determines whether the vouchers should be released or not. 
    /// </summary>
    /// <returns>
    /// true if the voucher is released; otherwise, false.
    /// </returns>
    protected static boolean shouldReleaseVouchers()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(tableId _refTableid, recId _refRecid )
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     ledgerJournalTransAccrualTrans
                 where
                     ledgerJournalTransAccrualTrans.RefTableid == _refTableid &&
                    ledgerJournalTransAccrualTrans.RefRecid == _refRecid).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static LedgerJournalTransAccrualTrans find(
        tableId _refTableid,
        recId _refRecid ,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerJournalTransAccrualTrans ledgerJournalTransAccrualTrans;

        ledgerJournalTransAccrualTrans.selectForUpdate(_forupdate);

        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerJournalTransAccrualTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly ledgerJournalTransAccrualTrans
            where ledgerJournalTransAccrualTrans.RefTableid == _refTableid &&
                ledgerJournalTransAccrualTrans.RefRecid == _refRecid;

        return ledgerJournalTransAccrualTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeVoucher</Name>
				<Source><![CDATA[
    public static void synchronizeVoucher(
        Voucher _newVoucher,
        tableId _refTableID,
        recId   _refRecID)
    {
        LedgerJournalTransAccrualTrans ledgerJournalTransAccrualTrans;

        select firstonly ledgerJournalTransAccrualTrans
            where ledgerJournalTransAccrualTrans.RefTableid == _refTableID  &&
                  ledgerJournalTransAccrualTrans.RefRecid   == _refRecID    &&
                  ledgerJournalTransAccrualTrans.Voucher    != _newVoucher;

        if (ledgerJournalTransAccrualTrans)
        {
            update_recordset ledgerJournalTransAccrualTrans setting Voucher = _newVoucher
                where ledgerJournalTransAccrualTrans.RefTableid == _refTableID  &&
                      ledgerJournalTransAccrualTrans.RefRecid   == _refRecID    &&
                      ledgerJournalTransAccrualTrans.Voucher    != _newVoucher;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102199";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerJournalVoucherChanged</Name>
				<Source><![CDATA[
    public static void updateLedgerJournalVoucherChanged(
        LedgerJournalId    _journalNum,
        Voucher            _baseVoucher,
        TransDate          _baseTransdate,
        tableId            _refTableid,
        recId              _refRecid)
    {
        LedgerJournalVoucherChanged     ledgerJournalVoucherChanged;
        LedgerJournalVoucherChanged     ledgerJournalVoucherChangedForConflict;
        LedgerJournalTransAccrualTrans  ledgerJournalTransAccrualTrans;

        ledgerJournalVoucherChanged.JournalNum = _journalNum;
        ledgerJournalVoucherChanged.FromDate = _baseTransdate;
        ledgerJournalVoucherChanged.FromVoucher = _baseVoucher;
        while   select  ledgerJournalTransAccrualTrans
                group by Voucher, TransDate
                where   ledgerJournalTransAccrualTrans.RefTableid == _refTableid
                &&      ledgerJournalTransAccrualTrans.RefRecid   == _refRecid
                &&     (ledgerJournalTransAccrualTrans.Voucher    != _baseVoucher
                ||      ledgerJournalTransAccrualTrans.TransDate  != _baseTransdate)
                notexists join ledgerJournalVoucherChangedForConflict
                where ledgerJournalVoucherChangedForConflict.ToDate      == ledgerJournalTransAccrualTrans.TransDate
                   && ledgerJournalVoucherChangedForConflict.ToVoucher   == ledgerJournalTransAccrualTrans.Voucher
                   && ledgerJournalVoucherChangedForConflict.JournalNum  == _journalNum
                   && ledgerJournalVoucherChangedForConflict.FromDate    == _baseTransdate
                   && ledgerJournalVoucherChangedForConflict.FromVoucher == _baseVoucher
        {
            ledgerJournalVoucherChanged.ToDate = ledgerJournalTransAccrualTrans.TransDate;
            ledgerJournalVoucherChanged.ToVoucher = ledgerJournalTransAccrualTrans.Voucher;
            ledgerJournalVoucherChanged.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdvanced</ConfigurationKey>
	<DeveloperDocumentation>@SYS126134</DeveloperDocumentation>
	<Label>@SYS78068</Label>
	<TitleField1>Voucher</TitleField1>
	<TitleField2>TransDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>AccountingFoundation</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransTxt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS12227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS7576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransTxt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefTableid</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecid</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxInCostPrice</Name>
			<Label>@SYS24596</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsTaxInCostPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DocumentDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocumentDate</ExtendedDataType>
			<Label>@SYS78227</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionAccount</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecid</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableid</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS14475</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransTxt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransTxt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsTaxInCostPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIsTaxInCostPrice</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FinTag</Name>
			<ExtendedDataType>FinTagRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TableidRecidTransdate</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RefTableid</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecid</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DocumentDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FK_DimensionAttributeValueCombination_Le</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VoucherTransDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerJournalTransAccrualTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerJournalTransAccrual</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS126135</EntityRelationshipRole>
			<RelatedTable>LedgerJournalTransAccrual</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerJournalTransAccrual</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>LedgerJournalTransAccrualTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableid</Name>
					<Field>RefTableid</Field>
					<RelatedField>RefTableid</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecid</Name>
					<Field>RefRecid</Field>
					<RelatedField>RefRecid</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FinTag</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FinTag</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FinTag</Name>
					<Field>FinTag</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>