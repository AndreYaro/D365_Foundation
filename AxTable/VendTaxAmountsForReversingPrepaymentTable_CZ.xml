<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendTaxAmountsForReversingPrepaymentTable_CZ</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendTaxAmountsForReversingPrepaymentTable_CZ extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isSingleSpecTrans</Name>
				<Source><![CDATA[
    private static boolean isSingleSpecTrans(Common _refRecord)
    {
        return VendTaxAmountsForReversingPrepaymentTable_CZ::countSpecTransRecords(_refRecord) == 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countSpecTransRecords</Name>
				<Source><![CDATA[
    private static int countSpecTransRecords(Common _refRecord)
    {
        SpecTrans specTrans;
        select count(RecId) from specTrans
            where specTrans.SpecCompany == _refRecord.DataAreaId
                && specTrans.SpecTableId == _refRecord.TableId
                && specTrans.SpecRecId == _refRecord.RecId
                && specTrans.RefTableId == tableNum(VendTransOpen);

        return SpecTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSinglePrepaymentVendTrans</Name>
				<Source><![CDATA[
    private static VendTrans getSinglePrepaymentVendTrans(Common _refRecord)
    {
        VendTrans vendTrans;
        VendTransOpen vendTransOpen;
        SpecTrans specTrans;

        select firstonly vendTrans
            where vendTrans.Prepayment == NoYes::Yes
            exists join vendTransOpen
                where vendTransOpen.RefRecId == vendTrans.RecId
            exists join specTrans
                where specTrans.SpecCompany == _refRecord.DataAreaId
                    && specTrans.SpecTableId == _refRecord.TableId
                    && specTrans.SpecRecId == _refRecord.RecId
                    && specTrans.RefRecId == vendTransOpen.RecId
                    && specTrans.RefCompany == vendTransOpen.DataAreaId
                    && specTrans.RefTableId == vendTransOpen.TableId;

        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSingleVendTransOpen</Name>
				<Source><![CDATA[
    private static VendTransOpen getSingleVendTransOpen(Common _refRecord)
    {
        VendTrans vendTrans;
        VendTransOpen vendTransOpen;
        SpecTrans specTrans;

        select firstonly vendTransOpen
            exists join specTrans
                where specTrans.SpecCompany == _refRecord.DataAreaId
                    && specTrans.SpecTableId == _refRecord.TableId
                    && specTrans.SpecRecId == _refRecord.RecId
                    && specTrans.RefRecId == vendTransOpen.RecId
                    && specTrans.RefCompany == vendTransOpen.DataAreaId
                    && specTrans.RefTableId == vendTransOpen.TableId
            exists join vendTrans
                where vendTrans.Prepayment == NoYes::Yes
                    && vendTrans.RecId == vendTransOpen.RefRecId;

        return vendTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSingleInvoiceVendTrans</Name>
				<Source><![CDATA[
    private static VendTrans getSingleInvoiceVendTrans(Common _refRecord)
    {
        VendTrans vendTrans;
        VendTransOpen vendTransOpen;
        SpecTrans specTrans;

        select firstonly vendTrans
            where vendTrans.Invoice != ''
            exists join vendTransOpen
                where vendTransOpen.RefRecId == vendTrans.RecId
            exists join specTrans
                where specTrans.SpecCompany == _refRecord.DataAreaId
                    && specTrans.SpecTableId == _refRecord.TableId
                    && specTrans.SpecRecId == _refRecord.RecId
                    && specTrans.RefRecId == vendTransOpen.RecId
                    && specTrans.RefCompany == vendTransOpen.DataAreaId
                    && specTrans.RefTableId == vendTransOpen.TableId;

        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSingleSpecTrans</Name>
				<Source><![CDATA[
    private static SpecTrans getSingleSpecTrans(Common _refRecord, RefRecId _vendTransRecId)
    {
        VendTransOpen vendTransOpen;
        SpecTrans specTrans;

        select firstonly specTrans
            where specTrans.SpecCompany == _refRecord.DataAreaId
                && specTrans.SpecTableId == _refRecord.TableId
                && specTrans.SpecRecId == _refRecord.RecId
            exists join vendTransOpen
                where specTrans.RefRecId == vendTransOpen.RecId
                    && specTrans.RefCompany == vendTransOpen.DataAreaId
                    && specTrans.RefTableId == vendTransOpen.TableId
                    && vendTransOpen.RefRecId == _vendTransRecId;

        return specTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearRecordsByInvoice</Name>
				<Source><![CDATA[
    private static void clearRecordsByInvoice(CompanyId _invoiceCompanyId, Voucher _invoiceVoucher)
    {
        VendTaxAmountsForReversingPrepaymentTable_CZ vendTaxAmountsForReversing;

        delete_from vendTaxAmountsForReversing
            where vendTaxAmountsForReversing.InvoiceCompanyId == _invoiceCompanyId
                && vendTaxAmountsForReversing.InvoiceTransVoucher == _invoiceVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearRecordsByVend</Name>
				<Source><![CDATA[
    private static void clearRecordsByVend(VendAccount _vendAccountNum)
    {
        VendTaxAmountsForReversingPrepaymentTable_CZ vendTaxAmountsForReversing;

        delete_from vendTaxAmountsForReversing
            where vendTaxAmountsForReversing.VendAccount == _vendAccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPercent</Name>
				<Source><![CDATA[
    private static Percent calcPercent(Amount _amountToSettle, Amount _totalPrepaymentAmount)
    {
        Percent percent = _totalPrepaymentAmount ? abs(_amountToSettle / _totalPrepaymentAmount * 100) : 100;

        if (percent > 100)
        {
            percent = 100;
        }

        return percent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillForLedgerJournalTrans</Name>
				<Source><![CDATA[
    internal static void fillForLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        if (VendTaxAmountsForReversingPrepaymentTable_CZ::isSingleSpecTrans(_ledgerJournalTrans))
        {
            VendTrans vendTrans = VendTaxAmountsForReversingPrepaymentTable_CZ::getSinglePrepaymentVendTrans(_ledgerJournalTrans);

            VendTaxAmountsForReversingPrepaymentTable_CZ::clearRecordsByInvoice(_ledgerJournalTrans.DataAreaId, _ledgerJournalTrans.Voucher);

            if (vendTrans.RecId != 0)
            {
                VendAccount vendAccountNum = vendTrans.AccountNum;

                TmpTaxWorkTrans taxWorkTrans;
                taxWorkTrans.loadFromTaxUncommittedForDocumentAndInvo(
                    tableNum(LedgerJournalTable),
                    _ledgerJournalTrans.ledgerJournalTable().RecId,
                    _ledgerJournalTrans.Voucher,
                    _ledgerJournalTrans.Invoice);

                boolean isFirst = true;
                VendTaxAmountsForReversingPrepaymentTable_CZ vendTaxAmountsForReversingForValidation;

                Set taxCodesFromPrepayment = new Set(Types::String);
                TaxTrans taxTransPrepayment;

                while select TaxCode, TaxAmount, TaxValue, RecId from taxTransPrepayment
                    where taxTransPrepayment.TransDate == vendTrans.TransDate
                        && taxTransPrepayment.Voucher == vendTrans.Voucher
                        && (taxTransPrepayment.SourceTableId == tableNum(LedgerJournalTrans) || taxTransPrepayment.SourceTableId == tableNum(VendTrans))
                        && taxTransPrepayment.SourceRecId == vendTrans.RecId
                        && taxTransPrepayment.ExemptTax == NoYes::No
                        && taxTransPrepayment.TaxOrigin == TaxOrigin::Tax
                {
                    taxCodesFromPrepayment.add(taxTransPrepayment.TaxCode);

                    select sum(TaxAmount), sum(TaxBaseAmount) from taxWorkTrans
                        where taxWorkTrans.TaxCode == taxTransPrepayment.TaxCode;

                    VendTaxAmountsForReversingPrepaymentTable_CZ vendTaxAmountsForReversing;
                    vendTaxAmountsForReversing.PrepaymentVendTrans = vendTrans.RecId;
                    vendTaxAmountsForReversing.PrepaymentTaxTrans = taxTransPrepayment.RecId;
                    vendTaxAmountsForReversing.PrepaymentSettleAmountToAmountRatio = 1.0;
                    vendTaxAmountsForReversing.TaxCode = taxTransPrepayment.TaxCode;
                    vendTaxAmountsForReversing.TaxValue = taxTransPrepayment.TaxValue;
                    vendTaxAmountsForReversing.VendAccount = vendAccountNum;
                    vendTaxAmountsForReversing.InvoiceCompanyId = _ledgerJournalTrans.DataAreaId;
                    vendTaxAmountsForReversing.InvoiceTransVoucher = _ledgerJournalTrans.Voucher;
                    vendTaxAmountsForReversing.InvoiceTransDate = _ledgerJournalTrans.TransDate;
                    vendTaxAmountsForReversing.InvoiceTaxAmount = taxWorkTrans.TaxAmount;
                    vendTaxAmountsForReversing.InvoiceBaseAmount = taxWorkTrans.TaxBaseAmount;
                    vendTaxAmountsForReversing.InvoiceSettleAmountToAmountRatio = 1.0;

                    vendTaxAmountsForReversing.TaxAmountForSettlement = min(
                        taxWorkTrans.TaxAmount,
                        VendTaxAmountsForReversingPrepaymentTable_CZ::getRemainTaxAmountForPrepayment(
                            vendTaxAmountsForReversing.PrepaymentVendTrans,
                            vendTaxAmountsForReversing.PrepaymentTaxTrans)
                        );

                    vendTaxAmountsForReversing.insert();

                    if (isFirst)
                    {
                        isFirst = false;
                        vendTaxAmountsForReversingForValidation = vendTaxAmountsForReversing;
                    }
                }

                while select TaxCode, TaxValue, TaxAmount, TaxBaseAmount from taxWorkTrans
                {
                    if (!taxCodesFromPrepayment.in(taxWorkTrans.TaxCode))
                    {
                        VendTaxAmountsForReversingPrepaymentTable_CZ vendTaxAmountsForReversing;
                        vendTaxAmountsForReversing.PrepaymentVendTrans = vendTrans.RecId;
                        vendTaxAmountsForReversing.PrepaymentTaxTrans = 0;
                        vendTaxAmountsForReversing.PrepaymentSettleAmountToAmountRatio = 1.0;
                        vendTaxAmountsForReversing.TaxCode = taxWorkTrans.TaxCode;
                        vendTaxAmountsForReversing.TaxValue = taxWorkTrans.TaxValue;
                        vendTaxAmountsForReversing.VendAccount = vendAccountNum;
                        vendTaxAmountsForReversing.InvoiceCompanyId = _ledgerJournalTrans.DataAreaId;
                        vendTaxAmountsForReversing.InvoiceTransVoucher = _ledgerJournalTrans.Voucher;
                        vendTaxAmountsForReversing.InvoiceTransDate = _ledgerJournalTrans.TransDate;
                        vendTaxAmountsForReversing.InvoiceTaxAmount = taxWorkTrans.TaxAmount;
                        vendTaxAmountsForReversing.InvoiceBaseAmount = taxWorkTrans.TaxBaseAmount;
                        vendTaxAmountsForReversing.InvoiceSettleAmountToAmountRatio = 1.0;
                        vendTaxAmountsForReversing.TaxAmountForSettlement = 0;
                        vendTaxAmountsForReversing.insert();
                    }
                }

                if (vendTaxAmountsForReversingForValidation.RecId != 0)
                {
                    vendTaxAmountsForReversingForValidation.validateTotalTaxAmountToSettleNotGreaterThanInvoiceTaxAmount();
                }
            }
        }
        else
        {
            VendTaxAmountsForReversingPrepaymentTable_CZ::clearRecordsByInvoice(_ledgerJournalTrans.DataAreaId, _ledgerJournalTrans.Voucher);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBaseAmountBalance</Name>
				<Source><![CDATA[
    public display Amount getBaseAmountBalance()
    {
        TaxTrans taxTransPrepayment = TaxTrans::findByUnrealizedRefRecId(this.PrepaymentTaxTrans);

        TaxTrans taxTransReverse;
        select sum(TaxBaseAmount) from taxTransReverse
            where taxTransReverse.TaxOrigin == TaxOrigin::TaxReversed
                && taxTransReverse.SourceRecId == this.PrepaymentVendTrans
                && taxTransReverse.SourceTableId == tableNum(VendTrans)
                && taxTransReverse.TaxCode == taxTransPrepayment.TaxCode;

        return taxTransPrepayment.TaxBaseAmount + taxTransReverse.TaxBaseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillForVendTable</Name>
				<Source><![CDATA[
    internal static void fillForVendTable(VendTable _vendTable)
    {
        if (VendTaxAmountsForReversingPrepaymentTable_CZ::countSpecTransRecords(_vendTable) == 2)
        {
            VendTrans vendTransPrepayment = VendTaxAmountsForReversingPrepaymentTable_CZ::getSinglePrepaymentVendTrans(_vendTable);
            VendTrans vendTransInvoice = VendTaxAmountsForReversingPrepaymentTable_CZ::getSingleInvoiceVendTrans(_vendTable);

            VendTaxAmountsForReversingPrepaymentTable_CZ::clearRecordsByVend(_vendTable.AccountNum);

            if (vendTransPrepayment.RecId != 0 && vendTransInvoice.RecId != 0)
            {
                TaxTrans taxTransPrepayment;
                TaxTrans taxTransInvoice;

                boolean isFirst = true;
                VendTaxAmountsForReversingPrepaymentTable_CZ vendTaxAmountsForReversingForValidation;

                Set taxCodesFromPrepayment = new Set(Types::String);

                while select TaxCode, TaxAmount, TaxValue, RecId from taxTransPrepayment
                    where taxTransPrepayment.TransDate == vendTransPrepayment.TransDate
                        && taxTransPrepayment.Voucher == vendTransPrepayment.Voucher
                        && (taxTransPrepayment.SourceTableId == tableNum(LedgerJournalTrans) || taxTransPrepayment.SourceTableId == tableNum(VendTrans))
                        && taxTransPrepayment.SourceRecId == vendTransPrepayment.RecId
                        && taxTransPrepayment.ExemptTax == NoYes::No
                        && taxTransPrepayment.TaxOrigin == TaxOrigin::Tax
                {
                    taxCodesFromPrepayment.add(taxTransPrepayment.TaxCode);

                    select sum(TaxAmount), sum(TaxBaseAmount) from taxTransInvoice
                        where taxTransInvoice.TaxCode == taxTransPrepayment.TaxCode 
                            && taxTransInvoice.TaxOrigin == TaxOrigin::Tax
                            && taxTransInvoice.Voucher == vendTransInvoice.Voucher
                            && taxTransInvoice.TransDate == vendTransInvoice.TransDate
                            && taxTransInvoice.DataAreaId == vendTransInvoice.DataAreaId;

                    TaxTrans taxTransReverse;
                    select sum(TaxAmount) from taxTransReverse
                        where taxTransReverse.TaxOrigin == TaxOrigin::TaxReversed
                            && taxTransReverse.SourceRecId == vendTransPrepayment.RecId
                            && taxTransReverse.SourceTableId == tableNum(VendTrans)
                            && taxTransReverse.TaxCode == taxTransPrepayment.TaxCode;

                    var remainTaxAmount = taxTransPrepayment.TaxAmount + taxTransReverse.TaxAmount;

                    VendTaxAmountsForReversingPrepaymentTable_CZ vendTaxAmountsForReversing;
                    vendTaxAmountsForReversing.PrepaymentVendTrans = vendTransPrepayment.RecId;
                    vendTaxAmountsForReversing.PrepaymentTaxTrans = taxTransPrepayment.RecId;
                    vendTaxAmountsForReversing.PrepaymentSettleAmountToAmountRatio = 1.0;
                    vendTaxAmountsForReversing.TaxCode = taxTransPrepayment.TaxCode;
                    vendTaxAmountsForReversing.TaxValue = taxTransPrepayment.TaxValue;
                    vendTaxAmountsForReversing.VendAccount = _vendTable.AccountNum;
                    vendTaxAmountsForReversing.InvoiceCompanyId = vendTransInvoice.DataAreaId;
                    vendTaxAmountsForReversing.InvoiceTransVoucher = vendTransInvoice.Voucher;
                    vendTaxAmountsForReversing.InvoiceTransDate = vendTransInvoice.TransDate;
                    vendTaxAmountsForReversing.InvoiceTaxAmount = taxTransInvoice.TaxAmount;
                    vendTaxAmountsForReversing.InvoiceBaseAmount = taxTransInvoice.TaxBaseAmount;
                    vendTaxAmountsForReversing.InvoiceSettleAmountToAmountRatio = 1.0;

                    vendTaxAmountsForReversing.TaxAmountForSettlement = min(
                        taxTransInvoice.TaxAmount,
                        VendTaxAmountsForReversingPrepaymentTable_CZ::getRemainTaxAmountForPrepayment(
                            vendTaxAmountsForReversing.PrepaymentVendTrans,
                            vendTaxAmountsForReversing.PrepaymentTaxTrans)
                        );

                    vendTaxAmountsForReversing.insert();

                    if (isFirst)
                    {
                        isFirst = false;
                        vendTaxAmountsForReversingForValidation = vendTaxAmountsForReversing;
                    }
                }

                while select TaxCode, TaxValue, TaxAmount, TaxBaseAmount from taxTransInvoice
                    where taxTransInvoice.TaxOrigin == TaxOrigin::Tax
                        && taxTransInvoice.Voucher == vendTransInvoice.Voucher
                        && taxTransInvoice.TransDate == vendTransInvoice.TransDate
                        && taxTransInvoice.DataAreaId == vendTransInvoice.DataAreaId
                {
                    if (!taxCodesFromPrepayment.in(taxTransInvoice.TaxCode))
                    {
                        VendTaxAmountsForReversingPrepaymentTable_CZ vendTaxAmountsForReversing;
                        vendTaxAmountsForReversing.PrepaymentVendTrans = vendTransPrepayment.RecId;
                        vendTaxAmountsForReversing.PrepaymentTaxTrans = 0;
                        vendTaxAmountsForReversing.PrepaymentSettleAmountToAmountRatio = 1.0;
                        vendTaxAmountsForReversing.TaxCode = taxTransInvoice.TaxCode;
                        vendTaxAmountsForReversing.TaxValue = taxTransInvoice.TaxValue;
                        vendTaxAmountsForReversing.VendAccount = _vendTable.AccountNum;
                        vendTaxAmountsForReversing.InvoiceCompanyId = vendTransInvoice.DataAreaId;
                        vendTaxAmountsForReversing.InvoiceTransVoucher = vendTransInvoice.Voucher;
                        vendTaxAmountsForReversing.InvoiceTransDate = vendTransInvoice.TransDate;
                        vendTaxAmountsForReversing.InvoiceTaxAmount = taxTransInvoice.TaxAmount;
                        vendTaxAmountsForReversing.InvoiceBaseAmount = taxTransInvoice.TaxBaseAmount;
                        vendTaxAmountsForReversing.InvoiceSettleAmountToAmountRatio = 1.0;
                        vendTaxAmountsForReversing.TaxAmountForSettlement = 0;
                        vendTaxAmountsForReversing.insert();
                    }
                }

                if (vendTaxAmountsForReversingForValidation.RecId != 0)
                {
                    vendTaxAmountsForReversingForValidation.validateTotalTaxAmountToSettleNotGreaterThanInvoiceTaxAmount();
                }
            }
        }
        else
        {
            VendTaxAmountsForReversingPrepaymentTable_CZ::clearRecordsByVend(_vendTable.AccountNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainTaxAmountForPrepayment</Name>
				<Source><![CDATA[
    internal static Amount getRemainTaxAmountForPrepayment(RefRecId _prepaymentVendTrans, RefRecId _prepaymentTaxTrans)
    {

        TaxTrans taxTransPrepayment = TaxTrans::findByUnrealizedRefRecId(_prepaymentTaxTrans);

        TaxTrans taxTransReverse;
        select sum(TaxAmount) from taxTransReverse
            where taxTransReverse.TaxOrigin == TaxOrigin::TaxReversed
                && taxTransReverse.SourceRecId == _prepaymentVendTrans
                && taxTransReverse.SourceTableId == tableNum(VendTrans)
                && taxTransReverse.TaxCode == taxTransPrepayment.TaxCode;

        return taxTransPrepayment.TaxAmount + taxTransReverse.TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainTaxAmountForInvoice</Name>
				<Source><![CDATA[
    internal static Amount getRemainTaxAmountForInvoice(RefRecId _invoiceVendTrans, RefRecId _invoiceTaxTrans)
    {
        TaxTrans taxTransInvoice = TaxTrans::findByUnrealizedRefRecId(_invoiceTaxTrans);

        TaxTrans taxTransReverse;
        select sum(TaxAmount) from taxTransReverse
            where taxTransReverse.TaxOrigin == TaxOrigin::TaxReversed
                && taxTransReverse.SourceRecId == _invoiceVendTrans
                && taxTransReverse.SourceTableId == tableNum(VendTrans)
                && taxTransReverse.TaxCode == taxTransInvoice.TaxCode;

        return taxTransInvoice.TaxAmount + taxTransReverse.TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAmountBalance</Name>
				<Source><![CDATA[
    public display Amount getTaxAmountBalance()
    {
        return VendTaxAmountsForReversingPrepaymentTable_CZ::getRemainTaxAmountForPrepayment(this.PrepaymentVendTrans, this.PrepaymentTaxTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxCode</Name>
				<Source><![CDATA[
    public display TaxCode getTaxCode()
    {
        return TaxTrans::findByUnrealizedRefRecId(this.PrepaymentTaxTrans).TaxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTotalTaxAmountToSettleNotGreaterThanInvoiceTaxAmount</Name>
				<Source><![CDATA[
    private boolean validateTotalTaxAmountToSettleNotGreaterThanInvoiceTaxAmount()
    {
        boolean ret = true;
        VendTaxAmountsForReversingPrepaymentTable_CZ taxAmountForReversing;
        select sum(InvoiceTaxAmount), sum(TaxAmountForSettlement) from taxAmountForReversing
            where taxAmountForReversing.RecId != this.RecId
                && taxAmountForReversing.PrepaymentVendTrans == this.PrepaymentVendTrans
                && taxAmountForReversing.InvoiceTransDate == this.InvoiceTransDate
                && taxAmountForReversing.InvoiceTransVoucher == this.InvoiceTransVoucher
                && taxAmountForReversing.InvoiceCompanyId == this.InvoiceCompanyId;

        Amount totalTaxAmountForSettlement = taxAmountForReversing.TaxAmountForSettlement + this.TaxAmountForSettlement;
        Amount totalInvoiceTaxAmount = CurrencyExchangeHelper::amount((taxAmountForReversing.InvoiceTaxAmount + this.InvoiceTaxAmount) * this.InvoiceSettleAmountToAmountRatio);
        if (totalTaxAmountForSettlement > totalInvoiceTaxAmount)
        {
            ret = checkFailed(
                strFmt(
                    "@ApplicationSuite_Localization:TotalTaxAmountForSettlementIsGreaterThanTotalInvTaxAmount",
                    totalTaxAmountForSettlement,
                    totalInvoiceTaxAmount));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (this.TaxAmountForSettlement < 0)
        {
            ret = checkFailed("@ApplicationSuite_Localization:TaxAmountForSettlementIsNegative");
        }
        else if (this.TaxAmountForSettlement > (this.getTaxAmountBalance() * this.PrepaymentSettleAmountToAmountRatio))
        {
            ret = checkFailed(
                strFmt(
                    "@ApplicationSuite_Localization:TaxAmountForSettlementIsGreaterThanRemainTaxAmount",
                    this.getTaxAmountBalance() * this.PrepaymentSettleAmountToAmountRatio));
        }
        else
        {
            ret = this.validateTotalTaxAmountToSettleNotGreaterThanInvoiceTaxAmount();
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>CZ</CountryRegionCodes>
	<Label>@ApplicationSuite_Localization:ReverseSalesTaxAmounts</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>getBaseAmountBalance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>getTaxAmountBalance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceBaseAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceTaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmountForSettlement</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PrepaymentVendTrans</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>VendTransRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PrepaymentTaxTrans</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>TaxTransRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PrepaymentSettleAmountToAmountRatio</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>TaxCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxValue</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>TaxValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmountForSettlement</Name>
			<Label>@ApplicationSuite_Localization:TaxAmountForSettlement</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceTransVoucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InvoiceTransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceCompanyId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CompanyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceBaseAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@ApplicationSuite_Localization:InvoiceBaseAmount</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceTaxAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@ApplicationSuite_Localization:InvoiceTaxAmount</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceSettleAmountToAmountRatio</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PrepaymentVendTrans</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PrepaymentVendTrans</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RelatedInvoice</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InvoiceTransVoucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceTransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceCompanyId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VendAccount</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VendAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>