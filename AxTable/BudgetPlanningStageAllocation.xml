<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanningStageAllocation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetPlanningStageAllocation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>BudgetPlanningStageAllocation</c> table;
    /// if not, an error message is displayed.
    /// </summary>
    /// <param name="_budgetPlanningStageAllocationRecId">
    /// The record ID of the <c>BudgetPlanningStageAllocation</c> record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(BudgetPlanningStageAllocationRecId _budgetPlanningStageAllocationRecId)
    {
        boolean isExisting = true;

        if (!BudgetPlanningStageAllocation::exist(_budgetPlanningStageAllocationRecId))
        {
            isExisting = checkFailed(strFmt(BudgetPlanningStageAllocation::txtNotExist(), _budgetPlanningStageAllocationRecId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>BudgetPlanningStageAllocation</c> table exists.
    /// </summary>
    /// <param name="_budgetPlanningStageAllocationRecId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(BudgetPlanningStageAllocationRecId _budgetPlanningStageAllocationRecId)
    {
        return (BudgetPlanningStageAllocation::find(_budgetPlanningStageAllocationRecId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetPlanningStageAllocation</c> table.
    /// </summary>
    /// <param name="_budgetPlanningStageAllocationRecId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanningStageAllocation</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanningStageAllocation find(
        BudgetPlanningStageAllocationRecId _budgetPlanningStageAllocationRecId,
        boolean                            _forupdate = false,
        ConcurrencyModel                   _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanningStageAllocation budgetPlanningStageAllocation;

        if (_budgetPlanningStageAllocationRecId)
        {
            budgetPlanningStageAllocation.selectForUpdate(_forupdate);

            if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanningStageAllocation.concurrencyModel(_concurrencyModel);
            }

            select firstonly budgetPlanningStageAllocation
                where budgetPlanningStageAllocation.RecId == _budgetPlanningStageAllocationRecId;
        }

        return budgetPlanningStageAllocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAllocationScheduleWorkflowStage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetPlanningStageAllocation</c>
    /// table by using <c>BudgetPlanningAllocationSchedule</c> record ID and
    /// <c>BudgetPlanningWorkflowStage</c> record ID.
    /// </summary>
    /// <param name="_budgetPlanningAllocationScheduleRecId">
    /// The record ID of the the <c>BudgetPlanningAllocationSchedule</c> record.
    /// </param>
    /// <param name="_budgetPlanningWorkflowStageRecId">
    /// The record ID of the the <c>BudgetPlanningWorkflowStage</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanningStageAllocation</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanningStageAllocation findByAllocationScheduleWorkflowStage(
            BudgetPlanningAllocationScheduleRecId _budgetPlanningAllocationScheduleRecId,
            BudgetPlanningWorkflowStageRecId      _budgetPlanningWorkflowStageRecId,
            boolean                               _forUpdate = false,
            ConcurrencyModel                      _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanningStageAllocation budgetPlanningStageAllocation;

        if (_budgetPlanningAllocationScheduleRecId && _budgetPlanningWorkflowStageRecId)
        {
            budgetPlanningStageAllocation.selectForUpdate(_forupdate);

            if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanningStageAllocation.concurrencyModel(_concurrencyModel);
            }

            select firstonly budgetPlanningStageAllocation
                where budgetPlanningStageAllocation.BudgetPlanningAllocationSchedule == _budgetPlanningAllocationScheduleRecId
                    && budgetPlanningStageAllocation.BudgetPlanningWorkflowStage     == _budgetPlanningWorkflowStageRecId;
        }

        return budgetPlanningStageAllocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextOrdinal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next available <c>BudgetPlanStageAllocationOrdinal</c> number to be assigned.
    /// </summary>
    /// <returns> The next <c>BudgetPlanStageAllocationOrdinal</c> to use. </returns>
    public BudgetPlanStageAllocationOrdinal getNextOrdinal()
    {
        return (select maxOf(Ordinal) from budgetPlanningStageAllocation where budgetPlanningStageAllocation.BudgetPlanningWorkflowStage == this.BudgetPlanningWorkflowStage).Ordinal + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsHigherOrdinal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a record with a higher ordinal than the current one exists in the <c>BudgetPlanningStageAllocation</c> table.
    /// </summary>
    /// <param name = "_stageAllocation">
    /// A <c>BudgetPlanningStageAllocation</c> record
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existsHigherOrdinal(BudgetPlanningStageAllocation _stageAllocation)
    {
        BudgetPlanStageAllocationOrdinal highestOrdinal;

        highestOrdinal = (select maxOf(Ordinal) from budgetPlanningStageAllocation where budgetPlanningStageAllocation.BudgetPlanningWorkflowStage == _stageAllocation.BudgetPlanningWorkflowStage).Ordinal;

        return _stageAllocation.Ordinal < highestOrdinal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsLowerOrdinal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a record with a lower ordinal than the current one exists in the <c>BudgetPlanningStageAllocation</c> table.
    /// </summary>
    /// <param name = "_stageAllocation">
    /// A <c>BudgetPlanningStageAllocation</c> record
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existsLowerOrdinal(BudgetPlanningStageAllocation _stageAllocation)
    {
        BudgetPlanStageAllocationOrdinal lowestOrdinal;

        lowestOrdinal = (select minof(Ordinal) from budgetPlanningStageAllocation where budgetPlanningStageAllocation.BudgetPlanningWorkflowStage == _stageAllocation.BudgetPlanningWorkflowStage).Ordinal;

        return _stageAllocation.Ordinal > lowestOrdinal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies fields based on the modified values of other fields
    /// </summary>
    /// <param name = "_fieldId">The field ID of the field that was modified.</param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(BudgetPlanningStageAllocation, BudgetPlanningAllocationSchedule):
                // Assign an ordinal when an element is selected
                if (this.BudgetPlanningAllocationSchedule && !this.Ordinal)
                {
                    this.Ordinal = this.getNextOrdinal();
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@GLS150460</DeveloperDocumentation>
	<FormRef>BudgetPlanningConfigurationStageAllocate</FormRef>
	<Label>@GLS150458</Label>
	<SingularLabel>@GLS150459</SingularLabel>
	<TableGroup>Group</TableGroup>
	<TitleField1>BudgetPlanningAllocationSchedule</TitleField1>
	<TitleField2>BudgetPlanningWorkflowStage</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>BudgetPlanningStageAllocationIdx</ClusteredIndex>
	<Modules>Budget</Modules>
	<ReplacementKey>BudgetPlanningStageAllocationIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningAllocationSchedule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningWorkflowStage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningWorkflowStage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningAllocationSchedule</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningWorkflowStage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningAllocationSchedule</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetPlanningAllocationSchedule</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanningAllocationScheduleRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetPlanningWorkflowStage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanningWorkflowStageRecId</ExtendedDataType>
			<Label>@GLS150338</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Ordinal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanLayoutElementOrdinal</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BudgetPlanningStageAllocationIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BudgetPlanningWorkflowStage</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BudgetPlanningAllocationSchedule</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetPlanningAllocationSchedule</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>BudgetPlanningAllocationSchedule</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetPlanningAllocationSchedule</Name>
					<Field>BudgetPlanningAllocationSchedule</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetPlanningWorkflowStage</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>BudgetPlanningWorkflowStage</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetPlanningWorkflowStage</Name>
					<Field>BudgetPlanningWorkflowStage</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>