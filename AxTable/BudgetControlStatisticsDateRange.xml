<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlStatisticsDateRange</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetControlStatisticsDateRange extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    internal static BudgetControlStatisticsDateRange find(
        recId _recId ,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto,
        UserConnection _userConnection = null)
    {
        BudgetControlStatisticsDateRange budgetControlStatisticsDateRange;

        budgetControlStatisticsDateRange.selectForUpdate(_forupdate);

        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetControlStatisticsDateRange.concurrencyModel(_concurrencyModel);
        }

        if (_userConnection)
        {
            budgetControlStatisticsDateRange.setConnection(_userConnection);
        }

        select firstonly budgetControlStatisticsDateRange
            where budgetControlStatisticsDateRange.RecId == _recId;

        return budgetControlStatisticsDateRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreate</Name>
				<Source><![CDATA[
    internal static BudgetControlStatisticsDateRange findOrCreate(
        TransDate _startDate,
        TransDate _endDate,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto,
        UserConnection _userConnection = null)
    {
        #OCCRetryCount
        BudgetControlStatisticsDateRange budgetControlStatisticsDateRange;

        budgetControlStatisticsDateRange.selectForUpdate(_forupdate);

        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetControlStatisticsDateRange.concurrencyModel(_concurrencyModel);
        }

        if (_userConnection)
        {
            budgetControlStatisticsDateRange.setConnection(_userConnection);
        }

        try
        {
            select firstonly budgetControlStatisticsDateRange
                where budgetControlStatisticsDateRange.StartDate == _startDate
                    && budgetControlStatisticsDateRange.EndDate == _endDate;

            if (budgetControlStatisticsDateRange.RecId == 0)
            {
                ttsbegin;

                budgetControlStatisticsDateRange.StartDate = _startDate;
                budgetControlStatisticsDateRange.EndDate = _endDate;
                budgetControlStatisticsDateRange.insert();

                ttscommit;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::DuplicateKeyExceptionNotRecovered;
            }
            else
            {
                retry;
            }
        }

        return budgetControlStatisticsDateRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDates</Name>
				<Source><![CDATA[
    private boolean validateDates()
    {
        boolean isValid = true;

        if (!this.StartDate)
        {
            isValid = checkFailed("@Budget:StartDateRequired");
        }

        if (isValid && !this.EndDate)
        {
            isValid = checkFailed("@Budget:EndDateRequired");
        }

        if (isValid && (this.StartDate > this.EndDate))
        {
            isValid = checkFailed(strfmt("@Budget:BudgetControlStatisticsByDimensionEndDateBeforeStartDate", date2StrUsr(this.EndDate, DateFlags::FormatAll)));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        return super() && this.validateDates();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@Budget:BudgetControlStatisticsDateRangeDocumentation</DeveloperDocumentation>
	<Label>@Budget:BudgetControlStatisticsDateRange</Label>
	<Visibility>Internal</Visibility>
	<AllowChangeTracking>No</AllowChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EndDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AlternateKeyIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>StartDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>EndDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>