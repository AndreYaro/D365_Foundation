<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepProfileChange_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetDepProfileChange_JP extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetGroupDepBookMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets depreciation profile change related <c>AssetGroupDepBookMap_JP</c> record
    /// </summary>
    /// <returns>
    /// <c>AssetGroupDepBookMap_JP</c> record
    /// </returns>
    public AssetGroupDepBookMap_JP assetGroupDepBookMap()
    {
        return AssetGroupDepBookMap_JP::find(this.SourceTableId, this.SourceRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLifeTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the life time according to the service life
    /// </summary>
    public void calcLifeTime()
    {
        AssetTableInterval          assetTableInterval;
        AssetBookType               assetBookType;
        AssetDepBookMap_JP          assetDepBookMap;
        AssetDepBookTableMap_JP     assetDepBookTableMap;
        AssetGroupDepBookMap_JP     assetGroupDepBookMap;
        AssetTransDate              depreciationStartDate = this.ValidFrom;

        assetGroupDepBookMap = this.assetGroupDepBookMap();
        assetBookType = assetGroupDepBookMap.AssetGroupDepBookMap_JP::assetBookType();
        assetDepBookTableMap = AssetDepBookTableMap_JP::find(
            assetBookType, assetGroupDepBookMap.AssetBookId);
        if (mappingExists(tableNum(AssetDepBookMap_JP), this.SourceTableId))
        {
            assetDepBookMap = AssetDepBookMap_JP::findByRecId(this.SourceTableId, this.SourceRecId);
            if (assetDepBookMap && assetDepBookMap.DepreciationStartDate > this.ValidFrom)
            {
                depreciationStartDate = assetDepBookMap.DepreciationStartDate;
            }
        }
        assetTableInterval = AssetTableIntervalExt_JP::constructFromCalendarSchedule(
            this.depreciationProfile(), assetDepBookTableMap.TableId, assetDepBookTableMap.RecId);
        this.LifeTime = assetTableInterval.yearToPeriod(this.ServiceLife, depreciationStartDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcServiceLife</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the service life according to the life time
    /// </summary>
    public void calcServiceLife()
    {
        AssetTableInterval          assetTableInterval;
        AssetBookType               assetBookType;
        AssetDepBookMap_JP          assetDepBookMap;
        AssetDepBookTableMap_JP     assetDepBookTableMap;
        AssetGroupDepBookMap_JP     assetGroupDepBookMap;
        AssetTransDate              depreciationStartDate = this.ValidFrom;

        assetGroupDepBookMap = this.assetGroupDepBookMap();
        assetBookType = assetGroupDepBookMap.AssetGroupDepBookMap_JP::assetBookType();
        assetDepBookTableMap = AssetDepBookTableMap_JP::find(
            assetBookType, assetGroupDepBookMap.AssetBookId);
        if (mappingExists(tableNum(AssetDepBookMap_JP), this.SourceTableId))
        {
            assetDepBookMap = AssetDepBookMap_JP::findByRecId(this.SourceTableId, this.SourceRecId);
            if (assetDepBookMap && assetDepBookMap.DepreciationStartDate > this.ValidFrom)
            {
                depreciationStartDate = assetDepBookMap.DepreciationStartDate;
            }
        }
        assetTableInterval  = AssetTableInterval::construct(
            this.depreciationProfile(), assetDepBookTableMap.getFiscalCalendar_JP(depreciationStartDate));
        this.ServiceLife    = assetTableInterval.periodToYear(this.LifeTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets depreciation profile record related to the depreciation profile change
    /// </summary>
    /// <returns>
    /// <c>AssetDepreciationProfile</c> record
    /// </returns>
    public AssetDepreciationProfile depreciationProfile()
    {
        return AssetDepreciationProfile::find(this.DepreciationProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPrevious</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the previous depreciation profile change; if this is a newly created record, finds the last.
    /// </summary>
    /// <param name="_forUpdate">
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>AssetDepProfileChange_JP</c> table; otherwise, an empty record.
    /// </returns>
    public AssetDepProfileChange_JP findPrevious(boolean _forUpdate = false)
    {
        AssetDepProfileChange_JP    assetDepProfileChange;
        AssetTransDate              fromDate = dateNull();
        AssetTransDate              toDate = this.ValidFrom-1;

        assetDepProfileChange.selectForUpdate(_forUpdate);

        if (this.RecId)
        {
            select firstOnly validTimeState(fromDate, toDate) assetDepProfileChange
                order by assetDepProfileChange.ValidFrom desc
                where assetDepProfileChange.SourceTableId == this.SourceTableId
                    && assetDepProfileChange.SourceRecId == this.SourceRecId
                    && assetDepProfileChange.RecId != this.RecId;
        }
        else
        {
            assetDepProfileChange = AssetDepProfileChange_JP::findLast(
                                        this.SourceTableId, this.SourceRecId, _forUpdate);
        }

        return assetDepProfileChange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modified field value.
    /// </summary>
    /// <param name="_fieldId">
    /// <c>FieldId</c> of the source table.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(AssetDepProfileChange_JP, LifeTime):
                this.calcServiceLife();
                break;
            case fieldNum(AssetDepProfileChange_JP, ServiceLife):
                this.calcLifeTime();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLifeTimeRest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the value of the <c>LifeTimeRest</c> field.
    /// </summary>
    /// <param name="_assetDepBookMap">
    /// <c>AssetDepBookMap_JP</c> record
    /// </param>
    /// <remarks>
    /// This method calls the <c>orig</c> method and uses the <c>LifeTimeRest</c>, <c>LifeTime</c>, and
    /// <c>ServiceLife</c> fields from the current buffer to determine the correct value of the
    /// <c>LifeTimeRest</c> field.
    /// </remarks>
    public void updateLifeTimeRest(AssetDepBookMap_JP _assetDepBookMap)
    {
        boolean isUnitialized;

        // Only update life time rest when last depreciation date locates in the valid period
        if (!(this.ValidFrom <= _assetDepBookMap.LastDepreciationDate
                && this.ValidTo >= _assetDepBookMap.LastDepreciationDate))
        {
            return;
        }

        //
        // Set Depreciation periods remaining as follows:
        // 1.  If the original LifeTimeRest and LifeTime are empty, and the user has not entered a value for
        //     LifeTimeRest, it needs to be initialized to LifeTime.
        // 2.  If the conditions in (1) aren't met and LifeTimeRest hasn't been changed by the user:
        //     Calculate the difference between the original value of Depreciation periods
        //     and original value of Depreciation periods remaining.  Then offset the new
        //     value of Depreciation periods by this difference to calculate the new value for
        //     Depreciation periods remaining.  If this results is a negative value
        //     for Depreciation periods remaining, set Depreciation periods remaining to zero
        //
        isUnitialized = _assetDepBookMap.orig().LifeTimeRest == 0 && this.orig().LifeTime == 0;
        if (isUnitialized && _assetDepBookMap.LifeTimeRest == 0)
        {
            // LifeTimeRest needs to be initialized.
            _assetDepBookMap.LifeTimeRest = this.LifeTime;
        }
        else if (_assetDepBookMap.orig().LifeTimeRest == _assetDepBookMap.LifeTimeRest
            || this.orig().ServiceLife != this.ServiceLife)
        {
            _assetDepBookMap.LifeTimeRest = (_assetDepBookMap.orig().LifeTimeRest - this.orig().LifeTime) + this.LifeTime;
            if (_assetDepBookMap.LifeTimeRest < 0)
            {
                _assetDepBookMap.LifeTimeRest = 0;
            }
        }

        if (this.orig().ServiceLife == this.ServiceLife
            && _assetDepBookMap.orig().LifeTimeRest != _assetDepBookMap.LifeTimeRest)
        {
            // The user reversed the service life to the original value,
            // so the period remaining value needs to be set to the original value.
            _assetDepBookMap.LifeTimeRest = _assetDepBookMap.orig().LifeTimeRest;
        }

        ttsBegin;
        _assetDepBookMap.update();
        if (FormDataUtil::isFormDataSource(_assetDepBookMap))
        {
            FormDataUtil::getFormDataSource(_assetDepBookMap).reread();
            FormDataUtil::getFormDataSource(_assetDepBookMap).refresh();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean             ret;

        ret = super();

        if (ret && this.SourceTableId == tableNum(AssetBook))
        {
            AssetBook   assetBook;

            select firstOnly LastDepreciationDate from assetBook
                where assetBook.RecId == this.SourceRecId;

            if (assetBook.LastDepreciationDate != dateNull() && assetBook.LastDepreciationDate >= this.ValidFrom)
            {
                ret = checkFailed("@SYS4003037");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLifeTimeRest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks life time rest is not greater than the life time currently used.
    /// </summary>
    /// <param name="_assetDepBookMap">
    /// A buffer of a table that mapped to map <C>AssetDepBookMap_JP</C>.
    /// </param>
    /// <returns>
    /// true if pass.
    /// </returns>
    public static boolean checkLifeTimeRest(AssetDepBookMap_JP _assetDepBookMap)
    {
        AssetDepProfileChange_JP    depProfileChange;
        AssetLifeTime               lifeTime;
        DictField                   dictFieldLifeTimeRest;
        DictField                   dictFieldLifeTime;
        boolean                     ret = true;

        depProfileChange = AssetDepProfileChange_JP::find(_assetDepBookMap.TableId, _assetDepBookMap.RecId, _assetDepBookMap.LastDepreciationDate);
        if (depProfileChange)
        {
            lifeTime = depProfileChange.LifeTime;
        }
        else
        {
            lifeTime = _assetDepBookMap.LifeTime;
        }

        if (lifeTime && _assetDepBookMap.LifeTimeRest && _assetDepBookMap.LifeTimeRest > lifeTime)
        {
            dictFieldLifeTimeRest   = new DictField(_assetDepBookMap.TableId, fieldNum(AssetBook, LifeTimeRest));
            dictFieldLifeTime       = new DictField(_assetDepBookMap.TableId, fieldNum(AssetBook, LifeTime));
            // %1 must not be greater than %2.
            ret = checkFailed(strFmt("@SYS71085", dictFieldLifeTimeRest.label(), dictFieldLifeTime.label()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if depreciation profile change exists for the specific record exists
    /// </summary>
    /// <param name="_sourceTableId">
    /// <c>TableId</c> of the source table
    /// </param>
    /// <param name="_sourceRecId">
    /// <c>RecId</c> of the source record
    /// </param>
    /// <returns>
    /// Return true if depreciation profile change exists
    /// </returns>
    public static boolean exist(TableId _sourceTableId, RecId _sourceRecId)
    {
        AssetDepProfileChange_JP    assetDepProfileChange;
        AssetTransDate              fromDate = dateNull();
        AssetTransDate              toDate = dateMax();

        select firstOnly validTimeState(fromDate, toDate) RecId from assetDepProfileChange
            where assetDepProfileChange.SourceTableId == _sourceTableId
                && assetDepProfileChange.SourceRecId == _sourceRecId;

        return (assetDepProfileChange.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first record in the <c>AssetDepProfileChange_JP</c> table whose
    /// valid from date is greatest but smaller than the specific <c>date</c>
    /// </summary>
    /// <param name="_sourceTableId">
    /// <c>TableId</c> of the source table
    /// </param>
    /// <param name="_sourceRecId">
    /// <c>RecId</c> of the source record
    /// </param>
    /// <param name="_date">
    /// Date
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>AssetDepProfileChange_JP</c> table; otherwise, an empty record.
    /// </returns>
    public static AssetDepProfileChange_JP find(TableId _sourceTableId, RecId _sourceRecId, AssetTransDate _date, boolean _forUpdate = false)
    {
        AssetDepProfileChange_JP    assetDepProfileChange;
        AssetTransDate              fromDate = dateNull();

        if (_sourceTableId && _sourceRecId && _date != dateNull())
        {
            assetDepProfileChange.selectForUpdate(_forUpdate);

            select firstOnly validTimeState(fromDate, _date) assetDepProfileChange
                order by assetDepProfileChange.ValidFrom desc
                where assetDepProfileChange.SourceTableId == _sourceTableId
                    && assetDepProfileChange.SourceRecId == _sourceRecId;
        }

        return assetDepProfileChange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDepProfileId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first record in the <c>AssetDepProfileChange_JP</c> table whose
    /// valid from date is greatest but smaller than the specific <c>date</c>
    /// </summary>
    /// <param name="_sourceTableId">
    /// <c>TableId</c> of the source table
    /// </param>
    /// <param name="_sourceRecId">
    /// <c>RecId</c> of the source record
    /// </param>
    /// <param name="_profileId">
    /// Depreciation profile id
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>AssetDepProfileChange_JP</c> table; otherwise, an empty record.
    /// </returns>
    public static AssetDepProfileChange_JP findByDepProfileId(TableId _sourceTableId, RecId _sourceRecId, AssetDepreciationProfileId _profileId, boolean _forUpdate = false)
    {
        AssetDepProfileChange_JP    assetDepProfileChange;
        AssetTransDate              fromDate = dateNull();
        AssetTransDate              toDate = dateMax();

        if (_sourceTableId && _sourceRecId && _profileId)
        {
            assetDepProfileChange.selectForUpdate(_forUpdate);

            select firstOnly validTimeState(fromDate, toDate) assetDepProfileChange
                order by assetDepProfileChange.ValidFrom desc
                where assetDepProfileChange.SourceTableId == _sourceTableId
                    && assetDepProfileChange.SourceRecId == _sourceRecId
                    && assetDepProfileChange.DepreciationProfile == _profileId;
        }

        return assetDepProfileChange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the default depreciation profile change for the specific record
    /// </summary>
    /// <param name="_sourceTableId">
    /// <c>TableId</c> of the source table
    /// </param>
    /// <param name="_sourceRecId">
    /// <c>RecId</c> of the source record
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>AssetDepProfileChange_JP</c> table; otherwise, an empty record.
    /// </returns>
    public static AssetDepProfileChange_JP findDefault(TableId _sourceTableId, RecId _sourceRecId, boolean _forUpdate = false)
    {
        return AssetDepProfileChange_JP::find(_sourceTableId, _sourceRecId, dateNull(), _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the last depreciation profile change for the specific record
    /// </summary>
    /// <param name="_sourceTableId">
    /// <c>TableId</c> of the source table
    /// </param>
    /// <param name="_sourceRecId">
    /// <c>RecId</c> of the source record
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>AssetDepProfileChange_JP</c> table; otherwise, an empty record.
    /// </returns>
    public static AssetDepProfileChange_JP findLast(TableId _sourceTableId, RecId _sourceRecId, boolean _forUpdate = false)
    {
        return AssetDepProfileChange_JP::find(_sourceTableId, _sourceRecId, dateMax(), _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcNetBookValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the begining balance of net book value for current change over.
    /// </summary>
    /// <param name="_source">
    /// The source record if is already be found out. Optional.
    /// </param>
    public void calcNetBookValue(Common _source = null)
    {
        AssetDepBookMap_JP  assetDepBookMap;

        if (this.SourceRecId && this.SourceTableId && this.ValidFrom > dateNull())
        {
            if (this.SourceTableId == tableNum(AssetBook))
            {
                if (_source.TableId == this.SourceTableId && _source.RecId == this.SourceRecId)
                {
                    assetDepBookMap = _source;
                }
                else
                {
                    assetDepBookMap = AssetDepBookMap_JP::findByRecId(this.SourceTableId, this.SourceRecId);
                }

                this.NetBookValue = AssetSumCalc_Trans::newAssetYear(
                    assetDepBookMap.AssetId,
                    assetDepBookMap.AssetBookId,
                    this.ValidFrom - 1).netBookValue();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.updateNetBookValue();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNetBookValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the begining balance of net book value for current change over if necessary.
    /// </summary>
    public void updateNetBookValue()
    {
        boolean                 isNecessaryToRecalculate = true;
        AssetDepBookMap_JP      source;

        // If net book value already exists, no need to recalcualte.
        isNecessaryToRecalculate = (this.NetBookValue == 0);

        // For the one that valid from dateNull means it is the original profile, it does not need to calculate NBV.
        isNecessaryToRecalculate = isNecessaryToRecalculate && (this.ValidFrom > dateNull());

        // If there is any gap between last depreciation date and the start date of this change over,
        // no need to recalcualte as the NBV will be changed later due to new depreciation.
        if (isNecessaryToRecalculate)
        {
            if (this.SourceTableId == tableNum(assetBook))
            {
                source = AssetDepBookMap_JP::findByRecId(this.SourceTableId, this.SourceRecId);
                if (this.ValidFrom > source.LastDepreciationDate + 1)
                {
                    isNecessaryToRecalculate = false;
                }
            }
            else
            {
                // For the change over setting on group, no need to calculate NBV.
                isNecessaryToRecalculate = false;
            }
        }

        if (isNecessaryToRecalculate)
        {
            this.calcNetBookValue(source);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNetBookValueForSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the begining balance of net book value for change over record for specified source if necessary.
    /// </summary>
    /// <param name="_packedSource">
    /// A container package of source.
    /// </param>
    public static void updateNetBookValueForSource(container _packedSource)
    {
        AssetDepProfileChange_JP    assetDepProfileChange;
        Common                      source;
        AssetDepBookMap_JP          assetDepBookMap;
        AssetTransDate              dateFrom;
        AssetTransDate              dateTo;

        source = con2Buf(_packedSource);

        if (source.RecId && source.TableId == tableNum(AssetBook))
        {
            assetDepBookMap = source;
            dateFrom        = dateNull();
            dateTo          = dateMax();

            assetDepProfileChange.ValidTimeStateUpdateMode(ValidTimeStateUpdate::Correction);

            ttsBegin;

            while select forUpdate validTimeState(dateFrom, dateTo) assetDepProfileChange
                where assetDepProfileChange.SourceTableId   == assetDepBookMap.TableId
                    && assetDepProfileChange.SourceRecId    == assetDepBookMap.RecId
                    && assetDepProfileChange.NetBookValue   == 0
                    && assetDepProfileChange.ValidFrom      <= assetDepBookMap.LastDepreciationDate + 1
                    && assetDepProfileChange.ValidFrom      >  dateNull()
            {
                assetDepProfileChange.calcNetBookValue(assetDepBookMap);
                assetDepProfileChange.update();
            }

            ttsCommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<CountryRegionCodes>JP</CountryRegionCodes>
	<DeveloperDocumentation>@FixedAssets:FA_MessageDeveloper_AssetDepProfileChange_JP</DeveloperDocumentation>
	<FormRef>AssetDepProfileChange_JP</FormRef>
	<Label>@SYS4003035</Label>
	<TitleField1>DepreciationProfile</TitleField1>
	<TitleField2>ValidFrom</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>FixedAssets</Modules>
	<TableContents>DefaultData</TableContents>
	<ValidTimeStateFieldType>Date</ValidTimeStateFieldType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepreciationProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceLife</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LifeTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsUseEquallyDividedFormula</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepreciationProfile</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepreciationProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceLife</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LifeTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsUseEquallyDividedFormula</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NetBookValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DepreciationProfile</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AssetDepreciationProfileId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsUseEquallyDividedFormula</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepUseEquallyDividedFormula_JP</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LifeTime</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AssetLifeTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ServiceLife</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetServiceLife</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SourceTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidFromDate</ExtendedDataType>
			<Label>@SYS35856</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidToDate</ExtendedDataType>
			<Label>@SYS35858</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NetBookValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetNetBookValue</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ScheduleIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<ValidTimeStateKey>Yes</ValidTimeStateKey>
			<ValidTimeStateMode>Gap</ValidTimeStateMode>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SourceRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetDepreciationProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetDepreciationProfile</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DepreciationProfile</Name>
					<SourceEDT>AssetDepreciationProfileId</SourceEDT>
					<Field>DepreciationProfile</Field>
					<RelatedField>Profile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DeprProfileIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>