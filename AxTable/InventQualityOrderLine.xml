<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventQualityOrderLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventQualityOrderLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustInt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rounds appropriate values, depending on attribute type.
    /// </summary>
    protected void adjustInt()
    {
        if (PdsBatchAttrib::find(this.PdsBatchAttribId).PdsBatchAttribType == PdsBatchAttribType::Integer
            || InventTestTable::find(this.TestId).TestType == InventTestType::Integer)
        {
            this.StandardValue  = round(this.StandardValue,1);
            this.LowerLimit     = round(this.LowerLimit,1);
            this.UpperLimit     = round(this.UpperLimit,1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLowerLimit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the <c>LowerLimit</c> field.
    /// </summary>
    /// <returns>
    ///    true if the field has a valid value; otherwise, false.
    /// </returns>
    public boolean checkLowerLimit()
    {
        if (this.StandardValue < this.LowerLimit)
        {
            return checkFailed(strFmt("@SYS113787", fieldId2pname(this.TableId, fieldNum(InventQualityOrderLine, LowerLimit)),
                                                    fieldId2pname(this.TableId, fieldNum(InventQualityOrderLine, StandardValue))));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpperLimit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the <c>UpperLimit</c> field.
    /// </summary>
    /// <returns>
    ///    true if the field has a valid value; otherwise, false.
    /// </returns>
    public boolean checkUpperLimit()
    {
        if (this.StandardValue > this.UpperLimit)
        {
            return checkFailed(strFmt("@SYS113786", fieldId2pname(this.TableId, fieldNum(InventQualityOrderLine, UpperLimit)),
                                                    fieldId2pname(this.TableId, fieldNum(InventQualityOrderLine, StandardValue))));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Makes copies of all notes from the related <c>InventTestTable</c>.
    /// </summary>
    /// <remarks>
    ///    The copies are marked as related to this record.
    /// </remarks>
    public void copyDocuments()
    {
        InventTestTable inventTestTable = InventTestTable::find(this.TestId);

        if (inventTestTable)
        {
            Docu::copy(inventTestTable, this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventQualityOrderLineResults</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an <c>InventQualityOrderLineResults</c> record related to this record.
    /// </summary>
    public void createInventQualityOrderLineResults()
    {
        InventQualityOrderLineResults        inventQualityOrderLineResults;

        if (this.QualityOrderId && this.TestId)
        {
            inventQualityOrderLineResults.initFromInventQualityOrderLine(this);
            inventQualityOrderLineResults.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentActiveInventTestGroupMember</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>InventTestGroupMember</c> record that matches current date and this record.
    /// </summary>
    /// <returns>
    ///    A <c>InventTestGroupMember</c> record if any is found; otherwise, an empty record.
    /// </returns>
    public InventTestGroupMember currentActiveInventTestGroupMember()
    {
        InventQualityOrderTable inventQualityOrderTable;
        InventTestGroupMember   inventTestGroupMember;

        inventQualityOrderTable = this.inventQualityOrderTable();
        inventTestGroupMember   = InventTestGroupMember::findCurrentActiveTest(inventQualityOrderTable.TestGroupId,
                                                                               this.TestId);
        return inventTestGroupMember;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Overrides the standard delete method.
    /// </summary>
    /// <remarks>
    ///    This method also deletes related notes.
    /// </remarks>
    public void delete()
    {
        DocuRef     docuRef;

        ttsbegin;

        delete_from docuRef
            where docuRef.RefCompanyId  == this.DataAreaId
               && docuRef.RefTableId    == this.TableId
               && docuRef.RefRecId      == this.RecId;

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayResultImage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts the test result to an image ID.
    /// </summary>
    /// <returns>
    ///    An <c>InventTestImage</c> value that indicates whether the test passed.
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    public display container displayResultImage()
    {
        //Check if user has security access
        if (!hasFieldAccess(tableNum(InventQualityOrderLine),
                            fieldNum(InventQualityOrderLine, TestResult),
                            AccessType::View))
        {
            return ImageReference::constructForSymbol(ImageReferenceSymbol::NotAvailable).pack();
        }

        return ImageReference::constructForSymbol(this.TestResult == InventTestOutcomeStatus::Pass ? ImageReferenceSymbol::Accept : ImageReferenceSymbol::Error).pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTestGroupMember</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current <c>InventQualityOrderLine</c> record based on the specified
    /// <c>InventTestGroupMember</c> record.
    /// </summary>
    /// <param name="_inventTestGroupMember">
    /// An <c>InventTestGroupMember</c> record.
    /// </param>
    public void initFromInventTestGroupMember(InventTestGroupMember _inventTestGroupMember)
    {
        this.TestId                         = _inventTestGroupMember.TestId;
        this.StandardValue                  = _inventTestGroupMember.StandardValue;
        this.LowerLimit                     = _inventTestGroupMember.LowerLimit;
        this.UpperLimit                     = _inventTestGroupMember.UpperLimit;
        this.LowerTolerance                 = _inventTestGroupMember.LowerTolerance;
        this.UpperTolerance                 = _inventTestGroupMember.UpperTolerance;
        this.VariableId                     = _inventTestGroupMember.VariableId;
        this.VariableOutcomeIdStandard      = _inventTestGroupMember.VariableOutcomeIdStandard;
        this.TestSequence                   = _inventTestGroupMember.TestSequence;
        this.ActionOnFailure                = _inventTestGroupMember.ActionOnFailure;
        this.CertificateOfAnalysisReport    = _inventTestGroupMember.CertificateOfAnalysis;
        this.TestInstrumentId               = _inventTestGroupMember.TestInstrumentId;
        this.TestUnitId                     = _inventTestGroupMember.TestUnitId;
        this.IncludeResults                 = NoYes::Yes;
        this.AcceptableQualityLevel         = _inventTestGroupMember.AcceptableQualityLevel;

        if (#PdsBatchAttribEnabled)
        {
            this.PdsBatchAttribId
                = _inventTestGroupMember.PdsBatchAttribId;

            this.PdsUpdateBatchAttributes = _inventTestGroupMember.PdsUpdateBatchAttributes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromQualityOrderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current <c>InventQualityOrderLine</c> record based on the specified
    /// <c>InventQualityOrderTable</c> record.
    /// </summary>
    /// <param name="_inventQualityOrderTable">
    /// An <c>InventQualityOrderTable</c> record.
    /// </param>
    public void initFromQualityOrderTable(InventQualityOrderTable _inventQualityOrderTable)
    {
        this.QualityOrderId             = _inventQualityOrderTable.QualityOrderId;
        this.PdsUpdateBatchAttributes   = _inventQualityOrderTable.PdsUpdateInvBatchAttributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the record with default values.
    /// </summary>
    public void initValue()
    {
        this.AcceptableQualityLevel = 100;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a result line record for this record and copies notes from related tests.
    /// </summary>
    /// <remarks>
    /// This method overrides the standard insert method. Note that this method is not executed when the
    /// line is created because of the <c>InventQualityOrderTable</c> being created. In that case the
    /// <c>createInventQualityOrderLines</c> method in the <c>InventQualityOrderTable</c> table is
    /// responsible for creating the lines.
    /// </remarks>
    public void insert()
    {
        ttsbegin;

        super();

        if (!InventQualityOrderLineSkipLineResultsCreationContext::current())
        {
            this.createInventQualityOrderLineResults();
            this.copyDocuments();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQualityOrderTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the header record for this line.
    /// </summary>
    /// <returns>
    ///    An <c>InventQualityOrderTable</c> table record or an empty record.
    /// </returns>
    public InventQualityOrderTable inventQualityOrderTable()
    {
        return InventQualityOrderTable::find(this.QualityOrderId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTestGroupMember</Name>
				<Source><![CDATA[
    public InventTestGroupMember inventTestGroupMember()
    {
        return InventTestGroupMember::findCurrentActiveTest(
                                        this.inventQualityOrderTable().TestGroupId,
                                        this.TestId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTestOrderLineResultsEntered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the test results have been entered for this record.
    /// </summary>
    /// <returns>
    /// true if results have been entered; otherwise, false.
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    public display InventTestOrderLineResultsEntered inventTestOrderLineResultsEntered()
    {
        InventQualityOrderLineResults  inventQualityOrderLineResults;

        //Check if user has security access
        if (hasTableAccess(tableNum(InventQualityOrderLineResults),
                           AccessType::View))
        {
            return (select  firstonly inventQualityOrderLineResults
                    where   inventQualityOrderLineResults.QualityOrderId        == this.QualityOrderId
                         && inventQualityOrderLineResults.TestId                == this.TestId
                         && inventQualityOrderLineResults.TestSequence          == this.TestSequence
                         && inventQualityOrderLineResults.TestResultQuantity     > 0).RecId != 0;
        }

        return -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrTestDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the description.
    /// </summary>
    /// <returns>
    /// The <c>Description</c> field of the associated <c>InventTestTable</c> record
    /// if it exists; otherwise, an empty string.
    /// </returns>
    public display Description mcrTestDescription()
    {
        if (InventTestTable::exist(this.TestId))
        {
            return InventTestTable::find(this.TestId).Description;
        }
        else
        {
            return "";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs processing when a field has been modified.
    /// </summary>
    /// <param name="_fieldId">
    /// The <c>fieldId</c> value of the field that has been modified.
    /// </param>
    /// <remarks>
    /// This method is used to initialize other fields.
    /// </remarks>
    public void modifiedField(fieldId _fieldId)
    {
        InventTestGroupMember   inventTestGroupMember;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventQualityOrderLine, TestId):
                inventTestGroupMember = this.currentActiveInventTestGroupMember();
                if (inventTestGroupMember)
                {
                    this.initFromInventTestGroupMember(inventTestGroupMember);
                }
                break;
            case fieldNum(InventQualityOrderLine, TestInstrumentId):
                this.TestUnitId = InventTestInstrument::find(this.TestInstrumentId).Unit;
                break;
            case fieldNum(InventQualityOrderLine, LowerLimit):
                this.setLowerTolerance();
                this.adjustInt();
                break;
            case fieldNum(InventQualityOrderLine, UpperLimit):
                this.setUpperTolerance();
                this.adjustInt();
                break;
            case fieldNum(InventQualityOrderLine, UpperTolerance):
                this.setUpperLimit();
                break;
            case fieldNum(InventQualityOrderLine, LowerTolerance):
                this.setLowerLimit();
                break;
            case fieldNum(InventQualityOrderLine, StandardValue):
                this.setUpperTolerance();
                this.setLowerTolerance();
                this.setUpperLimit();
                this.setLowerLimit();
                this.adjustInt();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBatchAttribValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maintains the batch attribute value.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the value is to be set.
    /// </param>
    /// <param name="_value">
    /// The <c>PdsBatchAttribValue</c> value in display format to which to set the field.
    /// </param>
    /// <returns>
    /// The current <c>PdsBatchAttribValue</c> value of the batch attribute in display format.
    /// </returns>
    public edit PdsBatchAttribValue pdsBatchAttribValue(
        boolean             _set,
        PdsBatchAttribValue _value)
    {
        PdsBatchAttribValue value = '';
        PdsBatchAttrib      attrib;
        boolean             hasEditAccess = false;

        if (#PdsBatchAttribEnabled)
        {
            attrib = PdsBatchAttrib::find(this.PdsBatchAttribId);
            if (_set
                && this.PdsBatchAttribOverride
                && hasFieldAccess(
                        tablenum(InventQualityOrderLine),
                        fieldnum(InventQualityOrderLine,PdsAttribValue),
                        AccessType::Edit))
            {
                hasEditAccess = true;
                if (attrib.RecId)
                {
                    if (attrib.isValidAttribValueType(_value,true))
                    {
                        this.PdsAttribValue = attrib.locale2Storage(_value);
                    }
                }
            }
            if (hasEditAccess
                || hasFieldAccess(
                        tablenum(InventQualityOrderLine),
                        fieldnum(InventQualityOrderLine,PdsAttribValue),
                        AccessType::View))
            {
                value = attrib.storage2Locale(this.PdsAttribValue);
            }
        }

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCheckTestType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the test type and attribute type are the same.
    /// </summary>
    /// <returns>
    /// true if the attribute type is appropriate for the test type; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Use a post-method handler to perform validation for additional <c>InventTestType</c> extensible enum values.
    /// </remarks>
    public boolean pdsCheckTestType()
    {
        InventTestTable     test    = InventTestTable::find(this.TestId);
        PdsBatchAttrib      attrib  = PdsBatchAttrib::find(this.PdsBatchAttribId);
        boolean             ret = true;

        if (attrib.RecId != 0
            && test.RecId != 0)
        {
            switch (test.TestType)
            {
                case InventTestType::Fraction:
                    if (attrib.PdsBatchAttribType != PdsBatchAttribType::Realnumber)
                    {
                        ret = checkFailed(strfmt("@PDS1545",test.TestType,enum2str(PdsBatchAttribType::Realnumber)));
                    }
                    break;
                case InventTestType::Integer:
                    if (attrib.PdsBatchAttribType != PdsBatchAttribType::Integer)
                    {
                        ret = checkFailed(strfmt("@PDS1545",test.TestType,enum2str(PdsBatchAttribType::Integer)));
                    }
                    break;
                case InventTestType::Option:
                    if (attrib.PdsBatchAttribType != PdsBatchAttribType::Enumerate)
                    {
                        ret = checkFailed(strfmt("@PDS1545",test.TestType,enum2str(PdsBatchAttribType::Enumerate)));
                    }
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCheckValidAttribute</Name>
				<Source><![CDATA[
    public boolean pdsCheckValidAttribute()
    {
        boolean                     ret = true;
        InventQualityOrderLine      tmpOrderLine;

        if (#PdsBatchAttribEnabled)
        {
            if (this.PdsBatchAttribId)
            {
                select firstonly tmpOrderLine
                    where  tmpOrderLine.PdsBatchAttribId == this.PdsBatchAttribId
                        && tmpOrderLine.QualityOrderId   == this.QualityOrderId
                        && tmpOrderLine.RecId            != this.RecId;

                if (tmpOrderLine)
                {
                    ret = checkFailed(strfmt(
                                "@PDS1022",
                                this.PdsBatchAttribId,
                                tmpOrderLine.TestId));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCheckVariableOutcomeOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the associated test variable outcomes are a subset of the enumeration values of
    /// the assigned batch attribute.
    /// </summary>
    /// <returns>
    /// true if the associated test variable outcomes are a subset of the enumeration values of the
    /// assigned batch attribute; otherwise, false.
    /// </returns>
    public boolean pdsCheckVariableOutcomeOptions()
    {
        boolean                     ret                         = true;
        PdsBatchAttrib              pdsBatchAttrib              = PdsBatchAttrib::find(this.PdsBatchAttribId);
        InventTestVariable          testVar;
        InventTestVariableOutcome   testVarOutcome;

        if (pdsBatchAttrib.RecId != 0
            && pdsBatchAttrib.PdsBatchAttribType == PdsBatchAttribType::Enumerate)
        {
            select firstOnly recId, VariableId
                from testVar
                    where (testVar.VariableId == this.VariableId);

            if (testVar.RecId != 0)
            {
                while select VariableId, VariableOutcomeId from testVarOutcome
                    where (testVarOutcome.VariableId == this.VariableId)
                {
                    if (!PdsBatchAttribEnumValues::exist(pdsBatchAttrib.PdsBatchAttribId,testVarOutcome.VariableOutcomeId))
                    {
                        ret = checkFailed("@PDS1546");
                        return ret;
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsSetBatchAttribValue</Name>
				<Source><![CDATA[
    public void pdsSetBatchAttribValue()
    {
        if (#PdsBatchAttribEnabled)
        {
            if (!this.PdsBatchAttribOverride)
            {
                this.PdsAttribValue = this.PdsOrderLineResult;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsSetOrderLineResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maintains the order line result.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the value is to be set.
    /// </param>
    /// <param name="_value">
    /// The <c>PdsAttribValue</c> value in display format to which to set the field.
    /// </param>
    /// <returns>
    /// The current <c>PdsOrderLineResult</c> value of the batch attribute in display format.
    /// </returns>
    public edit PdsOrderLineResult pdsSetOrderLineResult(
        boolean         _set,
        PdsAttribValue  _value)
    {
        PdsOrderLineResult  value = '';
        PdsBatchAttribType  type;
        boolean             hasEditAccess = false;

        if (#PdsBatchAttribEnabled)
        {
            type = PdsBatchAttrib::testType2AttribType(
                        InventTestTable::find(this.TestId)
                            .TestType);
            if (_set
                && hasFieldAccess(
                        tablenum(InventQualityOrderLine),
                        fieldnum(InventQualityOrderLine,PdsOrderLineResult),
                        AccessType::Edit))
            {
                if (this.inventTestGroupMember().pdsCheckTestTypeValue(_value))
                {
                    this.PdsOrderLineResult
                        = PdsBatchAttrib::locale2StorageType(type,_value);
                }
                hasEditAccess = true;
            }
            if (hasEditAccess
                || hasFieldAccess(
                        tablenum(InventQualityOrderLine),
                        fieldnum(InventQualityOrderLine,PdsOrderLineResult),
                        AccessType::View))
            {
                value = PdsBatchAttrib::storage2LocaleType(
                            type,
                            this.PdsOrderLineResult);
            }
        }

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsSetOrderLineResultValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the inventory batch attributes value, depending on the quality order line results.
    /// </summary>
    public void pdsSetOrderLineResultValue()
    {
        InventQualityOrderLineResults   inventQualityOrderLineResults;

        InventTestGroupMember           inventTestGroupMember;
        PdsBatchAttrib                  pdsBatchAttrib;

        if (#PdsBatchAttribEnabled)
        {
            inventTestGroupMember = this.inventTestGroupMember();
            this.setPdsOrderLineResult(inventTestGroupMember.PdsTestResultValueDerivation);
        }

        if (this.PdsBatchAttribId)
        {
            select firstonly RecId, PdsBatchAttribType
                from pdsBatchAttrib
                where pdsBatchAttrib.PdsBatchAttribId == this.PdsBatchAttribId;
        }

        if (pdsBatchAttrib.RecId)
        {
            if (pdsBatchAttrib.PdsBatchAttribType == PdsBatchAttribType::Integer)
            {
                this.PdsOrderLineResult = int2str(real2int(str2num(this.PdsOrderLineResult)));
            }
            else if (pdsBatchAttrib.PdsBatchAttribType == PdsBatchAttribType::Enumerate)
            {
                select firstonly inventQualityOrderLineResults
                    where inventQualityOrderLineResults.QualityOrderId          == this.QualityOrderId
                        && inventQualityOrderLineResults.TestSequence           == this.TestSequence
                        && inventQualityOrderLineResults.IncludeResults         == NoYes::Yes;

                if (inventQualityOrderLineResults)
                {
                    this.PdsOrderLineResult = pdsBatchAttrib.calculateBatchAttributeValueFromTestResults(inventQualityOrderLineResults);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPdsOrderLineResult</Name>
				<Source><![CDATA[
    protected void setPdsOrderLineResult(PdsTestResultValueDerivation _pdsTestResultValueDerivation)
    {
        InventQualityOrderLineResults   inventQualityOrderLineResults;
        InventTestTable                 inventTestTable;

        real                            avgResult = 0, avgQty = 0;

        switch (_pdsTestResultValueDerivation)
        {
            case PdsTestResultValueDerivation::Average :

                while select TestResultValueReal, TestResultQuantity
                    from   inventQualityOrderLineResults
                    where  inventQualityOrderLineResults.QualityOrderId     == this.QualityOrderId
                        && inventQualityOrderLineResults.TestSequence       == this.TestSequence
                        && inventQualityOrderLineResults.IncludeResults     == NoYes::Yes
                        && inventQualityOrderLineResults.TestResultQuantity != 0
                {
                    avgQty += inventQualityOrderLineResults.TestResultQuantity;
                    avgResult += (inventQualityOrderLineResults.TestResultQuantity * inventQualityOrderLineResults.TestResultValueReal);
                }

                inventTestTable = InventTestTable::find(this.TestId);

                if (!avgQty)
                {
                    avgResult = 0;
                }
                else if (inventTestTable.TestType == InventTestType::Integer)
                {
                    avgResult = roundUp((avgResult / avgQty), 1.00);
                }
                else
                {
                    avgResult = (avgResult / avgQty);
                }

                this.PdsOrderLineResult = InventParameters::pdsNum2Str(avgResult);

                break;

            case PdsTestResultValueDerivation::Minimum :

                select firstonly TestResultValueReal
                    from   inventQualityOrderLineResults
                    order by TestResultValueReal asc
                    where  inventQualityOrderLineResults.QualityOrderId     == this.QualityOrderId
                        && inventQualityOrderLineResults.TestSequence       == this.TestSequence
                        && inventQualityOrderLineResults.IncludeResults     == NoYes::Yes
                        && inventQualityOrderLineResults.TestResultQuantity != 0;

                this.PdsOrderLineResult = InventParameters::pdsNum2Str(inventQualityOrderLineResults.TestResultValueReal);
                break;

            case PdsTestResultValueDerivation::Maximum :

                select firstonly TestResultValueReal
                    from inventQualityOrderLineResults
                    order by TestResultValueReal desc
                    where inventQualityOrderLineResults.QualityOrderId      == this.QualityOrderId
                        && inventQualityOrderLineResults.TestSequence       == this.TestSequence
                        && inventQualityOrderLineResults.IncludeResults     == NoYes::Yes
                        && inventQualityOrderLineResults.TestResultQuantity != 0;

                this.PdsOrderLineResult = InventParameters::pdsNum2Str(inventQualityOrderLineResults.TestResultValueReal);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsSetOrderLineResultValueFromClient</Name>
				<Source><![CDATA[
    public boolean pdsSetOrderLineResultValueFromClient()
    {
        boolean ret = true;

        if (#PdsBatchAttribEnabled)
        {
            try
            {
                this.pdsSetOrderLineResultValue();
            }
            catch
            {
                error("@PDS1032");
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsUpdateAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inventory batch with the selected batch attribute value.
    /// </summary>
    /// <param name="_inventBatchId">
    /// The <c>InventBatchId</c> value of the selected inventory batch.
    /// </param>
    /// <param name="_batchAttributes">
    /// A <c>PdsBatchAttributes</c> record of batch attributes that must be updated.
    /// </param>
    public void pdsUpdateAttributeValue(
        InventBatchId      _inventBatchId,
        PdsBatchAttributes _batchAttributes)
    {
        PdsBatchAttributes batchAttributes = _batchAttributes;
        boolean updateBatchAttribValue = _batchAttributes.PdsBatchAttribValue != this.PdsAttribValue;
        boolean updateQualityOrderId = _batchAttributes.PdsBatchAttribQualityOrderId != this.QualityOrderId;

        #OCCRetryCount

        try
        {
            if (updateBatchAttribValue || updateQualityOrderId)
            {
                ttsbegin;

                batchAttributes.selectForUpdate(true);
                batchAttributes.PdsBatchAttribValue = this.PdsAttribValue;
                batchAttributes.PdsBatchAttribQualityOrderId = this.QualityOrderId;
                batchAttributes.update();

                ttscommit;
            }

            if (updateBatchAttribValue)
            {
                info(strfmt("@PDS1202", _inventBatchId));
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsValidateBatchAttributesValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the batch attribute value of the selected inventory batch based on the type of the
    /// attributes.
    /// </summary>
    /// <param name="_inventBatchId">
    /// The <c>InventBatchId</c> value of the selected inventory batch.
    /// </param>
    /// <param name="_acceptError">
    /// A Boolean value that indicates whether to return false or only show a warning message for an
    /// incorrect validation.
    /// </param>
    /// <returns>
    /// true if the validation was successful; otherwise, false.
    /// </returns>
    public boolean pdsValidateBatchAttributesValue(
        InventBatchId   _inventBatchId = '',
        boolean         _acceptError = false)
    {
        PdsBatchAttributes          batchAttributes;
        PdsBatchAttrib              batchAttrib;
        PdsBatchAttribEnumValues    batchAttribEnumValues;
        str                         strValue;
        boolean                     ret = true;

        if (#PdsBatchAttribEnabled)
        {
            if (    this.PdsBatchAttribId
                &&  this.PdsAttribValue)
            {
                batchAttributes = PdsBatchAttributes::find(
                    this.inventQualityOrderTable().ItemId,
                    _inventBatchId,
                    this.PdsBatchAttribId,
                    true);

                if (batchAttributes.RecId)
                {
                    select firstonly RecId, PdsBatchAttribId
                        from batchAttrib
                        where batchAttrib.PdsBatchAttribId == batchAttributes.PdsBatchAttribId;

                    if (batchAttrib.RecId)
                    {
                        strValue = this.PdsAttribValue;

                        switch (batchAttrib.PdsBatchAttribType)
                        {
                            case PdsBatchAttribType::Enumerate :
                                batchAttribEnumValues = PdsBatchAttribEnumValues::find(batchAttrib.PdsBatchAttribId, strValue);

                                if (!batchAttribEnumValues.RecId)
                                {
                                    if (_acceptError)
                                    {
                                        warning(strfmt("@PDS1034", this.TestSequence));
                                    }
                                    else
                                    {
                                        ret = checkFailed(strfmt("@PDS1034", this.TestSequence));
                                    }
                                }
                                break;

                            case PdsBatchAttribType::Realnumber :
                                if (!PdsBatchAttrib::str2NumOk(strValue))
                                {
                                    if (_acceptError)
                                    {
                                        warning(strfmt("@PDS1035", this.TestSequence));
                                    }
                                    else
                                    {
                                        ret = checkFailed(strfmt("@PDS1035", this.TestSequence));
                                    }
                                }

                                if (this.PdsUpdateBatchAttributes && batchAttributes.pdsBatchAttrib().PdsBatchAttribToleranceAction == PdsBatchAttribToleranceAction::NotAllowed)
                                {
                                    ret = batchAttributes.pdsBatchAttrib().checkAttribCriteria(batchAttributes.PdsBatchAttribValue, batchAttributes.ItemId);
                                }
                                break;

                            case PdsBatchAttribType::Integer :
                                if (!PdsBatchAttrib::str2NumOk(strValue))
                                {
                                    if (_acceptError)
                                    {
                                        warning(strfmt("@PDS1036", this.TestSequence));
                                    }
                                    else
                                    {
                                        ret = checkFailed(strfmt("@PDS1036", this.TestSequence));
                                    }
                                }
                                else
                                {
                                    strValue = int2str(real2int(str2num(strValue)));
                                }

                                if (this.PdsUpdateBatchAttributes && batchAttributes.pdsBatchAttrib().PdsBatchAttribToleranceAction == PdsBatchAttribToleranceAction::NotAllowed)
                                {
                                    ret = batchAttributes.pdsBatchAttrib().checkAttribCriteria(batchAttributes.PdsBatchAttribValue, batchAttributes.ItemId);
                                }
                                break;
                        }

                        if (ret)
                        {
                            this.PdsAttribValue = strValue;
                        }
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsValidateRelatedBatchAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates all inventory batches related of the quality order reference order.
    /// </summary>
    public void pdsValidateRelatedBatchAttributes()
    {
        InventTransOriginQualityOrder   transOrigin;
        InventTrans                     inventTrans;
        InventQualityOrderTable         orderTable = this.inventQualityOrderTable();
        PdsBatchAttributes              batchAttributes;

        while select RecId from transOrigin
            where  transOrigin.QualityOrderDataAreaId   == orderTable.DataAreaId
                && transOrigin.QualityOrderId           == orderTable.QualityOrderId
            join inventTrans
                where inventTrans.InventTransOrigin == transOrigin.InventTransOrigin
                    && inventTrans.InventDimId      != orderTable.InventDimId
                    && inventTrans.StatusReceipt    == StatusReceipt::Received
                    && inventTrans.StatusIssue      == StatusIssue::None
        {
            batchAttributes
                = PdsBatchAttributes::insertDefaultAttributes(
                            inventTrans.ItemId,
                            inventTrans.inventBatchId(),
                            this.PdsBatchAttribId);

            if (!batchAttributes)
            {
                warning(
                    strfmt(
                        "@PDS1033",
                        inventTrans.ItemId,
                        inventTrans.inventBatchId()));

                break;
            }

            this.pdsUpdateAttributeValue(
                inventTrans.inventBatchId(),
                batchAttributes);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDecimal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs rounding on the specified test limits and values, depending on unit precision.
    /// </summary>
    /// <returns>
    /// Test unit's decimal precision
    /// </returns>
    public UnitOfMeasureDecimalPrecision setDecimal()
    {
        UnitOfMeasureSymbol unitSymbol = this.TestUnitId ?
            this.TestUnitId : 
            InventTestTable::find(this.TestId).TestUnitId;

        UnitOfMeasureDecimalPrecision decimalPrecision = UnitOfMeasure::unitOfMeasureDecimalPrecision(
            UnitOfMeasure::unitOfMeasureIdBySymbol(unitSymbol));

        if (decimalPrecision)
        {
            this.StandardValue = decRound(this.StandardValue, decimalPrecision);
            this.LowerLimit = decRound(this.LowerLimit, decimalPrecision);
            this.UpperLimit = decRound(this.UpperLimit, decimalPrecision);
        }
        return decimalPrecision;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLowerLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>LowerLimit</c> field based on <c>StandardValue</c> and <c>LowerTolerance</c> fields.
    /// </summary>
    public void setLowerLimit()
    {
        if (this.StandardValue < 0)
        {
            this.LowerLimit = this.StandardValue * (100 + this.LowerTolerance) / 100;
        }
        else
        {
            this.LowerLimit = this.StandardValue * (100 - this.LowerTolerance) / 100;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLowerTolerance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>LowerTolerance</c> field based on <c>StandardValue</c> and <c>LowerLimit</c> fields.
    /// </summary>
    public void setLowerTolerance()
    {
        if (!this.StandardValue)
        {
            this.LowerTolerance = 0;
        }
        else
        {
            this.LowerTolerance = 100 * (abs(this.StandardValue - this.LowerLimit) / abs(this.StandardValue));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTestResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the overall test result based on the results entered.
    /// </summary>
    public void setTestResult()
    {
        InventQualityOrderLineResults   inventQualityOrderLineResultsFailure;
        InventQualityOrderLineResults   inventQualityOrderLineResultsPass;

        real                            countAll, countFailure, countPass;
        InventQty                       qualityOrderQty;
        boolean                         cwItem;

        if (this.ActionOnFailure == InventTestActionOnFailure::Accept)
        {
            this.TestResult = InventTestOutcomeStatus::Pass;
            return;
        }

        cwItem = PdsGlobal::pdsIsCWItem(this.inventQualityOrderTable().ItemId);
        select sum(TestResultQuantity), sum(PdsCWTestResultQuantity) from inventQualityOrderLineResultsPass
                where   inventQualityOrderLineResultsPass.QualityOrderId        == this.QualityOrderId
                     && inventQualityOrderLineResultsPass.TestId                == this.TestId
                     && inventQualityOrderLineResultsPass.TestSequence          == this.TestSequence
                     && inventQualityOrderLineResultsPass.TestResult            == InventTestOutcomeStatus::Pass
                     && inventQualityOrderLineResultsPass.IncludeResults        == NoYes::Yes
                     && inventQualityOrderLineResultsPass.TestResultQuantity    != 0;
        countPass = cwItem ? inventQualityOrderLineResultsPass.PdsCWTestResultQuantity : inventQualityOrderLineResultsPass.TestResultQuantity;

        select sum(TestResultQuantity), sum(PdsCWTestResultQuantity) from inventQualityOrderLineResultsFailure
                where   inventQualityOrderLineResultsFailure.QualityOrderId         == this.QualityOrderId
                     && inventQualityOrderLineResultsFailure.TestId                 == this.TestId
                     && inventQualityOrderLineResultsFailure.TestSequence           == this.TestSequence
                     && inventQualityOrderLineResultsFailure.TestResult             == InventTestOutcomeStatus::Fail
                     && inventQualityOrderLineResultsFailure.IncludeResults         == NoYes::Yes
                     && inventQualityOrderLineResultsFailure.TestResultQuantity     != 0;

        if (cwItem)
        {
            countFailure = inventQualityOrderLineResultsFailure.PdsCWTestResultQuantity;
        }
        else
        {
            countFailure = inventQualityOrderLineResultsFailure.TestResultQuantity;
        }

        countAll = countPass + countFailure;
        if (cwItem)
        {
            qualityOrderQty = this.inventQualityOrderTable().PdsCWQty;
        }
        else
        {
            qualityOrderQty = this.inventQualityOrderTable().Qty;
        }
        if (qualityOrderQty <= 0)
        {
            this.TestResult = InventTestOutcomeStatus::Fail;
        }
        else if (countFailure)
        {
            if (countAll && countAll < qualityOrderQty)
            {
                countAll = qualityOrderQty;
            }

            if (countAll <= 0)
            {
                this.TestResult = InventTestOutcomeStatus::Fail;
            }
            else if (this.AcceptableQualityLevel &&
               (((100 - (100 * countFailure / countAll)) < this.AcceptableQualityLevel) ||
               (((100 * countPass / countAll)) < this.AcceptableQualityLevel)))
            {
                this.TestResult = InventTestOutcomeStatus::Fail;
            }
            else
            {
                this.TestResult = InventTestOutcomeStatus::Pass;
            }
        }
        else if ((100 * countAll / qualityOrderQty) >= this.AcceptableQualityLevel)
        {
            this.TestResult = InventTestOutcomeStatus::Pass;
        }
        else
        {
            this.TestResult = InventTestOutcomeStatus::Fail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpperLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>UpperLimit</c> field based on <c>StandardValue</c> and <c>UpperTolerance</c> fields.
    /// </summary>
    public void setUpperLimit()
    {
        if (this.StandardValue < 0)
        {
            this.UpperLimit = this.StandardValue * (100 - this.UpperTolerance) / 100;
        }
        else
        {
            this.UpperLimit = this.StandardValue * (100 + this.UpperTolerance) / 100;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpperTolerance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>UpperTolerance</c> field based on <c>StandardValue</c> and <c>UpperLimit</c> fields.
    /// </summary>
    public void setUpperTolerance()
    {
        if (!this.StandardValue)
        {
            this.UpperTolerance = 0;
        }
        else
        {
            this.UpperTolerance = 100 * (abs(this.UpperLimit - this.StandardValue) / abs(this.StandardValue));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Ensures consistency in the results table.
    /// </summary>
    /// <remarks>
    ///    This method overrides the standard update method.
    /// </remarks>
    public void update()
    {
        InventQualityOrderLineResults inventQualityOrderLineResults;

        ttsbegin;

        if (this.VariableId != this.orig().VariableId)
        {
            delete_from inventQualityOrderLineResults
            where   inventQualityOrderLineResults.QualityOrderId        == this.QualityOrderId
                 && inventQualityOrderLineResults.TestId                == this.TestId
                 && inventQualityOrderLineResults.TestSequence          == this.TestSequence;
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (_fieldIdToCheck == fieldNum(InventQualityOrderLine, AcceptableQualityLevel))
        {
            ret =  checkPercentage(this.AcceptableQualityLevel);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldstr(InventQualityOrderLine, TestId):
                ret = ret && this.pdsCheckTestType();
                break;

            case fieldstr(InventQualityOrderLine, PdsBatchAttribId):
                ret = ret && this.pdsCheckTestType() && this.pdsCheckVariableOutcomeOptions();
                break;

            case fieldstr(InventQualityOrderLine, VariableId):
                ret = ret && this.pdsCheckVariableOutcomeOptions();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        InventTestGroupMember           inventTestGroupMember;
        InventQualityOrderLineResults   inventQualityOrderLineResults;
        boolean                         anyResults = false;
        boolean                         ret;

        if (!this.TestSequence)
        {
            select firstonly TestSequence from inventTestGroupMember
            where  inventTestGroupMember.TestId == this.TestId
                && inventTestGroupMember.TestGroupId == InventQualityOrderTable::find(this.QualityOrderId).TestGroupId;
            this.TestSequence = inventTestGroupMember.TestSequence;
        }

        ret = super();

        ret = this.checkLowerLimit() && ret;
        ret = this.checkUpperLimit() && ret;

        if (InventTestTable::find(this.TestId).TestType != InventTestType::Option)
        {
            this.VariableId = '';
            this.VariableOutcomeIdStandard = '';
        }
        else
        {
            if (ret &&
              (select firstonly inventTestVariableOutcome
               where    inventTestVariableOutcome.VariableId == this.VariableId
                     && inventTestVariableOutcome.VariableOutcomeId == this.VariableOutcomeIdStandard).RecId == 0)
            {
                ret = checkFailed("@SYS113852");
                return false;
            }
        }

        while   select inventQualityOrderLineResults
                where inventQualityOrderLineResults.QualityOrderId      == this.QualityOrderId
                   && inventQualityOrderLineResults.TestId              == this.TestId
                   && inventQualityOrderLineResults.TestSequence        == this.TestSequence
        {
            inventQualityOrderLineResults.validateWrite();
            anyResults = true;
        }

        if (anyResults && (this.VariableId != this.orig().VariableId))
        {
            if (this.deleteReferencedResultsPrompt())
            {
                return false;
            }
        }

        this.setTestResult();

        if (#PdsBatchAttribEnabled)
        {
            if (ret)
            {
                ret = this.pdsCheckValidAttribute();
            }

            if (ret)
            {
                ret = this.pdsSetOrderLineResultValueFromClient();
            }

            if (ret)
            {
                this.pdsSetBatchAttribValue();
                ret = this.pdsValidateBatchAttributesValue();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    protected boolean prompt()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteReferencedResultsPrompt</Name>
				<Source><![CDATA[
    protected boolean deleteReferencedResultsPrompt()
    {
        boolean ret;

        if (this.prompt())
        {
            ret = Box::yesNo("@SYS113851", DialogButton::No, "@SYS113850") == DialogButton::No;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>InventQualityOrderLine</c> table exists.
    /// </summary>
    /// <param name="_qualityOrderId">
    ///    The quality order ID of the record to find.
    /// </param>
    /// <param name="_inventTestId">
    ///    The test ID of the record to find.
    /// </param>
    /// <param name="_testSequence">
    ///    The test sequence number of the record to find.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(
        InventQualityOrderId    _qualityOrderId,
        InventTestId            _inventTestId,
        InventTestSequence      _testSequence)
    {
        return _qualityOrderId  && _inventTestId && _testSequence &&
            (select  firstonly inventQualityOrderLine
             where  inventQualityOrderLine.QualityOrderId   == _qualityOrderId
                 && inventQualityOrderLine.TestId           == _inventTestId
                 && inventQualityOrderLine.TestSequence     == _testSequence).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>InventQualityOrderLine</c> table.
    /// </summary>
    /// <param name="_qualityOrderId">
    ///    The quality order ID of the record to find.
    /// </param>
    /// <param name="_inventTestId">
    ///    The test ID of the record to find.
    /// </param>
    /// <param name="_testSequence">
    ///    The test sequence number of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>InventQualityOrderLine</c> table; otherwise, an empty record.
    /// </returns>
    public static InventQualityOrderLine find(
        InventQualityOrderId    _qualityOrderId,
        InventTestId            _inventTestId,
        InventTestSequence      _testSequence,
        boolean                 _forUpdate = false)
    {
        InventQualityOrderLine inventQualityOrderLine;

        if (_qualityOrderId && _inventTestId && _testSequence)
        {
            inventQualityOrderLine.selectForUpdate(_forUpdate);

            select firstonly    inventQualityOrderLine
            where   inventQualityOrderLine.QualityOrderId   == _qualityOrderId
                 && inventQualityOrderLine.TestId           == _inventTestId
                 && inventQualityOrderLine.TestSequence     == _testSequence;
        }

        return inventQualityOrderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsLookupBatchAttribValue</Name>
				<Source><![CDATA[
    public static void pdsLookupBatchAttribValue(
        FormStringControl _ctrl,
        PdsBatchAttribId  _pdsBatchAttribId)
    {
        Args        args;
        Object      formRun;

        args = new Args();
        args.name(formstr(PdsBatchAttribValueLookup));
        formRun = classfactory.formRunClass(args);
        formRun.setPdsBatchAttribId(_pdsBatchAttribId);
        formRun.init();
        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>InventQualityManagement</ConfigurationKey>
	<DeveloperDocumentation>@SYS124051</DeveloperDocumentation>
	<FormRef>InventQualityOrderTable</FormRef>
	<Label>@SYS113853</Label>
	<SingularLabel>@SYS113853</SingularLabel>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>QualityOrderId</TitleField1>
	<TitleField2>TestId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>QualityOrderTestSequenceIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<CreatedTransactionId>Yes</CreatedTransactionId>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ModifiedTransactionId>Yes</ModifiedTransactionId>
	<Modules>Inventory</Modules>
	<PrimaryIndex>QualityOrderTestSequenceIdx</PrimaryIndex>
	<ReplacementKey>QualityOrderTestSequenceIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>InventQualityOrderLineResults</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventQualityOrderLineResults</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QualityOrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestResult</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StandardValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LowerLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UpperLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UpperTolerance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LowerTolerance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VariableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VariableOutcomeIdStandard</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateOfAnalysisReport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActionOnFailure</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestInstrumentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestSequence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncludeResults</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QualityOrderId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QualityOrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestSequence</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Details</Name>
			<Label>@SYS8811</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TestResult</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StandardValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LowerLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UpperLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UpperTolerance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LowerTolerance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VariableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VariableOutcomeIdStandard</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestSequence</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TestId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MeasurementValues</Name>
			<Label>@SYS113784</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StandardValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LowerLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UpperLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LowerTolerance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UpperTolerance</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TestSequence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsQualityLineAttributes</Name>
			<Label>@PDS1031</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribOverride</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsSetOrderLineResult</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsBatchAttribValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsUpdateBatchAttributes</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS15217</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QualityOrderId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ResultAction</Name>
			<Label>@SYS113751</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IncludeResults</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActionOnFailure</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AcceptableQualityLevel</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ResultAnalysis</Name>
			<Label>@SYS113783</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CertificateOfAnalysisReport</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Results</Name>
			<Label>@SYS33918</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>inventTestOrderLineResultsEntered</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TestInstrument</Name>
			<Label>@SYS113673</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TestInstrumentId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TestUnit</Name>
			<Label>@SYS96151</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TestUnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Variables</Name>
			<Label>@SYS113648</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VariableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VariableOutcomeIdStandard</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AcceptableQualityLevel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventAcceptableQualityLevel</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ActionOnFailure</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventTestActionOnFailure</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CertificateOfAnalysisReport</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventCertificateOfAnalysisReport</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeResults</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS113862</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LowerLimit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTestLowerLimit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LowerTolerance</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTestLowerTolerance</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsAttribValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsAttribValue</ExtendedDataType>
			<Label>@PDS1029</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsBatchAttribId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchAttribId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsBatchAttribOverride</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PdsBatchAttrib</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@PDS1027</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWTestResultQuantity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventTestResultQuantity</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsOrderLineResult</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsOrderLineResult</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsUpdateBatchAttributes</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsUpdateInvBatchAttributes</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>QualityOrderId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQualityOrderId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>StandardValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTestStandardValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TestId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTestId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TestInstrumentId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTestInstrumentId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TestResult</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS113860</Label>
			<EnumType>InventTestOutcomeStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TestSequence</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTestSequence</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TestUnitId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UpperLimit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTestUpperLimit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UpperTolerance</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTestUpperTolerance</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VariableId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTestVariableId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VariableOutcomeIdStandard</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTestVariableOutcomeIdStandard</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>QualityOrderTestSequenceIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>QualityOrderId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TestSequence</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventQualityOrderTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventQualityOrderTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>QualityOrderId</Name>
					<Field>QualityOrderId</Field>
					<RelatedField>QualityOrderId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>QualityOrderIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTestInstrument</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTestInstrument</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TestInstrumentId</Name>
					<Field>TestInstrumentId</Field>
					<RelatedField>TestInstrumentId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TestInstrumentIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTestTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTestTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TestId</Name>
					<Field>TestId</Field>
					<RelatedField>TestId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TestIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTestVariable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTestVariable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VariableId</Name>
					<Field>VariableId</Field>
					<RelatedField>VariableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>VariableIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTestVariableOutcome</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124042</EntityRelationshipRole>
			<RelatedTable>InventTestVariableOutcome</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VariableId</Name>
					<Field>VariableId</Field>
					<RelatedField>VariableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VariableOutcomeIdStandard</Name>
					<SourceEDT>InventTestVariableOutcomeIdStandard</SourceEDT>
					<Field>VariableOutcomeIdStandard</Field>
					<RelatedField>VariableOutcomeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsBatchAttrib</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PdsBatchAttrib</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsBatchAttribId</Name>
					<Field>PdsBatchAttribId</Field>
					<RelatedField>PdsBatchAttribId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TestUnitId</Name>
					<Field>TestUnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>