<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReApprovalPolicyRuleTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchReApprovalPolicyRuleTable extends SysPolicyRule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the effective and expiration dates for the <c>PurchReApprovalPolicyRuleTable</c> record.
    /// </summary>
    /// <param name="_sysPolicyRecId">
    /// The <c>SysPolicy</c> record that the rule should be associated with.
    /// </param>
    public void initDates(SysPolicyRecId _sysPolicyRecId)
    {
        PurchReApprovalPolicyRuleTable  existingRuleTable;
        PurchReApprovalPolicyRuleTable  futureRuleTable;
        SysPolicyRuleType               sysPolicyRuleType  = SysPolicyRuleType::findByRuleTypePolicyType(SysPolicyRuleTypeEnum::PurchReApprovalPolicyRule, SysPolicyTypeEnum::PurchasingPolicy);
        utcdatetime                     effectiveDate = DateTimeUtil::utcNow();
        utcdatetime                     expirationDate = DateTimeUtil::maxValue();
        utcdatetime                     validFrom;

        // Check if date time gap exist
        existingRuleTable = PurchReApprovalPolicyRuleTable::findRuleForRuleType(_sysPolicyRecId, sysPolicyRuleType.RecId, effectiveDate, expirationDate);
        if (existingRuleTable
            && existingRuleTable.ValidFrom <= effectiveDate)
        {
            // Rule exist - Look for future rules
            validFrom = DateTimeUtil::addSeconds(existingRuleTable.ValidTo, 1);
            futureRuleTable = PurchReApprovalPolicyRuleTable::findRuleForRuleType(_sysPolicyRecId, sysPolicyRuleType.RecId, validFrom, DateTimeUtil::maxValue());
            while (futureRuleTable
                    && futureRuleTable.ValidFrom == validFrom)
            {
                validFrom = DateTimeUtil::addSeconds(futureRuleTable.ValidTo, 1);
                futureRuleTable = PurchReApprovalPolicyRuleTable::findRuleForRuleType(_sysPolicyRecId, sysPolicyRuleType.RecId, validFrom, DateTimeUtil::maxValue());
            }

            effectiveDate = validFrom;
        }
        else
        {
            effectiveDate = DateTimeUtil::utcNow();

            // Look for future rules
            futureRuleTable = PurchReApprovalPolicyRuleTable::findRuleForRuleType(_sysPolicyRecId, sysPolicyRuleType.RecId, effectiveDate, DateTimeUtil::maxValue());
        }

        if (futureRuleTable)
        {
            // If rule found set the validTo date one second before the validFrom date of the future rule
            expirationDate = DateTimeUtil::addSeconds(futureRuleTable.ValidFrom, -1);
        }
        else
        {
            expirationDate = DateTimeUtil::maxValue();
        }

        this.ValidFrom = effectiveDate;
        this.ValidTo = expirationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the policy related values for the <c>PurchReApprovalPolicyRuleTable</c> record.
    /// </summary>
    /// <param name="_sysPolicy">
    ///    The <c>SysPolicy</c> that the rule should be associated to.
    /// </param>
    public void initFromPolicy(RefRecId _sysPolicy)
    {
        SysPolicyRuleType   sysPolicyRuleType  = PurchReApprovalPolicyRuleTable::getSysPolicyRuleType();

        this.Policy = _sysPolicy;
        this.PolicyRuleType = sysPolicyRuleType.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchReApprovalPolicyRuleTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value for the <c>PurchReApprovalPolicyRuleTable</c> record from the
    /// <c>PurchReApprovalPolicyRuleTable</c> table.
    /// </summary>
    /// <param name="_purchReApprovalPolicyRuleTable">
    /// The record of the <c>PurchReApprovalPolicyRuleTable</c> table.
    /// </param>
    public void initFromPurchReApprovalPolicyRuleTable(PurchReApprovalPolicyRuleTable _purchReApprovalPolicyRuleTable)
    {
        this.ValidFrom = _purchReApprovalPolicyRuleTable.ValidFrom;
        this.ValidTo = _purchReApprovalPolicyRuleTable.ValidTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (!PurchReApprovalPolicyRuleTable::checkIfPolicyIsValid(this.Policy))
            {
                ret = checkFailed("@GLS180261");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfPolicyIsValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a <c>SysPolicy</c> record is valid.
    /// </summary>
    /// <param name="_sysPolicyRecId">
    /// The ID of a <c>SysPolicy</c> record.
    /// </param>
    /// <returns>
    /// true if the policy is valid; otherwise, false.
    /// </returns>
    public static boolean checkIfPolicyIsValid(SysPolicyRecId _sysPolicyRecId)
    {
        SysPolicyOrganization   sysPolicyOrganization;
        OMInternalOrganization  omInternalOrganization;

        select firstonly RecId from sysPolicyOrganization
                where sysPolicyOrganization.Policy == _sysPolicyRecId
                    && sysPolicyOrganization.ValidFrom <= DateTimeUtil::utcNow()
                    && sysPolicyOrganization.ValidTo > DateTimeUtil::utcNow()
            join RecId from omInternalOrganization
                where  sysPolicyOrganization.Organization == omInternalOrganization.RecId
                    && omInternalOrganization.OrganizationType == OMInternalOrganizationType::LegalEntity;

        return sysPolicyOrganization.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a purchase order reapproval policy rule.
    /// </summary>
    /// <param name="_sysPolicy">
    /// The <c>SysPolicy</c> record that the rule should be associated to.
    /// </param>
    /// <param name="_effectiveDate">
    /// The date where the rule should be effective; optional.
    /// </param>
    /// <param name="_expirationDate">
    /// The date where the rule should be expire; optional.
    /// </param>
    /// <returns>
    /// A <c>PurchReApprovalPolicyRuleTable</c> record.
    /// </returns>
    public static PurchReApprovalPolicyRuleTable createRule( SysPolicy   _sysPolicy,
                                                                    utcdatetime _effectiveDate = DateTimeUtil::utcNow(),
                                                                    utcdatetime _expirationDate = DateTimeUtil::maxValue())
    {
        PurchReApprovalPolicyRuleTable  purchReApprovalPolicyRuleTable;

        ttsbegin;
        purchReApprovalPolicyRuleTable.initValue();
        purchReApprovalPolicyRuleTable.initFromPolicy(_sysPolicy.RecId);

        if (prmisDefault(_effectiveDate)
            && prmisDefault(_expirationDate))
        {
            purchReApprovalPolicyRuleTable.initDates(_sysPolicy.RecId);
        }
        else
        {
            purchReApprovalPolicyRuleTable.ValidFrom = _effectiveDate;
            purchReApprovalPolicyRuleTable.ValidTo = _expirationDate;
        }

        if (purchReApprovalPolicyRuleTable.validateWrite())
        {
            purchReApprovalPolicyRuleTable.insert();
        }
        ttscommit;

        return purchReApprovalPolicyRuleTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PurchReApprovalPolicyRuleTable</c> table.
    /// </summary>
    /// <param name="_purchReApprovalPolicyRuleRecId">
    ///    The record ID of the <c>PurchReApprovalPolicyRuleTable</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PurchReApprovalPolicyRuleTable</c> table; otherwise, an empty record.
    /// </returns>
    static public PurchReApprovalPolicyRuleTable find(  PurchReApprovalPolicyRuleRecId  _purchReApprovalPolicyRuleRecId,
                                                        boolean                         _forUpdate = false)
    {
        PurchReApprovalPolicyRuleTable  purchReApprovalPolicyRuleTable;
        utcdatetime                     minDateValue = DateTimeUtil::minValue();
        utcdatetime                     maxDateValue = DateTimeUtil::maxValue();

        if (_purchReApprovalPolicyRuleRecId)
        {
            if (_forUpdate)
            {
                purchReApprovalPolicyRuleTable.selectForUpdate(_forUpdate);
            }

            select firstonly validtimestate(minDateValue, maxDateValue) purchReApprovalPolicyRuleTable
                where purchReApprovalPolicyRuleTable.RecId == _purchReApprovalPolicyRuleRecId;
        }

        return purchReApprovalPolicyRuleTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRuleForPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a record in the <c>PurchReApprovalPolicyRuleTable</c> table for a given purchase order.
    /// </summary>
    /// <param  name='_purchTable'>
    ///    A <c>PurchTable</c> record from whom to find a purchase re-approval rule.
    /// </param>
    /// <returns>
    ///    A record in the <c>PurchReApprovalPolicyRuleTable</c> table; otherwise, an empty record.
    /// </returns>
    public static PurchReApprovalPolicyRuleTable findRuleForPurchTable(PurchTable _purchTable)
    {
        SysPolicyRuleType   sysPolicyRuleType  = PurchReApprovalPolicyRuleTable::getSysPolicyRuleType();
        int64               orgArray[1];
        RecId               policyRuleRecId;

        orgArray[1] = _purchTable.companyInfo().RecId;

        policyRuleRecId = SysPolicies::getPolicyRuleID(orgArray, sysPolicyRuleType.RecId, SysPolicyTypeEnum::PurchasingPolicy);

        return PurchReApprovalPolicyRuleTable::find(policyRuleRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRuleForRuleType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a record in the <c>PurchReApprovalPolicyRuleTable</c> table for a given date interval.
    /// </summary>
    /// <param  name='_policy'>
    ///    An instance of the <c>RefRecId</c> class to denote policy.
    /// </param>
    /// <param  name='_policyRuleType'>
    ///    An instance of the <c>RefRecId</c> class to denote rule type.
    /// </param>
    /// <param  name='_effectiveDate'>
    ///    The effective date on which to search for the purchase re-approval policy rule.
    /// </param>
    /// <param  name='_expirationDate'>
    ///    The expiration date on which to search for the purchase re-approval policy rule.
    /// </param>
    /// <param  name='_forUpdate'>
    ///    A Boolean value to specify the selected record is for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PurchReApprovalPolicyRuleTable</c> table; otherwise, an empty record.
    /// </returns>
    public static PurchReApprovalPolicyRuleTable findRuleForRuleType(   RefRecId            _policy,
                                                                        RefRecId            _policyRuleType,
                                                                        ValidFromDateTime   _effectiveDate,
                                                                        ValidToDateTime     _expirationDate,
                                                                        boolean             _forUpdate = false)
    {
        PurchReApprovalPolicyRuleTable  purchReApprovalPolicyRuleTable;

        if (_forUpdate)
        {
            purchReApprovalPolicyRuleTable.selectForUpdate(_forUpdate);
        }

        select firstonly validtimestate(_effectiveDate, _expirationDate) purchReApprovalPolicyRuleTable
            order by purchReApprovalPolicyRuleTable.ValidFrom asc
            where purchReApprovalPolicyRuleTable.Policy == _policy
                && purchReApprovalPolicyRuleTable.PolicyRuleType == _policyRuleType;

        return purchReApprovalPolicyRuleTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysPolicyRuleType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the policy rule type for purchase order reapproval policy rule.
    /// </summary>
    /// <returns>
    ///    The <c>SysPolicyRuleType</c> record that matches the purchase order reapproval policy rule.
    /// </returns>
    public static SysPolicyRuleType getSysPolicyRuleType()
    {
        return SysPolicyRuleType::findByRuleTypePolicyType(SysPolicyRuleTypeEnum::PurchReApprovalPolicyRule, SysPolicyTypeEnum::PurchasingPolicy);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@GLS180264</DeveloperDocumentation>
	<Label>@GLS180253</Label>
	<TableGroup>Main</TableGroup>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Extends>SysPolicyRule</Extends>
	<Modules>ProcurementAndSourcing</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>PurchReApprovalPolicyRuleFields</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PurchReApprovalPolicyRuleFields</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields />
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchReApprovalPolicyRule</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>SysPolicyRule</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>