<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceMarkupTransTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendInvoiceMarkupTransTemplate extends VendInvoiceLineTemplate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkMarkupCategory</Name>
				<Source><![CDATA[
    public boolean checkMarkupCategory()
    {
        boolean ok = true;

        #VendInvoiceFaults

        if (this.MarkupCategory == MarkupCategory::Pcs)
        {
            ok = AifFault::checkFailedLogFault("@SYS28725", #MiscChargesPerUnitNotAllowed);
        }
        else if (this.MarkupCategory == MarkupCategory::InterCompanyPercent)
        {
            ok = AifFault::checkFailedLogFault("@SYS98798", #IntercompanyPctOnlyAllowedOnIntercompanyOrderLines);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendInvoiceMarkupTable</Name>
				<Source><![CDATA[
    public void initVendInvoiceMarkupTable(VendInvoiceTemplate _vendInvoiceTemplate)
    {
        MarkupTable markupTable = MarkupTable::find(MarkupModuleType::Vend, this.MarkupCode);

        this.ModuleType = MarkupModuleType::Vend;
        this.CurrencyCode = _vendInvoiceTemplate.CurrencyCode;
        this.TaxGroup = this.TaxGroup ? this.TaxGroup : _vendInvoiceTemplate.TaxGroup;
        //settings on the markup code override settings on the invoice template
        this.TaxItemGroup = markupTable.TaxItemGroup ? markupTable.TaxItemGroup : '';
        this.Description = markupTable.Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.ModuleType = MarkupModuleType::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        VendInvoiceDistributionTemplate vendInvoiceDistributionTemplate;

        super();

        VendInvoiceDistributionTemplate::createDefaultDistributionTemplate(this, MarkupTable::find(MarkupModuleType::vend, this.MarkupCode).CustomerLedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(VendInvoiceMarkupTransTemplate, MarkupCategory):
                ret = this.checkMarkupCategory();
                break;
            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(recId _vendInvoiceMarkupTransTemplateRecId)
    {
        boolean ret = true;

        if (!VendInvoiceMarkupTransTemplate::exist(_vendInvoiceMarkupTransTemplateRecId))
        {
            ret = checkFailed(strFmt(VendInvoiceMarkupTransTemplate::txtNotExist(), _vendInvoiceMarkupTransTemplateRecId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(recId _vendInvoiceMarkupTransTemplateRecId)
    {
        boolean found;

        found = (select firstonly RecId from vendInvoiceMarkupTransTemplate
                 where vendInvoiceMarkupTransTemplate.RecId == _vendInvoiceMarkupTransTemplateRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static VendInvoiceMarkupTransTemplate find(
        recId _vendInvoiceMarkupTransTemplateRecId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendInvoiceMarkupTransTemplate vendInvoiceMarkupTransTemplate;

        vendInvoiceMarkupTransTemplate.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vendInvoiceMarkupTransTemplate.concurrencyModel(_concurrencyModel);
        }

        select firstonly vendInvoiceMarkupTransTemplate
            where vendInvoiceMarkupTransTemplate.RecId == _vendInvoiceMarkupTransTemplateRecId;

        return vendInvoiceMarkupTransTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupMarkupCode</Name>
				<Source><![CDATA[
    public static void lookupMarkupCode(FormStringControl _ctrl)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(MarkupTable), _ctrl, true);
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(MarkupTable));
        QueryBuildRange queryBuildRange = queryBuildDataSource.addRange(fieldNum(MarkupTable, ModuleType));

        queryBuildRange.value(SysQuery::value(ModuleInventCustVend::Vend));

        sysTableLookup.addLookupfield(fieldNum(MarkupTable, MarkupCode));
        sysTableLookup.addLookupfield(fieldNum(MarkupTable, ModuleType));
        sysTableLookup.addLookupfield(fieldNum(MarkupTable, Txt));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLineNum</Name>
				<Source><![CDATA[
    public static LineNum nextLineNum(recId _vendInvoiceTemplateRecId)
    {
        VendInvoiceLineTemplate vendInvoiceLineTemplate;

        select maxof(LineNum) from vendInvoiceLineTemplate
            where vendInvoiceLineTemplate.VendInvoiceTemplate == _vendInvoiceTemplateRecId;

        return vendInvoiceLineTemplate.LineNum + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromMarkupTrans</Name>
				<Source><![CDATA[
    public static VendInvoiceMarkupTransTemplate createFromMarkupTrans(RefRecId _vendInvoiceTemplateRecId, MarkupTrans _markupTrans, RefRecId _vendInvoiceLineTemplateRecId)
    {
        VendInvoiceMarkupTransTemplate vendInvoiceMarkupTransTemplate;

        vendInvoiceMarkupTransTemplate.VendInvoiceTemplate = _vendInvoiceTemplateRecId;
        vendInvoiceMarkupTransTemplate.LineNum = _markupTrans.LineNum;
        vendInvoiceMarkupTransTemplate.MarkupCategory = _markupTrans.MarkupCategory;
        vendInvoiceMarkupTransTemplate.Description = _markupTrans.Txt;
        vendInvoiceMarkupTransTemplate.TaxGroup = _markupTrans.TaxGroup;
        vendInvoiceMarkupTransTemplate.TaxItemGroup = _markupTrans.TaxItemGroup;
        vendInvoiceMarkupTransTemplate.MarkupCode = _markupTrans.MarkupCode;
        vendInvoiceMarkupTransTemplate.AmountCur = _markupTrans.Value;
        vendInvoiceMarkupTransTemplate.ModuleType = MarkupModuleType::Vend;
        vendInvoiceMarkupTransTemplate.CurrencyCode = _markupTrans.CurrencyCode;
        vendInvoiceMarkupTransTemplate.LineRefRecId = _vendInvoiceLineTemplateRecId;

        // Call doInsert, since a distribution is created in the insert method
        vendInvoiceMarkupTransTemplate.doInsert();

        return vendInvoiceMarkupTransTemplate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@AccountsPayable:VendInvoiceMarkupTransTemplateTableDevDoc</DeveloperDocumentation>
	<FormRef>VendInvoiceMarkupTransTemplate</FormRef>
	<Label>@AccountsPayable:VendorInvoiceMarkupTransTemplate</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<Extends>VendInvoiceLineTemplate</Extends>
	<Modules>AccountsPayable</Modules>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MarkupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MarkupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MiscCharges</Name>
			<Label>@SYS8371</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MarkupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MarkupCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupCategoryType</ExtendedDataType>
			<EnumType>MarkupCategory</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MarkupCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ModuleType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupModule</ExtendedDataType>
			<EnumType>MarkupModuleType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LineRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>MarkupCodeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>MarkupCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency_CurrencyCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MarkupTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MarkupTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>MarkupTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>MarkupTable_CustMarkupTransTemplateLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MarkupCode</Name>
					<Field>MarkupCode</Field>
					<RelatedField>MarkupCode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ModuleType</Name>
					<Field>ModuleType</Field>
					<RelatedField>ModuleType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ModuleCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendInvoiceLineTemplate</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>VendInvoiceLineTemplate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LineRefRecId</Name>
					<Field>LineRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>