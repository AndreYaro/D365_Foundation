<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AgreementLineExt_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AgreementLineExt_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>agreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the <c>AgreementLine</c> record from the current <c>AgreementLineExt_RU</c> record.
    /// </summary>
    /// <returns>
    ///     A table buffer that contains the <c>AgreementLine</c> record.
    /// </returns>
    public AgreementLine agreementLine()
    {
        return AgreementLine::find(this.AgreementLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPostingProfile</Name>
				<Source><![CDATA[
    private boolean checkPostingProfile()
    {
        boolean                         ok = true;
        InventProfileCustVendLedger_RU  inventProfileCustVendLedger;
        Set                             inventProfileTypeSet = new Set(Types::Enum);
        AgreementLine                   agreementLine = this.agreementLine();
        ModuleSalesPurch                moduleType = agreementLine.agreementModuleType();

        if (this.PostingProfile                               &&
            this.PostingProfile != this.orig().PostingProfile &&
            agreementLine.inventDim().InventProfileId_RU)
        {
            while select inventProfileCustVendLedger
                order by InventProfileTypeAll asc
                where (   (moduleType == ModuleSalesPurch::Sales && inventProfileCustVendLedger.CustPostingProfile == this.PostingProfile)
                       || (moduleType == ModuleSalesPurch::Purch && inventProfileCustVendLedger.VendPostingProfile == this.PostingProfile))
            {
                switch (inventProfileCustVendLedger.InventProfileTypeAll)
                {
                    case InventProfileTypeAll_RU::Profile:
                        inventProfileTypeSet.add(InventProfile_RU::find(inventProfileCustVendLedger.InventProfileId).InventProfileType);
                        break;

                    case InventProfileTypeAll_RU::Type:
                        inventProfileTypeSet.add(inventProfileCustVendLedger.InventProfileType);
                        break;
                }
            }

            if (! inventProfileTypeSet.in(agreementLine.inventDim().inventProfile_RU().InventProfileType))
            {
                ok = checkFailed("@GLS113766");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the agreement line values from the <c>AgreementLine</c> record.
    /// </summary>
    /// <param name="_agreementLine">
    ///     A table buffer that contains the <c>AgreementLine</c> record.
    /// </param>
    public void initFromAgreementLine(AgreementLine _agreementLine)
    {
        this.AgreementLine = _agreementLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the agreement line values from the <c>InventTable</c> record.
    /// </summary>
    /// <param name="_inventTable">
    ///     A table buffer that contains the <c>InventTable</c> record.
    /// </param>
    public void initFromInventTable(InventTable _inventTable)
    {
        if (_inventTable)
        {
            this.SkipIntraCompanySync = _inventTable.SkipIntraCompanySync_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts the new record in the <c>AgreementLineExt_RU</c> table.
    /// </summary>
    public void insert()
    {
        ttsbegin;

        this.setPostingProfile();
        super();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>intracompanyOriginDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates how the agreement line was created in relation to intracompany agreements.
    /// </summary>
    /// <returns>
    ///     A string that indicates how the agreement line is created in relation to intracompany agreement line.
    /// </returns>
    display AgreementIntercompanyOrigin intracompanyOriginDisplay()
    {
        AgreementIntercompanyOrigin     agreementIntracompanyOrigin;
        DictEnum                        dictEnum = new DictEnum(enumNum(InterCompanyOrigin));

        if (AgreementLineReference::existSourceAgreementLine(this.AgreementLine, true))
        {
            agreementIntracompanyOrigin = dictEnum.value2Name(InterCompanyOrigin::Source);
        }
        if (AgreementLineReference::existDerivedAgreementLine(this.AgreementLine, true))
        {
            agreementIntracompanyOrigin = dictEnum.value2Name(InterCompanyOrigin::Derived);
        }
        return agreementIntracompanyOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPostingProfile</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the posting profile lookup.
    /// </summary>
    /// <param name="_stringControl">
    ///     The control for which lookup will be created.
    /// </param>
    /// <param name="_filterStr">
    ///     The filter string.
    /// </param>
    /// <param name="_company">
    ///     The company account identifier.
    /// </param>
    public void lookupPostingProfile(FormStringControl _stringControl, str _filterStr, CompanyId _company)
    {
        switch (this.agreementLine().agreementModuleType())
        {
            case ModuleSalesPurch::Sales:
                CustLedger::lookupPostingProfile(_stringControl, _filterStr, _company);
                break;
            case ModuleSalesPurch::Purch:
                VendLedger::lookupPostingProfile(_stringControl, _filterStr, _company);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPostingProfile</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes posting profile.
    /// </summary>
    void setPostingProfile()
    {
        AgreementLine agreementLine = this.agreementLine();
        InventProfileId_RU inventProfile = agreementLine.inventDim().InventProfileId_RU;

        if (inventProfile)
        {
            switch (agreementLine.agreementModuleType())
            {
                case ModuleSalesPurch::Sales:
                    this.PostingProfile = InventProfileCustVendLedger_RU::custPostingProfile(inventProfile);
                    break;
                case ModuleSalesPurch::Purch:
                    this.PostingProfile = InventProfileCustVendLedger_RU::vendPostingProfile(inventProfile);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the new record in the <c>AgreementLineExt_RU</c> table.
    /// </summary>
    public void update()
    {
        ttsbegin;

        this.setPostingProfile();
        super();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldnum(AgreementLineExt_RU, PostingProfile) :
                    ret = this.checkPostingProfile();
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>AgreementLineExt_RU</c> table.
    /// </summary>
    /// <param name="_agreementLineRecId">
    ///     The record ID of the <c>AgreementLine</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>AgreementLineExt_RU</c> table; otherwise, an empty record.
    /// </returns>
    static AgreementLineExt_RU findByAgreementLine(AgreementLineRecId _agreementLineRecId,
                                                   boolean            _forUpdate = false)
    {
        AgreementLineExt_RU agreementLine;

        if (_agreementLineRecId)
        {
            if (_forUpdate)
            {
                agreementLine.selectForUpdate(_forUpdate);
            }

            select agreementLine
                where agreementLine.AgreementLine == _agreementLineRecId;
        }

        return agreementLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TradeBlanketOrder</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@SYS318715</DeveloperDocumentation>
	<Label>@SYS184156</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>AgreementLine</TitleField1>
	<TitleField2>RecId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>APARShared</Modules>
	<ReplacementKey>AgreementLineIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgreementLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgreementLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Intracompany</Name>
			<Label>@GLS220550</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>intracompanyOriginDisplay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SkipIntraCompanySync</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting</Name>
			<Label>@SYS5943</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AgreementLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AgreementLineRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IntraCompanySkipUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>InterCompanySkipUpdate</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PostingProfile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipIntraCompanySync</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SkipIntraCompanySync_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AgreementLineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AgreementLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AgreementLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>AgreementLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AgreementLine</Name>
					<Field>AgreementLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>