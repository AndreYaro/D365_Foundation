<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSTmpFieldName</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSTmpFieldName extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateFieldNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts all the applicable fields into the table as records.
    /// </summary>
    /// <param name="_tableId">
    /// Used to get a list of fields from the table.
    /// </param>
    /// <param name="_addCreatedDateTime">
    /// true if the created date and time should be added, otherwise false.
    /// </param>
    /// <param name="_includeEnums">
    /// true if Enums should be included in the list; otherwise false.
    /// </param>
    /// <param name="_includeTableId">
    /// true if the Table ID should be saved on record; otherwise false.
    /// </param>
    public void populateFieldNames(
                    TableId _tableId,
                    boolean _addCreatedDateTime = true,
                    boolean _includeEnums = false,
                    boolean _includeTableId = false)
    {
        SysDictTable    dictTable = new SysDictTable(_tableId);

        ttsbegin;

        Set fields = dictTable.fields();
        SetEnumerator enumerator = fields.getEnumerator();

        while (enumerator.moveNext())
        {
            SysDictField dictField = enumerator.current();

            if (dictField.enumId() == 0 || _includeEnums)
            {
                var fieldName = dictField.name();
                var fieldLabel = dictField.label();
                
                if (!WHSProcessGuideGenericDataInquiryArrayElementLabelsFlight::instance().isEnabled())
                {
                    if (dictField.arrayIndex() > 1)
                    {
                        int arrayIndex = dictField.arrayIndex();
                        fieldName = dictField.name(DBBackend::Sql, arrayIndex);
                        fieldLabel = dictField.label(arrayIndex);
                    }
                }

                if ((!dictField.isSystem() || (_addCreatedDateTime && fieldName == literalStr(createdDateTime)))
                    && !WHSTmpFieldName::exist(this, fieldName))
                {
                    this.FieldName = fieldName;
                    this.SysFieldID = dictField.extendedFieldId();
                    this.SysTableId = _includeTableId ? dictField.tableId() : 0;
                    this.FieldLabel = fieldLabel;
                    this.insert();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static WHSTmpFieldName find(
                    FieldName       _fieldName,
                    WHSTmpFieldName _tmpFieldName,
                    boolean         _forUpdate = false)
    {
        if (_fieldName)
        {
            _tmpFieldName.selectForUpdate(_forUpdate);

            select firstonly _tmpFieldName
                where _tmpFieldName.FieldName == _fieldName;
        }

        return _tmpFieldName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFieldNames</Name>
				<Source><![CDATA[
    public static void lookupFieldNames(FormStringControl _ctrl, WHSTmpFieldName _buffer)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(WHSTmpFieldName), _ctrl);

        sysTableLookup.parmTmpBuffer(_buffer);
        sysTableLookup.addLookupfield(fieldnum(WHSTmpFieldName, FieldName), true);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(WHSTmpFieldName _tmpField, FieldName _name)
    {
        if (_name && _tmpField)
        {
            select firstonly RecId from _tmpField
                where _tmpField.FieldName == _name;
        }

        return _tmpField.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateWorkDisplayMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts display methods from <c>WHSWorkTable</c> into the table as records.
    /// </summary>
    [Hookable(true)]
    public void populateWorkDisplayMethods()
    {
        ttsbegin;

        this.SysTableId = 0;
        this.SysFieldID = 0;
        this.FieldName  = tableMethodStr(WHSWorkTable, displayFinalPutLocation);
        this.insert();

        this.FieldName  = tableMethodStr(WHSWorkTable, displayStartLocation);
        this.insert();

        this.FieldName  = tableMethodStr(WHSWorkTable, displayItems);
        this.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateWorkLineDisplayMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts display methods from <c>WHSWorkLine</c> into the table as records.
    /// </summary>
    [Hookable(false)]
    internal void populateWorkLineDisplayMethods()
    {
        ttsbegin;

        this.SysTableId = 0;
        this.SysFieldID = 0;

        var dictTable = new DictTable(tableNum(WHSWorkLine));
        int methodCount = dictTable.objectMethodCnt();        

        for (var i = 1; i <= methodCount; i++)
        {
            DictMethod dictMethod = dictTable.objectMethodObject(i);
            FieldName fieldName = dictMethod.name();

            if (dictMethod.displayType() != DisplayFunctionType::None
                && !WHSTmpFieldName::exist(this, fieldName))
            {
                this.FieldName = dictMethod.name();
                this.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTableDisplayMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts display methods from the specified table.
    /// </summary>
    /// <param name = "_tableId">Table identifier.</param>
    [Hookable(false)]
    internal void populateTableDisplayMethods(TableId _tableId)
    {
        DictTable dictTable = new DictTable(_tableId);
        if (dictTable)
        {
            int methodCount = dictTable.objectMethodCnt();

            for (int i = 1; i <= methodCount; i++)
            {
                DictMethod dm = dictTable.objectMethodObject(i);
                if (dm)
                {
                    FieldName fieldName = dm.name() + '()';
                    var displayType = dm.displayType();

                    if (displayType == DisplayFunctionType::Get
                        && !WHSTmpFieldName::exist(this, fieldName))
                    {
                        var dictType = new DictType(dm.returnId());

                        this.clear();
                        this.SysTableId = _tableId;
                        this.FieldName  = fieldName;
                        this.FieldLabel = dictType ? dictType.label() : enum2Str(dm.returnType());
                        
                        this.insert();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4445</DeveloperDocumentation>
	<Label>@WAX2283</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>FieldName</TitleField1>
	<TitleField2>RecId</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>FieldNameIdx</ClusteredIndex>
	<PrimaryIndex>FieldNameIdx</PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FieldName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FieldName</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FieldName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SysFieldID</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FieldId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SysTableId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FieldLabel</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FieldLabel</ExtendedDataType>
			<Label>@SYS28364</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FieldNameIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>FieldName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>