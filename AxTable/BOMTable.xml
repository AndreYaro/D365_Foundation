<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOMTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BOMTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the BOM (and its lines) is editable.
    /// </summary>
    /// <returns>true if the BOM can be edited; otherwise, false.</returns>
    public boolean allowEdit()
    {
        return !(this.Approved && BOMParameters::find().BlockEditing);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValid</Name>
				<Source><![CDATA[
    public boolean checkValid()
    {
        boolean     ok = true;

        if (!this.bomId)
        {
            ok = checkFailed("@SYS26336");
        }

        if (!this && this.bomId)
        {
            ok = checkFailed(strfmt(BOMTable::txtNotExist(), this.bomId));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consistencyCheckFix</Name>
				<Source><![CDATA[
    public void consistencyCheckFix(BOMconsistencyCheck_Table _bomMconsistencyCheck)
    {
        if (_bomMconsistencyCheck.parmCheckCircularity())
        {
            if(!_bomMconsistencyCheck.parmSkipCircularityCheckForPassedBOMs() || this.CheckBOM)
            {
                var circularityCheckPassed = _bomMconsistencyCheck.parmBomHierarchyCheck().checkCircularity(this.bomId);
                BOMTable::setCheckBOM(this.BOMId, circularityCheckPassed);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        if (!this.canEdit())
        {
            if (#pmfEnabled)
            {
                throw error("@PDS1491");
            }
            else
            {
                throw error("@SYS95150");
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    public void initFromInventTable(InventTable _table)
    {
        this.bomId          = _table.ItemId;
        this.ItemGroupId    = _table.itemGroupId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimIdSite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the inventory dimension ID for the specified site.
    /// </summary>
    /// <returns>
    ///    The inventory dimension ID for the specified site.
    /// </returns>
    public InventDimId inventDimIdSite()
    {
        InventDim   inventDim;

        inventDim.InventSiteId = this.SiteId;

        return InventDim::findOrCreate(inventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApproved</Name>
				<Source><![CDATA[
    public boolean isApproved()
    {
        return (this.Approved && this.Approver) || !BOMTable::isBOMApproveEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the record can be edited.
    /// </summary>
    /// <returns>
    /// true if edit is allowed; otherwise, false.
    /// </returns>
    public boolean canEdit()
    {
        return !(this.orig().Approved && BOMParameters::find().BlockEditing);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfCheckPctTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies the <c>BOM</c> records formula percent amounts to 100% for a specified <c>BOMId</c> value.
    /// </summary>
    /// <param name="_bomId">
    /// The value of the <c>BOMId</c> field of the records to be verified.
    /// </param>
    /// <returns>
    /// true if all percent enabled items amount to 100% or there are no percent enabled items; otherwise,
    /// false.
    /// </returns>
    public boolean pmfCheckPctTotal(BOMId  _bomId)
    {
        BOM bom;

        select firstOnly bom
               where     bom.BOMId == _bomId
               &&        bom.PmfPctEnable == NoYes::Yes;

        if (bom.RecId)
        {
            select sum(PmfFormulaPct) from bom
               where     bom.BOMId == _bomId
               &&        bom.PmfPctEnable == NoYes::Yes;

            if (bom.PmfFormulaPct != 100.0)
            {
                return checkFailed("@PDS1492");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfCheckZeroLineQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that all the <c>BOM</c> records have a <c>BOMQty</c> value not equal to 0 for a specified
    /// <c>BOMId</c> field.
    /// </summary>
    /// <param name="_bomId">
    /// The value of the <c>BOMId</c> field of the records to be verified.
    /// </param>
    /// <returns>
    /// true if all the records have a value in the <c>BOMQty</c> field; otherwise, false.
    /// </returns>
    public boolean pmfCheckZeroLineQty(BOMId  _bomId)
    {
        BOM bom;

        select recId from bom
               where     bom.BOMId == _bomId
               &&        bom.BOMQty == 0;

        if (bom.RecId)
        {
            return checkFailed("@PDS1493");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfCheckVersionsBatchSizeFitsLinesQtySerie</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if all formula versions assosiated with this formula have
    /// formula size consistent with Per Series of this formula lines.
    /// </summary>
    /// <returns>true if there is an alignment, otherwise false.</returns>
    public boolean pmfCheckVersionsBatchSizeFitsLinesQtySerie()
    {
        BOMVersion      bomVersion;
        BOM             bomLine;

        int countLineSizes = 0;
        BOMQtySerie qtySerie;

        while select BOMQtySerie
        from bomLine
        group by bomLine.BOMQtySerie
        where bomLine.BOMId == this.BOMId
        {
            qtySerie = bomLine.BOMQtySerie;
            countLineSizes++;
            if (countLineSizes > 1)
            {
                return checkFailed(strfmt('@PDS2050', this.BOMId));
            }
        }

        int countVersionSizes = 0;
        PmfBatchSize batchSize;

        while select PmfBatchSize
        from bomVersion
        group by bomVersion.PmfBatchSize
        where bomVersion.BOMId == this.BOMId
        {
            batchSize = bomVersion.PmfBatchSize;
            countVersionSizes++;
            if (countVersionSizes > 1)
            {
                return checkFailed(strfmt('@PDS2048', this.BOMId));
            }
        }

        if (countLineSizes == 1 && countVersionSizes == 1)
        {
            if (qtySerie != batchSize)
            {
                return checkFailed(strfmt('@PDS2049', this.BOMId, batchSize));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfUnapprove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unapproves the specified record of the <c>BOMTable</c> table.
    /// </summary>
    /// <returns>
    /// true if record is unapproved ; otherwise, false.
    /// </returns>
    public boolean pmfUnapprove()
    {
        if (BOMParameters::find().BlockRemoveApproval)
        {
            return false;
        }

        ttsBegin;
        this.selectForUpdate(true);

        this.Approved = false;
        this.Approver = 0;
        this.update();

        this.selectForUpdate(false);
        ttsCommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        BOMTable this_orig = this.orig();

        if (!this.canEdit())
        {
            if (#pmfEnabled)
            {
                throw error("@PRO2418");
            }
            else
            {
                throw error("@SYS95147");
            }
        }

        ttsbegin;

        super();

        if (   this.RecId
            && this.SiteId != this_orig.SiteId)
        {
            this.updateSite();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the inventory dimensions for a Bill of Material (BOM) on all its BOM lines and BOM version
    ///    with the site on the BOM.
    /// </summary>
    public void updateSite()
    {
        ttsbegin;

        BOM bomLine;
        InventDim oldInventDim;
        InventDim newInventDim;

        // Update BOM lines
        while select forupdate bomId, ItemId, InventDimId from bomLine
            where   bomLine.bomId == this.bomId
            join    oldInventDim
            where   oldInventDim.InventDimId == bomLine.InventDimId
        {
            if (oldInventDim.InventSiteId != this.SiteId)
            {
                newInventDim.initFromInventDim(oldInventDim);
                newInventDim.InventSiteId = this.SiteId;

                // Only change the InventLocationId if site is different
                if (oldInventDim.InventLocationId 
                    && InventLocation::find(oldInventDim.InventLocationId).InventSiteId != this.SiteId)
                {
                    // default the new warehouse to the one from the default order settings - only if it matches the new site
                    var newInventLocationId = InventItemInventSetup::find(bomLine.ItemId, InventDim::findOrCreate(newInventDim).InventDimId, false).inventLocationId();
                    if (InventLocation::find(newInventLocationId).InventSiteId != newInventDim.InventSiteId)
                    {
                        newInventLocationId = '';
                    }

                    newInventDim.InventLocationId = newInventLocationId;
                }

                InventDimId newInventDimId = InventDim::findOrCreate(newInventDim).InventDimId;

                bomLine.InventDimId = newInventDimId;

                bomLine.update();
            }
        }

        //If the site is specified in the BOM, all BOM versions must be updated with the new site
        //If the site is not specified(cleared) in the BOM, BOM versions should keep their respective sites
        if (this.SiteId)
        {
            BOMVersion bomVersionUpdate;

            // Update BOM version
            while select forupdate bomVersionUpdate
                where bomVersionUpdate.bomId == this.bomId
                join oldInventDim
                    where oldInventDim.InventDimId  == bomVersionUpdate.InventDimId
                       && oldInventDim.InventSiteId != this.SiteId
            {
                newInventDim = oldInventDim.data();
                newInventDim.InventSiteId = this.SiteId;
                newInventDim = InventDim::findOrCreate(newInventDim);
                bomVersionUpdate.InventDimId = newInventDim.InventDimId;
                if (!bomVersionUpdate.validateWrite())
                {
                    throw error("@SYS18447");
                }
                bomVersionUpdate.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret && FormDataUtil::getFormDataSource(this) && this.orig().Approved && BOMParameters::find().BlockEditing)
        {
            if (#pmfEnabled)
            {
                throw error("@PDS1491");
            }
            else
            {
                throw error("@SYS95150");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(
        fieldName _fieldName,
        int       _arrayIndex = 1)
    {
        boolean ret = true;

        switch (_fieldName)
        {
            case fieldstr(BOMTable, SiteId) :
                if (FormDataUtil::isFormDataSource(this) && this.RecId && (BOMVersion::existBomIdForAnyItem(this.BOMId) || BOM::existBOMId(this.BOMId)))
                {
                    str errorMessage = "@SCM:ValidationMessage_BOMTable_UpdateSiteAndWarehouseOnLines";
                    if (Box::yesNo(errorMessage,DialogButton::Yes,"@SYS109631","") == DialogButton::Yes)
                    {
                        // Force save of record -> BOMTable.update() -> related tables will be updated
                        FormDataUtil::getFormDataSource(this).write();
                        // Force reread to avoid working with an old buffer
                        FormDataUtil::getFormDataSource(this).reread();
                    }
                    else
                    {
                        ret = false;
                    }
                }
                break;
            case fieldstr(BOMTable, Approver) :
                if (this.isApproved() && !HcmWorkerLookup::newWorkersInCurrentCompany().validateWorker(this.Approver))
                {
                    ret = checkFailed(strfmt("@SYS329631", fieldpname(BOMTable, Approver)));
                }
                break;
        }

        ret = ret && super(_fieldName, _arrayIndex);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret && FormDataUtil::getFormDataSource(this) && this.orig().Approved && BOMParameters::find().BlockEditing)
        {
            if (#pmfEnabled)
            {
                ret = checkFailed("@PRO2418");
            }
            else
            {
                ret = checkFailed("@SYS95147");
            }
        }

        if ( ret && this.Approved && !this.Approver )//if it's approved, it needs an approver
        {
            ret = checkFailed(strfmt("@SYS32810", fieldpname(BOMTable, Approver)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(BOMId _bomNum)
    {
        if (_bomNum && !BOMTable::exist(_bomNum))
        {
            return checkFailed(strfmt(BOMTable::txtNotExist(),_bomNum));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(BOMId _bomId)
    {
        return (select bomTable
                    index hint NumIdx
                    where bomTable.bomId == _bomId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static BOMTable find(
        BOMId   _bomId,
        boolean _forUpdate = false)
    {
        BOMTable     bomTable;

        if (!_bomId)
        {
            return bomTable;
        }

        bomTable.selectForUpdate(_forUpdate);

        select bomTable
            index hint NumIdx
            where bomTable.bomId == _bomId;
        return bomTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>BOMTable</c> table based on the <c>RecId</c> field.
    /// </summary>
    /// <param name="_recId">
    /// The value of the <c>RecId</c> field to look for.
    /// </param>
    /// <param name="_forUpdate">
    /// Determines if the found record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// The found record if any.
    /// </returns>
    static BOMTable findRecId(recId _recId, boolean _forUpdate = false)
    {
        BOMTable  bomTable;

        if (_recId)
        {
            bomTable.selectForUpdate(_forUpdate);

            select firstonly bomTable
                where bomTable.RecId == _recId;
        }

        return bomTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBOMApproveEnabled</Name>
				<Source><![CDATA[
    // Is the BOM approve system approved ?
    public static boolean isBOMApproveEnabled()
    {
        return isConfigurationkeyEnabled(configurationkeynum(BOMApprove));
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefBomTable</Name>
				<Source><![CDATA[
    public static void jumpRefBomTable(
        BOMTable _bomTable,
        Object   _caller,
        str      _parm = '')
    {
        Args    args;
        FormRun fr;

        args = new Args(formstr(BomTable));
        args.caller(_caller);
        args.parm(_parm);
        args.record(_bomTable);

        // Menu item info will be used by security framework, when setting access rights to form datasources
        args.menuItemType(MenuItemType::Display);
        args.menuItemName(menuitemDisplayStr(BomTable));

        fr = classfactory.formRunClass(args);
        fr.init();
        fr.run();
        fr.dataSource().findRecord(_bomTable);
        fr.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBOMId</Name>
				<Source><![CDATA[
    public static void lookupBOMId(
        FormStringControl _ctrl,
        ItemGroupId       _itemGroupId,
        InventSiteId      _siteId)
    {
        Args                    args;
        Object                  formRun;

        args = new Args();
        args.name(formstr(BOMIdLookup));
        args.caller(_ctrl);

        formRun = classfactory.formRunClass(args);

        // Initialize form with data before calling init method.
        formRun.setItemGroupId(_itemGroupId);
        formRun.setSiteId(_siteId);

        formRun.init();

        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFormulaId</Name>
				<Source><![CDATA[
    public static void lookupFormulaId(
        FormStringControl _ctrl,
        InventTable       _inventTable,
        ItemGroupId       _itemGroupId,
        InventSiteId      _siteId)
    {
        Args    args;
        Object  formRun;

        args = new Args();
        args.name(formstr(BOMIdLookup));
        args.caller(_ctrl);
        args.record(_inventTable);

        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.setItemGroupId(_itemGroupId);
        formRun.setSiteId(_siteId);

        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFormulaItemId</Name>
				<Source><![CDATA[
    public static void lookupFormulaItemId(
        FormStringControl _ctrl,
        PmfBOMFormula _pmfBOMFormula = PmfBOMFormula::BOM)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tablenum(BOMTable), _ctrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tablenum(BOMTable));

        queryBuildDataSource.addRange(fieldnum(BOMTable,PmfBOMFormula)).value(queryValue(_pmfBOMFormula));

        sysTableLookup.addLookupfield(fieldnum(BOMTable,bomId));
        if (_pmfBOMFormula == PmfBOMFormula::Formula)
        {
            sysTableLookup.setLabel("@PRO1115");
        }
        sysTableLookup.addLookupfield(fieldnum(BOMTable,Name));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupProductBOMId_CN</Name>
				<Source><![CDATA[
    /// <summary>
    ///      Lookups BOM Ids. If a product Id is specified. Only list the BOM
    ///  IDs which are related to this product.
    /// </summary>
    /// <param name="_ctrl">
    ///     The current contorl to lookup.
    /// </param>
    /// <param name="_productId">
    ///     Product Id.
    /// </param>
    public static void lookupProductBOMId_CN(
        FormStringControl   _ctrl,
        ItemIdProduction    _productId)
    {
        SysTableLookup          sysTableLookup  = SysTableLookup::newParameters(tablenum(BOMTable), _ctrl);
        Query                   query           = new Query();
        QueryBuildDataSource    qbds1;
        QueryBuildDataSource    qbds2;

        sysTableLookup.addLookupfield(fieldnum(BOMTable, bomId), true);
        sysTableLookup.addLookupfield(fieldnum(BOMTable, Name));

        qbds1 = query.addDataSource(tablenum(BOMTable));

        // if a product id is specified, only show the BOMs related to this product
        if (_productId)
        {
            qbds2 = qbds1.addDataSource(tablenum(BOMVersion));
            qbds2.relations(true);
            qbds2.addRange(fieldnum(BOMVersion, ItemId)).value(_productId);
        }

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeq</Name>
				<Source><![CDATA[
    public static NumberSeq numberSeq(
        boolean _makeDecisionLater          = false,
        boolean _dontThrowOnMissingRefSetUp = false)
    {
        return NumberSeq::newGetNum(BOMParameters::numRefBOMId(),
                                    _makeDecisionLater,
                                    _dontThrowOnMissingRefSetUp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfNumberSeqFormula</Name>
				<Source><![CDATA[
    public static NumberSeq pmfNumberSeqFormula(
        boolean _makeDecisionLater          = false,
        boolean _dontThrowOnMissingRefSetUp = false)
    {
        return NumberSeq::newGetNum(BOMParameters::pmfNumRefFormulaId(), _makeDecisionLater, _dontThrowOnMissingRefSetUp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfUnapproveVersionByBOMId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unapproves the specified record of the <c>BOMVersion</c> table.
    /// </summary>
    /// <param name="_bomId">
    /// The value of the <c>BOMId</c> field of the record to be unapproved.
    /// </param>
    /// <returns>
    /// true if a record with the specified <c>BOMId</c> value exists and the record set is updated;
    /// otherwise, false.
    /// </returns>
    public static boolean pmfUnapproveVersionByBOMId(BOMId _bomId)
    {
        BOMVersion bomVersion;

        if (BOMParameters::find().BlockRemoveApproval)
        {
            return checkFailed("@PDS1516");
        }

        if (!(select bomVersion where bomVersion.bomId == _bomId).RecId)
        {
            return false;
        }

        while select forUpdate bomVersion
            where bomVersion.BOMId == _bomId
            &&    bomVersion.Approved == NoYes::Yes
        {
            bomVersion.Active = false;
            bomVersion.Approved = false;
            bomVersion.Approver = 0;

            //
            //using the same logic as the bomVersionApprove.run method to update
            // this is a special case, we are removing the approval
            // so we need to bypass table validation
            //
            bomVersion.doUpdate();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCheckBOM</Name>
				<Source><![CDATA[
    public static void setCheckBOM(
        BOMId    _bomId,
        boolean  _ok)
    {
        BOMTable    bomTable;

        ttsbegin;

        bomTable    = BOMTable::find(_bomId,true);

        if (bomTable.RecId)
        {
            bomTable.CheckBOM   = !_ok;
            bomTable.doUpdate();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS21841";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BOM</ConfigurationKey>
	<DeveloperDocumentation>@SYS124098</DeveloperDocumentation>
	<FormRef>PmfBomFormulaGoToMainTable</FormRef>
	<Label>@SYS3076</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>BOMId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>NumIdx</ClusteredIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProductInformationManagement</Modules>
	<PrimaryIndex>NumIdx</PrimaryIndex>
	<ReplacementKey>NumIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>PDSBatchAttribTransfer</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PDSBatchAttribTransfer</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>BOM</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>BOM</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>BOMConfigRoute</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>BOMConfigRoute</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>BOMConfigRule</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>BOMConfigRule</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>BOMVersion</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>BOMVersion</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation>BOMTable</Relation>
			<Table>CaseAssociation</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Approver</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Approved</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOMId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CheckBOM</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SiteId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CaseMoreInformation</Name>
			<Label>@SYS314356</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Approver</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Approved</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfBOMFormula</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@Sys6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@Sys5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOMId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PmfBomFormula</Name>
			<Label>@SYS672</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PmfBOMFormula</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Approved</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Approver</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Approved</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>BOMApprove</ConfigurationKey>
			<Label>@SYS10158</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Approver</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ConfigurationKey>BOMApprove</ConfigurationKey>
			<ExtendedDataType>BOMRouteApprover</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOMId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CheckBOM</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS24056</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PmfBOMFormula</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PmfBOMFormula</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NumIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BOMId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WorkerApprover</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BOM</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Approver</Name>
					<Field>Approver</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventItemGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventItemGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemGroupId</Name>
					<Field>ItemGroupId</Field>
					<RelatedField>ItemGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SiteId</Name>
					<Field>SiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SiteIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>