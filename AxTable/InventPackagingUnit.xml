<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventPackagingUnit</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventPackagingUnit extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkItemRelation</Name>
				<Source><![CDATA[
    boolean  checkItemRelation()
    {
        boolean  ok = true;

        switch (this.ItemCode)
        {
            case TableGroupAll::Table:
                if (! InventTable::exist(this.ItemRelation))
                {
                    ok = checkFailed("@SYS17075");
                }
                break;

            case TableGroupAll::GroupId:
                if (! InventPackagingGroup::exist(this.ItemRelation))
                {
                    ok = checkFailed("@SYS17075");
                }
                break;

            case TableGroupAll::All:
                if (this.ItemRelation)
                {
                    ok = checkFailed("@SYS17075");
                }
                break;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void initValue()
    {
        super();

        this.Factor = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    InventDim inventDim(boolean  _forUpdate = false)
    {
        return InventDim::find(this.InventDimId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    ItemId itemId()
    {
        if (this.ItemCode == TableGroupAll::Table)
        {
            return this.ItemRelation;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    void  update()
    {
        if (this.ItemCode == TableGroupAll::All)
        {
            this.ItemRelation   = '';
            this.InventDimId    = InventDim::inventDimIdBlank();
        }

        if (this.ItemCode == TableGroupAll::GroupId)
        {
            this.InventDimId    = InventDim::inventDimIdBlank();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean  validateField(FieldId  _fieldId)
    {
        boolean  ret;

        ret = super(_fieldId);

        switch (_fieldId)
        {
            case(fieldNum(InventPackagingUnit, ItemRelation)):
                ret = this.checkItemRelation();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean ret = super() && this.checkItemRelation();

        if (this.ItemCode == TableGroupAll::Table && this.ItemRelation)
        {
            ret = ret && InventTable::checkProductDimensions(this.ItemRelation, this.inventDim());
        }
        else if (this.InventDimId != InventDim::findOrCreateBlank().inventDimId)
        {
            ret = checkFailed("@SCM:InventPackagingUnitDimensionsRequireItemError");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPackingUnitQty</Name>
				<Source><![CDATA[
    static InventPackingUnitQty calcPackingUnitQty(
        InventPackingUnit   _packingUnit,
        InventQty           _qtyOrdered,
        ItemId              _itemId,
        InventDim           _inventDim)
    {
        InventPackingUnitQty packingUnitQty;
        InventPackingUnitQty tmpPackingUnitQty;
        InventPackagingUnit  inventPackagingUnit;

        if (_packingUnit && _qtyOrdered && _itemId)
        {
            inventPackagingUnit = InventPackagingUnit::findFirstUnit(_itemId, _inventDim, _packingUnit);

            if (inventPackagingUnit)
            {
                if (inventPackagingUnit.Factor)
                {
                    packingUnitQty = _qtyOrdered / inventPackagingUnit.Factor;
                }
                else
                {
                    packingUnitQty = _qtyOrdered;
                }
                if (packingUnitQty)
                {
                    // any2int returns the integer part of a number, with sign. No rounding is applied.
                    // E.g:
                    //  any2int(1.9)  = 1    any2int(1.2) = 1       any2int(0.9) = 0
                    //  any2int(-1.9) = -1   any2int(-1.2) = -1     any2int(-0.9) = 0
                    tmpPackingUnitQty = any2int(packingUnitQty);

                    if (packingUnitQty > tmpPackingUnitQty)
                    {
                        packingUnitQty = tmpPackingUnitQty + 1;
                    }
                    else if (packingUnitQty < tmpPackingUnitQty)
                    {
                        packingUnitQty = tmpPackingUnitQty - 1;
                    }
                }
            }
        }
        return packingUnitQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirst_LV</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first specified record in the <c>InventPackagingUnit</c> table
    /// independently of packing unit.
    /// </summary>
    /// <param name="_itemId">
    /// The <c>ItemId</c> of the <c>InventPackagingUnit</c> record to find.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record buffer to find <c>InventPackagingUnit</c> record.
    /// </param>
    /// <returns>
    /// A record in the <c>InventPackagingUnit</c> table; otherwise, an empty record.
    /// </returns>
    static InventPackagingUnit findFirst_LV (ItemId       _itemId,
                                                   InventDim    _inventDim)
    {
        InventPackagingUnit inventPackagingUnit;
        InventTable         inventTable;
        InventDim           inventDim;
        InventDimParm       inventDimParm;

        if (_itemId)
        {
            inventTable = InventTable::find(_itemId);

            inventDimParm = EcoResProductDimGroupSetup::newInventTable(inventTable).inventDimParmActiveDimensions();
            inventDim.data(_inventDim);
            inventDim.clearNotSelectedDim(inventDimParm);
            inventDim = InventDim::findDim(inventDim);

            if (inventDim.InventDimId && inventDim.InventDimId != InventDim::inventDimIdBlank())
            {
                select firstonly inventPackagingUnit
                       where inventPackagingUnit.ItemCode     == TableGroupAll::Table   &&
                             inventPackagingUnit.ItemRelation == _itemId                &&
                             inventPackagingUnit.InventDimId  == inventDim.InventDimId;
            }

            if (! inventPackagingUnit)
            {
                select firstonly inventPackagingUnit
                       where inventPackagingUnit.ItemCode     == TableGroupAll::Table          &&
                             inventPackagingUnit.ItemRelation == _itemId                       &&
                             inventPackagingUnit.InventDimId  == InventDim::inventDimIdBlank();
            }

            if (! inventPackagingUnit)
            {
                select firstonly inventPackagingUnit
                       where inventPackagingUnit.ItemCode     == TableGroupAll::GroupId       &&
                             inventPackagingUnit.ItemRelation == inventTable.PackagingGroupId;
            }

            if (! inventPackagingUnit)
            {
                select firstonly inventPackagingUnit
                       where inventPackagingUnit.ItemCode == TableGroupAll::All;
            }
        }

        return inventPackagingUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstUnit</Name>
				<Source><![CDATA[
    static InventPackagingUnit findFirstUnit(
        ItemId              _itemId,
        InventDim           _inventDim,
        InventPackingUnit   _unit)
    {
        InventPackagingUnit inventPackagingUnit;
        InventTable         inventTable;
        InventDim           inventDim;
        InventDimParm       inventDimParm;

        if (_itemId)
        {
            inventTable = InventTable::find(_itemId);

            inventDimParm = EcoResProductDimGroupSetup::newInventTable(inventTable).inventDimParmActiveDimensions();
            inventDim.data(_inventDim);
            inventDim.clearNotSelectedDim(inventDimParm);
            inventDim = InventDim::findDim(inventDim);

            if (inventDim.InventDimId && inventDim.InventDimId != InventDim::inventDimIdBlank())
            {
                select firstonly inventPackagingUnit
                       where inventPackagingUnit.ItemCode     == TableGroupAll::Table
                          && inventPackagingUnit.ItemRelation == _itemId
                          && inventPackagingUnit.InventDimId  == inventDim.InventDimId
                          && inventPackagingUnit.Unit         == _unit;
            }

            if (!inventPackagingUnit)
            {
                select firstonly inventPackagingUnit
                       where inventPackagingUnit.ItemCode     == TableGroupAll::Table
                          && inventPackagingUnit.ItemRelation == _itemId
                          && inventPackagingUnit.InventDimId  == InventDim::inventDimIdBlank()
                          && inventPackagingUnit.Unit         == _unit;
            }

            if (!inventPackagingUnit)
            {
                select firstonly inventPackagingUnit
                       where inventPackagingUnit.ItemCode     == TableGroupAll::GroupId
                          && inventPackagingUnit.ItemRelation == inventTable.PackagingGroupId
                          && inventPackagingUnit.Unit         == _unit;
            }

            if (!inventPackagingUnit)
            {
                select firstonly inventPackagingUnit
                       where inventPackagingUnit.ItemCode == TableGroupAll::All
                          && inventPackagingUnit.Unit     == _unit;
            }
        }

        return inventPackagingUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSalesPackingUnit</Name>
				<Source><![CDATA[
    static InventPackingUnit findSalesPackingUnit(
        ItemId      _itemId,
        InventDim   _inventDim)
    {
        InventPackingUnit   packingUnit;

        if (_itemId  &&  isConfigurationkeyEnabled(configurationKeyNum(InventPackaging)))
        {
            packingUnit = InventPackagingUnit::findSalesPackingUnitServer(_itemId, _inventDim);
        }

        return packingUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSalesPackingUnitServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a sales invent packing unit.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID for which the packing unit should be found.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDimId</c> value for which the packing unit should be found.
    /// </param>
    /// <returns>
    /// An <c>InventPackingUnit</c> object.
    /// </returns>
    /// <remarks>
    /// This method is set to run on the server to reduce RPC calls.
    /// </remarks>

    static InventPackingUnit findSalesPackingUnitServer(
        ItemId      _itemId,
        InventDim   _inventDim)
    {
        InventPackingUnit   packingUnit;
        InventPackingUnit   salesOrderUnit;
        InventPackagingUnit inventPackagingUnit;

        salesOrderUnit = InventTableModule::find(_itemId, ModuleInventPurchSales::Sales).UnitId;
        inventPackagingUnit = InventPackagingUnit::findFirstUnit(_itemId, _inventDim, salesOrderUnit);
        if (inventPackagingUnit)
        {
            packingUnit = inventPackagingUnit.Unit;
        }

        return packingUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packingUnitWeightForMaterialTrans</Name>
				<Source><![CDATA[
    static InventPackingUnitWeight packingUnitWeightForMaterialTrans(InventPackagingMaterialTrans _inventPackagingMaterialTrans)
    {
        InventPackagingUnit           inventPackagingUnit;
        InventPackagingUnitMaterial   inventPackagingUnitMaterial;
        InventPackingUnitWeight       packingUnitWeight;

        inventPackagingUnit = InventPackagingUnit::findFirstUnit(_inventPackagingMaterialTrans.ItemId,
                                                                 _inventPackagingMaterialTrans.inventDim(),
                                                                 _inventPackagingMaterialTrans.PackingUnit);

        if (inventPackagingUnit)
        {
            inventPackagingUnitMaterial = InventPackagingUnitMaterial::find(inventPackagingUnit.RecId,
                                                                        _inventPackagingMaterialTrans.PackMaterialCode);
            packingUnitWeight = inventPackagingUnitMaterial.PackingUnitWeight;
        }

        return packingUnitWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultItemRelation</Name>
				<Source><![CDATA[
    private void defaultItemRelation()
    {
        if (this.isFieldSet(fieldNum(InventPackagingUnit, ItemCode)))
        {
            this.ItemRelation = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return  [
            [fieldNum(InventPackagingUnit, ItemRelation),
                [fieldNum(InventPackagingUnit, ItemCode)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super (_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventPackagingUnit, ItemRelation): this.defaultItemRelation(); break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>InventPackaging</ConfigurationKey>
	<DeveloperDocumentation>@SYS123990</DeveloperDocumentation>
	<FormRef>inventpackagingunit</FormRef>
	<Label>@SYS73009</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>ItemCode</TitleField1>
	<TitleField2>Unit</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>PackingUnitIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>PackingUnitIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>InventPackagingUnitMaterial</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventPackagingUnitMaterial</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Unit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Factor</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Unit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ConversionFactorFromTheInventoryUnit</Name>
			<Label>@SYS72982</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Factor</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Unit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PackingUnit</Name>
			<Label>@SYS72977</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Unit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Factor</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReturnablePackage_PL</Name>
			<Label>@GLS110002</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PackageId_PL</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Factor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPackingUnitFactor</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ItemCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPackagingItemCode</ExtendedDataType>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemRelation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPackagingItemRelation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PackageId_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlPackageId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Unit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPackingUnit</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PackingUnitIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Unit</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventPackagingGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123991</EntityRelationshipRole>
			<RelatedTable>InventPackagingGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ItemCode</Name>
					<Field>ItemCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemRelation</Name>
					<Field>ItemRelation</Field>
					<RelatedField>PackagingGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123828</EntityRelationshipRole>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ItemCode</Name>
					<Field>ItemCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemRelation</Name>
					<Field>ItemRelation</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PlInventPackageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PlInventPackageTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PackageId_PL</Name>
					<SourceEDT>PlPackageId</SourceEDT>
					<Field>PackageId_PL</Field>
					<RelatedField>PackageId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PackageIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Unit</Name>
					<Field>Unit</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>