<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPOSSeedData</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;

public class RetailPOSSeedData extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>CalculateSeedData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the POS seed data.
    /// </summary>
    /// <param name="_storeId">
    /// Calculates for the given store Id.
    /// </param>
    /// <param name="_terminalId">
    /// Calculates for the given terminal Id.
    /// </param>
    public static void CalculateSeedData(
            RetailStoreId _storeId,
            RetailTerminalId _terminalId)
    {
        Map                         seedDataMap;
        MapEnumerator               me;
        RetailPOSSeedData           retailPOSSeedData;

        seedDataMap = RetailPOSSeedData::GenerateSeedDataFromRetailTrans(_storeId, _terminalId);
        ttsBegin;

        delete_from retailPOSSeedData
            where retailPOSSeedData.StoreNumber == _storeId &&
                  retailPOSSeedData.TerminalID == _terminalId;

        me = new MapEnumerator(seedDataMap);
        while (me.moveNext())
        {
            RetailPOSSeedData::SetSeedDataValue(_storeId, _terminalId, me.currentKey(), me.currentValue() + 1);
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetSeedDataValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the POS seed data value for the given Store Id, terminal Id and type.
    /// </summary>
    /// <param name="_storeId">
    /// Get the POS seed data for given Store Id.
    /// </param>
    /// <param name="_terminalId">
    /// Get the POS seed data for given terminal Id.
    /// </param>
    /// <param name="_type">
    /// Get the POS seed data for given type.
    /// </param>
    /// <returns>
    /// Returns the POS seed data value from the table <c>RetailPOSSeedData</c>.
    /// </returns>
    public static RetailPOSSeedDataValue GetSeedDataValue(RetailStoreId _storeId, RetailTerminalId _terminalId, RetailPOSSeedDataType _type)
    {
        #define.DefaultNextSeedValue(1)

        RetailPOSSeedData retailPosSeedData;

        select firstonly DataValue from retailPosSeedData
            where retailPosSeedData.StoreNumber == _storeId &&
                  retailPosSeedData.TerminalID == _terminalId &&
                  retailPosSeedData.DataType == _type;

        if (!retailPosSeedData)
        {
            return #DefaultNextSeedValue;
        }
        else
        {
            return retailPosSeedData.DataValue;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetSeedDataValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check for the required record in <c>RetailPOSSeedData</c> table, if it does not exist insert the record.
    /// </summary>
    /// <param name="_storeId">
    /// Check for the given Store Id.
    /// </param>
    /// <param name="_terminalId">
    /// Check for the given terminal Id.
    /// </param>
    /// <param name="_type">
    /// Check for the given type.
    /// </param>
    /// <param name="_value">
    /// Check for the given value.
    /// </param>
    /// <remarks>
    /// If the record exists, update the record.
    /// </remarks>
    public static void SetSeedDataValue(
            RetailStoreId _storeId,
            RetailTerminalId _terminalId,
            RetailPOSSeedDataType _type,
            RetailPOSSeedDataValue _value)
    {
        RetailPOSSeedData retailPosSeedData;

        ttsBegin;

        select forupdate retailPosSeedData
            where retailPosSeedData.StoreNumber == _storeId &&
                  retailPosSeedData.TerminalID == _terminalId &&
                  retailPosSeedData.DataType == _type;

        if (!retailPosSeedData)
        {
            retailPosSeedData.StoreNumber = _storeId;
            retailPosSeedData.TerminalID = _terminalId;
            retailPosSeedData.DataType = _type;
            retailPosSeedData.DataValue = _value;

            retailPosSeedData.insert();
        }
        else
        {
            retailPosSeedData.DataValue = _value;
            retailPosSeedData.update();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GenerateSeedDataFromRetailTrans</Name>
				<Source><![CDATA[
    private static Map GenerateSeedDataFromRetailTrans(
            RetailStoreId _storeId,
            RetailTerminalId _terminalId)
    {
        RetailReceiptMasks          receiptMasks;
        boolean                     isMaskIndependent;
        Map                         receiptMaskMap;
        Map                         seedDataMap;
        RetailStoreTable            storeTable;
        int                         start, length, maskLength;

        str transIdDelimiter = "-";
        str transactionPrefix = _storeId + transIdDelimiter + _terminalId + transIdDelimiter;
                     
        receiptMaskMap = new Map(Types::Enum, Types::Container);
        while select receiptMasks
            exists join storeTable
                where receiptMasks.FuncProfileId == storeTable.functionalityProfile &&
                      storeTable.StoreNumber == _storeId
        {
            maskLength = strLen(receiptMasks.Mask);
            start  = strFind(receiptMasks.Mask, "#", 1, maskLength);
            length =  strFind(receiptMasks.Mask, "#", maskLength + 1, start - maskLength) - start + 1;
            receiptMaskMap.insert(receiptMasks.ReceiptTransType, [receiptMasks.IsIndependent, start, length]);
        }

        seedDataMap = new Map(Types::Enum, Types::Int64);

        seedDataMap = RetailPOSSeedData::getSeedDataInMap(_storeId, _terminalId, transactionPrefix, seedDataMap, receiptMaskMap);

        return seedDataMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSeedDataInMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get seed data in map.
    /// </summary>
    /// <param name="_storeId">
    /// Check for the given Store Id.
    /// </param>
    /// <param name="_terminalId">
    /// Check for the given terminal Id.
    /// </param>
    /// <param name="_transactionPrefix">
    /// Value for transaction prefix.
    /// </param>
    /// <param name="_seedDataMap">
    /// Seed data map object.
    /// </param>
    /// <param name="_receiptMaskMap">
    /// Seed data map object.
    /// </param>
    /// <returns>
    /// Return the seed data map.
    /// </returns>
    protected static Map getSeedDataInMap(RetailStoreId _storeId,
                                        RetailTerminalId _terminalId,
                                        str _transactionPrefix,
                                        Map _seedDataMap,
                                        Map _receiptMaskMap)
    {
        RetailTransactionTable      transactionTable;
        RetailPosBatchTable         posBatchTable;
        SalesTable                  salesTable;
        SalesQuotationTable         salesQuote;
        RetailFiscalDocument_BR     retailFiscalDocument;
        int64                       retailFiscalDocumentNumber;
        RetailTerminalTable         retailTerminalTable;
        FiscalDocumentSeries_BR     fiscalDocumentSeries;
        const str                   emptyStr = '';
        RetailStoreTable            currentStore = RetailStoreTable::find(_storeId);
        RecId                       channel = currentStore.Recid;
        //This will always get the latest reset Date even it has recurrence every year.
        RetailReceiptResetConfiguration receiptResetConfiguration = RetailReceiptResetConfiguration::findByProfileId(currentStore.functionalityProfile);
        int                         currentSessionId = sessionId();
        date                        receiptResetDate;
        if (receiptResetConfiguration)
        {
            receiptResetDate = receiptResetConfiguration.currentEffectiveResetDate(true);
        }

        // Make sure that the queries go to DB, avoid using cache.
        transactionTable.disableCache(true);
        salesTable.disableCache(true);
        salesQuote.disableCache(true);
        retailTerminalTable.disableCache(true);

        // Find the last transaction ID which is a number or matches the pattern "_transactionPrefix{A number}".
        // Only search for last 10 records, usually it should be good enough.
        // May still have some problem, but it's the balance of the performance and correctness we choose before transaction id is redesigned.
        int64 seedData = 0;
        while select firstFast firstonly10 TransactionID from transactionTable
            order by transactionTable.transDate desc, transactionTable.transTime desc
            where transactionTable.Channel == channel
                && transactionTable.Store == _storeId
                && transactionTable.terminal == _terminalId
        {
            str transactionId = transactionTable.transactionId;

            // When transaction id is numeric
            if (match('^:d+$', transactionId) == 1)
            {
                int64 seedDataValue = any2Int64(transactionId);
                seedData = max(seedDataValue, seedData);
            }
            else
            {
                // When transaction id is not numeric and have special prefix, we should make sure that the prefix of transaction id is expected.
                // If the prefix of transaction id is not expected (such as the id of recalled transaction from other device) and the store number is numeric, any2int64 will just return the store number without this check.
                if (strLen(strReplace(transactionId, _transactionPrefix, emptyStr)) < strLen(transactionId))
                {
                    int64 seedDataValue = any2Int64(strReplace(transactionId, _transactionPrefix, emptyStr));
                    seedData = max(seedDataValue, seedData);
                }
            }
        }

        _seedDataMap = RetailPOSSeedData::UpdateSeedDatainMap(RetailPOSSeedDataType::TransactionId, seedData, _seedDataMap);

        // Find the last shift ID
        select maxof(BatchID) from transactionTable
            where transactionTable.Channel == channel
                && transactionTable.Store == _storeId
                && transactionTable.BatchTerminalId == _terminalId
                && transactionTable.BatchID != 0;

        select maxof(BatchID) from posBatchTable
            where posBatchTable.Channel == channel
                && posBatchTable.TerminalId == _terminalId
                && posBatchTable.StoreId == _storeId
                && posBatchTable.BatchID != 0;

        var maxBatchId = max(transactionTable.BatchID, posBatchTable.BatchID);

        _seedDataMap = RetailPOSSeedData::UpdateSeedDatainMap(RetailPOSSeedDataType::BatchId, any2int64(maxBatchId), _seedDataMap);

        // Find the last receipt ID for sales
        RetailTransactionTable transactionWithMaxReceiptId;

        while select firstonly10 ReceiptID, transactionId, transDate, transTime, Channel from transactionTable
            order by transactionTable.transDate desc, transactionTable.transTime desc
            where transactionTable.Channel == channel
                && transactionTable.Store == _storeId
                && transactionTable.terminal == _terminalId
                && (transactionTable.type == RetailTransactionType::Sales || transactionTable.type == RetailTransactionType::IncomeExpense)
                && transactionTable.grossAmount <= 0
                && transactionTable.entryStatus != RetailEntryStatus::Training
                && transactionTable.receiptId != ''
        {
            if (transactionTable.transDate < receiptResetDate)
            {
                continue;
            }

            transactionWithMaxReceiptId.data(RetailPOSSeedData::GetRecordWithMaxReceiptIdParsedWithMask(
                transactionWithMaxReceiptId,
                transactionTable,
                RetailPOSSeedDataType::ReceiptSale,
                RetailReceiptTransaction::Sale,
                _receiptMaskMap));
        }

        _seedDataMap = RetailPOSSeedData::updateReceiptSeedDataInfo(
            RetailPOSSeedDataType::ReceiptSale, 
            RetailReceiptTransaction::Sale,
            _seedDataMap, 
            _receiptMaskMap, 
            transactionWithMaxReceiptId, 
            currentSessionId);

        // Find the last receipt ID for return
        transactionWithMaxReceiptId.clear();

        while select firstOnly10 ReceiptID, transactionId, transDate, transTime, Channel from transactionTable
            order by transactionTable.transDate desc, transactionTable.transTime desc
                where transactionTable.Channel == channel
                && transactionTable.Store == _storeId
                && transactionTable.terminal == _terminalId
                && (transactionTable.type == RetailTransactionType::Sales || transactionTable.type == RetailTransactionType::IncomeExpense)
                && transactionTable.grossAmount > 0
                && transactionTable.entryStatus != RetailEntryStatus::Training
                && transactionTable.receiptId != ''
        {
            if (transactionTable.transDate < receiptResetDate)
            {
                continue;
            }

            transactionWithMaxReceiptId.data(RetailPOSSeedData::GetRecordWithMaxReceiptIdParsedWithMask(
                transactionWithMaxReceiptId,
                transactionTable,
                RetailPOSSeedDataType::ReceiptReturn,
                RetailReceiptTransaction::Return,
                _receiptMaskMap));
        }

        _seedDataMap = RetailPOSSeedData::updateReceiptSeedDataInfo(
            RetailPOSSeedDataType::ReceiptReturn,
            RetailReceiptTransaction::Return,
            _seedDataMap,
            _receiptMaskMap,
            transactionWithMaxReceiptId, 
            currentSessionId);

        // Find the last receipt ID for payment (i.e. customer deposit)
        transactionWithMaxReceiptId.clear();

        while select firstOnly10 ReceiptID, transactionId, transDate, transTime, Channel from transactionTable
            order by transactionTable.transDate desc, transactionTable.transTime desc
            where transactionTable.Channel == channel
                && transactionTable.Store == _storeId
                && transactionTable.terminal == _terminalId
                && transactionTable.type == RetailTransactionType::Payment
                && transactionTable.receiptId != ''
        {
            if (transactionTable.transDate < receiptResetDate)
            {
                continue;
            }

            transactionWithMaxReceiptId.data(RetailPOSSeedData::GetRecordWithMaxReceiptIdParsedWithMask(
                transactionWithMaxReceiptId,
                transactionTable,
                RetailPOSSeedDataType::ReceiptPayment,
                RetailReceiptTransaction::Payment,
                _receiptMaskMap));
        }

        _seedDataMap = RetailPOSSeedData::updateReceiptSeedDataInfo(
            RetailPOSSeedDataType::ReceiptPayment,
            RetailReceiptTransaction::Payment,
            _seedDataMap,
            _receiptMaskMap,
            transactionWithMaxReceiptId, 
            currentSessionId);

        // Find the last receipt ID for non-Retail sales order
        // There is no RetailReceiptTransaction type for non-Retail sales order.
        transactionWithMaxReceiptId.clear();

        while select firstOnly10 ReceiptID from transactionTable
            order by transactionTable.transDate desc, transactionTable.transTime desc
            where transactionTable.Channel == channel
                && transactionTable.Store == _storeId
                && transactionTable.terminal == _terminalId
                && transactionTable.type == RetailTransactionType::SalesOrder
                && transactionTable.receiptId != ''
        {
            if (transactionTable.transDate < receiptResetDate)
            {
                continue;
            }

            transactionWithMaxReceiptId.data(RetailPOSSeedData::GetRecordWithMaxReceiptId(transactionWithMaxReceiptId, transactionTable));
        }
        
        // There is RetailPOSSeedDataType::ReceiptDefault type for no RetailReceiptTransaction type.
        _seedDataMap = RetailPOSSeedData::UpdateSeedDatainMap(RetailPOSSeedDataType::ReceiptDefault, str2int64(transactionWithMaxReceiptId.receiptId), _seedDataMap);

        // Find the last receipt ID for non-Retail sales invoice
        // There is no RetailReceiptTransaction type for non-Retail sales invoice.
        transactionWithMaxReceiptId.clear();

        while select firstOnly10 ReceiptID from transactionTable
            order by transactionTable.transDate desc, transactionTable.transTime desc
                where transactionTable.Channel == channel
                && transactionTable.Store == _storeId
                && transactionTable.terminal == _terminalId
                && transactionTable.type == RetailTransactionType::SalesInvoice
                && transactionTable.receiptId != ''
        {
            if (transactionTable.transDate < receiptResetDate)
            {
                continue;
            }

            transactionWithMaxReceiptId.data(RetailPOSSeedData::GetRecordWithMaxReceiptId(transactionWithMaxReceiptId, transactionTable));
        }

        // There is RetailPOSSeedDataType::ReceiptDefault type for no RetailReceiptTransaction type.
        _seedDataMap = RetailPOSSeedData::UpdateSeedDatainMap(RetailPOSSeedDataType::ReceiptDefault, str2int64(transactionWithMaxReceiptId.receiptId), _seedDataMap);

        // Find the last receipt ID for customer order
        transactionWithMaxReceiptId.clear();

        while select firstOnly10 ReceiptID, transactionId, transDate, transTime, Channel from transactionTable
            order by transactionTable.transDate desc, transactionTable.transTime desc
                where transactionTable.Channel == channel
                && transactionTable.Store == _storeId
                && transactionTable.terminal == _terminalId
                && transactionTable.type == RetailTransactionType::CustomerOrder
                && transactionTable.receiptId != ''
            exists join salesTable
                where salesTable.SalesId == transactionTable.salesOrderId
        {
            if (transactionTable.transDate < receiptResetDate)
            {
                continue;
            }

            transactionWithMaxReceiptId.data(RetailPOSSeedData::GetRecordWithMaxReceiptIdParsedWithMask(
                transactionWithMaxReceiptId,
                transactionTable,
                RetailPOSSeedDataType::ReceiptCustomerSalesOrder,
                RetailReceiptTransaction::SalesOrder,
                _receiptMaskMap));
        }

        _seedDataMap = RetailPOSSeedData::updateReceiptSeedDataInfo(
            RetailPOSSeedDataType::ReceiptCustomerSalesOrder,
            RetailReceiptTransaction::SalesOrder,
            _seedDataMap,
            _receiptMaskMap,
            transactionWithMaxReceiptId, 
            currentSessionId);

        // Find the last receipt ID for customer quote
        transactionWithMaxReceiptId.clear();

        while select firstOnly10 ReceiptID, transactionId, transDate, transTime, Channel from transactionTable
            order by transactionTable.transDate desc, transactionTable.transTime desc
                where transactionTable.Channel == channel
                && transactionTable.Store == _storeId
                && transactionTable.terminal == _terminalId
                && transactionTable.type == RetailTransactionType::CustomerOrder
                && transactionTable.receiptId != ''
            exists join salesQuote
                where salesQuote.QuotationId == transactionTable.salesOrderId
        {
            if (transactionTable.transDate < receiptResetDate)
            {
                continue;
            }

            transactionWithMaxReceiptId.data(RetailPOSSeedData::GetRecordWithMaxReceiptIdParsedWithMask(
                transactionWithMaxReceiptId,
                transactionTable,
                RetailPOSSeedDataType::ReceiptCustomerQuote,
                RetailReceiptTransaction::Quote,
                _receiptMaskMap));
        }

        _seedDataMap = RetailPOSSeedData::updateReceiptSeedDataInfo(
            RetailPOSSeedDataType::ReceiptCustomerQuote,
            RetailReceiptTransaction::Quote,
            _seedDataMap,
            _receiptMaskMap,
            transactionWithMaxReceiptId, 
            currentSessionId);

        // Find the last receipt ID for suspended transaction
        transactionWithMaxReceiptId.clear();

        while select firstOnly10 receiptId, transactionId, transDate, transTime, Channel from transactionTable
            order by transactionTable.transDate desc, transactionTable.transTime desc
            where transactionTable.Channel == channel
                && transactionTable.Store == _storeId
                && transactionTable.terminal == _terminalId
                && transactionTable.type == RetailTransactionType::SuspendedTransaction
                && transactionTable.entryStatus != RetailEntryStatus::Training
                && transactionTable.receiptId != ''
        {
            if (transactionTable.transDate < receiptResetDate)
            {
                continue;
            }

            transactionWithMaxReceiptId.data(RetailPOSSeedData::GetRecordWithMaxReceiptIdParsedWithMask(
                transactionWithMaxReceiptId,
                transactionTable,
                RetailPOSSeedDataType::ReceiptSuspendedTransaction,
                RetailReceiptTransaction::SuspendedTransaction,
                _receiptMaskMap));
        }

        _seedDataMap = RetailPOSSeedData::updateReceiptSeedDataInfo(
            RetailPOSSeedDataType::ReceiptSuspendedTransaction,
            RetailReceiptTransaction::SuspendedTransaction,
            _seedDataMap,
            _receiptMaskMap,
            transactionWithMaxReceiptId, 
            currentSessionId);

        // Find the last receipt ID for default receipt only for independent receipt number sequences.
        if (!RetailPOSSeedData::hasCodependentReceipts(_receiptMaskMap))
        {
            transactionWithMaxReceiptId.clear();

            while select firstOnly10 ReceiptID from transactionTable 
                order by transactionTable.transDate desc, transactionTable.transTime desc
                where transactionTable.Channel == channel
                && transactionTable.Store == _storeId
                && transactionTable.terminal == _terminalId
                && transactionTable.type != RetailTransactionType::Sales
                && transactionTable.type != RetailTransactionType::IncomeExpense
                && transactionTable.type != RetailTransactionType::Payment
                && transactionTable.type != RetailTransactionType::SalesOrder
                && transactionTable.type != RetailTransactionType::SalesInvoice
                && transactionTable.type != RetailTransactionType::CustomerOrder
                && transactionTable.type != RetailTransactionType::SuspendedTransaction
                && transactionTable.receiptId != ''
            {
                if (transactionTable.transDate < receiptResetDate)
                {
                    continue;
                }

                transactionWithMaxReceiptId.data(RetailPOSSeedData::GetRecordWithMaxReceiptId(transactionWithMaxReceiptId, transactionTable));
            }

            _seedDataMap = RetailPOSSeedData::UpdateSeedDatainMap(RetailPOSSeedDataType::ReceiptDefault, any2int64(transactionWithMaxReceiptId.ReceiptID), _seedDataMap);
        }

        if (BrazilParameters::isEnabled())
        {
            retailTerminalTable = RetailTerminalTable::find(_terminalId);

            // removing leading zeros.
            fiscalDocumentSeries = int642str(str2int64(retailTerminalTable.FiscalDocumentSeries));

            select firstOnly RecId, FiscalDocumentNumber from retailFiscalDocument
            order by RecId desc
            where   retailFiscalDocument.store                  == _storeId
                &&  retailFiscalDocument.terminal               == _terminalId
                &&  retailFiscalDocument.FiscalDocumentSeries   == fiscalDocumentSeries;

            if (retailFiscalDocument)
            {
                retailFiscalDocumentNumber = str2int64(retailFiscalDocument.FiscalDocumentNumber);
            }
            else
            {
                retailFiscalDocumentNumber = 0;
            }

            _seedDataMap = RetailPOSSeedData::UpdateSeedDatainMap(RetailPOSSeedDataType::ConsumerFiscalDocument, retailFiscalDocumentNumber, _seedDataMap);
        }

        return _seedDataMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateSeedDatainMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update seed data in Map for <RetailPOSSeedDataValue>
    /// </summary>
    /// <param name="_dataType">
    /// Retail POS seed data type.
    /// </param>
    /// <param name="_terminalId">
    /// Retail POS seed data type value.
    /// </param>
    /// <param name="_seedDataMap">
    /// Seed data map object.
    /// </param>
    /// <returns>
    /// Return the seed data map.
    /// </returns>
    protected static Map UpdateSeedDatainMap(RetailPOSSeedDataType _dataType, RetailPOSSeedDataValue _value, Map _seedDataMap)
    {
        RetailPOSSeedDataValue valueInMap;

        if (_value <= 0)
        {
            return _seedDataMap;
        }

        if (_seedDataMap.exists(_dataType))
        {
            valueInMap = _seedDataMap.lookup(_dataType);
            if (valueInMap < _value)
            {
                _seedDataMap.remove(_dataType);
            }
        }

        if (!_seedDataMap.exists(_dataType))
        {
            _seedDataMap.insert(_dataType, _value);
        }

        return _seedDataMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ParseReceiptNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parse receipt number.
    /// </summary>
    /// <param name="_receiptId">
    /// Receipt id field.
    /// </param>
    /// <param name="_start">
    /// Start index value to check the receipt.
    /// </param>
    /// <param name="_length">
    /// Length index value for receipt.
    /// </param>
    /// <returns>
    /// Returns receipt number.
    /// </returns>
    private static int ParseReceiptNumber(RetailReceiptId _receiptId, int _start, int _length)
    {
        if (strLen(_receiptId) < (_start + _length - 1))
        {
            return 0;
        }

        int result;
        try
        {
            result = str2int(subStr(_receiptId, _start, _length));
        }
        catch
        {
            result = 0;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateSeedDataInMapByReceiptId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get seed data in map.
    /// </summary>
    /// <param name="_seedDataType">
    /// Set value for the given type.
    /// </param>
    /// <param name="_receiptId">
    /// Receipt id field.
    /// </param>
    /// <param name="_transactionType">
    /// Check for retail receipt transaction type.
    /// </param>
    /// <param name="_seedDataMap">
    /// Seed data map object.
    /// </param>
    /// <param name="_receiptMaskMap">
    /// Seed data map object.
    /// </param>
    /// <returns>
    /// Return the seed data map.
    /// </returns>
    protected static Map UpdateSeedDataInMapByReceiptId(RetailPOSSeedDataType _seedDataType,
                                                        RetailReceiptId _receiptId,
                                                        RetailReceiptTransaction _transactionType,
                                                        Map _seedDataMap,
                                                        Map _receiptMaskMap)
    {
        RetailPOSSeedDataType receiptSeedDataType_inner;
        int64 receiptNumber;

        [receiptSeedDataType_inner, receiptNumber] = RetailPOSSeedData::retrieveSeedDataMapValues(_seedDataType, _receiptId, _transactionType, _receiptMaskMap);

        if (receiptNumber)
        {
            _seedDataMap = RetailPOSSeedData::UpdateSeedDatainMap(receiptSeedDataType_inner, receiptNumber, _seedDataMap);
        }

        return _seedDataMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetOrCalculateSeedDataCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the POS seed data from RetailPOSSeedData if exists, otherwise, calculate it based on existing RetailTransactions.
    /// </summary>
    /// <param name="_storeId">
    /// Get the POS seed data for given Store Id.
    /// </param>
    /// <param name="_terminalId">
    /// Get the POS seed data for given terminal Id.
    /// </param>
    /// <returns>
    /// Returns the POS seed data collection.
    /// </returns>
    public static Map GetOrCalculateSeedDataCollection(RetailStoreId _storeId, RetailTerminalId _terminalId)
    {
        Map                         seedDataMap, tmpMap;
        RetailPOSSeedData           retailPOSSeedData;
        MapEnumerator               me;

        try
        {
            ApplicationEventSource::EventWriteRetailPOSCalculateSeedDataCollectionStart('');

            // First, get seed data from retail transactions (as per new method).
            seedDataMap = new Map(Types::Enum, Types::Int64);
            tmpMap =  RetailPOSSeedData::GenerateSeedDataFromRetailTrans(_storeId, _terminalId);
            me = new MapEnumerator(tmpMap);

            while (me.moveNext())
            {
                seedDataMap.insert(me.currentKey(), me.currentValue() + 1);
            }

            int64 existingValue;
            Map retailPOSSeedDataMap = new Map(Types::Enum, Types::Int64);

            // Second, get seed data from depecrated table and replace only the numbers which are higher than retail transactions.
            // This is to support both N-1 and current POS devices and still avoid generating duplicate numbers for current devices.
            while select * from retailPOSSeedData
                where retailPOSSeedData.StoreNumber == _storeId &&
                      retailPOSSeedData.TerminalID == _terminalId
            {
                retailPOSSeedDataMap.insert(retailPOSSeedData.DataType, retailPOSSeedData.DataValue);

                if (retailPOSSeedData.DataValue >= 1)
                {
                    if (seedDataMap.exists(retailPOSSeedData.DataType))
                    {
                        existingValue = seedDataMap.lookup(retailPOSSeedData.DataType);
                        if (existingValue < retailPOSSeedData.DataValue)
                        {
                            seedDataMap.remove(retailPOSSeedData.DataType);
                        }
                    }
                
                    if (!seedDataMap.exists(retailPOSSeedData.DataType))
                    {
                        seedDataMap.insert(retailPOSSeedData.DataType, retailPOSSeedData.DataValue);
                    }
                }
            }

            return seedDataMap;
        }
        finally
        {
            ApplicationEventSource::EventWriteRetailPOSCalculateSeedDataCollectionStop(seedDataMap.toString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReceiptSeedDataInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get seed data in map.
    /// </summary>
    /// <param name="_seedDataType">
    /// Set value for the given type.
    /// </param>
    /// <param name="_transactionType">
    /// Check for retail receipt transaction type.
    /// </param>
    /// <param name="_seedDataMap">
    /// Seed data map object.
    /// </param>
    /// <param name="_receiptMaskMap">
    /// Seed data map object.
    /// </param>
    /// <param name="_transactionTable">
    /// The <c>RetailTransactionTable</c> containing the receipt id.
    /// </param>
    /// <param name="_currentSessionId">
    /// The current session id.
    /// </param>
    /// <returns>
    /// Return the seed data map.
    /// </returns>
    protected static Map updateReceiptSeedDataInfo(   RetailPOSSeedDataType _seedDataType,
                                                    RetailReceiptTransaction _transactionType,
                                                    Map _seedDataMap,
                                                    Map _receiptMaskMap,
                                                    RetailTransactionTable _transactionTable,
                                                    int _currentSessionId)
    {
        _seedDataMap = RetailPOSSeedData::UpdateSeedDataInMapByReceiptId(_seedDataType, _transactionTable.receiptId, _transactionType, _seedDataMap, _receiptMaskMap);

        RetailPOSSeedData::createOrUpdateLastTransactionInfo(_seedDataType, _transactionTable.receiptId, _transactionType, _receiptMaskMap, _transactionTable, _currentSessionId);

        return _seedDataMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateLastTransactionInfo</Name>
				<Source><![CDATA[
    private static void createOrUpdateLastTransactionInfo(  RetailPOSSeedDataType _seedDataType,
                                                            RetailReceiptId _receiptId,
                                                            RetailReceiptTransaction _transactionType,
                                                            Map _receiptMaskMap,
                                                            RetailTransactionTable _transactionTable,
                                                            int _currentSessionId)
    {
        RetailPOSSeedDataType receiptSeedDataType_inner;
        int64 receiptNumber;

        [receiptSeedDataType_inner, receiptNumber] = RetailPOSSeedData::retrieveSeedDataMapValues(_seedDataType, _receiptId, _transactionType, _receiptMaskMap);

        if (receiptNumber)
        {
            RetailNumberSequenceSeedDataTmp::createOrUpdateRecord(_currentSessionId, receiptSeedDataType_inner, receiptNumber, _transactionTable.transactionId, _transactionTable.transactionDateTime());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSeedDataMapValues</Name>
				<Source><![CDATA[
    private static container retrieveSeedDataMapValues( RetailPOSSeedDataType _seedDataType,
                                                        RetailReceiptId _receiptId,
                                                        RetailReceiptTransaction _transactionType,
                                                        Map _receiptMaskMap)
    {
        RetailPOSSeedDataType receiptSeedDataType_inner;
        int64 receiptNumber;
        boolean isMaskIndependent;
        int start, length;

        receiptSeedDataType_inner = RetailPOSSeedDataType::ReceiptDefault;

        if (_receiptMaskMap.exists(_transactionType))
        {
            [isMaskIndependent, start, length] = _receiptMaskMap.lookup(_transactionType);

            receiptNumber = RetailPOSSeedData::ParseReceiptNumber(_receiptId, start, length);

            if (isMaskIndependent)
            {
                receiptSeedDataType_inner = _seedDataType;
            }
        }
        else
        {
            receiptNumber = str2int64(_receiptId);
        }

        return [receiptSeedDataType_inner, receiptNumber];
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCodependentReceipts</Name>
				<Source><![CDATA[
    private static boolean hasCodependentReceipts(Map _receiptMaskMap)
    {
        boolean         result = false;
        boolean         isMaskIndependent;
        int             start;
        int             length;
        MapEnumerator   mapEnum;
        
        if(_receiptMaskMap != null && !_receiptMaskMap.empty())
        {
            mapEnum = _receiptMaskMap.getEnumerator();
            while (mapEnum.moveNext())
            {
                [isMaskIndependent, start, length] = mapEnum.currentValue();
                if(isMaskIndependent == false)
                {
                    result = true;
                    break;
                }
            }
        }
        
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetRecordWithMaxReceiptIdParsedWithMask</Name>
				<Source><![CDATA[
    private static RetailTransactionTable GetRecordWithMaxReceiptIdParsedWithMask(RetailTransactionTable _transaction1, RetailTransactionTable _transaction2, RetailPOSSeedDataType _seedDataType, RetailReceiptTransaction _transactionType, Map _receiptMaskMap)
    {
        if (_transaction1.RecId == 0)
        {
            return _transaction2;
        }

        if (_transaction2.RecId == 0)
        {
            return _transaction1;
        }

        RetailPOSSeedDataType receiptSeedDataType_inner1, receiptSeedDataType_inner2;
        int64 receiptNumber1, receiptNumber2;
        [receiptSeedDataType_inner1, receiptNumber1] = RetailPOSSeedData::retrieveSeedDataMapValues(_seedDataType, _transaction1.receiptId, _transactionType, _receiptMaskMap);
        [receiptSeedDataType_inner2, receiptNumber2] = RetailPOSSeedData::retrieveSeedDataMapValues(_seedDataType, _transaction2.receiptId, _transactionType, _receiptMaskMap);

        if (receiptNumber1 > receiptNumber2)
        {
            return _transaction1;
        }

        return _transaction2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetRecordWithMaxReceiptId</Name>
				<Source><![CDATA[
    private static RetailTransactionTable GetRecordWithMaxReceiptId(RetailTransactionTable _transaction1, RetailTransactionTable _transaction2)
    {
        if (_transaction1.RecId == 0)
        {
            return _transaction2;
        }

        if (_transaction2.RecId == 0)
        {
            return _transaction1;
        }

        int64 receiptNumber1, receiptNumber2;
        receiptNumber1 = str2Int64(_transaction1.receiptId);
        receiptNumber2 = str2Int64(_transaction2.receiptId);

        if (receiptNumber1 > receiptNumber2)
        {
            return _transaction1;
        }

        return _transaction2;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET6152</DeveloperDocumentation>
	<Label>@RET6147</Label>
	<TitleField1>StoreNumber</TitleField1>
	<TitleField2>DataValue</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>PrimaryKeyIdx</ClusteredIndex>
	<Modules>ChannelManagement</Modules>
	<PrimaryIndex>PrimaryKeyIdx</PrimaryIndex>
	<ReplacementKey>PrimaryKeyIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DataType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DataValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StoreNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TerminalID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DataType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StoreNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TerminalID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS11696</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DataType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DataValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StoreNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TerminalID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DataType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>RetailPOSSeedDataType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DataValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailPOSSeedDataValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StoreNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TerminalID</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTerminalId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PrimaryKeyIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<ConfigurationKey>Retail</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>DataType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StoreNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TerminalID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailStoresToDeploy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>RetailStoresToDeploy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StoreNumber</Name>
					<Field>StoreNumber</Field>
					<RelatedField>StoreNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RetailStoreNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailStoreTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailStoreTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StoreNumber</Name>
					<SourceEDT>RetailStoreId</SourceEDT>
					<Field>StoreNumber</Field>
					<RelatedField>StoreNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StoreNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailTerminalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailTerminalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TerminalID</Name>
					<SourceEDT>RetailTerminalId</SourceEDT>
					<Field>TerminalID</Field>
					<RelatedField>terminalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>terminalIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>