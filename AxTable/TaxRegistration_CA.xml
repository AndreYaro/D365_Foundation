<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxRegistration_CA</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxRegistration_CA extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TaxRegistration_CA</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The unique record ID to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that specifies whether to read the record for update.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A buffer that contains the <c>TaxRegistration_CA</c> table.
    /// </returns>
    public static TaxRegistration_CA find(
        recId _recId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxRegistration_CA taxRegistrationCA;

        taxRegistrationCA.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxRegistrationCA.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxRegistrationCA
            where taxRegistrationCA.RecId == _recId;

        return taxRegistrationCA;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAccountTypeCompanyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified Company Info and Tax Account Type record in the <c>TaxRegistration_CA</c> table.
    /// </summary>
    /// <param name="_companyInfoRecId">
    /// The record ID of the Company Info table.
    /// </param>
    /// <param name="_taxAccountType">
    /// The Canadian Tax Account Type value.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that specifies whether to read the record for update.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record.
    /// </param>
    /// <returns>
    /// A buffer that has the <c>TaxRegistration_CA</c> table.
    /// </returns>
    public static TaxRegistration_CA findByAccountTypeCompanyId(
        RefRecId _companyInfoRecId,
        TaxAccountType_CA _taxAccountType,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxRegistration_CA taxRegistrationCA;

        taxRegistrationCA.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxRegistrationCA.concurrencyModel(_concurrencyModel);
        }

        select firstonly
                taxRegistrationCA
            where
                taxRegistrationCA.LegalEntity       == _companyInfoRecId
                && taxRegistrationCA.TaxAccountType == _taxAccountType;

        return taxRegistrationCA;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTHSTTaxType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines what GST or HST tax type to assign by using the specified account type of the
    /// transaction.
    /// </summary>
    /// <param name="_accountType">
    /// The account type on the transaction record.
    /// </param>
    /// <returns>
    /// true if the number is correct; otherwise false.
    /// </returns>
    public static GSTHSTTaxType_CA getGSTHSTTaxType(LedgerJournalACType _accountType)
    {
        GSTHSTTaxType_CA returnValue = GSTHSTTaxType_CA::None;

        if (_accountType == LedgerJournalACType::FixedAssets)
        {
            returnValue = GSTHSTTaxType_CA::TaxOnAcquisition205;
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidBusinessNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the Canadian Business Number is correct by using mod10 format.
    /// </summary>
    /// <param name="businessNumber_CA">
    /// The Business Number that is provided by CA.
    /// </param>
    /// <returns>
    /// true if the number is correct; otherwise, false.
    /// </returns>
    public static boolean isValidBusinessNumber(BusinessNumber_CA businessNumber_CA)
    {
       /*
            The Modular 10 digits check is the required edit for the first nine numerics of
            the Business Number (GST/HST Account Number).  Following is the Mod 10 procedure:

            a)    Add all odd digits, except the 9th one.
            b)    String all even digits together and multiply by 2.
            c)    Add all digits from the result b. together.
            d)    Add the result of a. and c. together.
            e)    Subtract the result of d. from its nearest 10 digit.
            f)    The result of e. must equal the 9th digit in the Business Number (GST/HST Account Number).

            For example, number 1 0 0 0 0 0 0 4 1

            a)    1 + 0 + 0 + 0 = 1
            b)    0004 * 2 = 0008
            c)    0 + 0 + 0 + 8 = 8
            d)    1 + 8 = 9
            e)    10 - 9 = 1
            f)    1 is equal to the last digit on the Business Number (GST/HST Account Number).

        */

        #define.Numerals('0123456789')
        #define.Zero('0')

        int strPos;
        int numerals = 0;
        int ctrlsum = 0;
        int control;
        str testStr;
        str checkStr;

        boolean returnValue = false;

        if (strLen(strRTrim(businessNumber_CA)) > 0)
        {
            testStr = subStr(businessNumber_CA, 1, strLen(businessNumber_CA) -1);
            checkStr = subStr(businessNumber_CA, strLen(businessNumber_CA), 1);

            testStr = strRep(#Zero, 9-strLen(testStr)) + testStr ;
            strPos = strLen(testStr);

            while (strPos > 0)
            {
                numerals = str2int(subStr(testStr, strPos, 1)) * (strPos mod 2 +1);
                ctrlSum += numerals div 10 + numerals mod 10;
                strPos--;
            }

            control = (10 - (ctrlSum mod 10)) mod 10;
            if (control == str2int(checkStr))
            {
                returnValue = true;
            }
        }

        return returnValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>CA</CountryRegionCodes>
	<DeveloperDocumentation>@SYS313833</DeveloperDocumentation>
	<FormRef>TaxRegistration_CA</FormRef>
	<Label>@SYS313834</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>TaxAccountType</TitleField1>
	<TitleField2>ReferenceNumber</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>AccountTypeIdx</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>AccountTypeIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxAccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReferenceNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAccountType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxAccountType</Name>
			<Label>@SYS313835</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxAccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReferenceNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LegalEntity</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReferenceNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReferenceNumber_CA</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxAccountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxAccountType_CA</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AccountTypeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LegalEntity</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxAccountType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CompanyInfo_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CompanyInfo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CompanyInfo_TaxRegistration_CA</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LegalEntity</Name>
					<Field>LegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>