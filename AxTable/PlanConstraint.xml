<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PlanConstraint</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PlanConstraint extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the current record from the <c>PlanActivityConstraint</c> table.
    /// </summary>
    public void delete()
    {
        super();

        // clear cache
        PlanActivityNextLevelCache::construct().clearCache();
        PlanActivityPrevLevelCache::construct().clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the current record in the <c>PlanActivityConstraint</c> table.
    /// </summary>
    public void update()
    {
        super();

        // clear cache
        PlanActivityNextLevelCache::construct().clearCache();
        PlanActivityPrevLevelCache::construct().clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>value</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a constraint value of the specified type.
    /// </summary>
    /// <param name="_constraintRoleType">
    ///    The type of constraint value to retrieve.
    /// </param>
    /// <returns>
    ///    A <c>PlanSequenceConstraintValue</c> record if found; otherwise, an empty buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanSequenceConstraintValue value(ConstraintRoleType _constraintRoleType)
    {
        return PlanSequenceConstraintValue::findConstraintRoleType(this.RecId, _constraintRoleType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>PlanConstraint</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>PlanConstraint</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    <c>true</c> if the specified record exists; otherwise, <c>false</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(recId _recId)
    {
        return _recId &&
               (select firstonly RecId from planConstraint
                    where planConstraint.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PlanConstraint</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>PlanConstraint</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PlanConstraint</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PlanConstraint find(recId _recId, boolean _forUpdate = false)
    {
        PlanConstraint    planConstraint;

        if (_recId)
        {
            planConstraint.selectForUpdate(_forUpdate);

            select firstonly planConstraint
                where planConstraint.RecId == _recId;
        }

        return planConstraint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds or creates the <c>PlanConstraint</c> and <c>PlanSequenceConstraintValue</c> records.
    /// </summary>
    /// <param name="_constraintType">
    ///    The type of constraint.
    /// </param>
    /// <param name="_sequenceType">
    ///    The type sequence constraint type.
    /// </param>
    /// <param name="_constraintRoleType">
    ///    The constraint value role.
    /// </param>
    /// <param name="_constraintValue">
    ///    The constraint value.
    /// </param>
    /// <param name="_unitOfMeasure">
    ///    The constraint value unit of measure.
    /// </param>
    /// <returns>
    ///    A <c>PlanConstraint</c> record if it exists or was created; otherwise, an empty buffer.
    /// </returns>
    /// <remarks>
    ///    When the <paramref name="_constraintValue" /> and <paramref name="_unitOfMeasure" /> parameters are
    ///    both set to 0, this method will not create a constraint value.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PlanConstraint findOrCreate(ConstraintType        _constraintType,
                                              SequenceType          _sequenceType,
                                              ConstraintRoleType    _constraintRoleType         = ConstraintRoleTypes::Minimum,
                                              ConstraintValue       _constraintValue            = 0,
                                              RefRecId              _unitOfMeasure              = 0)
    {
        PlanConstraint                  planConstraint;
        PlanSequenceConstraintValue     planSequenceConstraintValue;
        boolean                         needConstraintValue = _constraintValue != 0 && _unitOfMeasure != 0;

        ttsbegin;

        if (_constraintType == ConstraintTypes::Aggregation)
        {
            // for aggregate constraints we only need to find/create a planConstraint record
            select firstonly planConstraint
                where planConstraint.ConstraintType == _constraintType &&
                      planConstraint.SequenceType   == _sequenceType;
        }
        else if (!needConstraintValue)
        {
            // try to find an existing constraint, that does not have a value
            select firstonly RecId from planConstraint
                where planConstraint.ConstraintType                 == _constraintType
                      && planConstraint.SequenceType                == _sequenceType
            notExists join planSequenceConstraintValue
                where planSequenceConstraintValue.PlanConstraint    == planConstraint.RecId;
        }
        else
        {
            // try to find an existing constraint, with the same exact constraint value
            select firstonly RecId from planConstraint
                where planConstraint.ConstraintType                         == _constraintType
                      && planConstraint.SequenceType                        == _sequenceType
            join RecId from planSequenceConstraintValue
                where planSequenceConstraintValue.PlanConstraint            == planConstraint.RecId
                      && planSequenceConstraintValue.ConstraintValueRole    == _constraintRoleType
                      && planSequenceConstraintValue.Value                  == _constraintValue
                      && planSequenceConstraintValue.UnitOfMeasure          == _unitOfMeasure;
        }

        // we create a constraint record if:
        //  - we don't have one of the same type OR
        //  - we have one, we need a constraint value for the new one,
        //      but the existing one has a different constraint value
        if (!planConstraint.RecId
            || (!planSequenceConstraintValue.RecId
                && needConstraintValue))
        {
            planConstraint.clear();
            planConstraint.ConstraintType = _constraintType;
            planConstraint.SequenceType   = _sequenceType;

            if (planConstraint.validateWrite())
            {
                planConstraint.insert();
            }
            else
            {
                planConstraint.clear();
            }
        }

        // if we need a constraint value and we don't already have one (the same)
        // we have to create one
        if ( planConstraint.RecId
                && _constraintType != ConstraintTypes::Aggregation
                && needConstraintValue
                && !planSequenceConstraintValue.RecId)
        {
            planSequenceConstraintValue.PlanConstraint          = planConstraint.RecId;
            planSequenceConstraintValue.ConstraintValueRole     = _constraintRoleType;
            planSequenceConstraintValue.Value                   = _constraintValue;
            planSequenceConstraintValue.UnitOfMeasure           = _unitOfMeasure;

            if (planSequenceConstraintValue.validateWrite())
            {
                planSequenceConstraintValue.insert();
            }
            else
            {
                planConstraint.clear();
            }
        }

        ttscommit;

        return planConstraint;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<DeveloperDocumentation>@SYS325889</DeveloperDocumentation>
	<FormRef>LeanProductionFlow</FormRef>
	<Label>@SYS152587</Label>
	<SingularLabel>@SYS152588</SingularLabel>
	<TableGroup>Main</TableGroup>
	<TitleField1>ConstraintType</TitleField1>
	<TitleField2>SequenceType</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>MasterPlanning</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConstraintType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SequenceType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Constraint</Name>
			<Label>@SYS152588</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConstraintType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SequenceType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ConstraintType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConstraintType</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<EnumType>ConstraintTypes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SequenceType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SequenceType</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<EnumType>SequenceTypes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ConstraintSequenceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ConstraintType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SequenceType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>