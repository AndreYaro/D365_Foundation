<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendDirective_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendDirective_PSN extends CustVendDirective_PSN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
        public void initValue()
    {
        super();

        this.setVendDirectiveId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVendDirectiveId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a new number sequence value for the <c>VendDirectiveId</c> field of the current record.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setVendDirectiveId()
    {
        NumberSeq               numberSeq;
        NumberSequenceTable     numberSequenceTable;
        NumberSequenceReference numSeqReference = VendParameters::numRefVendDirectiveId();

        if (!numSeqReference)
        {
            AifFault::checkFailedLogFault(strFmt("@SPS1274", "@GLS223194", enum2str(NumberSeqModule::Budget)));
        }
        else
        {
            numberSequenceTable = NumberSequenceTable::find(numSeqReference.NumberSequenceId);

            if (!numberSequenceTable)
            {
                // The number sequence that was selected for the directive does not exist.
                AifFault::checkFailedLogFault(strFmt("@SPS1274", numSeqReference.referenceLabel(), numSeqReference.referenceModuleLabel()));
            }
            else
            {
                if (numberSequenceTable.Blocked)
                {
                    // The number sequence set up for the directive is on hold.
                    AifFault::checkFailedLogFault(strFmt("@SYS25068", numberSequenceTable.NumberSequence));
                }
                else
                {
                    numberSeq = NumberSeq::newGetNum(numSeqReference, numSeqReference.numberSequenceTable().Continuous, true);
                    if (numberSeq)
                    {
                        this.setFieldValue(fieldStr(VendDirective_PSN, VendDirectiveId),numberSeq.num());
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the ranges from the supplied <c>_source</c> <c>QueryBuildDataSource</c> object to the <c>_destination</c> <c>QueryBuildDataSource</c> object.
    /// </summary>
    /// <param name="_source">
    /// The <c>QueryBuildDataSource</c> object that the ranges should be copied from.
    /// </param>
    /// <param name="_destination">
    /// The <c>QueryBuildDataSource</c> object that the ranges should be copied to.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void copyRanges(QueryBuildDataSource _source, QueryBuildDataSource _destination)
    {
        QueryBuildRange range;
        int rangeNumber;

        for (rangeNumber = 1; rangeNumber <= _source.rangeCount(); rangeNumber++)
        {
            range = _source.range(rangeNumber);

            switch (range.table())
            {
                case (tableNum(VendInvoiceInfoLine)) :
                    VendDirective_PSN::copyVendInvoiceInfoLineRange(range, _destination);
                break;

                case (tableNum(VendInvoiceInfoTable)) :
                    VendDirective_PSN::copyVendInvoiceInfoTableRange(range, _destination);
                break;

                default :
                    _destination.addRange(range.field()).value(range.value());
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyVendInvoiceInfoLineRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the ranges from a <c>QueryBuildRange</c> object for a field on the <c>VendInvoiceInfoLine</c> table to the corresponding field on a <c>QueryBuildDataSource</c> object for a <c>VendInvoiceTrans</c> table object.
    /// </summary>
    /// <param name="_sourceRange">
    /// The range to copy from.
    /// </param>
    /// <param name="_destinationDatasource">
    /// the datasource to copy the range to.
    /// </param>
    /// <returns>
    /// true if the field exists in the mapping; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean copyVendInvoiceInfoLineRange(QueryBuildRange _sourceRange, QueryBuildDataSource _destinationDatasource)
    {
        // for each field, add the range to the correct mapped field on VendInvoiceTrans.  If a field does not map to VendInvoiceTrans
        // then add a case statement that just returns true for the field.
        switch (_sourceRange.field())
        {
            case (fieldNum(VendInvoiceInfoLine, CurrencyCode)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceTrans, CurrencyCode)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoLine, InventDimId)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceTrans, InventDimId)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoLine, InventTransId)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceTrans, InventTransId)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoLine, ItemId)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceTrans, ItemId)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoLine, LineAmount)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceTrans, LineAmount)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoLine, LineNum)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceTrans, LineNum)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoLine, LinePercent)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceTrans, LinePercent)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoLine, MultiLnDisc)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceTrans, MultiLnDisc)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoLine, OrigPurchId)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceTrans, PurchID)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoLine, PriceUnit)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceTrans, PriceUnit)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoLine, ProcurementCategory)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceTrans, ProcurementCategory)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoLine, PurchCommitmentLine_PSN)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceTrans, PurchCommitmentLine_PSN)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoLine, PurchMarkup)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceTrans, PurchMarkup)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoLine, PurchPrice)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceTrans, PurchPrice)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoLine, PurchUnit)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceTrans, PurchUnit)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoLine, ReceiveNow)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceTrans, Qty)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoLine, Tax1099Amount)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceTrans, Tax1099Amount)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoLine, TaxGroup)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceTrans, TaxGroup)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoLine, TaxItemGroup)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceTrans, TaxItemGroup)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoLine, TransactionCode)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceTrans, TransactionCode)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoLine, Transport)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceTrans, Transport)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoLine, VendDirective_PSN)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceTrans, VendDirective_PSN)).value(_sourceRange.value());
                return true;

            //
            // Below are fields that are not mapped across to a VendInvoiceTrans field either because one doesn't exist, or it's not necessary
            // for a user to add a range on that field.
            // If you add a field to this list, be sure to add a range to the VendInvoiceInfoLine datasource of the VendDirectiveUnposted_PSN
            // query and set Status = Hide so that the user cannot use the range.
            //
            case (fieldNum(VendInvoiceInfoLine, AccountingDistributionTemplate)) :
            case (fieldNum(VendInvoiceInfoLine, AdvanceApplicationId)) :
            case (fieldNum(VendInvoiceInfoLine, AgreementLine_PSN)) :
            case (fieldNum(VendInvoiceInfoLine, changedManually)) :
            case (fieldNum(VendInvoiceInfoLine, closed)) :
            case (fieldNum(VendInvoiceInfoLine, CountyOrigDest)) :
            case (fieldNum(VendInvoiceInfoLine, DefaultDimension)) :
            case (fieldNum(VendInvoiceInfoLine, DeliveryName)) :
            case (fieldNum(VendInvoiceInfoLine, DeliveryPostalAddress)) :
            case (fieldNum(VendInvoiceInfoLine, Description)) :
            case (fieldNum(VendInvoiceInfoLine, DocumentOrigin)) :
            case (fieldNum(VendInvoiceInfoLine, InventNow)) :
            case (fieldNum(VendInvoiceInfoLine, InvoiceAccount)) :
            case (fieldNum(VendInvoiceInfoLine, LineDisc)) :
            case (fieldNum(VendInvoiceInfoLine, LineType)) :
            case (fieldNum(VendInvoiceInfoLine, MultiLnPercent)) :
            case (fieldNum(VendInvoiceInfoLine, OrderAccount)) :
            case (fieldNum(VendInvoiceInfoLine, Ordering)) :
            case (fieldNum(VendInvoiceInfoLine, ParmId)) :
            case (fieldNum(VendInvoiceInfoLine, Port)) :
            case (fieldNum(VendInvoiceInfoLine, PurchLineRecId)) :
            case (fieldNum(VendInvoiceInfoLine, PurchaseLineLineNumber)) :
            case (fieldNum(VendInvoiceInfoLine, ReasonTableRef)) :
            case (fieldNum(VendInvoiceInfoLine, RemainAfter)) :
            case (fieldNum(VendInvoiceInfoLine, RemainAfterInvent)) :
            case (fieldNum(VendInvoiceInfoLine, RemainBefore)) :
            case (fieldNum(VendInvoiceInfoLine, RemainBeforeInvent)) :
            case (fieldNum(VendInvoiceInfoLine, RemainBeforeInventPhysical)) :
            case (fieldNum(VendInvoiceInfoLine, RequestStatus)) :
            case (fieldNum(VendInvoiceInfoLine, SourceDocumentLine)) :
            case (fieldNum(VendInvoiceInfoLine, StatProcId)) :
            case (fieldNum(VendInvoiceInfoLine, TableRefId)) :
            case (fieldNum(VendInvoiceInfoLine, Tax1099BoxDetail)) :
            case (fieldNum(VendInvoiceInfoLine, Tax1099Fields)) :
            case (fieldNum(VendInvoiceInfoLine, Tax1099State)) :
            case (fieldNum(VendInvoiceInfoLine, Tax1099StateAmount)) :
            case (fieldNum(VendInvoiceInfoLine, TaxWithholdGroup)) :
            case (fieldNum(VendInvoiceInfoLine, TaxWithholdItemGroupHeadingId)) :
                return true;

            default :
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyVendInvoiceInfoTableRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the ranges from a <c>QueryBuildRange</c> object for a field on the <c>VendInvoiceInfoTable</c> table to the corresponding field on a <c>QueryBuildDataSource</c> object for a <c>VendInvoiceJour</c> table object.
    /// </summary>
    /// <param name="_sourceRange">
    /// The range to copy from.
    /// </param>
    /// <param name="_destinationDatasource">
    /// the datasource to copy the range to.
    /// </param>
    /// <returns>
    /// true if the field exists in the mapping; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean copyVendInvoiceInfoTableRange(QueryBuildRange _sourceRange, QueryBuildDataSource _destinationDatasource)
    {
        // for each field, add the range to the correct mapped field on VendInvoiceTrans.  If a field does not map to VendInvoiceTrans
        // then add a case statement that just returns true for the field.
        switch (_sourceRange.field())
        {
            case (fieldNum(VendInvoiceInfoTable, CashDisc)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceJour, CashDisc)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoTable, CashDiscCode)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceJour, CashDiscCode)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoTable, CashDiscDate)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceJour, CashDiscDate)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoTable, CashDiscPercent)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceJour, CashDiscPercent)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoTable, CurrencyCode)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceJour, CurrencyCode)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoTable, Description)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceJour, Description)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoTable, DocumentDate)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceJour, DocumentDate)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoTable, DocumentNum)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceJour, DocumentNum)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoTable, DocumentOrigin)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceJour, DocumentOrigin)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoTable, EndDisc)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceJour, EndDisc)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoTable, EnterpriseNumber)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceJour, EnterpriseNumber)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoTable, ExchRate)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceJour, ExchRate)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoTable, ExchRateSecondary)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceJour, ExchRateSecondary)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoTable, FixedDueDate)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceJour, FixedDueDate)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoTable, InclTax)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceJour, InclTax)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoTable, InvoiceAccount)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceJour, InvoiceAccount)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoTable, InvoiceRoundOff)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceJour, InvoiceRoundOff)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoTable, Num)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceJour, InvoiceId)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoTable, NumberSequenceGroup)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceJour, NumberSequenceGroup)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoTable, OrderAccount)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceJour, OrderAccount)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoTable, Payment)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceJour, Payment)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoTable, PaymentSched)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceJour, PaymentSched)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoTable, PaymId)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceJour, PaymId)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoTable, PostingProfile)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceJour, PostingProfile)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoTable, PurchId)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceJour, PurchId)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoTable, TaxGroup)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceJour, TaxGroup)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoTable, TaxRoundOff)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceJour, TaxRoundOff)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoTable, TransDate)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceJour, InvoiceDate)).value(_sourceRange.value());
                return true;

            case (fieldNum(VendInvoiceInfoTable, VATNum)) :
                _destinationDatasource.addRange(fieldNum(VendInvoiceJour, VATNum)).value(_sourceRange.value());
                return true;

            //
            // Below are fields that are not mapped across to a VendInvoiceJour field either because one doesn't exist, or it's not necessary
            // for a user to add a range on that field.
            // If you add a field to this list, be sure to add a range to the VendInvoiceInfoTable datasource of the VendDirectiveUnposted_PSN
            // query and set Status = Hide so that the user cannot use the range.
            //
            case (fieldNum(VendInvoiceInfoTable, AccountingDistributionTemplate)) :
            case (fieldNum(VendInvoiceInfoTable, Approved)) :
            case (fieldNum(VendInvoiceInfoTable, Approver)) :
            case (fieldNum(VendInvoiceInfoTable, BankLCImportLine)) :
            case (fieldNum(VendInvoiceInfoTable, BatchAdministration)) :
            case (fieldNum(VendInvoiceInfoTable, CountyOrigDest)) :
            case (fieldNum(VendInvoiceInfoTable, DefaultDimension)) :
            case (fieldNum(VendInvoiceInfoTable, DeliveryName)) :
            case (fieldNum(VendInvoiceInfoTable, DeliveryPostalAddress)) :
            case (fieldNum(VendInvoiceInfoTable, EndDateTime)) :
            case (fieldNum(VendInvoiceInfoTable, ErrorInvalidDistribution)) :
            case (fieldNum(VendInvoiceInfoTable, FixedExchRate)) :
            case (fieldNum(VendInvoiceInfoTable, Hold)) :
            case (fieldNum(VendInvoiceInfoTable, IgnoreCalculatedSalesTax)) :
            case (fieldNum(VendInvoiceInfoTable, EUROTriangulation)) :
            case (fieldNum(VendInvoiceInfoTable, InventLocationId)) :
            case (fieldNum(VendInvoiceInfoTable, InventSiteId)) :
            case (fieldNum(VendInvoiceInfoTable, InvoiceReleaseDate)) :
            case (fieldNum(VendInvoiceInfoTable, InvoiceType)) :
            case (fieldNum(VendInvoiceInfoTable, LastMatchVariance)) :
            case (fieldNum(VendInvoiceInfoTable, Log)) :
            case (fieldNum(VendInvoiceInfoTable, LogisticsElectronicAddress)) :
            case (fieldNum(VendInvoiceInfoTable, MarkupGroup)) :
            case (fieldNum(VendInvoiceInfoTable, MatchStatus)) :
            case (fieldNum(VendInvoiceInfoTable, Ordering)) :
            case (fieldNum(VendInvoiceInfoTable, ParmId)) :
            case (fieldNum(VendInvoiceInfoTable, ParmJobStatus)) :
            case (fieldNum(VendInvoiceInfoTable, PaymMode)) :
            case (fieldNum(VendInvoiceInfoTable, PaymSpec)) :
            case (fieldNum(VendInvoiceInfoTable, PoolRecId)) :
            case (fieldNum(VendInvoiceInfoTable, Port)) :
            case (fieldNum(VendInvoiceInfoTable, PurchAgreementHeader_PSN)) :
            case (fieldNum(VendInvoiceInfoTable, PurchName)) :
            case (fieldNum(VendInvoiceInfoTable, Recalculate)) :
            case (fieldNum(VendInvoiceInfoTable, ReleaseDateComment)) :
            case (fieldNum(VendInvoiceInfoTable, RemittanceLocation)) :
            case (fieldNum(VendInvoiceInfoTable, RequestStatus)) :
            case (fieldNum(VendInvoiceInfoTable, SettleVoucher)) :
            case (fieldNum(VendInvoiceInfoTable, SourceDocumentHeader)) :
            case (fieldNum(VendInvoiceInfoTable, SourceDocumentLine)) :
            case (fieldNum(VendInvoiceInfoTable, StartDateTime)) :
            case (fieldNum(VendInvoiceInfoTable, StatProcId)) :
            case (fieldNum(VendInvoiceInfoTable, Storno)) :
            case (fieldNum(VendInvoiceInfoTable, TableRefId)) :
            case (fieldNum(VendInvoiceInfoTable, TransactionCode)) :
            case (fieldNum(VendInvoiceInfoTable, Transport)) :
            case (fieldNum(VendInvoiceInfoTable, VarianceApproved)) :
            case (fieldNum(VendInvoiceInfoTable, VarianceApprovedDateTime)) :
            case (fieldNum(VendInvoiceInfoTable, VarianceApprover)) :
            case (fieldNum(VendInvoiceInfoTable, VarianceComment)) :
            case (fieldNum(VendInvoiceInfoTable, VendBankAccountID)) :
            case (fieldNum(VendInvoiceInfoTable, VendInvoiceGroup)) :
            case (fieldNum(VendInvoiceInfoTable, VendInvoiceSaveStatus)) :
            case (fieldNum(VendInvoiceInfoTable, VendorRequestedWorkerEmail)) :
            case (fieldNum(VendInvoiceInfoTable, VendPaymentGroup)) :
                return true;

            default :
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyVendInvoiceRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers the ranges from one query to another query.
    /// </summary>
    /// <param name="_unpostedInvoicesQuery">
    /// The query to transfer the ranges from.
    /// </param>
    /// <param name="_postedInvoiesQuery">
    /// The query to transfer the ranges to.
    /// </param>
    /// <remarks>
    /// This method is designed to transfer the ranges from a query for unposted invoices to a query for posted invoices.
    /// </remarks>
    public static void copyVendInvoiceRanges(Query  _unpostedInvoicesQuery, Query _postedInvoiesQuery)
    {
        int                     dataSourceNumber;
        QueryBuildDataSource    dataSourceToCopyRangeFrom;

        //
        // Transfer the ranges and run the second query
        // for each datasource
        //
        for (dataSourceNumber = 1; dataSourceNumber <= _unpostedInvoicesQuery.dataSourceCount(); dataSourceNumber++)
        {
            // retrieve datasource
            dataSourceToCopyRangeFrom = _unpostedInvoicesQuery.dataSourceNo(dataSourceNumber);

            if (dataSourceToCopyRangeFrom.table() != tableNum(VendInvoiceInfoTable) && dataSourceToCopyRangeFrom.table() != tableNum(VendInvoiceInfoLine))
            {
                // if the current table is one of the tables that maps 1:1 to the other query, then just look for the same table ID
                VendDirective_PSN::copyRanges(dataSourceToCopyRangeFrom, _postedInvoiesQuery.dataSourceTable(dataSourceToCopyRangeFrom.table()));
            }
            else if (dataSourceToCopyRangeFrom.table() == tableNum(VendInvoiceInfoTable))
            {
                // if the current table is VendInvoiceInfoTable then the table it should map to is VendInvoiceJour
                VendDirective_PSN::copyRanges(dataSourceToCopyRangeFrom, _postedInvoiesQuery.dataSourceTable(tableNum(VendInvoiceJour)));
            }
            else if (dataSourceToCopyRangeFrom.table() == tableNum(VendInvoiceInfoLine))
            {
                // if the current table is VendInvoiceInfoLine then the table it should map to is VendInvoiceTrans
                VendDirective_PSN::copyRanges(dataSourceToCopyRangeFrom, _postedInvoiesQuery.dataSourceTable(tableNum(VendInvoiceTrans)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>VendDirective_PSN</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>VendDirective_PSN</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    A base enum value which indicates the concurrency model to use; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>VendDirective_PSN</c> table; otherwise, an empty record.
    /// </returns>
    public static VendDirective_PSN find(
        CustVendDirectiveRecId_PSN _recId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendDirective_PSN vendDirective;

        vendDirective.selectForUpdate(_forupdate);

        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vendDirective.concurrencyModel(_concurrencyModel);
        }

        select firstonly vendDirective
            where vendDirective.RecId == _recId;

        return vendDirective;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PurchFrenchRegulatory_PSN</ConfigurationKey>
	<DeveloperDocumentation>@GLS223146</DeveloperDocumentation>
	<Label>@GLS223194</Label>
	<TitleField1>VendDirectiveId</TitleField1>
	<TitleField2>RecId</TitleField2>
	<Extends>CustVendDirective_PSN</Extends>
	<Modules>AccountsPayable</Modules>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequisitionOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendRoutingSlip_PSN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendDirectiveId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WithholdingDeduction</Name>
			<Label>@GLS223227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WithholdCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WithholdAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeductCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeductAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DeductAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@GLS223218</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeductCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendWithholdDeductCode_PSN</ExtendedDataType>
			<Label>@GLS223216</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RequisitionOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@GLS223234</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendDirectiveId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendDirectiveId_PSN</ExtendedDataType>
			<Label>@GLS223194</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendRoutingSlip_PSN</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendRoutingSlipRecId_PSN</ExtendedDataType>
			<Label>@GLS223208</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>WithholdAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@GLS223214</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WithholdCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendWithholdDeductCode_PSN</ExtendedDataType>
			<Label>@GLS223228</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VendRoutingSlip_PSN</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VendRoutingSlip_PSN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustVendDirective_Mandat</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CustVendDirective_PSN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendRoutingSlip_PSN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendRoutingSlip_PSN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendRoutingSlip_PSN</Name>
					<Field>VendRoutingSlip_PSN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>