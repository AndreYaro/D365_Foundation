<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatExternalCatalog</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CatExternalCatalog extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.DefaultQuoteExpiration = 365; //Indicating maximum expiration unless setup.
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        //Add initial data in the external catalog translation table
        CatExternalCatalogTranslation::insertExternalCatalogTranslation(this.RecId, this.Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        if (ret)
        {
            CatExternalCatalog                  catExternalCatalog;
            CatExternalCatalogQuote             catExternalCatalogQuote;
            CatExternalQuoteProductReference    catExternalQuoteProductReference;

            // to find is there any existing reference for the current external catalog.
            select recId from catExternalCatalog
                where catExternalCatalog.RecId == this.RecId
            join recId from catExternalCatalogQuote
                where catExternalCatalogQuote.ExternalCatalog == catExternalCatalog.recid
            join recId from catExternalQuoteProductReference
                where catExternalQuoteProductReference.ExternalQuote == catExternalCatalogQuote.RecId;

            // if external catalog is currently referrenced then return false
            if (catExternalCatalog)
            {
                ret = checkFailed("@SCM:CatExternalCatalogCannotBeDeleted");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a <c>CatExternalCatalogTable</c> record exists with the specified name.
    /// </summary>
    /// <param name="_catalogName">
    ///    An instance of the <c>CatExternalCatalogName</c> data type.
    /// </param>
    /// <returns>
    ///    true if the record was found; otherwise, false.
    /// </returns>
    public static boolean checkExist(CatExternalCatalogName _catalogName)
    {
        if (!CatExternalCatalog::exist(_catalogName))
        {
            return checkFailed(strfmt("@SYS102208", _catalogName));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a <c>CatExternalCatalogTable</c> record exists with the specified name.
    /// </summary>
    /// <param name="_catalogName">
    ///    An instance of the <c>CatExternalCatalogName</c> data type.
    /// </param>
    /// <returns>
    ///    true if the record was found; otherwise, false.
    /// </returns>
    public static boolean exist(CatExternalCatalogName _catalogName)
    {
        return (CatExternalCatalog::find(_catalogName).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>CatExternalCatalogTable</c> record with the specific name.
    /// </summary>
    /// <param name="_catalogName">
    /// The name of the catalog entry.
    /// </param>
    /// <param  name='_forUpdate'>
    /// A <c>boolean</c> value indicating whether the record should be selected for update or not.
    /// </param>
    /// <returns>
    /// Found <c>CatExternalCatalogTable</c> record or an empty record.
    /// </returns>
    public static CatExternalCatalog find(CatExternalCatalogName _catalogName, boolean _forUpdate = false)
    {
        CatExternalCatalog catExternalCatalog;

        if (_catalogName)
        {
            catExternalCatalog.selectForUpdate(_forUpdate);

            select firstonly catExternalCatalog
                index hint NameIdx
                    where catExternalCatalog.Name == _catalogName;
        }
        return catExternalCatalog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>CatExternalCatalogTable</c> record with the specific <c>CatExternalCatalogRecId</c>.
    /// </summary>
    /// <param name="_recId">
    /// The record id for the external catalog.
    /// </param>
    /// <param  name='_forUpdate'>
    /// A <c>boolean</c> value indicating whether the record should be selected for update or not.
    /// </param>
    /// <returns>
    /// Found <c>CatExternalCatalogTable</c> record or an empty record.
    /// </returns>
    public static CatExternalCatalog findByRecId(CatExternalCatalogRecId _recId, boolean _forUpdate = false)
    {
        CatExternalCatalog catExternalCatalog;

        if (_recId)
        {
            catExternalCatalog.selectForUpdate(_forUpdate);

            select firstonly catExternalCatalog
                where catExternalCatalog.RecId == _recId;
        }
        return catExternalCatalog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPublishedMediumSizeImageFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the file name of the given external catalog image that is published to the EP.
    /// </summary>
    /// <param name="_catExternalCatalogRecId">
    /// The record ID of the <c>CatExternalCatalog</c> table.
    /// </param>
    /// <returns>
    /// The file name of the external catalog image.
    /// </returns>
    /// <remarks>
    /// If the external catalog has no image a default image will be used.
    /// </remarks>
    public static Filename getPublishedMediumSizeImageFileName(recId _catExternalCatalogRecId)
    {
        Filename            imageFileName;
        DocuRef             docuRef;
        EcoResProductImage  ecoResProductImage;
        CatExternalCatalog  catExternalCatalogRecord;

        select RefTableId, RefRecId, recId from docuRef
            join recId from catExternalCatalogRecord
                where docuRef.RefTableId == catExternalCatalogRecord.TableId
                    && docuRef.RefRecId == _catExternalCatalogRecId
            join recId, RefRecId, ImageFormat from ecoResProductImage
                where ecoResProductImage.RefRecId == docuRef.RecId;

        if (ecoResProductImage)
        {
            imageFileName = CatDisplayHelper::getPublishedImageFileName(ecoResProductImage, fieldnum(EcoResProductImage, MediumSize), ecoResProductImage.ImageFormat);
        }
        else //if there is no image available for the external catalog then use the default image
        {
            imageFileName = SysResource::getImagePath(tableId2Name(catExternalCatalogRecord.TableId), false, '');
        }

        return imageFileName;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ProcCatalog</ConfigurationKey>
	<DeveloperDocumentation>@SYS317403</DeveloperDocumentation>
	<FormRef>CatExternalCatalogEdit</FormRef>
	<Label>@SYS131257</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>State</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>NameIdx</ClusteredIndex>
	<Modules>ProcurementAndSourcing</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>NameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CatExternalCatalogCategories</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CatExternalCatalogCategories</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CatExternalCatalogVendor</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CatExternalCatalogVendor</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>CatExternalCatalog</Relation>
			<Table>CatExternalMessageFormat</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction2</Name>
			<Relation></Relation>
			<Table>CatExternalCatalogProcurementCategories</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Owner</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Catalog</Name>
			<Label>@SYS89156</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsOpenedInNewWindow</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Contacts</Name>
			<Label>@SYS36170</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContactPerson</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Owner</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>QuoteSettings</Name>
			<Label>@SYS131225</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultQuoteExpiration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuoteQuantityChange</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuoteItemDeletion</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS36398</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>State</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ContactPerson</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DefaultQuoteExpiration</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CatDefaultQuoteExp</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsOpenedInNewWindow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CatExternalCatalogNewWindow</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CatExternalCatalogName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Owner</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CatOwner</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>QuoteItemDeletion</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CatQuoteItemDeletion</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>QuoteQuantityChange</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CatQuoteQuantityChange</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>State</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CatExternalCatalogState</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Party</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<Label>@SYS304585</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes>
		<AxTableFullTextIndex>
			<Name>FullTextIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableFullTextIndex>
	</FullTextIndexes>
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CatExternalCatalog</Name>
			<RelatedTable>CatExternalCatalog</RelatedTable>
			<RelatedTableRole>Self</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>CatExternalCatalog</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ContactPerson</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ContactPerson</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ContactPerson</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ContactPerson_CatExternalCatalog</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContactPerson</Name>
					<Field>ContactPerson</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SysUserInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SysUserInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>SysUserInfo</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>SysUserInfo_CatExternalCatalog</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Owner</Name>
					<Field>Owner</Field>
					<RelatedField>Id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DirParty</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>DirPartyTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>