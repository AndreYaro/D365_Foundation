<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailInventItemLabel</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailInventItemLabel extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculatePrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the retail price for the current store for a specified date.
    /// </summary>
    /// <param name="_validDate">
    /// The date to which the price should be calculated upon.
    /// </param>
    /// <returns>
    /// A retail price for the store for a specified date.
    /// </returns>
    /// <remarks>
    /// Calls the <c>GetValidRetailPrice2</c> method to get the value for the price.
    /// </remarks>
    real calculatePrice(RetailLabelValidOnDate _validDate)
    {
        return RetailPricingEngine::getRetailPriceByItem(this.StoreId, this.ItemId, this.UnitID, InventDimCombination::findVariantId(this.VariantId).InventDimId, DateTimeUtil::newDateTime(_validDate, DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone())), this.VariantId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateLastPrinted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays last  printed date for the label.
    /// </summary>
    /// <returns>
    /// The last printed date for the label.
    /// </returns>
    display RetailDateLastPrinted dateLastPrinted()
    {
        date ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    //Lookup("Store Price Information"."Date when Shelf Label Printed" WHERE (Item No.=FIELD(Item No.),Store No.=FIELD(Store No.)))

    /// <summary>
    /// Deletes a record from <c>RetailInventItemLabel</c> table.
    /// </summary>
    /// <remarks>
    /// If replication of the record is allowed for the table, unprocessed(dead) records are removed from the distribution list.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// If the label is already printed, an error is thrown that label file can not be deleted.
    /// </exception>
    public void delete()
    {
        if (this.Printed == true)
            throw error("@RET3977");

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>futureLabelExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the future label exists for the current <c>ItemId</c>, <c>StoreId</c>, <c>VariantId</c>,
    /// and <c>UnitId</c> values.
    /// </summary>
    /// <returns>
    /// true if the future label exists; otherwise false.
    /// </returns>
    display boolean futureLabelExists()
    {
        RetailInventItemLabel rboIIL;

        select firstonly rboIIL
        where   rboIIL.Type == RetailLabelFutureLabelBase::FutureLabel
        &&      rboIIL.ItemId == this.ItemId
        &&      rboIIL.StoreId == this.StoreId
        &&      rboIIL.VariantId == this.VariantId
        &&      rboIIL.UnitID == this.UnitID;

        if (rboIIL)
            return true;
        else
            return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCreateLabels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the values for the fields of the <c>RetailInventItemLabel</c> table.
    /// </summary>
    /// <remarks>
    /// Calls the <c>updatePrice</c> and <c>validateReportName</c> methods to update price and text fields.
    /// </remarks>
    void initFromCreateLabels()
    {
        RetailInventTable       rboInventTable;
        InventItemBarcode       barcode;

        this.updatePrice();
        this.validateReportName();

        if (this.VariantId != '')
        {
            select firstonly barcode
            where barcode.RetailVariantId == this.VariantId;

            if (barcode)
            {
                this.ItemBarCode = barcode.ItemBarCode;
                this.UnitID = barcode.UnitID;
            }
        }
        else if (this.UnitID != '')
        {
            // The the barcode based upon the UnitID provided for this item.
            select firstonly barcode
                where barcode.itemId == this.ItemId && barcode.UnitID == this.UnitID;
            
            if (barcode)            
            {
                this.ItemBarCode = barcode.itemBarCode;
            }
        }
        
        if (this.ItemBarCode == '')
        {
            // Use the items default barcode if none were found above
            this.ItemBarCode = rboInventTable.defaultBarcode(this.ItemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the field values in new <c>RetailInventItemLabel</c> record.
    /// </summary>
    /// <remarks>
    /// The Qty value is initilized.
    /// </remarks>
    public void initValue()
    {
        this.Qty = 1;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the item description for the item ID.
    /// </summary>
    /// <returns>
    /// The item description for the item ID.
    /// </returns>
    display ItemName itemDescription()
    {
        return InventTable::find(this.ItemId).defaultProductName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates and initializes the properties of an item.
    /// </summary>
    void itemValidate()
    {
        RetailInventItemLabelSetup rboLabelSetup;
        RetailInventTable          rboInventTable;

    /*
        this.Price = this.CalculatePrice(this.ValidOnDate);
        this.CompLabelPrice = RetailPriceUtilities::calcComparisonPrice(this.itemId,this.Price);
    */
        this.updatePrice();

        // Get the invent item label setup based on the caller report name.
        // If the caller report name doesnt exist then fetch from item id.
        rboLabelSetup = retailLabelUtils::findItemLabelSetup(this.LabelType, this.ItemId, this.ReportName);

        if (!rboLabelSetup)
        {
            rboLabelSetup = RetailLabelUtils::findLabelSetup(this.LabelType,this.ItemId,this.StoreId);
        }

        if (rboLabelSetup)
        {
            this.ReportName = rboLabelSetup.ReportName;
            this.validateReportName();

            if (this.ItemBarCode == "")
            {
                this.ItemBarCode = rboInventTable.defaultBarcode(this.ItemId);
            }
        }
        else
        {
            this.ReportName = "";
            this.Text1 = "";
            this.Text2 = "";
            this.ItemBarCode = "";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the method when a field is modified.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID which is modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (fieldExt2Id(_fieldId))
        {
            case fieldNum(RetailInventItemLabel, ItemId):
                this.itemValidate();
                break;
            case fieldNum(RetailInventItemLabel, ItemBarCode):
                if (this.ItemBarCode)
                {
                    this.ItemId = InventItemBarcode::findBarcode(strLTrim(this.ItemBarCode),false,false).ItemId;
                    this.updatePrice();
                }

                break;
            case fieldNum(RetailInventItemLabel, VariantId):
                this.updatePrice();
                break;
            case fieldNum(RetailInventItemLabel, StoreId):
                if (this.ItemId)
                {
                    this.updatePrice();
                }

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Throws the error while renaming the record if the distribution type is other than Ã¢â‚¬ËœNoDistributionÃ¢â‚¬â„¢.
    /// </summary>
    /// <remarks>
    /// The <c>errorOnRename</c> method of <c>RetailConnActionManagement</c> is called.
    /// </remarks>
    public void renamePrimaryKey()
    {
        ;
        RetailConnActionManagement::errorOnRename(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeLastPrinted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the time the label printed last time.
    /// </summary>
    /// <returns>
    /// The time the label printed last time.
    /// </returns>
    display RetailTimeLastPrinted timeLastPrinted()
    {
        int ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the values for the <c>UnitID</c>, <c>Price</c> and <c>CompLabelPrice</c> fields.
    /// </summary>
    void updatePrice()
    {
        this.UnitID = InventTableModule::find(this.ItemId, ModuleInventPurchSales::Sales).UnitId;
        this.Price = this.calculatePrice(this.ValidOnDate);
        this.CompLabelPrice = RetailPriceUtilities::calcComparisonPrice(this.ItemId,this.Price);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the field is valid.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    /// The field Id which is to be validated.
    /// </param>
    /// <returns>
    /// true if the field is valid; otherwise false.
    /// </returns>
    /// <remarks>
    /// Calls method <c>itemValidate</c> to validate field <c>ItemId</c>.
    /// Calls method <c>findInputBarcode</c> to validate field <c>ItemBarcode</c>.
    /// Calls method <c>validateReportName</c> to validate field <c>ReportName</c>.
    /// </remarks>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (fieldExt2Id(_fieldIdToCheck))
        {
            case fieldNum(RetailInventItemLabel, ItemId):
                this.itemValidate();
                break;
            case fieldNum(RetailInventItemLabel, ItemBarCode):
                if (this.ItemBarCode)
                {
                    InventItemBarcode inventItemBarcode = InventItemBarcode::findBarcode(strLTrim(this.ItemBarCode),false,false);

                    this.ItemId = inventItemBarcode.ItemId;
                    this.VariantId = inventItemBarcode.RetailVariantId;
                    this.validateReportName();
                }
                
                break;
            case fieldNum(RetailInventItemLabel, ReportName):
                this.validateReportName();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value for the <c>ReportName</c> field.
    /// </summary>
    void validateReportName()
    {
        RetailInventItemLabelSetup labelSetup;

    //    labelSetup = RetailLabelUtils::findLabelSetup(this.LabelType,this.ItemId,this.StoreId);

        select firstonly labelSetup
        where   labelSetup.LabelType == this.LabelType
        &&      labelSetup.ItemId == this.ItemId
        &&      labelSetup.ReportName == this.ReportName;

        if (labelSetup)
        {
            this.Text1 = labelSetup.Text1;
            this.Text2 = labelSetup.Text2;
        }
        else
        {
            this.Text1 = "";
            this.Text2 = "";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSetupItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates and initializes the properties of an item.
    /// </summary>
    void validateSetupItem()
    {
        RetailInventItemLabelSetup rboLabelSetup;
        RetailInventTable          rboInventTable;

        this.updatePrice();

        rboLabelSetup = RetailLabelUtils::findLabelSetup(this.LabelType,this.ItemId,this.StoreId);

        if (rboLabelSetup)
        {
            this.ReportName = rboLabelSetup.ReportName;
            this.validateSetupReportName();

            if (this.ItemBarCode == "")
                this.ItemBarCode = rboInventTable.defaultBarcode(this.ItemId);
        }
        else
        {
            this.ReportName = "";
            this.Text1 = "";
            this.Text2 = "";
            this.ItemBarCode = "";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSetupReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates and initializes the value for the <c>ReportName</c> field.
    /// </summary>
    void validateSetupReportName()
    {
        RetailInventItemLabelSetup labelSetup;

        select firstonly labelSetup
        where   labelSetup.LabelType == this.LabelType
        &&      labelSetup.ItemId == this.ItemId
        &&      labelSetup.ReportName == this.ReportName;

        if (labelSetup)
        {
            this.Text1 = labelSetup.Text1;
            this.Text2 = labelSetup.Text2;
        }
        else
        {
            this.Text1 = "";
            this.Text2 = "";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>RetailInventItemLabel</c> table.
    /// </summary>
    /// <param name="labelType">
    /// The label type of the <c>RetailInventItemLabel</c> record.
    /// </param>
    /// <param name="storeId">
    /// The store ID of the <c>RetailInventItemLabel</c> record.
    /// </param>
    /// <param name="itemId">
    /// The item ID of the <c>RetailInventItemLabel</c> record.
    /// </param>
    /// <param name="variantId">
    /// The variant ID of the <c>RetailInventItemLabel</c> record.
    /// </param>
    /// <param name="unitId">
    /// The unit ID of the <c>RetailInventItemLabel</c> record.
    /// </param>
    /// <param name="validOnDate">
    /// The valid on date of the <c>RetailInventItemLabel</c> record.
    /// </param>
    /// <param name="reportName">
    /// The report name of the <c>RetailInventItemLabel</c> record.
    /// </param>
    /// <param name="update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailInventItemLabel</c> table; otherwise, an empty record.
    /// </returns>
    static RetailInventItemLabel find(RetailLabelTypeBase    labelType,
                                   RetailStoreId          storeId,
                                   ItemId              itemId,
                                   RetailVariantId        variantId,
                                   UnitOfMeasureSymbol unitId,
                                   RetailLabelValidOnDate validOnDate,
                                   RetailReportName       reportName,
                                   boolean             update = false)
    {
        RetailInventItemLabel  rboInventItemLabel;
        ;

        rboInventItemLabel.selectForUpdate(update);

        select firstonly rboInventItemLabel
            index hint PrimaryIdx
            where rboInventItemLabel.LabelType == labelType
            &&    rboInventItemLabel.StoreId == storeId
            &&    rboInventItemLabel.ItemId == itemId
            &&    rboInventItemLabel.VariantId == variantId
            &&    rboInventItemLabel.UnitID == unitId
            &&    rboInventItemLabel.ValidOnDate == validOnDate
            &&    rboInventItemLabel.ReportName == reportName;

        return rboInventItemLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailVariantIdLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the product variant number pertaining to the product
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control object in which to perform the lookup.
    /// </param>
    /// <param name="_itemId">
    /// The item ID of <c>RetailInventItemLabel</c> table.
    /// </param>
    public static void retailVariantIdLookup(FormStringControl _ctrl, ItemId _itemId)
    {
        Query query = new Query();
        QueryBuildDataSource dsInventDimCombination;
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(InventDimCombination),_ctrl);

        dsInventDimCombination = query.addDataSource(TableNum(InventDimCombination));
        dsInventDimCombination.addRange(fieldNum(InventDimCombination,ItemId)).value(_itemId);

        sysTableLookup.parmQuery(query);
        sysTableLookup.addLookupfield(fieldNum(InventDimCombination,RetailVariantId));
        sysTableLookup.addLookupfield(fieldNum(InventDimCombination,ItemId));
        sysTableLookup.addLookupfield(fieldNum(InventDimCombination,InventDimId));
        sysTableLookup.addLookupfield(fieldNum(InventDimCombination,DistinctProductVariant));

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBarcode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>RetailInventItemLabel</c> table.
    /// </summary>
    /// <param name="_labelType">
    /// The label type of the <c>RetailInventItemLabel</c> record.
    /// </param>
    /// <param name="_storeId">
    /// The store ID of the <c>RetailInventItemLabel</c> record.
    /// </param>
    /// <param name="_itemId">
    /// The item ID of the <c>RetailInventItemLabel</c> record.
    /// </param>
    /// <param name="_variantId">
    /// The variant ID of the <c>RetailInventItemLabel</c> record.
    /// </param>
    /// <param name="_unitId">
    /// The unit ID of the <c>RetailInventItemLabel</c> record.
    /// </param>
    /// <param name="_validOnDate">
    /// The valid on date of the <c>RetailInventItemLabel</c> record.
    /// </param>
    /// <param name="_reportName">
    /// The report name of the <c>RetailInventItemLabel</c> record.
    /// </param>
    /// <param name="_itemBarcode">
    /// The item barcode of the <c>RetailInventItemLabel</c> record.
    /// </param>
    /// <param name=")update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailInventItemLabel</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailInventItemLabel findBarcode(RetailLabelTypeBase _labelType,
                                          RetailStoreId _storeId,
                                          ItemId _itemId,
                                          RetailVariantId _variantId,
                                          UnitOfMeasureSymbol _unitId,
                                          RetailLabelValidOnDate _validOnDate,
                                          RetailReportName _reportName,
                                          ItemBarCode _itemBarcode,
                                          boolean _update = false)
    {
        RetailInventItemLabel  rboInventItemLabel;

        rboInventItemLabel.selectForUpdate(_update);

        select firstonly rboInventItemLabel
            index hint PrimaryIdx
            where rboInventItemLabel.LabelType == _labelType
            && rboInventItemLabel.StoreId == _storeId
            && rboInventItemLabel.ItemId == _itemId
            && rboInventItemLabel.VariantId == _variantId
            && rboInventItemLabel.UnitID == _unitId
            && rboInventItemLabel.ValidOnDate == _validOnDate
            && rboInventItemLabel.ReportName == _reportName
            && rboInventItemLabel.ItemBarCode == _itemBarcode;

        return rboInventItemLabel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET260695</DeveloperDocumentation>
	<FormRef>RetailInventItemLabel</FormRef>
	<Label>@RET3122</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>LabelType</TitleField1>
	<TitleField2>StoreId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>PrimaryIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>InventoryAndAdvancedWarehouse</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StoreId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemBarCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VariantId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrimaryKey</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LabelChangeJournalNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LabelChangeJournalTrans</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Item</Name>
			<Label>@RET3059</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemBarCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VariantId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LastPrinted</Name>
			<Label>@RET3128</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>dateLastPrinted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>timeLastPrinted</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@RET3060</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompLabelPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Qty</Name>
			<Label>@RET3129</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Report</Name>
			<Label>@RET3130</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReportName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Text1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Text2</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Store</Name>
			<Label>@RET3088</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StoreId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Type</Name>
			<Label>@RET3042</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LabelType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Validation</Name>
			<Label>@RET3131</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Printed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidOnDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemGroupForHeader</Name>
			<Label>@Retail:ItemHeaderLabel</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CompLabelPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLabelPrice</ExtendedDataType>
			<Label>@RET3126</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDim</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemBarCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemBarCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LabelType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLabelType</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<EnumType>RetailLabelTypeBase</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Price</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLabelPrice</ExtendedDataType>
			<Label>@RET3125</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PrimaryKey</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailPrimaryKey</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Printed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLabelPrinted</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReportName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailReportName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StoreId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Text1</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDescription</ExtendedDataType>
			<Label>@RET3124</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Text2</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDescription</ExtendedDataType>
			<Label>@RET3123</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Type</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLabelFutureLabel</ExtendedDataType>
			<EnumType>RetailLabelFutureLabelBase</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
			<Label>@RET3127</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidOnDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLabelValidOnDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VariantId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailVariantId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LabelChangeJournalNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLabelChangeJournalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LabelChangeJournalTrans</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PrimaryIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LabelType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StoreId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDim</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VariantId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>UnitID</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidOnDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReportName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>UpdToNewDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Type</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StoreId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidOnDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Printed</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LabelChangeJournalTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LabelType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LabelChangeJournalNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LabelChangeJournalTrans</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Printed</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDim</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDim</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventDimCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDimCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VariantId</Name>
					<SourceEDT>RetailVariantId</SourceEDT>
					<Field>VariantId</Field>
					<RelatedField>RetailVariantId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventItemBarcode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventItemBarcode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemBarCode</Name>
					<SourceEDT>ItemBarCode</SourceEDT>
					<Field>ItemBarCode</Field>
					<RelatedField>itemBarCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailInventItemLabelReportSetup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailInventItemLabelReportSetup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LabelType</Name>
					<SourceEDT>RetailLabelType</SourceEDT>
					<Field>LabelType</Field>
					<RelatedField>type</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReportName</Name>
					<SourceEDT>RetailReportName</SourceEDT>
					<Field>ReportName</Field>
					<RelatedField>ReportName</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailStoreTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailStoreTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StoreId</Name>
					<SourceEDT>RetailStoreId</SourceEDT>
					<Field>StoreId</Field>
					<RelatedField>StoreNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StoreNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailLabelChangeJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailLabelChangeJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LabelChangeJournalNum</Name>
					<Field>LabelChangeJournalNum</Field>
					<RelatedField>JournalNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailLabelChangeJournalTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>RetailLabelChangeJournalTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LabelChangeJournalTrans</Name>
					<SourceEDT>RefRecId</SourceEDT>
					<Field>LabelChangeJournalTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>