<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustTradingPartnerCode</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustTradingPartnerCode extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates <c>CustTradingPartnerCode</c> table field.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    /// Field id to validate
    /// </param>
    /// <returns>
    /// true if the validation succeeds, otherwise, false.
    /// </returns>
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;
        int lengthTradingPartnerCode;
        ;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldnum(CustTradingPartnerCode, TradingPartnerCode):
                    lengthTradingPartnerCode = strlen(this.TradingPartnerCode);

                    if (lengthTradingPartnerCode < 2 || lengthTradingPartnerCode > 4)
                    {
                        ret = false;
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>CustTradingPartnerCode</c> table; if not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>CustTradingPartnerCode</c> table record to be checked for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;
        ;

        if (!CustTradingPartnerCode::exist(_recId))
        {
            ret = checkFailed(strfmt(CustTradingPartnerCode::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>CustTradingPartnerCode</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>CustTradingPartnerCode</c> table to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists, otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(RecId _recId)
    {
        boolean found;
        ;

        found = (select firstonly
                     RecId
                 from
                     custTradingPartnerCode
                 where
                     custTradingPartnerCode.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CustTradingPartnerCode</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The recId of the <c>CustTradingPartnerCode</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to be used when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record of the <c>CustTradingPartnerCode</c> table if found; otherwise, an empty buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static CustTradingPartnerCode find(
        recId   _recId,
        boolean _forUpdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustTradingPartnerCode    custTradingPartnerCode;
        ;

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custTradingPartnerCode.concurrencyModel(_concurrencyModel);
        }

        if (_recId)
        {
            custTradingPartnerCode.selectForUpdate(_forUpdate);

            select firstonly custTradingPartnerCode
                where custTradingPartnerCode.RecId == _recId;
        }

        return custTradingPartnerCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record from the <c>CustTradingPartnerCode</c> table for the provided trading partner code.
    /// </summary>
    /// <param name="_code">
    /// The trading partner code field of the <c>CustTradingPartnerCode</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to be used when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record of the <c>CustTradingPartnerCode</c> table if found; otherwise, an empty buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static CustTradingPartnerCode findByCode(
        TradingPartnerCodeId   _code,
        boolean _forUpdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustTradingPartnerCode    custTradingPartnerCode;
        ;

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custTradingPartnerCode.concurrencyModel(_concurrencyModel);
        }

        if (_code)
        {
            custTradingPartnerCode.selectForUpdate(_forUpdate);

            select firstonly custTradingPartnerCode
                where custTradingPartnerCode.TradingPartnerCode == _code;
        }

        return custTradingPartnerCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefTradingPartnerCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the Go To Main Table functionality for <c>CustTradingPartnerCode</c> table.
    /// </summary>
    /// <param name="_object">
    /// The caller object where the event is triggered.
    /// </param>
    /// <param name="_tradingPartnerCodeRecId">
    /// The primary key of the record to show.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void jumpRefTradingPartnerCode(Object _object, RecId _tradingPartnerCodeRecId)
    {
        Args args = new Args();
        args.record(CustTradingPartnerCode::find(_tradingPartnerCodeRecId,false));
        args.caller(_object);

        new MenuFunction(menuitemDisplayStr(CustTradingPartnerCode), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTradingPartnerCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the trading partner code.
    /// </summary>
    /// <param name="_formControl">
    /// The form control to perform the lookup for.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void lookupTradingPartnerCode(FormControl _formControl)
    {
        SysTableLookup  sysTableLookup = SysTableLookup::newParameters(tablenum(CustTradingPartnerCode), _formControl);
        ;

        sysTableLookup.addLookupfield(fieldnum(CustTradingPartnerCode, TradingPartnerCode));
        sysTableLookup.addLookupfield(fieldnum(CustTradingPartnerCode, Description));

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message to use when a specific record in the <c>CustTradingPartnerCode</c> does not exist.
    /// </summary>
    /// <returns>
    /// The message that indicates a record does not exist.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TxtNotExist txtNotExist()
    {
        return "@SYS127989";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PublicSector</ConfigurationKey>
	<DeveloperDocumentation>@SPS1011</DeveloperDocumentation>
	<FormRef>CustTradingPartnerCode</FormRef>
	<Label>@SPS127</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>TradingPartnerCode</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>CodeIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>CustTable</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TradingPartnerCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TradingPartnerCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TradingPartnerCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS22747</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TradingPartnerCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<ExtendedDataType>Description</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TradingPartnerCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<ExtendedDataType>TradingPartnerCodeId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TradingPartnerCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>