<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AgreementLineVolumeCommitment</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AgreementLineVolumeCommitment extends AgreementLine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cacheSalesPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Caches the sales purch line record to client side session's <C>SysGlobalCache</C>.
    /// </summary>
    /// <param name="_salesPurchLine">
    /// The record of current sales purch line which has link with agreement line.
    /// </param>
    /// <remarks>
    /// The sales purch line record is cached when do the validation check. And it is cached only for current session on client side.
    /// </remarks>
    public void cacheSalesPurchLine(
        SalesPurchLine  _salesPurchLine)
    
    {
        SysGlobalCache      cache;
        
        cache = classFactory.globalCache();
        cache.set(
            tableStr(AgreementLineVolumeCommitment),
            [sessionId(), curext(), this.RecId],
            _salesPurchLine);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAgreementRemansOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the remains for the <c>AgreementLine</c> object and retrieves them all in a container.
    /// </summary>
    /// <returns>
    /// A container that contains amounts for the <c>AgreementLine</c> object.
    /// </returns>
    public container calculateAgreementRemansOnServer()
    {
        #AgreementsRemains

        container                           remains;

        AgreementHeader                     agreementHeader;
        AgreementLineReleasedLine           agreementLineReleasedLine;

        SalesLine                           salesLine;
        CustInvoiceTrans                    custInvoiceTrans;
        ProjInvoiceItem                     projInvoiceItem;

        PurchLine                           purchLine;
        VendInvoiceTrans                    vendInvoiceTrans;

        SalesPurchLine                      salesPurchLine;

        VendInvoiceInfoTable                vendInvoiceInfoTable;
        VendInvoiceInfoLine                 vendInvoiceInfoLine;

        AgreementCommitedMonetaryAmount     commitedAmount;
        AgreementLineVolumeCommitment       savedVolumeCommitment;

        real    invoicedTotal;

        real    pendingInvoicedTotal;

        real    deliveredButNotInvoicedTotal;
        real    releasedButNeitherInvoicedNorDelivered;
        real    receivedButNotInvoiced;
        real    releasedButNeitherInvoicedNorReceived;

        if (!this.RecId)
        {
            // No fulfillment could exist.
            remains = conIns(remains, #RemainingIndex,                          this.CommitedAmount);
            remains = conIns(remains, #InvoicedIndex,                           0);
            remains = conIns(remains, #DeliveredNotInvoicedIndex,               0);
            remains = conIns(remains, #ReleasedNotInvoicedNorDeliveredIndex,    0);

            return remains;
        }

        agreementHeader = this.agreementHeader();

        // Commited Amount queried
        select firstonly CommitedAmount from savedVolumeCommitment
            where savedVolumeCommitment.RecId == this.RecId;

        commitedAmount = savedVolumeCommitment.CommitedAmount;

        if (agreementHeader is SalesAgreementHeader)
        {
            // SALES:
            // Find invoiced amounts...
            // for non-project related sales lines we are querying CustInvoiceTrans...
            select sum(LineAmount)
                from custInvoiceTrans
                exists join agreementLineReleasedLine
                    where   agreementLineReleasedLine.AgreementLine         == this.RecId
                       &&   agreementLineReleasedLine.ReferenceRelationType == custInvoiceTrans.TableId
                       &&   agreementLineReleasedLine.CustInvoiceTrans      == custInvoiceTrans.RecId
                       &&   agreementLineReleasedLine.IsDeleted             != true;
            invoicedTotal += custInvoiceTrans.LineAmount;

            //... adding invoiced amounts for the invoiced sales order lines associated with project
            //    by querying projInvoiceItem
            select sum(LineAmount)
                from projInvoiceItem
                exists join agreementLineReleasedLine
                    where   agreementLineReleasedLine.AgreementLine           == this.RecId
                       &&   agreementLineReleasedLine.ReferenceRelationType   == projInvoiceItem.TableId
                       &&   agreementLineReleasedLine.ProjInvoiceItem         == projInvoiceItem.RecId
                       &&   agreementLineReleasedLine.IsDeleted               != true;
            invoicedTotal += projInvoiceItem.LineAmount;

            // Query delivered but not ivoiced amounts and released, but neither delivered, nor invoiced
            // NOTE:
            //      For Volume based commitments currency is a matching criteria, so currency in all
            //      release lines should match AgreementLine currency.
            //
            // We need to do line-by-line calculations here, but only for not-fully invoiced lines!
            while select RemainSalesFinancial, RemainSalesPhysical, LineAmount, SalesQty
                , SalesType
                    from salesLine
                    where   salesLine.LineDeliveryType  != LineDeliveryType::OrderLineWithMultipleDeliveries
                       &&   salesLine.SalesStatus       != SalesStatus::Invoiced
                    exists join agreementLineReleasedLine
                        where   agreementLineReleasedLine.AgreementLine             == this.RecId
                           &&   agreementLineReleasedLine.ReferenceRelationType     == salesLine.TableId
                           &&   agreementLineReleasedLine.SalesLineDataAreaId       == salesLine.DataAreaId
                           &&   agreementLineReleasedLine.SalesLineInventTransId    == salesLine.InventTransId
                           &&   !agreementLineReleasedLine.IsDeleted
            {
                if (salesLine.SalesQty != 0)
                {
                    deliveredButNotInvoicedTotal            += salesLine.LineAmount/salesLine.SalesQty * salesLine.RemainSalesFinancial;
                    releasedButNeitherInvoicedNorDelivered  += salesLine.LineAmount/salesLine.SalesQty * salesLine.RemainSalesPhysical;
                }
                else
                    if (salesLine.SalesType != SalesType::ReturnItem)
                {
                    releasedButNeitherInvoicedNorDelivered  += salesLine.LineAmount;
                }
            }

            // Pack resulting container...
            remains =
                conIns(remains, #RemainingIndex,                      ( commitedAmount
                                                                        - invoicedTotal
                                                                        - deliveredButNotInvoicedTotal
                                                                        - releasedButNeitherInvoicedNorDelivered
                                                                      ));
            remains =
                conIns(remains, #InvoicedIndex,                         invoicedTotal);
            remains =
                conIns(remains, #DeliveredNotInvoicedIndex,             deliveredButNotInvoicedTotal);
            remains =
                conIns(remains, #ReleasedNotInvoicedNorDeliveredIndex,  releasedButNeitherInvoicedNorDelivered);
        }
        else
        {
            // PURCH:
            // Find invoiced amounts...
            // Here we only have non-project related release purchase lines, so we query VendInvoiceTrans...
            select sum(LineAmount)
                from vendInvoiceTrans
                exists join agreementLineReleasedLine
                    where   agreementLineReleasedLine.AgreementLine         == this.RecId
                       &&   agreementLineReleasedLine.ReferenceRelationType == vendInvoiceTrans.TableId
                       &&   agreementLineReleasedLine.VendInvoiceTrans      == vendInvoiceTrans.RecId
                       &&   !agreementLineReleasedLine.IsDeleted;
            invoicedTotal += vendInvoiceTrans.LineAmount;

            // Find Pending Direct invoiced numbers by querying VendInvoiceInfoLine
            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                select sum(LineAmount) from vendInvoiceInfoLine
                exists join vendInvoiceInfoTable
                    where vendInvoiceInfoLine.AgreementLine_PSN == this.RecId
                        && vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
                        && vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
                        && vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Waiting;

                pendingInvoicedTotal += vendInvoiceInfoLine.LineAmount;
            }

            // For every not-completelly-invoiced purchase line, matched with this agreement line
            // we calculate received-but-not-invoiced and released-but-neither-received-nor-invoiced amounts in
            // line's currency that IS matching criteria and therefore is the same as current agreement currency.
            salesPurchLine = this.getCachedSalesPurchLine();

            while select RemainPurchFinancial, RemainPurchPhysical, LineAmount, PurchQty
                    from purchLine
                    where   purchLine.LineDeliveryType  != LineDeliveryType::OrderLineWithMultipleDeliveries
                       &&   purchLine.PurchStatus       != PurchStatus::Invoiced
					   &&   (!salesPurchLine || PurchLine.LineDeliveryType    == salesPurchLine.LineDeliveryType)
                    exists join agreementLineReleasedLine
                        where   agreementLineReleasedLine.AgreementLine             == this.RecId
                           &&   agreementLineReleasedLine.ReferenceRelationType     == purchLine.TableId
                           &&   agreementLineReleasedLine.PurchLineDataAreaId       == purchLine.DataAreaId
                           &&   agreementLineReleasedLine.PurchLineInventTransId    == purchLine.InventTransId
                           &&   !agreementLineReleasedLine.IsDeleted
            {
                if (purchLine.PurchQty != 0)
                {
                    receivedButNotInvoiced                  += purchLine.LineAmount / purchLine.PurchQty * purchLine.RemainPurchFinancial;
                    releasedButNeitherInvoicedNorReceived   += purchLine.LineAmount / purchLine.PurchQty * purchLine.RemainPurchPhysical;
                }
                else
                {
                    releasedButNeitherInvoicedNorReceived   += purchLine.LineAmount;
                }
            }

            // Packing results...
            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                remains = conIns(remains, #RemainingIndex, (commitedAmount
                                                            - invoicedTotal
                                                            - pendingInvoicedTotal
                                                            - receivedButNotInvoiced
                                                            - releasedButNeitherInvoicedNorReceived));
            }
            else
            {
                remains =
                conIns(remains, #RemainingIndex,                       (commitedAmount
                                                                      - invoicedTotal
                                                                      - receivedButNotInvoiced
                                                                      - releasedButNeitherInvoicedNorReceived
                                                                        ));
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                remains =
                    conIns(remains, #InvoicedIndex,                         invoicedTotal
                                                                            + pendingInvoicedTotal
                                                                            );
            }
            else
            {
            remains =
                conIns(remains, #InvoicedIndex,                         invoicedTotal);
            }
            remains =
                conIns(remains, #ReceivedNotInvoicedIndex,              receivedButNotInvoiced);
            remains =
                conIns(remains, #ReleasedNotInvoicedNorReceivedIndex,   releasedButNeitherInvoicedNorReceived);
        }
        return remains;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canLinkTo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified order line can be associated with the current agreement line.
    /// </summary>
    /// <param name="_salesPurchLine">
    ///    The <c>SalesLine</c> or <c>PurchLine</c> record to check.
    /// </param>
    /// <returns>
    ///    true if the specified record can be associated with the agreement line; otherwise, false.
    /// </returns>
    public boolean canLinkTo(SalesPurchLine _salesPurchLine)
    {
        str     messageTxt;
        str     titleTxt;

        if (!super(_salesPurchLine))
        {
            return false;
        }

        SalesPurchLineInterface salesPurchLineInterface = _salesPurchLine.salesPurchLineInterface();

        if (!this.checkRemaining(salesPurchLineInterface.parmLineAmount()))
        {
            switch (_salesPurchLine.TableId)
            {
                case tableNum(SalesLine) :
                    messageTxt = strFmt("@SYS305708", salesPurchLineInterface.parmLineAmount(), this.remainingQueried());
                    titleTxt   = "@SYS305709";
                    break;
                case tableNum(PurchLine) :
                    messageTxt = strFmt("@SYS305710", salesPurchLineInterface.parmLineAmount(), this.remainingQueried());
                    titleTxt   = "@SYS305711";
                    break;
            }
            Box::stop(messageTxt, titleTxt);
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts currency dependable fields when the currency code has been changed according to the
    /// exchange rates between old and new currencies.
    /// </summary>
    /// <param name="_fromCurrencyCode">
    /// The old currency that was used in the <c>Agreement</c>.
    /// </param>
    /// <param name="_toCurrencyCode">
    /// The new currency for the <c>Agreement</c> to use.
    /// </param>
    /// <param name="_exchRateDate">
    /// The date for which to pick the correct exchange rate.
    /// </param>
    void convertCurrencyCode(CurrencyCode _fromCurrencyCode, CurrencyCode _toCurrencyCode, TransDate _exchRateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        if (_fromCurrencyCode && _toCurrencyCode && (_fromCurrencyCode != _toCurrencyCode))
        {
            // Perform recalculations only if both currency codes are specified and they are not the same
            super(_fromCurrencyCode, _toCurrencyCode, _exchRateDate);

            // Recalculate CommitedAmount
            if (this.CommitedAmount)
            {
                this.CommitedAmount = CurrencyExchangeHelper::curAmount2CurAmount(this.CommitedAmount, _fromCurrencyCode, _toCurrencyCode, _exchRateDate);
                if (this.IsModified != NoYes::Yes)
                {
                    this.IsModified = NoYes::Yes;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCachedSalesPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cached sales purch line record.
    /// </summary>
    /// <returns>
    /// The sales purch line record.
    /// </returns>
    /// <remarks>
    /// The cached sales purch line record is cached by <C>cacheSalesPurchLine</C>.
    /// </remarks>
    public SalesPurchLine getCachedSalesPurchLine()    
    {
        SysGlobalCache      cache;
        str                 cacheScope;
        container           cacheKey;
        SalesPurchLine      ret;
        
        cache       = classFactory.globalCache();
        cacheScope  = tableStr(AgreementLineQuantityCommitment);
        cacheKey    = [sessionId(), curext(), this.RecId];
        ret         = cache.get(cacheScope, cacheKey, null);
        
        if (ret)        
        {
            cache.remove(cacheScope, cacheKey);            
        }
        
        return ret;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLinkValid</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified order line fits for the current agreement line.
    /// </summary>
    /// <param name="_salesPurchLine">
    ///    The <c>SalesLine</c> or <c>PurchLine</c> record to check.
    /// </param>
    /// <param name="_showInfolog">
    ///    A Boolean value that indicates whether to print the errors in the Infolog; optional.
    /// </param>
    /// <returns>
    ///    true if the link between the specified record and the agreement line is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    If the <paramref name="_showInfolog" /> parameter is true, the information about all fields that do
    ///    not fit to the agreement criteria will be printed in the Infolog.
    /// </remarks>
    public boolean isLinkValid(SalesPurchLine _salesPurchLine, boolean _showInfolog = true)
    {
        SalesPurchLineInterface salesPurchLineInterface = _salesPurchLine.salesPurchLineInterface();

        boolean             ret = true;
        ModuleSalesPurch    module = _salesPurchLine.TableId == tableNum(SalesLine) ? ModuleSalesPurch::Sales : ModuleSalesPurch::Purch;
        SalesLine           salesLine;
        PurchLine           purchLine;
        boolean             isReturnLine;

        ret = super(_salesPurchLine, _showInfolog);

        if (!ret && !_showInfolog)
        {
            return false;
        }

        if (module == ModuleSalesPurch::Sales)
        {
            salesLine = _salesPurchLine;
            isReturnLine = salesLine.returnItem();
        }
        else
        if (_salesPurchLine.TableId == tableNum(PurchLine))
        {
            purchLine = _salesPurchLine;
            isReturnLine = purchLine.PurchaseType == PurchaseType::ReturnItem;
        }

        if (salesPurchLineInterface.parmCurrencyCode() != this.currencyCode())
        {
            if (_showInfolog)
            {
                if (module == ModuleSalesPurch::Sales)
                {
                    ret = checkFailed(#PreFixField(salesLine,CurrencyCode));
                }
                else
                {
                    ret = checkFailed(#PreFixField(purchLine,CurrencyCode));
                }
            }
            else
            {
                return false;
            }
        }

        this.cacheSalesPurchLine(_salesPurchLine);

        if (
            !isReturnLine &&
            !this.checkRemaining(salesPurchLineInterface.parmLineAmount() - salesPurchLineInterface.origInstance().parmLineAmount()))
        {//deduct current amount since it is taken into account when remaning quantity is calculated
            if (_showInfolog)
            {
                if (module == ModuleSalesPurch::Sales)
                {
                    ret = checkFailed(#PreFixField(salesLine,LineAmount));
                }
                else
                {
                    ret = checkFailed(#PreFixField(purchLine,LineAmount));
                }
            }
            else
            {
                return false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the changes to a field in the <c>AgreementLineVolumeCommitment</c> record.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    ///    The field ID of the field to validate.
    /// </param>
    /// <returns>
    ///    true if the value in the field is valid; otherwise, false.
    /// </returns>
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean     ok;
        real        commitedAmountDelta;

        ok = super(_fieldIdToCheck);

        if (_fieldIdToCheck == fieldNum(AgreementLineVolumeCommitment, CommitedAmount))
        {
            // Commited amount field validation makes sence only if MAX is enforced and
            // there were releases from this line...
            if (this.IsMaxEnforced == NoYes::Yes && this.isReleased())
            {
                commitedAmountDelta = this.orig().CommitedAmount - this.CommitedAmount;
                if ((commitedAmountDelta > 0) && (this.remainingQueried() < commitedAmountDelta))
                {
                    // Commited amount has been reduced by more than remaining amount.
                    ok = checkFailed("@SYS302116");
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReleaseMinMaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the release maximum or minimum amount setup of the <c>AgreementLine</c> record.
    /// </summary>
    /// <returns>
    ///    true if the setup is valid; otherwise, false.
    /// </returns>
    public boolean validateReleaseMinMaxAmount()
    {
        boolean     ok = true;

        ok = super();

        if (ok)
        {
            if (this.AgreedReleaseLineMinAmount > this.CommitedAmount)
            {
                ok = checkFailed("@SYS303516");
            }

            if (this.AgreedReleaseLineMaxAmount > this.CommitedAmount)
            {
                ok = checkFailed("@SYS302525");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>AgreementLineVolumeCommitment</c> table.
    /// </summary>
    /// <param name="_agreementLineVolumeCommitmentRecId">
    ///    The record ID of the <c>AgreementLineVolumeCommitment</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>AgreementLineVolumeCommitment</c> table; otherwise, an empty record.
    /// </returns>
    public static AgreementLineVolumeCommitment find(
        recId   _agreementLineVolumeCommitmentRecId,
        boolean _forUpdate = false)
    {
        AgreementLineVolumeCommitment agreementLineVolumeCommitment;

        if (_agreementLineVolumeCommitmentRecId)
        {
            if (_forUpdate)
            {
                agreementLineVolumeCommitment.selectForUpdate(_forUpdate);
            }

            select agreementLineVolumeCommitment
                where agreementLineVolumeCommitment.RecId == _agreementLineVolumeCommitmentRecId;
        }

        return agreementLineVolumeCommitment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLineInterface</Name>
				<Source><![CDATA[
    public SalesPurchLineInterface salesPurchLineInterface()
    {
        return this.SalesPurchLine::salesPurchLineInterface();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TradeBlanketOrder</ConfigurationKey>
	<DeveloperDocumentation>@SYS325328</DeveloperDocumentation>
	<Label>@SYS302523</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>CommitedAmount</TitleField1>
	<TitleField2>RecId</TitleField2>
	<Extends>AgreementLine</Extends>
	<Modules>ProcurementAndSourcing</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CommitedAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS62867</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CommitedAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CommitedAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AgreementCommitedMonetaryAmount</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings>
		<AxTableMapping>
			<MappingTable>SalesPurchLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Category</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConfirmedDlv</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExternalItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemBOMId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemRouteId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRCustVendAC</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCROrderLine2PriceHistoryRef</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRReceiptDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRShipDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSCalculationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWSalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchSalesUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>QtyOrdered</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RequiredDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RetailVariantId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StockedProduct</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SystemEntrySource</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitOfMeasure</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AgreementLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>AgreementLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>