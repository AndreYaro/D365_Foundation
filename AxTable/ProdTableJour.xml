<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdTableJour</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdTableJour extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>prodTableJour</c> record from an <c>inventTrans</c> record.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The <c>inventTrans</c> record to be used to initialize the fields.
    /// </param>
    /// <param name="_inventTransOrigin">
    ///    The <c>inventTransOrigin</c> record to be used to initialize the fields.
    /// </param>
    void initFromInventTrans(InventTrans       _inventTrans,
                             InventTransOrigin _inventTransOrigin = _inventTrans.inventTransOrigin())
    {
        this.initFromInventTransOrigin(_inventTransOrigin);

        if (_inventTrans.isUpdatedFinancial())
        {
            this.OpenProdOrder = NoYes::No;
        }
        else
        {
            this.OpenProdOrder = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a prodTableJour record from an inventTransOrigin record.
    /// </summary>
    /// <param name="_inventTrans">
    /// The inventTransOrigin record which should be used to initialze the fields.
    /// </param>
    void initFromInventTransOrigin(InventTransOrigin _inventTransOrigin)
    {
        this.ProdId          = _inventTransOrigin.ReferenceId;
        this.ItemId          = _inventTransOrigin.ItemId;
        this.InventTransId   = _inventTransOrigin.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdTable</Name>
				<Source><![CDATA[
    void initFromProdTable(ProdTable prodTable)
    {
        this.ProdId          = prodTable.ProdId;
        this.ItemId          = prodTable.ItemId;
        this.InventTransId   = prodTable.InventTransId;

        if (prodTable.ProdStatus == ProdStatus::Completed)
        {
            this.OpenProdOrder = NoYes::No;
        }
        else
        {
            this.OpenProdOrder = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overridden method to enforce signatures during RAF.
    /// </summary>
    public void insert()
    {
        super();

        //SIG - start
        if (isConfigurationkeyEnabled(configurationkeynum(SIG))
            && this.JournalType == ProdJourType::Receipt
            && SIGReportFinishedProcedure::construct().signatureRequired()
            && JmgProdParametersDim::isSignatureSupportedForReportAsFinished())
        {
            SIGReportFinished reportFinished;
            reportFinished.clear();
            reportFinished.initValue();
            reportFinished.ProdId = this.ProdId;
            reportFinished.ItemId = this.ItemId;
            reportFinished.ProdReportedError = this.QtyError;
            reportFinished.ProdReportedGood = this.QtyGood;
            reportFinished.insert();
        }
        //SIG - end
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAccountedAmount</Name>
				<Source><![CDATA[
    static RealBase costAccountedAmount(ProdId prodId)
    {
        ProdTableJour prodTableJour;

        select sum(AmountFinancial) from prodTableJour
            where prodTableJour.ProdId         == prodId &&
                  prodTableJour.JournalType    == ProdJourType::HistoricalCost;

        return prodTableJour.AmountFinancial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>historicalCostQtyError</Name>
				<Source><![CDATA[
    static RealBase historicalCostQtyError(ProdId prodId)
    {
        ProdTableJour prodTableJour;

        if (#PmfEnabled)
        {
            select sum(QtyError)
                from prodTableJour
                where prodTableJour.ProdId         == prodId
                    && prodTableJour.JournalType   == ProdJourType::HistoricalCost
                    && prodTableJour.InventTransId ==
                        ProdTable::find(prodId).InventTransId;
        }
        else
        {
            select sum(QtyError) from prodTableJour
                index hint NumDateIdx
                where prodTableJour.ProdId         == prodId &&
                      prodTableJour.JournalType    == ProdJourType::HistoricalCost;
        }

        return prodTableJour.QtyError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>historicalCostQtyGood</Name>
				<Source><![CDATA[
    static RealBase historicalCostQtyGood(ProdId prodId)
    {
        ProdTableJour prodTableJour;

        if (#PmfEnabled)
        {
            select sum(QtyGood)
                from prodTableJour
                where prodTableJour.ProdId         == prodId
                    && prodTableJour.JournalType    == ProdJourType::HistoricalCost
                    && prodTableJour.InventTransId  ==
                        ProdTable::find(prodId).InventTransId;
        }
        else
        {
            select sum(QtyGood) from prodTableJour
                where prodTableJour.ProdId         == prodId &&
                      prodTableJour.JournalType    == ProdJourType::HistoricalCost;
        }

        return prodTableJour.QtyGood;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHistoricalCost</Name>
				<Source><![CDATA[
    static boolean isHistoricalCost(ProdId prodId)
    {
        ProdTableJour   prodTableJour;
        InventCostTrans inventCostTrans;

        if (#PmfEnabled)
        {
            select firstonly RecId from prodTableJour
                where prodTableJour.ProdId         == prodId
                    && prodTableJour.JournalType   == ProdJourType::HistoricalCost
                    && prodTableJour.InventTransId ==
                        ProdTable::find(prodId).InventTransId
            notexists join inventCostTrans
                where inventCostTrans.Voucher == prodTableJour.Voucher;
        }
        else
        {
            select firstonly RecId from prodTableJour
                index hint NumDateIdx
                where prodTableJour.ProdId         == prodId &&
                      prodTableJour.JournalType    == ProdJourType::HistoricalCost
            notexists join inventCostTrans
            where inventCostTrans.Voucher == prodTableJour.Voucher;
        }

        return prodTableJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCoByHistoricalCostQtyError</Name>
				<Source><![CDATA[
    public static PdsCWBatchErr pdsCWCoByHistoricalCostQtyError(
        ProdId          _prodId,
        InventTransId   _inventTransId)
    {
        ProdTableJour prodTableJour;

        select sum(PdsCWBatchErr)
            from prodTableJour
            where prodTableJour.ProdId == _prodId
                && prodTableJour.JournalType == ProdJourType::HistoricalCost
                && prodTableJour.InventTransId == _inventTransId;

        return prodTableJour.PdsCWBatchErr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCoByHistoricalCostQtyGood</Name>
				<Source><![CDATA[
    public static PdsCWBatchGood pdsCWCoByHistoricalCostQtyGood(
        ProdId          _prodId,
        InventTransId   _inventTransId)
    {
        ProdTableJour prodTableJour;

        select sum(PdsCWBatchGood)
            from prodTableJour
            where prodTableJour.ProdId == _prodId
                && prodTableJour.JournalType == ProdJourType::HistoricalCost
                && prodTableJour.InventTransId == _inventTransId;

        return prodTableJour.PdsCWBatchGood;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWHistoricalCostQtyError</Name>
				<Source><![CDATA[
    public static PdsCWBatchErr pdsCWHistoricalCostQtyError(ProdId _prodId)
    {
        ProdTableJour prodTableJour;

        select sum(PdsCWBatchErr)
            from prodTableJour
            where prodTableJour.ProdId         == _prodId
                && prodTableJour.JournalType   == ProdJourType::HistoricalCost
                && prodTableJour.InventTransId ==
                    ProdTable::find(_prodId).InventTransId;

        return prodTableJour.PdsCWBatchErr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWHistoricalCostQtyGood</Name>
				<Source><![CDATA[
    public static PdsCWBatchGood pdsCWHistoricalCostQtyGood(ProdId _prodId)
    {
        ProdTableJour prodTableJour;

        select sum(PdsCWBatchGood)
            from prodTableJour
            where prodTableJour.ProdId        == _prodId
                && prodTableJour.JournalType  == ProdJourType::HistoricalCost
                && prodTableJour.InventTransId ==
                    ProdTable::find(_prodId).InventTransId;

        return prodTableJour.PdsCWBatchGood;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReportedFinishedError</Name>
				<Source><![CDATA[
    public static PdsCWBatchErr pdsCWReportedFinishedError(ProdId _prodId, InventTransId _inventTransId = '')
    {
        ProdTableJour prodTableJour;
        InventTransId   inventTransId = _inventTransId;

        if (#PmfEnabled)
        {
            if (!inventTransId)
            {
                inventTransId = ProdTable::find(_prodId).InventTransId;
            }
            select sum(PdsCWBatchErr)
                from prodTableJour
                where  prodTableJour.ProdId         == _prodId
                &&     prodTableJour.JournalType    == ProdJourType::Receipt
                &&     prodTableJour.InventTransId  == inventTransId;
        }
        else
        {
            select sum(PdsCWBatchErr)
                from prodTableJour
                where prodTableJour.ProdId      == _prodId
                &&    prodTableJour.JournalType == ProdJourType::Receipt;
        }
        return prodTableJour.PdsCWBatchErr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReportedFinishedGood</Name>
				<Source><![CDATA[
    public static PdsCWBatchGood pdsCWReportedFinishedGood(ProdId _prodId,   InventTransId   _inventTransId = '')
    {
        ProdTableJour prodTableJour;
        InventTransId   inventTransId = _inventTransId;

        if (#PmfEnabled)
        {
            if (!inventTransId)
            {
                inventTransId = ProdTable::find(_prodId).InventTransId;
            }
            select sum(PdsCWBatchGood)
                from prodTableJour
                where  prodTableJour.ProdId         == _prodId
                &&     prodTableJour.JournalType    == ProdJourType::Receipt
                &&     prodTableJour.InventTransId  == inventTransId;
        }
        else
        {
            select sum(PdsCWBatchGood)
                from prodTableJour
                where prodTableJour.ProdId      == _prodId
                &&    prodTableJour.JournalType == ProdJourType::Receipt;
        }
        return prodTableJour.PdsCWBatchGood;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfCoByHistoricalCostQtyError</Name>
				<Source><![CDATA[
    public static RealBase pmfCoByHistoricalCostQtyError(
        ProdId          _prodId,
        InventTransId   _inventTransId)
    {
        ProdTableJour prodTableJour;

        if (#PmfEnabled)
        {
            select sum(QtyError)
                from prodTableJour
                where prodTableJour.ProdId == _prodId
                    && prodTableJour.JournalType == ProdJourType::HistoricalCost
                    && prodTableJour.InventTransId == _inventTransId;
        }

        return prodTableJour.QtyError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfCoByHistoricalCostQtyGood</Name>
				<Source><![CDATA[
    public static RealBase pmfCoByHistoricalCostQtyGood(
        ProdId          _prodId,
        InventTransId   _inventTransId)
    {
        ProdTableJour prodTableJour;

        if (#PmfEnabled)
        {
            select sum(QtyGood)
                from prodTableJour
                where prodTableJour.ProdId == _prodId
                    && prodTableJour.JournalType == ProdJourType::HistoricalCost
                    && prodTableJour.InventTransId == _inventTransId;
        }

        return prodTableJour.QtyGood;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportedFinishedError</Name>
				<Source><![CDATA[
    static RealBase reportedFinishedError(ProdId prodId
        , InventTransId _inventTransId = ''
    )
    {
        ProdTableJour prodTableJour;
        InventTransId   inventTransId = _inventTransId;

        if (#PmfEnabled)
        {
            if (!inventTransId)
            {
                inventTransId = ProdTable::find(prodId).InventTransId;
            }
            select sum(QtyError)
                from prodTableJour
                where prodTableJour.ProdId         == prodId
                    && prodTableJour.JournalType   == ProdJourType::Receipt
                    && prodTableJour.InventTransId == inventTransId;
        }
        else
        {
            select sum(QtyError) from prodTableJour
                where prodTableJour.ProdId         == prodId &&
                      prodTableJour.JournalType    == ProdJourType::Receipt;
        }

        return prodTableJour.QtyError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCoByReportedFinishedError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if product has the CoBy RAF with qty error.
    /// </summary>
    /// <param name = "_prodId"> Product ID</param>
    /// <returns> True if the CoBy RAF was found; otherwise, false. </returns>
    public static boolean hasCoByReportedFinishedError(ProdId _prodId)
    {
        ProdTableJour prodTableJour;
        InventTransId prodInventTransId = ProdTable::find(_prodId).InventTransId;

        select firstonly RecId from prodTableJour
                where prodTableJour.ProdId == _prodId
                   && prodTableJour.JournalType == ProdJourType::Receipt
                   && prodTableJour.InventTransId != prodInventTransId
                   && prodTableJour.QtyError > 0;

        return (prodTableJour.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportedFinishedGood</Name>
				<Source><![CDATA[
    static RealBase reportedFinishedGood(ProdId prodId
    , InventTransId _inventTransId = ''
    )
    {
        ProdTableJour prodTableJour;
        InventTransId inventTransId = _inventTransId;

        if (#PmfEnabled)
        {
            if (!_inventTransId)
            {
                inventTransId = ProdTable::find(prodId).InventTransId;
            }
            select sum(QtyGood)
                from prodTableJour
                where prodTableJour.ProdId         == prodId
                    && prodTableJour.JournalType   == ProdJourType::Receipt
                    && prodTableJour.InventTransId == inventTransId;
        }
        else
        {
            select sum(QtyGood) from prodTableJour
                where prodTableJour.ProdId         == prodId &&
                      prodTableJour.JournalType    == ProdJourType::Receipt;
        }

        return prodTableJour.QtyGood;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportedFinishedGoodDisplayCache</Name>
				<Source><![CDATA[
    static container reportedFinishedGoodDisplayCache(
        container   _conSetProdId,
        container   _conMapProdIdReportedFinish
        )
    {
        Set         setProdId;
        Map         mapProdIdReportedFinish;

        SetIterator si;
        if (_conMapProdIdReportedFinish)
            mapProdIdReportedFinish = Map::create(_conMapProdIdReportedFinish);
        else
            mapProdIdReportedFinish = new Map(Types::String, Types::Real);

        if (_conSetProdId)
        {
            setProdId = Set::create(_conSetProdId);
            si = new SetIterator(setProdId);

            si.begin();
            while (si.more())
            {
                mapProdIdReportedFinish.insert(si.value(),ProdTableJour::reportedFinishedGood(si.value()));

                si.next();
            }
        }
        return mapProdIdReportedFinish.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Prod</ConfigurationKey>
	<DeveloperDocumentation>@SYS124190</DeveloperDocumentation>
	<Label>@SYS10018</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ProdId</TitleField1>
	<TitleField2>TransDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountFinancial</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyError</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyGood</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWBatchGood</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWBatchErr</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ScrapVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Canceled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Journal</Name>
			<Label>@SYS8993</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountFinancial</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountFinancialSecCur_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Adjustment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyGood</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWBatchGood</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyError</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWBatchErr</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Production</Name>
			<Label>@SYS4398</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Adjustment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmount</ExtendedDataType>
			<Label>@SYS596</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountFinancial</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmount</ExtendedDataType>
			<Label>@SYS23255</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountFinancialSecCur_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmountSecCur_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountPhysical</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmount</ExtendedDataType>
			<Label>@SYS23256</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Canceled</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Sys3012</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JournalType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProdJourType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>openProdOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWBatchErr</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWBatchErr</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWBatchGood</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWBatchGood</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProdId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyError</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdReportedError</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyGood</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdReportedGood</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ScrapVoucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdCalcVoucherId</ExtendedDataType>
			<Label>@SYS1032</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdCalcVoucherId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NumDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ProdId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DateVoucherIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TypeItemIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>NumTypeTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ProdId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>JournalType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VoucherDateProdIdCancelOpenOrder</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProdId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Canceled</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>openProdOrder</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AmountFinancial</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AmountPhysical</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Adjustment</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>JournalType</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>QtyGood</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>QtyError</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ScrapVoucher</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdVoucherDateType</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>JournalType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdId</Name>
					<Field>ProdId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>