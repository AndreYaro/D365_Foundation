<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGETemplateSections_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerRRGETemplateSections_W extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDynamics</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkDynamics()
    {
        boolean                     ret                 = true;
        LedgerRRGETableLayouts_W    dyncmicTableLayout  = this.dynamicTableLayout();

        if (dyncmicTableLayout)
        {
            ret = checkFailed(strFmt("@LedgerRRG:LedgerRRG_DynTableExists", this.SectionId, dyncmicTableLayout.Notes));
        }

        if (this.dynamicSection())
        {
            ret = checkFailed(strFmt("@LedgerRRG:LedgerRRG_DynRequisiteExists", this.SectionId, this.dynamicPropertyId()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParentField</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkParentField()
    {
        LedgerRRGETemplateSections_W    parent;
        boolean                         res = true;

        void checkParent()
        {
            LedgerRRGETemplateSections_W testedParent;

            if (parent.ParentId == this.SectionId)
            {
                res = checkFailed("@LedgerRRG:LedgerRRG_TempStruct");
                return;
            }
            else
            {
                testedParent = parent.parent();

                if (!testedParent)
                {
                    res = checkFailed(strFmt("@LedgerRRG:LedgerRRG_TemplNotHaveSection", this.template().TemplateId, parent.ParentId));
                    return;
                }

                parent = testedParent;
            }
        }

        if (this.ParentId && !this.isXML())
        {
            parent.data(this);

            while(res && parent.ParentId)
            {
                checkParent();
            }
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParentRecIdField</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkParentRecIdField()
    {
        LedgerRRGETemplateSections_W    parent;
        boolean                         res = true;

        void checkParent()
        {
            LedgerRRGETemplateSections_W testedParent;

            if (parent.ParentRecId == this.RecId)
            {
                res = checkFailed("@LedgerRRG:LedgerRRG_TempStruct");
                return;
            }
            else
            {
                testedParent = parent.parent();

                if (!testedParent)
                {
                    res = checkFailed(strFmt("@LedgerRRG:LedgerRRG_TemplNotHaveSection", this.template().TemplateId, parent.ParentId));
                    return;
                }

                parent = testedParent;
            }
        }

        if (this.ParentRecId && this.isXML())
        {
            parent.data(this);

            while(res && parent.ParentRecId)
            {
                checkParent();
            }
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSectionId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkSectionId()
    {
        const str SectionIdPath	        = '\\Data Dictionary\\Tables\\LedgerRRGETemplateSections_W\\Fields\\SectionId';
        const int ReservForIndexSize	= 5;
        SysDictField    sectionIdDictField  = SysDictField::newTreeNode(TreeNode::findNode(SectionIdPath));
        int             excessSize          = strLen(this.SectionId) - sectionIdDictField.fieldSize() + ReservForIndexSize;
   
        if (excessSize > 0)
        {
            return checkFailed(strFmt("@LedgerRRG:LedgerRRG_TemplNotHaveSection", sectionIdDictField.fieldSize() - ReservForIndexSize, excessSize));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>LedgerRRGEDatasourceQuery_W</c> object for template section query.
    /// </summary>
    /// <param name="_document">
    /// The table buffer that contains the Electronic document which is used in the query object; optional.
    /// </param>
    /// <param name="_bufferEval">
    /// An instance of the <c>LedgerRRGEBufferEval_W</c> class that caches list of <c>LedgerRRGEDatasourceQuery_W</c> objects; optional.
    /// </param>
    /// <returns>
    /// The <c>LedgerRRGEDatasourceQuery_W</c> object for template section query.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEDatasourceQuery_W datasourceQuery(LedgerRRGEDocuments_W _document = null, LedgerRRGEBufferEval_W _bufferEval = null)
    {
        if (_bufferEval)
        {
            return _bufferEval.datasourceQuery(LedgerRRGEQueries_W::findByQueryId(this.QueryId).RecId, _document);
        }

        return LedgerRRGEQueries_W::datasourceQuery(LedgerRRGEQueries_W::findByQueryId(this.QueryId).RecId, _document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        LedgerRRGETemplateSections_W    childs;
        LedgerRRGESectionProperties_W   properties;
        LedgerRRGETableLayouts_W        tables;

        ttsbegin;

        if (this.ParentRecId || this.isXML())
        {
            delete_from childs
                where childs.ParentRecId == this.RecId;

            delete_from properties
                where properties.SectionRefRecId == this.RecId;

            delete_from tables
                where tables.SectionRefRecId == this.RecId;
        }
        else
        {
            delete_from childs
                where childs.LedgerRRGETemplates_W == this.LedgerRRGETemplates_W &&
                      childs.ParentId              == this.SectionId;

            delete_from properties
                where properties.LedgerRRGETemplates_W == this.LedgerRRGETemplates_W &&
                      properties.SectionId             == this.SectionId;

            delete_from tables
                where tables.LedgerRRGETemplates_W == this.LedgerRRGETemplates_W &&
                      tables.SectionID             == this.SectionId;
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dynamicProperty</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGESectionProperties_W dynamicProperty()
    {
        LedgerRRGESectionProperties_W dynamicProperty;

        select firstonly dynamicProperty
            where dynamicProperty.SectionRefRecId == this.RecId &&
                  dynamicProperty.Dynamic;

        return dynamicProperty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dynamicPropertyId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display LedgerRRGESectionPropertyId_W dynamicPropertyId()
    {
        return (select firstonly PropertyId from ledgerRRGESectionProperties_W
                    where ledgerRRGESectionProperties_W.SectionRefRecId == this.RecId &&
                          ledgerRRGESectionProperties_W.Dynamic).PropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dynamicSection</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display LedgerRRGEDynamicSection_W dynamicSection()
    {
        return (select firstonly RecId from ledgerRRGESectionProperties_W
                    where ledgerRRGESectionProperties_W.SectionRefRecId == this.RecId &&
                          ledgerRRGESectionProperties_W.Dynamic).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dynamicTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display LedgerRRGEDynamicTable_W dynamicTable()
    {
        return (select firstonly RecId from ledgerRRGETableLayouts_W
                    where ledgerRRGETableLayouts_W.SectionRefRecId == this.RecId &&
                          ledgerRRGETableLayouts_W.Dynamic).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dynamicTableLayout</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGETableLayouts_W dynamicTableLayout()
    {
        LedgerRRGETableLayouts_W dyncmicTableLayout;

        select firstonly dyncmicTableLayout
            where dyncmicTableLayout.SectionRefRecId == this.RecId &&
                  dyncmicTableLayout.Dynamic;

        return dyncmicTableLayout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editTableCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits the table name for the template section.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the table name value has been modified.
    /// </param>
    /// <param name="_tableCaption">
    /// The new table name value for the template section.
    /// </param>
    /// <returns>
    /// The table name value for the template section.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit TableName editTableCaption(boolean _set, TableName _tableCaption)
    {
        if (_set)
        {
            if (FormDataUtil::isFormDataSource(this))
            {
                FormDataUtil::getFormDataSource(this).refresh();
            }
        }

        return this.tableCaption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromParent</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromParent(LedgerRRGETemplateSections_W _parent)
    {
        LineNum  lineNum;
        LineNum  nextNum;

        this.ParentId       = _parent.SectionId;
        this.ParentRecId    = _parent.RecId;
        if (_parent)
        {
            this.LedgerRRGETemplates_W = _parent.LedgerRRGETemplates_W;

            lineNum = LedgerRRGETemplateSections_W::lastLineNum(_parent.LedgerRRGETemplates_W, _parent.SectionId, _parent.RecId);
            if (!lineNum)
            {
                lineNum = _parent.LineNum;
            }

            nextNum = (select firstonly LineNum from ledgerRRGETemplateSections_W
                            where ledgerRRGETemplateSections_W.LedgerRRGETemplates_W == _parent.LedgerRRGETemplates_W &&
                                  ledgerRRGETemplateSections_W.LineNum      >  lineNum).LineNum;

            this.LineNum = lineNum + (nextNum?((nextNum - lineNum) / 2):1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDynamicSection</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isDynamicSection()
    {
        if (this.dynamicSection())
        {
            return true;
        }

        if (this.ParentRecId)
        {
            return this.parent().isDynamicSection();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOptionalSection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the section is optional or not.
    /// </summary>
    /// <returns>
    ///    True, if the section is optional. Otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isOptionalSection()
    {
        if (this.Optional || this.dynamicSection() || this.dynamicTable())
        {
            return true;
        }

        if (this.ParentRecId)
        {
            return this.parent().isOptionalSection();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isXML</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isXML()
    {
        return this.template().isXML();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modified field of the template sections.
    /// </summary>
    /// <param name="_fieldId">
    /// The field Id.
    /// </param>
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(LedgerRRGETemplateSections_W, QueryId):
                if (this.QueryId && this.datasourceQuery())
                {
                    this.datasourceQuery().afterQueryAssigned(this);
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parent</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGETemplateSections_W parent(boolean _forUpdate = false)
    {
        return this.ParentRecId ?
                    LedgerRRGETemplateSections_W::findRecId(this.ParentRecId, _forUpdate) :
                    LedgerRRGETemplateSections_W::findSection(this.LedgerRRGETemplates_W, this.ParentId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>propertySet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a set that contains all the <c>RecId</c> of requisites which is attached to the current section.
    /// </summary>
    /// <returns>
    ///    A set of requisites <c>RecId</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Set propertySet()
    {
        Set             res = new Set(Types::Int64);
        SetEnumerator   se;

        void addSectionRequisites(RecId _sectionRecId)
        {
            LedgerRRGESectionProperties_W properties;

            while select RecId from properties
                where properties.SectionRefRecId == _sectionRecId
            {
                res.add(properties.RecId);
            }
        }

        se = this.sectionSet().getEnumerator();
        while (se.moveNext())
        {
            if (se.current())
            {
                addSectionRequisites(se.current());
            }
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sectionSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a set that contains all the <c>RecId</c> of sub-sections which is attached to the current section.
    /// </summary>
    /// <returns>
    ///    A set of sections <c>RecId</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Set sectionSet()
    {
        LedgerRRGETemplateSections_W section;
        Set                          res = new Set(Types::Int64);

        if (this.RecId)
        {
            res.add(this.RecId);

            while select RecId from section
                where section.ParentRecId == this.RecId
            {
                res = Set::union(res, section.sectionSet());
            }
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table name for the template section.
    /// </summary>
    /// <returns>
    /// The table name for the template section.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display RangeTableLabel tableCaption()
    {
        LedgerRRGEDatasourceQuery_W datasourceQuery = this.datasourceQuery();
        Map                         tablesMap;

        if (datasourceQuery && this.RefTableId)
        {
            tablesMap = datasourceQuery.tablesMap();
            if (tablesMap.exists(this.RefTableId))
            {
                return tablesMap.lookup(this.RefTableId);
            }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>template</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGETemplates_W template(boolean _forupdate = false)
    {
        return LedgerRRGETemplates_W::find(this.LedgerRRGETemplates_W, _forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);
        switch (_fieldIdToCheck)
        {
            case fieldNum(LedgerRRGETemplateSections_W, ParentRecId):
                ret = ret && this.checkParentRecIdField();
                break;

            case fieldNum(LedgerRRGETemplateSections_W, ParentId):
                ret = ret && this.checkParentField();
                break;

            case fieldNum(LedgerRRGETemplateSections_W, SectionId):
                ret = ret && this.checkSectionId();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCommonSection</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static server void copyCommonSection(LedgerRRGETemplateRecId_W   _templateRecId,
                                                LedgerRRGECommonSectionId_W _sectionId,
                                                LedgerRRGESectionId_W       _parentId    = '',
                                                RefRecId                    _parentRecId = 0)
    {
        LedgerRRGECommonSections_W      commonSection = LedgerRRGECommonSections_W::findBySectionId(_sectionId);
        LedgerRRGETemplateSections_W    templateSection;
        LedgerRRGECommonSectionLines_W  commonLines;
        LedgerRRGESectionProperties_W   properties;
        LineNum                         lineNum = 1;
        LedgerRRGETemplateSections_W    parentSection;

        if (!LedgerRRGETemplateSections_W::existSection(_templateRecId, _sectionId))
        {
            parentSection = _parentRecId ? LedgerRRGETemplateSections_W::findRecId(_parentRecId) :
                                           LedgerRRGETemplateSections_W::findSection(_templateRecId, _parentId);

            ttsbegin;
            templateSection.LedgerRRGETemplates_W = _templateRecId;
            templateSection.SectionId   = _sectionId;
            templateSection.Name        = commonSection.Name;
            templateSection.ParentId    = parentSection.SectionId;
            templateSection.ParentRecId = parentSection.RecId;
            templateSection.LineNum     = LedgerRRGETemplateSections_W::lastLineNum(_templateRecId, _parentId, _parentRecId) + 1.0;
            templateSection.insert();

            while select LedgerRRGEProperties_W from commonLines
                where commonLines.LedgerRRGECommonSections_W == commonSection.RecId
            {
                properties.clear();
                properties.initFromTemplateSections(templateSection);
                properties.PropertyType = LedgerRRGESectionPropertyType_W::Const;
                properties.initFromProperty(LedgerRRGEProperties_W::find(commonLines.LedgerRRGEProperties_W).PropertyId);
                properties.LineNum = lineNum;
                properties.insert();
                lineNum++;
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copySection</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static server void copySection(
        LedgerRRGETemplateSections_W    _sourceSection,
        LedgerRRGETemplateSections_W    _targetSection,
        Map                             _propertyRecIdMap = new Map(Types::Int64, Types::Int64),
        Map                             _unresolvedLinks  = new Map(Types::Container, Types::Record))
    {
        LedgerRRGESectionProperties_W   targetProperties;
        LedgerRRGESectionProperties_W   sourceProperties;

        LedgerRRGETableLayouts_W        targetTables;
        LedgerRRGETableLayouts_W        sourceTables;

        LedgerRRGETableColumns_W        targetColumns;
        LedgerRRGETableColumns_W        sourceColumns;

        LedgerRRGEPropertyCells_W       targetCells;
        LedgerRRGEPropertyCells_W       sourceCells;

        RecordInsertList                recordInsertList;

        ttsbegin;

        recordInsertList = new RecordInsertList(tableNum(LedgerRRGEPropertyCells_W));

        while select sourceProperties
            where sourceProperties.LedgerRRGETemplates_W == _sourceSection.LedgerRRGETemplates_W &&
                  sourceProperties.SectionRefRecId  == _sourceSection.RecId
        {
            targetProperties = sourceProperties.data();

            if (sourceProperties.DynamicValueRefRecId)
            {
                if (_propertyRecIdMap.exists(sourceProperties.DynamicValueRefRecId))
                {
                    targetProperties.DynamicValueRefRecId = _propertyRecIdMap.lookup(sourceProperties.DynamicValueRefRecId);
                }
                else
                {
                    _unresolvedLinks.insert([targetProperties.TableId, targetProperties.RecId], targetProperties);
                }
            }

            targetProperties.LedgerRRGETemplates_W = _targetSection.LedgerRRGETemplates_W;
            targetProperties.SectionId          = _targetSection.SectionId;
            targetProperties.SectionRefRecId    = _targetSection.RecId;

            targetProperties.insert();

            _propertyRecIdMap.insert(sourceProperties.RecId, targetProperties.RecId);

            while select sourceCells
                where sourceCells.RefTableId       == targetProperties.TableId &&
                      sourceCells.PropertyRefRecId == sourceProperties.RecId
            {
                targetCells.data(sourceCells);
                targetCells.PropertyRefRecId = targetProperties.RecId;
                recordInsertList.add(targetCells);
            }
        }

        recordInsertList.insertDatabase();

        recordInsertList = new RecordInsertList(tableNum(LedgerRRGETableColumns_W));

        while select sourceTables
            where sourceTables.LedgerRRGETemplates_W == _sourceSection.LedgerRRGETemplates_W &&
                  sourceTables.SectionRefRecId  == _sourceSection.RecId

        {
            targetTables = sourceTables.data();
            targetTables.LedgerRRGETemplates_W = _targetSection.LedgerRRGETemplates_W;
            targetTables.SectionID          = _targetSection.SectionId;
            targetTables.SectionRefRecId    = _targetSection.RecId;
            targetTables.insert(false);

            update_recordset targetProperties setting TableLayoutRefRecId = targetTables.RecId
                where targetProperties.LedgerRRGETemplates_W == _targetSection.LedgerRRGETemplates_W &&
                      targetProperties.TableLayoutRefRecId  == sourceTables.RecId;

            while select sourceColumns
                where sourceColumns.TableLayoutRefRecId == sourceTables.RecId
            {
                targetColumns = sourceColumns.data();
                targetColumns.TableLayoutRefRecId = targetTables.RecId;

                if (targetColumns.PropertyRefRecId)
                {
                    if (_propertyRecIdMap.exists(targetColumns.PropertyRefRecId))
                    {
                        targetColumns.PropertyRefRecId = _propertyRecIdMap.lookup(targetColumns.PropertyRefRecId);
                    }
                    else
                    {
                        _unresolvedLinks.insert([targetColumns.TableId, targetColumns.RecId], targetColumns);
                    }
                }

                recordInsertList.add(targetColumns);
            }
        }

        recordInsertList.insertDatabase();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSection</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean existSection(LedgerRRGETemplateRecId_W _templateRecId, LedgerRRGECommonSectionId_W _sectionId)
    {
        return _templateRecId && _sectionId &&
            (select RecId from ledgerRRGETemplateSections_W
                where ledgerRRGETemplateSections_W.LedgerRRGETemplates_W == _templateRecId    &&
                      ledgerRRGETemplateSections_W.SectionId    == _sectionId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGETemplateSections_W findRecId(RecId _recId, boolean _forupdate = false)
    {
        LedgerRRGETemplateSections_W section;

        section.selectForUpdate(_forupdate);
        if (_recId)
        {
            select firstonly section where section.RecId == _recId;
        }

        return section;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSection</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGETemplateSections_W findSection(LedgerRRGETemplateRecId_W _templateRecId,
                                                           LedgerRRGESectionId_W     _sectionId,
                                                           boolean                   _forupdate = false)
    {
        LedgerRRGETemplateSections_W section;

        if (_templateRecId && _sectionId)
        {
            section.selectForUpdate(_forupdate);

            select firstonly section
                index TemplateIdSectionIdIdx
                where section.LedgerRRGETemplates_W == _templateRecId &&
                      section.SectionId     == _sectionId;
        }

        return section;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LineNum lastLineNum(LedgerRRGETemplateRecId_W _templateRecId, LedgerRRGESectionId_W _parentId = '', RefRecId _parentRecId = 0)
    {
        if (_parentRecId)
        {
            return (select maxof(LineNum) from ledgerRRGETemplateSections_W
                        where ledgerRRGETemplateSections_W.ParentRecId == _parentRecId).LineNum;
        }
        else
        {
            return (select maxof(LineNum) from ledgerRRGETemplateSections_W
                        where ledgerRRGETemplateSections_W.LedgerRRGETemplates_W == _templateRecId &&
                             (!_parentId ||
                              ledgerRRGETemplateSections_W.ParentId              == _parentId)).LineNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sectionLookup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public void sectionLookup(FormControl _ctrl, LedgerRRGETemplateRecId_W _templateRecId)
    {
        Query                   query = new Query();
        SysTableLookup          sysTableLookup;
       

        sysTableLookup = SysTableLookup::newParameters(tableNum(LedgerRRGETemplateSections_W), _ctrl);

        sysTableLookup.addLookupfield(fieldNum(LedgerRRGETemplateSections_W, SectionId), true);
        sysTableLookup.addLookupfield(fieldNum(LedgerRRGETemplateSections_W, Name));

        query.addDataSource(tableNum(LedgerRRGETemplateSections_W)).
            addRange(fieldNum(LedgerRRGETemplateSections_W, LedgerRRGETemplates_W)).value(queryValue(_templateRecId));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<Label>@LedgerRRG:LedgerRRG_TemplateSections</Label>
	<TitleField1>SectionId</TitleField1>
	<TitleField2>Name</TitleField2>
	<ClusteredIndex>TemplateIdLineNumIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Ledger</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>LedgerRRGESectionProperties_W</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LedgerRRGESectionProperties_W</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>LedgerRRGETableLayouts_W</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LedgerRRGETableLayouts_W</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerRRGETemplates_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SectionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SectionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerRRGETemplates_W</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Delimiters</Name>
			<Label>@LedgerRRG:LedgerRRG_Delimiters</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrefixLedgerRRGEDelimiters_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostfixLedgerRRGEDelimiters_W</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dynamic</Name>
			<Label>@SYS53674</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>dynamicSection</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SearchAgain</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>dynamicPropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>dynamicTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NextPageSection</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SectionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IdLineNumGroup</Name>
			<Label>@SYS15682</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerRRGETemplates_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SectionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrefixLedgerRRGEDelimiters_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostfixLedgerRRGEDelimiters_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SectionNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Content</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Query</Name>
			<Label>@SYS25531</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QueryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editTableCaption</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Section</Name>
			<Label>@SYS77684</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SectionNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Content</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Optional</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Content</Name>
			<Label>@SYS74604</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerRRGETemplates_W</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>LedgerRRGETemplateRecId_W</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<ExtendedDataType>LedgerRRGESectionName_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NextPageSection</Name>
			<Label>@LedgerRRG:LedgerRRG_OnNextPage</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Optional</Name>
			<ExtendedDataType>LedgerRRGEOptionalSection_W</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParentId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>LedgerRRGESectionId_W</ExtendedDataType>
			<Label>@SYS81227</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ParentRecId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>LedgerRRGESectionRefRecId_W</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PostfixLedgerRRGEDelimiters_W</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@LedgerRRG:LedgerRRG_DelimiterAfter</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PrefixLedgerRRGEDelimiters_W</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@LedgerRRG:LedgerRRG_DelimiterBefore</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>QueryId</Name>
			<ExtendedDataType>LedgerRRGEQueryId_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SearchAgain</Name>
			<ExtendedDataType>SearchAgain</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SectionId</Name>
			<ExtendedDataType>LedgerRRGESectionId_W</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SectionNum</Name>
			<ExtendedDataType>LedgerRRGESectionNum_W</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TemplateIdLineNumIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerRRGETemplates_W</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ParentRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TemplateIdSectionIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerRRGETemplates_W</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ParentRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SectionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PrefixLedgerRRGEDelimiters_WIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PrefixLedgerRRGEDelimiters_W</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PostfixLedgerRRGEDelimiters_WIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PostfixLedgerRRGEDelimiters_W</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>LedgerRRGEQueries_W</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerRRGEQueries_W</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerRRGEQueries_W</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerRRGETemplateSections_W</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>QueryId</Name>
					<Field>QueryId</Field>
					<RelatedField>QueryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerRRGETemplates_W</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerRRGETemplates_W</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerRRGETemplates_W</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>LedgerRRGETemplateSections_W</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerRRGETemplates_W</Name>
					<Field>LedgerRRGETemplates_W</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerRRGETemplateSections_W</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerRRGETemplateSections_W</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerRRGETemplateSections_W</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>LedgerRRGETemplateSections_W</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerRRGETemplates_W</Name>
					<Field>LedgerRRGETemplates_W</Field>
					<RelatedField>LedgerRRGETemplates_W</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParentId</Name>
					<Field>ParentId</Field>
					<RelatedField>SectionId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParentRecId</Name>
					<Field>ParentRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>