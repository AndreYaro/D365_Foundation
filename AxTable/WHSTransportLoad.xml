<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSTransportLoad</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSTransportLoad extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findByTransportLoadId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSTransportLoad</c> record with the given parameters.
    /// </summary>
    /// <param name = "_transportLoadId">
    /// The transport load ID used to find the record.
    /// </param>
    /// <param name = "_forUpdate">
    ///  A boolean value that indicates whether to select the record for update.
    /// </param>
    /// <returns>
    /// A <c>WHSTransportLoad</c> record.
    /// </returns>
    public static WHSTransportLoad findByTransportLoadId(
        WHSTransportLoadId _transportLoadId,
        boolean            _forUpdate = false)
    {
        WHSTransportLoad transportLoad;

        if (_transportLoadId)
        {
            transportLoad.selectForUpdate(_forUpdate);

            select firstonly transportLoad
                where transportLoad.TransportLoadId == _transportLoadId;
        }

        return transportLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSTransportLoad</c> record by ID.
    /// </summary>
    /// <param name="_transportLoadRecId">
    /// The record ID used to find the record.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that indicates whether to select the record for update.
    /// </param>
    /// <returns>
    /// A <c>WHSTransportLoad</c> record
    /// </returns>
    public static WHSTransportLoad findByRecId(
        WHSTransportLoadRecId    _transportLoadRecId,
        boolean                  _forUpdate             = false)
    {
        WHSTransportLoad transportLoad;

        if (_transportLoadRecId)
        {
            transportLoad.selectForUpdate(_forUpdate);

            select firstonly transportLoad
                where transportLoad.RecId == _transportLoadRecId;
        }

        return transportLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForLoadId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a transport load exists for the given load ID.
    /// </summary>
    /// <param name = "_loadId">The load ID we are checking.</param>
    /// <returns>true if a transport load exists; otherwise, false</returns>
    public static boolean existsForLoadId(WHSLoadId _loadId)
    {
        WHSTransportLoadLoadedWork transportLoadLoadedWork;
        WHSTransportLoad           transportLoad;
        WHSWorkLine                workLine;
        WHSLoadLine                loadLine;
        
        select firstonly RecId from transportLoad
            exists join transportLoadLoadedWork
                where transportLoadLoadedWork.TransportLoad == transportLoad.RecId
                exists join workLine
                    where workLine.WorkId == transportLoadLoadedWork.WorkId
                    exists join loadLine
                        where loadLine.RecId  == workLine.LoadLineRefRecId
                           && loadLine.LoadId == _loadId;

        return transportLoad.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransportLoadEligibleForTransportLoading</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a <c>WHSTransportLoad</c> record is eligible for loading.
    /// </summary>
    /// <returns>true if transport load does not exist (meaning one will be created) 
    /// or is not shipped; otherwise, false</returns>
    public boolean isTransportLoadEligibleForTransportLoading()
    {
        boolean ret;

        if (!this.RecId
            || this.TransportLoadStatus != WHSTransportLoadStatus::Shipped)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkCanBeAssignedToTransportLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if work can be assigned to a transport load.
    /// </summary>
    /// <param name = "_transportLoadRecId">The transport load record identifier that should be checked.
    /// This will also accept blank recIds as those should always be eligible.</param>
    /// <param name = "_workId">The work identifier that should be checked.</param>
    public static void validateWorkCanBeAssignedToTransportLoad(WHSTransportLoadRecId _transportLoadRecId, WHSWorkId _workId)
    {
        WHSTransportLoadLoadedWork transportLoadLoadedWork = WHSTransportLoadLoadedWork::findByWorkId(_workId);

        if (transportLoadLoadedWork
            && transportLoadLoadedWork.TransportLoad != _transportLoadRecId)
        {
            throw error(strFmt("@WAX:ErrorAssigningLoadedWorkToAnotherTransportLoad", _workId, WHSTransportLoad::findByRecId(transportLoadLoadedWork.TransportLoad).TransportLoadId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllRelatedLoads</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the list of <c>WHSLoadTable</c> records related to a transport load.
    /// </summary>
    /// <param name = "_transportLoad">
    /// <c>WHSTransportLoad</c> record.
    /// </param>
    /// <returns> A list containing <c>WHSLoadTable</c> records related to the transport load.</returns>
    public static RecordSortedList getAllRelatedLoads(WHSTransportLoad _transportLoad)
    {
        WHSTransportLoadLoadedWork  transportLoadLoadedWork;

        RecordSortedList list = new RecordSortedList(tableNum(WHSLoadTable));
        list.sortOrder(fieldnum(WHSLoadTable, LoadId));

        while select WorkId from transportLoadLoadedWork
            where transportLoadLoadedWork.TransportLoad == _transportLoad.RecId
        {
            WHSWorkLineLoadLineDetailsEnumerator enumerator = WHSWorkTable::find(transportLoadLoadedWork.WorkId).getEnumeratorGroupByLoadId();

            while (enumerator.moveNext())
            {
                list.ins(WHSLoadTable::find(enumerator.currentLoadId()));
            }
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAtleastOneWorkAssignedToTransportLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a valid work has been assigned to <c>WHSTransportLoad</c> record.
    /// </summary>
    /// <returns>
	/// true if a valid work has been assigned to the transport load; otherwise, false
	/// </returns>
    public boolean isAtleastOneWorkAssignedToTransportLoad()
    {
        WHSTransportLoadLoadedWork  transportLoadLoadedWork;
        boolean                     ret;

        if (this.RecId)
        {
            select firstonly RecId from transportLoadLoadedWork
				where transportLoadLoadedWork.TransportLoad == this.RecId;

            ret = transportLoadLoadedWork.RecId != 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:Table_WHSTransportLoad_DeveloperDocumentation</DeveloperDocumentation>
	<Label>@WAX:WHSTransportLoad_Label</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>TransportLoadId</TitleField1>
	<TitleField2>TransportLoadDescription</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>Inventory</Modules>
	<ReplacementKey>TransportLoadIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransportLoadId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransportLoadDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransportLoadShipConfirmUTCDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransportLoadId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@WAX1461</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransportLoadId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransportLoadStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransportLoadId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSTransportLoadId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransportLoadDescription</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSTransportLoadDescription</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransportLoadStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<EnumType>WHSTransportLoadStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>TransportLoadShipConfirmUTCDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadShipConfirmUTCDateTime</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TransportLoadIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TransportLoadId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>