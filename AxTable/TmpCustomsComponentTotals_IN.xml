<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpCustomsComponentTotals_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TmpCustomsComponentTotals_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>customsComponentTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets customs component totals.
    /// </summary>
    /// <param name="_tmpCustomsInquiryTable">
    /// The temporary customs inquiry table.
    /// </param>
    /// <param name="_common">
    /// The common parameter.
    /// </param>
    /// <returns>
    /// An instance of the <c>TmpCustomsComponentTotals_IN</c> class.
    /// </returns>
    public TmpCustomsComponentTotals_IN customsComponentTotals(
        TmpCustomsInquiryTable_IN _tmpCustomsInquiryTable,
        Common                    _common)
    {
        TmpCustomsComponentTotals_IN        tmpCustomsComponentTotals;
        TmpCustomsInquiryTable_IN           tmpCustomsInquiryTableLoc;
        CustomsTotal_IN                     customsTotal;
        CurrencyExchangeHelper              currencyHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                                                     _tmpCustomsInquiryTable.TransDate);

        switch (_common.TableId)
        {
            case tableNum(CustomsTotal_IN):
                customsTotal = _common;
                while select sum(TaxAmount), TaxComponentTable from _tmpCustomsInquiryTable
                    group by TaxComponentTable
                {
                    tmpCustomsComponentTotals.TaxComponentTable          = _tmpCustomsInquiryTable.TaxComponentTable;
                    tmpCustomsComponentTotals.AmountMST                  = TmpCustomsComponentTotals_IN::getAmountMST(_tmpCustomsInquiryTable.TaxComponentTable,
                                                                                                                      customsTotal);
                    tmpCustomsComponentTotals.AmountSecondary            = currencyHelper.calculateAccountingToTransaction(Ledger::reportingCurrency(),
                                                                                                                           tmpCustomsComponentTotals.AmountMST,
                                                                                                                           true);
                    tmpCustomsComponentTotals.AccumulatedAmountMST       = _tmpCustomsInquiryTable.TaxAmount;
                    tmpCustomsComponentTotals.AccumulatedAmountSecondary = currencyHelper.calculateAccountingToTransaction(Ledger::reportingCurrency(),
                                                                                                                           tmpCustomsComponentTotals.AccumulatedAmountMST,
                                                                                                                           true);
                    tmpCustomsComponentTotals.insert();
                }
                break;
            case tableNum(TmpCustomsInquiryTable_IN):
                tmpCustomsInquiryTableLoc = _common;

                while select sum(TaxAmount), TaxComponentTable from _tmpCustomsInquiryTable
                    group by TaxComponentTable
                {
                    tmpCustomsComponentTotals.TaxComponentTable             = _tmpCustomsInquiryTable.TaxComponentTable;
                    tmpCustomsComponentTotals.AmountMST                     = TmpCustomsComponentTotals_IN::getAmountMST(_tmpCustomsInquiryTable.TaxComponentTable,
                                                                                                                         null,
                                                                                                                         tmpCustomsInquiryTableLoc);
                    tmpCustomsComponentTotals.AmountSecondary               = currencyHelper.calculateAccountingToTransaction(Ledger::reportingCurrency(),
                                                                                                                              tmpCustomsComponentTotals.AmountMST,
                                                                                                                              true);
                    tmpCustomsComponentTotals.AccumulatedAmountMST          = _tmpCustomsInquiryTable.TaxAmount;
                    tmpCustomsComponentTotals.AccumulatedAmountSecondary    = currencyHelper.calculateAccountingToTransaction(Ledger::reportingCurrency(),
                                                                                                                             tmpCustomsComponentTotals.AccumulatedAmountMST,
                                                                                                                             true);
                    tmpCustomsComponentTotals.insert();
                }
                break;
            default:
                break;
        }

        return tmpCustomsComponentTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBaseCurrency</Name>
				<Source><![CDATA[
    display CurrencyCode getBaseCurrency()
    {
        return  Ledger::accountingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSecondaryCurrency</Name>
				<Source><![CDATA[
    display CurrencyCode getSecondaryCurrency()
    {
        return  Ledger::reportingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountMST</Name>
				<Source><![CDATA[
        public static AmountMST getAmountMST(
        RefRecId                  _taxComponent,
        CustomsTotal_IN           _customsTotal = null,
        TmpCustomsInquiryTable_IN _tmpCustomsInqTable = null)
    {
        AmountMST amount;

        if (_tmpCustomsInqTable.RecId)
        {
            if (_taxComponent == _tmpCustomsInqTable.TaxComponentTable)
            {
                amount = _tmpCustomsInqTable.TaxAmount;
            }
            else
            {
                amount = 0;
            }
            return amount;
        }
        else if (_customsTotal.RecId)
        {
            if (_taxComponent == _customsTotal.TaxComponentTable)
            {
                amount = _customsTotal.TaxAmount;
            }
            else
            {
                amount = 0;
            }
            return amount;
        }
        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTmpTable</Name>
				<Source><![CDATA[
        public static TmpCustomsComponentTotals_IN insertIntoTmpTable(
        TmpCustomsInquiryTable_IN _tmpCustomsInquiryTable,
        TmpCustomsInquiryTable_IN _tmpCustomsInquiryTableloc,
        CustomsTotal_IN           _customsTotal)
    {
        TmpCustomsComponentTotals_IN        tmpCustomsComponentTotals;
        CurrencyExchangeHelper              currencyHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                                                     _tmpCustomsInquiryTable.TransDate);

        if (_tmpCustomsInquiryTableloc.RecId)
        {
            while select sum(TaxAmount), TaxComponentTable from _tmpCustomsInquiryTable
                group by TaxComponentTable
            {
                tmpCustomsComponentTotals.TaxComponentTable             = _tmpCustomsInquiryTable.TaxComponentTable;
                tmpCustomsComponentTotals.AmountMST                     = TmpCustomsComponentTotals_IN::getAmountMST(_tmpCustomsInquiryTable.TaxComponentTable,
                                                                                                                     null,
                                                                                                                     _tmpCustomsInquiryTableloc);
                tmpCustomsComponentTotals.AmountSecondary               = currencyHelper.calculateAccountingToReportingAdjustment(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                                  tmpCustomsComponentTotals.AmountMST,
                                                                                                                                  true);

                tmpCustomsComponentTotals.AccumulatedAmountMST          = _tmpCustomsInquiryTable.TaxAmount;
                tmpCustomsComponentTotals.AccumulatedAmountSecondary    = currencyHelper.calculateAccountingToReportingAdjustment(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                                  tmpCustomsComponentTotals.AccumulatedAmountMST,
                                                                                                                                  true);
                tmpCustomsComponentTotals.insert();
            }
        }
        else if (_customsTotal.RecId)
        {
            while select sum(TaxAmount), TaxComponentTable from _tmpCustomsInquiryTable
                group by TaxComponentTable
            {
                tmpCustomsComponentTotals.TaxComponentTable          = _tmpCustomsInquiryTable.TaxComponentTable;
                tmpCustomsComponentTotals.AmountMST                  = TmpCustomsComponentTotals_IN::getAmountMST(_tmpCustomsInquiryTable.TaxComponentTable,
                                                                                                                  _customsTotal,
                                                                                                                  null);
                tmpCustomsComponentTotals.AmountSecondary            = currencyHelper.calculateAccountingToReportingAdjustment(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                               tmpCustomsComponentTotals.AmountMST,
                                                                                                                               true);
                tmpCustomsComponentTotals.AccumulatedAmountMST       = _tmpCustomsInquiryTable.TaxAmount;
                tmpCustomsComponentTotals.AccumulatedAmountSecondary = currencyHelper.calculateAccountingToReportingAdjustment(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                               tmpCustomsComponentTotals.AccumulatedAmountMST,
                                                                                                                               true);
                tmpCustomsComponentTotals.insert();
            }
        }
        return tmpCustomsComponentTotals;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<Label>@GLS6573</Label>
	<TitleField1>TaxComponentTable</TitleField1>
	<TitleField2>AmountMST</TitleField2>
	<ClusteredIndex></ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<PrimaryIndex></PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccumulatedAmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxComponentTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AccumulatedAmountMST</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS25443</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AccumulatedAmountSecondary</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@GLS6075</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountMST</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountSecondary</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS83899</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxComponentTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS5042</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxComponentTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxComponentTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxComponentTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxComponentTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxComponentTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxComponentTable_IN_TmpCustomsComponentTotals_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxComponentTable</Name>
					<Field>TaxComponentTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>