<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailAssortmentProductLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailAssortmentProductLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createFromTmpProductsToAdd</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Inserts the record into <c>RetailAssortmentProductLine</c> table.
    /// </summary>
    /// <param name="_assortmentTable">
    ///  A buffer of <c>RetailAssortmentTable</c> table.
    /// </param>
    /// <param name="_tmpInventTable">
    /// A buffer of <c>TmpRetailProductsToAdd</c> table.
    /// </param>
    /// <param name="_mapOfPreSelectedProducts">
    /// The map of pre selected products.
    /// </param>
    public void createFromTmpProductsToAdd(RetailAssortmentTable _assortmentTable,
        TmpRetailProductsToAdd  _tmpInventTable,
        Map                     _mapOfPreSelectedProducts)
    {
        RetailAssortmentProductLine assortmentProductLine;
        int64   lineRecId;
        MapIterator     mapLinesIterator;
        RetailGroupMemberLine   groupMemberLine, retailGroupMemberLineBuffer;
        Set lineSet = new Set(Types::Int64);

        ttsBegin;
        while select _tmpInventTable
        {
            try
            {
                if (_mapOfPreSelectedProducts && _mapOfPreSelectedProducts.exists(_tmpInventTable.RecId)) //check wheather the line already exists on Add product
                {
                    lineRecID = _mapOfPreSelectedProducts.lookup(_tmpInventTable.RecId); //find AssortmentProductLine record ID through keyvalue.

                    select RecId, RetailGroupMemberLineId from assortmentProductLine
                    where assortmentProductLine.RecId == lineRecId
                    join forUpdate groupMemberLine
                        where groupMemberLine.RecId == assortmentProductLine.RetailGroupMemberLineId;

                    if (assortmentProductLine.RecId &&
                    (groupMemberLine.Variant != _tmpInventTable.EcoResDistinctProductVariant))
                    {
                        if (assortmentProductLine.validateWrite())
                        {
                            groupMemberLine.Variant = _tmpInventTable.EcoResDistinctProductVariant;
                            groupMemberLine.update();
                        }
                        else
                        {
                            throw error("@RET490477") ;
                        }
                    }

                    lineSet.add(assortmentProductLine.RecId);
                }
                else
                {
                    if (!RetailMerchandisingKillSwitch::disableRestrictDuplicateProductLinesInAssortments())
                    {
                        // Check for duplicates. If the product has already been added to assortment then skip.
                        retailGroupMemberLineBuffer = RetailGroupMemberLine::getAssortmentLineGroupMemberLine(_assortmentTable.RecId, EcoResCategory::find(_tmpInventTable.Category).CategoryHierarchy, _tmpInventTable.Category, _tmpInventTable.EcoResProduct, _tmpInventTable.EcoResDistinctProductVariant, RetailAssortmentExcludeIncludeType::Include);
                    }

                    if (!retailGroupMemberLineBuffer)
                    {
                        this.clear();
                        this.RetailGroupMemberLineId = RetailGroupMemberLine::createRetailGroupMemberV2(_tmpInventTable.Category, _tmpInventTable.EcoResProduct, _tmpInventTable.EcoResDistinctProductVariant,
                        EcoResCategory::find(_tmpInventTable.Category).CategoryHierarchy);
                        this.initValue();
                        this.AssortmentRecId    = _assortmentTable.RecId;
                        this.Status             = _assortmentTable.Status;
                        this.LineType           = RetailAssortmentExcludeIncludeType::Include;

                        this.insert();

                        lineSet.add(this.RecId);
                    }
                }
            }
            catch (Exception::Error)
            {
                lineSet.add(this.RecId);
                checkFailed("@SYS18447");
            }
        }
        ttsCommit;

        if (_mapOfPreSelectedProducts)
        {
            // add lines which are selected on the Add product form .
            mapLinesIterator = new MapIterator(_mapOfPreSelectedProducts);

            while (mapLinesIterator.more())
            {
                try
                {
                    if (!lineSet.in(mapLinesIterator.value()))
                    {
                        select forupdate assortmentProductLine
                            where assortmentProductLine.RecId == mapLinesIterator.value()
                            join groupMemberLine
                            where groupMemberLine.RecId == assortmentProductLine.RetailGroupMemberLineId;

                        setPrefix(strFmt("@SYS24300", groupMemberLine.Product));

                        if (assortmentProductLine.validateDelete())
                        {
                            assortmentProductLine.delete();
                        }
                        else
                        {
                            throw error("@RET490478");
                        }
                    }
                }
                catch (Exception::Error)
                {
                    checkFailed("@SYS18447");
                }

                mapLinesIterator.next();
            }
        }

        ttsBegin;
        delete_from _tmpInventTable;
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        if (!this.RetailGroupMemberLineId)
        {
            this.RetailGroupMemberLineId = RetailGroupMemberLine::createRetailGroupMemberV2();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyProductLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a copy of the product lines from a source assortment to a specified target assortment.
    /// </summary>
    /// <param name="_sourceAssortmentId">
    /// The <c>RecId</c> value of the source assortment.
    /// </param>
    /// <param name="_sourceAssortmentStatus">
    /// The status of the source assortment.
    /// </param>
    /// <param name="_targetAssortmentId">
    /// The <c>RecId</c> value of the target assortment.
    /// </param>
    /// <param name="_targetAssortmentStatus">
    /// The status of the target assortment.
    /// </param>
    public static void copyProductLines(
        RetailAssortmentRefRecId _sourceAssortmentId,
        RetailAssortmentStatusType _sourceAssortmentStatus,
        RetailAssortmentRefRecId _targetAssortmentId,
        RetailAssortmentStatusType _targetAssortmentStatus)
    {
        RetailAssortmentProductLine sourceProduct, targetProduct;
        RetailGroupMemberLine       groupMemberLine;
        RecordInsertList productLines = new RecordInsertList(tableNum(RetailAssortmentProductLine));

        ttsBegin;

        while select * from sourceProduct
                where
                    sourceProduct.AssortmentRecId == _sourceAssortmentId &&
                    sourceProduct.Status == _sourceAssortmentStatus
            join Category, Product, Variant, CategoryHierarchy from groupMemberLine
                where groupMemberLine.RecId == sourceProduct.RetailGroupMemberLineId
        {
            targetProduct.RetailGroupMemberLineId = RetailGroupMemberLine::createRetailGroupMemberV2(
                groupMemberLine.Category, groupMemberLine.Product, groupMemberLine.Variant, groupMemberLine.CategoryHierarchy);

            targetProduct = RetailAssortmentProductLine::initFromAssortmentProductLine(targetProduct, sourceProduct, _targetAssortmentId, _targetAssortmentStatus);

            productLines.add(targetProduct);
        }

        productLines.insertDatabase();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailAssortmentProductLine</c> table.
    /// </summary>
    /// <param name="_retailAssortmentProductLine">
    /// The record ID of the <c>RetailAssortmentProductLine</c> record.
    /// </param>
    /// <param name="_selectForUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailAssortmentProductLine</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailAssortmentProductLine find(RefRecId _retailAssortmentProductLine, boolean _selectForUpdate = false)
    {
        RetailAssortmentProductLine retailAssortmentProductLine;
        select firstOnly retailAssortmentProductLine
            where retailAssortmentProductLine.RecId == _retailAssortmentProductLine;
        retailAssortmentProductLine.selectForUpdate(_selectForUpdate);
        return retailAssortmentProductLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishProductLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publishes the associated products for a specified assortment.
    /// </summary>
    /// <param name="_assortmentId">
    /// The <c>RecId</c> value of the retail assortment.
    /// </param>
    public static void publishProductLines(RetailAssortmentRefRecId _assortmentId)
    {
        RetailAssortmentProductLine productLineDraft, productLinePublished, productLineUpdate;
        RetailGroupMemberLine groupMemberLineDraft, groupMemberLinePublished, groupMemberLineUpdate;

        // Delete all RetailGroupMemberLine DRAFT records where RetailAssortmentProductLine was not changed during update
        ttsbegin;
        RefRecId curPartiton = getCurrentPartitionRecId();
        delete_from groupMemberLineDraft
            exists join productLineDraft
            where productLineDraft.Partition == curPartiton &&
                  productLineDraft.AssortmentRecId == _assortmentId &&
                  productLineDraft.Status == RetailAssortmentStatusType::Draft &&
                  productLineDraft.RetailGroupMemberLineId == groupMemberLineDraft.RecId
                join productLinePublished
                where productLinePublished.Partition == productLineDraft.Partition &&
                      productLinePublished.AssortmentRecId == productLineDraft.AssortmentRecId &&
                      productLinePublished.Status == RetailAssortmentStatusType::Published &&
                      productLinePublished.LineNum == productLineDraft.LineNum 
                    join groupMemberLinePublished
                    where productLinePublished.RetailGroupMemberLineId == groupMemberLinePublished.RecId &&
                          groupMemberLineDraft.Variant     == groupMemberLinePublished.Variant     &&
                          groupMemberLineDraft.Product     == groupMemberLinePublished.Product     &&
                          groupMemberLineDraft.Category    == groupMemberLinePublished.Category    &&
                          groupMemberLineDraft.InventDimId == groupMemberLinePublished.InventDimId;

        // Update all RetailAssortmentProductLine records to link RetailGroupMemberIds to PUBLISHED versions where 
        // the DRAFT versions were deleted in the statement above
        update_recordset productLineDraft
        setting RetailGroupMemberLineId = groupMemberLinePublished.RecId
            where productLineDraft.Partition == curPartiton &&
                  productLineDraft.AssortmentRecId == _assortmentId &&
                  productLineDraft.Status == RetailAssortmentStatusType::Draft
            join  productLinePublished
            where productLinePublished.Partition == productLineDraft.Partition &&
                  productLinePublished.AssortmentRecId == _assortmentId &&
                  productLinePublished.Status == RetailAssortmentStatusType::Published &&
                  productLinePublished.LineNum == productLineDraft.LineNum
                join groupMemberLinePublished
                where productLinePublished.RetailGroupMemberLineId == groupMemberLinePublished.RecId
                    notexists join groupMemberLineDraft
                    where productLineDraft.RetailGroupMemberLineId == groupMemberLineDraft.RecId;

        // Delete all original published rows for the specified assortment.
        delete_from productLinePublished
            where
                productLinePublished.AssortmentRecId == _assortmentId &&
                productLinePublished.Status == RetailAssortmentStatusType::Published;

        // Update all relevant draft rows as published.
        update_recordset productLineDraft
        setting
            Status = RetailAssortmentStatusType::Published
        where
            productLineDraft.AssortmentRecId == _assortmentId &&
            productLineDraft.Status == RetailAssortmentStatusType::Draft;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next line number for assortment product lines.
    /// </summary>
    /// <param name="_assortmentRecId">
    /// The assortment record id.
    /// </param>
    /// <returns>
    /// The next line number.
    /// </returns>
    public static LineNum  nextLineNum(RefRecId  _assortmentRecId)
    {
        RetailAssortmentProductLine assortmentProductLine;

        select maxof(LineNum) from assortmentProductLine
                where assortmentProductLine.AssortmentRecId == _assortmentRecId;

        return assortmentProductLine.LineNum + 1.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (this.LineNum <= 0)
        {
            this.LineNum = RetailAssortmentProductLine::nextLineNum(this.AssortmentRecId);
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete a record on <C>RetailAssortmentProductLine</C> table.
    /// </summary>
    public void delete()
    {
        RetailGroupMemberLine retailGroupMemberLinePublished, retailGroupMemberLine;
        RetailAssortmentProductLine retailAssortmentProductLineDraft, retailAssortmentProductLinePublished;

        // In case this is a Published Assortment product line, only delete the RetailGroupMemberLine in the following cases:
        if (this.Status == RetailAssortmentStatusType::Published)
        {
            ttsbegin;
            // - there is an existing draft version of RetailAssortmentProductLine linked to a different RetailGroupMemberLine
            delete_from retailGroupMemberLinePublished
                where retailGroupMemberLinePublished.RecId == this.RetailGroupMemberLineId
                exists join RetailGroupMemberLineId from retailAssortmentProductLinePublished
                where retailAssortmentProductLinePublished.RetailGroupMemberLineId == retailGroupMemberLinePublished.RecId  &&
                     retailAssortmentProductLinePublished.RecId == this.RecId
                    exists join RetailGroupMemberLineId from retailAssortmentProductLineDraft
                    where retailAssortmentProductLineDraft.Partition == retailAssortmentProductLinePublished.Partition &&
                          retailAssortmentProductLineDraft.AssortmentRecId == retailAssortmentProductLinePublished.AssortmentRecId &&
                          retailAssortmentProductLineDraft.Status == RetailAssortmentStatusType::Draft &&
                          retailAssortmentProductLineDraft.LineNum == retailAssortmentProductLinePublished.LineNum &&
                          retailAssortmentProductLineDraft.RetailGroupMemberLineId != retailAssortmentProductLinePublished.RetailGroupMemberLineId;
                          
            // - there is no existing draft version of RetailAssortmentProductLine
            delete_from retailGroupMemberLinePublished
                where retailGroupMemberLinePublished.RecId == this.RetailGroupMemberLineId
                exists join RetailGroupMemberLineId from retailAssortmentProductLinePublished
                where retailAssortmentProductLinePublished.RetailGroupMemberLineId == retailGroupMemberLinePublished.RecId  &&
                     retailAssortmentProductLinePublished.RecId == this.RecId
                    notexists join RetailGroupMemberLineId from retailAssortmentProductLineDraft
                    where retailAssortmentProductLineDraft.Partition == retailAssortmentProductLinePublished.Partition &&
                          retailAssortmentProductLineDraft.AssortmentRecId == retailAssortmentProductLinePublished.AssortmentRecId &&
                          retailAssortmentProductLineDraft.Status == RetailAssortmentStatusType::Draft &&
                          retailAssortmentProductLineDraft.LineNum == retailAssortmentProductLinePublished.LineNum;
                          
            ttscommit;
        }
        else
        {
            // Replicate delete cascade action on RetailGroupMemberLine
            ttsbegin;
            delete_from retailGroupMemberLine
                    where retailGroupMemberLine.RecId == this.RetailGroupMemberLineId;
            ttscommit;
        }

        // Delete RetailAssortmentProductLine record.
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAssortmentProductLine</Name>
				<Source><![CDATA[
    public static RetailAssortmentProductLine initFromAssortmentProductLine(RetailAssortmentProductLine _targetProduct,
                                                                     RetailAssortmentProductLine _sourceProduct,
                                                                     RetailAssortmentRefRecId _targetAssortmentId,
                                                                     RetailAssortmentStatusType _targetAssortmentStatus)
    {
        _targetProduct.AssortmentRecId = _targetAssortmentId;
        _targetProduct.Status = _targetAssortmentStatus;
        _targetProduct.LineType = _sourceProduct.LineType;
        _targetProduct.LineNum = _sourceProduct.LineNum;

        return _targetProduct;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET6061</DeveloperDocumentation>
	<Label>@RET6066</Label>
	<TitleField1>RetailGroupMemberLineId</TitleField1>
	<TitleField2>LineType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Merchandising</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssortmentRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailGroupMemberLineId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssortmentRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailGroupMemberLineId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AssortmentRecId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailAssortmentRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LineType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailAssortmentLineType</ExtendedDataType>
			<EnumType>RetailAssortmentExcludeIncludeType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RetailGroupMemberLineId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailAssortmentStatusType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RetailAssortmentTableIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>AssortmentRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RetailGroupMemberLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RetailGroupMemberLineId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailAssortmentTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailAssortmentTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RetailAssortmentTable</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssortmentRecId</Name>
					<Field>AssortmentRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailGroupMemberLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>RetailGroupMemberLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailGroupMemberLineId</Name>
					<Field>RetailGroupMemberLineId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>