<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepBookCalendarSchedule_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetDepBookCalendarSchedule_JP extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetDepreciationProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related record of <C>AssetDepreciationProfile</C>.
    /// </summary>
    /// <returns>
    /// The related record of <C>AssetDepreciationProfile</C>.
    /// </returns>
    public AssetDepreciationProfile assetDepreciationProfile()
    {
        AssetDepreciationProfile assetDepreciationProfile;
        AssetBookTable assetBookTable;

        if (this.SourceRecId)
        {
            select firstOnly assetDepreciationProfile
                exists join assetBookTable
                where assetBookTable.DepreciationProfile    == assetDepreciationProfile.Profile
                    && assetBookTable.RecId                 == this.SourceRecId;
        }

        return assetDepreciationProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        AssetDepBookCalendarSchedule_JP copyOfAssetDepBookCalendarSchedule;

        ttsBegin;
        copyOfAssetDepBookCalendarSchedule.data(this);
        super();
        copyOfAssetDepBookCalendarSchedule.tryToCopyScheduleFromCurrentToTax();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsBegin;

        super();

        this.tryToCopyScheduleFromCurrentToTax();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>source</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source record.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The source record.
    /// </returns>
    public Common source(boolean _forUpdate = false)
    {
        AssetBookTable assetBookTable;

        if (this.SourceRecId)
        {
            assetBookTable.selectForUpdate(_forUpdate);

            select firstOnly assetBookTable
                where assetBookTable.RecId == this.SourceRecId;
        }

        return assetBookTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryToCopyScheduleFromCurrentToTax</Name>
				<Source><![CDATA[
    private boolean tryToCopyScheduleFromCurrentToTax()
    {
        boolean ret;
        AssetBookTable currentLayerBookTable;
        AssetBookTable taxLayerBookTable;

        if (this.SourceTableId == tableNum(AssetBookTable))
        {
            select firstOnly currentLayerBookTable
                where currentLayerBookTable.RecId == this.SourceRecId;

            if (currentLayerBookTable.CurrentOperationsTax == CurrentOperationsTax::Current)
            {
                taxLayerBookTable = AssetBookTable::findByLinkedCurrentLayerBook_JP(currentLayerBookTable.BookId);
                if (taxLayerBookTable)
                {
                    currentLayerBookTable.AssetDepBookTableMap_JP::copyCalendarScheduleTo(taxLayerBookTable.BookId);
                    ret = true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ttsBegin;

        super();

        this.tryToCopyScheduleFromCurrentToTax();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            ret = AssetDepBookCalendarSchedule_JP::validateNewValidFromDate(this, true);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deete all related record in this table for specified source record.
    /// </summary>
    /// <param name="_sourceTableId">
    /// Table ID of source record.
    /// </param>
    /// <param name="_sourceRecId">
    /// Record ID of source record.
    /// </param>
    public static void deleteForSource(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        AssetDepBookCalendarSchedule_JP assetDepBookCalendarSchedule;

        if (_sourceTableId && _sourceRecId)
        {
            delete_from assetDepBookCalendarSchedule
                where assetDepBookCalendarSchedule.SourceTableId    == _sourceTableId
                    && assetDepBookCalendarSchedule.SourceRecId     == _sourceRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record of <C>AssetDepBookCalendarSchedule_JP</C> based on specified source record and date.
    /// </summary>
    /// <param name="_sourceTableId">
    /// Table ID of source record.
    /// </param>
    /// <param name="_sourceRecId">
    /// Record ID of source record.
    /// </param>
    /// <param name="_date">
    /// The date.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record of <C>AssetDepBookCalendarSchedule_JP</C>.
    /// </returns>
    public static AssetDepBookCalendarSchedule_JP find(
        RefTableId _sourceTableId,
        RefRecId _sourceRecId,
        AssetTransDate  _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        boolean _forUpdate = false)
    {
        AssetDepBookCalendarSchedule_JP assetDepBookCalendarSchedule;

        if (_sourceTableId && _sourceRecId)
        {
            assetDepBookCalendarSchedule.selectForUpdate(_forUpdate);
            select firstOnly validtimestate(_date) assetDepBookCalendarSchedule
                where assetDepBookCalendarSchedule.SourceTableId    == _sourceTableId
                    && assetDepBookCalendarSchedule.SourceRecId     == _sourceRecId;
        }

        return assetDepBookCalendarSchedule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNewValidFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the new value of field <C>ValidFrom</C>.
    /// </summary>
    /// <param name="_newAssetDepBookCalendarSchedule">
    /// A record of <C>AssetDepBookCalendarSchedule_JP</C> which has a new value for field <C>ValidFrom</C>.
    /// </param>
    /// <param name="_showErrorMsg">
    /// A Boolean value that indicates whether to show the error message when validation failed; optional.
    /// </param>
    /// <returns>
    /// true if validate success; otherwise, return false.
    /// </returns>
    public static boolean validateNewValidFromDate(AssetDepBookCalendarSchedule_JP  _newAssetDepBookCalendarSchedule, boolean _showErrorMsg = true)
    {
        boolean ret = true;
        AssetDepreciationProfile assetDepreciationProfile = _newAssetDepBookCalendarSchedule.assetDepreciationProfile();
        AssetTableInterval assetTableIntervalBefore;
        AssetTableInterval assetTableIntervalAfter;
        Common source = _newAssetDepBookCalendarSchedule.source();
        AssetDepBookTableMap_JP assetDepBookTableMap;
        RefRecId previousCalendar;
        FiscalCalendarPeriod ledgerFirstPeriod;
        AssetDepBookCalendarSchedule_JP lastCalendar;

        if (_newAssetDepBookCalendarSchedule.ValidFrom)
        {
            source = _newAssetDepBookCalendarSchedule.source();
            if (SysDictTable::isTableMapped(tableNum(AssetDepBookTableMap_JP), source.TableId))
            {
                assetDepBookTableMap = source;
                assetDepreciationProfile = _newAssetDepBookCalendarSchedule.assetDepreciationProfile();
                previousCalendar = assetDepBookTableMap.AssetDepBookTableMap_JP::getFiscalCalendar_JP(_newAssetDepBookCalendarSchedule.ValidFrom - 1);

                assetTableIntervalBefore = AssetTableInterval::construct(
                    assetDepreciationProfile,
                    previousCalendar);

                assetTableIntervalAfter = AssetTableInterval::construct(
                    assetDepreciationProfile,
                    _newAssetDepBookCalendarSchedule.FiscalCalendar);

                if (assetTableIntervalAfter.startOfPeriod(_newAssetDepBookCalendarSchedule.ValidFrom) != _newAssetDepBookCalendarSchedule.ValidFrom)
                {
                    ret = false;
                    if (_showErrorMsg)
                    {
                        // The start date for the calendar that you selected does not match any period start date for fiscal calendar %1.
                        checkFailed(strFmt("@SYS4002701", FiscalCalendar::find(_newAssetDepBookCalendarSchedule.FiscalCalendar).CalendarId));
                    }
                }
                else
                {
                    // Get the last existing calendar.
                    select firstOnly lastCalendar
                        order by lastCalendar.ValidFrom desc
                        where lastCalendar.SourceTableId == source.TableId
                                && lastCalendar.SourceRecId == source.RecId
                                && lastCalendar.RecId != _newAssetDepBookCalendarSchedule.RecId;

                    // The new calendar must be after the last calendar.
                    if (_newAssetDepBookCalendarSchedule.ValidFrom <= lastCalendar.ValidFrom)
                    {
                        ret = false;

                        if (_showErrorMsg)
                        {
                            // The from date must be after %1
                            checkFailed(strFmt("@FixedAssetsImpairementAccounting:SYP4880791", lastCalendar.ValidFrom));
                        }
                    }

                    else if (assetTableIntervalBefore.endPeriod(_newAssetDepBookCalendarSchedule.ValidFrom-1) != _newAssetDepBookCalendarSchedule.ValidFrom-1)
                    {
                        // If the previous day of the new calendar's valid from day is not an end date of a period of previous calendar,
                        // and the new calendar is not the last calendar, error will pop up.
                        if (!lastCalendar)
                        {
                            // If there is no existing calendar, get the first period of the ledger fiscal calendar
                            select firstOnly RecId, StartDate from ledgerFirstPeriod
                                    order by ledgerFirstPeriod.StartDate
                                    where ledgerFirstPeriod.FiscalCalendar == previousCalendar;

                            // If the new calendar's valid from date is after the start date of the ledger calendar,
                            // it means there is gap between the valid from date and the ledger calendar periods.
                            // Otherwise, it means the valid from date of the first calendar is before or equal to
                            // the first date of the ledger calendar, which is accept.
                            if (_newAssetDepBookCalendarSchedule.ValidFrom > ledgerFirstPeriod.StartDate)
                            {
                                ret = false;
                            }
                        }
                        else
                        {
                            ret = false;
                        }

                        if (!ret && _showErrorMsg)
                        {
                            // You cannot have gaps between the ending date of fiscal calendar %2 and the starting date of the next calendar %1.
                            checkFailed(
                                strFmt(
                                    "@SYS4002758",
                                    FiscalCalendar::find(_newAssetDepBookCalendarSchedule.FiscalCalendar).CalendarId,
                                    FiscalCalendar::find(previousCalendar).CalendarId));
                        }
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<CountryRegionCodes>JP</CountryRegionCodes>
	<DeveloperDocumentation>@SYS4002700</DeveloperDocumentation>
	<Label>@SYS4002699</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>ValidFrom</TitleField1>
	<TitleField2>FiscalCalendar</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>FixedAssets</Modules>
	<ValidTimeStateFieldType>Date</ValidTimeStateFieldType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalCalendar</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalCalendar</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FiscalCalendar</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FiscalCalendarRecId</ExtendedDataType>
			<Label>@sys11839</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SourceTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidFromDate</ExtendedDataType>
			<Label>@SYS5209</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidToDate</ExtendedDataType>
			<Label>@SYS14656</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ScheduleIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<ValidTimeStateKey>Yes</ValidTimeStateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SourceRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FiscalCalendar</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FiscalCalendar</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalCalendar</Name>
					<SourceEDT>FiscalCalendarRecId</SourceEDT>
					<Field>FiscalCalendar</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>