<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxFiscalDocument_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxFiscalDocument_BR extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canFiscalDocTextBeRegistrated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if Fiscal document texts can be registered to the tax document header
    /// </summary>
    /// <returns>
    /// True if the Fiscal document text can be registered; false otherwise.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean canFiscalDocTextBeRegistrated()
    {
        return  this.RecId &&
                this.Status == TaxFiscalDocumentStatus_BR::Open &&
                !this.TaxFiscalDocToCancelRecID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set that should be applied to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was previously instantiated by using the current buffer;
    /// optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this, this.companyInfo().RecId)
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides delete method to update the original tax fiscal document when the
    /// cancelling is deleted.
    /// </summary>
    public void delete()
    {
        TaxFiscalDocument_BR reversalTaxFiscalDocument;

        // It there is a reversal order, put its status back to Posted
        if (this.TaxFiscalDocToCancelRecID)
        {
            reversalTaxFiscalDocument = TaxFiscalDocument_BR::findRecId(this.TaxFiscalDocToCancelRecID, true);
            if (reversalTaxFiscalDocument
                && reversalTaxFiscalDocument.InvoiceNumber)
            {
                reversalTaxFiscalDocument.Status = TaxFiscalDocumentStatus_BR::Posted;
                reversalTaxFiscalDocument.CancelReason = 0;
                reversalTaxFiscalDocument.update();
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editFiscalDocumentSeries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edit method for the Fiscal Document Series column
    /// </summary>
    /// <param name="_set">
    /// Indicates wether the current value is being set or not
    /// </param>
    /// <param name="_fiscalDocumentSeries">
    /// The current Fiscal Document Series value
    /// </param>
    /// <returns>
    /// The fiscal document series depending on the issuer of the Tax Fiscal Document
    /// </returns>
    /// <remarks>
    /// This method was created because the series field required some intelligence when the Fiscal Establishment is in SCAN contingency
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    edit public FiscalDocumentSeries_BR editFiscalDocumentSeries(boolean _set, FiscalDocumentSeries_BR _fiscalDocumentSeries)
    {
        if (_set)
        {
            this.Series = _fiscalDocumentSeries;
        }

        return this.fiscalDocumentSeries();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the reason code.
    /// </summary>
    /// <param name="set">
    /// A Boolean value that indicates whether the reason code is set.
    /// </param>
    /// <param name="_reasonCode">
    /// The new reason code when the <paramref name="set" /> value is true.
    /// </param>
    /// <returns>
    /// The reason code of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit ReasonCode editReasonCode(boolean set, ReasonCode _reasonCode)
    {
        ReasonCode      reasonCode = strLRTrim(_reasonCode);
        RefRecId        originalReasonRefRecID;
        FormDataSource  formCustInvoiceTable;

        if (set)
        {
            // If the ReasonRefRecID is 0, then create a new ReasonTableRef record
            // otherwise, update the existing record.
            if (this.CancelReason == 0)
            {
                this.CancelReason = ReasonTableRef::createFromCode(reasonCode);
            }
            else
            {
                if (reasonCode)
                {
                    // The reasonCode value is not blank.
                    // Save the current ReasonRefRecID for comparision.
                    originalReasonRefRecID = this.CancelReason;
                    this.CancelReason = ReasonTableRef::updateCode(reasonCode, this.CancelReason);

                    if (this.CancelReason == originalReasonRefRecID)
                    {
                        // The reason code has changed but the referenced record ID has not.
                        // Get the current FormDataSource and set forceWrite() to true so that
                        // data validation (validateWrite()) is performed on the updated reason code.
                        formCustInvoiceTable = FormDataUtil::getFormDataSource(this);
                        if (formCustInvoiceTable)
                        {
                            formCustInvoiceTable.forceWrite(true);
                        }
                    }
                }
                else
                {
                    // The reasonCode is blank.
                    this.CancelReason = ReasonTableRef::updateCode(reasonCode, this.CancelReason);
                }
            }

            // Update the reason comment with the default comment value for the updated reason code.
            // A blank reasonCode will result in a blank comment because a blank reasonCode
            // will return an empty reasonTable buffer.
            this.editReasonComment(true, ReasonTable::find(_reasonCode).Description);
        }
        else
        {
            reasonCode = ReasonTableRef::find(this.CancelReason).Reason;
        }

        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonComment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the reason comment.
    /// </summary>
    /// <param name="set">
    /// A Boolean value that indicates whether the reason code is set.
    /// </param>
    /// <param name="_reasonComment">
    /// The new reason comment when the <paramref name="set" /> value is true.
    /// </param>
    /// <returns>
    /// The reason comment of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit ReasonComment editReasonComment(boolean set, ReasonComment _reasonComment)
    {
        ReasonComment   reasonComment = _reasonComment;

        if (set)
        {
            // If the ReasonRefRecID is 0, then create a new ReasonTableRef record
            // otherwise, update the existing record.
            if (this.CancelReason == 0)
            {
                this.CancelReason = ReasonTableRef::createFromComment(reasonComment);
            }
            else
            {
                this.CancelReason = ReasonTableRef::updateComment(reasonComment, this.CancelReason);
            }
        }
        else
        {
            reasonComment = ReasonTableRef::find(this.CancelReason).ReasonComment;
        }

        return reasonComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>FiscalDocument_BR</c> record for this table.
    /// </summary>
    /// <returns>
    /// The <c>FiscalDocument_BR</c> record related to this tax transfer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FiscalDocument_BR fiscalDocument()
    {
        return FiscalDocument_BR::findByRef(this.TableId, this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalDocumentSeries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the correct series for the fiscal document, depending on the contingency mode of issuing fiscal establishment
    /// </summary>
    /// <returns>
    /// The fiscal document series for the Tax Fiscal Document
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display public FiscalDocumentSeries_BR fiscalDocumentSeries()
    {
        if (TaxFiscalDocument_BR::isDocumentBeingIssued(this) && this.Status == TaxFiscalDocumentStatus_BR::Open)
        {
            return FiscalDocumentType_BR::getFiscalDocumentSeries(this.FiscalDocumentType);
        }

        return this.Series;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of the party that is related to this document.
    /// </summary>
    /// <returns>
    /// The name of the party that is related to this document.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display Name getAccountName()
    {
        if (this.AccountType == CustVendType_BR::Customer)
        {
            CustTable::find(this.AccountNum).name();
        }
        else if (this.AccountType == CustVendType_BR::Vendor)
        {
            VendTable::find(this.AccountNum).name();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCancelingTaxFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>TaxFiscalDocument_BR</c> record that reverses this document
    /// </summary>
    /// <returns>
    /// Record from <c>TaxFiscalDocument_BR</c> that reverses this document, if any.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxFiscalDocument_BR getCancelingTaxFiscalDocument()
    {
        TaxFiscalDocument_BR cancelingDoc;

        select cancelingDoc
            where cancelingDoc.TaxFiscalDocToCancelRecID == this.RecId;

        return cancelingDoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendPrimaryAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the primary postal address of the party related to this tax transfer.
    /// </summary>
    /// <returns>
    /// The primary postal address of the party related to this tax transfer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    LogisticsPostalAddress getCustVendPrimaryAddress()
    {
        LogisticsPostalAddress postalAddress;

        if (this.AccountType == CustVendType_BR::Customer)
        {
            postalAddress = CustTable::find(this.AccountNum).postalAddress();
        }
        else if (this.AccountType == CustVendType_BR::Vendor)
        {
            postalAddress = VendTable::find(this.AccountNum).postalAddress();
        }

        return postalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIssuerPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the postal address of the issuer of this tax fiscal document.
    /// </summary>
    /// <returns>
    /// The postal address of the issuer of this tax fiscal document.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    LogisticsPostalAddress getIssuerPostalAddress()
    {
        LogisticsPostalAddress postalAddress;

        switch (this.AccountType)
        {
            case CustVendType_BR::Customer:
                postalAddress = CompanyInfo::find().postalAddress();
                break;

            case CustVendType_BR::Vendor:
                postalAddress = this.getCustVendPrimaryAddress();
                break;
        }

        return postalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecipientAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the postal address of the recipient of this tax fiscal document.
    /// </summary>
    /// <returns>
    /// The postal address of the recipient of this tax fiscal document.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    LogisticsPostalAddress getRecipientAddress()
    {
        LogisticsPostalAddress postalAddress;

        switch (this.AccountType)
        {
            case CustVendType_BR::Customer:
                postalAddress = this.getCustVendPrimaryAddress();
                break;

            case CustVendType_BR::Vendor:
                postalAddress = CompanyInfo::find().postalAddress();
                break;
        }

        return postalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record from another <c>TaxFiscalDocument_BR</c> record.
    /// </summary>
    /// <param name="_sourceTaxFiscalDocument">
    /// The record to initialize from.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void initFromTaxFiscalDocument(TaxFiscalDocument_BR _sourceTaxFiscalDocument)
    {
        this.AccountType                        = _sourceTaxFiscalDocument.AccountType;
        this.AccountNum                         = _sourceTaxFiscalDocument.AccountNum;
        this.CurrencyCode                       = _sourceTaxFiscalDocument.CurrencyCode;
        this.DefaultDimension                   = _sourceTaxFiscalDocument.DefaultDimension;
        this.Direction                          = _sourceTaxFiscalDocument.Direction;
        this.FiscalDocumentType                 = _sourceTaxFiscalDocument.FiscalDocumentType;
        this.FiscalEstablishmentId              = _sourceTaxFiscalDocument.FiscalEstablishmentId;
        this.IncomingDocumentNumber             = _sourceTaxFiscalDocument.IncomingDocumentNumber;
        this.LogisticsAddressName               = _sourceTaxFiscalDocument.LogisticsAddressName;
        this.LogisticsPostalAddress             = _sourceTaxFiscalDocument.LogisticsPostalAddress;
        this.Model                              = _sourceTaxFiscalDocument.Model;
        this.Series                             = _sourceTaxFiscalDocument.Series;
        this.InvoiceDate                        = _sourceTaxFiscalDocument.InvoiceDate;
        this.TaxFiscalDocumentType              = _sourceTaxFiscalDocument.TaxFiscalDocumentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record into the DB and resolves its depedencies.
    /// </summary>
    public void insert()
    {
        super();
        this.updateFiscalDocumentText(FiscalDocumentTextType_BR::CustVend);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOutgoing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether this fiscal document has an outgoing direction.
    /// </summary>
    /// <returns>
    /// true of it is outgoing; false if is incoming.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    boolean isOutgoing()
    {
        return this.Direction == FiscalDocDirection_BR::Outgoing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReturnedItem_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the transaction represented by the mapped table is for returned items.
    /// </summary>
    /// <returns>
    ///     Boolean value indicating whether the transaction is for returned items.
    /// </returns>
    /// <remarks>
    ///     This method must be implemented in all mapped tables.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    boolean isReturnedItem_BR()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that contains the merged combination of the current
    /// <c>defaultDimension</c> field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was instantiated with the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that contains the merged combination of the current <c>defaultDimension</c> field
    /// on this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this, this.companyInfo().RecId)
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs adjustments in the invoice when a given field is modified.
    /// </summary>
    /// <param name="_fieldId">
    /// <c>FieldId</c> of the field being modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        CustVendTable custVendTable;
        FiscalDocumentType_BR fiscalDocumentType;

        switch (_fieldId)
        {
            case fieldNum(TaxFiscalDocument_BR, LogisticsPostalAddress):
                if (this.TaxFiscalDocumentType == TaxFiscalDocumentType_BR::ICMSInstallment)
                {
                    this.LogisticsAddressName = CompanyInfo::find().name();
                }
                else if (this.AccountType == CustVendType_BR::Customer)
                {
                    this.LogisticsAddressName = CustTable::find(this.AccountNum).name();
                }
                else
                {
                    this.LogisticsAddressName = VendTable::find(this.AccountNum).name();
                }
                break;

            case fieldNum(TaxFiscalDocument_BR, TaxFiscalDocumentType):
                if (this.TaxFiscalDocumentType == TaxFiscalDocumentType_BR::ICMSInstallment)
                {
                    this.Direction = FiscalDocDirection_BR::Incoming;
                    this.AccountType = CustVendType_BR::Vendor;
                    this.DefaultDimension = 0;
                }
                else if (this.Direction == FiscalDocDirection_BR::Incoming)
                {
                    this.FiscalDocumentType = 0;
                    this.Model = '';
                    this.Series = '';
                }
                this.AccountNum = '';
                this.LogisticsAddressName = '';
                this.LogisticsPostalAddress = 0;
                break;

            case fieldNum(TaxFiscalDocument_BR, AccountNum):
                if (this.AccountType == CustVendType_BR::Customer)
                {
                    custVendTable = CustTable::find(this.AccountNum);
                }
                else
                {
                    custVendTable = VendTable::find(this.AccountNum);
                }
                this.LogisticsPostalAddress = DirParty::primaryPostalAddress(custVendTable.Party).RecId;
                this.LogisticsAddressName = custVendTable.name();
                this.DefaultDimension = this.copyDimension(custVendTable.DefaultDimension);
                this.updateFiscalDocumentText(FiscalDocumentTextType_BR::CustVend);
                break;

            case fieldNum(TaxFiscalDocument_BR, AccountType):
                this.AccountNum = '';
                this.LogisticsAddressName = '';
                this.LogisticsPostalAddress = 0;
                this.InvoiceNumber = '';
                this.Model = '';
                this.Series = '';
                this.Specie = 0;
                this.FiscalDocumentType = 0;
                if (this.AccountType == CustVendType_BR::Customer)
                {
                    this.Direction = FiscalDocDirection_BR::Outgoing;
                }
                else
                {
                    this.Direction = FiscalDocDirection_BR::Incoming;
                }
                break;

            case fieldNum(TaxFiscalDocument_BR, Direction):
                if (this.TaxFiscalDocumentType == TaxFiscalDocumentType_BR::ICMSTaxTransfer)
                {
                    if (this.Direction == FiscalDocDirection_BR::Incoming)
                    {
                        this.FiscalDocumentType = 0;
                        this.AccountType = CustVendType_BR::Vendor;
                    }
                    else
                    {
                        this.AccountType = CustVendType_BR::Customer;
                    }
                }
                else
                {
                    this.AccountType = 0;
                }
                this.AccountNum = '';
                this.LogisticsAddressName = '';
                this.LogisticsPostalAddress = 0;
                break;

            case fieldNum(TaxFiscalDocument_BR, FiscalDocumentType):
                fiscalDocumentType = FiscalDocumentType_BR::findRecId(this.FiscalDocumentType);

                this.Series     = FiscalDocumentType_BR::getFiscalDocumentSeries(fiscalDocumentType.RecId);
                this.Model      = fiscalDocumentType.FiscalDocumentModel;
                this.Specie     = fiscalDocumentType.FiscalDocumentSpecie;

                if (fiscalDocumentType.InvoiceIssueDate &&
                    BrazilParameters::find().ChronologicalInvoiceNumbering)
                {
                    this.InvoiceDate = fiscalDocumentType.InvoiceIssueDate;
                }
                break;

            case fieldNum(TaxFiscalDocument_BR, AccessKey):
                this.AccessKey = strKeep(this.AccessKey, '0123456789');
                this.InvoiceNumber = EFDocAccessKeyBase_BR::getInvoiceNumber(this.AccessKey);
                this.Series = EFDocAccessKeyBase_BR::getInvoiceSeries(this.AccessKey);
                break;

            case fieldNum(TaxFiscalDocument_BR, Model):
                this.InvoiceNumber = "";
                this.Series = "";
                this.AccessKey = "";
                break;
        }

        super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFiscalDocumentText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the Fiscal document texts of a specific type on the tax fiscal document header.
    /// </summary>
    /// <param name="_type">
    /// A <c>FiscalDocumentTextType_BR</c> value indicating the type.
    /// </param>
    /// <remarks>
    /// This method does nothing if the tax fiscal document header has not been inserted yet.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateFiscalDocumentText(FiscalDocumentTextType_BR _type)
    {
        if (this.canFiscalDocTextBeRegistrated())
        {
            FiscalDocumentTextUpdate_BR::newFromRecord(this).updateTexts(_type);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the given field is valid or not
    /// </summary>
    /// <param name="_fieldIdToCheck">
    /// The field ID of the field to validate
    /// </param>
    /// <returns>
    /// True if the field is valid, otherwise false
    /// </returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(TaxFiscalDocument_BR, AccessKey):
                if (FiscalDocModel_BR::find(this.Model).IsForNFeFederal)
                {
                    if (!EFDocAccessKeyBase_BR::validate(this.AccessKey))
                    {
                        ret = checkFailed("@SYS4110579");
                    }
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = true;

        if (this.Direction == FiscalDocDirection_BR::Outgoing &&
            !this.FiscalDocumentType)
        {
            ret = checkFailed(strFmt("@SYS26332", fieldPName(TaxFiscalDocument_BR, FiscalDocumentType)));
        }

        // <GBR>
        if (FiscalDocModel_BR::find(this.Model).IsForNFeFederal
            && this.AccountType == CustVendType_BR::Vendor
            && !VendTable::find(this.AccountNum).NonTaxable_BR
            && !this.AccessKey)
        {
            ret = checkFailed("@SYS4110579");
        }
        // </GBR>

        ret = ret && super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record from its RecID>
    /// </summary>
    /// <param name="_recId">
    /// RecID of the desired record.
    /// </param>
    /// <param name="update">
    /// Whether the record will be updated or not.
    /// </param>
    /// <returns>
    /// The <c>TaxFiscalDocument_BR</c> record with the given RecID; empty record if none is found.
    /// </returns>
    public static TaxFiscalDocument_BR findRecId(RecId _recId, boolean update = false)
    {
        TaxFiscalDocument_BR fiscalDocument;

        fiscalDocument.selectForUpdate(update);

        select firstonly fiscalDocument
            where fiscalDocument.RecId == _recId;

        return fiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDocumentBeingIssued</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if this tax document is being issued by the fiscal establishment.
    /// </summary>
    /// <param name="taxFiscalDocument">
    /// The <c>TaxFiscalDocument_BR</c> record.
    /// </param>
    /// <returns>
    /// True if the tax fiscal document is being issued by the fiscal establishment, false otherwise.
    /// </returns>
    /// <remarks>
    /// The following are the rules allowed for the issuing of Tax fiscal documents:
    /// Concept                                                               Direct  Account   Type
    /// Issue tax credit transfer for other subsidiary                        Out     Customer  ICMS tax transfer
    /// Issue tax appropriation (1/48) installment for the own Legal Entity   In      Vendor    ICMS installments
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean isDocumentBeingIssued(TaxFiscalDocument_BR taxFiscalDocument)
    {
        return (taxFiscalDocument.TaxFiscalDocumentType == TaxFiscalDocumentType_BR::ICMSInstallment ||
                taxFiscalDocument.Direction == FiscalDocDirection_BR::Outgoing);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>BR</CountryRegionCodes>
	<DeveloperDocumentation>@GLS220225</DeveloperDocumentation>
	<Label>@GLS220173</Label>
	<SingularLabel>@GLS220173</SingularLabel>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>InvoiceDate</TitleField1>
	<TitleField2>AccountNum</TitleField2>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>FiscalBooksBrazil</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Direction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Accounts</Name>
			<Label>@SYS11800</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LogisticsAddressName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Address</Name>
			<Label>@SYS9362</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LogisticsAddressName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LogisticsPostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS40777</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Reversal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CancelReason</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Currency</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Document</Name>
			<Label>@SYS21873</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IncomingDocumentNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalDocumentType</Name>
			<Label>@GLS108</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Model</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Series</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Specie</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalEstablishment</Name>
			<Label>@GLS220103</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FiscalEstablishmentId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Direction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceInfo</Name>
			<Label>@SYS74019</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Direction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccessKey</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting</Name>
			<Label>@SYS5943</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS80127</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Type</Name>
			<Label>@SYS54213</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxFiscalDocumentType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccessKey</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>EFDocAccessKey_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustVendType_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CancelReason</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Direction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>FiscalDocDirection_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FiscalDocumentType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS108</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FiscalEstablishmentId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FiscalEstablishmentId_BR</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IncomingDocumentNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendInvoiceId</ExtendedDataType>
			<Label>@SYS21873</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InvoiceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LogisticsAddressName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsInvoiceName</ExtendedDataType>
			<GroupPrompt>@SYS7399</GroupPrompt>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LogisticsPostalAddress</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Model</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FiscalDocumentModel_BR</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Reversal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS8776</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Series</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceSeries_BR</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Specie</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>FiscalDocumentSpecie_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxFiscalDocumentStatus_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxFiscalDocToCancelRecID</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxFiscalDocumentType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>TaxFiscalDocumentType_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LogisticsPostalAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LogisticsPostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimensionAttributeValueSetIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ReasonTableRefIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CancelReason</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CustVendAccountMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Account</MapField>
					<MapFieldTo>AccountNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Num</MapField>
					<MapFieldTo>InvoiceNumber</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CustCurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>CustVendType_BR::Customer</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>FiscalDocModel_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FiscalDocModel_BR</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Model</Name>
					<Field>Model</Field>
					<RelatedField>Model</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FiscalDocumentType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FiscalDocumentType_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalDocumentType</Name>
					<Field>FiscalDocumentType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FiscalEstablishment</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FiscalEstablishment_BR</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalEstablishmentId</Name>
					<Field>FiscalEstablishmentId</Field>
					<RelatedField>FiscalEstablishmentId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>FiscalEstablishmentIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsPostalAddress</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LogisticsPostalAddress</Name>
					<Field>LogisticsPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReasonCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReasonTableRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CancelReason</Name>
					<Field>CancelReason</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxFiscalDocument</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TaxFiscalDocument_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxFiscalDocToCancelRecID</Name>
					<Field>TaxFiscalDocToCancelRecID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>CustVendType_BR::Vendor</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>