<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AlcoholLicenseTable_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AlcoholLicenseTable_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs some logic while inserting the record in the table.
    /// </summary>
    public void insert()
    {
        ttsbegin;

        this.setLicenseSeriesNum();

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs some login on the modification of the fields in the <c>AlcoholLicenseTable_RU</c> table.
    /// </summary>
    /// <param name="_fieldId">
    ///    The ID of the field which has been modified.
    /// </param>
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(AlcoholLicenseTable_RU, LicenseNum):
            case fieldNum(AlcoholLicenseTable_RU, LicenseSeries):
                this.setLicenseSeriesNum();
            break;

            default:
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLicenseSeriesNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the field <c>LicenseSeriesNum</c> with concatenated license series and license num.
    /// </summary>
    void setLicenseSeriesNum()
    {
        this.LicenseSeriesNum = this.LicenseSeries + ' ' + this.LicenseNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs some logic while updating the record in the table.
    /// </summary>
    public void update()
    {
        ttsbegin;

        this.setLicenseSeriesNum();

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the record can be deleted.
    /// </summary>
    /// <returns>
    ///    true if the record can be deleted; false otherwise.
    /// </returns>
    public boolean validateDelete()
    {
        boolean                     ret;
        AlcoholLicenseRelTable_RU   relTable;

        ret = super();

        if (ret)
        {
            select firstonly relTable
                where relTable.LicenseSeriesNum == this.LicenseSeriesNum;

            if (relTable)
            {
                ret = checkFailed(strfmt("@SYS4002793", relTable.recordDesc()));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the record can be saved.
    /// </summary>
    /// <returns>
    ///    true if the record can be saved; false otherwise.
    /// </returns>
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret && this.ToDate  && this.FromDate && (this.ToDate < this.FromDate))
            ret = checkFailed("@SYS22806") && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAlcoholLicenseSeriesNumInInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates if all the lines with alcohol production in the <c>SalesParmLine</c>
    ///    or <c>VendInvoiceInfoLine</c> table have correctly chosen alcohol license.
    /// </summary>
    /// <param name="_custVendTable">
    ///    Customer or vendor table to determine whether customer or vendor invoice is being posted.
    /// </param>
    /// <param name="_parmId">
    ///    Parameter id to analyze in the <c>SalesParmLine</c> or <c>VendInvoiceInfoLine</c> table.
    /// </param>
    /// <returns>
    ///    true if all the lines with alcohol production have correctly chosen alcohol license; otherwise, false.
    /// </returns>
    public static boolean checkAlcoholLicenseSeriesNumInInvoice(CustVendTable _custVendTable, ParmId _parmId)
    {
        SalesParmTable              salesParmTable;
        SalesParmLine               salesParmLine;
        VendInvoiceInfoLine         vendInvoiceInfoLine;
        boolean                     foreignResident;
        container                   con;
        InventTable                 inventTable;
        AlcoholProductionType_RU    alcoholProductionType;
        AlcoholActivityType_RU      profileAlcoholActivityType;
        CompanyInfo                 companyInfo = CompanyInfo::find();
        DocumentDate                documentDate;
        InventDim                   inventDim;
        Branches_RU                 branch;
        AlcoholLicenseSeriesNum_RU  licenseSeriesNum;
        CustTable                   custTable;
        VendTable                   vendTable;
        boolean                     ok = true;

        void checkLine(CustVendTable _custVendTableCheck)
        {
            profileAlcoholActivityType  = inventDim.inventProfile_RU().AlcoholActivityType;
            branch                      = Branches_RU::findByVendAccount(inventDim.inventLocation().VendAccount);

            // check our licenses
            if (! AlcoholLicenseTable_RU::findByTypeDateOwner(profileAlcoholActivityType,
                                                              inventTable.AlcoholProductionTypeId_RU,
                                                              documentDate,
                                                              branch.vendTable().Party) &&

                ! AlcoholLicenseTable_RU::findByTypeDateOwner(profileAlcoholActivityType,
                                                              inventTable.AlcoholProductionTypeId_RU,
                                                              documentDate,
                                                              companyInfo.RecId))
            {
                ok = checkFailed(strFmt("@SYS4003385",
                                        inventTable.ItemId,
                                        profileAlcoholActivityType,
                                        inventTable.AlcoholProductionTypeId_RU,
                                        documentDate));
            }

            // check counteragent license
            if (licenseSeriesNum)
            {
                if (! AlcoholLicenseTable_RU::findByTypeDateOwner(profileAlcoholActivityType,
                                                                  inventTable.AlcoholProductionTypeId_RU,
                                                                  documentDate,
                                                                  _custVendTableCheck.Party,
                                                                  _custVendTableCheck.TableId == tableNum(CustTable) ? CustVend_RU::Cust : CustVend_RU::Vend,
                                                                  licenseSeriesNum))
                {
                    ok = checkFailed(strfmt("@SYS4002844", inventTable.ItemId));
                }
            }
            else
            {
                if (foreignResident)
                {
                    con += inventTable.ItemId;
                }
                else if (   _custVendTableCheck.TableId == tableNum(VendTable)
                         || (   _custVendTableCheck.TableId == tableNum(CustTable)
                             && profileAlcoholActivityType != AlcoholActivityType_RU::Retail))
                {
                    ok = checkFailed(strfmt("@SYS4002845", inventTable.ItemId));
                }
            }

            if (foreignResident && con != connull())
            {
                if (Box::yesNo(strfmt("@SYS4002846", con2str(con)), DialogButton::Yes) != DialogButton::Yes)
                {
                    ok = checkFailed("@GLS101992");
                }
            }
        }

        if (_custVendTable.TableId == tableNum(CustTable))
        {
            while select salesParmLine
                where salesParmLine.ParmId == _parmId
            join ItemId, AlcoholProductionTypeId_RU from inventTable
                where inventTable.ItemId == salesParmLine.ItemId
                   && inventTable.AlcoholProductionTypeId_RU
            exists join alcoholProductionType
                where alcoholProductionType.TypeId == inventTable.AlcoholProductionTypeId_RU
                   && alcoholProductionType.IsBeer == NoYesCombo::No
            {
                inventDim           = salesParmLine.inventDim();
                salesParmTable      = salesParmLine.salesParmTable();
                documentDate        = salesParmTable.DocumentDate ? salesParmTable.DocumentDate : salesParmTable.Transdate;
                licenseSeriesNum    = salesParmLine.AlcoholLicenseSeriesNum_RU;
                custTable           = CustTable::find(salesParmTable.InvoiceAccount);
                foreignResident     = custTable.ForeignResident_RU;

                checkLine(custTable);
            }
        }
        else if (_custVendTable.TableId == tableNum(VendTable))
        {
            while select vendInvoiceInfoLine
                where vendInvoiceInfoLine.ParmId == _parmId
            join ItemId, AlcoholProductionTypeId_RU from inventTable
                where inventTable.ItemId == vendInvoiceInfoLine.ItemId
                   && inventTable.AlcoholProductionTypeId_RU
            exists join alcoholProductionType
                where alcoholProductionType.TypeId == inventTable.AlcoholProductionTypeId_RU
                   && alcoholProductionType.IsBeer == NoYesCombo::No
            {
                inventDim           = vendInvoiceInfoLine.inventDim();
                documentDate        = vendInvoiceInfoLine.vendInvoiceInfoTable().DocumentDate();
                licenseSeriesNum    = vendInvoiceInfoLine.vendInvoiceInfoLine_W().AlcoholLicenseSeriesNum_RU;
                vendTable           = vendInvoiceInfoLine.vendInvoiceInfoTable().vendTable_InvoiceAccount();
                foreignResident     = vendTable.ForeignResident_RU;

                checkLine(vendTable);
            }
        }
        else
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record in the <c>AlcoholLicenseTable_RU</c> table.
    /// </summary>
    /// <param name="_licenseSeriesNum">
    ///    The concatenated value of license series and num.
    /// </param>
    /// <param name="_forUpdate">
    ///    Indicates whether to select the record for update or not.
    /// </param>
    /// <returns>
    ///    The record found in the <c>AlcoholLicenseTable_RU</c> table.
    /// </returns>
    static AlcoholLicenseTable_RU find(AlcoholLicenseSeriesNum_RU   _licenseSeriesNum,
                                       boolean                      _forUpdate = false)
    {
        AlcoholLicenseTable_RU  alcoholLicenseTable;

        if (_licenseSeriesNum)
        {
            if (_forUpdate)
                alcoholLicenseTable.selectForUpdate(_forUpdate);

            select firstonly alcoholLicenseTable
                index hint LicenseSeriesNumIdx
                where alcoholLicenseTable.LicenseSeriesNum == _licenseSeriesNum;
        }
        return alcoholLicenseTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTypeDateOwner</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the first record in the <c>AlcoholLicenseTable_RU</c> table by the number of parameters.
    /// </summary>
    /// <param name="_profileAlcoholActivityType">
    ///    The type of the alcohol activity of the inventory profile which is used to search the license (wholesale or retail).
    /// </param>
    /// <param name="_productionTypeId">
    ///    The type of the alcohol production.
    /// </param>
    /// <param name="_transDate">
    ///    The date on which the license is valid.
    /// </param>
    /// <param name="_party">
    ///    RecId of the party to which the license is bound.
    /// </param>
    /// <param name="_custVend">
    ///    Optional parameter showing if the license is being found for customer or vendor.
    ///    It is used for searching the corresponding license activity type.
    /// </param>
    /// <param name="_licenseSeriesNum">
    ///    Optional parameter if there is certain license should be found.
    /// </param>
    /// <returns>
    ///    The record found in the <c>AlcoholLicenseTable_RU</c> table.
    /// </returns>
    static AlcoholLicenseTable_RU findByTypeDateOwner(AlcoholActivityType_RU        _profileAlcoholActivityType,
                                                      AlcoholProductionTypeId_RU    _productionTypeId,
                                                      TransDate                     _transDate,
                                                      DirPartyRecId                 _party,
                                                      CustVend_RU                   _custVend = CustVend_RU::None,
                                                      AlcoholLicenseSeriesNum_RU    _licenseSeriesNum = '')
    {
        AlcoholLicenseTable_RU      alcoholLicenseTable;
        AlcoholLicenseLine_RU       alcoholLicenseLine;
        AlcoholLicenseRelTable_RU   alcoholLicenseRelTable;
        AlcoholActivityType_RU      licenseAlcoholActivityType;

        licenseAlcoholActivityType = AlcoholLicenseTable_RU::getLicenceActTypeByProfileActType(_profileAlcoholActivityType, _custVend);

        if (_productionTypeId && _transDate && _party)
        {
            select firstonly alcoholLicenseTable
                order by FromDate, LicenseSeriesNum asc
                where (   alcoholLicenseTable.ActivityType == licenseAlcoholActivityType
                       || licenseAlcoholActivityType       == AlcoholActivityType_RU::None)
                   &&  alcoholLicenseTable.FromDate     <= _transDate
                   &&  alcoholLicenseTable.ToDate       >= _transDate
                   && (   !_licenseSeriesNum
                       || alcoholLicenseTable.LicenseSeriesNum == _licenseSeriesNum)
            exists join alcoholLicenseLine
                where alcoholLicenseLine.LicenseSeriesNum == alcoholLicenseTable.LicenseSeriesNum
                   && alcoholLicenseLine.ProductionTypeId == _productionTypeId
            exists join alcoholLicenseRelTable
                where alcoholLicenseRelTable.LicenseSeriesNum   == alcoholLicenseTable.LicenseSeriesNum
                   && alcoholLicenseRelTable.Party              == _party;
        }

        return alcoholLicenseTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record in the <c>AlcoholLicenseTable_RU</c> table by its record ID.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID.
    /// </param>
    /// <param name="_forUpdate">
    ///    Indicates whether to select the record for update or not.
    /// </param>
    /// <returns>
    ///    The record found in the <c>AlcoholLicenseTable_RU</c> table.
    /// </returns>
    static AlcoholLicenseTable_RU findRecId(recId    _recId,
                                            boolean  _forUpdate = false)
    {
        AlcoholLicenseTable_RU alcoholLicenseTable_RU;

        if (_recId)
        {
            alcoholLicenseTable_RU.selectForUpdate(_forUpdate);

            select firstonly alcoholLicenseTable_RU
                where alcoholLicenseTable_RU.RecId == _recId;
        }
        return alcoholLicenseTable_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLicenceActTypeByProfileActType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the correspondence between the profile activity type on which the goods are purchased or from which the goods are sold
    ///    and the license activity type which the customer or vendor should have.
    /// </summary>
    /// <param name="_profileAlcoholActivityType">
    ///    Alcohol activity type of the inventory profile.
    /// </param>
    /// <param name="_custVend">
    ///    The parameter showing if the correspondence is being found for customer or vendor.
    /// </param>
    /// <returns>
    ///    The corresponding alcohol activity type of the license.
    /// </returns>
    static public AlcoholActivityType_RU getLicenceActTypeByProfileActType(AlcoholActivityType_RU _profileAlcoholActivityType,
                                                                           CustVend_RU            _custVend)
    {
        AlcoholActivityType_RU      licenseAlcoholActivityType = _profileAlcoholActivityType;

        if (   _custVend == CustVend_RU::Cust
            || (    _custVend == CustVend_RU::Vend
                && _profileAlcoholActivityType == AlcoholActivityType_RU::Retail))
        {
            licenseAlcoholActivityType = AlcoholActivityType_RU::None;
        }

        return licenseAlcoholActivityType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs lookup to use it on the forms.
    /// </summary>
    /// <param name="_ctrl">
    ///    <c>FormStringControl</c> object where to perform the lookup.
    /// </param>
    /// <param name="_profileAlcoholActivityType">
    ///    The alcohol activity type to use while searching.
    /// </param>
    /// <param name="_transDate">
    ///    The date on which the license is valid.
    /// </param>
    /// <param name="_productionTypeId">
    ///    The ID of the production type, for which the licenses should be filtered.
    /// </param>
    /// <param name="_party">
    ///    RecId of the party to which the license is bound.
    /// </param>
    /// <param name="_custVend">
    ///    Optional parameter showing if the license is being found for customer or vendor.
    ///    It is used for searching the corresponding license activity type.
    /// </param>
    static public void lookup(FormStringControl             _ctrl,
                              AlcoholActivityType_RU        _profileAlcoholActivityType,
                              TransDate                     _transDate,
                              AlcoholProductionTypeId_RU    _productionTypeId,
                              DirPartyRecId                 _party,
                              CustVend_RU                   _custVend = CustVend_RU::None)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tablenum(AlcoholLicenseTable_RU), _ctrl, true);
        Query                   query          = new Query();
        QueryBuildDataSource    qbdsTable, qbdsLine, qbdsRel;
        AlcoholActivityType_RU  licenseAlcoholActivityType;

        licenseAlcoholActivityType = AlcoholLicenseTable_RU::getLicenceActTypeByProfileActType(_profileAlcoholActivityType, _custVend);

        qbdsTable = query.addDataSource(tablenum(AlcoholLicenseTable_RU));
        qbdsLine  = qbdsTable.addDataSource(tablenum(AlcoholLicenseLine_RU));
        qbdsLine.fetchMode(QueryFetchMode::One2One);
        qbdsLine.joinMode(JoinMode::ExistsJoin);
        qbdsLine.relations(true);

        qbdsRel = qbdsTable.addDataSource(tablenum(AlcoholLicenseRelTable_RU));
        qbdsRel.fetchMode(QueryFetchMode::One2One);
        qbdsRel.joinMode(JoinMode::ExistsJoin);
        qbdsRel.relations(true);

        sysTableLookup.addLookupfield(fieldnum(AlcoholLicenseTable_RU, LicenseSeriesNum), true);
        sysTableLookup.addLookupfield(fieldnum(AlcoholLicenseTable_RU, FromDate));
        sysTableLookup.addLookupfield(fieldnum(AlcoholLicenseTable_RU, ToDate));
        sysTableLookup.addLookupfield(fieldnum(AlcoholLicenseTable_RU, IssuedBy));
        sysTableLookup.addLookupfield(fieldnum(AlcoholLicenseTable_RU, ActivityType));

        if (licenseAlcoholActivityType != AlcoholActivityType_RU::None)
        {
            findOrCreateRange_W(qbdsTable, fieldnum(AlcoholLicenseTable_RU,    ActivityType),       queryValue(licenseAlcoholActivityType));
        }

        findOrCreateRange_W(qbdsTable, fieldnum(AlcoholLicenseTable_RU,    FromDate),               queryRange(dateNull(), _transDate));
        findOrCreateRange_W(qbdsTable, fieldnum(AlcoholLicenseTable_RU,    ToDate),                 queryRange(_transDate, dateNull()));
        findOrCreateRange_W(qbdsLine,  fieldnum(AlcoholLicenseLine_RU,     ProductionTypeId),       queryValue(_productionTypeId));
        findOrCreateRange_W(qbdsRel,   fieldnum(AlcoholLicenseRelTable_RU, Party),                  queryValue(_party));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@SYS4002953</DeveloperDocumentation>
	<FormRef>AlcoholLicenseTable_RU</FormRef>
	<Label>@SYS4002952</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>LicenseSeriesNum</TitleField1>
	<TitleField2>IssuedBy</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>LicenseSeriesNumIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>EGAIS</Modules>
	<PrimaryIndex>LicenseSeriesNumIdx</PrimaryIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>AlcoholLicenseLine_RU</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>AlcoholLicenseLine_RU</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LicenseSeries</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicenseNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IssuedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityKindId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LicenseSeriesNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IssuedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LicenseSeriesNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS34991</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LicenseSeries</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicenseNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IssuedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityKindId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityKindId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AlcoholActivityKindId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ActivityType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>AlcoholActivityType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FromDate</ExtendedDataType>
			<Label>@GLS104801</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IssuedBy</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AlcoholLicenseIssuedBy_RU</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LicenseNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AlcoholLicenseNum_RU</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LicenseSeries</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AlcoholLicenseSeries_RU</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LicenseSeriesNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AlcoholLicenseSeriesNum_RU</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToDate</ExtendedDataType>
			<Label>@GLS112958</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LicenseSeriesNumIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LicenseSeriesNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>AlcoholActivityKind_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AlcoholActivityKind_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityKindId</Name>
					<SourceEDT>AlcoholActivityKindId_RU</SourceEDT>
					<Field>ActivityKindId</Field>
					<RelatedField>KindId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>