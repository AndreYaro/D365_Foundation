<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EGAISWaybillLine_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EGAISWaybillLine_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>alcoholProduction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a record in the <c>EGAISAlcoholProduction_RU</c> table
    ///    corresponding to the production in the current EGAIS waybill line.
    /// </summary>
    /// <returns>
    ///    A record in the <c>EGAISAlcoholProduction_RU</c> table
    ///    corresponding to the production in the current EGAIS waybill line.
    /// </returns>
    public EGAISAlcoholProduction_RU alcoholProduction()
    {
        return EGAISAlcoholProduction_RU::findRecId(this.AlcoholProduction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>informA</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a record in the <c>EGAISInformA_RU</c> table
    ///    corresponding to the inform A of the current EGAIS waybill line.
    /// </summary>
    /// <returns>
    ///    A record in the <c>EGAISInformA_RU</c> table
    ///    corresponding to the inform A of the current EGAIS waybill line.
    /// </returns>
    public EGAISInformA_RU informA()
    {
        return EGAISInformA_RU::findRecId(this.informB().informA);
    }

]]></Source>
			</Method>
			<Method>
				<Name>informARegId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns registration ID of the Inform A of the current EGAIS waybill line.
    /// </summary>
    /// <returns>
    ///    Registration ID of the Inform A of the current EGAIS waybill line.
    /// </returns>
    public display EGAISInformARegId_RU informARegId()
    {
        return this.informA().RegId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>informB</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a record in the <c>EGAISInformB_RU</c> table
    ///    corresponding to the inform B in the current EGAIS waybill line.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the returned record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EGAISInformB_RU</c> table
    ///    corresponding to the inform B in the current EGAIS waybill line.
    /// </returns>
    public EGAISInformB_RU informB(boolean _forUpdate = false)
    {
        return EGAISInformB_RU::findRecId(this.InformB, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns AX item number of the EGAIS alcohol production stored in the current EGAIS waybill line.
    /// </summary>
    /// <returns>
    ///    AX item number of the EGAIS alcohol production stored in the current EGAIS waybill line.
    /// </returns>
    public ItemId itemId()
    {
        return EGAISAlcoholProduction_RU::findRecId(this.AlcoholProduction).ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unsettledQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the quantity of the alcohol production in the current EGAIS waybill line
    ///    which has not yet been settled with the purchase order lines.
    /// </summary>
    /// <returns>
    ///    The quantity of the alcohol production in the current EGAIS waybill line
    ///    which has not yet been settled with the purchase order lines.
    /// </returns>
    public display EGAISUnsettledQty_RU unsettledQty()
    {
        EGAISWaybillSettlement_RU   settlement;

        if (this.waybillJour().Direction == EGAISDocumentDirection_RU::Outgoing)
        {
            return 0;
        }

        select sum(Qty) from settlement
            where settlement.WaybillLine == this.RecId;

        return this.Qty - settlement.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>waybillJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>EGAISWaybillJour_RU</c> record to which the current <c>EGAISWaybillLine_RU</c> record relates.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the returned record for update; optional.
    /// </param>
    /// <returns>
    ///    The <c>EGAISWaybillJour_RU</c> record to which the current <c>EGAISWaybillLine_RU</c> record relates.
    /// </returns>
    public EGAISWaybillJour_RU waybillJour(boolean _forUpdate = false)
    {
        return EGAISWaybillJour_RU::findRecId(this.WaybillJour, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    static boolean checkExist(RefRecId          _headerRecId,
                          EGAISIdentity_RU  _identity,
                          boolean           _throwError = false)
    {
        boolean ret = true;
        str     errorMsg;

        if (!EGAISWaybillLine_RU::exist(_headerRecId, _identity))
        {
            errorMsg = strFmt(EGAISWaybillLine_RU::txtNotExist(), _headerRecId, _identity);

            if (_throwError)
            {
                throw error(errorMsg);
            }

            ret = checkFailed(errorMsg);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(RefRecId          _waybillJour,
                            EGAISIdentity_RU  _identity)
    {
        return (select firstonly RecId from EGAISWaybillLine_RU
                index hint JourIdentityIdx
                where EGAISWaybillLine_RU.WaybillJour   == _waybillJour
                    && EGAISWaybillLine_RU.Identity     == _identity).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByIdentity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a record in the <c>EGAISWaybillLine_RU</c> table for the specified identity.
    /// </summary>
    /// <param name="_waybillJour">
    ///    RecId of the EGAIS waybill header where to find a line.
    /// </param>
    /// <param name="_identity">
    ///    Specified line identity.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EGAISWaybillLine_RU</c> table.
    /// </returns>
    static EGAISWaybillLine_RU findByIdentity(RefRecId          _waybillJour,
                                          EGAISIdentity_RU  _identity,
                                          boolean           _forUpdate = false)
    {
        EGAISWaybillLine_RU  waybillLine;

        if (_waybillJour && _identity)
        {
            if (_forUpdate)
            {
                waybillLine.selectForUpdate(_forUpdate);
            }

            select firstonly waybillLine
            index hint JourIdentityIdx
            where waybillLine.WaybillJour == _waybillJour
               && waybillLine.Identity    == _identity;
        }

        return waybillLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a record in the <c>EGAISWaybillLine_RU</c> table for the specified purchase order line.
    /// </summary>
    /// <param name="_purchLine">
    ///    The specified purchase order line.
    /// </param>
    /// <returns>
    ///    A record in the <c>EGAISWaybillLine_RU</c> table.
    /// </returns>
    public static EGAISWaybillLine_RU findByPurchLine(PurchLine _purchLine)
    {
        EGAISWaybillJour_RU         waybillJour;
        EGAISWaybillLine_RU         waybillLine;
        EGAISWaybillSettlement_RU   settlement;

        select firstOnly waybillLine
    exists join settlement
        where settlement.InventTransId  == _purchLine.InventTransId
           && settlement.WaybillLine    == waybillLine.RecId
           && settlement.InventTrans    == 0
    exists join waybillJour
        where waybillJour.RecId         == waybillLine.WaybillJour
            && waybillJour.Direction    == EGAISDocumentDirection_RU::Incoming
            && (   waybillJour.StatusReceipt == EGAISWaybillStatusReceipt_RU::Registered
                || waybillJour.StatusReceipt == EGAISWaybillStatusReceipt_RU::ProductReceiptPosted);

        return waybillLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static EGAISWaybillLine_RU findRecId(RecId    _recId,
                                     boolean  _forUpdate = false)
    {
        EGAISWaybillLine_RU     waybillLine;

        if (_recId)
        {
            waybillLine.selectForUpdate(_forUpdate);

            select firstonly waybillLine
            where waybillLine.RecId == _recId;
        }

        return waybillLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@EGAIS:EgaisBolLineWithHeaderRecidIdentityDoesNotExist";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@EGAIS:TheEgaiswaybillline_ruTableContainsInformationAbou</DeveloperDocumentation>
	<Label>@EGAIS:EgaisBillOfLadingJournalLines</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>Identity</TitleField1>
	<TitleField2>AlcoholProduction</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>EGAIS</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Identity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AlcoholProduction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InformB</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RealQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS34991</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Identity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AlcoholProduction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RealQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>unsettledQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Party</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>informARegId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AlcoholProduction</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@EGAIS:AlcoholProduct</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Identity</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>EGAISIdentity_RU</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InformB</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@EGAIS:CertificateB</Label>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PackId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>String50</ExtendedDataType>
			<HelpText>@EGAIS:PackageIdentifier</HelpText>
			<Label>@EGAIS:PackageId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Party</Name>
			<ExtendedDataType>String50</ExtendedDataType>
			<HelpText>@EGAIS:ExternalBatchNumber</HelpText>
			<Label>@EGAIS:ExternalBatch</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Price</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>Price</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>Qty</ExtendedDataType>
			<HelpText>@EGAIS:QuantityThatWasSentToTheCounteragent</HelpText>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RealQty</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>Qty</ExtendedDataType>
			<HelpText>@EGAIS:QuantityThatWasActuallyReceivedByCounteragent</HelpText>
			<Label>@SYS76943</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WaybillJour</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>JourIdentityIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>WaybillJour</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Identity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InformBIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>InformB</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EGAISAlcoholProduction_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>EGAISAlcoholProduction_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AlcoholProduction</Name>
					<Field>AlcoholProduction</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EGAISInformB_RU</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>EGAISInformB_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InformB</Name>
					<Field>InformB</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EGAISWaybillJour_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>EGAISWaybillJour_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WaybillJour</Name>
					<Field>WaybillJour</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>