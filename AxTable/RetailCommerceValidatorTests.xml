<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCommerceValidatorTests</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailCommerceValidatorTests extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialises the buffer.
    /// </summary>
    public void initValue()
    {
        NumberSeq numSeq;

        super();

        if (!this.TestId)
        {
            numSeq = NumberSeq::newGetNum(RetailParameters::numRefRetailCommerceValidatorTestId());
            this.TestId = numSeq.num();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSetupTests</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the Setup test cases.
    /// </summary>
    /// <param name = "_validationId">The validation id.</param>
    public static void createSetupTests(RetailCommerceValidatorId _validationId)
    {
        RetailCommerceValidatorTests::createSetupTestsWithAutomatedRun(_validationId, NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSetupTestsWithAutomatedRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the Setup test cases.
    /// </summary>
    /// <param name = "_validationId">The validation id.</param>
    /// <param name = "_isAutomatedRun">The boolean value indicating whether this is automated run.</param>
    public static void createSetupTestsWithAutomatedRun(RetailCommerceValidatorId _validationId, NoYes _isAutomatedRun = NoYes::No)
    {
        System.Exception exception;
        RetailCommerceValidatorEntityTypes retailCommerceValidatorEntityTypes;
        RetailCommerceValidatorRules retailCommerceValidatorRules;
        RetailCommerceValidatorTests retailCommerceValidatorTests;
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();

        try
        {
            // Search for all Setup rules 
            ttsbegin;
            while select retailCommerceValidatorRules 
                order by retailCommerceValidatorRules.SetupPriority
                    where !_isAutomatedRun || retailCommerceValidatorRules.AutomatedRunApplicable
                join retailCommerceValidatorEntityTypes
                where retailCommerceValidatorEntityTypes.EntityTypeId == retailCommerceValidatorRules.EntityTypeId
                   && retailCommerceValidatorEntityTypes.EntityFunction == RetailCommerceValidatorEntityFunction::Setup
            {
                // Verify if setup test already exists
                if (!RetailCommerceValidatorTests::findByRule(_validationId, retailCommerceValidatorRules.RuleId))
                {
                    RetailCommerceValidatorTests::insertValidatorTestRecord(_validationId,
                        retailCommerceValidatorRules,
                        retailCommerceValidatorEntityTypes,
                        0,
                        int64Max());

                    // Update counter
                    RetailCommerceValidatorCounters::incrementCounter("@Retail:RetailCommerceValidatorValidationTotalTestsMetricId", 1, 0, '', '', '', RetailCommerceValidatorLogType::Total, strFmt('Number of tests created'));
                }
            }
            ttscommit;
        
            // Update validation test total
            RetailCommerceValidator::updateValidationTotalTests(_validationId, RetailCommerceValidatorExecutionPhase::Setup);
        }
        catch (exception)
        {
            if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
            {
                RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorTests), 'createSetupTests'), xSession::currentRetryCount(), false, exception);
            }
            else
            {
                RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorTests), 'createSetupTests'), xSession::currentRetryCount(), true, exception);
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFunctionalTests</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the Functional test cases.
    /// </summary>
    /// <param name = "_validationId">The validation id.</param>
    public static void createFunctionalTests(RetailCommerceValidatorId _validationId)
    {
        RetailCommerceValidatorTests::createFunctionalTestsWithAutomatedRun(_validationId, NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFunctionalTestsWithAutomatedRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the Functional test cases.
    /// </summary>
    /// <param name = "_validationId">The validation id.</param>
    /// <param name = "_isAutomatedRun">The boolean value indicating whether this is automated run.</param>
    public static void createFunctionalTestsWithAutomatedRun(RetailCommerceValidatorId _validationId, NoYes _isAutomatedRun = NoYes::No)
    {
        System.Exception exception;
        RetailCommerceValidatorEntityTypes retailCommerceValidatorEntityTypes;
        RetailCommerceValidatorRules retailCommerceValidatorRules;
        RetailCommerceValidatorTests retailCommerceValidatorTests;
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();

        // Search for all Functional rules
        Map entityPartitionMap;
        retailCommerceValidatorEntityTypeId previousEntityTypeId = '';
        int64 testCounter = 0;

        /*
          This method is responsible for creating functional 'Tests', which are designed to execute actual rules. The validation of rules is carried out through batch jobs,
          and each 'Test' record is included in a batch task to execute the rule.

          For example,
            If there are a total of 1 million assorted products for a given channel, the value specified in 'RetailCommerceValidatorParameters.RecordsPerTest' determines
          the partitioning of products into smaller portions for rule execution. If 'RecordsPerTest' is set to 10,000, then a total of 100 functional 'Tests' are generated
          for each product rule. Each 'Test' is capable of validating 10,000 products, and these 'Tests' can be run in parallel via batch tasks.

          In some cases, very fiew rules in the system do not require partitioning and can be executed using a single 'test' and batch task.
          The 'EntityPartitionRequired' field indicates whether partitioning is necessary. If partitioning is not required, a single test is created to manage the rule.
        */

        try
        {
            ttsbegin;
            // Create functional tests for rules that need partitioning.
            while select retailCommerceValidatorRules
                order by retailCommerceValidatorRules.EntityTypeId
                    where retailCommerceValidatorRules.EntityPartitionRequired == NoYes::Yes
                        && (!_isAutomatedRun || retailCommerceValidatorRules.AutomatedRunApplicable)
                join retailCommerceValidatorEntityTypes
                    where retailCommerceValidatorEntityTypes.EntityTypeId == retailCommerceValidatorRules.EntityTypeId
                        && retailCommerceValidatorEntityTypes.EntityFunction == RetailCommerceValidatorEntityFunction::Functional
            {
                // Get new "Entity Partition Map" only when the rule entityTypeId changes (The loop is sorted by EntityTypeIds)
                if (retailCommerceValidatorRules.EntityTypeId != previousEntityTypeId)
                {
                    entityPartitionMap = RetailcommerceValidatorEntityTypes::GetEntityPartitionMap(_validationId, retailCommerceValidatorEntityTypes.EntityTypeId);
                }

                MapEnumerator  mapEnumerator = entityPartitionMap.getEnumerator();

                while (mapEnumerator.moveNext())
                {
                    RetailCommerceValidatorTests::insertValidatorTestRecord(_validationId,
                        retailCommerceValidatorRules,
                        retailCommerceValidatorEntityTypes,
                        conPeek(mapEnumerator.currentValue(), 1),
                        conPeek(mapEnumerator.currentValue(), 2));

                    // update loop
                    previousEntityTypeId = retailCommerceValidatorRules.EntityTypeId;
                    testCounter++;
                }
            }

            // Create functional tests for rules that don't need partitioning.
            while select retailCommerceValidatorRules
                order by retailCommerceValidatorRules.EntityTypeId
                    where retailCommerceValidatorRules.EntityPartitionRequired == NoYes::No
                        && (!_isAutomatedRun || retailCommerceValidatorRules.AutomatedRunApplicable)
                join retailCommerceValidatorEntityTypes
                    where retailCommerceValidatorEntityTypes.EntityTypeId == retailCommerceValidatorRules.EntityTypeId
                        && retailCommerceValidatorEntityTypes.EntityFunction == RetailCommerceValidatorEntityFunction::Functional
            {
                RetailCommerceValidatorTests::insertValidatorTestRecord(_validationId,
                    retailCommerceValidatorRules,
                    retailCommerceValidatorEntityTypes,
                    0,
                    int64Max());

                testCounter++;
            }
            ttscommit;

            // Update counter 'Number of tests created (*** INTERNAL ***)'
            RetailCommerceValidatorCounters::incrementCounter("@Retail:RetailCommerceValidatorValidationTotalTestsMetricId", testCounter, 0, '', '', '', RetailCommerceValidatorLogType::Total, strFmt('Number of tests created'));

            // Update validation test total
            RetailCommerceValidator::updateValidationTotalTests(_validationId, RetailCommerceValidatorExecutionPhase::Functional);
        }
        catch (exception)
        {
            if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
            {
                RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorTests), 'createFunctionalTests'), xSession::currentRetryCount(), false, exception);
            }
            else
            {
                RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorTests), 'createFunctionalTests'), xSession::currentRetryCount(), true, exception);
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find tests by rule.
    /// </summary>
    /// <param name = "_validationId">The validation id.</param>
    /// <param name = "_ruleId">The rule id.</param>
    /// <param name = "_forUpdate">Select for update (Y/N)? default false.</param>
    /// <returns>A record on the <c>RetailCommerceValidatorTests</c> table.</returns>
    public static RetailCommerceValidatorTests findByRule(RetailCommerceValidatorId _validationId, RetailCommerceValidatorRuleId _ruleId, boolean _forUpdate = false)
    {
        RetailCommerceValidatorTests retailCommerceValidatorTestsExists;
        RetailCommerceValidatorParameters parameters = retailCommerceValidatorParameters::find();
        System.Exception exception;

        if (_validationId && _ruleId)
        {
            try
            {
                if (_forUpdate && !parameters.UsePessimisticLocks)
                {
                    select forupdate retailCommerceValidatorTestsExists
                        where retailCommerceValidatorTestsExists.ValidationId == _validationId
                           && retailCommerceValidatorTestsExists.RuleId == _ruleId;
                }
                else if (_forUpdate && parameters.UsePessimisticLocks)
                {
                    select pessimisticlock retailCommerceValidatorTestsExists
                        where retailCommerceValidatorTestsExists.ValidationId == _validationId
                           && retailCommerceValidatorTestsExists.RuleId == _ruleId;
                }
                else
                {
                    select retailCommerceValidatorTestsExists
                        where retailCommerceValidatorTestsExists.ValidationId == _validationId
                           && retailCommerceValidatorTestsExists.RuleId == _ruleId;
                }
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, tableStr(RetailCommerceValidatorTests), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, tableStr(RetailCommerceValidatorTests), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }

        return retailCommerceValidatorTestsExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find tests by id.
    /// </summary>
    /// <param name = "_validationId">The validation id.</param>
    /// <param name = "_testId">The test id.</param>
    /// <param name = "_forUpdate">Select for update (Y/N)? default false.</param>
    /// <returns>A record on the <c>RetailCommerceValidatorTests</c> table.</returns>
    public static RetailCommerceValidatorTests findByTest(RetailCommerceValidatorId _validationId, RetailCommerceValidatorTestId _testId, boolean _forUpdate = false)
    {
        RetailCommerceValidatorTests retailCommerceValidatorTestsExists;
        RetailCommerceValidatorParameters parameters = retailCommerceValidatorParameters::find();
        System.Exception exception;

        if (_validationId && _testId)
        {
            try
            {
                if (_forUpdate && !parameters.UsePessimisticLocks)
                {
                    select forupdate retailCommerceValidatorTestsExists
                        where retailCommerceValidatorTestsExists.ValidationId == _validationId
                           && retailCommerceValidatorTestsExists.TestId == _testId;
                }
                else if (_forUpdate && parameters.UsePessimisticLocks)
                {
                    select pessimisticlock retailCommerceValidatorTestsExists
                        where retailCommerceValidatorTestsExists.ValidationId == _validationId
                           && retailCommerceValidatorTestsExists.TestId == _testId;
                }
                else
                {
                    select retailCommerceValidatorTestsExists
                        where retailCommerceValidatorTestsExists.ValidationId == _validationId
                           && retailCommerceValidatorTestsExists.TestId == _testId;
                }
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, tableStr(RetailCommerceValidatorTests), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, tableStr(RetailCommerceValidatorTests), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }

        return retailCommerceValidatorTestsExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTestInProgress</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Set test In progress.
    /// </summary>
    /// <param name = "_validationId">The validation id.</param>
    /// <param name = "_testId">The test id.</param>
    public static void setTestInProgress(RetailCommerceValidatorId _validationId, RetailCommerceValidatorTestId _testId)
    {
        ttsbegin;
        RetailCommerceValidatorTests retailCommerceValidatorTests = RetailCommerceValidatorTests::findByTest(_validationId, _testId, true);
        if (retailCommerceValidatorTests)
        {
            retailCommerceValidatorTests.ExecutionStatus = RetailCommerceValidatorExecutionStatus::InProgress;
            retailCommerceValidatorTests.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTestFinished</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set test finished.
    /// </summary>
    /// <param name = "_validationId">The validation id.</param>
    /// <param name = "_testId">The test id.</param>
    /// <param name = "_resultStatus">The result status.</param>
    /// <param name = "_logType">The log type.</param>
    /// <param name = "_qty">The quantity of issues/messages reported.</param>
    /// <param name = "_batchJobId">The batch job Id.</param>
    public static void setTestFinished(RetailCommerceValidatorId _validationId, RetailCommerceValidatorTestId _testId, RetailCommerceValidatorResultStatus _resultStatus, RetailCommerceValidatorLogType _logType, int64 _qty, RefRecId _batchJobId)
    {
        ttsbegin;
        RetailCommerceValidatorTests retailCommerceValidatorTests = RetailCommerceValidatorTests::findByTest(_validationId, _testId, true);
        if (retailCommerceValidatorTests)
        {
            retailCommerceValidatorTests.BatchTaskId = _batchJobId;
            retailCommerceValidatorTests.ExecutionStatus = RetailCommerceValidatorExecutionStatus::Finished;
            retailCommerceValidatorTests.ResultStatus = _resultStatus;

            switch (_logType)
            {
                case RetailCommerceValidatorLogType::Error:
                    retailCommerceValidatorTests.ErrorCount = _qty;
                    break;
                case RetailCommerceValidatorLogType::Warning:
                    retailCommerceValidatorTests.WarningCount = _qty;
                    break;
                case RetailCommerceValidatorLogType::Info:
                    retailCommerceValidatorTests.MessageCount = _qty;
                    break;
            }
            retailCommerceValidatorTests.TotalCount = _qty;

            retailCommerceValidatorTests.update();
        }
        ttscommit;

    }

]]></Source>
			</Method>
			<Method>
				<Name>insertValidatorTestRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in <c>RetailCommerceValidatorTests</c> table, which can be utilized when executing a rule.
    /// </summary>
    /// <param name = "_validationId">The validation id.</param>
    /// <param name = "_validatorRule">The rule id.</param>
    /// <param name = "_validatorEntityType">The entity type id.</param>
    /// <param name = "_rangeStartRecId">The start record id of an entity.</param>
    /// <param name = "_rangeEndRecId">The end record id of an entity.</param>
    private static void insertValidatorTestRecord(RetailCommerceValidatorId _validationId,
        RetailCommerceValidatorRules _validatorRule,
        RetailCommerceValidatorEntityTypes _validatorEntityType,
        RefRecId _rangeStartRecId,
        RefRecId _rangeEndRecId)
    {
        RetailCommerceValidatorTests retailCommerceValidatorTests;

        // Test Identification
        retailCommerceValidatorTests.TestId = NumberSeq::newGetNum(RetailParameters::numRefRetailCommerceValidatorTestId()).num();
        retailCommerceValidatorTests.ValidationId = _validationId;
        retailCommerceValidatorTests.RuleId = _validatorRule.RuleId;
        retailCommerceValidatorTests.TestDescription = _validatorRule.Description;
        retailCommerceValidatorTests.GenericTest = NoYes::No;

        // Test specification
        retailCommerceValidatorTests.EntityExecutionTestClass = _validatorEntityType.EntityExecutionTestClass;
        retailCommerceValidatorTests.RuleExecutionTestMethod = _validatorRule.RuleExecutionTestMethod;
        retailCommerceValidatorTests.RuleMitigationForm = _validatorRule.RuleMitigationForm;
        retailCommerceValidatorTests.EntityFunction = _validatorEntityType.EntityFunction;

        // Test range
        retailCommerceValidatorTests.RangeStartRecId = _rangeStartRecId;
        retailCommerceValidatorTests.RangeEndRecId = _rangeEndRecId;

        // Test status
        retailCommerceValidatorTests.ExecutionStatus = RetailCommerceValidatorExecutionStatus::NotStarted;
        retailCommerceValidatorTests.ResultStatus = RetailCommerceValidatorResultStatus::None;

        // Test task
        retailCommerceValidatorTests.BatchTaskId = 0;

        if (_validatorEntityType.EntityFunction == RetailCommerceValidatorEntityFunction::Functional)
        {
            // test execution priority sequence (0 for parallelization)
            retailCommerceValidatorTests.Sequence = 0;
        }
        else if (_validatorEntityType.EntityFunction == RetailCommerceValidatorEntityFunction::Setup)
        {
            // Setup tests run in a defined sequence, so get it from _validatorRule.SetupPriority
            retailCommerceValidatorTests.Sequence = _validatorRule.SetupPriority;
        }

        // Insert test
        retailCommerceValidatorTests.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@Retail:RetailCommerceValidatorTestsDevDocs</DeveloperDocumentation>
	<Label>@Retail:RetailCommerceValidatorTestsLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>TestId</TitleField1>
	<TitleField2>ExecutionStatus</TitleField2>
	<ClusteredIndex>TestIdIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<PrimaryIndex>TestIdIdx</PrimaryIndex>
	<ReplacementKey>TestIdIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ValidationId</Name>
			<ExtendedDataType>RetailCommerceValidatorId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TestId</Name>
			<ExtendedDataType>RetailCommerceValidatorTestId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RuleId</Name>
			<ExtendedDataType>RetailCommerceValidatorRuleId</ExtendedDataType>
			<Label>@Retail:RetailCommerceValidatorRuleIdLabel</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TestDescription</Name>
			<Label>@SYS106675</Label>
			<StringSize>100</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RangeStartRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@Retail:RetailCommerceValidatorRangeStartRecIdLabel</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RangeEndRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@Retail:RetailCommerceValidatorRangeEndRecIdLabel</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExecutionStatus</Name>
			<EnumType>RetailCommerceValidatorExecutionStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ResultStatus</Name>
			<Label>@Retail:RetailCommerceValidatorResultStatusLabel</Label>
			<EnumType>RetailCommerceValidatorResultStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LogType</Name>
			<EnumType>RetailCommerceValidatorLogType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ErrorCount</Name>
			<ExtendedDataType>RetailCommerceValidatorRulesTotalError</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MessageCount</Name>
			<ExtendedDataType>RetailCommerceValidatorRulesTotalInfo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WarningCount</Name>
			<ExtendedDataType>RetailCommerceValidatorRulesTotalWarning</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TotalCount</Name>
			<ExtendedDataType>RetailCommerceValidatorRulesTotal</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GenericTest</Name>
			<Label>@SYS4007923</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BatchTaskId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@Retail:RetailCommerceValidatorBatchTaskId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Sequence</Name>
			<ExtendedDataType>Integer</ExtendedDataType>
			<Label>@SYS109455</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RuleExecutionTestMethod</Name>
			<ExtendedDataType>RetailCommerceValidatorRuleExecutionTestMethod</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EntityExecutionTestClass</Name>
			<ExtendedDataType>RetailCommerceValidatorEntityExecutionTestClass</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RuleMitigationForm</Name>
			<ExtendedDataType>RetailCommerceValidatorRuleMitigationForm</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EntityFunction</Name>
			<EnumType>RetailCommerceValidatorEntityFunction</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TestIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ValidationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TestId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ValidatorIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ValidationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailCommerceValidator</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailCommerceValidator</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ValidationId</Name>
					<Field>ValidationId</Field>
					<RelatedField>ValidationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ValidationIdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>