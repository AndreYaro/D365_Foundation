<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailMCRChannelTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailMCRChannelTable extends RetailChannelTable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayFormMenuFunction</Name>
				<Source><![CDATA[
    public MenuFunction displayFormMenuFunction()
    {
        return new MenuFunction(menuitemDisplayStr(RetailMCRChannelListView), MenuItemType::Display);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        DataArea dataArea;

        super();

        this.mcrEnableDirectedSelling = NoYes::Yes;
        this.mcrEnableOrderCompletion = NoYes::Yes;
        this.mcrEnableOrderPriceControl = NoYes::Yes;

        // Set the channel time zone to the time zone of the company
        select firstonly TimeZone from dataArea where dataArea.Id == this.InventLocationDataAreaId;
        this.ChannelTimeZone = dataArea.TimeZone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailTitleFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets title fields of a record in the <c>OMOperatingUnit</c> table.
    /// </summary>
    /// <returns>
    /// The title fields for display.
    /// </returns>
    display TitleFields retailTitleFields()
    {
        OMOperatingUnit omOperatingUnit;

        if (this.RecId == 0)
        {
            return "@RET5915";
        }
        else
        {
            select Name, omOperatingUnitNumber from omOperatingUnit
                where omOperatingUnit.RecId == this.OmOperatingUnitID;
            return strFmt("@RET5916", omOperatingUnit.omOperatingUnitNumber, omOperatingUnit.Name);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findChannelBySalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a channel table record for the sales order.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> required to retrive the channel record.
    /// </param>
    /// <param name="_forUpdate">
    /// true if the record is selected for update; otherwise, false
    /// </param>
    /// <returns>
    /// The <c>RetailMCRChannelTable</c> record that is found.
    /// </returns>
    public static RetailMCRChannelTable findChannelBySalesTable(SalesTable _salesTable, boolean _forUpdate = false)
    {
        RetailMCRChannelTable   retailMCRChannelTable;
        RetailSalesTable        retailSalesTable;

        if (MCROrderParameters::isCallCenterEnabledAndInUse()
            && _salesTable)
        {
            retailMCRChannelTable.selectForUpdate(_forUpdate);

            if (RetailEnableB2b2bAndEnhanceB2bOrdersFeature::isEnabled())
            {
                // first try to find from origin channel.
                select firstonly retailMCRChannelTable
                exists join retailSalesTable
                    where retailSalesTable.SalesTable == _salesTable.RecId
                    && retailMCRChannelTable.RecId == retailSalesTable.OriginChannel;
            }

            // if record is not found from origin channel, then fall back to old strategy
            if(!retailMCRChannelTable.RecId)
            {
                select firstonly retailMCRChannelTable
                    exists join retailSalesTable
                where retailSalesTable.SalesTable == _salesTable.RecId
                && retailMCRChannelTable.RecId == retailSalesTable.RetailChannel;
            }
            
        }
        return retailMCRChannelTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findForCurrentUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>RetailMCRChannelTable</c> the current user is associated with.
    /// </summary>
    /// <param name="_forupdate">
    /// A <c>boolean</c> used to determine whether or not a record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// The <c>RetailMCRChannelTable</c> the current user is associated with.
    /// </returns>
    public static RetailMCRChannelTable findForCurrentUser(boolean _forupdate = false)
    {
        MCRChannelUser              mcrChannelUser;
        RetailMCRChannelTable       retailMCRChannelTable;

        if (_forupdate)
        {
            retailMCRChannelTable.selectForUpdate(_forupdate);
        }

        select firstonly retailMCRChannelTable
            exists join mcrChannelUser
            where mcrChannelUser.Channel == retailMCRChannelTable.RecId
                && mcrChannelUser.User == curUserId();

        return retailMCRChannelTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record that has a specified <c>RecId</c> value.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RedId</c> value of the store.
    /// </param>
    /// <param name="_forUpdate">
    /// true if the record is selected for update; otherwise, false
    /// </param>
    /// <returns>
    /// The record that is found.
    /// </returns>
    public static RetailMCRChannelTable findRecId(RecId _recId, boolean _forUpdate = false)
    {
        RetailMCRChannelTable   retailMCRChannelTable;

        if (_recId)
        {
            retailMCRChannelTable.selectForUpdate(_forUpdate);

            select firstonly retailMCRChannelTable
                where retailMCRChannelTable.RecId == _recId;
        }

        return retailMCRChannelTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomerCreditReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>RetailInformationSubcodeTable</c> record for the current user
    /// using the passed parameter.
    /// </summary>
    /// <param name="_subCodeId">
    /// One of the primary keys for the <c>RetailInformationSubcodeTable</c> table.
    /// </param>
    /// <returns>
    /// A <c>RetailInformationSubcodeTable</c> record.
    /// </returns>
    /// <remarks>
    /// Nothing is returned if the current user does not have customer credit reatil information code ID setup.
    /// </remarks>
    public static RetailInformationSubcodeTable getCustomerCreditReasonCode(RetailInformationSubcodeId _subCodeId)
    {
        RetailMCRChannelTable           retailMCRChannelTable;
        RetailInformationSubcodeTable   retailInformationSubcodeTable;

        retailMCRChannelTable = RetailMCRChannelTable::findForCurrentUser();

        if (retailMCRChannelTable.mcrCustomerCreditRetailInfocodeId)
        {
            retailInformationSubcodeTable = RetailInformationSubcodeTable::find(retailMCRChannelTable.mcrCustomerCreditRetailInfocodeId,_subCodeId);
        }

        return retailInformationSubcodeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriceOverrideReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>RetailInformationSubcodeTable</c> record for the current user
    /// using the passed parameter.
    /// </summary>
    /// <param name="_subCodeId">
    /// One of the primary keys for the <c>RetailInformationSubcodeTable</c> table.
    /// </param>
    /// <returns>
    /// A <c>RetailInformationSubcodeTable</c> record.
    /// </returns>
    /// <remarks>
    /// Nothing is returned if the current user does not have price override reatil information code ID setup.
    /// </remarks>
    public static RetailInformationSubcodeTable getPriceOverrideReasonCode(RetailInformationSubcodeId _subCodeId)
    {
        RetailMCRChannelTable           retailMCRChannelTable;
        RetailInformationSubcodeTable   retailInformationSubcodeTable;

        retailMCRChannelTable = RetailMCRChannelTable::findForCurrentUser();

        if (retailMCRChannelTable.mcrPriceOverrideRetailInfocodeId)
        {
            retailInformationSubcodeTable = RetailInformationSubcodeTable::find(retailMCRChannelTable.mcrPriceOverrideRetailInfocodeId,_subCodeId);
        }

        return retailInformationSubcodeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>RetailInformationSubcodeTable</c> record for the current user
    /// using the passed parameter.
    /// </summary>
    /// <param name="_subCodeId">
    /// One of the primary keys for the <c>RetailInformationSubcodeTable</c> table.
    /// </param>
    /// <returns>
    /// A <c>RetailInformationSubcodeTable</c> record.
    /// </returns>
    /// <remarks>
    /// Nothing is returned if the current user does not have reason code reatil information code ID setup.
    /// </remarks>
    public static RetailInformationSubcodeTable getReasonCode(RetailInformationSubcodeId _subCodeId)
    {
        RetailMCRChannelTable           retailMCRChannelTable;
        RetailInformationSubcodeTable   retailInformationSubcodeTable;

        retailMCRChannelTable = RetailMCRChannelTable::findForCurrentUser();

        if (retailMCRChannelTable.mcrReasonCodeRetailInfocodeId)
        {
            retailInformationSubcodeTable = RetailInformationSubcodeTable::find(retailMCRChannelTable.mcrReasonCodeRetailInfocodeId,_subCodeId);
        }

        return retailInformationSubcodeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCustomerCreditReasonCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up and displays the customer credits reason codes for the current user.
    /// </summary>
    /// <param name="_callingControl">
    /// The form control that called the lookup.
    /// </param>
    public static void lookupCustomerCreditReasonCodes(FormControl _callingControl)
    {
        SysTableLookup                  sysTableLookup;
        Query                           query = new Query();
        QueryBuildDataSource            queryBuildDataSource;
        RetailMCRChannelTable           retailMCRChannelTable;

        retailMCRChannelTable = RetailMCRChannelTable::findForCurrentUser();

        if (retailMCRChannelTable.mcrCustomerCreditRetailInfocodeId)
        {
            sysTableLookup = SysTableLookup::newParameters(tableNum(RetailInformationSubcodeTable), _callingControl);
            queryBuildDataSource = query.addDataSource(tableNum(RetailInformationSubcodeTable));
            queryBuildDataSource.addRange(fieldNum(RetailInformationSubcodeTable, InfocodeId)).value(SysQuery::value(retailMCRChannelTable.mcrCustomerCreditRetailInfocodeId));

            sysTableLookup.addLookupfield(fieldNum(RetailInformationSubcodeTable, SubcodeId));
            sysTableLookup.addLookupMethod(tableMethodStr(RetailInformationSubcodeTable, displaySubcodeDescription));

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }
        //If the user is not associated a channel, no reason codes will show.
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPriceOverrideReasonCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up and displays the price override reason codes for the current user.
    /// </summary>
    /// <param name="_callingControl">
    /// The form control that called the lookup.
    /// </param>
    public static void lookupPriceOverrideReasonCodes(FormControl _callingControl)
    {
        SysTableLookup                  sysTableLookup;
        Query                           query = new Query();
        QueryBuildDataSource            queryBuildDataSource;
        RetailMCRChannelTable           retailMCRChannelTable;

        retailMCRChannelTable = RetailMCRChannelTable::findForCurrentUser();

        if (retailMCRChannelTable.mcrPriceOverrideRetailInfocodeId)
        {
            sysTableLookup = SysTableLookup::newParameters(tableNum(RetailInformationSubcodeTable), _callingControl);
            queryBuildDataSource = query.addDataSource(tableNum(RetailInformationSubcodeTable));
            queryBuildDataSource.addRange(fieldNum(RetailInformationSubcodeTable, InfocodeId)).value(SysQuery::value(retailMCRChannelTable.mcrPriceOverrideRetailInfocodeId));

            sysTableLookup.addLookupfield(fieldNum(RetailInformationSubcodeTable, SubcodeId));
            sysTableLookup.addLookupMethod(tableMethodStr(RetailInformationSubcodeTable, displaySubcodeDescription));

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }
        //If the user is not associated a channel, no reason codes will show.
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReasonCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up and displays the reason codes for the current user.
    /// </summary>
    /// <param name="_callingControl">
    /// The form control that called the lookup.
    /// </param>
    public static void lookupReasonCodes(FormControl _callingControl)
    {
        SysTableLookup                  sysTableLookup;
        Query                           query = new Query();
        QueryBuildDataSource            queryBuildDataSource;
        RetailMCRChannelTable           retailMCRChannelTable;

        retailMCRChannelTable = RetailMCRChannelTable::findForCurrentUser();

        if (retailMCRChannelTable.mcrReasonCodeRetailInfocodeId)
        {
            sysTableLookup = SysTableLookup::newParameters(tableNum(RetailInformationSubcodeTable), _callingControl);
            queryBuildDataSource = query.addDataSource(tableNum(RetailInformationSubcodeTable));
            queryBuildDataSource.addRange(fieldNum(RetailInformationSubcodeTable, InfocodeId)).value(SysQuery::value(retailMCRChannelTable.mcrReasonCodeRetailInfocodeId));

            sysTableLookup.addLookupfield(fieldNum(RetailInformationSubcodeTable, SubcodeId));
            sysTableLookup.addLookupMethod(tableMethodStr(RetailInformationSubcodeTable, displaySubcodeDescription));

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }
        //If the user is not associated a channel, no reason codes will show.
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrEnableDirectedSelling</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether directed selling is enabled for the passed in entity.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> record that is associated with the retail channel.
    /// </param>
    /// <returns>
    /// Yes if directed selling is enabled; otherwise, No.
    /// </returns>
    public static NoYes mcrEnableDirectedSelling(SalesTable _salesTable)
    {
        RetailMCRChannelTable   retailMCRChannelTable;
        RetailSalesTable        retailSalesTable;
        NoYes                   ret = NoYes::No;

        if (MCROrderParameters::isCallCenterEnabledAndInUse())
        {
            select firstonly mcrEnableDirectedSelling from retailMCRChannelTable
                exists join retailSalesTable
                    where retailSalesTable.SalesTable == _salesTable.RecId
                        && retailSalesTable.RetailChannel == retailMCRChannelTable.RecId;

            ret = retailMCRChannelTable.mcrEnableDirectedSelling;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrEnableDirectedSellingFindByUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether directed selling is enabled for the current user.
    /// </summary>
    /// <returns>
    /// Yes if directed selling is enabled; otherwise, No.
    /// </returns>
    public static NoYes mcrEnableDirectedSellingFindByUser()
    {
        RetailMCRChannelTable   retailMCRChannelTable;
        NoYes                   ret = NoYes::No;

        if (MCROrderParameters::isCallCenterEnabledAndInUse())
        {
            retailMCRChannelTable = RetailMCRChannelTable::findForCurrentUser();
            if (retailMCRChannelTable)
            {
                ret = retailMCRChannelTable.mcrEnableDirectedSelling;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrEnableOrderCompletion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether order completion is enabled for the passed in entity.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> record that is associated with the retail channel.
    /// </param>
    /// <returns>
    /// Yes if order completion is enabled; otherwise, No.
    /// </returns>
    public static NoYes mcrEnableOrderCompletion(SalesTable _salesTable)
    {
        RetailMCRChannelTable   retailMCRChannelTable;
        RetailSalesTable        retailSalesTable;
        NoYes                   ret = NoYes::No;

        if (MCROrderParameters::isCallCenterEnabledAndInUse())
        {
            retailSalesTable = RetailSalesTable::findSalesTable(_salesTable);

            if (RetailEnableB2b2bAndEnhanceB2bOrdersFeature::isEnabled() && retailSalesTable.OriginChannel)
            {
                retailMCRChannelTable = RetailMCRChannelTable::findRecId(retailSalesTable.OriginChannel);
            }

            // if record is not found from origin channel, then fall back to old strategy
            if(!retailMCRChannelTable.RecId)
            {
                retailMCRChannelTable = RetailMCRChannelTable::findRecId(retailSalesTable.RetailChannel);
            }

            ret = retailMCRChannelTable.mcrEnableOrderCompletion;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrEnableOrderCompletionFindByUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether order completion is enabled for the current user.
    /// </summary>
    /// <returns>
    /// Yes if order completion is enabled; otherwise, No.
    /// </returns>
    public static NoYes mcrEnableOrderCompletionFindByUser()
    {
        RetailMCRChannelTable   retailMCRChannelTable;
        NoYes                   ret = NoYes::No;

        if (MCROrderParameters::isCallCenterEnabledAndInUse())
        {
            retailMCRChannelTable = RetailMCRChannelTable::findForCurrentUser();
            if (retailMCRChannelTable)
            {
                ret = retailMCRChannelTable.mcrEnableOrderCompletion;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrEnableOrderPriceControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether the order price control is enabled for the passed in entity.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> record that is associated with the retail channel.
    /// </param>
    /// <returns>
    /// Yes if the order price control is enabled; otherwise, No.
    /// </returns>
    public static NoYes mcrEnableOrderPriceControl(SalesTable _salesTable)
    {
        RetailMCRChannelTable   retailMCRChannelTable;
        RetailSalesTable        retailSalesTable;
        NoYes                   ret = NoYes::No;

        if (MCROrderParameters::isCallCenterEnabledAndInUse())
        {
            select firstonly mcrEnableOrderPriceControl from retailMCRChannelTable
                exists join retailSalesTable
                    where retailSalesTable.SalesTable == _salesTable.RecId
                        && retailSalesTable.RetailChannel == retailMCRChannelTable.RecId;

            ret = retailMCRChannelTable.mcrEnableOrderPriceControl;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrEnableOrderPriceControlFindByUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether the order price control is enabled for the current user.
    /// </summary>
    /// <returns>
    /// Yes if the order price control is enabled; otherwise, No.
    /// </returns>
    public static NoYes mcrEnableOrderPriceControlFindByUser()
    {
        RetailMCRChannelTable   retailMCRChannelTable;
        NoYes                   ret = NoYes::No;

        if (MCROrderParameters::isCallCenterEnabledAndInUse())
        {
            retailMCRChannelTable = RetailMCRChannelTable::findForCurrentUser();
            if (retailMCRChannelTable)
            {
                ret = retailMCRChannelTable.mcrEnableOrderPriceControl;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the method when a field name is validated.
    /// </summary>
    /// <param name="_fieldName">
    /// The value of the <c>FieldName</c>
    /// </param>
    /// <param name="_arrayIndex">
    /// The integer value of arrayIndex.
    /// </param>
    /// <returns>
    /// Returns true if the field values are validated
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;
    
        ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            switch (_fieldName)
            {
                case fieldStr(RetailMCRChannelTable, MCREnableOrderCompletion) :
                    if (this.orig().MCREnableOrderCompletion == NoYes::Yes && this.MCREnableOrderCompletion == NoYes::No && RetailCommercePaymentsFeatureExposure::isEnabled())
                    {
                        ret = Global::checkFailed(strFmt("@Retail:RetailFeatureIsEnabledSoCannotDisableParameter", "@MCR40148", "@Retail:RetailCommercePaymentFeatureKey"));
                    }
                    break;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in <c>RetailPubRetailMCRChannelTable</c> table and sets the store number if not present.
    /// </summary>
    /// <param name="_sync">
    /// method parameter to support base class method which has been overridden
    /// </param>
    /// <remarks>
    /// If replication of the record is allowed for the table, action is inserted into the <c>RetailConnPreactionTable</c> table.
    /// </remarks>
    public void insert(boolean _sync = true)
    {
        super();
        
        // Publish the current channel implicit and populates publishing data in the specified table.
        RetailPubRetailMCRChannelTable::publishChannel(this.RecId);

    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the record in <c>RetailStoreTable</c> table.
    /// </summary>
    /// <param name="_sync">
    /// method parameter to support base class method which has been overridden
    /// </param>
    public void update(boolean _sync = true)
    {
        super();
        
        // Publish the current channel implicit and populates publishing data in the specified table.
        RetailPubRetailMCRChannelTable::publishChannel(this.RecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@MCR40163</DeveloperDocumentation>
	<Label>@MCR40173</Label>
	<TableGroup>Main</TableGroup>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Extends>RetailChannelTable</Extends>
	<Modules>CallCenter</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MCRCustomerCreditRetailInfocodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRPriceOverrideRetailInfocodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRReasonCodeRetailInfocodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCREnableOrderCompletion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCREnableDirectedSelling</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCREnableOrderPriceControl</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MCRCustomerCreditRetailInfocodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRPriceOverrideRetailInfocodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRReasonCodeRetailInfocodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCREnableOrderCompletion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCREnableDirectedSelling</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCREnableOrderPriceControl</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MCRCustomerCreditRetailInfocodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCREnableDirectedSelling</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCREnableOrderCompletion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCREnableOrderPriceControl</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRPriceOverrideRetailInfocodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRReasonCodeRetailInfocodeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReasonCode</Name>
			<Label>@SYS78965</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MCRPriceOverrideRetailInfocodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRReasonCodeRetailInfocodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRCustomerCreditRetailInfocodeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRCustomerCreditRetailInfocodeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailInfocodeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS7084</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MCREnableDirectedSelling</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCREnableDirectedSelling</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MCREnableOrderCompletion</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>MCRPayment</ConfigurationKey>
			<ExtendedDataType>MCREnableOrderCompletion</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MCREnableOrderPriceControl</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCREnableOrderPriceControl</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRPriceOverrideRetailInfocodeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailInfocodeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@MCR10725</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRReasonCodeRetailInfocodeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailInfocodeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@MCR10059</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailChannelTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>RetailChannelTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>