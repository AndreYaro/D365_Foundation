<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSUOMStructure</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSUOMStructure extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates item id.
    /// </summary>
    /// <returns>
    /// The calculated item id.
    /// </returns>
    public ItemId calcItem()
    {
        ItemId          itemId;
        WHSASNItem      asnItem;
        WHSUOMStructure uomStructureCases;
        int             counter;

        if (this.isParentLP())
        {
            while select uomStructureCases
                group by uomStructureCases.ItemId
                where uomStructureCases.LicensePlateParent  == this.LicensePlateId
                    && uomStructureCases.Module             == this.Module
                    && uomStructureCases.ShipmentId         == this.ShipmentId
            {
                if (uomStructureCases.ItemId == '')
                {
                    itemId = '';
                    break;
                }
                itemId = uomStructureCases.ItemId;
                ++counter;
            }
        }
        else
        {
            while select asnItem
                group by asnItem.ItemId
                where asnItem.LicensePlateId == this.LicensePlateId
                    && asnItem.Module        == this.Module
                    && asnItem.ShipmentId    == this.ShipmentId
            {
                itemId = asnItem.ItemId;
                ++counter;
            }
        }

        itemId = counter > 1 ? '' : itemId;

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateUOMStructureQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the UOM Structure quantity for the pallets and cases grid for packing structure
    /// </summary>
    /// <returns>
    ///    Qty value tied to each UOMStructure entry
    /// </returns>
    public Qty calculateUOMStructureQty()
    {
        Qty structureQty;
        Qty qty;

        if (this.isParentLP())
        {
            WHSUOMStructure uomStructureCase;
            select sum(Qty) from uomStructureCase
                where uomStructureCase.LicensePlateParent == this.LicensePlateId
                    && uomStructureCase.Module == this.Module
                    && uomStructureCase.ShipmentId == this.ShipmentId;

            structureQty += uomStructureCase.Qty;
        }
        else
        {
            boolean enableConversion = this.validateQtyConversion();

            WHSASNItem  asnItem;
            WHSLoadLine loadLine;
            while select Qty, LoadLineRefRecId, UOM, ItemId, InventDimId from asnItem
                join UOM from loadLine
                where asnItem.LicensePlateId    == this.LicensePlateId
                    && asnItem.Module           == this.Module
                    && asnItem.ShipmentId       == this.ShipmentId
                    && loadLine.RecId           == asnItem.LoadLineRefRecId
            {
                if (loadLine.UOM != asnItem.UOM && enableConversion)
                {
                    Qty convertedQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                                            asnItem.ItemId,
                                            asnItem.InventDimId,
                                            asnItem.Qty,
                                            asnItem.UOM,
                                            loadLine.UOM, 
                                            NoYes::No,
                                            NoYes::No);

                    qty = convertedQty;
                }
                else
                {
                    qty = asnItem.Qty;
                }

                structureQty += qty;
            }
        }

        return structureQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQtyConversion</Name>
				<Source><![CDATA[
    private boolean validateQtyConversion()
    {
       
        WHSLoadLine loadLine;
        WHSASNItem  asnItem;
        int counter = 0;

        while select RecId from loadLine
            group by loadLine.UOM
            exists join asnItem
            where loadLine.RecId          == asnItem.LoadLineRefRecId
                && asnItem.LicensePlateId == this.LicensePlateId
                && asnItem.Module         == this.Module
                && asnItem.ShipmentId     == this.ShipmentId
        {
            ++counter;

            if (counter > 1)
            {
                return false;
            }
        }
        

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the item Id value on the UOM structure based on the number of items in the structure.
    /// </summary>
    /// <returns>
    /// A blank field if there are no items, the item Id if there is one, 'Multiple' if more than one.
    /// </returns>
    public display ItemId displayItemId()
    {
        ItemId          itemId;
        WHSASNItem      asnItem;
        WHSUOMStructure uomStructureCases;
        int             counter;

        if (this.ItemId == '')
        {
            if (this.isParentLP())
            {
                while select ItemId from uomStructureCases
                    group by uomStructureCases.ItemId
                    where uomStructureCases.LicensePlateParent == this.LicensePlateId
                        && uomStructureCases.Module == this.Module
                        && uomStructureCases.ShipmentId == this.ShipmentId
                {
                    ++counter;

                    if (counter > 1)
                    {
                        break;
                    }
                }
            }
            else
            {
                while select ItemId from asnItem
                    group by asnItem.ItemId
                    where asnItem.LicensePlateId == this.LicensePlateId
                        && asnItem.Module == this.Module
                        && asnItem.ShipmentId == this.ShipmentId
                {
                    ++counter;

                    if (counter > 1)
                    {
                        break;
                    }
                }
            }

            itemId = counter > 1 ? "@WAX402" : '';
        }
        else
        {
            itemId = this.ItemId;
        }

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayItemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display item name of the product.
    /// </summary>
    /// <returns>
    /// The item name of the product.
    /// </returns>
    display ItemName displayItemName()
    {
        return EcoResProductTranslation::findByProductLanguage(InventTable::itemProduct(this.ItemId), Global::currentUserLanguage()).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQtyOfItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets quantity of the items in the ASN records.
    /// </summary>
    /// <param name="_itemId">
    /// Id of the item.
    /// </param>
    /// <returns>
    /// The quantity of the item defined in the ASN records.
    /// </returns>
    Qty getQtyOfItems(ItemId _itemId)
    {
        WHSASNItem          asnItem;
        WHSUOMStructure     uomStructure;
        Qty                 ret;

        if (this.HasPacks)
        {
            if (_itemId)
            {
                while select uom, Qty, InventDimId from asnItem
                    join LicensePlateId, LicensePlateParent from uomStructure
                       where asnItem.LicensePlateId == uomStructure.LicensePlateId
                            && asnItem.Module == uomStructure.Module
                            && asnItem.ShipmentId == uomStructure.ShipmentId
                            && uomStructure.LicensePlateParent == this.LicensePlateId
                            && asnItem.ItemId == _itemId
                {
                    if (asnItem.uom != this.uomItem)
                    {
                        ret += EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                                    _itemId,
                                    asnItem.InventDimId,
                                    asnItem.Qty,
                                    asnItem.uom,
                                    this.uomItem,
                                    NoYes::No,
                                    NoYes::No);
                    }
                    else
                    {
                        ret += asnItem.Qty;
                    }
                }
            }
            else
            {
                while select Qty from asnItem
                    join LicensePlateId, LicensePlateParent from uomStructure
                       where asnItem.LicensePlateId == uomStructure.LicensePlateId
                            && asnItem.Module == uomStructure.Module
                            && asnItem.ShipmentId == uomStructure.ShipmentId
                            && uomStructure.LicensePlateParent == this.LicensePlateId
                {
                    ret += asnItem.Qty;
                }
            }
        }
        else
        {
            if (_itemId)
            {
                while select uom, Qty, InventDimId from asnItem
                    where asnItem.LicensePlateId  == this.LicensePlateId
                        && asnItem.Module == this.Module
                        && asnItem.ShipmentId == this.ShipmentId
                        && asnItem.ItemId == _itemId
                {
                    if (asnItem.uom != this.uomItem)
                    {
                        ret += EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                                    _itemId,
                                    asnItem.InventDimId,
                                    asnItem.Qty,
                                    asnItem.uom,
                                    this.uomItem,
                                    NoYes::No,
                                    NoYes::No);
                    }
                    else
                    {
                        ret += asnItem.Qty;
                    }
                }
            }
            else
            {
                select sum(Qty) from asnItem
                    where asnItem.LicensePlateId == this.LicensePlateId
                        && asnItem.Module == this.Module
                        && asnItem.ShipmentId == this.ShipmentId;

                ret += asnItem.Qty;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQtyOfStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds total quantity in the UOM structure.
    /// </summary>
    /// <param name="_parentLicensePlate">
    /// Parent license plate.
    /// </param>
    /// <returns>
    /// The total quantity in the structure.
    /// </returns>
    Qty getQtyOfStructure(WHSLicensePlateId _parentLicensePlate)
    {
        Qty                 ret;
        WHSUOMStructure     uomStructure;
        WHSUOMStructure     uomParent;

        uomParent = WHSUOMStructure::find(_parentLicensePlate, this.Module, this.ShipmentId);

        if (uomParent.UOMItem)
        {
            while select uomStructure
               where uomStructure.LicensePlateParent == _parentLicensePlate
                    && uomStructure.Module == this.Module
            {
                if (this.uomItem != uomStructure.uomPack)
                {
                    ret += EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                            uomParent.ItemId,
                            // Currently no good dimension to use here, need InventDimId on WHSUOMStructure to support conversion for variants
                            // UOM conversion must be setup for the product master for this not to fail
                            '',
                            uomStructure.Qty,
                            uomStructure.uomPack,
                            uomParent.uomItem,
                            NoYes::No,
                            NoYes::No);
                }
                else
                {
                    ret += uomStructure.Qty;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isParentLP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the record is parent (aka pallet that has cases).
    /// </summary>
    /// <returns>
    /// True if the record is parent; otherwise, false
    /// </returns>
    public boolean isParentLP()
    {
        return (select firstonly RecId from whsuomStructure
                    where whsuomStructure.LicensePlateParent == this.LicensePlateId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        Qty                 qty;
        Qty                 factor;
        WHSUOMStructure     uomStructure;
        boolean             ret = true;

        ret = super();

        if (ret)
        {
            EcoResProductUnitConverter productUnitConverter = EcoResProductUnitConverter::construct();
            productUnitConverter.parmItemId(this.ItemId);

            // Currently no good dimension to use here, need InventDimId on WHSUOMStructure to support conversion for variants
            // UOM conversion must be setup for the product master for this not to fail
            productUnitConverter.parmInventDimId('');
            productUnitConverter.parmApplyRounding(NoYes::No);

            if (this.LicensePlateParent)
            {
                uomStructure = WHSUOMStructure::find(this.LicensePlateParent, this.Module, this.ShipmentId);

                // Validate reference
                if (uomStructure.RecId == 0)
                {
                    throw error("@WAX3901");
                }
                else if (uomStructure.LicensePlateParent != '')
                {
                    throw error("@WAX:Error_LoadPackingStructureDepthExceeded");
                }
                
                // Referenced parent UOMStructure exists - compare Qty from Pack to Tare
                if (!this.orig().uomPack || (this.orig().uomPack == this.uomPack))
                {
                    productUnitConverter.parmFromUnitOfMeasureSymbol(this.uomPack);
                    productUnitConverter.parmToUnitOfMeasureSymbol(uomStructure.uomItem);

                    factor = productUnitConverter.convertValue(this.Qty - this.orig().Qty);
                }
                else
                {
                    productUnitConverter.parmFromUnitOfMeasureSymbol(this.uomPack);
                    productUnitConverter.parmToUnitOfMeasureSymbol(this.orig().uomPack);

                    factor = productUnitConverter.convertValue(this.Qty) - this.orig().Qty;

                    productUnitConverter.parmFromUnitOfMeasureSymbol(this.orig().uomPack);
                    productUnitConverter.parmToUnitOfMeasureSymbol(uomStructure.uomItem);

                    factor = productUnitConverter.convertValue(factor);
                }

                qty = this.getQtyOfStructure(this.LicensePlateParent) + factor;
                if (qty > uomStructure.Qty)
                {
                    throw error(strFmt("@WAX830", qty, uomStructure.Qty));
                }
            }

            // Compare Qty from Tare to Pack
            qty = 0;
            if (this.HasPacks)
            {
                qty = this.getQtyOfStructure(this.LicensePlateId);

                if (this.uomItem != this.orig().uomItem && this.ItemId)
                {
                    productUnitConverter.parmFromUnitOfMeasureSymbol(this.orig().uomItem);
                    productUnitConverter.parmToUnitOfMeasureSymbol(this.uomItem);
                    qty = productUnitConverter.convertValue(qty);
                }

                if (qty > this.Qty)
                {
                    throw error("@WAX832");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupTOUOMStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes <c>WHSUOMStructure</c> record for transfer orders.
    /// </summary>
    /// <param name="_licensePlateId">
    /// License plate id of the record.
    /// </param>
    static void cleanupTOUOMStructure(WHSLicensePlateId _licensePlateId)
    {
        if (_licensePlateId)
        {
            WHSUOMStructure::deleteUOMStructureByLPAndModule(_licensePlateId, WHSModule::Transfer);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteUOMStructureByLPAndModule</Name>
				<Source><![CDATA[
    private static void deleteUOMStructureByLPAndModule(
        WHSLicensePlateId   _licensePlateId,
        WHSModule           _whsModule)
    {
        WHSUOMStructure structure;

        ttsbegin;

        while select forupdate structure
            where structure.LicensePlateId == _licensePlateId
                && structure.Module == _whsModule
        {
            if (structure.canBeDeleted())
            {
                structure.delete();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeDeleted</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean canBeDeleted()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupTOUOMStructureFromQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes <c>WHSUOMStructure</c> records for transfer orders.
    /// </summary>
    /// <param name = "_query">
    /// A <c>Query<c> that returns a collection of <c>InventDim</c>
    /// </param>
    static void cleanupTOUOMStructureFromQuery(Query _query)
    {
        QueryRun qr = new QueryRun(_query);

        while (qr.next())
        {
            InventDim inventDim = qr.get(tableNum(InventDim));

            WHSUOMStructure::cleanupTOUOMStructure(inventDim.LicensePlateId);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a specific <c>whsuomStructure</c> record exists.
    /// </summary>
    /// <param name="_whsLicensePlateId">
    /// License plate id of the record.
    /// </param>
    /// <param name="_whsModule">
    /// Module of the record.
    /// </param>
    /// <param name="_shipmentId">
    /// The Id of the shipment the packing structure belongs to.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(WHSLicensePlateId _whsLicensePlateId,
                                WHSModule         _whsModule,
                                WHSShipmentId     _shipmentId)
    {
        return (_whsLicensePlateId && _whsModule && _shipmentId) &&
               (select firstonly WHSUOMStructure
                    where WHSUOMStructure.LicensePlateId == _whsLicensePlateId
                        && WHSUOMStructure.Module == _whsModule
                        && WHSUOMStructure.ShipmentId == _shipmentId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForParentLicensePlateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a specific <c>WHSUOMStructure</c> record exists for the given parent license plate ID.
    /// </summary>
    /// <param name="_parentLicensePlateId">Parent license plate ID.</param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal static boolean existForParentLicensePlateId(WHSLicensePlateId _parentLicensePlateId)
    {
        return _parentLicensePlateId &&
               (select firstonly RecId from WHSUOMStructure
                    where WHSUOMStructure.LicensePlateParent == _parentLicensePlateId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForParentLicensePlateIdAndShipment</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean existForParentLicensePlateIdAndShipment(WHSLicensePlateId _parentLicensePlateId, WHSModule _module, WHSShipmentId _shipmentId)
    {
        return _parentLicensePlateId &&
               (select firstonly RecId from WHSUOMStructure
                    where WHSUOMStructure.LicensePlateParent == _parentLicensePlateId
                       && WHSUOMStructure.Module == _module
                       && WHSUOMStructure.ShipmentId == _shipmentId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSUOMStructure</c> record with given parameters.
    /// </summary>
    /// <param name="_whsLicensePlateId">
    /// License plate id of the record.
    /// </param>
    /// <param name="_whsModule">
    /// Module of the record.
    /// </param>
    /// <param name="_shipmentId">
    /// The Id of the shipment the packing structure belongs to.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSUOMStructure find(WHSLicensePlateId _whsLicensePlateId,
                                       WHSModule         _whsModule,
                                       WHSShipmentId     _shipmentId,
                                       boolean           _forupdate = false)
    {
        WHSUOMStructure    whsuomStructure;

        if (_whsLicensePlateId &&
            _whsModule &&
            _shipmentId)
        {
            whsuomStructure.selectForUpdate(_forupdate);

            select firstonly whsuomStructure
                where whsuomStructure.LicensePlateId == _whsLicensePlateId
                    && whsuomStructure.Module == _whsModule
                    && whsuomStructure.ShipmentId == _shipmentId;
        }

        return whsuomStructure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstByLicensePlateModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first available <c>WHSUOMStructure</c> record with given license plate and module.
    /// </summary>
    /// <param name="_whsLicensePlateId">
    /// License plate id of the record.
    /// </param>
    /// <param name="_whsModule">
    /// Module of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSUOMStructure findFirstByLicensePlateModule(WHSLicensePlateId _whsLicensePlateId,
                                       WHSModule         _whsModule,
                                       boolean           _forupdate = false)
    {
        WHSUOMStructure    whsuomStructure;

        if (_whsLicensePlateId && _whsModule)
        {
            whsuomStructure.selectForUpdate(_forupdate);

            select firstonly whsuomStructure
                where whsuomStructure.LicensePlateId == _whsLicensePlateId
                    && whsuomStructure.Module == _whsModule;
        }

        return whsuomStructure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstByLicensePlateModuleInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first available <c>WHSUOMStructure</c> record with given license plate, module and given inventory location.
    /// </summary>
    /// <param name="_whsLicensePlateId">
    /// License plate id of the record.
    /// </param>
    /// <param name="_whsModule">
    /// Module of the record.
    /// </param>
    /// </param>
    /// <param name="_inventLocationId">
    /// User id related to the record.
    /// </param>
    /// <param name="_forUpdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    [Hookable(false)]
    internal static WHSUOMStructure findFirstByLicensePlateModuleInventLocationId(
        WHSLicensePlateId   _whsLicensePlateId,
        WHSModule           _whsModule,
        InventLocationId    _inventLocationId,
        boolean             _forUpdate = false)
    {
        WHSUOMStructure     uomStructure;
        WHSASNItem          asnItem;
        InventDim           inventDim;
            
        if (_whsLicensePlateId && _whsModule && _inventLocationId)
        {
            uomStructure.selectForUpdate(_forUpdate);

            select firstonly uomStructure
            where (uomStructure.LicensePlateId == _whsLicensePlateId
                || uomStructure.LicensePlateParent == _whsLicensePlateId)
                && uomStructure.Module   == _whsModule
            exists join asnItem
            where asnItem.LicensePlateId    == uomStructure.LicensePlateId
                && asnItem.Module           == uomStructure.Module
                && asnItem.ShipmentId       == uomStructure.ShipmentId
            exists join inventDim
            where inventDim.inventDimId     == asnItem.InventDimId
                && inventDim.inventLocationId == _inventLocationId;
        }

        if (uomStructure.LicensePlateParent)
        {
            uomStructure = WHSUOMStructure::findFirstByLicensePlateModule(uomStructure.LicensePlateParent, _whsModule, _forUpdate);
        }

        return uomStructure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHighestLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds highest license plate id in the UOM structure.
    /// </summary>
    /// <param name="_licensePlateId">
    /// The parameter of type <c>WHSLicensePlateId</c>.
    /// </param>
    /// <returns>
    /// Highest license plate id in the UOM structure.
    /// </returns>
    public static WHSLicensePlateId getHighestLicensePlate(WHSLicensePlateId _licensePlateId)
    {
        WHSUOMStructure         uomStructure;
        WHSLicensePlateId       parentLicensePlateId = _licensePlateId;

        select LicensePlateParent from uomStructure
            where uomStructure.LicensePlateId == _licensePlateId;

        while (uomStructure.LicensePlateParent)
        {
            parentLicensePlateId = uomStructure.LicensePlateParent;

            select LicensePlateParent from uomStructure
                where uomStructure.LicensePlateId == parentLicensePlateId;
        }

        return parentLicensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains code to lookup WHSUOMStructure table for license plate.
    /// </summary>
    /// <param name="_ctrl">
    /// Form control that lookup belongs to.
    /// </param>
    /// <param name="_loadId">
    /// Load id of the UOM structure.
    /// </param>
    public static void lookupLicensePlate(FormStringControl _ctrl, WHSLoadId _loadId)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    qbd;

        sysTableLookup = SysTableLookup::newParameters(tableNum(WHSUOMStructure), _ctrl);
        query = new Query();
        qbd = query.addDataSource(tableNum(WHSUOMStructure));
        qbd.addRange(fieldNum(WHSUOMStructure, LoadId)).value(_loadId);
        qbd.addGroupByField(fieldNum(WHSUOMStructure, LicensePlateId));

        sysTableLookup.addLookupfield(fieldNum(WHSUOMStructure, LicensePlateId));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupShipmentId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains code to lookup WHSLoadLine table for shipment id.
    /// </summary>
    /// <param name="_ctrl">
    /// Form control that lookup belongs to.
    /// </param>
    /// <param name="_loadId">
    /// Load id of the load lines.
    /// </param>
    public static void lookupShipmentId(FormStringControl _ctrl, WHSLoadId _loadId)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    qbd;

        sysTableLookup = SysTableLookup::newParameters(tableNum(WHSLoadLine), _ctrl);
        query = new Query();
        qbd = query.addDataSource(tableNum(WHSLoadLine));
        qbd.addRange(fieldNum(WHSLoadLine, LoadId)).value(_loadId);
        qbd.addGroupByField(fieldNum(WHSLoadLine, ShipmentId));

        sysTableLookup.addLookupfield(fieldNum(WHSLoadLine, ShipmentId));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventTransferUpd_Post_updateLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to <c>InventTransferUpd::updateLines</c> in order to be notified of the completion of the inventory update
    /// </summary>
    /// <param name = "args">
    /// <c>XppPrePostArgs</c> parameter.
    /// </param>
    /// <remarks>
    /// This event handler is invoked once the method <c>updateLines</c> completes the execution in order to
    /// remove the relative <c>UOMStructure</c> lines for the items that have been received
    /// </remarks>
    [PostHandlerFor(classStr(InventTransferUpd), methodStr(InventTransferUpd, updateLines))]
    public static void InventTransferUpd_Post_updateLines(XppPrePostArgs args)
    {
        InventTransferUpd inventTransferUpd = args.getThis() as InventTransferUpd;
        if (inventTransferUpd && WhsWorkCreateReceiving::mustCleanupUOMStructure())
        {
            InventTransferParmTable parmTable = inventTransferUpd.parmParmBuffer();

            if (WHSUOMStructure::mustCleanupTOUOMStructureForInventTransferParmTable(parmTable))
            {
                WHSUOMStructure::cleanupTOUOMStructureFromQuery(parmTable.shippedLicensePlatesWithUOMStructure());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCleanupTOUOMStructureForInventTransferParmTable</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal static boolean mustCleanupTOUOMStructureForInventTransferParmTable(InventTransferParmTable _parmTable)
    {
        return _parmTable.UpdateType == InventTransferUpdateType::Receive
            || (_parmTable.UpdateType == InventTransferUpdateType::Shipment && _parmTable.AutoReceiveQty)
            && _parmTable.hasWHSItemParmLines()
            && InventTransferTable::find(_parmTable.TransferId).fromInventLocation().WHSEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateItemUOM</Name>
				<Source><![CDATA[
    private WHSUOM calculateItemUOM()
    {
        WHSUOM          itemUom;
        WHSASNItem      asnItem;
        WHSUOMStructure uomStructureCases;
        int             counter;

        if (this.isParentLP())
        {
            while select uomStructureCases
                group by uomStructureCases.UOMItem
                where uomStructureCases.LicensePlateParent  == this.LicensePlateId
                    && uomStructureCases.Module             == this.Module
                    && uomStructureCases.ShipmentId         == this.ShipmentId
            {
                if (uomStructureCases.UOMItem == '')
                {
                    itemUom = '';
                    break;
                }
                itemUom = uomStructureCases.UOMItem;
                ++counter;
            }
        }
        else
        {
            while select asnItem
                group by asnItem.UOM
                where asnItem.LicensePlateId == this.LicensePlateId
                    && asnItem.Module        == this.Module
                    && asnItem.ShipmentId    == this.ShipmentId
            {
                itemUom = asnItem.UOM;
                ++counter;

                if (counter > 1)
                {
                    break;
                }
            }
        }

        itemUom = counter > 1 ? '' : itemUom;

        if (itemUom)
        {
            WHSLoadLine loadLine;
            WHSUOM loadUOM;
            counter = 0;

            while select UOM from loadline
                group by loadLine.UOM
                exists join asnItem
                where loadLine.RecId          == asnItem.LoadLineRefRecId
                    && asnItem.LicensePlateId == this.LicensePlateId
                    && asnItem.Module         == this.Module
                    && asnItem.ShipmentId     == this.ShipmentId
            {
                loadUOM = loadLine.UOM;
                ++counter;

                if (counter > 1)
                {
                    break;
                }
            }

            itemUom = counter == 1 ? loadUOM : itemUom;
        }

        return itemUom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();
        
        this.deleteRelatedUOMStructureByLPModelShipment();

        this.deleteRelatedUOMStructureIssuesAndReceipts();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRelatedUOMStructureIssuesAndReceipts</Name>
				<Source><![CDATA[
    private void deleteRelatedUOMStructureIssuesAndReceipts()
    {
        WHSUOMStructureIssue::deleteByStructureRecId(this.RecId);

        WHSUOMStructureReceipt::deleteByStructureRecId(this.RecId);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRelatedUOMStructureByLPModelShipment</Name>
				<Source><![CDATA[
    private void deleteRelatedUOMStructureByLPModelShipment()
    {
        if (WHSUOMStructure::existForParentLicensePlateIdAndShipment(this.LicensePlateId, this.Module, this.ShipmentId))
        {
            WHSUOMStructure structureToDelete;

            delete_from structureToDelete
                where structureToDelete.LicensePlateParent == this.LicensePlateId
                   && structureToDelete.Module == this.Module
                   && structureToDelete.ShipmentId == this.ShipmentId
                   && structureToDelete.LicensePlateParent != structureToDelete.LicensePlateId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createdReceiptWorkId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSCreatedWorkId createdReceiptWorkId()
    {
        if (this.CreatedWorkId)
        {
            return this.CreatedWorkId;
        }

        if (this.RecId)
        {
            WHSUOMStructureReceipt uomStructureReceipt;

            if (WHSUOMStructureReceiptEnsureReadFromDBFlight::instance().isEnabled())
            {
                // We need to ensure that a record is read from DB not from cache 
                // to avoid possible receiving the same LP twice
                uomStructureReceipt = WHSUOMStructureReceipt::findEnsureRecordIsReadInsideTTS(this.RecId);
            }
            else
            {
                select firstonly CreatedWorkId from uomStructureReceipt
                    where uomStructureReceipt.UOMStructure == this.RecId;
            }

            return uomStructureReceipt.CreatedWorkId;
        }
        
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCreatedReceiptWorkId</Name>
				<Source><![CDATA[
    [Hookable(false), SysClientCacheDataMethod(true)]
    internal display WHSCreatedWorkId displayCreatedReceiptWorkId()
    {
        return this.createdReceiptWorkId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUOMStructureForScannedLicensePlate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSUOMStructure findUOMStructureForScannedLicensePlate(
        WHSLicensePlateId   _licensePlateId,
        WHSModule           _module,
        boolean             _createWork,
        InventLocationId    _currentWarehouseId)
    {
        WHSUOMStructure structure = WHSUOMStructure::findFirstByLicensePlateModule(_licensePlateId, _module, true);

        if (structure && _createWork)
        {
            InventLocationId plannedWarehouseId = WHSShipmentTable::find(structure.ShipmentId).InventLocationId;

            if (!WHSUOMStructureReceiptHandler::isReceiptAtPlannedWarehouseOrAtOtherWarehouseAllowed(plannedWarehouseId, _currentWarehouseId))
            {
                structure = WHSUOMStructure::findFirstByLicensePlateModuleInventLocationId(_licensePlateId, _module, _currentWarehouseId, true);

            }
        }
        

        WHSWorkId structureCreatedWorkId = structure.createdReceiptWorkId();

        //If we found a structure with related work, we should make sure that work is not completed and in case if it is yes -
        //we are going to see if a structure for transfer order exists which means we will use it for transfer order receiving process
        if (!structure
            || (structureCreatedWorkId
                && (!WHSWorkTable::exist(structureCreatedWorkId)
                    || WHSWorkTable::find(structureCreatedWorkId).WorkStatus >= WHSWorkStatus::Closed)))
        {
            structure = WHSUOMStructure::findFirstByLicensePlateModule(_licensePlateId, WHSModule::Transfer, true);
        }
        // If structure has the parent LP, we should check it as well because it can use for cross docking
        else if (structure.LicensePlateParent
            && WHSWorkTable::find(WHSUOMStructure::findFirstByLicensePlateModule(structure.LicensePlateParent, _module).createdReceiptWorkId()).WorkStatus >= WHSWorkStatus::Closed)
        {
            structure = WHSUOMStructure::findFirstByLicensePlateModule(_licensePlateId, WHSModule::Transfer, true);
        }

        return structure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeUOMStructure</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void initializeUOMStructure(WHSUOMStructure _uomStructure)
    {
        _uomStructure.UOMItem = _uomStructure.calculateItemUOM();
        
        if (_uomStructure.UOMItem)
        {
            _uomStructure.Qty = _uomStructure.calculateUOMStructureQty();
        }
        else
        {
            _uomStructure.Qty = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateShipmentIdNotEmptyForTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that a ShipmentId field is not empty for a Transfer Unit structure.
    /// </summary>
    public void validateShipmentIdNotEmptyForTransfer()
    {
        boolean ret = true;

        if (this.Module == WHSModule::Transfer
            && !this.ShipmentId)
        {
            throw error(strFmt("@SYS84753", fieldPName(WHSUOMStructure, ShipmentId)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.validateShipmentIdNotEmptyForTransfer();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.validateShipmentIdNotEmptyForTransfer();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>plannedWarehouseId</Name>
				<Source><![CDATA[
    /// <summary>Returns the Warehouse on the source document line, where the items were planned to be delivered</summary>
    /// <returns>The InventLocationId of the warehouse record</returns>
    internal InventLocationId plannedWarehouseId()
    {
        return WHSShipmentTable::find(this.ShipmentId).InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isModuleHigherPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a specific module should have a higher priority when multiple <c>WHSUOMStructure</c>
    /// records exist for the same license plate.
    /// </summary>
    /// <param name = "_candidateModule">The module of currently considered <c>WHSUOMStructure</c>.</param>
    /// <param name = "_currentModule">The module of previously found <c>WHSUOMStructure</c>.</param>
    /// <returns>True if the currently considered record has higher priority; false otherwise.</returns>
    protected static boolean isModuleHigherPriority(WHSModule _candidateModule, WHSModule _currentModule)
    {
        if (_candidateModule == WHSModule::Transfer && _currentModule == WHSModule::Purch)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstByLicensePlate</Name>
				<Source><![CDATA[
    internal static WHSUOMStructure findFirstByLicensePlate(
        WHSLicensePlateId _licensePlateId,
        boolean           _forupdate = false)
    {
        WHSUOMStructure uomStructure;
        WHSUOMStructure result;

        uomStructure.selectForUpdate(_forupdate);

        while select uomStructure
            where uomStructure.LicensePlateId == _licensePlateId
        {
            if (!result || WHSUOMStructure::isModuleHigherPriority(uomStructure.Module, result.Module))
            {
                result.data(uomStructure);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsModulesSuppportingPackToNestedLP</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal static container whsModulesSuppportingPackToNestedLP()
    {
        return [WHSModule::Purch];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4471</DeveloperDocumentation>
	<FormRef>WHSPackingStructure</FormRef>
	<Label>@WAX433</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>ShipmentId</TitleField1>
	<TitleField2>LicensePlateId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>LicensePlateIdModuleIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>LicensePlateIdModuleIdx</PrimaryIndex>
	<ReplacementKey>LicensePlateIdModuleIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShipmentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateParent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UOMItem</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UOMPack</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HasPacks</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreatedWorkId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Module</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LicensePlateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Module</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipmentId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShipmentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateParent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UOMItem</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UOMPack</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HasPacks</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreatedWorkId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Module</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CreatedWorkId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCreatedWorkId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HasPacks</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSHasPacks</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LicensePlateId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSASNLicensePlateId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LicensePlateParent</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSASNLicensePlateId</ExtendedDataType>
			<Label>@WAX5474</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LoadId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Module</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>WHSModule</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProductQuantity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipmentId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSShipmentId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UOMItem</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSUOM</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UOMPack</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSUOM</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LicensePlateIdModuleIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LicensePlateId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Module</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ShipmentId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LicensePlateParentModuleIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LicensePlateParent</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Module</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ShipmentIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ShipmentId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Module</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CreatedWorkIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CreatedWorkId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LoadIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LoadId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasureItem</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ItemUJOM</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UOMItem</Name>
					<SourceEDT>UnitOfMeasureSymbol</SourceEDT>
					<Field>UOMItem</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasurePack</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PackUOM</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UOMPack</Name>
					<SourceEDT>UnitOfMeasureSymbol</SourceEDT>
					<Field>UOMPack</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLoadTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSLoadTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LoadId</Name>
					<SourceEDT>WHSLoadId</SourceEDT>
					<Field>LoadId</Field>
					<RelatedField>LoadId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSShipmentTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSShipmentTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShipmentId</Name>
					<SourceEDT>WHSShipmentId</SourceEDT>
					<Field>ShipmentId</Field>
					<RelatedField>ShipmentId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSUOMStructure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSUOMStructure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LicensePlateParent</Name>
					<SourceEDT>WHSLicensePlateParent</SourceEDT>
					<Field>LicensePlateParent</Field>
					<RelatedField>LicensePlateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorkTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSWorkTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CreatedWorkId</Name>
					<SourceEDT>WHSCreatedWorkId</SourceEDT>
					<Field>CreatedWorkId</Field>
					<RelatedField>WorkId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLicensePlate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSLicensePlate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LicensePlateId</Name>
					<Field>LicensePlateId</Field>
					<RelatedField>LicensePlateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>