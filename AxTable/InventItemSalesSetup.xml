<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemSalesSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventItemSalesSetup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calendarDays</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prevents failure when it is called from the <c>InventItemOrderSetupMap</c> map.
    /// </summary>
    /// <returns>
    ///    A <c>NoYes::No</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This method returns no real data and exists only to prevent failure when it is called from the
    ///    <c>InventItemOrderSetupMap</c> map. The <c>InventItemOrderSetupMap</c> returns data from the
    ///    <c>CalendarDays</c> field which is not in this table.
    /// </remarks>
    CalendarDays calendarDays()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventLocationId</Name>
				<Source><![CDATA[
    boolean checkInventLocationId(
        InventLocationId    _inventLocationId,
        boolean             _mandatoryCheck     = true,
        boolean             _matchSiteCheck     = true,
        InventTable         _inventTable        = null) // set this parameter for better performance
    {
        return this.InventItemOrderSetupMap::checkInventLocationId(_inventLocationId,
                                                                   _mandatoryCheck,
                                                                   _matchSiteCheck,
                                                                   _inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventSiteId</Name>
				<Source><![CDATA[
    boolean checkInventSiteId(
        InventSiteId    _inventSiteId,
        boolean         _mandatoryCheck = true,
        InventTable     _inventTable    = null) // set this parameter for better performance
    {
        return this.InventItemOrderSetupMap::checkInventSiteId(_inventSiteId,
                                                               _mandatoryCheck,
                                                               _inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotStopped</Name>
				<Source><![CDATA[
    boolean checkNotStopped(boolean _showSetupType = true)
    {
        return this.InventItemOrderSetupMap::checkNotStopped(_showSetupType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValid</Name>
				<Source><![CDATA[
    boolean checkValid()
    {
        return this.InventItemOrderSetupMap::checkValid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ttsbegin;
        super();

        ItemId itemId = this.ItemId;
        
        this.InventItemOrderSetupMap::delete();
        SalesPurchLineInterface::flushPriceDiscCache();

        if (InventTable::find(ItemId).RecId)
        {
            InventDistinctProductDefaultSalesSetup::updateAffectedDefaultSalesSetup(itemId, this.inventDim(), true);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editATPApplyDemandTimeFence</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits or displays the <c>ATPApplyDemandTimeFence</c> field from the <c>InventItemSalesSetup</c>
    ///    table.
    /// </summary>
    /// <param name="_set">
    ///    A boolean value that specifies whether to assign a new value to the <c>ATPApplyDemandTimeFence</c>
    ///    field.
    /// </param>
    /// <param name="_atpApplyDemandTimeFence">
    ///    An integer used to assign a new value to the <c>ATPApplyDemandTimeFence</c> field.
    /// </param>
    /// <returns>
    ///    An integer that holds the ATP time fence for applying delayed demand.
    /// </returns>
    /// <remarks>
    ///    If the <c>Override</c> field for the specified <c>InventItemSalesSetup</c> record is false, the
    ///    method displays the <c>ATPApplyDemandTimeFence</c> field from the default
    ///    <c>InventItemSalesSetup</c> record.This applies when the <c>Override</c> field is true on this
    ///    record. If the <c>Override</c> field is false on both records then the
    ///    <c>ATPApplyDemandTimeFence</c> field from the <c>SalesParameters</c> table is returned.
    /// </remarks>
    public edit SalesATPApplyDemandTimeFence editATPApplyDemandTimeFence(
        boolean                               _set,
        SalesATPApplyDemandTimeFence          _atpApplyDemandTimeFence)
    {
        InventItemSalesSetup    inventItemSalesSetupDefault;

        if (! this.Override
           && this.ItemId)
        {
            inventItemSalesSetupDefault = InventItemSalesSetup::findDefault(this.ItemId);

            if (   inventItemSalesSetupDefault.RecId != this.RecId
                && inventItemSalesSetupDefault.Override)
            {
                return inventItemSalesSetupDefault.atpApplyDemandTimeFence;
            }

            return SalesParameters::find().atpApplyDemandTimeFence;
        }

        if (_set)
        {
            this.atpApplyDemandTimeFence   = _atpApplyDemandTimeFence;
        }

        return this.atpApplyDemandTimeFence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editATPApplySupplyTimeFence</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits or displays the <c>ATPApplySupplyTimeFence </c>field from the <c>InventItemSalesSetup
    ///    </c>table.
    /// </summary>
    /// <param name="_set">
    ///    A boolean value that specifies whether to assign a new value to the <c>ATPApplySupplyTimeFence
    ///    </c>field.
    /// </param>
    /// <param name="_atpApplySupplyTimeFence">
    ///    An integer used to assign a new value to the <c>ATPApplySupplyTimeFence </c>field.
    /// </param>
    /// <returns>
    ///    An integer that holds the ATP time fence for applying delayed supply.
    /// </returns>
    /// <remarks>
    ///    If the <c>Override </c>field for the specified <c>InventItemSalesSetup</c> record is false then the
    ///    method displays the <c>ATPApplySupplyTimeFence</c> field from the default
    ///    <c>InventItemSalesSetup</c> record.This applies only if the <c>Override </c>field is true on this
    ///    record. If the <c>Override </c>field is false on both records then the <c>ATPApplySupplyTimeFence
    ///    </c>field from the <c>SalesParameters</c> table is returned.
    /// </remarks>
    public edit SalesATPApplySupplyTimeFence editATPApplySupplyTimeFence(
        boolean                               _set,
        SalesATPApplySupplyTimeFence          _atpApplySupplyTimeFence)
    {
        InventItemSalesSetup    inventItemSalesSetupDefault;

        if (! this.Override
           && this.ItemId)
        {
            inventItemSalesSetupDefault = InventItemSalesSetup::findDefault(this.ItemId);

            if (   inventItemSalesSetupDefault.RecId != this.RecId
                && inventItemSalesSetupDefault.Override)
            {
                return inventItemSalesSetupDefault.atpApplySupplyTimeFence;
            }

            return SalesParameters::find().atpApplySupplyTimeFence;
        }

        if (_set)
        {
            this.atpApplySupplyTimeFence   = _atpApplySupplyTimeFence;
        }

        return this.atpApplySupplyTimeFence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editATPBackwardDemandTimeFence</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits or displays the <c>ATPBackwardDemandTimeFence</c> field from the <c>InventItemSalesSetup
    ///    </c>table.
    /// </summary>
    /// <param name="_set">
    ///    A boolean value that specifies whether to assign a new value to the <c>ATPBackwardDemandTimeFence
    ///    </c>field.
    /// </param>
    /// <param name="_atpBackwardDemandTimeFence">
    ///    An integer used to assign a new value to the <c>ATPBackwardDemandTimeFence </c>field.
    /// </param>
    /// <returns>
    ///    An integer that holds the ATP time fence for considering delayed demand.
    /// </returns>
    /// <remarks>
    ///    If the <c>Override</c> field for the specified <c>InventItemSalesSetup</c> record is false then the
    ///    method displays the <c>ATPBackwardDemandTimeFence</c> field from the default
    ///    <c>InventItemSalesSetup</c> record.This applies only if the <c>Override</c> field is true on this
    ///    record. If the <c>Override</c> field is false on both records then the
    ///    <c>ATPBackwardDemandTimeFence</c> field from the <c>SalesParameters</c> table is returned.
    /// </remarks>
    public edit SalesATPBackwardDemandTimeFence editATPBackwardDemandTimeFence(
        boolean                               _set,
        SalesATPBackwardDemandTimeFence       _atpBackwardDemandTimeFence)
    {
        InventItemSalesSetup    inventItemSalesSetupDefault;

        if (! this.Override
           && this.ItemId)
        {
            inventItemSalesSetupDefault = InventItemSalesSetup::findDefault(this.ItemId);

            if (   inventItemSalesSetupDefault.RecId != this.RecId
                && inventItemSalesSetupDefault.Override)
            {
                return inventItemSalesSetupDefault.atpBackwardDemandTimeFence;
            }

            return SalesParameters::find().atpBackwardDemandTimeFence;
        }

        if (_set)
        {
            this.atpBackwardDemandTimeFence   = _atpBackwardDemandTimeFence;
        }

        return this.atpBackwardDemandTimeFence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editATPBackwardSupplyTimeFence</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits or displays the <c>ATPBackwardSupplyTimeFence</c> field from the <c>InventItemSalesSetup</c>
    ///    table.
    /// </summary>
    /// <param name="_set">
    ///    A boolean value that specifies whether to assign a new value to the
    ///    <c>ATPBackwardSupplyTimeFence</c> field.
    /// </param>
    /// <param name="_atpBackwardSupplyTimeFence">
    ///    An integer used to assign a new value to the <c>ATPBackwardSupplyTimeFence</c> field.
    /// </param>
    /// <returns>
    ///    An integer that holds the ATP time fence that considered delayed supply.
    /// </returns>
    /// <remarks>
    ///    If the <c>Override</c> field for the specified <c>InventItemSalesSetup</c> record is false, the
    ///    method displays the <c>ATPBackwardSupplyTimeFence</c> field from the default
    ///    <c>InventItemSalesSetup</c> record.This applies when the <c>Override</c> field is true on this
    ///    record. If the <c>Override</c> field is false on both records, the
    ///    <c>ATPBackwardSupplyTimeFence</c> field from the <c>SalesParameters</c> table is returned.
    /// </remarks>
    public edit SalesATPBackwardSupplyTimeFence editATPBackwardSupplyTimeFence(
        boolean                               _set,
        SalesATPBackwardSupplyTimeFence       _atpBackwardSupplyTimeFence)
    {
        InventItemSalesSetup    inventItemSalesSetupDefault;

        if (! this.Override
           && this.ItemId)
        {
            inventItemSalesSetupDefault = InventItemSalesSetup::findDefault(this.ItemId);

            if (   inventItemSalesSetupDefault.RecId != this.RecId
                && inventItemSalesSetupDefault.Override)
            {
                return inventItemSalesSetupDefault.atpBackwardSupplyTimeFence;
            }

            return SalesParameters::find().atpBackwardSupplyTimeFence;
        }

        if (_set)
        {
            this.atpBackwardSupplyTimeFence   = _atpBackwardSupplyTimeFence;
        }

        return this.atpBackwardSupplyTimeFence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editATPInclPlannedOrders</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits or displays the <c>atpInclPlannedOrders</c> field from the <c>InventItemSalesSetup</c> table.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that specifies whether to assign a new value to the <c>atpInclPlannedOrders</c>
    ///    field.
    /// </param>
    /// <param name="_atpInclPlannedOrders">
    ///    A Boolean value that is used to assign a new value to the <c>atpInclPlannedOrders</c> field.
    /// </param>
    /// <returns>
    ///    true if planned orders should be included in the ATP calculation; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    If the <c>Override</c> field for the specified <c>InventItemSalesSetup</c> record is false, the
    ///    method displays the <c>atpInclPlannedOrders</c> field from the default <c>InventItemSalesSetup</c>
    ///    record.This applies only if the <c>Override</c> field is true on this record. If the<c>
    ///    Override</c> field is false on both records, the <c>atpInclPlannedOrders</c> field from the
    ///    <c>SalesParameters</c> table is returned.
    /// </remarks>
    edit SalesATPInclPlannedOrders editATPInclPlannedOrders(
        boolean                     _set,
        SalesATPInclPlannedOrders   _atpInclPlannedOrders)
    {
        InventItemSalesSetup    inventItemSalesSetupDefault;

        if (! this.Override
           && this.ItemId)
        {
            inventItemSalesSetupDefault = InventItemSalesSetup::findDefault(this.ItemId);

            if (   inventItemSalesSetupDefault.RecId != this.RecId
                && inventItemSalesSetupDefault.Override)
            {
                return inventItemSalesSetupDefault.atpInclPlannedOrders;
            }

            return SalesParameters::find().atpInclPlannedOrders;
        }

        if (_set)
        {
            this.atpInclPlannedOrders = _atpInclPlannedOrders;
        }

        return this.atpInclPlannedOrders;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editATPTimeFence</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits or displays the <c>atpTimeFence</c> field from the <c>InventItemSalesSetup</c> table.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that determines whether to assign a new value to the <c>atpTimeFence</c> field.
    /// </param>
    /// <param name="_atpTimeFence">
    ///    An integer that is used to assign a new value to the <c>atpTimeFence</c> field.
    /// </param>
    /// <returns>
    ///    An integer that holds the ATP time fence.
    /// </returns>
    /// <remarks>
    ///    If the <c>Override</c> field for the specified <c>InventItemSalesSetup</c> record is false, the
    ///    method displays the <c>atpTimeFence</c> field from the default <c>InventItemSalesSetup</c>
    ///    record.This applies only if the <c>Override</c> field is true on this record. If the
    ///    <c>Override</c> field is false on both records, the <c>atpTimeFence</c> field from the
    ///    <c>SalesParameters</c> table is returned.
    /// </remarks>
    edit SalesATPTimeFence editATPTimeFence(
        boolean                 _set,
        SalesATPTimeFence       _atpTimeFence)
    {
        InventItemSalesSetup    inventItemSalesSetupDefault;

        if (! this.Override
           && this.ItemId)
        {
            inventItemSalesSetupDefault = InventItemSalesSetup::findDefault(this.ItemId);

            if (   inventItemSalesSetupDefault.RecId != this.RecId
                && inventItemSalesSetupDefault.Override)
            {
                return inventItemSalesSetupDefault.atpTimeFence;
            }

            return SalesParameters::find().atpTimeFence;
        }

        if (_set)
        {
            this.atpTimeFence   = _atpTimeFence;
        }

        return this.atpTimeFence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDeliveryDateControlType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits or displays the <c>DeliveryDateControlType</c> field from the <c>InventItemSalesSetup</c>
    ///    table.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that specifies whether to assign a new value to the <c>DeliveryDateControlType</c>
    ///    field.
    /// </param>
    /// <param name="_deliveryDateControlType">
    ///    An enumeration value that assigns a new value to the <c>DeliveryDateControlType</c> field.
    /// </param>
    /// <returns>
    ///    An enumeration that holds delivery date control value.
    /// </returns>
    /// <remarks>
    ///    If the <c>Override</c> field for the specified <c>InventItemSalesSetup</c> record is false, the
    ///    method displays the <c>DeliveryDateControlType</c> field from the default
    ///    <c>InventItemSalesSetup</c> record.This applies only if the <c>Override</c> field is true on this
    ///    record. If the <c>Override</c> field is false on both records then the
    ///    <c>DeliveryDateControlType</c> field from the <c>SalesParameters</c> table is returned.
    /// </remarks>
    edit SalesDeliveryDateControlType editDeliveryDateControlType(
        boolean                         _set,
        SalesDeliveryDateControlType    _deliveryDateControlType)
    {
        InventItemSalesSetup    inventItemSalesSetupDefault;

        if (! this.Override
           && this.ItemId)
        {
            inventItemSalesSetupDefault = InventItemSalesSetup::findDefault(this.ItemId);

            if (   inventItemSalesSetupDefault.RecId != this.RecId
                && inventItemSalesSetupDefault.Override)
            {
                return inventItemSalesSetupDefault.DeliveryDateControlType;
            }

            return SalesParameters::find().DeliveryDateControlType;
        }

        if (_set)
        {
            this.DeliveryDateControlType   = _deliveryDateControlType;
        }

        return this.DeliveryDateControlType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editHighestQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits or displays the <c>HighestQty</c> field from the<c> InventItemSalesSetup</c> table.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that specifies whether to assign a new value to the field <c>HighestQty</c>.
    /// </param>
    /// <param name="_qtyHighest">
    ///    A real value that is used to assign a new value to the <c>HighestQty</c> field.
    /// </param>
    /// <returns>
    ///    A real value that holds the maximum quantity.
    /// </returns>
    /// <remarks>
    ///    If the <c>Override</c> field for the specified <c>InventItemSalesSetup</c> record is false, the
    ///    method displays the <c>HighestQty</c> field from the default <c>InventItemSalesSetup</c> record.
    /// </remarks>
    edit QtyHighest editHighestQty(
        boolean                 _set,
        QtyHighest              _qtyHighest)
    {
        InventItemSalesSetup    inventItemSalesSetupDefault;

        if (! this.Override
           && this.ItemId)
        {
            inventItemSalesSetupDefault = InventItemSalesSetup::findDefault(this.ItemId);

            if (inventItemSalesSetupDefault.RecId != this.RecId)
            {
                return inventItemSalesSetupDefault.HighestQty;
            }
        }

        if (_set)
        {
            this.HighestQty = _qtyHighest;
        }

        return this.HighestQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editLeadTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits or displays the <c>LeadTime</c> field from the <c>InventItemSalesSetup</c> table.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that specifies whether to assign a new value to the <c>LeadTime</c> field.
    /// </param>
    /// <param name="_leadTime">
    ///    An integer value that is used to assign a new value to the <c>LeadTime</c> field.
    /// </param>
    /// <returns>
    ///    An integer value that holds the lead time in days.
    /// </returns>
    /// <remarks>
    ///    If the <c>Override</c> field for the specified <c>InventItemSalesSetup</c> record is false, the
    ///    method displays the <c>LeadTime</c> field from the default <c>InventItemSalesSetup</c> record.
    /// </remarks>
    public edit LeadTimeSalesDefault  editLeadTime(
        boolean                 _set,
        LeadTimeSalesDefault    _leadTime)
    {
        if (this.isDefault())
        {
            if (!this.OverrideSalesLeadTime)
            {
                return this.getLeadTime();
            }
        }
        else if (!this.Override)
        {
            return this.getLeadTime();
        }

        if (_set)
        {
            this.LeadTime = _leadTime;
        }

        return this.getLeadTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editLowestQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits or displays the <c>LowestQty</c> field from the <c>InventItemSalesSetup</c> table.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that specifies whether to assign a new value to the <c>LowestQty</c> field.
    /// </param>
    /// <param name="_qtyLowest">
    ///    A real value that is used to assign a new value to the <c>LowestQty</c> field.
    /// </param>
    /// <returns>
    ///    A real value that holds the minimum quantity.
    /// </returns>
    /// <remarks>
    ///    If the <c>Override</c> field for the specified <c>InventItemSalesSetup</c> record is false, the
    ///    method displays the <c>LowestQty</c> field from the default <c>InventItemSalesSetup</c> record.
    /// </remarks>
    edit QtyLowest editLowestQty(
        boolean                 _set,
        QtyLowest               _qtyLowest)
    {
        InventItemSalesSetup    inventItemSalesSetupDefault;

        if (! this.Override
           && this.ItemId)
        {
            inventItemSalesSetupDefault = InventItemSalesSetup::findDefault(this.ItemId);

            if (inventItemSalesSetupDefault.RecId != this.RecId)
            {
                return inventItemSalesSetupDefault.LowestQty;
            }
        }

        if (_set)
        {
            this.LowestQty = _qtyLowest;
        }

        return this.LowestQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editMultipleQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits or displays the <c>MultipleQty</c> field from the <c>InventItemSalesSetup</c> table.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that specifies whether to assign a new value to the <c>MultipleQty</c> field.
    /// </param>
    /// <param name="_qtyMultiples">
    ///    A real value that is used to assign a new value to the <c>MultipleQty</c> field.
    /// </param>
    /// <returns>
    ///    A real value that holds the multiple quantity.
    /// </returns>
    /// <remarks>
    ///    If the <c>Override</c> field for the specified <c>InventItemSalesSetup</c> record is false, the
    ///    method displays the <c>MultipleQty</c> field from the default <c>InventItemSalesSetup</c> record.
    /// </remarks>
    edit QtyMultiples editMultipleQty(
        boolean                 _set,
        QtyMultiples            _qtyMultiples)
    {
        InventItemSalesSetup    inventItemSalesSetupDefault;

        if (! this.Override
           && this.ItemId)
        {
            inventItemSalesSetupDefault = InventItemSalesSetup::findDefault(this.ItemId);

            if (inventItemSalesSetupDefault.RecId != this.RecId)
            {
                return inventItemSalesSetupDefault.MultipleQty;
            }
        }

        if (_set)
        {
            this.MultipleQty = _qtyMultiples;
        }

        return this.MultipleQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPdsCWHighestQty</Name>
				<Source><![CDATA[
    public edit PdsCWInventQtyHighest editPdsCWHighestQty(boolean _set, PdsCWInventQtyHighest _cwQtyHighest)
    {
        if (!this.Override && this.ItemId)
        {
            InventItemSalesSetup inventItemSalesSetupDefault = InventItemSalesSetup::findDefault(this.ItemId);

            if (inventItemSalesSetupDefault.RecId != this.RecId)
            {
                if (PdsCWPurchSalesLineDefaultQuantityThreeWayConversionDisabled::instance().isEnabled())
                {
                    return PdsCatchWeight::cwQty(this.ItemId, inventItemSalesSetupDefault.HighestQty);
                }

                return PdsCatchWeight::convertQtyToCWQty(this.ItemId, inventItemSalesSetupDefault.HighestQty, this.pdsSalesUnitId());
            }
        }

        if (_set)
        {
            if (PdsCWPurchSalesLineDefaultQuantityThreeWayConversionDisabled::instance().isEnabled())
            {
                this.HighestQty = PdsCatchWeight::inventQty(this.ItemId, _cwQtyHighest);
            }
            else
            {
                this.HighestQty = PdsCatchWeight::inventQty(this.ItemId, _cwQtyHighest, this.pdsSalesUnitId());
            }
        }

        if (PdsCWPurchSalesLineDefaultQuantityThreeWayConversionDisabled::instance().isEnabled())
        {
            return PdsCatchWeight::cwQty(this.ItemId, this.HighestQty);
        }

        return PdsCatchWeight::convertQtyToCWQty(this.ItemId, this.HighestQty, this.pdsSalesUnitId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPdsCWLowestQty</Name>
				<Source><![CDATA[
    public edit PdsCWInventQtyLowest editPdsCWLowestQty(boolean _set, PdsCWInventQtyLowest _cwQtyLowest)
    {
        if (!this.Override && this.ItemId)
        {
            InventItemSalesSetup inventItemSalesSetupDefault = InventItemSalesSetup::findDefault(this.ItemId);

            if (inventItemSalesSetupDefault.RecId != this.RecId)
            {
                if (PdsCWPurchSalesLineDefaultQuantityThreeWayConversionDisabled::instance().isEnabled())
                {
                    return PdsCatchWeight::cwQty(this.ItemId, inventItemSalesSetupDefault.LowestQty);
                }

                return PdsCatchWeight::convertQtyToCWQty(this.ItemId, inventItemSalesSetupDefault.LowestQty, this.pdsSalesUnitId());
            }
        }

        if (_set)
        {
            if (PdsCWPurchSalesLineDefaultQuantityThreeWayConversionDisabled::instance().isEnabled())
            {
                this.LowestQty = PdsCatchWeight::inventQty(this.ItemId, _cwQtyLowest);
            }
            else
            {
                this.LowestQty = PdsCatchWeight::inventQty(this.ItemId, _cwQtyLowest, this.pdsSalesUnitId());
            }
        }

        if (PdsCWPurchSalesLineDefaultQuantityThreeWayConversionDisabled::instance().isEnabled())
        {
            return PdsCatchWeight::cwQty(this.ItemId, this.LowestQty);
        }

        return PdsCatchWeight::convertQtyToCWQty(this.ItemId, this.LowestQty, this.pdsSalesUnitId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPdsCWMultipleQty</Name>
				<Source><![CDATA[
    public edit PdsCWInventQtyMultiples editPdsCWMultipleQty(boolean _set, PdsCWInventQtyMultiples _cwQtyMultiple)
    {
        if (!this.Override && this.ItemId)
        {
            InventItemSalesSetup inventItemSalesSetupDefault = InventItemSalesSetup::findDefault(this.ItemId);

            if (inventItemSalesSetupDefault.RecId != this.RecId)
            {
                if (PdsCWPurchSalesLineDefaultQuantityThreeWayConversionDisabled::instance().isEnabled())
                {
                    return PdsCatchWeight::cwQty(this.ItemId, inventItemSalesSetupDefault.MultipleQty);
                }

                return PdsCatchWeight::convertQtyToCWQty(this.ItemId, inventItemSalesSetupDefault.MultipleQty, this.pdsSalesUnitId());
            }
        }

        if (_set)
        {
            if (PdsCWPurchSalesLineDefaultQuantityThreeWayConversionDisabled::instance().isEnabled())
            {
                this.MultipleQty = PdsCatchWeight::inventQty(this.ItemId, _cwQtyMultiple);
            }
            else
            {
                this.MultipleQty = PdsCatchWeight::inventQty(this.ItemId, _cwQtyMultiple, this.pdsSalesUnitId());
            }
        }

        if (PdsCWPurchSalesLineDefaultQuantityThreeWayConversionDisabled::instance().isEnabled())
        {
            return PdsCatchWeight::cwQty(this.ItemId, this.MultipleQty);
        }

        return PdsCatchWeight::convertQtyToCWQty(this.ItemId, this.MultipleQty, this.pdsSalesUnitId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPdsCWStandardQty</Name>
				<Source><![CDATA[
    public edit PdsCWInventQtyStandard editPdsCWStandardQty(boolean _set, PdsCWInventQtyStandard _cwQtyStandard)
    {
        if (!this.Override && this.ItemId)
        {
            InventItemSalesSetup inventItemSalesSetupDefault = InventItemSalesSetup::findDefault(this.ItemId);

            if (inventItemSalesSetupDefault.RecId != this.RecId)
            {
                if (PdsCWPurchSalesLineDefaultQuantityThreeWayConversionDisabled::instance().isEnabled())
                {
                    return PdsCatchWeight::cwQty(this.ItemId, inventItemSalesSetupDefault.StandardQty);
                }

                return PdsCatchWeight::convertQtyToCWQty(this.ItemId, inventItemSalesSetupDefault.StandardQty, this.pdsSalesUnitId());
            }
        }

        if (_set)
        {
            if (PdsCWPurchSalesLineDefaultQuantityThreeWayConversionDisabled::instance().isEnabled())
            {
                this.StandardQty = PdsCatchWeight::inventQty(this.ItemId, _cwQtyStandard);
            }
            else
            {
                this.StandardQty = PdsCatchWeight::inventQty(this.ItemId, _cwQtyStandard, this.pdsSalesUnitId());
            }
        }

        if (PdsCWPurchSalesLineDefaultQuantityThreeWayConversionDisabled::instance().isEnabled())
        {
            return PdsCatchWeight::cwQty(this.ItemId, this.StandardQty);
        }

        return PdsCatchWeight::convertQtyToCWQty(this.ItemId, this.StandardQty, this.pdsSalesUnitId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>editStandardQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits or displays the <c>StandardQty</c> field from the <c>InventItemSalesSetup</c> table.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that specifies whether to assign a new value to the <c>StandardQty</c> field.
    /// </param>
    /// <param name="_qtyStandard">
    ///    A real value that is used to assign a new value to the <c>StandardQty</c> field.
    /// </param>
    /// <returns>
    ///    A real value that holds the standard quantity.
    /// </returns>
    /// <remarks>
    ///    If the <c>Override</c> field for the specified <c>InventItemSalesSetup</c> record is false, the
    ///    method displays the <c>StandardQty</c> field from the default <c>InventItemSalesSetup</c> record.
    /// </remarks>
    edit QtyStandard editStandardQty(
        boolean                 _set,
        QtyStandard             _qtyStandard)
    {
        InventItemSalesSetup    inventItemSalesSetupDefault;

        if (! this.Override
           && this.ItemId)
        {
            inventItemSalesSetupDefault = InventItemSalesSetup::findDefault(this.ItemId);

            if (inventItemSalesSetupDefault.RecId != this.RecId)
            {
                return inventItemSalesSetupDefault.StandardQty;
            }
        }

        if (_set)
        {
            this.StandardQty = _qtyStandard;
        }

        return this.StandardQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editStopped</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits or displays the <c>Stopped</c> field from the <c>InventItemSalesSetup</c> table.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that determines whether to assign a new value to the <c>Stopped</c> field.
    /// </param>
    /// <param name="_itemStopped">
    ///    A Boolean value that is used to assign a new value to the <c>Stopped</c> field.
    /// </param>
    /// <returns>
    ///    A Boolean value that determines whether the item is on hold for transactions.
    /// </returns>
    /// <remarks>
    ///    If the <c>Override</c> field for the specified <c>InventItemSalesSetup</c> record is false, the
    ///    method displays the <c>Stopped</c> field from the default <c>InventItemSalesSetup</c> record.
    /// </remarks>
    edit ItemStopped editStopped(
        boolean                 _set,
        ItemStopped             _itemStopped)
    {
        InventItemSalesSetup    inventItemSalesSetupDefault;

        if (! this.Override
           && this.ItemId)
        {
            inventItemSalesSetupDefault = InventItemSalesSetup::findDefault(this.ItemId);

            if (inventItemSalesSetupDefault.RecId != this.RecId)
            {
                return inventItemSalesSetupDefault.Stopped;
            }
        }

        if (_set)
        {
            this.Stopped = _itemStopped;
        }

        return this.Stopped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHighestQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the maximum amount for a sales order quantity.
    /// </summary>
    /// <returns>
    /// A maximum amount for a sales order quantity.
    /// </returns>
    /// <remarks>
    /// If this parameter is set to zero, it means there is no limitation on the maximum quantity.
    /// </remarks>
    display QtyHighest getHighestQty()
    {
        return this.InventItemOrderSetupMap::highestQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLeadTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a sales lead time in days.
    /// </summary>
    /// <returns>
    /// A sales lead time in days.
    /// </returns>
    display public LeadTimeDelivery getLeadTime()
    {
        LeadTimeDelivery leadTimeDelivery;

        if (this.isDefault())
        {
            //
            // Default order settings.
            // If lead time is explicitly overriden, return the LeadTime field value.
            //
            leadTimeDelivery = this.OverrideSalesLeadTime ? this.LeadTime : SalesParameters::find().LeadTimeSalesDefault;
        }
        else
        {
            //
            // Site specific order settings.
            // If lead time is not overriden, default order settings should be queried.
            //
            leadTimeDelivery = this.Override ? this.LeadTime : this.setupDefault().getLeadTime();
        }

        return leadTimeDelivery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLowestQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the minimum quantity for a sales order.
    /// </summary>
    /// <returns>
    /// The minimum quantity of a sales order.
    /// </returns>
    display QtyLowest getLowestQty()
    {
        return this.InventItemOrderSetupMap::lowestQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMultipleQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a sales order quantity multiplier.
    /// </summary>
    /// <returns>
    /// A sales order quantity multiplier.
    /// </returns>
    display QtyMultiples getMultipleQty()
    {
        return this.InventItemOrderSetupMap::multipleQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStandardQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a standard sales order quantity.
    /// </summary>
    /// <returns>
    /// A standard sales order quantity.
    /// </returns>
    display QtyStandard getStandardQty()
    {
        return this.InventItemOrderSetupMap::standardQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>highestQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a maximum quantity for a sales order.
    /// </summary>
    /// <returns>
    /// A maximum quantity for a sales order.
    /// </returns>
    /// <remarks>
    /// If this parameter is set to zero, it means there is no limitation on the maximum quantity.
    /// </remarks>

    QtyHighest highestQty()
    {
        return this.InventItemOrderSetupMap::highestQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current sales order settings record with settings from the default item order setting record.
    /// </summary>
    public void initFromDefault()
    {
        InventItemSalesSetup    salesSetupDefault;

        if (this.ItemId)
        {
            salesSetupDefault  = InventItemSalesSetup::findDefault(this.ItemId);

            if (   salesSetupDefault.RecId
                && this.RecId != salesSetupDefault.RecId)
            {
                if (salesSetupDefault.Override)
                {
                    this.atpInclPlannedOrders       = salesSetupDefault.atpInclPlannedOrders;
                    this.atpTimeFence               = salesSetupDefault.atpTimeFence;
                    this.DeliveryDateControlType    = salesSetupDefault.DeliveryDateControlType;
                    this.atpApplyDemandTimeFence    = salesSetupDefault.atpApplyDemandTimeFence;
                    this.atpApplySupplyTimeFence    = salesSetupDefault.atpApplySupplyTimeFence;
                    this.atpBackwardDemandTimeFence = salesSetupDefault.atpBackwardDemandTimeFence;
                    this.atpBackwardSupplyTimeFence = salesSetupDefault.atpBackwardSupplyTimeFence;
                }
                else
                {
                    this.initFromSalesParameters();
                }

                this.MultipleQty    = salesSetupDefault.MultipleQty;
                this.LowestQty      = salesSetupDefault.LowestQty;
                this.HighestQty     = salesSetupDefault.HighestQty;
                this.StandardQty    = salesSetupDefault.StandardQty;
                this.LeadTime       = salesSetupDefault.getLeadTime();

                this.Stopped        = salesSetupDefault.Stopped;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current sales order settings record with settings from sales parameters.
    /// </summary>
    /// <param name="_salesParameters">
    ///    <c>SalesParameters</c> table buffer from which the parameters will be read; optional.
    /// </param>
    public void initFromSalesParameters(SalesParameters _salesParameters = SalesParameters::find())
    {
        if (InventTable::find(this.ItemId).ItemType != ItemType::Service)
        {
            this.atpInclPlannedOrders       = _salesParameters.atpInclPlannedOrders;
            this.atpTimeFence               = _salesParameters.atpTimeFence;
            this.DeliveryDateControlType    = _salesParameters.DeliveryDateControlType;
            this.atpApplyDemandTimeFence    = _salesParameters.atpApplyDemandTimeFence;
            this.atpApplySupplyTimeFence    = _salesParameters.atpApplySupplyTimeFence;
            this.atpBackwardDemandTimeFence = _salesParameters.atpBackwardDemandTimeFence;
            this.atpBackwardSupplyTimeFence = _salesParameters.atpBackwardSupplyTimeFence;
        }
        else
        {
            this.DeliveryDateControlType    = SalesDeliveryDateControlType::None;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLeadTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the <c>LeadTime</c> field of the current record.
    /// </summary>
    public void initLeadTime()
    {
        this.LeadTime = this.getLeadTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.initFromSalesParameters();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsBegin;

        super();

        this.InventItemOrderSetupMap::insert();

        SalesPurchLineInterface::flushPriceDiscCache();

        InventDistinctProductDefaultSalesSetup::updateAffectedDefaultSalesSetup(this.ItemId, this.inventDim(), true);
        ttsCommit;

    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    InventDim inventDim()
    {
        return this.InventItemOrderSetupMap::inventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimDefault</Name>
				<Source><![CDATA[
    InventDim inventDimDefault()
    {
        return this.InventItemOrderSetupMap::inventDimDefault();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a sales warehouse ID.
    /// </summary>
    /// <param name="_inventLocationId">
    /// The default sales warehouse ID; optional.
    /// </param>
    /// <param name="_inventTable">
    /// An <c>InventTable</c> buffer that is used to verify whether the multisite has been enabled;
    /// optional.
    /// </param>
    /// <param name="_inventSiteIdParent">
    /// A sales site ID that the <paramref name="_inventLocationId" /> parameter should belong to; optional.
    /// </param>
    /// <returns>
    /// A sales warehouse ID.
    /// </returns>
    /// <remarks>
    /// The <paramref name="_inventSiteIdParent" /> parameter applies only when the <paramref
    /// name="_inventLocationId" /> parameter is specified. If both the <paramref
    /// name="_inventSiteIdParent" /> and <paramref name="_inventLocationId" /> parameters are passed and
    /// no site specific settings are found, a check for whether the passed _inventLocationId belongs to
    /// the site specified by _inventSiteIdParent will be performed.If it does not, an empty string will be
    /// returned. If it does, the passed <paramref name="_inventLocationId" /> parameter is returned.
    /// </remarks>

    display InventLocationId inventLocationId(
        InventLocationId    _inventLocationId   = '',
        InventTable         _inventTable        = null,
        InventSiteId        _inventSiteIdParent = '')
    {
        return this.InventItemOrderSetupMap::inventLocationId(_inventLocationId,
                                                              _inventTable,
                                                              _inventSiteIdParent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the sales site ID.
    /// </summary>
    /// <param name="_inventSiteId">
    ///    The default sales site ID; optional.
    /// </param>
    /// <param name="_inventTable">
    ///    An <c>InventTable</c> buffer that is used to verify whether the multisite has been enabled;
    ///    optional.
    /// </param>
    /// <returns>
    ///    A sales site ID.
    /// </returns>

    display InventSiteId inventSiteId(
        InventSiteId    _inventSiteId   = '',
        InventTable     _inventTable    = null)
    {
        return this.InventItemOrderSetupMap::inventSiteId(_inventSiteId, _inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    InventTable inventTable(boolean _forUpdate = false)
    {
        return this.InventItemOrderSetupMap::inventTable(_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current record represents the default (dimension-less) order settings.
    /// </summary>
    /// <returns>
    /// true if the current record represents default order settings; otherwise, false.
    /// </returns>
    public boolean isDefault()
    {
        return this.InventDimId == InventDim::inventDimIdBlank() || !this.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStopped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an item is on hold for transactions in sales order.
    /// </summary>
    /// <returns>
    /// true if the item is on hold for transactions; otherwise, false.
    /// </returns>

    display ItemStopped isStopped()
    {
        return this.InventItemOrderSetupMap::stopped();
    }

]]></Source>
			</Method>
			<Method>
				<Name>leadTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a sales lead time in days.
    /// </summary>
    /// <returns>
    /// A sales lead time in days.
    /// </returns>
    public LeadTimeDelivery leadTime()
    {
        LeadTimeDelivery leadTimeDelivery;

        if (this.isDefault())
        {
            //
            // Default order settings.
            // If lead time is explicitly overriden, return the LeadTime field value.
            //
            leadTimeDelivery = this.OverrideSalesLeadTime ? this.LeadTime : SalesParameters::find().LeadTimeSalesDefault;
        }
        else
        {
            //
            // Site specific order settings.
            // If lead time is not overriden, default order settings should be queried.
            //
            leadTimeDelivery = this.Override ? this.LeadTime : this.setupDefault().leadTime();
        }

        return leadTimeDelivery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lowestQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the minimum permitted sales order quantity.
    /// </summary>
    /// <returns>
    ///    The minimum permitted sales order quantity.
    /// </returns>

    QtyLowest lowestQty()
    {
        return this.InventItemOrderSetupMap::lowestQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrQuantityEffectiveMultiple</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the effective multiple quantity.
    /// </summary>
    /// <returns>
    /// The <c>QtyMultiples</c> value that is found.
    /// </returns>
    public QtyMultiples mcrQuantityEffectiveMultiple()
    {
        return (this.MultipleQty ? this.MultipleQty : 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>multipleQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a sales order quantity multiplier.
    /// </summary>
    /// <returns>
    /// A sales order quantity multiplier.
    /// </returns>

    QtyMultiples multipleQty()
    {
        return this.InventItemOrderSetupMap::multipleQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    public display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsInventUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the unit in which the related item is stored.
    /// </summary>
    /// <returns>
    /// The symbol of the unit of measure of the related item.
    /// </returns>
    public display UnitOfMeasureSymbol pdsInventUnitId()
    {
        return this.inventTable().inventUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsSalesUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales unit in which the related item is stored in.
    /// </summary>
    /// <returns>
    /// The symbol of the unit of measure of the related item.
    /// </returns>
    public display UnitOfMeasureSymbol pdsSalesUnitId()
    {
        return this.inventTable().salesUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventLocationId</Name>
				<Source><![CDATA[
    void setInventLocationId(InventLocationId _inventLocationId)
    {
        this.InventItemOrderSetupMap::setInventLocationId(_inventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventSiteId</Name>
				<Source><![CDATA[
    void setInventSiteId(InventSiteId _inventSiteId)    
    {
        this.InventItemOrderSetupMap::setInventSiteId(_inventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the sales order settings of the default item.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that specifies whether to select the returning record for update; optional.
    /// </param>
    /// <returns>
    ///    The sales order settings of the default item.
    /// </returns>
    /// <remarks>
    ///    This method is used by the <c>InventItemOrderSetupMap</c> map.
    /// </remarks>
    InventItemSalesSetup setupDefault(boolean _forUpdate = false)
    {
        return InventItemSalesSetup::findDefault(this.ItemId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupType</Name>
				<Source><![CDATA[
    InventItemOrderSetupType setupType()
    {
        return InventItemOrderSetupType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>standardQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a standard sales order quantity.
    /// </summary>
    /// <returns>
    /// A standard sales order quantity.
    /// </returns>

    QtyStandard standardQty()
    {
        return this.InventItemOrderSetupMap::standardQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>stopped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an item is on hold for transactions in sales order.
    /// </summary>
    /// <returns>
    /// true if the item is on hold for transactions; otherwise, false.
    /// </returns>

    ItemStopped stopped()
    {
        return this.InventItemOrderSetupMap::stopped();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateDefaultSalesSite</Name>
				<Source><![CDATA[
    private boolean shouldUpdateDefaultSalesSite(InventItemSalesSetup _orignalRecord)
    {
        return (_orignalRecord.inventDimDefault().InventSiteId    != this.inventDimDefault().InventSiteId)
            || (_orignalRecord.Sequence                           != this.Sequence);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        InventItemSalesSetup orignalRecord = this.orig();
        boolean defaultDimUpdate            = (orignalRecord.inventDimIdDefault != this.inventDimIdDefault);
        boolean stoppedUpdate               = (orignalRecord.Stopped            != this.Stopped);
        boolean updateDefaultSalesSite      = this.shouldUpdateDefaultSalesSite(orignalRecord);

        super();

        if (defaultDimUpdate && this.InventDimId == InventDim::inventDimIdBlank())
        {
            this.inventItemOrderSetupMap::propagateDefaultSiteWarehouseChanges();
        }

        if (updateDefaultSalesSite || stoppedUpdate)
        {
            InventDistinctProductDefaultSalesSetup::updateAffectedDefaultSalesSetup(this.ItemId, orignalRecord.inventDim(), updateDefaultSalesSite);
        }

        SalesPurchLineInterface::flushPriceDiscCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(InventItemSalesSetup, InventDimIdDefault):
                ret = ret && this.InventItemOrderSetupMap::validateFieldInventDimIdDefault();
                break;

            case fieldNum(InventItemSalesSetup, LeadTime):
                ret = ret && this.InventItemOrderSetupMap::validateFieldLeadTime();
                break;

            case fieldNum(InventItemSalesSetup, DeliveryDateControlType):
                ret = this.validateDeliveryDateControlType(this.DeliveryDateControlType) && ret;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeliveryDateControlType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the value of the <c>DeliveryDateControlType</c> field.
    /// </summary>
    /// <param name = "_type">
    ///     The <c>DeliveryDateControlType</c> value.
    /// </param>
    /// <returns>
    ///     true if the field is valid; otherwise, false.
    /// </returns>
    public boolean validateDeliveryDateControlType(SalesDeliveryDateControlType _type)
    {
        boolean ret = true;

        if (ReqParameters::find().ReqInactive 
            && (_type == SalesDeliveryDateControlType::CTP
            || (_type == SalesDeliveryDateControlType::FullRunCTP
            &&   MpsReqInactiveCTPValidationFlight::instance().isEnabled())))
        {
            ret = checkFailed("@SCM:ReqParametersFormWarning");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = this.InventItemOrderSetupMap::validateWrite();
        ret = ret && super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the sales order settings of the item exist.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID.
    /// </param>
    /// <param name="_inventDimId">
    ///    The inventory dimension ID.
    /// </param>
    /// <returns>
    ///    true if the sales order settings of the item exist; otherwise, false.
    /// </returns>

    static boolean exist(
        ItemId          _itemId,
        InventDimId     _inventDimId)
    {
        return _itemId && _inventDimId && (select firstonly inventItemSalesSetup
                                            where   inventItemSalesSetup.ItemId         == _itemId &&
                                                    inventItemSalesSetup.InventDimId    == _inventDimId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the first sales order settings of the specified item matching the inventory dimensions criteria.
    /// </summary>
    /// <param name="_itemId">
    ///    The number of the item for which to find settings.
    /// </param>
    /// <param name="_inventDimId">
    ///    The inventory dimension ID that defines the criteria for which to find settings.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that specifies whether to select the returning record for update; optional.
    /// </param>
    /// <returns>
    ///    The sales order settings of the specified item.
    /// </returns>
    static InventItemSalesSetup find(
        ItemId          _itemId,
        InventDimId     _inventDimId,
        boolean         _forUpdate      = false)
    {
        InventItemSalesSetup    inventItemSalesSetup;

        inventItemSalesSetup = InventItemOrderSetupMap::findRecord(inventItemSalesSetup, _itemId, _inventDimId, _forUpdate);

        return inventItemSalesSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByItemIdAndInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the sales order settings for the specified item and inventory dimensions.
    /// </summary>
    /// <param name="_itemId">
    ///    The number of the item for which to find settings.
    /// </param>
    /// <param name="_inventDimId">
    ///    The inventory dimension ID for which to find settings.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that specifies whether to select the returning record for update; optional.
    /// </param>
    /// <returns>
    ///    The sales order settings of the specified item.
    /// </returns>
    internal static InventItemSalesSetup findByItemIdAndInventDimId(
        ItemId          _itemId,
        InventDimId     _inventDimId,
        boolean         _forUpdate = false)
    {
        InventItemSalesSetup inventItemSalesSetup;

        if (_itemId
            && _inventDimId)
        {
            inventItemSalesSetup.selectForUpdate(_forUpdate);

            select firstonly inventItemSalesSetup
                where   inventItemSalesSetup.ItemId         == _itemId
                     && inventItemSalesSetup.InventDimId    == _inventDimId;
        }

        return inventItemSalesSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the sales order settings of the default item.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that specifies whether to select the returning record for update; optional.
    /// </param>
    /// <param name="_inventTable">
    ///    An <c>InventTable</c> buffer is used to verify whether the multisite has been enabled; optional.
    /// </param>
    /// <returns>
    ///    The sales order settings of the default item.
    /// </returns>
    /// <remarks>
    ///    The default inventory dimension ID is used to find the order settings of the default item.
    /// </remarks>

    static public InventItemSalesSetup findDefault(
        ItemId          _itemId,
        boolean         _forUpdate      = false,
        InventTable     _inventTable    = null)
    {
        return InventItemSalesSetup::find(_itemId,
                                          InventDim::inventDimIdBlank(),
                                          _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDefault</Name>
				<Source><![CDATA[
    static public InventItemSalesSetup insertDefault(ItemId _itemId)
    {
        InventItemSalesSetup    inventItemSalesSetup;
        InventDimId             inventDimIdBlank = InventDim::inventDimIdBlank();

        inventItemSalesSetup.ItemId             = _itemId;
        inventItemSalesSetup.InventDimId        = inventDimIdBlank;
        inventItemSalesSetup.InventDimIdDefault = inventDimIdBlank;

        inventItemSalesSetup.initValue();

        inventItemSalesSetup.insert();

        return inventItemSalesSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetDfltCombination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>InventDim</c> combination record that
    /// has the default site and the sites default warehouse.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of the item the default site and warehouse are being
    /// returned for.
    /// </param>
    /// <returns>
    /// The default site and sites default warehouse <c>InventDim</c>.
    /// </returns>
    public static InventDim mcrGetDfltCombination(ItemId _itemId)
    {
        InventDim               inventDim;
        InventItemSalesSetup    inventItemSalesSetup;
        InventSiteId            inventSiteId;
        InventLocationId        inventLocationId;

        inventItemSalesSetup = InventItemSalesSetup::findDefault(_itemId);
        if (inventItemSalesSetup)
        {
            inventSiteId = inventItemSalesSetup.inventSiteId();
            // Then get the default warehouse for the site
            inventItemSalesSetup = InventItemSalesSetup::find(_itemId, inventItemSalesSetup.InventDimIdDefault);
            inventLocationId = inventItemSalesSetup.inventLocationId();
            if (inventLocationId)
            {
                inventDim.InventSiteId = inventSiteId;
                inventDim.InventLocationId = inventLocationId;
                inventDim = InventDim::findOrCreate(inventDim);
            }
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventItemInventSetup</Name>
				<Source><![CDATA[
    public InventItemInventSetup InventItemInventSetup(InventItemInventSetup _relatedTable = null)
        {
            if (prmIsDefault(_relatedTable))
            {
                return this.setLink('InventItemInventSetup');
            }
            else
            {
                return this.setLink('InventItemInventSetup', _relatedTable);
            }
        }

]]></Source>
			</Method>
			<Method>
				<Name>InventItemPurchSetup</Name>
				<Source><![CDATA[
    public InventItemPurchSetup InventItemPurchSetup(InventItemPurchSetup _relatedTable = null)
    {
        if (prmIsDefault(_relatedTable))
        {
            return this.setLink('InventItemPurchSetup');
        }
        else
        {
            return this.setLink('InventItemPurchSetup', _relatedTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default warehouse for the specified item in the sales process.
    /// </summary>
    /// <param name="_itemId">The item number.</param>
    /// <returns>The default warehouse for the specified item in the sales process.</returns>
    public static InventLocation defaultInventLocation(ItemId _itemId)
    {
        return InventItemOrderSetupMap::defaultInventLocation(_itemId, InventItemOrderSetupType::Sales);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        this.InventItemOrderSetupMap::modifiedFieldValue(_fieldName, _arrayIndex);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editSalesLeadTimeOverride</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edit method for Override sales lead time.
    /// </summary>
    /// <param name = "_set">Determines if a new value should be set.</param>
    /// <param name = "_value">The value to set.</param>
    /// <returns>True if the sales lead time is marked for override; otherwise, false.</returns>
    public edit NoYes editSalesLeadTimeOverride(boolean _set, NoYes _value)
    {
        boolean override;

        if (_set)
        {
            override = _value;
            this.OverrideSalesLeadTime = _value;
        }
        else
        {
            if (this.isDefault())
            {
                override = this.OverrideSalesLeadTime;
            }
            else
            {
                override = this.Override;
            }
        }

        return override;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        ret = ret && this.InventItemOrderSetupMap::validateDelete();

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124022</DeveloperDocumentation>
	<FormRef>InventItemOrderSetup</FormRef>
	<Label>@SYS110756</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>InventDimId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ItemDimIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>ItemDimIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>InventItemPurchSetup</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventItemPurchSetup</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimIdDefault</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MandatoryInventSite</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MandatoryInventLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Override</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeliveryControl</Name>
			<Label>@SYS88259</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryDateControlType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ATPTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ATPBackwardDemandTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ATPBackwardSupplyTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ATPApplyDemandTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ATPApplySupplyTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ATPInclPlannedOrders</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeliveryControlEdit</Name>
			<Label>@SYS88259</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>editDeliveryDateControlType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editATPTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editATPBackwardDemandTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editATPBackwardSupplyTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editATPApplyDemandTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editATPApplySupplyTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editATPInclPlannedOrders</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS19924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDimIdDefault</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MandatoryInventSite</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MandatoryInventLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Override</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideSalesLeadTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LeadTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Stopped</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OtherEdit</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>editLeadTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editStopped</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCWQuantityEdit</Name>
			<Label>@PDS1448</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>editPdsCWMultipleQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editPdsCWLowestQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editPdsCWHighestQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editPdsCWStandardQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWUnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Quantity</Name>
			<Label>@SYS11990</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MultipleQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LowestQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HighestQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StandardQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>QuantityEdit</Name>
			<Label>@SYS11990</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>editMultipleQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editLowestQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editHighestQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editStandardQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsSalesUnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ATPApplyDemandTimeFence</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesATPApplyDemandTimeFence</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ATPApplySupplyTimeFence</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesATPApplySupplyTimeFence</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ATPBackwardDemandTimeFence</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesATPBackwardDemandTimeFence</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ATPBackwardSupplyTimeFence</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesATPBackwardSupplyTimeFence</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ATPInclPlannedOrders</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesATPInclPlannedOrders</ExtendedDataType>
			<EnumType>boolean</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ATPTimeFence</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesATPTimeFence</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DeliveryDateControlType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SalesDeliveryDateControlType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>HighestQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>QtyHighest</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimIdDefault</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LeadTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeadTimeSalesDefault</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LowestQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>QtyLowest</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MandatoryInventLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS22408</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MandatoryInventSite</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS110751</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MultipleQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>QtyMultiples</ExtendedDataType>
			<Label>@SCM:Field_MultipleQty</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Override</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Override</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideSalesLeadTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS138290</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>StandardQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>QtyStandard</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Stopped</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemStopped</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Sequence</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventItemSetupSequence</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideDefaultStorageDimensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventItemOverrideDefaultStorageDimensions</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemDimIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemStoppedIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Stopped</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Override</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemSequenceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Sequence</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>InventItemOrderSetupMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimIdDefault</MapField>
					<MapFieldTo>InventDimIdDefault</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MandatoryInventSite</MapField>
					<MapFieldTo>MandatoryInventSite</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MandatoryInventLocation</MapField>
					<MapFieldTo>MandatoryInventLocation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultipleQty</MapField>
					<MapFieldTo>MultipleQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LowestQty</MapField>
					<MapFieldTo>LowestQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>HighestQty</MapField>
					<MapFieldTo>HighestQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StandardQty</MapField>
					<MapFieldTo>StandardQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LeadTime</MapField>
					<MapFieldTo>LeadTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CalendarDays</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Stopped</MapField>
					<MapFieldTo>Stopped</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Override</MapField>
					<MapFieldTo>Override</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Sequence</MapField>
					<MapFieldTo>Sequence</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OverrideDefaultStorageDimensions</MapField>
					<MapFieldTo>OverrideDefaultStorageDimensions</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesATPSettingsMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ATPBackwardSupplyTimeFence</MapField>
					<MapFieldTo>ATPBackwardSupplyTimeFence</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPBackwardDemandTimeFence</MapField>
					<MapFieldTo>ATPBackwardDemandTimeFence</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPApplyDemandTimeFence</MapField>
					<MapFieldTo>ATPApplyDemandTimeFence</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPApplySupplyTimeFence</MapField>
					<MapFieldTo>ATPApplySupplyTimeFence</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPInclPlannedOrders</MapField>
					<MapFieldTo>ATPInclPlannedOrders</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPTimeFence</MapField>
					<MapFieldTo>ATPTimeFence</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryDateControlType</MapField>
					<MapFieldTo>DeliveryDateControlType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsItemSpecific</MapField>
					<MapFieldTo>Override</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultInventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultInventDim</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventItemSalesSetup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimIdDefault</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimIdDefault</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123902</EntityRelationshipRole>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventDim</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventItemSalesSetup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventItemInventSetup</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<EntityRelationshipRole>@SYS124019</EntityRelationshipRole>
			<RelatedTable>InventItemInventSetup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>InventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventItemPurchSetup</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<EntityRelationshipRole>@SYS124023</EntityRelationshipRole>
			<RelatedTable>InventItemPurchSetup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>InventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>