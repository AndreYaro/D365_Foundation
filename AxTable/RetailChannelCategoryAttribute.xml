<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailChannelCategoryAttribute</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailChannelCategoryAttribute extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a unique key that identifies an attribute.
    /// </summary>
    /// <param name = "_attribute">Attribute buffer.</param>
    /// <param name = "_hostChannel">Host channel rec id</param>
    /// <param name = "_category">Product category rec id.</param>
    /// <returns>Retail Attribute key.</returns>
    public static RetailAttributeKeyName createKey(EcoResAttribute _attribute, RefRecId _hostChannel, RefRecId _category)
    {
        RetailChannelCategoryAttribute foundCategoryAttribute;
        RetailAttributeKeyName rawKeyName, keyName;
        int suffix = 2;

        // Create an unique attribute key (inside the category)
        rawKeyName = strRem(_attribute.Name, ' .,;/-:\\+_'); // Removes any punctunations from the name.
        keyName = rawKeyName;

        do
        {
            select firstOnly foundCategoryAttribute
                        where foundCategoryAttribute.HostChannel == _hostChannel
                           && foundCategoryAttribute.Category == _category
                           && foundCategoryAttribute.KeyName == keyName;

            // This key name has been used
            if (foundCategoryAttribute.RecId > 0)
            {
                keyName = rawKeyName + int2str(suffix);
                suffix ++;
            }
        } while (foundCategoryAttribute.RecId > 0);

        return keyName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add a category attribute to a hosting channel if it does not exist
    /// </summary>
    /// <param name="_hostChannel">
    /// Host channel Id
    /// </param>
    /// <param name="_category">
    /// Product category Id
    /// </param>
    /// <param name="_attribute">
    /// Category attribute Id
    /// </param>
    public static void add(RefRecId _hostChannel, RefRecId _category, RefRecId _attribute)
    {
        RetailChannelCategoryAttribute channelCategoryAttribute;
        EcoResAttribute attribute;

        channelCategoryAttribute = RetailChannelCategoryAttribute::findByIds(_hostChannel, _category, _attribute);

        // Create the record if not exist
        if (channelCategoryAttribute.RecId == 0)
        {
            // Get the attribute name
            attribute = EcoResAttribute::find(_attribute);

            if (attribute.RecId > 0 && strLen(attribute.Name) > 0)
            {
                // Insert record
                channelCategoryAttribute.HostChannel = _hostChannel;
                channelCategoryAttribute.Category = _category;
                channelCategoryAttribute.Attribute = _attribute;
                channelCategoryAttribute.KeyName
                    = RetailChannelCategoryAttribute::createKey(attribute, _hostChannel, _category);
                channelCategoryAttribute.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a channel category attribute by Ids
    /// </summary>
    /// <param name="_hostChannel">
    /// Host channel Id
    /// </param>
    /// <param name="_category">
    /// Product category Id
    /// </param>
    /// <param name="_attribute">
    /// Attribute Id
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>RetailChannelCategoryAttribute</c> table; otherwise, an empty buffer.
    /// </returns>
    public static RetailChannelCategoryAttribute findByIds(RefRecId _hostChannel, RefRecId _category, RefRecId _attribute, boolean _forupdate = false)
    {
        RetailChannelCategoryAttribute channelCategoryAttribute;

        channelCategoryAttribute.selectForUpdate(_forupdate);

        select firstOnly channelCategoryAttribute
            where channelCategoryAttribute.HostChannel == _hostChannel
               && channelCategoryAttribute.Category == _category
               && channelCategoryAttribute.Attribute == _attribute;

        return channelCategoryAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateChannelCategoryAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate category attributes for a channel
    /// </summary>
    /// <param name="_channel">
    /// Channel Id
    /// </param>
    public static void populateChannelCategoryAttributes(RefRecId _channel)
    {
        RefRecId categoryHierarchyId;
        RetailChannelCategoryAttribute channelCategoryAttribute;
        EcoResCategoryAttributeGroupAttribute categoryAttributeGroupAttribute;
        EcoResCategoryInstanceValue categoryInstanceValue;
        EcoResAttributeValue attributeValue;
        EcoResCategoryAttributeGroupCollapsed categoryAttributeGroupCollapsed;
        EcoResAttributeGroupAttribute attributeGroupAttribute;
        RetailSharedParameters sharedParameters;
        EcoResAttributeGroupAttribute categoryDefaultAttributeGroupAttribute;
        EcoResCategory category;
        RetailInternalOrganization retailInternalOrganization;
        EcoResAttributeGroupAttribute ecoResAttributeGroupAttribute;
        EcoResAttributeDefaultValue attributeDefaultValue;
        EcoResValueRecId value;
        ttsBegin;

        // Find category hierarchy of the channel
        retailInternalOrganization = RetailInternalOrganization::findByChannelId(_channel);
        categoryHierarchyId = RetailInternalOrgCatHierarchyCollapsed::findByInternalOrganization(retailInternalOrganization.RecId).CategoryHierarchy;

        if (categoryHierarchyId > 0)
        {
            select firstOnly CategoryDefaultAttributeGroup from sharedParameters;

            // Remove the channel category attributes which category does not belong to the current category hierarchy
            delete_from channelCategoryAttribute
                where channelCategoryAttribute.HostChannel == _channel
                notExists join category
                    where category.RecId == channelCategoryAttribute.Category
                       && category.CategoryHierarchy == categoryHierarchyId;
            
            // Remove the channel category attributes which are no longer associated with the channel.
            // When this flight is enabled, Code will execute the standard orginal code of  while select to delete the 
            // non associated channel category attributes, basically this original fix will only delete the non associated channel category attributes where as
            // delete_from fix in else part is introduced in bug#425490, will delete the records of table RetailChannelCategoryAttributes and RetailPubRetailChannelCategoryAttribute and EcoResValue and recreates it.
            if (RetailCategoryDeleteOnlyNonAssoicatedChannelCategoryAttributesFlight::instance().isEnabled())
            {
                // Remove the channel category attributes which are no longer associated with the channel
                while select forUpdate channelCategoryAttribute
                    where channelCategoryAttribute.HostChannel == _channel
                    notexists join categoryAttributeGroupAttribute
                        where categoryAttributeGroupAttribute.CategoryHierarchy == categoryHierarchyId
                           && categoryAttributeGroupAttribute.Category == channelCategoryAttribute.Category
                           && categoryAttributeGroupAttribute.Attribute == channelCategoryAttribute.Attribute
                {
                    // Check whether the attribute belongs to the category default attribute group
                    // (Attributes from the category default attribute group always associate with any category)
                    select firstOnly categoryDefaultAttributeGroupAttribute
                        where categoryDefaultAttributeGroupAttribute.AttributeGroup == sharedParameters.CategoryDefaultAttributeGroup
                           && categoryDefaultAttributeGroupAttribute.Attribute == channelCategoryAttribute.Attribute;

                    if (!categoryDefaultAttributeGroupAttribute)
                    {
                        channelCategoryAttribute.delete();
                    }
                }
            }
            else
            {
                delete_from channelCategoryAttribute
                where channelCategoryAttribute.HostChannel == _channel
                notexists join categoryAttributeGroupAttribute
                    where categoryAttributeGroupAttribute.CategoryHierarchy == categoryHierarchyId
                       && categoryAttributeGroupAttribute.Category == channelCategoryAttribute.Category
                       && categoryAttributeGroupAttribute.Attribute == channelCategoryAttribute.Attribute
                       && categoryAttributeGroupAttribute.AttributeGroup == sharedParameters.CategoryDefaultAttributeGroup;
            }
                      
            // Insert attributes from the category attribute groups for each category
            while select Category, Attribute from categoryAttributeGroupAttribute
                    where categoryAttributeGroupAttribute.CategoryHierarchy == categoryHierarchyId
                notExists join channelCategoryAttribute
                    where channelCategoryAttribute.HostChannel == _channel
                        && channelCategoryAttribute.Category == categoryAttributeGroupAttribute.Category
                        && channelCategoryAttribute.Attribute == categoryAttributeGroupAttribute.Attribute
            {
                RetailChannelCategoryAttribute::add(_channel, categoryAttributeGroupAttribute.Category, categoryAttributeGroupAttribute.Attribute);
            }

            // Insert rich media attributes from the category default attribute group for each category
            while select AttributeGroup, Attribute from  categoryDefaultAttributeGroupAttribute
                    where categoryDefaultAttributeGroupAttribute.AttributeGroup == sharedParameters.CategoryDefaultAttributeGroup
                            join CategoryHierarchy, RecId from category
                                where category.CategoryHierarchy == categoryHierarchyId
                                notExists join channelCategoryAttribute
                                    where channelCategoryAttribute.HostChannel == _channel
                                       && channelCategoryAttribute.Category == category.RecId
                                       && channelCategoryAttribute.Attribute == categoryDefaultAttributeGroupAttribute.Attribute
            {
                RetailChannelCategoryAttribute::add(_channel, category.RecId, categoryDefaultAttributeGroupAttribute.Attribute);
            }

            // Update values of category attributes
            while select forUpdate channelCategoryAttribute
                where channelCategoryAttribute.HostChannel == _channel
            {
                // Find the current attribute value
                select RecId, Category, BuyingLegalEntity from categoryInstanceValue
                    where categoryInstanceValue.Category == channelCategoryAttribute.Category
                        && categoryInstanceValue.BuyingLegalEntity == 0
                    join firstOnly RecId, InstanceValue, Attribute, Value from attributeValue
                    where attributeValue.InstanceValue == categoryInstanceValue.RecId
                        && attributeValue.Attribute == channelCategoryAttribute.Attribute;

                if (attributeValue.RecId > 0)
                {
                    // Update the attribute value if it has been changed
                    if (channelCategoryAttribute.AttributeValue != attributeValue.Value)
                    {
                        channelCategoryAttribute.AttributeValue = attributeValue.Value;
                        channelCategoryAttribute.update();
                    }
                }
                else
                {
                    // Find the default attribute value
                    select firstOnly Category, AttributeGroup from categoryAttributeGroupCollapsed
                        where categoryAttributeGroupCollapsed.Category == channelCategoryAttribute.Category
                        join RecId, AttributeGroup, Attribute, DefaultValue from attributeGroupAttribute
                            where attributeGroupAttribute.AttributeGroup == categoryAttributeGroupCollapsed.AttributeGroup
                               && attributeGroupAttribute.Attribute == channelCategoryAttribute.Attribute
                               && attributeGroupAttribute.DefaultValue != 0;

                    value = 0;

                    if (attributeGroupAttribute.RecId > 0)
                    {
                        value = attributeGroupAttribute.DefaultValue;
                    }
                    else
                    {
                        // update the Image/Video default attribute value.
                        ecoResAttributeGroupAttribute = EcoResAttributeGroupAttribute::findByGroupAndAttribute(sharedParameters.CategoryDefaultAttributeGroup, channelCategoryAttribute.Attribute);

                        if (ecoResAttributeGroupAttribute.RecId)
                        {
                            value = ecoResAttributeGroupAttribute.DefaultValue;
                        }

                        if (!value)
                        {
                            // Find attribute default value.
                            attributeDefaultValue = EcoResAttributeDefaultValue::findByAttribute(channelCategoryAttribute.Attribute);
                            if (attributeDefaultValue)
                            {
                                value = attributeDefaultValue.Value;
                            }
                        }
                    }

                    if (channelCategoryAttribute.AttributeValue != value)
                    {
                        channelCategoryAttribute.AttributeValue = value;
                        channelCategoryAttribute.update();
                    }
                }
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove a category attribute form a hosting channel if it exists
    /// </summary>
    /// <param name="_hostChannel">
    /// Host channel Id
    /// </param>
    /// <param name="_category">
    /// Product category Id
    /// </param>
    /// <param name="_attribute">
    /// Category attribute Id
    /// </param>
    public static void remove(RefRecId _hostChannel, RefRecId _category, RefRecId _attribute)
    {
        RetailChannelCategoryAttribute channelCategoryAttribute;

        channelCategoryAttribute = RetailChannelCategoryAttribute::findByIds(_hostChannel, _category, _attribute, true);

        // Delete the record if exist
        if (channelCategoryAttribute.RecId > 0)
        {
            channelCategoryAttribute.delete();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET261218</DeveloperDocumentation>
	<Label>@RET261226</Label>
	<TitleField1>Category</TitleField1>
	<TitleField2>Attribute</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>ChannelManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Attribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HostChannel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KeyName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ChannelCategoryAttribute</Name>
			<Label>@RET261226</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Attribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HostChannel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KeyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Attribute</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AttributeValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Category</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HostChannel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>KeyName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailAttributeKeyName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ChannelCategoryAttributeKeyName</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>HostChannel</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Category</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>KeyName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ChannelCategoryAttribute</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>HostChannel</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Category</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Attribute</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResAttribute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>EcoResAttribute</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Attribute</Name>
					<Field>Attribute</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Category</Name>
					<Field>Category</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResValue</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>EcoResValue</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AttributeValue</Name>
					<Field>AttributeValue</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailChannelTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>RetailChannelTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HostChannel</Name>
					<Field>HostChannel</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>