<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceAutomationInvoicesInWorkflowSubmission</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendInvoiceAutomationInvoicesInWorkflowSubmission extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>removeStaleSubmissionRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes all invoice submission records that are determined to be stuck in submission.
    /// </summary>
    internal static void removeStaleSubmissionRecords()
    {
        const int MaximumRetryNumber = 3;

        int hoursBeforeWorkflowSubmissionBecomesStale = VendParameters::getHoursBeforeAutomaticWorkflowSubmissionsBecomeStale();
        int waitBetweenRetries = VendInvoiceAutomationInvoicesInWorkflowSubmission::calculateRandomWaitTimeBetweenRetries();
        utcdatetime currentDateTime = VendInvoiceAutomationInvoicesInWorkflowSubmission::getCurrentDateTime();

        utcdatetime timeAtWhichSubmissionRecordsBecomeStale = DateTimeUtil::addHours(
            currentDateTime,
            (0 - HoursBeforeWorkflowSubmissionBecomesStale));

        VendInvoiceAutomationInvoicesInWorkflowSubmission invoicesInSubmission;

        VendInvoiceAutomationInstrumentationDbErrorProperties errorProperties =
            VendInvoiceAutomationInstrumentationDbErrorProperties::constructFromActivityContext(
            VendInvoiceAutomationInstrumentationWorkflowSubmissionActivities::createFromLoggerName(
            tableStr(VendInvoiceAutomationInvoicesInWorkflowSubmission)).removeStaleSubmissionRecordsContext());

        try
        {
            ttsbegin;

            delete_from invoicesInSubmission
                where invoicesInSubmission.CreatedDateTime <= timeAtWhichSubmissionRecordsBecomeStale;

            ttscommit;
        }
        catch (Exception::Error)
        {
            errorProperties.errorProperty(invoicesInSubmission.VendInvoiceRecId);
        }
        catch (Exception::Deadlock)
        {
            int currentRetryCount = xSession::currentRetryCount();

            if (currentRetryCount < MaximumRetryNumber)
            {
                sleep(currentRetryCount * waitBetweenRetries);
                retry;
            }
            else
            {
                errorProperties.deadLockProperty(invoicesInSubmission.VendInvoiceRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentDateTime</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static utcdatetime getCurrentDateTime()
    {
        return DateTimeUtil::utcNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeSubmissionRecordsFor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes all given invoices from the automatic workflow submission work table,
    /// freeing up these invoices to be picked up by a future workflow submission process
    /// if applicable.
    /// </summary>
    /// <param name = "_invoicesToRemove">A temp table containing invoice RecIds to remove.</param>
    internal static void removeSubmissionRecordsFor(VendInvoiceAutomationInvoiceTmp _invoicesToRemove)
    {
        const int MaximumRetryNumber = 3;
        int waitBetweenRetries = VendInvoiceAutomationInvoicesInWorkflowSubmission::calculateRandomWaitTimeBetweenRetries();

        VendInvoiceAutomationInstrumentationDbErrorProperties errorProperties =
            VendInvoiceAutomationInstrumentationDbErrorProperties::constructFromActivityContext(
            VendInvoiceAutomationInstrumentationWorkflowSubmissionActivities::createFromLoggerName(
            tableStr(VendInvoiceAutomationInvoicesInWorkflowSubmission)).removeSubmissionRecordsContext());

        try
        {
            VendInvoiceAutomationInvoicesInWorkflowSubmission invoicesInSubmission;

            ttsbegin;

            delete_from invoicesInSubmission
                exists join _invoicesToRemove
                    where _invoicesToRemove.VendInvoiceRecId == invoicesInSubmission.VendInvoiceRecId;

            ttscommit;
        }
        catch (Exception::Error)
        {
            errorProperties.errorProperty(_invoicesToRemove.VendInvoiceRecId);
        }
        catch (Exception::Deadlock)
        {
            int currentRetryCount = xSession::currentRetryCount();

            if (currentRetryCount < MaximumRetryNumber)
            {
                sleep(currentRetryCount * waitBetweenRetries);
                retry;
            }
            else
            {
                errorProperties.deadLockProperty(_invoicesToRemove.VendInvoiceRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateRandomWaitTimeBetweenRetries</Name>
				<Source><![CDATA[
    private static int calculateRandomWaitTimeBetweenRetries()
    {
        return RandomGenerate::construct().randomInt(50, 1000);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@AccountsPayable:VendInvoiceAutomationInvoicesInWorkflowSubmissionDevDoc</DeveloperDocumentation>
	<Label>@AccountsPayable:VendInvoiceAutomationInvoicesInWorkflowSubmissionLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>VendInvoiceRecId</TitleField1>
	<Visibility>Internal</Visibility>
	<CreatedDateTime>Yes</CreatedDateTime>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendInvoiceRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VendInvoiceRecId</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VendInvoiceRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>