<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailStoreTenderTypeCardTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailStoreTenderTypeCardTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the name of the ledger dimension based on the account type as bank or l1edger.
    /// </summary>
    /// <returns>
    /// The name of the ledger dimension based on the account type.
    /// </returns>
    display Name accountName()
    {
        return this.getAccountName(this.AccountType, this.LedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the caption for the tender type.
    /// </summary>
    /// <returns>
    /// The tender type details.
    /// </returns>
    public str caption()
    {
        str ret;
        RetailStoreTenderTypeTable tenderType;

        ret = super();

        tenderType = RetailStoreTenderTypeTable::find(this.Channel, this.TenderTypeId);

        if (tenderType)
            ret = strFmt("%1,%2,%3",tenderType.TenderTypeId,tenderType.Name,this.CardTypeId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountName</Name>
				<Source><![CDATA[
    private AccountName getAccountName(RetailAccountType _accountType, DimensionDynamicDefaultAccount _ledgerDimension)
    {
        Name ret;

        switch (_accountType)
        {
            case RetailLedgerBank::Ledger:
                ret = MainAccount::findByLedgerDimension(_ledgerDimension).localizedName();
                break;

            case RetailLedgerBank::Bank:
                ret = BankAccountTable::findByLedgerDimension(_ledgerDimension).Name;
                break;

            default:
                ret = RetailPaymentExtensions::accountNameForAccountType(_accountType, _ledgerDimension);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cardFeeAccountName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the account name for the card fee ledger dimension.
    /// </summary>
    /// <returns>
    /// The account name for the card fee ledger dimension.
    /// </returns>
    display AccountName cardFeeAccountName()
    {
        return this.getAccountName(this.cardFeeAccountType, this.CardFeeLedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cardFeeOffsetAccountName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the account name for the card fee offset ledger dimension.
    /// </summary>
    /// <returns>
    /// The account name for the card fee offset ledger dimension.
    /// </returns>
    display AccountName cardFeeOffsetAccountName()
    {
        return this.getAccountName(this.cardFeeOffsetAccountType, this.CardFeeOffsetLedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>differenceAccountForBigDifferenceName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the account name for the big difference account ledger dimension.
    /// </summary>
    /// <returns>
    /// The account name for the big difference account ledger dimension.
    /// </returns>
    display AccountName differenceAccountForBigDifferenceName()
    {
        return MainAccount::findByLedgerDimension(this.DiffAccBigDiffLedgerDimension).localizedName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>differenceAccountName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the account name for the difference account ledger dimension.
    /// </summary>
    /// <returns>
    /// The account name for the difference account ledger dimension.
    /// </returns>
    display AccountName differenceAccountName()
    {
        return MainAccount::findByLedgerDimension(this.DifferenceAccLedgerDimension).localizedName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>errorOnRename</c> method of the <c>RetailConnActionManagement</c> class.
    /// </summary>
    /// <remarks>
    /// An error is thrown when you rename the record if the distribution type is other than
    /// <c>NoDistribution</c>.
    /// </remarks>
    public void renamePrimaryKey()
    {
        ;
        RetailConnActionManagement::errorOnRename(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccountType_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates account type.
    /// </summary>
    /// <returns>
    /// true if account type is valid; otherwise, false.
    /// </returns>
    public boolean validateAccountType_RU()
    {
        if (this.AccountType == RetailLedgerBank::RCash)
        {
            return checkFailed(
                strFmt("@SYS4002025", this.AccountType, RetailTenderFunction::Normal, RetailTenderFunction::TenderRemoveFloat));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCardTypeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the payment method and updates the ledger dimension details.
    /// </summary>
    /// <returns>
    /// true if payment method is card; otherwise false.
    /// </returns>
    boolean validateCardTypeId()
    {
        RetailStoreTenderTypeTable tenderType;

        tenderType = RetailStoreTenderTypeTable::find(this.Channel, this.TenderTypeId);

        if (tenderType)
        {
            if (tenderType.function != RetailTenderFunction::Card && tenderType.function != RetailTenderFunction::Wallet)
            {
                return checkFailed(strFmt("@RET4054",this.TenderTypeId));
            }

            this.LedgerDimension = tenderType.LedgerDimension;
            this.AccountType = tenderType.AccountType;
            this.DifferenceAccLedgerDimension = tenderType.DifferenceAccLedgerDimension;
            this.CountingRequired = tenderType.CountingRequired;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (fieldExt2Id(_fieldIdToCheck))
            {
                case fieldNum(RetailStoreTenderTypeCardTable, CardTypeId):
                    ret = this.validateCardTypeId();
                    break;
                case fieldNum(RetailStoreTenderTypeCardTable, AccountType):
                    // <GEERU>
                    ret = this.validateAccountType_RU();
                    if (!ret)
                        break;
                    // </GEERU>
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        RetailChannelTable          retailChannelTable;
        RetailStoreTenderTypeTable  retailStoreTenderTypeTable;
        RetailTenderTypeCardTable   retailTenderTypeCardTable;
        DimensionAttributeValue     dimensionAttributeValue;
        
        const int payByGiftPOSOperationId = 214;
        boolean ret;

        ret = super();

        select retailStoreTenderTypeTable
            where retailStoreTenderTypeTable.Channel == this.Channel &&
                retailStoreTenderTypeTable.tenderTypeId == this.tenderTypeId &&
                retailStoreTenderTypeTable.posOperation == payByGiftPOSOperationId;

        // If the card types are being added to a payment method related to a gift card operation
        // And if the card types are not GiftCard types throw a validation error.
        if (retailStoreTenderTypeTable)
        {
            select firstOnly retailTenderTypeCardTable
                where retailTenderTypeCardTable.cardTypeId == this.cardTypeId &&
                    retailTenderTypeCardTable.cardTypes != RetailCardTypesBase::GiftCard;

            if (retailTenderTypeCardTable)
            {
                return checkFailed("@Retail:GiftCardRelatedPaymentMethod"); // This is gift card related payment method.
                // Please remove card types that are not gift cards from the card setup and try again.
            }
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)) && this.Channel)
        {
            retailChannelTable = RetailChannelTable::findByRecId(this.Channel);

            if (retailChannelTable && retailChannelTable.ChannelType == RetailChannelType::MCRCallCenter)
            {
                // Account is required for call center
                if (this.LedgerDimension && MainAccount::isBlockedForManualEntryByLedgerDimension(this.LedgerDimension))
                {
                    DimensionDisplayValue dimensionDisplayValue = DimensionAttributeValueCombination::find(this.LedgerDimension).DisplayValue;

                    ret = checkFailed(strFmt("@SYS319027", dimensionDisplayValue));
                }
            }
        }

        if (this.countingRequired && RetailTenderTypeCardSkipCountingRequiredToggle::instance().isEnabled())
        {
            return checkFailed("@Retail:CountingRequiredNotSupportedForCardType");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in <c>RetailStoreTenderTypeCardTable</c> table.
    /// </summary>
    /// <param name="_channel">
    /// Identification of channel.
    /// </param>
    /// <param name="_tenderTypeId">
    /// Identification of tender type.
    /// </param>
    /// <param name="_cardTypeId">
    /// Identification of card type.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailStoreTenderTypeCardTable</c> table; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    /// _storeId parameter was replaced with _channel in AX 2012 R3.
    /// </remarks>
    public static RetailStoreTenderTypeCardTable find(RetailChannelRecId _channel, RetailTenderTypeId _tenderTypeId, RetailCardTypeId _cardTypeId, boolean _forUpdate = false)
    {
        RetailStoreTenderTypeCardTable storeTenderTypeCardTable;

        if (_channel && _tenderTypeId && _cardTypeId)
        {
            storeTenderTypeCardTable.selectForUpdate(_forUpdate);

            select firstonly storeTenderTypeCardTable
                index hint storeTenderCardIdx
                where storeTenderTypeCardTable.Channel == _channel
                   && storeTenderTypeCardTable.TenderTypeId == _tenderTypeId
                   && storeTenderTypeCardTable.CardTypeId == _cardTypeId;
        }

        return storeTenderTypeCardTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByChannelAndCardType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds 'best match' record in <c>RetailStoreTenderTypeCardTable</c> table based on Channel and Card Type.
    /// </summary>
    /// <param name="_channel">
    /// Identification of channel.
    /// </param>
    /// <param name="_cardTypeId">
    /// Identification of card type.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailStoreTenderTypeCardTable</c> table; otherwise, an empty record.
    /// </returns>
    internal static RetailStoreTenderTypeCardTable findByChannelAndCardType(RetailChannelRecId _channel, RetailCardTypeId _cardTypeId, boolean _forUpdate = false)
    {
        RetailStoreTenderTypeCardTable retailStoreTenderTypeCardTable;

        select firstonly retailStoreTenderTypeCardTable
            where retailStoreTenderTypeCardTable.Channel == _channel
                && retailStoreTenderTypeCardTable.cardTypeId == _cardTypeId;

        retailStoreTenderTypeCardTable.selectLocked(_forUpdate);
        
        return retailStoreTenderTypeCardTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current record is valid and can be deleted from the database.
    /// </summary>
    /// <returns>Return true if the record is valid; otherwise, false.</returns>
    public boolean validateDelete()
    {
        SalesTable salesTable;
        McrCustPaymTable mcrCustPaymTable;

        boolean ret;

        // Prevent deletion of card types if it is referenced by uninvoiced sales orders.
        select firstonly Recid from salesTable
              where (salesTable.SalesStatus != SalesStatus::Invoiced && salesTable.SalesStatus != SalesStatus::Canceled)
              join CardTypeId, RefRecId, RefTableId from mcrCustPaymTable
                             where mcrCustPaymTable.RefRecid == salesTable.Recid
                             && mcrCustPaymTable.RefTableId == salesTable.TableId
                             && mcrCustPaymTable.CardTypeId == this.CardTypeId;

        if (salesTable)
        {
            ret = checkFailed(strFmt("@SYS75284", tablePName(salesTable)));
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCardTypeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first record in the <c>RetailStoreTenderTypeCardTable</c> table based on the card type id.
    /// </summary>
    /// <param name="_cardTypeId">
    /// Identification of card type.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailStoreTenderTypeCardTable</c> table; otherwise, an empty record.
    /// </returns>
    internal static RetailStoreTenderTypeCardTable findByCardTypeId(RetailCardTypeId _cardTypeId, boolean _forUpdate = false)
    {
        RetailStoreTenderTypeCardTable retailStoreTenderTypeCardTable;

        select firstonly retailStoreTenderTypeCardTable
            where retailStoreTenderTypeCardTable.cardTypeId == _cardTypeId;

        retailStoreTenderTypeCardTable.selectLocked(_forUpdate);

        return retailStoreTenderTypeCardTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCardFeeTotalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total card fee that includes the inquiry fee and percentage fee for
    /// the current {transaction, store, terminal, and line number} tuple.
    /// </summary>
    /// <param name = "_cardTypeId">Identification of card type.</param>
    /// <param name = "_store">Identification of the store number.</param>
    /// <param name = "_tenderType">Identification of tender type.</param>
    /// <param name = "_amountCur">The amount in transaction currency.</param>
    /// <param name = "_transactionCount">The transactions count.</param>
    /// <returns>
    /// The amount of total card fees calculated for the current {transaction, store, terminal, and line number} tuple.
    /// </returns>
    public static AmountCur calcCardFeeTotalAmount(RetailCardTypeId _cardTypeId, RetailStoreId _store, RetailTenderTypeId _tenderType, AmountCur _amountCur, int _transactionCount = 1)
    {
        AmountCur   totalCardFeeAmountCur;
        RetailStoreTenderTypeCardTable storeTenderTypeCardTable;
        int decimalPrecision = new SysDictType(extendedTypeNum(AmountCur)).effectivePrecision();
        if (_cardTypeId)
        {
            storeTenderTypeCardTable = RetailStoreTenderTypeCardTable::find(RetailStoreTable::find(_store).RecId,
                                                                         _tenderType,
                                                                         _cardTypeId);
            if (storeTenderTypeCardTable)  // card payments are always in the currency of the store.
            {
                // Add the inquiry fee for all the transactions.
                totalCardFeeAmountCur += storeTenderTypeCardTable.CardInquiryFee * _transactionCount;
                // Add the percentage fee.
                totalCardFeeAmountCur += (storeTenderTypeCardTable.CardFee / 100) * _amountCur;
                // If card fee less than min fee then set min.
                if (totalCardFeeAmountCur < storeTenderTypeCardTable.CardFeeMin && storeTenderTypeCardTable.CardFeeMin)
                    totalCardFeeAmountCur = storeTenderTypeCardTable.CardFeeMin;
                // if card fee greater than max fee then set max.
                if (totalCardFeeAmountCur > storeTenderTypeCardTable.CardFeeMax && storeTenderTypeCardTable.CardFeeMax)
                    totalCardFeeAmountCur = storeTenderTypeCardTable.CardFeeMax;
            }
        }
        return decRound(totalCardFeeAmountCur, decimalPrecision);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET260903</DeveloperDocumentation>
	<FormRef>RetailStoreTenderTypeCardTable</FormRef>
	<Label>@RET3249</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>cardTypeId</TitleField1>
	<TitleField2>name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>storeTenderCardIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Payments</Modules>
	<PrimaryIndex>storeTenderCardIdx</PrimaryIndex>
	<ReplacementKey>storeTenderCardIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>tenderTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>cardTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>accountType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Channel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>tenderTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>cardTypeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Account</Name>
			<Label>@RET3084</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>accountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>accountName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>cardNumberSwiped</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sameCardAllowed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CardFee</Name>
			<Label>@RET4331</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>cardFee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>cardInquiryFee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>cardFeeMax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>cardFeeMin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CardFeeLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>cardFeeAccountName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CardFeeOffsetLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>cardFeeOffsetAccountName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>cardFeeAccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>cardFeeOffsetAccountType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@RET3039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DifferenceAccount</Name>
			<Label>@RET3251</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DifferenceAccLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>differenceAccountName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>maxNormalDifferenceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiffAccBigDiffLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>differenceAccountForBigDifferenceName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>tenderTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>cardTypeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PosIs</Name>
			<Label>@RET2364</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>brokerId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PostingSetup</Name>
			<Label>@RET3252</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>countingRequired</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Setup</Name>
			<Label>@RET3252</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>manualAuthorization</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>enterFleetInfo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>checkModulus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>checkExpiredDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>processLocally</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>allowManualInput</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>cashBackLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsExpirationDateRequired</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPinRequired</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PreapprovalDurationDays</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>accountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailAccountType</ExtendedDataType>
			<EnumType>RetailLedgerBank</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>allowManualInput</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailAllowManualInput</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>brokerId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailBrokerId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>cardFee</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCardFee</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CardFeeLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDynamicDefaultAccount</ExtendedDataType>
			<Label>@RET4333</Label>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>cardFeeMax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCardFeeMax</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>cardFeeMin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCardFeeMin</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CardFeeOffsetLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDynamicDefaultAccount</ExtendedDataType>
			<Label>@RET4602</Label>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>cardInquiryFee</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCardInquiryFee</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>cardNumberSwiped</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCardNumberSwiped</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>cardTypeId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreCardTypeId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>cashBackLimit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@RET4683</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Channel</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailChannelRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>checkExpiredDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCheckExpiredDate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>checkModulus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCheckModulus</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>countingRequired</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCountingRequired</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DiffAccBigDiffLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDynamicDefaultAccount</ExtendedDataType>
			<Label>@RET4327</Label>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DifferenceAccLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDynamicDefaultAccount</ExtendedDataType>
			<Label>@RET3251</Label>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>enterFleetInfo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailEnterFleetInfo</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDynamicDefaultAccount</ExtendedDataType>
			<Label>@RET3330</Label>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>manualAuthorization</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailManualAuthorization</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>maxNormalDifferenceAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailMaxDifferenceAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCardTypeName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>processLocally</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailProcessLocally</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>sameCardAllowed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailSameCardAllowed</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>tenderTypeId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreTenderTypeId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>cardFeeAccountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailAccountType</ExtendedDataType>
			<Label>@Retail:CardFeeAccountType</Label>
			<EnumType>RetailLedgerBank</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>cardFeeOffsetAccountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailAccountType</ExtendedDataType>
			<Label>@Retail:CardFeeOffsetAccountType</Label>
			<EnumType>RetailLedgerBank</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsExpirationDateRequired</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailIsExpirationDateRequired</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPinRequired</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailIsPinRequired</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PreapprovalDurationDays</Name>
			<ExtendedDataType>CreditCardPreapprovalLastNoOfDays</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>storeTenderCardIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Channel</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>tenderTypeId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>cardTypeId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimensionAttributeValueCombinationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimensionAttributeValueCombinationIdx1</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DifferenceAccLedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimensionAttributeValueCombinationIdx2</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DiffAccBigDiffLedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimensionAttributeValueCombinationIdx3</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CardFeeLedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimensionAttributeValueCombinationIdx4</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CardFeeOffsetLedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttributeValueCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttributeValueCombination1</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DifferenceAccLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DifferenceAccLedgerDimension</Name>
					<Field>DifferenceAccLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttributeValueCombination2</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DiffAccBigDiffLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DiffAccBigDiffLedgerDimension</Name>
					<Field>DiffAccBigDiffLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttributeValueCombination3</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CardFeeLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CardFeeLedgerDimension</Name>
					<Field>CardFeeLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttributeValueCombination4</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CardFeeOffsetLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CardFeeOffsetLedgerDimension</Name>
					<Field>CardFeeOffsetLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailChannelTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailChannelTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Channel</Name>
					<Field>Channel</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailStoreTenderTypeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailStoreTenderTypeTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Channel</Name>
					<Field>Channel</Field>
					<RelatedField>Channel</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>tenderTypeId</Name>
					<SourceEDT>RetailStoreTenderTypeId</SourceEDT>
					<Field>tenderTypeId</Field>
					<RelatedField>tenderTypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailTenderTypeCardTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailTenderTypeCardTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>cardTypeId</Name>
					<Field>cardTypeId</Field>
					<RelatedField>cardTypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>