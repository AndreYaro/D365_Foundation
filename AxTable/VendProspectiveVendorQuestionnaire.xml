<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendProspectiveVendorQuestionnaire</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendProspectiveVendorQuestionnaire extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAllQuestionnairesCompletedForProspectiveVendorRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that all questionnaires are completed for the given <c>VendProspectiveVendorRegistration</c> record
    /// </summary>
    /// <param name = "_prospectiveVendorRegistrationRecId">The <c>VendProspectiveVendorRegistrationRecId</c> of the <c>VendProspectiveVendorRegistration</c> associated with the <c>VendProspectiveVendorQuestionnaire</c> records.</param>
    /// <returns>true if the questionnaires are completed; otherwise, false.</returns>
    public static boolean checkAllQuestionnairesCompletedForProspectiveVendorRegistration(VendProspectiveVendorRegistrationRecId _prospectiveVendorRegistrationRecId)
    {
        VendProspectiveVendorQuestionnaire vendProspectiveVendorQuestionnaire;

        if (_prospectiveVendorRegistrationRecId)
        {
            select firstonly vendProspectiveVendorQuestionnaire
                where vendProspectiveVendorQuestionnaire.ProspectiveVendorRegistration == _prospectiveVendorRegistrationRecId
                    && vendProspectiveVendorQuestionnaire.QuestionnaireResponse == '';
        }

        return (vendProspectiveVendorQuestionnaire) ? checkFailed("@SCM:ProspectiveVendorRegistrationIncompleteQuestionnaire") : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProspectiveVendorRegistrationQuestionnaires</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>VendProspectiveVendorQuestionnaire</c> records associated with the given <c>VendProspectiveVendorRegistration</c> record.
    /// </summary>
    /// <param name = "_prospectiveVendorRegistrationRecId">The <c>VendProspectiveVendorRegistrationRecId</c> of the <c>VendProspectiveVendorRegistration</c> associated with the <c>VendProspectiveVendorQuestionnaire</c> records.</param>
    /// <returns>A container of <c>VendProspectiveVendorQuestionnaire</c> records.</returns>
    public static container getProspectiveVendorRegistrationQuestionnaires(VendProspectiveVendorRegistrationRecId _prospectiveVendorRegistrationRecId)
    {
        container questionnaires = connull();
        VendProspectiveVendorQuestionnaire vendProspectiveVendorQuestionnaire;

        if (_prospectiveVendorRegistrationRecId) 
        {
            while select vendProspectiveVendorQuestionnaire
                where vendProspectiveVendorQuestionnaire.ProspectiveVendorRegistration == _prospectiveVendorRegistrationRecId
            {
                questionnaires += vendProspectiveVendorQuestionnaire;
            }
        }

        return questionnaires;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveResponse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the questionnaire response in the <c>VendProspectiveVendorQuestionnaire</c> table.
    /// </summary>
    /// <param name="_vendProspectiveVendorQuestionnaireRecId">
    /// The <c>VendProspectiveVendorQuestionnaireRecId</c> of the <c>VendProspectiveVendorQuestionnaire</c> record.
    /// </param>
    /// <param name="_kmVirtualNetworkAnswerTableId">
    /// The <c>kmVirtualNetworkAnswerTableId</c> to save.
    /// </param>
    public static void saveResponse(
        VendProspectiveVendorQuestionnaireRecId _vendProspectiveVendorQuestionnaireRecId,
        KMVirtualNetworkAnswerTableId  _kmVirtualNetworkAnswerTableId)
    {
        VendProspectiveVendorQuestionnaire vendProspectiveVendorQuestionnaire = VendProspectiveVendorQuestionnaire::find(_vendProspectiveVendorQuestionnaireRecId);

        if (vendProspectiveVendorQuestionnaire && _kmVirtualNetworkAnswerTableId)
        {
            ttsBegin;

            if (vendProspectiveVendorQuestionnaire.QuestionnaireResponse)
            {
                KMVirtualNetworkAnswerTable         kmVirtualNetworkAnswerTable;

                // Delete the previous response from the <c>KmVirtualNetworkAnswerTable</c> table.
                delete_from kmVirtualNetworkAnswerTable
                    where kmVirtualNetworkAnswerTable.kmVirtualNetworkAnswerTableId == vendProspectiveVendorQuestionnaire.QuestionnaireResponse;
            }
            
            update_recordset vendProspectiveVendorQuestionnaire
                setting QuestionnaireResponse = _kmVirtualNetworkAnswerTableId
                    where vendProspectiveVendorQuestionnaire.RecId == _vendProspectiveVendorQuestionnaireRecId;

            ttsCommit;
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuestionnairesForProspectiveVendorRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the available questionaires for the associated <c>VendProspectiveVendorRegistration</c> based on the <c>VendRequestProfile</c>.
    /// </summary>
    /// <param name = "_vendProspectiveVendorRegistrationRecId">The <c>VendProspectiveVendorRegistrationRecId</c> of the associated <c>VendProspectiveVendorRegistration</c></param>
    /// <param name = "_vendRequestProfileRecId">The <c>VendRequestProfileRecId</c> of the associated <c>VendRequestProfile</c></param>
    public static void updateQuestionnairesForProspectiveVendorRegistration(VendProspectiveVendorRegistrationRecId _vendProspectiveVendorRegistrationRecId,
                                                                            VendRequestProfileRecId _vendRequestProfileRecId)
    {
        if (_vendProspectiveVendorRegistrationRecId && _vendRequestProfileRecId)
        {           
            ttsbegin;
            
            var profileQuestionnaires = VendProspectiveVendorQuestionnaire::getProfileQuestionnaires(_vendProspectiveVendorRegistrationRecId, _vendRequestProfileRecId);
            var procurementCategoryQuestionnaires = VendProspectiveVendorQuestionnaire::getProcurementCategoryQuestionnaires(_vendProspectiveVendorRegistrationRecId);
            var prospectiveVendorQuestionnaire = Set::union(profileQuestionnaires, procurementCategoryQuestionnaires);

            VendProspectiveVendorQuestionnaire::insertApplicableQuestionnaires(_vendProspectiveVendorRegistrationRecId, prospectiveVendorQuestionnaire);

            VendProspectiveVendorQuestionnaire::deleteNotApplicableQuestionnaires(_vendProspectiveVendorRegistrationRecId, prospectiveVendorQuestionnaire);
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertApplicableQuestionnaires</Name>
				<Source><![CDATA[
    private static void insertApplicableQuestionnaires(VendProspectiveVendorRegistrationRecId _prospectiveVendorRegistrationRecId,
                                                       Set _prospectiveVendorQuestionnaire)
    {
        RecordInsertList VendProspectiveVendorQuestionnaireList = new RecordInsertList(tableNum(VendProspectiveVendorQuestionnaire));

        SetEnumerator prospectiveVendorQuestionnaireEnumerator = _prospectiveVendorQuestionnaire.getEnumerator();

        while (prospectiveVendorQuestionnaireEnumerator.moveNext())
        {
            KMCollectionId kmCollectionId = prospectiveVendorQuestionnaireEnumerator.current();
            if  (!VendProspectiveVendorQuestionnaire::findByRegistrationAndQuestionnaire(_prospectiveVendorRegistrationRecId, kmCollectionId))
            {
                VendProspectiveVendorQuestionnaire vendProspectiveVendorQuestionnaireToAdd;
                vendProspectiveVendorQuestionnaireToAdd.ProspectiveVendorRegistration = _prospectiveVendorRegistrationRecId;
                vendProspectiveVendorQuestionnaireToAdd.QuestionnaireDefinition = kmCollectionId;
                VendProspectiveVendorQuestionnaireList.add(vendProspectiveVendorQuestionnaireToAdd);
            }
        }

        VendProspectiveVendorQuestionnaireList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteNotApplicableQuestionnaires</Name>
				<Source><![CDATA[
    private static void deleteNotApplicableQuestionnaires(VendProspectiveVendorRegistrationRecId _prospectiveVendorRegistrationRecId,
                                                          Set _prospectiveVendorApplicableQuestionnaire)
    {
        VendProspectiveVendorQuestionnaire prospectiveVendorQuestionnaire;

        while select prospectiveVendorQuestionnaire
            where prospectiveVendorQuestionnaire.ProspectiveVendorRegistration == _prospectiveVendorRegistrationRecId
               && prospectiveVendorQuestionnaire.QuestionnaireResponse == ''
        {
            if  (!_prospectiveVendorApplicableQuestionnaire.in(prospectiveVendorQuestionnaire.QuestionnaireDefinition))
            {
                prospectiveVendorQuestionnaire.selectForUpdate(true);
                prospectiveVendorQuestionnaire.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProfileQuestionnaires</Name>
				<Source><![CDATA[
    private static Set getProfileQuestionnaires(VendProspectiveVendorRegistrationRecId _prospectiveVendorRegistrationRecId,
                                                VendRequestProfileRecId _requestProfileRecId)
    {
        Set profileQuestionnaires = new Set(Types::String);

        VendRequestProfileQuestionnaire vendRequestProfileQuestionnaire;

        while select QuestionnaireDef from vendRequestProfileQuestionnaire
            where vendRequestProfileQuestionnaire.VendRequestProfile == _requestProfileRecId
               && vendRequestProfileQuestionnaire.Company == curExt()
        {
            if  (!profileQuestionnaires.in(vendRequestProfileQuestionnaire.QuestionnaireDef))
            {
                profileQuestionnaires.add(vendRequestProfileQuestionnaire.QuestionnaireDef);
            }
        }

        return profileQuestionnaires;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getProcurementCategoryQuestionnaires</Name>
				<Source><![CDATA[
    private static Set getProcurementCategoryQuestionnaires(VendProspectiveVendorRegistrationRecId _prospectiveVendorRegistrationRecId)
    {
        Set procurementCategoryQuestionnaires = new Set(Types::String);

        VendProspectiveVendorProcurementCategory vendProspectiveVendorProcurementCategory;

        while select Category
            from vendProspectiveVendorProcurementCategory
                where vendProspectiveVendorProcurementCategory.ProspectiveVendorRegistration == _prospectiveVendorRegistrationRecId
        {
            Array categoryQuestionnaires = EcoResCategory::getProcCategoryQuestionnaires(
                    vendProspectiveVendorProcurementCategory.Category,
                    ProcCategoryAdministrationActivity::Vendoronboarding,
                    CompanyInfo::current());

            int questionnaireCount = categoryQuestionnaires.lastIndex() + 1;
            for (int i = 1; i < questionnaireCount; i++)
            {
                KMCollection kmCollection = categoryQuestionnaires.value(i);
                if  (!procurementCategoryQuestionnaires.in(kmCollection.KmCollectionId))
                {
                    procurementCategoryQuestionnaires.add(kmCollection.KmCollectionId);
                }
            }
        }

        return procurementCategoryQuestionnaires;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific record in the <c>VendProspectiveVendorQuestionnaire</c> table.
    /// </summary>
    /// <param name="_vendProspectiveVendorQuestionnaireRecId">
    /// The <c>VendProspectiveVendorQuestionnaireRecId</c> of the <c>VendProspectiveVendorQuestionnaire</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The record in the <c>VendProspectiveVendorQuestionnaire</c> table; otherwise, an empty record.
    /// </returns>
    public static VendProspectiveVendorQuestionnaire find(VendProspectiveVendorQuestionnaireRecId  _vendProspectiveVendorQuestionnaireRecId, boolean _forUpdate = false)
    {
        VendProspectiveVendorQuestionnaire vendProspectiveVendorQuestionnaire;

        if (_vendProspectiveVendorQuestionnaireRecId)
        {
            vendProspectiveVendorQuestionnaire.selectForUpdate(_forUpdate);

            select firstonly vendProspectiveVendorQuestionnaire
                where vendProspectiveVendorQuestionnaire.RecId == _vendProspectiveVendorQuestionnaireRecId;
        }

        return vendProspectiveVendorQuestionnaire;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRegistrationAndQuestionnaire</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific record in the <c>VendProspectiveVendorQuestionnaire</c> table by the associated <c>VendProspectiveVendorRegistration</c> and <c>KMCollection</c> records.
    /// </summary>
    /// <param name="_vendProspectiveVendorRegistrationRecId">
    /// The <c>VendProspectiveVendorRegistrationRecId</c> of the associated <c>VendProspectiveVendorRegistration</c> record.
    /// </param>
    /// <param name="_questionnaireDefinition">
    /// The <c>KMCollectionId</c> of the associated <c>KMCollection</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The record in the <c>VendProspectiveVendorQuestionnaire</c> table; otherwise, an empty record.
    /// </returns>
    public static VendProspectiveVendorQuestionnaire findByRegistrationAndQuestionnaire(VendProspectiveVendorRegistrationRecId _vendProspectiveVendorRegistrationRecId,
                                                                                        KMCollectionId _questionnaireDefinition,
                                                                                        boolean _forUpdate = false)
    {
        VendProspectiveVendorQuestionnaire vendProspectiveVendorQuestionnaire;

        if (_vendProspectiveVendorRegistrationRecId)
        {
            vendProspectiveVendorQuestionnaire.selectForUpdate(_forUpdate);

            select firstonly vendProspectiveVendorQuestionnaire
                where vendProspectiveVendorQuestionnaire.QuestionnaireDefinition == _questionnaireDefinition
                    && vendProspectiveVendorQuestionnaire.ProspectiveVendorRegistration == _vendProspectiveVendorRegistrationRecId;
        }

        return vendProspectiveVendorQuestionnaire;
    }

]]></Source>
			</Method>
			<Method>
				<Name>status</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the status of a <c>VendProspectiveVendorQuestionnaire</c> record that is associated with a
    /// <c>VendRequest</c> record.
    /// </summary>
    /// <returns>
    /// A <c>Completed</c> or <c>NotStarted</c> enumeration value.
    /// </returns>
    public display KMCollectionAnswerStatus status()
    {
        if  (this.QuestionnaireResponse)
        {
            return KMCollectionAnswerStatus::Completed;
        }

        return KMCollectionAnswerStatus::NotStarted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
		if (this.QuestionnaireResponse)
        {
            KMVirtualNetworkAnswerTable kmVirtualNetworkAnswerTable = KMVirtualNetworkAnswerTable::find(this.QuestionnaireResponse, true);
            kmVirtualNetworkAnswerTable.delete();
        }

        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>VendorPortal</ConfigurationKey>
	<DeveloperDocumentation>@SCM:ProspectiveVendorQuestionnaireDevDoc</DeveloperDocumentation>
	<Label>@SCM:ProspectiveVendorQuestionnaire</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>QuestionnaireDefinition</TitleField1>
	<TitleField2>ProspectiveVendorRegistration</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>Registration_QuestionnaireIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>Registration_QuestionnaireIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProspectiveVendorRegistration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuestionnaireDefinition</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProspectiveVendorRegistration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuestionnaireDefinition</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProspectiveVendorRegistration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuestionnaireDefinition</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Questionnaire</Name>
			<Label>@SYS31447</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QuestionnaireDefinition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuestionnaireResponse</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProspectiveVendorRegistration</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>VendProspectiveVendorRegistrationRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>QuestionnaireDefinition</Name>
			<ExtendedDataType>KMCollectionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>QuestionnaireResponse</Name>
			<ExtendedDataType>KMVirtualNetworkAnswerTableId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Registration_QuestionnaireIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProspectiveVendorRegistration</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>QuestionnaireDefinition</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendProspectiveVendorRegistration</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>VendProspectiveVendorRegistration</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProspectiveVendorRegistration</Name>
					<Field>ProspectiveVendorRegistration</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>QuestionnaireDef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>KMCollection</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>QuestionnaireDefinition</Name>
					<Field>QuestionnaireDefinition</Field>
					<RelatedField>kmCollectionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>IdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>QuestionnaireResponse</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>KMVirtualNetworkAnswerTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>QuestionnaireResponse</Name>
					<Field>QuestionnaireResponse</Field>
					<RelatedField>kmVirtualNetworkAnswerTableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ExecutedByIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>