<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventBatchJournalAttribute</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventBatchJournalAttribute extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>attributes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a list of the batch attribute IDs for the current record of the <c>InventBatchJournalAttribute</c> table.
    /// </summary>
    /// <returns>
    ///    A list of batch attribute IDs on the current record of the <c>InventBatchJournalAttribute</c> table.
    /// </returns>
    public List attributes()
    {
        List    attributes = new List(Types::String);
        int     i;
        int     attributesPerPage = InventBatchJournalAttribute::attributesPerPage();

        for (i = 1; i <= attributesPerPage; i++)
        {
            if (!this.AttributeId[i])
            {
                continue;
            }
            attributes.addEnd(this.AttributeId[i]);
        }

        return attributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBatchAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the batch attribute IDs from the associated batch attributes.
    /// </summary>
    /// <param name="_attributes">
    ///    A list containing all the batch attribute IDs for the item.
    /// </param>
    /// <remarks>
    /// <para><paramref name="_attributes"/> should be the exact same list when initializing each page record for the same batch.</para>.
    /// </remarks>
    public void initFromBatchAttributes(List _attributes)
    {
        ListEnumerator  attributeEnumerator = _attributes.getEnumerator();
        int             attributesPerPage   = InventBatchJournalAttribute::attributesPerPage();
        int             numAttributesToSkip;
        int             i;

        // Skip to the attributes for the current page
        numAttributesToSkip = (this.AttributePage - 1) * attributesPerPage;
        while (numAttributesToSkip > 0 && attributeEnumerator.moveNext())
        {
            numAttributesToSkip--;
        }

        for (i = 1; i <= attributesPerPage; ++i)
        {
            if (!attributeEnumerator.moveNext())
            {
                this.AttributeId[i] = '';
            }
            else
            {
                this.AttributeId[i] = attributeEnumerator.current();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>attributesForJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a list of the batch attribute IDs for an inventory batch journal.
    /// </summary>
    /// <param name="_journalRecId">
    ///    The inventory batch journal record reference.
    /// </param>
    /// <returns>
    ///    A list containing the batch attribute IDs for the journal.
    /// </returns>
    public static List attributesForJournal(InventBatchJournalRecId _journalRecId)
    {
        InventBatchJournalAttribute inventBatchJournalAttribute;
        List                        attributes = new List(Types::String);

        while select inventBatchJournalAttribute
            order by AttributePage
            where inventBatchJournalAttribute.InventBatchJournal == _journalRecId
        {
            attributes.appendList(inventBatchJournalAttribute.attributes());
        }

        return attributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>attributesPerPage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the number of attributes per attribute page.
    /// </summary>
    /// <returns>
    ///    The number of attributes per attribute page.
    /// </returns>
    public static int attributesPerPage()
    {
        InventBatchJournalAttribute inventBatchJournalAttribute;

        return dimOf(inventBatchJournalAttribute.AttributeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if a matching record for the <c>InventBatchJournalAttribute</c> table exists.
    /// </summary>
    /// <param name="_journalRecId">
    ///    The inventory batch journal record ID to search for.
    /// </param>
    /// <param name="_page">
    ///    The attribute page number to search for.
    /// </param>
    /// <returns>
    ///    true if a record for the <c>InventBatchJournalAttribute</c> table exists for the given journal and attribute page; otherwise, false.
    /// </returns>
    public static boolean exist(InventBatchJournalRecId _journalRecId, InventBatchJournalAttributePage _page)
    {
        return _journalRecId && _page
            && (select RecId
                from inventBatchJournalAttribute
                where inventBatchJournalAttribute.InventBatchJournal == _journalRecId
                    && inventBatchJournalAttribute.AttributePage     == _page).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the matching record in the <c>InventBatchJournalAttribute</c> table for a given journal, batch, and page number.
    /// </summary>
    /// <param name="_journalRecId">
    ///    The inventory batch journal record ID to search for.
    /// </param>
    /// <param name="_page">
    ///    The attribute page number to search for.
    /// </param>
    /// <param name="_forUpdate">
    ///    Determines if the record should be locked for update; optional.
    /// </param>
    /// <returns>
    ///    The matching record in the <c>InventBatchJournalAttribute</c> table or an empty buffer if no such
    ///    record is found.
    /// </returns>
    public static InventBatchJournalAttribute find(InventBatchJournalRecId _journalRecId, InventBatchJournalAttributePage _page, boolean _forUpdate = false)
    {
        InventBatchJournalAttribute inventBatchJournalAttribute;

        if (_journalRecId && _page)
        {
            inventBatchJournalAttribute.selectForUpdate(_forUpdate);

            select firstonly inventBatchJournalAttribute
                where inventBatchJournalAttribute.InventBatchJournal == _journalRecId
                    && inventBatchJournalAttribute.AttributePage     == _page;
        }

        return inventBatchJournalAttribute;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS4001923</DeveloperDocumentation>
	<Label>@SYS4001924</Label>
	<TitleField1>InventBatchJournal</TitleField1>
	<TitleField2>AttributePage</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>Inventory</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventBatchJournal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributePage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AttributeIds</Name>
			<Label>@PRO1552</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AttributeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventBatchJournal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributePage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AttributeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventBatchJournalAttributeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AttributePage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventBatchJournalAttributePage</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InventBatchJournal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventBatchJournalRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>JournalPageIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>InventBatchJournal</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AttributePage</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventBatchJournal</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventBatchJournal</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventBatchJournal</Name>
					<Field>InventBatchJournal</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>