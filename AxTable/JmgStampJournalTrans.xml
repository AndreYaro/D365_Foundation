<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgStampJournalTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JmgStampJournalTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the project activity that is associated to the <c>JmgStampJournalTrans</c>
    /// record.
    /// </summary>
    /// <returns>
    /// The description of the project activity if the <c>JmgStampJournalTrans</c> record refers to a
    /// project activity; otherwise, an empty string.
    /// </returns>
    display Description activityDescription()
    {
        if (this.Module == JmgModuleEnum::PROJ && this.JobRefType == JmgJobRefTypeEnum::PrjActivity)
        {
            return ProjActivity::find(this.activityId()).Txt;
        }
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>activityId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the project activity that is associated to the <c>JmgStampJournalTrans</c> record.
    /// </summary>
    /// <returns>
    /// The project activity if the <c>JmgStampJournalTrans</c> record refers to a project activity;
    /// otherwise, an empty string.
    /// </returns>
    display ProjActivityId activityId()
    {
        if (this.Module == JmgModuleEnum::PROJ && this.JobRefType == JmgJobRefTypeEnum::PrjActivity)
        {
            return this.ActOprID;
        }
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>breakTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the value of the <c>BreakSeconds</c> field on the <c>JmgStampJournalTrans</c> record.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that specifies whether the value must be updated.
    /// </param>
    /// <param name="value">
    /// The new value of the <c>BreakSeconds</c> field.
    /// </param>
    /// <returns>
    /// The value of the <c>BreakSeconds</c> field formatted as a string.
    /// </returns>
    edit JmgLabelSecondsBreak breakTime(boolean _set, JmgTimeString value)
    {
        if (_set)
        {
            this.BreakSeconds = JmgProfileSeconds::unFormattedSeconds(value,JmgSecondPresentationEnum::Minuts);
        }

        return JmgProfileSeconds::formattedSeconds(this.BreakSeconds,JmgSecondPresentationEnum::Minuts);
    }

]]></Source>
			</Method>
			<Method>
				<Name>breakToleranceSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the value of the <c>BreakTolerance</c> field on the <c>JmgStampJournalTrans</c>
    /// record.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that specifies whether the value must be updated.
    /// </param>
    /// <param name="value">
    /// The new value of the <c>BreakTolerance</c> field.
    /// </param>
    /// <returns>
    /// The value of the <c>BreakTolerance</c> field formatted as a string.
    /// </returns>
    edit JmgLabelSecondsBreakTolerance breakToleranceSeconds(boolean _set, JmgTimeString value)
    {
        if (_set)
        {
            this.BreakTolerance = JmgProfileSeconds::unFormattedSeconds(value,JmgSecondPresentationEnum::Minuts);
        }

        return JmgProfileSeconds::formattedSeconds(this.BreakTolerance,JmgSecondPresentationEnum::Minuts);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCheckStamp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>JmgStampJournalTrans</c> record is ready for calculation.
    /// </summary>
    /// <param name="jmgProfiles">
    /// The <c>JmgProfiles</c> object that is running the calculation.
    /// </param>
    /// <param name="chkStampErr">
    /// A Boolean value that specifies whether an error has been detected on a previous registration.
    /// </param>
    /// <returns>
    /// true if the <c>JmgStampJournalTrans</c> record is ready for calculation and no previous error has
    /// been detected; otherwise, false.
    /// </returns>
    boolean calcCheckStamp(JmgProfiles jmgProfiles, boolean chkStampErr = false)
    {
        boolean ret = chkStampErr;

        if (! this.calcCheckStampCurrentTransaction(jmgProfiles))
            ret = true;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCheckStampCurrentTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>JmgStampJournalTrans</c> record is ready for calculation without taking into account previous registrations.
    /// </summary>
    /// <param name="jmgProfiles">
    /// The <c>JmgProfiles</c> object that is running the calculation.
    /// </param>
    /// <returns>
    /// true if the <c>JmgStampJournalTrans</c> record is ready for calculation; otherwise, false.
    /// </returns>
    protected boolean calcCheckStampCurrentTransaction(JmgProfiles jmgProfiles)
    {
        JmgProfileSeconds   profSec    = new JmgProfileSeconds();
        boolean             chkStampOk = true;

        if ((! Global::isConfigurationkeyEnabled(configurationKeyNum(JmgJob))   &&
            (this.JourRegType   >  JmgJourRegTypeEnum::BreakReg)                &&
            (this.JourRegType   <  JmgJourRegTypeEnum::StopTeam)                &&
            (this.JobId         != JmgIpcActivity::findSignTypeJobId(JmgSignInOut::SysIndirect))))
        {
            this.Log    = "@SYS39352";
            chkStampOk  = false;
        }

        if (! jmgProfiles.simulationMode())
        {
            if (chkStampOk && (! this.StartDate))
            {
                this.Log    = "@SYS38474";
                chkStampOk  = false;
            }
            if (chkStampOk && (! this.StopDate))
            {
                this.Log    = "@SYS38475";
                chkStampOk  = false;
            }
            if (this.JobId)
            {
                JmgTermJob termjob =  JmgTermJob::construct(this.JobId);
                if ((! termjob) || (termjob.module() != this.Module))
                {
                    this.Log    = strFmt("@SYS38535",this.JobId);
                    chkStampOk  = false;
                }
            }
            if (this.JobIDAbs)
            {
                JmgTermJob termjob =  JmgTermJob::construct(this.JobIDAbs);
                if ((! termjob) || (termjob.module() != this.Module))
                {
                    this.Log    = strFmt("@SYS38535",this.JobIDAbs);
                    chkStampOk  = false;
                }
            }

            if (chkStampOk && (! this.ProfileDate))
            {
                this.Log    = "@SYS38476";
                chkStampOk  = false;
            }

            if (chkStampOk && (! this.JobId) && (this.JourRegType   != JmgJourRegTypeEnum::Absence))
            {
                this.Log    = "@SYS24417";
                chkStampOk  = false;
            }
            if (chkStampOk && (! this.JourRegType))
            {
                this.Log    = "@SYS68235";
                chkStampOk  = false;
            }
            if (chkStampOk &&
                (profSec.profileSeconds(this.StartDate,this.StartTime) >
                 profSec.profileSeconds(this.StopDate,this.StopTime)))
            {
                this.Log    = "@SYS32682";
                chkStampOk  = false;
            }
        }

        // If this is a project registration, then check that employee is allowed to
        // register on project, and that the employee/category
        // and category/project combinations are valid:
        if (chkStampOk &&
            this.Module == JmgModuleEnum::PROJ)
        {
            ProjValCheckTrans projValCheckTrans   = new ProjValCheckTrans();
            int infoLines   = infologLine();
            chkStampOk = projValCheckTrans.validateMandatory(this);
            if (!chkStampOk)
            {
                // Remove prefixes
                str s = infolog.text();
                this.Log    = subStr(s, strFind(s, '\t', strLen(s), - strLen(s)) + 1, strLen(s));
                infolog.clear(infoLines);
            }
        }

        return chkStampOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcEstimJobTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the estimated job time of the job that is associated to the <c>JmgStampJournalTrans</c>
    /// record.
    /// </summary>
    /// <returns>
    /// The estimated job time.
    /// </returns>
    JmgSeconds calcEstimJobTime()
    {
        JmgSeconds              retValue;
        ProdRouteJob            prodRouteJob;
        ProdRoute               prodRoute;
        retValue = 1;

        switch (JmgProdParameters::find().StampLevel)
        {
            case JmgStampLevel::Job :
                prodRouteJob = ProdRouteJob::findJobId(this.JobId);

                if ((prodRouteJob) && (prodRouteJob.CalcTimeHours != 0))
                {
                    retValue = any2int(prodRouteJob.CalcTimeHours * 3600);
                }
                break;
            case JmgStampLevel::Route :
                prodRoute = ProdRoute::findJobId(this.JobId);

                if (prodRoute)
                {
                    switch (this.JobId)
                    {
                        case prodRoute.JobIdProcess :
                            retValue = any2int(prodRoute.CalcProc * 3600);
                            break;
                        case prodRoute.JobIdSetup :
                            retValue = any2int(prodRoute.CalcSetUp * 3600);
                            break;
                    }
                }
                break;
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInitStamp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>JmgStampJournalTrans</c> record before calculation.
    /// </summary>
    /// <param name="_jmgStampJournalTable">
    /// The <c>JmgStampJournalTable</c> record which is the parent of the current record.
    /// </param>
    void calcInitStamp(JmgStampJournalTable _jmgStampJournalTable = null)
    {
        if (this)
        {
            if ((this.JourRegType  == JmgJourRegTypeEnum::IndActivity) &&
                (this.JobId        == JmgIpcActivity::findSignTypeJobId(JmgSignInOut::SysIndirect)))
            {
                this.StopDate   = this.StartDate;
                this.StopTime   = this.StartTime;
            }
            else if (this.JourRegType   == JmgJourRegTypeEnum::Absence)
            {
                if (!this.JobId && !this.JobIDAbs)
                {
                    this.StopDate   = this.StartDate;
                    this.StopTime   = this.StartTime;
                }
                else
                {
                    if (_jmgStampJournalTable.ProfileStartDate != _jmgStampJournalTable.ProfileEndDate || _jmgStampJournalTable.ProfileStart != _jmgStampJournalTable.ProfileEnd)
                    {
                        // If not clear time, promise the datetime is legal.
                        if (this.StartDate < _jmgStampJournalTable.ProfileStartDate
                            || (this.StartDate == _jmgStampJournalTable.ProfileStartDate && this.StartTime < _jmgStampJournalTable.ProfileStart))
                        {
                            this.StartDate = _jmgStampJournalTable.ProfileStartDate;
                            this.StartTime = _jmgStampJournalTable.ProfileStart;
                        }
                        if (this.StopDate > _jmgStampJournalTable.ProfileEndDate
                            || (this.StopDate == _jmgStampJournalTable.ProfileEndDate && (!this.StopTime || this.StopTime > _jmgStampJournalTable.ProfileEnd)))
                        {
                            this.StopDate = _jmgStampJournalTable.ProfileEndDate;
                            this.StopTime = _jmgStampJournalTable.ProfileEnd;
                        }
                    }
                }
            }

            this.CorrStartTime  = 0;
            this.CorrStartDate  = dateNull();
            this.CorrStopTime   = 0;
            this.CorrStopDate   = dateNull();
            this.Seconds        = 0;
            this.Log            = '';
            this.TransId        = '';
            this.SecondsOnReg   = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the journal registration can be submitted to the workflow.
    /// </summary>
    /// <param name="_workflowType">
    /// The workflow type that is used to submit a record to the workflow.
    /// </param>
    /// <returns>
    /// true if the journal registration can be submitted to workflow; otherwise, false.
    /// </returns>
    public boolean canSubmitToWorkflow(str _workflowType = '')
    {
        super(_workflowType);

        return this.WorkflowStatus == JmgJournalRegWorkflowStatus::None
                && JmgStampJournalTable::find(this.Worker, this.ProfileDate).Calculated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the project category description that is associated to the <c>JmgStampJournalTrans</c>
    /// record.
    /// </summary>
    /// <returns>
    /// The project category description if the <c>JmgStampJournalTrans</c> record refers to a project job;
    /// otherwise, an empty string.
    /// </returns>
    display ProjCategoryName categoryName()
    {
        if (this.Module == JmgModuleEnum::PROJ)
        {
            return ProjCategory::find(this.ProjCategory).Name;
        }
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was initialized with the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>

    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this,
                                                                      this.companyInfo().RecId
                                                                      )
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>error</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether an error has been identified during the calculation of the
    /// <c>JmgStampJournalTrans</c> record.
    /// </summary>
    /// <returns>
    /// The <c>NoYes::Yes</c> enumeration value, if an error has been identified; otherwise, the
    /// <c>NoYes::No</c> value.
    /// </returns>
    display JmgLabelError error()
    {
        return this.Log != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether an error has been identified during calculation of the
    /// <c>JmgStampJournalTrans</c> record.
    /// </summary>
    /// <returns>
    /// <c>1</c> if an error has been identified; otherwise, <c>0</c>.
    /// </returns>
    display JmgLabelImageError imageError()
    {
        return (this.Log ==''? 0 : 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageJobType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the image job type that is associated to the <c>JmgStampJournalTrans</c> record.
    /// </summary>
    /// <returns>
    /// The image job type.
    /// </returns>
    display JmgLabelImageJobType imageJobType()
    {
        return this.JobType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the image module that is associated to the <c>JmgStampJournalTrans</c> record.
    /// </summary>
    /// <returns>
    /// The image module.
    /// </returns>
    display JmgLabelImageModule imageModule()
    {
        return this.Module;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init_Absence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>JmgStampJournalTrans</c> record as an absence registration.
    /// </summary>
    /// <param name="_hrmAbsenceCodeGroup">
    /// The absence code group to use to initialize the <c>JmgStampJournalTrans</c> record.
    /// </param>
    /// <param name="_hrmAbsenceCode">
    /// The absence code to use to initialize the <c>JmgStampJournalTrans</c> record.
    /// </param>
    void init_Absence(HRMAbsenceCodeGroup _hrmAbsenceCodeGroup, HRMAbsenceCode _hrmAbsenceCode = null)
    {
        this.Module         = JmgModuleEnum::IPC;
        this.JobType        = JmgJobTypeEnum::Normal;
        this.JobRef         = _hrmAbsenceCodeGroup.HrmAbsenceCodeGroupId;
        this.JobPayType     = JmgJobPayTypeEnum::Hours;
        this.StampType      = JmgStampTypeEnum::Absence;

        if (_hrmAbsenceCode)
        {
            this.ActOprID           = _hrmAbsenceCode.HrmAbsenceCodeId;
            this.JobIDAbs           = _hrmAbsenceCode.JmgJobId;
            this.JobId              = _hrmAbsenceCode.JmgJobId;
        }

        if (!this.JobId)
        {
            // use group JobId if we didn't get it from HRMAbsenceCode
            this.JobId              = _hrmAbsenceCodeGroup.JmgJobId;
        }

        this.JourRegType            = JmgJourRegTypeEnum::Absence;

        if (_hrmAbsenceCodeGroup    &&
            (this.JobId             || this.JobIDAbs))
        {
            if (_hrmAbsenceCodeGroup.JmgAbsenceIllegal)
            {
                if (_hrmAbsenceCodeGroup.JmgAbsenceFlex)
                {
                    this.StampTypeSpec  = JmgStampTypeSpecEnum::AbsIllegalFlex;
                }
                else
                {
                    this.StampTypeSpec  = JmgStampTypeSpecEnum::AbsIllegal;
                }
            }
            else if (_hrmAbsenceCodeGroup.JmgAbsenceFlex)
            {
                this.StampTypeSpec      = JmgStampTypeSpecEnum::AbsLegalFlex;
            }
            else
            {
                this.StampTypeSpec      = JmgStampTypeSpecEnum::AbsLegal;
            }
        }
        else
        {
            this.StampTypeSpec          = JmgStampTypeSpecEnum::AbsNotSpec;
        }
        this.BreakSeconds = 0;
        this.initDimensionValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init_Ipc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>JmgStampJournalTrans</c> record as an indirect activity registration.
    /// </summary>
    /// <param name="jmgIpcCategory">
    /// The indirect category to use to initialize the <c>JmgStampJournalTrans</c> record.
    /// </param>
    /// <param name="jmgIpcActivity">
    /// The indirect activity to use to initialize the <c>JmgStampJournalTrans</c> record.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The indirect activity is created as an absence activity.
    /// </exception>
    void init_Ipc(JmgIpcCategory jmgIpcCategory, JmgIpcActivity jmgIpcActivity = null)
    {
        this.Module         = JmgModuleEnum::IPC;
        this.JobType        = JmgJobTypeEnum::Normal;
        this.JobRef         = jmgIpcCategory.Category;
        this.JobPayType     = JmgJobPayTypeEnum::Hours;
        this.StampType      = jmgIpcCategory.Type;

        if (jmgIpcActivity)
            this.ActOprID           = jmgIpcActivity.Activity;

        switch (this.StampType)
        {
            case JmgStampTypeEnum::Work:
                this.JobId          = jmgIpcActivity.JobId;
                this.StampTypeSpec  = JmgStampTypeSpecEnum::Work;
                this.BreakSeconds   = 0;
                this.AbsencePayQty  = 0;
                this.JourRegType    = JmgJourRegTypeEnum::IndActivity;
                if ((jmgIpcActivity) &&
                    ((jmgIpcActivity.SignInOut == JmgSignInOut::SignIn)     ||
                     (jmgIpcActivity.SignInOut == JmgSignInOut::SignOut)    ||
                     (jmgIpcActivity.SignInOut == JmgSignInOut::StartTeam)  ||
                     (jmgIpcActivity.SignInOut == JmgSignInOut::StopTeam)    ))
                {
                    this.StopDate   = this.StartDate;
                    this.StopTime   = this.StartTime;
                    switch (jmgIpcActivity.SignInOut)
                    {
                        case JmgSignInOut::SignIn       :
                            this.JourRegType    =JmgJourRegTypeEnum::SignIn;
                            break;
                        case JmgSignInOut::SignOut      :
                            this.JourRegType    =JmgJourRegTypeEnum::SignOut;
                            break;
                        case JmgSignInOut::StartTeam    :
                            this.JourRegType    =JmgJourRegTypeEnum::StartTeam;
                            break;
                        case JmgSignInOut::StopTeam     :
                            this.JourRegType    =JmgJourRegTypeEnum::StopTeam;
                            break;
                    }
                }
                break;

            case JmgStampTypeEnum::Absence:
                throw error("@SYS39897");
            case JmgStampTypeEnum::Break:
                this.JourRegType            = JmgJourRegTypeEnum::BreakReg;
                if (jmgIpcActivity.BreakDrop == JmgBreakDropEnum::No)
                {
                    if (jmgIpcActivity.BreakPayable)
                        this.StampTypeSpec  = JmgStampTypeSpecEnum::BreakPayFlow;
                    else
                        this.StampTypeSpec  = JmgStampTypeSpecEnum::BreakNoPayFlow;
                    this.BreakSeconds       = jmgIpcActivity.BreakSeconds;
                    this.BreakTolerance     = jmgIpcActivity.BreakTolerance;
                }
                else if (jmgIpcActivity.BreakDrop == JmgBreakDropEnum::One)
                {
                    this.StampTypeSpec      = JmgStampTypeSpecEnum::BreakDropOne;
                }
                else if (jmgIpcActivity.BreakDrop == JmgBreakDropEnum::All)
                {
                    this.StampTypeSpec      = JmgStampTypeSpecEnum::BreakDropAll;
                }
                this.JobId                  = jmgIpcActivity.JobId;
                break;
            case JmgStampTypeEnum::EventCode:
                this.JourRegType            = JmgJourRegTypeEnum::SwitchCode;
                this.JobId                  = jmgIpcActivity.JobId;
                this.StampTypeSpec  = JmgStampTypeSpecEnum::Work;
        }

        this.initDimensionValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init_Prod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>JmgStampJournalTrans</c> record as a production registration.
    /// </summary>
    /// <param name="prodRouteJob">
    /// The production job to use to initialize the <c>JmgStampJournalTrans</c> record.
    /// </param>
    void init_Prod(ProdRouteJob prodRouteJob)
    {
        this.Module         = JmgModuleEnum::PROD;
        this.StampType      = JmgStampTypeEnum::Work;
        this.StampTypeSpec  = JmgStampTypeSpecEnum::Work;
        this.JobId          = prodRouteJob.JobId;
        this.JobRef         = prodRouteJob.ProdId;
        this.RouteJobType   = prodRouteJob.JobType;
        this.OprNum         = prodRouteJob.OprNum;
        this.ActOprID       = ProdRoute::find(prodRouteJob.ProdId,prodRouteJob.OprNum,prodRouteJob.OprPriority).OprId;

        // If the jobId was changed, then update the Work Center Id.
        if (this.orig() && this.orig().JobId != this.JobId)
        {
            this.WrkCtrId       = ProdRouteJob::findJobId(this.JobId).WrkCtrId;

            if (! this.WrkCtrId)
            {
                this.WrkCtrId = ProdRoute::findJobId(this.JobId).getResource(true,true).WrkCtrId;
            }
        }
        if (this.JobPayType == JmgJobPayTypeEnum::Empty)
            this.JobPayType = prodRouteJob.JobPayType;

        switch (this.RouteJobType)
        {
            case RouteJobType::QueueBefore :
                this.JourRegType    = JmgJourRegTypeEnum::MrpQueueBefore;
                break;
            case RouteJobType::Setup :
                this.JourRegType    = JmgJourRegTypeEnum::MrpSetup;
                break;
            case RouteJobType::Process :
                this.JourRegType    = JmgJourRegTypeEnum::MrpProcess;
                break;
            case RouteJobType::Overlap :
                this.JourRegType    = JmgJourRegTypeEnum::MrpOverlap;
                break;
            case RouteJobType::Transport :
                this.JourRegType    = JmgJourRegTypeEnum::MrpTransport;
                break;
            case RouteJobType::QueueAfter :
                this.JourRegType    = JmgJourRegTypeEnum::MrpQueueAfter;
                break;
        }

        this.initDimensionValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init_ProdRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>JmgStampJournalTrans</c> record as a production registration
    /// </summary>
    /// <param name="jobId">
    /// The job ID to use to initialize the <c>JmgStampJournalTrans</c> record.
    /// </param>
    void init_ProdRoute(ProdJobId jobId)
    {
        ProdRoute prodRoute = ProdRoute::findJobId(jobId);
        this.Module         = JmgModuleEnum::PROD;
        this.StampType      = JmgStampTypeEnum::Work;
        this.StampTypeSpec  = JmgStampTypeSpecEnum::Work;
        this.JobId          = jobId;
        this.JobRef         = prodRoute.ProdId;
        this.OprNum         = prodRoute.OprNum;
        this.ActOprID       = prodRoute.OprId;
        // If the jobId was changed, then update the Work Center Id.
        if (this.orig() && this.orig().JobId != this.JobId)
        {
            this.WrkCtrId = ProdRoute::findJobId(this.JobId).getResource(true,true).WrkCtrId;
        }

        if (this.JobPayType == JmgJobPayTypeEnum::Empty)
            this.JobPayType = prodRoute.JobPayType;

        if (prodRoute.JobIdProcess == jobId)
        {
            this.RouteJobType   = RouteJobType::Process;
            this.JourRegType    = JmgJourRegTypeEnum::MrpProcess;
        }
        else
        {
            this.RouteJobType   = RouteJobType::Setup;
            this.JourRegType    = JmgJourRegTypeEnum::MrpSetup;
        }

        this.initDimensionValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init_Proj</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>JmgStampJournalTrans</c> record as a project registration.
    /// </summary>
    /// <param name="projTable">
    /// The project that is used to initialize the <c>JmgStampJournalTrans</c> record.
    /// </param>
    /// <param name="projActivity">
    /// The project activity that is used to initialize the <c>JmgStampJournalTrans</c> record.
    /// </param>
    /// <param name="_projForecastEmpl">
    /// The project forecast that is used to initialize the <c>JmgStampJournalTrans</c> record.
    /// </param>
    void init_Proj(ProjTable projTable, ProjActivity projActivity = null, ProjForecastEmpl _projForecastEmpl = null)
    {
        this.Module         = JmgModuleEnum::PROJ;
        this.StampType      = JmgStampTypeEnum::Work;
        this.StampTypeSpec  = JmgStampTypeSpecEnum::Work;
        this.JobRef         = projTable.ProjId;
        this.WrkCtrId       = '';

        if (projActivity.JobId)
        {
            this.ActOprID   = projActivity.ActivityNumber;
            this.JobId      = projActivity.JobId;
            this.JourRegType= JmgJourRegTypeEnum::PrjActivity;
        }
        else if (_projForecastEmpl.JobId)
        {
            this.ActOprID   = _projForecastEmpl.ActivityNumber;
            this.JobId      = _projForecastEmpl.JobId;
            if (this.ActOprID)
            {
                this.JourRegType = JmgJourRegTypeEnum::PrjActivity;
            }
            else
            {
                this.JourRegType = JmgJourRegTypeEnum::PrjProject;
            }
        }
        else
        {
            this.JobId      = projTable.JobId;
            this.JourRegType= JmgJourRegTypeEnum::PrjProject;
            this.ActOprID   = '';
        }

        this.initDimensionValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionFromWrkCtr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the dimension values on the <c>JmgStampJournalTrans</c> record from a work center.
    /// </summary>
    public void initDimensionFromWrkCtr()
    {
        JmgTermJob_Prod     prodJob;
        JmgTermJob          job;
        WrkCtrTable         wrkCtrTable;

        if (this.Module != JmgModuleEnum::PROD)
        {
            return;
        }

        job = JmgTermJob::construct(this.JobId);
        if (job.isValidJobId() && job.module() == JmgModuleEnum::PROD)
        {
            prodJob     = job as JmgTermJob_Prod;
            wrkCtrTable = WrkCtrTable::find(this.WrkCtrId);

            // Set dimension values.
            switch (JmgProdParametersDim::find(prodJob.siteInventDimId()).ProdDimensionFrom)
            {
                case JmgDimensionFrom::Employee:
                    // do nothing - no changes to dimension is needed in this case
                    break;
                case JmgDimensionFrom::Job:
                    this.DefaultDimension = this.copyDimension(wrkCtrTable.DefaultDimension);
                    break;
                case JmgDimensionFrom::EmployeeJob:
                    this.DefaultDimension = 0;
                    this.DefaultDimension = this.mergeDimension(JmgEmployee::find(this.Worker).workerDimension(this.ProfileDate),
                                                                wrkCtrTable.DefaultDimension);
                    break;
                case JmgDimensionFrom::JobEmployee:
                    this.DefaultDimension = 0;
                    this.DefaultDimension = this.mergeDimension(wrkCtrTable.DefaultDimension,
                                                                JmgEmployee::find(this.Worker).workerDimension(this.ProfileDate));
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the dimension values on the <c>JmgStampJournalTrans</c> record.
    /// </summary>
    public void initDimensionValues()
    {
        switch (this.Module)
        {
            case JmgModuleEnum::PROD:
                this.initDimensionValuesProd();
                break;
            case JmgModuleEnum::PROJ:
                this.initDimensionValuesProj();
                break;
            case JmgModuleEnum::IPC:
                if (this.JourRegType == JmgJourRegTypeEnum::Absence)
                {
                    this.initDimensionValuesAbsence();
                }
                else
                {
                    this.initDimensionValuesIpc();
                }
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionValuesAbsence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the dimension values on the <c>JmgStampJournalTrans</c> record when the
    /// <c>JmgStampJournalTrans</c> record is an absence registration.
    /// </summary>
    public void initDimensionValuesAbsence()
    {
        JmgDimensionFrom dimensionFrom;

        dimensionFrom = JmgParameters::find().IpcAbsenceDimensionFrom;

        // Set the dimension values.
        switch (dimensionFrom)
        {
            case JmgDimensionFrom::Employee:
                this.DefaultDimension      = this.copyDimension(JmgEmployee::find(this.Worker).workerDimension(this.ProfileDate));
                break;
            case JmgDimensionFrom::Job:
                this.DefaultDimension   = this.copyDimension(HRMAbsenceCode::findByJobId(this.JobIDAbs).DefaultDimension);
                break;
            case JmgDimensionFrom::EmployeeJob:
                this.DefaultDimension = 0;
                this.DefaultDimension = this.mergeDimension(JmgEmployee::find(this.Worker).workerDimension(this.ProfileDate),
                                                           HRMAbsenceCode::findByJobId(this.JobIDAbs).DefaultDimension);
                break;
            case JmgDimensionFrom::JobEmployee:
                this.DefaultDimension = 0;
                this.DefaultDimension = this.mergeDimension(HRMAbsenceCode::findByJobId(this.JobIDAbs).DefaultDimension,
                                                           JmgEmployee::find(this.Worker).workerDimension(this.ProfileDate));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionValuesIpc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the dimension values on the <c>JmgStampJournalTrans</c> record when the
    /// <c>JmgStampJournalTrans</c> record is an indirect activity registration.
    /// </summary>
    public void initDimensionValuesIpc()
    {
        JmgDimensionFrom dimensionFrom;

        // Fetch the relevant dimensionFrom setting
        switch (this.JourRegType)
        {
            case JmgJourRegTypeEnum::Absence:
                throw error("@SYS39897");
            case JmgJourRegTypeEnum::BreakReg:
                dimensionFrom = JmgParameters::find().IpcBreakDimensionFrom;
                break;
            case JmgJourRegTypeEnum::IndActivity:
                dimensionFrom = JmgParameters::find().IpcJobDimensionFrom;
                break;
            case JmgJourRegTypeEnum::SignOut:
            case JmgJourRegTypeEnum::SignIn:
                dimensionFrom = JmgParameters::find().IpcJobDimensionFrom;
                break;
            default:
                // No dimension values are set for other types of Ipc. Just return.
                return;
        }

        // Set the dimension values.
        switch (dimensionFrom)
        {
            case JmgDimensionFrom::Employee:
                this.DefaultDimension = this.copyDimension(JmgEmployee::find(this.Worker).workerDimension(this.ProfileDate));
                break;
            case JmgDimensionFrom::Job:
                this.DefaultDimension = this.copyDimension(JmgIpcActivity::findActivityId(this.ActOprID).DefaultDimension);
                break;
            case JmgDimensionFrom::EmployeeJob:
                this.DefaultDimension = 0;
                this.DefaultDimension = this.mergeDimension(JmgEmployee::find(this.Worker).workerDimension(this.ProfileDate),
                                                            JmgIpcActivity::findActivityId(this.ActOprID).DefaultDimension);
                break;
            case JmgDimensionFrom::JobEmployee:
                this.DefaultDimension = 0;
                this.DefaultDimension = this.mergeDimension(JmgIpcActivity::findActivityId(this.ActOprID).DefaultDimension,
                                                            JmgEmployee::find(this.Worker).workerDimension(this.ProfileDate));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionValuesProd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the dimension values on the <c>JmgStampJournalTrans</c> record when the
    /// <c>JmgStampJournalTrans</c> record is a production registration.
    /// </summary>
    private void initDimensionValuesProd()
    {
        ProdRoute prodRoute;

        JmgTermJob_Prod prodJob;
        JmgTermJob job;

        job = JmgTermJob::construct(this.JobId);
        if (job.isValidJobId() && job.module() == JmgModuleEnum::PROD)
        {
            prodJob = job;
            prodRoute = prodJob.prodRoute();

            // Set dimension values.
            switch (JmgProdParametersDim::find(prodJob.siteInventDimId()).ProdDimensionFrom)
            {
                case JmgDimensionFrom::Employee:
                    this.DefaultDimension = this.copyDimension(JmgEmployee::find(this.Worker).workerDimension(this.ProfileDate));
                    break;
                case JmgDimensionFrom::Job:
                    this.DefaultDimension = this.copyDimension(prodRoute.DefaultDimension);
                    break;
                case JmgDimensionFrom::EmployeeJob:
                    this.DefaultDimension = 0;
                    this.DefaultDimension = this.mergeDimension(JmgEmployee::find(this.Worker).workerDimension(this.ProfileDate),
                                                                prodRoute.DefaultDimension);
                    break;
                case JmgDimensionFrom::JobEmployee:
                    this.DefaultDimension = 0;
                    this.DefaultDimension = this.mergeDimension(prodRoute.DefaultDimension,
                                                                JmgEmployee::find(this.Worker).workerDimension(this.ProfileDate));
                    break;
            }
        }

        if (JmgProdJourRouteDefaultParmDefaultDimensionFlight::instance().isEnabled())
        {
            WrkCtrTable wrkCtrTable = WrkCtrTable::find(prodJob.jmgJobTable().WrkCtrId);

            this.DefaultDimension = this.mergeDimension(this.DefaultDimension, wrkCtrTable.DefaultDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionValuesProj</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the dimension values on the <c>JmgStampJournalTrans</c> record when the
    /// <c>JmgStampJournalTrans</c> record is a project registration.
    /// </summary>
    public void initDimensionValuesProj()
    {
        switch (JmgParameters::find().ProjDimensionFrom)
        {
            case JmgDimensionFrom::Employee:
                this.DefaultDimension = this.copyDimension(JmgEmployee::find(this.Worker).workerDimension(this.ProfileDate));
                break;
            case JmgDimensionFrom::Job:

                this.DefaultDimension = this.copyDimension(ProjTable::find(this.JobRef).DefaultDimension);
                break;
            case JmgDimensionFrom::EmployeeJob:
                this.DefaultDimension = 0;
                this.DefaultDimension = this.mergeDimension(JmgEmployee::find(this.Worker).workerDimension(this.ProfileDate),
                                                            ProjTable::find(this.JobRef).DefaultDimension);
                break;
            case JmgDimensionFrom::JobEmployee:
                this.DefaultDimension = 0;
                this.DefaultDimension = this.mergeDimension(ProjTable::find(this.JobRef).DefaultDimension,
                                                            JmgEmployee::find(this.Worker).workerDimension(this.ProfileDate));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>JmgStampJournalTrans</c> record from a <c>JmgStampJournalTable</c> record.
    /// </summary>
    /// <param name="jmgStampJournalTable">
    /// The <c>JmgStampJournalTable</c> record to use during initialization.
    /// </param>
    /// <param name="inTransid">
    /// The transaction ID to assign to the <c>JmgStampJournalTrans</c> record.
    /// </param>
    void initFromJournalTable(JmgStampJournalTable  jmgStampJournalTable,JmgTransId inTransid ='')
    {
        this.Worker             = jmgStampJournalTable.Worker;
        this.ProfileDate        = jmgStampJournalTable.ProfileDate;
        this.Module             = JmgModuleEnum::IPC;
        this.JobRefType         = JmgJobRefTypeEnum::IpcActivity;
        this.JobRef             = '';
        this.WrkCtrId           = '';
        this.RouteJobType       = RouteJobType::Overlap;
        this.OprNum             = 0;
        this.QtyGood            = 0;
        this.QtyError           = 0;
        this.ErrorCause         = ProdErrorCause::Machine;
        this.JobFinished        = NoYes::No;
        this.JobId              = '';
        this.JobIDAbs           = '';
        this.Active             = NoYes::No;
        this.WorkerPilot        = 0;
        this.JobPayType         = JmgJobPayTypeEnum::Empty;
        this.DefaultDimension   = 0;
        this.Log                = '';
        this.StartDate          = dateNull();
        this.StartTime          = 0;
        this.StopDate           = dateNull();
        this.StopTime           = 0;
        this.SecondsOnReg       = 0;
        this.SecondsOnTrans     = 0;
        this.Seconds            = 0;
        this.CorrStartDate      = dateNull();
        this.CorrStartTime      = 0;
        this.CorrStopDate       = dateNull();
        this.CorrStopTime       = 0;
        this.TermRegStartRecID  = 0;
        this.TermRegStopRecID   = 0;
        this.StampType          = JmgStampTypeEnum::Absence;
        this.StampTypeSpec      = JmgStampTypeSpecEnum::AbsIllegal;
        this.BreakSeconds       = 0;
        this.BreakTolerance     = 0;

        this.JobType            = JmgJobTypeEnum::Normal;
        this.TransId            = inTransid;

        this.JourRegType        = JmgJourRegTypeEnum::Absence;

        this.PdsCWQtyGood       = 0;
        this.PdsCWQtyError      = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTimecardTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>JmgStampJournalTrans</c> record based on a <c>JmgTimecardTrans</c> record.
    /// </summary>
    /// <param name="_timecardTrans">
    /// The <c>JmgTimecardTrans</c> record to use during initialization.
    /// </param>
    public void initFromTimecardTrans(JmgTimecardTrans _timecardTrans)
    {
        if (!_timecardTrans.JobId)
        {
            return;
        }

        this.JobId              = _timecardTrans.JobId;

        this.setJournalTransTypes(JmgTermJob::construct(this.JobId).sourceData());

        this.JobRef             = _timecardTrans.JobRef;
        this.JourRegType        = _timecardTrans.JourRegType;
        this.ProfileDate        = _timecardTrans.ProfileDate;
        this.Worker             = _timecardTrans.Worker;
        this.StartDate          = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_timecardTrans.StartDateTime,DateTimeUtil::getUserPreferredTimeZone()));
        this.StartTime          = DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(_timecardTrans.StartDateTime,DateTimeUtil::getUserPreferredTimeZone()));
        this.StopDate           = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_timecardTrans.StopDateTime,DateTimeUtil::getUserPreferredTimeZone()));
        this.StopTime           = DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(_timecardTrans.StopDateTime,DateTimeUtil::getUserPreferredTimeZone()));
        this.Seconds            = _timecardTrans.Seconds;
        this.WorkerPilot        = _timecardTrans.WorkerPilot;
        this.Active             = _timecardTrans.JobActive;
        this.WrkCtrId           = _timecardTrans.WrkCtrId;
        this.JobFinished        = _timecardTrans.JobFinished;
        this.TermRegStartRecID  = _timecardTrans.TermRegStartRecID;
        this.TermRegStopRecID   = _timecardTrans.TermRegStopRecID;
        this.ProjCategory       = _timecardTrans.ProjCategory;
        this.OnCallActivity     = _timecardTrans.OnCallActivity;
        this.JobIDAbs           = _timecardTrans.JobIDAbs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates fields on the <c>JmgStampJournalTrans</c> record before the insert.
    /// </summary>
    protected void inserting()
    {
        if (this.JobPayType == JmgJobPayTypeEnum::Empty)
            this.JobPayType     = JmgJobPayTypeEnum::Hours;

        if (! this.StartDate)
            this.StartDate = this.ProfileDate;

        if (! this.StopDate)
            this.StopDate = this.ProfileDate;

        if (! this.TransId)
            this.TransId = NumberSeq::newGetNum(JmgParameters::numRefTransId()).num();

        if ((this.JourRegType == JmgJourRegTypeEnum::Absence) && (! this.JobId))
        {
            this.JobId = HRMAbsenceCodeGroup::find(this.JobRef).JmgJobId;
        }

        this.jourRegChanged();

        if (this.Module == JmgModuleEnum::PROD)
        {
            this.DoProdUpdate = NoYes::Yes;
        }

        this.updateJobAsFinished();

        this.setQtyError();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJobAsFinished</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the status on the job as finished.
    /// </summary>
    [Wrappable(true)]
    internal void updateJobAsFinished()
    {
        // Optimization of JobQueue - Begin
        if (this.JobFinished == NoYes::Yes && 
            !JmgManufacturingExecutionWorkloadConfigurationProvider::isJobDeployedOnSpoke(JmgJobTable::find(this.JobId)))
        {
            JmgJobTable::updateReportedFinished(this.JobId, this.JobFinished);
        }
        // Optimization of JobQueue - End
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a <c>JmgStampJournalTrans</c> record into the database.
    /// </summary>
    void insert()
    {
        this.inserting();

        super();

        this.productionQtyUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ipcActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the indirect activity that is associated to the <c>JmgStampJournalTrans</c> record.
    /// </summary>
    /// <returns>
    /// The indirect activity if the <c>JmgStampJournalTrans</c> record refers to an indirect activity;
    /// otherwise, an empty string.
    /// </returns>
    display JmgIpcActivityId ipcActivity()
    {
        if (this.Module == JmgModuleEnum::IPC && this.JobRefType == JmgJobRefTypeEnum::IpcActivity)
        {
            return this.ActOprID;
        }
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>ipcActivityDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the indirect activity description that is associated to the <c>JmgStampJournalTrans</c> record.
    /// </summary>
    /// <returns>
    /// The indirect activity description if the <c>JmgStampJournalTrans</c> record refers to an indirect
    /// activity; otherwise, an empty string.
    /// </returns>
    display JmgDescription ipcActivityDescription()
    {
        if (this.Module == JmgModuleEnum::IPC && this.JobRefType == JmgJobRefTypeEnum::IpcActivity)
        {
            return JmgIpcActivity::findActivityId(this.ipcActivity()).Description;
        }
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>ipcActivityId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the value of the <c>JobId</c> field based on an indirect activity ID.
    /// </summary>
    /// <param name="set">
    /// A Boolean value that specifies whether the value must be updated.
    /// </param>
    /// <param name="value">
    /// The new value to set.
    /// </param>
    /// <returns>
    /// The indirect activity to which the value of the <c>JobId</c> field refers.
    /// </returns>
    edit JmgIpcActivityId ipcActivityId(boolean set, JmgIpcActivityId value)
    {
        if (set)
        {
            if (value)
                this.JobId = JmgIpcActivity::findActivityId(value).JobId;
            else
                this.JobId = '';
        }

        return JmgIpcActivity::findJobId(this.JobId).Activity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ipcCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the indirect category that is associated to the <c>JmgStampJournalTrans</c> record.
    /// </summary>
    /// <returns>
    /// The indirect category if the <c>JmgStampJournalTrans</c> record refers to an indirect activity;
    /// otherwise, an empty string.
    /// </returns>
    display JmgIpcCategoryId ipcCategory()
    {
        if (this.Module == JmgModuleEnum::IPC)
        {
            return this.JobRef;
        }
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>ipcCategoryDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the indirect category description that is associated to the <c>JmgStampJournalTrans</c> record.
    /// </summary>
    /// <returns>
    /// The indirect category description if the <c>JmgStampJournalTrans</c> record refers to an indirect
    /// activity; otherwise, an empty string.
    /// </returns>
    display JmgDescription ipcCategoryDescription()
    {
        if (this.Module == JmgModuleEnum::IPC)
        {
            return JmgIpcCategory::find(this.ipcCategory()).Description;
        }
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>ipcCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the value of the <c>JobRef</c> field based on an indirect category ID.
    /// </summary>
    /// <param name="set">
    /// A Boolean value that specifies whether the value must be updated.
    /// </param>
    /// <param name="value">
    /// The new value to set.
    /// </param>
    /// <returns>
    /// The indirect category to which the value of the <c>JobRef</c> field refers.
    /// </returns>
    edit JmgIpcCategoryId ipcCategoryId(boolean set, JmgIpcCategoryId value)
    {
        if (set)
        {
            if (value)
                this.JobRef = value;
            else
                this.JobRef = '';
        }

        return this.JobRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ipcRegType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the journal registration type for indirect activity registrations.
    /// </summary>
    /// <returns>
    /// The value of the <c>JourRegType</c> field if the <c>JmgStampJournalTrans</c> record
    /// is an indirect activity registration; otherwise, <c>-1</c>.
    /// </returns>
    display JmgJourRegType ipcRegType()
    {
        if (this.Module == JmgModuleEnum::IPC)
        {
            return this.JourRegType;
        }
        return -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item name on the production to which the <c>JmgStampJournalTrans</c> record refers.
    /// </summary>
    /// <returns>
    /// The item name on the production if the <c>JmgStampJournalTrans</c> record refers to a production;
    /// otherwise, an empty string.
    /// </returns>
    display ItemName itemName()
    {
        if (this.Module == JmgModuleEnum::PROD)
        {
            return InventTable::find(this.itemNo()).itemName();
        }
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemNo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item ID on the production to which the <c>JmgStampJournalTrans</c> record refers.
    /// </summary>
    /// <returns>
    /// The item ID on the production if the <c>JmgStampJournalTrans</c> record refers to a production;
    /// otherwise, an empty string.
    /// </returns>
    display ItemId itemNo()
    {
        if (this.Module == JmgModuleEnum::PROD)
        {
            if (JmgProdParameters::find().StampLevel == JmgStampLevel::Job)
            {
                return ProdRouteJob::findJobId(this.JobId).itemId();
            }
            else if (JmgProdParameters::find().StampLevel == JmgStampLevel::Route)
            {
                return ProdRoute::findJobId(this.JobId).prodTable().ItemId;
            }
        }
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>jobDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the job that is associated to the <c>JmgStampJournalTrans</c> record.
    /// </summary>
    /// <returns>
    /// the description of the job that is associated to the <c>JmgStampJournalTrans</c> record.
    /// </returns>
    display JmgDescription jobDescription()
    {
        JmgTermJob  termjob = JmgTermJob::construct(this.JobId);

        return termjob? termjob.jobDescription(): '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>jobDescriptionAbs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the absence job that is associated to the <c>JmgStampJournalTrans</c>
    /// record.
    /// </summary>
    /// <returns>
    /// The description of the absence job that is associated to the <c>JmgStampJournalTrans</c> record.
    /// </returns>
    display JmgDescription jobDescriptionAbs()
    {
        JmgTermJob  termjob = JmgTermJob::construct(this.JobIDAbs);

        return termjob? termjob.jobDescription(): '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>jourRegChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>JmgStampJournalTrans</c> record based on a changed journal registration type.
    /// </summary>
    void jourRegChanged()
    {
        switch (this.JourRegType)
        {
            case JmgJourRegTypeEnum::SignIn :
                this.JobId          = JmgIpcActivity::findSignTypeJobId(JmgSignInOut::SignIn);
                this.JobRefType     = JmgJobRefTypeEnum::IpcActivity;
                break;
            case JmgJourRegTypeEnum::SignOut :
                this.JobId          = JmgIpcActivity::findSignTypeJobId(JmgSignInOut::SignOut);
                this.JobRefType     = JmgJobRefTypeEnum::IpcActivity;
                break;
            case JmgJourRegTypeEnum::StartTeam :
                this.JobId          = JmgIpcActivity::findSignTypeJobId(JmgSignInOut::StartTeam);
                this.JobRefType     = JmgJobRefTypeEnum::IpcActivity;
                break;
            case JmgJourRegTypeEnum::StopTeam :
                this.JobId          = JmgIpcActivity::findSignTypeJobId(JmgSignInOut::StopTeam);
                this.JobRefType     = JmgJobRefTypeEnum::IpcActivity;
                break;
            case JmgJourRegTypeEnum::BreakReg       :
            case JmgJourRegTypeEnum::Absence        :
            case JmgJourRegTypeEnum::IndActivity    :
                this.Module         = JmgModuleEnum::IPC;
                this.JobType        = JmgJobTypeEnum::Normal;
                this.JobPayType     = JmgJobPayTypeEnum::Hours;
                this.StampType      = (this.JourRegType == JmgJourRegTypeEnum::Absence) ? JmgStampTypeEnum::Absence :
                                      (this.JourRegType == JmgJourRegTypeEnum::BreakReg)? JmgStampTypeEnum::Break   : JmgStampTypeEnum::Work;
                if ((this.JourRegType == JmgJourRegTypeEnum::Absence) && (!this.JobIDAbs))
                    this.JobRefType     = JmgJobRefTypeEnum::IpcCategory;
                this.JobRefType     = JmgJobRefTypeEnum::IpcActivity;
                break;
            case JmgJourRegTypeEnum::MrpQueueBefore :
            case JmgJourRegTypeEnum::MrpSetup       :
            case JmgJourRegTypeEnum::MrpProcess     :
            case JmgJourRegTypeEnum::MrpOverlap     :
            case JmgJourRegTypeEnum::MrpTransport   :
            case JmgJourRegTypeEnum::MrpQueueAfter  :
                this.Module         = JmgModuleEnum::PROD;
                this.StampType      = JmgStampTypeEnum::Work;
                this.JobRefType     = (this.JourRegType - JmgJourRegTypeEnum::MrpQueueBefore) + JmgJobRefTypeEnum::MrpQueueBefore;
                break;
            case JmgJourRegTypeEnum::PrjProject :
            case JmgJourRegTypeEnum::PrjActivity :
                this.Module         = JmgModuleEnum::PROJ;
                this.StampType      = JmgStampTypeEnum::Work;
                this.JobRefType     = (this.JourRegType - JmgJourRegTypeEnum::PrjProject) + JmgJobRefTypeEnum::PrjProject;
                break;
        }

        if (this.JobId)
        {
            if (this.JobIDAbs && (this.JourRegType == JmgJourRegTypeEnum::Absence))
            {
                this.setJournalTransTypes(JmgTermJob::commonJob(this.JobIDAbs));
            }
            else
            {
                this.setJournalTransTypes(JmgTermJob::commonJob(this.JobId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the specified dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// The first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// The second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was initialized with the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the specified dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodRouteCalcQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the calculated quantity of the production job that is associated to the
    /// <c>JmgStampJournalTrans</c> record.
    /// </summary>
    /// <returns>
    /// The calculated quantity of the production job, if the <c>JmgStampJournalTrans</c> record refers to
    /// a production job; otherwise, <c>0</c>.
    /// </returns>
    display RouteOprQtyToOpr prodRouteCalcQty()
    {
        ProdRouteJob    tmpProdRouteJob;
        ProdRoute       tmpProdRoute;

        switch (JmgProdParameters::find().StampLevel)
        {
            case JmgStampLevel::Job :
                select firstonly OprNum, OprPriority from tmpProdRouteJob
                    where tmpProdRouteJob.JobId == this.JobId;
                select firstonly CalcQty from tmpProdRoute
                    index hint NumOprNumIdx
                    where tmpProdRoute.ProdId       == this.JobRef    &&
                          tmpProdRoute.OprNum       == tmpProdRouteJob.OprNum       &&
                          tmpProdRoute.OprPriority  == tmpProdRouteJob.OprPriority;
                break;

            case JmgStampLevel::Route :
                select firstonly CalcQty from tmpProdRoute
                    where tmpProdRoute.JobIdProcess == this.JobId;
                break;
        }

        return tmpProdRoute.CalcQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodRouteStartup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the started quantity on the job that is associated by the <c>JmgStampJournalTrans</c>
    /// record.
    /// </summary>
    /// <returns>
    /// the started quantity on the job that is associated by the <c>JmgStampJournalTrans</c> record.
    /// </returns>
    display ProdQtyStUp prodRouteStartup()
    {
        JmgStampJournalTrans    tmpJmgStampJournalTrans;
        JmgStampTrans           tmpJmgStampTrans;

        select sum(SysQtyStartup) from tmpJmgStampTrans
            where tmpJmgStampTrans.JobId == this.JobId;

        select sum(SysQtyStartup) from tmpJmgStampJournalTrans
            where tmpJmgStampJournalTrans.JobId == this.JobId;

        return tmpJmgStampJournalTrans.SysQtyStartup + tmpJmgStampTrans.SysQtyStartup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productionQtyUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates production quantity related fields on the <c>JmgStampJournalTrans</c> record.
    /// </summary>
    /// <param name="_jobfinishedPreviously">
    /// true if the job has previously been marked as finished; otherwise, false.
    /// </param>
    private void productionQtyUpdate(boolean _jobfinishedPreviously = false)
    {
        boolean                 ret;
        boolean                 dostartup;
        JmgTermJob_Prod         prodJob;
        JmgTermJob              job;

        if (this.DoProdUpdate           != NoYes::Yes)
            return;

        ttsbegin;
        this.DoProdUpdate = NoYes::No;
        this.doUpdate();
        ttscommit;

        if (this.Module                 != JmgModuleEnum::PROD)
            return;

        job = JmgTermJob::construct(this.JobId);
        if (!job.isValidJobId() || job.module() != JmgModuleEnum::PROD)
        {
            return;
        }
        ttsbegin;
        prodJob = job;

        if (JmgProdParametersDim::find(prodJob.siteInventDimId()).StartUpStatus   != JmgProdStatusUpdate::No)
        {
            if (this.QtyStartup != this.SysQtyStartup)
            {
                dostartup   = true;
            }
            else
            {
                if (! prodJob.reportedStarted())
                    dostartup   = true;
            }
        }

        if (dostartup)
        {
            this.SysQtyStartup  = this.QtyStartup;
            this.PdsCWSysQtyStartup       = this.PdsCWQtyStartup;

            ret                 = true;
        }

        if ((this.QtyGood       != this.SysQtyGood) ||
            (this.QtyError      != this.SysQtyError)||
            (this.ErrorSpecification != this.SysErrorSpecification)||
            ((this.JobFinished) && (! _jobfinishedPreviously)))
        {
            ret                                 = true;

            this.SysQtyGood                     = this.QtyGood;
            this.SysQtyError                    = this.QtyError;
            this.SysErrorSpecification          = this.ErrorSpecification;

            this.PdsCWSysQtyGood                = this.PdsCWQtyGood;
            this.PdsCWSysQtyError               = this.PdsCWQtyError;
        }

        if (ret)
        {
            this.doUpdate();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the project ID that is associated to the <c>JmgStampJournalTrans</c> record.
    /// </summary>
    /// <returns>
    /// The project ID if the <c>JmgStampJournalTrans</c> record refers to a project; otherwise, an empty
    /// string.
    /// </returns>
    display ProjId projectId()
    {
        if (this.Module == JmgModuleEnum::PROJ)
        {
            return this.JobRef;
        }
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the project name that is associated to the <c>JmgStampJournalTrans</c> record.
    /// </summary>
    /// <returns>
    /// The project name if the <c>JmgStampJournalTrans</c> record refers to an indirect activity;
    /// otherwise, an empty string.
    /// </returns>
    display ProjName projectName()
    {
        if (this.Module == JmgModuleEnum::PROJ)
        {
            return ProjTable::find(this.JobRef).Name;
        }
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyErrorDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the error quantity that is reported on the job associated by the
    /// <c>JmgStampJournalTrans</c> record.
    /// </summary>
    /// <returns>
    /// the error quantity that is reported on the job associated by the <c>JmgStampJournalTrans</c> record.
    /// </returns>
    display ProdReportedError qtyErrorDisplay()
    {
        ProdReportedError ret;

        ret = (select firstonly sum(QtyError) from jmgStampJournalTrans
                   where jmgStampJournalTrans.JobId == this.JobId).QtyError;

        ret += (select firstonly sum(QtyError) from jmgStampTrans
                    where jmgStampTrans.JobId == this.JobId).QtyError;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyGoodDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the good quantity that is reported on the job associated by the
    /// <c>JmgStampJournalTrans</c> record.
    /// </summary>
    /// <returns>
    /// The good quantity that is reported on the job associated by the <c>JmgStampJournalTrans</c> record.
    /// </returns>
    display ProdReportedGood qtyGoodDisplay()
    {
        ProdReportedGood ret;

        ret = (select firstonly sum(QtyGood) from jmgStampJournalTrans
                   where jmgStampJournalTrans.JobId == this.JobId).QtyGood;

        ret += (select firstonly sum(QtyGood) from jmgStampTrans
                    where jmgStampTrans.JobId == this.JobId).QtyGood;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registrationTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>Seconds</c> field formatted as a string.
    /// </summary>
    /// <returns>
    /// the value of the <c>Seconds</c> field formatted as a string.
    /// </returns>
    display JmgLabelSeconds registrationTime()
    {
        return JmgProfileSeconds::formattedSeconds(this.Seconds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>secondsReal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>Seconds</c> field formatted as a real.
    /// </summary>
    /// <returns>
    /// the value of the <c>Seconds</c> field formatted as a real.
    /// </returns>
    display JmgLabelSeconds_Real secondsReal()
    {
        return this.Seconds / 3600;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJournalTransTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>JmgStampJournalTrans</c> record based on the specified source record.
    /// </summary>
    /// <param name="inJobTable">
    /// The source record to use when initializing the <c>JmgStampJournalTrans</c> record.
    /// </param>
    /// <remarks>
    /// The source table can be one of the following tables: <c>JmgIpcCategory</c>, <c>JmgIpcActivity</c>,
    /// <c>ProdRouteJob</c>, <c>ProdRoute</c>, <c>ProjTable</c>, <c>ProjActivity</c>,
    /// <c>ProjForecastEmpl</c>, <c>HRMAbsenceCodeGroup</c>, or <c>HRMAbsenceCode</c>.
    /// </remarks>
    void setJournalTransTypes(Common inJobTable)
    {
        JmgIpcCategory      jmgIpcCategory;
        JmgIpcActivity      jmgIpcActivity;
        ProdRouteJob        prodRouteJob;
        ProdRoute           prodRoute;
        ProjTable           projTable;
        ProjActivity        projActivity;
        ProjForecastEmpl    projForecastEmpl;
        HRMAbsenceCodeGroup hrmAbsenceCodeGroup;
        HRMAbsenceCode      hrmAbsenceCode;

        switch (inJobTable.TableId)
        {
            case tableNum(JmgIpcCategory):
                jmgIpcCategory  = inJobTable;
                this.init_Ipc(jmgIpcCategory);
                break;
            case tableNum(JmgIpcActivity):
                jmgIpcActivity  = inJobTable;
                jmgIpcCategory  = JmgIpcCategory::find(jmgIpcActivity.Category);
                this.init_Ipc(jmgIpcCategory,jmgIpcActivity);
                break;
            case tableNum(ProdRouteJob):
                prodRouteJob    = inJobTable;
                this.init_Prod(prodRouteJob);
                break;
            case tableNum(ProdRoute):
                prodRoute       = inJobTable;
                this.init_ProdRoute(this.JobId);
                break;
            case tableNum(ProjTable):
                projTable       = inJobTable;
                this.init_Proj(projTable);
                break;
            case tableNum(ProjActivity):
                projActivity    = inJobTable;
                projTable       = HierarchyTreeTable_Extension::findAssociation(smmActivities::find(projActivity.ActivityNumber), tableNum(ProjTable));
                this.init_Proj(projTable,projActivity);
                break;
            case tableNum(ProjForecastEmpl):
                projForecastEmpl  = inJobTable;
                projTable       = ProjTable::find(projForecastEmpl.ProjId);
                this.init_Proj(projTable,null,projForecastEmpl);
                break;
            case tableNum(HRMAbsenceCodeGroup):
                hrmAbsenceCodeGroup = inJobTable;
                this.init_Absence(hrmAbsenceCodeGroup);
                break;
            case tableNum(HRMAbsenceCode):
                hrmAbsenceCode      = inJobTable;
                hrmAbsenceCodeGroup = HRMAbsenceCodeGroup::find(hrmAbsenceCode.HrmAbsenceCodeGroupId);
                this.init_Absence(hrmAbsenceCodeGroup, hrmAbsenceCode);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQtyError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>QtyError</c> field based on the value of the <c>ErrorSpecification</c> field.
    /// </summary>
    private void setQtyError()
    {
        JmgTmpErrorSpecification sumError;
        sumError = JmgErrorSpecificationForm::decodeErrorSpecification(this.ErrorSpecification);
        select sum(QtyError), sum(PdsCWQtyError) from sumError;

        this.QtyError = sumError.QtyError;
        this.PdsCWQtyError = sumError.PdsCWQtyError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the activity that is associated to the <c>JmgStampJournalTrans</c> record.
    /// </summary>
    /// <returns>
    /// The activity that is associated to the <c>JmgStampJournalTrans</c> record.
    /// </returns>
    display JmgSubRef subId()
    {
        switch (this.Module)
        {
            case JmgModuleEnum::IPC:
                return JmgIpcActivity::findJobId(this.JobId).Activity;

            case JmgModuleEnum::PROD:
                return this.JobId;

            case JmgModuleEnum::PROJ:
                if (ProjTable::findJobId(this.JobId))
                    return '';

                return ProjActivity::findJobId(this.JobId).ActivityNumber;
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalGoodItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the good quantity that is reported on the job that is associated by the
    /// <c>JmgStampJournalTrans</c> record.
    /// </summary>
    /// <returns>
    /// The good quantity that is reported on the job that is associated by the <c>JmgStampJournalTrans</c>
    /// record.
    /// </returns>
    display ProdReportedGood totalGoodItems()
    {
        if (this.Module == JmgModuleEnum::PROD)
        {
            if (JmgProdParameters::find().StampLevel == JmgStampLevel::Job)
            {
                return ProdRouteJob::findJobId(this.JobId).qtyGood();
            }
            else if (JmgProdParameters::find().StampLevel == JmgStampLevel::Route)
            {
                return ProdRoute::findJobId(this.JobId).reportedQtyGood();
            }
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalScrapItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the error quantity reported on the job that is associated with the
    /// <c>JmgStampJournalTrans</c> record.
    /// </summary>
    /// <returns>
    /// The error quantity reported on the job that is associated with the <c>JmgStampJournalTrans</c>
    /// record.
    /// </returns>
    display ProdReportedError totalScrapItems()
    {
        if (this.Module == JmgModuleEnum::PROD)
        {
            if (JmgProdParameters::find().StampLevel == JmgStampLevel::Job)
            {
                return ProdRouteJob::findJobId(this.JobId).qtyError();
            }
            else if (JmgProdParameters::find().StampLevel == JmgStampLevel::Route)
            {
                return ProdRoute::findJobId(this.JobId).reportedQtyError();
            }
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates fields on the <c>JmgStampJournalTrans</c> record before the update.
    /// </summary>
    /// <param name = "_oldStampJournalTrans">
    /// A <c>JmgStampJournalTrans</c> table buffer.
    /// </param>
    /// <returns>
    /// true if the job finished previously; otherwise false.
    /// </returns>
    protected boolean updating(JmgStampJournalTrans _oldStampJournalTrans)
    {
        boolean                 jobfinishedPreviously = false;
        JmgPayAddTrans          jmgPayAddTrans;

        if (this.JobPayType == JmgJobPayTypeEnum::Empty)
            this.JobPayType     = JmgJobPayTypeEnum::Hours;

        if ((this.JourRegType == JmgJourRegTypeEnum::Absence) && (! this.JobId))
        {
            this.JobId = HRMAbsenceCodeGroup::find(this.JobRef).JmgJobId;
        }

        if (this.orig().JourRegType != this.JourRegType)
            this.jourRegChanged();

        if (this.ErrorSpecification != this.orig().ErrorSpecification)
        {
            this.setQtyError();
        }

        if (this.Module        == JmgModuleEnum::PROD)
        {
            if ((this.QtyError      != _oldStampJournalTrans.QtyError)   ||
                (this.QtyGood       != _oldStampJournalTrans.QtyGood)    ||
                (this.QtyStartup    != _oldStampJournalTrans.QtyStartup) ||
                (this.JobFinished   != _oldStampJournalTrans.JobFinished))
            {
                this.DoProdUpdate       = NoYes::Yes;
                jobfinishedPreviously    = _oldStampJournalTrans.JobFinished == NoYes::Yes;
            }
        }

        if (this.TransId != this.orig().TransId)
        {
            update_recordset jmgPayAddTrans
                setting TransId = this.TransId
                where   jmgPayAddTrans.Date     == this.ProfileDate &&
                        jmgPayAddTrans.Worker   == this.Worker      &&
                        jmgPayAddTrans.TransId  == this.orig().TransId;
        }

        return jobfinishedPreviously;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>JmgStampJournalTrans</c> record in the database.
    /// </summary>
    void update()
    {
        JmgStampJournalTrans    oldStampJournalTrans = this.orig();
        boolean                 jobfinishedPreviously = this.updating(oldStampJournalTrans);

        super();

        // Optimization of JobQueue - Begin
        if (this.JobFinished != oldStampJournalTrans.JobFinished)
        {
            JmgJobTable::updateReportedFinished(this.JobId, this.JobFinished);
        }
        // Optimization of JobQueue - End

        this.productionQtyUpdate(jobfinishedPreviously);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOriginalTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates original transaction field.
    /// </summary>
    public void updateOriginalTransaction()
    {
        this.OriginalTransaction = buf2Con(this);
        this.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean             ret;
        JmgTermJob          job;

        ret = super();
        if (this.JobId)
        {
            job = JmgTermJob::construct(this.JobId);
        }
        if (ret && job)
        {
            ret = job.validateStampJournalTransWrite(this);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>webStartTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the value of the <c>StartTime</c> field.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that specifies whether the value must be updated.
    /// </param>
    /// <param name="value">
    /// The new value to set.
    /// </param>
    /// <returns>
    /// The value of the <c>StartTime</c> field formatted as a string.
    /// </returns>
    public edit JmgLabelTimeFrom webStartTime(boolean _set, JmgTimeString value)
    {
        if (_set)
        {
            this.StartTime = JmgProfileSeconds::unFormattedSeconds(value, JmgSecondPresentationEnum::Clocktime);
        }
        return JmgProfileSeconds::formattedSeconds(this.StartTime, JmgSecondPresentationEnum::Clocktime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>webStopTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the value of the <c>StopTime</c> field.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that specifies whether the value must be updated.
    /// </param>
    /// <param name="value">
    /// The new value to set.
    /// </param>
    /// <returns>
    /// The value of the <c>StopTime</c> field formatted as a string.
    /// </returns>
    public edit JmgLabelTimeTo webStopTime(boolean _set, JmgTimeString value)
    {
        if (_set)
        {
            this.StopTime = JmgProfileSeconds::unFormattedSeconds(value, JmgSecondPresentationEnum::Clocktime);
        }
        return JmgProfileSeconds::formattedSeconds(this.StopTime, JmgSecondPresentationEnum::Clocktime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>changedFromForms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the specified <c>JmgStampJournalTrans</c> record when values have been changed on the
    /// <c>JmgCalcApprove</c> form.
    /// </summary>
    /// <param name="jmgStampJournalTrans">
    /// The <c>JmgStampJournalTrans</c> record, which has been changed.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// An invalid job ID has been assigned to the <c>JmgStampJournalTrans</c> record.
    /// </exception>
    static void changedFromForms(JmgStampJournalTrans jmgStampJournalTrans)
    {
        JmgTermJob  job;
        if ((jmgStampJournalTrans.JobId                                             &&
             jmgStampJournalTrans.JobId     != jmgStampJournalTrans.orig().JobId)   ||
             jmgStampJournalTrans.JobIDAbs  != jmgStampJournalTrans.orig().JobIDAbs)
        {
            if (jmgStampJournalTrans.StampType == JmgStampTypeEnum::Absence &&
                jmgStampJournalTrans.JobIDAbs)
            {
                job = JmgTermJob::construct(jmgStampJournalTrans.JobIDAbs);
            }
            else
            {
                job = JmgTermJob::construct(jmgStampJournalTrans.JobId);
            }

            if (job.isValidJobId())
            {
                jmgStampJournalTrans.setJournalTransTypes(job.sourceData());
            }
            else
            {
                throw error(strFmt("@SYS38535",jmgStampJournalTrans.JobId));
            }
        }

        if (jmgStampJournalTrans.JourRegType == JmgJourRegTypeEnum::SwitchCode)
        {
            throw error("@SYS4008457");
        }

        if (jmgStampJournalTrans.JourRegType    == JmgJourRegTypeEnum::SignIn           ||
            jmgStampJournalTrans.JourRegType    == JmgJourRegTypeEnum::SignOut          ||
            jmgStampJournalTrans.JourRegType    == JmgJourRegTypeEnum::StartTeam        ||
            jmgStampJournalTrans.JourRegType    == JmgJourRegTypeEnum::StopTeam         ||
            jmgStampJournalTrans.StampTypeSpec  == JmgStampTypeSpecEnum::BreakDropAll   ||
            jmgStampJournalTrans.StampTypeSpec  == JmgStampTypeSpecEnum::BreakDropOne)
        {
            jmgStampJournalTrans.StopDate   = jmgStampJournalTrans.StartDate;
            jmgStampJournalTrans.StopTime   = jmgStampJournalTrans.StartTime;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>JmgStampJournalTrans</c> table by using the specified record ID value.
    /// </summary>
    /// <param name="_recId">
    /// The record ID value.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency model setting to use on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>JmgStampJournalTrans</c> table.
    /// </returns>
    public static JmgStampJournalTrans findRecId(
        RefRecId            _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        JmgStampJournalTrans jmgStampJournalTrans;

        jmgStampJournalTrans.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            jmgStampJournalTrans.concurrencyModel(_concurrencyModel);
        }

         select firstonly jmgStampJournalTrans
             where jmgStampJournalTrans.RecId == _recId;

        return jmgStampJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageListJobType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>FormWindowControl</c> object that has an image list that is used to depict job
    /// types.
    /// </summary>
    /// <param name="formWindowControl">
    /// The <c>FormWindowControl</c> which is initialized.
    /// </param>
    static void imageListJobType(FormWindowControl formWindowControl = null)
    {
        #JmgIcons

        Imagelist imagelist = new Imagelist(Imagelist::smallIconWidth(), Imagelist::smallIconHeight());

        imagelist.add(new Image(#JMG_IMG_JOBTYPE_NORMAL));
        imagelist.add(new Image(#JMG_IMG_JOBTYPE_BUNDLE1));
        imagelist.add(new Image(#JMG_IMG_JOBTYPE_BUNDLE2));
        imagelist.add(new Image(#JMG_IMG_JOBTYPE_BUNDLE3));

        if (formWindowControl)
            formWindowControl.imageList(imagelist);
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageListModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>FormWindowControl</c> object that has an image list that is use to depict module
    /// types.
    /// </summary>
    /// <param name="formWindowControl">
    /// The <c>FormWindowControl</c> which is initialized.
    /// </param>
    static void imageListModule(FormWindowControl formWindowControl = null)
    {
        #JmgIcons

        Imagelist imagelist = new Imagelist(Imagelist::smallIconWidth(), Imagelist::smallIconHeight());

        imagelist.add(new Image(#JMG_IMG_MODULE_IPC));
        imagelist.add(new Image(#JMG_IMG_MODULE_PROD));
        imagelist.add(new Image(#JMG_IMG_MODULE_PROJ));

        if (formWindowControl)
            formWindowControl.imageList(imagelist);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFrom_StampTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>JmgStampJournalTrans</c> record based on a <c>JmgStampTrans</c> record.
    /// </summary>
    /// <param name="jmgStampTrans">
    /// The <c>JmgStampTrans</c> record that is used to initialize a <c>JmgStampJournalTrans</c> record.
    /// </param>
    /// <returns>
    /// An initialized <c>JmgStampJournalTrans</c> record.
    /// </returns>
    static JmgStampJournalTrans newFrom_StampTrans(JmgStampTransMap jmgStampTransMapIn)
    {
        JmgStampJournalTrans    jmgStampJournalTrans;
        JmgStampTransMap        jmgStampTrans;

        JmgJobId getProdRouteJob()
        {
            return (select firstonly JobId from prodRouteJob
                           where prodRouteJob.ProdId    == jmgStampJournalTrans.JobRef &&
                                 prodRouteJob.OprNum    == jmgStampJournalTrans.OprNum &&
                                 prodRouteJob.JobType   == jmgStampJournalTrans.RouteJobType).JobId;
        }
        JmgJobId getProdRoute()
        {
            if (jmgStampJournalTrans.RouteJobType == RouteJobType::Setup)
                return (select firstonly JobIdSetup from prodRoute
                               where prodRoute.ProdId    == jmgStampJournalTrans.JobRef &&
                                     prodRoute.OprNum    == jmgStampJournalTrans.OprNum).JobIdSetup;
            else if (jmgStampJournalTrans.RouteJobType == RouteJobType::Process)
                return (select firstonly JobIdProcess from prodRoute
                               where prodRoute.ProdId    == jmgStampJournalTrans.JobRef &&
                                     prodRoute.OprNum    == jmgStampJournalTrans.OprNum).JobIdProcess;
            return '';
        }

        jmgStampTrans.data(jmgStampTransMapIn);
        jmgStampJournalTrans.data(jmgStampTrans);

        if (jmgStampJournalTrans.Module == JmgModuleEnum::PROD)
        {
            if ((! ProdRouteJob::findJobId(jmgStampJournalTrans.JobId)) && (!ProdRoute::findJobId(jmgStampJournalTrans.JobId)) && jmgStampJournalTrans.OprNum && jmgStampJournalTrans.RouteJobType)
            {
                if (JmgProdParameters::find().StampLevel == JmgStampLevel::Job)
                {
                    jmgStampJournalTrans.JobId = getProdRouteJob();
                    if (! jmgStampJournalTrans.JobId)
                        jmgStampJournalTrans.JobId = getProdRoute();
                }
                else
                {
                    jmgStampJournalTrans.JobId = getProdRoute();
                    if (! jmgStampJournalTrans.JobId)
                        jmgStampJournalTrans.JobId = getProdRouteJob();
                }
            }
        }

        return jmgStampJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkflowStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>WorkflowStatus</c> field of the <c>JmgStampJournalTrans</c> table, depending on the
    /// workflow events that have occurred.
    /// </summary>
    /// <param name="_jmgStampJournalTransRecId">
    /// The record ID of the record that is associated with the workflow.
    /// </param>
    /// <param name="_jmgJournalRegWorkflowStatus">
    /// The workflow state to set.
    /// </param>
    /// <remarks>
    /// The method is called from the workflow event handler classes.
    /// </remarks>
    public static void setWorkflowStatus(
        RefRecId                    _jmgStampJournalTransRecId,
        JmgJournalRegWorkflowStatus _jmgJournalRegWorkflowStatus)
    {
        JmgStampJournalTrans    jmgStampJournalTrans;

        ttsbegin;

        jmgStampJournalTrans = JmgStampJournalTrans::findRecId(_jmgStampJournalTransRecId, true);
        jmgStampJournalTrans.WorkflowStatus = _jmgJournalRegWorkflowStatus;
        jmgStampJournalTrans.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        if (_fieldId == fieldNum(JmgStampJournalTrans, ProfileDate))
        {
            TransDate   newProfileDate =  this.ProfileDate;
            TransDate   oldProfileDate =    this.orig().ProfileDate;

            if (newProfileDate != oldProfileDate
                   && JmgStampJournalTable::find(this.Worker, newProfileDate).Calculated)
            {
                this.ProfileDate = oldProfileDate;
                throw error(strFmt('@SCM:JmgPofileMoveError', newProfileDate));
            }
        }
        super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jmgStampTransInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>JmgStampTransInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// The <c>JmgStampTransInterface</c> object.
    /// </returns>
    public JmgStampTransInterface jmgStampTransInterface()
    {
        return this.JmgStampTransMap::jmgStampTransInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransactionNewLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current transaction should be logged as a new one.
    /// </summary>
    /// <returns>
    /// True if it should be logged as a new one; otherwise false.
    /// </returns>
    /// <remarks>
    /// It is supposed that posted production lines have original transactions populated.
    /// </remarks>
    internal boolean isTransactionNewLog()
    {
        boolean ret = this.isNewRecord();
        
        if (!ret)
        {
            ret = this.Module == JmgModuleEnum::PROD
                && !this.OriginalTransaction
                && !JmgChangeLog::find(this.TransTableId, this.TransRecId).RecId;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>JmgRegistrationEmployees</ConfigurationKey>
	<DeveloperDocumentation>@SYS317307</DeveloperDocumentation>
	<Label>@SYS38403</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>Worker</TitleField1>
	<TitleField2>ProfileDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>EmplProfDateIdx</ClusteredIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StopDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StopTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Module</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Seconds</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyGood</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyError</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ErrorCause</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CorrectedTime</Name>
			<Label>@SYS38617</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CorrStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrStartTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrStopDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrStopTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimensions</Name>
			<Label>@SYS5951</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ErrorLog</Name>
			<Label>@SYS15457</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Log</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IndirectProperties</Name>
			<Label>@SYS38618</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BreakSeconds</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BreakTolerance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AbsencePayQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Job</Name>
			<Label>@SYS1066</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JourRegType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Module</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RouteJobType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StampType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StampTypeSpec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnCallActivity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OrdinaryTime</Name>
			<Label>@SYS38616</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StopDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StopTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Piecework</Name>
			<Label>@SYS711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PieceRatePayCostTypeMin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PieceRatePayMinRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PieceRatePayRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectProperties</Name>
			<Label>@SYS50641</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Qty</Name>
			<Label>@SYS50777</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QtyGood</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWQtyGood</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyError</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWQtyError</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobFinished</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobPayType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SysQtyStartup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWSysQtyStartup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SysQtyGood</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWSysQtyGood</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SysQtyError</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWSysQtyError</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WrkCtrId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerPilot</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WrkCtrIdPilot</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobIDAbs</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActOprID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobRefType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyStartup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWQtyStartup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TermRegStartRecID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TermRegStopRecID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjEmplTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkflowStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Terminal</Name>
			<Label>@SYS39201</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TermStart</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TermStop</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkflowPreview</Name>
			<Label>@SYS313953</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JourRegType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Module</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActOprID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>jobDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StampTypeSpec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobIDAbs</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>jobDescriptionAbs</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StopDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StopTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AbsencePayQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgPayQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Active</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS3043</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActOprID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgActOprID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>BreakSeconds</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Label>@SYS38391</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>BreakTolerance</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Label>@SYS39037</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CorrStartDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgDate</ExtendedDataType>
			<Label>@SYS38444</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>CorrStartTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgTime</ExtendedDataType>
			<Label>@SYS38413</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CorrStopDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgDate</ExtendedDataType>
			<Label>@SYS38445</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>CorrStopTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgTime</ExtendedDataType>
			<Label>@SYS38412</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>doProdUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS25242</Label>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ErrorCause</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<Visible>No</Visible>
			<EnumType>ProdErrorCause</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ErrorSpecification</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<ExtendedDataType>JmgErrorSpecification</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsGeneratedByCalculation</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JobFinished</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@sys8524</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JobId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgJobId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JobIDAbs</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgJobIDAbs</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JobPayType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<ExtendedDataType>JmgJobPayType</ExtendedDataType>
			<EnumType>JmgJobPayTypeEnum</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JobRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgJobRef</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JobRefType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgJobRefType</ExtendedDataType>
			<EnumType>JmgJobRefTypeEnum</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JobType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgJobType</ExtendedDataType>
			<EnumType>JmgJobTypeEnum</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JourRegType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgJourRegType</ExtendedDataType>
			<EnumType>JmgJourRegTypeEnum</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Log</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogTxt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Module</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgModule</ExtendedDataType>
			<EnumType>JmgModuleEnum</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OnCallActivity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgIpcActivityIdOnCall</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>OprNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<ExtendedDataType>OprNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>OriginalTransaction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Blobdata</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQtyError</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWBatchErr</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQtyGood</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWBatchGood</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQtyStartup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWBatchStup</ExtendedDataType>
			<Label>@PDS1557</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWSysQtyError</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWBatchErr</ExtendedDataType>
			<Label>@PDS1567</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWSysQtyGood</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWBatchGood</ExtendedDataType>
			<Label>@PDS1566</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWSysQtyStartup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWBatchStup</ExtendedDataType>
			<Label>@PDS1565</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PieceRatePayCostTypeMin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<ExtendedDataType>JmgPayCostType</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS39386</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PieceRatePayMinRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<ExtendedDataType>JmgRate</ExtendedDataType>
			<Label>@SYS39287</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PieceRatePayRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<ExtendedDataType>JmgRate</ExtendedDataType>
			<Label>@SYS39388</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ProfileDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>StartDate</ExtendedDataType>
			<Label>@SYS38388</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjEmplTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<ExtendedDataType>ProjEmplTransId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyError</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<ExtendedDataType>ProdReportedError</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyGood</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<ExtendedDataType>ProdReportedGood</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyStartup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<ExtendedDataType>ProductQuantity</ExtendedDataType>
			<Label>@SYS15063</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RouteJobType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<EnumType>RouteJobType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Seconds</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Label>@SYS25816</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SecondsOnReg</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Label>@SYS39390</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SecondsOnTrans</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Label>@SYS39391</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StampType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgStampType</ExtendedDataType>
			<EnumType>JmgStampTypeEnum</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StampTypeSpec</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgStampTypeSpec</ExtendedDataType>
			<EnumType>JmgStampTypeSpecEnum</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgDate</ExtendedDataType>
			<Label>@SYS2168</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>StartTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgTime</ExtendedDataType>
			<Label>@SYS39127</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StopDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgDate</ExtendedDataType>
			<Label>@SYS22882</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>StopTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgTime</ExtendedDataType>
			<Label>@SYS51132</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SysErrorSpecification</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<ExtendedDataType>JmgErrorSpecification</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SysQtyError</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<ExtendedDataType>ProductQuantity</ExtendedDataType>
			<Label>@SYS38560</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SysQtyGood</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<ExtendedDataType>ProductQuantity</ExtendedDataType>
			<Label>@SYS38558</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SysQtyStartup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<ExtendedDataType>ProductQuantity</ExtendedDataType>
			<Label>@SYS38559</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TermRegStartRecID</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>JmgTermRegStartRecID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TermRegStopRecID</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>JmgTermRegStopRecID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TermStart</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgTerminalId</ExtendedDataType>
			<Label>@SYS39930</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TermStop</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgTerminalId</ExtendedDataType>
			<Label>@SYS39932</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TransRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TransTableId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>JmgWorkerRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerPilot</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>JmgWorkerRecId_JobPilot</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkflowStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>JmgJournalRegWorkflowStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WrkCtrId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<ExtendedDataType>WrkCtrId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WrkCtrIdPilot</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>JmgWrkCtrIdPilot</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SysRowVersionNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>SysRowVersionNumber</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Null>Yes</Null>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>JobRefJobIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>JobRef</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>JobId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WorkerPilotIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkerPilot</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>JobIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>JobId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RegStartIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TermRegStartRecID</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TermRegStopRecID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>EmplProfDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Worker</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProfileDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StartDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StartTime</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Active</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StopDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StopTime</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>JourRegType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DayEmplIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProfileDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Worker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>JmgStampTransMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AbsencePayQty</MapField>
					<MapFieldTo>AbsencePayQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ActOprID</MapField>
					<MapFieldTo>ActOprID</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BreakTime</MapField>
					<MapFieldTo>BreakSeconds</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BreakTolerance</MapField>
					<MapFieldTo>BreakTolerance</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CorrStartDate</MapField>
					<MapFieldTo>CorrStartDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CorrStartTime</MapField>
					<MapFieldTo>CorrStartTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CorrStopDate</MapField>
					<MapFieldTo>CorrStopDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CorrStopTime</MapField>
					<MapFieldTo>CorrStopTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ErrorCause</MapField>
					<MapFieldTo>ErrorCause</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ErrorSpecification</MapField>
					<MapFieldTo>ErrorSpecification</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsGeneratedByCalculation</MapField>
					<MapFieldTo>IsGeneratedByCalculation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JobFinished</MapField>
					<MapFieldTo>JobFinished</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JobId</MapField>
					<MapFieldTo>JobId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JobIDAbs</MapField>
					<MapFieldTo>JobIDAbs</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JobPayType</MapField>
					<MapFieldTo>JobPayType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JobRef</MapField>
					<MapFieldTo>JobRef</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JobRefType</MapField>
					<MapFieldTo>JobRefType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JobType</MapField>
					<MapFieldTo>JobType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JourRegType</MapField>
					<MapFieldTo>JourRegType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Module</MapField>
					<MapFieldTo>Module</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OnCallActivity</MapField>
					<MapFieldTo>OnCallActivity</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OprNum</MapField>
					<MapFieldTo>OprNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWQtyError</MapField>
					<MapFieldTo>PdsCWQtyError</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWQtyGood</MapField>
					<MapFieldTo>PdsCWQtyGood</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWQtyStartup</MapField>
					<MapFieldTo>PdsCWQtyStartup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWSysQtyError</MapField>
					<MapFieldTo>PdsCWSysQtyError</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWSysQtyGood</MapField>
					<MapFieldTo>PdsCWSysQtyGood</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWSysQtyStartup</MapField>
					<MapFieldTo>PdsCWSysQtyStartup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PieceRatePayCostTypeMin</MapField>
					<MapFieldTo>PieceRatePayCostTypeMin</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PieceRatePayMinRate</MapField>
					<MapFieldTo>PieceRatePayMinRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PieceRatePayRate</MapField>
					<MapFieldTo>PieceRatePayRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProfileDate</MapField>
					<MapFieldTo>ProfileDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCategory</MapField>
					<MapFieldTo>ProjCategory</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjEmplTransId</MapField>
					<MapFieldTo>ProjEmplTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>QtyError</MapField>
					<MapFieldTo>QtyError</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>QtyGood</MapField>
					<MapFieldTo>QtyGood</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>QtyStartup</MapField>
					<MapFieldTo>QtyStartup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RouteJobType</MapField>
					<MapFieldTo>RouteJobType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Seconds</MapField>
					<MapFieldTo>Seconds</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SecondsOnReg</MapField>
					<MapFieldTo>SecondsOnReg</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SecondsOnTrans</MapField>
					<MapFieldTo>SecondsOnTrans</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StampType</MapField>
					<MapFieldTo>StampType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StampTypeSpec</MapField>
					<MapFieldTo>StampTypeSpec</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StartDate</MapField>
					<MapFieldTo>StartDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StartTime</MapField>
					<MapFieldTo>StartTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StopDate</MapField>
					<MapFieldTo>StopDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StopTime</MapField>
					<MapFieldTo>StopTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SysErrorSpecification</MapField>
					<MapFieldTo>SysErrorSpecification</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SysQtyError</MapField>
					<MapFieldTo>SysQtyError</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SysQtyGood</MapField>
					<MapFieldTo>SysQtyGood</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SysQtyStartup</MapField>
					<MapFieldTo>SysQtyStartup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TermRegStartRecID</MapField>
					<MapFieldTo>TermRegStartRecID</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TermRegStopRecID</MapField>
					<MapFieldTo>TermRegStopRecID</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TermStart</MapField>
					<MapFieldTo>TermStart</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TermStop</MapField>
					<MapFieldTo>TermStop</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransId</MapField>
					<MapFieldTo>TransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Worker</MapField>
					<MapFieldTo>Worker</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WorkerPilot</MapField>
					<MapFieldTo>WorkerPilot</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WorkflowStatus</MapField>
					<MapFieldTo>WorkflowStatus</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WrkCtrId</MapField>
					<MapFieldTo>WrkCtrId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WrkCtrIdPilot</MapField>
					<MapFieldTo>WrkCtrIdPilot</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>JournalRegistration</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_JmgStampJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorkerPilot</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_1_JmgStampJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerPilot</Name>
					<Field>WorkerPilot</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JmgJobTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgJobTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>JobTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Logbook</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JobId</Name>
					<Field>JobId</Field>
					<RelatedField>JobId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>JobIdIndex</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JmgPayTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgPayTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PieceRatePayCostTypeMin</Name>
					<Field>PieceRatePayCostTypeMin</Field>
					<RelatedField>PayCostType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JmgStampJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgStampJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>JmgStampJournalTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>JmgStampJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProfileDate</Name>
					<Field>ProfileDate</Field>
					<RelatedField>ProfileDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>Worker</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JmgTermReg_start</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgTermReg</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>StartRawRegistration</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Logbook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TermRegStartRecID</Name>
					<Field>TermRegStartRecID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JmgTermReg_stop</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgTermReg</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>StopRawRegistration</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Logbook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TermRegStopRecID</Name>
					<Field>TermRegStopRecID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JobId_Absence</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HRMAbsenceCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AbsenceCode</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>Logbook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActOprID</Name>
					<Field>ActOprID</Field>
					<RelatedField>hrmAbsenceCodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>StampType</Name>
					<Field>StampType</Field>
					<ValueStr>JmgStampTypeEnum::Absence</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JobRef</Name>
					<Field>JobRef</Field>
					<RelatedField>hrmAbsenceCodeGroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JobIDAbs</Name>
					<SourceEDT>JmgJobIDAbs</SourceEDT>
					<Field>JobIDAbs</Field>
					<RelatedField>JmgJobId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JobId_AbsenceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HRMAbsenceCodeGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AbsenceGroup</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>Logbook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>StampType</Name>
					<Field>StampType</Field>
					<ValueStr>JmgStampTypeEnum::Absence</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JobId</Name>
					<Field>JobId</Field>
					<RelatedField>JmgJobId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JobRef</Name>
					<Field>JobRef</Field>
					<RelatedField>hrmAbsenceCodeGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JobId_IpcActivity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgIpcActivity</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>IpcActivitie</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>Logbook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JobRef</Name>
					<Field>JobRef</Field>
					<RelatedField>Category</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Module</Name>
					<Field>Module</Field>
					<ValueStr>JmgModuleEnum::IPC</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JobId</Name>
					<Field>JobId</Field>
					<RelatedField>JobId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JobId_ProjActivity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjActivity</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjectActivitie</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Logbook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>StampType</Name>
					<Field>StampType</Field>
					<ValueStr>JmgStampTypeEnum::Work</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Module</Name>
					<Field>Module</Field>
					<ValueStr>JmgModuleEnum::PROJ</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JobId</Name>
					<Field>JobId</Field>
					<RelatedField>JobId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JobId_ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Project</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Logbook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JobRef</Name>
					<Field>JobRef</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>StampType</Name>
					<Field>StampType</Field>
					<ValueStr>JmgStampTypeEnum::Work</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Module</Name>
					<Field>Module</Field>
					<ValueStr>JmgModuleEnum::PROJ</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JobId</Name>
					<Field>JobId</Field>
					<RelatedField>JobId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JobId_Route</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdRouteJob</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RouteJob</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Logbook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JobRef</Name>
					<Field>JobRef</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>StampType</Name>
					<Field>StampType</Field>
					<ValueStr>JmgStampTypeEnum::Work</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JobId</Name>
					<Field>JobId</Field>
					<RelatedField>JobId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JobidAbs_Absence</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HRMAbsenceCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReferenceAbsenceCode</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>Logbook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>StampType</Name>
					<Field>StampType</Field>
					<ValueStr>JmgStampTypeEnum::Absence</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JobRef</Name>
					<Field>JobRef</Field>
					<RelatedField>hrmAbsenceCodeGroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JobId</Name>
					<Field>JobId</Field>
					<RelatedField>JmgJobId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JobRef_Absence</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HRMAbsenceCodeGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReferenceAbsenceGroup</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>Logbook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JobRef</Name>
					<Field>JobRef</Field>
					<RelatedField>hrmAbsenceCodeGroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>JourRegType</Name>
					<Field>JourRegType</Field>
					<ValueStr>JmgJourRegTypeEnum::Absence</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JobRef_IpcBreak</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgIpcCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LpcIndirectActivitie</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Logbook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<RelatedField>Type</RelatedField>
					<ValueStr>JmgStampTypeEnum::Break</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JobRef</Name>
					<Field>JobRef</Field>
					<RelatedField>Category</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>JourRegType</Name>
					<Field>JourRegType</Field>
					<ValueStr>JmgJourRegTypeEnum::BreakReg</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JobRef_IpcCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgIpcCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CategoryIndirectActivitie</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Logbook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<RelatedField>Type</RelatedField>
					<ValueStr>JmgStampTypeEnum::Work</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JobRef</Name>
					<Field>JobRef</Field>
					<RelatedField>Category</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>JourRegType</Name>
					<Field>JourRegType</Field>
					<ValueStr>JmgJourRegTypeEnum::IndActivity</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JobRef_Prod</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProductionOrder</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Logbook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JobRef</Name>
					<Field>JobRef</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>JourRegType</Name>
					<Field>JourRegType</Field>
					<ValueStr>JmgJourRegTypeEnum::MrpQueueBefore</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JobRef_ProdOverlap</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OverlapProductionOrder</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Logbook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JobRef</Name>
					<Field>JobRef</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>JourRegType</Name>
					<Field>JourRegType</Field>
					<ValueStr>JmgJourRegTypeEnum::MrpOverlap</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JobRef_ProdProces</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProcessProductionOrder</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Logbook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JobRef</Name>
					<Field>JobRef</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>JourRegType</Name>
					<Field>JourRegType</Field>
					<ValueStr>JmgJourRegTypeEnum::MrpProcess</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JobRef_ProdQueueAfter</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>QueueAfterProductionOrder</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Logbook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JobRef</Name>
					<Field>JobRef</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>JourRegType</Name>
					<Field>JourRegType</Field>
					<ValueStr>JmgJourRegTypeEnum::MrpQueueAfter</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JobRef_ProdSetup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SetupProductionOrder</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Logbook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JobRef</Name>
					<Field>JobRef</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>JourRegType</Name>
					<Field>JourRegType</Field>
					<ValueStr>JmgJourRegTypeEnum::MrpSetup</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JobRef_ProdTransport</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TransportProductionOrder</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Logbook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JobRef</Name>
					<Field>JobRef</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>JourRegType</Name>
					<Field>JourRegType</Field>
					<ValueStr>JmgJourRegTypeEnum::MrpTransport</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JobRef_Proj</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReferenceProject</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Logbook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JobRef</Name>
					<Field>JobRef</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>JourRegType</Name>
					<Field>JourRegType</Field>
					<ValueStr>JmgJourRegTypeEnum::PrjProject</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JobRef_ProjActicity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ActivityProject</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Logbook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>JourRegType</Name>
					<Field>JourRegType</Field>
					<ValueStr>JmgJourRegTypeEnum::PrjActivity</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JobRef</Name>
					<Field>JobRef</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OnCallJmgIpcActivity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgIpcActivity</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OnCallJmgIpcActivity</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>JmgStampJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OnCallActivity</Name>
					<Field>OnCallActivity</Field>
					<RelatedField>Activity</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<RelatedField>Type</RelatedField>
					<ValueStr>JmgStampTypeEnum::OnCall</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdRouteTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdRouteTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RouteTransaction</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Logbook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategory</Name>
					<Field>ProjCategory</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjEmplTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjEmplTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjEmplTransId</Name>
					<Field>ProjEmplTransId</Field>
					<RelatedField>TransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ResourcePilotWrkCtrTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WrkCtrTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ResourcePilotWrkCtrTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>JmgStampJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WrkCtrIdPilot</Name>
					<Field>WrkCtrIdPilot</Field>
					<RelatedField>WrkCtrId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>IsIndividualResource_Extern</Name>
					<RelatedField>IsIndividualResource</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>WrkCtrIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ResourceWrkCtrTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WrkCtrTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ResourceWrkCtrTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>JmgStampJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WrkCtrId</Name>
					<Field>WrkCtrId</Field>
					<RelatedField>WrkCtrId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>IsIndividualResource_Extern</Name>
					<RelatedField>IsIndividualResource</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>WrkCtrIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TransId</Name>
			<RelatedTable>JmgStampJournalTrans</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransId</Name>
					<Field>TransId</Field>
					<RelatedField>TransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>