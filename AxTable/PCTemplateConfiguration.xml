<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCTemplateConfiguration</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PCTemplateConfiguration extends PCProductConfiguration
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the configuration template's translated description.
    /// </summary>
    /// <returns>
    /// A translated description.
    /// </returns>
    display PCDescription displayDescription()
    {
        LanguageId      clientLanguageId = LanguageTable::defaultLanguage();
        PCDescription   description;

        description = PCTemplateConfigurationTranslation::findByTemplateAndLanguage(this.RecId, clientLanguageId).Description;

        if (description == '')// default if no translation exist in the client language
        {
            description = PCTemplateConfigurationTranslation::findByTemplateAndLanguage(this.RecId, SystemParameters::getSystemLanguageId()).Description;
        }

        return description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the configuration template's translated name.
    /// </summary>
    /// <returns>
    /// A translated name.
    /// </returns>
    display PCTemplateConfigurationName displayName()
    {
        LanguageId                  clientLanguageId = LanguageTable::defaultLanguage();
        PCTemplateConfigurationName templateConfigurationName;

        templateConfigurationName = PCTemplateConfigurationTranslation::findByTemplateAndLanguage(this.RecId, clientLanguageId).Name;

        if (templateConfigurationName == '')// default if no translation exist in the client language
        {
            templateConfigurationName = PCTemplateConfigurationTranslation::findByTemplateAndLanguage(this.RecId, SystemParameters::getSystemLanguageId()).Name;
        }

        return templateConfigurationName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the record.
    /// </summary>
    /// <param name="_duplicateProductModel">
    /// A reference to a duplicated product model.
    /// </param>
    /// <returns>
    /// The record ID of the duplicated record.
    /// </returns>
    public RefRecId duplicate(RefRecId _duplicateProductModel)
    {
        PCTemplateConfiguration             duplicate;

        PCProductConfigurationModel model = PCProductConfigurationModel::find(this.ProductConfigurationModel);
        PCProductConfigurationModel duplicateModel = PCProductConfigurationModel::find(_duplicateProductModel);

        PCComponentInstance                 componentInstance;
        PCComponentInstanceRootComponent    rootComponentInstance;

        PCComponentInstanceRootComponent    duplicatedRootComponentInstance;
        PCComponentInstance                 duplicatedComponentInstance;

        ttsbegin;

        duplicate.data(this);
        duplicate.Name = PCModelingLibrary::duplicateTemplateConfigurationName(this.Name, NoYes::Yes);
        duplicate.ProductConfigurationModel = _duplicateProductModel;
        duplicate.insert();

        //start by the root component
        select  firstonly componentInstance
            where   componentInstance.ProductConfiguration == this.RecId
        join    rootComponentInstance
            where   rootComponentInstance.ComponentInstance     == componentInstance.RecId
            &&      rootComponentInstance.RootComponentClass    == model.RootComponentClass;

        if (componentInstance)
        {
            //duplicate the component instance
            duplicatedComponentInstance.data(componentInstance);
            duplicatedComponentInstance.ProductConfiguration = duplicate.RecId;
            duplicatedComponentInstance.insert();
            duplicatedRootComponentInstance.data(rootComponentInstance);
            duplicatedRootComponentInstance.ComponentInstance  = duplicatedComponentInstance.RecId;
            duplicatedRootComponentInstance.RootComponentClass = duplicateModel.RootComponentClass;
            duplicatedRootComponentInstance.insert();

            //duplicate the subcomponents, attribute values locally
            componentInstance.duplicateDetails(duplicatedComponentInstance, PCClass::find(duplicateModel.RootComponentClass));
        }

        this.duplicateTranslations(duplicate.RecId);

        ttscommit;

        return duplicate.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateTranslations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the translations related to the configuration template.
    /// </summary>
    /// <param name="_duplicateTemplate">
    /// The record ID of the duplicated configuration template.
    /// </param>
    private void duplicateTranslations(RefRecId _duplicateTemplate)
    {
        PCTemplateConfigurationTranslation  duplicateTranslation;
        PCTemplateConfigurationTranslation  originalTranslation;

        ttsbegin;

        while select originalTranslation
            where originalTranslation.TemplateConfiguration == this.RecId
        {
            duplicateTranslation.clear();
            duplicateTranslation.data(originalTranslation);
            duplicateTranslation.TemplateConfiguration = _duplicateTemplate;
            duplicateTranslation.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits or displays the description of a configuration template.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether to set the description to be displayed.
    /// </param>
    /// <param name="_pcDescription">
    ///    A description of the configuration template.
    /// </param>
    /// <returns>
    ///    A description of the configuration template.
    /// </returns>
    edit PCDescription editDescription(boolean _set, PCDescription _pcDescription)
    {
        PCDescription   pcDescription       = _pcDescription;
        LanguageId      systemLanguageId    = SystemParameters::getSystemLanguageId();

        if (_set)
        {
            ttsbegin;
            PCTemplateConfigurationTranslation::createOrUpdateTranslation(this.RecId,
                                                    this.Name,
                                                    pcDescription,
                                                    systemLanguageId
                                                    );
            ttscommit;
        }
        else
        {
            pcDescription = PCTemplateConfigurationTranslation::findByTemplateAndLanguage(this.RecId, systemLanguageId).Description;
        }

        return pcDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits or displays the name of a configuration template.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether to set the name to be displayed.
    /// </param>
    /// <param name="_templateConfigurationName">
    ///    A name of the configuration template.
    /// </param>
    /// <returns>
    ///    A name of the configuration template.
    /// </returns>
    edit PCTemplateConfigurationName editName(boolean _set, PCTemplateConfigurationName _templateConfigurationName)
    {
        PCTemplateConfigurationName templateConfigurationName   = _templateConfigurationName;
        LanguageId                  systemLanguageId            = SystemParameters::getSystemLanguageId();

        PCTemplateConfigurationTranslation  templateConfigurationTranslation;

        if (_set)
        {
            templateConfigurationTranslation = PCTemplateConfigurationTranslation::findByTemplateAndLanguage(this.RecId, systemLanguageId);

            this.Name = templateConfigurationName;
            this.write();
            if (FormDataUtil::getFormDataSource(this))
            {
                FormDataUtil::getFormDataSource(this).reread();
            }

            ttsbegin;
            PCTemplateConfigurationTranslation::createOrUpdateTranslation(this.RecId,
                                                    _templateConfigurationName,
                                                    templateConfigurationTranslation.Description,
                                                    systemLanguageId);
            ttscommit;
        }
        else
        {
            templateConfigurationName = PCTemplateConfigurationTranslation::findByTemplateAndLanguage(this.RecId, systemLanguageId).Name;
        }

        return templateConfigurationName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>PCTemplateConfiguration</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (PCTemplateConfiguration::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PCTemplateConfiguration</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCTemplateConfiguration</c> table; otherwise, an empty record.
    /// </returns>
    public static PCTemplateConfiguration find(RefRecId _recId, boolean _forupdate = false)
    {
        PCTemplateConfiguration record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PC</ConfigurationKey>
	<DeveloperDocumentation>@SYS153063</DeveloperDocumentation>
	<Label>@SYS153062</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>ProductConfigurationModel</TitleField2>
	<Extends>PCProductConfiguration</Extends>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>NameProductConfigurationModel</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductConfigurationModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsActive</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductConfigurationModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS27587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductConfigurationModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsActive</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>grpDescription</Name>
			<Label>@SYS80470</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>editDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsActive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS39462</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PCTemplateConfigurationName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProductConfigurationModel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS310578</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameProductConfigurationModel</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProductConfigurationModel</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PCProductConfiguration_Template</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>PCProductConfiguration</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProductConfiguration</RelatedTableRole>
			<RelationshipType>Specialization</RelationshipType>
			<Role>TemplateConfiguration</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProductConfigurationModel</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PCProductConfigurationModel</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProductModelConfigured</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ConfigurationTemplate</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProductConfigurationModel</Name>
					<Field>ProductConfigurationModel</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>