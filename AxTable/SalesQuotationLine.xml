<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesQuotationLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountConsumption</Name>
				<Source><![CDATA[
    display LedgerDimensionDefaultAccount  accountConsumption()
    {
        SalesQuotationLineType      salesQuotationLineType;

        salesQuotationLineType = this.type();

        return salesQuotationLineType.accountConsumption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountDisc</Name>
				<Source><![CDATA[
    display LedgerDimensionDefaultAccount  accountDisc()
    {
        SalesQuotationLineType      salesQuotationLineType;

        salesQuotationLineType = this.type();

        return salesQuotationLineType.accountDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountIssue</Name>
				<Source><![CDATA[
    display LedgerDimensionDefaultAccount accountIssue()
    {
        SalesQuotationLineType      salesQuotationLineType;

        salesQuotationLineType = this.type();

        return salesQuotationLineType.accountIssue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountSales</Name>
				<Source><![CDATA[
    display LedgerDimensionDefaultAccount  accountSales()
    {
        SalesQuotationLineType      salesQuotationLineType;

        salesQuotationLineType = this.type();

        return salesQuotationLineType.accountSales();
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur amountExclTax(AmountCur amountCur, Qty  qty, TransDate transDate, Tax _tax = null, boolean _skipRounding = false, boolean _useRoundedTaxOrigin = true)
    {
        return this.salesPurchLineInterface().amountExclTax(amountCur, qty, transDate, _tax, _skipRounding, _useRoundedTaxOrigin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>busRelAccount</Name>
				<Source><![CDATA[
    public smmBusRelAccount busRelAccount(boolean _update = false)
    {
        return this.salesQuotationTable().BusRelAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGrossAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcGrossAmount(Qty    qty   = this.SalesQty)
    {
        return this.salesPurchLineInterface().calcGrossAmount(qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGrossAmountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcGrossAmountExclTax(Qty  qty = this.SalesQty, TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null)
    {
        return this.salesPurchLineInterface().calcGrossAmountExclTax(qty, transDate, _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmount(Qty  qty = this.SalesQty)
    {
        return this.salesPurchLineInterface().calcLineAmount(qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmountExclTax(Qty         _qty      = this.SalesQty,
                                           TransDate   _transDate    = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                           Tax         _tax          = null,
                                           boolean     _skipRounding = false,
                                           boolean     _useRoundedTaxOrigin = true)
    {
        return this.salesPurchLineInterface().calcLineAmountExclTax(_qty, _transDate, _tax, _skipRounding, _useRoundedTaxOrigin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountForced</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmountForced(Qty _qty = this.SalesQty, PriceDiscPolicyCheckPolicy  _checkPolicy = null)
    {
        return this.salesPurchLineInterface().calcLineAmountForced(_qty, _checkPolicy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineDiscExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public DiscAmount calcLineDiscExclTax(Qty qty = this.SalesQty, TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null)
    {
        return this.salesPurchLineInterface().calcLineDiscExclTax(qty, transDate, _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPackingUnit</Name>
				<Source><![CDATA[
    void calcPackingUnit(InventDim _inventDim = this.inventDim())
    {
        this.PackingUnit = InventPackagingUnit::findSalesPackingUnit(this.ItemId,
                                                                 _inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPackingUnitQty</Name>
				<Source><![CDATA[
    void calcPackingUnitQty(InventDim _inventDim = this.inventDim())
    {
        this.PackingUnitQty = InventPackagingUnit::calcPackingUnitQty(this.PackingUnit,
                                                                  this.QtyOrdered,
                                                                  this.ItemId,
                                                                  _inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPrice2LineAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcPrice2LineAmount(Qty _qty, boolean  _forceLineAmountCalculation)
    {
        return this.salesPurchLineInterface().calcPrice2LineAmount(_qty, _forceLineAmountCalculation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyOrdered</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public InventQty calcQtyOrdered(Qty    _salesQty  = this.SalesQty)
    {
        return this.salesPurchLineInterface().calcQtyOrdered(_salesQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditDisc</Name>
				<Source><![CDATA[
    // This method is called when setting disc fields
    boolean canEditDisc()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCFOP_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// It validates if CFOP is present in CFOPMatrix with the correct attributes
    /// (Operation ID, Transaction Type, Direction and Location)
    /// </summary>
    /// <returns>
    /// It returns true if it is valid.
    /// </returns>
    public boolean checkCFOP_BR()
    {
        return CFOPValidation_BR::validate(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCurrencyCode</Name>
				<Source><![CDATA[
    boolean  checkCurrencyCode()
    {
        boolean ok = true;

        if (this.CurrencyCode && ! Currency::exist(this.CurrencyCode))
        {
            ok = checkFailed(strFmt("@SYS1458", this.CurrencyCode));
        }

        if (this.salesQuotationTable().CurrencyCode != this.CurrencyCode)
        {
            ok = checkFailed("@SYS84565");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDelete</Name>
				<Source><![CDATA[
    boolean checkDelete(boolean _useWarning = true)
    {
        return this.type().checkDelete(_useWarning);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFindProjJournalTxt</Name>
				<Source><![CDATA[
    void checkFindProjJournalTxt()
    {
        this.type().checkFindProjJournalTxt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInitFromInventTable</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public boolean checkInitFromInventTable(InventTable _inventTable)
    {
        return this.salesPurchLineInterface().checkInitFromInventTable(_inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates product and mandatory dimension.
    /// </summary>
    /// <returns>
    /// True when product and mandatory dimensions are specified; otherwise false.
    /// </returns>
    public boolean checkInventDim()
    {
        boolean ret = true;

        if (this.ProjTransType == QuotationProjTransType::Item &&
        this.ItemId)
        {
            ret = InventDim::find(this.InventDimId).validateWriteMandatoryAndProductDim(this.ItemId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemId</Name>
				<Source><![CDATA[
    public boolean checkItemId()
    {
        boolean  ok = true;
        EcoResProductValidator productValidator;
        InventTable inventTable = this.inventTable();

        if (this.orig().ItemId && this.orig().ItemId != this.ItemId && this.InventTransId)
        {
            // Item number cannot be changed when item transactions have been generated. Delete line and create a new one with the new item number.
            ok = checkFailed("@SYS19376");
        }

        if (this.ItemId
            && !inventTable.hasProductDimensions()
            && this.InventDimId != InventDim::inventDimIdBlank()
            && (!InventDistinctProductValidator::checkProductNotStopped(this.ItemId, InventItemOrderSetupType::Sales, this.inventDim(), false))
            && (this.salesQuotationTable().isTemplate()
                || (this.salesQuotationTable().QuotationStatus == SalesQuotationStatus::Created
                    || this.salesQuotationTable().QuotationStatus == SalesQuotationStatus::Sent
                    || (this.salesQuotationTable().QuotationType == QuotationType::Project
                        && this.salesQuotationTable().QuotationStatus == SalesQuotationStatus::Revised))))
        {
            ok = false;
        }

        if (this.ItemId)
        {
            productValidator = EcoResProductValidator::construct(inventTable);
            if (!productValidator.isEssentialFieldValuesSet())
            {
                ok = checkFailed(strFmt("@SYS4000187", productValidator.getErrorFieldList(), this.ItemId));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLedgerDimension</Name>
				<Source><![CDATA[
    boolean  checkLedgerDimension()
    {
        boolean ok = true;

        if (this.LedgerDimension)
        {
            ok = LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.LedgerDimension).checkForPosting(this.postingSales());
        }

        if (ok)
        {
            ok = LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.LedgerDimension).transactionAccount();
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPriceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Triggers price re-calculation after date change according to the price date type setting.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the <c>SalesQuotationLine</c> table that changed.
    /// </param>
    /// <remarks>
    /// The price date type can be set to today, the requested shipping date, or the requested receipt date.
    /// </remarks>
    void checkPriceDate(FieldId _fieldId)
    {
        boolean resetPrice = this.mustResetPrice(_fieldId);

        if (resetPrice)
        {
            SalesQuotationLine::modifySalesQty(this, this.inventDim());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustResetPrice</Name>
				<Source><![CDATA[
    protected boolean mustResetPrice(FieldId _fieldId)
    {
        boolean resetPrice;
        SalesParameters salesParameters = SalesParameters::find();

        // When <c>SalesQuotationLine</c> is from a retail sales quotation order and the retail parameter
        // UseSessionDateForCalculatingPricesAndDiscounts is active, behave as if PriceDateType is
        // set to Today.
        if (this.salesQuotationTable().retailSalesQuotationUseSessionDate())
        {
            resetPrice = false;
        }
        else
        {
            switch (salesParameters.PriceDateType)
            {
                case SalesPriceDateType::ShippingDateRequested:
                    resetPrice = (_fieldId == fieldNum(SalesQuotationLine, ShippingDateRequested));
                    break;

                case SalesPriceDateType::ReceiptDateRequested:
                    resetPrice = (_fieldId == fieldNum(SalesQuotationLine, ReceiptDateRequested));
                    break;

                case SalesPriceDateType::Today:
                    resetPrice = false;
                    break;

                default:
                    EventHandlerResult result = EventHandlerResult::newSingleResponse();
                    this.mustResetPriceDelegate(this, salesParameters.PriceDateType, _fieldId, result);

                    if (result.hasResult())
                    {
                        resetPrice = result.result();
                    }
                    else
                    {
                        resetPrice = false;
                    }
                    break;
            }
        }

        return resetPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustResetPriceDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for providing the date for which to calculate the price.
    /// </summary>
    /// <param name = "_salesQuotationLine">A <c>SalesQuotationLine</c> record.</param>
    /// <param name = "_salesPriceDateType">A <c>SalesPriceDateType</c> value.</param>
    /// <param name = "_fieldId">The <c>FieldId</c> of the modified field.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> to provide the result.</param>
    delegate void mustResetPriceDelegate(
        SalesQuotationLine          _salesQuotationLine,
        SalesPriceDateType          _salesPriceDateType,
        FieldId                     _fieldId,
        EventHandlerResult          _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkQuotationType</Name>
				<Source><![CDATA[
    boolean  checkQuotationType()
    {
        if (this.salesQuotationTable().QuotationType != this.QuotationType)
        {
            return checkFailed("@SYS84564");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check that the sales category field is filled correctly.
    /// </summary>
    /// <returns>
    /// true if the sales category field is filled correctly; otherwise, false.
    /// </returns>
    public boolean checkSalesCategory()
    {
        // Check that the hierarchy matches the module
        return !this.SalesCategory
        || EcoResCategory::checkCategoryRole(this.SalesCategory, EcoResCategoryNamedHierarchyRole::Sales);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesUnit</Name>
				<Source><![CDATA[
    boolean checkSalesUnit()
    {
        boolean  ok = true;

        if (!EcoResProductUnitConverter::canBeConvertedGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                          this.InventDimId,
                                                                                          InventTable::find(this.ItemId).inventUnitId(),
                                                                                          this.SalesUnit))
        {
            ok = checkFailed(strFmt("@SYS28690", InventTable::find(this.ItemId).inventUnitId(), this.SalesUnit));
        }

        if (this.RecId
        && this.SalesUnit != this.orig().SalesUnit
        && (   this.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries
            || this.LineDeliveryType == LineDeliveryType::DeliveryLine))
        {
            // Unit cannot be changed on a Delivery Schedule.
            ok = checkFailed("@SYS131415");
        }

        if (ok)
        {
            ok = PriceDiscPolicyRule::createInstance(this).launchPolicyDialogForAllPolicyFields(false, false);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxItemGroup</Name>
				<Source><![CDATA[
    boolean  checkTaxItemGroup()
    {
        if (this.TaxItemGroup   && ! TaxItemGroupHeading::exist(this.TaxItemGroup))
        {
            return checkFailed(strFmt("@SYS21973", this.TaxItemGroup));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdatePhysical</Name>
				<Source><![CDATA[
    boolean checkUpdatePhysical()
    {
        return this.type().checkUpdatePhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAddressReference</Name>
				<Source><![CDATA[
    public void clearAddressReference()
    {
        this.AddressRefRecId    = 0;
        this.AddressRefTableId  = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCurrencyCode</Name>
				<Source><![CDATA[
    void convertCurrencyCode(
    CurrencyCode            _currencyCode,
    TradeCurencyConversion  _tradeCurencyConversion = TradeCurencyConversion::ExchRate,
    ProjId                  _projId                 = '')
    {
        MarkupTrans markupTrans;
        ProjId      projId  = _projId == '' ? this.salesQuotationTable().ProjIdRef : _projId;

        while select forupdate markupTrans
        index hint TableRecIdIdx
        where markupTrans.TransTableId  == this.TableId &&
              markupTrans.TransRecId    == this.RecId   &&
             !markupTrans.IsDeleted
        {
            markupTrans.convertCurrencyCode(_currencyCode);
            markupTrans.doUpdate();
        }

        switch (_tradeCurencyConversion)
        {
            case TradeCurencyConversion::ExchRate:
                this.SalesPrice   = ExchangeRateHelper::curPrice2CurPrice(this.SalesPrice, this.CurrencyCode, _currencyCode);
                this.LineDisc     = ExchangeRateHelper::curPrice2CurPrice(this.LineDisc, this.CurrencyCode, _currencyCode);
                this.MultiLnDisc  = ExchangeRateHelper::curPrice2CurPrice(this.MultiLnDisc, this.CurrencyCode, _currencyCode);
                this.SalesMarkup  = ExchangeRateHelper::curPrice2CurPrice(this.SalesMarkup, this.CurrencyCode, _currencyCode);
                if (this.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries)
                {
                    this.LineAmount   = CurrencyExchangeHelper::curAmount2CurAmount(this.LineAmount, this.CurrencyCode, _currencyCode);
                }

                // <GIN>
                SalesQuotationLineTaxExtensionIN salesQuotationLineTaxExtensionIN;

                if (TaxParameters::checkTaxParameters_IN())
                {
                    salesQuotationLineTaxExtensionIN = this.salesQuotationLineTaxExtensionIN();
                    salesQuotationLineTaxExtensionIN.MaximumRetailPrice  = ExchangeRateHelper::curPrice2CurPrice(SalesQuotationLineTaxExtensionIN::findBysalesQuotationLine(this.RecId, true).MaximumRetailPrice, this.CurrencyCode, _currencyCode);
                    salesQuotationLineTaxExtensionIN.AssessableValueTransactionCurrency = this.getMiscChargesAmount_IN();
                    this.packSalesQuotationLineTaxExtensionIN(salesQuotationLineTaxExtensionIN);
                }
                // </GIN>

                this.CurrencyCode = _currencyCode;
                break;
            case TradeCurencyConversion::TradeAgreements:
                this.CurrencyCode = _currencyCode;
                switch (this.ProjTransType)
                {
                    case QuotationProjTransType::Fee:
                        this.setCostSalesPrice(projId);
                        this.setLineAmount();
                        break;
                    case QuotationProjTransType::Hour:
                        this.setCostSalesPrice(projId);
                        this.setLineAmount();
                        break;
                    case QuotationProjTransType::Expense:
                        this.setCostSalesPrice(projId);
                        this.setLineAmount();
                        break;
                    case QuotationProjTransType::Item:
                        this.setPriceDisc(this.inventDim());
                        break;
                    default:
                    if (this.LineDeliveryType == LineDeliveryType::DeliveryLine)
                        {
                            this.LineAmount = this.calcLineAmountForced();
                        }
                        else
                        {
                            this.setPriceDisc(this.inventDim());
                            this.LineAmount = this.calcLineAmount();
                        }
                        break;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToDeliverySchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts an order line into a delivery schedule with a single delivery line.
    /// </summary>
    /// <returns>
    /// The order line of the newly created delivery schedule.
    /// </returns>
    /// <remarks>
    /// The line on which the conversion is called becomes the first delivery line. Markup is duplicated to
    /// the order line of the delivery schedule.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// Only order lines without delivery lines can be converted to a delivery schedule.
    /// </exception>
    SalesQuotationLine convertToDeliverySchedule()
    {
        #OCCRetryCount
        SalesQuotationLine               localSalesQuotationLine;
        SalesQuotationDeliverySchedule   salesQuotationDeliverySchedule;
        LineNum                          lastLineNumBeforeSchedule;

        if (this.LineDeliveryType != LineDeliveryType::OrderLine)
        {
            // Only order lines without delivery lines can be converted to a delivery schedule.
            throw error("@SYS131414");
        }

        try
        {
            ttsbegin;

            localSalesQuotationLine.initFromSalesQuotationTable(this.salesQuotationTable());
            localSalesQuotationLine.initFromSalesQuotationLine(this, true, true, true);

            localSalesQuotationLine.LineDeliveryType         = LineDeliveryType::OrderLineWithMultipleDeliveries;
            localSalesQuotationLine.LineAmount               = 0;
            localSalesQuotationLine.RemainSalesPhysical      = 0;
            localSalesQuotationLine.RemainSalesFinancial     = 0;
            localSalesQuotationLine.RemainInventPhysical     = 0;

            localSalesQuotationLine.PdsCWRemainInventPhysical = 0;

            localSalesQuotationLine.DeliveryDateControlType  = this.DeliveryDateControlType;
            localSalesQuotationLine.ReceiptDateRequested     = this.ReceiptDateRequested;
            localSalesQuotationLine.ShippingDateRequested    = this.ShippingDateRequested;
            localSalesQuotationLine.ConfirmedDlv             = this.ConfirmedDlv;

            lastLineNumBeforeSchedule               = (select maxof(LineNum) from salesQuotationLine
                                                    where salesQuotationLine.QuotationId == this.QuotationId
                                                       && salesQuotationLine.LineNum     <  this.LineNum).LineNum;

            localSalesQuotationLine.LineNum                  = lastLineNumBeforeSchedule ? (this.LineNum + lastLineNumBeforeSchedule) / 2 : this.LineNum - 1;

            localSalesQuotationLine.ManualEntryChangepolicy = this.ManualEntryChangepolicy;
            localSalesQuotationLine.SystemEntryChangePolicy = this.SystemEntryChangePolicy;

            localSalesQuotationLine.insert(true, false);

            Markup::copy(NoYes::No, this, localSalesQuotationLine);

            // create the DeliverySchedule relation
            salesQuotationDeliverySchedule.OrderLine = localSalesQuotationLine.InventTransId;
            salesQuotationDeliverySchedule.DeliveryLine = this.InventTransId;
            salesQuotationDeliverySchedule.insert();

            this.LineDeliveryType = LineDeliveryType::DeliveryLine;
            this.ManualEntryChangepolicy = 0;
            this.SystemEntryChangePolicy = 0;
            this.updateWithoutUpdatingDeliveryScheduleLines();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            ttsabort;
            throw error("@SYS93835");
        }

        return localSalesQuotationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies a dimension set that can be applied to the <c>defaultDimension</c> field on the
    /// <c>SalesQuotationLine</c> table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set that should be applied to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object previously instantiated using the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on the
    /// <c>SalesQuotationLine</c> table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>

    public DimensionDefault copyDimension(
    DimensionDefault _defaultDimension,
    DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this,
                                                                  this.companyInfo().RecId
                                                                  )
    )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromTmpFrmVirtual</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates sales quotation lines from a <c>TmpFrmVirtual</c> record buffer.
    /// </summary>
    /// <param name="_salesQuotationTable">
    ///    The <c>SalesQuotationTable</c> record.
    /// </param>
    /// <param name="_tmpFrmVirtual">
    ///    The <c>TmpFrmVirtual</c> table buffer.
    /// </param>
    public void createFromTmpFrmVirtual(
        SalesQuotationTable _salesQuotationTable,
        TmpFrmVirtual       _tmpFrmVirtual)
    {
        boolean mustUpdateQuotationTable = false;
        boolean isKittingEnabled = FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance());

        try
        {
            ttsbegin;
            while select _tmpFrmVirtual
                    where _tmpFrmVirtual.Qty
            {
                this.initAndCreateLinefromTmpFrmVirtual(_salesQuotationTable, _tmpFrmVirtual);

                if (isKittingEnabled)
                {
                    this.kittingSetKitPrice_delegate(this);
                }

                _tmpFrmVirtual.delete();

                mustUpdateQuotationTable = true;
            }

            if (mustUpdateQuotationTable)
            {
                this.updateSalesQuotationTable(this.salesQuotationTable(true));
            }

            ttscommit;
        }
        catch (Exception::Error)
        {
            throw error("@SYS18447");
        }

        // Recalculate for the whole quotation after bulk creation scenario: add lines.
        if (RetailPricingKillSwitch::skipOrderCalculationInBulkCreationV2() && RetailPricingEngine::useRetailPricingEngineForSalesQuatation(this.QuotationId))
        {
            RetailSalesQuotationCalculator::setPricesDiscountsOnOrderOnServer(this.QuotationId, this.salesQuotationTable().DiscPercent);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAndCreateLinefromTmpFrmVirtual</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes and creates the sales quotation line from a <c>TmpFrmVirtual</c> record.
    /// </summary>
    /// <param name="_salesQuotationTable">
    ///    The <c>SalesQuotationTable</c> record.
    /// </param>
    /// <param name="_tmpFrmVirtual">
    ///    The <c>TmpFrmVirtual</c> table buffer.
    /// </param>
    protected void initAndCreateLinefromTmpFrmVirtual(SalesQuotationTable _salesQuotationTable,
                                                      TmpFrmVirtual       _tmpFrmVirtual)
    {
        this.initLinefromTmpFrmVirtual(_salesQuotationTable, _tmpFrmVirtual);

        this.createLinefromTmpFrmVirtual();

        this.initLineInventDimFromTmpFrmVirtual(_tmpFrmVirtual);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineInventDimFromTmpFrmVirtual</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the sales quotation line inventory dimensions from a <c>TmpFrmVirtual</c> record.
    /// </summary>
    /// <param name="_tmpFrmVirtual">
    ///    The <c>TmpFrmVirtual</c> table buffer.
    /// </param>
    protected void initLineInventDimFromTmpFrmVirtual(TmpFrmVirtual _tmpFrmVirtual)
    {
        InventDim inventDim = InventDim::find(_tmpFrmVirtual.InventDimId);
        if (inventDim.InventSiteId)
        {
            this.setInventDimIdFromInventDim(inventDim);
            this.initRetailVariantId(this.inventDim());
            this.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLinefromTmpFrmVirtual</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the sales quotation line from a <c>TmpFrmVirtual</c> record.
    /// </summary>
    /// <param name="_salesQuotationTable">
    ///    The <c>SalesQuotationTable</c> record.
    /// </param>
    /// <param name="_tmpFrmVirtual">
    ///    The <c>TmpFrmVirtual</c> table buffer.
    /// </param>
    protected void initLinefromTmpFrmVirtual(SalesQuotationTable _salesQuotationTable,
                                             TmpFrmVirtual       _tmpFrmVirtual)
    {
        this.clear();
        this.initFromSalesQuotationTable(_salesQuotationTable);
        this.ItemId            = _tmpFrmVirtual.ItemId;
        this.SalesQty          = _tmpFrmVirtual.Qty;
        this.setInventDimIdFromInventDim(InventDim::find(_tmpFrmVirtual.InventDimId));
        this.initRetailVariantId(this.inventDim());
        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            this.ItemBOMId = this.kittingKitIdForItemAndInventDim(this.ItemBOMId);
        }
        this.PdsCWQty = _tmpFrmVirtual.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinefromTmpFrmVirtual</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the sales quotation line which is initialized from a <c>TmpFrmVirtual</c> record.
    /// </summary>
    protected void createLinefromTmpFrmVirtual()
    {
        // When add lines for retail sales quotation, should skip price calculation.
        if (RetailPricingKillSwitch::skipOrderCalculationInBulkCreationV2() && RetailPricingEngine::useRetailPricingEngineForSalesQuatation(this.QuotationId))
        {
            this.SkipPriceDiscCalc = NoYes::Yes;
        }

        this.createLine(true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        '',
                        true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a sales quotation line.
    /// </summary>
    /// <param name="_validation">
    /// true if validation is required; otherwise false.
    /// </param>
    /// <param name="_initFromSalesQuotationTable">
    /// true if it is initiated from <c>SalesQuotationTable</c> table; otherwise false.
    /// </param>
    /// <param name="_initFromItemOrCategory">
    /// true if it is initiated from <c>InventTable</c> table; otherwise false.
    /// </param>
    /// <param name="_calcInventQty">
    /// true if needs to calculate quantity; otherwise false.
    /// </param>
    /// <param name="_searchMarkup">
    /// true to search for Markups; otherwise false.
    /// </param>
    /// <param name="_searchPrice">
    /// true to perform price search on different quotation type; otherwise false.
    /// </param>
    /// <param name="_oldInventTransID">
    ///  This is the InventTransID.
    /// </param>
    /// <param name="_skipsalesQuotationTableUpdate">
    ///  Updates <c>SalesQuotationTable</c> table if true; otherwise false.
    /// </param>
    /// <param name="_ignoreSalesQuotationTableInventDim">
    ///  set to true to ignore sales quotation table inventory dimension otherwise false.
    /// </param>
    /// <remarks>
    /// If searchPrice is true then will try to update price history for a PurchLine without an
    /// InventTransID.
    /// </remarks>
    void  createLine(boolean     _validation                   = false,
                     boolean     _initFromSalesQuotationTable  = false,
                     boolean     _initFromItemOrCategory       = false,
                     boolean     _calcInventQty                = false,
                     boolean     _searchMarkup                 = true,
                     boolean     _searchPrice                  = false,
                     TradeInventTransId _oldInventTransID           = '',
                     boolean     _skipsalesQuotationTableUpdate  = false,
                     boolean     _ignoreSalesQuotationTableInventDim = false)
    {
        SalesQuotationLineCreateLineParameters salesQuotationLineCreateLineParameters = SalesQuotationLineCreateLineParameters::construct();
        salesQuotationLineCreateLineParameters.validation                         = _validation;
        salesQuotationLineCreateLineParameters.initFromSalesQuotationTable        = _initFromSalesQuotationTable;
        salesQuotationLineCreateLineParameters.initFromItemOrCategory             = _initFromItemOrCategory;
        salesQuotationLineCreateLineParameters.calcInventQty                      = _calcInventQty;
        salesQuotationLineCreateLineParameters.searchMarkup                       = _searchMarkup;
        salesQuotationLineCreateLineParameters.searchPrice                        = _searchPrice;
        salesQuotationLineCreateLineParameters.oldInventTransID                   = _oldInventTransID;
        salesQuotationLineCreateLineParameters.skipsalesQuotationTableUpdate      = _skipsalesQuotationTableUpdate;
        salesQuotationLineCreateLineParameters.ignoreSalesQuotationTableInventDim = _ignoreSalesQuotationTableInventDim;

        this.createLineFromParameters(salesQuotationLineCreateLineParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>SalesQuotationLine</c> using the specified <c>SalesQuotationLineCreateLineParameters</c> object.
    /// </summary>
    /// <param name = "_salesQuotationLineCreateLineParameters">The parameters used to create the <c>SalesQuotationLine</c>.</param>
    protected void createLineFromParameters(SalesQuotationLineCreateLineParameters _salesQuotationLineCreateLineParameters)
    {
        // <GIN>
        #ISOCountryRegionCodes
        // </GIN>

        if (_salesQuotationLineCreateLineParameters.initFromSalesQuotationTable)
        {
            SalesQuotationTable salesQuotationTable = this.salesQuotationTable();
            this.initFromSalesQuotationTable(salesQuotationTable, _salesQuotationLineCreateLineParameters.ignoreSalesQuotationTableInventDim);
            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
            {
                MCRSourceCodeLine mcrSourceCodeLine = MCRSourceCodeLine::construct(this);
                SalesQuotationLine salesQuotationLine = mcrSourceCodeLine.mcrInitFromSourceCodeSetup(MCRSourceCodeSetup::find(this.mcrSalesQuotationLine().SourceId));
            }
        }

        if (_salesQuotationLineCreateLineParameters.initFromItemOrCategory)
        {
            if (this.ItemId)
            {
                InventTable inventTable = this.inventTable();

                if (!this.checkInitFromInventTable(inventTable))
                {
                    throw error("@SYS18447");
                }
            }
            this.initFromItemOrCategory(this.ItemId, this.SalesCategory, this.Name);
        }

        this.validateSalesQuotationLineCreation();

        if (_salesQuotationLineCreateLineParameters.calcInventQty)
        {
            this.QtyOrdered = this.calcQtyOrdered();
        }

        this.RemainSalesFinancial   = 0;

        InventMovement::bufferSetRemainQty(this);

        if (_salesQuotationLineCreateLineParameters.searchPrice
            && (this.QuotationType != QuotationType::Sales
                || !(_salesQuotationLineCreateLineParameters.initFromItemOrCategory && this.ItemId)))
        {
            this.searchPrice();
            this.setLineAmount();
        }

        if (_salesQuotationLineCreateLineParameters.validation)
        {
            if (!this.validateWrite())
            {
                throw error("@SYS18447");
            }
        }

        if (!this.LineNum)
        {
            this.LineNum = SalesQuotationLine::lastLineNum(this.QuotationId) + 1.0;
        }
        //<GIN> <GTE>
        SalesQuotationLine salesQuotationLineLocal;
        if (_salesQuotationLineCreateLineParameters.oldInventTransID)
        {
            salesQuotationLineLocal = SalesQuotationLine::findInventTransId(_salesQuotationLineCreateLineParameters.oldInventTransID);

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
            {
                this.initFromSalesQuotationLine_IN(salesQuotationLineLocal);
            }
        }
        //</GIN> </GTE>

        this.insert(false, _salesQuotationLineCreateLineParameters.searchMarkup, null, _salesQuotationLineCreateLineParameters.skipsalesQuotationTableUpdate);

        if (salesQuotationLineLocal.RecId && TaxIntegrationUtils::isTaxInformationEnabled())
        {
            TransTaxInformationHelper::copyTransTaxInformation(salesQuotationLineLocal, this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSalesQuotationLineCreation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the sales Quotation lines can be created.
    /// </summary>
    /// <remarks>
    /// Throws an error if the sales quotation line cannot be created.
    /// </remarks>
    private void validateSalesQuotationLineCreation()
    {
        if (!WHSFilter::custFilterMatch(this.CustAccount, this.ItemId))
        {
            throw error(strFmt("@WAX:CustomerFiltersMatchingMessage", this.ItemId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs price search.
    /// </summary>
    protected void searchPrice()
    {
        if (this.QuotationType == QuotationType::Sales)
        {
            this.setPriceDisc(this.inventDim());
        }
        else
        {
            this.setPriceForProjTransType(this.ProjTransType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceForProjTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles setting prices for the specified <c>QuotationProjTransType</c> enumeration value.
    /// </summary>
    /// <param name = "_quotationProjTransType">
    /// A <c>QuotationProjTransType</c> enumeration value.
    /// </param>
    protected void setPriceForProjTransType(QuotationProjTransType _quotationProjTransType)
    {
        switch (_quotationProjTransType)
        {
            case QuotationProjTransType::Fee:
                this.setCostSalesPrice();
                break;
            case QuotationProjTransType::Hour:
                this.setCostSalesPrice();
                break;
            case QuotationProjTransType::Expense:
                this.setCostSalesPrice();
                break;
            case QuotationProjTransType::Item:
                this.setPriceDisc(this.inventDim());
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMarkupTrans</Name>
				<Source><![CDATA[
    void createMarkupTrans(SalesQuotationTable   _salesQuotationTable
    ,boolean _deleteExistingMarkupTrans = true
)
    {
        if (this.markupAllowed())
        {
            Markup::insertMarkupTrans(HeadingLine::Line,
                                  MarkupModuleType::Cust,
                                  this,
                                  _salesQuotationTable.CustAccount,
                                  _salesQuotationTable.MarkupGroup,
                                  _salesQuotationTable.CurrencyCode,
                                  _salesQuotationTable.LanguageId,
                                  this.ItemId,
                                  this.inventTable().salesMarkupGroup(),
                                 (this.LineAmount < 0) // invert sign on credit notes
                                  ,_deleteExistingMarkupTrans,
                                  this.DlvMode,
                                  DlvMode::find(this.DlvMode).MarkupGroup
                                  );

            if (RetailPricingEngine::useRetailPricingEngineForSalesQuatation(_salesQuotationTable.QuotationId))
            {
                RetailShippingThresholdDiscounts shippingDiscounts;

                select firstonly RecId
                from shippingDiscounts;

                // only update charges if shipping discounts is used
                if (shippingDiscounts)
                {
                    // Need re-evaluate discounts for shipments after each new line
                    if (RetailChargeSalesQuotationHeaderAutoChargeCreationFlight::instance().isEnabled())
                    {
                        _salesQuotationTable.createMarkupTrans(_deleteExistingMarkupTrans);
                    }
                    else
                    {
                        _salesQuotationTable.createMarkupTrans(false);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditNoteLine</Name>
				<Source><![CDATA[
    boolean  creditNoteLine()
    {
        return this.type().creditNoteLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    void delete(Common  _childBuffer = null,
                boolean _updateOrderLineOfDeliverySchedule = true,
                boolean _isCalledFromPSAActivityEstimates = false)
    {
        #ISOCountryRegionCodes

        if (!_updateOrderLineOfDeliverySchedule)
        {
            // The _updateOrderLineOfDeliverySchedule parameter is replaced by the deleteWithoutUpdatingDeliveryScheduleLines method.
            throw error(error::wrongUseOfFunction(funcName()));
        }

        if (this.isTmp())
        {
            this.doDelete();
            return;
        }
        
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        SalesQuotationInstrumentationActivities salesQuotationActivities = SalesQuotationLine::instrumentationLogger().salesQuotationActivities();
        
        using (var activityContext = salesQuotationActivities.delete(this))
        {
            NoYes   skipDeliveryScheduleUpdate = this.SkipDeliveryScheduleUpdate;

            SalesQuotationTable salesQuotationTable = this.salesQuotationTable(true);

            SalesQuotationLineType salesQuotationLineType = this.type();
        
            salesQuotationLineType.deleting();

            LedgerCov::deleteTransact(this.TableId, this.RecId);

            if (this.ItemId && this.InventTransId)
            {
                salesQuotationLineType.updateInventoryOnDelete(_childBuffer);
            }

            salesQuotationActivities.logSalesQuotationLine(activityContext, salesQuotationTable, this);

            super();

            salesQuotationTable.updateSalesQuotationLineDelete();

            if (this.LineDeliveryType == LineDeliveryType::DeliveryLine)
            {
                if (!skipDeliveryScheduleUpdate)
                {
                    salesQuotationLineType.updateOrderLineOfDeliverySchedule();
                }

                SalesQuotationDeliverySchedule  salesQuotationDeliverySchedule;

                delete_from salesQuotationDeliverySchedule
                    where salesQuotationDeliverySchedule.DeliveryLine == this.InventTransId;
            }
            // Delete any related lines such as supplementary items.
            this.mcrDeleteRelatedLineItems();

            if (TaxIntegrationUtils::isTransitDocumentEnabled())
            {
                this.TransitDocumentTransactionMap_IN::deleteTransitDocuments();
            }

            salesQuotationLineType.deleted();

            // <GTE>
            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                this.markCurrentTaxDocumentTaxStatusDirty();
            }
            // </GTE>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteWithoutUpdatingDeliveryScheduleLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the quotation line without updating associated delivery schedule lines.
    /// </summary>
    /// <remarks>
    /// When calling this method, it is the responsibility of the caller to update the order line.
    /// This is typically done when updating multiple delivery lines in a single transaction and the order line recalculation is performed only once.
    /// </remarks>
    public void deleteWithoutUpdatingDeliveryScheduleLines()
    {
        try
        {
            this.SkipDeliveryScheduleUpdate = NoYes::Yes;

            this.delete();
        }
        finally
        {
            this.SkipDeliveryScheduleUpdate = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInventTrans_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete the <c>inventTrans</c> related to the current <c>salesQuotationLine</c> if order operation is configured to do not create inventory transactions.
    /// </summary>
    public void deleteInventTrans_BR()
    {
        if (!this.salesQuotationTable().createInventTrans_BR())
        {
            InventUpd_DeleteMovement::newMovement(InventMovement::construct(this, InventMovSubType::None, this)).updateNow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddress</Name>
				<Source><![CDATA[
    LogisticsPostalAddress deliveryAddress()
    {
        //LogisticsPostalAddress deliveryAddress(TransDateTime _transDateTime = this.deliveryTransDateTime())
        return LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryLocation</Name>
				<Source><![CDATA[
    public LogisticsLocationRecId deliveryLocation()
    {
        return LogisticsPostalAddress::getLocation(this.DeliveryPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryName</Name>
				<Source><![CDATA[
    public Name deliveryName()
    {
        return this.DeliveryName ? this.DeliveryName : this.salesQuotationTable().DeliveryName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryTerm</Name>
				<Source><![CDATA[
    DlvTermId  deliveryTerm()
    {
        return this.salesQuotationTable().DlvTerm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryTransDateTime</Name>
				<Source><![CDATA[
    TransDateTime deliveryTransDateTime()
    {
        return DateTimeUtil::newDateTime(this.dlvDate(),0,DateTimeUtil::getCompanyTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>discAmount</Name>
				<Source><![CDATA[
    DiscAmount discAmount()
    {
        return PriceDisc::discAmount(SalesParameters::find().Disc, this.LineDisc, this.MultiLnDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    [Hookable()]
    DiscPct   discPercent()
    {
        return PriceDisc::discPercent(SalesParameters::find().Disc, this.LinePercent, this.MultiLnPercent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDeliveryName</Name>
				<Source><![CDATA[
    display Name displayDeliveryName()
    {
        return this.DeliveryName ? this.DeliveryName : this.salesQuotationTable().DeliveryName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dlvAddress</Name>
				<Source><![CDATA[
    display LogisticsAddressing  dlvAddress()
    {
        if (this.DeliveryPostalAddress)
        {
            return this.deliveryAddress().Address;
        }

        return this.salesQuotationTable().deliveryAddress().Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dlvDate</Name>
				<Source><![CDATA[
    display SalesShippingDate dlvDate(SalesShippingDate blankDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        if (this.ConfirmedDlv)
        {
            return this.ConfirmedDlv;
        }

        if (this.ShippingDateRequested)
        {
            return this.ShippingDateRequested;
        }

        if (this.salesQuotationTable().ShippingDateRequested)
        {
            return this.salesQuotationTable().ShippingDateRequested;
        }

        return blankDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editProductDimensionsAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the product directions on the line can be edited.
    /// </summary>
    /// <returns>
    /// true for order lines without delivery lines; otherwise, false.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public boolean editProductDimensionsAllowed()
    {
        return this.salesPurchLineInterface().editProductDimensionsAllowed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public boolean endDisc()
    {
        return this.salesPurchLineInterface().endDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryEntityRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the delivery entity record that is based on the postal address.
    /// </summary>
    /// <returns>
    /// A <c>CustTable</c> or <c>smmBusRelTable</c> record.
    /// </returns>
    public Common getDeliveryEntityRecord()
    {
        return this.TradePostalAddress::getDeliveryEntityRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMiscChargesAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the amount.
    /// </summary>
    /// <returns>
    /// Returns the amount.
    /// </returns>
    public Amount getMiscChargesAmount_IN()
    {
        return this.SalesPurchJournalLine::getMiscChargesAmountPlusLineAmount(this.TableId, this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOnlyLineAmount</Name>
				<Source><![CDATA[
    boolean hasOnlyLineAmount()
    {
        return this.PriceDiscLine::hasOnlyLineAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public boolean inclTax()
    {
        return this.salesPurchLineInterface().inclTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustExternalItemDescription</Name>
				<Source><![CDATA[
    public void initFromCustExternalItemDescription(InventDim _inventDim = this.inventDim())
    {
        CustExternalItemDescription custExternalItemDescription = new CustExternalItemDescription(this.ItemId, _inventDim, this.salesQuotationTable().CustAccount);

        if (custExternalItemDescription.findExternalDescription())
        {
            this.ExternalItemId = custExternalItemDescription.externalItemId();
            if (custExternalItemDescription.externalItemFreeTxt())
            {
                if (CustFormletterParameters::find().ExternalItemOverwriteAppend == OverwriteAppend::Overwrite)
                {
                    this.Name =  custExternalItemDescription.externalItemFreeTxt();
                }
                else
                {
                    this.initName(this.inventTable());
                    if (this.Name)
                    {
                        this.Name += '\n';
                    }
                    this.Name += custExternalItemDescription.externalItemFreeTxt();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustQuotationConfirmTrans</Name>
				<Source><![CDATA[
    void  initFromCustQuotationConfirmTrans(CustQuotationConfirmTrans     _custQuotationConfirmTrans,
                                 boolean                _copyPrecisely = true,
                                 boolean                _copyPriceDisc = true,
                                 boolean                _copyQty       = true,
                                 Qty                    _qty           = _custQuotationConfirmTrans.Qty,
                                 PdsCWInventQty         _cwQty         = _custQuotationConfirmTrans.PdsCWQty
                                )
    {
        SalesQuotationLineType  salesQuotationLineType;

        salesQuotationLineType = this.type();
        salesQuotationLineType.initFromCustQuotationConfirmTrans(_custQuotationConfirmTrans,
                                                      _copyPrecisely,
                                                      _copyPriceDisc,
                                                      _copyQty,
                                                      _qty,
                                                      _cwQty
                                                    );
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustQuotationTrans</Name>
				<Source><![CDATA[
    void  initFromCustQuotationTrans(CustQuotationTrans     _custQuotationTrans,
                                 boolean                _copyPrecisely = true,
                                 boolean                _copyPriceDisc = true,
                                 boolean                _copyQty       = true,
                                 Qty                    _qty           = _custQuotationTrans.Qty,
                                 PdsCWInventQty         _cwQty         = _custQuotationTrans.PdsCWQty
                                )
    {
        SalesQuotationLineType  salesQuotationLineType;

        salesQuotationLineType = this.type();
        salesQuotationLineType.initFromCustQuotationTrans(_custQuotationTrans,
                                                      _copyPrecisely,
                                                      _copyPriceDisc,
                                                      _copyQty,
                                                      _qty,
                                                      _cwQty
                                                      );
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTable</Name>
				<Source><![CDATA[
    void  initFromCustTable()
    {
        CustTable                custTable = CustTable::find(this.CustAccount);
        LogisticsLocationEntity  location;

        this.CustAccount                = custTable.AccountNum;

        location = LogisticsLocationEntity::constructFromLocationRecId(
        LogisticsLocationDefault::findSimpleDefault(custTable,
        LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery)).RecId);
        this.DeliveryPostalAddress      = location.getPostalAddress().RecId;

        this.AddressRefRecId            = custTable.RecId;
        this.AddressRefTableId          = custTable.TableId;

        this.setTaxGroup(TaxSales::custTaxGroup(custTable.DlvTerm, custTable.TaxGroup));
        this.OverrideSalesTax = custTable.OverrideSalesTax;

        location = LogisticsLocationEntity::findLocation(custTable, LogisticsLocationRoleType::Delivery);
        if (location && location.parmLocationRecId())
        {
            this.setLocation(location.parmLocationRecId());
        }

        this.setListCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    public void initFromInventTable(InventTable _inventTable)
    {
        if(!this.RecId)
        {
            SalesPurchLineInterface::flushPriceDiscCache();
        }

        boolean searchPrice = true;

        RetailSalesQuotationLineContext context = RetailSalesQuotationLineContext::current();

        if(context)
        {
            searchPrice = context.searchPrice();
        }

        this.type().initFromInventTable(_inventTable, searchPrice);

        if(SalesQuotationLineInitInventDimDefaultingFlight::instance().isEnabled())
        {
            InventDim      inventDim = this.inventDim();
            MCRInventTable mcrInventTable = MCRInventTable::findByItemId(this.ItemId);

            if (mcrInventTable.DefaultDropShipmentWarehouse && mcrInventTable.DropShipment)
            {
                inventDim.InventLocationId = mcrInventTable.DefaultDropShipmentWarehouse;
                inventDim.InventSiteId = InventLocation::find(inventDim.InventLocationId).InventSiteId;
            }
            if (!inventDim.InventStatusId && WHSInventEnabled::exist(this.ItemId))
            {
                inventDim.InventStatusId = WHSInvent::getDefaultStatus(inventDim, null, this);
            }

            this.setInventDimIdFromInventDim(inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromItemOrCategory</Name>
				<Source><![CDATA[
    public void initFromItemOrCategory(ItemId _itemId, SalesCategory _salesCategory, ItemFreeTxt _name)
    {
        this.type().initFromItemOrCategory(_itemId, _salesCategory, _name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromOrderLineWithMultipleDeliveries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a delivery line based on its order line.
    /// </summary>
    /// <param name="_salesQuotationLine">
    /// The order line to initialize based on the order line.
    /// </param>
    /// <param name="_onlyCommercialAttributes">
    /// A Boolean value that indicates whether only the commercial attributes should be initialized;
    /// optional.
    /// </param>
    /// <remarks>
    /// When <paramref name="_onlyCommercialAttributes" /> is true it can be used to reset commercial
    /// attributes on an existing delivery line. When <paramref name="_onlyCommercialAttributes" /> is
    /// false it can be used to initialize new delivery lines.
    /// </remarks>
    void initFromOrderLineWithMultipleDeliveries(SalesQuotationLine _salesQuotationLine, boolean _onlyCommercialAttributes = false)
    {
        if (!_onlyCommercialAttributes)
        {
            this.initFromSalesQuotationTable(_salesQuotationLine.salesQuotationTable());
            this.initFromSalesQuotationLine(_salesQuotationLine, true, false, false);

            this.SalesUnit               = _salesQuotationLine.SalesUnit;
            this.DeliveryDateControlType = _salesQuotationLine.DeliveryDateControlType;
            this.ReceiptDateRequested    = _salesQuotationLine.ReceiptDateRequested;
            this.ShippingDateRequested   = _salesQuotationLine.ShippingDateRequested;
            this.ConfirmedDlv            = _salesQuotationLine.ConfirmedDlv;

            this.LineDeliveryType        = LineDeliveryType::DeliveryLine;
        }

        this.SalesPrice         = _salesQuotationLine.SalesPrice;
        this.PriceUnit          = _salesQuotationLine.PriceUnit;
        this.LinePercent        = _salesQuotationLine.LinePercent;
        this.LineDisc           = _salesQuotationLine.LineDisc;
        this.MultiLnDisc        = _salesQuotationLine.MultiLnDisc;
        this.MultiLnPercent     = _salesQuotationLine.MultiLnPercent;
        this.SalesMarkup        = _salesQuotationLine.SalesMarkup;
        this.LineAmount         = this.calcLineAmountForced();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPriceDisc</Name>
				<Source><![CDATA[
    void initFromPriceDisc(PriceDisc_Price _priceDisc, PriceDiscPolicyCheckPolicy _checkPolicy = null, boolean _initDateFields = true, RetailSalesQuotationCalculator _retailCalculator = null)
    {
        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            SalesQuotationLineTaxExtensionIN::findBysalesQuotationLine(this.RecId, true).MaximumRetailPrice = _priceDisc.maxRetailPrice_IN();
        }
        // </GIN>
        this.salesPurchLineInterface().setPriceDiscPriceUnitMarkup(_priceDisc, _checkPolicy, _retailCalculator);

        if (!this.ConfirmedDlv || this.ConfirmedDlv == this.salesQuotationTable().ShippingDateRequested)
        {
            this.ConfirmedDlv = max(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) + _priceDisc.deliveryDays(), this.salesQuotationTable().ShippingDateRequested);
        }

        if (!this.RecId || !this.ShippingDateRequested || !this.ReceiptDateRequested)
        {
            if (!this.ShippingDateRequested)
            this.ShippingDateRequested = this.salesQuotationTable().ShippingDateRequested;

            if (!this.ReceiptDateRequested)
            this.ReceiptDateRequested = this.salesQuotationTable().ReceiptDateRequested;
        }

        SalesCalcAvailableDlvDates::initDateFields(this, _priceDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBarcode</Name>
				<Source><![CDATA[
    public void initBarcode(InventDim _inventDim = this.inventDim())
    {
        InventItemBarcode   inventItemBarcode = InventItemBarcode::findSalesBarcodeDimension(this.ItemId, _inventDim, '', this.SalesUnit);
        if (!inventItemBarcode.RecId)
        {
            inventItemBarcode = InventItemBarcode::findSalesBarcodeDimension(this.ItemId, _inventDim);
        }
        this.BarCode        = inventItemBarcode.ItemBarCode;
        this.BarCodeType    = inventItemBarcode.BarcodeSetupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProductDimensions</Name>
				<Source><![CDATA[
    void initFromProductDimensions(InventDim   _inventDim = this.inventDim())
    {
        this.initName();
        this.initFromCustExternalItemDescription(_inventDim);
        this.calcPackingUnit(_inventDim);
        this.initBarcode(_inventDim);
        this.initRetailVariantId(_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjCategoryId</Name>
				<Source><![CDATA[
    void initFromProjCategoryId()
    {
        this.type().initFromProjCategoryId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjInvoiceItem</Name>
				<Source><![CDATA[
    void  initFromProjInvoiceItem(ProjInvoiceItem  projInvoiceItem, boolean copyPrecisely = true,
                                                                boolean copyPriceDisc = true,
                                                                boolean copyQty       = true,
                                                                Qty     qty           = projInvoiceItem.Qty)
    {
        SalesQuotationLineType  salesQuotationLineType;

        salesQuotationLineType = this.type();
        salesQuotationLineType.initFromProjInvoiceItem(projInvoiceItem, copyPrecisely, copyPriceDisc, copyQty, qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjTable</Name>
				<Source><![CDATA[
    void  initFromProjTable(ProjTable       _projTable)
    {
        this.type().initFromProjTable(_projTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromResource</Name>
				<Source><![CDATA[
    void initFromResource()
    {
        this.type().initFromResource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesQuotationBasketLine</Name>
				<Source><![CDATA[
    void  initFromSalesQuotationBasketLine(SalesQuotationBasketLine salesQuotationBasketLine)
    {
        SalesQuotationLineType  salesQuotationLineType;

        salesQuotationLineType = this.type();
        salesQuotationLineType.initFromSalesQuotationBasketLine(salesQuotationBasketLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesQuotationLine</Name>
				<Source><![CDATA[
    void  initFromSalesQuotationLine(SalesQuotationLine     _salesQuotationLine,
                                 boolean                _copyPrecisely = true,
                                 boolean                _copyPriceDisc = true,
                                 boolean                _copyQty       = true,
                                 Qty                    _qty           = _salesQuotationLine.SalesQty,
                                 PdsCWInventQty         _cwQty         = _salesQuotationLine.PdsCWQty
                                )

    {
        SalesQuotationLineType  salesQuotationLineType;

        salesQuotationLineType = this.type();

        salesQuotationLineType.initFromSalesQuotationLine(_salesQuotationLine,
                                                      _copyPrecisely,
                                                      _copyPriceDisc,
                                                      _copyQty,
                                                      _qty,
                                                      _cwQty
                                                    );
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesQuotationLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the fields of <c> SalesQuotationLine </c> from given <c> SalesQuotationLine </c> buffer.
    /// </summary>
    /// <param name="_salesQuotationLine">
    /// Buffer of <c> SalesQuotationLine </c>.
    /// </param>
    public void initFromSalesQuotationLine_IN(SalesQuotationLine _salesQuotationLine)
    {
        if (TaxParameters::checkTaxParameters_IN())
        {
            SalesQuotationLineTaxExtensionIN salesQuotationLineTaxExtensionIN = SalesQuotationLineTaxExtensionIN::findBysalesQuotationLine(this.RecId, true);
            SalesQuotationLineTaxExtensionIN salesQuotationLineTaxExtensionINOrig = SalesQuotationLineTaxExtensionIN::findBysalesQuotationLine(_salesQuotationLine.RecId, true);
            salesQuotationLineTaxExtensionIN.AssessableValueTransactionCurrency = salesQuotationLineTaxExtensionINOrig.AssessableValueTransactionCurrency;
            salesQuotationLineTaxExtensionIN.MaximumRetailPrice = salesQuotationLineTaxExtensionINOrig.MaximumRetailPrice;
            this.packSalesQuotationLineTaxExtensionIN(salesQuotationLineTaxExtensionIN);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesQuotationTable</Name>
				<Source><![CDATA[
    public void  initFromSalesQuotationTable(SalesQuotationTable   _salesQuotationTable, boolean _ignoreInventDim = false)
    {
        this.type().initFromSalesQuotationTable(_salesQuotationTable, _ignoreInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpSuppItem</Name>
				<Source><![CDATA[
    public void  initFromTmpSuppItem(TmpSuppItem _tmpSuppItem)
    {
        SalesQuotationLineType      salesQuotationLineType;

        salesQuotationLineType = this.type();

        salesQuotationLineType.initFromTmpSuppItem(_tmpSuppItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initItemDim</Name>
				<Source><![CDATA[
    void initItemDim(InventDim _inventDim = this.inventDim())
    {
        this.InventDimId = InventDim::findOrCreate(_inventDim).InventDimId;
        this.initName();
        this.initFromCustExternalItemDescription(_inventDim);
        this.calcPackingUnit(_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initName</Name>
				<Source><![CDATA[
    void initName(InventTable   _inventTable   = this.inventTable(),
              SalesCategory _salesCategory = this.SalesCategory)
    {
        this.Name = SalesParameters::nameAndOrDescription(_inventTable, this.salesQuotationTable().LanguageId, this.InventDimId, EcoResCategory::find(_salesCategory));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRetailVariantId</Name>
				<Source><![CDATA[
    public void initRetailVariantId(InventDim _inventDim = this.inventDim())
    {
        InventDimCombination comb = InventDimCombination::findByInventDim(this.ItemId, _inventDim);

        if (comb)
        {
            this.RetailVariantId = comb.RetailVariantId;
        }
        else
        {
            this.RetailVariantId = "";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesQty</Name>
				<Source><![CDATA[
    void  initSalesQty()
    {
        SalesQuotationLineType      salesQuotationLineType;

        salesQuotationLineType = this.type();
        salesQuotationLineType.initSalesQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void  initValue()
    {
        SalesQuotationLineType  salesQuotationLineType;

        super();

        salesQuotationLineType = this.type();
        salesQuotationLineType.initValue();

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            this.SalesPurchJournalLine::initFromCompanyInformation();
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void  insert(boolean     _dropInvent      = false,
                    boolean     _findMarkup      = !this.skipMarkup(),
                    Common      _childBuffer     = null,
                    boolean     _skipsalesQuotationTableUpdate  = false)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        SalesQuotationInstrumentationActivities salesQuotationActivities = SalesQuotationLine::instrumentationLogger().salesQuotationActivities();
        
        using (var activityContext = salesQuotationActivities.insert(this))
        {
            SalesQuotationTable salesQuotationTable = this.salesQuotationTable(true);

            this.validateIntegration(salesQuotationTable);

            SalesQuotationLineType  salesQuotationLineType = this.type();

            salesQuotationLineType.inserting();

            this.LineCreationSequenceNumber = this.LineCreationSequenceNumber ? this.LineCreationSequenceNumber : this.nextLineCreationSequence();

            if (this.creditNoteLine())
            {
                this.TransactionCode = IntrastatParameters::find().DefaultCreditNote;
            }

            // InventTransId is set when comming from DMF data import or OData.
            if (!this.SkipAssignInventTransId || !this.InventTransId)
            {
                this.InventTransId = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
            }

            if (!this.CustAccount)
            {
                this.CustAccount  = salesQuotationTable.CustAccount;
            }

            this.TaxAutoGenerated = NoYes::Yes;

            this.QuotationStatus = SalesQuotationStatus::Created;

            InventUpd_Estimated estimated;

            if (!_dropInvent && this.isStocked())
            {
                estimated = salesQuotationLineType.updateInventoryOnInsert(_childBuffer);
            }


            this.ConfirmedDlv = this.ShippingDateRequested;

            salesQuotationActivities.logSalesQuotationLine(activityContext, salesQuotationTable, this);
            
            super();

            #ISOCountryRegionCodes
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
            {
                // As the SalesQuotationLineTaxExtensionIN is used later before its form data source write it to
                // DB, insert it at here to make it accessable from DB.s
                SalesQuotationLineTaxExtensionIN salesQuotationLineTaxExtensionIN = this.SysExtensionSerializerMap::getExtensionTable(tableNum(salesQuotationLineTaxExtensionIN), false);
                if (salesQuotationLineTaxExtensionIN.RecId == 0 && FormDataUtil::isFormDataSource(salesQuotationLineTaxExtensionIN))
                {
                    salesQuotationLineTaxExtensionIN.SysExtensionSerializerExtensionMap::insertAfterBaseTable(this);
                }
            }

            if (estimated)
            {
                estimated.updateOwnerRelationship();

                estimated.updateReservation();
            }

            if (_findMarkup)
            {
                this.createMarkupTrans(salesQuotationTable, false);
            }

            if (!_skipsalesQuotationTableUpdate)
            {
                this.updateSalesQuotationTable(salesQuotationTable);
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
            {
                this.SysExtensionSerializerMap::postInsert();
            }

            salesQuotationLineType.inserted();

            // <GTE>
            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                this.markCurrentTaxDocumentTaxStatusDirty();
            }
            // </GTE>
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIntegration</Name>
				<Source><![CDATA[
    private void validateIntegration(SalesQuotationTable _salesQuotationTable)
    {
        if (_salesQuotationTable.QuotationStatus != SalesQuotationStatus::Created
            && _salesQuotationTable.isIntegrationOwnerDynamics365Sales()
            && this.IsIntegration != TradeIntegrationType::Dynamics365Sales
            && SalesQuotationLineIntegrationValidationFlight::instance().isEnabled())
        {
            throw error(strFmt("@SalesAndMarketing:SalesQuotationLineCreationMethodDynamics365Error", _salesQuotationTable.QuotationId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLineCreationSequence</Name>
				<Source><![CDATA[
    private SalesQuoteLineCreationSequenceNumber nextLineCreationSequence()
    {
        SalesQuoteLineCreationSequenceNumber currentLineCreationSequenceNumber = 0;
        SalesQuotationLine salesQuotationLine;

        select maxof(LineCreationSequenceNumber)
            from salesQuotationLine
            where salesQuotationLine.QuotationId == this.QuotationId;
            
        if (salesQuotationLine)
        {
            currentLineCreationSequenceNumber = salesQuotationLine.LineCreationSequenceNumber;
        }

        return (currentLineCreationSequenceNumber + 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    InventDim inventDim(boolean  _forUpdate = false)
    {
        return InventDim::find(this.InventDimId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    InventTable inventTable(
        ItemId  _itemId       = this.ItemId,
        boolean _forUpdate    = false)
    {
        return InventTable::find(_itemId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    CustInvoiceAccount  invoiceAccount()
    {
        return this.salesQuotationTable().InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryBased</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the order line is category based.
    /// </summary>
    /// <returns>
    ///    true if the order line is category based; otherwise, false.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public boolean isCategoryBased()
    {
        return this.salesPurchLineInterface().isCategoryBased();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDropShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the order line is part of a drop shipment.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    /// <remarks>
    /// This method should be overridden in child classes.
    /// </remarks>
    public boolean isDropShipment()
    {
        //Method is required as salesQuotationLine is part of the salesPurchLine map
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemOrNoneAndCategoryBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the line has transaction type of item or none, and category based.
    /// </summary>
    /// <returns>
    /// true if all conditions are true; otherwise, false.
    /// </returns>
    public boolean isItemOrNoneAndCategoryBased()
    {
        boolean result = false;
        // ProjTransType==Item implies the QuotationType is Project
        // ProjTransType==None implies the QuotationType is Sales
        if ((this.ProjTransType == QuotationProjTransType::Item) || (this.ProjTransType == QuotationProjTransType::None))
        {
            result = this.isCategoryBased();
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLinkedToAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies that the sales quotation line is linked to an agreement line.
    /// </summary>
    /// <returns>
    /// Always returns <c>false</c>.
    /// </returns>
    public boolean isLinkedToAgreement()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQuantityEditable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the quantity fields can be edited.
    /// </summary>
    /// <returns>
    /// true if the quantity fields can be edited; otherwise, false.
    /// </returns>
    public boolean isQuantityEditable()
    {
        return (this.isUnconfirmed()
             || this.isUnsubmittedProject());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUnconfirmed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this quotation is not confirmed yet.
    /// </summary>
    /// <returns>
    /// true if this quotation is not confirmed yet; otherwise, false.
    /// </returns>
    public boolean isUnconfirmed()
    {
        return (this.QuotationStatus == SalesQuotationStatus::Created
             || this.QuotationStatus == SalesQuotationStatus::Sent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUnsubmittedProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this is a project quotation and not submitted.
    /// </summary>
    /// <returns>
    /// true if this is a project quotation and not submitted; otherwise, false.
    /// </returns>
    public boolean isUnsubmittedProject()
    {
        return (this.QuotationType == QuotationType::Project
             && (this.QuotationStatus == SalesQuotationStatus::Revised
              || this.QuotationStatus == SalesQuotationStatus::Modified
              || this.QuotationStatus == SalesQuotationStatus::Approved));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the order line is tracked in inventory.
    /// </summary>
    /// <returns>
    /// true if the order line is tracked in inventory; otherwise, false.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public boolean isStocked()
    {
        return this.salesPurchLineInterface().isStocked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemIdChanged</Name>
				<Source><![CDATA[
    public void itemIdChanged()
    {
        this.initFromInventTable(this.inventTable());

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            SalesQuotationLineTaxExtensionIN salesQuotationLineTaxExtensionIN = this.salesQuotationLineTaxExtensionIN();
            salesQuotationLineTaxExtensionIN.AssessableValueTransactionCurrency = this.getMiscChargesAmount_IN();
            this.packSalesQuotationLineTaxExtensionIN(salesQuotationLineTaxExtensionIN);
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemLineDisc</Name>
				<Source><![CDATA[
    LineDiscCode  itemLineDisc()
    {
        return this.inventTable().salesLineDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    display SalesLineShowItemName itemName()
    {
        return this.inventTable().itemName(this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public SalesLineAmount lineAmountExclTax(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null, boolean _skipRounding = false)
    {
        return this.salesPurchLineInterface().lineAmountExclTax(_transDate, _tax, _skipRounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountModified</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public void lineAmountModified()
    {
        this.salesPurchLineInterface().lineAmountModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountMST</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountMST lineAmountMST(
        TransDate               _exchRateDate            = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        ExchRate                _exchRate                = this.salesQuotationTable().fixedExchRate(),
        ExchrateSecondary       _exchrateSecondary       = this.salesQuotationTable().fixedExchRateSecondary(),
        ExchRatesTriangulation  _exchRatesTriangulation  = this.salesQuotationTable().fixedEuroTriangulation())
    {
        return this.salesPurchLineInterface().lineAmountMST(_exchRateDate, _exchRate, _exchrateSecondary, _exchRatesTriangulation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountMSTExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountMST  lineAmountMSTExclTax(
        TransDate               _exchRateDate            = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        ExchRate                _exchRate                = this.salesQuotationTable().fixedExchRate(),
        ExchrateSecondary       _exchrateSecondary       = this.salesQuotationTable().fixedExchRateSecondary(),
        ExchRatesTriangulation  _exchRatesTriangulation  = this.salesQuotationTable().fixedEuroTriangulation(),
        Tax                     _tax                     = null)
    {
        return this.salesPurchLineInterface().lineAmountMSTExclTax(_exchRateDate, _exchRate, _exchrateSecondary, _exchRatesTriangulation, _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDisc</Name>
				<Source><![CDATA[
    LineDiscCode  lineDisc()
    {
        return this.salesQuotationTable().LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkInventDim2Dimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies default <c>SalesQuotationLine.dimension</c> values that are based on the <c>InventDim</c>
    ///    record buffer values.
    /// </summary>
    /// <param name="_newInventDim">
    ///    The <c>InventDim</c> record buffer that is linked to the current <c>SalesQuotationLine</c> record
    ///    buffer.
    /// </param>
    /// <param name="_oldInventDim">
    ///    The <c>InventDim</c> record buffer that was previously linked to the current
    ///    <c>SalesQuotationLine</c> record buffer.
    /// </param>
    public void linkInventDim2Dimension(InventDim _newInventDim, InventDim _oldInventDim)
    {
        _newInventDim.setInventSiteFromParentIfModified(this, _oldInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAllowed</Name>
				<Source><![CDATA[
    public boolean markupAllowed()
    {
        return this.type().markupAllowed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchingAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of the related <c>MatchingAgreementLine</c> class.
    /// </summary>
    /// <returns>
    /// A <c>RefRecId</c> value;
    /// </returns>
    public RefRecId matchingAgreementLine()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCalcCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the cost price of the item on the <c>SalesQuotationLine</c>.
    /// </summary>
    /// <returns>
    /// The cost of the item from the <c>SalesQuotationLine</c>.
    /// </returns>
    public Amount mcrCalcCostPrice()
    {
        InventQty           costInventQty;
        AmountCur           costInventValue;
        CostPricePcs        costPrice;

        if (this.SalesQty > 0)
        {
            [costInventQty, costInventValue] = InventTrans::calcCostValue(InventTransOrigin::findByInventTransId(this.InventTransId).RecId);
            costInventValue = costInventValue * (this.PriceUnit ? this.PriceUnit : 1);

            if (costInventQty)
            {
                InventTable	inventTable = this.inventTable();

                costPrice = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                                  this.InventDimId,
                                                                                                  CurrencyExchangeHelper::amount(costInventValue / costInventQty),
                                                                                                  inventTable.salesUnitId(),
                                                                                                  inventTable.inventUnitId(),
                                                                                                  NoYes::Yes);

                if (CompanyInfoHelper::standardCurrency() != this.CurrencyCode)
                {
                    return ExchangeRateHelper::curPrice(costPrice, this.CurrencyCode);
                }
                else
                {
                    return costPrice;
                }
            }
        }

        return CurrencyExchangeHelper::price(this.CostPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCreateFromTmpFrmVirtual</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a sales quotation line from a <c>TmpFrmVirtual</c> record buffer.
    /// </summary>
    /// <param name="_salesQuotationTable">
    ///    The <c>SalesQuotationTable</c> record.
    /// </param>
    /// <param name="_tmpFrmVirtual">
    ///    The <c>TmpFrmVirtual</c> table buffer.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The <c>InventDimParm</c> table buffer.
    /// </param>
    public void mcrCreateFromTmpFrmVirtual(
    SalesQuotationTable  _salesQuotationTable,
    TmpFrmVirtual        _tmpFrmVirtual,
    InventDimParm        _inventDimParm        = null)
    {
        List list = new List(Types::Record);
        MCRQuoteLineCreateFrmTmpFrmVirtContract contract = MCRQuoteLineCreateFrmTmpFrmVirtContract::construct();

        contract.parmSalesQuotationTable(_salesQuotationTable);

        contract.parmInventDimParm(_inventDimParm);
        
        while select _tmpFrmVirtual
            where _tmpFrmVirtual.Qty || _tmpFrmVirtual.PdsCWQty
        {
            list.addEnd(_tmpFrmVirtual);
        }

        contract.parmTmpFrmVirtualPacked(list.pack());

        SalesQuotationLine::mcrCreateFromTmpFrmVirtualFromContract(contract.pack());

        delete_from _tmpFrmVirtual
        where _tmpFrmVirtual.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDeleteRelatedLineItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the line(s) record.
    /// </summary>
    /// <remarks>
    /// This function will delete all children that may belong to a line.
    /// For example a supplementary item will be the child record of a parent line.
    /// If that parent is deleted, the child record must also be deleted.
    /// </remarks>
    public void mcrDeleteRelatedLineItems()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            SalesQuotationLine      salesQuotationLine;
            MCRSalesQuotationLine   mcrSalesQuotationLine = salesQuotationLine.mcrSalesQuotationLine();

            ttsbegin;

            delete_from salesQuotationLine
            where salesQuotationLine.QuotationId == this.QuotationId
            exists join mcrSalesQuotationLine
            where mcrSalesQuotationLine.ParentLotId == this.InventTransId;

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayMarginPercentStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the margin percentage.
    /// </summary>
    /// <returns>
    /// The margin percentage.
    /// </returns>
    public display MCRMarginPecentStr mcrDisplayMarginPercentStr()
    {
        MCRMarginPecentStr  mcrMarginPecentStr;

        if (this.RecId
        && SalesParameters::find().mcrEnableMarginAlert)
        {
            mcrMarginPecentStr = MCRMarginAlert_Quotation::calcMarginPercentStr(this);
        }
        return mcrMarginPecentStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayPhone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the phone for the address of the current record.
    /// </summary>
    /// <returns>
    /// The phone number for the current record.
    /// </returns>
    public display LogisticsElectronicAddressLocator mcrDisplayPhone()
    {
        LogisticsLocation           logisticsLocation;
        LogisticsElectronicAddress  logisticsElectronicAddress;

        select firstonly RecId, ParentLocation from logisticsLocation
        where logisticsLocation.ParentLocation == this.deliveryAddress().Location
        join Locator, Location, Type from logisticsElectronicAddress
        where logisticsElectronicAddress.Location == logisticsLocation.RecId
            && logisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Phone;

        return logisticsElectronicAddress.Locator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrNextChildLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a line number for a child line.
    /// </summary>
    /// <remarks>
    /// Gets a line number for a child line (supplementary item, kit component,
    /// ship to child) so that they stay grouped together w/ the parent line.
    /// Similar to SalesLine table's method by the same name.
    /// </remarks>
    public void mcrNextChildLineNum()
    {
        SalesQuotationLine      salesQuotationLineLineNum;
        SalesQuotationLine      salesQuotationLineParent;
        MCRSalesQuotationLine   mcrSalesQuotationLineLineNum;
        MCRSalesQuotationLine   mcrSalesQuotationLine;
        MCRSalesQuotationLine   mcrSalesQuotationLineParent;
        InventTransId           parentInventTransId;
        real                    lineNumIncFactor = 0.001;
        LineNum                 maxChildLineNum = 0;

        mcrSalesQuotationLineLineNum    = salesQuotationLineLineNum.mcrSalesQuotationLine();
        mcrSalesQuotationLineParent     = salesQuotationLineParent.mcrSalesQuotationLine();
        mcrSalesQuotationLine           = this.mcrSalesQuotationLine();

        //attempt to fetch max line number of children for this records parent
        select maxof(LineNum) from salesQuotationLineLineNum
        where salesQuotationLineLineNum.QuotationId == this.QuotationId
            && salesQuotationLineLineNum.LineNum != this.LineNum
        exists join mcrSalesQuotationLineLineNum
        where mcrSalesQuotationLineLineNum.ParentLotId == mcrSalesQuotationLine.ParentLotId;

        if (salesQuotationLineLineNum.LineNum)
        {
            maxChildLineNum = salesQuotationLineLineNum.LineNum;

            // verify this line doesn't have children
            salesQuotationLineLineNum = SalesQuotationLine::find(this.QuotationId, maxChildLineNum);
            parentInventTransId = salesQuotationLineLineNum.InventTransId;

            select maxof(LineNum) from salesQuotationLineLineNum
            where salesQuotationLineLineNum.QuotationId == this.QuotationId
            exists join mcrSalesQuotationLineLineNum
            where  mcrSalesQuotationLineLineNum.ParentLotId == parentInventTransId;

            if (salesQuotationLineLineNum.LineNum)
            {
                maxChildLineNum = salesQuotationLineLineNum.LineNum;
            }
        }
        else
        {
            salesQuotationLineParent = SalesQuotationLine::findInventTransId(mcrSalesQuotationLine.ParentLotId);
            maxChildLineNum = salesQuotationLineParent.LineNum;
        }

        this.LineNum = maxChildLineNum + lineNumIncFactor;

        select minof(LineNum) from salesQuotationLineLineNum
        where salesQuotationLineLineNum.QuotationId == this.QuotationId
            && salesQuotationLineLineNum.LineNum > maxChildLineNum;

        if (salesQuotationLineLineNum.LineNum != 0
        && salesQuotationLineLineNum.LineNum <= this.LineNum)
        {
            this.LineNum = maxChildLineNum + ((salesQuotationLineLineNum.LineNum - maxChildLineNum) / 2);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrPackMCRSalesParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the sales quotation line information.
    /// </summary>
    /// <param name="_mcrSalesQuotationLine">
    /// The sales quotation line reference.
    /// </param>
    public void mcrPackMCRSalesParmLine(MCRSalesQuotationLine _mcrSalesQuotationLine)
    {
        _mcrSalesQuotationLine.SalesQuotationLine = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_mcrSalesQuotationLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrPackMCRSalesQuotationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the sales quotation line information.
    /// </summary>
    /// <param name="_mcrSalesQuotationLine">
    /// The sales quotation line reference.
    /// </param>
    public void mcrPackMCRSalesQuotationLine(MCRSalesQuotationLine _mcrSalesQuotationLine)
    {
        _mcrSalesQuotationLine.SalesQuotationLine = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_mcrSalesQuotationLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrPackMCRSalesQuotationLineOverride</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the sales quotation line information.
    /// </summary>
    /// <param name="_mcrSalesQuotationLineOverride">
    /// The sales parm line reference.
    /// </param>
    public void mcrPackMCRSalesQuotationLineOverride(MCRSalesQuotationLineOverride _mcrSalesQuotationLineOverride)
    {
        _mcrSalesQuotationLineOverride.SalesQuotationLine = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_mcrSalesQuotationLineOverride);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrPricePerSalesQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the price per quantity value.
    /// </summary>
    /// <returns>
    /// Returns the price per quantity value.
    /// </returns>
    /// <remarks>
    /// Return the price per quantity, which is the net amount divided by the sales quantity,
    /// which would be in the sales unit.  Note this different than the line's
    ///  sales price, because this method takes discounts into consideration.
    /// </remarks>
    public SalesPrice mcrPricePerSalesQty()
    {
        return this.calcLineAmountForced() / (this.SalesQty ? this.SalesQty : 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSalesQuotationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recovers SalesQuotationLine extension table
    /// </summary>
    /// <returns>
    /// A record of <c>MCRSalesQuotationLine</c>
    /// </returns>
    public MCRSalesQuotationLine mcrSalesQuotationLine()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(MCRSalesQuotationLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSalesQuotationLineOverride</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets SalesQuotationLineOverride extension table
    /// </summary>
    /// <param name="_packedNewExtensionTable">
    /// A Boolean value that indicates whether to pack new extension table record; optional.
    /// </param>
    /// <returns>
    /// A record of <c>MCRSalesQuotationLineOverride</c>
    /// </returns>
    public MCRSalesQuotationLineOverride mcrSalesQuotationLineOverride(boolean _packedNewExtensionTable = false)
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(MCRSalesQuotationLineOverride), _packedNewExtensionTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on the
    /// <c>SalesQuotationLine</c> table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on the
    /// <c>SalesQuotationLine</c> table; optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was initialized with the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potentially linked dimensions are not overwritten when they are merged.
    /// </remarks>

    public DimensionDefault mergeDimension(
    DimensionDefault _primaryDefaultDimension,
    DimensionDefault _secondaryDefaultDimension = 0,
    DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                    this.companyInfo().RecId
                                                                    )
    )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SalesPurchModifiedTableExtension::newNonRecursive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId, boolean _userInput = true)
    {
        // !Important! Whenever you add a modified field handler for a new field you need to make sure to add it to the SalesQuotationLineType.defaultingFields method
        //<GIN>
        InventTableModule inventTableModule;
        //</GIN>
        super(_fieldId);

        this.modifiedField_QuotationType(_fieldId);
        
        switch (_fieldId)
        {
            case fieldNum(SalesQuotationLine, ReceiptDateRequested):
            if (this.ShippingDateRequested > this.ReceiptDateRequested)
                {
                    this.ShippingDateRequested = this.ReceiptDateRequested;
                }
                this.checkPriceDate(_fieldId);
                break;

            case fieldNum(SalesQuotationLine, ShippingDateRequested):
            if (this.ShippingDateRequested > this.ReceiptDateRequested)
                {
                    this.ReceiptDateRequested = this.ShippingDateRequested;
                }
                this.checkPriceDate(_fieldId);
                break;

            case fieldNum(SalesQuotationLine, MultiLnDisc):
                this.type().setPriceDiscChangePolicyMultiLine();
                break;

            case fieldNum(SalesQuotationLine, MultiLnPercent):
                this.type().setPriceDiscChangePolicyMultiLine();
                break;

            case fieldNum(SalesQuotationLine, DeliveryPostalAddress):
                // <GBR>
                if (BrazilParameters::isEnabled())
                {
                    this.setCFOP_BR(true);
                }
                // </GBR>
                LogisticsLocationSelectForm_QuoteLine::construct(this).copyAddressToCaller(this.getDeliveryEntityRecord(),this.DeliveryPostalAddress);
                break;
            //<GIN>

            case fieldNum(SalesQuotationLine, DlvTerm):
                this.setTaxGroup(TaxSales::custTaxGroup(this.DlvTerm, this.TaxGroup, this.deliveryLocation()));
                break;

            case fieldNum(SalesQuotationLine, ItemId):
                if (TaxParameters::isVATEnable_IN())
                {
                    select MaximumRetailPrice_IN,ItemId,ModuleType from inventTableModule where inventTableModule.ItemId==this.ItemId &&
                                     inventTableModule.ModuleType==ModuleInventPurchSales::Purch;
                    SalesQuotationLineTaxExtensionIN::findBysalesQuotationLine(this.RecId, true).MaximumRetailPrice=inventTableModule.MaximumRetailPrice_IN;
                }
                if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
                {
                    // If it is a continuity item, do not allow
                    if (InventTable::mcrIsItemContinuity(this.ItemId))
                    {
                        error("@MCR25500");
                        this.ItemId = '';
                    }
                }
                break;
            //</GIN>
            case fieldNum(SalesQuotationLine, OrigCountryRegionId):
                this.OrigStateId = '';
                break;
        }
        this.modifiedFieldDDC(_fieldId, _userInput);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField_Project</Name>
				<Source><![CDATA[
    public void modifiedField_Project(FieldId _fieldId)
    {
        InventDim       inventDim;
        InventDimParm   inventDimParm;

        switch (_fieldId)
        {
            case fieldNum(SalesQuotationLine, ProjectResource):
            switch (this.ProjTransType)
                {
                    case QuotationProjTransType::Fee  :
                        this.setCostSalesPrice();
                        this.setLineAmount();
                        break;

                    case QuotationProjTransType::Hour  :
                        this.initFromResource();
                        this.setCostSalesPrice();
                        this.setLineAmount();
                        break;

                    case QuotationProjTransType::Expense   :
                        this.initFromResource();
                        this.setCostSalesPrice();
                        this.setLineAmount();
                        break;
                }
                break;

            case fieldNum(SalesQuotationLine, ItemId):
                this.setCostSalesPrice();
                break;

            case fieldNum(SalesQuotationLine, ProjCategoryId):
            switch (this.ProjTransType)
                {
                    case QuotationProjTransType::Fee  :
                        this.setLineProperty();
                        this.initFromProjCategoryId();
                        this.setCostSalesPrice();
                        this.setLineAmount();
                        break;

                    case QuotationProjTransType::Hour  :
                        this.setLineProperty();
                        this.initFromResource();
                        this.initFromProjCategoryId();
                        this.setCostSalesPrice();
                        this.setLineAmount();
                        break;

                    case QuotationProjTransType::Item  :
                        this.setLineProperty();
                        this.initFromProjCategoryId();
                        this.setTaxItemGroup(this.inventTable().salesTaxItemGroupId());
                        this.setLineAmount();
                        break;

                    case QuotationProjTransType::Expense   :
                        this.setLineProperty();
                        this.initFromProjCategoryId();
                        this.setCostSalesPrice();
                        this.setLineAmount();
                        break;
                }
                break;

            case fieldNum(SalesQuotationLine, TransDate):
            switch (this.ProjTransType)
                {
                    case QuotationProjTransType::Fee  :
                        this.setCostSalesPrice();
                        this.setLineAmount();
                        break;

                    case QuotationProjTransType::Hour  :
                        this.initFromResource();
                        this.setCostSalesPrice();
                        this.setLineAmount();
                        break;

                    case QuotationProjTransType::Item  :
                        this.setLineAmount();
                        break;

                    case QuotationProjTransType::Expense   :
                        this.setCostSalesPrice();
                        this.setLineAmount();
                        break;
                }
                break;

            case fieldNum(SalesQuotationLine, SalesQty):
            switch (this.ProjTransType)
                {
                    case QuotationProjTransType::Fee       :
                        this.setLineAmount();
                        break;

                    case QuotationProjTransType::Hour      :
                        this.setLineAmount();
                        break;

                    case QuotationProjTransType::Expense   :
                        this.setLineAmount();
                        break;

                    case QuotationProjTransType::Item      :
                        SalesQuotationLine::modifySalesQty(this, this.inventDim());
                        break;
                }
                break;

            case fieldNum(SalesQuotationLine, CurrencyCode):
            switch (this.ProjTransType)
                {
                    case QuotationProjTransType::Fee  :
                        this.setCostSalesPrice();
                        this.setLineAmount();
                        break;

                    case QuotationProjTransType::Hour  :
                        this.setCostSalesPrice();
                        this.setLineAmount();
                        break;

                    case QuotationProjTransType::Item  :
                        this.setLineAmount();
                        break;
                    case QuotationProjTransType::Expense   :
                        this.setCostSalesPrice();
                        this.setLineAmount();
                        break;
                }
                break;

            case fieldNum(SalesQuotationLine, SalesPrice):
            switch (this.ProjTransType)
                {
                    case QuotationProjTransType::Item  :
                        this.setLineAmount();
                        break;

                    case QuotationProjTransType::Fee  :
                        this.setLineAmount();
                        break;

                    case QuotationProjTransType::Hour  :
                        this.setLineAmount();
                        break;

                    case QuotationProjTransType::Expense   :
                        this.setLineAmount();
                        break;
                }
                break;

            case fieldNum(SalesQuotationLine, LinePropertyId):
            switch (this.ProjTransType)
                {
                    case QuotationProjTransType::Hour  :
                        this.setCostSalesPrice();
                        this.setLineAmount();
                        break;
                }
                break;

            case fieldNum(SalesQuotationLine, LineAmount):
                this.lineAmountModified();
                break;

            case fieldNum(SalesQuotationLine, PriceUnit):
                this.LineAmount = this.calcLineAmount();
                break;

            case fieldNum(SalesQuotationLine, ConfirmedDlv)         :
                break;

            case fieldNum(SalesQuotationLine, ProjDescription)      :
                this.checkFindProjJournalTxt();
                break;

            case fieldNum(SalesQuotationLine, CostPrice) :
            if (this.ProjTransType != QuotationProjTransType::Item)
                {
                    this.setSalesPrice();
                }

                this.setLineAmount();
                break;
            case fieldNum(SalesQuotationLine, SalesCategory):
                // Clear all except site and location
                inventDim = this.inventDim();
                inventDimParm.setActiveSiteAndWarehouseDimensions();
                inventDim.clearNotSelectedDim(inventDimParm);
                this.setInventDimIdFromInventDim(inventDim);
                this.initFromItemOrCategory(this.ItemId, this.SalesCategory, this.Name);
                this.initName();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField_QuotationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the modified field logic for a specific type.
    /// </summary>
    /// <param name = "_fieldId">The field id of the modified field.</param>
    protected void modifiedField_QuotationType(FieldId _fieldId)
    {
        switch (this.QuotationType)
        {
            case QuotationType::Sales             :
                this.modifiedField_Sales(_fieldId);
                break;

            case QuotationType::Project           :
                this.modifiedField_Project(_fieldId);
                break;

            default                                 :
                this.modifiedField_QuotationTypeExtension(_fieldId);
                
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField_QuotationTypeExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the modified field logic for the extended values of the <c>QuotationType</c> enum.
    /// </summary>
    /// <param name = "_fieldId">The field id of the modified field.</param>
    [Replaceable]
    protected void modifiedField_QuotationTypeExtension(FieldId _fieldId)
    {
        this.modifiedField_Sales(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField_Sales</Name>
				<Source><![CDATA[
    public void modifiedField_Sales(FieldId _fieldId)
    {
        InventDim       inventDim;
        InventDimParm   inventDimParm;

        switch (_fieldId)
        {
            case fieldNum(SalesQuotationLine, SalesCategory):
                // Clear all except site and location
                inventDim = this.inventDim();
                inventDimParm.setActiveSiteAndWarehouseDimensions();
                inventDim.clearNotSelectedDim(inventDimParm);
                this.setInventDimIdFromInventDim(inventDim);
                this.initFromItemOrCategory(this.ItemId, this.SalesCategory, this.Name);
                this.initName();
                break;

            case fieldNum(SalesQuotationLine, SalesDeliverNow):
                this.setInventDeliverNow();
                break;

            case fieldNum(SalesQuotationLine, SalesPrice):
                this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, _fieldId);
                this.LineAmount = this.calcLineAmountForced();
                break;

            case fieldNum(SalesQuotationLine, LinePercent):
                this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, _fieldId);
                this.LineAmount = this.calcLineAmountForced();
                break;

            case fieldNum(SalesQuotationLine, LineDisc):
                this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, _fieldId);
                this.LineAmount = this.calcLineAmountForced();
                break;

            case fieldNum(SalesQuotationLine, LineAmount):
                this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, _fieldId);
                this.lineAmountModified();
                break;

            case fieldNum(SalesQuotationLine, SalesUnit):
                if (PdsGlobal::pdsIsCWItem(this.ItemId))
                {
                    this.pdsCWQtyConversion();
                }
                InventMovement::bufferSetTransQtyUnit(this);
                this.setInventDeliverNow();
                this.setPriceDisc(this.inventDim());
                this.calcPackingUnitQty(this.inventDim());
                break;

            case fieldNum(SalesQuotationLine, PriceUnit):
                this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, _fieldId);
                this.LineAmount = this.calcLineAmount();
                break;

            case fieldNum(SalesQuotationLine, RetailVariantId):
            case fieldNum(SalesQuotationLine, SalesQty):
                SalesQuotationLine::modifySalesQty(this, this.inventDim());
                break;

            case fieldNum(SalesQuotationLine,PdsCWQty):
                this.pdsCWQtyModified();
                SalesQuotationLine::modifySalesQty(this, this.inventDim());
                break;

            case fieldNum(SalesQuotationLine, SalesMarkup):
                this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, _fieldId);
                this.LineAmount = this.calcLineAmountForced();
                break;

            case fieldNum(SalesQuotationLine, MultiLnDisc):
                this.LineAmount = this.calcLineAmountForced();
                break;

            case fieldNum(SalesQuotationLine, MultiLnPercent):
                this.LineAmount = this.calcLineAmountForced();
                break;

            /*      case fieldNum(SalesQuotationLine, ProjCategoryId):
            this.setTaxItemGroup(this.TaxItemGroup);
            break;
*/
            case fieldNum(SalesQuotationLine, PackingUnit):
                this.calcPackingUnitQty();
                break;

            case fieldNum(SalesQuotationLine, CustAccount):
                this.initFromCustTable();
                break;

            // <GBR>
            // To fix the issue of Net Amount calculation when SuframaDiscount_BR field changes.
            case fieldNum(SalesQuotationLine, SuframaDiscount_BR):
                this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, _fieldId);
                this.LineAmount = this.calcLineAmountForced();
                break;
            // </GBR>
        }

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            this.updateAndPackAccessableValue_IN(this.orig(), this.salesQuotationLineTaxExtensionIN().orig());
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldDDC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the modified field event for delivery date control fields.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID for the modified field.
    /// </param>
    /// <param name="_uiEnabled">
    /// Controls whether UI interactions with the user are allowed; optional
    /// </param>
    void modifiedFieldDDC(FieldId _fieldId, boolean _uiEnabled = true) //Enhanced Delivery Date Control
    {
        SalesCalcAvailableDlvDates salesCalcAvailableDlvDates;

        // on-demand loading of salesCalcAvailableDlvDates variable, to mitigate performance
        SalesCalcAvailableDlvDates salesCalcAvailableDlvDates()
        {
            if (!salesCalcAvailableDlvDates)
            {
                salesCalcAvailableDlvDates = SalesCalcAvailableDlvDates::newCommonSalesDlvDateType(this, _fieldId);
            }

            return salesCalcAvailableDlvDates;
        }

        if (this.DeliveryDateControlType != SalesDeliveryDateControlType::None && !this.shouldSkipCheckDeliveryDateControl())
        {
            switch (_fieldId)
            {
                case fieldNum(SalesQuotationLine, DeliveryPostalAddress):  //fall through
                case fieldNum(SalesQuotationLine, DlvMode):                 //fall through
                if (!this.RecId)
                    {
                        salesCalcAvailableDlvDates().modifiedFieldBeforeInsert(this);
                    }
                    break;

                case fieldNum(SalesQuotationLine, DeliveryDateControlType):
                if (this.DeliveryDateControlType != SalesDeliveryDateControlType::None)
                    {
                        salesCalcAvailableDlvDates().modifiedField(this, _uiEnabled);
                    }
                    break;

                case fieldNum(SalesQuotationLine, ReceiptDateRequested):
                    salesCalcAvailableDlvDates().modifiedField(this, _uiEnabled);

                    if (this.ShippingDateRequested > this.ReceiptDateRequested)
                    {
                        this.ShippingDateRequested = this.ReceiptDateRequested;
                        this.ConfirmedDlv          = this.ShippingDateRequested;
                    }
                    break;

                case fieldNum(SalesQuotationLine, ShippingDateRequested):
                    salesCalcAvailableDlvDates().modifiedField(this, _uiEnabled);
                    this.ConfirmedDlv = this.ShippingDateRequested;

                    if (this.ShippingDateRequested > this.ReceiptDateRequested)
                    this.ReceiptDateRequested = this.ShippingDateRequested;
                    break;

                default:
            }
            if (!_uiEnabled && salesCalcAvailableDlvDates().parmErrorText())
            {
                throw error(salesCalcAvailableDlvDates.parmErrorText());
            }
        }
        this.ConfirmedDlv = this.ShippingDateRequested;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipCheckDeliveryDateControl</Name>
				<Source><![CDATA[
    public boolean shouldSkipCheckDeliveryDateControl()
    {
        return this.isSalesQuotationRevisionCreation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesQuotationRevisionCreation</Name>
				<Source><![CDATA[
    private boolean isSalesQuotationRevisionCreation()
    {
        return this.isNewRecord()
            && this.IsIntegration == TradeIntegrationType::Dynamics365Sales
            && this.SalesQuotationIntegrationCreationType == SalesQuotationIntegrationCreationType::Revision
            && SalesQuotationSkipDeliveryDateControlWhenRevisedInD365Flight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDimSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the related fields when multiple inventory dimension fields are modified.
    /// </summary>
    /// <param name="_inventDim">
    /// The new inventory dimension record.
    /// </param>
    /// <param name="_dimFieldIdSet">
    /// A set containing the ID's of the modified <c>InventDim</c> field.
    /// </param>
    public void modifyInventDimSet(
        InventDim   _inventDim,
        Set         _dimFieldIdSet)
    {
        if (SalesQuotationLineImproveInventDimPerformanceFlight::instance().isEnabled())
        {
            this.modifyInventoryDimensionsWithOptimization(_inventDim,_dimFieldIdSet);
        }
        else
        {
            SetEnumerator enumerator = _dimFieldIdSet.getEnumerator();
            while (enumerator.moveNext())
            {
                FieldId dimFieldId = enumerator.current();
                this.modifyInventDim(_inventDim, dimFieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the related fields when an inventory dimension field is modified.
    /// </summary>
    /// <param name="_inventDim">
    /// The new inventory dimension record.
    /// </param>
    /// <param name="_dimFieldId">
    /// The ID of the modified <c>InventDim</c> field.
    /// </param>
    public boolean modifyInventDim(InventDim _inventDim, FieldId _dimFieldId)
    {
        // <GIN>
        SalesQuotationLineTaxExtensionIN salesQuotationLineTaxExtensionIN;
        #ISOCountryRegionCodes
        // </GIN>

        if (SalesQuotationLineImproveInventDimPerformanceFlight::instance().isEnabled())
        {
            Set dimFieldIdSet = new Set(Types::Integer);
            dimFieldIdSet.add(_dimFieldId);
            return this.modifyInventoryDimensionsWithOptimization(_inventDim, dimFieldIdSet);
        }
        else
        {
            return this.modifyInventoryDimensionsWithoutOptimization(_inventDim, _dimFieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcPriceDiscOnInventDimChange</Name>
				<Source><![CDATA[
    protected void recalcPriceDiscOnInventDimChange(InventDim _inventDim, FieldId _dimFieldId)
    {
        if (this.mustRecalcPriceDiscOnInventDimChange(_inventDim, _dimFieldId))
        {
            this.salesPurchLineInterface().resetPriceAgreement();
            this.setPriceDisc(_inventDim);

            if (this.RecId && this.DeliveryDateControlType != SalesDeliveryDateControlType::None)
            {
                this.ShippingDateRequested = this.orig().ShippingDateRequested;
                this.ReceiptDateRequested  = this.orig().ReceiptDateRequested;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRecalcPriceDiscOnInventDimChange</Name>
				<Source><![CDATA[
    protected boolean mustRecalcPriceDiscOnInventDimChange(InventDim _inventDim, FieldId _dimFieldId)
    {
        return (this.LineDeliveryType == LineDeliveryType::OrderLine
                || this.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries)
            && InventDim::mustUseFieldSalesPriceDisc(_dimFieldId, InventDimGroupSetup::newItemId(this.ItemId))
            && PriceDiscPolicyRule::createInstance(this).launchPolicyDialogForAllPolicyFields(false, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleType</Name>
				<Source><![CDATA[
    ModuleInventPurchSales moduleType()
    {
        return ModuleInventPurchSales::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLineNum</Name>
				<Source><![CDATA[
    public LineNum nextLineNum()
    {
        return (select firstonly LineNum
                    from salesQuotationLine
                    order by LineNum
                    where salesQuotationLine.QuotationId == this.QuotationId
                       && salesQuotationLine.LineNum     >  this.LineNum).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCFOPChange_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes when the CFOP value is changed.
    /// </summary>
    /// <param name="_modifiedFieldId">
    /// The modified field id. Optional.
    /// </param>
    public void onCFOPChange_BR(FieldId _modifiedFieldId = fieldNum(SalesQuotationLine, cfopTable_BR))
    {
        if (this.cfopTable_BR)
        {
            ttsbegin;
            this.setTaxGroupAndTaxItemGroupFields_BR();
            this.onTaxChange_BR(_modifiedFieldId);
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDeliveryPostalAddressChange_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes after the delivery postal address is changed.
    /// </summary>
    public void onDeliveryPostalAddressChange_BR()
    {
        CFOPValidation_BR       cfopValidation;
        LogisticsPostalAddress  currentAddress, originAddress;

        currentAddress      = LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress);
        originAddress       = LogisticsPostalAddress::findRecId(this.orig().DeliveryPostalAddress);

        if (currentAddress.State != originAddress.State || currentAddress.CountryRegionId != originAddress.CountryRegionId)
        {
            cfopValidation      = CFOPValidation_BR::construct(this);
            this.cfopTable_BR   = cfopValidation.getDefaultCFOP();

            this.onCFOPChange_BR(fieldNum(SalesQuotationLine, DeliveryPostalAddress));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTaxChange_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// gets executed when tax group changed
    /// </summary>
    /// <param name="_fieldId">
    ///  field_id of Item sales tax group or item sales tax group.
    /// </param>
    public void onTaxChange_BR(FieldId _fieldId)
    {
        if (this.TaxGroup != this.orig().TaxGroup
        || this.TaxItemGroup != this.orig().TaxItemGroup)
        {
            this.setSuframaDiscount_BR(_fieldId);
            this.updateMarkupTransTaxGroups_BR();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderAccount</Name>
				<Source><![CDATA[
    CustAccount orderAccount()
    {
        return this.CustAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>party</Name>
				<Source><![CDATA[
    DirPartyRecId party()
    {
        if (this.busRelAccount())
        {
            return smmBusRelTable::find(this.busRelAccount()).Party;
        }
        return CustTable::find(this.CustAccount).Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the sales quantity from the converted catch weight quantity.
    /// </summary>
    /// <remarks>
    /// This method converts the catch weight quantity to sales quantity and sets sales quantity to new
    /// value.
    /// </remarks>
    private void pdsCWQtyConversion()
    {
        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            this.SalesQty = PdsCatchWeight::inventQty(
                            this.ItemId,
                            this.PdsCWQty,
                            this.SalesUnit);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates quantities based on changed catch weight value.
    /// </summary>
    /// <remarks>
    /// This method makes calls to update the sales quantities and the catch weight deliver now value.
    /// </remarks>
    public void pdsCWQtyModified()
    {
        this.pdsCWQtyConversion();
        this.PdsCWDeliverNow = this.PdsCWQty;
        this.SalesDeliverNow = this.SalesQty;
        this.salesQtyModified();
        if (this.LineDeliveryType != LineDeliveryType::DeliveryLine
        && PriceDiscPolicyRule::createInstance(this).launchPolicyDialogForAllPolicyFields(false, false))
        {
            this.salesPurchLineInterface().resetPriceAgreement();
            this.setPriceDisc(this.inventDim());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight unit for the item.
    /// </summary>
    /// <returns>
    /// The catch weight unit for the item.
    /// </returns>
    public display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postDiscPercent_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the discount percentage.
    /// </summary>
    /// <param name="_discPct">
    /// The input discount percentage.
    /// </param>
    /// <returns>
    /// The re-evaluated discount percentage.
    /// </returns>
    public DiscPct postDiscPercent_BR(DiscPct _discPct)
    {
        return PriceDisc::discPercent(LineMultiLn::LineTimesMultiLn, _discPct, this.SuframaDiscount_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingSales</Name>
				<Source><![CDATA[
    LedgerPostingType postingSales()
    {
        SalesQuotationLineType      salesQuotationLineType;

        salesQuotationLineType = this.type();

        return salesQuotationLineType.postingSales();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postModifyInventDim_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes after the inventory dimension is changed.
    /// </summary>
    /// <param name="_inventDim">
    /// The inventory dimension <c>InventDim</c> table record.
    /// </param>
    /// <param name="_dimFieldId">
    /// A table field id.
    /// </param>
    public void postModifyInventDim_BR(
    InventDim            _inventDim,
    FieldId              _dimFieldId)
    {
        if (_dimFieldId == fieldNum(InventDim, InventSiteId))
        {
            this.setCFOP_BR();
            this.onCFOPChange_BR();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the date for which the price has to be calculated according to the price date type
    /// setting.
    /// </summary>
    /// <returns>
    /// The date for which to calculate the price.
    /// </returns>
    /// <remarks>
    /// The price date type can be set up to use today, the requested shipping date, or the requested
    /// receipt date as price date.
    /// </remarks>
    [Replaceable]
    public PriceDate priceDate()
    {
        SalesParameters salesParameters = SalesParameters::find();

        // When <c>SalesQuotationLine</c> is from a retail sales quotation order and the retail parameter
        // UseSessionDateForCalculatingPricesAndDiscounts is active, set price date to user preferred time zone
        // disregarding PriceDateType parameter.
        if (this.salesQuotationTable().retailSalesQuotationUseSessionDate())
        {
            return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        switch (salesParameters.PriceDateType)
        {
            case SalesPriceDateType::ShippingDateRequested:
                return this.ShippingDateRequested;

            case SalesPriceDateType::ReceiptDateRequested:
                return this.ReceiptDateRequested;

            case SalesPriceDateType::Today:
                return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                this.priceDateDelegate(salesParameters.PriceDateType, result);

                if (result.hasResult())
                {
                    return result.result();
                }
                
                throw error(strFmt("@SCM:PriceDateNotFound", salesParameters.PriceDateType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDateDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for providing the date for which to calculate the price.
    /// </summary>
    /// <param name = "_salesPriceDateType">A <c>SalesPriceDateType</c> value.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> to provide the result.</param>
    [SysObsolete('This delegate will be obsoleted; use the method SalesQuotationLine.priceDate instead.', false, 31\03\2019)]
    delegate void priceDateDelegate(
        SalesPriceDateType          _salesPriceDateType,
        EventHandlerResult          _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceGroupId</Name>
				<Source><![CDATA[
    PriceGroupId  priceGroupId()
    {
        return this.salesQuotationTable().PriceGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    display ProjId projId()
    {
        return this.salesQuotationTable().ProjIdRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPriceDiscPolicyDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launches the price discount user dialog.
    /// </summary>
    /// <param name="_fieldId">
    /// The id of the field in question.
    /// </param>
    /// <param name="_showLineItem">
    /// An optional Boolean controlling if item and line number should be displayed in the dialog. Default value is false.
    /// </param>
    /// <param name="_skipTriggerFieldCheck">
    /// A Boolean specifying whether changes to price discount trigger fields should be verified; optional.
    /// </param>
    /// <returns>
    /// true if the user press OK or no policy exists; otherwise, false.
    /// </returns>
    [SysObsolete("Method is moved to PriceDiscPolicyRule as launchPolicyDialogForSingleField or launchPolicyDialogForAllFields.", false, 31\03\2018), Hookable(false)]
    public boolean runPriceDiscPolicyDialog(
        RefFieldId  _fieldId                = 0,
        boolean     _showLineItem           = false,
        boolean     _skipTriggerFieldCheck  = false)
    {
        return this.PriceDiscResultFields::runPriceDiscPolicyDialog(_fieldId, _showLineItem, _skipTriggerFieldCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchTable</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public SalesPurchTable salesPurchTable()
    {
        return this.salesPurchLineInterface().salesPurchTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the header table.
    /// </summary>
    /// <returns>The record for SalesQuotationTable.</returns>
    public SalesPurchJournalTable salesPurchJournalTable()
    {
        return this.salesQuotationTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQtyModified</Name>
				<Source><![CDATA[
    public void salesQtyModified()
    {
        if (EcoResProductUnitConverter::hasRequiredProductDimensionsForUnitConversion(this.ItemId, this.inventDim()))
        {
            this.initSalesQty();
        }

        this.LineAmount = this.calcLineAmount();

        InventMovement::bufferSetTransQtyUnit(this);

        this.setInventDeliverNow();

        InventMovement::bufferSetRemainQty(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQuotationTable</Name>
				<Source><![CDATA[
    public SalesQuotationTable salesQuotationTable(boolean _update = false)
    {
        return SalesQuotationTable::find(this.QuotationId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromSalesQuotationLine</Name>
				<Source><![CDATA[
    void setAddressFromSalesQuotationLine(SalesQuotationLine  salesQuotationLine)
    {
        this.DeliveryPostalAddress      = salesQuotationLine.DeliveryPostalAddress;
        this.DeliveryName               = salesQuotationLine.DeliveryName;
        this.AddressRefRecId            = salesQuotationLine.AddressRefRecId;
        this.AddressRefTableId          = salesQuotationLine.AddressRefTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromSalesQuotationTable</Name>
				<Source><![CDATA[
    void setAddressFromSalesQuotationTable(SalesQuotationTable _salesQuotationTable = this.salesQuotationTable())
    {
        if (LogisticsPostalAddress::zipCityCountyRegionDifferent(
        this.DeliveryPostalAddress, _salesQuotationTable.DeliveryPostalAddress))
        {
            this.DeliveryDateControlType = _salesQuotationTable.DeliveryDateControlType;
            this.DeliveryPostalAddress = _salesQuotationTable.DeliveryPostalAddress;
        }
        else if (this.DeliveryPostalAddress != _salesQuotationTable.DeliveryPostalAddress)
        {
            this.DeliveryPostalAddress = _salesQuotationTable.DeliveryPostalAddress;
        }

        this.DeliveryName               = _salesQuotationTable.DeliveryName;
        this.AddressRefRecId            = _salesQuotationTable.AddressRefRecId;
        this.AddressRefTableId          = _salesQuotationTable.AddressRefTableId;

        this.SalesGroup                 = _salesQuotationTable.SalesGroup;
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            //Copy tax group to the line.
            this.TaxGroup                   = _salesQuotationTable.TaxGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCFOP_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// It is responsible for setting CFOP code
    /// </summary>
    /// <param name="_askToUser">
    /// Boolean to define if should request user interaction
    /// </param>
    private void setCFOP_BR(boolean _askToUser = false)
    {
        CFOPValidation_BR           cfopValidation;

        cfopValidation       = CFOPValidation_BR::construct(this);
        this.cfopTable_BR    = cfopValidation.getDefaultCFOP(_askToUser);

        this.setTaxGroupAndTaxItemGroupFields_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCostSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves and assigns cost and sales prices to the current record.
    /// </summary>
    /// <param name = "_projId">
    /// A project ID associated with the current record; optional.
    /// </param>
    /// <param name = "_calcCostPrice">
    /// A Boolean to determine whether to retrieve and assign cost prices; optional.
    /// </param>
    public void setCostSalesPrice(ProjId _projId = '',
                       boolean  _calcCostPrice = !this.SkipDefaultingCostPrice) // Set to TRUE if Cost Price is calculated. FALSE will not calculate Cost Price.)
    {
        ProjId  projId  = _projId == '' ? this.salesQuotationTable().ProjIdRef : _projId;

        this.type().setCostSalesPrice(projId, _calcCostPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves and assigns a cost price to the current record.
    /// </summary>
    /// <param name = "_projId">
    /// A project ID associated with the current record; optional.
    /// </param>
    [Hookable(false)]
    public void setCostPrice(ProjId _projId = '')
    {
        NoYes skipDefaultingSalesPrice = this.SkipDefaultingSalesPrice;
        try
        {
            this.SkipDefaultingSalesPrice = NoYes::Yes;
            this.setCostSalesPrice(_projId);
        }
        finally
        {
            this.SkipDefaultingSalesPrice = skipDefaultingSalesPrice;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves and assigns a sales price to the current record.
    /// </summary>
    /// <param name = "_projId">
    /// A project ID associated with the current record; optional.
    /// </param>
    [Hookable(false)]
    public void setSalesPrice(ProjId _projId = '')
    {
        NoYes skipDefaultingCostPrice = this.SkipDefaultingCostPrice;
        try
        {
            this.SkipDefaultingCostPrice = NoYes::Yes;
            this.setCostSalesPrice(_projId);
        }
        finally
        {
            this.SkipDefaultingCostPrice = skipDefaultingCostPrice;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryDateControlType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the delivery date control type for the current sales quotation line.
    /// </summary>
    /// <param name="_inventDimId">
    /// The inventory dimension to use for finding the delivery date control type; optional.
    /// </param>
    /// <param name="_salesQuotationTable">
    /// Sales quotation; optional.
    /// </param>
    /// <remarks>
    /// For category based lines, delivery date control type is defaulted from that sales table.For
    /// non-inventoried lines and service based lines (upgraded cases) delivery date control type ATP cannot
    /// be set.
    /// </remarks>
    public void setDeliveryDateControlType(InventDimId _inventDimId = this.InventDimId
    , SalesQuotationTable _salesQuotationTable = this.salesQuotationTable())
    {
        SalesDeliveryDateControlType    deliveryDateControlType;
        SalesATPSettingsMap             salesATPSettingsMap;

        if (this.isCategoryBased())
        {
            deliveryDateControlType = _salesQuotationTable.DeliveryDateControlType;
        }
        else
        {
            salesATPSettingsMap = SalesATPCalculation::findSalesOrderSettings(this.ItemId, _inventDimId);

            deliveryDateControlType = salesATPSettingsMap.IsItemSpecific ?
            salesATPSettingsMap.DeliveryDateControlType : _salesQuotationTable.DeliveryDateControlType;
        }

        if ((deliveryDateControlType == SalesDeliveryDateControlType::ATP || deliveryDateControlType == SalesDeliveryDateControlType::ATPPlusIssueMargin)
        && (!this.isStocked() || this.inventTable().inventItemType().isServiceItem()) )
        {
            deliveryDateControlType = SalesDeliveryDateControlType::None;
        }

        this.DeliveryDateControlType = deliveryDateControlType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the delivery name field based on the specified logistic location.
    /// </summary>
    /// <param name="_skipDeliveryRoleCheck">
    ///     A flag indicating whether to skip the check for determining the delivery role; optional.
    /// </param>
    public void setDeliveryName(boolean _skipDeliveryRoleCheck = false)
    {
        this.TradePostalAddress::setDeliveryName(_skipDeliveryRoleCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDeliverNow</Name>
				<Source><![CDATA[
    void  setInventDeliverNow()
    {
        if (EcoResProductUnitConverter::hasRequiredProductDimensionsForUnitConversion(this.ItemId, this.inventDim()))
        {
            this.InventDeliverNow = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                                          this.InventDimId,
                                                                                                          this.SalesDeliverNow,
                                                                                                          this.SalesUnit,
                                                                                                          this.inventTable().inventUnitId(),
                                                                                                          NoYes::Yes);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the <c>InventDimId</c> parameter to the <c>SalesQuotationLine.inventDimId</c> field and
    ///    assigns default values that are based on the new inventory dimensions.
    /// </summary>
    /// <param name="_inventDimId">
    ///    The <c>InventDimId</c> value that should be applied to the <c>SalesQuotationLine.InventDimId</c>
    ///    field.
    /// </param>
    /// <param name="_inventDim">
    ///    The <c>InventDim</c> record buffer related to the <c>InventDimId</c> parameters; optional.
    /// </param>
    public void setInventDimId(InventDimId _inventDimId, InventDim _inventDim = InventDim::find(_inventDimId))
    {
        InventDim   currentInventDim = this.InventDimId == _inventDimId ? _inventDim : this.inventDim();

        this.InventDimId = _inventDimId;
        this.linkInventDim2Dimension(_inventDim, currentInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimIdFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds or creates an <c>InventDimId</c> value for the <c>InventDim</c> parameter and applies the
    ///    found <c>InventDimId</c> to the <c>SalesQuotationLine.inventDimId</c> field.
    /// </summary>
    /// <param name="_inventDim">
    ///    An <c>InventDim</c> record buffer that should be referenced by the current
    ///    <c>SalesQuotationLine</c> record buffer.
    /// </param>
    public void setInventDimIdFromInventDim(InventDim _inventDim)
    {
        InventDim   inventDim;

        inventDim = InventDim::findOrCreate(_inventDim);
        this.setInventDimId(inventDim.InventDimId, inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineAmount</Name>
				<Source><![CDATA[
    void setLineAmount()
    {
        this.LineAmount = this.calcLineAmountForced();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineProperty</Name>
				<Source><![CDATA[
    void setLineProperty()
    {
        this.type().setLineProperty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setListCode</Name>
				<Source><![CDATA[
    void  setListCode()
    {
        //    this.listcode = EUSalesList::resolveListCode(this.deliveryCountry, this.payer().country);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLocation</Name>
				<Source><![CDATA[
    void  setLocation(LogisticsLocationRecId _location)
    {
        LogisticsLocationEntity location = LogisticsLocationEntity::constructFromLocationRecId(_location);

        this.DeliveryPostalAddress           = location.getPostalAddress().RecId;
        if (location)
        {
            if (location.parmLocationDescription())
            {
                this.DeliveryName = location.parmLocationDescription();
            }
            this.AddressRefRecId            = location.parmLocationRecId();
            this.AddressRefTableId          = tableNum(LogisticsLocation);
        }

        this.setListCode();
        this.setTaxGroup(TaxSales::custTaxGroup(this.deliveryTerm(), this.TaxGroup, _location));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>setPriceAgreement</c> method of the <c>SalesPurchLine</c> table map.
    /// </summary>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> record that contains the dimensions the price disc should apply for.
    /// </param>
    /// <param name="_doCallPriceDate">
    /// A Boolean value that specifies whether to use the price date or the system date for the price calculation; optional.
    /// </param>
    /// <param name="_checkPolicy">
    /// An instance of the <c>PriceDiscPolicyCheckPolicy</c> class defining if price and discount fields should be updated; optional.
    /// </param>
    /// <param name="_initDateFields">
    /// Indicates if the dates related to prices should be set or not; optional.
    /// </param>
    [Hookable(false), Wrappable(false)]
    public void setPriceAgreement(
        InventDim					_inventDim,
        boolean						_doCallPriceDate	= false,
        PriceDiscPolicyCheckPolicy  _checkPolicy		= null,
        boolean						_initDateFields		= true,
        PriceDiscPriceAgreementParameters _parameters   = this.createPriceDiscPriceAgreementParameterInstance())
    {
        this.salesPurchLineInterface().setPriceAgreement(_inventDim, _doCallPriceDate, _checkPolicy, _initDateFields, _parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDisc</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public void setPriceDisc(InventDim _inventDim, PriceDiscPriceAgreementParameters _parameters = this.createPriceDiscPriceAgreementParameterInstance())
    {
        this.salesPurchLineInterface().setPriceDisc(_inventDim, true, _parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscPriceAgreementParameterInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of the <c>PriceDiscPriceAgreementParameters</c> class.
    /// </summary>
    /// <returns>An instance of the <c>PriceDiscPriceAgreementParameters</c> class.</returns>
    protected PriceDiscPriceAgreementParameters createPriceDiscPriceAgreementParameterInstance()
    {
        return PriceDiscPriceAgreementParameters::createInstance(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDiscChangePolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>setPriceDiscChangePolicy</c> method of the <c>PriceDiscResultFields</c> table map.
    /// </summary>
    /// <param name="_policySource">
    /// A <c>PriceDiscSystemSource</c> enumeration value that indicates the source of the policy.
    /// </param>
    /// <param name="_fieldId">
    /// A field ID.
    /// </param>
    void setPriceDiscChangePolicy(PriceDiscSystemSource _policySource, RefFieldId _fieldId = 0)
    {
        this.PriceDiscResultFields::createPriceDiscChangePolicy(ModuleSalesPurch::Sales, _policySource, _fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDiscMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls <c>setPriceDiscMarkup</c> method on the <c>SalesPurchLine</c> table map.
    /// </summary>
    /// <param name="_priceDisc">
    /// A <c>PriceDisc</c> object.
    /// </param>
    /// <param name="_checkPolicy">
    /// A <c>PriceDiscPolicyCheckPolicy</c> object.
    /// </param>
    [Hookable(false), Wrappable(false)]
    public void setPriceDiscMarkup(PriceDisc_Price _priceDisc, PriceDiscPolicyCheckPolicy _checkPolicy)
    {
        this.salesPurchLineInterface().setPriceDiscMarkup(_priceDisc, _checkPolicy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDiscPriceUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method calls the <c>setPriceDiscPriceUnit</c> method on the <c>SalesPurchLine</c> table map.
    /// </summary>
    /// <param name="_priceDisc">
    /// A <c>PriceDisc</c> object.
    /// </param>
    /// <param name="_checkPolicy">
    /// A <c>PriceDiscPolicyCheckPolicy</c> object.
    /// </param>
    /// <param name="_retailCalculator">
    /// A <c>RetalSalesQuotationcalculator</c> object.
    /// </param>
    [Hookable(false), Wrappable(false)]
    public void setPriceDiscPriceUnit(PriceDisc_Price _priceDisc, PriceDiscPolicyCheckPolicy _checkPolicy, RetailOrderCalculator _retailCalculator = null)
    {
        this.salesPurchLineInterface().setPriceDiscPriceUnit(_priceDisc, _checkPolicy, _retailCalculator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQuotationStatus</Name>
				<Source><![CDATA[
    void  setQuotationStatus()
    {
        SalesQuotationLineType  salesQuotationLineType;

        salesQuotationLineType = this.type();
        salesQuotationLineType.setQuotationStatus(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStockedProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>StockedProduct</c> field for the line based on line type and item model group for the associated item.
    /// </summary>
    public void setStockedProduct()
    {
        this.type().setStockedProduct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSuframaDiscount_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// calculates the suframa discount
    /// </summary>
    /// <param name="_fieldId">
    /// cfop modified field
    /// </param>
    private void setSuframaDiscount_BR(FieldId _fieldId)
    {
        TaxValue    discICMS;
        TaxValue    discPIS;
        TaxValue    discCOFINS;

        [discICMS, discPIS, discCOFINS] = Tax::getSuframaDiscount_BR(   this.TaxGroup,
                                                                    this.TaxItemGroup,
                                                                    this.salesQuotationTable().custTable_InvoiceAccount().Suframa_BR,
                                                                    this.salesQuotationTable().custTable_InvoiceAccount().SuframaPISCOFINS_BR);
        this.SuframaDiscount_BR = discICMS + discPIS + discCOFINS;
        this.LineAmount         = this.calcLineAmountForced();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxGroup</Name>
				<Source><![CDATA[
    void setTaxGroup(TaxGroup _taxGroup)
    {
        SalesQuotationLineType  salesQuotationLineType;

        salesQuotationLineType = this.type();
        salesQuotationLineType.setTaxGroup(_taxGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxGroupAndTaxItemGroupFields_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set SalesQuotationLine.TaxGroup and SalesQuotationLine.TaxItemGroup based on <c>TaxesMatrix</c>
    /// </summary>
    public void setTaxGroupAndTaxItemGroupFields_BR()
    {
        TaxGroup            taxGroup;
        TaxItemGroup        taxItemGroup;

        [taxGroup, taxItemGroup] = TaxesMatrix_BR::findTaxGroupAndTaxItemGroup(this.cfopTable_BR,
                                                                           this.salesQuotationTable().SalesPurchOperationType_BR,
                                                                           SalesPurchTrntype_BR::Sales,
                                                                           CustVendType_BR::Customer,
                                                                           this.salesQuotationTable().CustAccount,
                                                                           this.ItemId,
                                                                           this.inventDim().inventSite().fiscalEstablishment().fiscalEstablishmentGroup());

        this.TaxGroup      = taxGroup     ? taxGroup     : this.salesQuotationTable().TaxGroup;
        this.TaxItemGroup  = taxItemGroup ? taxItemGroup : this.inventTable().salesTaxItemGroupId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxItemGroup</Name>
				<Source><![CDATA[
    void setTaxItemGroup(TaxItemGroup _taxItemGroup)
    {
        SalesQuotationLineType  salesQuotationLineType;

        salesQuotationLineType = this.type();
        salesQuotationLineType.setTaxItemGroup(_taxItemGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTemplateFieldSpecieal</Name>
				<Source><![CDATA[
    void setTemplateFieldSpecieal(
    SalesQuotationLine              _salesQuotationLineTemplate,
    SalesQuotationPriceConversion   _quotationPriceConversion)
    {
        DimensionDefault        defaultDimension;

        this.TransactionCode          = '';
        this.Transport                = '';
        this.Port                     = '';
        this.StatProcId               = '';
        this.CountyOrigDest           = '';
        this.StatTriangularDeal       = NoYes::No;
        this.IntrastatCommodity       = 0;
        this.OrigCountryRegionId      = '';
        this.OrigStateId              = '';

        if (_quotationPriceConversion == SalesQuotationPriceConversion::Template)
        {
            this.DefaultDimension = this.copyDimension(_salesQuotationLineTemplate.DefaultDimension);
        }
        else
        {
            defaultDimension        = this.DefaultDimension;
            this.DefaultDimension   = this.copyDimension(SalesQuotationTable::find(this.QuotationId).DefaultDimension);
            this.DefaultDimension   = this.mergeDimension(InventTable::find(this.ItemId).DefaultDimension, defaultDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipMarkup</Name>
				<Source><![CDATA[
    boolean skipMarkup()
    {
        switch (this.QuotationType)
        {
            case QuotationType::Sales:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stockedProductChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies default values or sets the inventory related field values to null when the <c>StockedProduct</c> field value is changed.
    /// </summary>
    void stockedProductChanged()
    {
        if (this.isStocked())
        {
            // default inventory fields
            this.QtyOrdered             = this.calcQtyOrdered();
            this.RemainInventPhysical   = this.QtyOrdered;
            this.setInventDeliverNow();
        }
        else
        {
            // blank out inventory fields
            this.QtyOrdered             = 0;
            this.InventDeliverNow       = 0;
            this.RemainInventPhysical   = 0;
            this.ItemRouteId            = '';
            this.ItemBOMId              = '';
            this.DeliveryDateControlType = SalesDeliveryDateControlType::None;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPcsPrice</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public PriceCur taxPcsPrice(TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null)
    {
        return this.salesPurchLineInterface().taxPcsPrice(transDate, _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeZoneSite</Name>
				<Source><![CDATA[
    display Timezone timeZoneSite()
    {
        return InventSite::timeZoneSite(InventDim::find(this.InventDimId).InventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    SalesQuotationLineType  type()
    {
        return SalesQuotationLineType::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(boolean     _dropInvent                          = false,
                       Common      _childBuffer                         = null,
                       boolean     _updateOrderLineOfDeliverySchedule   = true,
                       boolean     _isCalledFromPSAActivityEstimates    = false
                       )
    {
        if (!_updateOrderLineOfDeliverySchedule)
        {
            // The _updateOrderLineOfDeliverySchedule parameter is replaced by the updateWithoutUpdatingDeliveryScheduleLines method.
            throw error(error::wrongUseOfFunction(funcName()));
        }

        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        SalesQuotationInstrumentationActivities salesQuotationActivities = SalesQuotationLine::instrumentationLogger().salesQuotationActivities();
        
        using (var activityContext = salesQuotationActivities.update(this))
        {
            SalesQuotationLine  salesQuotationLineOrig      = this.orig();
            NoYes               skipDeliveryScheduleUpdate  = this.SkipDeliveryScheduleUpdate;
        
            SalesQuotationTable salesQuotationTable = this.salesQuotationTable(true);

            SalesQuotationLineType salesQuotationLineType = this.type();

            salesQuotationLineType.updating();

            this.setQuotationStatus();

            this.ConfirmedDlv = this.ShippingDateRequested;
            this.updateSalesQuotationTable(salesQuotationTable);

            InventUpd_Estimated estimated;

            // For non-inventoried we do not have an item and inventory transaction may never be created.
            if (!_dropInvent && this.isStocked())
            {
                estimated = salesQuotationLineType.updateInventoryOnUpdate(_childBuffer);
            }

            if (this.mcrOrderLine2PriceHistoryRef != salesQuotationLineOrig.mcrOrderLine2PriceHistoryRef)
            {
                MCROrderLine2PriceHistoryRef::deleteRef(salesQuotationLineOrig.mcrOrderLine2PriceHistoryRef);
            }

            // <GTE>
            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled()
                && this.SalesPurchJournalLine::taxRecalculationNeeded())
            {
                this.markCurrentTaxDocumentTaxStatusDirty();
            }
            // </GTE>

            salesQuotationActivities.logSalesQuotationLine(activityContext, salesQuotationTable, this);
            
            super();

            if (estimated)
            {
                estimated.updateReservation();
            }

            if (this.LineDeliveryType == LineDeliveryType::DeliveryLine
                && !skipDeliveryScheduleUpdate
                && (   this.SalesQty               != salesQuotationLineOrig.SalesQty
                    || this.ShippingDateRequested  != salesQuotationLineOrig.ShippingDateRequested
                    || this.ReceiptDateRequested   != salesQuotationLineOrig.ReceiptDateRequested))
            {
                salesQuotationLineType.updateOrderLineOfDeliverySchedule();
            }

            if (this.DlvMode != salesQuotationLineOrig.DlvMode)
            {
                this.createMarkupTrans(salesQuotationTable);
            }

            salesQuotationLineType.updated(salesQuotationLineOrig);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWithoutUpdatingDeliveryScheduleLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update quotation line without updating the associated delivery schedule lines.
    /// </summary>
    /// <param name="_dropInvent">
    /// A Boolean value that indicates whether the inventory movement that is associated with the line must
    /// be updated; optional.
    /// </param>
    /// <remarks>
    /// When calling this method, it is the responsibility of the caller to update the order line.
    /// This is typically done when updating multiple delivery lines in a single transaction and the order line recalculation is performed only once.
    /// </remarks>
    public void updateWithoutUpdatingDeliveryScheduleLines(boolean _dropInvent = false)
    {
        try
        {
            this.SkipDeliveryScheduleUpdate = NoYes::Yes;

            this.update(_dropInvent);
        }
        finally
        {
            this.SkipDeliveryScheduleUpdate = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesQuotationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates sales quotation table record.
    /// </summary>
    /// <param name = "_salesQuotationTable">
    /// The sales quotation table record.
    /// </param>
    protected void updateSalesQuotationTable(SalesQuotationTable _salesQuotationTable)
    {
        if (_salesQuotationTable.CovStatus != 0 || this.isAnyNonSystemFieldChanged(_salesQuotationTable))
        {
            _salesQuotationTable.CovStatus = 0;
            _salesQuotationTable.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnyNonSystemFieldChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether at least one of the fields of the specified record has changed.
    /// </summary>
    /// <param name = "_record">The record where the values should be checked.</param>
    /// <returns>true if at least one of the fields has changed; otherwise, false.</returns>
    private boolean isAnyNonSystemFieldChanged(Common _record)
    {
        Common recordOrig = _record.orig();
        DictTable dictTable = new DictTable(_record.TableId);
        FieldId tableFieldId = dictTable.fieldNext(0);

        while (tableFieldId)
        {
            DictField dictField = dictTable.fieldObject(tableFieldId);

            if (dictField.isSql()
                && !dictField.isSystem()
                && _record.(tableFieldId) != recordOrig.(tableFieldId))
            {
                return true;
            }

            tableFieldId = dictTable.fieldNext(tableFieldId);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarkupTransTaxGroups_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// updates the markup trans based on the tax group and tax item group.
    /// </summary>
    private void updateMarkupTransTaxGroups_BR()
    {
        MarkupTrans markupTrans;
        MarkupTable markupTable;

        ttsbegin;
        while select forupdate markupTrans
        where markupTrans.TransTableId == this.TableId
           && markupTrans.TransRecId   == this.RecId
           && (markupTrans.TaxGroup != '' || markupTrans.TaxItemGroup != '')
        exists join markupTable
            where markupTable.MarkupCode == markupTrans.MarkupCode
                    && markupTable.ModuleType == markupTrans.ModuleType
                    && markupTable.CustType   == MarkupType::CustVend
                    && markupTable.VendType   == MarkupType::LedgerAccount
        {
            markupTrans.TaxGroup = this.TaxGroup;
            markupTrans.TaxItemGroup = this.TaxItemGroup;
            markupTrans.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete(boolean validateOnly = false)
    {
        boolean                 ok = true;
        SalesQuotationLineType  salesQuotationLineType;

        ok = super();

        if (ok)
        {
            salesQuotationLineType = this.type();
            ok = salesQuotationLineType.validateDelete(validateOnly);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a passed in field.
    /// </summary>
    /// <param name="fieldId">
    /// The field ID.
    /// </param>
    /// <returns>
    ///  true when the validation is successful; otherwise false.
    /// </returns>
    /// <remarks>
    /// Before validation replace alternate source code with matching primary source code.
    /// A user may not turn on a price override via the checkbox (MCRPriceOverride),
    /// they may only turn off the price override via the checkbox.
    /// </remarks>
    boolean  validateField(FieldId  fieldId)
    {
        boolean         ok       = true;
        SalesQuotationLineType  salesQuotationLineType;

        ok = super(fieldId);

        if (ok)
        {
            salesQuotationLineType = this.type();
            ok = salesQuotationLineType.validateField(fieldId);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjectDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the project transaction date valid or not.
    /// </summary>
    /// <param name="_salesQuotationLine">
    ///    The <c>SalesQuotationLine</c> record.
    /// </param>
    /// <returns>
    ///    True if project transaction date is valid; otherwise, false.
    /// </returns>
    public boolean validateProjectDate(SalesQuotationLine _salesQuotationLine)
    {
        boolean             ok                  = true;
        SalesQuotationTable salesQuotationTable = _salesQuotationLine.salesQuotationTable();

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            if (!salesQuotationTable.psaEstProjStartDate && _salesQuotationLine.TransDate < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
            {
                ok = checkFailed("@SYS86762");
            }

            if (!salesQuotationTable.psaEstProjEndDate && _salesQuotationLine.TransDate > DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
            {
                ok = checkFailed("@GLS114233");
            }

            if (ok && ((_salesQuotationLine.TransDate &&
            (_salesQuotationLine.TransDate < salesQuotationTable.psaEstProjStartDate)) ||
            (salesQuotationTable.psaEstProjEndDate &&
            (_salesQuotationLine.TransDate > salesQuotationTable.psaEstProjEndDate))))
            {
                ok = checkFailed(strFmt("@SYS344093","@SYS54242","@PSA11099","@PSA11098"));
            }
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean                 ret = true;

        ret = super();

        ret = ret && this.validateWrite_Server();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite_Server</Name>
				<Source><![CDATA[
    boolean validateWrite_Server()
    {
        boolean                 ret = true;
        SalesQuotationLineType  salesQuotationLineType;
        SalesQuotationLine      localSalesQuotationLine;
        SalesCalcAvailableDlvDates salesCalcAvailableDlvDates;

        if (ret)
        {
            salesQuotationLineType = this.type();
            ret = salesQuotationLineType.validateWrite();
        }

        if (ret)
        {
            if (this.isTmp())
            {
                // workaround that prevents this.dataareaid from being reset when invoked on a temporary table buffer.
                Global::buf2Buf(this, localSalesQuotationLine);
                salesCalcAvailableDlvDates = SalesCalcAvailableDlvDates::newCommonSalesDlvDateType(localSalesQuotationLine);
                ret = salesCalcAvailableDlvDates.validateWritePrompt(localSalesQuotationLine,false,false,true,false);
                Global::buf2Buf(localSalesQuotationLine, this);
            }
            else
            {
                salesCalcAvailableDlvDates = SalesCalcAvailableDlvDates::newCommonSalesDlvDateType(this);
                ret = salesCalcAvailableDlvDates.validateWritePrompt(this,false,false,true,false);
            }
        }

        if (ret)
        {
            SalesQuotationTable salesQuotationTable = this.salesQuotationTable();
            if ((salesQuotationTable.isRetailSaleQuotation() || salesQuotationTable.RetailChannelTable) && this.isCategoryBased())
            {
                warning("@Retail:SalesCategoryIsNotSupportedForRetailSalesQuotationsAndOrders");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuotationLineFromTemplate</Name>
				<Source><![CDATA[
    static void createQuotationLineFromTemplate(
        SalesQuotationTable             salesQuotationTableTemplate,
        SalesQuotationTable             salesQuotationTable,
        SalesQuotationPriceConversion   quotationPriceConversion = SalesQuotationPriceConversion::Current
    )
    {
        SalesQuotationLine                      salesQuotationLine,
                                                salesQuotationLineTemplate;
        SalesQuotationLineForeignTradeCategory  salesQuotationLineForeignTradeCategory;
        SalesQuotationDeliverySchedule          salesQuotationDeliverySchedule;
        InventTransId                           multiDelInventTransId;
        boolean                                 initFromInventTable;
        boolean                                 calcInventQty;
        boolean                                 searchPrice;
        int                                     dateOffset = 0;

        MCRSourceCodeLine                       mcrSourceCodeLine;
        MCRSalesQuotationLine                   mcrSalesQuotationLine;

        select minof(TransDate) from salesQuotationLine where
            salesQuotationLine.QuotationId == salesQuotationTableTemplate.QuotationId &&
            salesQuotationLine.TransDate > dateNull();

        if (salesQuotationLine && salesQuotationTable.psaEstProjStartDate)
        {
            dateOffset = salesQuotationTable.psaEstProjStartDate - salesQuotationLine.TransDate;
        }

        while select salesQuotationLineTemplate
            index hint QuotationLineIdx where
                    salesQuotationLineTemplate.QuotationId                                  == salesQuotationTableTemplate.QuotationId
                outer join firstonly salesQuotationLineForeignTradeCategory where
                    salesQuotationLineForeignTradeCategory.SalesQuotationLineInventTransId  == salesQuotationLineTemplate.InventTransId &&
                    salesQuotationLineForeignTradeCategory.SalesQuotationLineDataAreaId     == salesQuotationLineTemplate.DataAreaId
        {
            salesQuotationLine.clear();
            salesQuotationLine.QuotationType = salesQuotationTable.QuotationType;
            salesQuotationLine.initFromSalesQuotationTable(salesQuotationTable);

            salesQuotationLine.LineDeliveryType = salesQuotationLineTemplate.LineDeliveryType;
            salesQuotationLine.initFromSalesQuotationLine(salesQuotationLineTemplate);
            
            if (salesQuotationLine.TransDate)
            {
                salesQuotationLine.TransDate += dateOffset;
            }

            salesQuotationLine.setAddressFromSalesQuotationTable(salesQuotationTable); // these field should be set according to new account
            salesQuotationLine.setTemplateFieldSpecieal(salesQuotationLineTemplate,quotationPriceConversion);

            initFromInventTable = (salesQuotationLine.ItemId != "" && (quotationPriceConversion == SalesQuotationPriceConversion::Current)) ? true : false;
            calcInventQty       = (salesQuotationLine.ItemId != "" && (quotationPriceConversion == SalesQuotationPriceConversion::Current)) ? true : false;
            searchPrice         = (quotationPriceConversion == SalesQuotationPriceConversion::Current) ? true : false;

            SalesQuotationLine::createSalesQuotationLineFromTemplate(salesQuotationLine,
                                                                     salesQuotationLineTemplate,
                                                                     salesQuotationTable,
                                                                     salesQuotationTableTemplate,
                                                                     quotationPriceConversion,
                                                                     initFromInventTable,
                                                                     calcInventQty,
                                                                     searchPrice);

            salesQuotationLine.DeliveryDateControlType = salesQuotationLineTemplate.DeliveryDateControlType;
            if (quotationPriceConversion == SalesQuotationPriceConversion::Current)
            {
                salesQuotationLine.ShippingDateRequested = salesQuotationTable.ShippingDateRequested;
                salesQuotationLine.ReceiptDateRequested  = salesQuotationTable.ReceiptDateRequested;
            }
            else
            {
                salesQuotationLine.ShippingDateRequested   = salesQuotationLineTemplate.ShippingDateRequested;
                salesQuotationLine.ReceiptDateRequested    = salesQuotationLineTemplate.ReceiptDateRequested;
            }
             salesQuotationLine.doUpdate();

            if (salesQuotationLine.isCategoryBased())
            {
                salesQuotationLineForeignTradeCategory.initFromSalesQuotationLine(salesQuotationLine);
                salesQuotationLineForeignTradeCategory.initFromSQLineForeignTradeCategory(salesQuotationLineForeignTradeCategory);
                salesQuotationLineForeignTradeCategory.insert();
            }

            if (salesQuotationLine.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries)
            {
                multiDelInventTransId = salesQuotationLine.InventTransId;
            }

            if (salesQuotationLine.LineDeliveryType == LineDeliveryType::DeliveryLine)
            {
                salesQuotationDeliverySchedule.OrderLine    = multiDelInventTransId;
                salesQuotationDeliverySchedule.DeliveryLine = salesQuotationLine.InventTransId;
                salesQuotationDeliverySchedule.insert();
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
            {
                mcrSalesQuotationLine = salesQuotationLine.mcrSalesQuotationLine();
                if (mcrSalesQuotationLine.SourceId)
                {
                    mcrSourceCodeLine = MCRSourceCodeLine::construct(salesQuotationLine);
                    salesQuotationLine = mcrSourceCodeLine.mcrInitFromSourceCodeSetup(MCRSourceCodeSetup::find(mcrSalesQuotationLine.SourceId));
                    salesQuotationLine.setPriceDisc(InventDim::find(salesQuotationLine.InventDimId));

                    if (salesQuotationLine.validateWrite())
                    {
                        salesQuotationLine.update();
                    }
                    else
                    {
                        throw error("@SYS104318");
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesQuotationLineFromTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>SalesQuotationLine</c> record from a template.
    /// </summary>
    /// <param name = "_salesQuotationLine">The quotation line.</param>
    /// <param name = "_salesQuotationTableTemplate">The quotation header template.</param>
    /// <param name = "_salesQuotationTable">The quotation header.</param>
    /// <param name = "_salesQuotationLineTemplate">The quotation line template</param>
    /// <param name = "_quotationPriceConversion">A Boolean indicating whether the price should be converted.</param>
    /// <param name = "_initFromInventTable">A Boolean indicating whether the quotation line should be initialized from a <c>VendTable</c> record.</param>
    /// <param name = "_calcInventQty">A Boolean indicating whether the inventory quantity should be calculated.</param>
    /// <param name = "_searchPrice">A Boolean indicating whether the price should be searched for.</param>
    protected static void createSalesQuotationLineFromTemplate(
        SalesQuotationLine      _salesQuotationLine,
        SalesQuotationLine      _salesQuotationLineTemplate,
        SalesQuotationTable     _salesQuotationTable,
        SalesQuotationTable     _salesQuotationTableTemplate,
        boolean                 _quotationPriceConversion,
        boolean                 _initFromInventTable,
        boolean                 _calcInventQty,
        boolean                 _searchPrice)
    {
        if (TaxParameters::checkTaxParameters_IN())
        {
            _salesQuotationLine.createLine(
                false,                // Validation
                false,                // Init from SalesQuotationTable
                _initFromInventTable, // Init from InventTable
                _calcInventQty,       // Calc invent Qty
                false,                // Search markup
                _searchPrice,        // search price
                _salesQuotationLineTemplate.InventTransId);
        }
        else
        {
            _salesQuotationLine.createLine(
                false,                // Validation
                false,                // Init from SalesQuotationTable
                _initFromInventTable, // Init from InventTable
                _calcInventQty,       // Calc invent Qty
                false,                // Search markup
                _searchPrice);        // search price
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(QuotationIdBase    _quotationId,
                     LineNum            _lineNum = naReal())
    {
        if (!_quotationId)
        return false;

        if (prmisDefault(_lineNum))
        {
            return (select firstonly RecId from salesQuotationLine
                    index hint QuotationLineIdx
                    where salesQuotationLine.QuotationId     == _quotationId).RecId != 0;
        }

        return (select firstonly RecId from salesQuotationLine
                index hint QuotationLineIdx
                where salesQuotationLine.QuotationId == _quotationId  &&
                      salesQuotationLine.LineNum     == _lineNum).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDifferentCurrency</Name>
				<Source><![CDATA[
    static boolean  existDifferentCurrency(QuotationIdBase   _quotationId, CurrencyCode  _currencyCode)
    {
        if (!_quotationId || !_currencyCode)
        {
            return false;
        }

        return (select firstonly RecId from salesQuotationLine
                   index hint QuotationLineIdx
                   where salesQuotationLine.QuotationId  == _quotationId      &&
                         salesQuotationLine.CurrencyCode != _currencyCode).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether a record exists for the specified item.
    /// </summary>
    /// <param name="_itemId">
    /// The item for which to search.
    /// </param>
    /// <returns>
    /// true if the record is found; otherwise, false .
    /// </returns>
    public static boolean existItemId(ItemId  _itemId)
    {
        boolean     ret = false;

        if (_itemId)
        {
            ret = (select firstonly salesQuotationLine
                    where salesQuotationLine.ItemId == _itemId).RecId != 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static SalesQuotationLine find(QuotationIdBase  quotationId,
                               LineNum          lineNum     = 0,
                               boolean          update      = false)
    {
        SalesQuotationLine salesQuotationLine;

        if (quotationId)
        {
            salesQuotationLine.selectForUpdate(update);

            if (lineNum)
            {
                select firstonly salesQuotationLine
                where salesQuotationLine.QuotationId    == quotationId &&
                      salesQuotationLine.LineNum        == lineNum;
            }
            else
            {
                select firstonly salesQuotationLine
                where salesQuotationLine.QuotationId    == quotationId;
            }
        }

        return salesQuotationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLineCreationSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find record in <c>SalesQuotationLine</c> table based on QuotationId and LineCreationSequence.
    /// </summary>
    /// <param name = "_quotationId">Sales quotation number to retrieve the record for.</param>
    /// <param name = "_lineCreationSequence">Line creation sequence number to retrieve the record for.</param>
    /// <param name = "_update">A boolean value that indicates whether the record is selected for update or not; optional.</param>
    /// <returns>The <c>SalesLine</c> record</returns>
    public static SalesQuotationLine findLineCreationSequence(QuotationId                   _quotationId,
                                                            SalesQuoteLineCreationSequenceNumber _lineCreationSequence,
                                                            boolean                         _update = false )
    {
        SalesQuotationLine salesQuotationLine;

        if (_quotationId && _lineCreationSequence)
        {
            if (_update)
            {
                salesQuotationLine.selectForUpdate(_update);
            }

            select firstonly salesQuotationLine
                index hint QuotationLineCreationSequenceIdx
                where salesQuotationLine.QuotationId                    == _quotationId
                    && salesQuotationLine.LineCreationSequenceNumber    == _lineCreationSequence;
        }

        return salesQuotationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransId</Name>
				<Source><![CDATA[
    static SalesQuotationLine findInventTransId(TradeInventTransId  _transId,
                                            boolean             _update = false)
    {
        SalesQuotationLine      salesQuotationLine;

        salesQuotationLine.selectForUpdate(_update);

        select firstonly salesQuotationLine
        index hint TransIdIdx
        where salesQuotationLine.InventTransId == _transId;

        return salesQuotationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPSARefRecId</Name>
				<Source><![CDATA[
    static SalesQuotationLine findPSARefRecId(RecId       _recId,
                                          boolean     _forUpdate = false)
    {
        SalesQuotationLine  salesQuotationLine;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && _recId)
        {
            salesQuotationLine.selectForUpdate(_forUpdate);

            select firstonly salesQuotationLine
            where salesQuotationLine.psaRefRecId == _recId;
        }

        return salesQuotationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static SalesQuotationLine findRecId(RecId       recId,
                                    boolean     update = false)
    {
        SalesQuotationLine  salesQuotationLine;

        salesQuotationLine.selectForUpdate(update);

        select firstonly salesQuotationLine
        where salesQuotationLine.RecId == recId;

        return salesQuotationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastDeliveryScheduleLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the last line number that is used by the delivery lines linked to the specified order
    /// line.
    /// </summary>
    /// <param name="_orderLine">
    /// The order line of the delivery schedule to find the maximum line number for.
    /// </param>
    /// <returns>
    /// The maximum line number of the delivery lines linked to the specified order line or zero when no
    /// such line exists.
    /// </returns>
    /// <remarks>
    /// This method is used to guarantee that the delivery lines will not be interlaced with order lines.
    /// </remarks>
    static LineNum lastDeliveryScheduleLineNum(TradeInventTransId _orderLine)
    {
        SalesQuotationLine               salesQuotationLine;
        SalesQuotationDeliverySchedule   salesQuotationDeliverySchedule;

        select maxof(LineNum) from salesQuotationLine
        exists join salesQuotationDeliverySchedule
            where salesQuotationDeliverySchedule.OrderLine == _orderLine
               && salesQuotationDeliverySchedule.DeliveryLine == salesQuotationLine.InventTransId;

        return salesQuotationLine.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    static LineNum  lastLineNum(QuotationIdBase _quotationId)
    {
        return (select maxof(LineNum) from salesQuotationLine
                index hint QuotationLineIdx
                where salesQuotationLine.QuotationId == _quotationId).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCreateFromTmpFrmVirtualFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Executes the creation of sales order quotation lines based on <c>TmpFrmVirtual</c> records in IL.
    /// </summary>
    /// <param name="_packedContract">
    ///   A packed version of the <c>MCRQuoteLineCreateFrmTmpFrmVirtContract</c> class.
    /// </param>
    /// <returns>
    /// Empty container.
    /// </returns>
    private static container mcrCreateFromTmpFrmVirtualFromContract(container _packedContract)
    {
        MCRQuoteLineCreateFrmTmpFrmVirtContract contract = MCRQuoteLineCreateFrmTmpFrmVirtContract::create(_packedContract);
        SalesQuotationTable     salesQuotationTable = contract.parmSalesQuotationTable();
        InventDimParm           inventDimParm = contract.parmInventDimParm();
        ListEnumerator          tmpFrmVirtualEnumerator = List::create(contract.parmTmpFrmVirtualPacked()).getEnumerator();
        TmpFrmVirtual           tmpFrmVirtual;

        SalesQuotationLine salesQuotationLine;
        try
        {
            ttsbegin;
            while (tmpFrmVirtualEnumerator.moveNext())
            {
                tmpFrmVirtual = tmpFrmVirtualEnumerator.current();

                salesQuotationLine.clear();
                salesQuotationLine.initFromSalesQuotationTable(salesQuotationTable);
                salesQuotationLine.initFromTmpFrmVirtual(tmpFrmVirtual);
                salesQuotationLine.initRetailVariantId(SalesQuotationLine.inventDim());

                salesQuotationLine.createLine(true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        '',
                        true);
            }

            salesQuotationLine.updateSalesQuotationTable(salesQuotationLine.salesQuotationTable(true));
            ttscommit;
        }
        catch (Exception::Error)
        {
            throw error("@SYS18447");
        }

        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpFrmVirtual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>SalesQuotationLine</c> from the given <c>TmpFrmVirtual</c> record.
    /// </summary>
    /// <param name = "_tmpFrmVirtual">
    /// The <c>TmpFrmVirtual</c> record to initialize from.
    /// </param>
    protected void initFromTmpFrmVirtual(TmpFrmVirtual _tmpFrmVirtual)
    {
        this.ItemId = _tmpFrmVirtual.ItemId;
        this.SalesQty = _tmpFrmVirtual.Qty;
        this.InventDimId = _tmpFrmVirtual.InventDimId;
        this.PdsCWQty = _tmpFrmVirtual.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustEnsureQuantityIsAcceptableForQuotationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the quantity on the quotation order line must be within configured bounds.
    /// </summary>
    /// <returns>true, if acceptable quantity must be ensured; otherwise, false.</returns>
    public boolean mustEnsureQuantityIsAcceptableForQuotationLine()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifySalesQty</Name>
				<Source><![CDATA[
    static void  modifySalesQty(SalesQuotationLine   _salesQuotationLine,
                                   InventDim            _inventDim)
    {
        MCRSalesQuotationLineOverride mcrSalesQuotationLineOverride = _salesQuotationLine.mcrSalesQuotationLineOverride();
        if ((_salesQuotationLine.ProjTransType == QuotationProjTransType::None) ||
        (_salesQuotationLine.ProjTransType == QuotationProjTransType::Item))
        {
            if (_salesQuotationLine.mustEnsureQuantityIsAcceptableForQuotationLine())
            {
                InventMovement::ensureTransQtyIsAcceptableForBuffer(_salesQuotationLine, _salesQuotationLine.parmQuantityErrorCorrectionMethods());
            }

            boolean hasRequiredProductDim = EcoResProductUnitConverter::hasRequiredProductDimensionsForUnitConversion(_salesQuotationLine.ItemId, _salesQuotationLine.inventDim());

            if (hasRequiredProductDim)
            {
                _salesQuotationLine.initSalesQty();
            }

            if (_salesQuotationLine.LineDeliveryType == LineDeliveryType::DeliveryLine)
            {
                _salesQuotationLine.LineAmount = _salesQuotationLine.calcLineAmountForced();
            }
            else
            {
                // Reset price agreements if line's price has been overridden
                if (!mcrSalesQuotationLineOverride.PriceOverride && _salesQuotationLine.mustResetPriceAndDiscounts())
                {
                    _salesQuotationLine.salesPurchLineInterface().resetPriceAgreement();
                    _salesQuotationLine.setPriceDisc(_inventDim);
                }
            }

            _salesQuotationLine.calcPackingUnitQty(_inventDim);

            if (hasRequiredProductDim)
            {
                InventMovement::bufferSetTransQtyUnit(_salesQuotationLine);
                _salesQuotationLine.setInventDeliverNow();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateDeliveryScheduleOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates the quantity field as a sum of the quantity fields on all delivery lines and shipment
    /// and receipt dates as a minimum of corresponding dates on delivery lines.
    /// </summary>
    /// <remarks>
    /// If the quantity field must be changed it resets the commercial attributes by looking for trade
    /// agreements.If no delivery lines exist the line is converted to an order line without delivery lines
    /// by setting the <c>LineDeliveryType</c> field to an <c>OrderLine</c> value.
    /// </remarks>
    public void recalculateDeliveryScheduleOrderLine()
    {
        this.type().recalculateDeliveryScheduleOrderLine(this.orig());
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetAxSalesQuotationLinePolicies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the price discount policies.
    /// </summary>
    /// <param name="_axSalesQuotationLine">
    /// An <c>AxSalesQuotationLine</c> object that represents the quotation line that should have the
    /// policies reset.
    /// </param>
    /// <param name="_source">
    /// A <c>PriceDiscSystemSource</c> enumeration value that indicates the source of the policy.
    /// </param>
    /// <param name="_policySystem">
    /// A <c>PriceDiscPolicySystem</c> data type value that represents the record ID of a record in the <c>PriceDiscChangePolicy</c> table.
    /// </param>
    /// <param name="_policyManual">
    /// A <c>PriceDiscPolicyManual</c> data type value that represents the record ID of a record in the <c>PriceDiscChangePolicy</c> table.
    /// </param>
    public static void resetAxSalesQuotationLinePolicies(
        AxSalesQuotationLine _axSalesQuotationLine,
        PriceDiscSystemSource _source       = PriceDiscSystemSource::None,
        PriceDiscPolicySystem _policySystem = 0,
        PriceDiscPolicyManual _policyManual = 0)
    {
        _axSalesQuotationLine.parmSystemEntrySource(_source);
        _axSalesQuotationLine.parmSystemEntryChangePolicy(_policySystem);
        _axSalesQuotationLine.parmManualEntryChangepolicy(_policyManual);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransfered2Forecast</Name>
				<Source><![CDATA[
    static void updateTransfered2Forecast(RecId _recId, boolean _checkUpdateTransferedStatus = true)
    {
        SalesQuotationLine      salesQuotationLine;

        ttsbegin;

        salesQuotationLine = SalesQuotationLine::findRecId(_recId, true);
        salesQuotationLine.Transferred2Forecast = NoYes::Yes;
        salesQuotationLine.doUpdate();

        if (_checkUpdateTransferedStatus)
        {
            SalesQuotationTable::checkUpdateTransferedStatus(salesQuotationLine.QuotationId);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransfered2ItemReq</Name>
				<Source><![CDATA[
    static void updateTransfered2ItemReq(RecId _recId, boolean _checkUpdateTransferedStatus = true)
    {
        SalesQuotationLine      salesQuotationLine;

        ttsbegin;

        salesQuotationLine = SalesQuotationLine::findRecId(_recId, true);
        salesQuotationLine.Transferred2ItemReq = NoYes::Yes;
        salesQuotationLine.doUpdate();

        if (_checkUpdateTransferedStatus)
        {
            SalesQuotationTable::checkUpdateTransferedItemReqStatus(salesQuotationLine.QuotationId);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailSalesQuotationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks Retail extension table from <c>PackedExtensions</c> field
    /// </summary>
    /// <param name="_packNewExtensionTable">
    /// A Boolean value that indicates whether to pack new extension table record; optional.
    /// </param>
    /// <returns>
    /// The unpacked <c>RetailSalesQuotationLine</c> record
    /// </returns>
    public RetailSalesQuotationLine retailSalesQuotationLine(boolean _packNewExtensionTable = true)
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(RetailSalesQuotationLine), _packNewExtensionTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailPackRetailSalesQuotationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the retail sales table extension table into <c>RetailSalesQuotationLine</c> field.
    /// </summary>
    /// <param name="_retailSalesQuotationLine">
    /// Extension table to be packed.
    /// </param>
    public void retailPackRetailSalesQuotationLine(RetailSalesQuotationLine _retailSalesQuotationLine)
    {
        _retailSalesQuotationLine.SalesQuotationLine = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_retailSalesQuotationLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLineInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SalesPurchLineInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// The <c>SalesPurchLineInterface</c> object.
    /// </returns>
    public SalesPurchLineInterface salesPurchLineInterface()
    {
        return this.SalesPurchLine::salesPurchLineInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxRecalculationNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c>SalesQuotationLine</c> table will update the Tax
    /// </summary>
    /// <param name="_origTransactionTable">
    /// The original <c>SalesQuotationLine</c> record.
    /// </param>
    /// <returns>True if current line tax should be recalculated, otherwise false </returns>
    // <GTE>
    private boolean taxRecalculationNeeded(Common _origTransactionTable = null)
    {
        SalesQuotationLine       salesQuotationLine_Orig;

        if (_origTransactionTable)
        {
            salesQuotationLine_Orig = _origTransactionTable as SalesQuotationLine;
        }
        else
        {
            salesQuotationLine_Orig = this.orig();
        }

        return  ((this.ItemId               != salesQuotationLine_Orig.ItemId) ||
                (this.PriceUnit             != salesQuotationLine_Orig.PriceUnit) ||
                (this.LinePercent           != salesQuotationLine_Orig.LinePercent) ||
                (this.LineDisc              != salesQuotationLine_Orig.LineDisc) ||
                (this.SalesQty              != salesQuotationLine_Orig.SalesQty) ||
                (this.TaxItemGroup          != salesQuotationLine_Orig.TaxItemGroup) ||
                (this.TaxGroup              != salesQuotationLine_Orig.TaxGroup) ||
                (this.MultiLnDisc           != salesQuotationLine_Orig.MultiLnDisc) ||
                (this.MultiLnPercent        != salesQuotationLine_Orig.MultiLnPercent) ||
                (this.LineAmount            != salesQuotationLine_Orig.LineAmount) ||
                (this.ProjCategoryId        != salesQuotationLine_Orig.ProjCategoryId) ||
                (this.CurrencyCode          != salesQuotationLine_Orig.CurrencyCode) ||
                (this.DeliveryPostalAddress != salesQuotationLine_Orig.DeliveryPostalAddress) ||
                (!DimensionDefaultFacade::areEqual(this.DefaultDimension, salesQuotationLine_Orig.DefaultDimension))
                );
    }

]]></Source>
			</Method>
			<Method>
				<Name>markCurrentTaxDocumentTaxStatusDirty</Name>
				<Source><![CDATA[
    // </GTE>

    /// <summary>
    /// Mark current tax status of <c> SalesQuotationTable </c> to dirty
    /// </summary>
    // <GTE>
    public void markCurrentTaxDocumentTaxStatusDirty()
    {
        TaxableDocumentDescriptor descriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(this.salesQuotationTable());
        ITaxableDocument taxableDocument = TaxableDocumentObject::construct(descriptor);
        TaxBusinessService::markTaxDocumentTaxStatus(taxableDocument, TaxDocumentCalculationLevel::Dirty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packExtensionTable</Name>
				<Source><![CDATA[
    // </GTE>

    /// <summary>
    /// Packs an extension table record to the container field <C>PackedExtensions</C>.
    /// </summary>
    /// <param name="_extensionTable">
    /// The extension table record.
    /// </param>
    /// <returns>
    /// true if success; otherwise false.
    /// </returns>
    public boolean packExtensionTable(SysExtensionSerializerExtensionMap _extensionTable)
    {
        boolean ret = false;

        if (_extensionTable.SysExtensionSerializerExtensionMap::baseTableId() == this.TableId)
        {
            ret = this.SysExtensionSerializerMap::packExtensionTable(_extensionTable);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSalesQuotationLineTaxExtensionIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs an extension table record to the container field <C>PackedExtensions</C>.
    /// </summary>
    /// <param name="_salesQuotationLineTaxExtensionIN">
    /// The extension table record.
    /// </param>
    public void packSalesQuotationLineTaxExtensionIN(SalesQuotationLineTaxExtensionIN _salesQuotationLineTaxExtensionIN)
    {
        _salesQuotationLineTaxExtensionIN.SalesQuotationLine = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_salesQuotationLineTaxExtensionIN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQuotationLineTaxExtensionIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>SalesQuotationLineTaxExtensionIN</c> table.
    /// </summary>
    /// <returns>
    /// The table <c>SalesQuotationLineTaxExtensionIN</c> associated with the current record.
    /// </returns>
    public SalesQuotationLineTaxExtensionIN salesQuotationLineTaxExtensionIN()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(SalesQuotationLineTaxExtensionIN));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPackAccessableValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update and pack the AccessableValue_IN
    /// </summary>
    /// <param name="_salesQuotationLineOrig">
    /// The original table record.
    /// </param>
    /// <param name="_salesQuotationLineTaxExtensionINOrig">
    /// The original extension table record.
    /// </param>
    public void updateAndPackAccessableValue_IN(SalesQuotationLine _salesQuotationLineOrig, SalesQuotationLineTaxExtensionIN _salesQuotationLineTaxExtensionINOrig)
    {
        SalesQuotationLineTaxExtensionIN salesQuotationLineTaxExtensionIN;
        SalesQuotationLine salesQuotationLineLoc = this;

        if (TaxParameters::checkTaxParameters_IN() && (this.LineAmount != _salesQuotationLineOrig.LineAmount))
        {
            salesQuotationLineTaxExtensionIN = this.salesQuotationLineTaxExtensionIN();

            if (salesQuotationLineTaxExtensionIN.RecId)
            {
                if (salesQuotationLineTaxExtensionIN.AssessableValueTransactionCurrency == _salesQuotationLineTaxExtensionINOrig.AssessableValueTransactionCurrency)
                {
                    ttsbegin;
                    salesQuotationLineTaxExtensionIN.selectForUpdate(true);
                    salesQuotationLineTaxExtensionIN.AssessableValueTransactionCurrency = this.getMiscChargesAmount_IN();
                    this.packSalesQuotationLineTaxExtensionIN(salesQuotationLineTaxExtensionIN);
                    salesQuotationLineTaxExtensionIN.doUpdate();
                    ttscommit;
                }
            }
            else
            {
                salesQuotationLineTaxExtensionIN.AssessableValueTransactionCurrency = this.getMiscChargesAmount_IN();
                this.packSalesQuotationLineTaxExtensionIN(salesQuotationLineTaxExtensionIN);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantityErrorCorrectionMethods</Name>
				<Source><![CDATA[
    internal InventMovementQuantityErrorCorrectionMethods parmQuantityErrorCorrectionMethods(InventMovementQuantityErrorCorrectionMethods _errorCorrectionMethods = null)
    {
        if (!prmIsDefault(_errorCorrectionMethods))
        {
            // setter
            if (_errorCorrectionMethods)
            {
                this.QuantityErrorCorrectionMethods = _errorCorrectionMethods.pack();
            }
            else
            {
                this.QuantityErrorCorrectionMethods = conNull();
            }

            return _errorCorrectionMethods;
        }

        // getter
        if (this.QuantityErrorCorrectionMethods)
        {
            return InventMovementQuantityErrorCorrectionMethods::newFromPacked(this.QuantityErrorCorrectionMethods);
        }

        return InventMovementQuantityErrorCorrectionMethods::newParameters();
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingSetKitPrice_delegate</Name>
				<Source><![CDATA[
    delegate void kittingSetKitPrice_delegate(SalesQuotationLine _salesQuotationLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingKitIdForItemAndInventDim_delegate</Name>
				<Source><![CDATA[
    delegate void kittingKitIdForItemAndInventDim_delegate(ItemId _itemId, InventDim _inventDim, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingKitIdForItemAndInventDim</Name>
				<Source><![CDATA[
    private ItemIdBase kittingKitIdForItemAndInventDim(ItemIdBase _default)
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        this.kittingKitIdForItemAndInventDim_delegate(this.ItemId, this.inventDim(), resultValue);
        return resultValue.hasResult() ? resultValue.result() : _default;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIntegrationOwnerDynamics365Sales</Name>
				<Source><![CDATA[
    internal boolean isIntegrationOwnerDynamics365Sales(SalesQuotationTable _salesQuotationTable)
    {
        return ((this.QuotationLineCreationMethod == SalesQuotationCreationMethod::Dynamics365Sales && _salesQuotationTable.QuotationOwnership == SalesQuotationOwnershipType::BasedOnOrigin)
            || _salesQuotationTable.QuotationOwnership == SalesQuotationOwnershipType::Dynamics365Sales)
                && SalesParameters::find().IsD365SalesQuotationLifecycleEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAppliedDiscountDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates details of applied discounts which show in line price details.
    /// </summary>
    /// <param name = "_recalcOrderIfNeeded">A boolean indicating whether to recalculate the entire order.</param>
    /// <remarks>It's counterpart in SalesLine is updateRetailDiscountsInternal.</remarks>
    internal protected void updateAppliedDiscountDetails(boolean _recalcOrderIfNeeded = true)
    {
        RetailSalesQuotationTable retailSalesQuotation;
        RetailSalesQuotationLine retailSalesQuotationLineLocal;
        container retailCalculatorResultContainer;
        RetailSalesOrderCalculatorResult result = new RetailSalesOrderCalculatorResult();

        if (!RetailParameters::isRetailEnabledAndInUse())
        {
            return;
        }

        retailSalesQuotation = RetailSalesQuotationTable::find(this.QuotationId);
        if (this.shouldUpdateRetailDiscountsInternal(retailSalesQuotation))
        {
            retailCalculatorResultContainer = retailSalesQuotation.TmpPriceDiscountData;
            // If the result is empty, do nothing. MCR may result in calling write() twice.
            if (retailCalculatorResultContainer)
            {
                result.unpack(retailCalculatorResultContainer);

                if (result.parmNeedsRecalculateWholeOrder() && _recalcOrderIfNeeded)
                {
                    RetailSalesQuotationCalculator::setPricesDiscountsOnOrderOnServer(
                        this.QuotationId, retailSalesQuotation.TotalManualDiscountPercentage);
                }
                else
                {
                    ttsbegin;

                    retailSalesQuotationLineLocal = RetailSalesQuotationLine::findBySalesQuotationLine(this.RecId, true);

                    retailSalesQuotationLineLocal.LineDscAmount = result.parmRetailSalesQuotationLine().LineDscAmount;
                    retailSalesQuotationLineLocal.LinePercentageDiscount = result.parmRetailSalesQuotationLine().LinePercentageDiscount;
                    retailSalesQuotationLineLocal.LineManualDiscountAmount = result.parmRetailSalesQuotationLine().LineManualDiscountAmount;
                    retailSalesQuotationLineLocal.LineManualDiscountPercentage = result.parmRetailSalesQuotationLine().LineManualDiscountPercentage;
                    retailSalesQuotationLineLocal.PeriodicDiscount = result.parmRetailSalesQuotationLine().PeriodicDiscount;
                    retailSalesQuotationLineLocal.PeriodicPercentageDiscount = result.parmRetailSalesQuotationLine().PeriodicPercentageDiscount;
                    retailSalesQuotationLineLocal.TotalDiscount = result.parmRetailSalesQuotationLine().TotalDiscount;
                    retailSalesQuotationLineLocal.TotalPctDiscount = result.parmRetailSalesQuotationLine().TotalPctDiscount;

                    retailSalesQuotationLineLocal.update();

                    this.updateRetailSalesQuotationDiscountLines(result);
                    this.updateRetailSalesQuotationPriceAdjustmentLine(result);

                    retailSalesQuotation = RetailSalesQuotationTable::find(this.QuotationId, true);
                    retailSalesQuotation.TmpPriceDiscountData = conNull();
                    retailSalesQuotation.update();

                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetailSalesQuotationDiscountLines</Name>
				<Source><![CDATA[
    protected void updateRetailSalesQuotationDiscountLines(RetailSalesOrderCalculatorResult _result)
    {
        RetailSalesQuotationDiscountLine discountLine;
        ListEnumerator discountLineEn;

        delete_from discountLine
            where discountLine.InventTransId == this.InventTransId;

        discountLineEn = _result.getRetailSalesDiscountLineList().getEnumerator();

        while (discountLineEn.moveNext())
        {
            discountLine = discountLineEn.current();
            if (!discountLine.InventTransId)
            {
                discountLine.InventTransId = this.InventTransId;
            }

            if (discountLine.InventTransId == this.InventTransId)
            {
                discountLine.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetailSalesQuotationPriceAdjustmentLine</Name>
				<Source><![CDATA[
    protected void updateRetailSalesQuotationPriceAdjustmentLine(RetailSalesOrderCalculatorResult _result)
    {
        RetailSalesQuotationPriceAdjustmentLine adjustmentLine;
        ListEnumerator adjustmentLineEn;

        delete_from adjustmentLine
            where adjustmentLine.InventTransId == this.InventTransId;

        // Creates new record in retail sales quotation price adjustment line when price adjustment is applied.
        adjustmentLineEn = _result.getRetailSalesPriceAdjustmentLineList().getEnumerator();

        RecordInsertList adjustmentLineInsertList = new RecordInsertList(tableNum(RetailSalesQuotationPriceAdjustmentLine));

        while (adjustmentLineEn.moveNext())
        {
            adjustmentLine = adjustmentLineEn.current();

            if(!adjustmentLine.InventTransId || adjustmentLine.InventTransId == this.InventTransId)
            {
                adjustmentLine.InventTransId = this.InventTransId;
                adjustmentLineInsertList.add(adjustmentLine);
            }
        }

        adjustmentLineInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventoryDimensionsWithOptimization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the related fields when multiple inventory dimension fields are modified with better performance.
    /// </summary>
    /// <param name="_inventDim">
    /// The new inventory dimension record.
    /// </param>
    /// <param name="_dimFieldIdSet">
    /// A set containing the ID's of the modified <c>InventDim</c> field.
    /// </param>
    /// <returns>false if product is not fully specified; otherwise true.</returns>
    private boolean modifyInventoryDimensionsWithOptimization(
        InventDim   _inventDim,
        Set         _dimFieldIdSet)
    {
        SalesQuotationLineTaxExtensionIN salesQuotationLineTaxExtensionIN;
        #ISOCountryRegionCodes
        // </GIN>
        if (!InventDistinctProductValidator::construct().isDistinctProductFullySpecified(this.ItemId, _inventDim))
        {
            return false;
        }
        InventTable inventTable = this.inventTable();
        InventDim inventDimLocal = InventDim::findOrCreate(_inventDim);
        this.setInventDimId(inventDimLocal.InventDimId, inventDimLocal);
        var defaultingArguments = InventDistinctProductDimensionSpecificDefaultingArgsSalesQuotationLine::construct(inventTable, false, false);
        var inventDistinctProductOrderDefaultingController = InventDistinctProductOrderDefaultingController::constructFromFieldSet(_dimFieldIdSet);
        inventDimLocal = inventDistinctProductOrderDefaultingController.inventDimModified(this.type(), inventDimLocal, defaultingArguments);
        if (inventDistinctProductOrderDefaultingController.isProductDimensionModified())
        {
            this.ExternalItemId = '';
            this.initFromProductDimensions(inventDimLocal);
            if (EcoResProductUnitConverter::hasRequiredProductDimensionsForUnitConversion(this.ItemId, inventDimLocal))
            {
                SalesQuotationLine::modifySalesQty(this, inventDimLocal);
                InventMovement::bufferSetTransQtyUnit(this);
                this.setInventDeliverNow();
            }
        }
        FieldId             dimFieldId;
        SetEnumerator       enumerator = _dimFieldIdSet.getEnumerator();
        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            if (InventDim::isFieldIdInventItemSetupRelevant(dimFieldId))
            {
                this.setDeliveryDateControlType(this.InventDimId);
                break;
            }
        }
        #InventDimDevelop
        if (#PmfEnabled && _dimFieldIdSet.in(fieldNum(InventDim, ConfigId)))
        {
            if (InventDim::find(this.InventDimId).ConfigId != _inventDim.ConfigId)
            {
                if (EcoResProductDimensionGroupFldSetup::findByDimensionGroupFieldId(inventTable.productDimensionGroup(), fieldNum(InventDim, ConfigId)).IsActive)
                {
                    var ecoResProductMasterConfiguration = EcoResProductMasterConfiguration::find(inventTable.Product, EcoResConfiguration::findByName(_inventDim.ConfigId).RecId);
                    if (ecoResProductMasterConfiguration)
                    {
                        var salesUnit = this.SalesUnit;
                        var uomConverterFromSalesUnit = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(
                                                            this.ItemId,
                                                            this.InventDimId,
                                                            this.SalesUnit,
                                                            ecoResProductMasterConfiguration.PmfConfigUnitId,
                                                            NoYes::No);
                        var uomConverterFromInventSalesUnit = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(
                                                                    this.ItemId,
                                                                    this.InventDimId,
                                                                    inventTable.salesUnitId(),
                                                                    ecoResProductMasterConfiguration.PmfConfigUnitId,
                                                                    NoYes::No);
                        if (uomConverterFromSalesUnit.canValueBeConverted())
                        {
                            this.SalesUnit = ecoResProductMasterConfiguration.PmfConfigUnitId;
                            this.SalesQty  = uomConverterFromSalesUnit.convertValue(this.SalesQty);
                            this.salesQtyModified();
                        }
                        else if (uomConverterFromInventSalesUnit.canValueBeConverted())
                        {
                            //Revert to original sales unit
                            this.SalesUnit = inventTable.salesUnitId();
                            this.SalesQty  = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                                                   this.InventDimId,
                                                                                                                   this.SalesQty,
                                                                                                                   salesUnit,
                                                                                                                   this.SalesUnit,
                                                                                                                   NoYes::No);
                            this.salesQtyModified();
                            //Migrate to Configuration Unit
                            this.SalesUnit = ecoResProductMasterConfiguration.PmfConfigUnitId;
                            this.SalesQty  = uomConverterFromInventSalesUnit.convertValue(this.SalesQty);
                            this.salesQtyModified();
                        }
                        else
                        {
                            throw error(strFmt("@PRO2897", this.SalesUnit, ecoResProductMasterConfiguration.PmfConfigUnitId, this.ItemId));
                        }
                    }
                }
            }
        }
        this.recalcPriceDiscOnInventDimSetChange(enumerator, inventDimLocal);
        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            LogisticsPostalAddressRecId logisticsPostalAddressRecId
                = LogisticsPostalAddress::findByLocation(TaxLogisticsLocationControllerHelper_IN::getDefaultLogisticsLocation(inventDimLocal.InventLocationId, inventDimLocal.InventSiteId)).RecId;
            TransTaxInformationHelper::newHelper().updateCompanyLocationFromTransTable(this, logisticsPostalAddressRecId);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventoryDimensionsWithoutOptimization</Name>
				<Source><![CDATA[
    private boolean modifyInventoryDimensionsWithoutOptimization(
         InventDim   _inventDim,
         FieldId     _dimFieldId)
    {
        if (!InventDistinctProductValidator::construct().isDistinctProductFullySpecified(this.ItemId, _inventDim))
        {
            return false;
        }

        InventTable inventTable = this.inventTable();
        InventDim inventDimLocal = InventDim::findOrCreate(_inventDim);

        this.setInventDimId(inventDimLocal.InventDimId, inventDimLocal);

        var defaultingArguments = InventDistinctProductDimensionSpecificDefaultingArgsSalesQuotationLine::construct(inventTable, false, false);

        var inventDistinctProductOrderDefaultingController = InventDistinctProductOrderDefaultingController::constructFromFieldId(_dimFieldId);

        inventDimLocal = inventDistinctProductOrderDefaultingController.inventDimModified(this.type(), inventDimLocal, defaultingArguments);

        if (inventDistinctProductOrderDefaultingController.isProductDimensionModified())
        {
            this.ExternalItemId = '';
            this.initFromProductDimensions(inventDimLocal);

            if (EcoResProductUnitConverter::hasRequiredProductDimensionsForUnitConversion(this.ItemId, inventDimLocal))
            {
                SalesQuotationLine::modifySalesQty(this, inventDimLocal);
                InventMovement::bufferSetTransQtyUnit(this);
                this.setInventDeliverNow();
            }
        }

        if (InventDim::isFieldIdInventItemSetupRelevant(_dimFieldId))
        {
            this.setDeliveryDateControlType(this.InventDimId);
        }

        #InventDimDevelop
        if (#PmfEnabled && _dimFieldId == fieldNum(InventDim, ConfigId))
        {
            if (InventDim::find(this.InventDimId).ConfigId != _inventDim.ConfigId)
            {
                if (EcoResProductDimensionGroupFldSetup::findByDimensionGroupFieldId(inventTable.productDimensionGroup(), fieldNum(InventDim, ConfigId)).IsActive)
                {
                    var ecoResProductMasterConfiguration = EcoResProductMasterConfiguration::find(inventTable.Product, EcoResConfiguration::findByName(_inventDim.ConfigId).RecId);

                    if (ecoResProductMasterConfiguration)
                    {
                        var salesUnit = this.SalesUnit;
                        var uomConverterFromSalesUnit = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(
                                                                this.ItemId,
                                                                this.InventDimId,
                                                                this.SalesUnit,
                                                                ecoResProductMasterConfiguration.PmfConfigUnitId,
                                                                NoYes::No);

                        var uomConverterFromInventSalesUnit = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(
                                                                        this.ItemId,
                                                                        this.InventDimId,
                                                                        inventTable.salesUnitId(),
                                                                        ecoResProductMasterConfiguration.PmfConfigUnitId,
                                                                        NoYes::No);

                        if (uomConverterFromSalesUnit.canValueBeConverted())
                        {
                            this.SalesUnit = ecoResProductMasterConfiguration.PmfConfigUnitId;
                            this.SalesQty  = uomConverterFromSalesUnit.convertValue(this.SalesQty);
                            this.salesQtyModified();
                        }
                        else if (uomConverterFromInventSalesUnit.canValueBeConverted())
                        {
                            //Revert to original sales unit
                            this.SalesUnit = inventTable.salesUnitId();
                            this.SalesQty  = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                                                       this.InventDimId,
                                                                                                                       this.SalesQty,
                                                                                                                       salesUnit,
                                                                                                                       this.SalesUnit,
                                                                                                                       NoYes::No);

                            this.salesQtyModified();

                            //Migrate to Configuration Unit
                            this.SalesUnit = ecoResProductMasterConfiguration.PmfConfigUnitId;
                            this.SalesQty  = uomConverterFromInventSalesUnit.convertValue(this.SalesQty);
                            this.salesQtyModified();
                        }
                        else
                        {
                            throw error(strFmt("@PRO2897", this.SalesUnit, ecoResProductMasterConfiguration.PmfConfigUnitId, this.ItemId));
                        }
                    }
                }
            }
        }

        this.recalcPriceDiscOnInventDimChange(inventDimLocal, _dimFieldId);

        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            LogisticsPostalAddressRecId logisticsPostalAddressRecId
                    = LogisticsPostalAddress::findByLocation(TaxLogisticsLocationControllerHelper_IN::getDefaultLogisticsLocation(inventDimLocal.InventLocationId, inventDimLocal.InventSiteId)).RecId;

            TransTaxInformationHelper::newHelper().updateCompanyLocationFromTransTable(this, logisticsPostalAddressRecId);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcPriceDiscOnInventDimSetChange</Name>
				<Source><![CDATA[
    private void recalcPriceDiscOnInventDimSetChange(SetEnumerator _enumerator, InventDim _inventDim)
    {
        _enumerator.reset();
        while (_enumerator.moveNext())
        {
            FieldId dimFieldId = _enumerator.current();
            if (this.mustRecalcPriceDiscOnInventDimChange(_inventDim, dimFieldId))
            {
                this.recalcPriceDiscOnInventDimChange(_inventDim, dimFieldId);
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private static SalesInstrumentationLogger instrumentationLogger()
    {
        return SalesInstrumentationLogger::createLogger(tableStr(SalesQuotationLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateRetailDiscountsInternal</Name>
				<Source><![CDATA[
    protected boolean shouldUpdateRetailDiscountsInternal(RetailSalesQuotationTable _retailSalesQuotation)
    {
        return _retailSalesQuotation && _retailSalesQuotation.RetailChannel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustResetPriceAndDiscounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the price and discounts should be reset.
    /// </summary>
    /// <returns>true if the price and discounts should be reset; otherwise false.</returns>
    protected boolean mustResetPriceAndDiscounts()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>QuotationBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124570</DeveloperDocumentation>
	<Label>@SYS16126</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>QuotationId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>QuotationLineIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>TransIdIdx</PrimaryIndex>
	<ReplacementKey>TransIdIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>MCROrderLine2PriceHistoryRef</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MCROrderLine2PriceHistoryRef</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QuotationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfirmedDlv</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AccountSelection</Name>
			<Label>@SYS2355</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Company</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressDisplay</Name>
			<Label>@SYS9362</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressLookup</Name>
			<Label>@SYS88672</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressReference</Name>
			<Label>@SYS88679</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AddressRefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetailVariantId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS53072</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Barcode</Name>
			<Label>@SYS24296</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BarCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BarCodeType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Commission</Name>
			<Label>@SYS2489</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CompanyInformation_IN</Name>
			<Label>@SYS81121</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CompanyLocation_IN</Name>
			<Label>@SYS6949</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustomerRef</Name>
			<Label>@SYS23010</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomerRef</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customs_IN</Name>
			<Label>@GLS5007</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Delivery</Name>
			<Label>@SYS4508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OverDeliveryPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnderDeliveryPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiptDateRequested</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShippingDateRequested</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryDateControlType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDeliveryType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTerm</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeliveryAddress</Name>
			<Label>@SYS7924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Discount</Name>
			<Label>@SYS11829</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLnDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLnPercent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Excise_IN</Name>
			<Label>@GLS5005</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExportOrder_IN</Name>
			<Label>@GLS5723</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalInformation_BR</Name>
			<Label>@GLS56</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CFOPTable_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ForeignTrade</Name>
			<Label>@SYS27650</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Port</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatProcId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatTriangularDeal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountyOrigDest</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatCommodity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigCountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigStateId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QuotationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyOrdered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainInventPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDeliverNow</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemReference</Name>
			<Label>@SYS24659</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventRefType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemRouteId</Name>
			<Label>@SYS22227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemBOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRouteId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OffsetAccount</Name>
			<Label>@SYS11162</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OffsetCompany</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetAccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetTxt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PackagingMaterial</Name>
			<Label>@SYS72995</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PackingUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackingUnitQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCWInventory</Name>
			<Label>@PDS83</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWRemainInventPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWDeliverNow</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCWMain</Name>
			<Label>@PDS72</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWUnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting</Name>
			<Label>@SYS12919</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price_IN</Name>
			<Label>@SYS11865</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PriceSimulation</Name>
			<Label>@SYS81194</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrigCostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceCalcId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewTotalContributionRatio</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewSalesPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjActivityInfo</Name>
			<Label>@SYS54618</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjActivity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSARefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjDates</Name>
			<Label>@SYS80293</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectCostAmount</Name>
			<Label>@SYS84545</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectSalesAmount</Name>
			<Label>@SYS84546</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectTransferredStatus</Name>
			<Label>@SYS84946</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Transferred2Forecast</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transferred2Journal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transferred2ItemReq</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjItem</Name>
			<Label>@SYS7407</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjQuantity</Name>
			<Label>@SYS84544</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjTransOverview</Name>
			<Label>@SYS80304</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfirmedDlv</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjectResource</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>QuotationLine</Name>
			<Label>@SYS81564</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>QuotationLines</Name>
			<Label>@SYS16126</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxAutoGenerated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineHeader</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>QuotationStatus</Name>
			<Label>@SYS2945</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QuotationStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReturnGroup</Name>
			<Label>@SYS16512</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesQuantity</Name>
			<Label>@SYS11990</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesDeliverNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainSalesPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainSalesFinancial</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideSalesTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax_IN</Name>
			<Label>@GLS5536</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ServiceTax_IN</Name>
			<Label>@GLS5006</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SuframaDiscount_BR</Name>
			<Label>@GLS128</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SuframaDiscount_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TableGroup</Name>
			<Label>@SYS21958</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VAT_IN</Name>
			<Label>@GLS5004</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WithholdingTax_IN</Name>
			<Label>@SYS333997</Label>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OffsetCompany</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ConfigurationKey>LedgerAdvIntercompanyAccounting</ConfigurationKey>
			<ExtendedDataType>SelectableDataArea</ExtendedDataType>
			<Label>@SYS25382</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerJournalACType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AddressRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AddressRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AddressRefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AddressRefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BarCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesBarCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BarCodeType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BarcodeSetupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CaseTagging</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RFIDCaseTagging</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CFOPTable_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Company</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SelectableDataArea</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ConfirmedDlv</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesShippingDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnCostPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountyOrigDest</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AddressCountyOrigDest</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Label>@SYS302</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomerRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustRefLine</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteLinkedDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DeliveryDateControlType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SalesDeliveryDateControlType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsDeliveryName</ExtendedDataType>
			<GroupPrompt>@SYS7399</GroupPrompt>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ConfigurationKey>TradeMultiShipTo</ConfigurationKey>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DlvModeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvTerm</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesDlvTermId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EndDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS22882</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExternalItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesExternalItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventDeliverNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS17214</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventRefTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventRefTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventRefType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventRefType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeInventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemBOMId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemBOMId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemIdSmall</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemRouteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemRouteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ItemTagging</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RFIDItemTagging</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LogisticsBasic</ConfigurationKey>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesLineAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LineDeliveryType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>LineDeliveryType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesLineDisc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LineHeader</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemFreeTxt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LinePercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesLinePercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LinePropertyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ManualEntryChangepolicy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceDiscPolicyManual</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MCROrderLine2PriceHistoryRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MultiLnDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesMultiLnDisc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MultiLnPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesMultiLnPercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemFreeTxt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NewSalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesPrice</ExtendedDataType>
			<Label>@SYS80929</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NewTotalContributionRatio</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Price</ExtendedDataType>
			<Label>@SYS80931</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OffsetAccountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS23950</Label>
			<EnumType>LedgerJournalACType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OffsetLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@SYS11162</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OffsetTxt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerJournalTransTxt</ExtendedDataType>
			<Label>@SYS24282</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OrigCostPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OverDeliveryPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesOverDeliveryPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PackingUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPackingUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PackingUnitQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPackingUnitQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PalletTagging</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RFIDPalletTagging</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWDeliverNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWRemainInventPhysical</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS96</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Port</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatPortId</ExtendedDataType>
			<FeatureClass>IntrastatPortToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PriceCalcId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceCalcId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjActivity</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>smmActivityNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>QuotationProjCategory</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS6114</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjDescription</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjectWorker</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>ProjWorkerRecId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjectResource</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ResourceRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjTransType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>QuotationProjTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PSARefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyOrdered</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>QuotationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>QuotationIdBase</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>QuotationStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SalesQuotationStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>QuotationType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>QuotationType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReceiptDateRequested</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesReceiptDateRequested</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainInventPhysical</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS22556</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainSalesFinancial</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesQty</ExtendedDataType>
			<Label>@SYS22380</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainSalesPhysical</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesQty</ExtendedDataType>
			<Label>@SYS22556</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailVariantId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailVariantId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesCategory</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesDeliverNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesQty</ExtendedDataType>
			<Label>@SYS17214</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CommissSalesGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesMarkup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesMarkup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesPrice</ExtendedDataType>
			<Label>@SYS11770</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesQty</ExtendedDataType>
			<Label>@SYS14578</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ShippingDateRequested</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesShippingDateRequested</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS2168</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StatProcId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatProcId</ExtendedDataType>
			<FeatureClass>IntrastatProcToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StatTriangularDeal</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTriangularDeal</ExtendedDataType>
			<FeatureClass>IntrastatTriangularDealToggle</FeatureClass>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StockedProduct</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeStockedProduct</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SuframaDiscount_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>SalesLinePercent</ExtendedDataType>
			<Label>@GLS1333</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SystemEntryChangePolicy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceDiscPolicySystem</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SystemEntrySource</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>PriceDiscSystemSource</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxAutoGenerated</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAutoGenerated</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransactionCodeId</ExtendedDataType>
			<FeatureClass>IntrastatTransactionCodeToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Transferred2Forecast</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS84554</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Transferred2ItemReq</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS99297</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Transferred2Journal</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS25348</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Transport</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransport</ExtendedDataType>
			<FeatureClass>IntrastatTransportToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UnderDeliveryPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesUnderDeliveryPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>IntrastatCommodity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatCommodityId</ExtendedDataType>
			<FeatureClass>IntrastatCommodityToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigCountryRegionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemOrigCountryRegionId</ExtendedDataType>
			<FeatureClass>ItemOrigCountryRegionIdToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS27196</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigStateId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemOrigStateId</ExtendedDataType>
			<FeatureClass>ItemOrigStateIdToggle</FeatureClass>
			<Label>@SYS73785</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LineCreationSequenceNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesQuoteLineCreationSequenceNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipDeliveryScheduleUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipAssignInventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupSkipCreateMarkup</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AssessableValue_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CompanyLocation_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>LogisticsLocationRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Consignment_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomerLocation_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomerTaxInformation_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomsTariffCodeTable_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DirectSettlement_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<EnumType>DirectSettlement_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExciseRecordType_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<EnumType>ExciseRecordType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DSA_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExciseTariffCodes_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExciseType_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<EnumType>ExciseType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Exempt_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExportOrder_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HSNCodeTable_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InclTax_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ITCCategory_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<EnumType>ITCCategory_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaximumRetailPrice_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>MaximumRetailPrice_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesTaxFormTypes_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>SalesTaxFormTypesRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ServiceAccountingCodeTable_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ServiceCodeTable_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxInventVATCommodityCode_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TCSGroup_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>TaxWithholdGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TDSGroup_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>TaxWithholdGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipDefaultingCostPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipDefaultingSalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>QuantityErrorCorrectionMethods</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideSalesTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntegrationOverrideSalesTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipPriceDiscCalc</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesPurchSkipPriceDiscCalc</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>QuotationLineCreationMethod</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SalesQuotationCreationMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsIntegration</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>TradeIntegrationType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SalesQuotationIntegrationCreationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>SalesQuotationIntegrationCreationType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>QuotationLineIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>QuotationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>QuotationType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>QuotationStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>QuotationTransTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>QuotationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjTransType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjectResourceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjectResource</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CFOPTable_BRIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CFOPTable_BR</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>QuotationLineCreationSequenceIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>QuotationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineCreationSequenceNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DeliveryPostalAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>QuotationLineGridIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>QuotationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CurrencyCodeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>MCRMarginAlertMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccountNum</MapField>
					<MapFieldTo>CustAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
					<MapFieldTo>LinePercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
					<MapFieldTo>SalesMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
					<MapFieldTo>SalesPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitId</MapField>
					<MapFieldTo>SalesUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitQty</MapField>
					<MapFieldTo>SalesQty</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PriceDiscLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccountNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Currency</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Included</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDeliveryType</MapField>
					<MapFieldTo>LineDeliveryType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
					<MapFieldTo>LinePercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
					<MapFieldTo>SalesMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnDisc</MapField>
					<MapFieldTo>MultiLnDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnPercent</MapField>
					<MapFieldTo>MultiLnPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
					<MapFieldTo>SalesPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>SalesQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>QuotationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Unit</MapField>
					<MapFieldTo>SalesUnit</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PriceDiscResultFields</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DiscPercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
					<MapFieldTo>LinePercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ManualEntryChangePolicy</MapField>
					<MapFieldTo>ManualEntryChangepolicy</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
					<MapFieldTo>SalesMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLineDiscCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnDisc</MapField>
					<MapFieldTo>MultiLnDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnPercent</MapField>
					<MapFieldTo>MultiLnPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWQty</MapField>
					<MapFieldTo>PdsCWQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
					<MapFieldTo>SalesPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RecieptDeliveryDate</MapField>
					<MapFieldTo>ReceiptDateRequested</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>QuotationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
					<MapFieldTo>SalesQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchUnit</MapField>
					<MapFieldTo>SalesUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateConfirmed</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateRequested</MapField>
					<MapFieldTo>ShippingDateRequested</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SystemEntryChangePolicy</MapField>
					<MapFieldTo>SystemEntryChangePolicy</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SystemEntrySource</MapField>
					<MapFieldTo>SystemEntrySource</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesDeliveryDateControlMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ATPApplyDemandTimeFence</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPApplySupplyTimeFence</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPBackwardDemandTimeFence</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPBackwardSupplyTimeFence</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPInclPlannedOrders</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPTimeFence</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustAccount</MapField>
					<MapFieldTo>CustAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryDateControlType</MapField>
					<MapFieldTo>DeliveryDateControlType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DlvMode</MapField>
					<MapFieldTo>DlvMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Location</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReceiptDateConfirmed</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReceiptDateRequested</MapField>
					<MapFieldTo>ReceiptDateRequested</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierAccountCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierDlvType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierID</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateConfirmed</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateRequested</MapField>
					<MapFieldTo>ShippingDateRequested</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SkipUpdate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Category</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConfirmedDlv</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExternalItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemBOMId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemRouteId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRCustVendAC</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCROrderLine2PriceHistoryRef</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRReceiptDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRShipDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSCalculationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWSalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchSalesUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>QtyOrdered</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RequiredDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RetailVariantId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>QuotationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StockedProduct</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SystemEntrySource</MapField>
					<MapFieldTo>SystemEntrySource</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitOfMeasure</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SkipPriceDiscCalcInBulkCreation</MapField>
					<MapFieldTo>SkipPriceDiscCalc</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TradePostalAddress</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DeliveryName</MapField>
					<MapFieldTo>DeliveryName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>RetailOrderLineMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustAccount</MapField>
					<MapFieldTo>CustAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustomerRef</MapField>
					<MapFieldTo>CustomerRef</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryName</MapField>
					<MapFieldTo>DeliveryName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DlvMode</MapField>
					<MapFieldTo>DlvMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExternalItemId</MapField>
					<MapFieldTo>ExternalItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Id</MapField>
					<MapFieldTo>QuotationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
					<MapFieldTo>LinePercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReceiptDateRequested</MapField>
					<MapFieldTo>ReceiptDateRequested</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RetailVariant</MapField>
					<MapFieldTo>RetailVariantId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesGroup</MapField>
					<MapFieldTo>SalesGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesMarkup</MapField>
					<MapFieldTo>SalesMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesOrderCreationMethod</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPrice</MapField>
					<MapFieldTo>SalesPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesQty</MapField>
					<MapFieldTo>SalesQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesUnit</MapField>
					<MapFieldTo>SalesUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateRequested</MapField>
					<MapFieldTo>ShippingDateRequested</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CategoryId</MapField>
					<MapFieldTo>SalesCategory</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IntrastatCommodity</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
					<MapFieldTo>SalesQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchUnit</MapField>
					<MapFieldTo>SalesUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OverrideSalesTax</MapField>
					<MapFieldTo>OverrideSalesTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>WarrantySalesLineMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CustAccount</MapField>
					<MapFieldTo>CustAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesId</MapField>
					<MapFieldTo>QuotationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesLineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BarcodeSetup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BarcodeSetup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BarCodeType</Name>
					<Field>BarCodeType</Field>
					<RelatedField>barcodeSetupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BarcodeSetupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOMCalcTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOMCalcTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PriceCalcId</Name>
					<Field>PriceCalcId</Field>
					<RelatedField>PriceCalcId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOMTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOMTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemBOMId</Name>
					<Field>ItemBOMId</Field>
					<RelatedField>BOMId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CFOPTable_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CFOPTable_BR</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CFOPTable_BR</Name>
					<Field>CFOPTable_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CommissionSalesGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CommissionSalesGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesGroup</Name>
					<Field>SalesGroup</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Common</Name>
			<RelatedTable>Common</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AddressRefRecId</Name>
					<Field>AddressRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AddressRefTableId</Name>
					<Field>AddressRefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CompanyDataArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CompanyDataArea</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Company</Name>
					<SourceEDT>SelectableDataArea</SourceEDT>
					<Field>Company</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>SelectableDataArea</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CountyOrigDest</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCounty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CountyOrigDest</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountyOrigDest</Name>
					<Field>CountyOrigDest</Field>
					<RelatedField>CountyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DefaultDimension_SalesQoutationLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DeliveryPostalAddress_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsPostalAddress</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsPostalAddress_SalesQuotationLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DlvMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvMode</Name>
					<Field>DlvMode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DlvTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvTerm</Name>
					<Field>DlvTerm</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatPort</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatPort</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Port</Name>
					<Field>Port</Field>
					<RelatedField>PortId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PortIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatStatProc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatStatProc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StatProcId</Name>
					<Field>StatProcId</Field>
					<RelatedField>StatProcId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatProcIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransactionCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatTransactionCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransactionCode</Name>
					<Field>TransactionCode</Field>
					<RelatedField>TransactionCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransportMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatTransportMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Transport</Name>
					<Field>Transport</Field>
					<RelatedField>TransPortCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransPortCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventItemBarcode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventItemBarcode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BarCode</Name>
					<Field>BarCode</Field>
					<RelatedField>itemBarCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventSum</Name>
			<EntityRelationshipRole>@SYS7092</EntityRelationshipRole>
			<RelatedTable>InventSum</RelatedTable>
			<RelatedTableRole>InventSum</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>SalesQuotationLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransOrigin</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_SalesQuotationLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MCROrderLine2PriceHistoryRef</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>MCROrderLine2PriceHistoryRef</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCROrderLine2PriceHistoryRef</Name>
					<Field>MCROrderLine2PriceHistoryRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>OffsetAssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OffsetAssetTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>OffsetAccountType</Name>
					<Field>OffsetAccountType</Field>
					<ValueStr>LedgerJournalACType::FixedAssets</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsetCompany</Name>
					<Field>OffsetCompany</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>OffsetBank</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OffsetBank</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>OffsetAccountType</Name>
					<Field>OffsetAccountType</Field>
					<ValueStr>LedgerJournalACType::Bank</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsetCompany</Name>
					<Field>OffsetCompany</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OffsetCompanyDataArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OffsetCompanyDataArea</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsetCompany</Name>
					<SourceEDT>SelectableDataArea</SourceEDT>
					<Field>OffsetCompany</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>SelectableDataArea</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>OffsetCustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OffsetCustTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>OffsetAccountType</Name>
					<Field>OffsetAccountType</Field>
					<ValueStr>LedgerJournalACType::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsetCompany</Name>
					<Field>OffsetCompany</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OffsetLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_1_SalesQuotationLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsetLedgerDimension</Name>
					<Field>OffsetLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>OffsetProject</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OffsetProject</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>OffsetAccountType</Name>
					<Field>OffsetAccountType</Field>
					<ValueStr>LedgerJournalACType::Project</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>OffsetVendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OffsetVendTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>OffsetAccountType</Name>
					<Field>OffsetAccountType</Field>
					<ValueStr>LedgerJournalACType::Vend</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsetCompany</Name>
					<Field>OffsetCompany</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PackingUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PackingUnit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PackingUnit</Name>
					<Field>PackingUnit</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PriceDiscChangePolicyRecId1</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PriceDiscChangePolicy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PriceDiscChangePolicy</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PriceDiscChangePolicy_SalesQuotationLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SystemEntryChangePolicy</Name>
					<Field>SystemEntryChangePolicy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PriceDiscChangePolicyRecId2</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PriceDiscChangePolicy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PriceDiscChangePolicy_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PriceDiscChangePolicy_1_SalesQuotationLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ManualEntryChangepolicy</Name>
					<Field>ManualEntryChangepolicy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjCategoryCost</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategoryCost</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CategoryType_Extern</Name>
					<RelatedField>CategoryType</RelatedField>
					<ValueStr>ProjCategoryType::Cost</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ProjTransType</Name>
					<Field>ProjTransType</Field>
					<ValueStr>QuotationProjTransType::Expense</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjCategoryFee</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategoryFee</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CategoryType_Extern</Name>
					<RelatedField>CategoryType</RelatedField>
					<ValueStr>ProjCategoryType::Revenue</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ProjTransType</Name>
					<Field>ProjTransType</Field>
					<ValueStr>QuotationProjTransType::Fee</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjCategoryHour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategoryHour</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CategoryType_Extern</Name>
					<RelatedField>CategoryType</RelatedField>
					<ValueStr>ProjCategoryType::Hour</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ProjTransType</Name>
					<Field>ProjTransType</Field>
					<ValueStr>QuotationProjTransType::Hour</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjCategoryItem</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategoryItem</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CategoryType_Extern</Name>
					<RelatedField>CategoryType</RelatedField>
					<ValueStr>ProjCategoryType::Item</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ProjTransType</Name>
					<Field>ProjTransType</Field>
					<ValueStr>QuotationProjTransType::Item</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjectResource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ResourceView</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjectResource</Name>
					<Field>ProjectResource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LinePropertyId</Name>
					<Field>LinePropertyId</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PSAActivityEstimates</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>PSAActivityEstimates</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSARefRecId</Name>
					<Field>PSARefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailVariantId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDimCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailVariantId</Name>
					<SourceEDT>RetailVariantId</SourceEDT>
					<Field>RetailVariantId</Field>
					<RelatedField>RetailVariantId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RouteTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RouteTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemRouteId</Name>
					<Field>ItemRouteId</Field>
					<RelatedField>RouteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResCategory_SalesQuotationLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesCategory</Name>
					<Field>SalesCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesQuotationTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesQuotationTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>QuotationId</Name>
					<Field>QuotationId</Field>
					<RelatedField>QuotationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesUnit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesUnit</Name>
					<Field>SalesUnit</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjActivity</Name>
					<SourceEDT>smmActivityNumber</SourceEDT>
					<Field>ProjActivity</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OrigCountryRegion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressCountryRegion</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsAddressCountryRegion_SalesQuotationline</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigCountryRegionId</Name>
					<Field>OrigCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OrigState</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressState</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressState</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsAddressState_SalesQuotationline</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigCountryRegionId</Name>
					<Field>OrigCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigStateId</Name>
					<Field>OrigStateId</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionStateIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatCommodity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IntrastatCommodity</Name>
					<Field>IntrastatCommodity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsPostalAddressBaseEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddressBaseEntity</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>AddressRecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>