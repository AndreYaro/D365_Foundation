<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQScoring</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchRFQScoring extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
        public void update()
    {
        PurchRFQScore        delta;

        delta = this.Score - this.orig().Score;
        super();

        if (delta)
        {
            PurchRFQReplyTable::updateTotalScore(this.RFQReply,delta);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean                         ret =   super();
        PurchRFQScoringRFQCaseCriteria  purchRFQScoringRFQCaseCriteria;

        // Check score value is within the range values for the criteria
        if (ret                             &&
            this.Score !=0                  &&
            this.Score != this.orig().Score)
        {
            purchRFQScoringRFQCaseCriteria  =   PurchRFQScoringRFQCaseCriteria::find(this.ScoringRFQCaseCriteria);

            if (!purchRFQScoringRFQCaseCriteria.validateScore(this.Score))
            {
                ret = checkFailed(strFmt("@SYS4009535", purchRFQScoringRFQCaseCriteria.RangeFrom, purchRFQScoringRFQCaseCriteria.RangeTo));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CheckScoringIsDone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if scoring has been done on the <c>PurchRFQReplyLine</c> records for a given <c>PurchRFQCaseRecId</c>.
    /// </summary>
    /// <param name="_purchRFQCaseRecId">
    ///    A <c>PurchRFQCaseRecId</c> value for which the <c>PurchRFQReplyLine</c> records needs to be checked for TotalScore.
    /// </param>
    /// <returns>
    /// true if TotalScore exists for atleats one of the  <c>PurchRFQReplyLine</c> records; otherwise, false.
    /// </returns>
    public static boolean CheckScoringIsDone(PurchRFQCaseRecId _purchRFQCaseRecId)
    {
        PurchRFQScoring     purchRFQScoring;
        PurchRFQReplyTable  purchRFQReplyTable;
        PurchRFQTable       purchRFQTable;
        PurchRFQCaseTable   purchRFQCaseTable;

        if (_purchRFQCaseRecId)
        {
            select firstOnly RecId from purchRFQScoring
                exists join purchRFQReplyTable
                    where purchRFQReplyTable.RecId == purchRFQScoring.RFQReply
                exists join purchRFQTable
                    where purchRFQTable.RFQId == purchRFQReplyTable.RFQId
                exists join purchRFQCaseTable
                    where purchRFQCaseTable.RFQCaseId == purchRFQTable.RFQCaseId
                        && purchRFQCaseTable.RecId == _purchRFQCaseRecId
                        && purchRFQScoring.Score != 0;
        }

        return (purchRFQScoring.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRFQScoringForNewCritera</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the <c>PurchRFQScoring</c> records for all vendors for the given <c>PurchRFQScoringRFQCaseCriteria</c>.
    /// </summary>
    /// <param name="_purchRFQCaseId">
    ///    A <c>PurchRFQCaseId</c> value.
    /// </param>
    /// <param name="_purchRFQCaseCriteriaRecId">
    ///    A <c>PurchRFQScoringRFQCaseCriteriaRecId</c> value.
    /// </param>
    /// <returns>
    ///    true if the creation succeeds; otherwise false.
    /// </returns>
    static public boolean createRFQScoringForNewCritera(PurchRFQCaseId _purchRFQCaseId, PurchRFQScoringRFQCaseCriteriaRecId _purchRFQCaseCriteriaRecId)
    {
        #PurchRFQScoring
        PurchRFQScoring                 purchRFQScoring;
        PurchRFQTable                   purchRFQTable;
        PurchRFQReplyTable              purchRFQReplyTable;
        boolean                         isCreated;
        int                             defaultScore = #DefaultScore;

        if (_purchRFQCaseId && _purchRFQCaseCriteriaRecId && PurchRFQTable::findRFQCaseId(_purchRFQCaseId).RecId)
        {
            insert_recordset purchRFQScoring (RFQReply, ScoringRFQCaseCriteria, Score)
                select RecId, _purchRFQCaseCriteriaRecId, defaultScore
                    from purchRFQReplyTable
                    join purchRFQTable
                        where purchRFQTable.RFQCaseId == _purchRFQCaseId
                              && purchRFQReplyTable.RFQId ==  purchRFQTable.RFQId;

            isCreated = true;
        }

        return isCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRFQScoringForRFQReply</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the <c>PurchRFQScoring</c> records for the <c>PurchRFQReplyTable</c>.
    /// </summary>
    /// <param name="_purchRFQReplyTableRecId">
    ///    A <c>PurchRFQReplyTableRecId</c> value.
    /// </param>
    /// <returns>
    ///    true if the creation succeeds; otherwise false.
    /// </returns>
    static public boolean createRFQScoringForRFQReply(PurchRFQReplyTableRecId _purchRFQReplyTableRecId)
    {
        #PurchRFQScoring
        PurchRFQCaseTable               purchRFQCaseTable;
        PurchRFQTable                   purchRFQTable;
        PurchRFQReplyTable              purchRFQReplyTable;
        PurchRFQScoring                 purchRFQScoring;
        PurchRFQScoringRFQCaseCriteria  purchRFQScoringRFQCaseCriteria;
        boolean                         isCreated;
        int                             defaultScore = #DefaultScore;

        if (_purchRFQReplyTableRecId)
        {
            delete_from purchRFQScoring
                where purchRFQScoring.RFQReply == _purchRFQReplyTableRecId;

            insert_recordset purchRFQScoring (RFQReply, ScoringRFQCaseCriteria, Score)
                select _purchRFQReplyTableRecId, RecId, defaultScore
                    from purchRFQScoringRFQCaseCriteria
                        join purchRFQReplyTable
                            where purchRFQReplyTable.RecId == _purchRFQReplyTableRecId
                        join purchRFQTable
                            where purchRFQTable.RFQId == purchRFQReplyTable.RFQId
                        join purchRFQCaseTable
                            where purchRFQCaseTable.RFQCaseId == purchRFQTable.RFQCaseId &&
                            purchRFQScoringRFQCaseCriteria.RFQCaseRecId == purchRFQCaseTable.RecId;

            isCreated = true;
        }

        return isCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>PurchRFQScoringa</c> record.
    /// </summary>
    /// <param name="_rfqRecId">
    ///    A <c>PurchRFQTableRecId</c> value.
    /// </param>
    /// <param name="_criteriaRecId">
    ///    A <c>PurchRFQScoringRFQCaseCriteriaRecId</c> value.
    /// </param>
    /// <param name="_forUpdate">
    ///    A boolean value that determines whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    ///    A <c>PurchRFQScoring</c> record.
    /// </returns>
    static public PurchRFQScoring find(PurchRFQTableRecId _rfqRecId, PurchRFQScoringRFQCaseCriteriaRecId _criteriaRecId, boolean  _forUpdate = false)
    {
        PurchRFQScoring   purchRFQScoring;

        if (_rfqRecId && _criteriaRecId)
        {
            purchRFQScoring.selectForUpdate(_forUpdate);

            select firstonly purchRFQScoring
                where purchRFQScoring.RFQReply == _rfqRecId && purchRFQScoring.ScoringRFQCaseCriteria == _criteriaRecId ;
        }

        return purchRFQScoring;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@EPR4460135</DeveloperDocumentation>
	<Label>@EPR4460134</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>Score</TitleField1>
	<TitleField2>ScoringRFQCaseCriteria</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>PurchRFQIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Score</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RFQReply</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ScoringRFQCaseCriteria</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Score</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RFQReplyScore</Name>
			<Label>@EPR4460134</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Score</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RFQReply</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchRFQReplyTableRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Score</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchRFQScore</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ScoringRFQCaseCriteria</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchRFQScoringRFQCaseCriteriaRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PurchRFQIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RFQReply</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ScoringRFQCaseCriteria</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Score</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchRFQReplyTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchRFQReplyTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RFQReply</Name>
					<SourceEDT>PurchRFQReplyTableRecId</SourceEDT>
					<Field>RFQReply</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchRFQScoringRFQCaseCriteria</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PurchRFQScoringRFQCaseCriteria</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ScoringRFQCaseCriteria</Name>
					<Field>ScoringRFQCaseCriteria</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>