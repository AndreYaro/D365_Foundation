<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceInfoTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendInvoiceInfoTable extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accDistributionTemplateRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the <c>AccountingDistributionTemplateRecId</c> value that is associated with the invoice.
    /// </summary>
    /// <returns>
    /// The <c>AccountingDistributionTemplateRecId</c> value that is associated with the invoice.
    /// </returns>
    public AccountingDistributionTemplateRecId accDistributionTemplateRecId()
    {
        if (this.isNonPO())
        {
            return this.AccountingDistributionTemplate;
        }
        else
        {
            return this.purchTable().AccountingDistributionTemplate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustDueDateOnAddressChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the due date on a <c>VendInvoiceInfoTable</c> record to a valid business day if a
    /// third-party rule exists.
    /// </summary>
    /// <remarks>
    /// This method is run when the address for a document changes.
    /// </remarks>
    public void adjustDueDateOnAddressChange()
    {
        PaymTerm paymTerm;
        PaymCalendarSourceVendInvoiceInfo paymCalendarSourceVendInvoiceInfo;
        PaymCalendarProcessor paymCalendarProcessor;

        paymTerm = PaymTerm::find(this.Payment);

        if ((paymTerm.VendorUpdateDueDate != PaymentDueDateUpdatePolicy::NoUpdate)
            && PaymCalendarRule::existActiveRuleForRuleType(
                PaymCalendarModuleType::Vendor,
                PaymCalendarRuleType::ThirdPartyLocation))
        {
            paymCalendarSourceVendInvoiceInfo = PaymCalendarSourceVendInvoiceInfo::newCalendarSource(this);
            paymCalendarProcessor = PaymCalendarProcessor::construct();

            this.FixedDueDate = paymCalendarProcessor.adjustDate(
                this.FixedDueDate,
                paymTerm.VendorUpdateDueDate,
                paymCalendarSourceVendInvoiceInfo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustDueDateOnPaymentMethodChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the due date on a <c>VendInvoiceInfoTable</c> record to a valid business day if a calendar
    /// rule restricted to the payment method exists.
    /// </summary>
    /// <remarks>
    /// This method is run when the payment method for a document changes.
    /// </remarks>
    public void adjustDueDateOnPaymentMethodChange()
    {
        PaymTerm paymTerm;
        PaymCalendarSourceVendInvoiceInfo paymCalendarSourceVendInvoiceInfo;
        PaymCalendarProcessor paymCalendarProcessor;

        // perform the payment calendar work only for the required countries
        paymTerm = PaymTerm::find(this.Payment);

        if ((paymTerm.VendorUpdateDueDate != PaymentDueDateUpdatePolicy::NoUpdate)
            && PaymCalendarCriteriaRule::existForPaymMode(PaymCalendarModuleType::Vendor, curExt()))
        {
            paymCalendarSourceVendInvoiceInfo = PaymCalendarSourceVendInvoiceInfo::newCalendarSource(this);
            paymCalendarProcessor = PaymCalendarProcessor::construct();

            this.FixedDueDate = paymCalendarProcessor.adjustDate(
                this.FixedDueDate,
                paymTerm.VendorUpdateDueDate,
                paymCalendarSourceVendInvoiceInfo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>approveVariance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Approves the price and quantity variances for the invoice represented by the current
    /// <c>VendInvoiceInfoTable</c> record.
    /// </summary>
    /// <param name="_approve">
    /// A Boolean value that specifies whether the variances are approved.
    /// </param>
    /// <param name="_save">
    /// A Boolean value that specifies whether the document should be saved.
    /// </param>
    /// <param name="_isQtyUpdated">
    /// A Boolean value that specifies whether a quantity related field has been updated or not.
    /// </param>
    /// <remarks>
    /// If the <paramref name="_approve" /> parameter is true, the approval information is added to the
    /// <c>VendInvoiceInfoTable</c> table buffer.If the <paramref name="_approve" /> parameter is false,
    /// the approval information is cleared in the <c>VendInvoiceInfoTable</c> table buffer.The approval
    /// information consists of the following fields: the <c>VarianceApproved</c>,
    /// <c>VarianceApprovedBy</c>, and <c>VarianceApprovedDateTime</c> fields.Additionaly
    /// <c>VarianceComment</c> field can be set at the time of approval, before or after call to this
    /// method. The <c>VarianceComment</c> field will be cleared when this method is called by using the
    /// <paramref name="_approved" /> parameter set to false.
    /// </remarks>
    public void approveVariance(boolean _approve, boolean _save = false, boolean _isQtyUpdated = true)
    {
        boolean tableChange;

        if (_approve)
        {
            this.VarianceApproved = NoYes::Yes;

            if (VendParameters::find().editAutomaticHeaderMatching())
            {
                this.LastMatchVariance = this.checkIfMatchedStatus();
            }
            this.VarianceApprover = HcmWorker::userId2Worker(curUserId());
            this.VarianceApprovedDateTime = DateTimeUtil::utcNow(); // gets the server timestamp
            tableChange = true;
        }
        else if (this.VarianceApproved == NoYes::Yes) // un-approve only if approved
        {
            boolean isCalledFromInvoicePosting = false; //check is it calling from VendEditInvoice form
            
            if (FormDataUtil::isFormDataSource(this))
            {
                if (formDataSourceHasMethod(FormDataUtil::getFormDataSource(this), identifierStr(parmIsInvoicePosting)))
                {
                    Object formDataSource = FormDataUtil::getFormDataSource(this);
                    isCalledFromInvoicePosting = formDataSource.parmIsInvoicePosting();
                }
            }
            
            if (!isCalledFromInvoicePosting || (isCalledFromInvoicePosting & this.determineUnapproveVariance()))
            {
                this.clearVarianceApproved();

                // If the quantity isn't updated, we needn't update the invoice matching values
                if (_isQtyUpdated)
                {
                    VendInvoiceMatching::updateExpectedValues(this);
                }
                VendInvoiceMatchingLine::updateExpectedValues(this);
                VendInvoiceInfoMarkupMatchingTolerance::updateMiscChargeTolerance(this.ParmId, this.TableRefId);
                VendInvoiceInfoSubMarkupMatchingTrans::updateExpectedValues(this);

                TaxUncommitted::deleteForDocumentHeader(this.TableId, this.RecId);

                if (TaxWithholdingGlobalFeature::isCalcWHTInInvoiceEnabled())
                {
                    TaxWithholdUncommitted::deleteForDocumentHeader(this.TableId, this.RecId);
                }

                tableChange = true;
            }
        }
        else
        {
            // Invoice already unapproved and doesn't need updating; reset expected amounts
            // If the quantity isn't updated, we needn't update the invoice matching values
            if (_isQtyUpdated)
            {
                VendInvoiceMatching::updateExpectedValues(this);
            }
            VendInvoiceInfoSubMarkupMatchingTrans::updateExpectedValues(this);
        }

        if (_save && tableChange)
        {
            // Save primarily needed to force update of the table as the UI does not resync the change to the approval field.
            if (this.RecId != 0)
            {
                this.doUpdate();
            }
            else
            {
                this.doInsert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfVendInvoiceIsGeneratedFormCustProjInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if vendor invoice is automatically generated from cust invoice
    /// </summary>
    /// <returns>
    /// true if the vendor lines auto created from cust invoice;
    /// otherwise,
    /// return false
    /// </returns>
    public boolean checkIfVendInvoiceIsGeneratedFormCustProjInvoice()
    {
        CustInvoiceTable custInvoiceTable;
        LedgerInterCompany ledgerInterCompany;
        VendInvoiceInfoTable vendInvoiceInfoTable;
        boolean isGenFromCustInvoice;
        str deliveryName = this.DeliveryName;
        if (!deliveryName)
        {
            select firstonly DeliveryName from vendInvoiceInfoTable
                where vendInvoiceInfoTable.RecId == this.RecId;
            deliveryName = vendInvoiceInfoTable.DeliveryName;
        }
        select firstonly OriginatingCompany from ledgerInterCompany
                where ledgerInterCompany.DestinationCompany == curExt();
        if(ledgerInterCompany.OriginatingCompany)
        {
            changecompany(ledgerInterCompany.OriginatingCompany)
            {
                select firstonly RecId from custInvoiceTable
                        where custInvoiceTable.InvoiceId == this.Num
                           && custInvoiceTable.Name == deliveryName
                           && custInvoiceTable.ProjIntercompany == ledgerInterCompany.DestinationCompany;
            }
        }
        return custInvoiceTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineUnapproveVariance</Name>
				<Source><![CDATA[
    private boolean determineUnapproveVariance()
    {
        boolean unApproveVariance = false;
        VendParameters vendParameters = VendParameters::find();
        PurchParameters purchParameters = PurchParameters::find();
        
        if (vendParameters.UseInvoiceMatching
            && (vendParameters.MatchingPolicy == PurchMatchingPolicyOption::TwoWayMatch || vendParameters.MatchingPolicy == PurchMatchingPolicyOption::ThreeWayMatch)
            && (vendParameters.UseExtendedPriceMatching == ExtendedPriceMatching::Amount || vendParameters.UseExtendedPriceMatching == ExtendedPriceMatching::PercentAndAmount)
            && vendParameters.ExtendedPriceAmountCurrencyType == ExtendedPriceAmountCurrencyType::AccountingCurrency 
            && (vendParameters.UseDocumentDate || (!vendParameters.UseDocumentDate && purchParameters.DateOfExchRate_W != DateOfExchRate_W::DocumentDate))
            && (this.ExchRate != this.orig().ExchRate)
            && this.existLineForMatchingPolicy()
            )
        {
            unApproveVariance = true;
        }
             
        return unApproveVariance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existLineForMatchingPolicy</Name>
				<Source><![CDATA[
    private boolean existLineForMatchingPolicy()
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        PurchLine purchLine;

        select firstonly RecId from purchLine
            exists join RecId, TableRefId, ParmId from vendInvoiceInfoLine
                where purchLine.RecId == vendInvoiceInfoLine.PurchLineRecId
                    && purchLine.PurchId == vendInvoiceInfoLine.OrigPurchId
                    && vendInvoiceInfoLine.TableRefId == this.TableRefId
                    && (purchLine.MatchingPolicy == PurchMatchingPolicyOption::TwoWayMatch || purchLine.MatchingPolicy == PurchMatchingPolicyOption::ThreeWayMatch);

        return purchLine.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>areAllLinesReadyToPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if all the lines are approved, and if the invoice is ready to be posted.
    /// </summary>
    /// <returns>true if all the lines in the invoice are approved and ready to be posted; otherwise, false.</returns>
    internal boolean areAllLinesReadyToPost()
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;

        // 'Draft' is checked since there might be no associated line workflow.
        select firstonly RecId from vendInvoiceInfoLine
            where vendInvoiceInfoLine.TableRefId == this.TableRefId
                && vendInvoiceInfoLine.RequestStatus != VendInvoiceRequestStatus::Approved
                && vendInvoiceInfoLine.RequestStatus != VendInvoiceRequestStatus::Draft;

        return (vendInvoiceInfoLine.RecId == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHeaderReadyForPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the invoice header and the lines, if any, is ready for post.
    /// </summary>
    /// <returns>true if the invoice is ready to be posted; otherwise, false.</returns>
    internal boolean isHeaderReadyForPost()
    {
        return (this.RequestStatus == VendInvoiceRequestStatus::InReview || this.RequestStatus == VendInvoiceRequestStatus::Approved)
            && this.areAllLinesReadyToPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    public boolean canSubmitToWorkflow(str workflowType = '')
    {
        return this.RequestStatus == VendInvoiceRequestStatus::Draft
            && this.RecId != 0
            && !VendInvoiceAutomationStateManagement::isIncludedInAutomatedProcessing(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the <c>CashDiscCode</c> value that is associated with the invoice.
    /// </summary>
    /// <returns>
    /// The <c>CashDiscCode</c> value that is associated with the invoice.
    /// </returns>
    public VendCashDiscCode cashDiscCode()
    {
        if (this.isNonPO() || this.isAdvance())
        {
            return this.CashDiscCode;
        }
        else
        {
            return PurchTable::find(this.PurchId).CashDisc;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAccountingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the accounting date of the current <c>VendInvoiceInfoTable</c> record.
    /// </summary>
    /// <param name="_accountingDate">
    /// The accounting date to be verified.
    /// </param>
    /// <returns>
    /// true if the date is valid; otherwise, false.
    /// </returns>
    public boolean checkAccountingDate(date _accountingDate = this.updateDate())
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        PurchTable purchTable;
        PurchLine purchLine;
        AccountingEvent accountingEvent;
        SubledgerJournalEntry subledgerJournalEntry;
        SubledgerJournalAccountEntry subledgerJournalAccountEntry;
        boolean checkDate;
        SourceDocumentHeaderRecId previousSourceDocumentHeader;

        // For each PO on this invoice, make sure the accounting date is in the same fiscal year
        while select OrigPurchId from vendInvoiceInfoLine
        order by OrigPurchId
        where vendInvoiceInfoLine.ParmId == this.ParmId &&
              vendInvoiceInfoLine.TableRefId == this.TableRefId
            join PurchId, ProjId, SourceDocumentLine from purchLine
                where purchLine.RecId == vendInvoiceInfoLine.PurchLineRecId
            join SourceDocumentHeader from purchTable
                where purchTable.PurchId == purchLine.PurchId
        {
            // Check if the PO has been encumbered (has a sub ledger journal account entry) or the PO line has a budget check result
            if (BudgetSourceSourceDocumentLine::findBudgetCheckResult(purchLine.SourceDocumentLine, true) != BudgetCheckResult::NoCheck)
            {
                checkDate = true;
            }
            else if (previousSourceDocumentHeader != purchTable.SourceDocumentHeader)
            {
                select RecId from accountingEvent
                    where accountingEvent.SourceDocumentHeader == purchTable.SourceDocumentHeader
                exists join subledgerJournalEntry
                    where subledgerJournalEntry.AccountingEvent == accountingEvent.RecId
                exists join subledgerJournalAccountEntry
                    where subledgerJournalAccountEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId;

                if (accountingEvent.RecId != 0)
                {
                    checkDate = true;
                }
            }

            if (checkDate)
            {
                checkDate = false;

                // Get last accounting event date for PO & compare to the invoice date
                accountingEvent = AccountingEvent::getLastEvent(purchTable.SourceDocumentHeader);

                if (accountingEvent.RecId != 0 &&
                    !FiscalCalendars::areDatesInSameFiscalYear(CompanyInfoHelper::fiscalCalendarRecId(), accountingEvent.AccountingDate, _accountingDate))
                {
                    // BudgetCheckResult may have been set by project and date check is not required.
                    if (purchLine.ProjId == '' && Ledger::isLedgerBudgetControlEnabled())
                    {
                        return false;
                    }
                }
            }

            previousSourceDocumentHeader = purchTable.SourceDocumentHeader;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAgreement_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if agreement suitable for current invoice
    /// </summary>
    /// <returns>
    /// True if agreement suitable
    /// </returns>
    public boolean checkAgreement_RU()
    {
        PurchAgreementHeader purchAgreementHeader;
        VendInvoiceInfoTable_RU vendInvoiceInfoTable_RU = this.vendInvoiceInfoTable_RU();
        boolean ok = true;

        if (vendInvoiceInfoTable_RU.AgreementHeaderExt_RU)
        {
            purchAgreementHeader = PurchAgreementHeaderExt_RU::purchAgreementHeader(vendInvoiceInfoTable_RU.AgreementHeaderExt_RU);

            if (!purchAgreementHeader.canReleaseAgreement(this.TransDate))
            {
                ok = checkFailed("@SYS103075");
            }

            if (purchAgreementHeader.VendAccount != this.OrderAccount)
            {
                ok = checkFailed("@SYS334899");
            }

            if (ok && this.InvoiceAccount && purchAgreementHeader.purchAgreementHeaderDefault().VendorInvoiceAccount != this.InvoiceAccount)
            {
                ok = checkFailed("@SYS334899");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreditCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for positive credit correction invoices and asks the user to confirm.
    /// </summary>
    /// <returns>
    /// true if the invoice can be posted; otherwise, false.
    /// </returns>
    public boolean checkCreditCorrection()
    {
        if (this.creditCorrection() && !this.isCreditNote())
        {
            return Box::confirm("@AccountsPayable:CheckCreditCorrection");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCurrencyCode</Name>
				<Source><![CDATA[
    void checkCurrencyCode()
    {
        VendInvoiceInfoSubTable subTable;

        if (this)
        {
            if (this.CurrencyCode != this.orig().CurrencyCode)
            {
                if (VendInvoiceInfoLine::existDifferentCurrency(this.ParmId, this.TableRefId, this.CurrencyCode))
                {
                    warning("@SYS341260");

                    this.CurrencyCode = this.orig().CurrencyCode;

                    return;
                }

                // Check misc charges on subTable
                while select TableId, RecId from subTable
                    where subTable.ParmId == this.ParmId
                       && subTable.TableRefId == this.TableRefId
                {
                    if (MarkupTrans::existDifferentCurrency(subTable.TableId, subTable.RecId, this.CurrencyCode))
                    {
                        warning("@SYS24528");

                        this.CurrencyCode = this.orig().CurrencyCode;

                        return;
                    }
                }

                // Check misc charges on header
                if (MarkupTrans::existDifferentCurrency(this.TableId, this.RecId, this.CurrencyCode))
                {
                    warning("@SYS24528");

                    this.CurrencyCode = this.orig().CurrencyCode;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfLines</Name>
				<Source><![CDATA[
    display ImageRes checkIfLines()
    {
        #resAppl
        // Invoices and Invoice Approval Journals with an error log should show the error warning icon
        if (this.Log != '')
        {
            return #ImageError;
        }

        if (VendInvoiceInfoLine::existTableRefId(this.ParmId, this.TableRefId))
        {
            return #ImageOK;
        }

        return #ImageWarning;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfHeaderHasAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the invoice header has any attachments or not.
    /// </summary>
    /// <returns>
    /// true if the invoice header has attachments; otherwise, false.
    /// </returns>
    public boolean checkIfHeaderHasAttachments()
    {
        return DocuRef::exist(this.DataAreaId, this.TableId, this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfLinesHaveAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether any lines on the current invoice have attachments.
    /// </summary>
    /// <returns>true if the invoice has lines with attachments; otherwise, false.</returns>
    public boolean checkIfLinesHaveAttachments()
    {
        VendInvoiceInfoLine localVendInvoiceInfoLine;
        DocuRef docuRef;

        select firstonly RecId from localVendInvoiceInfoLine
            where localVendInvoiceInfoLine.ParmId == this.ParmId &&
                  localVendInvoiceInfoLine.TableRefId == this.TableRefId
            exists join docuRef
                where docuRef.RefRecId == localVendInvoiceInfoLine.RecId &&
                      docuRef.RefTableId == localVendInvoiceInfoLine.TableId;

        return localVendInvoiceInfoLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfMatched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the invoice that is represented by the current <c>VendInvoiceInfoTable</c> record
    /// matches a related purchase order.
    /// </summary>
    /// <param name="_saveRecord">
    /// Indicates whether or not to save the LastMatchVariance value to the database.
    /// </param>
    /// <param name="_updateExpectedValues">
    /// Indicates whether or not we need to update the matched status.
    /// If automatic header matching is turned on, these values are updated regardless of this parameter value.
    /// </param>
    /// <returns>
    /// <c>LastMatchVarianceOptions::Warning</c> enumeration value when the invoice has either a quantity or price variance;
    /// otherwise, <c>LastMatchVarianceOptions::OK</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// <c>LastMatchVarianceOptions::Unknown</c> is returned when no invoice lines are associated to a purchase order.
    /// </remarks>
    public LastMatchVarianceOptions checkIfMatched(boolean _saveRecord = true, boolean _updateMatchedStatus = false)
    {
        boolean isMatched = true;
        Counter poLineCount, lineCount;
        LastMatchVarianceOptions lastMatchVarianceOptions;

        // Advance invoices do not require matching
        if (this.InvoiceType == PurchInvoiceType::VendorAdvance)
        {
            return LastMatchVarianceOptions::OK;
        }

        VendParameters vendParameters = VendParameters::find();

        if (!vendParameters.editUseInvoiceMatching())
        {
            lastMatchVarianceOptions = LastMatchVarianceOptions::Unknown;
        }
        else if (!_updateMatchedStatus && !vendParameters.editAutomaticHeaderMatching())
        {
            if (this.RequestStatus != VendInvoiceRequestStatus::Approved && this.RequestStatus != VendInvoiceRequestStatus::InReview)
            {
                lastMatchVarianceOptions = LastMatchVarianceOptions::Unknown;
            }
            else
            {
                lastMatchVarianceOptions = this.LastMatchVariance;
                _saveRecord = false;
            }
        }
        else
        {
            [isMatched, poLineCount, lineCount] = VendInvoiceInfoTable::checkIfMatchedOnServer(this);

            if ((poLineCount == 0) && (lineCount != 0))
            {
                lastMatchVarianceOptions = LastMatchVarianceOptions::OK;
            }
            else
            {
                if (isMatched)
                {
                    isMatched = this.checkIfMatchedTotals();
                }

                if (isMatched)
                {
                    [isMatched] = MarkupTmpTotals::totalInvoiceMatchingInfo(this, NoYes::Yes);
                }

                if (isMatched)
                {
                    lastMatchVarianceOptions = LastMatchVarianceOptions::OK;
                }
                else
                {
                    lastMatchVarianceOptions = LastMatchVarianceOptions::Warning;
                }
            }
        }

        if (_saveRecord)
        {
            if (this.LastMatchVariance != lastMatchVarianceOptions)
            {
                this.LastMatchVariance = lastMatchVarianceOptions;
                this.doUpdate();
                VendorInvoiceMatchedBusinessEvent::newFromVendInvoiceInfoTable(this).send();
            }
        }

        return lastMatchVarianceOptions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfMatchedStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the invoice represented by current <c>VendInvoiceInfoTable</c> table record
    /// matches the corresponding purchase order.
    /// </summary>
    /// <returns>
    /// The LastMatchVarianceOptions::Warning if the invoice has either a quantity or price variance; otherwise, LastMatchVarianceOptions::OK.
    /// </returns>
    /// <remarks>
    /// The check is positive (LastMatchVarianceOptions::OK) if every line of the invoice does not have price or quantity
    /// variances; otherwise the check is negative (LastMatchVarianceOptions::Warning).
    /// </remarks>
    public display LastMatchVarianceOptions checkIfMatchedStatus()
    {
        LastMatchVarianceOptions lastMatchVarianceOptions;

        if (VendParameters::find().editAutomaticHeaderMatching())
        {
            lastMatchVarianceOptions = this.checkIfMatched(false, true);
        }
        else
        {
            if (this.LastMatchVariance == LastMatchVarianceOptions::Unknown)
            {
                lastMatchVarianceOptions = this.checkIfMatched(false);
            }
            else
            {
                lastMatchVarianceOptions = this.LastMatchVariance;
            }
        }

        return lastMatchVarianceOptions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfMatchedTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine whether the difference between the expected totals and the invoice totals exceeds the
    /// allowed percentage.
    /// </summary>
    /// <param name="_purchTotals">
    /// An instance of the <c>PurchTotals</c> class if available.
    /// </param>
    /// <returns>
    /// true if all totals match; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A positive variance is considered unwanted.
    /// </remarks>
    public boolean checkIfMatchedTotals(PurchTotals _purchTotals = null)
    {
        VendInvoiceMatching vendInvoiceMatching;
        VendParameters vendParameters = VendParameters::find();

        if (vendParameters.UseTotalPriceMatching == NoYes::Yes)
        {
            vendInvoiceMatching = VendInvoiceMatching::find(this.ParmId, this.TableRefId);

            if (!vendInvoiceMatching && this.ParmId == '')
            {
                vendInvoiceMatching = VendInvoiceMatching::create(this, false);
            }

            if (vendInvoiceMatching.TableRefId != '')
            {
                // Get purchTotals, if not provided
                if (_purchTotals == null)
                {
                    _purchTotals = PurchTotals::newParmTable(this, PurchUpdate::ReceiveNow, this.ParmId, '', this.Ordering);
                    _purchTotals.calc();
                }

                if (FeatureStateProvider::isFeatureEnabled(VendInvoiceTotalsMatchingDetailFeature::instance()))
                {
                    return this.checkIfPriceVarianceAboveTolerance(_purchTotals, vendInvoiceMatching, vendParameters);
                }
                else
                {
                    // Balance
                    if (VendInvoiceMatching::isTotalPriceVarianceAboveTolerance(_purchTotals.purchBalance(),
                                                       vendInvoiceMatching.ExpectedBalance,
                                                       vendInvoiceMatching.TotalPriceTolerancePercentage))
                    {
                        return false;
                    }

                    // Total discount
                    if (VendInvoiceMatching::isTotalPriceVarianceAboveTolerance(_purchTotals.purchEndDisc(),
                                                       vendInvoiceMatching.ExpectedTotalDiscount,
                                                       vendInvoiceMatching.TotalPriceTolerancePercentage,
                                                       true))
                    {
                        return false;
                    }

                    // Misc charges (Markup)
                    if (VendInvoiceMatching::isTotalPriceVarianceAboveTolerance(_purchTotals.purchMarkup(),
                                                       vendInvoiceMatching.ExpectedMarkup,
                                                       vendInvoiceMatching.TotalPriceTolerancePercentage))
                    {
                        return false;
                    }

                    // Sales tax
                    if (VendInvoiceMatching::isTotalPriceVarianceAboveTolerance(_purchTotals.purchTaxTotal(),
                                                       vendInvoiceMatching.ExpectedSalesTax,
                                                       vendInvoiceMatching.TotalPriceTolerancePercentage))
                    {
                        return false;
                    }

                    // Round off doesn't get compared

                    // Document amount
                    if (VendInvoiceMatching::isTotalPriceVarianceAboveTolerance(_purchTotals.purchTotalAmount(),
                                                       vendInvoiceMatching.ExpectedDocumentAmount,
                                                       vendInvoiceMatching.TotalPriceTolerancePercentage))
                    {
                        return false;
                    }
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetWorkflowMatchStatusAfterMatchingPackingSlips</Name>
				<Source><![CDATA[
    internal void resetWorkflowMatchStatusAfterMatchingPackingSlips()
    {
        if (this.LastMatchVariance != LastMatchVarianceOptions::Unknown && this.isDocumentBeingProcessedInWorklow())
        {
            this.LastMatchVariance = LastMatchVarianceOptions::Unknown;
            this.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfWorkflowCompletedIcon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the invoice that is represented by the current <c>VendInvoiceInfoTable</c>
    /// record has completed the workflow process.
    /// </summary>
    /// <returns>
    /// The workflow setup icon if the vendor invoice has a task or approval operating over it; otherwise,
    /// a blank icon.
    /// </returns>
    public display ImageRes checkIfWorkflowCompletedIcon()
    {
        #resAppl

        if (this.RequestStatus == VendInvoiceRequestStatus::Draft || this.RequestStatus == VendInvoiceRequestStatus::Approved)
        {
            return #ImageBlank2;
        }
        else
        {
            return #ImageSetupWorkflow;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIntrastatFulfillDate_HU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks Intrastat fulfillment date.
    /// </summary>
    /// <returns>
    /// true if check is passed otherwise, false.
    /// </returns>
    public boolean checkIntrastatFulfillDate_HU()
    {
        VendTable vendTable;
        LogisticsAddressCountryRegionId country;
        IntrastatParameters intrastatParameters;

        vendTable = VendTable::find(this.OrderAccount);
        country = vendTable.invoiceAddress().CountryRegionId;
        intrastatParameters = IntrastatParameters::find();

        if (!country)
        {
            return checkFailed("@GLS107637");
        }

        if (!IntrastatCountryRegionParameters::isCountryRegionStateInEU(vendTable.invoiceAddress()))
        {
            return true;
        }

        if (intrastatParameters.IntrastatFulfillmentDateEmptyWarning_HU && !this.vendInvoiceInfoTable_W().IntrastatFulfillmentDate_HU)
        {
            return checkFailed(strFmt("@SYS4082058", fieldPName(VendInvoiceInfoTable_W, IntrastatFulfillmentDate_HU)));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a <c>MarkupTrans</c> record associated with the current <c>VendInvoiceInfoTable</c>
    /// record and the corresponding child <c>VendInvoiceInfoSubTable</c> record to post.
    /// </summary>
    /// <returns>
    /// true if no errors were detected; otherwise, false.
    /// </returns>
    public boolean checkMarkupTrans()
    {
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;

        if (!MarkupTrans::checkMarkupTransOnHeaderWithZeroValueValidation(this.TableId, this.RecId)) // Check this record
        {
            return false;
        }

        // Check all children of this record
        while select vendInvoiceInfoSubTable
                where vendInvoiceInfoSubTable.ParmId == this.ParmId &&
                      vendInvoiceInfoSubTable.TableRefId == this.TableRefId
        {
            if (!vendInvoiceInfoSubTable.checkMarkupTrans())
            {
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupAfterRearrange</Name>
				<Source><![CDATA[
    public void cleanupAfterRearrange()
    {
        #ISOCountryRegionCodes
        VendInvoiceInfoTable_W vendInvoiceInfoTable_W;

        // A PO-based invoice should not store the corresponding PO's values
        //    in the fields that aren't editable for such an invoice.
        if (!this.isNonPO())
        {
            this.PaymentSched = '';
            this.Payment = '';
            this.CashDiscCode = '';
            this.CashDiscPercent = 0;
            this.TaxGroup = '';
            this.vatNum = '';
            this.VATNumTableType = TaxExemptNumberSourceType::None;
            this.VATNumRecId = 0;
            this.InclTax = NoYes::No;
            this.OverrideSalesTax = NoYes::No;
            this.EnterpriseNumber = '';
            this.PostingProfile = '';
            this.SettleVoucher = SettlementType::None;
            this.NumberSequenceGroup = '';
            this.TransactionCode = '';
            this.Transport = '';
            this.Port = '';
            this.StatProcId = '';
            this.CountyOrigDest = '';
            this.ListCode = Listcode::IncludeNot;
            this.MarkupGroup = '';
            this.InventLocationId = '';
            this.InventSiteId = '';

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
            {
                vendInvoiceInfoTable_W = this.vendInvoiceInfoTable_W();
                vendInvoiceInfoTable_W.IntrastatFulfillmentDate_HU = dateNull();
                this.packVendInvoiceInfoTable_W(vendInvoiceInfoTable_W);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
    public void clear(boolean keepTypeFields = false)
    {
        DocumentStatus ordering;

        if (keepTypeFields)
        {
            ordering = this.Ordering;
        }

        super();

        if (keepTypeFields)
        {
            this.Ordering = ordering;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearVarianceApproved</Name>
				<Source><![CDATA[
    public void clearVarianceApproved()
    {
        this.VarianceApproved = NoYes::No;
        this.VarianceApprover = 0;
        this.VarianceApprovedDateTime = DateTimeUtil::minValue();
        this.VarianceComment = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoicesCountByPurchIdAndParmId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets number of invoices by purch identifier and parm identifier.
    /// </summary>
    /// <returns>Returns number of vend invoices.</returns>
    [Hookable(false)]
    public int getInvoicesCountByPurchIdAndParmId()
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        select count(RecId) from vendInvoiceInfoTable
            where vendInvoiceInfoTable.ParmId == this.ParmId
                && vendInvoiceInfoTable.PurchId == this.PurchId
                && vendInvoiceInfoTable.Ordering == DocumentStatus::Invoice;

        return vendInvoiceInfoTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToLine</Name>
				<Source><![CDATA[
    void copyAddressToLine(DialogButton _copyAddress, LogisticsPostalAddressRecId  _originalDeliveryPostalAddress)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;

        if (_copyAddress == DialogButton::No || _copyAddress == DialogButton::Cancel)
        {
            return;
        }

        vendInvoiceInfoLine.skipDataMethods(true);
        vendInvoiceInfoLine.skipDatabaseLog(true);
        vendInvoiceInfoLine.skipEvents(true);

        update_recordset vendInvoiceInfoLine
            setting DeliveryPostalAddress = this.DeliveryPostalAddress,
                DeliveryName = this.DeliveryName,
                AddressRefRecId = this.AddressRefRecId,
                AddressRefTableId = this.AddressRefTableId
            where vendInvoiceInfoLine.TableRefId == this.TableRefId &&
                vendInvoiceInfoLine.ParmId == this.ParmId &&
                !vendInvoiceInfoLine.OrigPurchId &&
                (_copyAddress == DialogButton::YesToAll || vendInvoiceInfoLine.DeliveryPostalAddress == _originalDeliveryPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field..
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set to apply to the <c>defaultDimension</c> field.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was initialized from the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>
    public DimensionDefault copyDimension(DimensionDefault _defaultDimension, DimensionCopy _dimensionCopy = DimensionCopy::newFromTable(this, this.companyInfo().RecId))
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFromHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current <c>VendInvoiceInfoTable</c> record with the data in the specified
    /// <c>VendInvoiceInfoTable</c> record.
    /// </summary>
    /// <param name="_header">
    /// The <c>VendInvoiceInfoTable</c> record from which to copy the data.
    /// </param>
    public void copyFromHeader(VendInvoiceInfoTable _header)
    {
        #ISOCountryRegionCodes
        #EECountryRegionCodes

        // <GEERU><GEEU>
        VendInvoiceInfoTable_RU srcVendInvoiceInfoTable_RU;
        VendInvoiceInfoTable_RU destVendInvoiceInfoTable_RU;
        // </GEEU></GEERU>
        // <GEEU>
        #EECountryRegionCodes
        VendInvoiceInfoTable_Officials srcVendInvoiceInfoTable_Officials;
        VendInvoiceInfoTable_Officials destVendInvoiceInfoTable_Officials;
        // </GEEU>
        //<GTH>
        VendInvoiceInfoTableExtensionTH vendInvoiceInfoTableExtensionTH;
        VendInvoiceInfoTableExtensionTH vendInvoiceInfoTableExtTHHeader;
        //</GTH>

        // <GBR>
        VendInvoiceInfoTable_W srcVendInvoiceInfoTable_W;
        VendInvoiceInfoTable_W destVendInvoiceInfoTable_W;
        // </GBR>

        this.ParmId = _header.ParmId;
        this.DeliveryName = _header.DeliveryName;
        this.PurchId = _header.PurchId;
        this.Ordering = _header.Ordering;
        this.BatchAdministration = _header.BatchAdministration;
        this.TransDate = _header.TransDate;
        this.Num = _header.Num;
        this.DocumentDate = _header.DocumentDate;
        this.DocumentNum = _header.DocumentNum;
        this.PaymId = _header.PaymId;
        this.CashDisc = _header.CashDisc;
        this.InvoiceRoundOff = _header.InvoiceRoundOff;
        this.TaxRoundOff = _header.TaxRoundOff;
        this.EndDisc = _header.EndDisc;
        this.Approved = _header.Approved;
        this.Approver = _header.Approver;
        this.PurchName = _header.PurchName;
        this.OrderAccount = _header.OrderAccount;
        this.CashDiscDate = _header.CashDiscDate;
        this.Storno = _header.Storno;
        this.InvoiceAccount = _header.InvoiceAccount;
        this.CurrencyCode = _header.CurrencyCode;
        this.Log = _header.Log;
        this.PaymMode = _header.PaymMode;
        this.PaymSpec = _header.PaymSpec;
        this.ReCalculate = _header.ReCalculate;
        this.VendBankAccountID = _header.VendBankAccountID;
        this.FixedExchRate = _header.FixedExchRate;
        this.euroTriangulation = _header.euroTriangulation;
        this.ExchRate = _header.ExchRate;
        this.ExchRateSecondary = _header.ExchRateSecondary;
        this.ReportingCurrencyExchangeRate = _header.ReportingCurrencyExchangeRate;
        this.FixedDueDate = _header.FixedDueDate;
        this.AddressRefRecId = _header.AddressRefRecId;
        this.AddressRefTableId = _header.AddressRefTableId;
        this.DeliveryPostalAddress = _header.DeliveryPostalAddress;
        this.TableRefId = _header.TableRefId;
        this.Hold = _header.Hold;
        this.InvoiceReleaseDate = _header.InvoiceReleaseDate;
        this.ReleaseDateComment = _header.ReleaseDateComment;
        this.VendInvoiceSaveStatus = _header.VendInvoiceSaveStatus;
        this.VarianceApproved = _header.VarianceApproved;
        this.VarianceApprover = _header.VarianceApprover;
        this.VarianceApprovedDateTime = _header.VarianceApprovedDateTime;
        this.VarianceComment = _header.VarianceComment;
        this.DocumentOrigin = _header.DocumentOrigin;
        this.PoolRecId = _header.PoolRecId;
        this.ParmJobStatus = _header.ParmJobStatus;
        this.VendInvoiceGroup = _header.VendInvoiceGroup;
        this.PaymentSched = _header.PaymentSched;
        this.CashDiscCode = _header.CashDiscCode;
        this.CashDiscPercent = _header.CashDiscPercent;
        this.Payment = _header.Payment;
        this.TaxGroup = _header.TaxGroup;
        this.OverrideSalesTax = _header.OverrideSalesTax;
        this.vatNum = _header.vatNum;
        this.VATNumTableType = _header.VATNumTableType;
        this.VATNumRecId = _header.VATNumRecId;
        this.InclTax = _header.InclTax;
        this.EnterpriseNumber = _header.EnterpriseNumber;
        this.PostingProfile = _header.PostingProfile;
        this.SettleVoucher = _header.SettleVoucher;
        this.NumberSequenceGroup = _header.NumberSequenceGroup;
        this.TransactionCode = _header.TransactionCode;
        this.Transport = _header.Transport;
        this.Port = _header.Port;
        this.StatProcId = _header.StatProcId;
        this.CountyOrigDest = _header.CountyOrigDest;
        this.ListCode = _header.ListCode;
        this.VendPaymentGroup = _header.VendPaymentGroup;
        this.Description = _header.Description;
        this.LastMatchVariance = _header.LastMatchVariance;
        this.RemittanceLocation = _header.RemittanceLocation;
        this.IgnoreCalculatedSalesTax = _header.IgnoreCalculatedSalesTax;
        this.InvoiceType = _header.InvoiceType;
        this.MarkupGroup = _header.MarkupGroup;
        this.InventSiteId = _header.InventSiteId;
        this.InventLocationId = _header.InventLocationId;
        this.DefaultDimension = _header.DefaultDimension;
        this.AccountingDistributionTemplate = _header.AccountingDistributionTemplate;
        this.BankLCImportLine = _header.BankLCImportLine;
        this.VendorRequestedWorkerEmail = _header.VendorRequestedWorkerEmail;
        this.ImportedAmount = _header.ImportedAmount;
        this.ReceivedDate = _header.ReceivedDate;
        this.ImportedSalesTax = _header.ImportedSalesTax;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            this.PurchAgreementHeader_PSN = _header.PurchAgreementHeader_PSN;
        }

        // EndDateTime, StartDateTime

        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAllandRU))
        {
            srcVendInvoiceInfoTable_Officials = _header.vendInvoiceInfoTable_Officials();
            destVendInvoiceInfoTable_Officials = this.vendInvoiceInfoTable_Officials();

            destVendInvoiceInfoTable_Officials.OffSessionId = OfficialsServ_RU::sessionReplace(srcVendInvoiceInfoTable_Officials.OffSessionId, destVendInvoiceInfoTable_Officials.OffSessionId);
            destVendInvoiceInfoTable_Officials.OffReportType = srcVendInvoiceInfoTable_Officials.OffReportType;

            this.packVendInvoiceInfoTable_Officials(destVendInvoiceInfoTable_Officials);
        }
        // <GEEU>

        //<GTH>
        if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
        {
            vendInvoiceInfoTableExtensionTH = this.vendInvoiceInfoTableExtensionTH();
            vendInvoiceInfoTableExtTHHeader = _header.vendInvoiceInfoTableExtensionTH();

            vendInvoiceInfoTableExtensionTH.InvoiceReceiptDate = vendInvoiceInfoTableExtTHHeader.InvoiceReceiptDate;
            vendInvoiceInfoTableExtensionTH.TaxInvoiceReceiptDate = vendInvoiceInfoTableExtTHHeader.TaxInvoiceReceiptDate;
            vendInvoiceInfoTableExtensionTH.RealVendName = vendInvoiceInfoTableExtTHHeader.RealVendName;
            vendInvoiceInfoTableExtensionTH.InvoiceDate = vendInvoiceInfoTableExtTHHeader.InvoiceDate;
            vendInvoiceInfoTableExtensionTH.PostalAddress = vendInvoiceInfoTableExtTHHeader.PostalAddress;

            this.SysExtensionSerializerMap::packExtensionTable(vendInvoiceInfoTableExtensionTH);
        }
        //</GTH>

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            srcVendInvoiceInfoTable_RU = _header.vendInvoiceInfoTable_RU();
            destVendInvoiceInfoTable_RU = this.vendInvoiceInfoTable_RU();

            destVendInvoiceInfoTable_RU.vatOnPayment_RU = srcVendInvoiceInfoTable_RU.vatOnPayment_RU;
            destVendInvoiceInfoTable_RU.CorrectedFactureExternalId_RU = srcVendInvoiceInfoTable_RU.CorrectedFactureExternalId_RU;
            destVendInvoiceInfoTable_RU.CorrectedFactureDate_RU = srcVendInvoiceInfoTable_RU.CorrectedFactureDate_RU;
            destVendInvoiceInfoTable_RU.CorrectedPeriod_RU = srcVendInvoiceInfoTable_RU.CorrectedPeriod_RU;
            destVendInvoiceInfoTable_RU.Correct_RU = srcVendInvoiceInfoTable_RU.Correct_RU;
            destVendInvoiceInfoTable_RU.CorrectedInvoiceId_RU = srcVendInvoiceInfoTable_RU.CorrectedInvoiceId_RU;
            destVendInvoiceInfoTable_RU.CorrectedInvoiceDate_RU = srcVendInvoiceInfoTable_RU.CorrectedInvoiceDate_RU;
            destVendInvoiceInfoTable_RU.AttorneyDate_RU = srcVendInvoiceInfoTable_RU.AttorneyDate_RU;
            destVendInvoiceInfoTable_RU.AttorneyId_RU = srcVendInvoiceInfoTable_RU.AttorneyId_RU;
            destVendInvoiceInfoTable_RU.AttorneyIssuedName_RU = srcVendInvoiceInfoTable_RU.AttorneyIssuedName_RU;
            destVendInvoiceInfoTable_RU.FactureExternalId_RU = srcVendInvoiceInfoTable_RU.FactureExternalId_RU;
            destVendInvoiceInfoTable_RU.InventProfileType_RU = srcVendInvoiceInfoTable_RU.InventProfileType_RU;
            destVendInvoiceInfoTable_RU.StornoPhysical_RU = srcVendInvoiceInfoTable_RU.StornoPhysical_RU;
            destVendInvoiceInfoTable_RU.AgreementHeaderExt_RU = srcVendInvoiceInfoTable_RU.AgreementHeaderExt_RU;
            destVendInvoiceInfoTable_RU.vatOperationCode_RU = srcVendInvoiceInfoTable_RU.vatOperationCode_RU;
            destVendInvoiceInfoTable_RU.vatChargeSource_RU = srcVendInvoiceInfoTable_RU.vatChargeSource_RU;
            destVendInvoiceInfoTable_RU.InventProfileId_RU = srcVendInvoiceInfoTable_RU.InventProfileId_RU;
            destVendInvoiceInfoTable_RU.ConsignorAccount_RU = srcVendInvoiceInfoTable_RU.ConsignorAccount_RU;
            destVendInvoiceInfoTable_RU.ConsigneeAccount_RU = srcVendInvoiceInfoTable_RU.ConsigneeAccount_RU;
            destVendInvoiceInfoTable_RU.ProcessVAT = srcVendInvoiceInfoTable_RU.vatOnPayment_RU == NoYes::No ? srcVendInvoiceInfoTable_RU.ProcessVAT : NoYes::No;
            destVendInvoiceInfoTable_RU.PurchBookVATProcessParametersRecId = srcVendInvoiceInfoTable_RU.PurchBookVATProcessParametersRecId;

            this.packVendInvoiceInfoTable_RU(destVendInvoiceInfoTable_RU);
        }
        // </GEERU>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            srcVendInvoiceInfoTable_W = _header.vendInvoiceInfoTable_W();
            destVendInvoiceInfoTable_W = this.vendInvoiceInfoTable_W();

            destVendInvoiceInfoTable_W.FiscalDocumentModel_BR = srcVendInvoiceInfoTable_W.FiscalDocumentModel_BR;
            destVendInvoiceInfoTable_W.AccessKey_BR = srcVendInvoiceInfoTable_W.AccessKey_BR;
            destVendInvoiceInfoTable_W.FiscalDocumentSeries_BR = srcVendInvoiceInfoTable_W.FiscalDocumentSeries_BR;
            destVendInvoiceInfoTable_W.FiscalDocumentSpecie_BR = srcVendInvoiceInfoTable_W.FiscalDocumentSpecie_BR;
            destVendInvoiceInfoTable_W.FiscalDocumentType_BR = srcVendInvoiceInfoTable_W.FiscalDocumentType_BR;

            destVendInvoiceInfoTable_W.VendFinalUser_BR = srcVendInvoiceInfoTable_W.VendFinalUser_BR;
            destVendInvoiceInfoTable_W.ElectronicInvoice_BR = srcVendInvoiceInfoTable_W.ElectronicInvoice_BR;
            destVendInvoiceInfoTable_W.PresenceType_BR = srcVendInvoiceInfoTable_W.PresenceType_BR;

            destVendInvoiceInfoTable_W.cfpsId_BR = srcVendInvoiceInfoTable_W.cfpsId_BR;
            destVendInvoiceInfoTable_W.SalesPurchOperationType_BR = srcVendInvoiceInfoTable_W.SalesPurchOperationType_BR;
            destVendInvoiceInfoTable_W.VendFineSetup_BR = srcVendInvoiceInfoTable_W.VendFineSetup_BR;
            destVendInvoiceInfoTable_W.VendInterestSetup_BR = srcVendInvoiceInfoTable_W.VendInterestSetup_BR;

            destVendInvoiceInfoTable_W.ImportDeclaration_BR = srcVendInvoiceInfoTable_W.ImportDeclaration_BR;

            destVendInvoiceInfoTable_W.TypeOfCTe_BR = srcVendInvoiceInfoTable_W.TypeOfCTe_BR;

            destVendInvoiceInfoTable_W.BOLCarrierName_BR = srcVendInvoiceInfoTable_W.BOLCarrierName_BR;
            destVendInvoiceInfoTable_W.BOLFreightedBy_BR = srcVendInvoiceInfoTable_W.BOLFreightedBy_BR;
            destVendInvoiceInfoTable_W.DlvPackingName_BR = srcVendInvoiceInfoTable_W.DlvPackingName_BR;
            destVendInvoiceInfoTable_W.DlvFreightType_BR = srcVendInvoiceInfoTable_W.DlvFreightType_BR;
            destVendInvoiceInfoTable_W.DlvNoOfCarrier_BR = srcVendInvoiceInfoTable_W.DlvNoOfCarrier_BR;
            destVendInvoiceInfoTable_W.DlvStateRegistered_BR = srcVendInvoiceInfoTable_W.DlvStateRegistered_BR;
            destVendInvoiceInfoTable_W.DlvTransportBrand_BR = srcVendInvoiceInfoTable_W.DlvTransportBrand_BR;

            this.packVendInvoiceInfoTable_W(destVendInvoiceInfoTable_W);
        }
        // </GBR>
        // <GMY>
        if (TaxGSTFeatureChecker_MY::isCountryRegionMY())
        {
            srcVendInvoiceInfoTable_W = _header.vendInvoiceInfoTable_W();
            destVendInvoiceInfoTable_W = this.vendInvoiceInfoTable_W();

            destVendInvoiceInfoTable_W.InvoiceType_MY = srcVendInvoiceInfoTable_W.InvoiceType_MY;

            this.packVendInvoiceInfoTable_W(destVendInvoiceInfoTable_W);
        }
        // </GMY>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            srcVendInvoiceInfoTable_W = _header.vendInvoiceInfoTable_W();

            destVendInvoiceInfoTable_W.CFDIUUID_MX = srcVendInvoiceInfoTable_W.CFDIUUID_MX;
            destVendInvoiceInfoTable_W.InvoiceSeries_MX = srcVendInvoiceInfoTable_W.InvoiceSeries_MX;

            this.packVendInvoiceInfoTable_W(destVendInvoiceInfoTable_W);
        }

        if (IntrastatCountryRegionParameters::isInEUByIsoCode())
        {
            TransportationDocument::copy(_header, this);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoLV]))
        {
            srcVendInvoiceInfoTable_W = _header.vendInvoiceInfoTable_W();
            destVendInvoiceInfoTable_W = this.vendInvoiceInfoTable_W();

            destVendInvoiceInfoTable_W.DocAutoNumbering_LT = srcVendInvoiceInfoTable_W.DocAutoNumbering_LT;
            this.packVendInvoiceInfoTable_W(destVendInvoiceInfoTable_W);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAllandRU))
        {
            srcVendInvoiceInfoTable_W = _header.vendInvoiceInfoTable_W();
            destVendInvoiceInfoTable_W = this.vendInvoiceInfoTable_W();
            destVendInvoiceInfoTable_W.VatDueDate_W = srcVendInvoiceInfoTable_W.VatDueDate_W;
            destVendInvoiceInfoTable_W.PurchReceiptDate_W = srcVendInvoiceInfoTable_W.PurchReceiptDate_W;
            destVendInvoiceInfoTable_W.TaxPeriodPaymentCode_PL = srcVendInvoiceInfoTable_W.TaxPeriodPaymentCode_PL;
            destVendInvoiceInfoTable_W.EmplAccount_RU = srcVendInvoiceInfoTable_W.EmplAccount_RU;

            this.packVendInvoiceInfoTable_W(destVendInvoiceInfoTable_W);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            srcVendInvoiceInfoTable_W = _header.vendInvoiceInfoTable_W();
            destVendInvoiceInfoTable_W = this.vendInvoiceInfoTable_W();
            destVendInvoiceInfoTable_W.IntrastatFulfillmentDate_HU = srcVendInvoiceInfoTable_W.IntrastatFulfillmentDate_HU;

            this.packVendInvoiceInfoTable_W(destVendInvoiceInfoTable_W);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPaymentSched</Name>
				<Source><![CDATA[
    public void copyPaymentSched(VendInvoiceJour _vendInvoiceJour)
    {
        this.VendDocumentTableMap::copyPaymentSched(_vendInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctionType_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns type of facture currection for current record.
    /// </summary>
    /// <returns>
    /// <c>FactureCorrectionType_RU</c> value.
    /// </returns>
    public FactureCorrectionType_RU correctionType_RU()
    {
        return VendInvoiceInfoTableCorrectionType_RU::findVendInvoiceInfoTable(this.RecId).CorrectionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMarkupTrans</Name>
				<Source><![CDATA[
    void createMarkupTrans()
    {
        VendInvoiceInfoSubTable subTable;

        if (this.isNonPO())
        {
            subTable = VendInvoiceInfoSubTable::find(this.ParmId, this.TableRefId, '');

            Markup::insertMarkupTrans(HeadingLine::Heading,
                                          MarkupModuleType::Vend,
                                          subTable,
                                          this.InvoiceAccount,
                                          this.MarkupGroup,
                                          this.CurrencyCode,
                                          this.vendTable_InvoiceAccount().languageId(),
                                          '',
                                          this.MarkupGroup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMarkupTransFromPurchTable</Name>
				<Source><![CDATA[
    private void createMarkupTransFromPurchTable()
    {
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
        select firstonly vendInvoiceInfoSubTable
            where vendInvoiceInfoSubTable.ParmId == this.ParmId
               && vendInvoiceInfoSubTable.TableRefId == this.TableRefId
               && vendInvoiceInfoSubTable.OrigPurchId  == this.PurchId;

        if (!vendInvoiceInfoSubTable)
        {
            return;
        }

        PurchTable localPurchTable = PurchTable::find(vendInvoiceInfoSubTable.OrigPurchId);
        Num localCurrentInterCompanyInvoiceNum = this.Num;
        MarkupCopyFromPurchOrderParameters copyFromPurchOrderToSubTableParameters =
            MarkupCopyFromPurchOrderParameters::createCopyFromPurchOrderParameters(
                localPurchTable,
                vendInvoiceInfoSubTable,
                localCurrentInterCompanyInvoiceNum,
                this.CurrencyCode,
                SourceDocumentLineAccountingStatus::Draft,
                localPurchTable);

        MarkupCopy markupCopy = MarkupCopy::construct();
        markupCopy.copyFromPurchOrder(copyFromPurchOrderToSubTableParameters);

        PurchLine localPurchLine;
        MarkupTrans markupTrans;
        VendInvoiceInfoLine vendInvoiceInfoLine;

        while select vendInvoiceInfoLine
            where vendInvoiceInfoLine.ParmId == this.ParmId
                && vendInvoiceInfoLine.TableRefId == this.TableRefId
            join localPurchLine
                where localPurchLine.RecId == vendInvoiceInfoLine.PurchLineRecId
            join localPurchTable
                where localPurchTable.PurchId == localPurchLine.PurchId
            notExists join markupTrans
                where markupTrans.TransTableId == vendInvoiceInfoLine.TableId
                    && markupTrans.TransRecId == vendInvoiceInfoLine.RecId
                    && !markupTrans.IsDeleted
        {
            // keep the markupTrans at Draft so that its parent, ie, vendInvoiceInfoLine also stays in draft as vendInvoiceInfoLine taxes
            // do not yet exist and will be missed during distribution.
            MarkupCopyFromPurchOrderParameters copyFromPurchOrderToLineParameters =
                    MarkupCopyFromPurchOrderParameters::createCopyFromPurchOrderParameters(
                    localPurchLine,
                    vendInvoiceInfoLine,
                    localCurrentInterCompanyInvoiceNum,
                    '',
                    SourceDocumentLineAccountingStatus::Draft,
                    localPurchTable);
            markupCopy.copyFromPurchOrder(copyFromPurchOrderToLineParameters);
        }       
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymentSched</Name>
				<Source><![CDATA[
    public void createPaymentSched()
    {
        this.VendDocumentTableMap::createPaymentSched();
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the status of the credit correction option for the current invoice.
    /// </summary>
    /// <param name="_set">
    /// Specifies whether the field is being updated; optional.
    /// </param>
    /// <param name="_creditCorrection">
    /// Specifies the value of the credit correction field for the current invoice; optional.
    /// </param>
    /// <returns>
    /// The current status of the credit correction field for the current invoice.
    /// </returns>
    /// <remarks>
    /// This method should always be called instead of directly accessing the field with the same name. If
    /// the field has not been set, the status is <c>UnknownNoYes::Unknown</c>. In that case the status will be
    /// updated based on the value of the VendParameters.CreditError field along with the sign of the document.
    /// </remarks>
    public edit NoYes creditCorrection(boolean _set = false, NoYes _creditCorrection = NoYes::Yes)
    {
        NoYes creditCorrection;
        #ISOCountryRegionCodes

        if (!VendInvoiceCreditCorrectionCalculationFlight::instance().isEnabled())
        {
            if (_set)
            {
                if (_creditCorrection == NoYes::Yes)
                {
                    this.CreditCorrection = UnknownNoYes::Yes;
                }
                else
                {
                    this.CreditCorrection = UnknownNoYes::No;
                }
            }
            else if (this.CreditCorrection != UnknownNoYes::Yes 
                && !SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                if (VendParameters::find().CreditError && 
                    (!VendInvoicePostponeCreditCorrectionCalculationFlight::instance().isEnabled() || this.Num != '') && 
                    this.isCreditNote())
                {
                    this.CreditCorrection = UnknownNoYes::Yes;
                }
                else
                {
                    this.CreditCorrection = UnknownNoYes::No;
                }
            }
        
            if (this.CreditCorrection == UnknownNoYes::Yes)
            {
                creditCorrection = NoYes::Yes;
            }
            else
            {
                creditCorrection = NoYes::No;
            }
        }
        else
        {
            if (_set)
            {
                if (_creditCorrection == NoYes::Yes)
                {
                    this.CreditCorrection = UnknownNoYes::Yes;
                }
                else
                {
                    this.CreditCorrection = UnknownNoYes::No;
                }
            }

            if (this.CreditCorrection == UnknownNoYes::Unknown && !SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                if (VendParameters::find().CreditError &&
                    (!VendInvoicePostponeCreditCorrectionCalculationFlight::instance().isEnabled() || this.Num != '') &&
                    this.isCreditNote())
                {
                    // The default value should be marked, change Unknown to Yes and return Yes
                    this.CreditCorrection = UnknownNoYes::Yes;
                    creditCorrection = NoYes::Yes;
                }
                else
                {
                    this.CreditCorrection = UnknownNoYes::No;
                    creditCorrection = NoYes::No;
                }
            }
            else if (this.CreditCorrection == UnknownNoYes::Yes)
            {
                creditCorrection = NoYes::Yes;
            }
            else
            {
                creditCorrection = NoYes::No;
            }
        }

        return creditCorrection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the <c>DefaultDimension</c> value that is associated with the invoice.
    /// </summary>
    /// <returns>
    /// The <c>DefaultDimension</c> value that is associated with the invoice line.
    /// </returns>
    public DimensionDefault defaultDimension()
    {
        if (this.isNonPO())
        {
            return this.DefaultDimension;
        }
        else
        {
            return PurchTable::find(this.PurchId).DefaultDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies default value to a field.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID.
    /// </param>
    /// <param name="_purchTable">
    /// The <c>PurchTable</c> record to default data from.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> record to default data from.
    /// </param>
    public void defaultField(FieldId _fieldId, PurchTable _purchTable = null, LedgerJournalTrans _ledgerJournalTrans = null)
    {
        VendDocumentTableType vendDocumentTableType;

        vendDocumentTableType = this.type(_purchTable, _ledgerJournalTrans);
        if (vendDocumentTableType)
        {
            vendDocumentTableType.defaultField(_fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies default values to all fields.
    /// </summary>
    /// <param name="_purchTable">
    /// A <c>PurchTable</c> table record, used to copy values from; optional.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    /// A <c>LedgerJournalTrans</c> table record, used to copy values from; optional.
    /// </param>
    /// <param name="_resetFieldState">
    /// Resets the internal field state to <c>FieldState::NotSet</c> for the table buffer; optional;
    /// </param>
    public void defaultRow(PurchTable _purchTable = null, LedgerJournalTrans _ledgerJournalTrans = null, boolean _resetFieldState = false)
    {
        // <GEEPL>
        #isoCountryRegionCodes
        // </GEEPL>
        VendDocumentTableType vendDocumentTableType;
        VendInvoiceInfoTable_W vendInvoiceInfoTable_W;
        // <GBR>
        PurchTable_BR purchTable_BR;
        VendTable vendTable;
        // </GBR>
        // <GTH>
        PurchTable_W purchTable_W;
        VendInvoiceInfoTableExtensionTH vendInvoiceInfoTableExtensionTH;
        LedgerJournalTransExtensionTH   ledgerJournalTransExtensionTH;
        // </GTH>

        vendDocumentTableType = this.type(_purchTable, _ledgerJournalTrans);

        if (vendDocumentTableType)
        {
            if (_resetFieldState)
            {
                this.resetFieldStateForAllFields();
            }
            vendDocumentTableType.defaultRow();
        }

        // <GJP>
        if (VendConsInvoiceType_JP::isVendConsInvoiceEnabled())
        {
            vendInvoiceInfoTable_W = this.vendInvoiceInfoTable_W();
            if (_purchTable)
            {
                vendInvoiceInfoTable_W.ConsTarget_JP = _purchTable.ConsTarget_JP;
            }
            else
            {
                vendInvoiceInfoTable_W.ConsTarget_JP = VendTable::find(this.InvoiceAccount).ConsDay_JP != 0 ? NoYes::Yes : NoYes::No;
            }
            this.packVendInvoiceInfoTable_W(vendInvoiceInfoTable_W);
        }
        // </GJP>
        //<GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            vendInvoiceInfoTable_W = this.vendInvoiceInfoTable_W();
            vendInvoiceInfoTable_W.TaxPeriodPaymentCode_PL = VendTable::find(this.InvoiceAccount).TaxPeriodPaymentCode_PL;
            this.packVendInvoiceInfoTable_W(vendInvoiceInfoTable_W);
        }
        //</GEEPL>
        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            vendInvoiceInfoTable_W = this.vendInvoiceInfoTable_W();
            if (_purchTable)
            {
                purchTable_BR = _purchTable.purchTable_BR();
                vendInvoiceInfoTable_W.VendFineSetup_BR = purchTable_BR.VendFineSetup_BR;
                vendInvoiceInfoTable_W.VendInterestSetup_BR = purchTable_BR.VendInterestSetup_BR;
            }
            else
            {
                vendTable = VendTable::find(this.InvoiceAccount);
                vendInvoiceInfoTable_W.VendFineSetup_BR = vendTable.FineCode_BR;
                vendInvoiceInfoTable_W.VendInterestSetup_BR = vendTable.InterestCode_BR;
            }
            this.packVendInvoiceInfoTable_W(vendInvoiceInfoTable_W);
        }
        // </GBR>
        // <GTH>
        if (TaxThaiGovCertificationFeatureChecker::isCountryRegionTH())
        {
            if (_purchTable)
            {
                purchTable_W = _purchTable.purchTable_W();
                ledgerJournalTransExtensionTH                 = _ledgerJournalTrans.ledgerJournalTransExtensionTH();
                vendInvoiceInfoTableExtensionTH               = this.vendInvoiceInfoTableExtensionTH();

                vendInvoiceInfoTableExtensionTH.InvoiceDate           = ledgerJournalTransExtensionTH.InvoiceDate;
                vendInvoiceInfoTableExtensionTH.InvoiceReceiptDate    = ledgerJournalTransExtensionTH.InvoiceReceiptDate;
                vendInvoiceInfoTableExtensionTH.TaxInvoiceReceiptDate = ledgerJournalTransExtensionTH.TaxInvoiceReceiptDate;
                vendInvoiceInfoTableExtensionTH.RealVendName          = ledgerJournalTransExtensionTH.RealVendName;

                vendInvoiceInfoTableExtensionTH.PostalAddress = purchTable_W.InvoicePostalAddress_TH;
                this.packVendInvoiceInfoTableExtensionTH(vendInvoiceInfoTableExtensionTH);
            }
        }
        // </GTH>
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>VendInvoiceInfoTable</c> table and related tables.
    /// </summary>
    public void delete()
    {
        DocuRef docuRef;
        VendInvoiceInfoTable vendInvoiceInfoTableLocal;
        SourceDocumentHeaderDeleteController sourceDocumentHeaderDeleteController;
        PurchLine purchLine;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        SourceDocumentHeaderDeleteRequest sourceDocumentHeaderDeleteRequest;
        List poLineList = new List(Types::Int64);
        ListIterator poLineListIterator;
        //<GIN>
        #ISOCountryRegionCodes
        //</GIN>

        ttsbegin;

        // <GEERU>
        if (this.ParmJobStatus != ParmJobStatus::Executed && this.vendInvoiceInfoTable_Officials().OffSessionId)
        {
            OfficialsServ_RU::releaseOffsessionId(this.vendInvoiceInfoTable_Officials().OffSessionId);
        }
        // </GEERU>

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            if (FormDataUtil::getFormDataSource(this))
            {
                ProjFundingLimitTrackingManager::updateUsingSourceDocument(this.SourceDocumentHeader, ProjFundingLimitTrackingAction::Release, true, true, true);
            }
            else if (this.ParmId)
            {
                //
                // Moving tracking of revennue from active to save documents
                // If there is no saved document, the amounts are released by the delete on source document
                //
                select firstonly SourceDocumentHeader from vendInvoiceInfoTableLocal where
                    vendInvoiceInfoTableLocal.TableRefId == this.TableRefId &&
                    vendInvoiceInfoTableLocal.ParmId == '';
                if (vendInvoiceInfoTableLocal)
                {
                    ProjFundingLimitTrackingManager::updateUsingSourceDocument(this.SourceDocumentHeader, ProjFundingLimitTrackingAction::Release, true, true);
                    while select vendInvoiceInfoLine
                        where vendInvoiceInfoLine.TableRefId == this.TableRefId
                           && vendInvoiceInfoLine.ParmId == this.ParmId
                    {
                        ProjFundingLimitTrackingManager::updateRevenueTrackingVendInvoiceInfoLine(vendInvoiceInfoLine);
                    }
                }
                else
                {
                    ProjFundingLimitTrackingManager::updateUsingSourceDocument(this.SourceDocumentHeader, ProjFundingLimitTrackingAction::Release,true, false, true);
                }
            }
        }

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.TransitDocumentTransactionMap_IN::deleteTransitDocumentsForHeader();
        }

        super();

        if (this.ParmJobStatus != ParmJobStatus::Executed)
        {
            delete_from docuRef
                where docuRef.RefCompanyId == this.DataAreaId
                   && docuRef.RefTableId == this.TableId
                   && docuRef.RefRecId == this.RecId;
        }

        while select PurchLineRecId from vendInvoiceInfoLine
           where vendInvoiceInfoLine.TableRefId == this.TableRefId
               && vendInvoiceInfoLine.ParmId == this.ParmId

        {
            poLineList.addEnd(vendInvoiceInfoLine.PurchLineRecId);
        }

        // below this point all deletions should suspend aot database operations for performance reasons.

        this.deleteWithoutDeleteActions();

        sourceDocumentHeaderDeleteController = new SourceDocumentHeaderDeleteController(classStr(SourceDocumentHeaderDeleteOperation),
            methodStr(SourceDocumentHeaderDeleteOperation, deleteSourceDocumentHeader),
            SysOperationExecutionMode::Synchronous);

        sourceDocumentHeaderDeleteRequest = sourceDocumentHeaderDeleteController.getDataContractObject(classStr(SourceDocumentHeaderDeleteRequest));
        sourceDocumentHeaderDeleteRequest.parmSourceDocumentHeaderRecId(this.SourceDocumentHeader);
        sourceDocumentHeaderDeleteRequest.parmSourceDocumentHeaderImplementation(this);
        sourceDocumentHeaderDeleteController.run();

        // After lines have been deleted, check if po line statuses need to be updated
        poLineListIterator = new ListIterator(poLineList);
        while (poLineListIterator.more())
        {
            select forUpdate purchLine
                where purchLine.RecId == poLineListIterator.value();

            if (!purchLine.IsFinalized
                || !PurchInvoiceSkipChangeStatusWhenFinalizedFlight::instance().isEnabled())
            {
                purchLine.setPurchStatus(true);
            }

            if (purchLine.PurchaseType == PurchaseType::Purch)
            {
                PurchCORInvReceivedWorkflow::cancelInvReceivedWorkflow(purchLine);
            }

            poLineListIterator.next();
        }

        TradeBLWIJournalPurposeCodes::deleteRecord(this.RecId, TradeBLWITypeOfForm::VendInvoice);

        if (TaxWithholdingGlobalFeature::isCalcWHTInInvoiceEnabled())
        {
            TaxWithholdUncommitted::deleteForDocumentHeader(this.TableId, this.RecId);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipDeleteLogic</Name>
				<Source><![CDATA[
    private void skipDeleteLogic(Common _common)
    {
        _common.skipDataMethods(true);
        _common.skipDeleteActions(true);
        _common.skipEvents(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteWithoutDeleteActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes related tables on the <c>VendInvoiceInfoTable</c> hierarchy below <c>VendInvoiceInfoTable</c> without using cascading delete actions.
    /// </summary>
    /// <param name="_deleteAll">
    /// True if you wish to delete all subordinate tables that do not have valid foreign keys back to a <c>VendInvoiceInfoTable</c>; otherwise
    /// this method will act as an instance method and only delete subordinated tables for this record.
    /// </param>
    /// <remarks>
    /// This method works like an instance method when <c>_deleteAll</c> is false and like a static method when <c>_deleteAll</c> is true.
    /// </remarks>
    public void deleteWithoutDeleteActions(boolean _deleteAll = false)
    {
        TaxWorkRegulation taxWorkRegulation;
        TaxUncommitted taxUncommitted;
        TaxUncommitted_IN taxUncommittedIN;
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
        VendInvoiceInfoSubMarkupMatchingTrans vendInvoiceInfoSubMarkupMatchingTrans;
        MarkupTrans markupTrans;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceInfoLine_W vendInvoiceInfoLine_W;
        VendInvoiceMatchingLine vendInvoiceMatchingLine;
        VendInvoiceInfoLine_Asset vendInvoiceInfoLine_Asset;
        VendInvoiceInfoLine_Project vendInvoiceInfoLine_Project;
        VendInvoiceInfoLineMarkupMatchingTrans vendInvoiceInfoLineMarkupMatchingTrans;
        VendInvoiceInfoSubLine vendInvoiceInfoSubLine;
        VendInvoiceInfoLineCorrLink_RU vendInvoiceInfoLineCorrLink_RU;
        RAssetPurchTrans rAssetPurchTrans;
        VendInvoiceLineForeignTradeCategory vendInvoiceLineForeignTradeCategory;
        VendInvoiceInfoTable localVendInvoiceInfoTable;
        // <GIN>
        TaxWithholdUncommitted_IN taxWithholdUncommitted;
        #ISOCountryRegionCodes
        // </GIN>
        VendAdvanceApplicationTrans vendAdvanceApplicationTrans;
        VendInvoiceInfoLineQuantities vendInvoiceInfoLineQuantities;

        if (!_deleteAll && this.ParmJobStatus != ParmJobStatus::Executed)
        {
            this.skipDeleteLogic(taxUncommittedIN);
            delete_from taxUncommittedIN
                exists join taxUncommitted
                where taxUncommittedIN.TaxUncommitted == taxUncommitted.RecId
                    && (taxUncommitted.HeadingTableId == this.TableId
                        && taxUncommitted.HeadingRecId == this.RecId
                        && taxUncommitted.Company == curext())
                notexists join localVendInvoiceInfoTable
                    where localVendInvoiceInfoTable.TableId == taxUncommitted.HeadingTableId
                        && localVendInvoiceInfoTable.RecId == taxUncommitted.HeadingRecId;
        }

        // <GIN>
        if (!_deleteAll
            && this.ParmJobStatus != ParmJobStatus::Executed
            && TaxWithholdParameters_IN::checkTaxParameters())
        {
            this.skipDeleteLogic(taxWithholdUncommitted);
            delete_from taxWithholdUncommitted
                where (taxWithholdUncommitted.HeadingTableId == this.TableId
                        && taxWithholdUncommitted.HeadingRecId == this.RecId
                        && taxWithholdUncommitted.Company == curext())
                notexists join localVendInvoiceInfoTable
                    where localVendInvoiceInfoTable.TableId == taxWithholdUncommitted.HeadingTableId
                        && localVendInvoiceInfoTable.RecId == taxWithholdUncommitted.HeadingRecId;
        }
        // </GIN>

        if (!_deleteAll && this.ParmJobStatus != ParmJobStatus::Executed)
        {
            // TaxUncommitted is shared for posted vendor invoices (between VendInvoiceInfoTable/Line and VendInvoiceJour/Trans)
            // Do not delete TaxUncommitted records for posted invoices, or as a part of PurchParmCleanup
            this.skipDeleteLogic(taxUncommitted);
            delete_from taxUncommitted
                where (taxUncommitted.HeadingTableId == this.TableId
                        && taxUncommitted.HeadingRecId == this.RecId
                        && taxUncommitted.Company == curext())
                notexists join localVendInvoiceInfoTable
                    where localVendInvoiceInfoTable.TableId == taxUncommitted.HeadingTableId
                        && localVendInvoiceInfoTable.RecId == taxUncommitted.HeadingRecId;
        }

        this.skipDeleteLogic(taxWorkRegulation);
        delete_from taxWorkRegulation
            where ((_deleteAll && taxWorkRegulation.HeadingTableId == this.TableId)
                    || (taxWorkRegulation.HeadingTableId == this.TableId
                    && taxWorkRegulation.HeadingRecId == this.RecId))
            notexists join localVendInvoiceInfoTable
                where localVendInvoiceInfoTable.TableId == taxWorkRegulation.HeadingTableId
                    && localVendInvoiceInfoTable.RecId == taxWorkRegulation.HeadingRecId;

        this.skipDeleteLogic(vendInvoiceInfoSubMarkupMatchingTrans);
        delete_from vendInvoiceInfoSubMarkupMatchingTrans
            where (_deleteAll || (vendInvoiceInfoSubMarkupMatchingTrans.VendInvoiceInfoSubTableParmId == this.ParmId
                    && vendInvoiceInfoSubMarkupMatchingTrans.VendInvoiceInfoSubTableTableRefId == this.TableRefId))
            notexists join localVendInvoiceInfoTable
                where localVendInvoiceInfoTable.ParmId == vendInvoiceInfoSubMarkupMatchingTrans.VendInvoiceInfoSubTableParmId
                    && localVendInvoiceInfoTable.TableRefId == vendInvoiceInfoSubMarkupMatchingTrans.VendInvoiceInfoSubTableTableRefId;

        this.skipDeleteLogic(markupTrans);
        delete_from markupTrans
            exists join vendInvoiceInfoSubTable
                where markupTrans.TransTableId == vendInvoiceInfoSubTable.TableId
                   && markupTrans.TransRecId == vendInvoiceInfoSubTable.RecId
                   && (_deleteAll || (vendInvoiceInfoSubTable.ParmId == this.ParmId
                   && vendInvoiceInfoSubTable.TableRefId == this.TableRefId))
            notexists join localVendInvoiceInfoTable
                where localVendInvoiceInfoTable.ParmId == vendInvoiceInfoSubTable.ParmId
                    && localVendInvoiceInfoTable.TableRefId == vendInvoiceInfoSubTable.TableRefId;

        this.skipDeleteLogic(vendInvoiceInfoSubTable);
        delete_from vendInvoiceInfoSubTable
             where (_deleteAll || (vendInvoiceInfoSubTable.ParmId == this.ParmId
                    && vendInvoiceInfoSubTable.TableRefId == this.TableRefId))
            notexists join localVendInvoiceInfoTable
                where localVendInvoiceInfoTable.ParmId == vendInvoiceInfoSubTable.ParmId
                    && localVendInvoiceInfoTable.TableRefId == vendInvoiceInfoSubTable.TableRefId;

        this.skipDeleteLogic(vendInvoiceLineForeignTradeCategory);
        delete_from vendInvoiceLineForeignTradeCategory
            exists join vendInvoiceInfoLine
            where vendInvoiceLineForeignTradeCategory.VendInvoiceInfoLine == vendInvoiceInfoLine.RecId
                && (_deleteAll || (vendInvoiceInfoLine.ParmId == this.ParmId
                    && vendInvoiceInfoLine.TableRefId == this.TableRefId))
            notexists join localVendInvoiceInfoTable
                where localVendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId
                    && localVendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId;

        this.skipDeleteLogic(vendInvoiceInfoLine_W);
        delete_from vendInvoiceInfoLine_W
            exists join vendInvoiceInfoLine
            where vendInvoiceInfoLine_W.VendInvoiceInfoLine == vendInvoiceInfoLine.RecId
                && (_deleteAll || (vendInvoiceInfoLine.ParmId == this.ParmId
                    && vendInvoiceInfoLine.TableRefId == this.TableRefId))
            notexists join localVendInvoiceInfoTable
                where localVendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId
                    && localVendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId;

        this.skipDeleteLogic(vendInvoiceInfoLineCorrLink_RU);
        delete_from vendInvoiceInfoLineCorrLink_RU
            exists join vendInvoiceInfoLine
            where vendInvoiceInfoLineCorrLink_RU.VendInvoiceInfoLineRecId == vendInvoiceInfoLine.RecId
                && (_deleteAll || (vendInvoiceInfoLine.ParmId == this.ParmId
                    && vendInvoiceInfoLine.TableRefId == this.TableRefId))
            notexists join localVendInvoiceInfoTable
                where localVendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId
                    && localVendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId;

        this.skipDeleteLogic(rAssetPurchTrans);
        delete_from rAssetPurchTrans
            exists join vendInvoiceInfoLine
            where rAssetPurchTrans.TableTableId == vendInvoiceInfoLine.TableId
                && rAssetPurchTrans.TableRecId == vendInvoiceInfoLine.RecId
                && (_deleteAll || (vendInvoiceInfoLine.ParmId == this.ParmId
                    && vendInvoiceInfoLine.TableRefId == this.TableRefId))
            notexists join localVendInvoiceInfoTable
                where localVendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId
                    && localVendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId;

        this.skipDeleteLogic(vendInvoiceMatchingLine);
        delete_from vendInvoiceMatchingLine
            exists join vendInvoiceInfoLine
            where vendInvoiceMatchingLine.RefTableId == vendInvoiceInfoLine.TableId
                && vendInvoiceMatchingLine.RefRecId == vendInvoiceInfoLine.RecId
                && (_deleteAll || (vendInvoiceInfoLine.ParmId == this.ParmId
                    && vendInvoiceInfoLine.TableRefId == this.TableRefId))
            notexists join localVendInvoiceInfoTable
                where localVendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId
                    && localVendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId;

        this.skipDeleteLogic(vendInvoiceInfoLine_Asset);
        delete_from vendInvoiceInfoLine_Asset
            exists join vendInvoiceInfoLine
            where vendInvoiceInfoLine_Asset.VendInvoiceInfoLineRecId == vendInvoiceInfoLine.RecId
                && (_deleteAll || (vendInvoiceInfoLine.ParmId == this.ParmId
                    && vendInvoiceInfoLine.TableRefId == this.TableRefId))
            notexists join localVendInvoiceInfoTable
                where localVendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId
                    && localVendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId;

        this.skipDeleteLogic(vendInvoiceInfoLine_Project);
        delete_from vendInvoiceInfoLine_Project
            exists join vendInvoiceInfoLine
            where vendInvoiceInfoLine_Project.VendInvoiceInfoLineRefRecId == vendInvoiceInfoLine.RecId
                && (_deleteAll || (vendInvoiceInfoLine.ParmId == this.ParmId
                    && vendInvoiceInfoLine.TableRefId == this.TableRefId))
            notexists join localVendInvoiceInfoTable
                where localVendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId
                    && localVendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId;

        this.skipDeleteLogic(vendInvoiceInfoLineMarkupMatchingTrans);
        delete_from vendInvoiceInfoLineMarkupMatchingTrans
            where (_deleteAll || (vendInvoiceInfoLineMarkupMatchingTrans.VendInvoiceInfoLineParmId == this.ParmId
                    && vendInvoiceInfoLineMarkupMatchingTrans.VendInvoiceInfoLineTableRefId == this.TableRefId))
            notexists join localVendInvoiceInfoTable
                where localVendInvoiceInfoTable.ParmId == vendInvoiceInfoLineMarkupMatchingTrans.VendInvoiceInfoLineParmId
                    && localVendInvoiceInfoTable.TableRefId == vendInvoiceInfoLineMarkupMatchingTrans.VendInvoiceInfoLineTableRefId;

        this.skipDeleteLogic(markupTrans);
        delete_from markupTrans
            exists join vendInvoiceInfoLine
                where markupTrans.TransTableId == vendInvoiceInfoLine.TableId
                   && markupTrans.TransRecId == vendInvoiceInfoLine.RecId
                   && (_deleteAll || (vendInvoiceInfoLine.ParmId == this.ParmId
                   && vendInvoiceInfoLine.TableRefId == this.TableRefId))
            notexists join localVendInvoiceInfoTable
                where localVendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId
                    && localVendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId;

        this.skipDeleteLogic(vendAdvanceApplicationTrans);
        delete_from vendAdvanceApplicationTrans
            exists join vendInvoiceInfoLine
                where vendAdvanceApplicationTrans.AdvanceApplicationId == vendInvoiceInfoLine.RecId
                   && (_deleteAll || (vendInvoiceInfoLine.ParmId == this.ParmId
                   && vendInvoiceInfoLine.TableRefId == this.TableRefId))
            notexists join localVendInvoiceInfoTable
                where localVendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId
                    && localVendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId;

        this.skipDeleteLogic(vendInvoiceInfoSubLine);
        delete_from vendInvoiceInfoSubLine
            exists join vendInvoiceInfoLine
                where vendInvoiceInfoSubLine.LineRefRecId == vendInvoiceInfoLine.RecId
                   && (_deleteAll || (vendInvoiceInfoLine.ParmId == this.ParmId
                   && vendInvoiceInfoLine.TableRefId == this.TableRefId))
            notexists join localVendInvoiceInfoTable
                where localVendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId
                    && localVendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId;

        if (VendAutomateVendorInvoicesFeature::isEnabled())
        {
            this.skipDeleteLogic(vendInvoiceInfoLineQuantities);
            delete_from vendInvoiceInfoLineQuantities
                exists join vendInvoiceInfoLine
                    where vendInvoiceInfoLineQuantities.LineRefRecId == vendInvoiceInfoLine.RecId
                       && (_deleteAll || (vendInvoiceInfoLine.ParmId == this.ParmId
                       && vendInvoiceInfoLine.TableRefId == this.TableRefId))
                notexists join localVendInvoiceInfoTable
                    where localVendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId
                        && localVendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId;
        }

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.TransitDocumentTransactionMap_IN::deleteTransitDocumentsForHeader();
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            while select vendInvoiceInfoLine
                where (_deleteAll || (vendInvoiceInfoLine.ParmId == this.ParmId
                    && vendInvoiceInfoLine.TableRefId == this.TableRefId))
                notexists join localVendInvoiceInfoTable
                    where localVendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId
                        && localVendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId
            {
                vendInvoiceInfoLine.updateRelatedCostControlTransCommittedCost();
            }
        }

        this.skipDeleteLogic(vendInvoiceInfoLine);
        delete_from vendInvoiceInfoLine
             where (_deleteAll || (vendInvoiceInfoLine.ParmId == this.ParmId
                    && vendInvoiceInfoLine.TableRefId == this.TableRefId))
            notexists join localVendInvoiceInfoTable
                where localVendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId
                    && localVendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPurchInvFromVendInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns purchase order invoices from <c>VendInvoiceInfoTable</c>
    /// related to <c>VendInvoiceJour</c> record.
    /// </summary>
    /// <param name="_purchId">
    /// The purch id of the posted invoice.
    /// </param>
    /// <param name="_invoiceId">
    /// The invoice number of the posted invoice.
    /// </param>
    /// <param name="_parmId">
    /// The session id of the posted invoice.
    /// </param>
    /// <param name="_forUpdate">
    /// True if you want the record for update, otherwise false.
    /// </param>
    static VendInvoiceInfoTable findPurchInvFromVendInvoiceJour(PurchId _purchId, InvoiceId _invoiceId, ParmId _parmId, boolean _forUpdate = false)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        if (_purchId && _invoiceId)
        {
            vendInvoiceInfoTable.selectForUpdate(_forUpdate);

            select firstonly vendInvoiceInfoTable
                where vendInvoiceInfoTable.Num == _invoiceId &&
                      vendInvoiceInfoTable.PurchId == _purchId &&
                      (vendInvoiceInfoTable.ParmId == _parmId || vendInvoiceInfoTable.ParmId == '') ;
        }
        return vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromVendInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns invoices from <c>VendInvoiceInfoTable</c>
    /// related to <c>VendInvoiceJour</c> record.
    /// </summary>
    /// <param name="_purchId">
    /// The purch id of the posted invoice.
    /// </param>
    /// <param name="_invoiceId">
    /// The invoice number of the posted invoice.
    /// </param>
    /// <param name="_parmId">
    /// The session id of the posted invoice.
    /// </param>
    /// <param name="_forUpdate">
    /// True if you want the record for update, otherwise false.
    /// </param>
    static VendInvoiceInfoTable findFromVendInvoiceJour(PurchId _purchId, InvoiceId _invoiceId, ParmId _parmId, boolean _forUpdate = false)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        if (_invoiceId)
        {
            vendInvoiceInfoTable.selectForUpdate(_forUpdate);

            select firstonly vendInvoiceInfoTable
                where vendInvoiceInfoTable.Num == _invoiceId &&
                      vendInvoiceInfoTable.PurchId == _purchId &&
                      vendInvoiceInfoTable.ParmId == _parmId;
        }
        return vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddress</Name>
				<Source><![CDATA[
    display LogisticsAddressing deliveryAddress()
    {
        return this.VendDocumentTableMap::deliveryAddress();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryCNPJCPFNUM_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the delivery CNPJ or CPF for the current record.
    /// </summary>
    /// <returns>
    /// Returns the CNPJ or CPF of the vendor if the adddress is a primary address.
    /// Returns the CNPJ or CPF related to delivery <c>logisticsPostalAddress</c> if the adddress is not a primary address.
    /// </returns>
    public display CNPJCPFNum_BR deliveryCNPJCPFNUM_BR()
    {
        DirPartyLocation dirPartyLocation;

        if (!BrazilParameters::isEnabled())
        {
            return '';
        }

        select firstonly dirPartyLocation where dirPartyLocation.Location == this.deliveryLocation_BR();

        return DirPartyLocationEx::cnpjCPFNum_BR(dirPartyLocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryIENum_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the delivery IE for the current record.
    /// </summary>
    /// <returns>
    /// Returns the IE of the vendor if the adddress is a primary address.
    /// Returns the IE related to delivery <c>logisticsPostalAddress</c> if the adddress is not a primary address.
    /// </returns>
    public display IENum_BR deliveryIENum_BR()
    {
        DirPartyLocation dirPartyLocation;

        if (!BrazilParameters::isEnabled())
        {
            return '';
        }

        select firstonly dirPartyLocation where dirPartyLocation.Location == this.deliveryLocation_BR();

        return DirPartyLocationEx::IENum_BR(dirPartyLocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryLocation_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>RecId</c> field of the <c>LogisticsLocation</c> record that is associated with the
    /// specified <c>DeliveryPostalAddress</c> record.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c> field of the <c>LogisticsLocation</c> record that is associated with the specified
    /// <c>DeliveryPostalAddress</c> record.
    /// </returns>
    public LogisticsLocationRecId deliveryLocation_BR()
    {
        return LogisticsPostalAddress::getLocation(this.DeliveryPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the image position that displays the <c>BudgetCheckResult</c> enumeration value for the given
    /// <c>VendInvoiceInfoTable</c> record in the <c>BudgetCheckResult</c> values image list.
    /// </summary>
    /// <returns>
    /// An <c>ImageBudgetCheckResult</c> value to indicate the image position in the
    /// <c>BudgetCheckResult</c> values image list.
    /// </returns>
    public display BudgetCheckResult displayBudgetCheckResult()
    {
        return this.getBudgetCheckResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCashDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the cash discount value for the current record.
    /// </summary>
    /// <returns>Cash discount value for the current record.</returns>
    [SysClientCacheDataMethod(true)]
    public display CashDiscCode displayCashDisc()
    {
        CashDiscCode cashDiscCode;

        if (this.isNonPO())
        {
            cashDiscCode = this.CashDiscCode;
        }
        else
        {
            cashDiscCode = PurchTable::find(this.PurchId).CashDisc;
        }

        return cashDiscCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInvoiceStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the invoice status of unposted invoices.
    /// </summary>
    /// <returns>
    /// An <c>InvoiceStatus</c> enumeration value that indicates the status in the posting and payment
    /// process of the invoice.
    /// </returns>
    /// <remarks>
    /// The <c>InvoiceStatus</c> enumeration contains four possible values. Un-posted values only represent
    /// one of those and therefore only one possible value is returned by this method. The
    /// <c>displayInvoiceStatus</c> method in the <c>VendInvoiceJour</c> table contains the other three
    /// statuses.
    /// </remarks>
    public display InvoiceStatus displayInvoiceStatus()
    {
        return InvoiceStatus::Unposted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInvoiceTotalsInMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the invoice amount in accounting currency.
    /// </summary>
    /// <returns>
    /// The invoice totals calculated in accounting currency.
    /// </returns>
    [SysClientCacheDataMethod]
    public display AmountMST displayInvoiceTotalsInMST()
    {
        SourceDocumentLine invoiceSourceDocumentLine = SourceDocumentLine::find(this.SourceDocumentLine);
        AmountCur totalAmountInTransactionCurrency;
        AmountMST totalAmountInMST;

        if (invoiceSourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::FullyDistributed)
        {
            AccountingDistribution accountingDistribution;
            VendInvoiceInfoLine vendInvoiceInfoLine;

            // Exclude all the prepayment application lines as the exchange rate
            // for these lines are stored on the corresponding prepayment invoices.
            select sum(TransactionCurrencyAmount) from accountingDistribution
                where AccountingDistribution.SourceDocumentHeader == this.SourceDocumentHeader
            notexists join vendInvoiceInfoLine
                where vendInvoiceInfoLine.SourceDocumentLine == accountingDistribution.SourceDocumentLine
                    && vendInvoiceInfoLine.LineType == PurchInvoiceLineType::AdvanceApplication;

            totalAmountInTransactionCurrency = accountingDistribution.TransactionCurrencyAmount;
            totalAmountInMST = CurrencyExchangeHelper::amountCur2MST(totalAmountInTransactionCurrency, this.CurrencyCode, this.ExchRate, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), this.ExchRateSecondary);

            VendInvoiceJour advanceVendInvoiceJour;

            //Add the amounts for prepayment application
            while select TransactionCurrencyAmount from accountingDistribution
                where accountingDistribution.SourceDocumentHeader == this.SourceDocumentHeader
            join vendInvoiceInfoLine
                where vendInvoiceInfoLine.SourceDocumentLine == accountingDistribution.SourceDocumentLine
                    && vendInvoiceInfoLine.LineType == PurchInvoiceLineType::AdvanceApplication
            join ExchRate, ExchrateSecondary, CurrencyCode from advanceVendInvoiceJour
                where advanceVendInvoiceJour.RecId == vendInvoiceInfoLine.AdvanceApplicationId
            {
                totalAmountInTransactionCurrency = accountingDistribution.TransactionCurrencyAmount;
                totalAmountInMST += CurrencyExchangeHelper::amountCur2MST(totalAmountInTransactionCurrency, advanceVendInvoiceJour.CurrencyCode, advanceVendInvoiceJour.ExchRate, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), advanceVendInvoiceJour.ExchRateSecondary);
            }
        }
        else
        {
            // Calculate document totals and use the exchange rate on
            // the invoice to calculate invoice totals in company currency.
            PurchTotals purchTotals = PurchTotals::newParmTable(this, PurchUpdate::ReceiveNow, this.ParmId, '', this.Ordering);
            purchTotals.calc();

            //<GIN>
            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                totalAmountInTransactionCurrency = purchTotals.purchNewTotalAmount() + purchTotals.parmTaxWithholdAmount_IN() + purchTotals.purchPreAppliedAmount();
            }
            else
            {
                //</GIN>
                totalAmountInTransactionCurrency = purchTotals.purchNewTotalAmount() + purchTotals.purchPreAppliedAmount();
                //<GIN>
            }
            //</GIN>

            totalAmountInMST = CurrencyExchangeHelper::amountCur2MST(totalAmountInTransactionCurrency, this.CurrencyCode, this.ExchRate, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), this.ExchRateSecondary);

            //Subtract the advance application amounts from the total amount
            VendInvoiceInfoLine advanceApplicationVendInvoiceInfoLine;
            VendInvoiceJour advanceVendInvoiceJour;

            while select LineAmount from advanceApplicationVendInvoiceInfoLine
                where advanceApplicationVendInvoiceInfoLine.LineType == PurchInvoiceLineType::AdvanceApplication
                    && advanceApplicationVendInvoiceInfoLine.TableRefId == this.TableRefId
                    && advanceApplicationVendInvoiceInfoLine.ParmId == this.ParmId
                join ExchRate, ExchrateSecondary, CurrencyCode from advanceVendInvoiceJour
                    where advanceVendInvoiceJour.RecId == advanceApplicationVendInvoiceInfoLine.AdvanceApplicationId
            {
                totalAmountInTransactionCurrency = advanceApplicationVendInvoiceInfoLine.LineAmount;
                totalAmountInMST -= CurrencyExchangeHelper::amountCur2MST(totalAmountInTransactionCurrency, advanceVendInvoiceJour.CurrencyCode, advanceVendInvoiceJour.ExchRate, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), advanceVendInvoiceJour.ExchRateSecondary);
            }
        }

        return totalAmountInMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPaymTerms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the Payment terms for the current record.
    /// </summary>
    /// <returns>Payment terms for the current record.</returns>
    [SysClientCacheDataMethod(true)]
    public display PaymTermId displayPaymTerms()
    {
        PaymTermId paymTermId;

        if (this.isNonPO())
        {
            paymTermId = this.Payment;
        }
        else
        {
            paymTermId = PurchTable::find(this.PurchId).payment;
        }

        return paymTermId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPurchID</Name>
				<Source><![CDATA[
    public display PurchId displayPurchID()
    {
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
        PurchId displayPurchId = this.PurchId;
        boolean subTableFound;

        while select OrigPurchId from vendInvoiceInfoSubTable
            where vendInvoiceInfoSubTable.ParmId == this.ParmId &&
                  vendInvoiceInfoSubTable.TableRefId == this.TableRefId &&
                  vendInvoiceInfoSubTable.OrigPurchId != ''
        {
            if (subTableFound)
            {
                displayPurchId = "@SYS342615";
                break;
            }

            subTableFound = true;
            displayPurchId = vendInvoiceInfoSubTable.OrigPurchId;
        }

        return displayPurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRemittanceAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the vendor remittance address associated with the vendor remittance location on the
    /// <c>VendInvoiceInfoTable</c> table.
    /// </summary>
    /// <returns>
    /// The remittance address.
    /// </returns>
    /// <remarks>
    /// The current date effective remittance address is always returned.
    /// </remarks>
    public display RemittanceAddressing displayRemittanceAddress()
    {
        if (!hasFieldAccess(tableNum(LogisticsPostalAddress), fieldNum(LogisticsPostalAddress, Address),AccessType::View))
        {
            error("@SYS57330");
        }

        return LogisticsLocationEntity::location2PostalAddress(this.RemittanceLocation).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVendIDAndName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the combination of teh Vendor Id and name from the <c>VendInvoiceInfoTable</c> record.
    /// </summary>
    /// <returns>Invoice number for the current <c>VendInvoiceInfoLine</c> record.</returns>
    [SysClientCacheDataMethod(true)]
    public display str displayVendIDAndName()
    {
        return this.InvoiceAccount + ': ' + this.PurchName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAutomationWorkflowSubmissionStatus</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethod(true)]
    public display str displayAutomationWorkflowSubmissionStatus()
    {
        VendInvoiceAutomationSubmitToWorkflow submissionStatus = VendInvoiceAutomationSubmitToWorkflow::NotApplicable;
        boolean isManualInvoicesIntoAutomationFeatureOn = VendInvoiceIncludeManualCreatedInvoiceIntoAutomationFeature::isEnabled();

        if (this.DocumentOrigin == DocumentOrigin::Service
            || isManualInvoicesIntoAutomationFeatureOn)
        {
            DocumentEventLog workflowSubmissionEventLog = this.findMostRecentEventLogEntryOfType(enumNum(VendInvoiceautomationSubmitToWorkflow));

            if (workflowSubmissionEventLog)
            {
                submissionStatus = workflowSubmissionEventLog.EventEnumValue;
            }
            else
            {
                if (isManualInvoicesIntoAutomationFeatureOn)
                {
                    if (this.IncludeInAutomatedProcessing == NoYes::Yes
                        && this.AutomationStatus == VendInvoiceAutomationStatus::Included)
                    {
                        submissionStatus = VendInvoiceAutomationSubmitToWorkflow::NotYetRun;
                    }
                }
                else
                {
                    submissionStatus = VendInvoiceAutomationSubmitToWorkflow::NotYetRun;
                }
            }
        }

        return enum2Str(submissionStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMostRecentEventLogEntryOfType</Name>
				<Source><![CDATA[
    internal DocumentEventLog findMostRecentEventLogEntryOfType(EnumId _documentEventType)
    {
        DocumentEvent documentEvent;
        DocumentEventLog documentEventLog;

        select firstonly documentEventLog
            order by documentEventLog.Sequence desc
            where documentEventLog.SourceRecId == this.RecId
               && documentEventLog.SourceTableId == this.TableId
            exists join documentEvent
                where documentEvent.RecId == documentEventLog.DocumentEvent
                   && documentEvent.EventEnumId == _documentEventType;

        return documentEventLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributionUpdateNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c>VendInvoiceInfoTable</c> table buffer will update the
    /// associated <c>SourceDocumentDistribution</c> table.
    /// </summary>
    /// <param name="_original">
    /// The original <c>VendInvoiceInfoTable</c> record.
    /// </param>
    /// <returns>
    /// true if the associated <c>SourceDocumentDistribution</c> records will be updated; otherwise, false.
    /// </returns>
    public boolean distributionUpdateNeeded(VendInvoiceInfoTable _original)
    {
        return ((this.SourceDocumentLine == 0) ||
                    (this.InvoiceRoundOff != _original.InvoiceRoundOff) ||
                    (this.updateDate() != _original.updateDate()) ||
                    (this.taxDate() != _original.taxDate()) ||
                    (this.EndDisc != _original.EndDisc) ||
                    (this.TaxGroup != _original.TaxGroup) ||
                    (this.ReCalculate != _original.ReCalculate) ||
                    (this.CurrencyCode != _original.CurrencyCode) ||
                    (this.ExchRate != _original.ExchRate) ||
                    (this.ReportingCurrencyExchangeRate != _original.ReportingCurrencyExchangeRate) ||
                    (this.ExchRateSecondary != _original.ExchRateSecondary) ||
                    (this.euroTriangulation != _original.euroTriangulation) ||
                    (this.InclTax != _original.InclTax) ||
                    (this.OverrideSalesTax != _original.OverrideSalesTax) ||
                    (this.MarkupGroup != _original.MarkupGroup) ||
                    (this.AccountingDistributionTemplate != _original.AccountingDistributionTemplate) ||
                    (!DimensionDefaultFacade::areEqual(this.DefaultDimension, _original.DefaultDimension)) ||
                    (this.CashDiscCode != _original.CashDiscCode && (TaxParameters::find().TaxLessCashDisc || Tax::isTaxIntegrationEnabledForTable(this.TableId))) ||
                    (this.DocumentDate != _original.DocumentDate)) ||
                    (this.AccrueSalesTaxType == TaxAccrueSalesTaxType::AdjustSalesTax
                        && FeatureStateProvider::isFeatureEnabled(TaxUseTaxAssessmentAdjustSalesTaxFeature::instance()) 
                        && this.VendorChargedSalesTax != _original.VendorChargedSalesTax) ||
                    this.distributionUpdateNeededForTaxIntegration(_original);
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributionUpdateNeededForTaxIntegration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the record in the <c>VendInvoiceInfoTable</c> table should update the
    /// associated <c>AccountingDistribution</c> table, when tax integration is enabled.
    /// </summary>
    /// <param name = "_vendInvoiceInfoTableOrig">
    /// The original vendor invoice table which is updated.
    /// </param>
    /// <returns>
    /// true if the <c>AccountingDistribution</c> table has to be updated for tax integration; otherwise, false.
    /// </returns>
    protected boolean distributionUpdateNeededForTaxIntegration(VendInvoiceInfoTable _vendInvoiceInfoTableOrig)
    {
        return Tax::isTaxIntegrationEnabledforBusinessProcess(TaxIntegrationBusinessProcess::Purchase)
            && (this.InventLocationId != _vendInvoiceInfoTableOrig.InventLocationId
                || this.InventSiteId != _vendInvoiceInfoTableOrig.InventSiteId
                || this.ListCode != _vendInvoiceInfoTableOrig.ListCode
                || this.DeliveryPostalAddress != _vendInvoiceInfoTableOrig.DeliveryPostalAddress
                || this.TransportationDocument != _vendInvoiceInfoTableOrig.TransportationDocument
                // When VATNum is changed, trigger update.
                || (this.VATNum != _vendInvoiceInfoTableOrig.VATNum
                    || this.VATNumRecId != _vendInvoiceInfoTableOrig.VATNumRecId
                    || this.VATNumTableType != _vendInvoiceInfoTableOrig.VATNumTableType)
                || (TaxIntegrationUtils::isTaxIntegrationEnabledForTaxSolutionProvider()
                    && (this.ReceivedDate != _vendInvoiceInfoTableOrig.ReceivedDate
                        || this.VendorVATDate != _vendInvoiceInfoTableOrig.VendorVATDate))
                || (TaxIntegrationUtils::isTaxIntegrationUseTaxAssessmentEnabled(TaxIntegrationBusinessProcess::Purchase)
                    && (this.VendorChargedSalesTax != _vendInvoiceInfoTableOrig.VendorChargedSalesTax
                        || this.AccrueSalesTaxType != _vendInvoiceInfoTableOrig.AccrueSalesTaxType)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDate</Name>
				<Source><![CDATA[
    public DocumentDate documentDate()
    {
        return this.VendDocumentTableMap::documentDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentId</Name>
				<Source><![CDATA[
    public Num documentId(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        VendInvoiceInfoSubLine vendInvoiceInfoSubLine;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        Num documentId;
        NumberOfRecords oneSubLines = 1;
        NumberOfRecords zeroSubLines = 0;

        switch (VendInvoiceInfoSubLine::subLinesTable(_vendInvoiceInfoTable,true))
        {
            case zeroSubLines:
                documentId = '';
                break;

            case oneSubLines:
                select firstonly DocumentId from vendInvoiceInfoSubLine
                    exists join vendInvoiceInfoLine
                    where vendInvoiceInfoSubLine.LineRefRecId == vendInvoiceInfoLine.RecId &&
                          vendInvoiceInfoLine.ParmId == _vendInvoiceInfoTable.ParmId &&
                          vendInvoiceInfoLine.TableRefId == _vendInvoiceInfoTable.TableRefId;
                documentId = vendInvoiceInfoSubLine.DocumentId;

                break;

            default:
                documentId = "@SYS342615"; //More than one journal line attached to the parm line
                break;
        }

        return documentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets or retrieves the current exchange rate.
    /// </summary>
    /// <param name="set">
    /// A Boolean value that specifies whether the caller is supplying a new value or if the current value
    /// should be retrieved.
    /// </param>
    /// <param name="_exchRate">
    /// The new exchange rate value When the set parameter is true.
    /// </param>
    /// <returns>
    /// The exchange rate to be displayed.
    /// </returns>
    public edit ExchRate editExchRate(boolean set, ExchRate _exchRate)
    {
        return this.VendDocumentTableMap::editExchRate(set, _exchRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editExchRateSecond</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets or retrieves the secondary exchange rate.
    /// </summary>
    /// <param name="set">
    /// A Boolean value that specifies whether the caller is supplying a new value or the current value
    /// should be retrieved.
    /// </param>
    /// <param name="_exchRate">
    /// The new secondary exchange rate value when the set parameter is true.
    /// </param>
    /// <returns>
    /// The secondary exchange rate to be displayed.
    /// </returns>
    public edit VendExchrateSecondary editExchRateSecond(boolean set, ExchrateSecondary _exchRate)
    {
        return this.VendDocumentTableMap::editExchRateSecond(set, _exchRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReportingCurrencyFixedExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets or retrieves the reporting currency fixed exchange rate.
    /// </summary>
    /// <param name="_set">
    /// A boolean value that specifies whether the caller is supplying a new value or the current value
    /// should be retrieved.
    /// </param>
    /// <param name="_exchRate">
    /// The new reporting currency fixed exchange rate value when the set parameter is true.
    /// </param>
    /// <returns>
    /// The reporting currency fixed exchange rate to be displayed.
    /// </returns>
    internal edit ReportingCurrencyExchRate editReportingCurrencyFixedExchangeRate(boolean _set, ReportingCurrencyExchRate _exchRate)
    {
        return this.CustVendReportingCurrencyFixedExchangeRate::editReportingCurrencyFixedExchangeRate(_set, _exchRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingCurrencyExchangeRateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the reporting currency exchange rate field ID.
    /// </summary>
    /// <returns>
    ///     The reporting currency exchange rate field ID.
    /// </returns>
    /// <remarks>
    ///     Used with the <c>CustVendReportingCurrencyFixedExchangeRate</c> map.
    /// </remarks>
    internal FieldId getReportingCurrencyExchangeRateField()
    {
        return fieldNum(VendInvoiceInfoTable, ReportingCurrencyExchangeRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the currency code.
    /// </summary>
    /// <returns>
    ///     The currency code.
    /// </returns>
    /// <remarks>
    ///     Used with the <c>CustVendReportingCurrencyFixedExchangeRate</c> map.
    /// </remarks>
    internal CurrencyCode getCurrencyCode()
    {
        return this.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editIsVendorAdvance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets or retrieves the <c>InvoiceType</c> field value.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that specifies whether the caller is supplying a new value or wants to retrieve the current value.
    /// </param>
    /// <param name="_isVendorAdvance">
    /// When the set parameter is true, the vendor advance checkbox value.
    /// </param>
    /// <returns>
    /// Yes if the invoice is marked as vendor advance; otherwise No.
    /// </returns>
    public edit NoYes editIsVendorAdvance(boolean _set, NoYes _isVendorAdvance)
    {
        NoYes isVendorAdvance = _isVendorAdvance;

        if (_set)
        {
            if (_isVendorAdvance == NoYes::Yes)
            {
                this.InvoiceType = PurchInvoiceType::VendorAdvance;
            }
            else
            {
                this.InvoiceType = PurchInvoiceType::Standard;
            }
        }
        else
        {
            if (this.InvoiceType == PurchInvoiceType::VendorAdvance)
            {
                isVendorAdvance = NoYes::Yes;
            }
        }
        return isVendorAdvance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPurchID</Name>
				<Source><![CDATA[
    public edit PurchId editPurchID(boolean _set, PurchId _purchId)
    {
        PurchId originalPurchID;

        if (_set)
        {
            originalPurchID = this.PurchId;
            this.PurchId = _purchId;

            if (!this.validateField(fieldNum(VendInvoiceInfoTable, PurchId)))
            {
                this.PurchId = originalPurchID;
            }

            // When the PurchId is set, display that Id until the SubTable record(s) exist
            return this.PurchId;
        }

        return this.displayPurchID();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDeliveryAddressFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether or not to enable delivery address fields for the current record.
    /// </summary>
    /// <returns> True if there is an order account specified, but no PurchId specified.</returns>
    public boolean enableDeliveryAddressFields()
    {
        return this.InvoiceAccount && this.isNonPO();
    }

]]></Source>
			</Method>
			<Method>
				<Name>existLine</Name>
				<Source><![CDATA[
    public boolean existLine()
    {
        return VendInvoiceInfoLine::existTableRefId(this.ParmId, this.TableRefId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existUnallocatedMiscCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether there are unallocated miscellaneous charges for the current invoice.
    /// </summary>
    /// <returns>
    /// true if there are unallocated miscellaneous charges for the current invoice; otherwise, false .
    /// </returns>
    public boolean existUnallocatedMiscCharge()
    {
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;

        //check this record
        if (MarkupTrans::exist(this.TableId, this.RecId))
        {
            return true;
        }

        // Check all children of this record
        while select RecId, TableId from vendInvoiceInfoSubTable
                where vendInvoiceInfoSubTable.ParmId == this.ParmId &&
                      vendInvoiceInfoSubTable.TableRefId == this.TableRefId
        {
            if (MarkupTrans::exist(vendInvoiceInfoSubTable.TableId, vendInvoiceInfoSubTable.RecId))
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstPackingSlipDate_ES</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the earliest delivery date from packing slips matched to current invoice.
    /// </summary>
    /// <returns>
    /// The <c>DeliveryDate</c> value of <c>VendPackingSlipTrans</c>.
    /// </returns>
    public TransDate firstPackingSlipDate_ES()
    {
        VendPackingSlipTrans vendPackingSlipTrans;
        VendInvoiceInfoSubLine purchParmSubLine;
        VendInvoiceInfoLine purchParmLine;

        select minof(DeliveryDate) from vendPackingSlipTrans
            exists join purchParmSubLine
                where purchParmSubLine.JournalRefRecId == vendPackingSlipTrans.RecId &&
                      purchParmSubLine.JournalRefTableId == vendPackingSlipTrans.TableId
                exists join purchParmLine
                    where purchParmLine.RecId == purchParmSubLine.LineRefRecId &&
                          purchParmLine.TableRefId == this.TableRefId &&
                          purchParmLine.ParmId == this.ParmId;

        return vendPackingSlipTrans.DeliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>BudgetCheckResult</c> value for the given <c>VendInvoiceInfoTable</c> record.
    /// </summary>
    /// <returns>
    /// The <c>BudgetCheckResult</c> value.
    /// </returns>
    public BudgetCheckResult getBudgetCheckResult()
    {
        BudgetSourceSourceDocumentHeader budgetSourceSourceDocumentHeader;

        // Get the budget check result for the header only, exclude the line results
        budgetSourceSourceDocumentHeader = BudgetSourceSourceDocumentHeader::newBudgetSourceSourceDocumentHeader(this.SourceDocumentHeader);

        return budgetSourceSourceDocumentHeader.getHeaderBudgetCheckResult(tableNum(VendInvoiceInfoLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryEntityRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the delivery entity record based on the postal address.
    /// </summary>
    /// <returns>
    ///    A <c>CompanyInfo</c>, <c>InventLocation</c> or <c>InventSite</c> record.
    /// </returns>
    public Common getDeliveryEntityRecord()
    {
        return this.TradePostalAddress::getDeliveryEntityRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEUROTriangulation</Name>
				<Source><![CDATA[
    public UnknownNoYes getEUROTriangulation()
    {
        return this.VendDocumentTableMap::getEUROTriangulation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchRateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the date used to select an exchange rate.
    /// </summary>
    /// <param name="_date">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// The date used to select the exchange rate.
    /// </returns>
    public TransDate getExchRateDate(TransDate _date)
    {
        return this.VendDocumentTableMap::getExchRateDate(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalEstablishment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the fiscal establishments of the current <c>VendInvoiceInfoTable</c> table record.
    /// </summary>
    /// <returns>
    /// A container with the fiscal establishments of the current <c>VendInvoiceInfoTable</c> table record.
    /// </returns>
    public container getFiscalEstablishment()
    {
        container conFiscalEstablishment;
        FiscalEstablishment_BR fiscalEstablishment;
        FiscalEstablishmentInventSite_BR fiscalestablishmentinventSite;
        InventDim inventDim;
        VendInvoiceInfoLine vendInvoiceInfoLine;

        while select RecId
            from fiscalEstablishment
                exists join fiscalestablishmentinventSite
                    where fiscalestablishmentinventSite.FiscalEstablishment_BR == fiscalEstablishment.RecId
                        exists join inventDim
                            where inventDim.InventSiteId == fiscalestablishmentinventSite.InventSite
                                exists join vendInvoiceInfoLine
                                    where vendInvoiceInfoLine.InventDimId == inventDim.InventDimId
                                        && vendInvoiceInfoLine.TableRefId == this.TableRefId
                                        && vendInvoiceInfoLine.ParmId == this.ParmId
        {
            conFiscalEstablishment += fiscalEstablishment.RecId;
        }

        return conFiscalEstablishment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastFailedAutoSubmissionMessageLog</Name>
				<Source><![CDATA[
    private ProcessExecutionMessageLog getLastFailedAutoSubmissionMessageLog()
    {
        ProcessScheduleSeries series;
        ProcessScheduleSeriesPattern pattern;
        ProcessExecutionSourceLink sourceLink;
        ProcessExecutionMessageLog messageLog;

        select firstonly RecId from series
            where series.Name == VendInvoiceAutomationWorkflowSubmissionTaskConstants::SeriesName
            join firstonly RecId from pattern
                where pattern.ProcessScheduleSeries == series.RecId
            join firstonly RecId from sourceLink
                order by sourceLink.DateTimeCreated desc
                    where sourceLink.ProcessScheduleSeriesPattern == pattern.RecId
                    && sourceLink.RefRecId == this.RecId
            join firstonly messageLog
                where sourceLink.RecId == messageLog.ProcessExecutionSourceLink;
           
        return messageLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastFailedAutoSubmissionTime</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethod(true)]
    public display utcdatetime getLastFailedAutoSubmissionTime()
    { 
        ProcessExecutionMessageLog messageLog = this.getLastFailedAutoSubmissionMessageLog();
        if (messageLog)
        {
            return messageLog.CreatedDateTime;
        }
        return DateTimeUtil::minValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastFailedAutoSubmissionError</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethod(true)]
    public display str getLastFailedAutoSubmissionError()
    {
        ProcessExecutionMessageLog messageLog = this.getLastFailedAutoSubmissionMessageLog();
        if (messageLog)
        {
            return SysLabel::labelId2String(messageLog.LabelId);
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWorkflowPendingTime</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethod(true)]
    public display str displayWorkflowPendingTime()
    {
        VendInvoiceWorkflowCurrentTrackingStatusView currentTrackingStatusView = VendInvoiceWorkflowCurrentTrackingStatusView::find(this.RecId, this.TableId);
        WorkflowTrackingStatusTable trackingStatusTable = WorkflowTrackingStatusTable::findRecId(currentTrackingStatusView.TrackingStatusTable);      
        return trackingStatusTable.getElapsedTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWorkflowLastApprover</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethod(true)]
    public display str displayWorkflowLastApprover()
    {
        VendInvoiceWorkflowCurrentTrackingStatusView currentTrackingStatusView = VendInvoiceWorkflowCurrentTrackingStatusView::find(this.RecId, this.TableId);
        WorkflowTrackingTable trackingTable;
        select firstonly trackingTable 
            where trackingTable.WorkflowTrackingStatusTable == currentTrackingStatusView.TrackingStatusTable
                && trackingTable.TrackingType == WorkflowTrackingType::Rejection;
        return trackingTable.User; 
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWorkflowErrorMessage</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethod(true)]
    public display str displayWorkflowErrorMessage()
    {
        VendInvoiceWorkflowCurrentTrackingStatusView currentTrackingStatusView = VendInvoiceWorkflowCurrentTrackingStatusView::find(this.RecId, this.TableId);

        WorkflowTrackingTable trackingTable;
        select firstonly trackingTable
            where trackingTable.WorkflowTrackingStatusTable == currentTrackingStatusView.TrackingStatusTable
                && (trackingTable.TrackingType == WorkflowTrackingType::Fault
                || trackingTable.TrackingType == WorkflowTrackingType::Unrecoverable);

        return trackingTable.commentTable().getLocalizeTrackingMessage();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWorkflowRejectedReason</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethod(true)]
    public display str displayWorkflowRejectedReason()
    {
        VendInvoiceWorkflowCurrentTrackingStatusView currentTrackingStatusView;
        select firstonly currentTrackingStatusView
            where currentTrackingStatusView.ContextRecId == this.RecId
                && currentTrackingStatusView.ContextTableId == this.TableId;

        WorkflowTrackingTable trackingTable;
        select firstonly trackingTable
            where trackingTable.WorkflowTrackingStatusTable == currentTrackingStatusView.TrackingStatusTable
                && trackingTable.TrackingType == WorkflowTrackingType::Rejection;

        return trackingTable.commentTable().Comment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLinesOtherThanPrepayApplicationLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the invoice has any lines that aren't prepayment application lines.
    /// </summary>
    /// <returns>
    /// true if the invoice has lines that aren't prepayment application lines; otherwise, false.
    /// </returns>
    public boolean hasLinesOtherThanPrepayApplicationLines()
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;

        select firstonly RecId from vendInvoiceInfoLine
            where vendInvoiceInfoLine.TableRefId == this.TableRefId
            && vendInvoiceInfoLine.ParmId == this.ParmId
            && vendInvoiceInfoLine.LineType != PurchInvoiceLineType::AdvanceApplication;

        return vendInvoiceInfoLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPrepaymentApplicationLines</Name>
				<Source><![CDATA[
    public boolean hasPrepaymentApplicationLines()
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;

        select firstonly RecId from vendInvoiceInfoLine
            where vendInvoiceInfoLine.TableRefId == this.TableRefId
            && vendInvoiceInfoLine.ParmId == this.ParmId
            && vendInvoiceInfoLine.LineType == PurchInvoiceLineType::AdvanceApplication;

        return vendInvoiceInfoLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasToIssueFiscalDocument_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the fiscal document must be issued by this company for this vendor invoice.
    /// </summary>
    /// <returns>true if fiscal document is issued by own company; false if it's third-party.</returns>
    public boolean hasToIssueFiscalDocument_BR()
    {
        boolean retValue;

        retValue = (this.purchTable().hasIssueFiscalDocument() || this.vendTable_InvoiceAccount().NonTaxable_BR ) &&
                   this.Ordering == DocumentStatus::Invoice;

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineAccessToWorkflowActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to determine whether or not the current user has access rights to a particular workflow action for the current <c>VendInvoiceInfoTable</c> record.
    /// </summary>
    /// <param name = "_action">The localized string value representing the workflow action</param>
    /// <returns>A boolean indicating whether or not the current user has access to the requested workflow action for the current invoice.</returns>
    public boolean determineAccessToWorkflowActions(str _action)
    {
        if (_action && new MenuFunction(_action, MenuItemType::Action).checkAccessRights())
        {
            container workItemsContainer, menuItemsContainer;
            List workItems = new List(Types::Guid);
            List menuItems = new List(Types::String);
            ListEnumerator workItemEnumerator;
            ListEnumerator menuItemEnum;
            WorkflowTrackingStatusTable trackingStatusTable;
            WorkflowWorkItemTable workItemTable;
            WorkflowOutcomeName workflowOutcomeName;
            str messageText, instruction;
            MenuFunction actionMenuItem;

            [workItemsContainer, trackingStatusTable] = SysWorkflowFormControls::findWorkItemsAndTrackingData(this);
            workItems = List::create(workItemsContainer);
            workItemEnumerator = workItems.getEnumerator();

            while (workItemEnumerator.moveNext())
            {
                workItemTable = WorkflowWorkItemTable::find(workItemEnumerator.current());

                if (workItemTable.Status == WorkflowWorkItemStatus::Pending)
                {
                    [menuItemsContainer, messageText, instruction] = SysWorkflowFormControls::getActionBarContentForWorkItem(workItemTable);

                    if (conFind(menuItemsContainer, _action) > 0)
                    {
                        return true;
                    }
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showAccept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method used to show whether or not the current user has access to Accept the current invoice and that the invoice has that action
    /// available at the current step of workflow.
    /// </summary>
    /// <returns>A boolean indicating whether or not to show the Accept action on the invoice approval mobile app.</returns>
    [SysClientCacheDataMethod(true)]
    public display boolean showAccept()
    {
        return this.determineAccessToWorkflowActions(menuItemActionStr(WorkflowClaimWorkItem));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showApprove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method used to show whether or not the current user has access to Approve the current invoice and that the invoice has that action
    /// available at the current step of workflow.
    /// </summary>
    /// <returns>A boolean indicating whether or not to show the Approve action on the invoice approval mobile app.</returns>
    [SysClientCacheDataMethod(true)]
    public display boolean showApprove()
    {
        return this.determineAccessToWorkflowActions(menuItemActionStr(VendInvoiceApprovalApprove));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method used to show whether or not the current user has access to Complete the current invoice and that the invoice has that action
    /// available at the current step of workflow.
    /// </summary>
    /// <returns>A boolean indicating whether or not to show the Complete action on the invoice approval mobile app.</returns>
    [SysClientCacheDataMethod(true)]
    public display boolean showComplete()
    {
        return this.determineAccessToWorkflowActions(menuItemActionStr(VendInvoiceTaskComplete));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showReject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method used to show whether or not the current user has access to Reject the current invoice and that the invoice has that action
    /// available at the current step of workflow.
    /// </summary>
    /// <returns>A boolean indicating whether or not to show the Reject action on the invoice approval mobile app.</returns>
    [SysClientCacheDataMethod(true)]
    public display boolean showReject()
    {
        return this.determineAccessToWorkflowActions(menuItemActionStr(VendInvoiceApprovalReject)) || this.determineAccessToWorkflowActions(menuItemActionStr(VendInvoiceTaskReject));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showRequestChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method used to show whether or not the current user has access to Request change the current invoice and that the invoice has that action
    /// available at the current step of workflow.
    /// </summary>
    /// <returns>A boolean indicating whether or not to show the Request change action on the invoice approval mobile app.</returns>
    [SysClientCacheDataMethod(true)]
    public display boolean showRequestChange()
    {
        return this.determineAccessToWorkflowActions(menuItemActionStr(VendInvoiceApprovalRequestChange));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method used to show whether or not the current user has access to Delegate the current invoice and that the invoice has that action
    /// available at the current step of workflow.
    /// </summary>
    /// <returns>A boolean indicating whether or not to show the Delegate action on the invoice approval mobile app.</returns>
    [SysClientCacheDataMethod(true)]
    public display boolean showDelegate()
    {
        return this.determineAccessToWorkflowActions(menuItemActionStr(VendInvoiceTaskDelegate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showRecall</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method used to show whether or not the current user has access to Recall the current invoice and that the invoice has that action
    /// available at the current step of workflow.
    /// </summary>
    /// <returns>A boolean indicating whether or not to show the Recall action on the invoice approval mobile app.</returns>
    [SysClientCacheDataMethod(true)]
    public display boolean showRecall()
    {
        return this.determineAccessToWorkflowActions(menuItemActionStr(VendInvoiceHeaderWorkflowCancel));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showResubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method used to show whether or not the current user has access to Resubmit the current invoice and that the invoice has that action
    /// available at the current step of workflow.
    /// </summary>
    /// <returns>A boolean indicating whether or not to show the Resubmit action on the invoice approval mobile app.</returns>
    [SysClientCacheDataMethod(true)]
    public display boolean showResubmit()
    {
        return this.determineAccessToWorkflowActions(menuItemActionStr(VendInvoiceHeaderWorkflowReSubmit));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromActiveHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current <c>VendInvoiceInfoTable</c> record with the data in the specified
    /// <c>VendInvoiceInfoTable</c> record.
    /// </summary>
    /// <param name="_activeTable">
    /// The <c>VendInvoiceInfoTable</c> record from which to copy the that contains the data.
    /// </param>
    public void initFromActiveHeader(VendInvoiceInfoTable _activeTable)
    {
        // <GIN>
        #ISOCountryRegionCodes
        VendInvoiceInfoTable_W srcVendInvoiceInfoTable_W;
        VendInvoiceInfoTable_W destVendInvoiceInfoTable_W;
        // </GIN>
        this.copyFromHeader(_activeTable);
        // source document line need to be copied from active header later
        this.SourceDocumentLine = 0;
        this.ParmId = '';
        VendParameters vendParameters = VendParameters::find();

        if (vendParameters.editUseInvoiceMatching())
        {
            if (vendParameters.editAutomaticHeaderMatching() || _activeTable.LastMatchVariance == LastMatchVarianceOptions::Unknown)
            {
                this.LastMatchVariance = _activeTable.checkIfMatched(false, true);
            }
            else
            {
                this.LastMatchVariance = _activeTable.LastMatchVariance;
            }
        }
        // <GIN>
        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            destVendInvoiceInfoTable_W = this.vendInvoiceInfoTable_W();
            srcVendInvoiceInfoTable_W = _activeTable.vendInvoiceInfoTable_W();

            destVendInvoiceInfoTable_W.TaxInformation_IN = srcVendInvoiceInfoTable_W.TaxInformation_IN;
            this.packVendInvoiceInfoTable_W(destVendInvoiceInfoTable_W);
        }

        if (TaxParameters::isCustomsEnable_IN())
        {
            destVendInvoiceInfoTable_W = this.vendInvoiceInfoTable_W();
            srcVendInvoiceInfoTable_W = _activeTable.vendInvoiceInfoTable_W();

            destVendInvoiceInfoTable_W.CustomsBillOfEntryNumberTable_IN = srcVendInvoiceInfoTable_W.CustomsBillOfEntryNumberTable_IN;
            destVendInvoiceInfoTable_W.CustomsImportInvoiceNumberTable_IN = srcVendInvoiceInfoTable_W.CustomsImportInvoiceNumberTable_IN;
            this.packVendInvoiceInfoTable_W(destVendInvoiceInfoTable_W);
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromExchRates</Name>
				<Source><![CDATA[
    public void initFromExchRates(boolean _fetchEuroTriangulation = true)
    {
        this.VendDocumentTableMap::initFromExchRates(_fetchEuroTriangulation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchAgreementHeader_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates a <c>VendInvoiceInfoTable</c> record with values based on <c>PurchAgreementHeader</c> record.
    /// </summary>
    /// <param name="_purchAgreementHeader">
    /// A record of the table <c>PurchAgreementHeader</c>.
    /// </param>
    /// <param name="_copyDeliveryLocation">
    /// When set to true delivery location is copyed from <c>PurchAgreementHeader</c>.
    /// Default is true.
    /// </param>
    public void initFromPurchAgreementHeader_RU(PurchAgreementHeader _purchAgreementHeader, boolean _copyDeliveryLocation = true)
    {
        AgreementHeaderDefault agreementHeaderDefault;
        PurchAgreementHeaderDefault purchAgreementHeaderDefault;
        PurchAgreementHeaderExt_RU purchAgreementHeaderExt;
        CashDisc cashDisc;
        VendInvoiceInfoTable_RU vendInvociceInfoTable_RU = this.vendInvoiceInfoTable_RU();

        select firstonly DeliveryPostalAddress, DeliveryName, Project, ContactPerson,
                         CashDiscountCode, MiscChargeGroup, DeliveryTerm, DeliveryMode,
                         PaymentSchedule, PaymentTerms
            from agreementHeaderDefault
            where agreementHeaderDefault.AgreementHeader == _purchAgreementHeader.RecId
            join firstonly MethodOfPayment
                            , PaymentSpecification
                            , BuyerGroup
                            , VendorInvoiceAccount
                            , PurchasePool
                from purchAgreementHeaderDefault
                where purchAgreementHeaderDefault.PurchaseAgreementHeader == _purchAgreementHeader.RecId
            outer join firstonly RecId,
                                 InventProfileType,
                                 InventProfileId,
                                 VendPostingProfile,
                                 vatOperationCode,
                                 vatChargeSource
            from purchAgreementHeaderExt
            where purchAgreementHeaderExt.AgreementHeader == _purchAgreementHeader.RecId;

        vendInvociceInfoTable_RU.AgreementHeaderExt_RU = purchAgreementHeaderExt.RecId;

        if (_copyDeliveryLocation)
        {
            this.DeliveryPostalAddress = agreementHeaderDefault.DeliveryPostalAddress;
            this.DeliveryName = agreementHeaderDefault.DeliveryName;
        }
        this.MarkupGroup = agreementHeaderDefault.MiscChargeGroup;
        this.PaymentSched = agreementHeaderDefault.PaymentSchedule;
        this.Payment = agreementHeaderDefault.PaymentTerms;

        if (agreementHeaderDefault.CashDiscountCode)
        {
            // If CashDiscountCode is set for agreement header, query cash discount record and set proper CashDiscPercent value from it.
            cashDisc = CashDisc::find(agreementHeaderDefault.CashDiscountCode);
            this.CashDiscPercent = (cashDisc.RecId) ? cashDisc.Percent : 0.0;
        }

        this.PaymMode = purchAgreementHeaderDefault.MethodOfPayment;
        this.PaymSpec = purchAgreementHeaderDefault.PaymentSpecification;

        if (purchAgreementHeaderDefault.VendorInvoiceAccount)
        {
            // Copy VendorInvoiceAccount from Agreement ONLY if it is not-empty.
            this.InvoiceAccount = purchAgreementHeaderDefault.VendorInvoiceAccount;
        }

        if (purchAgreementHeaderExt.InventProfileType || purchAgreementHeaderExt.InventProfileId)
        {
            vendInvociceInfoTable_RU.InventProfileType_RU = purchAgreementHeaderExt.InventProfileType;
            vendInvociceInfoTable_RU.InventProfileId_RU = purchAgreementHeaderExt.InventProfileId;
        }

        if (purchAgreementHeaderExt.VendPostingProfile)
        {
            this.PostingProfile = purchAgreementHeaderExt.VendPostingProfile;
        }

        vendInvociceInfoTable_RU.vatOperationCode_RU = purchAgreementHeaderExt.vatOperationCode;
        vendInvociceInfoTable_RU.vatChargeSource_RU = purchAgreementHeaderExt.vatChargeSource;

        if (this.PaymentSched)
        {
            this.FixedDueDate = dateNull();
        }

        vendInvociceInfoTable_RU.AgreementHeaderExt_RU = purchAgreementHeaderExt.RecId;
        this.packVendInvoiceInfoTable_RU(vendInvociceInfoTable_RU);

        this.DefaultDimension = this.copyDimension(_purchAgreementHeader.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchTable</Name>
				<Source><![CDATA[
    public void initFromPurchTable(PurchTable _purchTable)
    {
        this.type(_purchTable).initFromPurchTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoiceTotals</Name>
				<Source><![CDATA[
    public void initInvoiceTotals(boolean skipPending = false)
    {
        if (skipPending && this.VendInvoiceSaveStatus == VendInvoiceSaveStatus::Pending)
        {
            return;
        }

        this.VendDocumentTableMap::initTotals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the current table record into the database.
    /// </summary>
    /// <param name="_defaultRelatedTables">
    /// A Boolean value that indicates whether related tables should be set to default values on insert.
    /// </param>
    /// <remarks>
    /// Makes sure the <c>TableRefId</c>, <c>SourceDocumentHeader</c>, and <c>SourceDocumentLine</c> fields
    /// contain a value.The <paramref name="_defaultRelatedTables" /> parameter is typically set to false
    /// when <c>VendInvoiceTable</c> records are copied between the saved and active images of this
    /// document.
    /// </remarks>
    public void insert(boolean _defaultRelatedTables = true)
    {
        ttsbegin;

        if (this.TableRefId == '')
        {
            this.TableRefId = formletterParmData::getNewTableRefId();
        }

        // Insert and reference a source document line
        SourceDocumentProcessorFacade::submitSourceDocumentImplementation(this);
        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);

        this.updateVendorChargedSalesTax();

        super();

        this.SysExtensionSerializerMap::postInsert();

        if (_defaultRelatedTables)
        {
            // Create <c>markUpTrans</c> for non-intercompany, non-po scenarios, non-imported invoice. 
            // For intercompany, non-PO scenario, <c>markUpTrans</c> will be created later in
            // <c>ProjIntercompanyVendorInvoiceCreator</c> class after <c>vendInvoiceInfoSubTable</c> is initialized.
            if (!ProjIntercompanyCreateMarkUpTransForNonPOFlight::instance().isEnabled()
                || (this.DocumentOrigin != DocumentOrigin::Service
                    && this.isNonPO()
                    && !this.vendTable_InvoiceAccount().interCompanyTradingRelationActive()))
            {
                this.createMarkupTrans();
            }

            // <GBR>
            if (BrazilParameters::isEnabled() && this.isNonPO())
            {
                FiscalDocumentTextUpdate_BR::newFromRecord(this).updateTexts(FiscalDocumentTextType_BR::CustVend);
            }
            // </GBR>
        }

        TradeBLWIJournalPurposeCodes::createRecord(TradeBLWICustVend::Vendor, this.RecId, this.InvoiceAccount, TradeBLWITypeOfForm::VendInvoice);

        if (TaxWithholdingGlobalFeature::isCalcWHTInInvoiceEnabled())
        {
            TaxWithholdUncommitted::deleteForDocumentHeader(this.TableId, this.RecId);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inUseDuration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method used to represent how long the vendor invoice is in use state.
    /// </summary>
    /// <returns>Days, hours and minutes elapsed since vendor invoice is in use state.</returns>
    internal display VendInvoiceInUseElapsedTime inUseDuration()
    {
        return VendInvoiceInfoTable::getDuration(PurchParmUpdate::find(this.ParmId).CreatedDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDuration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the elapsed time for vendor invoice is in use state.
    /// </summary>
    /// <param name="dateTime">
    /// Created date time for the particular <c>purchParmUpdate</c> record.
    /// </param>
    private static VendInvoiceInUseElapsedTime getDuration(CreatedDateTime dateTime)
    {
        int64 inUseTime = DateTimeUtil::getDifference(DateTimeUtil::utcNow(), dateTime);
        int64 days = inUseTime / VendInvoiceInUseTimeConstants::SecondsInDay;
        int64 hours = (inUseTime mod VendInvoiceInUseTimeConstants::SecondsInDay) / VendInvoiceInUseTimeConstants::SecondsInHour;
        int64 minutes = (inUseTime mod VendInvoiceInUseTimeConstants::SecondsInHour) / VendInvoiceInUseTimeConstants::SecondsInMinute;

        return strfmt("@AccountsPayable:ElapsedTimeDaysHoursMinutes", days, hours, minutes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether an active invoice occurs in the <c>VendInvoiceInfoTable</c> table
    /// Checks whether the invoice is in active state
    /// </summary>
    /// <param name="_tableRefId">
    /// The table reference ID of the invoice.
    /// </param>
    /// <param name="_excludeParmId">
    /// The parameter ID that should be excluded when you inspect for active invoices; optional.
    /// </param>
    /// <returns>
    /// true if the invoice is in active state; otherwise, false.
    /// </returns>
    public static boolean isActive(TradeLineRefId _tableRefId, ParmId _excludeParmId = '')
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        select firstonly RecId from vendInvoiceInfoTable
            where vendInvoiceInfoTable.ParmId != _excludeParmId &&
                vendInvoiceInfoTable.TableRefId == _tableRefId &&
                vendInvoiceInfoTable.ParmId != '' &&  // Ensure we're checking active invoices
                vendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed;

        return vendInvoiceInfoTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAdvance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an invoice is advance.
    /// </summary>
    /// <returns>
    /// true if the invoice is advance; otherwise, false.
    /// </returns>
    public boolean isAdvance()
    {
        return this.VendDocumentTableMap::isAdvance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isArranged</Name>
				<Source><![CDATA[
    public boolean isArranged()
    {
        boolean isArranged;
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;

        select count(RecId) from vendInvoiceInfoSubTable
            where vendInvoiceInfoSubTable.ParmId == this.ParmId &&
                  vendInvoiceInfoSubTable.TableRefId == this.TableRefId;

        if (vendInvoiceInfoSubTable.RecId > 1)
        {
            isArranged = true;
        }

        return isArranged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCancelDocument_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether this invoice is associated with a cancellation purchase order.
    /// </summary>
    /// <returns>
    /// true if the invoice is not associated with a cancellation purchase order; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Cancellation purchase order could be cancelling an issued Fiscal document or Reversing a received Fiscal document
    /// </remarks>
    public boolean isCancelDocument_BR()
    {
        return this.purchTable().purchTable_BR().isCancellingOrReversingFiscalDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDirectInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether this invoice is associated with a purchase agreement.
    /// </summary>
    /// <returns>
    /// true if the invoice is associated with a purchase agreement; otherwise, false .
    /// </returns>
    public boolean isDirectInvoice()
    {
        return this.VendDocumentTableMap::isDirectInvoice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForeignerVendor_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the vendor is a foreigner.
    /// </summary>
    /// <returns>
    /// True if the vendor is a foreigner; false, otherwise.
    /// </returns>
    public boolean isForeignerVendor_BR()
    {
        LogisticsPostalAddress vendorAddress, companyAddress;

        vendorAddress = DirParty::primaryPostalAddress(this.vendTable_OrderAccount().Party);
        companyAddress = DirParty::primaryPostalAddress(CompanyInfo::current());

        if (vendorAddress && companyAddress)
        {
            return vendorAddress.CountryRegionId != companyAddress.CountryRegionId;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInclTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the invoice includes tax in the line amount.
    /// </summary>
    /// <param name="_purchTable">
    /// The corresponding purchase order header record; optional.
    /// </param>
    /// <returns>
    /// true if the invoice includes tax; otherwise, false.
    /// </returns>
    public boolean isInclTax(PurchTable _purchTable = null)
    {
        boolean includeTax;

        if (this.isNonPO() || this.isAdvance())
        {
            includeTax = this.InclTax;
        }
        else
        {
            if (_purchTable)
            {
                includeTax = _purchTable.InclTax;
            }
            else
            {
                includeTax = this.purchTable().InclTax;
            }
        }

        return includeTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether this invoice is a credit note.
    /// </summary>
    /// <returns>
    /// true if the invoice is a credit note; otherwise, false.
    /// </returns>
    public boolean isCreditNote()
    {
        PurchTotals purchTotals = PurchTotals::newParmTable(this, PurchUpdate::All, this.ParmId, '', this.Ordering);
        purchTotals.calc();

        return purchTotals.isCreditNote();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNonPO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether this invoice is associated with a purchase order.
    /// </summary>
    /// <returns>
    /// true if the invoice is not associated with a purchase order; otherwise, false.
    /// </returns>
    public boolean isNonPO()
    {
        return this.VendDocumentTableMap::isNonPO();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPOInterCompany</Name>
				<Source><![CDATA[
    private boolean isPOInterCompany()
    {
        PurchTable purchTable = PurchTable::find(this.PurchId);
        return purchTable.isInterCompanyOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDocumentBeingProcessedInWorklow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether this invoice is being processed by the workflow framework.
    /// </summary>
    /// <returns>
    /// true if the invoice is submitted to workflow and is being processed by the workflow framework; otherwise, false.
    /// </returns>
    public boolean isDocumentBeingProcessedInWorklow()
    {
        return (this.RequestStatus == VendInvoiceRequestStatus::InReview || this.RequestStatus == VendInvoiceRequestStatus::Rejected);
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsTheFiscalDocumentIssuer_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the fiscal document will be issued by the current fiscal establishment or if a fiscal document issued by this fiscal establishment
    /// will be updated.
    /// </summary>
    /// <returns>true if fiscal document is issued or had been issued by own fiscal establishment; false if it's third-party.</returns>
    /// <remarks>
    /// Scenarios where this method will return true:
    /// <p> - Non taxable vendor / Cancelling Non taxable purchase order</p>
    /// <p> - Return order / Cancelling return purchase order </p>
    /// <p> - Importing / Cancelling import purchase order </p>
    /// </remarks>
    public boolean IsTheFiscalDocumentIssuer_BR()
    {
        return this.hasToIssueFiscalDocument_BR() || this.purchTable().isCancellingFiscalDocument_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the <c>Voucher</c> value that is associated with the invoice.
    /// </summary>
    /// <returns>
    /// The <c>Voucher</c> value that is associated with the invoice line.
    /// </returns>
    public Voucher ledgerVoucher()
    {
        VendInvoiceJour vendInvoiceJour;
        VendInvoiceTrans vendInvoiceTrans;
        SourceDocumentLine sourceDocumentLine;
        Voucher localVoucher;

        vendInvoiceJour = VendInvoiceJour::findSourceDocumentHeader(this.SourceDocumentHeader);

        select firstonly AdvanceApplicationId, InternalInvoiceId from vendInvoiceTrans
            order by CreatedDateTime desc, RecId desc
            join SourceDocumentHeader, RecId from sourceDocumentLine
            where sourceDocumentLine.SourceDocumentHeader == vendInvoiceJour.SourceDocumentHeader
                && vendInvoiceTrans.SourceDocumentLine == sourceDocumentLine.RecId;

        if (vendInvoiceTrans.AdvanceApplicationId)
        {
            localVoucher = vendInvoiceTrans.InternalInvoiceId;
        }
        else
        {
            localVoucher = vendInvoiceJour.LedgerVoucher;
        }

        return localVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPurchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements the custom lookup on the <c>PurchaseId</c> field.
    /// </summary>
    /// <param name="_ctrl">
    /// The control object that needs lookup.
    /// </param>
    public void lookupPurchId(Object _ctrl)
    {
        Args args = new Args();

        args.name(formStr(PurchIdLookup));
        args.caller(_ctrl);

        args.record(this);

        FormRun formRun = classfactory.formRunClass(args);
        formRun.init();
        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the associated <c>MarkupTrans</c> records may be added, changed, or deleted.
    /// </summary>
    /// <returns>
    /// true if modifications are allowed; otherwise, false.
    /// </returns>
    public boolean markupAllowed()
    {
        return this.VendDocumentTableMap::markupAllowed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field in this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field; optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was initialized from the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field in
    /// this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge _dimensionMerge = DimensionMerge::newFromTable(this, this.companyInfo().RecId))
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        #ISOCountryRegionCodes
        #EECountryRegionCodes

        VendInvoiceInfoTable_RU vendInvoiceInfoTable_RU;
        VendInvoiceInfoTable_W vendInvoiceInfoTable_W;

        Object formDataSource;
        boolean unapproveVariances;
        VendDocumentTableType_Invoice vendDocumentTableType;
        LogisticsElectronicAddress logisticsElectronicAddress;
        LogisticsLocation logisticsLocation;
        DirPartyLocation dirPartyLocation;
        DirPartyTable dirPartyTable;
        DirPerson dirPerson;
        HcmWorker hcmWorker;
        #ISOCountryRegionCodesVendInv_W

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(VendInvoiceInfoTable, InventLocationId):
                this.InventStorageDimMap::modifiedField(fieldNum(InventStorageDimMap, InventLocationId));

                vendDocumentTableType = this.type();
                if (vendDocumentTableType)
                {
                    this.fieldState(fieldNum(VendInvoiceInfoTable, DeliveryPostalAddress), FieldState::NotSet);
                    vendDocumentTableType.defaultField(fieldNum(VendInvoiceInfoTable, DeliveryPostalAddress));
                }

                break;

            case fieldNum(VendInvoiceInfoTable, InventSiteId):
                this.InventStorageDimMap::modifiedField(fieldNum(InventStorageDimMap, InventSiteId));

                vendDocumentTableType = this.type();
                if (vendDocumentTableType)
                {
                    this.fieldState(fieldNum(VendInvoiceInfoTable, DeliveryPostalAddress), FieldState::NotSet);
                    vendDocumentTableType.defaultField(fieldNum(VendInvoiceInfoTable, DeliveryPostalAddress));
                }

                break;

            case fieldNum(VendInvoiceInfoTable, TransDate):
                vendDocumentTableType = this.type();
                if (vendDocumentTableType)
                {
                    this.fieldState(fieldNum(VendInvoiceInfoTable, CashDiscDate), FieldState::NotSet);
                    vendDocumentTableType.defaultField(fieldNum(VendInvoiceInfoTable, CashDiscDate));

                    if (!this.DocumentDate)
                    {
                        this.fieldState(fieldNum(VendInvoiceInfoTable, FixedDueDate), FieldState::NotSet);
                        vendDocumentTableType.defaultField(fieldNum(VendInvoiceInfoTable, FixedDueDate));
                    }

                    TaxGroup taxGroup = (this.TaxGroup)? this.TaxGroup : this.purchTable().TaxGroup;
                    TaxGroupHeading taxGroupHeading = TaxGroupHeading::find(taxGroup);
                    if (   SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll)
                        || (VatDueDateFeature::isEnabled()
                            && TaxVATDueDateUtility::isVATDueDateBasedOnPostingDate(taxGroupHeading)))
                    {
                        VatDueDate_W vatDueDate = TaxVATDueDateUtility::calculateVATDueDateBasedOnPostingDate(taxGroupHeading, this.TransDate);
                        vendInvoiceInfoTable_W = this.vendInvoiceInfoTable_W();
                        vendInvoiceInfoTable_W.adjustVATDueDate_W(vatDueDate);
                        this.packVendInvoiceInfoTable_W(vendInvoiceInfoTable_W);
                    }
                }

                if (!this.FixedExchRate)
                {
                    if (!this.useDocumentDate())
                    {
                        this.initFromExchRates();
                        unapproveVariances = true;
                    }
                }

                // <GEERU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                {
                    this.updateAlcoholLicenseSeriesNum_RU(this.documentDate());
                }
                // </GEERU>

                break;

            case fieldNum(VendInvoiceInfoTable, DeliveryPostalAddress):
                LogisticsLocationSelectForm_VendInvoiceInfoTable::construct(this).copyAddressToCaller(this.getDeliveryEntityRecord(), this.DeliveryPostalAddress);
                break;

            case fieldNum(VendInvoiceInfoTable, DocumentDate):
                vendDocumentTableType = this.type();
                if (vendDocumentTableType)
                {
                    this.fieldState(fieldNum(VendInvoiceInfoTable, CashDiscDate), FieldState::NotSet);
                    this.fieldState(fieldNum(VendInvoiceInfoTable, FixedDueDate), FieldState::NotSet);
                    vendDocumentTableType.defaultField(fieldNum(VendInvoiceInfoTable, CashDiscDate));
                    vendDocumentTableType.defaultField(fieldNum(VendInvoiceInfoTable, FixedDueDate));
                }

                TaxGroup taxGroup = (this.TaxGroup)? this.TaxGroup : this.purchTable().TaxGroup;
                TaxGroupHeading taxGroupHeading = TaxGroupHeading::find(taxGroup);
                if (VatDueDateFeature::isEnabled()
                    && TaxVATDueDateUtility::isVATDueDateBasedOnDocumentDate(taxGroupHeading))
                {
                    VatDueDate_W vatDueDate = TaxVATDueDateUtility::calculateVATDueDateBasedOnDocumentDate(taxGroupHeading, this.DocumentDate);
                    vendInvoiceInfoTable_W = this.vendInvoiceInfoTable_W();
                    vendInvoiceInfoTable_W.adjustVATDueDate_W(vatDueDate);
                    this.packVendInvoiceInfoTable_W(vendInvoiceInfoTable_W);
                }

                if (!this.FixedExchRate)
                {
                    if (this.useDocumentDate()
                        // <GEEU>
                        || PurchParameters::dateOfExchRateIsDocumentDate(this.isNonPO() ? this.TaxGroup : this.purchTable().TaxGroup)
                        // </GEEU>
                        )
                    {
                        this.initFromExchRates();
                        unapproveVariances = true;
                    }
                }

                // <GEERU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                {
                    this.updateAlcoholLicenseSeriesNum_RU(this.documentDate());
                }
                // </GEERU>

                // Project sales price needs to be updated on modifying the invoice date to consider exchange rate based on invoice date specified.
                VendInvoiceInfoLine_Project vendInvoiceInfoLine_Project;
                VendInvoiceInfoLine vendInvoiceInfoLine;
                while select forupdate vendInvoiceInfoLine_Project
                    join vendInvoiceInfoLine
                        where vendInvoiceInfoLine.RecId == vendInvoiceInfoLine_Project.VendInvoiceInfoLineRefRecId
                        && vendInvoiceInfoLine.TableRefId == this.TableRefId
                        && vendInvoiceInfoLine.ParmId == this.ParmId
                {
                    ttsbegin;
                    if (vendInvoiceInfoLine.PurchLineRecId && ProjParameters::find().DefaultSalesPriceFromPurchaseLineDuringVendorInvoice == NoYes::Yes)
                    {
                        vendInvoiceInfoLine_Project.ProjSalesPrice = vendInvoiceInfoLine.purchLine().ProjSalesPrice;
                    }
                    else
                    {
                        vendInvoiceInfoLine_Project.setProjSalesPrice(vendInvoiceInfoLine);
                    }

                    vendInvoiceInfoLine_Project.update();
                    ttscommit;
                }
                break;

            case fieldNum(VendInvoiceInfoTable, PaymMode):
                this.paymModeModified();
                if (isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar)))
                {
                    this.adjustDueDateOnPaymentMethodChange();
                }
                break;

            case fieldNum(VendInvoiceInfoTable, PaymentSched):
                vendDocumentTableType = this.type();
                if (vendDocumentTableType)
                {
                    this.fieldState(fieldNum(VendInvoiceInfoTable, FixedDueDate), FieldState::NotSet);
                    vendDocumentTableType.defaultField(fieldNum(VendInvoiceInfoTable, FixedDueDate));
                }
                break;

            case fieldNum(VendInvoiceInfoTable, Payment):
                if (this.Payment != '')
                {
                    this.PaymentSched = PaymTerm::find(this.Payment).PaymSched;
                    // <GEERU><GEEU>
                    if (! PaymTerm::isEmplAccountUsed_RU(this.Payment))
                    {
                        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#VendInv_W))
                        {
                            vendInvoiceInfoTable_W = this.vendInvoiceInfoTable_W();
                            vendInvoiceInfoTable_W.EmplAccount_RU = '';
                            this.packVendInvoiceInfoTable_W(vendInvoiceInfoTable_W);
                        }
                    }
                    // </GEERU></GEEU>
                }

                vendDocumentTableType = this.type();
                if (vendDocumentTableType)
                {
                    this.fieldState(fieldNum(VendInvoiceInfoTable, FixedDueDate), FieldState::NotSet);
                    vendDocumentTableType.defaultField(fieldNum(VendInvoiceInfoTable, FixedDueDate));
                }
                break;

            case fieldNum(VendInvoiceInfoTable, CashDiscCode):
                vendDocumentTableType = this.type();
                if (vendDocumentTableType)
                {
                    this.fieldState(fieldNum(VendInvoiceInfoTable, CashDiscDate), FieldState::NotSet);
                    this.fieldState(fieldNum(VendInvoiceInfoTable, FixedDueDate), FieldState::NotSet);
                    vendDocumentTableType.defaultField(fieldNum(VendInvoiceInfoTable, CashDiscDate));
                    vendDocumentTableType.defaultField(fieldNum(VendInvoiceInfoTable, CashDiscPercent));
                }
                break;

            case fieldNum(VendInvoiceInfoTable, CurrencyCode):
                if (!this.FixedExchRate)
                {
                    this.initFromExchRates();
                }
                // <GEEU>
                if (TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByBusinessProcess(TaxIntegrationBusinessProcess::Purchase))
                {
                    TaxSpecificExchangeRate::deleteBySourceRecord(this.TableId, this.RecId);
                }
                else if (TaxParameters::isBankExchRateEnabled_W())
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00009, funcName());
                    SalesTaxExchangeRateHelper::maintainSalesTaxTransactionExchangeRate(
                        this,
                        this.CurrencyCode,
                        TransactionType::Purchase,
                        this.vendInvoiceInfoTable_W().VatDueDate_W);
                }
                // </GEEU>
                break;

            case fieldNum(VendInvoiceInfoTable, FixedExchRate):
                this.initFromExchRates();
                unapproveVariances = true;
                if (AccountingCurrencyAmountCalculationPerformanceFlight::instance().isEnabled())
                {
                    AccountingDistributionProcessor::clearAccountCurrencyAmountFromAccountingDistribution(this.SourceDocumentHeader);
                }
                break;

            case fieldNum(VendInvoiceInfoTable, ExchRate),
                fieldNum(VendInvoiceInfoTable, ExchRateSecondary),
                fieldNum(VendInvoiceInfoTable, ReportingCurrencyExchangeRate):
                unapproveVariances = true;
                break;

            case fieldNum(VendInvoiceInfoTable, euroTriangulation):
                this.initFromExchRates(false);
                break;

            case fieldNum(VendInvoiceInfoTable, EndDisc):
                if (VendParameters::find().UseTotalPriceMatching == NoYes::Yes)
                {
                    unapproveVariances = true;
                }
                break;

            case fieldNum(VendInvoiceInfoTable, InvoiceRoundOff):
                if (VendParameters::find().UseTotalPriceMatching == NoYes::Yes)
                {
                    unapproveVariances = true;
                }
                break;

            case fieldNum(VendInvoiceInfoTable, Hold):
                // When the user checks the hold checkbox, set the save status to pending
                if (this.Hold == NoYes::Yes)
                {
                    this.VendInvoiceSaveStatus = VendInvoiceSaveStatus::Pending;
                }
                break;

            case fieldNum(VendInvoiceInfoTable, RemittanceLocation):
                this.VendPaymentGroup = '';
                break;

            case fieldNum(VendInvoiceInfoTable, Approver):
                vendDocumentTableType = this.type();
                if (vendDocumentTableType)
                {
                    this.fieldState(fieldNum(VendInvoiceInfoTable, VendorRequestedWorkerEmail), FieldState::NotSet);
                    vendDocumentTableType.defaultField(fieldNum(VendInvoiceInfoTable, VendorRequestedWorkerEmail));
                }
                break;

            // Added for validation of VendorRequestedWorkerEmail and deafulting of LogisticsElectronicAddress
            case fieldNum(VendInvoiceInfoTable, VendorRequestedWorkerEmail):
                if (this.DocumentOrigin == DocumentOrigin::EnterprisePortal && this.VendorRequestedWorkerEmail != '')
                {
                    select Person
                        from hcmWorker
                    exists join dirPerson
                            where dirPerson.RecId == hcmWorker.Person
                    exists join dirPartyTable
                            where dirPartyTable.RecId == dirPerson.RecId
                    exists join dirPartyLocation
                            where dirPartyLocation.Party == dirPartyTable.RecId
                    exists join logisticsLocation
                            where logisticsLocation.RecId == dirPartyLocation.Location
                    exists join logisticsElectronicAddress
                            where logisticsElectronicAddress.Location == logisticsLocation.RecId &&
                                logisticsElectronicAddress.Locator == this.VendorRequestedWorkerEmail;

                    if (hcmWorker.Person)
                    {
                        vendDocumentTableType = this.type();
                        if (vendDocumentTableType)
                        {
                            this.fieldState(fieldNum(VendInvoiceInfoTable, LogisticsElectronicAddress), FieldState::NotSet);
                            vendDocumentTableType.defaultField(fieldNum(VendInvoiceInfoTable, LogisticsElectronicAddress));
                        }
                    }
                    else
                    {
                        warning(strFmt("@SYS314856", this.VendorRequestedWorkerEmail));
                        this.LogisticsElectronicAddress = 0;
                    }
                }
                else
                {
                    this.LogisticsElectronicAddress = 0;
                }
            case fieldNum(VendInvoiceInfoTable, MarkupGroup):
                this.modifieMarkupGroup();
                break;
            case fieldNum(VendInvoiceInfoTable, PurchId):
                this.BankLCImportLine = 0;
                this.PurchName = '';
                // <GEERU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                {
                    vendInvoiceInfoTable_RU = this.vendInvoiceInfoTable_RU();
                    vendInvoiceInfoTable_RU.AgreementHeaderExt_RU = 0;
                    this.DefaultDimension = AgreementHeaderExt_RU::clearAgreementDimension(this.DefaultDimension);
                    vendInvoiceInfoTable_RU.vatOperationCode_RU = '';
                    vendInvoiceInfoTable_RU.vatChargeSource_RU = VATChargeSource_RU::VendorFunds;
                    vendInvoiceInfoTable_RU.InventProfileId_RU = '';

                    vendInvoiceInfoTable_RU.ConsignorAccount_RU = '';
                    vendInvoiceInfoTable_RU.ConsigneeAccount_RU = '';
                    this.packVendInvoiceInfoTable_RU(vendInvoiceInfoTable_RU);
                }

                if (SysCountryRegionCode::isLegalEntityInCountryRegion(#VendInv_W))
                {
                    vendInvoiceInfoTable_W = this.vendInvoiceInfoTable_W();
                    vendInvoiceInfoTable_W.EmplAccount_RU = '';
                    this.packVendInvoiceInfoTable_W(vendInvoiceInfoTable_W);
                }

                // </GEERU>
                break;
            case fieldNum(VendInvoiceInfoTable, InvoiceAccount):
                if (this.InvoiceAccount != ''
                    && VendConsInvoiceType_JP::isVendConsInvoiceEnabled())
                {
                    vendInvoiceInfoTable_W = this.vendInvoiceInfoTable_W();
                    vendInvoiceInfoTable_W.ConsTarget_JP = VendTable::find(this.InvoiceAccount).ConsDay_JP != 0 ? NoYes::Yes : NoYes::No;
                    this.packVendInvoiceInfoTable_W(vendInvoiceInfoTable_W);
                }

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                {
                    vendInvoiceInfoTable_RU = this.vendInvoiceInfoTable_RU();
                    vendInvoiceInfoTable_RU.AgreementHeaderExt_RU = 0;
                    this.packVendInvoiceInfoTable_RU(vendInvoiceInfoTable_RU);

                    this.DefaultDimension = AgreementHeaderExt_RU::clearAgreementDimension(this.DefaultDimension);
                }

                vendDocumentTableType = this.type();
                if (vendDocumentTableType && this.CashDiscCode)
                {
                    this.fieldState(fieldNum(VendInvoiceInfoTable, CashDiscCode), FieldState::NotSet);
                    this.fieldState(fieldNum(VendInvoiceInfoTable, CashDiscDate), FieldState::NotSet);
                    vendDocumentTableType.defaultField(fieldNum(VendInvoiceInfoTable, CashDiscCode));
                    vendDocumentTableType.defaultField(fieldNum(VendInvoiceInfoTable, CashDiscDate));
                }
                break;
            case fieldNum(VendInvoiceInfoTable, OrderAccount) :
                vendInvoiceInfoTable_RU = this.vendInvoiceInfoTable_RU();
                vendInvoiceInfoTable_RU.AgreementHeaderExt_RU = 0;
                this.packVendInvoiceInfoTable_RU(vendInvoiceInfoTable_RU);

                this.DefaultDimension = AgreementHeaderExt_RU::clearAgreementDimension(this.DefaultDimension);
                break;

            case fieldNum(VendInvoiceInfoTable, RemittanceLocation) :
            case fieldNum(VendInvoiceInfoTable, VendBankAccountID) :
                if (isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar)))
                {
                    this.adjustDueDateOnAddressChange();
                }
                break;
            case fieldNum(VendInvoiceInfoTable, IncludeInAutomatedProcessing) :
                this.setAutomationStatus();
                break;

            default: break;
        }

        if (FormDataUtil::isFormDataSource(this))
        {
            if (formDataSourceHasMethod(FormDataUtil::getFormDataSource(this), identifierStr(modifiedField)))
            {
                formDataSource = FormDataUtil::getFormDataSource(this);
                formDataSource.modifiedField(_fieldId, unapproveVariances);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifieMarkupGroup</Name>
				<Source><![CDATA[
    void modifieMarkupGroup()
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;

        while select vendInvoiceInfoLine
            where vendInvoiceInfoLine.ParmId == this.ParmId
               && vendInvoiceInfoLine.TableRefId == this.TableRefId
               && vendInvoiceInfoLine.OrigPurchId == ''
        {
            vendInvoiceInfoLine.createMarkupTrans(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveToActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves a saved <c>VendInvoiceInfoTable</c> record to active.
    /// </summary>
    /// <param name="_parmId">
    /// The parameter ID for the active invoice.
    /// </param>
    private void moveToActive(ParmId _parmId)
    {
        VendParameters vendParameters = VendParameters::find();

        this.selectForUpdate(true);

        this.ParmId = _parmId;

        //  update parmId first so vendInvoiceInfoTable can be found by parmId in the later tax calculation process starting from creditCorrection()
        this.doUpdate();

        this.ParmJobStatus = ParmJobStatus::Waiting;

        // Delete taxes so they are recalculated for the active document, in case values like PO discount have changed
        TaxUncommitted::deleteForDocumentHeader(this.TableId, this.RecId);

        if (TaxWithholdingGlobalFeature::isCalcWHTInInvoiceEnabled())
        {
            TaxWithholdUncommitted::deleteForDocumentHeader(this.TableId, this.RecId);
        }

        if (VendInvoiceMatching::initActiveVarianceApproved(this) == NoYes::No)
        {
            this.clearVarianceApproved();

            if (vendParameters.editUseInvoiceMatching() && !vendParameters.editAutomaticHeaderMatching())
            {
                this.checkIfMatched(true, false);
            }
        }

        // Handle invoices that were saved without a CreditCorrection value; this covers scenarios like legacy and imported data
        if (this.CreditCorrection == UnknownNoYes::Unknown)
        {
            this.creditCorrection();
        }

        if (VendAutomateVendorInvoicesFeature::isEnabled())
        {
            if (this.DocumentDate != dateNull() && this.ReceivedDate == dateNull())
            {
                this.ReceivedDate = this.DocumentDate;
            }
            else if (this.ReceivedDate == dateNull())
            {
                this.ReceivedDate = DateTimeUtil::date(DateTimeUtil::getSystemDateTime());
            }
        }

        this.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveToSaved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves an active <c>VendInvoiceInfoTable</c> to its saved image.
    /// </summary>
    /// <param name="_activeVendInvoiceInfoTable">
    /// The <c>VendInvoiceInfoTable</c> to move.
    /// </param>
    private static void moveToSaved(VendInvoiceInfoTable _activeVendInvoiceInfoTable)
    {
        VendParameters vendParameters = VendParameters::find();
        //Re-read vendInvoiceInfotable table buffer to ensure that we update the latest data
        VendInvoiceInfoTable localVendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(_activeVendInvoiceInfoTable.RecId, true);

        localVendInvoiceInfoTable.ParmId = '';
        localVendInvoiceInfoTable.VendInvoiceSaveStatus = VendInvoiceSaveStatus::Pending;

        //If we are using invoice matching and automatic header matching is turn on or header matching has not been calculated, then calculate match status
        if (vendParameters.editUseInvoiceMatching() && (vendParameters.editAutomaticHeaderMatching() || localVendInvoiceInfoTable.LastMatchVariance == LastMatchVarianceOptions::Unknown))
        {
            localVendInvoiceInfoTable.LastMatchVariance = localVendInvoiceInfoTable.checkIfMatched(false, true);
        }

        localVendInvoiceInfoTable.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfLines</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethod]
    display Lines numberOfLines()
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;

        select count(RecId) from vendInvoiceInfoLine
            where vendInvoiceInfoLine.ParmId == this.ParmId
               && vendInvoiceInfoLine.TableRefId == this.TableRefId;

        return any2int(vendInvoiceInfoLine.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packingSlipId</Name>
				<Source><![CDATA[
    display PackingSlipId packingSlipId(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        return this.documentId(_vendInvoiceInfoTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packVendInvoiceInfoTable_Officials</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs a <c>VendInvoiceInfoTable_Officials</c> into <c>VendInvoiceInfoTable</c>
    /// </summary>
    /// <param name="_vendInvoiceInfoTable_Officials">
    /// The <c>VendInvoiceInfoTable_Officials</c> to pack.
    /// </param>
    public void packVendInvoiceInfoTable_Officials(VendInvoiceInfoTable_Officials _vendInvoiceInfoTable_Officials)
    {
        _vendInvoiceInfoTable_Officials.VendInvoiceInfoTable = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_vendInvoiceInfoTable_Officials);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packVendInvoiceInfoTable_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs a <c>VendInvoiceInfoTable_RU</c> into <c>VendInvoiceInfoTable</c>
    /// </summary>
    /// <param name="_vendInvoiceInfoTable_RU">
    /// The <c>VendInvoiceInfoTable_RU</c> to pack.
    /// </param>
    public void packVendInvoiceInfoTable_RU(VendInvoiceInfoTable_RU _vendInvoiceInfoTable_RU)
    {
        _vendInvoiceInfoTable_RU.VendInvoiceInfoTable = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_vendInvoiceInfoTable_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packVendInvoiceInfoTable_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs a <c>VendInvoiceInfoTable_W</c> into <c>VendInvoiceInfoTable</c>
    /// </summary>
    /// <param name="_vendInvoiceInfoTable_W">
    /// The <c>VendInvoiceInfoTable_W</c> to pack.
    /// </param>
    public void packVendInvoiceInfoTable_W(VendInvoiceInfoTable_W _vendInvoiceInfoTable_W)
    {
        _vendInvoiceInfoTable_W.VendInvoiceInfoTable = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_vendInvoiceInfoTable_W);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRateDate</Name>
				<Source><![CDATA[
    public AccountingDate parmExchangeRateDate()
    {
        if (VendInvoicePostingDateAutoAdjustmentV2Flight::instance().isEnabled())
        {
            return this.determineExchangeRateDate();
        }
        else
        {
            return this.updateDate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceDocumentLine</Name>
				<Source><![CDATA[
    public SourceDocumentLine parmParentSourceDocumentLine()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocHeaderTypeEnumName</Name>
				<Source><![CDATA[
    public EnumName parmSourceDocHeaderTypeEnumName()
    {
        return enumStr(SourceDocument_VendorInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocHeaderTypeEnumValue</Name>
				<Source><![CDATA[
    public SourceDocumentTypeEnumValue parmSourceDocHeaderTypeEnumValue()
    {
        return SourceDocument_VendorInvoice::VendorInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumName</Name>
				<Source><![CDATA[
    public EnumName parmSourceDocLineTypeEnumName()
    {
        return enumStr(SourceDocumentLine_VendorInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumValue</Name>
				<Source><![CDATA[
    public SourceDocumentTypeEnumValue parmSourceDocLineTypeEnumValue()
    {
        return SourceDocumentLine_VendorInvoice::VendorInvoiceTotalsLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeader</Name>
				<Source><![CDATA[
    public SourceDocumentHeader parmSourceDocumentHeader()
    {
        SourceDocumentHeader sourceDocumentHeader = SourceDocumentHeader::find(this.SourceDocumentHeader);

        return sourceDocumentHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyTable_InvoiceAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>DirPartyTable</c> record for the invoice account of the vendor invoice.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The <c>DirPartyTable</c> record for the order account of the vendor invoice.
    /// </returns>
    DirPartyTable partyTable_InvoiceAccount(boolean _forUpdate = false)
    {
        DirPartyTable partyTable;
        VendTable vendTable;

        if (this.InvoiceAccount)
        {
            if (_forUpdate)
            {
                partyTable.selectForUpdate(_forUpdate);
            }

            select firstonly partyTable
                exists join vendTable
                where vendTable.Party == partyTable.RecId &&
                   vendTable.AccountNum == this.InvoiceAccount;
        }
        return partyTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymDayId</Name>
				<Source><![CDATA[
    VendPaymDayId paymDayId()
    {
        VendPaymDayId paymDayId = this.vendTable_InvoiceAccount().PaymDayId;

        if (!paymDayId)
        {
            paymDayId = this.payment().PaymDayId;
        }

        return paymDayId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payment</Name>
				<Source><![CDATA[
    PaymTerm payment(boolean _update = false)
    {
        return PaymTerm::find(this.Payment, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymModeModified</Name>
				<Source><![CDATA[
    public void paymModeModified()
    {
        this.PaymModeMap::modifiedPaymMode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the <c>CashDiscCode</c> value that is associated with the invoice.
    /// </summary>
    /// <returns>
    /// The <c>CashDiscCode</c> value that is associated with this invoice line.
    /// </returns>
    public VendPostingProfile postingProfile()
    {
        // <GEERU>
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) || this.isNonPO() || this.isAdvance())
        // </GEERU>
        {
            return this.PostingProfile;
        }
        else
        {
            return PurchTable::find(this.PurchId).PostingProfile;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processingTime</Name>
				<Source><![CDATA[
    display SysInt64 processingTime()
    {
        return this.VendDocumentTableMap::processingTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptCopyDeliveryAddress</Name>
				<Source><![CDATA[
    static DialogButton promptCopyDeliveryAddress()
    {
        return Box::yesYesAllNoCancel("@AccountsPayable:UpdateInvoiceLineDeliveryAddressPrompt", DialogButton::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptCopyTaxGroupToMarkupTrans</Name>
				<Source><![CDATA[
    public DialogButton promptCopyTaxGroupToMarkupTrans()
    {
        boolean markupTransExists;
        VendInvoiceInfoSubTable localSubTable;
        int subTableCount;
        DialogButton copyTaxGroupToMarkupTrans;

        copyTaxGroupToMarkupTrans = DialogButton::No;

        if (this.RecId != 0 && this.TaxGroup != this.orig().TaxGroup)
        {
            // Check all SubTable records for this invoice to see if new TaxGroup should roll down
            while select TableId, RecId from localSubTable
                where localSubTable.TableRefId == this.TableRefId &&
                      localSubTable.ParmId == this.ParmId
            {
                subTableCount++;
                if (MarkupTrans::exist(localSubTable.TableId, localSubTable.RecId))
                {
                    markupTransExists = true;
                    break;
                }
            }

            if (markupTransExists)
            {
                copyTaxGroupToMarkupTrans = MarkupTrans::promptCopyTaxGroupToMarkupTrans(localSubTable.TableId, localSubTable.RecId);
            }
            // Charges can only exist on VendInvoiceInfoTable if there are more than one subTable record
            else if (subTableCount > 1)
            {
                copyTaxGroupToMarkupTrans = MarkupTrans::promptCopyTaxGroupToMarkupTrans(this.TableId, this.RecId);
            }
        }

        return copyTaxGroupToMarkupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptCopyOverrideSalesTaxToMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Asks the user whether to copy the new override sales tax value to header misc. charges.
    /// </summary>
    /// <returns>The choice selected by the user in the prompt.</returns>
    public DialogButton promptCopyOverrideSalesTaxToMarkupTrans()
    {
        boolean markupTransExists;
        int subTableCount;
        DialogButton copyOverrideSalesTaxToMarkupTrans = DialogButton::No;

        if (this.RecId != 0 && this.OverrideSalesTax != this.orig().OverrideSalesTax)
        {
            // Check all SubTable records for this invoice to see if new OverrideSalesTax should roll down
            VendInvoiceInfoSubTable localSubTable;
            while select TableId, RecId from localSubTable
                where localSubTable.TableRefId == this.TableRefId
                    && localSubTable.ParmId == this.ParmId
            {
                subTableCount++;
                if (MarkupTrans::exist(localSubTable.TableId, localSubTable.RecId))
                {
                    markupTransExists = true;
                    break;
                }
            }

            if (markupTransExists)
            {
                copyOverrideSalesTaxToMarkupTrans = MarkupTrans::promptCopyOverrideSalesTaxToMarkupTrans(localSubTable.TableId, localSubTable.RecId, true);
            }
            // Charges can only exist on VendInvoiceInfoTable if there are more than one subTable record
            else if (subTableCount > 1)
            {
                copyOverrideSalesTaxToMarkupTrans = MarkupTrans::promptCopyOverrideSalesTaxToMarkupTrans(this.TableId, this.RecId, true);
            }
        }

        return copyOverrideSalesTaxToMarkupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchParmUpdate</Name>
				<Source><![CDATA[
    public PurchParmUpdate purchParmUpdate(boolean _forUpdate = false)
    {
        return this.VendDocumentTableMap::purchParmUpdate(_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchTable</Name>
				<Source><![CDATA[
    public PurchTable purchTable(boolean update = false)
    {
        return this.VendDocumentTableMap::purchTable(update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryLine</Name>
				<Source><![CDATA[
    public Query queryLine(boolean _forUpdate = false)
    {
        Query query = SysQuery::queryFromTableRelation(this, tableNum(VendInvoiceInfoLine), _forUpdate);
        QueryBuildDataSource queryParmLineDS = query.dataSourceTable(tableNum(VendInvoiceInfoLine));

        if (queryParmLineDS)
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                queryParmLineDS.addRange(fieldNum(VendInvoiceInfoLine, ReceiveNow)).value(
                    strFmt('(%1.%2 != 0) || (%1.%3 != 0)',
                        queryParmLineDS.name(),
                        fieldStr(VendInvoiceInfoLine,ReceiveNow),
                        fieldStr(VendInvoiceInfoLine,psaReleaseAmount)));
            }
            else
            {
                queryParmLineDS.addRange(fieldNum(VendInvoiceInfoLine, ReceiveNow)).value(queryValue('!0'));
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>querySubTable</Name>
				<Source><![CDATA[
    public Query querySubTable(boolean _forUpdate = false)
    {
        return SysQuery::queryFromTableRelation(this, tableNum(VendInvoiceInfoSubTable), _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetParmId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ParmId for the <c>VendInvoiceInfoTable</c> and all subTable records
    /// </summary>
    /// <param name="_parmId">
    /// New ParmId for the <c>VendInvoiceInfoTable</c> record
    /// </param>
    public void resetParmId(ParmId _parmId)
    {
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceInfoSubLine vendInvoiceInfoSubLine;
        VendInvoiceMatching vendInvoiceMatching;
        VendInvoiceInfoSubMarkupMatchingTrans vendInvoiceInfoSubMarkupMatchingTrans;
        VendInvoiceInfoMarkupMatchingTolerance vendInvoiceInfoMarkupMatchingTolerance;
        VendInvoiceInfoLineMarkupMatchingTrans vendInvoiceInfoLineMarkupMatchingTrans;
        VendParameters vendParameters;

        if (this.ParmId != _parmId)
        {
            ttsBegin;

            //Updating the SubTableRecords
            update_recordset vendInvoiceInfoSubTable
            setting ParmId = _parmId
            where vendInvoiceInfoSubTable.TableRefId == this.TableRefId
                && vendInvoiceInfoSubTable.ParmId == this.ParmId;

            //Updating the Line Records
            update_recordSet vendInvoiceInfoLine
            setting ParmId = _parmId
            where vendInvoiceInfoLine.TableRefId == this.TableRefId;

            update_recordSet vendInvoiceInfoSubLine
            setting ParmId = _parmId
            join vendInvoiceInfoLine
                where vendInvoiceInfoLine.TableRefId == this.TableRefId
                        && vendInvoiceInfoSubLine.LineRefRecId == vendInvoiceInfoLine.RecId;

            //Updating the Line Matching Table Records
            if (vendParameters.editUseInvoiceMatching())
            {
                update_recordSet vendInvoiceMatching
                setting ParmId = _parmId
                where vendInvoiceMatching.TableRefId == this.TableRefId
                    && vendInvoiceMatching.ParmId == this.ParmId;

                update_recordSet vendInvoiceInfoMarkupMatchingTolerance
                setting VendInvoiceInfoTableParmId = _parmId
                where vendInvoiceInfoMarkupMatchingTolerance.VendInvoiceInfoTableTableRefId == this.TableRefId
                    && vendInvoiceInfoMarkupMatchingTolerance.VendInvoiceInfoTableParmId == this.ParmId;

                update_recordSet vendInvoiceInfoLineMarkupMatchingTrans
                setting VendInvoiceInfoLineParmId = _parmId
                where vendInvoiceInfoLineMarkupMatchingTrans.VendInvoiceInfoLineTableRefId == this.TableRefId
                    && vendInvoiceInfoLineMarkupMatchingTrans.VendInvoiceInfoLineParmId == this.ParmId;

                update_recordSet vendInvoiceInfoSubMarkupMatchingTrans
                setting VendInvoiceInfoSubTableParmId = _parmId
                where vendInvoiceInfoSubMarkupMatchingTrans.VendInvoiceInfoSubTableTableRefId == this.TableRefId
                    && vendInvoiceInfoSubMarkupMatchingTrans.VendInvoiceInfoSubTableParmId == this.ParmId;
            }

            //Updating the Header record
            this.ParmId = _parmId;
            this.update();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAgreement_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes record with default dimension for agreement dimension attribute
    /// and, if chosen by user, with other data from agreement
    /// </summary>
    public void setAgreement_RU()
    {
        PurchAgreementHeaderExt_RU purchAgreementHeaderExt;
        PurchAgreementHeader purchAgreementHeader;
        VendInvoiceInfoTable_RU vendInvoiceInfoTable_RU = this.vendInvoiceInfoTable_RU();

        if (vendInvoiceInfoTable_RU.AgreementHeaderExt_RU)
        {
            purchAgreementHeaderExt = PurchAgreementHeaderExt_RU::find(vendInvoiceInfoTable_RU.AgreementHeaderExt_RU);

            purchAgreementHeader = PurchAgreementHeader::find(purchAgreementHeaderExt.AgreementHeader);

            if (Box::yesNo("@SYS311926",DialogButton::Yes) == DialogButton::Yes)
            {
                this.initFromPurchAgreementHeader_RU(purchAgreementHeader);
            }
            else
            {
                this.DefaultDimension = this.copyDimension(purchAgreementHeader.DefaultDimension);
            }
        }
        else
        {
            this.DefaultDimension = AgreementHeaderExt_RU::clearAgreementDimension(this.DefaultDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAutomationStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes <c>VendInvoiceInfoTable</c> AutomationStatus field depending on if included in automated processing or not.
    /// </summary>
    internal void setAutomationStatus()
    {
        if (this.IncludeInAutomatedProcessing == NoYes::No)
        {
            this.AutomationStatus = VendInvoiceAutomationStatus::Paused;
        }
        else
        {
            this.AutomationStatus = VendInvoiceAutomationStatus::Included;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatesByFiscalDocumentType_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes <c>FiscalDocumentType_BR</c> TransDate field looking to InvoiceIssueDate field in FiscalDocumentType_BR and applies this change to DocumentDate field.
    /// </summary>
    public void setDatesByFiscalDocumentType_BR()
    {
        date newTransDate;
        FiscalDocumentType_BR fiscalDocumentType = FiscalDocumentType_BR::findRecId(this.vendInvoiceInfoTable_W().FiscalDocumentType_BR);

        if (!fiscalDocumentType)
        {
            return;
        }

        newTransDate = fiscalDocumentType.InvoiceIssueDate ? fiscalDocumentType.InvoiceIssueDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        ChronologicalInvoiceNumbering_BR chronologicalInvoiceNumbering = BrazilParameters::find().ChronologicalInvoiceNumbering;

        if ((!chronologicalInvoiceNumbering || newTransDate == this.TransDate) && this.DocumentDate)
        {
            return;
        }

        if (chronologicalInvoiceNumbering && fiscalDocumentType.InvoiceIssueDate != dateNull())
        {
            this.TransDate = newTransDate;
        }

        if (!this.DocumentDate || this.IsTheFiscalDocumentIssuer_BR())
        {
            this.DocumentDate = this.TransDate;
            this.modifiedField(fieldNum(VendInvoiceInfoTable, DocumentDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the delivery name based on the Delivery postal address.
    /// </summary>
    public void setDeliveryName(boolean _skipDeliveryRoleCheck = false)
    {
        this.TradePostalAddress::setDeliveryName(_skipDeliveryRoleCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventProfileId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears InventProfileId_RU field if <c>InventProfileType_RU</c> not match
    /// </summary>
    void setInventProfileId_RU()
    {
        #ISOCountryRegionCodes
        VendInvoiceInfoTable_RU vendInvoiceInfoTable_RU;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            vendInvoiceInfoTable_RU = this.vendInvoiceInfoTable_RU();

            if (vendInvoiceInfoTable_RU.InventProfileType_RU == InventProfileType_RU::NotSpecified ||
                vendInvoiceInfoTable_RU.InventProfileType_RU != InventProfile_RU::find(vendInvoiceInfoTable_RU.InventProfileId_RU).InventProfileType)
            {
                vendInvoiceInfoTable_RU.InventProfileId_RU = '';
            }

            this.packVendInvoiceInfoTable_RU(vendInvoiceInfoTable_RU);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentLineExchRateUpdateNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c>VendInvoiceInfoTable</c> table buffer will update the
    /// associated <c>SourceDocumentLine</c> records.
    /// </summary>
    /// <param name="_original">
    /// The original <c>VendInvoiceInfoTable</c> record.
    /// </param>
    /// <returns>
    /// true if the associated <c>SourceDocumentLine</c> records will be updated; otherwise, false.
    /// </returns>
    public boolean sourceDocumentLineExchRateUpdateNeeded(VendInvoiceInfoTable _original)
    {
        if (this.useDocumentDate())
        {
            if (_original.DocumentDate != this.DocumentDate)
            {
                return true;
            }
        }
        else
        {
            PurchParameters purchParameters = purchParameters::find();
            if (purchParameters.DateOfExchRate_W == DateOfExchRate_W::DocumentDate)
            {
                if (_original.DocumentDate != this.DocumentDate)
                {
                    return true;
                }
            }
            else if (purchParameters.DateOfExchRate_W == DateOfExchRate_W::PostingDate)
            {
                if (_original.TransDate != this.TransDate)
                {
                    return true;
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates the date to use when calculating taxes.
    /// </summary>
    /// <returns>
    /// The date to use.
    /// </returns>
    public TransDate taxDate()
    {
        TransDate taxCalculationDate;

        switch (TaxParameters::find().TaxCalculationDateType)
        {
            case TaxCalculationDateType::DeliveryDate:

                if (this.isNonPO())
                {
                    taxCalculationDate = this.updateDate();
                }
                else
                {
                    taxCalculationDate = this.purchTable().DeliveryDate;
                    if (!taxCalculationDate)
                    {
                        taxCalculationDate = this.updateDate();
                    }
                }

                break;

            case TaxCalculationDateType::DocumentDate:
                taxCalculationDate = this.documentDate();
                break;

            case TaxCalculationDateType::InvoiceDate:
                taxCalculationDate = this.updateDate();
                break;
        }

        return taxCalculationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalPriceVarianceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sum of the <c>LinePriceVarianceAmount</c> fields for all invoice lines.
    /// </summary>
    /// <returns>
    /// The sum of the <c>LinePriceVarianceAmount</c> fields for all invoice lines.
    /// </returns>
    public display TotalPriceVarianceAmount totalPriceVarianceAmount()
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        TotalPriceVarianceAmount total;

        while select vendInvoiceInfoLine
            where
                vendInvoiceInfoLine.ParmId == this.ParmId &&
                vendInvoiceInfoLine.TableRefId == this.TableRefId
        {
            total += CurrencyExchangeHelper::amount(vendInvoiceInfoLine.linePriceVarianceAmount(), vendInvoiceInfoLine.CurrencyCode);
        }

        return total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferDataFromExistingInvoiceToNewInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers data from an existing <c>VendInvoiceInfoTable</c> buffer to a new <c>VendInvoiceInfoTable</c> buffer.
    /// Also, deletes the original invoice.
    /// </summary>
    /// <param name = "_newVendInvoiceInfoTable">The new <c>VendInvoiceInfoTable</c> buffer where information is being tranferred to.</param>
    public void transferDataFromExistingInvoiceToNewInvoice(VendInvoiceInfoTable _newVendInvoiceInfoTable)
    {
        Docu::copy(this, _newVendInvoiceInfoTable);
        VendInvoiceInfoTable::deleteTableRefId(this.ParmId, this.TableRefId);

        DocumentEventLog::transferDocumentReferences(this.TableId, this.RecId, this.TableId, _newVendInvoiceInfoTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the strategy used for validation and applying default values.
    /// </summary>
    /// <param name="_purchTable">
    /// A <c>PurchTable</c> table record used for applying the default values; optional.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    /// A <c>LedgerJournalTrans</c> table record used for applying the default values; optional.
    /// </param>
    /// <returns>
    /// The strategy used for validation and applying default values.
    /// </returns>
    public VendDocumentTableType type(PurchTable _purchTable = null, LedgerJournalTrans _ledgerJournalTrans = null)
    {
        switch (this.Ordering)
        {
            case DocumentStatus::None:
                if (_ledgerJournalTrans)
                {
                    this.Ordering = DocumentStatus::ApproveJournal;
                }
                else
                {
                    this.Ordering = DocumentStatus::Invoice;
                }
                break;

            case DocumentStatus::ApproveJournal:
                if (!_ledgerJournalTrans)
                {
                    _ledgerJournalTrans = LedgerJournalTrans::findRecId(this.PoolRecId, false);
                }
                break;

            default:
                break;
        }

        return VendDocumentTableType::construct(this, _purchTable, _ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        boolean taxesDeleted;
        VendInvoiceInfoTable original = this.orig();
        AccountingDate newExchangeRateDate;
        // <GEERU>
        #ISOCountryRegionCodes
        VendInvoiceInfoTable_RU vendInvoiceInfoTable_RU;
        VendInvoiceInfoTable_RU originalVendInvoiceInfoTable_RU;
        // </GEERU>

        ttsbegin;

        if (original.Num != this.Num && !this.isNonPO() && this.isPOInterCompany())
        {
            VendInvoiceInfoTable::deleteRelatedMarkupTrans(this.tableRefId, this.parmId, original.Num);
            this.createMarkupTransFromPurchTable();
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            vendInvoiceInfoTable_RU = this.vendInvoiceInfoTable_RU();
            originalVendInvoiceInfoTable_RU = vendInvoiceInfoTable_RU.orig();
            this.packVendInvoiceInfoTable_RU(vendInvoiceInfoTable_RU);
        }

        this.checkCurrencyCode();

        this.updateVendorChargedSalesTax();

        super();

        this.SysExtensionSerializerMap::postUpdate();

        if (this.InvoiceAccount != original.InvoiceAccount ||
            this.MarkupGroup != original.MarkupGroup)
        {
            this.createMarkupTrans();
        }

        if (original.PaymentSched &&
            original.PaymentSched != this.PaymentSched)
        {
            VendPaymSched::deleteVendPaymSched(this.TableId, this.RecId);
        }

        boolean isCalcWHTInInvoiceEnabled = TaxWithholdingGlobalFeature::isCalcWHTInInvoiceEnabled();

        if (this.updatedLineDistributionNeeded(original))
        {
            TaxUncommitted::deleteForDocumentHeader(this.TableId, this.RecId);
            taxesDeleted = true;

            SourceDocumentProcessorFacade::submitSourceDocumentImplementation(this);

            if (isCalcWHTInInvoiceEnabled)
            {
                TaxWithholdUncommitted::deleteForDocumentHeader(this.TableId, this.RecId);
            }
        }

        if (this.distributionUpdateNeeded(original))
        {
            if (! taxesDeleted)
            {
                TaxUncommitted::deleteForDocumentHeader(this.TableId, this.RecId);

                if (isCalcWHTInInvoiceEnabled)
                {
                    TaxWithholdUncommitted::deleteForDocumentHeader(this.TableId, this.RecId);
                }
            }

            SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this, true);
        }

        if (this.sourceDocumentLineExchRateUpdateNeeded(original))
        {
            if (VendInvoicePostingDateAutoAdjustmentV2Flight::instance().isEnabled())
            {
                newExchangeRateDate = this.determineExchangeRateDate();
            }
            else
            {
                newExchangeRateDate = this.updateDate();
            }
            SourceDocumentHeaderProvider::updateExchangeRateDate(this.SourceDocumentHeader, newExchangeRateDate);
        }

        // <GIN>
        if (TaxWithholdParameters_IN::checkTaxParameters()
            && (this.updatedLineDistributionNeeded(original) 
                || this.distributionUpdateNeeded(original)))
        {
            TaxWithholdUncommitted_IN::deleteForDocumentHeader(this.TableId, this.RecId);
        }
        //</GIN>
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            vendInvoiceInfoTable_RU = this.vendInvoiceInfoTable_RU();
            if (vendInvoiceInfoTable_RU.AgreementHeaderExt_RU != originalVendInvoiceInfoTable_RU.AgreementHeaderExt_RU)
            {
                this.updateLineAgreementDimension_RU();
                TaxUncommitted::deleteForDocumentHeader(this.TableId, this.RecId);
                SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this, true);
            }
        }
        // </GEERU>

        if (TaxSolutionScopeIntegrationUtil::IsCompanyEnabled())
        {
            if (this.hasTaxChanged(original))
            {
                this.markCurrentTaxDocumentTaxStatusDirty();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAlcoholLicenseSeriesNum_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates vendor invoice lines by setting alcohol licenses info.
    /// </summary>
    /// <param name="_documentDate">
    ///    Date which is used to find the appropriate license.
    /// </param>

    void updateAlcoholLicenseSeriesNum_RU(DocumentDate _documentDate)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;

        ttsBegin;
        while select forupdate vendInvoiceInfoLine
            where vendInvoiceInfoLine.ParmId == this.ParmId
               && vendInvoiceInfoLine.TableRefId == this.TableRefId
        {
            vendInvoiceInfoLine.setAlcoholLicenseSeriesNum_RU(_documentDate);
            vendInvoiceInfoLine.update();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>TransDate</c> value or <c>DocumentDate</c> value is used when it sets
    /// various values to their default value.
    /// </summary>
    /// <returns>
    /// The date to use.
    /// </returns>
    /// <remarks>
    /// If the <c>DocumentDate</c> field in <c>VendParameters</c> is selected and the transaction has a
    /// <c>DocumentDate</c>, the <c>DocumentDate</c> value is used; otherwise, the <c>TransDate</c> value
    /// is used.
    /// </remarks>
    public TransDate updateDate()
    {
        return this.VendDocumentTableMap::updateDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatedLineDistributionNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c>PurchTable</c> table will update the record in the
    /// <c>AccountingDistribution</c> table that is associated with the <c>PurchLine</c> record.
    /// </summary>
    /// <param name="_original">
    /// The original <c>VendInvoiceInfoTable</c> record.
    /// </param>
    /// <returns>
    /// true if the <c>AccountingDistribution</c> record that is associated to the <c>PurchLine</c> record
    /// must be updated.
    /// </returns>
    public boolean updatedLineDistributionNeeded(VendInvoiceInfoTable _original)
    {
        return ((this.OrderAccount != _original.OrderAccount) ||
                (this.CurrencyCode != _original.CurrencyCode) ||
                (this.InclTax != _original.InclTax) ||
                (this.updateDate() != _original.updateDate()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromVendLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets values in the <c>VendInvoiceInfoTable</c> table by using a <c>VendInvoiceInfoLine</c> record.
    /// </summary>
    public void updateFromVendLines()
    {
        if (this.RecId != 0)
        {
            ttsbegin;
            this.selectForUpdate(true);

            this.doUpdate();

            SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this, true);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineAgreementDimension_RU</Name>
				<Source><![CDATA[
    private void updateLineAgreementDimension_RU()
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceInfoTable_RU vendInvoiceInfoTable_RU = this.vendInvoiceInfoTable_RU();

        if (vendInvoiceInfoTable_RU.AgreementHeaderExt_RU)
        {
            while select forupdate vendInvoiceInfoLine
                where vendInvoiceInfoLine.ParmId == this.ParmId
                   && vendInvoiceInfoLine.TableRefId == this.TableRefId
            {
                vendInvoiceInfoLine.DefaultDimension = AgreementHeaderExt_RU::createAgreementDimension(vendInvoiceInfoTable_RU.AgreementHeaderExt_RU,
                    vendInvoiceInfoLine.DefaultDimension);
                vendInvoiceInfoLine.doUpdate();

                SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(vendInvoiceInfoLine, true);
            }
        }
        else
        {
            while select forupdate vendInvoiceInfoLine
                where vendInvoiceInfoLine.ParmId == this.ParmId
                   && vendInvoiceInfoLine.TableRefId == this.TableRefId
            {
                vendInvoiceInfoLine.DefaultDimension = AgreementHeaderExt_RU::clearAgreementDimension(vendInvoiceInfoLine.DefaultDimension);
                vendInvoiceInfoLine.doUpdate();

                vendInvoiceInfoLine.resetDistribution_RU();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarkupTransTaxGroup</Name>
				<Source><![CDATA[
    public void updateMarkupTransTaxGroup(TaxGroup _origTaxGroup, DialogButton _copyTaxGroupToMarkupTrans)
    {
        VendInvoiceInfoSubTable localSubTable;
        int subTableCount;

        if (_copyTaxGroupToMarkupTrans == DialogButton::Yes || _copyTaxGroupToMarkupTrans == DialogButton::YesToAll)
        {
            // Roll down the new TaxGroup to all SubTable records for this invoice
            while select TableId, RecId from localSubTable
                where localSubTable.TableRefId == this.TableRefId &&
                      localSubTable.ParmId == this.ParmId
            {
                subTableCount++;
                MarkupTrans::updateTaxGroup(localSubTable.TableId, localSubTable.RecId, this.TaxGroup, _origTaxGroup, _copyTaxGroupToMarkupTrans);
            }

            // Charges can only exist on VendInvoiceInfoTable if there are more than one subTable record
            if (subTableCount > 1)
            {
                MarkupTrans::updateTaxGroup(this.TableId, this.RecId, this.TaxGroup, _origTaxGroup, _copyTaxGroupToMarkupTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarkupTransOverrideSalesTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates override sales tax to header charge lines.
    /// </summary>
    /// <param name = "_copyOverrideSalesTaxToMarkupTrans">A result which indicates which misc. charges to update.</param>
    public void updateMarkupTransOverrideSalesTax(DialogButton _copyOverrideSalesTaxToMarkupTrans)
    {
        VendInvoiceInfoSubTable localSubTable;
        int subTableCount;

        if (_copyOverrideSalesTaxToMarkupTrans == DialogButton::Yes)
        {
            // Roll down the new TaxGroup to all SubTable records for this invoice
            while select TableId, RecId from localSubTable
                where localSubTable.TableRefId == this.TableRefId
                    && localSubTable.ParmId == this.ParmId
            {
                subTableCount++;
                MarkupTrans::updateOverrideSalesTax(localSubTable.TableId, localSubTable.RecId, this.OverrideSalesTax, _copyOverrideSalesTaxToMarkupTrans);
            }

            // Charges can only exist on VendInvoiceInfoTable if there are more than one subTable record
            if (subTableCount > 1)
            {
                MarkupTrans::updateOverrideSalesTax(this.TableId, this.RecId, this.OverrideSalesTax, _copyOverrideSalesTaxToMarkupTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParmJobStatusContainErrors</Name>
				<Source><![CDATA[
    public void updateParmJobStatusContainErrors()
    {
        this.VendDocumentTableMap::updateParmJobStatusContainErrors();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParmJobStatusExecuted</Name>
				<Source><![CDATA[
    public void updateParmJobStatusExecuted()
    {
        this.VendDocumentTableMap::updateParmJobStatusExecuted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProcessingAdvanced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the status of the vendor invoice at the begining and ending of processing advance invoice applications.
    /// </summary>
    /// <param name = "_isProcessingAdvances">
    /// Parameter identifying whether the processing of advance invoice applications is starting or ending.
    /// </param>
    public void updateProcessingAdvanced(NoYes _isProcessingAdvanced)
    {
        this.ProcessingAdvanced = _isProcessingAdvanced;
        this.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendInvoiceInfoLine_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates vendor invoice lines adding default CFOP
    /// </summary>
    /// <remarks>
    /// Required for the Non-PO invoice process
    /// </remarks>
    public void updateVendInvoiceInfoLine_BR()
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;

        ttsbegin;
        while select forupdate vendInvoiceInfoLine
            where vendInvoiceInfoLine.ParmId == this.ParmId
               && vendInvoiceInfoLine.TableRefId == this.TableRefId
        {
            vendInvoiceInfoLine.setCFOP_BR();
            vendInvoiceInfoLine.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendInvoiceInfoLineServiceCode_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates vendor invoice lines adding default Service Code
    /// </summary>
    public void updateVendInvoiceInfoLineServiceCode_BR()
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;

        ttsbegin;
        while select forupdate vendInvoiceInfoLine
            where vendInvoiceInfoLine.ParmId == this.ParmId
               && vendInvoiceInfoLine.TableRefId == this.TableRefId
        {
            vendInvoiceInfoLine.setDefaultServiceCodeFromInventTable_BR();
            vendInvoiceInfoLine.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>TransDate</c> or <c>DocumentDate</c> extended data type should be used
    /// when defaulting various values.
    /// </summary>
    /// <returns>
    /// true if the <c>DocumentDate</c> extended data type will be used; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the <c>DocumentDate</c> field in the <c>VendParameters</c> table is selected and the transaction
    /// has a <c>DocumentDate</c> extend data type value then the <c>DocumentDate</c> extended data type
    /// will be used; otherwise, the <c>TransDate</c> extended data type will be used.
    /// </remarks>
    public boolean useDocumentDate()
    {
        return this.VendDocumentTableMap::useDocumentDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineExchangeRateDate</Name>
				<Source><![CDATA[
    public TransDate determineExchangeRateDate()
    {
        return this.VendDocumentTableMap::determineExchangeRateDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified field is valid.
    /// </summary>
    /// <param name="field">
    /// The ID of the field to validate.
    /// </param>
    /// <returns>
    /// true if the field is valid; otherwise, false.
    /// </returns>
    public boolean validateField(FieldId field)
    {
        boolean isValid = true;
        VendDocumentTableType vendDocumentTableType;

        vendDocumentTableType = this.type();
        if (vendDocumentTableType != null)
        {
            isValid = vendDocumentTableType.validateField(field);
        }

        if (isValid)
        {
            isValid = super(field);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLineDeliveryAddress_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the delivery address field is valid.
    /// </summary>
    /// <returns>
    ///     true if the field is valid; otherwise, false.
    /// </returns>

    public boolean validateLineDeliveryAddress_BR()
    {
        LogisticsPostalAddress fiscalEstablishmentAddress, deliveryPostalAddress;
        FiscalEstablishment_BR fiscalEstablishment;
        FiscalEstablishmentInventSite_BR fiscalEstablishmentInventSite;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        InventDim inventDim;
        PurchTable purchTable;

        purchTable = PurchTable::find(this.PurchId);
        if (purchTable.PurchaseType != PurchaseType::ReturnItem)
        {
            while select InventDimId, DeliveryPostalAddress from vendInvoiceInfoLine
                    where vendInvoiceInfoLine.TableRefId == this.TableRefId &&
                            vendInvoiceInfoLine.ParmId == this.ParmId
                join InventSiteId from inventDim
                    where inventDim.InventDimId == vendInvoiceInfoLine.InventDimId
                join FiscalEstablishment_BR from fiscalEstablishmentInventSite
                    where fiscalEstablishmentInventSite.InventSite == inventDim.InventSiteId
                join fiscalEstablishment
                    where fiscalEstablishment.RecId == fiscalEstablishmentInventSite.FiscalEstablishment_BR
            {
                fiscalEstablishmentAddress = fiscalEstablishment.postalAddress();
                deliveryPostalAddress = LogisticsPostalAddress::findRecId(vendInvoiceInfoLine.DeliveryPostalAddress);

                if (fiscalEstablishmentAddress && deliveryPostalAddress)
                {
                    if (fiscalEstablishmentAddress.CountryRegionId != deliveryPostalAddress.CountryRegionId ||
                        fiscalEstablishmentAddress.State != deliveryPostalAddress.State)
                    {
                        return checkFailed("@SYS4000562");
                    }
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQtyAndAmount</Name>
				<Source><![CDATA[
    boolean validateQtyAndAmount()
    {
        return this.VendDocumentLineMap::validateQtyAndAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid = this.validateWrite_ServerPre();

        if (isValid)
        {
            isValid = super();
        }

        if (isValid
            && VendBankAccountChangeProposalFeature::instance().isEnabled()
            && VendBankAccount::validateIsDraft(this.InvoiceAccount, this.VendBankAccountID, this.company()))
        {
            isValid = checkFailed(strFmt("@AccountsPayable:VendBankAccountValidateIsDraftError", this.VendBankAccountID));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite_ServerPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current record is valid and ready to be written to the database.
    /// </summary>
    /// <returns>
    /// true if the record is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method was created to move execution of the logic for <c>validateWrite</c> onto the server.
    /// The logic is put before other validation logic because the kernel validates information that will
    /// not be exposed as faults.
    /// </remarks>
    private boolean validateWrite_ServerPre()
    {
        boolean isValid = true;
        VendDocumentTableType vendDocumentTableType = this.type();

        if (vendDocumentTableType != null)
        {
            isValid = vendDocumentTableType.validateRow();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceInfoTable_Officials</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves <c>VendInvoiceInfoTable_Officials</c> extension table record.
    /// </summary>
    /// <returns>
    /// The extension table record related to current record.
    /// </returns>
    public VendInvoiceInfoTable_Officials vendInvoiceInfoTable_Officials()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(VendInvoiceInfoTable_Officials));
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceInfoTable_RU</Name>
				<Source><![CDATA[
    public VendInvoiceInfoTable_RU vendInvoiceInfoTable_RU()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(VendInvoiceInfoTable_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceInfoTable_W</Name>
				<Source><![CDATA[
    public VendInvoiceInfoTable_W vendInvoiceInfoTable_W()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(VendInvoiceInfoTable_W));
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceInfoTableExtensionTH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>VendInvoiceInfoTableExtensionTH</c> table.
    /// </summary>
    /// <returns>
    /// The table <c>VendInvoiceInfoTableExtensionTH</c> associated with the current record.
    /// </returns>
    public VendInvoiceInfoTableExtensionTH vendInvoiceInfoTableExtensionTH()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(VendInvoiceInfoTableExtensionTH));
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTable_InvoiceAccount</Name>
				<Source><![CDATA[
    public VendTable vendTable_InvoiceAccount(boolean _update = false)
    {
        return this.VendDocumentTableMap::vendTable_InvoiceAccount(_update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTable_OrderAccount</Name>
				<Source><![CDATA[
    public VendTable vendTable_OrderAccount(boolean _update = false)
    {
        return this.VendDocumentTableMap::vendTable_OrderAccount(_update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfMatchedOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the invoice that is represented by the current <c>VendInvoiceInfoTable</c> record
    /// matches a related purchase order.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// Reference to the <c>VendInvoiceInfoTable</c> record.
    /// </param>
    /// <returns>
    /// A container that contains the related matching information for the Vendor Invoice.
    /// </returns>
    private static container checkIfMatchedOnServer(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        boolean isMatched = true;
        Counter poLineCount, lineCount;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        LastMatchVarianceOptions matchingStatusFailed = LastMatchVarianceOptions::Warning;

        while select vendInvoiceInfoLine
            where vendInvoiceInfoLine.ParmId == _vendInvoiceInfoTable.ParmId &&
                vendInvoiceInfoLine.TableRefId == _vendInvoiceInfoTable.TableRefId
        {
            if (!(vendInvoiceInfoLine.isNonPO() || vendInvoiceInfoLine.isAdvance()))
            {
                isMatched = isMatched && vendInvoiceInfoLine.checkIfQuantityMatch() != matchingStatusFailed
                                        && vendInvoiceInfoLine.priceVarianceStatus() != matchingStatusFailed
                                        && vendInvoiceInfoLine.extendedPriceVarianceStatus(_vendInvoiceInfoTable) != matchingStatusFailed;
                poLineCount++;
            }

            lineCount++;

            if (!isMatched)
            {
                break;
            }
        }
        return [isMatched,poLineCount,lineCount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearPurchLineReceiveNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets <c>PurchReceivedNow</c> of table <c>PurchLine</c> to 0 for all lines on an invoice.
    /// </summary>
    /// <param name="_tableRefId">
    /// The <c>TradeLineRefId</c> used to identify the <c>VendInvoiceInfoLine</c> records with
    /// a corresponding <c>PurchLine</c> to update.
    /// </param>
    public static void clearPurchLineReceiveNow(TradeLineRefId _tableRefId)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        PurchLine purchLine;

        // Set the PO Line's ReceiveNow quantity back to zero
        purchLine.skipDataMethods(true);
        purchLine.skipDatabaseLog(true);
        purchLine.skipEvents(VendInvoiceInfoTable::skipEventsOnPurchLineClear());

        update_recordset purchLine
            setting PurchReceivedNow = 0.0
            exists join vendInvoiceInfoLine
            where purchLine.PurchReceivedNow != 0.0
                && vendInvoiceInfoLine.InventTransId == purchLine.InventTransId
                && vendInvoiceInfoLine.ParmId == ''
                && vendInvoiceInfoLine.TableRefId == _tableRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipEventsOnPurchLineClear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if event notification should be skipped when clearing <c>PurchReceiveNow</c> of table <c>PurchLine</c>
    /// </summary>
    /// <returns>true if event notification should be skipped; otherwise, false.</returns>
    public static boolean skipEventsOnPurchLineClear()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertPurchTableFieldToVendInvoice</Name>
				<Source><![CDATA[
    public static FieldId convertPurchTableFieldToVendInvoice(FieldId _purchTableFieldId)
    {
        switch (_purchTableFieldId)
        {
            case fieldNum(PurchTable, InvoiceAccount):
                return fieldNum (VendInvoiceInfoTable, InvoiceAccount);

            case fieldNum(PurchTable, OrderAccount):
                return fieldNum (VendInvoiceInfoTable, OrderAccount);

            case fieldNum(PurchTable, PurchId):
                return fieldNum (VendInvoiceInfoTable, PurchId);

            case fieldNum(PurchTable, TaxGroup):
                return fieldNum(VendInvoiceInfoTable, TaxGroup);

            case fieldNum(PurchTable, OverrideSalesTax):
                return fieldNum(VendInvoiceInfoTable, OverrideSalesTax);

            case fieldNum(PurchTable, InventSiteId):
                return fieldNum(VendInvoiceInfoTable, InventSiteId);

            case fieldNum(PurchTable, InventLocationId):
                return fieldNum(VendInvoiceInfoTable, InventLocationId);

            case fieldNum(PurchTable, TransactionCode):
                return fieldNum(VendInvoiceInfoTable, TransactionCode);

            case fieldNum(PurchTable, Port):
                return fieldNum(VendInvoiceInfoTable, Port);

            case fieldNum(PurchTable, StatProcId):
                return fieldNum(VendInvoiceInfoTable, StatProcId);

            case fieldNum(PurchTable, ListCode):
                return fieldNum(VendInvoiceInfoTable, ListCode);

            case fieldNum(PurchTable, MarkupGroup):
                return fieldNum(VendInvoiceInfoTable, MarkupGroup);

            case fieldNum(PurchTable, Transport):
                return fieldNum(VendInvoiceInfoTable, Transport);

            case fieldNum(PurchTable, DefaultDimension):
                return fieldNum(VendInvoiceInfoTable, DefaultDimension);

            case fieldNum(PurchTable, AccountingDistributionTemplate):
                return fieldNum(VendInvoiceInfoTable, AccountingDistributionTemplate);

            case fieldNum(PurchTable, DeliveryName):
                return fieldNum(VendInvoiceInfoTable, DeliveryName);

            case fieldNum(PurchTable, CashDisc):
                return fieldNum(VendInvoiceInfoTable, CashDiscCode);

            case fieldNum(PurchTable, PurchName):
                return fieldNum(VendInvoiceInfoTable, PurchName);

            case fieldNum(PurchTable, CurrencyCode):
                return fieldNum(VendInvoiceInfoTable, CurrencyCode);

            case fieldNum(PurchTable, PaymMode):
                return fieldNum(VendInvoiceInfoTable, PaymMode);

            case fieldNum(PurchTable, PaymSpec):
                return fieldNum(VendInvoiceInfoTable, PaymSpec);

            case fieldNum(PurchTable, FixedDueDate):
                return fieldNum(VendInvoiceInfoTable, FixedDueDate);

            case fieldNum(PurchTable, PaymentSched):
                return fieldNum(VendInvoiceInfoTable, PaymentSched);

            case fieldNum(PurchTable, CashDiscPercent):
                return fieldNum(VendInvoiceInfoTable, CashDiscPercent);

            case fieldNum(PurchTable, Payment):
                return fieldNum(VendInvoiceInfoTable, Payment);

            case fieldNum(PurchTable, vatNum):
                return fieldNum(VendInvoiceInfoTable, vatNum);

            case fieldNum(PurchTable, VATNumTableType):
                return fieldNum(VendInvoiceInfoTable, VATNumTableType);

            case fieldNum(PurchTable, VATNumRecId):
                return fieldNum(VendInvoiceInfoTable, VATNumRecId);

            case fieldNum(PurchTable, InclTax):
                return fieldNum(VendInvoiceInfoTable, InclTax);

            case fieldNum(PurchTable, EnterpriseNumber):
                return fieldNum(VendInvoiceInfoTable, EnterpriseNumber);

            case fieldNum(PurchTable, PostingProfile):
                return fieldNum(VendInvoiceInfoTable, PostingProfile);

            case fieldNum(PurchTable, SettleVoucher):
                return fieldNum(VendInvoiceInfoTable, SettleVoucher);

            case fieldNum(PurchTable, NumberSequenceGroup):
                return fieldNum(VendInvoiceInfoTable, NumberSequenceGroup);

            case fieldNum(PurchTable, CountyOrigDest):
                return fieldNum(VendInvoiceInfoTable, CountyOrigDest);

            // These PO fields do not exist on an invoice
            default:
                return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCreditCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the credit correction default value for the given invoice.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecId</c> of the invoice to be updated.
    /// </param>
    public static void defaultCreditCorrection(RecId _recId)
    {
        if (VendParameters::find().CreditError == NoYes::No || LedgerParameters::find().TransactionReversalCorrection == NoYes::No || VendInvoicePostponeCreditCorrectionCalculationFlight::instance().isEnabled())
        {
            return;
        }

        ttsbegin;
        VendInvoiceInfoTable vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(_recId, true);

        vendInvoiceInfoTable.CreditCorrection = UnknownNoYes::Unknown;
        vendInvoiceInfoTable.creditCorrection();
        vendInvoiceInfoTable.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultEUROTriangulation</Name>
				<Source><![CDATA[
    public static EUROTriangulation defaultEUROTriangulation()
    {
        return VendDocumentTableMap::defaultEUROTriangulation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultExchRate</Name>
				<Source><![CDATA[
    public static VendExchRate defaultExchRate()
    {
        return VendDocumentTableMap::defaultExchRate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultExchRateSecondary</Name>
				<Source><![CDATA[
    public static ExchrateSecondary defaultExchRateSecondary()
    {
        return VendDocumentTableMap::defaultExchRateSecondary();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteActiveWithoutUpdate</Name>
				<Source><![CDATA[
    public static void deleteActiveWithoutUpdate(ParmId _parmId, boolean _deletePending = true)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        // Do not allow empty ParmID to be passed in. That would delete all saved invoices.
        if (_parmId == '')
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ttsbegin;

        if (_deletePending)
        {
            delete_from vendInvoiceInfoTable
                where vendInvoiceInfoTable.ParmId == _parmId;
        }
        else
        {
            delete_from vendInvoiceInfoTable
                where vendInvoiceInfoTable.ParmId == _parmId
                   && vendInvoiceInfoTable.VendInvoiceSaveStatus != VendInvoiceSaveStatus::Pending;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteParmUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs necessary cleanup when the process encounters a failure.
    /// </summary>
    /// <param name="_purchParmUpdate">
    ///    a <c>PurchParmUpdate</c> record.
    /// </param>
    static public void deleteParmUpdate(PurchParmUpdate _purchParmUpdate)
    {
        // User is posting
        if (!_purchParmUpdate.Proforma )
        {
            ttsbegin;

            // If there were no other invoices, then delete the PurchParmUpdate record
            if (_purchParmUpdate.numberOfTables() == 0)
            {
                PurchParmUpdate::deleteWithoutUpdate(_purchParmUpdate.ParmId);
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePendingPrepayments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the pending prepayment <c>VendInvoiceInfoTable</c> records for a purchase order ID provided.
    /// </summary>
    /// <param name="_purchId">
    /// The purchase order ID value.
    /// </param>
    public static void deletePendingPrepayments(PurchId _purchId)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        ttsbegin;

        delete_from vendInvoiceInfoTable
            where vendInvoiceInfoTable.PurchId == _purchId
            && vendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed
            && vendInvoiceInfoTable.InvoiceType == PurchInvoiceType::VendorAdvance;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRelated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all tables which are related to the <c>VendInvoiceInfoTable</c> table except for the <c>VendInvoiceInfoSubTable</c> table.
    /// </summary>
    /// <param name="_tableRefId">
    /// The <c>_TableRefId</c> field of the <c>VendInvoiceInfoTable</c> table.
    /// </param>
    /// <param name="_parmId">
    /// The <c>ParmId</c> field of the <c>VendInvoiceInfoTable</c> table.
    /// </param>
    public static void deleteRelated(TradeLineRefId _tableRefId, ParmId _parmId)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendPaymSched vendPaymSched;
        TaxWorkRegulation taxWorkRegulation;
        VendInvoiceMatching vendInvoiceMatching;
        VendInvoiceInfoMarkupMatchingTolerance vendInvoiceInfoMarkupMatchingTolerance;
        MarkupTrans markupTrans;
        SourceDocumentLine sourceDocumentLine;
        DocuRef docuRef;

        ttsbegin;

        delete_from vendPaymSched
        exists join vendInvoiceInfoTable
        where vendPaymSched.ExtTableId == vendInvoiceInfoTable.TableId &&
              vendPaymSched.ExtRecId == vendInvoiceInfoTable.RecId &&
              vendInvoiceInfoTable.TableRefId == _tableRefId &&
              vendInvoiceInfoTable.ParmId == _parmId;

        delete_from taxWorkRegulation
        exists join vendInvoiceInfoTable
        where taxWorkRegulation.HeadingTableId == vendInvoiceInfoTable.TableId &&
                taxWorkRegulation.HeadingRecId == vendInvoiceInfoTable.RecId &&
                vendInvoiceInfoTable.TableRefId == _tableRefId &&
                vendInvoiceInfoTable.ParmId == _parmId;

        delete_from vendInvoiceMatching
        exists join vendInvoiceInfoTable
        where vendInvoiceMatching.TableRefId == vendInvoiceInfoTable.TableRefId &&
                vendInvoiceMatching.ParmId == vendInvoiceInfoTable.ParmId &&
                vendInvoiceInfoTable.TableRefId == _tableRefId &&
                vendInvoiceInfoTable.ParmId == _parmId;

        delete_from vendInvoiceInfoMarkupMatchingTolerance
        exists join vendInvoiceInfoTable
        where vendInvoiceInfoMarkupMatchingTolerance.VendInvoiceInfoTableTableRefId == vendInvoiceInfoTable.TableRefId &&
                vendInvoiceInfoMarkupMatchingTolerance.VendInvoiceInfoTableParmId == vendInvoiceInfoTable.ParmId &&
                vendInvoiceInfoTable.TableRefId == _tableRefId &&
                vendInvoiceInfoTable.ParmId == _parmId;

        delete_from markupTrans
        exists join vendInvoiceInfoTable
        where markupTrans.TransTableId == vendInvoiceInfoTable.TableId &&
              markupTrans.TransRecId == vendInvoiceInfoTable.RecId &&
              vendInvoiceInfoTable.TableRefId == _tableRefId &&
              vendInvoiceInfoTable.ParmId == _parmId;

        delete_from sourceDocumentLine
        exists join vendInvoiceInfoTable
            where sourceDocumentLine.RecId == vendInvoiceInfoTable.SourceDocumentLine &&
                sourceDocumentLine.SourceRelationType == tableNum(VendInvoiceInfoTable) &&
                vendInvoiceInfoTable.ParmId == _parmId &&
                vendInvoiceInfoTable.TableRefId == _tableRefId;

        delete_from docuRef
        exists join vendInvoiceInfoTable
            where docuRef.RefTableId == vendInvoiceInfoTable.TableId &&
                  docuRef.RefRecId == vendInvoiceInfoTable.RecId &&
                  vendInvoiceInfoTable.ParmId == _parmId &&
                  vendInvoiceInfoTable.TableRefId == _tableRefId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRelatedMarkupTrans</Name>
				<Source><![CDATA[
    private static void deleteRelatedMarkupTrans(TradeLineRefId _tableRefId, ParmId _parmId, Num _num)
    {
        MarkupTrans markupTrans;
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
        
        ttsbegin;

        markupTrans.skipDataMethods(true);
        markupTrans.skipEvents(true);
        delete_from markupTrans
            exists join vendInvoiceInfoSubTable
                where markupTrans.InterCompanyInvoiceId == _num
                   && markupTrans.TransTableId == vendInvoiceInfoSubTable.TableId
                   && markupTrans.TransRecId == vendInvoiceInfoSubTable.RecId
                   && (vendInvoiceInfoSubTable.ParmId == _parmId
                   && vendInvoiceInfoSubTable.TableRefId == _tableRefId);

        VendInvoiceInfoLine vendInvoiceInfoLine;

        delete_from markupTrans 
            exists join vendInvoiceInfoLine
            where markupTrans.InterCompanyInvoiceId == _num
                    && markupTrans.TransTableId == vendInvoiceInfoLine.TableId
                    && markupTrans.TransRecId   == vendInvoiceInfoLine.RecId
                    && (vendInvoiceInfoLine.ParmId == _parmId
                    && vendInvoiceInfoLine.TableRefId == _tableRefId);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTableRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes an invoice for the given <c>ParmId</c> and <c>TableRefId</c> fields.
    /// </summary>
    /// <param name="_parmId">
    /// The <c>ParmId</c> of the invoice to be deleted, optional.
    /// </param>
    /// <param name="_tableRefId">
    /// The number of the invoice to be deleted.
    /// </param>
    /// <remarks>
    /// The invoice header, lines, and sub lines will all be deleted.
    /// </remarks>
    public static void deleteTableRefId(ParmId _parmId,TradeLineRefId _tableRefId)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        delete_from vendInvoiceInfoTable
                where vendInvoiceInfoTable.TableRefId == _tableRefId && vendInvoiceInfoTable.ParmId == _parmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the invoice exists in the table for the given <c>ParmId</c> and <c>TableRefId</c> fields.
    /// </summary>
    /// <param name="_parmId">
    /// The <c>ParmId</c> value to check.
    /// </param>
    /// <param name="_tableRefId">
    /// The <c>TableRefId</c> value to check.
    /// </param>
    /// <returns>
    /// true if at least one record exists; otherwise, false.
    /// </returns>
    public static boolean exist(ParmId _parmId, TradeLineRefId _tableRefId)
    {
        return (select firstonly RecId from vendInvoiceInfoTable
                    where vendInvoiceInfoTable.ParmId == _parmId &&
                          vendInvoiceInfoTable.TableRefId == _tableRefId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existActiveNoLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether there is an active invoice header for the specified <c>TableRefId</c> or
    /// <c>PurchId</c> records.
    /// </summary>
    /// <param name="_purchId">
    /// The <c>PurchID</c> record for which to search.
    /// </param>
    /// <param name="_tableRefId">
    /// The table reference ID for which to search.
    /// </param>
    /// <returns>
    /// true if an active invoice exists; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method returns true if there is an active invoice header, regardless of whether there are
    /// lines that are associated with it. If an empty <c>_tableRefId</c> value is passed then the search
    /// is not constrained by the <c>TableLineRefId</c> record.
    /// </remarks>
    public static boolean existActiveNoLines(PurchId _purchId, TradeLineRefId _tableRefId = '')
    {
        VendInvoiceInfoTable localVendInvoiceInfoTable;

        select firstonly RecId from localVendInvoiceInfoTable
            where (localVendInvoiceInfoTable.TableRefId == _tableRefId ||
                    localVendInvoiceInfoTable.PurchId == _purchId) &&
                   localVendInvoiceInfoTable.ParmId != '';

        return (localVendInvoiceInfoTable.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existActiveTableRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether there is an active invoice header for the specified <c>TableLineRefId</c> record.
    /// </summary>
    /// <param name="_tableRefId">
    /// The table reference ID for which to search.
    /// </param>
    /// <returns>
    /// true if there is an active invoice; otherwise, false.
    /// </returns>
    public static boolean existActiveTableRefId(TradeLineRefId _tableRefId)
    {
        VendInvoiceInfoTable localVendInvoiceInfoTable;

        if (_tableRefId != '')
        {
            select firstonly RecId from localVendInvoiceInfoTable
                where localVendInvoiceInfoTable.TableRefId == _tableRefId &&
                       localVendInvoiceInfoTable.ParmId != '';
        }

        return (localVendInvoiceInfoTable.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existIntercompanyNonPurchaseOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the vendor invoice account is setup for intercompany and a non purchase order line exists.
    /// </summary>
    /// <returns>
    /// true if the invoice account is intercompany and a non-PO line exists; otherwise, false.
    /// </returns>
    public boolean existIntercompanyNonPurchaseOrderLine()
    {
        return this.vendTable_InvoiceAccount().interCompanyTradingRelationActive()
            && VendInvoiceInfoLine::existNonPO(this.ParmId, this.TableRefId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPrepayPendingForPurchOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a pending prepayment invoice exists for the specified purchase order ID.
    /// </summary>
    /// <param name="_purchId">
    /// The purchase order ID.
    /// </param>
    /// <returns>
    /// true if a pending prepayment invoice exists; otherwise, false.
    /// </returns>
    public static boolean existPrepayPendingForPurchOrder(PurchId _purchId)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        select firstonly RecId from vendInvoiceInfoTable
            where vendInvoiceInfoTable.PurchId == _purchId
                && vendInvoiceInfoTable.ParmId == ''
                && vendInvoiceInfoTable.InvoiceType == PurchInvoiceType::VendorAdvance;

        return vendInvoiceInfoTable.RecId > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSaved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a saved invoice exists in the <c>VendInvoiceInfoTable</c> table
    /// </summary>
    /// <param name="_tableRefId">
    /// The <c>TableLineRefId</c> value of the invoice.
    /// </param>
    /// <returns>
    /// true if a saved invoice exists; otherwise, false.
    /// </returns>
    public static boolean existSaved(TradeLineRefId _tableRefId)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        select firstonly RecId from vendInvoiceInfoTable
            where vendInvoiceInfoTable.ParmId == '' &&
                vendInvoiceInfoTable.TableRefId == _tableRefId;

        return (vendInvoiceInfoTable.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the invoice for the given <c>ParmId</c> and <c>TableRefId</c> fields, if one exists.
    /// </summary>
    /// <param name="_parmId">
    /// The <c>ParmId</c> value to check.
    /// </param>
    /// <param name="_tableRefId">
    /// The <c>TableRefId</c> value to check.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that determines whether the record should be selected for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A ConcurrencyModel value that specifies the locking scheme; optional.
    /// </param>
    /// <returns>
    /// A single <c>VendInvoiceInfoTable</c> table record if it exists.
    /// </returns>
    /// <remarks>
    /// If the record doesn't exist, an empty <c>VendInvoiceInfoTable</c> table record is returned.
    /// </remarks>
    public static VendInvoiceInfoTable find(ParmId _parmId, TradeLineRefId _tableRefId, boolean _forUpdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        if (_tableRefId)
        {
            if (_forUpdate)
            {
                vendInvoiceInfoTable.selectForUpdate(_forUpdate);

                if (_concurrencyModel != ConcurrencyModel::Auto)
                {
                    vendInvoiceInfoTable.concurrencyModel(_concurrencyModel);
                }
            }

            select firstonly vendInvoiceInfoTable
                where vendInvoiceInfoTable.ParmId == _parmId &&
                      vendInvoiceInfoTable.TableRefId == _tableRefId;
        }

        return vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDeliveryInformation</Name>
				<Source><![CDATA[
    public static VendInvoiceInfoTable findDeliveryInformation(ParmId _parmId, PurchId _purchId, VendName _deliveryName, LogisticsPostalAddressRecId _logisticsPostalAddressRecId, boolean _update = false)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        if (_purchId && _parmId)
        {
            if (_update)
                vendInvoiceInfoTable.selectForUpdate(_update);

            select firstonly vendInvoiceInfoTable
                where vendInvoiceInfoTable.ParmId == _parmId
                   && vendInvoiceInfoTable.PurchId == _purchId
                   && vendInvoiceInfoTable.DeliveryName == _deliveryName
                   && vendInvoiceInfoTable.DeliveryPostalAddress == _logisticsPostalAddressRecId
                   && vendInvoiceInfoTable.VendInvoiceSaveStatus == VendInvoiceSaveStatus::New;
        }

        return vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPurchId</Name>
				<Source><![CDATA[
    public static VendInvoiceInfoTable findPurchId(PurchId purchId, ParmId parmId, boolean update = false)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        if (purchId)
        {
            if (update)
                vendInvoiceInfoTable.selectForUpdate(update);

            select firstonly vendInvoiceInfoTable
                where vendInvoiceInfoTable.PurchId == purchId &&
                      vendInvoiceInfoTable.ParmId == parmId;
        }

        return vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the invoice table record for the given record ID.
    /// </summary>
    /// <param name="_recId">
    /// The record ID to check.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that determines whether the record should be selected for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A <c>ConcurrencyModel</c> value that specifies the locking scheme; optional.
    /// </param>
    /// <returns>
    /// A <c>VendInvoiceInfoTable</c> table record if it exists; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    /// If the record does not exist, an empty <c>VendInvoiceInfoTable</c> table record is returned.
    /// </remarks>
    public static VendInvoiceInfoTable findRecId(RecId _recId, boolean _forUpdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        if (_recId)
        {
            if (_forUpdate)
            {
                vendInvoiceInfoTable.selectForUpdate(_forUpdate);
                if (_concurrencyModel != ConcurrencyModel::Auto)
                {
                    vendInvoiceInfoTable.concurrencyModel(_concurrencyModel);
                }
            }
            select firstonly vendInvoiceInfoTable
                where vendInvoiceInfoTable.RecId == _recId;
        }

        return vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>VendInvoiceInfoTable</c> record based on the record ID of a <c>SourceDocumentHeader</c>
    /// record.
    /// </summary>
    /// <param name="_sourceDocumentHeader">
    /// The record ID of the <c>SourceDocumentHeader</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>VendInvoiceInfoTable</c> table; otherwise, an empty record.
    /// </returns>
    public static VendInvoiceInfoTable findSourceDocumentHeader(SourceDocumentHeaderRecId _sourceDocumentHeader, boolean _forUpdate = false)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        vendInvoiceInfoTable.selectForUpdate(_forUpdate);

        select firstonly vendInvoiceInfoTable
            where vendInvoiceInfoTable.SourceDocumentHeader == _sourceDocumentHeader;

        return vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>VendInvoiceInfoTable</c> record based on the record ID a <c>SourceDocumentLine</c>
    /// record.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// The record ID of the <c>SourceDocumentLine</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>VendInvoiceInfoTable</c> record.
    /// </returns>
    public static VendInvoiceInfoTable findSourceDocumentLine(RefRecId _sourceDocumentLine, boolean _forUpdate = false)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        vendInvoiceInfoTable.selectForUpdate(_forUpdate);

        select firstonly crossCompany vendInvoiceInfoTable
            where vendInvoiceInfoTable.SourceDocumentLine == _sourceDocumentLine;

        return vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTableRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>VendInvoiceInfoTable</c> record based on the <c>TableRefId</c>
    /// </summary>
    /// <param name="TableRefId">
    /// The TableRefId of the <c>VendInvoiceInfoTable</c> to be retrieved
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>VendInvoiceInfoTable</c> record.
    /// </returns>
    public static VendInvoiceInfoTable findTableRefId(TradeLineRefId _tableRefId, boolean _forUpdate = false)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        vendInvoiceInfoTable.selectForUpdate(_forUpdate);

        select firstonly vendInvoiceInfoTable
            where vendInvoiceInfoTable.TableRefId == _tableRefId;

        return vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecIdCrossCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>VendInvoiceInfoTable</c> record for the specified <c>RecId</c> across companies.
    /// </summary>
    /// <param name = "_recId">The record identifier.</param>
    /// <param name = "_forUpdate">Indicates whether to read the record for update; optional.</param>
    /// <returns>A <c>VendInvoiceInfoTable</c> buffer.</returns>
    /// <remarks>Performs a cross-company query.</remarks>
    internal static VendInvoiceInfoTable findRecIdCrossCompany(RecId _recId, boolean _forUpdate = false)
    {
        VendInvoiceInfoTable vendInvoiceInfoTableLocal;
        vendInvoiceInfoTableLocal.selectForUpdate(_forUpdate);

        select firstonly crossCompany vendInvoiceInfoTableLocal
            where vendInvoiceInfoTableLocal.RecId == _recId;

        return vendInvoiceInfoTableLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list of the active invoices for the given <c>PurchId</c>.
    /// </summary>
    /// <param name="_purchId">
    /// The <c>PurchId</c> to find the list for.
    /// </param>
    /// <param name="_excludeParmId">
    /// A <c>ParmId</c> to exclude from the list.
    /// </param>
    /// <param name="_invoiceType">
    /// A <c>PurchInvoiceType</c> to include in the list.
    /// </param>
    /// <returns>
    /// A list of the active invoices for the given <c>PurchId</c>.
    /// </returns>
    public static List getActiveList(PurchId _purchId, ParmId _excludeParmId = '', PurchInvoiceType _invoiceType = PurchInvoiceType::Standard)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;
        List activeSavedList;

        activeSavedList = new List(Types::String);

        while select TableRefId from vendInvoiceInfoTable
            where
                vendInvoiceInfoTable.PurchId == _purchId &&
                vendInvoiceInfoTable.ParmId != _excludeParmId &&
                vendInvoiceInfoTable.ParmId != '' && // Ensure we're checking active invoices
                vendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed &&
                vendInvoiceInfoTable.InvoiceType == _invoiceType
        {
            activeSavedList.addEnd(vendInvoiceInfoTable.TableRefId);
        }

        return activeSavedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchTableFromNonPO</Name>
				<Source><![CDATA[
    public static PurchTable initPurchTableFromNonPO(VendInvoiceInfoTable _invoiceTable)
    {
        #ISOCountryRegionCodes
        #ISOCountryRegionCodesVendInv_W
        // <GEERU>
        PurchTable_RU purchTable_RU;
        PurchTable_W purchTable_W;
        // </GEERU>
        PurchTable purchTable;

        #define.NonPO('NonPO')

        //<GEERU>
        VendInvoiceInfoTable_RU vendInvoiceInfoTable_RU;
        //</GEERU>

        purchTable.PurchId = #NonPO;
        purchTable.DeliveryName = _invoiceTable.DeliveryName;
        purchTable.CashDisc = _invoiceTable.CashDiscCode;
        purchTable.PurchName = _invoiceTable.PurchName;
        purchTable.OrderAccount = _invoiceTable.OrderAccount;
        purchTable.InvoiceAccount = _invoiceTable.InvoiceAccount;
        purchTable.CurrencyCode = _invoiceTable.CurrencyCode;
        purchTable.PaymMode = _invoiceTable.PaymMode;
        purchTable.PaymSpec = _invoiceTable.PaymSpec;
        purchTable.FixedDueDate = _invoiceTable.FixedDueDate;
        purchTable.AddressRefRecId = _invoiceTable.AddressRefRecId;
        purchTable.AddressRefTableId = _invoiceTable.AddressRefTableId;
        purchTable.DeliveryPostalAddress = _invoiceTable.DeliveryPostalAddress;
        purchTable.PaymentSched = _invoiceTable.PaymentSched;
        purchTable.CashDiscPercent = _invoiceTable.CashDiscPercent;
        purchTable.Payment = _invoiceTable.Payment;
        purchTable.TaxGroup = _invoiceTable.TaxGroup;
        purchTable.OverrideSalesTax = _invoiceTable.OverrideSalesTax;
        purchTable.vatNum = _invoiceTable.vatNum;
        purchTable.VATNumTableType = _invoiceTable.VATNumTableType;
        purchTable.VATNumRecId = _invoiceTable.VATNumRecId;
        purchTable.InclTax = _invoiceTable.InclTax;
        purchTable.EnterpriseNumber = _invoiceTable.EnterpriseNumber;
        purchTable.PostingProfile = _invoiceTable.PostingProfile;
        purchTable.SettleVoucher = _invoiceTable.SettleVoucher;
        purchTable.NumberSequenceGroup = _invoiceTable.NumberSequenceGroup;
        purchTable.TransactionCode = _invoiceTable.TransactionCode;
        purchTable.Transport = _invoiceTable.Transport;
        purchTable.Port = _invoiceTable.Port;
        purchTable.StatProcId = _invoiceTable.StatProcId;
        purchTable.CountyOrigDest = _invoiceTable.CountyOrigDest;
        purchTable.ListCode = _invoiceTable.ListCode;
        purchTable.MarkupGroup = _invoiceTable.MarkupGroup;
        purchTable.InventSiteId = _invoiceTable.InventSiteId;
        purchTable.InventLocationId = _invoiceTable.InventLocationId;
        purchTable.DefaultDimension = _invoiceTable.DefaultDimension;
        purchTable.AccountingDistributionTemplate = _invoiceTable.AccountingDistributionTemplate;
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            purchTable_RU = purchTable.purchTable_RU();
            vendInvoiceInfoTable_RU = _invoiceTable.vendInvoiceInfoTable_RU();
            if (vendInvoiceInfoTable_RU.AgreementHeaderExt_RU)
            {
                purchTable_RU.AgreementHeaderExt_RU = vendInvoiceInfoTable_RU.AgreementHeaderExt_RU;
                purchTable.MatchingAgreement = PurchAgreementHeaderExt_RU::find(vendInvoiceInfoTable_RU.AgreementHeaderExt_RU).AgreementHeader;
            }
            purchTable_RU.InventProfileType_RU = vendInvoiceInfoTable_RU.InventProfileType_RU;
            purchTable_RU.InventProfileId_RU = vendInvoiceInfoTable_RU.InventProfileId_RU;
            purchTable_RU.ConsignorAccount_RU = vendInvoiceInfoTable_RU.ConsignorAccount_RU;
            purchTable_RU.ConsigneeAccount_RU = vendInvoiceInfoTable_RU.ConsigneeAccount_RU;
            purchTable_RU.vatChargeSource_RU = vendInvoiceInfoTable_RU.vatChargeSource_RU;
            purchTable_RU.vatOperationCode_RU = vendInvoiceInfoTable_RU.vatOperationCode_RU;
            purchTable.packPurchTable_RU(purchTable_RU);
        }
        // </GEERU>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#VendInv_W))
        {
            purchTable_W = purchTable.purchTable_W();
            purchTable_W.EmplAccount_RU = _invoiceTable.vendInvoiceInfoTable_W().EmplAccount_RU;
            purchTable.packPurchTable_W(purchTable_W);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            purchTable.IntrastatFulfillmentDate_HU = _invoiceTable.vendInvoiceInfoTable_W().IntrastatFulfillmentDate_HU;
        }

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupVendInvoiceGroup</Name>
				<Source><![CDATA[
    public static void lookupVendInvoiceGroup(FormStringControl _stringControl)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(vendInvoiceInfoTable.TableId, _stringControl);
        Query query = new Query();

        QueryBuildDataSource queryBuildDataSource = query.addDataSource(vendInvoiceInfoTable.TableId);
        queryBuildDataSource.fields().clearFieldList();
        queryBuildDataSource.fields().addField(fieldNum(VendInvoiceInfoTable, VendInvoiceGroup));
        queryBuildDataSource.addGroupByField(fieldNum(VendInvoiceInfoTable, VendInvoiceGroup));

        queryBuildDataSource.addRange(fieldNum(VendInvoiceInfoTable, VendInvoiceGroup)).value(SysQuery::valueNotEmptyString());
        queryBuildDataSource.addRange(fieldNum(VendInvoiceInfoTable, ParmJobStatus)).value(
            queryValue(ParmJobStatus::ContainErrors) + ',' + queryValue(ParmJobStatus::Waiting));       

        sysTableLookup.addLookupfield(fieldNum(VendInvoiceInfoTable, VendInvoiceGroup));
        
        sysTableLookup.parmUseLookupValue(false);
        sysTableLookup.parmQuery(query);        
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveFromActiveToSaved</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Moves data from the <c>VendInvoiceInfoTable</c> table structure of an active invoice into that of a saved invoice.
    /// </summary>
    /// <param name="_activeVendInvoiceInfoTable">
    ///     The <c>VendInvoiceInfoTable</c> table record that represents the structure from which to copy.
    /// </param>
    /// <remarks>
    ///     Data from child tables of the active invoice will also be moved.
    /// </remarks>
    public static void moveFromActiveToSaved(VendInvoiceInfoTable _activeVendInvoiceInfoTable)
    {
        ttsbegin;

        // update lines
        VendInvoiceInfoSubLine::updateParmId(_activeVendInvoiceInfoTable.ParmId, _activeVendInvoiceInfoTable.TableRefId);
        VendInvoiceInfoLine::updateParmId(_activeVendInvoiceInfoTable.TableRefId);

        // update subHeader
        VendInvoiceInfoSubTable::updateParmId(_activeVendInvoiceInfoTable.ParmId, _activeVendInvoiceInfoTable.TableRefId);

        // update invoice matching tables
        if (VendParameters::find().editUseInvoiceMatching())
        {
            VendInvoiceInfoLineMarkupMatchingTrans::updateParmId(_activeVendInvoiceInfoTable.ParmId, _activeVendInvoiceInfoTable.TableRefId);
            VendInvoiceInfoSubMarkupMatchingTrans::updateParmId(_activeVendInvoiceInfoTable.ParmId, _activeVendInvoiceInfoTable.TableRefId);
            VendInvoiceInfoMarkupMatchingTolerance::updateParmId(_activeVendInvoiceInfoTable.ParmId, _activeVendInvoiceInfoTable.TableRefId);
            VendInvoiceMatching::updateParmId(_activeVendInvoiceInfoTable.ParmId, _activeVendInvoiceInfoTable.TableRefId);
        }

        // update header
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            VendInvoiceInfo_PaymentDisbursement::updateParmId(_activeVendInvoiceInfoTable.ParmId, _activeVendInvoiceInfoTable.TableRefId);
        }

        VendInvoiceInfoTable::moveToSaved(_activeVendInvoiceInfoTable);

        VendInvoiceInfoTable::clearPurchLineReceiveNow(_activeVendInvoiceInfoTable.TableRefId);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveFromSavedToActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves data from the <c>VendInvoiceInfoTable</c> table structure of a saved invoice into that of an active invoice.
    /// </summary>
    /// <param name="_savedVendInvoiceInfoTable">
    /// <c>VendInvoiceInfoTable</c> table record representing the structure to move from.
    /// </param>
    /// <param name="_parmId">
    /// The parameter ID for the active invoice.
    /// </param>
    /// <param name="_creditRemaining">
    /// A Boolean value that indicates whether the remaining quantity on a credit note should be reversed.
    /// </param>
    /// <returns>
    /// true if one or more subtable source accounting events has changed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Data from child tables of the active invoice will also be moved.
    /// </remarks>
    public static boolean moveFromSavedToActive(VendInvoiceInfoTable _savedVendInvoiceInfoTable, ParmId _parmId, boolean _creditRemaining = false)
    {
        #OCCRetryCount
        VendInvoiceInfoLine savedVendInvoiceInfoLine;
        PurchLine purchLine;
        boolean isAccountingEventChanged;

        try
        {
            ttsbegin;

            // update lines
            VendInvoiceInfoSubLine::updateParmId('', _savedVendInvoiceInfoTable.TableRefId, _parmId);

            while select forUpdate savedVendInvoiceInfoLine
                where savedVendInvoiceInfoLine.TableRefId == _savedVendInvoiceInfoTable.TableRefId
            outer join purchLine
                where purchLine.RecId == savedVendInvoiceInfoLine.PurchLineRecId
                    && !purchLine.IsDeleted
            {
                savedVendInvoiceInfoLine.initFromSaved(_parmId, _creditRemaining, purchLine);
                savedVendInvoiceInfoLine.doUpdate();
            }

            // update subHeader
            isAccountingEventChanged = VendInvoiceInfoSubTable::updateParmId('', _savedVendInvoiceInfoTable.TableRefId, _parmId);

            // update header
            _savedVendInvoiceInfoTable.moveToActive(_parmId);

            // update invoice matching tables
            if (_savedVendInvoiceInfoTable.VarianceApproved == NoYes::Yes
                && _savedVendInvoiceInfoTable.PerformFullInvoiceMatching == NoYes::No)
            {
                // Create the tolerance record if the charge matching feature is on but there is no previous record
                // (this indicates the feature was enabled after the invoice was created)
                if (VendParameters::find().UseMiscChargeMatching == NoYes::Yes &&
                    !VendInvoiceInfoMarkupMatchingTolerance::existForInvoice('', _savedVendInvoiceInfoTable.TableRefId))
                {
                    VendInvoiceInfoMarkupMatchingTolerance::create(_parmId, _savedVendInvoiceInfoTable.TableRefId);
                }
                else
                {
                    VendInvoiceInfoMarkupMatchingTolerance::updateParmId('', _savedVendInvoiceInfoTable.TableRefId, _parmId);
                }

                VendInvoiceInfoSubMarkupMatchingTrans::updateParmId('', _savedVendInvoiceInfoTable.TableRefId, _parmId);
                VendInvoiceInfoLineMarkupMatchingTrans::updateParmId('', _savedVendInvoiceInfoTable.TableRefId, _parmId);

                VendInvoiceMatching::updateParmId('', _savedVendInvoiceInfoTable.TableRefId, _parmId);
            }
            else if (VendParameters::find().editUseInvoiceMatching() == NoYes::Yes)
            {
                if (VendParameters::find().editAutomaticHeaderMatching())
                {
                    VendInvoiceInfoMarkupMatchingTolerance::updateMiscChargeTolerance(_savedVendInvoiceInfoTable.ParmId, _savedVendInvoiceInfoTable.TableRefId, false, '');
                    VendInvoiceInfoSubMarkupMatchingTrans::updateExpectedValues(_savedVendInvoiceInfoTable, false, '');
                    // VendInvoiceInfoLineMarkupMatchingTrans data is created in VendInvoiceInfoSubMarkupMatchingTrans::createFromVendInvoiceInfoTable

                    VendInvoiceMatching::updateExpectedValues(_savedVendInvoiceInfoTable, false, '');
                }
                else
                {
                    VendInvoiceInfoMarkupMatchingTolerance::updateParmId('', _savedVendInvoiceInfoTable.TableRefId, _parmId);
                    VendInvoiceInfoSubMarkupMatchingTrans::updateParmId('', _savedVendInvoiceInfoTable.TableRefId, _parmId);
                    VendInvoiceInfoLineMarkupMatchingTrans::updateParmId('', _savedVendInvoiceInfoTable.TableRefId, _parmId);

                    VendInvoiceMatching::updateParmId('', _savedVendInvoiceInfoTable.TableRefId, _parmId);
                }
                VendInvoiceMatchingLine::updateExpectedValues(_savedVendInvoiceInfoTable);
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                VendInvoiceInfo_PaymentDisbursement::updateParmId('', _savedVendInvoiceInfoTable.TableRefId, _parmId);
            }

            ttscommit;
        }
        catch (Exception::UpdateConflict)
        {
            //
            // We might get update conflicts while moving the invoice to an active state, if another user
            // attempts to open the vendor invoice at the exact same time and is successful. If another user
            // has opened the invoice, we should gracefully give an error message to the user.
            //
            _savedVendInvoiceInfoTable.reread();

            if (_savedVendInvoiceInfoTable.ParmId == '' && xSession::currentRetryCount() <= #RetryNum)
            {
                retry;
            }
            else if (_savedVendInvoiceInfoTable.ParmId != _parmId)
            {
                PurchParmUpdate purchParmUpdate;

                select firstonly CreatedBy from purchParmUpdate
                    where purchParmUpdate.ParmId == _savedVendInvoiceInfoTable.ParmId;

                throw error("@AccountsPayable:VendInvoiceInUseByAnotherUser");
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        return isAccountingEventChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showWarningInvoiceListInUse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays an error message for each invoice that is in use by another user.
    /// </summary>
    /// <param name = "_invoicesInUseList">A list of vendor invoice RecId values that are in use.</param>
    public static void showWarningInvoiceListInUse(List _invoicesInUseList)
    {
        ListEnumerator invoicesInUseListEnumerator = _invoicesInUseList.getEnumerator();
        RefRecId invoiceRecId;
        VendInvoiceInfoTable vendInvoiceInfoTableLocal;
        PurchParmUpdate purchParmUpdateLocal;

        // Display a warning for each invoice that could not be retrieved because it is in use by another user
        while (invoicesInUseListEnumerator.moveNext())
        {
            invoiceRecId = invoicesInUseListEnumerator.current();

            select Num from vendInvoiceInfoTableLocal
                        where vendInvoiceInfoTableLocal.RecId == invoiceRecId &&
                            vendInvoiceInfoTableLocal.ParmId != '' &&
                            vendInvoiceInfoTableLocal.ParmJobStatus != ParmJobStatus::Executed
                        join CreatedBy from purchParmUpdateLocal
                            where purchParmUpdateLocal.ParmId == vendInvoiceInfoTableLocal.ParmId;

            warning(strFmt("@AccountsPayable:VendInvoiceInUse", vendInvoiceInfoTableLocal.Num, purchParmUpdateLocal.CreatedBy));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rearrangeInitFromPO</Name>
				<Source><![CDATA[
    public static void rearrangeInitFromPO(ParmId _parmId)
    {
        #ISOCountryRegionCodes

        VendInvoiceInfoTable vendInvoiceInfoTable;
        PurchTable localPurchTable;
        VendInvoiceInfoTable_W vendInvoiceInfoTable_W;

        ttsbegin;

        // For the given ParmId, update all PO-based invoices to store the corresponding PO's values
        //    in the fields that aren't editable for such an invoice.
        // This is temporary, as the reArrange will clear these values again by calling this.defaultForPO()
        vendInvoiceInfoTable.skipDataMethods(true);
        update_recordset vendInvoiceInfoTable
            setting PaymentSched = localPurchTable.PaymentSched,
                    Payment = localPurchTable.Payment,
                    CashDiscCode = localPurchTable.CashDisc,
                    CashDiscPercent = localPurchTable.CashDiscPercent,
                    TaxGroup = localPurchTable.TaxGroup,
                    OverrideSalesTax = localPurchTable.OverrideSalesTax,
                    vatNum = localPurchTable.vatNum,
                    VATNumTableType = localPurchTable.VATNumTableType,
                    VATNumRecId = localPurchTable.VATNumRecId,
                    InclTax = localPurchTable.InclTax,
                    EnterpriseNumber = localPurchTable.EnterpriseNumber,
                    PostingProfile = localPurchTable.PostingProfile,
                    SettleVoucher = localPurchTable.SettleVoucher,
                    NumberSequenceGroup = localPurchTable.NumberSequenceGroup,
                    TransactionCode = localPurchTable.TransactionCode,
                    Transport = localPurchTable.Transport,
                    Port = localPurchTable.Port,
                    StatProcId = localPurchTable.StatProcId,
                    CountyOrigDest = localPurchTable.CountyOrigDest,
                    ListCode = localPurchTable.ListCode,
                    MarkupGroup = localPurchTable.MarkupGroup,
                    InventLocationId = localPurchTable.InventLocationId,
                    InventSiteId = localPurchTable.InventSiteId
            where vendInvoiceInfoTable.ParmId == _parmId &&
                  vendInvoiceInfoTable.PurchId != ''
            join localPurchTable
                where localPurchTable.PurchId == vendInvoiceInfoTable.PurchId;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            vendInvoiceInfoTable_W.skipDataMethods(true);

            update_recordset vendInvoiceInfoTable_W
                setting IntrastatFulfillmentDate_HU = localPurchTable.IntrastatFulfillmentDate_HU
                join vendInvoiceInfoTable
                    where vendInvoiceInfoTable.ParmId == _parmId &&
                        vendInvoiceInfoTable.PurchId != '' &&
                        vendInvoiceInfoTable_W.VendInvoiceInfoTable == vendInvoiceInfoTable.RecId
                join IntrastatFulfillmentDate_HU from localPurchTable
                    where localPurchTable.PurchId == vendInvoiceInfoTable.PurchId;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendInvoiceTemplate</Name>
				<Source><![CDATA[
    internal void initFromVendInvoiceTemplate(
        VendInvoiceTemplate _vendInvoiceTemplate,
        VendTable _vendTable,
        VendRecurrenceInvoiceDefaultType _vendRecurrenceInvoiceDefaultType,
        TransDate _generationDate)
    {
        //Inserts ParmUpdate Table
        PurchParmUpdate parmUpdate;
        parmUpdate.ParmId = NumberSeq::newGetNum(formletterParmData::numRefParmId()).num();
        parmUpdate.DocumentStatus = DocumentStatus::Invoice;
        parmUpdate.SpecQty = PurchUpdate::All;
        parmUpdate.SumIncludePending = NoYes::Yes;
        parmUpdate.insert();

        //Inserts Vendinvoiceinfotable records
        this.OrderAccount = _vendTable.AccountNum;
        this.InvoiceAccount = _vendTable.InvoiceAccount ? _vendTable.InvoiceAccount : _vendTable.AccountNum;
        this.ParmJobStatus  = ParmJobStatus::Waiting;
        this.Ordering       = DocumentStatus::Invoice;
        this.ParmId         = parmUpdate.ParmId;
        this.PurchName      = _vendTable.name();
        this.DeliveryName  = _vendTable.name();
        this.RecurrenceInvoiceDefaultType = _vendRecurrenceInvoiceDefaultType;
        this.TransDate      = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.DocumentDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (_vendRecurrenceInvoiceDefaultType == vendRecurrenceInvoiceDefaultType::InvoiceTemplate)
        {
            this.PostingProfile = _vendInvoiceTemplate.PostingProfile;
            this.TaxGroup = _vendInvoiceTemplate.TaxGroup;
            this.CurrencyCode = _vendInvoiceTemplate.CurrencyCode;
            this.Payment = _vendInvoiceTemplate.Payment;
            this.PaymMode = _vendInvoiceTemplate.PaymMode;
            this.PaymSpec = _vendInvoiceTemplate.PaymSpec;
            this.PaymentSched = _vendInvoiceTemplate.PaymentSched;
            this.CashDiscCode = _vendInvoiceTemplate.CashDiscCode;
            this.CashDiscPercent = _vendInvoiceTemplate.CashDiscPercent;
            this.DefaultDimension = _vendInvoiceTemplate.DefaultDimension;
            this.InclTax = _vendInvoiceTemplate.InclTax;
        }
        else
        {
            this.PostingProfile = VendParameters::find().PostingProfile;
            this.CurrencyCode = _vendTable.Currency;
            this.Payment = _vendTable.PaymTermId;
            this.PaymMode = _vendTable.PaymMode;
            this.PaymSpec = _vendTable.PaymSpec;
            this.PaymentSched = _vendTable.PaymSched;
            this.CashDiscCode = _vendTable.CashDisc;
            this.CashDiscPercent = CashDisc::find(_vendTable.CashDisc).Percent;
            this.DefaultDimension = _vendTable.DefaultDimension;
            this.InclTax = _vendTable.InclTax;
            this.OverrideSalesTax = _vendTable.OverrideSalesTax;
        }

        this.DocumentDate = _generationDate;
        this.AccountingDistributionTemplate = _vendInvoiceTemplate.AccountingDistributionTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetRequestStatus</Name>
				<Source><![CDATA[
    public static void resetRequestStatus(RecId _vendInvoiceRecId)
    {
        ttsbegin;

        VendInvoiceInfoTable::setRequestStatus(_vendInvoiceRecId, VendInvoiceRequestStatus::Draft);

        VendInvoiceInfoLine::resetRequestStatus(_vendInvoiceRecId);

        VendInvoiceInfoTable::setMatchStatus(_vendInvoiceRecId, VendInvoiceMatchStatus::NotWaiting);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets delivery address information and related information.
    /// </summary>
    /// <param name="_locationRecId">
    ///    The record ID of the logistics location.
    /// </param>
    /// <param name="_source">
    ///    The record that has an associated address.
    /// </param>
    /// <remarks>
    ///    If <c>_source</c> parameter is not specified, the address related information will be set based on the logistics location.
    /// </remarks>
    public void setLocation(LogisticsLocationRecId _locationRecId, Common _source = null)
    {
        this.DeliveryPostalAddress = LogisticsPostalAddress::addressRecIdFromLocationRecId(_locationRecId);

        if (_source)
        {
            LogisticsLocationSelectForm_VendInvoiceInfoTable::construct(this).copyAddressToCaller(_source, this.DeliveryPostalAddress);
        }
        else
        {
            LogisticsLocationSelectForm_VendInvoiceInfoTable::construct(this).copyAddressToCaller(this.getDeliveryEntityRecord(), this.DeliveryPostalAddress);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMatchStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>MatchStatus</c> field in the specified <c>VendInvoiceInfoTable</c> record.
    /// </summary>
    /// <param name="_recId">
    /// The record ID field of the record to update.
    /// </param>
    /// <param name="_matchStatus">
    /// The <c>VendInvoiceMatchStatus</c> enumeration value in which the record must be updated.
    /// </param>
    static public void setMatchStatus(RecId _recId, VendInvoiceMatchStatus _matchStatus)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        ttsbegin;

        vendInvoiceInfoTable.skipDataMethods(true);

        update_recordset vendInvoiceInfoTable
            setting MatchStatus = _matchStatus
            where vendInvoiceInfoTable.RecId == _recId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRequestStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>RequestStatus</c> field in the specified <c>VendInvoiceInfoTable</c> record.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecId</c> field of the record to update.
    /// </param>
    /// <param name="_requestStatus">
    /// The <c>VendInvoiceRequestStatus</c> enumeration value in which the record must be updated.
    /// </param>
    static public void setRequestStatus(RecId _recId, VendInvoiceRequestStatus _requestStatus)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        #OCCRetryCount

        try
        {
            ttsbegin;

            select firstonly forupdate vendInvoiceInfoTable
                where vendInvoiceInfoTable.RecId == _recId;

            if (vendInvoiceInfoTable)
            {
                vendInvoiceInfoTable.RequestStatus = _requestStatus;

                if (_requestStatus == VendInvoiceRequestStatus::Draft || _requestStatus == VendInvoiceRequestStatus::Approved)
                {
                    vendInvoiceInfoTable.PerformFullInvoiceMatching = NoYes::No;
                }

                vendInvoiceInfoTable.doUpdate();

                if ((_requestStatus == VendInvoiceRequestStatus::InReview || _requestStatus == VendInvoiceRequestStatus::Rejected) && vendInvoiceInfoTable.ParmId != '')
                {
                    vendInvoiceInfoTable.reread();
                    VendInvoiceInfoTable::moveFromActiveToSaved(vendInvoiceInfoTable);
                }
            }

            ttscommit;
        }
        catch (Exception::UpdateConflict)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::UpdateConflictNotRecovered;
            }
            else
            {
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSaveStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the <c>VendInvoiceSaveStatus</c> field in the specified <c>VendInvoiceInfoTable</c> records.
    /// </summary>
    /// <param name="_parmId">
    /// The <c>ParmId</c> value of the records to update.
    /// </param>
    /// <param name="_saveStatus">
    /// The <c>VendInvoiceSaveStatus</c> enumeration value to which the record must be updated.
    /// </param>
    public static void setSaveStatus(ParmId _parmId, VendInvoiceSaveStatus _saveStatus)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        ttsbegin;

        vendInvoiceInfoTable.skipDataMethods(true);
        vendInvoiceInfoTable.skipDatabaseLog(true);

        update_recordset vendInvoiceInfoTable
            setting VendInvoiceSaveStatus = _saveStatus
            where vendInvoiceInfoTable.ParmId == _parmId &&
                vendInvoiceInfoTable.VendInvoiceSaveStatus != _saveStatus;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkFlowRequestStatus</Name>
				<Source><![CDATA[
    ///<summary>
    ///     Updates the Request status field for the original record exists for the Invoice
    /// </summary>
    /// <param name="_correctionId">
    ///     Identifier for the workflow
    /// </param>
    /// <param name="_requestStatus">
    ///     Status to which needs to update
    /// </param>
    public static void updateWorkFlowRequestStatus(WorkflowCorrelationId _correctionId, VendInvoiceRequestStatus _requestStatus)
    {
        WorkflowTrackingStatusTable workflowTrackingStatusTable;
        VendInvoiceInfoTable vendInvoiceInfoTable;

        #OCCRetryCount

        try
        {
            ttsBegin;

            select firstonly CorrelationId, ContextRecId from workflowTrackingStatusTable
                where workflowTrackingStatusTable.CorrelationId == _correctionId
            join vendInvoiceInfoTable
                where vendInvoiceInfoTable.RecId == workflowTrackingStatusTable.ContextRecId;

            vendInvoiceInfoTable.skipDataMethods(true);
            vendInvoiceInfoTable.selectForUpdate(true);

            if (vendInvoiceInfoTable)
            {
                vendInvoiceInfoTable.RequestStatus = _requestStatus;

                if (_requestStatus == VendInvoiceRequestStatus::Draft || _requestStatus == VendInvoiceRequestStatus::Approved)
                {
                    vendInvoiceInfoTable.PerformFullInvoiceMatching = NoYes::No;
                }

                vendInvoiceInfoTable.update();
            }

            ttsCommit;
        }
        catch (Exception::UpdateConflict)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::UpdateConflictNotRecovered;
            }
            else
            {
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccessKey_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the access key related to the current vendor invoice
    /// </summary>
    /// <returns>
    /// The access key related to the current vendor invoice
    /// </returns>
    /// <remarks>
    /// If the vendor invoice does not contain an access key, the method will return a blank string
    /// </remarks>
    public EFDocAccessKey_BR getAccessKey_BR()
    {
        VendInvoiceInfoTable_W vendInvoiceInfoTable_W;

        select firstOnly AccessKey_BR from vendInvoiceInfoTable_W
            where vendInvoiceInfoTable_W.VendInvoiceInfoTable == this.RecId;

        return vendInvoiceInfoTable_W.AccessKey_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLinesItemIds_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a list with the names of the items associated with the current vendor invoice
    /// </summary>
    /// <returns>
    /// A list of strings containing the names of the items (itemId field).
    /// </returns>
    /// <remarks>
    /// The list can contain duplicated elements
    /// </remarks>
    public List getLinesItemIds_BR()
    {
        List linesItemsNames = new List(Types::String);
        VendInvoiceInfoLine vendInvoiceInfoLine;

        while select ItemId from vendInvoiceInfoLine
            where vendInvoiceInfoLine.ParmId == this.ParmId
                && vendInvoiceInfoLine.TableRefId == this.TableRefId
        {
            linesItemsNames.addEnd(vendInvoiceInfoLine.ItemId);
        }

        return linesItemsNames;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsCurrencyCodeDifferentThanCompany_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the currency code from the current vendor invoice record is different from the currency code of the default company.
    /// </summary>
    /// <returns>
    /// True if currency codes are different. False otherwise.
    /// </returns>
    public boolean IsCurrencyCodeDifferentThanCompany_BR()
    {
        return this.CurrencyCode != CompanyInfoHelper::standardCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForNfe_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tells whether the current vendor invoice is an electronic fiscal document (NF-e)
    /// </summary>
    /// <returns>
    /// True if it is NF-e; otherwise false
    /// </returns>
    private boolean isForNfe_BR()
    {
        VendInvoiceInfoTable_W vendInvoiceInfoTable_W;
        FiscalDocModel_BR fiscalDocumentModel;

        select firstOnly IsForNfeFederal
            from fiscalDocumentModel
            exists join vendInvoiceInfoTable_W
                where vendInvoiceInfoTable_W.VendInvoiceInfoTable == this.RecId
                        && fiscalDocumentModel.Model == vendInvoiceInfoTable_W.FiscalDocumentModel_BR;

        return fiscalDocumentModel.IsForNfeFederal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNfeNotIssuingNorReversing_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the current vendor invoice is a Nf-e federal issued by third party and is not
    /// a reversing scenario
    /// </summary>
    /// <returns>
    /// True if the vendor invoice is a Nf-e federal issued by third party and is not
    /// a reversing scenario; otherwise, false
    /// </returns>
    public display boolean isNfeNotIssuingNorReversing_BR()
    {
        boolean isNfeNotIssuingNorReversing_BR;

        isNfeNotIssuingNorReversing_BR = !this.IsTheFiscalDocumentIssuer_BR() &&
                                          !this.purchTable().isReversingFiscalDocument_BR() &&
                                          this.isForNfe_BR();

        return isNfeNotIssuingNorReversing_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packVendInvoiceInfoTable_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs a <c>VendInvoiceInfoTable_IN</c> into <c>VendInvoiceInfoTable</c>
    /// </summary>
    /// <param name="_vendInvoiceInfoTable_IN">
    /// The <c>VendInvoiceInfoTable_IN</c> to pack.
    /// </param>
    public void packVendInvoiceInfoTable_IN(VendInvoiceInfoTable_IN _vendInvoiceInfoTable_IN)
    {
        _vendInvoiceInfoTable_IN.VendInvoiceInfoTable = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_vendInvoiceInfoTable_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packVendInvoiceInfoTableExtensionTH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs a <c>VendInvoiceInfoTableExtensionTH</c> into <c>VendInvoiceInfoTable</c>
    /// </summary>
    /// <param name="_vendInvoiceInfoTableExtensionTH">
    /// The <c>VendInvoiceInfoTableExtensionTH</c> to pack.
    /// </param>
    public void packVendInvoiceInfoTableExtensionTH(VendInvoiceInfoTableExtensionTH _vendInvoiceInfoTableExtensionTH)
    {
        _vendInvoiceInfoTableExtensionTH.VendInvoiceInfoTable = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_vendInvoiceInfoTableExtensionTH);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceInfoTable_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>VendInvoiceInfoTable_IN</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>VendInvoiceInfoTable_IN</c> record.
    /// </returns>
    public VendInvoiceInfoTable_IN vendInvoiceInfoTable_IN()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(VendInvoiceInfoTable_IN));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExpectedValuesAndMatchStatusForSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the expected invoice match status for each <c>VendInvoiceInfoTable</c> record in the session
    /// </summary>
    /// <param name="_parmId">
    /// The <c>ParmId</c> for the session to be updated.
    /// </param>
    public static void updateExpectedValuesAndMatchStatusForSession(ParmId _parmId)
    {
        if (!VendParameters::find().editAutomaticHeaderMatching())
        {
            VendInvoiceInfoTable vendInvoiceInfoTable;

            ttsbegin;

            while select forupdate vendInvoiceInfoTable
                where vendInvoiceInfoTable.ParmId == _parmId
                   && (vendInvoiceInfoTable.LastMatchVariance == LastMatchVarianceOptions::Unknown || vendInvoiceInfoTable.RequestStatus == VendInvoiceRequestStatus::InReview)
            {
                vendInvoiceInfoTable.updateExpectedValuesAndMatchStatus();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExpectedValuesAndMatchStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the expected invoice match status and other matching tables for the current <c>VendInvoiceInfoTable</c> record.
    /// </summary>
    public void updateExpectedValuesAndMatchStatus()
    {
        VendInvoiceMatching::updateExpectedValues(this, true);
        VendInvoiceInfoMarkupMatchingTolerance::updateMiscChargeTolerance(this.ParmId, this.TableRefId, true);
        VendInvoiceInfoSubMarkupMatchingTrans::updateExpectedValues(this, true);
        this.checkIfMatched(true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetFieldStateForAllFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the fieldstate of all fields for the Table.
    /// </summary>
    public void resetFieldStateForAllFields()
    {
        DictTable dictTable = new DictTable(tableName2id(tableStr(VendInvoiceInfoTable)));

        for (int i = 1; i <= dictTable.fieldCnt(); i++)
        {
            this.fieldState(dictTable.fieldCnt2Id(i), FieldState::NotSet);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markCurrentTaxDocumentTaxStatusDirty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Mark current tax status of <c> VendInvoiceInfoTable </c> to dirty
    /// </summary>
    public void markCurrentTaxDocumentTaxStatusDirty()
    {
        TaxableDocumentDescriptor descriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(this);
        ITaxableDocument taxableDocument = TaxableDocumentObject::construct(descriptor);
        TaxBusinessService::markTaxDocumentTaxStatus(taxableDocument, TaxDocumentCalculationLevel::Dirty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTaxChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the tax information has changed.
    /// </summary>
    /// <param name="_originalVendInvoiceTable">
    /// The original vend invoice table record.
    /// </param>
    /// <returns>
    /// A boolean value that indicates whether the tax information has changed.
    /// </returns>
    public boolean hasTaxChanged(VendInvoiceInfoTable _originalVendInvoiceTable)
    {
        return
            (this.InclTax != _originalVendInvoiceTable.InclTax) ||
            (this.AccountingDistributionTemplate != _originalVendInvoiceTable.AccountingDistributionTemplate) ||
            (this.CashDiscCode != _originalVendInvoiceTable.CashDiscCode) ||
            (this.CashDiscPercent != _originalVendInvoiceTable.CashDiscPercent) ||
            (this.CurrencyCode != _originalVendInvoiceTable.CurrencyCode) ||
            (this.DocumentDate != _originalVendInvoiceTable.DocumentDate) ||
            (this.InvoiceAccount != _originalVendInvoiceTable.InvoiceAccount) ||
            (this.InvoiceReleaseDate != _originalVendInvoiceTable.InvoiceReleaseDate) ||
            (this.OrderAccount != _originalVendInvoiceTable.OrderAccount) ||
            (this.Payment != _originalVendInvoiceTable.Payment) ||
            (this.PostingProfile != _originalVendInvoiceTable.PostingProfile) ||
            (this.TaxGroup != _originalVendInvoiceTable.TaxGroup) ||
            (this.OverrideSalesTax != _originalVendInvoiceTable.OverrideSalesTax) ||
            (this.ExchRate != _originalVendInvoiceTable.ExchRate) ||
            (this.TransDate != _originalVendInvoiceTable.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDocumentRowDisplayString</Name>
				<Source><![CDATA[
    /// <summary>
    /// The callback method on tax engine tax document display
    /// </summary>
    /// <returns>The tax document display string.</returns>
    public TaxDocumentDisplayString getTaxDocumentRowDisplayString()
    {
        return strFmt("@ApplicationSuiteTaxEngineIntegration:VendInvoiceInfoTableTaxDocumentRowDisplayFormat", this.Num);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePaymSchedTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the total of the <c>VendPaymSched</c> against the total of
    /// <c>VendInvoiceInfoTable</c> document
    /// </summary>
    /// <param name="_vendPaymSched">
    /// <c>VendPaymSched</c> to check against, if null retreives the <c>VendPaymSched</c>
    /// related to this <c>VendInvoiceInfoTable</c> record
    /// </param>
    /// <returns>
    /// true if the totals match or if no <c>VendPaymSched</c> is found; otherwise false
    /// </returns>
    public boolean validatePaymSchedTotals(VendPaymSched _vendPaymSched = null)
    {
        AmountCur totalAmount;
        VendPaymSched vendPaymSched = (_vendPaymSched ? _vendPaymSched : VendPaymSched::find(this.TableId, this.RecId));
        boolean valid = true;

        if (vendPaymSched)
        {
            PurchTotals purchTotals = PurchTotals::newParmTable(this, PurchUpdate::ReceiveNow, this.ParmId, '', this.Ordering);

            purchTotals.calc();

            //<GIN>
            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                if (TaxWithholdEnableIncludeTCSInTotalFeatureToggle::includeTCSInInvoiceAmount(purchTotals.taxWithhold_IN()))
                {
                    totalAmount = purchTotals.purchNewTotalAmount() + CurrencyExchange::roundWithRuleType(
                        purchTotals.parmTaxWithholdAmount_IN(),
                        this.CurrencyCode,
                        CurrencyRoundingRuleType::PurchaseOrder);
                }
                else
                {
                    totalAmount = purchTotals.purchNewTotalAmount() + purchTotals.parmTaxWithholdAmount_IN();
                }
            }
            //</GIN>
            //<GBR>
            else if (BrazilParameters::isEnabled())
            {
                totalAmount = purchTotals.purchTotalAmount() - purchTotals.totalTaxAmountRetained_BR();
            }
            //<GBR>
            else
            {
                totalAmount = purchTotals.purchNewTotalAmount();
            }

            if (!totalAmount)
            {
                valid = true;
            }
            else
            {
                valid = (vendPaymSched.paymScheduleAmount() == totalAmount);
            }
        }

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    private TransDate getDocumentDate(VendDocumentTableMap _vendDocumentTableMap)
    {
        return (_vendDocumentTableMap.DocumentDate == dateNull() ? _vendDocumentTableMap.TransDate : _vendDocumentTableMap.DocumentDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDueDateLimit_ES</Name>
				<Source><![CDATA[
    private PaymDueDateLimit_ES calcDueDateLimit_ES(VendDocumentTableType _documentTableType, PaymTerm _paymTerm, TransDate _transDate)
    {
        PaymDueDateLimit_ES     itemDueDateLimit;
        PaymDueDateLimit_ES     dueDateLimitMin;
        InventTable             inventTable;
        InventItemGroup         inventItemGroup;
        InventItemGroupItem     inventItemGroupItem;
        PurchLine               purchLine;

        PaymDueDateLimit_ES dueDateLimitLocal = PaymDueDateLimit_ES::getCurrentValues(_paymTerm.DueDateLimitGroupId_ES);
        dueDateLimitMin.data(dueDateLimitLocal);

        PurchTable purchTableLocal = _documentTableType.purchTable();

        while select * from itemDueDateLimit
                exists join inventItemGroup
                    where itemDueDateLimit.GroupId == inventItemGroup.DueDateLimitGroupId_ES
                exists join inventItemGroupItem
                    where inventItemGroup.ItemGroupId == inventItemGroupItem.ItemGroupId
                exists join inventTable
                    where inventItemGroupItem.ItemDataAreaId == inventTable.dataAreaId
                        && inventItemGroupItem.ItemId == inventTable.ItemId
                exists join purchLine
                    where inventTable.ItemId == purchLine.ItemId
                        && purchLine.PurchId == purchTableLocal.PurchId
        {
            if (!dueDateLimitMin ||
                    (itemDueDateLimit &&
                    itemDueDateLimit.getLastValidDate(_transDate) < dueDateLimitMin.getLastValidDate(_transDate)))
            {
                dueDateLimitMin.data(itemDueDateLimit);
            }
        }

        return dueDateLimitMin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultFixedDueDateForPaymSched</Name>
				<Source><![CDATA[
    private TransDate determineDefaultFixedDueDateForPaymSched(VendDocumentTableType _documentTableType)
    {
        TransDate dueDate;
        PaymTerm paymTerm;
        VendDocumentTableMap vendDocumentTableMap = _documentTableType.vendDocumentTableMap();
        VendInvoiceInfoTable vendInvoiceInfoTable = vendDocumentTableMap;

        #ISOCountryRegionCodes

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
            && vendDocumentTableMap.isDirectInvoice())
        {
            dueDate = this.getDocumentDate(vendDocumentTableMap);
            dueDate = PaymTerm::find(vendDocumentTableMap.parmPayment()).due(dueDate, _documentTableType.vendTable().PaymDayId);
        }
        else if (vendDocumentTableMap.isNonPO())
        {
            // Only default the due date if there is a vendor, and if there is not a payment schedule
            if ((vendDocumentTableMap.InvoiceAccount != ''))
            {
                dueDate = this.getDocumentDate(vendDocumentTableMap);
                paymTerm = PaymTerm::find(vendDocumentTableMap.Payment);
                dueDate = paymTerm.due(dueDate, _documentTableType.vendTable().PaymDayId);

                if (paymTerm.VendorUpdateDueDate != PaymentDueDateUpdatePolicy::NoUpdate)
                {
                    if (SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
                    {
                        dueDate = PaymCalendarSourceVendor::adjustDate(dueDate, paymTerm.VendorUpdateDueDate, _documentTableType.vendTable(), paymTerm.PaymTermId);
                    }
                }
            }
        }
        else if (vendInvoiceInfoTable.isAdvance())
        {
            dueDate = this.getDocumentDate(vendDocumentTableMap);
        }
        else
        {
            PurchTable purchTableForTesting = _documentTableType.purchTable();

            //if there is a dueDate from the PO, return it.
            if (purchTableForTesting.FixedDueDate)
            {
                dueDate = purchTableForTesting.FixedDueDate;
            }
            else
            {
                // Only default the due date if there is a vendor
                if ((vendDocumentTableMap.InvoiceAccount != ''))
                {
                    dueDate = this.getDocumentDate(vendDocumentTableMap);
                    paymTerm = PaymTerm::find(purchTableForTesting.Payment);
                    dueDate = paymTerm.due(dueDate, purchTableForTesting.paymDayId());

                    if (paymTerm.VendorUpdateDueDate != PaymentDueDateUpdatePolicy::NoUpdate)
                    {
                        if (SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
                        {
                            dueDate = PaymCalendarSourcePurchaseOrder::adjustDate(dueDate, paymTerm.VendorUpdateDueDate, purchTableForTesting);
                        }
                    }

                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
                    {
                        if (paymTerm.UseDeliveryDateForDueDate_ES)
                        {
                            // Clean up pre-calculated due date to force the recalculation later because it can depend on the delivery date of possible packing slip
                            dueDate = dateNull();
                        }
                        else
                        {
                            TransDate transDate = this.getDocumentDate(vendDocumentTableMap);
                            PaymDueDateLimit_ES dueDateLimit = this.calcDueDateLimit_ES(_documentTableType, paymTerm, transDate);
                            dueDate = paymTerm.due(transDate, purchTableForTesting.paymDayId(), false, dueDateLimit);
                        }
                    }
                }
            }
        }

        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPaymSchedDueDate</Name>
				<Source><![CDATA[
    public display PurchFixedDueDate displayPaymSchedDueDate()
    {
        DueDate dueDate;
        boolean isCopyPrecisely;
        VendPaymSched vendPaymSched = VendPaymSched::find(this.TableId, this.RecId);

        if (!this.isNonPO() && !vendPaymSched)
        {
            vendPaymSched = VendPaymSched::find(this.purchTable().TableId, this.purchTable().RecId);
            isCopyPrecisely = true;
        }

        if (vendPaymSched && (!isCopyPrecisely || (isCopyPrecisely && vendPaymSched.CopyPreciselyToInvoice)))
        {
            VendPaymSchedLine vendPaymSchedLine;

            select firstOnly RecId, DueDate from vendPaymSchedLine
                    order by DueDate asc
                    where vendPaymSchedLine.FatherRecID == vendPaymSched.RecId;

            dueDate = vendPaymSchedLine.DueDate;
        }
        else
        {
            VendDocumentTableType_Invoice vendDocumentTableType = this.type();
            if (vendDocumentTableType is VendDocumentTableType_Invoice)
            {
                dueDate = this.determineDefaultFixedDueDateForPaymSched(vendDocumentTableType);
            }
        }

        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editFixedDueDate</Name>
				<Source><![CDATA[
    public edit PurchFixedDueDate editFixedDueDate(boolean _set, PurchFixedDueDate _fixedDueDate)
    {
        PurchFixedDueDate originalFixedDueDate;

        if (_set)
        {
            originalFixedDueDate = this.FixedDueDate;
            this.FixedDueDate = _fixedDueDate;

            if (!this.validateField(fieldNum(VendInvoiceInfoTable, FixedDueDate)))
            {
                this.FixedDueDate = originalFixedDueDate;
            }
        }

        if (this.PaymentSched != '' || (!this.isNonPO() && this.purchTable().PaymentSched != ''))
        {
            return this.displayPaymSchedDueDate();
        }

        if (this.FixedDueDate == dateNull())
        {
            this.initFixedDueDate_ES();
        }

        return this.FixedDueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFixedDueDate_ES</Name>
				<Source><![CDATA[
    private void initFixedDueDate_ES()
    {
        #ISOCountryRegionCodes
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
        {
            VendDocumentTableType_Invoice vendDocumentTableType = this.type();
            if (vendDocumentTableType is VendDocumentTableType_Invoice)
            {
                PaymTerm paymTerm = PaymTerm::find(vendDocumentTableType.purchTable().Payment);
                if (paymTerm.UseDeliveryDateForDueDate_ES)
                {
                    var packingSlipDate = this.firstPackingSlipDate_ES();
                    if (packingSlipDate)
                    {
                        this.FixedDueDate = packingSlipDate;
                    }
                    else
                    {
                        this.FixedDueDate = vendDocumentTableType.purchTable().DeliveryDate;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBudgetReservationBalance_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any of the vendor invoice lines of the specified vendor invoice exceed
    /// their referenced budget reservation line's remaining balance.
    /// </summary>
    /// <param name="_vendInvoiceInfoTableRefId">
    /// The <c>TableRefId</c> of the specified <c>VendInvoiceInfoTable</c> record.
    /// </param>
    /// <param name="_sourceDocumentHeaderRecId">
    /// The <c>SourceDocumentHeaderRecId</c> of the specified <c>VendInvoiceInfoTable</c> record.
    /// </param>
    public static void checkBudgetReservationBalance_PSN(TradeLineRefId _vendInvoiceInfoTableRefId, SourceDocumentHeaderRecId _sourceDocumentHeaderRecId)
    {
        VendInvoiceInfoLine localVendInvoiceInfoLine;
        VendInvoiceInfoTable localVendInvoiceInfoTable;
        BudgetReservationHeader_PSN budgetReservationHeaderLocal;
        BudgetReservationLine_PSN budgetReservationLineLocal;

        if (PSNBudgetReservationVendorInvCheckBalFlight::instance().isEnabled())
        {
            while select BudgetReservationLine_PSN from localVendInvoiceInfoLine
                group by BudgetReservationLine_PSN
                where localVendInvoiceInfoLine.BudgetReservationLine_PSN != 0
                exists join localVendInvoiceInfoTable
                    where localVendInvoiceInfoTable.SourceDocumentHeader == _sourceDocumentHeaderRecId
                    && localVendInvoiceInfoTable.TableRefId == localVendInvoiceInfoLine.TableRefId
                    && localVendInvoiceInfoTable.ParmId == localVendInvoiceInfoLine.ParmId
                exists join budgetReservationLineLocal
                    where budgetReservationLineLocal.RecId == localVendInvoiceInfoLine.BudgetReservationLine_PSN
                exists join budgetReservationHeaderLocal
                    where budgetReservationHeaderLocal.RecId == budgetReservationLineLocal.BudgetReservationHeader_PSN
                    && budgetReservationHeaderLocal.RelievingDocumentType == BudgetReservationRelievingDocument_PSN::VendorInvoice
            {
                // Checks the vendor invoice line balance against the referenced budget reservation line.
                BudgetReservation_PSN::checkBudgetReservationBalance(localVendInvoiceInfoLine.BudgetReservationLine_PSN, _sourceDocumentHeaderRecId);
            }
        }
        else
        {
            while select BudgetReservationLine_PSN from localVendInvoiceInfoLine
                group by BudgetReservationLine_PSN
                where localVendInvoiceInfoLine.TableRefId == _vendInvoiceInfoTableRefId
                && localVendInvoiceInfoLine.ParmId != ''
                && localVendInvoiceInfoLine.BudgetReservationLine_PSN != 0
                exists join budgetReservationLineLocal
                    where budgetReservationLineLocal.RecId == localVendInvoiceInfoLine.BudgetReservationLine_PSN
                exists join budgetReservationHeaderLocal
                    where budgetReservationHeaderLocal.RecId == budgetReservationLineLocal.BudgetReservationHeader_PSN
                    && budgetReservationHeaderLocal.RelievingDocumentType == BudgetReservationRelievingDocument_PSN::VendorInvoice
            {
                // Checks the vendor invoice line balance against the referenced budget reservation line.
                BudgetReservation_PSN::checkBudgetReservationBalance(localVendInvoiceInfoLine.BudgetReservationLine_PSN, _sourceDocumentHeaderRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTax1099ForeignIndicator</Name>
				<Source><![CDATA[
    public display Tax1099ForeignEntityIndicator displayTax1099ForeignIndicator()
    {
        VendTable vendTable = this.vendTable_InvoiceAccount();

        return vendTable.ForeignEntityIndicator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePostingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the posting date to next fiscal open period if current date is noHold
    /// </summary>
   
    [SysObsolete("The method has been deprecated", false, 06\01\2023)]
    public void updatePostingDate()
    {
        if (!VendInvoiceUpdatePostingDateInWorkFlowApprovalV2Flight::instance().isEnabled())
        {
            TransDate documentOrTransDate = this.updateDate();

            if (!LedgerFiscalCalendar::checkLedgerPeriodDateModule(CompanyInfoHelper::fiscalCalendarRecId(), documentOrTransDate, SysModule::Purch, false))
            {
                ttsbegin;
                FiscalPeriodStart transDate = LedgerFiscalCalendar::findFirstOpenStartDateModule(CompanyInfoHelper::fiscalCalendarRecId(), documentOrTransDate, SysModule::Purch);

                if ((transDate != dateNull()) && (transDate != documentOrTransDate))
                {
                    if (this.useDocumentDate())
                    {
                        this.DocumentDate = transDate;
                    }
                    else
                    {
                        this.TransDate = transDate;
                    }

                    this.update();
                }

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportingCurrencyFixedExchangeRateFromAccounting</Name>
				<Source><![CDATA[
    internal void setReportingCurrencyFixedExchangeRateFromAccounting()
    {
        this.CustVendReportingCurrencyFixedExchangeRate::setReportingCurrencyFixedExchangeRate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccountingDistributions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the accounting distributions for the <c>VendInvoiceInfoTable</c> transaction.
    /// </summary>
    /// <returns>
    /// true if the distributions are valid; otherwise false.
    /// </returns>
    internal boolean validateAccountingDistributions()
    {
        return SourceDocumentProvider::areSourceDocAccDistAccountValid(SourceDocumentHeader::find(this.SourceDocumentHeader), true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasMarkupTypeItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the invoice has any item charge in its header and throws an error.
    /// </summary>
    /// <returns>
    /// true if any item charge is existed in its header; otherwise false.
    /// </returns>
    internal static boolean hasMarkupTypeItem(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        MarkupTrans markupTrans;
        MarkupTable markupTable;
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;

        // Create two queries in order to make it better performance.
        select firstonly RecId from markupTrans
            where markupTrans.IsDeleted == NoYes::No
            join vendInvoiceInfoSubTable
                where vendInvoiceInfoSubTable.ParmId == _vendInvoiceInfoTable.ParmId
                    && vendInvoiceInfoSubTable.TableRefId == _vendInvoiceInfoTable.TableRefId
                    && markupTrans.TransTableId == vendInvoiceInfoSubTable.TableId
                    && markupTrans.TransRecId == vendInvoiceInfoSubTable.RecId
            exists join markupTable
                 where markupTable.MarkupCode == markupTrans.MarkupCode
                    && (markupTable.CustType == MarkupType::Item
                        || markupTable.VendType == MarkupType::Item);

        if (!markupTrans.RecId)
        {
            select firstonly RecId from markupTrans
                where markupTrans.IsDeleted == NoYes::No
                    && markupTrans.TransTableId == _vendInvoiceInfoTable.TableId
                    && markupTrans.TransRecId == _vendInvoiceInfoTable.RecId
                exists join markupTable
                     where markupTable.MarkupCode == markupTrans.MarkupCode
                        && (markupTable.CustType == MarkupType::Item
                            || markupTable.VendType == MarkupType::Item);
        }

        return markupTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoiceTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the invoice total and registered invoice total are equal. If not, prohibit submission to workflow and throw an error.
    /// </summary>
    /// <returns>
    /// true if the invoice total and registered invoice total are equal; otherwise false.
    /// </returns>
    internal VendInvoiceTotalValidationResult validateInvoiceTotal()
    {
        if (this.Ordering == DocumentStatus::ApproveJournal)
        {
            PurchTotals purchTotals = PurchTotals::newParmTable(
                this,
                PurchUpdate::All,
                this.ParmId,
                '',
                this.Ordering);
            purchTotals.calc();

            LedgerJournalTrans ledgerJournalTrans = LedgerJournalTrans::findRecId(this.PoolRecId, false);
            VendInvoiceJour vendInvoiceJour;

            select vendInvoiceJour
                where vendInvoiceJour.LedgerVoucher == ledgerJournalTrans.Voucher
                    && vendInvoiceJour.InvoiceId == ledgerJournalTrans.Invoice;

            return VendDocumentTableType_ApproveJournal::checkTotalInvoiceAmount(purchTotals, vendInvoiceJour);
        }

        return VendInvoiceTotalValidationResult::newForSuccess(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existIntercompanyVendorPurchaseOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the vendor invoice account is setup for intercompany and a purchase order line exists.
    /// </summary>
    /// <returns>
    /// true if the invoice account is intercompany and a PO line exists; otherwise, false.
    /// </returns>
    internal boolean existIntercompanyVendorPurchaseOrderLine()
    {
        return this.vendTable_InvoiceAccount().interCompanyTradingRelationActive()
            && VendInvoiceInfoLine::existPO(this.ParmId, this.TableRefId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetVendorInvoiceWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reset the invoice from the workflow.
    /// </summary>
    /// <param name = "_vendInvoiceInfoTableRecId">The invoice identifier.</param>
    internal static void resetVendorInvoiceWorkflow(VendInvoiceInfoTableRecId _vendInvoiceInfoTableRecId)
    {
        Microsoft.Dynamics.Ax.Xpp.ErrorException errorException;
        VendInvoiceInfoTable vendInvoiceInfoTableForCancel = VendInvoiceInfoTable::findRecId(_vendInvoiceInfoTableRecId);
        int BackOffWait = RandomGenerate::construct().randomInt(10, 100);
        const int RetryNum = 3;

        try
        {
            ttsbegin;

            VendInvoiceInfoTable::resetRequestStatus(_vendInvoiceInfoTableRecId);
            VendInvoiceInfoTable::removeInvoiceFromPostingQueue(_vendInvoiceInfoTableRecId);

            if (VendInvoiceAutomationStateManagement::isInvoiceInAutomatedWorkflow(vendInvoiceInfoTableForCancel))
            {
                VendInvoiceAutomationStateManagement::pauseInvoiceAutomation(_vendInvoiceInfoTableRecId);
            }

            ttscommit;
        }
        catch (errorException)
        {
            if (xSession::currentRetryCount() >= RetryNum)
            {
                VendInstrumentation::logTelemetry(
                    VendInvoicePostTaskConstants::InstrumentationNamespace,
                    tableStr(VendInvoiceInfoTable),
                    funcName(),
                    tableStr(VendInvoiceInfoTable),
                    strFmt("Workflow Count: %1; %2", VendInvoiceInfoTable::countPendingWorkflow(vendInvoiceInfoTableForCancel), errorException.ToString()));
            }
            else
            {
                sleep(xSession::currentRetryCount() * BackOffWait);
                retry;
            }
        }

        VendInstrumentation::logTelemetry(
            VendInvoicePostTaskConstants::InstrumentationNamespace,
            tableStr(VendInvoiceInfoTable),
            funcName(),
            tableStr(VendInvoiceInfoTable),
            strFmt("%1", int642Str(_vendInvoiceInfoTableRecId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>countPendingWorkflow</Name>
				<Source><![CDATA[
    private static RecIdCount countPendingWorkflow(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        SysWorkflowTable workflowTable;
        WorkflowTrackingStatusTable workflowTrackingStatusTable;

        select count(RecId) from workflowTrackingStatusTable
            where workflowTrackingStatusTable.ContextCompanyId == _vendInvoiceInfoTable.DataAreaId
                && workflowTrackingStatusTable.ContextRecId == _vendInvoiceInfoTable.RecId
                && workflowTrackingStatusTable.ContextTableId == tableNum(VendInvoiceInfoTable)
                && workflowTrackingStatusTable.TrackingStatus == WorkflowTrackingStatus::Pending
            exists join workflowTable
                where workflowTable.WorkflowCorrelationId == workflowTrackingStatusTable.CorrelationId;

        return workflowTrackingStatusTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeInvoiceFromPostingQueue</Name>
				<Source><![CDATA[
    private static void removeInvoiceFromPostingQueue(VendInvoiceInfoTableRecId _vendInvoiceInfoTableRecId)
    {
        VendInvoiceIQueue vendInvoiceQueue = VendInvoiceQueueFactory::getVendInvoiceQueue();

        if (vendInvoiceQueue.count() == 0)
        {
            return;
        }

        VendInvoiceWorkflowAutomatedTaskDataContract vendInvoiceWorkflowAutomatedTaskDataContract = VendInvoiceWorkflowAutomatedTaskDataContract::construct();
        vendInvoiceWorkflowAutomatedTaskDataContract.parmWorkflowContextRecId(_vendInvoiceInfoTableRecId);

        vendInvoiceQueue.dequeue(vendInvoiceWorkflowAutomatedTaskDataContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAutomationMatchingStatus</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethod(true)]
    public display str displayAutomationMatchingStatus()
    {
        // Display automation matching status
        VendInvoiceMatchProductReceiptToInvoiceLineEvent matchingStatus = VendInvoiceMatchProductReceiptToInvoiceLineEvent::NotYetRun;

        DocumentEventLog documentEventLog = DocumentEventLog::findMostRecentLogEntryOfType(tableNum(VendInvoiceInfoTable), this.RecId, enumNum(VendInvoiceMatchProductReceiptToInvoiceLineEvent));

        if (documentEventLog)
        {
            matchingStatus = documentEventLog.EventEnumValue;
        }
        if (VendInvoiceIncludeManualCreatedInvoiceIntoAutomationFeature::isEnabled()
            && this.AutomationStatus == VendInvoiceAutomationstatus::NotApplicable)
        {
            matchingStatus = VendInvoiceMatchProductReceiptToInvoiceLineEvent::NotApplicable;
        }

        return enum2Str(matchingStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showLog</Name>
				<Source><![CDATA[
    internal void showLog()
    {
        container logContainer = info::infoStr2Con(this.Log);

        // The first element in the container is the CurrentVersion of the data set of the info class. If the element count is greater than one,
        // then the above call to 'infoStr2Con' was successful in preparing the message objects that can be imported into the infolog.
        // If not, then display the whole string in the 'VendInvoiceInfoTable.Log' as a warning.
        if (conLen(logContainer) > 1)
        {
            infolog.import(logContainer);
        }
        else
        {
            warning(this.Log);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendDocumentTableInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>VendDocumentTableInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// The <c>VendDocumentTableInterface</c> object.
    /// </returns>
    public VendDocumentTableInterface vendDocumentTableInterface()
    {
        return this.VendDocumentTableMap::vendDocumentTableInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFiscalYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the dates provided fall in same fiscal year or not.
    /// </summary>
    /// <param name="_newDate">
    /// The date to be verified.
    /// </param>
    /// <param name="_oldDate">
    /// The date to be verified.
    /// </param>
    /// <returns>
    /// true if the dates provided fall in same fiscal year; 
    /// otherwise, 
    /// gives warning message  when cross Year posting date Adjustment parameter set to Allowed with warning
    /// throws an exception when cross Year posting date Adjustment parameter set to Block with error.
    /// </returns>
    private boolean checkFiscalYear(Transdate _newDate, TransDate _oldDate)
    {
        if (!FiscalCalendars::areDatesInSameFiscalYear(CompanyInfoHelper::fiscalCalendarRecId(), _newDate, _oldDate))
        {
            VendParameters vendParameters = VendParameters::find();

            if (vendParameters.CrossYearPostingDateAdjustment == CrossYearPostingDateAdjustment::BlockWithError)
            {
                throw error("@AccountsPayable:DatesAreNotInSameFiscalYear");
            }
            else if (vendParameters.CrossYearPostingDateAdjustment == CrossYearPostingDateAdjustment::AllowWithWarning)
            {
                warning("@AccountsPayable:DatesAreNotInSameFiscalYearWarning");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyTransDateOrDocumentDate</Name>
				<Source><![CDATA[
    private void modifyTransDateOrDocumentDate(Transdate _newDate, Transdate _documentOrTransDate)
    {
        if ((_newDate != dateNull()) && (_newDate != _documentOrTransDate))
        {
            if (this.checkFiscalYear(_newDate, _documentOrTransDate))
            {
                if (this.useDocumentDate())
                {
                    this.DocumentDate = _newDate;
                    this.modifiedField(fieldNum(VendInvoiceInfoTable, DocumentDate));
                }
                else
                {
                    this.TransDate = _newDate;
                    this.modifiedField(fieldNum(VendInvoiceInfoTable, TransDate));
                }
            }
        }
              
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePostingDateV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the posting date based on field VendParameters->VendInvoicePostingDateAutoAdjustment value
    /// </summary>
    internal void updatePostingDateV2()
    {
        VendParameters vendParameters = VendParameters::find();
        TransDate documentOrTransDate = this.updateDate();
        TransDate newDate;
        boolean canUpdate = false;
        
        switch (vendParameters.VendInvoicePostingDateAutoAdjustment)
        {
            case VendInvoicePostingDateAutoAdjustment::NoChange:
                canUpdate = false;
                break;

            case VendInvoicePostingDateAutoAdjustment::AlwaysChangeToSystemDate:
                if (this.isUpdatePostingDate())
                {
                    newDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                    this.modifyTransDateOrDocumentDate(newDate, documentOrTransDate);
                    canUpdate = true;
                }
                break;

            case VendInvoicePostingDateAutoAdjustment::ChangeToSystemDateWhenPeriodIsOnHoldOrClosed:
                if (!LedgerFiscalCalendar::checkLedgerPeriodDateModule(CompanyInfoHelper::fiscalCalendarRecId(), documentOrTransDate, SysModule::Purch, false))
                {
                    newDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                    this.modifyTransDateOrDocumentDate(newDate, documentOrTransDate);
                    canUpdate = true;
                }
                break;

            case VendInvoicePostingDateAutoAdjustment::ChangeToFirstDayOfNewPeriodWhenPeriodIsOnHoldOrClosed:
                if (!LedgerFiscalCalendar::checkLedgerPeriodDateModule(CompanyInfoHelper::fiscalCalendarRecId(), documentOrTransDate, SysModule::Purch, false))
                {
                    newDate = LedgerFiscalCalendar::findFirstOpenStartDateModule(CompanyInfoHelper::fiscalCalendarRecId(), documentOrTransDate, SysModule::Purch);
                    this.modifyTransDateOrDocumentDate(newDate, documentOrTransDate);
                    canUpdate = true;
                }
                break;
        }
        if (canUpdate)
        {
            this.selectForUpdate(true);
            this.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUpdatePostingDate</Name>
				<Source><![CDATA[
    protected boolean isUpdatePostingDate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfPriceVarianceAboveTolerance</Name>
				<Source><![CDATA[
    private boolean checkIfPriceVarianceAboveTolerance(PurchTotals _purchTotals,
                                                       VendInvoiceMatching _vendInvoiceMatching,
                                                       VendParameters _vendParameters)
    {
        // Balance
        if (_vendParameters.UsePriceMatchingForSubTotalAmount
            && VendInvoiceMatching::isTotalPriceVarianceAboveToleranceForSubTotalAmount(_purchTotals.purchBalance(),
                                                                                        _vendInvoiceMatching.ExpectedBalance,
                                                                                        _vendInvoiceMatching.PriceTolerancePercentageForSubTotalAmount))
        {
            return false;
        }

        // Total discount
        if (_vendParameters.UsePriceMatchingForTotalDiscount
            && VendInvoiceMatching::isTotalPriceVarianceAboveToleranceForTotalDiscount(_purchTotals.purchEndDisc(),
                                                                                       _vendInvoiceMatching.ExpectedTotalDiscount,
                                                                                       _vendInvoiceMatching.PriceTolerancePercentageForTotalDiscount,
                                                                                       true))
        {
            return false;
        }

        // Misc charges (Markup)
        if (_vendParameters.UsePriceMatchingForCharges
            && VendInvoiceMatching::isTotalPriceVarianceAboveToleranceForCharges(_purchTotals.purchMarkup(),
                                                                                 _vendInvoiceMatching.ExpectedMarkup,
                                                                                 _vendInvoiceMatching.PriceTolerancePercentageForCharges))
        {
            return false;
        }

        // Sales tax
        if (_vendParameters.UsePriceMatchingForSalesTax
            && VendInvoiceMatching::isTotalPriceVarianceAboveToleranceForSalesTax(_purchTotals.purchTaxTotal(),
                                                                                  _vendInvoiceMatching.ExpectedSalesTax,
                                                                                  _vendInvoiceMatching.PriceTolerancePercentageForSalesTax))
        {
            return false;
        }

        // Document amount
        if (_vendParameters.UsePriceMatchingForInvoiceAmount
            && VendInvoiceMatching::isTotalPriceVarianceAboveToleranceForInvoiceAmount(_purchTotals.purchTotalAmount(),
                                                                                       _vendInvoiceMatching.ExpectedDocumentAmount,
                                                                                       _vendInvoiceMatching.PriceTolerancePercentageForInvoiceAmount))
        {
            return false;
        }

        // Round off
        if (_vendParameters.UsePriceMatchingForRoundOff
            && VendInvoiceMatching::isTotalPriceVarianceAboveToleranceForRoundOff(_purchTotals.purchRoundOff(),
                                                                                  _vendInvoiceMatching.PriceToleranceAmountForInvoiceRoundOff))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removePurchAgreementReferenceFromInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the <c>PuchAgreementHeader_PSN</c> reference from the invoice
    /// </summary>
    internal void removePurchAgreementReferenceFromInvoice()
    {
        ttsbegin;
        this.selectForUpdate(true);
        this.PurchAgreementHeader_PSN = 0;
        this.doUpdate();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfProjExistsInLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if project exists in any  <c>VendInvoiceInfoLine</c> linked in <c>VendInvoiceInfoTable</c>.
    /// </summary>
    /// <returns>
    /// true if the vendor lines contains project;
    /// otherwise,
    /// return false
    /// </returns>
    public boolean checkIfProjExistsInLines()
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceInfoLine_Project vendInvoiceInfoLine_Project;

        select firstonly RecId from vendInvoiceInfoLine
            exists join vendInvoiceInfoLine_Project 
                where vendInvoiceInfoLine.RecId == vendInvoiceInfoLine_Project.VendInvoiceInfoLineRefRecId 
                   && vendInvoiceInfoLine.ParmId == this.ParmId 
                   && vendInvoiceInfoLine.TableRefId == this.TableRefId;

        return vendInvoiceInfoLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorChargedSalesTax</Name>
				<Source><![CDATA[
    private void updateVendorChargedSalesTax()
    {
        if ((TaxIntegrationUtils::isTaxIntegrationUseTaxAssessmentEnabled(TaxIntegrationBusinessProcess::Purchase)
                && this.AccrueSalesTaxType == TaxAccrueSalesTaxType::AccrueUseTax)
            && (this.ImportedAmount || this.ImportedSalesTax))
        {
            this.VendorChargedSalesTax = this.ImportedSalesTax;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMarkupTransForHeaderFromTemplate</Name>
				<Source><![CDATA[
    internal void insertMarkupTransForHeaderFromTemplate(VendInvoiceInfoSubTable _vendInvoiceInfoSubTable,
                                            VendInvoiceTableMarkupTransTemplate _vendInvoiceTableMarkupTransTemplate)
    {
        MarkupTrans markupTrans;

        markupTrans.initFromVendInvoiceInfoSubTable(_vendInvoiceInfoSubTable);
        markupTrans.TransRecId = _vendInvoiceInfoSubTable.RecId;
        markupTrans.TransTableId = _vendInvoiceInfoSubTable.TableId;
        markupTrans.LineNum = _vendInvoiceTableMarkupTransTemplate.LineNum;
        markupTrans.MarkupCategory = _vendInvoiceTableMarkupTransTemplate.MarkupCategory;
        markupTrans.Txt = _vendInvoiceTableMarkupTransTemplate.Description;
        markupTrans.TaxGroup = _vendInvoiceTableMarkupTransTemplate.TaxGroup;
        markupTrans.TaxItemGroup = _vendInvoiceTableMarkupTransTemplate.TaxItemGroup;
        markupTrans.MarkupCode = _vendInvoiceTableMarkupTransTemplate.MarkupCode;
        markupTrans.Value = _vendInvoiceTableMarkupTransTemplate.Value;
        markupTrans.VendInvoiceTemplate = _vendInvoiceTableMarkupTransTemplate.TransRecId;
        markuptrans.VendInvoiceTableMarkupTrans = _vendInvoiceTableMarkupTransTemplate.RecId;
        markupTrans.CurrencyCode = _vendInvoiceTableMarkupTransTemplate.CurrencyCode;

        markupTrans.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS126104</DeveloperDocumentation>
	<Label>@SYS108835</Label>
	<SingularLabel>@SYS3179</SingularLabel>
	<TableGroup>TransactionHeader</TableGroup>
	<TitleField1>Num</TitleField1>
	<TitleField2>PurchName</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>AccountsPayable</Modules>
	<PrimaryIndex>TableRefIdx</PrimaryIndex>
	<ReplacementKey>TableRefIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>TransportationDocument</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TransportationDocument</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>MarkupTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MarkupTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>SourceDocumentHeader</Name>
			<Relation></Relation>
			<Table>SourceDocumentHeader</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TaxWorkRegulation</Name>
			<Relation></Relation>
			<Table>TaxWorkRegulation</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>VendInvoiceInfoMarkupMatchingTolerance</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>VendInvoiceInfoMarkupMatchingTolerance</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>VendInvoiceInfoSubTable</Name>
			<Relation></Relation>
			<Table>VendInvoiceInfoSubTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>VendInvoiceInfoTableTaxExtension_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>VendInvoiceInfoTableTaxExtension_IN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>VendInvoiceMatching</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>VendInvoiceMatching</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>VendPaymSched</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>VendPaymSched</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>VendInvoiceInfo_PaymentDisbursement</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>VendInvoiceInfo_PaymentDisbursement</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Num</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedDueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Payment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorRequestedWorkerEmail</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LogisticsElectronicAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Num</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParmJobStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createdDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createdBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Log</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableRefId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Approved</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Approver</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceReleaseDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReleaseDateComment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Ordering</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BatchAdministration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Num</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Log</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Hold</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceSaveStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParmJobStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentOrigin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MatchStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackedExtensions</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS12227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceRoundOff</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxRoundOff</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReCalculate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Approved</Name>
			<Label>@SYS10158</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Approved</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Approver</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorRequestedWorkerEmail</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LogisticsElectronicAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceReleaseDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReleaseDateComment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BankLCImportGroup</Name>
			<Label>@SYS316286</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankLCImportLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BankManagement</Name>
			<Label>@SYS25339</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSpec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendBankAccountID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CashDiscount</Name>
			<Label>@SYS128433</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashDiscCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscPercent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Correction</Name>
			<Label>@SYS13069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Storno</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Currency</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchRateSecondary</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportingCurrencyExchangeRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CurrencyShow</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editExchRateSecond</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editReportingCurrencyFixedExchangeRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Delivery</Name>
			<Label>@SYS7924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>deliveryAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS342338</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountingDistributionTemplate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Document</Name>
			<Label>@SYS101280</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DocumentPreview</Name>
			<Label>@SYS117648</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Num</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FixedDueDate</Name>
			<Label>@SYS14588</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FixedDueDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ForeignTrade</Name>
			<Label>@SYS27650</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Port</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatProcId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountyOrigDest</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ListCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchAgreementHeader_PSN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ImportDeclaration_BR</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceDetails</Name>
			<Label>@SYS119043</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceGrouping</Name>
			<Label>@SYS130609</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LogisticsElectronicAddress</Name>
			<Label>@SYS315655</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LogisticsElectronicAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OtherDates</Name>
			<Label>@SYS4082908</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedDueDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Storno</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedDueDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymentInvoice</Name>
			<Label>@SYS128429</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Payment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentSched</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedDueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSpec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendBankAccountID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting</Name>
			<Label>@SYS5943</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettleVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting_RU</Name>
			<Label>@SYS5943</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Prepay</Name>
			<Label>@SYS183647</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProcessingTime</Name>
			<Label>@SYS28567</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>processingTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>numberOfLines</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchaseTable</Name>
			<Label>@SYS1653</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Remittance</Name>
			<Label>@SYS152838</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RemittanceLocation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RequestStatus</Name>
			<Label>@sys312690</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequestStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EnterpriseNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InclTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IgnoreCalculatedSalesTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideSalesTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SourceDocument</Name>
			<Label>@sys127863</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentHeader</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VarianceApproval</Name>
			<Label>@SYS115578</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VarianceApproved</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VarianceApprover</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VarianceApprovedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VarianceComment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastMatchVariance</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Vendor</Name>
			<Label>@SYS9455</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrderAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendPaymentGroup</Name>
			<Label>@SYS133130</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendPaymentGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VSSCurrency</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VSSDeliveryAddress</Name>
			<Label>@SYS7924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>deliveryAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VSSDiscount</Name>
			<Label>@SYS22031</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscPercent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VSSElectronicAddress</Name>
			<Label>@SYS315655</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendorRequestedWorkerEmail</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VSSForeignTrade</Name>
			<Label>@SYS27650</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Port</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatProcId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VSSGeneral</Name>
			<Label>@SYS152787</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Num</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayInvoiceStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VSSInventory</Name>
			<Label>@SYS129160</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VSSInvoicDates</Name>
			<Label>@SYS315666</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedDueDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VSSInvoiceDetails</Name>
			<Label>@SYS315693</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Num</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>packingSlipId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VSSOtherInvoiceDetails</Name>
			<Label>@SYS315677</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Hold</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editIsVendorAdvance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VSSPayment</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendBankAccountID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VSSRemittance</Name>
			<Label>@SYS152694</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RemittanceLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayRemittanceAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VSSSalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VATNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EnterpriseNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InclTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressLookup</Name>
			<Label>@SYS88672</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Num</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VATNum</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VATNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNumRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNumTableType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SubconVendorInvoice</Name>
			<Label>Subcontract Vendor Invioce</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SubcontractInvoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BlockVendorPayment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AccruedSalesTax</Name>
			<Label>@TaxIntegration:AccrueUseTaxLabel</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccrueSalesTaxType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorChargedSalesTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPostingProfile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AccountingDistributionTemplate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AccountingDistributionTemplateRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AddressRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AddressRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AddressRefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AddressRefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Approved</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Approved</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Approver</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmApprover</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankLCImportLine</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankLCLineRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BatchAdministration</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BatchAdministration</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CashDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendCashDiscAmount</ExtendedDataType>
			<Label>@SYS4376</Label>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CashDiscCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendCashDiscCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CashDiscDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendCashDiscDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CashDiscPercent</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DiscPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountyOrigDest</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AddressCountyOrigDest</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendName</ExtendedDataType>
			<GroupPrompt>@SYS7399</GroupPrompt>
			<Label>@SYS22058</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceDescriptionLarge</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DocumentDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocumentDate</ExtendedDataType>
			<Label>@SYS57610</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocumentNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocumentNum</ExtendedDataType>
			<Label>@SYS8434</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DocumentOrigin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>DocumentOrigin</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>EndDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EndDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>EndDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchEndDiscAmount</ExtendedDataType>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EnterpriseNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxEnterpriseNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ErrorInvalidDistribution</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EUROTriangulation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EUROTriangulation</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendExchRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchRateSecondary</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExchrateSecondary</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FixedDueDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchFixedDueDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FixedExchRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FixedExchRate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Hold</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Hold</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IgnoreCalculatedSalesTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
			<Label>@SYS184202</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InclTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InclTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchInventLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendInvoiceAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>InvoiceReleaseDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceReleaseDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceRoundOff</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RoundOff</ExtendedDataType>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InvoiceType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PurchInvoiceType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LastMatchVariance</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LastMatchVariance</ExtendedDataType>
			<EnumType>LastMatchVarianceOptions</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ListCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ListcodeId</ExtendedDataType>
			<FeatureClass>EUSalesListToggle</FeatureClass>
			<EnumType>Listcode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Log</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LogisticsElectronicAddress</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MarkupGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendMarkupGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MatchStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>VendInvoiceMatchStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Num</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendInvoiceId</ExtendedDataType>
			<GroupPrompt>@SYS13864</GroupPrompt>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NumberSequenceGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NumberSequenceGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Ordering</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS2934</Label>
			<Visible>No</Visible>
			<EnumType>DocumentStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParmId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ParmId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ParmJobStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ParmJobStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Payment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPaymTermId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentSched</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymSchedId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPaymMode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymSpec</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymSpec</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PoolRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LedgerJournalTransRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Port</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatPortId</ExtendedDataType>
			<FeatureClass>IntrastatPortToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchAgreementHeader_PSN</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReCalculate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS68968</Label>
			<Visible>No</Visible>
			<EnumType>boolean</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReleaseDateComment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReleaseDateComment</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RemittanceLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RemittanceLocation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RequestStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@sys312691</Label>
			<EnumType>VendInvoiceRequestStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SettleVoucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchSettlementType</ExtendedDataType>
			<EnumType>SettlementType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentHeader</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SourceDocumentHeaderRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentLine</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SourceDocumentLineRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>StartDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>StartDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StatProcId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatProcId</ExtendedDataType>
			<FeatureClass>IntrastatProcToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Storno</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<Label>@SYS6054</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TableRefId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TradeLineRefId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxRoundOff</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
			<Label>@SYS24823</Label>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransactionCodeId</ExtendedDataType>
			<FeatureClass>IntrastatTransactionCodeToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<GroupPrompt>@SYS7402</GroupPrompt>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Transport</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransport</ExtendedDataType>
			<FeatureClass>IntrastatTransportToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TransportationDocument</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransportationDocumentRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VarianceApproved</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VarianceApproved</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>VarianceApprovedDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VarianceApprovedDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VarianceApprover</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmApprover</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VarianceComment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VarianceComment</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VATNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VATNumJournal</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendBankAccountID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendBankAccountId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendInvoiceGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendInvoiceGrouping</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VendInvoiceSaveStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>VendInvoiceSaveStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendorRequestedWorkerEmail</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Email</ExtendedDataType>
			<Label>@SYS330340</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendPaymentGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPaymentGrouping</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProcessingAdvanced</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CreditCorrection</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>UnknownNoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PerformFullInvoiceMatching</Name>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReportingCurrencyExchangeRate</Name>
			<ExtendedDataType>ReportingCurrencyExchRate</ExtendedDataType>
			<Label>@GeneralLedger:ReportingCurrencyFixedExchangeRate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReceivedDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendInvoiceReceivedDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ImportedAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendInvoiceImportedAmount</ExtendedDataType>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ImportedSalesTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendInvoiceImportedSalesTax</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeInAutomatedProcessing</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendInvoiceIncludeInAutomatedProcessing</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutomationStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>VendInvoiceAutomationStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VATNumRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VATNumTableType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<Visible>No</Visible>
			<EnumType>TaxExemptNumberSourceType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideSalesTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntegrationOverrideSalesTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SubcontractInvoice</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<FeatureClass>ProjProjectOperationsSubcontractLineIntegrationToggle</FeatureClass>
			<Label>@Proj:SubcontractInvoice</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BlockVendorPayment</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<FeatureClass>ProjProjectOperationsSubcontractLineIntegrationToggle</FeatureClass>
			<Label>@Proj:BlockVendorPaymentsTillPMConfirmation</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjVendInvoiceStatus</Name>
			<EnumType>ProjVendInvoiceStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>VendorChargedSalesTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxVendorChargedSalesTax</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccrueSalesTaxType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxAccrueSalesTaxType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RecurrenceInvoiceDefaultType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS314829</Label>
			<Visible>No</Visible>
			<EnumType>VendRecurrenceInvoiceDefaultType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VendorChargedTaxTolerance</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>TaxIntegrationVendorChargedTaxTolerance</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VendorChargedTaxAssessment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>TaxIntegrationVendorChargedTaxAssessment</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FinTag</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FinTagRecId</ExtendedDataType>
			<FeatureClass>PurchaseOrderFinTagFeature</FeatureClass>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PurchIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PoolRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ParmIdPurchIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PurchId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TableRefIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TableRefId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SDHeaderIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentHeader</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ApproverIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Approver</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VarianceApproverIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>VarianceApprover</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PurchAgreementHeader_PSNIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchAgreementHeader_PSN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SDLineIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ParmJobStatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmJobStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DeliveryPostalAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TableRefIdOnlyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>TableRefId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CurrencyCodeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>FiscalDocumentTextUpdateTableMap_BR</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
					<MapFieldTo>OrderAccount</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>FormletterParmTable</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BankLCLine</MapField>
					<MapFieldTo>BankLCImportLine</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentDate_W</MapField>
					<MapFieldTo>DocumentDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndDateTime</MapField>
					<MapFieldTo>EndDateTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Hold</MapField>
					<MapFieldTo>Hold</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Log</MapField>
					<MapFieldTo>Log</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRPackingBoxName</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderId</MapField>
					<MapFieldTo>PurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ParmId</MapField>
					<MapFieldTo>ParmId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ParmJobStatus</MapField>
					<MapFieldTo>ParmJobStatus</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StartDateTime</MapField>
					<MapFieldTo>StartDateTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TableRefId</MapField>
					<MapFieldTo>TableRefId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate_W</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>InventStorageDimMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
					<MapFieldTo>InventLocationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
					<MapFieldTo>InventSiteId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PaymModeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PaymMode</MapField>
					<MapFieldTo>PaymMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymSpec</MapField>
					<MapFieldTo>PaymSpec</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SourceDocumentHeaderImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentHeader</MapField>
					<MapFieldTo>SourceDocumentHeader</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SourceDocumentLineImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>VendDocumentTableMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccrueSalesTaxType</MapField>
					<MapFieldTo>AccrueSalesTaxType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankLCImportLine</MapField>
					<MapFieldTo>BankLCImportLine</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BatchAdministration</MapField>
					<MapFieldTo>BatchAdministration</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDisc</MapField>
					<MapFieldTo>CashDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscCode</MapField>
					<MapFieldTo>CashDiscCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscDate</MapField>
					<MapFieldTo>CashDiscDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscPercent</MapField>
					<MapFieldTo>CashDiscPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CountyOrigDest</MapField>
					<MapFieldTo>CountyOrigDest</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryName</MapField>
					<MapFieldTo>DeliveryName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Description</MapField>
					<MapFieldTo>Description</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentDate</MapField>
					<MapFieldTo>DocumentDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentNum</MapField>
					<MapFieldTo>DocumentNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentOrigin</MapField>
					<MapFieldTo>DocumentOrigin</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndDateTime</MapField>
					<MapFieldTo>EndDateTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndDisc</MapField>
					<MapFieldTo>EndDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EnterpriseNumber</MapField>
					<MapFieldTo>EnterpriseNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EUROTriangulation</MapField>
					<MapFieldTo>EUROTriangulation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRate</MapField>
					<MapFieldTo>ExchRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRateSecondary</MapField>
					<MapFieldTo>ExchRateSecondary</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FinTag</MapField>
					<MapFieldTo>FinTag</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FixedDueDate</MapField>
					<MapFieldTo>FixedDueDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FixedExchRate</MapField>
					<MapFieldTo>FixedExchRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Hold</MapField>
					<MapFieldTo>Hold</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IgnoreCalculatedSalesTax</MapField>
					<MapFieldTo>IgnoreCalculatedSalesTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InclTax</MapField>
					<MapFieldTo>InclTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventProfileType_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAccount</MapField>
					<MapFieldTo>InvoiceAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceReleaseDate</MapField>
					<MapFieldTo>InvoiceReleaseDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceRoundOff</MapField>
					<MapFieldTo>InvoiceRoundOff</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LastMatchVariance</MapField>
					<MapFieldTo>LastMatchVariance</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Log</MapField>
					<MapFieldTo>Log</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Num</MapField>
					<MapFieldTo>Num</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceGroup</MapField>
					<MapFieldTo>NumberSequenceGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
					<MapFieldTo>OrderAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Ordering</MapField>
					<MapFieldTo>Ordering</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OverrideSalesTax</MapField>
					<MapFieldTo>OverrideSalesTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ParmId</MapField>
					<MapFieldTo>ParmId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ParmJobStatus</MapField>
					<MapFieldTo>ParmJobStatus</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Payment</MapField>
					<MapFieldTo>Payment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymentSched</MapField>
					<MapFieldTo>PaymentSched</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymId</MapField>
					<MapFieldTo>PaymId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymMode</MapField>
					<MapFieldTo>PaymMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymSpec</MapField>
					<MapFieldTo>PaymSpec</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Port</MapField>
					<MapFieldTo>Port</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PostingProfile</MapField>
					<MapFieldTo>PostingProfile</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchAgreementHeader_PSN</MapField>
					<MapFieldTo>PurchAgreementHeader_PSN</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchId</MapField>
					<MapFieldTo>PurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchName</MapField>
					<MapFieldTo>PurchName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReCalculate</MapField>
					<MapFieldTo>ReCalculate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReleaseDateComment</MapField>
					<MapFieldTo>ReleaseDateComment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RemittanceLocation</MapField>
					<MapFieldTo>RemittanceLocation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReportingCurrencyExchangeRate</MapField>
					<MapFieldTo>ReportingCurrencyExchangeRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SettleVoucher</MapField>
					<MapFieldTo>SettleVoucher</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentHeader</MapField>
					<MapFieldTo>SourceDocumentHeader</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StartDateTime</MapField>
					<MapFieldTo>StartDateTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StatProcId</MapField>
					<MapFieldTo>StatProcId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Storno</MapField>
					<MapFieldTo>Storno</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TableRefId</MapField>
					<MapFieldTo>TableRefId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxRoundOff</MapField>
					<MapFieldTo>TaxRoundOff</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransactionCode</MapField>
					<MapFieldTo>TransactionCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Transport</MapField>
					<MapFieldTo>Transport</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VarianceApproved</MapField>
					<MapFieldTo>VarianceApproved</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VarianceApprovedDateTime</MapField>
					<MapFieldTo>VarianceApprovedDateTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VarianceComment</MapField>
					<MapFieldTo>VarianceComment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATNum</MapField>
					<MapFieldTo>VATNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATNumRecId</MapField>
					<MapFieldTo>VATNumRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATNumTableType</MapField>
					<MapFieldTo>VATNumTableType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendBankAccountID</MapField>
					<MapFieldTo>VendBankAccountID</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendInvoiceGroup</MapField>
					<MapFieldTo>VendInvoiceGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendInvoiceSaveStatus</MapField>
					<MapFieldTo>VendInvoiceSaveStatus</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendorVATDate</MapField>
					<MapFieldTo>VendorVATDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendPaymentGroup</MapField>
					<MapFieldTo>VendPaymentGroup</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>VendInvoiceMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentDate</MapField>
					<MapFieldTo>DocumentDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndDisc</MapField>
					<MapFieldTo>EndDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRate</MapField>
					<MapFieldTo>ExchRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRateSecondary</MapField>
					<MapFieldTo>ExchRateSecondary</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAccount</MapField>
					<MapFieldTo>InvoiceAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceId</MapField>
					<MapFieldTo>Num</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceRoundOff</MapField>
					<MapFieldTo>InvoiceRoundOff</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
					<MapFieldTo>OrderAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchId</MapField>
					<MapFieldTo>PurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReportingCurrencyExchangeRate</MapField>
					<MapFieldTo>ReportingCurrencyExchangeRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentHeader</MapField>
					<MapFieldTo>SourceDocumentHeader</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TransitDocumentTransactionMap_IN</MappingTable>
			<Connections />
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TradePostalAddress</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DeliveryName</MapField>
					<MapFieldTo>DeliveryName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalTable</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InclTax</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ListCode</MapField>
					<MapFieldTo>ListCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PartyTaxId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Posted</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxId</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>CustVendReportingCurrencyFixedExchangeRate</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ExchangeRate</MapField>
					<MapFieldTo>ExchRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReportingCurrencyExchangeRate</MapField>
					<MapFieldTo>ReportingCurrencyExchangeRate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TaxExemptVATNumMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>VATNum</MapField>
					<MapFieldTo>VATNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATNumRecId</MapField>
					<MapFieldTo>VATNumRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATNumTableType</MapField>
					<MapFieldTo>VATNumTableType</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>CustVendInvoiceOrderAccountMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InvoiceAccount</MapField>
					<MapFieldTo>InvoiceAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
					<MapFieldTo>OrderAccount</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AccountingDistributionTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AccountingDistributionTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AccountingDistributionTemplate</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AccountingDistributionTemplate_VendInvoiceInfoTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountingDistributionTemplate</Name>
					<Field>AccountingDistributionTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Approver_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Approver_VendInvoiceInfoTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Approver</Name>
					<Field>Approver</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankLCImportLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankLCImportLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankLCImportLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankLCImportLine_VendInvoiceInfoTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankLCImportLine</Name>
					<Field>BankLCImportLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CashDisc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CashDisc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CashDiscCode</Name>
					<SourceEDT>VendCashDiscCode</SourceEDT>
					<Field>CashDiscCode</Field>
					<RelatedField>CashDiscCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CountyOrigDest</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCounty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CountyOrigDest</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceInfoTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountyOrigDest</Name>
					<Field>CountyOrigDest</Field>
					<RelatedField>CountyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>VendCurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_VendInvoiceInfoTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DeliveryPostalAddress_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DeliveryPostalAddress_FK</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceInfoTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FinTag</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FinTag</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>FinTag</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceInfoTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FinTag</Name>
					<Field>FinTag</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatPort</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatPort</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Port</Name>
					<SourceEDT>IntrastatPortId</SourceEDT>
					<Field>Port</Field>
					<RelatedField>PortId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PortIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatStatProc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatStatProc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StatProcId</Name>
					<SourceEDT>IntrastatProcId</SourceEDT>
					<Field>StatProcId</Field>
					<RelatedField>StatProcId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatProcIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransactionCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatTransactionCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransactionCode</Name>
					<SourceEDT>IntrastatTransactionCodeId</SourceEDT>
					<Field>TransactionCode</Field>
					<RelatedField>TransactionCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransportMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatTransportMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Transport</Name>
					<SourceEDT>IntrastatTransport</SourceEDT>
					<Field>Transport</Field>
					<RelatedField>TransPortCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransPortCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<SourceEDT>PurchInventLocationId</SourceEDT>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteId</Name>
					<SourceEDT>InventSiteId</SourceEDT>
					<Field>InventSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SiteIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PoolRecId</Name>
					<SourceEDT>LedgerJournalTransRefRecId</SourceEDT>
					<Field>PoolRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsElectronicAddress_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsElectronicAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsElectronicAddress</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsElectronicAddress_VendInvoiceInfoTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LogisticsElectronicAddress</Name>
					<Field>LogisticsElectronicAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MarkupGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MarkupGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>MarkupGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupGroup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<SourceEDT>VendMarkupGroupId</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>MarkupModuleType::Vend</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MarkupGroup</Name>
					<SourceEDT>VendMarkupGroupId</SourceEDT>
					<Field>MarkupGroup</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NumberSequenceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>NumberSequenceGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NumberSequenceGroup</Name>
					<SourceEDT>NumberSequenceGroupId</SourceEDT>
					<Field>NumberSequenceGroup</Field>
					<RelatedField>numberSequenceGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>groupId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymSched</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymSched</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentSched</Name>
					<SourceEDT>PaymSchedId</SourceEDT>
					<Field>PaymentSched</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NameIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Payment</Name>
					<SourceEDT>VendPaymTermId</SourceEDT>
					<Field>Payment</Field>
					<RelatedField>PaymTermId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TermIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchAgreementHeader_PSN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchAgreementHeader</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchAgreementHeader</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchAgreementHeader_PSN</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchAgreementHeader_PSN</Name>
					<Field>PurchAgreementHeader_PSN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchParmUpdate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchParmUpdate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchParmUpdate_1</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>VendInvoiceInfoTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParmId</Name>
					<Field>ParmId</Field>
					<RelatedField>ParmId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable_PurchId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchTable_PurchId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceInfoTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchId</Name>
					<SourceEDT>PurchId</SourceEDT>
					<Field>PurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RemittanceLocation_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RemittanceLocation_FK</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceInfoTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RemittanceLocation</Name>
					<Field>RemittanceLocation</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SourceDocumentHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SourceDocumentHeader</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDocumentHeader</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>VendInvoiceInfoTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentHeader</Name>
					<Field>SourceDocumentHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableId</Name>
					<Field>TableId</Field>
					<RelatedField>SourceRelationType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SourceDocumentLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SourceDocumentLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDocumentLine</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>SourceDocumentLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentLine</Name>
					<Field>SourceDocumentLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableId</Name>
					<Field>TableId</Field>
					<RelatedField>SourceRelationType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<SourceEDT>TaxGroup</SourceEDT>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxWorkRegulation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS126105</EntityRelationshipRole>
			<RelatedTable>TaxWorkRegulation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWorkRegulation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceInfoTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>HeadingRecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableId</Name>
					<Field>TableId</Field>
					<RelatedField>HeadingTableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TransportationDocument</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TransportationDocument</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransportationDocument</Name>
					<Field>TransportationDocument</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VarianceApprover_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorkerOfVarianceApprover</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VarianceApprover_VendInvoiceInfoTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VarianceApprover</Name>
					<Field>VarianceApprover</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendBankAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendBankAccount</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendBankAccount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceInfoTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceAccount</Name>
					<Field>InvoiceAccount</Field>
					<RelatedField>VendAccount</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendBankAccountID</Name>
					<Field>VendBankAccountID</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceInfoTable</Name>
			<RelatedTable>VendInvoiceInfoTable</RelatedTable>
			<RelatedTableRole>VendInvoiceInfoTable</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>VendInvoiceInfoTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParmId</Name>
					<Field>ParmId</Field>
					<RelatedField>ParmId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableRefId</Name>
					<Field>TableRefId</Field>
					<RelatedField>TableRefId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendLedger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile</Name>
					<SourceEDT>VendPostingProfile</SourceEDT>
					<Field>PostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendPaymModeSpec</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendPaymModeSpec</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendPaymModeSpec</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceInfoTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymSpec</Name>
					<Field>PaymSpec</Field>
					<RelatedField>Specification</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymMode</Name>
					<Field>PaymMode</Field>
					<RelatedField>PaymMode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendPaymModeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendPaymModeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymMode</Name>
					<SourceEDT>VendPaymMode</SourceEDT>
					<Field>PaymMode</Field>
					<RelatedField>PaymMode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PaymModeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable_InvoiceAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceAccount</Name>
					<SourceEDT>VendInvoiceAccount</SourceEDT>
					<Field>InvoiceAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable_OrderAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable_OrderAccount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrderAccount</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>OrderAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTmpInvoiceInfoTable</Name>
			<RelatedTable>VendTmpInvoiceInfoTable</RelatedTable>
			<RelatedTableRole>VendTmpInvoiceInfoTable</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>VendTmpInvoiceInfoTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParmId</Name>
					<Field>ParmId</Field>
					<RelatedField>ParmId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableRefId</Name>
					<Field>TableRefId</Field>
					<RelatedField>TableRefId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceInfoListPageView</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>VendInvoiceInfoListPageView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParmId</Name>
					<Field>ParmId</Field>
					<RelatedField>ParmId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableRefId</Name>
					<Field>TableRefId</Field>
					<RelatedField>TableRefId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceTotalFromAccountingDistributionView</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>VendInvoiceTotalFromAccountingDistributionView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParmId</Name>
					<Field>ParmId</Field>
					<RelatedField>ParmId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableRefId</Name>
					<Field>TableRefId</Field>
					<RelatedField>TableRefId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceTotalAccountingDistributionSum</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>VendInvoiceTotalAccountingDistributionSum</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParmId</Name>
					<Field>ParmId</Field>
					<RelatedField>ParmId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableRefId</Name>
					<Field>TableRefId</Field>
					<RelatedField>TableRefId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>