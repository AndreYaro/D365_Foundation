<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWHTThresholdCumulativeChangeTracking_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxWHTThresholdCumulativeChangeTracking_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTracking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the change tracking for threshold cumulative amount change.
    /// </summary>
    /// <param name = "_taxWithholdTrans">The buffer of <c>TaxWithholdTrans_IN</c></param>
    public static void createTracking(TaxWithholdTrans_IN _taxWithholdTrans)
    {
        SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(tableStr(TaxWHTThresholdCumulativeChangeTracking_IN));

        using (var activity = instrumentationLogger.activityContext(
            tableStaticMethodStr(TaxWHTThresholdCumulativeChangeTracking_IN, createTracking),
            TaxWithholdTaxIntrumentationLogConstants::TDSTCSLoggerNamespace))
        {
            TaxWithholdTable taxWithholdTable = TaxWithholdTable::find(_taxWithholdTrans.TaxWithholdCode);

            // Just support for advance threshold, for the old threhold, donot support any more.
            if (taxWithholdTable.ApplyThreshold_IN
                && _taxWithholdTrans.IsPartOfTurnOver
                && (!FeatureStateProvider::isFeatureEnabled(TaxWithholdCustomerThresholdBasedOnPaymentOnlyFeature::instance())
                    || !_taxWithholdTrans.IsTaxInterim))
            {
                CumulativeChangeDateTime_IN currentDateTime = DateTimeUtil::utcNow();

                TaxWHTThresholdCumulativeChangeTracking_IN taxWHTThresholdCumulativeChangeTracking = TaxWHTThresholdCumulativeChangeTracking_IN::find(
                    _taxWithholdTrans.CustAccount,
                    _taxWithholdTrans.VendAccount,
                    _taxWithholdTrans.PAN,
                    _taxWithholdTrans.TaxWithholdCode,
                    true);

                // Since the posting process is quite long, and the update operation will just be committed after posting finished,
                // then this table will be locked for whole posting process. so here create a new connection to commit the change directly, to avoid lock issue.
                var userConnection = new UserConnection();
                taxWHTThresholdCumulativeChangeTracking.setConnection(userConnection);
                try
                {
                    if (!taxWHTThresholdCumulativeChangeTracking || taxWHTThresholdCumulativeChangeTracking.CumulativeChangeDateTime != currentDateTime)
                    {
                        userConnection.ttsbegin();
                        taxWHTThresholdCumulativeChangeTracking.VendAccount = _taxWithholdTrans.VendAccount;
                        taxWHTThresholdCumulativeChangeTracking.CustAccount = _taxWithholdTrans.CustAccount;
                        taxWHTThresholdCumulativeChangeTracking.TaxWithholdCode =   _taxWithholdTrans.TaxWithholdCode;
                        taxWHTThresholdCumulativeChangeTracking.PAN = _taxWithholdTrans.PAN;
                        taxWHTThresholdCumulativeChangeTracking.CumulativeChangeDateTime = currentDateTime;
                        taxWHTThresholdCumulativeChangeTracking.write();
                        userConnection.ttscommit();
                    }
                }
                catch
                {
                    // No throw error, since this create tracking should not block transaction posting.
                    instrumentationLogger.logError(strFmt("Tax wtihhold threshold cumulative change tracking created failed for TaxWithholdTrans : %1", _taxWithholdTrans.RecId));
                }
                finally
                {
                    if (userConnection)
                    {
                        userConnection.finalize();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record of <c>TaxWHTThresholdCumulativeChangeTracking_IN</c>
    /// </summary>
    /// <param name = "_custAccount">Customer account number.</param>
    /// <param name = "_vendAccount">Vendor account number.</param>
    /// <param name = "_PANNumber">PAN number.</param>
    /// <param name = "_taxWithholdCode">Tax withhold code.</param>
    /// <param name = "_forUpdate">if select for update.</param>
    /// <returns>The record of <c>TaxWHTThresholdCumulativeChangeTracking_IN</c></returns>
    public static TaxWHTThresholdCumulativeChangeTracking_IN find(
        CustAccount _custAccount,
        VendAccount _vendAccount,
        PANNumber_IN _PANNumber,
        TaxWithholdCode _taxWithholdCode,
        boolean _forUpdate = false)
    {
        TaxWHTThresholdCumulativeChangeTracking_IN taxWHTThresholdCumulativeChangeTracking;

        taxWHTThresholdCumulativeChangeTracking.selectForUpdate(_forUpdate);

        if (_taxWithholdCode)
        {
            select firstonly taxWHTThresholdCumulativeChangeTracking
                where taxWHTThresholdCumulativeChangeTracking.CustAccount == _custAccount
                    && taxWHTThresholdCumulativeChangeTracking.VendAccount == _vendAccount
                    && taxWHTThresholdCumulativeChangeTracking.PAN == _PANNumber
                    && taxWHTThresholdCumulativeChangeTracking.TaxWithholdCode == _taxWithholdCode;
        }

        return taxWHTThresholdCumulativeChangeTracking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineCumulativeChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if cumulative amount is changed.
    /// </summary>
    /// <param name = "_headingTableId">Transaction header table id.</param>
    /// <param name = "_headingRecId">Transaction header record id.</param>
    /// <param name = "_voucher">Voucher number</param>
    /// <returns>ture if cumulative changed; otherwise, false.</returns>
    public static boolean determineCumulativeChanged(
        RefTableId _headingTableId,
        RefRecId _headingRecId,
        Voucher _voucher = '')
    {
        boolean cumulativeChanged = false;

        if (_headingTableId && _headingRecId)
        {
            AccountType_IN accountType;
            PANNumber_IN PANNum;
            boolean isApplicable = false;
            switch (_headingTableId)
            {
                // Below just keep the same condition for TaxWithholdUncommitted_IN::deleteForWithholdTaxTrans
                case tableNum(PurchTable) :
                    PurchTable purchTable = PurchTable::findRecId(_headingRecId);
                    if (purchTable.PurchStatus == PurchStatus::Backorder
                        && purchTable.DocumentState == VersioningDocumentState::Draft)
                    {
                        isApplicable = true;
                        accountType = AccountType_IN::Vend;
                        PANNum = VendTable::find(purchTable.InvoiceAccount).getTaxInformationVendTable_IN().PANNumber;
                    }
                    break;

                case tableNum(LedgerJournalTable) :
                    LedgerJournalTable ledgerJournalTable = LedgerJournalTable::findByRecId(_headingRecId);
                    if (ledgerJournalTable.SystemBlocked == NoYes::No)
                    {
                        LedgerJournalTrans ledgerJournalTrans;
                        select firstonly ledgerJournalTrans
                            where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
                                && (ledgerJournalTrans.Voucher == _voucher || _voucher == "")
                                && (((ledgerJournalTrans.AccountType == LedgerJournalACType::Cust || ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
                                        && ledgerJournalTrans.LedgerDimension != 0)
                                    || ((ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust || ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)
                                        && ledgerJournalTrans.OffsetLedgerDimension != 0));

                        if (ledgerJournalTrans.RecId)
                        {
                            LedgerJournalACType ledgerJournalACType;
                            AccountNum accountNum;
                            isApplicable = true;
                            if ((ledgerJournalTrans.AccountType == LedgerJournalACType::Cust || ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
                                && ledgerJournalTrans.LedgerDimension != 0)
                            {
                                ledgerJournalACType = ledgerJournalTrans.AccountType;
                                accountNum = ledgerJournalTrans.parmAccount();
                            }
                            else
                            {
                                ledgerJournalACType = ledgerJournalTrans.OffsetAccountType;
                                accountNum = ledgerJournalTrans.parmOffsetAccount();
                            }

                            if (ledgerJournalACType == LedgerJournalACType::Cust)
                            {
                                accountType = AccountType_IN::Cust;
                                PANNum = CustTable::find(accountNum).getTaxInformationCustTable_IN().PANNumber;
                            }
                            else if (ledgerJournalACType == LedgerJournalACType::Vend)
                            {
                                accountType = AccountType_IN::Vend;
                                PANNum = VendTable::find(accountNum).getTaxInformationVendTable_IN().PANNumber;
                            }
                        }
                    }
                    break;

                case tableNum(VendInvoiceInfoTable) :
                    VendInvoiceInfoTable vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(_headingRecId);
                    if (vendInvoiceInfoTable.RecId)
                    {
                        isApplicable = true;
                        accountType = AccountType_IN::Vend;
                        PANNum = VendTable::find(vendInvoiceInfoTable.InvoiceAccount).getTaxInformationVendTable_IN().PANNumber;
                    }
                    break;

                case tableNum(ProjAdvancedJournal) :
                    ProjAdvancedJournalLine projAdvancedJournalLine;
                    select firstonly RecId, OffsetLedgerDimension from projAdvancedJournalLine
                        where projAdvancedJournalLine.TransType == ProjTransType::Cost
                            && projAdvancedJournalLine.OffsetAccountType == LedgerJournalACType::Vend
                            && projAdvancedJournalLine.ExtendedCost != 0
                            && projAdvancedJournalLine.OffsetLedgerDimension != 0
                            && projAdvancedJournalLine.Voucher == _voucher
                            && projAdvancedJournalLine.ProjAdvancedJournal == _headingRecId;

                    if (projAdvancedJournalLine.RecId)
                    {
                        isApplicable = true;
                        accountType = AccountType_IN::Vend;
                        PANNum = VendTable::findByLedgerDimension(projAdvancedJournalLine.OffsetLedgerDimension).getTaxInformationVendTable_IN().PANNumber;
                    }
                    break;

                default:
                    break;
            }

            if (isApplicable)
            {
                cumulativeChanged = TaxWHTThresholdCumulativeChangeTracking_IN::existChangeTracking(
                    _headingTableId,
                    _headingRecId,
                    accountType,
                    PANNum,
                    _voucher);
            }
        }

        return cumulativeChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existChangeTracking</Name>
				<Source><![CDATA[
    private static boolean existChangeTracking(
        RefTableId _headingTableId,
        RefRecId _headingRecId,
        AccountType_IN _accountType,
        PANNumber_IN _PANNum,
        Voucher _voucher = '')
    {
        boolean existCumulativeChange = false;

        TaxWHTThresholdCumulativeChangeTracking_IN taxWHTThresholdCumulativeChangeTracking;
        TaxWithholdUncommitted_IN taxWithholdUncommit;
        TaxWithholdTable taxWithholdTable;

        select firstonly RecId from taxWithholdUncommit
            where taxWithholdUncommit.HeadingTableId == _headingTableId
                && taxWithholdUncommit.HeadingRecId == _headingRecId
                && (taxWithholdUncommit.Voucher == _voucher || _voucher == '')
            join TaxWithholdCode from taxWithholdTable
                where taxWithholdTable.TaxWithholdCode == taxWithholdUncommit.TaxWithholdCode
                    && taxWithholdTable.ApplyThreshold_IN
            join RecId from taxWHTThresholdCumulativeChangeTracking
                where taxWHTThresholdCumulativeChangeTracking.TaxWithholdCode == taxWithholdUncommit.TaxWithholdCode
                    && ((((taxWHTThresholdCumulativeChangeTracking.VendAccount == taxWithholdUncommit.AccountNumber && _accountType == AccountType_IN::Vend)
                          || (taxWHTThresholdCumulativeChangeTracking.CustAccount == taxWithholdUncommit.AccountNumber && _accountType == AccountType_IN::Cust))
                        && !taxWithholdTable.PanBasedAccumulation_IN)
                      || (taxWHTThresholdCumulativeChangeTracking.PAN == _PANNum && taxWithholdTable.PanBasedAccumulation_IN))
                    && taxWHTThresholdCumulativeChangeTracking.CumulativeChangeDateTime >= taxWithholdUncommit.CreatedDateTime;

        if (taxWithholdUncommit.RecId)
        {
            existCumulativeChange = true;
        }

        return existCumulativeChange;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@TaxWithholdUncommitted_IN:ThresholdCumulativeChangeTracking</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<Visible>No</Visible>
	<Modules>Tax</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CumulativeChangeDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PAN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWithholdCode</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PAN</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PANNumber_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>CumulativeChangeDateTime</Name>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>CumulativeChangeDateTime_IN</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CumulativeKeyIndex</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxWithholdCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PAN</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>