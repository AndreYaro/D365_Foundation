<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTrans_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalTrans_W extends common
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>categoryPurposeCode</Name>
				<Source><![CDATA[
    public PaymentFormatCode_W categoryPurposeCode()
    {
        return PaymentFormatCodeSets_W::find(this.CategoryPurpose).Code;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chargeBearerCode</Name>
				<Source><![CDATA[
    public PaymentFormatCode_W chargeBearerCode()
    {
        return PaymentFormatCodeSets_W::find(this.ChargeBearer).Code;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearPaymentFormatCodes</Name>
				<Source><![CDATA[
    public void clearPaymentFormatCodes()
    {
        LedgerJournalTrans ledgerJournalTrans = this.SysExtensionSerializerExtensionMap::getBaseTable();

        this.ChargeBearer = 0;
        this.ServiceLevel = 0;
        this.CategoryPurpose = 0;
        this.LocalInstrument = 0;

        ledgerJournalTrans.packLedgerJournalTrans_W(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCashRegisterTerminal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the cash register terminal reference.
    /// </summary>
    public void initCashRegisterTerminal()
    {
        LedgerJournalTrans ledgerJournalTrans = this.SysExtensionSerializerExtensionMap::getBaseTable();

        if (this.CashRegisterTerminal == 0)
        {
            CashRegisterOperator_W currentOperator = CashRegisterOperator_W::currentOperator();

            if (currentOperator)
            {
                this.CashRegisterTerminal = currentOperator.Terminal;
            }
        }

        if (ledgerJournalTrans)
        {
            ledgerJournalTrans.packLedgerJournalTrans_W(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCashRegisterTerminal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the cash register terminal reference.
    /// </summary>
    public void clearCashRegisterTerminal()
    {
        LedgerJournalTrans ledgerJournalTrans = this.SysExtensionSerializerExtensionMap::getBaseTable();

        this.CashRegisterTerminal = 0;

        if (ledgerJournalTrans)
        {
            ledgerJournalTrans.packLedgerJournalTrans_W(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTable_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intializes payment codes from journal header.
    /// </summary>
    public void initFromLedgerJournalTable_W()
    {
        LedgerJournalTrans ledgerJournalTrans = this.SysExtensionSerializerExtensionMap::getBaseTable();
        LedgerJournalTable_W ledgerJournalTable_W = ledgerJournalTrans.ledgerJournalTable().ledgerJournalTable_W();

        this.ChargeBearer = ledgerJournalTable_W.ChargeBearer_W;
        this.ServiceLevel = ledgerJournalTable_W.ServiceLevel_W;
        this.CategoryPurpose = ledgerJournalTable_W.CategoryPurpose_W;
        this.LocalInstrument = ledgerJournalTable_W.LocalInstrument_W;
        
        ledgerJournalTrans.packLedgerJournalTrans_W(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProvidedLedgerJournalTable_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intializes payment codes from provided journal.
    /// </summary>
    /// <param name = "_ledgerJournalTable">Journal.</param>
    public void initFromProvidedLedgerJournalTable_W(LedgerJournalTable _ledgerJournalTable)
    {
        LedgerJournalTrans ledgerJournalTrans = this.SysExtensionSerializerExtensionMap::getBaseTable();
        LedgerJournalTable_W ledgerJournalTable_W = _ledgerJournalTable.ledgerJournalTable_W();

        this.ChargeBearer = ledgerJournalTable_W.ChargeBearer_W;
        this.ServiceLevel = ledgerJournalTable_W.ServiceLevel_W;
        this.CategoryPurpose = ledgerJournalTable_W.CategoryPurpose_W;
        this.LocalInstrument = ledgerJournalTable_W.LocalInstrument_W;

        ledgerJournalTrans.packLedgerJournalTrans_W(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPaymModeTable</Name>
				<Source><![CDATA[
    [SysObsolete('Use LedgerJournalTrans_W.initFromPaymModeTable_generic method instead', false, 30\11\2017)]
    public void initFromPaymModeTable(VendPaymModeTable _vendPaymModeTable)
    {
        LedgerJournalTrans ledgerJournalTrans = this.SysExtensionSerializerExtensionMap::getBaseTable();

        if (!this.ChargeBearer)
        {
            this.ChargeBearer = _vendPaymModeTable.ChargeBearer_W;
        }

        if (!this.ServiceLevel)
        {
            this.ServiceLevel = _vendPaymModeTable.ServiceLevel_W;
        }

        if (!this.CategoryPurpose)
        {
            this.CategoryPurpose = _vendPaymModeTable.CategoryPurpose_W;
        }

        if (!this.LocalInstrument)
        {
            this.LocalInstrument = _vendPaymModeTable.LocalInstrument_W;
        }

        ledgerJournalTrans.packLedgerJournalTrans_W(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPaymModeTable_generic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intializes payment codes from Method of Payment.
    /// </summary>
    /// <param name = "_custVendPaymModeSpec">Current payment mode.</param>
    public void initFromPaymModeTable_generic(CustVendPaymModeTable _custVendPaymModeTable)
    {
        LedgerJournalTrans ledgerJournalTrans = this.SysExtensionSerializerExtensionMap::getBaseTable();

        if (!this.ChargeBearer)
        {
            this.ChargeBearer = _custVendPaymModeTable.ChargeBearer_W;
        }

        if (!this.ServiceLevel)
        {
            this.ServiceLevel = _custVendPaymModeTable.ServiceLevel_W;
        }

        if (!this.CategoryPurpose)
        {
            this.CategoryPurpose = _custVendPaymModeTable.CategoryPurpose_W;
        }

        if (!this.LocalInstrument)
        {
            this.LocalInstrument = _custVendPaymModeTable.LocalInstrument_W;
        }

        if (ledgerJournalTrans)
        {
            ledgerJournalTrans.packLedgerJournalTrans_W(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPaymSpec_generic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intializes payment codes from specification of Method of Payment.
    /// </summary>
    /// <param name = "_custVendPaymModeSpec">Current payment specification.</param>
    public void initFromPaymSpec_generic(CustVendPaymModeSpec _custVendPaymModeSpec)
    {
        LedgerJournalTrans ledgerJournalTrans = this.SysExtensionSerializerExtensionMap::getBaseTable();
        
        if (!this.ChargeBearer)
        {
            this.ChargeBearer = _custVendPaymModeSpec.ChargeBearer_W;
        }

        if (!this.ServiceLevel)
        {
            this.ServiceLevel = _custVendPaymModeSpec.ServiceLevel_W;
        }

        if (!this.CategoryPurpose)
        {
            this.CategoryPurpose = _custVendPaymModeSpec.CategoryPurpose_W;
        }

        if (!this.LocalInstrument)
        {
            this.LocalInstrument = _custVendPaymModeSpec.LocalInstrument_W;
        }

        ledgerJournalTrans.packLedgerJournalTrans_W(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (this.LedgerJournalTrans)
        {
            // Only insert if the parent FK is set.
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>localInstrumentCode</Name>
				<Source><![CDATA[
    public PaymentFormatCode_W localInstrumentCode()
    {
        return PaymentFormatCodeSets_W::find(this.LocalInstrument).Code;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serviceLevelCode</Name>
				<Source><![CDATA[
    public PaymentFormatCode_W serviceLevelCode()
    {
        return PaymentFormatCodeSets_W::find(this.ServiceLevel).Code;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (this.LedgerJournalTrans)
        {
            // Only update if the parent FK is set.
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the child <c>LedgerJournalTrans_W</c> table joined to the <c>LedgerJournalTrans</c> in the supplied query.
    /// </summary>
    /// <param name="_ledgerJournalTransDataSource">
    ///    The <c>QueryBuildDataSource</c> containing a datasource of <c>LedgerJournalTrans</c> to join the child table to.
    /// </param>
    /// <param name="_joinMode">
    ///    The type of join to perform; optional.
    /// </param>
    /// <returns>
    ///    A <c>QueryBuildDataSource</c> with the child <c>LedgerJournalTrans_W</c> table joined to the <c>LedgerJournalTrans</c>.
    /// </returns>
    public static QueryBuildDataSource addToQuery(QueryBuildDataSource _ledgerJournalTransDataSource, JoinMode _joinMode = JoinMode::InnerJoin)
    {
        if (_ledgerJournalTransDataSource == null || _ledgerJournalTransDataSource.table() != tableNum(LedgerJournalTrans))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        QueryBuildDataSource qbds = _ledgerJournalTransDataSource.addDataSource(tableNum(LedgerJournalTrans_W));
        qbds.addLink(fieldNum(LedgerJournalTrans, RecId), fieldNum(LedgerJournalTrans_W, LedgerJournalTrans));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.joinMode(_joinMode);

        return qbds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///		Determines whether the specified record exists in the <c>LedgerJournalTable_W</c> table; if not, an error
    ///		message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///		The record ID of the <c>LedgerJournalTable_W</c> record.
    /// </param>
    /// <returns>
    ///		true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RefRecId _recId)
    {
        boolean isExisting = true;

        if (!LedgerJournalTable_W::exist(_recId))
        {
            isExisting = checkFailed(strFmt(LedgerJournalTrans_W::txtNotExist(), _recId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///		Finds the specified record in the <c>LedgerJournalTrans_W</c> table.
    /// </summary>
    /// <param name="_recId">
    ///		The record ID of the <c>LedgerJournalTrans_W</c> record.
    /// </param>
    /// <param name="_forUpdate">
    ///		A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///		The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///		A record in the <c>LedgerJournalTrans_W</c> table; otherwise, an empty record.
    /// </returns>
    public static LedgerJournalTrans_W find(RefRecId _recId,
                                            boolean _forUpdate = false,
                                            ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerJournalTrans_W ledgerJournalTrans_W;

        ledgerJournalTrans_W.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerJournalTrans_W.concurrencyModel(_concurrencyModel);
        }

        select firstonly ledgerJournalTrans_W where ledgerJournalTrans_W.RecId == _recId;

        return ledgerJournalTrans_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///		Finds the specified record in the <c>LedgerJournalTrans_W</c> table.
    /// </summary>
    /// <param name="_recId">
    ///		The record Id of the <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <param name="_forUpdate">
    ///		A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///		A record in the <c>LedgerJournalTrans_W</c> table; otherwise, an empty record.
    /// </returns>
    public static LedgerJournalTrans_W findByLedgerJournalTrans(LedgerJournalTransRefRecId _recId,
                                                                boolean _forUpdate = false)
    {
        LedgerJournalTrans_W ledgerJournalTrans_W;

        ledgerJournalTrans_W.selectForUpdate(_forUpdate);

        select firstonly ledgerJournalTrans_W where ledgerJournalTrans_W.LedgerJournalTrans == _recId;

        return ledgerJournalTrans_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLegalEntityInCountryRegion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a Boolean value that indicates whether a country supported by the
    /// <c>LedgerJournalTrans_W</c> table is currently in scope.
    /// </summary>
    /// <returns>
    /// true if a country supported by the <c>LedgerJournalTrans_W</c> table is currently in scope; false, otherwise.
    /// </returns>
    public static boolean isLegalEntityInCountryRegion()
    {
        #IsoCountryRegionCodes

        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoAT, #isoCH, #isoCZ, #isoIN, #isoSE, #isoDK, #isoNO, #isoMX, #isoRU]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLegalEntitySupported</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether a country is supported by the <c>LedgerJournalTrans_W</c> table.
    /// </summary>
    /// <returns>
    /// True if a country supported by the <c>LedgerJournalTrans_W</c> table is currently in scope or ISO20022Payments_Feature is enabled; false, otherwise.
    /// </returns>
    public static boolean isLegalEntitySupported()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message to use when a specific record in the <c>LedgerJournalTran0s_W</c> table does not exist.
    /// </summary>
    /// <returns>
    ///	The message that indicates a record does not exists.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(LedgerJournalTrans_W, WithholdingTypeCode_MX):
                CFDIWithholdingType_MX::complementFldClearOnWithholdTypeModified(tableFieldgroupStr(LedgerJournalTrans_W, CFDIWithholdingTax_MX), this);
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDocumentNum</Name>
				<Source><![CDATA[
    public edit Description editDocumentNum(boolean _set, Description _documentNum)
    {
        Description ret;

        if (this.OrigPaymRefTableId_RU)
        {
            CustVendTrans custVendTrans = new DictTable(this.OrigPaymRefTableId_RU).makeRecord();;

            select firstonly Voucher, DocumentNum, DocumentDate from custVendTrans
                where custVendTrans.RecId == this.OrigPaymRefRecId_RU;

            ret = strFmt('%1, %2 - %3', custVendTrans.Voucher, custVendTrans.DocumentNum, custVendTrans.DocumentDate);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrePaymRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intializes prepayment reference.
    /// </summary>
    /// <param name = "_custVendTrans"><c>CustVendTrans</c> map.</param>
    public void initPrePaymRef(CustVendTrans _custVendTrans)
    {
        LedgerJournalTrans ledgerJournalTrans = this.SysExtensionSerializerExtensionMap::getBaseTable();

        this.OrigPaymRefTableId_RU = _custVendTrans.TableId;
        this.OrigPaymRefRecId_RU = _custVendTrans.RecId;

        if (ledgerJournalTrans)
        {
            ledgerJournalTrans.packLedgerJournalTrans_W(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPrePayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets lookup reference customer or vendor transactions.
    /// </summary>
    /// <param name="_ctrl">
    /// <c>FormReferenceControl</c> control.
    /// </param>
    /// <param name="_contragentType">
    /// Contragent type.
    /// </param>
    /// <param name="_isTax">
    /// Shows tax transactions.
    /// </param>
    /// <param name="_custVendAccount">
    /// Customer or vendor account.
    /// </param>
    /// <returns>
    /// Selected records in customer or vendor transactions.
    /// </returns>
    public static CustVendTrans lookupPrePayment(
        FormStringControl _ctrl,
        FactureTaxCorrectionContragentType_RU _contragentType,
        boolean _isTax = false,
        CustVendAC _custVendAccount = '')
    {
        TableId custVendTableId = _contragentType == FactureTaxCorrectionContragentType_RU::Customer ? tableNum(CustTrans) : tableNum(VendTrans);
        Map transMapFieldToTableField = VendDocumentUtil::fieldMapping(tableNum(CustVendTrans), custVendTableId);
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(custVendTableId);

        if (_custVendAccount)
        {
            qbds.addRange(transMapFieldToTableField.lookup(fieldNum(CustVendTrans, AccountNum))).value(SysQuery::value(_custVendAccount));
        }

        qbds.addRange(transMapFieldToTableField.lookup(fieldNum(CustVendTrans, Prepayment))).value(SysQuery::value(NoYes::Yes));

        if (_isTax)
        {
            QueryBuildDataSource qbdsLJ = qbds.addDataSource(tableNum(LedgerJournalTrans));

            qbdsLJ.relations(false);
            qbdsLJ.joinMode(JoinMode::ExistsJoin);
            
            if (_contragentType == FactureTaxCorrectionContragentType_RU::Customer)
            {
                qbdsLJ.addLink(fieldNum(CustTrans, RecId), fieldNum(LedgerJournalTrans, CustTransId));
            }
            else
            {
                qbdsLJ.addLink(fieldNum(VendTrans, RecId), fieldNum(LedgerJournalTrans, VendTransId));
            }

            QueryBuildDataSource qbdsLJW = qbdsLJ.addDataSource(tableNum(LedgerJournalTrans_W));

            qbdsLJW.relations(true);
            qbdsLJW.joinMode(JoinMode::ExistsJoin);
            qbdsLJW.addRange(fieldNum(LedgerJournalTrans_W, OrigPaymRefRecId_RU)).value(SysQuery::valueNot(0));
        }

        TableLookup_RU tableLookup = TableLookup_RU::newParameters(custVendTableId, _ctrl);

        tableLookup.addLookupfield(transMapFieldToTableField.lookup(fieldNum(CustVendTrans, Voucher)));
        tableLookup.addLookupfield(transMapFieldToTableField.lookup(fieldNum(CustVendTrans, AccountNum)));
        tableLookup.addLookupfield(transMapFieldToTableField.lookup(fieldNum(CustVendTrans, TransDate)));
        tableLookup.addLookupfield(transMapFieldToTableField.lookup(fieldNum(CustVendTrans, AmountCur)));
        tableLookup.addLookupfield(transMapFieldToTableField.lookup(fieldNum(CustVendTrans, DocumentNum)));
        tableLookup.addLookupfield(transMapFieldToTableField.lookup(fieldNum(CustVendTrans, DocumentDate)));
        tableLookup.parmQuery(query);
        tableLookup.performFormLookup();

        CustVendTrans custVendTrans;

        if (tableLookup.getFoundCursor())
        {
            custVendTrans = tableLookup.getFoundCursor();
        }

        return custVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearPrePaymRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the prepayment reference.
    /// </summary>
    public void clearPrePaymRef()
    {
        LedgerJournalTrans ledgerJournalTrans = this.SysExtensionSerializerExtensionMap::getBaseTable();

        this.OrigPaymRefTableId_RU = 0;
        this.OrigPaymRefRecId_RU = 0;

        if (ledgerJournalTrans)
        {
            ledgerJournalTrans.packLedgerJournalTrans_W(this);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<Label>@SYP4860691</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>LedgerJournalTrans</TitleField1>
	<TitleField2>DataAreaId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Ledger</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CategoryPurpose</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChargeBearer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceLevel</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymentFormatCodes_W</Name>
			<Label>@CashManagement_Localization:PaymentCodes</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceLevel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocalInstrument</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryPurpose</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChargeBearer</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CashRegister</Name>
			<Label>@FiscalServices:AS_LedgerJournalTrans_WTable_FieldsGroupCashRegister</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashRegisterTerminal</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CFDI_MX</Name>
			<Label>@SYS4081641</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EPaymCFDIConfirmNumber_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CFDIWithholdingTax_MX</Name>
			<Label>@MexicoCFDIWithholding:Withholding</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WithholdingTypeCode_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CFDIBeneficiaryRetains_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CFDIFinancialSystem_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CFDIInterestBelongsDerivedFinOp_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CFDIInterestCashedInTheCurrentPeriod_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CFDIInterestNominalAmount_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CFDIInterestRealAmount_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CFDIInterestLossAmount_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxCorrection_RU</Name>
			<Label>@GLS102563</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrigPaymRefRecId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigPaymRefTableId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CashRegisterTerminal</Name>
			<CountryRegionCodes>AT,CZ</CountryRegionCodes>
			<ExtendedDataType>CashRegisterTerminalRecId_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CategoryPurpose</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CategoryPurposeRecId_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ChargeBearer</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ChargeBearerRecId_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LocalInstrument</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LocalInstrumentRecId_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ServiceLevel</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ServiceLevelRecId_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerJournalTrans</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LedgerJournalTransRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EPaymCFDIConfirmNumber_MX</Name>
			<ExtendedDataType>EInvoiceCFDIConfirmNumber_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CFDIBeneficiaryRetains_MX</Name>
			<ExtendedDataType>CFDIBeneficiaryRetains_MX</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CFDIFinancialSystem_MX</Name>
			<ExtendedDataType>CFDIFinancialSystem_MX</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CFDIInterestBelongsDerivedFinOp_MX</Name>
			<ExtendedDataType>CFDIInterestBelongsDerivedFinOp_MX</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CFDIInterestCashedInTheCurrentPeriod_MX</Name>
			<ExtendedDataType>CFDIInterestCashedInTheCurrentPeriod_MX</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CFDIInterestLossAmount_MX</Name>
			<ExtendedDataType>CFDIInterestLossAmount_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CFDIInterestNominalAmount_MX</Name>
			<ExtendedDataType>CFDIInterestNominalAmount_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CFDIInterestRealAmount_MX</Name>
			<ExtendedDataType>CFDIInterestRealAmount_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WithholdingTypeCode_MX</Name>
			<ExtendedDataType>CFDIWithholdingTypeCode_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RefPurchInvoiceDate_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RefPurchInvoiceId_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RefSalesInvoiceDate_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RefSalesInvoiceId_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OrigPaymRefRecId_RU</Name>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@Facture:OrigPaymRefRecId_HelpText</HelpText>
			<Label>@Facture:OrigPaymRefRecId_Label</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>OrigPaymRefTableId_RU</Name>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TransIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PartitionDataAreaIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CategoryPurpose</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ChargeBearer</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LocalInstrument</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ServiceLevel</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecVersion</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ModifiedDateTime</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerExtensionMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BaseRecId</MapField>
					<MapFieldTo>LedgerJournalTrans</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerJournalTrans</Name>
					<SourceEDT>LedgerJournalTransRefRecId</SourceEDT>
					<Field>LedgerJournalTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PaymentFormatCodeSets_CategoryPurpose</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PaymentFormatCodeSets_W</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PaymentFormatCodeSets_CategoryPurpose</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerJournalTable_W</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type</Name>
					<RelatedField>Type</RelatedField>
					<ValueStr>PaymentFormatCodeType_W::CategoryPurpose</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryPurpose</Name>
					<Field>CategoryPurpose</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PaymentFormatCodeSets_ChargeBearer</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PaymentFormatCodeSets_W</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PaymentFormatCodeSets_ChargeBearer</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerJournalTable_W</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type</Name>
					<RelatedField>Type</RelatedField>
					<ValueStr>PaymentFormatCodeType_W::ChargeBearer</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ChargeBearer</Name>
					<Field>ChargeBearer</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PaymentFormatCodeSets_LocalInstrument</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PaymentFormatCodeSets_W</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PaymentFormatCodeSets_LocalInstrument</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerJournalTable_W</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type</Name>
					<RelatedField>Type</RelatedField>
					<ValueStr>PaymentFormatCodeType_W::LocalInstrument</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LocalInstrument</Name>
					<Field>LocalInstrument</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PaymentFormatCodeSets_ServiceLevel</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PaymentFormatCodeSets_W</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PaymentFormatCodeSets_ServiceLevel</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerJournalTable_W</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type</Name>
					<RelatedField>Type</RelatedField>
					<ValueStr>PaymentFormatCodeType_W::ServiceLevel</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ServiceLevel</Name>
					<Field>ServiceLevel</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CashRegisterTerminal_W</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CashRegisterTerminal_W</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CashRegisterTerminal</Name>
					<Field>CashRegisterTerminal</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CFDIWithholdingType_MX</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CFDIWithholdingType_MX</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WithholdingTypeCode_MX</Name>
					<Field>WithholdingTypeCode_MX</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CustTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigPaymRefTableId_RU</Name>
					<Field>OrigPaymRefTableId_RU</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigPaymRefRecId_RU</Name>
					<Field>OrigPaymRefRecId_RU</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>VendTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigPaymRefTableId_RU</Name>
					<Field>OrigPaymRefTableId_RU</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigPaymRefRecId_RU</Name>
					<Field>OrigPaymRefRecId_RU</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>