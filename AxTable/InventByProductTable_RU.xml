<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventByProductTable_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventByProductTable_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>byProdItemName</Name>
				<Source><![CDATA[
    display ItemName byProdItemName()
    {
        return InventTable::find(this.ItemIdByProd).itemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTableByMain</Name>
				<Source><![CDATA[
        public InventTable inventTableByMain(boolean _forUpdate = false)
    {
        return InventTable::find(this.ItemIdMain, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTableByProd</Name>
				<Source><![CDATA[
        public InventTable inventTableByProd(boolean _forUpdate = false)
    {
        return InventTable::find(this.ItemIdByProd, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainItemName</Name>
				<Source><![CDATA[
    display ItemName mainItemName()
    {
        return InventTable::find(this.ItemIdMain).itemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
        public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventByProductTable_RU, ByProdCosting):
                this.Percentage = this.ByProdCosting == ProdByProdCosting_RU::Calculated ? this.Percentage : 0;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(InventByProductTable_RU, Percentage) :
                if (this.Percentage < 0)
                {
                    ret = checkFailed("@GLS115779");
                }
                break;

            case fieldNum(InventByProductTable_RU, ItemIdMain):
                if (!this.inventTableByMain().isStocked())
                {
                    ret = checkFailed("@GLS222829");
                }
                break;

            case fieldNum(InventByProductTable_RU, ItemIdByProd):
                if (!this.inventTableByProd().isStocked())
                {
                    ret = checkFailed("@GLS222830");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean                 ret = super();
        InventByProductTable_RU inventByProductTable;

        if (ret)
        {
            if (!this.RecId || this.orig().Percentage != this.Percentage)
            {
                select sum(Percentage) from inventByProductTable
                    where inventByProductTable.ItemIdMain       == this.ItemIdMain &&
                          inventByProductTable.InventDimIdMain  == this.InventDimIdMain &&
                          inventByProductTable.RecId            != this.RecId;

                if (inventByProductTable.Percentage + this.Percentage > 100)
                {
                    ret = checkFailed("@GLS115780");
                }
            }

            if (this.ByProdCosting == ProdByProdCosting_RU::FixedPrice && ! this.inventTableByProd().inventTableModuleInvent().price())
            {
                ret = checkFailed(strFmt("@GLS115781", this.ItemIdByProd));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
        public static InventByProductTable_RU find(ItemId       _itemIdMain,
                                               InventDimId  _inventDimIdMain,
                                               ItemId       _itemIdByProd,
                                               InventDimId  _inventDimIdByProd,
                                               boolean      _forUpdate = false)
    {
        InventByProductTable_RU inventByProductTable;
        InventDimParm           inventDimParmMain;
        InventDimParm           inventDimParmByProd;
        InventDim               inventDimMain;
        InventDim               inventDimByProd;
        InventDim               inventDimSearchMain;
        InventDim               inventDimSearchByProd;

        inventByProductTable.selectForUpdate(_forUpdate);

        if (_itemIdMain && _inventDimIdMain && _itemIdByProd && _inventDimIdByProd)
        {
            inventDimParmMain     = EcoResProductDimGroupSetup::newInventTable(InventTable::find(_itemIdMain)).inventDimParmActiveDimensions();
            inventDimParmByProd   = EcoResProductDimGroupSetup::newInventTable(InventTable::find(_itemIdByProd)).inventDimParmActiveDimensions();

            inventDimSearchMain   = InventDim::find(_inventDimIdMain);
            inventDimSearchByProd = InventDim::find(_inventDimIdByProd);

            select firstonly inventByProductTable
                where inventByProductTable.ItemIdMain   == _itemIdMain &&
                      inventByProductTable.ItemIdByProd == _itemIdByProd
                      #inventDimJoin(inventByProductTable.InventDimIdMain, inventDimMain, inventDimSearchMain, inventDimParmMain)
                      #inventDimJoin(inventByProductTable.InventDimIdByProd, inventDimByProd, inventDimSearchByProd, inventDimParmByProd);
        }

        return inventByProductTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
        public static InventByProductTable_RU findRecId(RefRecId    _recId,
                                                    boolean     _forUpdate = false)
    {
        InventByProductTable_RU inventByProductTable;

        inventByProductTable.selectForUpdate(_forUpdate);

        if (_recId)
        {
            select firstonly inventByProductTable
                where inventByProductTable.RecId == _recId;
        }

        return inventByProductTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for stocked items in the <c>InventTable</c> table.
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control object with which to perform the lookup.
    /// </param>
    public static void lookupItem(FormStringControl _ctrl)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventTable), _ctrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(InventTable));
        QueryBuildRange         queryBuildRange;

        sysTableLookup.addLookupfield(fieldNum(InventTable,        ItemId));
        sysTableLookup.addLookupMethod(tableMethodStr(InventTable, itemGroupId));
        sysTableLookup.addLookupMethod(tableMethodStr(InventTable, defaultProductName));
        sysTableLookup.addLookupfield(fieldNum(InventTable,        NameAlias));
        sysTableLookup.addLookupfield(fieldNum(InventTable,        ItemType));
        sysTableLookup.addSelectionField(fieldNum(InventTable,     Product));

        queryBuildDataSource = queryBuildDataSource.addDataSource(tableNum(InventModelGroupItem));
        queryBuildDataSource.addLink(fieldNum(InventTable, ItemId),     fieldNum(InventModelGroupItem, ItemId));
        queryBuildDataSource.addLink(fieldNum(InventTable, DataAreaId), fieldNum(InventModelGroupItem, ItemDataAreaId));

        queryBuildDataSource = queryBuildDataSource.addDataSource(tableNum(InventModelGroup));
        queryBuildDataSource.addLink(fieldNum(InventModelGroupItem, ModelGroupId),         fieldNum(InventModelGroup, ModelGroupId));
        queryBuildDataSource.addLink(fieldNum(InventModelGroupItem, ModelGroupDataAreaId), fieldNum(InventModelGroup, DataAreaId));

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(InventModelGroup, StockedProduct));
        queryBuildRange.value(SysQuery::value(NoYes::Yes));
        queryBuildRange.status(RangeStatus::Hidden);

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<Label>@GLS115744</Label>
	<TitleField1>ItemIdMain</TitleField1>
	<TitleField2>ItemIdByProd</TitleField2>
	<ClusteredIndex>InventMainByProdIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>InventMainByProdIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemIdMain</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemIdByProd</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CostPrice</Name>
			<Label>@SYS13134</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ByProdCosting</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Percentage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemIdMain</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemIdByProd</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDimIdMain</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimIdByProd</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ByProdCosting</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProdByProdCosting_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimIdByProd</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimIdMain</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemIdByProd</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@GLS115744</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemIdMain</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdItemIdMain_RU</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Percentage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Label>@GLS115777</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventMainByProdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemIdMain</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimIdMain</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemIdByProd</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimIdByProd</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>InventDimByProd</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventDimByProd</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimIdByProd</Name>
					<Field>InventDimIdByProd</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventDimMain</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventDimMain</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimIdMain</Name>
					<Field>InventDimIdMain</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTableByProd</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemIdByProd</Name>
					<Field>ItemIdByProd</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTableMain</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Main</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemIdMain</Name>
					<Field>ItemIdMain</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>ItemType_Extern</Name>
					<RelatedField>ItemType</RelatedField>
					<ValueStr>ItemType::Item</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>