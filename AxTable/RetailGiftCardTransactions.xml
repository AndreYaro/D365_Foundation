<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailGiftCardTransactions</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailGiftCardTransactions extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cardNumberWithoutCheckDigits</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the <c>RetailGiftCardId</c> associated with the current <c>RetailGiftCardTransactions</c> record.
    /// </summary>
    /// <returns>
    /// The <c>RetailGiftCardId</c> associated with the current <c>RetailGiftCardTransactions</c> record.
    /// </returns>
    public display RetailGiftCardId cardNumberWithoutCheckDigits()
    {
        RetailGiftCardTable retailGiftCardTable;
        MCRCheckDigit_Mod97 mcrCheckDigit_Mod97;

        if (RetailGiftCardTable::isGiftCardDataShared())
        {
            select firstOnly crosscompany MCRGiftCardType from retailGiftCardTable
                where retailGiftCardTable.EntryId == this.CardNumber;
        }
        else
        {
            select firstOnly MCRGiftCardType from retailGiftCardTable
                where retailGiftCardTable.EntryId == this.CardNumber;
        }

        if (retailGiftCardTable.MCRGiftCardType == MCRGiftCardType::Email)
        {
            mcrCheckDigit_Mod97 = new MCRCheckDigit_Mod97();
            return mcrCheckDigit_Mod97.removeCheckDigit(this.CardNumber);
        }

        return this.CardNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the transaction date time for the record.
    /// </summary>
    /// <returns>
    /// The transaction date tiem for the current record.
    /// </returns>
    public display utcdatetime transDateTime()
    {
        utcdatetime transDateTime = DateTimeUtil::newDateTime(this.transDate, this.transTime);
        return transDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the fields <c>Operation</c>, <c>TransDate</c> and <c>TransTime</c> in the new <c>RetailGiftCardTransactions</c> table record.
    /// </summary>
    public void initValue()
    {
        super();

        this.Operation = RetailGiftCardOperation::Adjust;
        this.TransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.TransTime = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        //<GEERU>
        if (this.operation == RetailGiftCardOperation::Adjust &&
            RetailParameters::find().ProcessGiftCardsAsPrepayments_RU)
        {
            ret = checkFailed(strFmt("@SYS4007522", fieldId2pname(tableNum(RetailParameters), fieldNum(RetailParameters, ProcessGiftCardsAsPrepayments_RU))));
        }
        //</GEERU>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>RetailGiftCardTransactions</c> table.
    /// </summary>
    /// <param name="_operationType">
    /// The operation type of the <c>operation</c> field.
    /// </param>
    /// <param name="_cardNumber">
    /// The ID number of the gift card.
    /// </param>
    /// <param name="_channelId">
    /// The channel id.
    /// </param>
    /// <param name="_terminalId">
    /// The ID number of the terminal.
    /// </param>
    /// <param name="_staffId">
    /// The ID number of the staff.
    /// </param>
    /// <param name="_transactionId">
    /// The ID number of the transaction.
    /// </param>
    /// <param name="_receiptId">
    /// The ID number of the receipt.
    /// </param>
    /// <param name="_amountMST">
    /// The amount of MST.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <param name="_transTime">
    /// The transaction time.
    /// </param>
    public static void add(RetailGiftCardOperation          _operationType,
                                      RetailGiftCardId      _cardNumber,
                                      RetailChannelRecId    _channelId,
                                      RetailTerminalId      _terminalId,
                                      RetailStaffId         _staffId,
                                      RetailTransactionId   _transactionId,
                                      RetailReceiptId       _receiptId,
                                      AmountMST             _amountMST,
                                      RetailtransDate       _transDate,
                                      RetailTransTime       _transTime)
    {
        RetailGiftCardTransactions tGiftCardTransactions;

        tGiftCardTransactions.CardNumber      = _cardNumber;
        tGiftCardTransactions.Channel         = _channelId;
        tGiftCardTransactions.TerminalId      = _terminalId;
        tGiftCardTransactions.StaffId         = _staffId;
        tGiftCardTransactions.TransactionId   = _transactionId;
        tGiftCardTransactions.ReceiptId       = _receiptId;
        tGiftCardTransactions.Amount          = _amountMST;
        tGiftCardTransactions.TransDate       = _transDate;
        tGiftCardTransactions.TransTime       = _transTime;
        tGiftCardTransactions.Operation       = _operationType;

        tGiftCardTransactions.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total amount in the <c>RetailGiftCardTransactions</c> table for the specified ID.
    /// </summary>
    /// <param name="giftCardTable">
    /// A record of the <c>RetailGiftCardTable</c> table.
    /// </param>
    /// <returns>
    /// The sum of amount in the <c>Amount</c> field for the specified ID.
    /// </returns>
    public static RetailBalance calcBalance(RetailGiftCardTable giftCardTable)
    {
        RetailGiftCardTransactions giftCardTransactions;

        if (RetailGiftCardTable::isGiftCardDataShared())
        {
            select crosscompany sum(Amount) from giftCardTransactions
                where giftCardTransactions.CardNumber == giftCardTable.EntryId;
        }
        else
        {
            select sum(Amount) from giftCardTransactions
                where giftCardTransactions.CardNumber == giftCardTable.EntryId;
        }

        return giftCardTransactions.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcIssueAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the issue amount in the <c>RetailGiftCardTransactions</c> table for the specified ID.
    /// </summary>
    /// <param name="giftCardTable">
    /// A record of the <c>RetailGiftCardTable</c> table.
    /// </param>
    /// <returns>
    /// The initial issue amount in the <c>Amount</c> field for the specified ID.
    /// </returns>
    public static RetailBalance calcIssueAmount(RetailGiftCardTable giftCardTable)
    {
        RetailGiftCardTransactions giftCardTransactions;

        if (RetailGiftCardTable::isGiftCardDataShared())
        {
            select firstonly crosscompany Amount from giftCardTransactions
                where giftCardTransactions.CardNumber == giftCardTable.EntryId
                    && giftCardTransactions.operation == RetailGiftCardOperation::Issue;
        }
        else
        {
            select firstonly Amount from giftCardTransactions
                where giftCardTransactions.CardNumber == giftCardTable.EntryId
                    && giftCardTransactions.operation == RetailGiftCardOperation::Issue;
        }

        return giftCardTransactions.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailGiftCardTransactions</c> table.
    /// </summary>
    /// <param name="cardNumber">
    /// The gift card number of the gift card transaction record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailGiftCardTransactions</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailGiftCardTransactions find(RetailGiftCardId cardNumber, boolean _forUpdate = false)
    {
        RetailGiftCardTransactions trboGiftCardTransactions;

        if (cardNumber)
        {
            trboGiftCardTransactions.selectForUpdate(_forUpdate);

            if (RetailGiftCardTable::isGiftCardDataShared())
            {
                select firstonly crosscompany trboGiftCardTransactions
                    where trboGiftCardTransactions.CardNumber == cardNumber;
            }
            else
            {
                select firstonly trboGiftCardTransactions
                    where trboGiftCardTransactions.CardNumber == cardNumber;
            }
        }

        return trboGiftCardTransactions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrFindInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>RetailGiftCardTransactions</c> record based on the passed <c>InventTransId</c> object.
    /// </summary>
    /// <param name="_inventTransId">
    /// The <c>InventTransId</c> object used to find the <c>RetailGiftCardTransactions</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean that determines whether to select the record for update; optional.
    /// </param>
    /// <returns>
    /// The <c>RetailGiftCardTransactions</c> record found.
    /// </returns>
    public static RetailGiftCardTransactions mcrFindInventTransId(InventTransId _inventTransId, boolean _forUpdate = false)
    {
        RetailGiftCardTransactions retailGiftCardTransactions;

        if (_inventTransId)
        {
            retailGiftCardTransactions.selectForUpdate(_forUpdate);

            if (RetailGiftCardTable::isGiftCardDataShared())
            {
                select firstonly crosscompany retailGiftCardTransactions
                    where retailGiftCardTransactions.MCRInventTransId == _inventTransId;
            }
            else
            {
                select firstonly retailGiftCardTransactions
                    where retailGiftCardTransactions.MCRInventTransId == _inventTransId;
            }
        }

        return retailGiftCardTransactions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpostedTransactionExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified gift card has any unposted transaction.
    /// </summary>
    /// <param name="_giftCardId">
    /// The gift card number.
    /// </param>
    /// <returns>
    /// True if there is any unposted transaction for the specified gift card number; otherwise false.
    /// </returns>
    public static boolean unpostedTransactionExist(RetailGiftCardId _giftCardId)
    {
        RetailGiftCardTransactions giftCardTransaction;
        RetailTransactionTable transTable;
        boolean ret = false;

        if (RetailGiftCardTable::isGiftCardDataShared()
            && RetailGiftCardTransactions::getUnpostedTransaction(_giftCardId) != 0)
        {
            ret = true;
        }
        else
        {
            while select crosscompany transactionId, Channel, terminalId from giftCardTransaction
                where giftCardTransaction.cardNumber    == _giftCardId &&
                      giftCardTransaction.transactionId != ''
            {
                // retail transaction exists and is posted or is voided
                select firstonly crossCompany RecId from transTable
                    where transTable.transactionId == giftCardTransaction.transactionId &&
                        transTable.Channel       == giftCardTransaction.Channel       &&
                        transTable.terminal      == giftCardTransaction.terminalId    &&
                        (transTable.entryStatus  == RetailEntryStatus::Posted         ||
                        transTable.entryStatus   == RetailEntryStatus::Voided);

                if (!transTable)
                {
                    ret = true;
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnpostedTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the identifier of the transaction that is neither in Posted nor Voided state.
    /// Searches across all legal entities.
    /// </summary>
    /// <param name = "_giftCardId">The gift card number.</param>
    /// <returns>The transaction identifier.</returns>
    private static RefRecId getUnpostedTransaction(RetailGiftCardId _giftCardId)
    {
        RetailGiftCardTransactions retailGiftCardTransactions;
        RetailTransactionTable retailTransactionTable;

        select firstonly crossCompany retailTransactionTable
            where retailTransactionTable.EntryStatus != RetailEntryStatus::Posted
                && retailTransactionTable.EntryStatus != RetailEntryStatus::Voided
            join retailGiftCardTransactions
            where retailGiftCardTransactions.CardNumber == _giftCardId
                && retailGiftCardTransactions.TransactionId != ''
                && retailTransactionTable.TransactionId == retailGiftCardTransactions.TransactionId
                && retailTransactionTable.Channel == retailGiftCardTransactions.Channel
                && retailTransactionTable.Terminal == retailGiftCardTransactions.TerminalId;

        return retailTransactionTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postFromPaymTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the posting operations using the passed amount.
    /// </summary>
    /// <param name="_amount">
    /// The amount to be posted.
    /// </param>
    /// <param name="_mcrCustPaymTable">
    /// The MCRCustPaymTable to do the posting.
    /// </param>
    public static void postFromPaymTable(Amount _amount, MCRCustPaymTable _mcrCustPaymTable)
    {
        RetailGiftCardTransactions retailGiftCardTransactions;
        RetailGiftCardTable retailGiftCardTable = RetailGiftCardTable::mcrFindRecId(_mcrCustPaymTable.PaymInfoRecId, true);
        RetailGiftCardOperation operation = _amount < 0.0 ? RetailGiftCardOperation::Refund : RetailGiftCardOperation::Redeem;
        RetailParameters retailParameters = RetailParameters::find();

        ttsBegin;

        if (retailParameters.UseGiftCardPolicies && retailGiftCardTable.OneTimeRedemption)
        {
            retailGiftCardTable.Status = (operation == RetailGiftCardOperation::Redeem) ? RetailGiftCardStatus::Expired : RetailGiftCardStatus::Active;
            retailGiftCardTable.update();
        }

        retailGiftCardTransactions.Operation = operation;
        retailGiftCardTransactions.CardNumber = retailGiftCardTable.entryId;
        retailGiftCardTransactions.Amount = -_amount;
        retailGiftCardTransactions.TransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        retailGiftCardTransactions.TransTime = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone());
        retailGiftCardTransactions.MCRSalesId = _mcrCustPaymTable.salesTable().SalesId;
        retailGiftCardTransactions.MCRInvoiceAccount = _mcrCustPaymTable.CustAccount;
        retailGiftCardTransactions.Channel = _mcrCustPaymTable.salesTable().retailSalesTable().RetailChannel;
        if (retailGiftCardTransactions.validateWrite())
        {
            retailGiftCardTransactions.insert();
        }
        else
        {
            throw error("@SYS104318");
        }

        // remaining amount should never go below zero
        if (_amount > 0
                && MCRGiftCard::availableBalance(retailGiftCardTransactions.CardNumber) < 0)
        {
            throw error("@MCR11158");
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates a gift card transaction record based off transaction data from the <c>RetailGiftCardChannelTransactions</c> table.
    /// </summary>
    /// <param name="_giftCardChannelTxns">
    /// The RetailGiftCardChannelTransactions record buffer to find or create from.
    /// </param>
    /// <param name="_forUpdate">
    /// Specify if the record is updatable.
    /// </param>
    public static RetailGiftCardTransactions findOrCreate(RetailGiftCardChannelTransactions _giftCardChannelTxns, boolean _forUpdate = false)
    {
        RetailGiftCardTransactions giftCardTransactions;

        if (_giftCardChannelTxns)
        {
            // Check to see if the RetailGiftCardTransactions record exists.
            if (RetailGiftCardTable::isGiftCardDataShared())
            {
                select firstonly1 crosscompany giftCardTransactions
                    where giftCardTransactions.cardNumber == _giftCardChannelTxns.cardNumber
                        && giftCardTransactions.transactionId == _giftCardChannelTxns.transactionId
                        && giftCardTransactions.operation == _giftCardChannelTxns.operation
                        && giftCardTransactions.amount == _giftCardChannelTxns.amount;
            }
            else
            {
                select firstonly1 giftCardTransactions
                    where giftCardTransactions.cardNumber == _giftCardChannelTxns.cardNumber
                        && giftCardTransactions.transactionId == _giftCardChannelTxns.transactionId
                        && giftCardTransactions.operation == _giftCardChannelTxns.operation
                        && giftCardTransactions.amount == _giftCardChannelTxns.amount;
            }

            // If no record found, create it.
            if (!giftCardTransactions)
            {
                giftCardTransactions.clear();
                giftCardTransactions.cardNumber = _giftCardChannelTxns.cardNumber;
                giftCardTransactions.operation = _giftCardChannelTxns.operation;
                giftCardTransactions.Channel = _giftCardChannelTxns.Channel;

                giftCardTransactions.terminalId = _giftCardChannelTxns.terminalId;
                giftCardTransactions.staffId = _giftCardChannelTxns.staffId;
                giftCardTransactions.transactionId = _giftCardChannelTxns.transactionId;

                giftCardTransactions.receiptId = _giftCardChannelTxns.receiptId;
                giftCardTransactions.amount = _giftCardChannelTxns.amount;
                giftCardTransactions.transDate = _giftCardChannelTxns.transDate;
                giftCardTransactions.transTime = _giftCardChannelTxns.transTime;
                giftCardTransactions.insert();
            }

            // Set the forUpdate flag for the record.
            giftCardTransactions.selectForUpdate(_forUpdate);
        }

        return giftCardTransactions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the transaction already exists
    /// </summary>
    /// <param name="_operationType">
    /// Operation type (like Issue card, Add value to card, redeem etc.)
    /// </param>
    /// <param name="_cardNumber">
    /// Specify the gift card number
    /// </param>
    /// <param name="_transactionId">
    /// Specify the transaction id
    /// </param>
    /// <param name="_amountMST">
    /// Specify the transaction amount
    /// </param>
    /// <returns>
    /// Boolean indicating whether the transaction exists within the <c>RetailGiftCardTransactions</c> table given the passed-in parameters.
    /// </returns>
    public static boolean findTransaction(RetailGiftCardOperation _operationType,
                                          RetailGiftCardId        _cardNumber,
                                          RetailTransactionId     _transactionId,
                                          AmountMST               _amountMST)
    {
        boolean transactionExists = false;
        RetailGiftCardTransactions retailGiftCardTransactions;

        if (RetailGiftCardTable::isGiftCardDataShared())
        {
            select firstOnly crosscompany RecId from retailGiftCardTransactions
                where retailGiftCardTransactions.cardNumber == _cardNumber
                    && retailGiftCardTransactions.transactionId == _transactionId
                    && retailGiftCardTransactions.operation == _operationType
                    && retailGiftCardTransactions.amount == _amountMST;
        }
        else
        {
            select firstOnly RecId from retailGiftCardTransactions
                where retailGiftCardTransactions.cardNumber == _cardNumber
                    && retailGiftCardTransactions.transactionId == _transactionId
                    && retailGiftCardTransactions.operation == _operationType
                    && retailGiftCardTransactions.amount == _amountMST;
        }

        if (retailGiftCardTransactions)
        {
            transactionExists = true;
        }

        return transactionExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the last transaction RecId when passed-in parameters match.
    /// </summary>
    /// <param name="_operationType">
    /// Operation type (like Issue card, Add value to card, redeem etc.)
    /// </param>
    /// <param name="_cardNumber">
    /// Specify the gift card number
    /// </param>
    /// <param name="_transactionId">
    /// Specify the transaction id
    /// </param>
    /// <param name="_amountMST">
    /// Specify the transaction amount
    /// </param>
    /// <returns>
    /// Return RecId when last transaction matches passed-in parameters, otherwise 0.
    /// </returns>
    internal static RecId lastTransaction(RetailGiftCardOperation _operationType,
                                            RetailGiftCardId        _cardNumber,
                                            RetailTransactionId     _transactionId,
                                            AmountMST               _amountMST)
    {
        RetailGiftCardTransactions retailGiftCardTransactions;

        select firstOnly RecId, operation, transactionId, amount
            from retailGiftCardTransactions
                order by transDate desc, transTime desc
                    where retailGiftCardTransactions.cardNumber == _cardNumber;

        if (retailGiftCardTransactions.RecId
            && retailGiftCardTransactions.Operation == _operationType
            && retailGiftCardTransactions.transactionId == _transactionId
            && retailGiftCardTransactions.amount == _amountMST)
        {
            return retailGiftCardTransactions.RecId;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Counts the number of occurrences of a given transaction with the provided parameters.
    /// </summary>
    /// <param name="_operationType">
    /// Operation type (like Issue card, Add value to card, redeem etc.)
    /// </param>
    /// <param name="_cardNumber">
    /// Specify the gift card number
    /// </param>
    /// <param name="_transactionId">
    /// Specify the transaction id
    /// </param>
    /// <param name="_amountMST">
    /// Specify the transaction amount
    /// </param>
    /// <returns>
    /// Count of the transactions existing within the <c>RetailGiftCardTransactions</c> table with the passed-in parameters.
    /// </returns>
    public static int countTransactions(RetailGiftCardOperation _operationType,
                                        RetailGiftCardId        _cardNumber,
                                        RetailTransactionId     _transactionId,
                                        AmountMST               _amountMST)
    {
        RetailGiftCardTransactions retailGiftCardTransactions;

        if (RetailGiftCardTable::isGiftCardDataShared())
        {
            select crosscompany count(RecId) from retailGiftCardTransactions
                where retailGiftCardTransactions.cardNumber == _cardNumber
                    && retailGiftCardTransactions.transactionId == _transactionId
                    && retailGiftCardTransactions.operation == _operationType
                    && retailGiftCardTransactions.amount == _amountMST;
        }
        else
        {
            select count(RecId) from retailGiftCardTransactions
                where retailGiftCardTransactions.cardNumber == _cardNumber
                    && retailGiftCardTransactions.transactionId == _transactionId
                    && retailGiftCardTransactions.operation == _operationType
                    && retailGiftCardTransactions.amount == _amountMST;
        }

        return retailGiftCardTransactions.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET4040258</DeveloperDocumentation>
	<Label>@RET5047</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>cardNumber</TitleField1>
	<TitleField2>operation</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>cardNumberIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<Modules>Payments</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>cardNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>transactionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>transDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>transTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Channel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>terminalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>operation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>cardNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>receiptId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRInventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRInvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRSalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Channel</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Details</Name>
			<Label>@RET3813</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>transDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>transTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>operation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Grid</Name>
			<Label>@RET4772</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Channel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>terminalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>transactionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>staffId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>transDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>transTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>operation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@RET3040</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Channel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>terminalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>transactionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>staffId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>receiptId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>amount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>cardNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailGiftCardId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Channel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailChannelRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRInventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeInventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRInvoiceAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustInvoiceAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRSalesId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesIdBase</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>operation</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>RetailGiftCardOperation</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>receiptId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RetailReceiptId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>staffId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RetailStaffId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>terminalId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTerminalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>transactionId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RetailTransactionId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>transDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailtransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>transTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTransTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StoreId</Name>
			<AllowEdit>No</AllowEdit>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>RetailStoreId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>cardNumberIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>cardNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>mcrInventTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>MCRInventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Amount</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>cardNumberTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>cardNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>transactionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>cardNumber</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailGiftCardTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>cardNumber</Name>
					<SourceEDT>RetailGiftCardId</SourceEDT>
					<Field>cardNumber</Field>
					<RelatedField>entryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MCRCustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCRInvoiceAccount</Name>
					<SourceEDT>CustInvoiceAccount</SourceEDT>
					<Field>MCRInvoiceAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MCRSalesLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>IssuedSalesLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>GiftCard</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCRInventTransId</Name>
					<Field>MCRInventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MCRSalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PaymentForSalesOrder</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PaymentGiftCardTransaction</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCRSalesId</Name>
					<Field>MCRSalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailChannelTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailChannelTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Channel</Name>
					<Field>Channel</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailTerminalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailTerminalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>terminalId</Name>
					<SourceEDT>RetailTerminalId</SourceEDT>
					<Field>terminalId</Field>
					<RelatedField>terminalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>terminalIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailTransactionTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailTransactionTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>transactionId</Name>
					<SourceEDT>RetailTransactionId</SourceEDT>
					<Field>transactionId</Field>
					<RelatedField>transactionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>