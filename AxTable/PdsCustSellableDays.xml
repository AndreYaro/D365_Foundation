<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsCustSellableDays</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PdsCustSellableDays extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkItemCodeRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the ItemCode and ItemRelation combination is allowed
    /// </summary>
    /// <param name="_final">
    /// The parameter will be used to determine if this is a final check before
    /// the record is to be written.
    /// </param>
    /// <returns>
    /// true, if combination is allowed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the call is not the final check, the ItemRelation is allowed to be
    /// blank even if the ItemCode is set ti either Table or GroupId. If the
    /// check is the final check this ommission is not allowed.
    /// </remarks>
    public boolean checkItemCodeRelation(boolean _final = false)
    {
        boolean  ok = true;

        switch (this.ItemCode)
        {
            case TableGroupAll::Table :
                if (_final && this.ItemRelation == '')
                {
                    ok = checkFailed("@PDS1306");
                }

                if (ok
                    && this.ItemRelation != ''
                    && !InventTable::exist(this.ItemRelation))
                {
                    ok = checkFailed(strfmt("@PDS1302", this.ItemRelation));
                }

                ok = ok && this.checkItemDimension();
                break;

            case TableGroupAll::GroupId :
                if (_final && this.ItemRelation == '')
                {
                    ok = checkFailed("@PDS1307");
                }

                if (ok
                    && this.ItemRelation != ''
                    && !InventItemGroup::exist(this.ItemRelation))
                {
                    ok = checkFailed(strfmt("@PDS1303", this.ItemRelation));
                }

                break;

            case TableGroupAll::All :
                if (PdsCustSellableDays::existCustAll(
                        this.CustAccount,
                        this.RecId))
                {
                    ok = checkFailed("@PDS1298");
                }
                if (ok && this.ItemRelation)
                {
                    ok = checkFailed("@PDS1301");
                }
                break;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the inventDim dimension combination is allowed for the item.
    /// </summary>
    /// <returns>
    /// true, if InventDim is allowed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Standard validation.
    /// </remarks>
    public boolean checkItemDimension()
    {
        if (this.ItemCode != TableGroupAll::Table || !this.ItemRelation)
        {
            return true;
        }

        return this.inventDim().validateWriteProductDimensions(this.ItemRelation, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialization of new PdsCustSellableDays record.
    /// </summary>
    /// <remarks>
    /// ItemCode will default to 'Table' as only one 'All' record is allowed
    /// and the assumption is that a majority of the records would be for
    /// specific items.
    /// </remarks>
    public void initValue()
    {
        super();

        this.InventDimId    = InventDim::inventDimIdBlank();
        this.ItemCode       = TableGroupAll::Table;
        this.ItemRelation   = '';
        this.SellableDays   = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard insert call
    /// </summary>
    /// <remarks>
    /// This method will process the record in the standard process will the check
    /// and assignement of ItemRelation and InventDimId based on the ItemCode.
    /// </remarks>
    public void insert()
    {
        if (this.ItemCode == TableGroupAll::All)
        {
            this.ItemRelation   = '';
            this.InventDimId    = InventDim::inventDimIdBlank();
        }

        if (this.ItemCode == TableGroupAll::GroupId)
        {
            this.InventDimId    = InventDim::inventDimIdBlank();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return InventDim record for the record InventDimId
    /// </summary>
    /// <param name="_forUpdate">
    /// Return a recordset that may be updated.
    /// </param>
    /// <returns>
    /// InventDim record, if information corresponding to the current record's
    /// inventDimId is found; Otherwise null record.
    /// </returns>
    /// <remarks>
    /// standard search.
    /// </remarks>
    public InventDim inventDim(boolean _forUpdate = false)
    {
        return InventDim::find(this.InventDimId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run logic if specific table field is modified.
    /// </summary>
    /// <param name="_fieldId">
    /// FieldId for the table field that was changed.
    /// </param>
    /// <remarks>
    /// If ItemCode is changed, check if the ItemRelation is populated and modify
    /// if the ItemCode/ItemRelation combination requires this.
    /// </remarks>
    public void modifiedField(fieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldnum(PdsCustSellableDays, ItemCode) :
                if (this.ItemRelation)
                {
                    switch (this.ItemCode)
                    {
                        case TableGroupAll::All :
                            this.ItemRelation = '';
                            break;

                        case TableGroupAll::GroupId :
                            if (!InventItemGroup::exist(this.ItemRelation))
                            {
                                this.ItemRelation = '';
                            }
                            break;

                        case TableGroupAll::Table :
                            if (!InventTable::exist(this.ItemRelation))
                            {
                                this.ItemRelation = '';
                            }
                            break;
                    }
                }
                break;
        }

        super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldnum(PdsCustSellableDays, ItemCode):
                //Fall through
                case fieldnum(PdsCustSellableDays, ItemRelation):
                    ret = this.checkItemCodeRelation();
                    break;

                case fieldnum(PdsCustSellableDays, SellableDays):
                    if (this.SellableDays <= 0)
                    {
                        ret = checkFailed("@PDS1309");
                    }
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = ret && this.checkItemCodeRelation(true);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the record with RecordId exists.
    /// </summary>
    /// <param name="_recId">
    /// RecordId for which to search.
    /// </param>
    /// <returns>
    /// True, if found; otherwise false.
    /// </returns>
    /// <remarks>
    /// Standard exist
    /// </remarks>
    public static boolean exist(RecId _recId)
    {
        return (select pdsCustSellableDays
                    where pdsCustSellableDays.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCustAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the record with RecordId exists.
    /// </summary>
    /// <param name="_acctNum">
    /// Customer number for which to search.
    /// </param>
    /// <param name="_recId">
    /// Exclude this recordId from the search. This is to ensure that a record being
    /// changed does not find itself.
    /// </param>
    /// <returns>
    /// True, if found; otherwise false.
    /// </returns>
    /// <remarks>
    /// Determine if there are any records for the customer and of type 'All'
    /// </remarks>
    public static boolean existCustAll(
        CustAccount     _acctNum,
        RecId           _recId = 0)
    {
        PdsCustSellableDays     pdsCustSellableDays;

        if (_recId != 0)
        {
            select firstonly RecId
                from pdsCustSellableDays
                where  pdsCustSellableDays.CustAccount  == _acctNum
                    && pdsCustSellableDays.ItemCode     == TableGroupAll::All
                    && pdsCustSellableDays.RecId        != _recId;
        }
        else
        {
            select firstonly RecId
                from pdsCustSellableDays
                where  pdsCustSellableDays.CustAccount  == _acctNum
                    && pdsCustSellableDays.ItemCode     == TableGroupAll::All;
        }

        return pdsCustSellableDays.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCust</Name>
				<Source><![CDATA[
    private static boolean existCust(CustAccount _acctNum)
    {
        PdsCustSellableDays     pdsCustSellableDays;
       
        select firstonly RecId from pdsCustSellableDays
            where pdsCustSellableDays.CustAccount == _acctNum;

        return pdsCustSellableDays.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the record with a specific RecordId.
    /// </summary>
    /// <param name="_recId">
    /// RecordId for which to search.
    /// </param>
    /// <param name="_forUpdate">
    /// Specify if the record returned will be selected for update.
    /// </param>
    /// <returns>
    /// Recordset found for specific recordId.
    /// </returns>
    /// <remarks>
    /// Determine if there are any records for the customer and of type 'All'
    /// </remarks>
    public static PdsCustSellableDays find(
        RecId   _recId,
        boolean _forUpdate = false)
    {
        PdsCustSellableDays   daysByItem;

        daysByItem.selectForUpdate(_forUpdate);

        select firstonly daysByItem
            where daysByItem.RecId == _recId;

        return daysByItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustItemDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the record for which match exactly the parameters provided.
    /// </summary>
    /// <param name="_itemCode">
    /// TableGroupAll parameter for which to search
    /// </param>
    /// <param name="_itemRelation">
    /// ItemId/ItemGroupId for which to search.
    /// </param>
    /// <param name="_custAcct">
    /// Customer number for which to search.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// InventDim for which to search.
    /// </param>
    /// <param name="_forUpdate">
    /// Specify if the record returned will be selected for update.
    /// </param>
    /// <returns>
    /// Recordset found for the provided parameters; otherwise null recordset.
    /// </returns>
    /// <remarks>
    /// find a record for the customer, TableGroupId, ItemId/ItemGroupId and
    /// InventDim combination.
    /// </remarks>
    public static PdsCustSellableDays findCustItemDim(
        ItemCode        _itemCode,
        ItemRelation    _itemRelation,
        CustAccount     _custAcct,
        InventDim       _inventDimCriteria,
        boolean         _forUpdate = false)
    {
        PdsCustSellableDays daysByItem;
        daysByItem.selectForUpdate(_forUpdate);

        if (_itemCode == TableGroupAll::Table)
        {
            InventDimParm dimParmDefault;
            dimParmDefault.initProductDimensionsAllGroups();
            InventDimParm inventDimParm = InventDimParm::activeDimFlag(InventDimGroupSetup::newItemId(_itemRelation));

            inventDimParm = InventDimParm::andParms(inventDimParm, dimParmDefault);
            InventDim inventDim;

            select firstonly daysByItem
                where  daysByItem.ItemCode      == _itemCode
                    && daysByItem.ItemRelation  == _itemRelation
                    && daysByItem.CustAccount   == _custAcct
                    #InventDimExistsJoin(daysByItem.InventDimId, inventDim, _inventDimCriteria, inventDimParm);
        }
        else
        {
            select firstonly daysByItem
                where  daysByItem.ItemCode      == _itemCode
                    && daysByItem.ItemRelation  == _itemRelation
                    && daysByItem.CustAccount   == _custAcct
                    && daysByItem.InventDimId   == InventDim::findDim(_inventDimCriteria).InventDimId;
        }

        return daysByItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findValidRec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the record that most closely resembles the parameters.
    /// </summary>
    /// <param name="_itemId">
    /// ItemId for which to search.
    /// </param>
    /// <param name="_custAcct">
    /// Customer number for which to search.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// InventDim for which to search.
    /// </param>
    /// <returns>
    /// Recordset found most closely to the provided parameters; otherwise
    /// null recordset.
    /// </returns>
    /// <remarks>
    /// Determines if there are any records for the customer and of type 'All'
    /// </remarks>
    public static PdsCustSellableDays findValidRec(
        ItemId          _itemId,
        CustAccount     _custAcct,
        InventDim       _inventDimCriteria)
    {
        TableGroupAll           itemCode = TableGroupAll::Table;
        PdsCustSellableDays     daysCustItem;
        InventDim               blankIdInventDim;
        InventTable             inventTable = InventTable::find(_itemId);

        if (inventTable.isSellableDaysApplicable())
        {
            if (!PdsCustSellableDays::existCust(_custAcct))
            {
                return daysCustItem;
            }

            //Find Item and specific inventDim combination record
            daysCustItem = PdsCustSellableDays::findCustItemDim(
                                itemCode,
                                _itemId,
                                _custAcct,
                                _inventDimCriteria);

            //Find Item, No dims InventDimId, record
            if (!daysCustItem.RecId)
            {
                blankIdInventDim = InventDim::find(InventDim::inventDimIdBlank());

                daysCustItem = PdsCustSellableDays::findCustItemDim(
                                itemCode,
                                _itemId,
                                _custAcct,
                                blankIdInventDim);

                //Find Item group record
                if (!daysCustItem.RecId)
                {
                    itemCode = TableGroupAll::GroupId;
                    daysCustItem = PdsCustSellableDays::findCustItemDim(
                                    itemCode,
                                    inventTable.itemGroupId(),
                                    _custAcct,
                                    blankIdInventDim);

                    //Find 'All' Record
                    if (!daysCustItem.RecId)
                    {
                        itemCode = TableGroupAll::All;
                        daysCustItem = PdsCustSellableDays::findCustItemDim(
                                itemCode,
                                '',
                                _custAcct,
                                blankIdInventDim);
                    }
                }
            }
        }
        return daysCustItem;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PdsShelf</ConfigurationKey>
	<DeveloperDocumentation>@PDS1230</DeveloperDocumentation>
	<Label>@PDS1291</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>CustAccount</TitleField1>
	<TitleField2>ItemRelation</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>SellableDaysIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SellableDays</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@PRO1417</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SellableDays</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ItemCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemCode</ExtendedDataType>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemRelation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsSellableItemRelation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SellableDays</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsSellableDays</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AccountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SellableDaysIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventItemGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventItemGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ItemCode</Name>
					<Field>ItemCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemRelation</Name>
					<Field>ItemRelation</Field>
					<RelatedField>ItemGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ItemCode</Name>
					<Field>ItemCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemRelation</Name>
					<Field>ItemRelation</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>