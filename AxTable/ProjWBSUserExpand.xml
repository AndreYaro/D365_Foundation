<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjWBSUserExpand</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This table is used as a parent table for 'ProjWBSUserExpandLine', in order to associate each ProjPlanVersion record the user has expanded with a UserId and HierarchyId.
/// HierarchyId always refers to the oldest hierarchy version, so that the user may open future versions and maintain as much expand/collapse state as correctly possible
/// even if they have not witnessed the versions in between. Hence, ProjWBSUserExpand.HierarchyId and any ProjWBSUserExpandLine.TaskId may not necessarily refer to a valid task.
/// </summary>
public class ProjWBSUserExpand extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>saveExpandState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the expand state of all tasks for the given user.
    /// </summary>
    /// <param name = "_userId">The Id of the user to save </param>
    /// <param name = "_hierarchyId">Id of the hierarchy.</param>
    /// <param name = "_tempTable">Temp table buffer.</param>
    public static void saveExpandState(
        UserId _userId,
        HierarchyIdBase _hierarchyId,
        ProjHierarchyTemp _tempTable)
    {
        // Delete existing expand records for this hierarchy and user
        ttsbegin;
        {
            ProjWBSUserExpand existingExpand;
            delete_from existingExpand
            where
                existingExpand.UserId == _userId
                && existingExpand.HierarchyId == _hierarchyId;
        }

        // Create new expand records for this hierarchy and user
        {
            ProjWBSUserExpand newExpand;
            newExpand.UserId = _userId;
            newExpand.HierarchyId = _hierarchyId;
            newExpand.insert();

            ProjWBSUserExpandLine line;
            ProjPlanVersion task;
            RefRecId outerRecId = newExpand.RecId;
            insert_recordset line(
                ProjWBSUserExpandRefRecId,
                TaskId
            ) select
                outerRecId,
                HierarchyTaskId
            from task
            where
                task.EndNode == FalseTrue::False
            join _tempTable where
                _tempTable.RefRecId == task.RecId
                && _tempTable.Expand == FalseTrue::True;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreExpandState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Restores the Expand/Collapse state of the given hierarchy for the given user.
    /// </summary>
    /// <param name = "_userId">Id of the user to restore for.</param>
    /// <param name = "_hierarchyId">Id of the hierarchy to restore.</param>
    /// <param name = "_tempTable">Temp table buffer.</param>
    public static void restoreExpandState(
        UserId _userId,
        HierarchyIdBase _hierarchyId,
        ProjHierarchyTemp _tempTable)
    {
        // Make saved records expanded
        {
            ProjWBSUserExpand persistExpand = ProjWBSUserExpand::findByUserAndHierarchy(_userId, _hierarchyId);

            if (persistExpand)
            {
                boolean wbsFormLaunchEnhanceFlight = ProjWBSFormLaunchEnhancementFlight::instance().isEnabled();

                if (wbsFormLaunchEnhanceFlight)
                {
                    ProjWorkBreakdownStructureV2FormHelper::restoreExpandAndVisibleState(_tempTable, persistExpand.RecId);
                }
                else
                {
                    ttsbegin;
                    ProjPlanVersion task;
                    ProjWBSUserExpandLine line;
                    update_recordset _tempTable setting
                        Expand = FalseTrue::True
                    join line where
                        line.ProjWBSUserExpandRefRecId == persistExpand.RecId
                    join task where
                        _tempTable.RefRecId == task.RecId
                        && line.TaskId == task.HierarchyTaskId
                        && task.EndNode == FalseTrue::False;
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByUserAndHierarchy</Name>
				<Source><![CDATA[
    private static ProjWBSUserExpand findByUserAndHierarchy(
        UserId _userId,
        HierarchyIdBase _hierarchyId)
    {
        ProjWBSUserExpand result;
        if (_userId && _hierarchyId)
        {
            select firstonly result
            where
                result.UserId == _userId
                && result.HierarchyId == _hierarchyId;
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProjectManagementAndAccounting</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserId</Name>
			<ExtendedDataType>UserId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HierarchyId</Name>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LookupIndex</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>HierarchyId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>UserId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HierarchyIdRelation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ProjPlanVersionDetail</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HierarchyId</Name>
					<Field>HierarchyId</Field>
					<RelatedField>HierarchyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UserRelation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SysUserInfo</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UserId</Name>
					<Field>UserId</Field>
					<RelatedField>Id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>