<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymDay</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PaymDay extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(PaymDayId _paymDayId)
    {
        boolean ret = true;

        if (!PaymDay::exist(_paymDayId))
        {
            ret = checkFailed(strfmt(PaymDay::txtNotExist(), _paymDayId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(PaymDayId _paymDayId)
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     paymDay
                 where
                     paymDay.PaymDayId == _paymDayId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static PaymDay find(
        PaymDayId _paymDayId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        PaymDay paymDay;

        paymDay.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            paymDay.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            paymDay
            where
            paymDay.PaymDayId == _paymDayId;

        return paymDay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOffDate</Name>
				<Source><![CDATA[
    public static TransDate roundOffDate(TransDate _transDate, PaymDayId _paymDayId, boolean _skipMonthForwarding = false, PositiveDays _cutOffDay = 0)
    {
        PaymDayLine     paymDayLine;
        TransDate       transDate;
        int             dayOfDate;
        int             weekDayOfDate;
        int             monthOfDate;
        int             yearOfDate;

        transDate = _transDate;

        if (_paymDayId && transDate)
        {
            dayOfDate   = dayofmth(transDate);
            monthOfDate = mthofyr(transDate);
            yearOfDate  = year(transDate);

            select firstonly paymDayLine
                order by MonthDay
                where paymDayLine.PaymDayId == _paymDayId
                    && paymDayLine.WeekMonth == WeekMonth::Month
                    && paymDayLine.MonthDay >= dayOfDate;

            if (paymDayLine)
            {
                dayOfDate = paymDayLine.MonthDay;

                transDate = mkdate(dayOfDate, monthOfDate, yearOfDate);
                while (!transDate)
                {
                    dayOfDate--;
                    transDate = mkdate(dayOfDate, monthOfDate, yearOfDate);
                }

                int dayAdjustment = paymDayLine.MonthDay - dayofmth(transDate);

                if (SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion()
                    && _cutOffDay > dayOfMth(transDate)
                    && !PaymDay::shouldCurrentMonthBeUsed_JP(transDate, paymDayLine, _cutOffDay))
                {
                    dayOfDate   = dayofmth(transDate) + dayAdjustment;
                    monthOfDate = mthofyr(transDate);
                    yearOfDate  = year(transDate);

                    monthOfDate++;
                    if (monthOfDate > 12)
                    {
                        monthOfDate = 1;
                        yearOfDate++;
                    }

                    transDate = mkdate(dayOfDate, monthOfDate, yearOfDate);
                    while (!transDate)
                    {
                        dayOfDate--;
                        transDate = mkdate(dayOfDate, monthOfDate, yearOfDate);
                    }
                }
            }
            else
            {
                select firstonly paymDayLine
                    order by MonthDay
                    where paymDayLine.PaymDayId == _paymDayId
                        && paymDayLine.WeekMonth == WeekMonth::Month
                        && paymDayLine.MonthDay < dayOfDate;

                if (paymDayLine)
                {
                    dayOfDate   = paymDayLine.MonthDay;

                    if (!_skipMonthForwarding)
                    {
                        monthOfDate++;
                    }
                    if (monthOfDate > 12)
                    {
                        monthOfDate = 1;
                        yearOfDate++;
                    }

                    transDate = mkdate(dayOfDate, monthOfDate, yearOfDate);
                    while (!transDate)
                    {
                        dayOfDate--;
                        transDate = mkdate(dayOfDate, monthOfDate, yearOfDate);
                    }
                }
            }

            dayOfDate       = dayofmth(transDate);
            weekDayOfDate   = dayofwk(transDate);
            monthOfDate     = mthofyr(transDate);
            yearOfDate      = year(transDate);

            select firstonly paymDayLine
                order by WeekDay
                where paymDayLine.PaymDayId   == _paymDayId
                    && paymDayLine.WeekMonth   == WeekMonth::Week
                    && paymDayLine.WeekDay     >= weekDayOfDate;

            if (paymDayLine)
            {
                transDate += paymDayLine.WeekDay - weekDayOfDate;
            }
            else
            {
                select firstonly paymDayLine
                    order by WeekDay
                    where paymDayLine.PaymDayId == _paymDayId
                        && paymDayLine.WeekMonth == WeekMonth::Week
                        && paymDayLine.WeekDay < weekDayOfDate;

                if (paymDayLine)
                {
                    transDate += paymDayLine.WeekDay - weekDayOfDate + WeekDays::Sunday;
                }
            }
        }
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCurrentMonthBeUsed_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if transaction date month should not be incremented due to Japan-specific
    /// requirments even when other checks of the consolidation group of countries/regions
    /// date rounding logic for that are passed.
    /// </summary>
    /// <param name = "_transDate">Transaction date.</param>
    /// <param name = "_paymDayLine">Payment day line rounding based on.</param>
    /// <param name = "_cutOffDay">Cut-off day value.</param>
    /// <returns>
    /// True when Japan-specific requirments prevent month incrementation;
    /// False otherwise.
    /// </returns>
    private static boolean shouldCurrentMonthBeUsed_JP(TransDate _transDate, PaymDayLine _paymDayLine, PositiveDays _cutOffDay)
    {
        #ISOCountryRegionCodes

        boolean ret = false;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]) 
            && !BankParameters::find().DueDateCalc == NoYes::Yes)
        {
            ret = (_cutOffDay == 31 && PaymDay::isLastPossibleDayOfMonth(_paymDayLine))
                || (_cutOffDay == 29 && PaymDay::isLastDayOfCommonYearFebruary(_transDate));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLastDayOfCommonYearFebruary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if given date is the last day of February in a common year.
    /// </summary>
    /// <param name = "_transDate">Date to check.</param>
    /// <returns>
    /// True when the date is the last day of February in a common year;
    /// false otherwise.
    /// </returns>
    private static boolean isLastDayOfCommonYearFebruary(TransDate _transDate)
    {
        const int LastDayOfCommonYearFebruary = 28;

        return mthOfYr(_transDate) == MonthsOfYear::February
            && dayOfMth(_transDate) == LastDayOfCommonYearFebruary
            && _transDate == endMth(_transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLastPossibleDayOfMonth</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if given payment day line represents the last possible day of month.
    /// </summary>
    /// <param name = "_paymDayLine">Payment day line to check.</param>
    /// <returns>
    /// True when the payment day line day of month value equals 31;
    /// false otherwise.
    /// </returns>
    private static boolean isLastPossibleDayOfMonth(PaymDayLine _paymDayLine)
    {
        const int LastPossibleDayOfMonth = 31;

        return _paymDayLine
            && _paymDayLine.MonthDay == LastPossibleDayOfMonth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static str 80 txtNotExist()
    {
        return "@SYS57649";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS126082</DeveloperDocumentation>
	<FormRef>PaymDay</FormRef>
	<Label>@SYS57640</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>PaymDayId</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>PaymDayIdx</ClusteredIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>Bank</Modules>
	<PrimaryIndex>PaymDayIdx</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>PaymDayLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PaymDayLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymDayId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymDayId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymDayId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymDayId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PaymDayIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PaymDayId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>