<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanQuantityOverviewTmp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class KanbanQuantityOverviewTmp extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes current record buffer with kanban quantity overview statistics related to provided parameters.
    /// </summary>
    /// <param name = "_kanbanOverviewType">Kanban quantity overview type.</param>
    /// <param name = "_kanbanBoardTmpFilterCriteria">Filtering criteria.</param>
    public void init(KanbanOverviewType _kanbanOverviewType, KanbanBoardTmpFilterCriteria _kanbanBoardTmpFilterCriteria)
    {
        QueryRun queryRun = this.initQuery(_kanbanOverviewType, _kanbanBoardTmpFilterCriteria);

        if (queryRun)
        {
            while (queryRun.next())
            {
                KanbanRule      kanbanRule      = queryRun.get(tablenum(KanbanRule));
                KanbanRuleFixed kanbanRuleFixed = queryRun.get(tablenum(KanbanRuleFixed));
                LeanCoverage    leanCoverage    = queryRun.get(tablenum(LeanCoverage));

                this.clear();
                this.RuleId                     = kanbanRule.RuleId;
                this.ChartCategory              = strFmt('%1, %2', leanCoverage.productSelectionString(), kanbanRule.RuleId);
                this.ReplenishmentStrategy      = kanbanRule.ReplenishmentStrategy;
                this.MinimumAlertLevel          = kanbanRule.MinimumAlertLevel;
                this.MaximumAlertLevel          = kanbanRule.MaximumAlertLevel;
                this.FixedKanbanLevel           = kanbanRuleFixed.Level;
                this.UrgencyLevel               = kanbanRule.UrgencyLevel;

                KanbanFlow kanbanFlow = KanbanFlow::find(kanbanRule.kanbanFlow);

                this.TargetInventLocationId    = kanbanFlow.receiptInventLocationId();
                this.TargetWMSLocationId       = kanbanFlow.receiptWMSLocationId();
                this.TargetInventSiteId        = InventLocation::find(this.TargetInventLocationId).InventSiteId;

                if (kanbanRule.KanbanType == LeanKanbanType::Withdrawal)
                {
                    PlanActivity                planActivity;
                    PlanActivityRelationship    planActivityRelationship;
                    PlanConstraint              planConstraint;
                    PlanActivityLocation        planActivityLocation;

                    select firstonly InventLocationId, WMSLocationId from planActivityLocation
                        exists join planActivity
                            where planActivity.RecId == planActivityLocation.PlanActivity
                                && planActivity.PlanActivityType == PlanActivityType::Pick
                        exists join planActivityRelationship
                            where planActivityRelationship.DependentPlanActivity == planActivity.RecId
                                && planActivityRelationship.IndependentPlanActivity == kanbanFlow.firstPlanActivity().RecId
                        exists join planConstraint
                            where planConstraint.RecId == planActivityRelationship.Constraint
                                && planConstraint.ConstraintType == ConstraintTypes::Aggregation;

                    this.SourceInventLocationId = planActivityLocation.InventLocationId;
                    this.SourceWMSLocationId    = planActivityLocation.WMSLocationId;
                    this.SourceInventSiteId     = InventLocation::find(this.SourceInventLocationId).InventSiteId;
                }

                this.fillKanbanJobsStatistics(_kanbanOverviewType, _kanbanBoardTmpFilterCriteria, kanbanRule);

                this.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    private QueryRun initQuery(KanbanOverviewType _kanbanOverviewType, KanbanBoardTmpFilterCriteria _kanbanBoardTmpFilterCriteria)
    {
        QueryRun queryRun;

        KanbanOverviewQueryBuilderArgs args = new KanbanOverviewQueryBuilderArgs();
        args.parmActiveDateTime(DateTimeUtil::getSystemDateTime());

        if (_kanbanOverviewType == KanbanOverviewType::Finished || _kanbanOverviewType == KanbanOverviewType::Material)
        {
            if (_kanbanBoardTmpFilterCriteria.WorkCell)
            {
                KanbanOverviewQueryBuilderCell kanbanOverviewQueryBuilderCell = KanbanOverviewQueryBuilderCell::construct(_kanbanOverviewType);

                container argsCon = [_kanbanBoardTmpFilterCriteria.WorkCell, CompanyInfo::current()];
                args.parmQueryArgs(argsCon);

                kanbanOverviewQueryBuilderCell.setArgs(args);
                kanbanOverviewQueryBuilderCell.initialize();

                queryRun = kanbanOverviewQueryBuilderCell.getQueryRun();
            }
        }
        else
        {
            container argsCon = [CompanyInfo::current(), KanbanBoardTmpFilterCriteria::record2Container(_kanbanBoardTmpFilterCriteria)];
            args.parmQueryArgs(argsCon);

            KanbanOverviewQueryBuilderTransfer kanbanOverviewQueryBuilderTransfer = KanbanOverviewQueryBuilderTransfer::construct();

            kanbanOverviewQueryBuilderTransfer.setArgs(args);
            kanbanOverviewQueryBuilderTransfer.initialize();

            queryRun = kanbanOverviewQueryBuilderTransfer.getQueryRun();
        }

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillKanbanJobsStatistics</Name>
				<Source><![CDATA[
    private void fillKanbanJobsStatistics(KanbanOverviewType _kanbanOverviewType, KanbanBoardTmpFilterCriteria _kanbanBoardTmpFilterCriteria, KanbanRule _kanbanRule)
    {
        KanbanLevel active, notPlanned, planned, prepared, inProgress, completed;

        QueryRun queryRun = KanbanQuantityOverviewTmp::getKanbanJobsQueryRun(_kanbanOverviewType, _kanbanBoardTmpFilterCriteria, _kanbanRule);

        while (queryRun.next())
        {
            KanbanJob   kanbanJob = queryRun.get(tablenum(KanbanJob));
            Kanban      kanban    = queryRun.get(tablenum(Kanban));

            switch (kanbanJob.Status)
            {
                case LeanKanbanJobStatus::NotPlanned:
                    notPlanned++;
                    break;

                case LeanKanbanJobStatus::Planned:
                    planned++;
                    break;

                case LeanKanbanJobStatus::Prepared:
                    prepared++;
                    break;

                case LeanKanbanJobStatus::InProgress:
                    inProgress++;
                    break;

                case LeanKanbanJobStatus::Completed:
                    completed++;
                    break;
            }

            active++;
        }

        this.KanbansActive          = active;
        this.KanbansNotPlanned      = notPlanned;
        this.KanbansPlanned         = planned;
        this.KanbansPrepared        = prepared;
        this.KanbansInProgress      = inProgress;
        this.KanbansCompleted       = completed;

        this.KanbansToCreate        = this.kanbansNeededToCreate();
        this.KanbansToPlan          = this.kanbansNeededToPlanMinimum(_kanbanRule);
        this.KanbansToPrepare       = this.kanbansNeededToPrepare(_kanbanRule);
        this.KanbansToStart         = this.kanbansNeededToStart();
        this.KanbansToComplete      = this.kanbansNeededToComplete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKanbanJobsQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contructs a query which returns jobs related to provided kanban rule.
    /// </summary>
    /// <param name = "_kanbanOverviewType">Current kanban overview type.</param>
    /// <param name = "_kanbanBoardTmpFilterCriteria">Additional filters.</param>
    /// <param name = "_kanbanRule">Kanban rule for which to find jobs.</param>
    /// <returns>QueryRun object which returns kabnan jobs.</returns>
    public static QueryRun getKanbanJobsQueryRun(KanbanOverviewType _kanbanOverviewType, KanbanBoardTmpFilterCriteria _kanbanBoardTmpFilterCriteria, KanbanRule _kanbanRule)
    {
        KanbanOverviewJobsQueryBuilderArgs kanbanOverviewJobsQueryBuilderArgs = new KanbanOverviewJobsQueryBuilderArgs();
        kanbanOverviewJobsQueryBuilderArgs.parmLanguageId(CompanyInfo::languageId());
        kanbanOverviewJobsQueryBuilderArgs.parmRulesRecId([_kanbanRule.RecId]);

        switch (_kanbanOverviewType)
        {
            case KanbanOverviewType::Finished:
                kanbanOverviewJobsQueryBuilderArgs.parmQueryArgs([_kanbanBoardTmpFilterCriteria.WorkCell]);
                kanbanOverviewJobsQueryBuilderArgs.parmFilterOnType(false);
                kanbanOverviewJobsQueryBuilderArgs.parmFilterOnExecutable(true);
                kanbanOverviewJobsQueryBuilderArgs.parmKanbanJobType(LeanKanbanJobType::Process);
                break;

            case KanbanOverviewType::Material:
                kanbanOverviewJobsQueryBuilderArgs.parmPlanActivitiesRecId([_kanbanRule.kanbanFlow().lastPlanActivity().RecId]);
                kanbanOverviewJobsQueryBuilderArgs.parmFilterOnType(false);
                break;

            case KanbanOverviewType::Transfer:
                kanbanOverviewJobsQueryBuilderArgs.parmFilterOnType(true);
                kanbanOverviewJobsQueryBuilderArgs.parmKanbanJobType(LeanKanbanJobType::Transfer);
                break;
        }

        KanbanOverviewJobsQueryBuilder kanbanOverviewJobsQueryBuilder = KanbanOverviewJobsQueryBuilder::construct();
        kanbanOverviewJobsQueryBuilder.setArgs(kanbanOverviewJobsQueryBuilderArgs);
        kanbanOverviewJobsQueryBuilder.initialize();

        return kanbanOverviewJobsQueryBuilder.getQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbansNeededToPlanMinimum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates number of kanbans to be planned in order to satisfy minimum alert level specified on kanban rule.
    /// </summary>
    /// <param name = "_kanbanRule">Kanban rule for which to calculate number of kanbans to be planned.</param>
    /// <returns>Number of kanbans to be planned in order to satisfy minimum alert level specified on kanban rule.</returns>
    public KanbanLevel kanbansNeededToPlanMinimum(KanbanRule _kanbanRule)
    {
        return _kanbanRule.KanbanType == LeanKanbanType::Manufacturing ? max(0, this.MinimumAlertLevel - (this.KanbansPlanned + this.kanbansAtLeastPrepared())) : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbansNeededToPlanMaximum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates number of kanbans to be planned in order to satisfy maximum alert level specified on kanban rule.
    /// </summary>
    /// <param name = "_kanbanRule">Kanban rule for which to calculate number of kanbans to be planned.</param>
    /// <returns>Number of kanbans to be planned in order to satisfy maximum alert level specified on kanban rule.</returns>
    public KanbanLevel kanbansNeededToPlanMaximum(KanbanRule _kanbanRule)
    {
        return _kanbanRule.KanbanType == LeanKanbanType::Manufacturing ? max(0, this.MaximumAlertLevel - (this.KanbansPlanned + this.kanbansAtLeastPrepared())) : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbansNeededToCreate</Name>
				<Source><![CDATA[
    private KanbanLevel kanbansNeededToCreate()
    {
        KanbanLevel result;

        if (this.ReplenishmentStrategy == LeanReplenishmentStrategy::Fixed)
        {
            result = this.FixedKanbanLevel - this.KanbansActive;
        }
        else
        {
            result = this.MinimumAlertLevel - this.KanbansActive;
        }

        return max(0, result);
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbansNeededToPrepare</Name>
				<Source><![CDATA[
    private KanbanLevel kanbansNeededToPrepare(KanbanRule _kanbanRule)
    {
        return _kanbanRule.KanbanType == LeanKanbanType::Manufacturing ? max(0, this.MinimumAlertLevel - this.kanbansAtLeastPrepared()) : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbansNeededToStart</Name>
				<Source><![CDATA[
    private KanbanLevel kanbansNeededToStart()
    {
        return max(0, this.MinimumAlertLevel - (this.KanbansInProgress + this.KanbansCompleted));
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbansNeededToComplete</Name>
				<Source><![CDATA[
    private KanbanLevel kanbansNeededToComplete()
    {
        return max(0, this.MinimumAlertLevel - this.KanbansCompleted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbansAtLeastPrepared</Name>
				<Source><![CDATA[
    private KanbanLevel kanbansAtLeastPrepared()
    {
        return this.KanbansPrepared + this.KanbansInProgress + this.KanbansCompleted;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<Label>@SCM:KanbanQuantityOverview</Label>
	<TableGroup>Group</TableGroup>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RuleId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RuleId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RuleId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LeanReplenishmentRuleId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ChartCategory</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<StringSize>50</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReplenishmentStrategy</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>LeanReplenishmentStrategy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>MinimumAlertLevel</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanTriggerLevel</ExtendedDataType>
			<Label>@SYS131975</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>MaximumAlertLevel</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanTriggerLevel</ExtendedDataType>
			<Label>@SYS131977</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FixedKanbanLevel</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanLevel</ExtendedDataType>
			<Label>@SYS131993</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>KanbansActive</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanLevel</ExtendedDataType>
			<Label>@SCM:KanbanQuantityOverviewActiveKanbans</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>KanbansNotPlanned</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanLevel</ExtendedDataType>
			<Label>@SCM:KanbanQuantityOverviewNotPlannedKanbans</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>KanbansPlanned</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanLevel</ExtendedDataType>
			<Label>@SCM:KanbanQuantityOverviewPlannedKanbans</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>KanbansInProgress</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanLevel</ExtendedDataType>
			<Label>@SCM:KanbanQuantityOverviewInProgressKanbans</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>KanbansPrepared</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanLevel</ExtendedDataType>
			<Label>@SCM:KanbanQuantityOverviewPreparedKanbans</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>KanbansCompleted</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanLevel</ExtendedDataType>
			<Label>@SCM:KanbanQuantityOverviewCompletedKanbans</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>KanbansToCreate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanLevel</ExtendedDataType>
			<Label>@SCM:KanbanQuantityOverviewToCreate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>KanbansToPlan</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanLevel</ExtendedDataType>
			<Label>@SCM:KanbanQuantityOverviewToPlan</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>KanbansToPrepare</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanLevel</ExtendedDataType>
			<Label>@SCM:KanbanQuantityOverviewToPrepare</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>KanbansToStart</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanLevel</ExtendedDataType>
			<Label>@SCM:KanbanQuantityOverviewToStart</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>KanbansToComplete</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanLevel</ExtendedDataType>
			<Label>@SCM:KanbanQuantityOverviewToComplete</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TargetInventSiteId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<Label>@SCM:KanbanQuantityOverviewTargetSite</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TargetInventLocationId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<Label>@SCM:KanbanQuantityOverviewTargetWarehouse</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TargetWMSLocationId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
			<Label>@SCM:KanbanQuantityOverviewTargetLocation</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SourceInventSiteId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<Label>@SCM:KanbanQuantityOverviewSourceSite</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SourceInventLocationId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<Label>@SCM:KanbanQuantityOverviewSourceWarehouse</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SourceWMSLocationId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
			<Label>@SCM:KanbanQuantityOverviewSourceLocation</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UrgencyLevel</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanRuleOverviewUrgencyLevel</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RuleIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RuleId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>KanbanRule</Name>
			<RelatedTable>KanbanRule</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RuleId</Name>
					<Field>RuleId</Field>
					<RelatedField>RuleId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>