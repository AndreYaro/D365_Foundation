<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkUserWarehouse</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWorkUserWarehouse extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayWarehouseName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display warehouse name.
    /// </summary>
    /// <returns>
    /// Name of the warehouse that work user belongs to.
    /// </returns>
    display Name displayWarehouseName()
    {
        return InventLocation::find(this.InventLocationId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        WMSLocation     location;

        super();

        location = WMSLocation::find(this.UserId, this.InventLocationId, true);
        if (!location)
        {
            if (WHSUsersCreationMissingLocationProfileSetupErrorFlight::instance().isEnabled() &&
                !WHSParameters::find().UserLocType)
            {
                throw error("@WAX:LocationProfileSetupMissing");
            }

            location.InventLocationId = this.InventLocationId;
            location.wmsLocationId = this.UserId;
            location.LocProfileId = WHSParameters::find().UserLocType;
            location.emptyWMSFieldsForWHSWarehouse();

            if (!location.validateWrite())
            {
                throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WMSLocation)));
            }

            location.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        WHSWorkUserWarehouse    workUserWarehouse;
        boolean                 ret;

        ret = super();

        select count(RecId) from workUserWarehouse
            where workUserWarehouse.UserId == this.UserId;

        if (workUserWarehouse.RecId < 2)
        {
            ret = checkFailed("@WAX2068");
        }
        else if (WHSWorkUser::find(this.UserId).UserDefaultWarehouse == this.InventLocationId)
        {
            ret = checkFailed("@WAX2069");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        InventLocation  inventLocation;
        boolean         ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(WHSWorkUserWarehouse, InventLocationId):
                inventLocation = InventLocation::find(this.InventLocationId);

                if (inventLocation)
                {
                    if (!inventLocation.whsEnabled)
                    {
                        ret = checkFailed("@WAX4825");
                    }
                }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a specific <c>whsWorkUserWarehouse</c> record exists.
    /// </summary>
    /// <param name="_userId">
    /// User id of the record.
    /// </param>
    /// <param name="_inventLocationId">
    /// Warehouse id of the record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(WHSUserId           _userId,
                                InventLocationId    _inventLocationId)
    {
        return (_userId && _inventLocationId) &&
               (select firstonly whsWorkUserWarehouse
                where whsWorkUserWarehouse.UserId        == _userId   &&
                      whsWorkUserWarehouse.InventLocationId == _inventLocationId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSWorkUserWarehouse</c> record with given parameters.
    /// </summary>
    /// <param name="_userId">
    /// User id of the record.
    /// </param>
    /// <param name="_inventLocationId">
    /// Warehouse id of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSWorkUserWarehouse find(WHSUserId           _userId,
                                            InventLocationId    _inventLocationId,
                                            boolean             _forupdate = false)
    {
        WHSWorkUserWarehouse    userWarehouse;

        if (_userId && _inventLocationId)
        {
            userWarehouse.selectForUpdate(_forupdate);

            select firstonly userWarehouse
                where userWarehouse.UserId           == _userId  &&
                      userWarehouse.InventLocationId    == _inventLocationId;
        }

        return userWarehouse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupUsersByWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup RF users by Warehouse.
    /// </summary>
    /// <param name="_ctrl">
    /// The RF User form control.
    /// </param>
    /// <param name="_inventLocationId">
    /// The warehouse to filter by.
    /// </param>
    public static void lookupUsersByWarehouse(FormStringControl _ctrl, InventLocationId _inventLocationId)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    qbdsWorkUser;
        QueryBuildDataSource    qbdsWarehouse;

        sysTableLookup  = SysTableLookup::newParameters(tableNum(WHSWorkUser), _ctrl);
        query           = new Query();
        qbdsWorkUser    = query.addDataSource(tableNum(WHSWorkUser));

        qbdsWarehouse   = qbdsWorkUser.addDataSource(tableNum(WHSWorkUserWarehouse));
        qbdsWarehouse.relations(true);

        sysTableLookup.addLookupfield(fieldNum(WHSWorkUser, UserId));
        qbdsWarehouse.addRange(fieldNum(WHSWorkUserWarehouse, InventLocationId)).value(SysQuery::value(_inventLocationId));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWarehouseIdsByUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get warehouse IDs that the work user has access to.
    /// </summary>
    /// <param name="_userId">
    /// Work user ID used to get the warehouse IDs it has access to.
    /// </param>
    /// <returns>
    /// Pipe-delimited warehouse IDs that the work user has access to.
    /// </returns>
    public static str getWarehouseIdsByUser(WHSUserId _userId)
    {
        #WHSRF

        str elements;
       
        if (_userId)
        {
            WHSWorkUserWarehouse userWarehouse;
           
            while select InventLocationId from userWarehouse
                where userWarehouse.UserId == _userId
            {
                if (elements)
                {
                    elements += #ListSeparator + strFmt('%1', userWarehouse.InventLocationId);
                }
                else
                {
                    elements = strFmt('%1', userWarehouse.InventLocationId);
                }
            }
        }

        return elements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4516</DeveloperDocumentation>
	<FormRef>WHSAllowedWarehouses</FormRef>
	<Label>@WAX1135</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>UserId</TitleField1>
	<TitleField2>InventLocationId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>UserIdInventLocationIdIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>UserIdInventLocationIdIdx</PrimaryIndex>
	<ReplacementKey>UserIdInventLocationIdIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UserId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UserId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WHSUserId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>UserIdInventLocationIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>UserId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<SourceEDT>InventLocationId</SourceEDT>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorkUser</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSWorkUser</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UserId</Name>
					<SourceEDT>WHSUserId</SourceEDT>
					<Field>UserId</Field>
					<RelatedField>UserId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>