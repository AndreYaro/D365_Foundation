<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjItemTransCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjItemTransCost extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ProjItemTrans    projItemTrans;

        if (this.LineAmount != 0.00)
        {
            if (this.validateDelete())
            {
                ttsbegin;
                select forupdate projItemTrans
                    where projItemTrans.InventTransId == this.InventTransId &&
                          projItemTrans.ProjAdjustRefId == this.ProjAdjustRefId;
                if (projItemTrans)
                {
                    projItemTrans.TotalCostAmountCur -= this.LineAmount;
                    projItemTrans.update();
                }
                ttscommit;
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if(this.ProjId == '')
        {
            ProjOpsManagementLogger logger = ProjOpsManagementLogger::createLogger(tablestr(ProjItemTransCost));
            using (var activityContext = logger.projOpsManagementActivity().projItemTransInsertContext())
            {
                logger.logError(strFmt("ProjItemTransCost being inserted with empty project id. Invent trans id: %1, call stack: %2", this.InventTransId, ProjOpsInstrumentationLogger::getCallStack(xSession::xppCallStack())));
            }
        }

        ProjItemTrans    projItemTrans;

        this.setItemLineNum();

        if (this.LineAmount != 0.00)
        {
            if (this.validateWrite())
            {
                ttsbegin;
                select forupdate projItemTrans
                    order by ProjTransId desc
                    where projItemTrans.InventTransId == this.InventTransId &&
                          projItemTrans.ProjAdjustRefId == this.ProjAdjustRefId;
                if (projItemTrans)
                {
                    projItemTrans.TotalCostAmountCur += this.LineAmount;
                    projItemTrans.update();
                }
                ttscommit;
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTable</Name>
				<Source><![CDATA[
    public ProjTable projTable(boolean _update = false)
    {
        return ProjTable::find(this.ProjId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemLineNum</Name>
				<Source><![CDATA[
    void setItemLineNum()
    {
        this.ItemLineNum    = (select maxof(ItemLineNum) from projItemTransCost
                                where projItemTransCost.InventTransId   == this.InventTransId   &&
                                      projItemTransCost.ProjAdjustRefId == this.ProjAdjustRefId).ItemLineNum + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearWIPPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the Work in Progress (WIP) for the specified project and period.
    /// </summary>
    /// <param name="projId">
    ///    The project ID of the project for which to clear the WIP.
    /// </param>
    /// <param name="projPeriodTo">
    ///    The end date of the period to clear.
    /// </param>
    /// <param name="beginningBalance">
    ///    An estimate for transactions of the beginning balance type.
    /// </param>
    public static void clearWIPPeriod(ProjId projId, ProjPeriodTo projPeriodTo, ProjBeginningBalance beginningBalance)
    {
        ProjItemTrans       projItemTrans;
        ProjItemTransCost   projItemTransCost = null;
        ProjTable           projTable;

        update_recordSet projItemTransCost
        setting
            wipPeriod   = dateNull(),
            TransStatus = ProjTransStatus::Posted
        where projItemTransCost.TransStatus == ProjTransStatus::Estimated
           && projItemTransCost.wipPeriod   == projPeriodTo
        exists join projItemTrans
            where projItemTrans.InventTransId   == projItemTransCost.InventTransId
               && projItemTrans.ProjAdjustRefId == projItemTransCost.ProjAdjustRefId
               && ((beginningBalance && projItemTrans.TransactionOrigin == ProjOrigin::BeginningBalance)
                              || (!beginningBalance && projItemTrans.TransactionOrigin != ProjOrigin::BeginningBalance))
        exists join projTable
            where projTable.wipProject == projId
            && projTable.ProjId     == projItemTrans.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearWIPPeriodContractLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the Work in Progress (WIP) for the specified project and period.
    /// </summary>
    /// <param name="projWIPId">
    ///    The project ID of the project for which to clear the WIP.
    /// </param>
    /// <param name="projPeriodTo">
    ///    The end date of the period to clear.
    /// </param>
    /// <param name="beginningBalance">
    ///    An estimate for transactions of the beginning balance type.
    /// </param>
    public static void clearWIPPeriodContractLine(ProjWIPId projWIPId, ProjPeriodTo projPeriodTo, ProjBeginningBalance beginningBalance)
    {
        ProjItemTrans       projItemTrans;
        ProjItemTransCost   projItemTransCost = null;
        ProjRevRecContractLine projRevRecContractLine;
        boolean contractLineBasedRevRecFeature = ProjContractLineBasedRevenueRecognitionFeatureHelper::isFeatureEnabled();
        boolean isContractLineUsed = ProjWIPTable::find(projWIPId).IsContractLineUsed;

        if(!isContractLineUsed || !contractLineBasedRevRecFeature)
        {
            throw error(strFmt("@SYS22828",funcName()));
        }

        update_recordSet projItemTransCost
        setting
            wipPeriod   = dateNull(),
            TransStatus = ProjTransStatus::Posted
        where projItemTransCost.TransStatus == ProjTransStatus::Estimated
           && projItemTransCost.wipPeriod   == projPeriodTo
        exists join projItemTrans
            where projItemTrans.InventTransId   == projItemTransCost.InventTransId
               && projItemTrans.ProjAdjustRefId == projItemTransCost.ProjAdjustRefId
               && ((beginningBalance && projItemTrans.TransactionOrigin == ProjOrigin::BeginningBalance)
                              || (!beginningBalance && projItemTrans.TransactionOrigin != ProjOrigin::BeginningBalance))
        exists join projRevRecContractLine
                where projRevRecContractLine.ContractLineNum == projItemTrans.PSAContractLineNum
                && projRevRecContractLine.RevenueRecognitionId == projWIPId;

    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(InventTransId _transId, ProjAdjustRefId _projAdjustRefId)
    {
        return _transId &&   (select projItemTransCost
                                where projItemTransCost.InventTransId    == _transId       &&
                                      projItemTransCost.ProjAdjustRefId  == _projAdjustRefId
                             ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ProjItemTransCost find(InventTransId     _inventTransId,
                                         ProjAdjustRefId   _projAdjustRefId,
                                         LineNum           _lineNum,
                                         boolean           _forUpdate = false)
    {
        ProjItemTransCost    projItemTransCost = null;

        projItemTransCost.selectForUpdate(_forUpdate);

        select projItemTransCost
            where projItemTransCost.InventTransId    == _inventTransId   &&
                  projItemTransCost.ProjAdjustRefId  == _projAdjustRefId   &&
                  projItemTransCost.ItemLineNum      == _lineNum;

        return projItemTransCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findForSalesRefRecId</Name>
				<Source><![CDATA[
    public static container findForSalesRefRecId(RefRecId _salesRefRecId)
    {
        ProjItemTrans           projItemTrans;
        ProjItemTransSale       projItemTransSale;
        Query                   query;
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbrFundingSource;
        QueryBuildRange         qbrInventTransId;
        QueryBuildRange         qbrProjAdjustRefId;

        projItemTransSale = ProjItemTransSale::find(_salesRefRecId);
        projItemTrans = ProjItemTrans::find(projItemTransSale.ProjTransId);

        query = new Query();
        qbds = query.addDataSource(tablenum(ProjItemTransCost));

        qbrInventTransId = qbds.addRange(fieldnum(ProjItemTransCost, InventTransId));
        qbrInventTransId.value(queryValue(projItemTrans.InventTransId));

        qbrProjAdjustRefId = qbds.addRange(fieldnum(ProjItemTransCost, ProjAdjustRefId));
        qbrProjAdjustRefId.value(queryValue(projItemTrans.ProjAdjustRefId));

        if (projItemTransSale.FundingSource)
        {
            qbrFundingSource = qbds.addRange(fieldnum(ProjItemTransCost, FundingSource));
            qbrFundingSource.value(queryValue(projItemTransSale.FundingSource));
        }

        return query.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static ProjItemTransCost findRecId(RefRecId _recId, boolean _forUpdate = false)
    {
        ProjItemTransCost   projItemTransCost = null;

        projItemTransCost.selectForUpdate(_forUpdate);

        if (_recId)
        {
            select projItemTransCost where projItemTransCost.RecId == _recId;
        }

        return projItemTransCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWIPTransOpenAfterDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to check if there are any transactions not included in WIP after the given date.
    /// </summary>
    /// <param name = "_projWipId">Rev rec project ID.</param>
    /// <param name = "_date">Transaction date.</param>
    /// <param name = "_infoMsgType">Level of info message.</param>
    /// <returns>true if there are transactions after the given date; otherwise false.</returns>
    public static boolean isWIPTransOpenAfterDate(ProjWipId _projWipId, TransDate _date, ProjMsgLevel _infoMsgType = ProjMsgLevel::None)
    {
        ProjItemTransCost projItemTransCost;
        ProjItemTrans projItemTrans;
        ProjTable projTable;
        boolean ret = false;
        ProjRevRecContractLine  revRecContractLine;
        boolean contractLineBasedRevRecFeature = ProjContractLineBasedRevenueRecognitionFeatureHelper::isFeatureEnabled();
        boolean isContractLineUsed = ProjWIPTable::find(_projWipId).IsContractLineUsed;


        if(isContractLineUsed && contractLineBasedRevRecFeature)
        {
            if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
            {
                PSAContractLineItems contractLine;

                while select projItemTrans
                where projItemTrans.TransDate > _date
            join projItemTransCost // Using join instead of exists join
                where projItemTransCost.InventTransId == projItemTrans.InventTransId
                    && projItemTransCost.ProjAdjustRefId == projItemTrans.ProjAdjustRefId
                    && projItemTransCost.wipPeriod == dateNull()
                    && projItemTransCost.TransStatus == ProjTransStatus::Posted
            exists join contractLine
                where contractLine.ContractLineNum == projItemTrans.PSAContractLineNum
                    && contractLine.IncludeItemTrans == NoYes::Yes
                    && contractLine.BillingMethod == ProjContractBillingMethod::FixedPrice
            exists join revRecContractLine
                    where revRecContractLine.RevenueRecognitionId == _projWipId
                    && revRecContractLine.ContractLineNum == projItemTrans.PSAContractLineNum
                {
                    ProjItemTransCost::addWIPOpenAfterDateTransMessage(projItemTrans, projItemTransCost, _infoMsgType);
                    ret = true;
                }
            }
            else
            {
                while select projItemTrans
            where projItemTrans.TransDate > _date
            join projItemTransCost // Using join instead of exists join
                where projItemTransCost.InventTransId == projItemTrans.InventTransId
                    && projItemTransCost.ProjAdjustRefId == projItemTrans.ProjAdjustRefId
                    && projItemTransCost.wipPeriod == dateNull()
                    && projItemTransCost.TransStatus == ProjTransStatus::Posted
            exists join revRecContractLine
                    where revRecContractLine.RevenueRecognitionId == _projWipId
                    && revRecContractLine.ContractLineNum == projItemTrans.PSAContractLineNum
                {
                    ProjItemTransCost::addWIPOpenAfterDateTransMessage(projItemTrans, projItemTransCost, _infoMsgType);
                    ret = true;
                }
            }
        
        }
        else
        {
            if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
            {
                PSAContractLineItems contractLine;

                while select projItemTrans
                where projItemTrans.TransDate > _date
            join projItemTransCost // Using join instead of exists join
                where projItemTransCost.InventTransId == projItemTrans.InventTransId
                    && projItemTransCost.ProjAdjustRefId == projItemTrans.ProjAdjustRefId
                    && projItemTransCost.wipPeriod == dateNull()
                    && projItemTransCost.TransStatus == ProjTransStatus::Posted
            exists join RecId from projTable
                where projTable.ProjId == projItemTrans.ProjId
                    && projTable.wipProject == _projWipId
            exists join contractLine
                where contractLine.ContractLineNum == projItemTrans.PSAContractLineNum
                    && contractLine.IncludeItemTrans == NoYes::Yes
                    && contractLine.BillingMethod == ProjContractBillingMethod::FixedPrice
                {
                    ProjItemTransCost::addWIPOpenAfterDateTransMessage(projItemTrans, projItemTransCost, _infoMsgType);
                    ret = true;
                }
            }
            else
            {
                while select projItemTrans
            where projItemTrans.TransDate > _date
            join projItemTransCost // Using join instead of exists join
                where projItemTransCost.InventTransId == projItemTrans.InventTransId
                    && projItemTransCost.ProjAdjustRefId == projItemTrans.ProjAdjustRefId
                    && projItemTransCost.wipPeriod == dateNull()
                    && projItemTransCost.TransStatus == ProjTransStatus::Posted
            exists join RecId from projTable
                where projTable.ProjId == projItemTrans.ProjId
                    && projTable.wipProject == _projWipId
                {
                    ProjItemTransCost::addWIPOpenAfterDateTransMessage(projItemTrans, projItemTransCost, _infoMsgType);
                    ret = true;
                }
            }
        
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWIPTransOpenBeforeDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to check if there are any transactions not included in WIP before the given date.
    /// </summary>
    /// <param name = "_projWipId">Rev rec project ID.</param>
    /// <param name = "_date">Transaction date.</param>
    /// <param name = "_infoMsgType">Level of info message.</param>
    /// <returns>true if there are transactions before the given date; otherwise false.</returns>
    public static boolean isWIPTransOpenBeforeDate(ProjWipId _projWipId, TransDate _date, ProjMsgLevel _infoMsgType = ProjMsgLevel::None)
    {
        ProjItemTransCost projItemTransCost;
        ProjItemTrans projItemTrans;
        ProjTable projTable;
        boolean ret = false;
        ProjRevRecContractLine  revRecContractLine;
        boolean contractLineBasedRevRecFeature = ProjContractLineBasedRevenueRecognitionFeatureHelper::isFeatureEnabled();
        boolean isContractLineUsed = ProjWIPTable::find(_projWipId).IsContractLineUsed;

        
        if(isContractLineUsed && contractLineBasedRevRecFeature)
        {
            if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
            {
                PSAContractLineItems contractLine;
                while select projItemTrans
                where projItemTrans.TransDate <= _date
            join projItemTransCost // Using join instead of exists join
                where projItemTransCost.InventTransId == projItemTrans.InventTransId
                    && projItemTransCost.ProjAdjustRefId == projItemTrans.ProjAdjustRefId
                    && projItemTransCost.wipPeriod == dateNull()
                    && projItemTransCost.TransStatus == ProjTransStatus::Posted
            exists join contractLine
                where contractLine.ContractLineNum == projItemTrans.PSAContractLineNum
                    && contractLine.IncludeItemTrans == NoYes::Yes
                    && contractLine.BillingMethod == ProjContractBillingMethod::FixedPrice
            exists join revRecContractLine
                    where revRecContractLine.RevenueRecognitionId == _projWipId
                    && revRecContractLine.ContractLineNum == projItemTrans.PSAContractLineNum
                {
                    ProjItemTransCost::addWIPOpenBeforeDateTransMessage(projItemTrans, projItemTransCost, _infoMsgType);
                    ret = true;
                }
            }
            else
            {
                while select projItemTrans
            where projItemTrans.TransDate <= _date
            join projItemTransCost // Using join instead of exists join
                where projItemTransCost.InventTransId == projItemTrans.InventTransId
                    && projItemTransCost.ProjAdjustRefId == projItemTrans.ProjAdjustRefId
                    && projItemTransCost.wipPeriod == dateNull()
                    && projItemTransCost.TransStatus == ProjTransStatus::Posted
            exists join revRecContractLine
                    where revRecContractLine.RevenueRecognitionId == _projWipId
                    && revRecContractLine.ContractLineNum == projItemTrans.PSAContractLineNum
                {
                    ProjItemTransCost::addWIPOpenBeforeDateTransMessage(projItemTrans, projItemTransCost, _infoMsgType);
                    ret = true;
                }
            }
        }
        else
        {
            if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
            {
                PSAContractLineItems contractLine;
                while select projItemTrans
                where projItemTrans.TransDate <= _date
            join projItemTransCost // Using join instead of exists join
                where projItemTransCost.InventTransId == projItemTrans.InventTransId
                    && projItemTransCost.ProjAdjustRefId == projItemTrans.ProjAdjustRefId
                    && projItemTransCost.wipPeriod == dateNull()
                    && projItemTransCost.TransStatus == ProjTransStatus::Posted
            exists join RecId from projTable
                where projTable.ProjId == projItemTrans.ProjId
                    && projTable.wipProject == _projWipId
            exists join contractLine
                where contractLine.ContractLineNum == projItemTrans.PSAContractLineNum
                    && contractLine.IncludeItemTrans == NoYes::Yes
                    && contractLine.BillingMethod == ProjContractBillingMethod::FixedPrice
                {
                    ProjItemTransCost::addWIPOpenBeforeDateTransMessage(projItemTrans, projItemTransCost, _infoMsgType);
                    ret = true;
                }
            }
            else
            {
                while select projItemTrans
            where projItemTrans.TransDate <= _date
            join projItemTransCost // Using join instead of exists join
                where projItemTransCost.InventTransId == projItemTrans.InventTransId
                    && projItemTransCost.ProjAdjustRefId == projItemTrans.ProjAdjustRefId
                    && projItemTransCost.wipPeriod == dateNull()
                    && projItemTransCost.TransStatus == ProjTransStatus::Posted
            exists join RecId from projTable
                where projTable.ProjId == projItemTrans.ProjId
                    && projTable.wipProject == _projWipId
                {
                    ProjItemTransCost::addWIPOpenBeforeDateTransMessage(projItemTrans, projItemTransCost, _infoMsgType);
                    ret = true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWIPOpenBeforeDateTransMessage</Name>
				<Source><![CDATA[
    private static void addWIPOpenBeforeDateTransMessage(ProjItemTrans _projItemTrans, ProjItemTransCost _projItemTransCost, ProjMsgLevel _infoMsgType)
    {
        switch (_infoMsgType)
        {
            case ProjMsgLevel::Info :
                info(strfmt("@SYS70636", tableid2pname(tablenum(ProjItemTrans)), _projItemTrans.ProjId, _projItemTransCost.Voucher, date2StrUsr(_projItemTrans.TransDate, DateFlags::FormatAll), _projItemTrans.ProjTransId));
                break;

            case ProjMsgLevel::Warning :
                warning(strfmt("@SYS70636", tableid2pname(tablenum(ProjItemTrans)), _projItemTrans.ProjId, _projItemTransCost.Voucher, date2StrUsr(_projItemTrans.TransDate, DateFlags::FormatAll), _projItemTrans.ProjTransId));
                break;

            case ProjMsgLevel::Error :
                error(strfmt("@SYS70636", tableid2pname(tablenum(ProjItemTrans)), _projItemTrans.ProjId, _projItemTransCost.Voucher, date2StrUsr(_projItemTrans.TransDate, DateFlags::FormatAll), _projItemTrans.ProjTransId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWIPOpenAfterDateTransMessage</Name>
				<Source><![CDATA[
    private static void addWIPOpenAfterDateTransMessage(ProjItemTrans _projItemTrans, ProjItemTransCost _projItemTransCost, ProjMsgLevel _infoMsgType)
    {
        switch (_infoMsgType)
        {
            case ProjMsgLevel::Info :
                info(strfmt("@SYS70636", tableid2pname(tablenum(ProjItemTrans)), _projItemTrans.ProjId, _projItemTransCost.Voucher, _projItemTrans.TransDate,_projItemTrans.ProjTransId));
                break;

            case ProjMsgLevel::Warning :
                warning(strfmt("@SYS70636", tableid2pname(tablenum(ProjItemTrans)), _projItemTrans.ProjId, _projItemTransCost.Voucher, _projItemTrans.TransDate,_projItemTrans.ProjTransId));
                break;

            case ProjMsgLevel::Error :
                error(strfmt("@SYS70636", tableid2pname(tablenum(ProjItemTrans)), _projItemTrans.ProjId, _projItemTransCost.Voucher, _projItemTrans.TransDate,_projItemTrans.ProjTransId));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124998</DeveloperDocumentation>
	<FormRef>ProjTransItem</FormRef>
	<Label>@SYS69972</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>InventTransId</TitleField1>
	<TitleField2>ProjId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ProjIdx</ClusteredIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>InventTransIdx</PrimaryIndex>
	<ReplacementKey>InventTransIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WIPPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerStatusCost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerTransdate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FundingSource</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerStatusCost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WIPPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerTransdate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjAdjustRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemLineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS6928</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerCostAmountMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjAdjustRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjInventAdjust</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Ledger</Name>
			<Label>@SYS13356</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerTransdate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Project</Name>
			<Label>@SYS4534</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemLineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerStatusCost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WIPPeriod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerTransdate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FundingSource</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountMST</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CostType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS34980</Label>
			<EnumType>ProjItemTransCostType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FundingSource</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ProjFundingSourceRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ItemLineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ItemType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjItemType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LedgerCostAmountMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LedgerStatusCost</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjLedgerStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LedgerTransdate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS113374</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjAdjustRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjAdjustRefId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjInventAdjust</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjInventAdjust</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjTransStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>WIPPeriod</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjPeriodFromWIP</ExtendedDataType>
			<Label>@SYS74643</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventTransIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjAdjustRefId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemLineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VoucherIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FundingSource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LedgerTransdate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjAdjustRefId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AmountMST</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_ProjItemTransCost</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FundingSource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjFundingSource</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>FundingSource</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FundingSource_ProjItemTransCost</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FundingSource</Name>
					<Field>FundingSource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOrigin</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjItemTransCost</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjItemTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124999</EntityRelationshipRole>
			<RelatedTable>ProjItemTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjAdjustRefId</Name>
					<Field>ProjAdjustRefId</Field>
					<RelatedField>ProjAdjustRefId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjItemTransCost</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>