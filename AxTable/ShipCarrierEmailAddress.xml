<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ShipCarrierEmailAddress</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ShipCarrierEmailAddress extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record exists in the <c>ShipCarrierEmailAddress</c> table; if not,
    ///    an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>ShipCarrierEmailAddress</c> table to find.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RefRecId _recId)
    {
        boolean ret = true;

        if (!ShipCarrierEmailAddress::exist(_recId))
        {
            ret = checkFailed(strFmt(ShipCarrierEmailAddress::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>ShipCarrierEmailAddress</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>ShipCarrierEmailAddress</c> record to find.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        boolean found;

        found = (select firstonly RecId from shipCarrierEmailAddress
                    where shipCarrierEmailAddress.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ShipCarrierEmailAddress</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>ShipCarrierEmailAddress</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when it reads the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>ShipCarrierEmailAddress</c> table; otherwise, an empty record.
    /// </returns>
    public static ShipCarrierEmailAddress find(
        RefRecId                _recId,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        ShipCarrierEmailAddress shipCarrierEmailAddress;

        shipCarrierEmailAddress.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            shipCarrierEmailAddress.concurrencyModel(_concurrencyModel);
        }

        select firstonly shipCarrierEmailAddress
            where   shipCarrierEmailAddress.RecId == _recId;

        return shipCarrierEmailAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySalesIdEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ShipCarrierEmailAddress</c> table.
    /// </summary>
    /// <param name="_salesId">
    /// The sales ID of the <c>ShipCarrierEmailAddress</c> record to find.
    /// </param>
    /// <param name="_email">
    /// The e-mail address of the <c>ShipCarrierEmailAddress</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when it reads the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>ShipCarrierEmailAddress</c> table; otherwise, an empty record.
    /// </returns>
    public static ShipCarrierEmailAddress findBySalesIdEmail(
        SalesIdBase             _salesId,
        Email                   _email,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        ShipCarrierEmailAddress shipCarrierEmailAddress;

        shipCarrierEmailAddress.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            shipCarrierEmailAddress.concurrencyModel(_concurrencyModel);
        }

        select firstonly shipCarrierEmailAddress
            where   shipCarrierEmailAddress.Email == _email
                 && shipCarrierEmailAddress.SalesId == _salesId;

        return shipCarrierEmailAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message to use when a specific record in the <c>ShipCarrierEmailAddress</c> table does not exist.
    /// </summary>
    /// <returns>
    /// The message that indicates a record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        //A record with RecId %1 does not exist
        return "@SYS123081";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ShipCarrier</ConfigurationKey>
	<DeveloperDocumentation>@SYS126965</DeveloperDocumentation>
	<Label>@SYS123076</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>SalesId</TitleField1>
	<TitleField2>Email</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>SalesIdx</ClusteredIndex>
	<Modules>Obsolete</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>SalesIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Email</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Email</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Email</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EmailAddress</Name>
			<Label>@SYS125781</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Email</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Email</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Email</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesIdBase</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SalesIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Email</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>