<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TAMDeduction</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TAMDeduction extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amount of the deduction.
    /// </summary>
    /// <param name="_amountCur">
    /// The amount of the deduction.  Used if the <c>LedgerJournalTrans</c> record related
    /// to the current record has not been inserted.
    /// </param>
    /// <returns>
    /// The deduction amount.
    /// </returns>
    public AmountMST calcAmountMST(AmountCur _amountCur)
    {
        LedgerJournalTrans ledgerJournalTrans;

        if (this.LedgerJournalTransRecId)
        {
            select firstonly RecId, CurrencyCode, TransDate, Triangulation, ExchRate, ExchRateSecond from ledgerJournalTrans
                where ledgerJournalTrans.RecId == this.LedgerJournalTransRecId;
            return CurrencyExchangeHelper::mstAmount(_amountCur, ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate, Currency::noYes2UnknownNoYes(ledgerJournalTrans.Triangulation), ledgerJournalTrans.ExchRate, ledgerJournalTrans.ExchRateSecond);
        }
        else
        {
            // If called before the <c>LedgerJournalTrans</c> record is inserted.
            return CurrencyExchangeHelper::mstAmount(_amountCur, this.CurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMerchandisingEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the merchandising event ID of the current record.
    /// </summary>
    /// <returns>
    /// true if the merchandising event ID is valid for the deduction; otherwise, false.
    /// </returns>
    private boolean checkMerchandisingEvent()
    {
        TAMTradePromotion       tamTradePromotion;
        TAMPromotionCust        tamPromotionCust;
        TAMMerchandisingEvent   tamMerchandisingEvent;
        SalesTable              salesTable;
        boolean                 ret;

        ret = true;

        if (this.mcrMerchandisingEventID)
        {
            ret = this.checkPromotionAndMerchandisingEvent();

            tamMerchandisingEvent = TAMMerchandisingEvent::find(this.mcrMerchandisingEventID);

            // Check merchandising event valid for customer
            select firstonly RecId from salesTable
                where salesTable.InvoiceAccount == this.AccountNum
                exists join tamPromotionCust
                    where tamPromotionCust.PromotionID  == tamMerchandisingEvent.PromotionID
                        && tamPromotionCust.CustAccount == salesTable.CustAccount
                exists join tamTradePromotion
                    where tamTradePromotion.PromotionID == tamPromotionCust.PromotionID;
            if (! salesTable.RecId)
            {
                ret = checkFailed(strFmt(
                    "@MCR27771",
                    this.mcrMerchandisingEventID,
                    tamMerchandisingEvent.PromotionID,
                    tamMerchandisingEvent.PromotionCust,
                    this.AccountNum)) && ret;
            }

            // Check merchandising event not an off-invoice
            if (tamMerchandisingEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::OffInvoice)
            {
                ret = checkFailed(strFmt("@MCR27780", tamMerchandisingEvent.MerchandisingEventID)) && ret;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPromotion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the promotion ID of the current record.
    /// </summary>
    /// <returns>
    /// true if the promotion ID is valid for the deduction; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The promotion needs to be validated in the following ways:
    ///     <list type="bullet">
    ///         <item>
    ///             <description>In relation to the current record's the merchandising event ID.</description>
    ///         </item>
    ///         <item>
    ///             <description>In relation to the current record's the rebate ID.</description>
    ///         </item>
    ///         <item>
    ///             <description>
    ///                 In relation to the customer.  There must be at least one sales order with
    ///                 an invoice account equal to the deduction account and a customer account
    ///                 equal to the promotion's customer.
    ///             </description>
    ///         </item>
    ///     </list>
    /// </remarks>
    private boolean checkPromotion()
    {
        TAMTradePromotion   tamTradePromotion;
        TAMPromotionCust    tamPromotionCust;
        SalesTable          salesTable;
        boolean             ret;

        ret = true;

        if (this.tamPromotionID)
        {
            ret = this.checkPromotionAndMerchandisingEvent();

            // Check promotion valid for customer
            select firstonly RecId from salesTable
                where salesTable.InvoiceAccount == this.AccountNum
                exists join tamPromotionCust
                where salesTable.CustAccount == tamPromotionCust.CustAccount
                exists join tamTradePromotion
                where tamTradePromotion.PromotionID == this.tamPromotionID
                    && tamTradePromotion.PromotionID == tamPromotionCust.PromotionID;
            if (! salesTable.RecId)
            {
                ret = checkFailed(strFmt("@MCR27772",
                    this.tamPromotionID,
                    this.AccountNum)) && ret;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPromotionAndMerchandisingEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the combination of the current record's promotion ID and merchandising
    /// event ID.
    /// </summary>
    /// <returns>
    /// true if the combination of promotion ID and merchandising event ID is valid; otherwise, false.
    /// </returns>
    private boolean checkPromotionAndMerchandisingEvent()
    {
        TAMMerchandisingEvent  tamMerchandisingEvent;
        boolean                 ret = true;

        if (this.tamPromotionID
            && this.mcrMerchandisingEventID)
        {
            select MerchandisingEventID, RecId from tamMerchandisingEvent
                where tamMerchandisingEvent.MerchandisingEventID == this.mcrMerchandisingEventID
                   && tamMerchandisingEvent.PromotionID          == this.tamPromotionID;
            if (! tamMerchandisingEvent.RecId)
            {
                ret = checkFailed(strFmt("@MCR27750",
                    this.mcrMerchandisingEventID,
                    this.tamPromotionID));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTransParent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current record from the passed
    /// <c>LedgerJournalTrans</c> record.
    /// </summary>
    /// <param name="_ledgerJournalTransParent">
    /// The <c>LedgerJournalTrans</c> record used to initialize the current
    /// record.
    /// </param>
    /// <remarks>
    /// Sets account number, journal ID, and currency code.
    /// </remarks>
    void initFromLedgerJournalTransParent(LedgerJournalTrans _ledgerJournalTransParent)
    {
        this.LedgerJournalTransParentRecId  = _ledgerJournalTransParent.RecId;
        this.AccountNum = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_ledgerJournalTransParent.LedgerDimension);
        this.JournalID                      = _ledgerJournalTransParent.JournalNum;
        this.CurrencyCode                   = _ledgerJournalTransParent.mcrCurrencyCode();
        this.HcmWorkerId                    = HcmWorker::userId2Worker(curUserId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpDeductionParmMassUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current record from the passed
    /// temporary table.
    /// </summary>
    /// <param name="_tmpTAMDeductionParmMassUpdate">
    /// A temporary table used to initialize the current record.
    /// </param>
    void initFromTmpDeductionParmMassUpdate(
        TmpTAMDeductionParmMassUpdate _tmpTAMDeductionParmMassUpdate)
    {
        this.HcmWorkerId             = _tmpTAMDeductionParmMassUpdate.HcmWorkerId;
        this.tamPromotionID          = _tmpTAMDeductionParmMassUpdate.tamPromotionID;
        this.SalesId                 = _tmpTAMDeductionParmMassUpdate.SalesId;
        this.CustInvoiceId           = _tmpTAMDeductionParmMassUpdate.CustInvoiceId;
        this.Notes                   = _tmpTAMDeductionParmMassUpdate.Notes;
        this.tamDeductionType        = _tmpTAMDeductionParmMassUpdate.tamDeductionType;
        this.mcrMerchandisingEventID = _tmpTAMDeductionParmMassUpdate.mcrMerchandisingEventId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in <c>TAMDeduction</c> table.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Throws error if the deduction's related <c>LedgerJournalTrans</c> record
    /// can not be inserted.
    /// </exception>
    /// <exception cref="Exception::UpdateConflictNotRecovered">
    /// Standard update conflict error.
    /// </exception>
    /// <exception cref="Exception::UpdateConflict">
    /// Standard update conflict error.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Throws error if insert failed for reason other than update conflicts.
    /// </exception>
    public void insert()
    {
        #OCCRetryCount
        LedgerJournalTrans ledgerJournalTrans;

        try
        {
            if (this.tamDeductionStatus == TAMDeductionStatus::Created)
            {
                // Initialize and validate journal line for deduction
                ledgerJournalTrans.initFromTAMDeduction(
                    this,
                    TAMDeductionUpdateType::Create,
                    this.AmountCur);
                if (! ledgerJournalTrans.validateWrite())
                {
                    throw Exception::Error;
                }
            }

            ttsbegin;

            if (this.tamDeductionStatus == TAMDeductionStatus::Created)
            {
                // Insert deduction's journal line and assign reference
                ledgerJournalTrans.insert();
                this.LedgerJournalTransRecId = ledgerJournalTrans.RecId;
            }

            // Calculate remaining amount in MST currency
            this.RemainAmountMST = this.calcAmountMST(this.RemainAmountCur);

            super();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            ttsabort;
            throw error("@SYS93835");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>LedgerJournalTrans</c> record related to the current record.
    /// </summary>
    /// <param name="_forupdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The related <c>LedgerJournalTrans</c> record; otherwise, an empty record.
    /// </returns>
    LedgerJournalTrans ledgerJournalTrans(boolean _forupdate = false)
    {
        LedgerJournalTrans ledgerJournalTrans;

        ledgerJournalTrans = LedgerJournalTrans::findRecId(
            this.LedgerJournalTransRecId,
            _forupdate);

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTransParent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the <c>LedgerJournalTrans</c> record that is the parent of the current record.
    /// </summary>
    /// <returns>
    /// The parent <c>LedgerJournalTrans</c> record; otherwise, an empty record.
    /// </returns>
    LedgerJournalTrans ledgerJournalTransParent()
    {
        LedgerJournalTrans ledgerJournalTransParent;

        ledgerJournalTransParent = LedgerJournalTrans::findRecId(
            this.LedgerJournalTransParentRecId,
            false);

        return ledgerJournalTransParent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs specific actions when a field is modified.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field that has been modified.
    /// </param>
    /// <remarks>
    /// If the amount is modified  and the deduction status is created, then when amount
    /// changes update remaining amount to be the same value.
    ///
    /// If the type is modified and the deduction status is created, then update offset account
    /// to be account defined with type.  Note that type can be changed after deduction
    /// posts but offset account will not change.  Transactions are not backed out of
    /// old offset and added to new offset.
    ///
    /// If the merchandising event id is modifed and there is not a promotion ID specified,
    /// then set promotion to be merchandising event's promoiton.  If there is no rebate
    /// specified and rebate exists for merchandising event, then set the rebate.
    ///
    /// If the rebate is modified and the rebate has a merchandising event, then initialize
    /// the promotion and merchandising event from rebate (if not already specified).
    /// </remarks>
    public void modifiedField(FieldId _fieldId)
    {
        TAMMerchandisingEvent      tamMerchandisingEvent;
        TAMDeductionTypeTable       tamDeductionTypeTable;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(TAMDeduction, AmountCur):
                // When creating deduction keep remaining amount in synch with amount
                if (this.tamDeductionStatus == TAMDeductionStatus::Created)
                {
                    this.RemainAmountCur = this.AmountCur;
                }
                break;
            case fieldNum(TAMDeduction, tamDeductionType):
                // When creating deduction update offset account given new type
                if (this.tamDeductionStatus == TAMDeductionStatus::Created)
                {
                    tamDeductionTypeTable = TAMDeductionTypeTable::find(this.tamDeductionType);
                    this.DeductOffLedgerDimension = tamDeductionTypeTable.DeductOffLedgerDimension;
                }
                break;
            case fieldNum(TAMDeduction, mcrMerchandisingEventID):
                if (this.mcrMerchandisingEventID)
                {
                    if (! this.tamPromotionID)
                    {
                        select PromotionID from tamMerchandisingEvent
                            where tamMerchandisingEvent.MerchandisingEventID == this.mcrMerchandisingEventID;
                        this.tamPromotionID = tamMerchandisingEvent.PromotionID;
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        #OCCRetryCount
        TAMDeduction        tamDeductionOrig;
        LedgerJournalTrans  ledgerJournalTrans;

        try
        {
            ttsbegin;

            // Save values before update
            tamDeductionOrig = this.orig();

            if (this.tamDeductionStatus == TAMDeductionStatus::Created &&
                this.AmountCur != tamDeductionOrig.AmountCur)
            {
                this.RemainAmountCur = this.AmountCur;
            }

            // If remain amount changed, then update remain MST amount
            if (this.RemainAmountCur != tamDeductionOrig.RemainAmountCur)
            {
                this.RemainAmountMST = this.calcAmountMST(this.RemainAmountCur);
            }

            super();

            // If amount or offset changed, then need to update deduction's LedgerJournalTrans
            if (this.tamDeductionStatus == TAMDeductionStatus::Created
                && (this.AmountCur                     != tamDeductionOrig.AmountCur
                    || this.DeductOffLedgerDimension   != tamDeductionOrig.DeductOffLedgerDimension))
            {
                ledgerJournalTrans = this.ledgerJournalTrans(true);
                ledgerJournalTrans.amountCur2DebCred(- this.AmountCur);
                ledgerJournalTrans.OffsetLedgerDimension= this.DeductOffLedgerDimension;
                ledgerJournalTrans.update();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            ttsabort;
            throw error("@SYS93835");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        CustInvoiceJour custInvoiceJour;
        SalesTable      salesTable;
        boolean         ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(TAMDeduction, CustInvoiceId)           :
                    if (this.CustInvoiceId)
                    {
                        select InvoiceAccount from custInvoiceJour
                            where custInvoiceJour.InvoiceId == this.CustInvoiceId;
                        if (custInvoiceJour.InvoiceAccount != this.AccountNum)
                        {
                            ret = checkFailed(strFmt(
                                "@MCR27778",
                                custInvoiceJour.InvoiceAccount,
                                this.CustInvoiceId,
                                this.AccountNum));
                        }
                    }
                    break;
                case fieldNum(TAMDeduction, tamPromotionID)           :
                    ret = this.checkPromotion();
                    break;
                case fieldNum(TAMDeduction, mcrMerchandisingEventID)  :
                    ret = this.checkMerchandisingEvent();
                    break;
                case fieldNum(TAMDeduction, SalesId)                 :
                    if (this.SalesId)
                    {
                        select InvoiceAccount from salesTable
                            where salesTable.SalesId == this.SalesId;
                        if (salesTable.InvoiceAccount != this.AccountNum)
                        {
                            ret = checkFailed(strFmt(
                                "@MCR27776",
                                salesTable.InvoiceAccount,
                                this.SalesId,
                                this.AccountNum));
                        }
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean     ret = true;
        AmountCur   sumAmounts;

        setPrefix(strFmt("@SYS84735", "@SYS32341"));

        // Amount cannot be less than max underpayment amount
        if (this.calcAmountMST(this.AmountCur) <= CustParameters::find().MaxMSTOverUnder)
        {
            ret =  checkFailed("@MCR28743");
        }

        if (this.AmountCur <= 0)
        {
            ret = checkFailed("@MCR27388");
        }

        if (this.RemainAmountCur < 0)
        {
            ret = checkFailed("@MCR27389");
        }

        sumAmounts = this.RemainAmountCur
            + this.MatchAmountCur
            + this.DenyAmountCur
            + this.WriteOffAmountCur
            + this.SplitAmountCur;

        if (this.AmountCur != sumAmounts)
        {
            ret = checkFailed("@MCR27646");
            info(strFmt("@MCR27615", this.AmountCur));
            info(strFmt("@MCR27616", this.RemainAmountCur));
            info(strFmt("@MCR27617", this.MatchAmountCur));
            info(strFmt("@MCR27618", this.DenyAmountCur));
            info(strFmt("@MCR27619", this.WriteOffAmountCur));
            info(strFmt("@MCR27620", this.SplitAmountCur));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TAMDeduction</c> table.
    /// </summary>
    /// <param name="_tamDeductionID">
    /// The deduction ID of the <c>TAMDeduction</c> table record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in <c>TAMDeduction</c>; otherwise, an empty record.
    /// </returns>
    static TAMDeduction find(
        TAMDeductionID _tamDeductionID,
        boolean        _forUpdate = false)
    {
        TAMDeduction tamDeduction;

        if (_tamDeductionID)
        {
            if (_forUpdate)
            {
                tamDeduction.selectForUpdate(_forUpdate);
            }

            select firstonly tamDeduction
                where tamDeduction.tamDeductionID == _tamDeductionID;
        }
        return tamDeduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLedgerJournalTransRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TAMDeduction</c> table.
    /// </summary>
    /// <param name="_ledgerJournalTransRefRecId">
    /// The record ID of the <c>LedgerJournalTransRefRecId</c> table record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <remarks>
    /// The method is to be used in the scenario where uniqueness of <c>LedgerJournalTransRefRecId</c> is guaranteed. For example, when
    /// updating a credit amount on a <c>LedgerJournalTrans</c> line on a payment journal. The associated <c>TAMDeduction</c> entry
    /// should also be updated in this scenario.
    /// </remarks>
    /// <returns>
    /// A record in <c>TAMDeduction</c>; otherwise, an empty record.
    /// </returns>
    static TAMDeduction findByLedgerJournalTransRecId(
        LedgerJournalTransRefRecId  _ledgerJournalTransRefRecId,
        boolean                     _forUpdate = false)
    {
        TAMDeduction tamDeduction;

        if (_ledgerJournalTransRefRecId)
        {
            if (_forUpdate)
            {
                tamDeduction.selectForUpdate(_forUpdate);
            }

            select firstonly tamDeduction
                where tamDeduction.LedgerJournalTransRecId  == _ledgerJournalTransRefRecId;
        }
        return tamDeduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefDeductionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the next number in the deduction
    /// number sequence.
    /// </summary>
    /// <returns>
    /// The next number in the sequence.
    /// </returns>
    public static NumberSequenceReference numRefDeductionId()
    {
        return NumberSeqReference::findReference(extendedTypeNum(TAMDeductionID));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumDeductionAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the sum of all deductions of a parent <c>LedgerJournalTrans</c>.
    /// </summary>
    /// <param name="_ledgerJournalTransParentRecId">
    /// The record ID of the <c>LedgerJournalTrans</c> record that may be a parent
    /// to one or more deductions.
    /// </param>
    /// <returns>
    /// The sum of all deductions for which the <c>LedgerJournalTrans</c> record
    /// is a parent.
    /// </returns>
    static AmountCur sumDeductionAmountMST(RefRecId _ledgerJournalTransParentRecId)
    {
        TAMDeduction        tamDeduction;
        LedgerJournalTrans  ledgerJournalTrans;
        AmountCur           sumDeductionAmount;

        if (_ledgerJournalTransParentRecId)
        {
            while select CurrencyCode, TransDate, Triangulation, ExchRate, ExchRateSecond from ledgerJournalTrans
                join AmountCur, CurrencyCode from tamDeduction
                    where ledgerJournalTrans.RecId                   == tamDeduction.LedgerJournalTransRecId
                       && tamDeduction.LedgerJournalTransParentRecId == _ledgerJournalTransParentRecId
            {
                if (tamDeduction.CurrencyCode == ledgerJournalTrans.CurrencyCode)
                {
                    sumDeductionAmount += tamDeduction.AmountCur;
				}
				else
                {
                    sumDeductionAmount += CurrencyExchangeHelper::mstAmount(tamDeduction.AmountCur, ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate, Currency::noYes2UnknownNoYes(ledgerJournalTrans.Triangulation), ledgerJournalTrans.ExchRate, ledgerJournalTrans.ExchRateSecond);
                }
            }
        }
        return sumDeductionAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TAMPromotionsManagement</ConfigurationKey>
	<DeveloperDocumentation>@MCR26573</DeveloperDocumentation>
	<Label>@MCR26573</Label>
	<SingularLabel>@SYS32341</SingularLabel>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>TAMDeductionID</TitleField1>
	<TitleField2>AccountNum</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>StatusIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>DeductionIDIdx</PrimaryIndex>
	<ReplacementKey>DeductionIDIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>TAMDeductionUpdateHistory</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TAMDeductionUpdateHistory</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TAMDeductionID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TAMDeductionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TAMDeductionStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MatchAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DenyAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WriteOffAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TAMPromotionID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRMerchandisingEventID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Notes</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TAMDeductionID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TAMDeductionStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainAmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TAMDeductionID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AllAmounts</Name>
			<Label>@SYS75670</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainAmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MatchAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DenyAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WriteOffAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SplitAmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Deduction</Name>
			<Label>@SYS32341</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TAMDeductionID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TAMDeductionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TAMDeductionStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeductOffLedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Denial</Name>
			<Label>@MCR27608</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TAMDeductionDenyReason</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DenyAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DenyJournalID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>HcmWorker</Name>
			<Label>@MCR35785</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HcmWorkerId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TAMPromotionID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRMerchandisingEventID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Notes</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Origin</Name>
			<Label>@SYS26398</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TAMDeductionOrigId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RemainingAmount</Name>
			<Label>@SYS73768</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RemainAmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Split</Name>
			<Label>@SYS10133</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SplitAmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalTransParentRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalTransRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Type</Name>
			<Label>@SYS81228</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TAMDeductionType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WriteOff</Name>
			<Label>@SYS99195</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TAMDeductionWriteOffReason</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeductWriteOffLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WriteOffAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WriteOffJournalID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerJournalId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMDeductionAmountCur</ExtendedDataType>
			<Label>@SYS6928</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustInvoiceId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustInvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeductOffLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@MCR27255</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeductWriteOffLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DenyAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMDeductionAmountCur</ExtendedDataType>
			<Label>@MCR27596</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DenyJournalID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerJournalId</ExtendedDataType>
			<Label>@MCR27607</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HcmWorkerId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>HcmApprover</ExtendedDataType>
			<Label>@SYS77709</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerJournalTransParentRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LedgerJournalTransRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerJournalTransRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LedgerJournalTransRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MatchAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMDeductionAmountCur</ExtendedDataType>
			<Label>@MCR27595</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRMerchandisingEventID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRMerchandisingEventID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Notes</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NotesLine</ExtendedDataType>
			<Label>@SYS40182</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMDeductionAmountCur</ExtendedDataType>
			<Label>@SYS73768</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainAmountMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS73768</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SplitAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMDeductionAmountCur</ExtendedDataType>
			<Label>@MCR27614</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TAMDeductionDenyReason</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMDeductionDenyReason</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TAMDeductionID</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMDeductionID</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TAMDeductionOrigId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMDeductionOrigID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TAMDeductionStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TAMDeductionStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TAMDeductionType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMDeductionType</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TAMDeductionWriteOffReason</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMDeductionWriteOffReason</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TAMPromotionID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMPromotionID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>WriteOffAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMDeductionAmountCur</ExtendedDataType>
			<Label>@MCR27597</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WriteOffJournalID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerJournalId</ExtendedDataType>
			<Label>@MCR27635</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustTransRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustTransRefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DeductionIDIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TAMDeductionID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TAMDeductionStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ParentRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerJournalTransParentRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PromotionIDIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TAMPromotionID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimensionAttributeValueCombinationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DeductOffLedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HcmWorkerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>HcmWorkerId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimensionAttributeValueCombinationIdx2</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DeductWriteOffLedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LedgerJournalTransRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerJournalTransRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustTransRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DeductionOrigIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TAMDeductionOrigId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LedgerJournalIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustInvoiceId</Name>
					<SourceEDT>CustInvoiceId</SourceEDT>
					<Field>CustInvoiceId</Field>
					<RelatedField>InvoiceId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DeductionOffDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TAMDeductionOffsetDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeductOffLedgerDimension</Name>
					<Field>DeductOffLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DenyJournalID</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>LedgerJournalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>JournalNumForDenyJournalID</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TAMDeduction</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DenyJournalID</Name>
					<SourceEDT>LedgerJournalId</SourceEDT>
					<Field>DenyJournalID</Field>
					<RelatedField>JournalNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttributeValueCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WriteOffLedgerAccount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeductWriteOffLedgerDimension</Name>
					<Field>DeductWriteOffLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorkerId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TAMDeduction</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HcmWorkerId</Name>
					<Field>HcmWorkerId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>LedgerJournalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>JournalNumForJournalID</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>TAMDeduction</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalID</Name>
					<SourceEDT>LedgerJournalId</SourceEDT>
					<Field>JournalID</Field>
					<RelatedField>JournalNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ForLJTransRecId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TAMDeduction</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerJournalTransRecId</Name>
					<SourceEDT>LedgerJournalTransRefRecId</SourceEDT>
					<Field>LedgerJournalTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTransRecId</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ForLJTransParentRecId</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>TAMDeduction</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerJournalTransParentRecId</Name>
					<SourceEDT>LedgerJournalTransRefRecId</SourceEDT>
					<Field>LedgerJournalTransParentRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<SourceEDT>SalesId</SourceEDT>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TAMDeduction</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TAMDeduction</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TAMDeductionOrigId</Name>
					<SourceEDT>TAMDeductionOrigID</SourceEDT>
					<Field>TAMDeductionOrigId</Field>
					<RelatedField>TAMDeductionID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DeductionIDIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TAMDeductionDenyReasonTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TAMDeductionDenyReasonTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TAMDeductionDenyReason</Name>
					<SourceEDT>TAMDeductionDenyReason</SourceEDT>
					<Field>TAMDeductionDenyReason</Field>
					<RelatedField>TAMDeductionDenyReason</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ReasonIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TAMDeductionTypeTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TAMDeductionTypeTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TAMDeductionType</Name>
					<SourceEDT>TAMDeductionType</SourceEDT>
					<Field>TAMDeductionType</Field>
					<RelatedField>TAMDeductionType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TAMDeductionWriteOffReasonTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TAMDeductionWriteOffReasonTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TAMDeductionWriteOffReason</Name>
					<SourceEDT>TAMDeductionWriteOffReason</SourceEDT>
					<Field>TAMDeductionWriteOffReason</Field>
					<RelatedField>TAMDeductionWriteOffReason</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ReasonIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TAMMerchandisingEvent</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TAMMerchandisingEvent</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCRMerchandisingEventID</Name>
					<SourceEDT>MCRMerchandisingEventID</SourceEDT>
					<Field>MCRMerchandisingEventID</Field>
					<RelatedField>MerchandisingEventID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>MerchID</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TAMTradePromotion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TAMTradePromotion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TAMPromotionID</Name>
					<SourceEDT>TAMPromotionID</SourceEDT>
					<Field>TAMPromotionID</Field>
					<RelatedField>PromotionID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WriteOffJournalID</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>LedgerJournalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>JournalNumForWriteOffJournalID</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TAMDeduction</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WriteOffJournalID</Name>
					<SourceEDT>LedgerJournalId</SourceEDT>
					<Field>WriteOffJournalID</Field>
					<RelatedField>JournalNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CustTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustTransRecId</Name>
					<Field>CustTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>