<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardCust</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CreditCardCust extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayProcessorsName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the processor.
    /// </summary>
    /// <returns>
    /// The processor's human readable identification.
    /// </returns>
    public display CreditCardProcessorsName displayProcessorsName()
    {
        return (select creditCardProcessors where creditCardProcessors.RecId == this.CreditCardProcessors).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmail</Name>
				<Source><![CDATA[
    public Email getEmail()
    {
        #CreditCard
        CreditCardPaymentProperties properties = CreditCardPaymentProperties::fromXmlString(this.CardToken);

        return properties.find(Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.GenericNamespace::get_PaymentCard(), #CreditCardPaymentCardPropertyName_EMail).parmStringValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPhone</Name>
				<Source><![CDATA[
    public Phone getPhone()
    {
        CreditCardPaymentProperties properties = CreditCardPaymentProperties::fromXmlString(this.CardToken);

        return properties.find(Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.GenericNamespace::get_PaymentCard(), Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.PaymentCardProperties::get_Phone()).parmStringValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ok = super();

        if (ok && this.ExpiryDate && !CreditCard::checkExpireDate(this.ExpiryDate))
        {
            ok = checkFailed("@SYS116844");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record exists in the <c>CreditCardCust</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the credit card customer to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist (RecId _recId)
    {
        boolean exist = CreditCardCust::exist(_recId);

        if (!exist)
        {
            exist = checkFailed(strFmt(CreditCardCust::txtNotExist(), _recId));
        }

        return exist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditCardExistForCust</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a credit card record exists in the <c>CreditCardCust</c> table for the specified
    ///    customer account.
    /// </summary>
    /// <param name="_custAccount">
    ///    The customer account of the credit card customer to check for existence.
    /// </param>
    /// <returns>
    ///    true if a credit card exists for the specified customer account; otherwise, false.
    /// </returns>
    static boolean creditCardExistForCust(CustAccount _custAccount)
    {
        return (select creditCardCust where creditCardCust.CustAccount == _custAccount).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>CreditCardCust</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the credit card customer to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        return (select creditCardCust where creditCardCust.RecId == _recId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CreditCardCust</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the credit card customer record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>CreditCardCust</c> table; otherwise, an empty record.
    /// </returns>
    public static CreditCardCust find(RecId _recId, boolean _forUpdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CreditCardCust custCreditCard;

        custCreditCard.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custCreditCard.concurrencyModel(_concurrencyModel);
        }

        if (_recId)
        {
            select custCreditCard where custCreditCard.RecId == _recId;
        }

        return custCreditCard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByUniqueCardId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CreditCardCust</c> table.
    /// </summary>
    /// <param name="_uniqueCardId">
    /// The unique ID of the credit card customer record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>CreditCardCust</c> table; otherwise, an empty record.
    /// </returns>
    public static CreditCardCust findByUniqueCardId(CreditCardUniqueCardId _uniqueCardId, boolean _forUpdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CreditCardCust custCreditCard;

        custCreditCard.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custCreditCard.concurrencyModel(_concurrencyModel);
        }

        if (_uniqueCardId)
        {
            select custCreditCard where custCreditCard.UniqueCardId == _uniqueCardId;
        }

        return custCreditCard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCreditCard</Name>
				<Source><![CDATA[
    static void lookupCreditCard(FormStringControl _ctrl, CustAccount _custAccount, RefRecId _creditCardCust)
    {
        CreditCardCust::lookupCreditCardWithSalesTable(_ctrl, _custAccount, _creditCardCust, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCreditCardWithSalesTable</Name>
				<Source><![CDATA[
    internal static void lookupCreditCardWithSalesTable(FormStringControl _ctrl, CustAccount _custAccount, RefRecId creditCardCustRecId, RefRecId _salesTableRecId)
    {
        Args args = new Args(formStr(CreditCardLookup));
        Object formRun;

        args.caller(_ctrl);
        args.lookupValue(int642str(creditCardCustRecId));

        formRun = classfactory.formRunClass(args);
        formRun.custAccount(_custAccount);
        formRun.salesTable(_salesTableRecId);
        formRun.init();

        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCardTokenInUse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the card token is associated with a sales order that is not invoiced or canceled.
    /// </summary>
    /// <param name = "_recId">The card token record identifier.</param>
    /// <returns>True if the card token is not associated with an active sales order. False, otherwise.</returns>
    internal static boolean isCardTokenInUse(RecId _recId)
    {
        boolean isTokenInUse;

        if (_recId != 0)
        {
            SalesTable salesTableForCardToken;

            select firstonly RecId from salesTableForCardToken
                where salesTableForCardToken.CreditCardCustRefId == _recId
                    && !(salesTableForCardToken.SalesStatus == SalesStatus::Invoiced
                        || salesTableForCardToken.SalesStatus == SalesStatus::Canceled);

            if (salesTableForCardToken.RecId != 0)
            {
                isTokenInUse = true;
            }
            else
            {
                // Check if there is a commerce order payment that is neither in posted, paid or not submitted status.
                McrCustPaymTable mcrCustPaymTableLocal;
                TableId creditCardCustTableId = tableNum(CreditCardCust);

                select firstonly mcrCustPaymTableLocal
                    join RecId, TableId from salesTableForCardToken
                    where mcrCustPaymTableLocal.PaymInfoRecId == _recId
                        && mcrCustPaymTableLocal.PaymInfoTableId == creditCardCustTableId
                        && mcrCustPaymTableLocal.RefRecId == salesTableForCardToken.RecId
                        && mcrCustPaymTableLocal.RefTableId == salesTableForCardToken.TableId
                        && !(mcrCustPaymTableLocal.Status == MCRCustPaymStatus::Posted
                            || mcrCustPaymTableLocal.Status == MCRCustPaymStatus::Paid
                            || (mcrCustPaymTableLocal.Status == MCRCustPaymStatus::NotSubmitted && mcrCustPaymTableLocal.Amount == 0)
                            || (mcrCustPaymTableLocal.Status == MCRCustPaymStatus::Declined && 
                                (salesTableForCardToken.SalesStatus == SalesStatus::Invoiced ||
                                 salesTableForCardToken.SalesStatus == SalesStatus::Canceled)));

                if (mcrCustPaymTableLocal.RecId != 0)
                {
                    isTokenInUse = true;
                }
            }
        }

        return isTokenInUse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scopeCreditCardToken</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the credit card token scope based off the proposed token scope, RetailRestrictCreditCardUsageFeatureExposure
    /// and if the customer is the default customer.
    /// </summary>
    /// <param name = "_recId">The card token record identifier.</param>
    /// <param name = "proposedScope">The proposed credit card token scope.</param>
    internal static void scopeCreditCardToken(RecId _recId, RetailTokenScope proposedScope)
    {
        if (FeatureStateProvider::isFeatureEnabled(RetailRestrictCreditCardUsageFeature::instance()))
        {
            CreditCardCust creditCardCust = CreditCardCust::find(_recId, true);

            if (creditCardCust)
            {
                ttsbegin;
                creditCardCust.TokenScope = proposedScope;
                creditCardCust.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cardTokenStatus</Name>
				<Source><![CDATA[
    internal display str cardTokenStatus()
    {
        return enum2Str(this.TokenScope);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>CreditCard</ConfigurationKey>
	<DeveloperDocumentation>@SYS126888</DeveloperDocumentation>
	<FormRef>CreditCardCust</FormRef>
	<Label>@SYS116743</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>CustAccount</TitleField1>
	<TitleField2>CreditCardTypeName</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<CreatedTransactionId>Yes</CreatedTransactionId>
	<DataSharingType>Single</DataSharingType>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ModifiedTransactionId>Yes</ModifiedTransactionId>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditCardTypeName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Notes</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CardNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CardToken</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditCardProcessors</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditCardTypeName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CardNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpiryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayProcessorsName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Notes</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IdentificationPlusScope</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CardNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TokenScope</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CardNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CreditCardNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CardToken</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CreditCardPaymentCardToken</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CreditCardProcessors</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CreditCardProcessorsId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CreditCardTypeName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CreditCardTypeName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExpiryDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CreditCardExpiryDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PersonName</ExtendedDataType>
			<Label>@SYS116742</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Notes</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CreditCardNotes</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UniqueCardId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CreditCardUniqueCardId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TokenScope</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailTokenScope</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AccountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>CustAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>UniqueCardId</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>UniqueCardId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CreditCardProcessors</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CreditCardProcessors</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CreditCardProcessors</Name>
					<Field>CreditCardProcessors</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124832</EntityRelationshipRole>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CreditCardCust</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS126890</EntityRelationshipRole>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CreditCardCust</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<Field>CustAccount</Field>
					<RelatedField>InvoiceAccount</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>