<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanProdFlowPlanActivityRelation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LeanProdFlowPlanActivityRelation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        public void delete()
    {
        PlanActivityRelationshipRefRecId    planActivityRelationshipRecId;
        LeanProductionFlowRefRecId          productionFlowRecId;

        if (this.validateDelete())
        {
            planActivityRelationshipRecId = this.PlanActivityRelationship;
            productionFlowRecId = this.ProductionFlow;

            super();

            LeanProdFlowPlanActivityRelation::deletePlanActivityRelationship(planActivityRelationshipRecId, productionFlowRecId);
        }
        else
        {
            throw error("@SYS138340");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editConstraint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits a <c>PlanActivityRelationship</c> object and the related records in the database.
    /// </summary>
    /// <param name="_removeConstraint">
    /// The constraint check box value.
    /// </param>
    /// <param name="_constraintValue">
    /// The constraint value.
    /// </param>
    /// <param name="_unitOfMeasure">
    /// The unit of measure in which the constraint value is stated.
    /// </param>
    private void editConstraint(
        boolean                         _removeConstraint,
        ConstraintValue                 _constraintValue,
        UnitOfMeasureRecId              _unitOfMeasure)
    {
        PlanActivityRelationship        currentPlanActivityRelationship;
        PlanActivityRelationship        planActivityRelationship;
        PlanConstraint                  planConstraint;
        PlanConstraintRefRecid          oldPlanConstraintRefRecid;

        currentPlanActivityRelationship = PlanActivityRelationship::find(this.PlanActivityRelationship, true);
        oldPlanConstraintRefRecid =  currentPlanActivityRelationship.Constraint;

        if (_removeConstraint)
        {
            currentPlanActivityRelationship.Constraint = 0;
        }
        else
        {
            planConstraint = PlanConstraint::findOrCreate(ConstraintTypes::Sequence, SequenceTypes::EndStart, ConstraintRoleTypes::Minimum, _constraintValue, _unitOfMeasure);
            currentPlanActivityRelationship.Constraint = planConstraint.RecId;
        }
        currentPlanActivityRelationship.update();

        if (oldPlanConstraintRefRecid)
        {
            select firstonly RecId from planActivityRelationship
                where planActivityRelationship.Constraint == oldPlanConstraintRefRecid;

            if (!planActivityRelationship)
            {
                delete_from planConstraint where planConstraint.RecId == oldPlanConstraintRefRecid;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits a <c>PlanActivityRelationship</c> object and the related records in the database.
    /// </summary>
    /// <param name="_removeConstraint">
    /// The constraint check box value
    /// </param>
    /// <param name="_constraintValue">
    /// The constraint value.
    /// </param>
    /// <param name="_unitOfMeasure">
    /// The unit of measure in which the constraint value is stated.
    /// </param>
    /// <param name="_cycleTimeRatio">
    /// The cycle time ratio for the current relation.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void editRelation(
        boolean                         _removeConstraint,
        ConstraintValue                 _constraintValue,
        UnitOfMeasureRecId              _unitOfMeasure,
        PlanCycleTimeRatio              _cycleTimeRatio)
    {
        ttsbegin;

        this.editConstraint(_removeConstraint, _constraintValue, _unitOfMeasure);

        this.CycleTimeRatio = _cycleTimeRatio;
        this.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateConnectedActivities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the high level activities that are connected by the relation.
    /// </summary>
    /// <param name="_independentActivity">
    /// The instance of the <c>PlanActivity</c> class.
    /// </param>
    /// <param name="_dependentActivity">
    /// The instance of the <c>PlanActivity</c> class.
    /// </param>
    /// <returns>
    /// true if the connected activities have the same settings for their pickup and receive semi-finished
    /// properties as well as for their on hand update of the pick and receive activities; otherwise, false.
    /// </returns>
    private boolean validateConnectedActivities(PlanActivity _independentActivity, PlanActivity _dependentActivity)
    {
        LeanProductionFlowActivity  independentProdFlowActivity             = LeanProductionFlowActivity::findPlanActivity(_independentActivity.RecId);
        LeanProductionFlowActivity  dependentProdFlowActivity               = LeanProductionFlowActivity::findPlanActivity(_dependentActivity.RecId);
        PlanActivity                dependentStorageDimPickActivity;
        InventDim                   independentReceiptInventDim;
        boolean                     independentOnHandReceipt                = NoYes::Yes == independentProdFlowActivity.onHandUpdateReceive();
        boolean                     independentReceiveSemiFinished          = NoYes::Yes == independentProdFlowActivity.ReceiveSemiFinished;
        boolean                     dependentPickupSemiFinished             = NoYes::Yes == dependentProdFlowActivity.PickUpSemiFinished;
        boolean                     independentReceiptLocationIsSupermarket = _independentActivity.receiptLocation().inventoryControl() == LeanInventoryControl::Restricted;
        boolean                     result = true;

        // find pick activity for blank item in same location as receipt
        independentReceiptInventDim     = _independentActivity.receiptLocation().inventDim();
        dependentStorageDimPickActivity =  dependentProdFlowActivity.storageDimPickActivity(independentReceiptInventDim,true);

        // receiving and picking at the same location
        if (dependentStorageDimPickActivity)
        {
            if (!independentReceiptLocationIsSupermarket)
            {
                // location is not a supermarket
                // connection: on hand flags must match
                if (independentOnHandReceipt != dependentStorageDimPickActivity.OnHandUpdate)
                {
                    result = checkFailed(strFmt("@GLS180538",_independentActivity.Name,_dependentActivity.Name));
                }
            }
            else
            {
                // location is a supermarket
                // connection: picking activity cannot update on hand
                if (dependentStorageDimPickActivity.OnHandUpdate)
                {
                    result = checkFailed(strFmt("@GLS180539",_independentActivity.Name));
                }
            }
        }
        else
        {
            // receiving and picking not at the same location
            // connection: receipt does not update on hand or the semi finished flags match
            if (   independentOnHandReceipt
                && independentReceiveSemiFinished != dependentPickupSemiFinished)
            {
                result = checkFailed(strFmt("@GLS180540",_independentActivity.Name,_dependentActivity.Name,independentReceiptInventDim.InventLocationId,independentReceiptInventDim.wmsLocationId));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
        public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret && !KanbanFlow::canDeleteActivityRelationship(this))
        {
            ret = checkFailed(strFmt("@SYS305259", "@SYS80109"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        PlanActivityRelationship    planActivityRelationship;
        PlanActivity                independentActivity;
        PlanActivity                dependentActivity;
        boolean                     ret;

        ret = super();

        if (ret)
        {
            planActivityRelationship    = PlanActivityRelationship::find(this.PlanActivityRelationship);
            independentActivity         = planActivityRelationship.independentActivity();
            dependentActivity           = planActivityRelationship.dependentActivity();

            ret = planActivityRelationship.RecId != 0
                    && independentActivity.RecId != 0
                    && dependentActivity.RecId   != 0;

            if (ret
                && !independentActivity.isAtomic()
                && !dependentActivity.isAtomic())
            {
                ret = this.validateConnectedActivities(independentActivity, dependentActivity);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>PlanActivityRelationship</c> object and the related records in the database.
    /// </summary>
    /// <param name="_plan">
    /// The record identifier of the plan to which the <c>LeanProdFlowPlanActivityRelation</c> will belong.
    /// </param>
    /// <param name="_independent">
    /// The identifier of the independent <c>PlanActivity</c> object.
    /// </param>
    /// <param name="_dependent">
    /// The identifier of the dependent <c>PlanActivity</c> object.
    /// </param>
    /// <param name="_constraintValue">
    /// The constraint value.
    /// </param>
    /// <param name="_unitOfMeasure">
    /// The unit of measure in which the constraint value is stated.
    /// </param>
    /// <param name="_cycleTimeRatio">
    /// The cycle time ratio for the current relation.
    /// </param>
    /// <returns>
    /// A <c>PlanActivityRelationship</c> record if the object and records were created; otherwise, an
    /// error is thrown.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PlanActivityRelationship createRelation(
        PlanRefRecId       _plan,
        PlanActivityId     _independent,
        PlanActivityId     _dependent,
        ConstraintValue    _constraintValue,
        UnitOfMeasureRecId _unitOfMeasure,
        PlanCycleTimeRatio _cycleTimeRatio)
    {
        PlanActivityRelationship            planActivityRelationship;
        LeanProdFlowPlanActivityRelation    leanProdFlowPlanActivityRelation;
        boolean                             result = true;

        if (!_plan)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ttsbegin;

        // create the plan part of it
        planActivityRelationship = PlanActivityRelationship::findOrCreateRelation(
                                                                _independent,
                                                                _dependent,
                                                                _constraintValue,
                                                                _unitOfMeasure);

        result = planActivityRelationship.RecId != 0;

        leanProdFlowPlanActivityRelation.CycleTimeRatio             = _cycleTimeRatio;
        leanProdFlowPlanActivityRelation.PlanActivityRelationship   = planActivityRelationship.RecId;
        leanProdFlowPlanActivityRelation.ProductionFlow             = LeanProductionFlow::findPlan(_plan).RecId;

        if (result && leanProdFlowPlanActivityRelation.validateWrite())
        {
            leanProdFlowPlanActivityRelation.insert();
        }
        else
        {
            result = false;
        }

        if (!result)
        {
            // Operation failed
            throw error("@SYS138340");
        }

        ttscommit;

        return planActivityRelationship;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePlanActivityRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the related <c>PlanActivityRelationship</c> record if not used by any
    /// <c>LeanProdFlowPlanActivityRelation</c> record.
    /// </summary>
    /// <param name="_planActivityRelationshipRecId">
    /// The record ID of the <c>PlanActivityRelationship</c> record to find.
    /// </param>
    /// <param name="_productionFlowRecId">
    /// The record ID of the <c>LeanProductionFlow</c> record to find.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void deletePlanActivityRelationship(PlanActivityRelationshipRefRecId _planActivityRelationshipRecId, LeanProductionFlowRefRecId _productionFlowRecId)
    {
        PlanActivityRelationship            planActivityRelationship;
        LeanProdFlowPlanActivityRelation    leanProdFlowPlanActivityRelation;

        leanProdFlowPlanActivityRelation = LeanProdFlowPlanActivityRelation::findPlanActivityRelationship(_planActivityRelationshipRecId, _productionFlowRecId);

        if (!leanProdFlowPlanActivityRelation.RecId)
        {
            ttsBegin;
            delete_from planActivityRelationship where planActivityRelationship.RecId == _planActivityRelationshipRecId;
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateForNewProductionFlow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a duplicate of all the <c>LeanProdFlowPlanActivityRelation</c> objects from a particular
    ///    <c>LeanProductionFlow</c> record to a particular <c>LeanProductionFlow</c> record.
    /// </summary>
    /// <param name="_oldLeanProductionFlow">
    ///    The record ID of the old <c>LeanProductionFlow</c> record.
    /// </param>
    /// <param name="_newLeanProductionFlow">
    ///    The record ID of the new <c>LeanProductionFlow</c> record.
    /// </param>
    /// <returns>
    ///    A map that contains the relation of the old record IDs to the new record IDs.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static Map duplicateForNewProductionFlow(recId _oldLeanProductionFlow, recId _newLeanProductionFlow)
    {
        LeanProdFlowPlanActivityRelation     leanProdFlowPlanActivityRelation;
        LeanProdFlowPlanActivityRelation     newLeanProdFlowPlanActivityRelation;
        Map                                  changes = new Map(Types::Int64, Types::Int64);

        ttsbegin;

        while select leanProdFlowPlanActivityRelation
            where leanProdFlowPlanActivityRelation.ProductionFlow == _oldLeanProductionFlow
        {
            newLeanProdFlowPlanActivityRelation.data(leanProdFlowPlanActivityRelation);

            newLeanProdFlowPlanActivityRelation.RecId           = 0;
            newLeanProdFlowPlanActivityRelation.ProductionFlow  = _newLeanProductionFlow;

            newLeanProdFlowPlanActivityRelation.insert();

            changes.insert(leanProdFlowPlanActivityRelation.RecId, newLeanProdFlowPlanActivityRelation.RecId);
        }

        ttscommit;

        return changes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>LeanProdFlowPlanActivityRelation</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>LeanProdFlowPlanActivityRelation</c> table to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(recId _recId)
    {
        return _recId &&
               (select firstonly RecId from leanProdFlowPlanActivityRelation
                    where leanProdFlowPlanActivityRelation.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>LeanProdFlowPlanActivityRelation</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>LeanProdFlowPlanActivityRelation</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>LeanProdFlowPlanActivityRelation</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanProdFlowPlanActivityRelation find(recId _recId, boolean _forUpdate = false)
    {
        LeanProdFlowPlanActivityRelation    leanProdFlowPlanActivityRelation;

        if (_recId)
        {
            leanProdFlowPlanActivityRelation.selectForUpdate(_forUpdate);

            select firstonly leanProdFlowPlanActivityRelation
                where leanProdFlowPlanActivityRelation.RecId == _recId;
        }

        return leanProdFlowPlanActivityRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPlanActivityRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>LeanProdFlowPlanActivityRelation</c> table.
    /// </summary>
    /// <param name="_planActivityRelationship">
    /// The record ID of the <c>PlanActivityRelationship</c> record to find.
    /// </param>
    /// <param name="_leanProductionFlow">
    /// The record ID of the <c>LeanProductionFlow</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>LeanProdFlowPlanActivityRelation</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanProdFlowPlanActivityRelation findPlanActivityRelationship(RefRecId _planActivityRelationship, RefRecId _leanProductionFlow, boolean _forUpdate = false)
    {
        LeanProdFlowPlanActivityRelation    leanProdFlowPlanActivityRelation;

        if (_planActivityRelationship != 0 &&
            _leanProductionFlow != 0)
        {
            leanProdFlowPlanActivityRelation.selectForUpdate(_forUpdate);

            select firstonly leanProdFlowPlanActivityRelation
                where leanProdFlowPlanActivityRelation.PlanActivityRelationship == _planActivityRelationship &&
                      leanProdFlowPlanActivityRelation.ProductionFlow == _leanProductionFlow;
        }

        return leanProdFlowPlanActivityRelation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<DeveloperDocumentation>@SYS323990</DeveloperDocumentation>
	<FormRef>PlanActivity</FormRef>
	<Label>@SYS152581</Label>
	<SingularLabel>@SYS152582</SingularLabel>
	<TableGroup>Main</TableGroup>
	<TitleField1>PlanActivityRelationship</TitleField1>
	<TitleField2>ProductionFlow</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>ProductionControl</Modules>
	<ReplacementKey>PlanActivityRelProductionFlowIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlanActivityRelationship</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductionFlow</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlanActivityRelationship</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductionFlow</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CycleTimeRatio</Name>
			<Label>@SYS152627</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CycleTimeRatio</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PlanActivityRelation</Name>
			<Label>@SYS152565</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlanActivityRelationship</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductionFlow</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CycleTimeRatio</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlanCycleTimeRatio</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PlanActivityRelationship</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlanActivityRelationshipRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProductionFlow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeanProductionFlowRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PlanActivityRelProductionFlowIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PlanActivityRelationship</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProductionFlow</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LeanProductionFlowIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProductionFlow</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LeanProductionFlow</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LeanProductionFlow</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProductionFlow</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LeanProidFlowPlanActivityRelation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProductionFlow</Name>
					<Field>ProductionFlow</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PlanActivityRelationship</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PlanActivityRelationship</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ActivityRelation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductionFlowPlanActivityRelation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PlanActivityRelationship</Name>
					<Field>PlanActivityRelationship</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>