<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetParametersDeprRates_DE</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetParametersDeprRates_DE extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkForDEMaxDeprTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether there are depreciation transactions that exist for the specified dates.
    /// </summary>
    /// <param name="_startDate">
    ///    The first date of the period.
    /// </param>
    /// <param name="_endDate">
    ///    The last date of the period.
    /// </param>
    /// <returns>
    ///    true if transactions exist; otherwise, false.
    /// </returns>
    private boolean checkForDEMaxDeprTransactions(date _startDate, date _endDate)
    {
        AssetBook assetBook;
        AssetTrans assetTrans;

        select firstonly assetTrans
                where assetTrans.TransDate >= _startDate
                    && assetTrans.TransDate <= _endDate
                    && (assetTrans.TransType == AssetTransType::Acquisition
                        || assetTrans.TransType == AssetTransType::Depreciation
                        || assetTrans.TransType == AssetTransType::DepreciationAdj
                        || assetTrans.TransType == AssetTransType::ExtraordinaryDepreciation
                        || assetTrans.TransType == AssetTransType::DerogatoryIncrease
                        || assetTrans.TransType == AssetTransType::DerogatoryDecrease)
            exists join assetBook
                where assetBook.BookId == assetTrans.BookId
                    && assetBook.AssetId == assetTrans.AssetId
                    && assetBook.CheckMaxPercentRB;

        return (assetTrans.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDateInIntervals</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks for an interval record, excluding the current one, with the specified date.
    /// </summary>
    /// <param name="_date">
    ///    A date that falls in a valid date range record.
    /// </param>
    /// <returns>
    ///    true if the record exists; otherwise, false.
    /// </returns>
    private boolean existDateInIntervals(validFromDate _date)
    {
        date d1 = dateNull();
        date d2 = maxDate();

        return (_date &&
            (select firstonly validtimestate(d1, d2) AssetParametersDeprRates_DE
                where AssetParametersDeprRates_DE.AssetParameters == this.AssetParameters
                    && AssetParametersDeprRates_DE.ValidFrom <= _date
                    && AssetParametersDeprRates_DE.ValidTo >= _date
                    && AssetParametersDeprRates_DE.RecId != this.RecId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWrongDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the specified date is not the minimum or maximum date.
    /// </summary>
    /// <param name="_checkDate">
    ///    The date to validate.
    /// </param>
    /// <returns>
    ///    true if the date is not the minimum or maximum date; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Per German regulatory requirements, the date to or date for maximum depreciation cannot be an empty
    ///    value.
    /// </remarks>
    private boolean isWrongDate(date _checkDate)
    {
        return (_checkDate == dateNull() || _checkDate == maxDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(AssetParametersDeprRates_DE, ValidFrom):
                if (this.existDateInIntervals(this.ValidFrom))
                {
                    ret = checkFailed(strfmt("@FixedAssets:AssetParametersDeprRatesDeOverlapWarning", fieldId2pname(tableNum(AssetParametersDeprRates_DE), fieldNum(AssetParametersDeprRates_DE, ValidFrom))));
                }
                break;

            case fieldNum(AssetParametersDeprRates_DE, ValidTo):
                if (this.existDateInIntervals(this.ValidTo))
                {
                    ret = checkFailed(strfmt("@FixedAssets:AssetParametersDeprRatesDeOverlapWarning", fieldId2pname(tableNum(AssetParametersDeprRates_DE), fieldNum(AssetParametersDeprRates_DE, ValidTo))));
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (ret)
        {
            if (this.isWrongDate(this.ValidFrom))
            {
                ret = checkFailed("@SYS152377");
            }

            if (ret && this.isWrongDate(this.ValidTo))
            {
                ret = checkFailed("@SYS152378");
            }

            if (AssetParameters::find().CheckMaxPercentRB)
            {
                if (this.MaxPercentRB == 0)
                {
                    ret = checkFailed(strFmt("@SYS26332", fieldId2pname(tableNum(AssetParametersDeprRates_DE), fieldNum(AssetParametersDeprRates_DE, MaxPercentRB))));
                }

                if (this.MaxRelationRBFactor == 0)
                {
                    ret = checkFailed(strFmt("@SYS26332", fieldId2pname(tableNum(AssetParametersDeprRates_DE), fieldNum(AssetParametersDeprRates_DE, MaxRelationRBFactor))));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(validFromDate _validFrom, validToDate _validTo, ParametersKey _ledgerParametersKey = 0)
    {
        boolean ret = true;

        if (!AssetParametersDeprRates_DE::exist(_validFrom, _validTo, _ledgerParametersKey))
        {
            ret = checkFailed(strFmt(AssetParametersDeprRates_DE::txtNotExist(), _validFrom, _validTo));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkGapExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether a gap occurs in the date ranges that are used in the records that exist.
    /// </summary>
    /// <returns>
    /// true if a gap exists; otherwise, false.
    /// </returns>
    public static boolean checkGapExists()
    {
        AssetParametersDeprRates_DE assetParametersDeprRates;
        ValidToDate lastToDate;

        boolean isFirstRecord = true;

        date d1 = dateNull();
        date d2 = maxDate();

        while select validtimestate(d1, d2) assetParametersDeprRates
            order by ValidFrom
        {
            if (isFirstRecord)
            {
                isFirstRecord = false;
            }
            else
            {
                if (lastToDate+1 != assetParametersDeprRates.ValidFrom)
                {
                    return true;
                }
            }

            lastToDate = assetParametersDeprRates.ValidTo;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified record is located in a <c>AssetParametersDeprRates_DE</c> table.
    /// </summary>
    /// <param name="_validFrom">
    /// The start date of the period.
    /// </param>
    /// <param name="_validTo">
    /// The end date of the period.
    /// </param>
    /// <param name="_assetParametersKey">
    /// The foreign key value for the <c>AssetParameters</c> record.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean exist(validFromDate _validFrom, validToDate _validTo, ParametersKey _assetParametersKey = 0)
    {
        date                        minDateLimit = dateNull();
        date                        maxDateLimit = maxDate();
        ParametersKey               assetParametersKey;

        assetParametersKey = _assetParametersKey;

        if (assetParametersKey == 0)
        {
            assetParametersKey = AssetParameters::find().Key;
        }

        return ((select firstonly validtimestate(minDateLimit, maxDateLimit) AssetParametersDeprRates_DE
                where AssetParametersDeprRates_DE.AssetParameters == _assetParametersKey
                    && AssetParametersDeprRates_DE.ValidFrom == _validFrom
                    && AssetParametersDeprRates_DE.ValidTo == _validTo).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>AssetParametersDeprRates_DE</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is being read for an update; optional.
    /// </param>
    /// <param name="_minDate">
    /// The minimum date for which to perform the search.
    /// </param>
    /// <param name="_maxDate">
    /// The maximum date for which to perform the search.
    /// </param>
    /// <returns>
    /// A buffer that contains the <c>AssetParametersDeprRates_DE</c> table.
    /// </returns>
    public static AssetParametersDeprRates_DE find(recId _recId,
                                                    boolean             _forupdate = false,
                                                    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto,
                                                    date                _minDate = dateNull(),
                                                    date                _maxDate = maxDate())
    {
        AssetParametersDeprRates_DE assetParametersDeprRates;

        assetParametersDeprRates.selectForUpdate(_forupdate);

        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            assetParametersDeprRates.concurrencyModel(_concurrencyModel);
        }

        select firstonly validtimestate(_minDate, _maxDate) assetParametersDeprRates
            where assetParametersDeprRates.RecId == _recId;

        return assetParametersDeprRates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds an interval record for the specified date.
    /// </summary>
    /// <param name="_date">
    ///    A date that could fall within a valid date range record.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether the table buffer record that is returned should be available
    ///    for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency setting that should be used with the table buffer record that is returned; optional.
    /// </param>
    /// <param name="_minDate">
    ///    The minimum date for which the select needs to be done.
    /// </param>
    /// <param name="_maxDate">
    ///    The maximum date for which the select needs to be done.
    /// </param>
    /// <returns>
    ///    An <c>AssetParametersDepRates</c>_<c>DE</c> table buffer record if one is found; otherwise, an
    ///    empty table buffer.
    /// </returns>

    public static AssetParametersDeprRates_DE findByDate(TransDate           _date,
                                                         boolean             _forupdate = false,
                                                         ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto,
                                                         date                _minDate = dateNull(),
                                                         date                _maxDate = maxDate())
    {
        AssetParametersDeprRates_DE assetParametersDeprRates;

        assetParametersDeprRates.selectForUpdate(_forupdate);

        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            assetParametersDeprRates.concurrencyModel(_concurrencyModel);
        }

        select firstonly validtimestate(_minDate, _maxDate) assetParametersDeprRates
            where !assetParametersDeprRates.ValidFrom
                || (assetParametersDeprRates.ValidFrom <= _date
                    && assetParametersDeprRates.ValidTo >= _date);

        return assetParametersDeprRates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a label that indicates the record does not exist.
    /// </summary>
    /// <returns>
    ///    A label that indicates the record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS108307";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        if (this.checkForDEMaxDeprTransactions(this.ValidFrom, this.ValidTo))
        {
            ret = checkFailed("@SYS152381");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        this.validateDateRanges();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        this.validateDateRanges();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        this.validateDateRanges();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDateRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether a gap occurs in the date ranges that are used in the records that exist.
    /// </summary>
    private void validateDateRanges()
    {
        if (AssetParametersDeprRates_DE::checkGapExists())
        {
            warning("@FixedAssets:AssetParametersDeprRatesDeGapWarning");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<CountryRegionCodes>DE</CountryRegionCodes>
	<DeveloperDocumentation>@SYS123529</DeveloperDocumentation>
	<FormRef>LedgerParameters</FormRef>
	<Label>@SYS108306</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ValidFrom</TitleField1>
	<TitleField2>ValidTo</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>FixedAssets</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>DateEffcIdx</ReplacementKey>
	<ValidTimeStateFieldType>Date</ValidTimeStateFieldType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxPercentRB</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxRelationRBFactor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetParameters</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetParameters</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AssetParameters</Name>
			<Label>@SYS67373</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetParameters</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DepreciationRates</Name>
			<Label>@SYS108320</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxPercentRB</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxRelationRBFactor</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SYS40</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AssetParameters</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ParametersKey</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaxPercentRB</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetMaxPercentRB_DE</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaxRelationRBFactor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetMaxRelationRB_DE</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidFromDate</ExtendedDataType>
			<Label>@SYS5209</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidToDate</ExtendedDataType>
			<Label>@SYS80662</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DateEffcIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<ValidTimeStateKey>Yes</ValidTimeStateKey>
			<ValidTimeStateMode>Gap</ValidTimeStateMode>
			<Fields>
				<AxTableIndexField>
					<DataField>AssetParameters</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetParametersFK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetParameters</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetParameters</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MaximumDepreciationValues</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetParameters</Name>
					<Field>AssetParameters</Field>
					<RelatedField>Key</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Key</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>