<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AgreementHeaderDefault</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AgreementHeaderDefault extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>agreementHeaderDefaultIntercompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default record of the intercompany agreement header that is related to the default
    /// record of the agreement header.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the <c>AgreementHeaderDefault</c> record for update;
    /// optional.
    /// </param>
    /// <returns>
    /// A table buffer that contains the default record of the intercompany agreement header.
    /// </returns>
    public AgreementHeaderDefault agreementHeaderDefaultIntercompany(boolean _forUpdate = false)
    {
        AgreementHeaderDefault      agreementHeaderDefault;
        AgreementHeader             agreementHeader;
        SalesAgreementHeader        salesAgreementHeader;
        PurchAgreementHeader        purchAgreementHeader;

        select firstonly InstanceRelationType, RecId from agreementHeader
            where agreementHeader.RecId == this.AgreementHeader;

        if (agreementHeader is PurchAgreementHeader)
        {
            purchAgreementHeader = agreementHeader as PurchAgreementHeader;
            salesAgreementHeader = purchAgreementHeader.salesAgreementHeader();
            agreementHeaderDefault = salesAgreementHeader.agreementHeaderDefault(_forUpdate);
        }
        else if (agreementHeader is SalesAgreementHeader)
        {
            salesAgreementHeader = agreementHeader as SalesAgreementHeader;
            purchAgreementHeader = salesAgreementHeader.purchAgreementHeader();
            agreementHeaderDefault = purchAgreementHeader.agreementHeaderDefault(_forUpdate);
        }

        return agreementHeaderDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementHeaderDefaultIntracompany_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the default record of the intracompany agreement header that is related to the default
    ///     record of the agreement header.
    /// </summary>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the <c>AgreementHeaderDefault</c> record for update;
    ///     optional.
    /// </param>
    /// <returns>
    ///     A table buffer that contains the default record of the intracompany agreement header.
    /// </returns>
    public AgreementHeaderDefault agreementHeaderDefaultIntracompany_RU(boolean _forUpdate = false)
    {
        AgreementHeaderDefault      agreementHeaderDefault;
        AgreementHeader             agreementHeader;
        SalesAgreementHeader        salesAgreementHeader;
        PurchAgreementHeader        purchAgreementHeader;

        select firstonly InstanceRelationType, RecId from agreementHeader
            where agreementHeader.RecId == this.AgreementHeader;

        if (agreementHeader is PurchAgreementHeader)
        {
            purchAgreementHeader = agreementHeader as PurchAgreementHeader;
            salesAgreementHeader = purchAgreementHeader.salesAgreementHeader_RU();
            agreementHeaderDefault = salesAgreementHeader.agreementHeaderDefault(_forUpdate);
        }
        else if (agreementHeader is SalesAgreementHeader)
        {
            salesAgreementHeader = agreementHeader as SalesAgreementHeader;
            purchAgreementHeader = salesAgreementHeader.purchAgreementHeader_RU();
            agreementHeaderDefault = purchAgreementHeader.agreementHeaderDefault(_forUpdate);
        }

        return agreementHeaderDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscPercent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the cash discount percent from the cash discount code.
    /// </summary>
    /// <returns>
    ///    The cash discount percent from the cash discount code.
    /// </returns>
    public display Percent cashDiscPercent()
    {
        return CashDisc::find(this.CashDiscountCode).Percent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDefaultValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether any fields in the <c>AgreamentHeaderDefault</c> table have a non default value.
    /// </summary>
    /// <returns>
    /// true if all fields have default values; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The method is used during insert and update to make sure that the <c>AgreamentHeaderDefault</c>
    /// record should be saved.If the record only contains default values it should not be saved. See also
    /// the <see cref="M:AgreementHeaderDefault.insert" /> and <see cref="M:AgreementHeaderDefault.update"
    /// />.
    /// </remarks>
    private boolean checkDefaultValues()
    {
        if (   this.DeliveryName
            || this.DeliveryPostalAddress
            || this.Project
            || this.ContactPerson
            || this.CashDiscountCode
            || this.MiscChargeGroupApplicationModule
            || this.MiscChargeGroup
            || this.DeliveryTerm
            || this.DeliveryMode
            || this.PaymentTerms
            || this.PaymentSchedule
            || this.ExternalReference
           )
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a field in the <c>AgreementHeaderDefault</c> buffer is changed related to an
    /// intercompany.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field in which to investigate for a change.
    /// </param>
    /// <returns>
    /// true if the field is changed related to an intercompany; otherwise, false.
    /// </returns>
    public boolean  fieldChanged(fieldId  _fieldId)
    {
        boolean  ret = false;

        if (!this.RecId)
        {
            ret = true;
        }

        if (this.orig().(_fieldId) != this.(_fieldId))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the values in the <c>AgreementHeaderDefault</c> record by using the <c>Customer</c>
    ///    record.
    /// </summary>
    /// <param name="_custTable">
    ///    A table buffer that contains the <c>Customer</c> record.
    /// </param>
    public void initFromCustTable(CustTable _custTable)
    {
        LogisticsLocationDefault    custDefaultLocations;
        LogisticsLocationEntity     logisticsLocationEntity;
        ShipCarrierAddress          shipCarrierAddress;
        DirPartyTable               partyTable = DirPartyTable::findRec(_custTable.Party);

        this.initFromCustVendTable(_custTable);

        this.CashDiscountCode                  = _custTable.CashDisc;
        this.CashDiscountDataAreaId            = appl.company().dataArea(tableNum(CashDisc));

        this.MiscChargeGroup                   = _custTable.MarkupGroup;

        this.MiscChargeGroupApplicationModule  = MarkupModuleType::Cust;

        this.MiscChargeGroupDataAreaId         = appl.company().dataArea(tableNum(MarkupGroup));

        this.DeliveryMode                      = _custTable.DlvMode;
        this.DeliveryModeDataAreaId            = appl.company().dataArea(tableNum(DlvMode));
        this.DeliveryTerm                      = _custTable.DlvTerm;
        this.DeliveryTermDataAreaId            = appl.company().dataArea(tableNum(DlvTerm));

        this.DeliveryName                       = partyTable.Name;

        custDefaultLocations = LogisticsLocationDefault::construct(_custTable);

        if (custDefaultLocations.defaultExistsByType(LogisticsLocationRoleType::Delivery))
        {
            logisticsLocationEntity = LogisticsLocationEntity::constructFromLocationRecId(
                custDefaultLocations.getDefaultLocationByType(LogisticsLocationRoleType::Delivery).RecId);
        }
        else if (custDefaultLocations.defaultExistsByType(LogisticsLocationRoleType::Invoice))
        {
            logisticsLocationEntity = LogisticsLocationEntity::constructFromLocationRecId(
                custDefaultLocations.getDefaultLocationByType(LogisticsLocationRoleType::Invoice).RecId);
        }
        else if (custDefaultLocations.defaultExistsByType(LogisticsLocationRoleType::Business))
        {
            logisticsLocationEntity = LogisticsLocationEntity::constructFromLocationRecId(
                custDefaultLocations.getDefaultLocationByType(LogisticsLocationRoleType::Business).RecId);
        }

        if (logisticsLocationEntity)
        {
            this.DeliveryPostalAddress = logisticsLocationEntity.getPostalAddress().RecId;
            this.setDeliveryName();

            shipCarrierAddress = ShipCarrierAddress::findByCustomerLocation(_custTable.AccountNum, logisticsLocationEntity.parmLocationRecId());

            if (shipCarrierAddress)
            {
                if (shipCarrierAddress.DlvModeId)
                {
                    this.DeliveryMode = shipCarrierAddress.DlvModeId;
                }

                if (shipCarrierAddress.DlvTermId)
                {
                    this.DeliveryTerm = shipCarrierAddress.DlvTermId;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the values in the <c>AgreementHeaderDefault</c> record by using the <c>Customer</c> or
    ///    <c>Vendor</c> record.
    /// </summary>
    /// <param name="_custVendTable">
    ///    A table buffer that contains the <c>Customer</c> or <c>Vendor</c> record.
    /// </param>
    public void initFromCustVendTable(CustVendTable _custVendTable)
    {
        PaymTerm    paymTerm;
        #ISOCountryRegionCodes

        this.ContactPerson                     = _custVendTable.ContactPersonId;
        this.ContactPersonDataAreaId           = appl.company().dataArea(tableNum(ContactPerson));

        this.PaymentTerms                      = _custVendTable.PaymTermId;
        this.PaymentTermsDataAreaId            = appl.company().dataArea(tableNum(PaymTerm));

        this.PaymentSchedule                   = _custVendTable.PaymSchedId;
        this.PaymentScheduleDataAreaId         = appl.company().dataArea(tableNum(PaymSched));

        if (!this.PaymentSchedule)
        {
            paymTerm = PaymTerm::find(this.PaymentTerms);
            this.PaymentSchedule = paymTerm.PaymSched;
        }

        if (PublicSectorUtils::isFrenchRegulatoryEnabled() && !this.PaymentTerms)
        {
            paymTerm = paymTerm::getDefaultPaymTerm();

            if (paymTerm.RecId)
            {
                this.PaymentTerms = paymTerm.PaymTermId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>AgreementHeaderDefault</c> values from the project record.
    /// </summary>
    /// <param name="_projTable">
    ///    A table buffer that contains the project data.
    /// </param>
    /// <remarks>
    ///    Initializes the <c>Project</c> and <c>ProjectDataAreaId</c> fields of the
    ///    <c>AgreementHeaderDefault</c> table buffer.
    /// </remarks>
    public void initFromProjTable(ProjTable _projTable)
    {
        this.Project = _projTable.ProjId;
        this.ProjectDataAreaId = appl.company().dataArea(tableNum(ProjTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the values in the <c>AgreementHeaderDefault</c> record by using the <c>Vendor</c>
    ///    record.
    /// </summary>
    /// <param name="_vendTable">
    ///    A table buffer that contains the <c>Vendor</c> record.
    /// </param>
    public void initFromVendTable(VendTable _vendTable)
    {
        LogisticsLocation   location;
        CompanyInfo         companyInfo = CompanyInfo::find();

        this.initFromCustVendTable(_vendTable);

        this.CashDiscountCode                  = _vendTable.CashDisc;
        this.CashDiscountDataAreaId            = appl.company().dataArea(tableNum(CashDisc));

        this.MiscChargeGroup                   = _vendTable.MarkupGroup;
        this.MiscChargeGroupApplicationModule  = MarkupModuleType::Vend;
        this.MiscChargeGroupDataAreaId         = appl.company().dataArea(tableNum(MarkupGroup));

        this.DeliveryMode                      = _vendTable.DlvMode;
        this.DeliveryModeDataAreaId            = appl.company().dataArea(tableNum(DlvMode));
        this.DeliveryTerm                      = _vendTable.DlvTerm;
        this.DeliveryTermDataAreaId            = appl.company().dataArea(tableNum(DlvTerm));

        this.DeliveryName                       = companyInfo.Name;

        //Setting the delivery address according to default setup
        location = LogisticsLocationDefault::findSimpleDefault(
                        companyInfo,
                        LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery));

        if (location.Description)
        {
            this.DeliveryName       = location.Description;
        }

        this.DeliveryPostalAddress  = LogisticsPostalAddress::findByLocation(location.RecId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the records into the <c>AgreementHeaderDefault</c> table.
    /// </summary>
    /// <remarks>
    /// If all fields contain default values record is not inserted.For more information, see the <see
    /// cref="T:AgreementHeader" /> and <see cref="T:AgreementHeaderDefault" /> tables.
    /// </remarks>
    void  insert()
    {
        if ( !this.checkDefaultValues() )
        {
            this.doInsert();

            if (this.DeliveryMode)
            {
                this.tmsModifiedDlvMode();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanyLinkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether an intercompany link for the agreement exists.
    /// </summary>
    /// <returns>
    /// true if an intercompany link exists; otherwise, false.
    /// </returns>
    public boolean intercompanyLinkExist()
    {
        // <GEERU>
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return (select firstonly RecId from agreementReference
                where (  agreementReference.SourceAgreement == this.AgreementHeader
                      || agreementReference.DerivedAgreement == this.AgreementHeader)
                   && !agreementReference.IsIntraCompany_RU).RecId != 0 ;
        }
        else
        {
            // </GEERU>
            return (select firstonly RecId from agreementReference where agreementReference.SourceAgreement == this.AgreementHeader
            || agreementReference.DerivedAgreement == this.AgreementHeader).RecId != 0 ;
            // <GEERU>
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanySync</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Synchronizes the <c>AgreementHeaderDefault</c> intercompany records.
    /// </summary>
    public void intercompanySync()
    {
        AgreementHeader  agreementHeader = AgreementHeader::find(this.AgreementHeader);

        if (agreementHeader is PurchAgreementHeader)
        {
            this.intercompanySyncPurchToSales();
        }
        if (agreementHeader is SalesAgreementHeader)
        {
            this.intercompanySyncSalesToPurch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanySyncPurchToSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes the purchase <c>AgreementHeaderDefault</c> intercompany record to the sales
    /// <c>AgreementHeaderDefault</c> intercompany record.
    /// </summary>
    /// <param name="_forceIntercompanySync">
    /// A Boolean value that indicates whether to force the intercompany record synchronization; optional.
    /// </param>
    public void intercompanySyncPurchToSales(boolean _forceIntercompanySync = false)
    {
        InterCompanyTradingValueMap         fromInterCompanyTradingValueMap;
        InterCompanyTradingValueMap         toInterCompanyTradingValueMap;
        InterCompanyEndpointActionPolicy    toEndpointActionPolicy;
        InterCompanyTradingPartner          intercompanyTradingPartnerVendor;
        AgreementHeaderDefault              agreementHeaderDefaultSales;
        CustTable                           custTable;
        VendTable                           vendTable;
        InterCompanyCompanyId               vendTableInterCompanyTradingPartnerCompanyId;
        PurchAgreementHeader                purchAgreementHeader;
        TradeInterCompanyConv               convDlvTerm;
        TradeInterCompanyConv               convDlvMode;
        boolean                             create;

        if (!_forceIntercompanySync)
        {
            if (this.InterCompanySkipUpdate == InterCompanySkipUpdate::InterCompany
             || this.InterCompanySkipUpdate == InterCompanySkipUpdate::Both
             || !this.intercompanyUpdateNow())
            {
                return;
            }
        }
        select firstonly purchAgreementHeader
            where purchAgreementHeader.RecId == this.AgreementHeader;

        vendTable = purchAgreementHeader.vendTable();
        vendTableInterCompanyTradingPartnerCompanyId = vendTable.interCompanyTradingPartnerCompanyID();

        if (!TradeInterCompany::checkDataAreaAccess(vendTableInterCompanyTradingPartnerCompanyId))
        {
            return;
        }

        fromInterCompanyTradingValueMap = vendTable.interCompanyTradingPartner().interCompanyTradingValueMap();

        create = !this.agreementHeaderDefaultIntercompany(false);

        if ((create || this.fieldChanged(fieldNum(AgreementHeaderDefault, DeliveryTerm)))
                && this.DeliveryTerm)
        {
            convDlvTerm = TradeInterCompanyConv::construct();
            convDlvTerm.axDlvTermId(fromInterCompanyTradingValueMap, this.DeliveryTerm);
        }

        if ((create || this.fieldChanged(fieldNum(AgreementHeaderDefault, DeliveryMode)))
                && this.DeliveryMode)
        {
            convDlvMode = TradeInterCompanyConv::construct();
            convDlvMode.axDlvModeId(fromInterCompanyTradingValueMap, this.DeliveryMode);
        }

        changecompany(vendTableInterCompanyTradingPartnerCompanyId)
        {
            setPrefix(strFmt("@SYS93821",TradeInterCompany::curCompanyName()));

            custTable                        = CustTable::find(vendTable.interCompanyTradingPartnerAccount());
            intercompanyTradingPartnerVendor = custTable.interCompanyTradingPartner();
            toInterCompanyTradingValueMap    = intercompanyTradingPartnerVendor.interCompanyTradingValueMap();
            toEndpointActionPolicy           = intercompanyTradingPartnerVendor.interCompanyEndpointActionPolicy();

            if (create)
            {
                agreementHeaderDefaultSales.AgreementHeader = purchAgreementHeader.salesAgreementHeader().RecId;
                agreementHeaderDefaultSales.initFromCustTable(custTable);
            }
            else
            {
                agreementHeaderDefaultSales = this.agreementHeaderDefaultIntercompany(true);
            }

            this.syncField(agreementHeaderDefaultSales,create,fieldNum(AgreementHeaderDefault,DeliveryPostalAddress));
            this.syncField(agreementHeaderDefaultSales,create,fieldNum(AgreementHeaderDefault,ExternalReference));

            if (create || this.fieldChanged(fieldNum(AgreementHeaderDefault, DeliveryTerm)))
            {
                agreementHeaderDefaultSales.DeliveryTerm = this.DeliveryTerm ? convDlvTerm.axDlvTermId(toInterCompanyTradingValueMap) : '';
            }

            if (create || this.fieldChanged(fieldNum(AgreementHeaderDefault, DeliveryMode)))
            {
                agreementHeaderDefaultSales.DeliveryMode = this.DeliveryMode ? convDlvMode.axDlvModeId(toInterCompanyTradingValueMap) : '';
            }

            agreementHeaderDefaultSales.InterCompanySkipUpdate = InterCompanySkipUpdate::InterCompany;

            if (create)
            {
                agreementHeaderDefaultSales.insert();
            }
            else
            {
                agreementHeaderDefaultSales.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanySyncSalesToPurch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes the sales <c>AgreementHeaderDefault</c> intercompany record to the purchase
    /// <c>AgreementHeaderDefault</c> intercompany record.
    /// </summary>
    /// <param name="_forceIntercompanySync">
    /// A Boolean value that indicates whether to force the intercompany record synchronization; optional.
    /// </param>
    public void intercompanySyncSalesToPurch(boolean _forceIntercompanySync = false)
    {
        InterCompanyTradingValueMap         fromInterCompanyTradingValueMap;
        InterCompanyTradingValueMap         toInterCompanyTradingValueMap;
        InterCompanyEndpointActionPolicy    toEndpointActionPolicy;
        InterCompanyTradingPartner          interCompanyTradingPartner;
        AgreementHeaderDefault              agreementHeaderDefaultPurch;
        CustTable                           custTable;
        InterCompanyCompanyId               custTableInterCompanyTradingPartnerCompanyId;
        VendTable                           vendTable;
        SalesAgreementHeader                salesAgreementHeader;
        TradeInterCompanyConv               convDlvTerm;
        TradeInterCompanyConv               convDlvMode;
        boolean                             create;

        if (!_forceIntercompanySync)
        {
            if (this.InterCompanySkipUpdate == InterCompanySkipUpdate::InterCompany
             || this.InterCompanySkipUpdate == InterCompanySkipUpdate::Both
             || !this.intercompanyUpdateNow())
            {
                return;
            }
        }
        select firstonly salesAgreementHeader
            where salesAgreementHeader.RecId == this.AgreementHeader;

        custTable = salesAgreementHeader.custTable();
        custTableInterCompanyTradingPartnerCompanyId = custTable.interCompanyTradingPartnerCompanyID();

        if (!TradeInterCompany::checkDataAreaAccess(custTableInterCompanyTradingPartnerCompanyId))
        {
            return;
        }

        fromInterCompanyTradingValueMap = custTable.interCompanyTradingPartner().interCompanyTradingValueMap();

        create = !this.agreementHeaderDefaultIntercompany(false);

        if ((create || this.fieldChanged(fieldNum(AgreementHeaderDefault, DeliveryTerm)))
            &&  this.DeliveryTerm)
        {
            convDlvTerm = TradeInterCompanyConv::construct();
            convDlvTerm.axDlvTermId(fromInterCompanyTradingValueMap, this.DeliveryTerm);
        }

        if ((create || this.fieldChanged(fieldNum(AgreementHeaderDefault, DeliveryMode)))
              && this.DeliveryMode)
        {
            convDlvMode = TradeInterCompanyConv::construct();
            convDlvMode.axDlvModeId(fromInterCompanyTradingValueMap, this.DeliveryMode);
        }

        changecompany(custTableInterCompanyTradingPartnerCompanyId)
        {
            setPrefix(strFmt("@SYS93821",TradeInterCompany::curCompanyName()));

            vendTable                     = VendTable::find(custTable.interCompanyTradingPartnerAccount());
            interCompanyTradingPartner    = vendTable.interCompanyTradingPartner();
            toInterCompanyTradingValueMap = interCompanyTradingPartner.interCompanyTradingValueMap();
            toEndpointActionPolicy        = interCompanyTradingPartner.interCompanyEndpointActionPolicy();

            if (create)
            {
                agreementHeaderDefaultPurch.AgreementHeader = salesAgreementHeader.purchAgreementHeader().RecId;
                agreementHeaderDefaultPurch.initFromVendTable(vendTable);
            }
            else
            {
                agreementHeaderDefaultPurch = this.agreementHeaderDefaultIntercompany(true);
            }

            this.syncField(agreementHeaderDefaultPurch,create,fieldNum(AgreementHeaderDefault,DeliveryPostalAddress));
            this.syncField(agreementHeaderDefaultPurch,create,fieldNum(AgreementHeaderDefault,ExternalReference));

            if (create || this.fieldChanged(fieldNum(AgreementHeaderDefault, DeliveryTerm)))
            {
                agreementHeaderDefaultPurch.DeliveryTerm = this.DeliveryTerm ? convDlvTerm.axDlvTermId(toInterCompanyTradingValueMap) : '';
            }

            if (create || this.fieldChanged(fieldNum(AgreementHeaderDefault, DeliveryMode)))
            {
                agreementHeaderDefaultPurch.DeliveryMode = this.DeliveryMode ? convDlvMode.axDlvModeId(toInterCompanyTradingValueMap) : '';
            }

            agreementHeaderDefaultPurch.InterCompanySkipUpdate = InterCompanySkipUpdate::InterCompany;

            if (create)
            {
                agreementHeaderDefaultPurch.insert();
            }
            else
            {
                agreementHeaderDefaultPurch.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanyUpdateNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the intercompany agreement will be updated.
    /// </summary>
    /// <returns>
    /// true if the intercompany agreement will be updated; otherwise, false.
    /// </returns>
    public boolean  intercompanyUpdateNow()
    {
        boolean  ret = false;

        if (!this.RecId)
        {
            ret = true;
        }

        if (this.orig().DeliveryPostalAddress != this.DeliveryPostalAddress
        ||  this.orig().DeliveryTerm          != this.DeliveryTerm
        ||  this.orig().DeliveryMode          != this.DeliveryMode
        ||  this.orig().ExternalReference     != this.ExternalReference)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>intracompanyLinkExist_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether an intracompany link for the agreement exists.
    /// </summary>
    /// <returns>
    ///     true if an intracompany link exists; otherwise, false.
    /// </returns>
    public boolean intracompanyLinkExist_RU()
    {
        return (select firstonly RecId from agreementReference
            where (  agreementReference.SourceAgreement == this.AgreementHeader
                    || agreementReference.DerivedAgreement == this.AgreementHeader)
                && agreementReference.IsIntraCompany_RU).RecId != 0 ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>intracompanySync_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Synchronizes the <c>AgreementHeaderDefault</c> intracompany records.
    /// </summary>
    public void intracompanySync_RU()
    {
        AgreementHeader agreementHeader = AgreementHeader::find(this.AgreementHeader);

        if (agreementHeader is PurchAgreementHeader)
        {
            this.intracompanySyncPurchToSales_RU();
        }
        if (agreementHeader is SalesAgreementHeader)
        {
            this.intracompanySyncSalesToPurch_RU();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>intracompanySyncPurchToSales_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Synchronizes the purchase <c>AgreementHeaderDefault</c> intracompany record to the sales
    ///     <c>AgreementHeaderDefault</c> intracompany record.
    /// </summary>
    /// <param name="_forceIntracompanySync">
    ///     A Boolean value that indicates whether to force the intracompany record synchronization; optional.
    /// </param>
    public void intracompanySyncPurchToSales_RU(boolean _forceIntracompanySync = false)
    {
        AgreementHeaderDefault agreementHeaderDefaultSales;
        CustTable              custTable;
        VendTable              vendTable;
        PurchAgreementHeader   purchAgreementHeader;
        boolean                create;

        if (!_forceIntracompanySync)
        {
            if (this.InterCompanySkipUpdate == InterCompanySkipUpdate::Internal
             || !this.intercompanyUpdateNow())
            {
                return;
            }
        }

        select firstonly purchAgreementHeader
            where purchAgreementHeader.RecId == this.AgreementHeader;

        vendTable = purchAgreementHeader.vendTable();
        custTable = CustTable::findByPartyRecId(vendTable.Party);
        create    = !this.agreementHeaderDefaultIntracompany_RU();

        if (create)
        {
            agreementHeaderDefaultSales.AgreementHeader = purchAgreementHeader.salesAgreementHeader_RU().RecId;
            agreementHeaderDefaultSales.initFromCustTable(custTable);
        }
        else
        {
            agreementHeaderDefaultSales = this.agreementHeaderDefaultIntracompany_RU(true);
        }

        this.syncField(agreementHeaderDefaultSales, create, fieldNum(AgreementHeaderDefault, DeliveryPostalAddress));
        this.syncField(agreementHeaderDefaultSales, create, fieldNum(AgreementHeaderDefault, ExternalReference));
        this.syncField(agreementHeaderDefaultSales, create, fieldNum(AgreementHeaderDefault, DeliveryTerm));
        this.syncField(agreementHeaderDefaultSales, create, fieldNum(AgreementHeaderDefault, DeliveryMode));

        agreementHeaderDefaultSales.InterCompanySkipUpdate = InterCompanySkipUpdate::Internal;

        if (create)
        {
            agreementHeaderDefaultSales.insert();
        }
        else
        {
            agreementHeaderDefaultSales.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>intracompanySyncSalesToPurch_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Synchronizes the sales <c>AgreementHeaderDefault</c> intracompany record to the purchase
    ///     <c>AgreementHeaderDefault</c> intracompany record.
    /// </summary>
    /// <param name="_forceIntracompanySync">
    ///     A Boolean value that indicates whether to force the intracompany record synchronization; optional.
    /// </param>
    public void intracompanySyncSalesToPurch_RU(boolean _forceIntracompanySync = false)
    {
        AgreementHeaderDefault              agreementHeaderDefaultPurch;
        CustTable                           custTable;
        VendTable                           vendTable;
        SalesAgreementHeader                salesAgreementHeader;
        boolean                             create;

        if (!_forceIntracompanySync)
        {
            if (this.InterCompanySkipUpdate == InterCompanySkipUpdate::Internal
             || !this.intercompanyUpdateNow())
            {
                return;
            }
        }

        select firstonly salesAgreementHeader
            where salesAgreementHeader.RecId == this.AgreementHeader;

        custTable = salesAgreementHeader.custTable();
        vendTable = VendTable::findByPartyRecId(custTable.Party);
        create    = !this.agreementHeaderDefaultIntracompany_RU(false);

        if (create)
        {
            agreementHeaderDefaultPurch.AgreementHeader = salesAgreementHeader.purchAgreementHeader_RU().RecId;
            agreementHeaderDefaultPurch.initFromVendTable(vendTable);
        }
        else
        {
            agreementHeaderDefaultPurch = this.agreementHeaderDefaultIntracompany_RU(true);
        }

        this.syncField(agreementHeaderDefaultPurch, create, fieldNum(AgreementHeaderDefault, DeliveryPostalAddress));
        this.syncField(agreementHeaderDefaultPurch, create, fieldNum(AgreementHeaderDefault, ExternalReference));
        this.syncField(agreementHeaderDefaultPurch, create, fieldNum(AgreementHeaderDefault, DeliveryTerm));
        this.syncField(agreementHeaderDefaultPurch, create, fieldNum(AgreementHeaderDefault, DeliveryMode));

        agreementHeaderDefaultPurch.InterCompanySkipUpdate = InterCompanySkipUpdate::Internal;

        if (create)
        {
            agreementHeaderDefaultPurch.insert();
        }
        else
        {
            agreementHeaderDefaultPurch.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event that is caused when a field is modified for an <c>AgreementHeaderDefault</c>
    /// record.
    /// </summary>
    /// <param name="_fieldId">
    /// A modified field ID.
    /// </param>
    public void modifiedField(fieldId _fieldId)
    {
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(AgreementHeaderDefault, Project):
                this.initFromProjTable(ProjTable::find(this.Project));
                break;

            case fieldNum(AgreementHeaderDefault, DeliveryPostalAddress):
                if (AgreementHeaderDefaultCopyShippingInformationFlight::instance().isEnabled())
                {
                    LogisticsLocationSelectForm_Agreement::construct(this).copyAddressToCaller(this.getDeliveryEntityRecord(), this.DeliveryPostalAddress);
                }
                else
                {
                    this.setDeliveryName();
                }
                break;
            // <GEERU>
            case fieldnum(AgreementHeaderDefault, PaymentTerms) :
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
                    || AgreementHeaderDefaultTermsOfPaymentUpdatePaymentScheduleFlight::instance().isEnabled())
                {
                    this.PaymentSchedule = PaymTerm::find(this.PaymentTerms).PaymSched;
                }
                break;
            // </GEERU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the delivery name field based on the specified logistic location.
    /// </summary>
    /// <param name="_skipDeliveryRoleCheck">
    ///     A flag indicating whether to skip the check for determining the delivery role; optional.
    /// </param>
    public void setDeliveryName(boolean _skipDeliveryRoleCheck = false)
    {
        this.TradePostalAddress::setDeliveryName(_skipDeliveryRoleCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryEntityRecord</Name>
				<Source><![CDATA[
    public Common getDeliveryEntityRecord()
    {
        return this.TradePostalAddress::getDeliveryEntityRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes the field value from an <c>AgreementHeaderDefault</c> record to another
    /// <c>AgreementHeaderDefault</c> record.
    /// </summary>
    /// <param name="_toAgreementHeaderDefault">
    /// The <c>AgreementHeaderDefault</c> record for which to synchronize the field value.
    /// </param>
    /// <param name="_create">
    /// Indicates whether the synchronization is performed in a create scenario.
    /// </param>
    /// <param name="_fieldId">
    /// The field ID of the field for which to synchronize the value.
    /// </param>
    /// <remarks>
    /// This method is used in intercompany scenarios.
    /// </remarks>
    public void syncField(AgreementHeaderDefault _toAgreementHeaderDefault, boolean _create, fieldId _fieldId)
    {
        if (_create || this.fieldChanged(_fieldId))
        {
            _toAgreementHeaderDefault.(_fieldId) = this.(_fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsModifiedDlvMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the new carrier information on the custom Agreement header.
    /// </summary>
    /// <remarks>
    /// This method assumes that the agreement header has already been created.
    /// If it has not been created, then the difference between a purchase or
    /// sales agreement header cannot be distinguished.
    /// </remarks>
    private void tmsModifiedDlvMode()
    {
        SalesAgreementHeader    salesAgreementHeader;
        AgreementHeader         agreementHeader;
        TMSSalesAgreementHeader tmsSalesAgreementHeader;

        agreementHeader = AgreementHeader::find(this.AgreementHeader);
        salesAgreementHeader = SalesAgreementHeader::find(agreementHeader.RecId);

        ttsbegin;

        if (salesAgreementHeader.RecId != 0)
        {
            tmsSalesAgreementHeader = TMSSalesAgreementHeader::find(salesAgreementHeader.RecId, true);

            if (tmsSalesAgreementHeader.RecId == 0)
            {
                tmsSalesAgreementHeader.initFromSalesAgreement(salesAgreementHeader.RecId);
            }

            tmsSalesAgreementHeader.setCarrierFieldsFromDlvMode(this.DeliveryMode);
            tmsSalesAgreementHeader.write();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the record in the <c>AgreementHeaderDefault</c> table.
    /// </summary>
    /// <remarks>
    /// The <c>AgreementHeaderDefault</c> record should be saved only when a field has a non default
    /// value.It means that the record can be actually deleted or inserted during update.For more
    /// information, see <see cref="T:AgreementHeaderDefault" />.
    /// </remarks>
    public void update()
    {
        if (this.needCheckCLMIntegrationFields())
        {
            FieldId modifiedField = CLMIntegrationPurchAgreementDataProvider::getCLMIntegrationAgreementHeaderDefaultModifiedField(this);

            if (modifiedField)
            {
                throw error(strFmt("@CLMIntegration:ErrorWhenCLMIntegrationFieldModifiedOnAgreementHeaderDefault", fieldId2Name(tableNum(AgreementHeaderDefault), modifiedField)));
            }
        }

        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>

        if (this.DeliveryMode != this.orig().DeliveryMode)
        {
            this.tmsModifiedDlvMode();
        }

        if (!this.checkDefaultValues())
        {
            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                if (this.InterCompanySkipUpdate != InterCompanySkipUpdate::Internal
                 && this.intracompanyLinkExist_RU()
                 && this.intercompanyUpdateNow())
                {
                    ttsbegin;
                    this.intracompanySync_RU();
                    ttscommit;
                }
            }
            // </GEERU>

            if (this.InterCompanySkipUpdate != InterCompanySkipUpdate::InterCompany
             && this.InterCompanySkipUpdate != InterCompanySkipUpdate::Both
             && this.intercompanyLinkExist()
             && this.intercompanyUpdateNow())
            {
                ttsbegin;
                this.intercompanySync();
                ttscommit;
            }

            if (this.RecId)
            {
                this.doUpdate();
            }
            else
            {
                this.doInsert();
            }
        }
        else    //all values are default - delete the record
        {
            if (this.RecId)
            {
                this.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>AgreementHeaderDefault</c> table by using the ID of the the <c>AgreementHeader</c> record.
    /// </summary>
    /// <param name="_agreementHeaderRecId">
    ///    The record ID of the <c>AgreementHeader</c> record.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>AgreementHeaderDefault</c> table; otherwise, an empty record.
    /// </returns>
    public static AgreementHeaderDefault findAgreementHeader(AgreementHeaderRecId _agreementHeaderRecId,
                                                             boolean              _forUpdate = false)
    {
        AgreementHeaderDefault agreementHeaderDefault;

        if (_agreementHeaderRecId)
        {
            if (_forUpdate)
            {
                agreementHeaderDefault.selectForUpdate(_forUpdate);
            }

            select firstonly agreementHeaderDefault
                where agreementHeaderDefault.AgreementHeader == _agreementHeaderRecId;
        }

        return agreementHeaderDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAddressInfoForContractorChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the fields that contain address information at the time of a contractor change.
    /// </summary>
    /// <param name="_agreementHeaderRecId">
    /// The record ID of the <c>PurchAgreementheader</c> table.
    /// </param>
    /// <param name="_vendTable">
    /// A buffer of the <c>VendTable</c> table.
    /// </param>
    public static void updateAddressInfoForContractorChange(
        AgreementHeaderRecId    _agreementHeaderRecId,
        VendTable               _vendTable)
    {
        AgreementHeaderDefault  agreementHeaderDefault;
        LogisticsPostalAddress  postalAddress;
        CompanyInfo             companyInfo;

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            companyInfo = CompanyInfo::find();

            agreementHeaderDefault = agreementHeaderDefault::findAgreementHeader(_agreementHeaderRecId, true);

            if (agreementHeaderDefault != null)
            {
                postalAddress = DirParty::findPostalAddressByRole(companyInfo.RecId, LogisticsLocationRoleType::Delivery);

                ttsBegin;
                agreementHeaderDefault.DeliveryName = companyInfo.Name;

                if (!postalAddress)
                {
                    postalAddress = DirParty::primaryPostalAddress(companyInfo.RecId);
                }

                if (postalAddress)
                {
                    agreementHeaderDefault.DeliveryPostalAddress = postalAddress.RecId;
                }

                agreementHeaderDefault.update();
                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateContactInfoForContractorChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the fields that contain contact information at the time of a contractor change.
    /// </summary>
    /// <param name="_agreementHeaderRecId">
    /// The record ID of the <c>PurchAgreementheader</c> table.
    /// </param>
    /// <param name="_custVendTable">
    /// An instance of the <c>CustVendTable</c> map.
    /// </param>
    public static void updateContactInfoForContractorChange(
        AgreementHeaderRecId    _agreementHeaderRecId,
        CustVendTable           _custVendTable)
    {
        AgreementHeaderDefault agreementHeaderDefault;

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            agreementHeaderDefault = agreementHeaderDefault::findAgreementHeader(_agreementHeaderRecId, true);

            if (agreementHeaderDefault != null)
            {
                ttsBegin;
                agreementHeaderDefault.ContactPerson            = _custVendTable.ContactPersonId;
                agreementHeaderDefault.ContactPersonDataAreaId  = appl.company().dataArea(tableNum(ContactPerson));
                agreementHeaderDefault.update();
                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (this.ContactPerson)
        {
            ret = this.agreementHeader().validateContactPerson(this.ContactPerson);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>needCheckCLMIntegrationFields</Name>
				<Source><![CDATA[
    private boolean needCheckCLMIntegrationFields()
    {
        return this.RecId && this.IsIntegration != PurchAgreementIntegrationType::CLM
            && CLMIntegrationFeature::isEnabled()
            && PurchAgreementHeader::find(this.AgreementHeader).CLMIntegrationPurchAgreementOwnership == CLMIntegrationPurchaseAgreementOwnershipType::CLM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the referenced <c>AgreementHeader</c> record.
    /// </summary>
    /// <param name = "_forupdate">A boolean parameter indicating whether the record must be selected for update.</param>
    /// <returns>The referenced <c>AgreementHeader</c> record.</returns>
    public AgreementHeader agreementHeader(boolean _forupdate = false)
    {
        AgreementHeader agreementHeader;

        if (this.AgreementHeader)
        {
            agreementHeader.selectForUpdate(_forupdate);

            select firstonly agreementHeader
                where agreementHeader.RecId == this.AgreementHeader;
        }

        return agreementHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return AgreementHeaderDefaultModifiedTableExtension::newNonRecursive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFromField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assign the default value for fields of table AgreementHeaderDefault.
    /// </summary>
    /// <param name = "_fieldId">The field ID.</param>
    /// <param name = "_userInput">A boolean value indicating whether the change happened as a result of direct user input; optional.</param>
    public void defaultFromField(FieldId _fieldId, boolean _userInput)
    {
        switch (_fieldId)
        {
            case fieldNum(AgreementHeaderDefault, AgreementHeader):
                VendAccount accountNum = PurchAgreementHeader::find(this.AgreementHeader).VendAccount;

                if (accountNum)
                {
                    this.initFromVendTable(VendTable::find(accountNum));
                }

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
            // [field that needs defaulting,
                //  [fields that the default value depends on]]

            [fieldNum(AgreementHeaderDefault, CashDiscountDataAreaId),
                [fieldNum(AgreementHeaderDefault, CashDiscountCode)]],

            [fieldNum(AgreementHeaderDefault, ContactPersonDataAreaId),
                [fieldNum(AgreementHeaderDefault, ContactPerson)]],

            [fieldNum(AgreementHeaderDefault, DeliveryModeDataAreaId),
                [fieldNum(AgreementHeaderDefault, DeliveryMode)]],

            [fieldNum(AgreementHeaderDefault, DeliveryTermDataAreaId),
                [fieldNum(AgreementHeaderDefault, DeliveryTerm)]],

            [fieldNum(AgreementHeaderDefault, MiscChargeGroupDataAreaId),
                [fieldNum(AgreementHeaderDefault, MiscChargeGroup)]],

            [fieldNum(AgreementHeaderDefault, PaymentScheduleDataAreaId),
                [fieldNum(AgreementHeaderDefault, PaymentSchedule)]],

            [fieldNum(AgreementHeaderDefault, PaymentTermsDataAreaId),
                [fieldNum(AgreementHeaderDefault, PaymentTerms)]],

            [fieldNum(AgreementHeaderDefault, ProjectDataAreaid),
                [fieldNum(AgreementHeaderDefault, Project)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(AgreementHeaderDefault, CashDiscountDataAreaId):
                this.CashDiscountDataAreaId = this.CashDiscountCode && !this.CashDiscountDataAreaId ? curExt() : this.CashDiscountDataAreaId;
                break;

            case fieldNum(AgreementHeaderDefault, ContactPersonDataAreaId):
                this.ContactPersonDataAreaId = this.ContactPerson && !this.ContactPersonDataAreaId ? curExt() : this.ContactPersonDataAreaId;
                break;

            case fieldNum(AgreementHeaderDefault, DeliveryModeDataAreaId):
                this.DeliveryModeDataAreaId = this.DeliveryMode && !this.DeliveryModeDataAreaId ? curExt() : this.DeliveryModeDataAreaId;
                break;

            case fieldNum(AgreementHeaderDefault, DeliveryTermDataAreaId):
                this.DeliveryTermDataAreaId = this.DeliveryTerm && !this.DeliveryTermDataAreaId ? curExt() : this.DeliveryTermDataAreaId;
                break;

            case fieldNum(AgreementHeaderDefault, MiscChargeGroupDataAreaId):
                this.MiscChargeGroupDataAreaId = this.MiscChargeGroup && !this.MiscChargeGroupDataAreaId ? curExt() : this.MiscChargeGroupDataAreaId;
                break;

            case fieldNum(AgreementHeaderDefault, PaymentScheduleDataAreaId):
                this.PaymentScheduleDataAreaId = this.PaymentSchedule && !this.PaymentScheduleDataAreaId ? curExt() : this.PaymentScheduleDataAreaId;
                break;

            case fieldNum(AgreementHeaderDefault, PaymentTermsDataAreaId):
                this.PaymentTermsDataAreaId = this.PaymentTerms && !this.PaymentTermsDataAreaId ? curExt() : this.PaymentTermsDataAreaId;
                break;

            case fieldNum(AgreementHeaderDefault, ProjectDataAreaid):
                this.ProjectDataAreaId = this.Project && !this.ProjectDataAreaId ? curExt() : this.ProjectDataAreaId;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(AgreementHeaderDefault, MiscChargeGroup):
                    if (this.MiscChargeGroup)
                    {
                        ret = MarkupGroup::checkExist(this.MiscChargeGroupApplicationModule, this.MiscChargeGroup);
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TradeBlanketOrder</ConfigurationKey>
	<DeveloperDocumentation>@SYS325278</DeveloperDocumentation>
	<Label>@SYS190140</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>AgreementHeader</TitleField1>
	<TitleField2>Project</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>AgreementHeaderIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Project</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AgreementHeader</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgreementHeader</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeliveryAddress</Name>
			<Label>@SYS7924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Parent</Name>
			<Label>@SYS81227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgreementHeader</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Project</Name>
			<Label>@SYS80304</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Project</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReleaseOrderDefaultingPolicy</Name>
			<Label>@SYS190140</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContactPerson</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscountDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MiscChargeGroupApplicationModule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MiscChargeGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MiscChargeGroupDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryTerm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryTermDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryModeDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentTerms</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentTermsDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentSchedule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentScheduleDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalReference</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AgreementHeader</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AgreementHeaderRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CashDiscountCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CashDiscCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CashDiscountDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPerson</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ContactPersonId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPersonDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DlvModeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryModeDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsDeliveryName</ExtendedDataType>
			<GroupPrompt>@SYS7399</GroupPrompt>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryTerm</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DlvTermId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryTermDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExternalReference</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PersonName</ExtendedDataType>
			<Label>@SYS21697</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InterCompanySkipUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>InterCompanySkipUpdate</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MiscChargeGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MiscChargeGroupApplicationModule</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupModule</ExtendedDataType>
			<EnumType>MarkupModuleType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MiscChargeGroupDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentSchedule</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymSchedId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentScheduleDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentTerms</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymTermId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentTermsDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Project</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjectDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsIntegration</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>PurchAgreementIntegrationType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProjTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjectDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Project</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ContactPersonIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ContactPersonDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ContactPerson</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CashDiscIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CashDiscountDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CashDiscountCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>MarkupGroupIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>MiscChargeGroupDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MiscChargeGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MiscChargeGroupApplicationModule</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DlvTermIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DeliveryTermDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DeliveryTerm</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DlvModeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DeliveryModeDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DeliveryMode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PaymTermIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PaymentTermsDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PaymentTerms</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PaymSchedIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PaymentScheduleDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PaymentSchedule</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AgreementHeaderIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AgreementHeader</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>AgreementHeaderDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DeliveryName</MapField>
					<MapFieldTo>DeliveryName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Project</MapField>
					<MapFieldTo>Project</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjectDataAreaId</MapField>
					<MapFieldTo>ProjectDataAreaId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ContactPerson</MapField>
					<MapFieldTo>ContactPerson</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ContactPersonDataAreaId</MapField>
					<MapFieldTo>ContactPersonDataAreaId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscountCode</MapField>
					<MapFieldTo>CashDiscountCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscountDataAreaId</MapField>
					<MapFieldTo>CashDiscountDataAreaId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MiscChargeGroupApplicationModule</MapField>
					<MapFieldTo>MiscChargeGroupApplicationModule</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MiscChargeGroup</MapField>
					<MapFieldTo>MiscChargeGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MiscChargeGroupDataAreaId</MapField>
					<MapFieldTo>MiscChargeGroupDataAreaId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryTerm</MapField>
					<MapFieldTo>DeliveryTerm</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryTermDataAreaId</MapField>
					<MapFieldTo>DeliveryTermDataAreaId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryMode</MapField>
					<MapFieldTo>DeliveryMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryModeDataAreaId</MapField>
					<MapFieldTo>DeliveryModeDataAreaId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymentTerms</MapField>
					<MapFieldTo>PaymentTerms</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymentTermsDataAreaId</MapField>
					<MapFieldTo>PaymentTermsDataAreaId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymentSchedule</MapField>
					<MapFieldTo>PaymentSchedule</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymentScheduleDataAreaId</MapField>
					<MapFieldTo>PaymentScheduleDataAreaId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExternalReference</MapField>
					<MapFieldTo>ExternalReference</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TradePostalAddress</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DeliveryName</MapField>
					<MapFieldTo>DeliveryName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AgreementHeader</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>AgreementHeader</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>AgreementHeader</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AgreementHeader_AgreementHeaderDefault</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AgreementHeader</Name>
					<Field>AgreementHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CashDiscount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CashDisc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CashDisc</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CashDisc_AgreementHeaderDefault</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CashDiscountDataAreaId</Name>
					<Field>CashDiscountDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CashDiscountCode</Name>
					<SourceEDT>CashDiscCode</SourceEDT>
					<Field>CashDiscountCode</Field>
					<RelatedField>CashDiscCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ContactPerson</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ContactPerson</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ContactPerson</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ContactPerson_AgreementHeaderDefault</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContactPersonDataAreaId</Name>
					<Field>ContactPersonDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContactPerson</Name>
					<SourceEDT>ContactPersonId</SourceEDT>
					<Field>ContactPerson</Field>
					<RelatedField>ContactPersonId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ContactPersonId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DeliveryPostalAddress</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsPostalAddress</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsPostalAddress_AgreementHeaderDefault</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DlvMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DlvMode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DlvMode_AgreementHeaderDefault</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryModeDataAreaId</Name>
					<Field>DeliveryModeDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryMode</Name>
					<SourceEDT>DlvModeId</SourceEDT>
					<Field>DeliveryMode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DlvTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DlvTerm</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DlvTerm_AgreementHeaderDefault</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryTermDataAreaId</Name>
					<Field>DeliveryTermDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryTerm</Name>
					<SourceEDT>DlvTermId</SourceEDT>
					<Field>DeliveryTerm</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MarkupGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MarkupGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>MarkupGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupGroup_AgreementHeaderDefault</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MiscChargeGroupDataAreaId</Name>
					<Field>MiscChargeGroupDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MiscChargeGroup</Name>
					<SourceEDT>MarkupGroupId</SourceEDT>
					<Field>MiscChargeGroup</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MiscChargeGroupApplicationModule</Name>
					<Field>MiscChargeGroupApplicationModule</Field>
					<RelatedField>Module</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ModuleGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymSched</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PaymSched</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PaymSched</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PaymSched_AgreementHeaderDefault</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentScheduleDataAreaId</Name>
					<Field>PaymentScheduleDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentSchedule</Name>
					<SourceEDT>PaymSchedId</SourceEDT>
					<Field>PaymentSchedule</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NameIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PaymTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PaymTerm</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PaymTerm_AgreementHeaderDefault</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentTermsDataAreaId</Name>
					<Field>PaymentTermsDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentTerms</Name>
					<SourceEDT>PaymTermId</SourceEDT>
					<Field>PaymentTerms</Field>
					<RelatedField>PaymTermId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TermIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Project</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjTable_AgreementHeaderDefault</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjectDataAreaId</Name>
					<Field>ProjectDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Project</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>Project</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsPostalAddressBaseEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddressBaseEntity</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>AddressRecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>