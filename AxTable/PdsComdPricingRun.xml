<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsComdPricingRun</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PdsComdPricingRun extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verfiy that the table invariants are valid before insert and update.
    /// </summary>
    /// <returns>
    /// true if the invariants are valid; false otherwise (the record should not be written/updated)
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public boolean validateWrite()
    /// </syntax>
    /// </remarks>
    public boolean validateWrite()
    {
        PdsComdPricingRun       pdsComdPricingRun;
        boolean                 ret;

        ret = super();

        if (ret)
        {
            if (this.RunEffective > this.RunExpiry)
            {
                ret = checkFailed("@PDS387");
            }
            else
            {
                select firstonly pdsComdPricingRun
                    where pdsComdPricingRun.CostBasisType == this.CostBasisType
                        && pdsComdPricingRun.InventSiteId == this.InventSiteId
                        && pdsComdPricingRun.RunEffective <= this.RunExpiry
                        && pdsComdPricingRun.RunExpiry    >= this.RunEffective
                        && pdsComdPricingRun.RecId        != this.RecId;

                if (pdsComdPricingRun)
                {
                    ret = checkFailed(strfmt("@PDS388",
                        pdsComdPricingRun.PricingRunId));
                }
            }

            if (this.PreviousRunId)
            {
                pdsComdPricingRun = PdsComdPricingRun::find(this.PreviousRunId);
                if (pdsComdPricingRun && pdsComdPricingRun.CostBasisType
                    != this.CostBasisType)
                {
                    ret = checkFailed(strfmt("@PDS390",
                        pdsComdPricingRun.PreviousRunId)) && ret;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if a specific PdsPricingRun record exists.
    /// </summary>
    /// <param name="_run">Pricing run id to check.</param>
    /// <returns>true if the record exists; false otherwise.</returns>
    /// <remarks>
    /// <syntax>
    /// public static boolean exist(PdsPricingRunId _run)
    /// </syntax>
    /// </remarks>
    public static boolean exist(
        PdsComdPricingRunId     _run)
    {
        return _run
            && (select pdsComdPricingRun
                    where pdsComdPricingRun.PricingRunId == _run).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a specific PdsPricingRun record.
    /// </summary>
    /// <param name="_run">Pricing run id to find.</param>
    /// <param name="_forUpdate">Optional. Specify as true if the record should be locked for update.
    /// Default value is false - do not lock the record for update.</param>
    /// <returns>Record value if found, empty otherwise.</returns>
    /// <remarks>
    /// <syntax>
    /// public static PdsPricingRun find(PdsPricingRunId _run, boolean _forUpdate)
    /// </syntax>
    /// </remarks>
    public static PdsComdPricingRun find(
        PdsComdPricingRunId     _run,
        boolean                 _forUpdate = false)
    {
        PdsComdPricingRun       pdsComdPricingRun;

        pdsComdPricingRun.selectForUpdate(_forUpdate);

        if (_run)
        {
            select firstonly pdsComdPricingRun
                where pdsComdPricingRun.PricingRunId == _run;
        }

        return pdsComdPricingRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEffective</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the PdsPricingRun record that is effective for a given date and cost basis.
    /// </summary>
    /// <param name="_effective">Date on which the run should be effective.</param>
    /// <param name="_costBasis">Optional. Cost basis type for the run.</param>
    /// <param name="_siteId">Optional. Inventory site id for the run.</param>
    /// <returns>Effecitve pricing run record for the specified date and cost basis type; empty record if none
    /// found.</returns>
    /// <remarks>
    /// This will find the PdsPricingRun record that is effective on the date specified.
    /// A pricing run is effective on a specific date if the given effective date is
    /// in the range of the run's effective through expiry dates, inclusive.
    ///
    /// If cost basis type is passed then only a specific record is guaranteed since
    /// a runs for a specific cost basis may not have overlapping effective and expiry
    /// dates. If cost basis is empty, the default value, then this will return the
    /// first effective run found for any cost basis.
    /// <syntax>
    /// public static PdsPricingRun findEffective(Date _effective, PdsCostBasisType _costBasis)
    /// </syntax>
    /// </remarks>
    public static PdsComdPricingRun findEffective(
        PdsRunEffective     _effective,
        PdsCostBasisType    _costBasis = "",
        InventSiteId        _siteId = "")
    {
        PdsComdPricingRun   pdsComdPricingRun;

        if (_effective)
        {
            if (_costBasis)
            {
                select firstonly pdsComdPricingRun
                    where pdsComdPricingRun.CostBasisType == _costBasis
                        && (pdsComdPricingRun.InventSiteId == _siteId || _siteId == "")
                        && pdsComdPricingRun.RunEffective <= _effective
                        && pdsComdPricingRun.RunExpiry    >= _effective;
            }
            else
            {
                select firstonly pdsComdPricingRun
                    where (pdsComdPricingRun.InventSiteId  == _siteId || _siteId == "")
                        && pdsComdPricingRun.RunEffective <= _effective
                        && pdsComdPricingRun.RunExpiry    >= _effective;
            }
        }

        return pdsComdPricingRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPreviousRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate a lookup for a previous run for given  PdsPricingRun record.
    /// </summary>
    /// <param name="_control">
    /// Form control this lookup should be shown for.
    /// </param>
    /// <param name="_run">
    /// PdsPricingRun record that the previous run be set in.
    /// </param>
    /// <remarks>
    /// Provides a special lookup for pricing runs showing the following fields:
    /// PricingRunId, RunEffective, and RunExpiry. The lookup is sorted in order by
    /// RunEffective date so most current runs are shown first (in descending order)
    /// and showing only runs in the same cost basis type as the given pricing run.
    /// The given pricing run will not be included in the lookup.
    /// <syntax>
    /// public static void lookupPreviousRun(FormStringControl _control, PdsPricingRun _run)
    /// </syntax>
    /// </remarks>
    public static void lookupPreviousRun(
        FormStringControl       _control,
        PdsComdPricingRun       _run)
    {
        SysTableLookup          sysTableLookup;
        Query                   query = new Query();
        QueryBuildDataSource    ds;

        sysTableLookup = SysTableLookup::newParameters(tablenum(PdsComdPricingRun),
            _control);
        sysTableLookup.addLookupfield(fieldnum(PdsComdPricingRun, PricingRunId));
        sysTableLookup.addLookupfield(fieldnum(PdsComdPricingRun, RunEffective));
        sysTableLookup.addLookupfield(fieldnum(PdsComdPricingRun, RunExpiry));
        ds = query.addDataSource(tablenum(PdsComdPricingRun));

        ds.addRange(fieldnum(PdsComdPricingRun, CostBasisType))
            .value(queryValue(_run.CostBasisType));
        ds.addRange(fieldnum(PdsComdPricingRun, InventSiteId))
            .value(queryValue(_run.InventSiteId));
        if (_run.RecId)
        {
            ds.addRange(fieldnum(PdsComdPricingRun, RecId))
                .value(SysQuery::valueNot(_run.RecId));
        }
        ds.addRange(fieldnum(PdsComdPricingRun, RunExpiry))
            .value(queryRange("", _run.RunEffective));

        ds.addSortField(fieldnum(PdsComdPricingRun, RunEffective),
            SortOrder::Descending);

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupRunForCopy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate a lookup for copying to the given PdsPricingRun record.
    /// </summary>
    /// <param name="_control">
    /// Form control this lookup should be shown for.
    /// </param>
    /// <param name="_run">
    /// PdsPricingRun record that is to be copied to.
    /// </param>
    /// <remarks>
    /// Provides a special lookup for pricing runs showing only those with a matching
    /// site id or any site if the specified run does not have a site id. The given
    /// pricing run will not be included in the lookup.
    /// <syntax>
    /// public static void lookupRunForCopy(FormStringControl _control, PdsPricingRun _run)
    /// </syntax>
    /// </remarks>
    public static void lookupRunForCopy(
        FormStringControl       _control,
        PdsComdPricingRun       _run)
    {
        SysTableLookup          sysTableLookup;
        Query                   query = new Query();
        QueryBuildDataSource    ds1, ds2;

        sysTableLookup = SysTableLookup::newParameters(tablenum(PdsComdPricingRun),
            _control);
        sysTableLookup.addLookupfield(fieldnum(PdsComdPricingRun, PricingRunId));
        sysTableLookup.addLookupfield(fieldnum(PdsComdPricingRun, InventSiteId));
        sysTableLookup.addLookupfield(fieldnum(PdsComdPricingRun, CostBasisType));
        ds1 = query.addDataSource(tablenum(PdsComdPricingRun));
        ds2 = ds1.addDataSource(tableNum(PdsComdPricingRunLine));
        ds2.joinMode(JoinMode::ExistsJoin);
        ds2.relations(true);

        if (_run.InventSiteId)
        {
            ds1.addRange(fieldnum(PdsComdPricingRun, InventSiteId))
                .value(queryValue(_run.InventSiteId));
        }
        if (_run.RecId)
        {
            ds1.addRange(fieldnum(PdsComdPricingRun, RecId))
                .value(SysQuery::valueNot(_run.RecId));
        }

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PdsCommodity</ConfigurationKey>
	<DeveloperDocumentation>@PDS1108</DeveloperDocumentation>
	<Label>@PDS354</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>PricingRunId</TitleField1>
	<TitleField2>CostBasisType</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>PricingRunidx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>PricingRunidx</PrimaryIndex>
	<ReplacementKey>PricingRunidx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PricingRunId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RunExpiry</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RunEffective</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostBasisType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PricingRunId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Effective</Name>
			<Label>@PDS386</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RunEffective</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RunExpiry</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PricingRunId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostBasisType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Previous</Name>
			<Label>@SYS16148</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PreviousRunId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CostBasisType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCostBasisType</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PreviousRunId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsComdPricingRunId</ExtendedDataType>
			<Label>@PDS384</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PricingRunId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsComdPricingRunId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RunEffective</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsRunEffective</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RunExpiry</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsRunExpiry</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PricingRunidx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PricingRunId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>EffectiveIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CostBasisType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventSiteId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RunEffective</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteId</Name>
					<SourceEDT>InventSiteId</SourceEDT>
					<Field>InventSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsCostBasis</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PdsCostBasis</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CostBasisType</Name>
					<Field>CostBasisType</Field>
					<RelatedField>CostBasisType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PreviousRun</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PdsComdPricingRun</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PreviousRunId</Name>
					<Field>PreviousRunId</Field>
					<RelatedField>PricingRunId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>