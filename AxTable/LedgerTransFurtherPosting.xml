<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransFurtherPosting</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerTransFurtherPosting extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLedgerJournalTransFromGenJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an unposted journal account entry that is based on a posted general journal
    /// transaction that is entered as a check for bridging.
    /// </summary>
    /// <param name="_generalJournalAccountEntry">
    /// The general journal account entry used to create the new record.
    /// </param>
    /// <param name="_ledgerEntryJournal">
    /// The ledger entry journal used to create the new record.
    /// </param>
    /// <param name="_generalJournalEntry">
    /// The general journal entry used to create the new record.
    /// </param>
    /// <param name="_ledgerEntry">
    /// The ledger entry used to create the new record.
    /// </param>
    /// <param name="_ledgerJournalTable">
    /// The journal header to which to assign the new record.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date; optional.    
    /// </param>
    /// <param name="_ledgerJournalTrans">
    /// The ledger journal trans used to create the new record.
    /// </param>
    [SysObsolete('This method is obsoleted, please use createAndGetLedgerJournalTransFromGenJour instead.', false, 15\09\2023)]
    public static void createLedgerJournalTransFromGenJour(
        GeneralJournalAccountEntry _generalJournalAccountEntry,
        LedgerEntryJournal _ledgerEntryJournal,
        GeneralJournalEntry _generalJournalEntry,
        LedgerEntry _ledgerEntry,
        LedgerJournalTable _ledgerJournalTable,
        TransDate _transDate = dateNull(),
        LedgerJournalTrans _ledgerJournalTrans = null)
    {
        LedgerTransFurtherPosting::createAndGetLedgerJournalTransFromGenJour(
            _generalJournalAccountEntry,
            _ledgerEntryJournal,
            _generalJournalEntry,
            _ledgerEntry,
            _ledgerJournalTable,
            _transDate,
            _ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndGetLedgerJournalTransFromGenJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an unposted journal account entry that is based on a posted general journal
    /// transaction that is entered as a check for bridging.
    /// </summary>
    /// <param name="_generalJournalAccountEntry">
    /// The general journal account entry used to create the new record.
    /// </param>
    /// <param name="_ledgerEntryJournal">
    /// The ledger entry journal used to create the new record.
    /// </param>
    /// <param name="_generalJournalEntry">
    /// The general journal entry used to create the new record.
    /// </param>
    /// <param name="_ledgerEntry">
    /// The ledger entry used to create the new record.
    /// </param>
    /// <param name="_ledgerJournalTable">
    /// The journal header to which to assign the new record.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date; optional.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    /// The ledger journal trans used to create the new record.
    /// </param>
    /// <returns>
    /// The created <c>LedgerJournalTrans</c> object.
    /// </returns>
    public static LedgerJournalTrans createAndGetLedgerJournalTransFromGenJour(
        GeneralJournalAccountEntry _generalJournalAccountEntry,
        LedgerEntryJournal _ledgerEntryJournal,
        GeneralJournalEntry _generalJournalEntry,
        LedgerEntry _ledgerEntry,
        LedgerJournalTable _ledgerJournalTable,
        TransDate _transDate = dateNull(),
        LedgerJournalTrans _ledgerJournalTrans = null)
    {
        LedgerJournalId ledgerJournalId = _ledgerJournalTable.JournalNum;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerTransFurtherPosting ledgerTransFurtherPosting;
        LedgerJournalTrans ledgerJournalTransSource;
        NumberSeq numberSeq;
        VendPaymModeTable vendPaymModeTable;
        CustPaymModeTable custPaymModeTable;
        LedgerJournalTrans ledgerJournalTransLocal,ledgerJournalTransLoc;
        LedgerJournalName ledgerJournalName;
        Voucher voucher;
        boolean generateNewVoucherNum;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

        select firstonly RecId, JournalNum, Voucher from ledgerJournalTrans
            where ledgerJournalTrans.FurtherPostingRecId == _ledgerEntry.RecId;

        if (ledgerJournalTrans == null)
        {
            ttsbegin;

            select firstonly AccountType, AccountNum, PaymMode, PaymSpec, RefRecId, RecId from ledgerTransFurtherPosting
                where ledgerTransFurtherPosting.RefRecId == _ledgerEntry.RecId;

            ledgerJournalTrans.initFromGeneralJournal(_generalJournalAccountEntry, _generalJournalEntry, _ledgerEntry);

            ledgerJournalName = LedgerJournalName::find(_ledgerJournalTable.JournalName);

            generateNewVoucherNum = true;

            if (ledgerJournalName.NewVoucher == NewVoucher::OneVoucher || ledgerJournalName.NewVoucher == NewVoucher::Manually)
            {
                select firstonly Voucher from ledgerJournalTransLoc
                    where ledgerJournalTransLoc.JournalNum == ledgerJournalId;

                if (ledgerJournalTransLoc.Voucher)
                {
                    voucher = ledgerJournalTransLoc.Voucher;
                    generateNewVoucherNum = false;
                }
            }

            if (generateNewVoucherNum)
            {
                numberSeq = NumberSeq::newGetVoucherFromId(_ledgerJournalTable.NumberSequenceTable, false);
                voucher = numberSeq.voucher();
            }

            if (_transDate != dateNull())
            {
                ledgerJournalTrans.TransDate = _transDate;
            }

            ledgerJournalTrans.Voucher = voucher;
            ledgerJournalTrans.JournalNum = ledgerJournalId;
            ledgerJournalTrans.LineNum = LedgerJournalTrans::lastLineNum(ledgerJournalId) + 1;
            ledgerJournalTrans.CurrencyCode = _generalJournalAccountEntry.TransactionCurrencyCode;
            ledgerJournalTrans.Company = _generalJournalEntry.company();
            
            if (_ledgerJournalTrans && _ledgerJournalTrans.BankDepositVoucher)
            {
                ledgerJournalTrans.BankDepositVoucher = _ledgerJournalTrans.BankDepositVoucher;
            }

            if (_ledgerJournalTable.DocumentNum)
            {
                ledgerJournalTrans.DocumentNum = _ledgerJournalTable.DocumentNum;
            }

            // initFromGeneralJournal sets the amount to the accounting currency amount but we need the transaction currency amount
            if (_generalJournalAccountEntry.IsCredit)
            {
                // set as a debit because we are trying to offset the original
                // change the sign becase a credit is stored as a negative
                ledgerJournalTrans.AmountCurDebit = -_generalJournalAccountEntry.TransactionCurrencyAmount;
                ledgerJournalTrans.AmountCurCredit = 0;
            }
            else
            {
                // set as a credit because we are trying to offset the original
                // don't change the sign becase a debit is stored as a positive
                ledgerJournalTrans.AmountCurDebit = 0;
                ledgerJournalTrans.AmountCurCredit = _generalJournalAccountEntry.TransactionCurrencyAmount;
            }

            // always try to get the original ledger trans record but it may not exist if deleting after posting set for the journal
            select firstonly ledgerJournalTransLocal where
                ledgerJournalTransLocal.JournalNum == _ledgerEntryJournal.JournalNumber &&
                ledgerJournalTransLocal.OffsetLedgerDimension == _generalJournalAccountEntry.LedgerDimension
            join RecId from subledgerVoucherGeneralJournalEntry where
                subledgerVoucherGeneralJournalEntry.Voucher == ledgerJournalTransLocal.Voucher &&
                subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == ledgerJournalTransLocal.DataAreaId &&
                subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == _generalJournalEntry.RecId;

            // use the original exchange rate if the record ofund else get the rate for the date
            if (ledgerJournalTransLocal == null)
            {
                ledgerJournalTrans.ExchRate = ExchangeRateHelper::exchRate(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
            }
            else
            {
                ledgerJournalTrans.ExchRate = ledgerJournalTransLocal.ExchRate;
            }

            // If BankBridgingTrans has been genereated before, then set the offset account id according to the BankBridgingTrans.
            BankBridgingTrans bankBridgingTrans = BankBridgingTrans::findByLedgerEntry(_ledgerEntry.RecId);
            if (bankBridgingTrans)
            {
                ledgerJournalTrans.parmOffsetAccount(bankBridgingTrans.AccountId, LedgerJournalACType::Bank);
                CustVendPaymModeTable paymModeTable = CustVendPaymModeTable::findModule(bankBridgingTrans.AccountType, ledgerJournalTrans.PaymMode);
                ledgerJournalTrans.BankTransType = paymModeTable.BankTransType;
            }
            else
            {
                if (ledgerTransFurtherPosting.AccountType == LedgerJournalACType::Cust)
                {
                    custPaymModeTable = CustPaymModeTable::find(ledgerJournalTrans.PaymMode);

                    if (custPaymModeTable)
                    {
                        if (custPaymModeTable.AccountType != LedgerJournalACType::Ledger)
                        {
                            ledgerJournalTrans.parmOffsetAccount(custPaymModeTable.parmPaymAccount(), custPaymModeTable.AccountType);
                        }
                        else
                        {
                            ledgerJournalTrans.OffsetAccountType = custPaymModeTable.AccountType;
                            ledgerJournalTrans.parmOffsetLedgerDimension(ledgerJournalTrans.getOffsetLedgerDimensionForLedgerType(custPaymModeTable.PaymentLedgerDimension, ledgerJournalTrans.Company));
                        }
                        ledgerJournalTrans.BankTransType = custPaymModeTable.BankTransType;
                    }
                }
                else
                {
                    vendPaymModeTable = VendPaymModeTable::find(ledgerJournalTrans.PaymMode);

                    if (vendPaymModeTable)
                    {
                        if (ledgerJournalTransLocal.PaymentAccount)
                        {
                            ledgerJournalTrans.parmOffsetAccount(ledgerJournalTransLocal.PaymentAccount, LedgerJournalACType::Bank);
                        }
                        else
                        {
                            if (vendPaymModeTable.AccountType != LedgerJournalACType::Ledger)
                            {
                                ledgerJournalTrans.parmOffsetAccount(vendPaymModeTable.parmPaymAccount(), vendPaymModeTable.AccountType);
                            }
                            else
                            {
                                ledgerJournalTrans.OffsetAccountType = vendPaymModeTable.AccountType;
                                ledgerJournalTrans.parmOffsetLedgerDimension(ledgerJournalTrans.getOffsetLedgerDimensionForLedgerType(vendPaymModeTable.PaymentLedgerDimension, ledgerJournalTrans.Company));
                            }
                        }
                        ledgerJournalTrans.BankTransType = vendPaymModeTable.BankTransType;
                    }
                }
            }

            if (_ledgerJournalTable.FixedOffsetAccount &&
                (_ledgerJournalTable.OffsetAccountType != ledgerJournalTrans.OffsetAccountType ||
                _ledgerJournalTable.OffsetLedgerDimension != ledgerJournalTrans.OffsetLedgerDimension))
            {
                if (_ledgerJournalTable.OffsetAccountType == ledgerJournalTrans.OffsetAccountType)
                {
                    switch (_ledgerJournalTable.OffsetAccountType)
                    {
                        case LedgerJournalACType::Bank:
                            LedgerJournalAC tableOffsetAccount = _ledgerJournalTable.parmOffsetAccount();
                            LedgerJournalAC lineOffsetAccount = ledgerJournalTrans.parmOffsetAccount();

                            if (tableOffsetAccount != lineOffsetAccount)
                            {
                                throw error(strFmt("@SYS32810", "@SYS11162"));
                            }
                            break;

                        case LedgerJournalACType::Ledger:
                            MainAccount ledgerJournalTableOffsetMainAccount = MainAccount::findByLedgerDimension(_ledgerJournalTable.OffsetLedgerDimension);
                            MainAccount ledgerJournalTransOffsetMainAccount = MainAccount::findByLedgerDimension(ledgerJournalTrans.OffsetLedgerDimension);
                            if (ledgerJournalTableOffsetMainAccount.MainAccountId != ledgerJournalTransOffsetMainAccount.MainAccountId)
                            {
                                throw error(strFmt("@SYS32810", "@SYS11162"));
                            }
                            break;
                    }
                }
                else
                {
                    throw error(strFmt("@SYS32810", "@SYS23950"));
                }
            }

            LedgerJournalEngine ledgerJournalEngine = LedgerJournalEngine::construct(_ledgerJournalTable.JournalType);
            ledgerJournalEngine.initOffsetDefaultDimension(ledgerJournalTrans);

            ledgerJournalTrans.FurtherPostingType = true;
            ledgerJournalTrans.insert();

            if (ledgerTransFurtherPosting.AccountType == LedgerJournalACType::Cust ||
                ledgerTransFurtherPosting.AccountType == LedgerJournalACType::Vend)
            {
                ledgerJournalTransSource = ledgerJournalTrans.data();
                ledgerJournalTransSource.parmAccount(
                    ledgerTransFurtherPosting.AccountNum,
                    ledgerTransFurtherPosting.AccountType,
                    _ledgerJournalTrans ? _ledgerJournalTrans.Company : ledgerJournalTrans.Company);
                ledgerJournalTransSource.PaymMode = ledgerTransFurtherPosting.PaymMode;
                ledgerJournalTransSource.PaymSpec = ledgerTransFurtherPosting.PaymSpec;

                if (ledgerTransFurtherPosting.AccountType == LedgerJournalACType::Cust)
                {
                    CustVendPaymJournalFee::createJournalFeeCust(ledgerJournalTrans, ledgerJournalTransSource);
                }
                else
                {
                    if (ledgerTransFurtherPosting.AccountType == LedgerJournalACType::Vend)
                    {
                        CustVendPaymJournalFee::createJournalFeeVend(ledgerJournalTrans, ledgerJournalTransSource);
                    }
                }
            }

            ttscommit;
        }
        else
        {
            warning(strfmt("@SYS68090", ledgerJournalTrans.JournalNum, ledgerJournalTrans.Voucher));
        }

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFurtherPostingChequeCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a ledger transaction record where the value of <c>FurtherPostingType</c> is Yes and, if a
    /// record is found, removes the corresponding records from the <c>LedgerTransFurtherPosting</c> table.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher used to find a ledger transaction record.
    /// </param>
    /// <param name="_chequeNum">
    /// The check number used to find a ledger transaction record.
    /// </param>
    /// <param name="_journalNum">
    /// Specifies a ledger transaction to be skipped (the transaction that contains this journal number);
    /// optional.
    /// </param>
    /// <remarks>
    /// This method is intended to be called only during check reversal posting.
    /// </remarks>
    public static void deleteFurtherPostingChequeCancel(
        Voucher _voucher,
        BankChequeNum _chequeNum,
        LedgerJournalId _journalNum = '')
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        LedgerEntry ledgerEntry;
        LedgerEntryJournal ledgerEntryJournal;
        GeneralJournalEntry generalJournalEntry;
        LedgerTransFurtherPosting ledgerTransFurtherPosting;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

        if (_voucher != '' && _chequeNum != '')
        {
            if (_journalNum == '')
            {
                select firstonly RecId from subledgerVoucherGeneralJournalEntry
                    where subledgerVoucherGeneralJournalEntry.Voucher == _voucher
                        && subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == curext()
                join RecId from generalJournalEntry
                    where generalJournalEntry.RecId == subledgerVoucherGeneralJournalEntry.GeneralJournalEntry
                        && generalJournalEntry.Ledger == Ledger::current()
                join RecId from generalJournalAccountEntry
                    where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                        && generalJournalAccountEntry.PaymentReference == _chequeNum
                outer join RecId from ledgerEntry
                    where ledgerEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                        && ledgerEntry.IsBridgingPosting == NoYes::Yes;
            }
            else
            {
                select firstonly RecId from subledgerVoucherGeneralJournalEntry
                    where subledgerVoucherGeneralJournalEntry.Voucher == _voucher
                join RecId from generalJournalEntry
                    where generalJournalEntry.RecId == subledgerVoucherGeneralJournalEntry.GeneralJournalEntry
                        && generalJournalEntry.Ledger == Ledger::current()
                join RecId from ledgerEntryJournal
                    where ledgerEntryJournal.RecId == generalJournalEntry.LedgerEntryJournal
                        && ledgerEntryJournal.JournalNumber != _journalNum
                join RecId from generalJournalAccountEntry
                    where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                        && generalJournalAccountEntry.PaymentReference == _chequeNum
                outer join RecId from ledgerEntry
                    where ledgerEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                        && ledgerEntry.IsBridgingPosting == NoYes::Yes;
            }
            if (ledgerEntry != null)
            {
                delete_from ledgerTransFurtherPosting
                    where ledgerTransFurtherPosting.RefRecId == ledgerEntry.RecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(LedgerEntryRefRecId _refRecId )
    {
        boolean found;

        found = (select firstonly RecId from ledgerTransFurtherPosting
            where ledgerTransFurtherPosting.RefRecId == _refRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static LedgerTransFurtherPosting find(
        LedgerEntryRefRecId _refRecId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerTransFurtherPosting ledgerTransFurtherPosting;

        ledgerTransFurtherPosting.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerTransFurtherPosting.concurrencyModel(_concurrencyModel);
        }

        select firstonly ledgerTransFurtherPosting
            where ledgerTransFurtherPosting.RefRecId == _refRecId;

        return ledgerTransFurtherPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>LedgerTransFurtherPosting</c> record related to the <c>LedgerJournalTrans</c>
    /// record, if update is specified, deletes the <c>LedgerTransFurtherPosting</c> record and
    /// updates the <c>LedgerJournalTrans</c> FurtherPostingType to false.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The <c>LedgerJournalTrans</c> record.</param>
    /// <param name = "_update">True to update the <c>LedgerTransFurtherPosting</c> and
    /// <c>LedgerJournalTrans</c> records; optional.</param>
    /// <returns>True if operation is successful.</returns>
    public static boolean settle(
        LedgerJournalTrans _ledgerJournalTrans,
                          boolean _update = false)
    {
        LedgerTransFurtherPosting ledgerTransFurtherPosting;

        if (_ledgerJournalTrans.FurtherPostingType)
        {
            ledgerTransFurtherPosting.selectForUpdate(_update);

            select firstonly ledgerTransFurtherPosting
                where ledgerTransFurtherPosting.RefRecId == _ledgerJournalTrans.FurtherPostingRecId;

            if (!ledgerTransFurtherPosting)
            {
                return checkFailed(strfmt("@SYS23024", _ledgerJournalTrans.Voucher));
            }

            if (_update)
            {
                ledgerTransFurtherPosting.delete();
                _ledgerJournalTrans.FurtherPostingType = false;
                BankAccountBridgingPostingHelper::clearBridgedTrans(_ledgerJournalTrans);
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102239";
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFurtherPostingPostedPaymentTransDate</Name>
				<Source><![CDATA[
    internal static TransDate findFurtherPostingPostedPaymentTransDate(CustVendTrans _custVendTrans)
    {
        LedgerRecId currentLedger = Ledger::current();

        LedgerEntry ledgerEntry;
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;

        select firstonly TransDate from ledgerJournalTrans
            exists join ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTable.Posted == NoYes::Yes
            exists join ledgerEntry
                where  ledgerEntry.IsBridgingPosting == NoYes::Yes
                    && ledgerEntry.RecId == ledgerJournalTrans.FurtherPostingRecId
            exists join generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == ledgerEntry.GeneralJournalAccountEntry
            exists join generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    &&  generalJournalEntry.CreatedTransactionId == _custVendTrans.CreatedTransactionId
                    && generalJournalEntry.Ledger == currentLedger
                    && generalJournalEntry.SubledgerVoucher == _custVendTrans.Voucher
                    && generalJournalEntry.AccountingDate == _custVendTrans.TransDate
                    && generalJournalEntry.SubledgerVoucherDataAreaId == _custVendTrans.DataAreaId;

        return ledgerJournalTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesPaymentNeedFurtherPosting</Name>
				<Source><![CDATA[
    internal static boolean doesPaymentNeedFurtherPosting(CustVendTrans _custVendTrans)
    {
        boolean doesPaymentNeedFurtherPosting;

        LedgerRecId currentLedger = Ledger::current();

        LedgerEntry ledgerEntry;
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        LedgerTransFurtherPosting ledgerTransFurtherPosting;

        CustVendPaymModeTable custVendPaymModeTable;
        VendPaymModeTable vendPaymModeTable;
        CustPaymModeTable custPaymModeTable;
        if (_custVendTrans.TableId == tableName2Id(identifierStr(CustVendTrans)))
        {
            custVendPaymModeTable = custPaymModeTable;
        }
        else
        {
            custVendPaymModeTable = vendPaymModeTable;
        }

        select firstonly generalJournalAccountEntry
            exists join generalJournalEntry
                where generalJournalEntry.CreatedTransactionId == _custVendTrans.CreatedTransactionId
                    && generalJournalEntry.Ledger == currentLedger
                    && generalJournalEntry.SubledgerVoucher == _custVendTrans.Voucher
                    && generalJournalEntry.AccountingDate == _custVendTrans.TransDate
                    && generalJournalEntry.SubledgerVoucherDataAreaId == _custVendTrans.DataAreaId
                    && generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
            exists join ledgerEntry
                where generalJournalAccountEntry.RecId == ledgerEntry.GeneralJournalAccountEntry
                    && ledgerEntry.IsBridgingPosting == NoYes::Yes
            exists join ledgerTransFurtherPosting
                where ledgerTransFurtherPosting.RefRecId == ledgerEntry.RecId
            exists join custVendPaymModeTable
                where custVendPaymModeTable.PaymMode == ledgerEntry.PaymentMode
                    && custVendPaymModeTable.FurtherPosting == NoYes::Yes
                    && custVendPaymModeTable.AccountType == LedgerJournalACType::Bank;

        if (generalJournalAccountEntry)
        {
            doesPaymentNeedFurtherPosting = true;
        }

        return doesPaymentNeedFurtherPosting;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS126101</DeveloperDocumentation>
	<Label>@SYS83891</Label>
	<TitleField1>AccountType</TitleField1>
	<TitleField2>AccountNum</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>RefRecId</ClusteredIndex>
	<Modules>Ledger</Modules>
	<PrimaryIndex>RefRecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSpec</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Account</Name>
			<Label>@SYS24500</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Paym</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSpec</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS15217</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerJournalACType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymMode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymSpec</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymSpec</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LedgerEntryRefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RefRecId</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerEntry</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>LedgerEntry</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerEntry</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerTransFurtherPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>