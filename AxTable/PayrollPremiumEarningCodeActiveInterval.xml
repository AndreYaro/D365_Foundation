<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollPremiumEarningCodeActiveInterval</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PayrollPremiumEarningCodeActiveInterval extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified record exists in the <c>PayrollPremiumEarningCodeActiveInterval</c> table; if not, an error
    ///    message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(PayrollPremiumEarningCodeActiveIntrRecId _recId)
    {
        boolean ret = true;

        if (!PayrollPremiumEarningCodeActiveInterval::exist(_recId))
        {
            ret = checkFailed(strFmt(PayrollPremiumEarningCodeActiveInterval::txtNotExist(), tableId2name(tableNum(PayrollPremiumEarningCodeActiveInterval))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the specified record in the <c>PayrollPremiumEarningCodeActiveInterval</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///     The record ID of the <c>PayrollPremiumEarningCodeActiveInterval</c> record.
    /// </param>
    /// <returns>
    ///     true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(PayrollPremiumEarningCodeActiveIntrRecId _recId)
    {
        PayrollPremiumEarningCodeActiveInterval    payrollPremiumEarningCodeActiveInterval;
        ValidFromDate validFrom = dateNull();
        ValidToDate   validTo   = dateMax();

        select firstonly validTimeState(validFrom, validTo) RecId
            from payrollPremiumEarningCodeActiveInterval
            where payrollPremiumEarningCodeActiveInterval.RecId == _recId;

        return payrollPremiumEarningCodeActiveInterval != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PayrollPremiumEarningCodeActiveInterval</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>PayrollPremiumEarningCodeActiveInterval</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    The specified record in the <c>PayrollPremiumEarningCodeActiveInterval</c> table; otherwise, an empty record.
    /// </returns>
    public static PayrollPremiumEarningCodeActiveInterval find(
        PayrollPremiumEarningCodeActiveIntrRecId   _recId,
        boolean   _forupdate = false,
        ConcurrencyModel  _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollPremiumEarningCodeActiveInterval payrollPremiumEarningCodeActiveInterval;

        ValidFromDate   validFrom = dateNull();
        ValidToDate     validTo = dateMax();

        payrollPremiumEarningCodeActiveInterval.selectForUpdate(_forupdate);

        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollPremiumEarningCodeActiveInterval.concurrencyModel(_concurrencyModel);
        }

        select firstonly validTimeState(validFrom, validTo) payrollPremiumEarningCodeActiveInterval
            where payrollPremiumEarningCodeActiveInterval.RecId == _recId;

        return payrollPremiumEarningCodeActiveInterval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PayrollPremiumEarningCodeActiveInterval</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_validFrom">
    ///    A value in the <c>ValidFrom</c> field.
    /// </param>
    /// <param name="_validTo">
    ///    A value in the <c>ValidTo</c> field.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PayrollPremiumEarningCodeActiveInterval</c> table.
    /// </returns>
    /// <remarks>
    ///    Values for the <c> _validFrom </c> and <c> _validTo </c> fields limit the table selection in the following way.
    ///    <list type="number">
    ///       <item>
    ///          <description>If no values are supplied for both the parameters, they use now. Therefore, the method
    ///          searches for only active records and returns either an empty or a valid record.</description>
    ///       </item>
    ///       <item>
    ///          <description> If only the first parameter value is supplied, the second parameter uses the first parameter.The
    ///             method searches for active records as of the supplied <c>date</c> value and returns either an
    ///             empty or a valid record. </description>
    ///       </item>
    ///       <item>
    ///          <description> When both parameters are supplied with values, the method searches for records with values in the
    ///             <c>validFrom</c> and <c>ValidTo</c> fields that fall in the interval. The method returns either an
    ///             empty or a valid record. </description>
    ///       </item>
    ///    </list>
    /// </remarks>
    public static PayrollPremiumEarningCodeActiveInterval findByDate(
        PayrollPremiumEarningCodeActiveIntrRecId _recId,
        ValidFromDate                          _validFrom = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),
        ValidToDate                            _validTo   = _validFrom,
        boolean                                _forUpdate = false,
        ConcurrencyModel  _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollPremiumEarningCodeActiveInterval payrollPremiumEarningCodeActiveInterval;

        payrollPremiumEarningCodeActiveInterval.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollPremiumEarningCodeActiveInterval.concurrencyModel(_concurrencyModel);
        }

        if (_recId)
        {
            if (prmisDefault(_validFrom) && prmisDefault(_validTo))
            {
                select firstonly payrollPremiumEarningCodeActiveInterval
                    where payrollPremiumEarningCodeActiveInterval.RecId == _recId;
            }
            else if (_validFrom == _validTo)
            {
                select firstonly ValidTimeState(_validFrom) payrollPremiumEarningCodeActiveInterval
                    where payrollPremiumEarningCodeActiveInterval.RecId == _recId;
            }
            else
            {
                select ValidTimeState(_validFrom, _validTo) payrollPremiumEarningCodeActiveInterval
                    where payrollPremiumEarningCodeActiveInterval.RecId == _recId;
            }
        }

        return payrollPremiumEarningCodeActiveInterval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPremiumEarningCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PayrollPremiumEarningCodeActiveInterval</c> table.
    /// </summary>
    /// <param name="_premiumEarningCode">
    ///    The value of the <c>PayrollPremiumEarningCode</c> field of the record to find.
    /// </param>
    /// <param name="_validFrom">
    ///    The value of the <c>ValidFrom</c> field.
    /// </param>
    /// <param name="_validTo">
    ///    The value of the <c>ValidTo</c> field.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    One or more records in the <c>PayrollPremiumEarningCodeActiveInterval</c> table; otherwise, an empty buffer.
    /// </returns>
    public static PayrollPremiumEarningCodeActiveInterval findByPremiumEarningCode(
        PayrollPremiumEarningCodeRecId _premiumEarningCode,
        ValidFromDate                  _validFrom = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),
        ValidToDate                    _validTo   = _validFrom,
        boolean                        _forUpdate = false,
        ConcurrencyModel  _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollPremiumEarningCodeActiveInterval payrollPremiumEarningCodeActiveInterval;

        payrollPremiumEarningCodeActiveInterval.selectForUpdate(_forUpdate );

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollPremiumEarningCodeActiveInterval.concurrencyModel(_concurrencyModel);
        }

        if (_premiumEarningCode)
        {
            if (prmisDefault(_validFrom) && prmisDefault(_validTo))
            {
                select firstonly payrollPremiumEarningCodeActiveInterval
                    where payrollPremiumEarningCodeActiveInterval.PremiumEarningCode == _premiumEarningCode;
            }
            else if (_validFrom == _validTo)
            {
                select firstonly ValidTimeState(_validFrom) payrollPremiumEarningCodeActiveInterval
                    where payrollPremiumEarningCodeActiveInterval.PremiumEarningCode == _premiumEarningCode;
            }
            else
            {
                select ValidTimeState(_validFrom, _validTo) payrollPremiumEarningCodeActiveInterval
                    where payrollPremiumEarningCodeActiveInterval.PremiumEarningCode == _premiumEarningCode;
            }
        }

        return payrollPremiumEarningCodeActiveInterval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActiveByDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the record corresponding to the supplied record ID value is active as of the supplied date values.
    /// </summary>
    /// <param name="_recId">
    ///     The value of the record ID to check.
    /// </param>
    /// <param name="_validFrom">
    ///     A <c>ValidFrom</c> field value.
    /// </param>
    /// <param name="_validTo">
    ///     A <c>ValidTo</c> field value.
    /// </param>
    /// <returns>
    ///     true if the record is active as of supplied date; otherwise, false.
    /// </returns>
    public static boolean isActiveByDate(
        PayrollPremiumEarningCodeActiveIntrRecId _recId,
        ValidFromDate   _validFrom = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),
        ValidToDate     _validTo   = _validFrom)
    {
        PayrollPremiumEarningCodeActiveInterval payrollPremiumEarningCodeActiveInterval;

        if (_recId)
        {
            if (prmisDefault(_validFrom) && prmisDefault(_validTo))
            {
                select firstonly RecId from payrollPremiumEarningCodeActiveInterval
                    where payrollPremiumEarningCodeActiveInterval.RecId == _recId;
            }
            else if (_validFrom == _validTo)
            {
                select firstonly ValidTimeState(_validFrom) RecId from payrollPremiumEarningCodeActiveInterval
                    where payrollPremiumEarningCodeActiveInterval.RecId == _recId;
            }
            else
            {
                select firstonly ValidTimeState(_validFrom, _validTo) RecId from payrollPremiumEarningCodeActiveInterval
                    where payrollPremiumEarningCodeActiveInterval.RecId == _recId;
            }
        }

        return _recId && payrollPremiumEarningCodeActiveInterval.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS329226";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PayrollAdministration</ConfigurationKey>
	<DeveloperDocumentation>@Payroll:ThisTableIsUsedToDetermineTheActiveIntervalsForAPremiumCode</DeveloperDocumentation>
	<Label>@Payroll:PremiumCodeActiveInterval</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>PremiumEarningCode</TitleField1>
	<TitleField2>ValidFrom</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>Payroll</Modules>
	<ReplacementKey>PremiumCodeDuration_AK1</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<ValidTimeStateFieldType>Date</ValidTimeStateFieldType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PremiumEarningCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PremiumEarningCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ValidDates</Name>
			<Label>@Payroll:TemporaryLabel1</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PremiumEarningCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollPremiumEarningCodeRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidFromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidTo</Name>
			<ExtendedDataType>ValidToDate</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PremiumCodeDuration_AK1</Name>
			<AlternateKey>Yes</AlternateKey>
			<ValidTimeStateKey>Yes</ValidTimeStateKey>
			<ValidTimeStateMode>Gap</ValidTimeStateMode>
			<Fields>
				<AxTableIndexField>
					<DataField>PremiumEarningCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PremiumEarningCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PayrollPremiumEarningCode</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PayrollPremiumEarningCode</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>PayrollPremiumEarningCodeDuration</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PremiumEarningCode</Name>
					<Field>PremiumEarningCode</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>