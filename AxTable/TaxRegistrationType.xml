<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxRegistrationType</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxRegistrationType extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        TaxRegistration taxRegistration;
        TaxRegistrationTypeApplicabilityRule taxRegistrationTypeApplicabilityRule;
        boolean ret;
        date minimumDate = dateNull();
        date maximumDate = maxDate();

        ret = super();

        if (ret)
        {
            select firstonly validTimeState(minimumDate, maximumDate) RecId from taxRegistration
                exists join taxRegistrationTypeApplicabilityRule
                where taxRegistration.TaxRegistrationTypeApplicabilityRule == taxRegistrationTypeApplicabilityRule.RecId
                    && taxRegistrationTypeApplicabilityRule.TaxRegistrationType == this.RecId;

            if (taxRegistration.RecId)
            {
                ret = checkFailed("@RegistrationNumbers:RegistrationInformationExistsForRegistrationType");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxRegistrationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>TaxRegistrationType</c> table.
    /// </summary>
    /// <param name="_taxRegistrationType">
    /// A tax registration type.
    /// </param>
    /// <param name="_taxRegistrationTypeDescription">
    /// The value of a type description, optional.
    /// </param>
    /// <returns>
    /// The record ID of the created record.
    /// </returns>
    public static RefRecId createTaxRegistrationType(
        TaxRegistrationTypeName _taxRegistrationType,
        TaxRegistrationTypeDescription _taxRegistrationTypeDescription = '')
    {
        TaxRegistrationType taxRegistrationType;

        if (_taxRegistrationType)
        {
            ttsbegin;

            taxRegistrationType = TaxRegistrationType::findByType(_taxRegistrationType, true);
            taxRegistrationType.TaxRegstrationType = _taxRegistrationType;
            taxRegistrationType.Description = _taxRegistrationTypeDescription;

            if (taxRegistrationType.RecId)
            {
                taxRegistrationType.update();
            }
            else
            {
                taxRegistrationType.insert();
            }

            ttscommit;
        }

        return taxRegistrationType.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>TaxRegistrationType</c> record that has a specified record ID.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>TaxRegistrationType</c> table.
    /// </returns>
    public static TaxRegistrationType find(
        RecId               _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxRegistrationType taxRegistrationType;

        taxRegistrationType.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxRegistrationType.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxRegistrationType
            where taxRegistrationType.RecId == _recId;

        return taxRegistrationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>TaxRegistrationType</c> record that has a specified tax registration type.
    /// </summary>
    /// <param name="_taxRegistrationType">
    /// The name of the type of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>TaxRegistrationType</c> table.
    /// </returns>
    public static TaxRegistrationType findByType(
        TaxRegistrationTypeName  _taxRegistrationType,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxRegistrationType taxRegistrationType;

        taxRegistrationType.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxRegistrationType.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxRegistrationType
            where taxRegistrationType.TaxRegstrationType == _taxRegistrationType;

        return taxRegistrationType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@RegistrationNumbers:TaxRegistrationTypeTableDevDoc</DeveloperDocumentation>
	<FormRef>TaxRegistrationType</FormRef>
	<Label>@RegistrationNumbers:RegistrationTypes</Label>
	<TitleField1>TaxRegstrationType</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>Tax</Modules>
	<ReplacementKey>TaxRegistrationType</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxRegstrationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxRegstrationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxRegstrationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Main</Name>
			<Label>@GLS220858</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxRegstrationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxRegistrationTypeDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxRegstrationType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxRegistrationTypeName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxRegistrationType</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxRegstrationType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>