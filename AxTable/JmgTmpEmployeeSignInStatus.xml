<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgTmpEmployeeSignInStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JmgTmpEmployeeSignInStatus extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populatefromJmgShopSupervisorMyTeamQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Populate the JmgTmpEmployeeSignInStatus table from the JmgShopSupervisorMyTeamQuery
    /// </summary>
    public static JmgTmpEmployeeSignInStatus populatefromJmgShopSupervisorMyTeamQuery()
    {
        JmgTmpEmployeeSignInStatus employeeSignInStatus;

        var employeeListQuery         = new Query(queryStr(JmgShopSupervisorMyTeamQuery));
        QueryRun employeeListQueryRun = new QueryRun(employeeListQuery);

        while (employeeListQueryRun.next())
        {
            JmgShopSupervisorMyTeam myTeam = employeeListQueryRun.get(tableNum(JmgShopSupervisorMyTeam));
            JmgTmpEmployeeSignInStatus::createRecord(employeeSignInStatus, HcmWorker::find(myTeam.Worker));
        }

        return employeeSignInStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creats new <c>JmgTmpEmployeeSignInStatus</c> record in the specified temporary buffer for a given <c>HcmWorker</c> record,
    /// </summary>
    /// <param name="_employeeSignInStatus">
    ///   The temporary <c>JmgTmpEmployeeSignInStatus</c> temporary buffer
    /// </param>
    /// <param name="_worker">
    ///   The <c>HcmWorker</c> record for which <c>JmgTmpEmployeeSignInStatus</c> record is being created.
    /// </param>
    public static void createRecord(JmgTmpEmployeeSignInStatus _employeeSignInStatus, HcmWorker _worker)
    {
        if (_worker.RecId != 0)
        {
            _employeeSignInStatus.Name = DirPerson::find(_worker.Person).Name;
            _employeeSignInStatus.PersonnelNumber = _worker.PersonnelNumber;
            _employeeSignInStatus.SignInStatus = JmgTmpEmployeeSignInStatus::getSignInStatus(_worker);
            _employeeSignInStatus.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>personImage</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets the image/Symbol of the worker
    /// </summary>
    /// <returns>
    ///  The image/Symbol of the worker
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display container personImage()
    {
        HCMWorker worker = HCMWorker::findByPersonnelNumber(this.PersonnelNumber);

        return worker.personImage();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSignInStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets the Signed In Status for the worker.
    /// </summary>
    /// <returns>
    ///  The Signed In Status for the worker
    /// </returns>
    private static JmgEmployeeSignInStatus getSignInStatus(HcmWorker _worker)
    {
        if (_worker.RecId != 0)
        {
            var profileDate = JmgTermReg::calcProfileDate(
                                  JmgTermRegType::ClockIn,
                                  JmgEmployee::findPersonnelNumber(_worker.PersonnelNumber),
                                  clrSystemDateTime2UtcDateTime(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));

            if (JmgEmployee::signedIn(_worker.RecId))
            {
                return JmgEmployeeSignInStatus::Present;
            }

            JmgTermReg termReg;

            select firstonly termReg
                where termReg.ProfileDate == profileDate
                   && termReg.RegType == JmgTermRegType::ClockOut;

            if (termReg.RecId)
            {
                return JmgEmployeeSignInStatus::ClockedOut;
            }

            if (JmgAbsenceCalendar::isPlannedAbsence(_worker.RecId, profileDate))
            {
                return JmgEmployeeSignInStatus::Absent;
            }
        }

        return JmgEmployeeSignInStatus::NotClockedIn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRecordStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates new <c>JmgTmpEmployeeSignInStatus</c> record in the specified temporary buffer for a given <c>HcmWorker</c> record
    /// </summary>
    /// <param name="_employeeSignInStatus">
    ///   The temporary <c>JmgTmpEmployeeSignInStatus</c> temporary buffer
    /// </param>
    /// <param name="_worker">
    ///   The <c>HcmWorker</c> record for which <c>JmgTmpEmployeeSignInStatus</c> record is being created.
    /// </param>
    public void updateRecordStatus()
    {
        this.SignInStatus = JmgTmpEmployeeSignInStatus::getSignInStatus(HcmWorker::findByPersonnelNumber(this.PersonnelNumber));
        this.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Jmg</ConfigurationKey>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>PersonnelNumber</TitleField2>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PersonnelNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SignInStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SignInStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SignInStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PersonnelNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>HcmPersonnelNumberId</ExtendedDataType>
			<Label>@SYS303656</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>DirPartyName</ExtendedDataType>
			<Label>@SYS80991</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SignInStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>JmgEmployeeSignInStatus</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SignInStatusIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SignInStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PersonnelNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>