<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LvCashReceiptTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LvCashReceiptTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cashReceiptStatusUpdate</Name>
				<Source><![CDATA[
    private void cashReceiptStatusUpdate()
    {
        LvCashReceiptTable  lvCashReceiptTable;
        LvCashReceiptTrans  lvCashReceiptTrans;
        boolean             isUpdate;
        date                farthestDate;
        int                 start;
        int                 end;

        ttsbegin;

        lvCashReceiptTable = LvCashReceiptTable::find(this.LvCashReceiptTable);

        if (lvCashReceiptTable.Status == LvCashReceiptStatus::Acquired)
        {
            lvCashReceiptTable.Status = LvCashReceiptStatus::InUse;
            isUpdate = true;
        }

        start   = lvCashReceiptTable.FromNumber;
        end     = lvCashReceiptTable.ToNumber;

        select firstonly TransactionDate from lvCashReceiptTrans
            order by TransactionDate desc
            where lvCashReceiptTrans.LvCashReceiptTable == this.LvCashReceiptTable
                && lvCashReceiptTrans.Type    != LvCashReceiptTransactionsType::Movement;

        farthestDate = lvCashReceiptTrans.TransactionDate;

        while select LvCashReceiptTable, Type, FromNumber, ToNumber from lvCashReceiptTrans
            order by FromNumber
            where lvCashReceiptTrans.LvCashReceiptTable   == this.LvCashReceiptTable
                && lvCashReceiptTrans.Type                != LvCashReceiptTransactionsType::Movement
        {
            if (lvCashReceiptTrans.FromNumber > start)
            {
                break;
            }
            else if (lvCashReceiptTrans.ToNumber < end)
            {
                start = lvCashReceiptTrans.ToNumber + 1;
            }
            else
            {
                lvCashReceiptTable.Status = LvCashReceiptStatus::Closed;
                lvCashReceiptTable.ClosingDate = this.getClosingDate(farthestDate);
                isUpdate = true;
            }
        }

        if (isUpdate)
        {
            lvCashReceiptTable.selectForUpdate(true);
            lvCashReceiptTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClosingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the date of quarter end date
    /// </summary>
    /// <param name="_value">
    /// The date specified.
    /// </param>
    /// <returns>
    /// Date of quarter end date.
    /// </returns>
    public date getClosingDate(date _value)
    {
        return dateEndQtr(_value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        LvCashReceiptTrans  cashReceiptTrans;
        LvCashReceiptTrans  tempCashReceiptTrans;
        real                amount;
        boolean             isUpdating = false;

        ttsbegin;
        if (this.Type == LvCashReceiptTransactionsType::Used)
        {
            while select LvCashReceiptTable, RecId, Type, TransactionDate, ToNumber, FromNumber, AmountMST from cashReceiptTrans
                where cashReceiptTrans.LvCashReceiptTable           == this.LvCashReceiptTable
                   && cashReceiptTrans.RecId                        != this.RecId
                   && cashReceiptTrans.Type                         == LvCashReceiptTransactionsType::Used
                   && cashReceiptTrans.TransactionDate              == this.TransactionDate
            {
                amount = this.AmountMST + cashReceiptTrans.AmountMST;
                if (cashReceiptTrans.ToNumber == this.FromNumber - 1)
                {
                    update_recordset tempCashReceiptTrans
                        setting ToNumber = this.ToNumber, AmountMST = amount
                        where tempCashReceiptTrans.RecId == cashReceiptTrans.RecId;

                    isUpdating = true;
                }
                else if (cashReceiptTrans.FromNumber == this.ToNumber + 1)
                {
                    update_recordset tempCashReceiptTrans
                        setting FromNumber = this.FromNumber, AmountMST = amount
                        where tempCashReceiptTrans.RecId == cashReceiptTrans.RecId;

                    isUpdating = true;
                }
            }
        }

        if (!isUpdating)
        {
            super();
        }

        this.cashReceiptStatusUpdate();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();
        this.cashReceiptStatusUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean             ret;
        LvCashReceiptTable  lvCashReceiptTable;
        LvCashReceiptTrans  tempCashReceiptsTransactions;

        ret = super();

        lvCashReceiptTable = LvCashReceiptTable::find(this.LvCashReceiptTable);

        if (this.TransactionDate < lvCashReceiptTable.AcquisitionDate)
        {
            return checkFailed("@GLS113251");
        }

        if (this.FromNumber > this.ToNumber)
        {
            ret = false;
        }
        else if (this.FromNumber      < lvCashReceiptTable.FromNumber
                || this.FromNumber    > lvCashReceiptTable.ToNumber
                || this.ToNumber      < lvCashReceiptTable.FromNumber
                || this.ToNumber      > lvCashReceiptTable.ToNumber)
        {
            ret = false;
        }

        if (this.Type != LvCashReceiptTransactionsType::Movement)
        {
            select firstonly tempCashReceiptsTransactions
                where tempCashReceiptsTransactions.LvCashReceiptTable       == this.LvCashReceiptTable
                    && tempCashReceiptsTransactions.RecId                   != this.RecId
                    && tempCashReceiptsTransactions.Type                    != LvCashReceiptTransactionsType::Movement
                    && tempCashReceiptsTransactions.ToNumber                >= this.FromNumber
                    && tempCashReceiptsTransactions.FromNumber              <= this.ToNumber;
        }
        else
        {
            select firstonly tempCashReceiptsTransactions
                where tempCashReceiptsTransactions.LvCashReceiptTable       == this.LvCashReceiptTable
                    && tempCashReceiptsTransactions.RecId                   != this.RecId
                    && tempCashReceiptsTransactions.Type                    == LvCashReceiptTransactionsType::Movement
                    && tempCashReceiptsTransactions.ToNumber                >= this.FromNumber
                    && tempCashReceiptsTransactions.FromNumber              <= this.ToNumber;
        }

        if (tempCashReceiptsTransactions)
        {
            ret = false;
        }

        if (!ret)
        {
            return checkFailed("@GLS222894");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashReceiptsFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the receipt number is of the specified format.
    /// </summary>
    /// <param name="_fmt">
    /// The number format specified.
    /// </param>
    /// <param name="_value">
    /// The receipt number, which should follow the _fmt.
    /// </param>
    /// <returns>
    /// Receipt number in the specified format; empty string if it doesnt follow the format.
    /// </returns>
    public static str cashReceiptsFormat(str _fmt, int _value)
    {
        int start;
        int fmtlen;
        str temp;
        int i;

        start = strFind(_fmt, '#', 1, 10);
        i = strLen(int2str(_value));
        fmtLen = strLen(_fmt) - start + 1;

        if (i > (fmtLen))
        {
            return "";
        }

        while (i < fmtlen)
        {
            temp += '0';
            i++;
        }

        return subStr(_fmt,1,start - 1) + temp + int2str(_value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCashReceiptTableNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the receipt number is valid.
    /// </summary>
    /// <param name="_recId">
    /// The cash receipt table record id where the receipt is from.
    /// </param>
    /// <param name="_cashReceiptNum">
    /// The cash receipt number which should be verified.
    /// </param>
    /// <param name="_transDate">
    /// The cash receipt transaction date.
    /// </param>
    /// <returns>
    /// True if Receipt number is in the specified format, never been used and falls in the same batch.
    /// </returns>
    public static boolean checkCashReceiptTableNum(CashReceiptTableRecId _recId, NumberSequenceFormat _cashReceiptNum, TransDate _transDate)
    {
        LvCashReceiptTable          lvCashReceiptTable = LvCashReceiptTable::find(_recId);
        LvCashReceiptTrans          lvCashReceiptTrans;
        LedgerJournalTrans_RCash    ledgerJournalTrans_RCash;
        RCashTrans                  rCashTrans;
        boolean                     flag = true;

        if (LvCashReceiptTrans::cashReceiptsFormat(lvCashReceiptTable.Format, lvCashReceiptTable.FromNumber)    > _cashReceiptNum ||
            LvCashReceiptTrans::cashReceiptsFormat(lvCashReceiptTable.Format, lvCashReceiptTable.ToNumber)      < _cashReceiptNum ||
            strLen(lvCashReceiptTable.Format) != strLen(_cashReceiptNum)    ||
            !lvCashReceiptTable                                             ||
            lvCashReceiptTable.AcquisitionDate > _transDate)
        {
            flag = checkFailed("@GLS222895");
        }

        while select LvCashReceiptTable, Type, FromNumber, ToNumber from lvCashReceiptTrans
            where lvCashReceiptTrans.LvCashReceiptTable == lvCashReceiptTable.RecId &&
                    lvCashReceiptTrans.Type             != LvCashReceiptTransactionsType::Movement
        {
            if (LvCashReceiptTrans::cashReceiptsFormat(lvCashReceiptTable.Format, lvCashReceiptTrans.FromNumber) <= _cashReceiptNum &&
                LvCashReceiptTrans::cashReceiptsFormat(lvCashReceiptTable.Format, lvCashReceiptTrans.ToNumber)   >= _cashReceiptNum)
            {
                flag = checkFailed("@GLS113253");
            }
        }

        if (flag)
        {
            select firstonly RecId from ledgerJournalTrans_RCash
                where ledgerJournalTrans_RCash.LvCashReceiptTable      == _recId
                    && ledgerJournalTrans_RCash.CashReceiptNumLV       == _cashReceiptNum;

            select firstonly RecId from rCashTrans
                where rCashTrans.LvCashReceiptTable       == _recId
                    && rCashTrans.CashReceiptNumLV        == _cashReceiptNum;
        }

        if (ledgerJournalTrans_RCash.RecId || rCashTrans.RecId)
        {
            flag = checkFailed("@GLS113253");
        }
        else
        {
            while select lvCashReceiptTrans
                where lvCashReceiptTrans.LvCashReceiptTable == lvCashReceiptTable.RecId &&
                         lvCashReceiptTrans.Type            == LvCashReceiptTransactionsType::Movement
                {
                    if (LvCashReceiptTrans::cashReceiptsFormat(lvCashReceiptTable.Format, lvCashReceiptTrans.FromNumber)    <= _cashReceiptNum &&
                        LvCashReceiptTrans::cashReceiptsFormat(lvCashReceiptTable.Format, lvCashReceiptTrans.ToNumber)      >= _cashReceiptNum &&
                        lvCashReceiptTrans.TransactionDate <= _transDate)
                    {
                        flag = true;
                    }
                }

            if (!flag)
            {
                checkFailed("@GLS113252");
            }
        }

        return flag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the receipt transaction exists in the table.
    /// </summary>
    /// <param name="_recId">
    /// The cash receipt table record id where the receipt is from.
    /// </param>
    /// <param name="_from">
    /// The begining of cash receipt number range for this transaction.
    /// </param>
    /// <param name="_to">
    /// The end of cash receipt number range for this transaction.
    /// </param>
    /// <returns>
    /// True if receipt transaction is found.
    /// </returns>
    public static boolean exist(CashReceiptTableRecId _recId, LvFromNumber _from, LvToNumber _to)
    {
        return _recId && _from && _to && (select firstonly RecId from lvCashReceiptTrans
                    where lvCashReceiptTrans.LvCashReceiptTable     == _recId
                       && lvCashReceiptTrans.FromNumber             <= _from
                       && lvCashReceiptTrans.ToNumber               >= _to
                       && lvCashReceiptTrans.Type                   != LvCashReceiptTransactionsType::Movement
               ).RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<CountryRegionCodes>LV</CountryRegionCodes>
	<DeveloperDocumentation>@GLS222890</DeveloperDocumentation>
	<FormRef>CashReceipttransactionsLV</FormRef>
	<Label>@GLS113246</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>TransactionDate</TitleField1>
	<TitleField2>FromNumber</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Bank</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS12227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LvCashReceiptTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Responsible</Name>
			<Label>@SYS35826</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HcmWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS115318</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FromNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LvFromNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HcmWorker</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS113381</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LvCashReceiptTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ToNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LvToNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransactionDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS67</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Type</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LvCashReceiptTransactionsType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CashReceiptsTransactionsIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>LvCashReceiptTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Type</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HcmWorkerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>HcmWorker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CurrencyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CurrencyCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LvCashReceiptTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Employee</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Employee</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Employee_CashReceiptTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HcmWorker</Name>
					<Field>HcmWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LvCashReceiptTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LvCashReceiptTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LvCashReceiptTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LvCashReceiptTable_RecId</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LvCashReceiptTable</Name>
					<Field>LvCashReceiptTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>