<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetImpairmentCGU_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Asset impairment CGU table.
/// </summary>
public class AssetImpairmentCGU_JP extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateNetBookValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the sum of net book value of asset books under a CGU
    /// </summary>
    /// <param name="_asOfDate">
    /// The as of date for calculating NBV.
    /// </param>
    /// <returns>
    /// The sum of net book value
    /// </returns>
    public AssetNetBookValue calculateNetBookValue(AssetTransDate _asOfDate)
    {
        AssetSumCalc                sumCalc;
        AssetImpairmentCGUAssets_JP assets;
        AssetNetBookValue           sumNbv;

        while select AssetImpairmentCGU, AssetId, BookId from assets
                where assets.AssetImpairmentCGU == this.RecId
        {
            sumCalc = AssetSumCalc_Trans::newAssetYear(assets.AssetId, assets.BookId, _asOfDate);
            sumNbv += sumCalc.netBookValue();
        }

        return sumNbv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFromOtherCGU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy field values and assets from an existing CGU.
    /// </summary>
    /// <param name="_sourceCGU">
    /// The existing CGU be copied from.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Failed to find source CGU.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Cannot copy from a CGU in same CGU group
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Some asset books already exist in a CGU of this CGU group.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Some asset books already exist in the shared asset of this CGU group.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The source asset book type is not same as current cgu group.
    /// </exception>
    public void copyFromOtherCGU(AssetImpairmentCGUName_JP _sourceCGU)
    {
        AssetImpairmentCGUAssets_JP         cguAssets;
        AssetImpairmentCGUAssets_JP         newCguAssets;
        AssetImpairmentCGU_JP               cguLoc;
        AssetImpairmentCGUAssets_JP         sourceCguAssets;
        AssetImpairmentCGUGroup_JP          sourceCguGroup;
        AssetImpairmentCGUGroup_JP          targetCguGroup;
        AssetImpairmentCGUSharedAssets_JP   cguSharedAssets;
        TableId                             cguAssetTableId = tableNum(AssetImpairmentCGUAssets_JP);
        boolean                             duplicatedInCGUAsset;
        boolean                             duplicatedInSharedAsset;
        boolean                             isValid;

        AssetImpairmentCGU_JP sourceCGU = AssetImpairmentCGU_JP::findByNumber(_sourceCGU);

        if (!sourceCGU)
        {
            throw error(strFmt("@SYP4880506", _sourceCGU));
        }

        if (this.CGUGroup == sourceCGU.CGUGroup)
        {
            throw error("@SYP4880485");
        }
        else
        {
            ttsBegin;

            sourceCguGroup = AssetImpairmentCGUGroup_JP::find(sourceCGU.CGUGroup);
            targetCguGroup = AssetImpairmentCGUGroup_JP::find(this.CGUGroup);

            if (sourceCguGroup.PostingLayer != targetCguGroup.PostingLayer)
            {
                throw error("@SYP4880633");
            }

            this.ImpairmentAllocBasis = sourceCGU.ImpairmentAllocBasis;
            this.RecoverableAmount = sourceCGU.RecoverableAmount;
            this.RecoverableAmtLastUpdatedDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            this.UndiscountedCashFlow = sourceCGU.UndiscountedCashFlow;
            this.UndiscountedCashFlowLastUpdatedDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            this.update();

            while select sourceCguAssets
                where sourceCguAssets.AssetImpairmentCGU == sourceCGU.RecId
                      && sourceCguAssets.IsSharedAsset == NoYes::No
            {
                isValid = true;

                //Validate fixed assets in source CGU are not exists in other cgu in current cgu group
                select firstOnly RecId from cguAssets
                    where cguAssets.AssetId == sourceCguAssets.AssetId
                          && cguAssets.BookId == sourceCguAssets.BookId
                          && cguAssets.IsSharedAsset == NoYes::No
                exists join cguLoc
                    where cguAssets.AssetImpairmentCGU == cguLoc.RecId
                            && cguLoc.CGUGroup == this.CGUGroup;

                if (cguAssets)
                {
                    duplicatedInCGUAsset = true;
                    isValid = false;
                }

                //Validate fixed assets in source CGU are not exists in the shared assets of current cgu group
                select firstOnly RecId from cguSharedAssets
                    where cguSharedAssets.CGUGroup == this.CGUGroup
                          && cguSharedAssets.AssetId == sourceCguAssets.AssetId
                          && cguSharedAssets.BookId == sourceCguAssets.BookId;
                if (cguSharedAssets)
                {
                    duplicatedInSharedAsset = true;
                    isValid = false;
                }

                if (isValid)
                {
                    newCguAssets.skipDataMethods(false);
                    newCguAssets.initValue();
                    newCguAssets.AssetId = sourceCguAssets.AssetId;
                    newCguAssets.BookId = sourceCguAssets.BookId;
                    if (sourceCguAssets.AllocationPriority)
                    {
                        newCguAssets.AllocationPriority = sourceCguAssets.AllocationPriority;
                    }
                    else
                    {
                        newCguAssets.AllocationPriority = AssetImpairmentCGUAssets_JP::initPriority(targetCguGroup.SharedAssetImpairMethod,
                            targetCguGroup.SharedAssetHasHigherPriority == AssetImpairmentSharedAssetPriority_JP::HigherThanOrdinaryAsset);
                    }
                    newCguAssets.IsSharedAsset = NoYes::No;
                    newCguAssets.AssetImpairmentAllocationMethod_JP = sourceCguAssets.AssetImpairmentAllocationMethod_JP;
                    newCguAssets.ImpairmentHoldingAssetId = sourceCguAssets.ImpairmentHoldingAssetId;
                    newCguAssets.ImpairmentHoldingBookId = sourceCguAssets.ImpairmentHoldingBookId;
                    newCguAssets.AssetImpairmentCGU = this.RecId;
                    newCguAssets.insert();
                }
            }

            if (duplicatedInCGUAsset)
            {
                warning("@SYP4880421");
            }

            if (duplicatedInSharedAsset)
            {
                warning("@SYP4880422");
            }

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init value of asset impairment CGU.
    /// </summary>
    public void initValue()
    {
        super();
        this.UndiscountedCashFlowLastUpdatedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.RecoverableAmtLastUpdatedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert assset impairment CGU.
    /// </summary>
    public void insert()
    {
        AssetImpairmentCGUGroup_JP              cguGroup;
        AssetImpairmentCGUAssets_JP             cguAssets;
        AssetImpairmentCGUSharedAssets_JP       sharedAssets;
        AssetImpairmentCGUSharedAssetsAlloc_JP  allocLoc;
        TableId                                 cguSharedAssetTableId = tableNum(AssetImpairmentCGUSharedAssets_JP);
        NoYes                                   defaultYes = NoYes::Yes;
        RefRecId                                thisRecId;

        ttsBegin;

        super();

        thisRecId = this.RecId;

        cguGroup = AssetImpairmentCGUGroup_JP::find(this.CGUGroup);
        if (cguGroup.SharedAssetImpairMethod == AssetImpairmentSharedAssetsMethod_JP::Method2)
        {
            insert_recordset cguAssets
                (IsSharedAsset, AssetId, BookId, AllocationPriority, AssetImpairmentCGU)
            select defaultYes, AssetId, BookId, AllocationPriority, thisRecId from sharedAssets
                where sharedAssets.CGUGroup == this.CGUGroup;

            insert_recordset allocLoc
                (CGU, SharedAsset)
                select thisRecId, RecId from sharedAssets
                    where sharedAssets.CGUGroup == this.CGUGroup;
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modified field value.
    /// </summary>
    /// <param name = "_fieldName">Field name.</param>
    /// <param name = "_arrayIndex">Index of array.</param>
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(AssetImpairmentCGU_JP, UndiscountedCashFlow):
                this.UndiscountedCashFlowLastUpdatedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                break;
            case fieldStr(AssetImpairmentCGU_JP, RecoverableAmount):
                this.RecoverableAmtLastUpdatedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update record of assetimpairment CGU.
    /// </summary>
    public void update()
    {
        AssetImpairmentCGUGroup_JP              cguGroup;
        AssetImpairmentCGU_JP                   cgu;
        AssetImpairmentCGUSharedAssets_JP       sharedAssets;
        AssetImpairmentCGUSharedAssetsAlloc_JP  allocLoc;
        RefRecId                                groupRefId = this.orig().CGUGroup;

        super();

        if (groupRefId != this.CGUGroup)
        {
            cguGroup = AssetImpairmentCGUGroup_JP::find(groupRefId);
            if (cguGroup.SharedAssetImpairMethod == AssetImpairmentSharedAssetsMethod_JP::Method2)
            {
                ttsBegin;

                delete_from allocLoc
                    where allocLoc.CGU == this.RecId;

                ttsCommit;
            }

            cguGroup = AssetImpairmentCGUGroup_JP::find(this.CGUGroup);
            if (cguGroup.SharedAssetImpairMethod == AssetImpairmentSharedAssetsMethod_JP::Method2)
            {
                insert_recordset allocLoc
                    (CGU, SharedAsset)
                    select RecId from cgu
                        where cgu.RecId == this.RecId
                    join RecId from sharedAssets
                        where sharedAssets.CGUGroup == this.CGUGroup;

                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate delete for asset impairment CGU.
    /// </summary>
    /// <returns>True if the record can be deleted, otherwise false.</returns>
    public boolean validateDelete()
    {
        AssetImpairmentTestResultDocument_JP resultDoc;

        boolean ret;

        ret = super();

        if (ret)
        {
            select firstOnly resultDoc where resultDoc.CGU == this.RecId;
            if (resultDoc)
            {
                ret = checkFailed("@SYP4880486");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a <c>AssetImpairmentCGU_JP</c> record by RecId.
    /// </summary>
    /// <param name="_recId">
    /// The RecId to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A <c>AssetImpairmentCGU_JP</c> record.
    /// </returns>
    public static AssetImpairmentCGU_JP find(
        RefRecId                _recId,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetImpairmentCGU_JP      result;

        if (_recId)
        {
            result.selectForUpdate(_forupdate);
            if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                result.concurrencyModel(_concurrencyModel);
            }

            select firstonly
                result
            where
                result.RecId == _recId;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a <c>AssetImpairmentCGU_JP</c> record by the associated AssetImpairmentCGU_JP's RecId.
    /// </summary>
    /// <param name="_number">
    /// The Asset Impairment CGU Name to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A <c>AssetImpairmentCGU_JP</c> record.
    /// </returns>
    public static AssetImpairmentCGU_JP findByNumber(
        AssetImpairmentCGUName_JP   _number,
        boolean                     _forupdate = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetImpairmentCGU_JP      result;

        if (_number)
        {
            result.selectForUpdate(_forupdate);
            if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                result.concurrencyModel(_concurrencyModel);
            }

            select firstonly
                result
            where
                result.Number == _number;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            AssetImpairmentCGUGroupStatus_JP cguGroupStatus = AssetImpairmentCGUGroup_JP::find(this.CGUGroup).Status;

            if (!this.RecId && cguGroupStatus != AssetImpairmentCGUGroupStatus_JP::Draft)
            {
                ret = checkFailed("@FixedAssetsImpairementAccounting:CannotCreateCGUUnderActiveOrDisabledCGUGroup");
            }

            if (ret && this.RecId)
            {
                if (cguGroupStatus == AssetImpairmentCGUGroupStatus_JP::Active
                    && !this.allowUpdateUnderActiveCGUGroup())
                {
                    ret = checkFailed("@FixedAssetsImpairementAccounting:CannotUpdateCGUUnderActiveCGUGroup");
                }

                if (cguGroupStatus == AssetImpairmentCGUGroupStatus_JP::Disabled)
                {
                    ret = checkFailed("@FixedAssetsImpairementAccounting:CannotUpdateCGUUnderDisabledCGUGroup");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowUpdateUnderActiveCGUGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the cash generating unit can be updated under an active CGU group.
    /// </summary>
    /// <returns>
    /// True if the cash generating unit can be updated; otherwise, false;
    /// </returns>
    public boolean allowUpdateUnderActiveCGUGroup()
    {
        boolean ret = true;

        if (this.ImpairmentAllocBasis != this.orig().ImpairmentAllocBasis
            || this.Name != this.orig().Name)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<CountryRegionCodes>JP</CountryRegionCodes>
	<DeveloperDocumentation>@SYP4880457</DeveloperDocumentation>
	<FormRef>AssetCashGeneratingUnit_JP</FormRef>
	<Label>@SYP4880314</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Number</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>FixedAssets</Modules>
	<ReplacementKey>CGUIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Number</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ImpairmentAllocBasis</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecoverableAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecoverableAmtLastUpdatedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UndiscountedCashFlow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UndiscountedCashFlowLastUpdatedDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CGUGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Number</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CGUGroup</Name>
			<Label>@SYP4880233</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CGUGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Details</Name>
			<Label>@SYS318405</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Number</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UndiscountedCashFlow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecoverableAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ImpairmentAllocBasis</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecoverableAmtLastUpdatedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UndiscountedCashFlowLastUpdatedDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CGUGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYP4880233</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ImpairmentAllocBasis</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetImpairmentCGUAssetAllocBasis_JP</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>@SYS117778</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Number</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AssetImpairmentCGUName_JP</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RecoverableAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetRecoverableAmount_JP</ExtendedDataType>
			<Label>@SYP4880220</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RecoverableAmtLastUpdatedDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetTransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UndiscountedCashFlow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetUndiscountedCashFlow_JP</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>UndiscountedCashFlowLastUpdatedDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetTransDate</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CGUIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Number</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CGUGroupIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CGUGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CGUGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetImpairmentCGUGroup_JP</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CGUGroup</Name>
					<Field>CGUGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>