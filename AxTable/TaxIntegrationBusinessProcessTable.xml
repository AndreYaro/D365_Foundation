<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationBusinessProcessTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxIntegrationBusinessProcessTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>totalCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Count the records in table <c>TaxIntegrationBusinessProcessTable</c>.
    /// </summary>
    /// <returns>The total count.</returns>
    public static int totalCount()
    {
        TaxIntegrationBusinessProcessTable bpTable;

        select count(RecId) from bpTable;

        return int642int(bpTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exists record <c>TaxIntegrationBusinessProcessTable</c> with specified business process or not.
    /// </summary>
    /// <param name = "_businessProcess">The specified business process.</param>
    /// <returns>True if exist; otherwise, false.</returns>
    public static boolean exist(TaxIntegrationBusinessProcess _businessProcess)
    {
        TaxIntegrationBusinessProcessTable bpTable;

        select firstonly bpTable
            where bpTable.BusinessProcess == _businessProcess;

        return bpTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static TaxIntegrationBusinessProcessTable find(TaxIntegrationBusinessProcess _businessProcess, boolean _forUpdate = false)
    {
        TaxIntegrationBusinessProcessTable bpTable;

        if (_forUpdate)
        {
            bpTable.selectForUpdate(_forUpdate);
        }

        select firstonly bpTable
            where bpTable.BusinessProcess == _businessProcess;

        return bpTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save data according to specified business process string which may contains multiple business process seperate with semicolon.
    /// </summary>
    /// <param name = "_businessProcessString">The specified business process.</param>
    [SysObsolete('The method will be obsoleted, please use saveDataBySolutionProvider instead', true, 6\2\2023)]
    public static void saveData(str _businessProcessString)
    {
        TaxIntegrationBusinessProcessTable::saveDataBySolutionProvider(_businessProcessString, TaxSolutionProviderType::Microsoft);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveDataBySolutionProvider</Name>
				<Source><![CDATA[
    public static void saveDataBySolutionProvider(str _businessProcessString, TaxSolutionProviderType _taxSolutionProviderType)
    {
        TaxIntegrationBusinessProcessTable bpTable;

        ttsbegin;
        delete_from bpTable
            where bpTable.SolutionProviderType == _taxSolutionProviderType;

        TaxCache::clearScope(TaxCacheScope::SolutionProviderType);

        if (_businessProcessString)
        {
            container _bpNames = str2con(_businessProcessString, ';');
            DictEnum dictEnum = new DictEnum(enumNum(TaxIntegrationBusinessProcess));
            TaxIntegrationBusinessProcess bpEnum;

            int i;
            for (i = 1; i <= conLen(_bpNames); i++)
            {
                str name = conPeek(_bpNames, i);
                bpEnum = str2Enum(bpEnum, name);

                if (enum2Symbol(enumNum(TaxIntegrationBusinessProcess), bpEnum))
                {
                    bpTable.SolutionProviderType = _taxSolutionProviderType;
                    bpTable.BusinessProcess = bpEnum;
                    bpTable.insert();
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inititialize table <c>TaxIntegrationBusinessProcessTable</c>.
    /// </summary>
    [SysObsolete('Will leave the business process as empty by default.', true, 6\2\2023)]
    public static void init()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<Label>@TaxIntegration:BusinessProcess</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Main</TableGroup>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>BusinessProcess</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Tax</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BusinessProcess</Name>
			<EnumType>TaxIntegrationBusinessProcess</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SolutionProviderType</Name>
			<FeatureClass>TaxServiceUniversalTaxRateAPIFeature</FeatureClass>
			<EnumType>TaxSolutionProviderType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BusinessProcess</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BusinessProcess</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>