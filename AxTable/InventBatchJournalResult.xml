<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventBatchJournalResult</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventBatchJournalResult extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearMergeResultFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears all the merge result data fields.
    /// </summary>
    public void clearMergeResultFields()
    {
        SysDictField                            dictField;
        FieldId                                 fieldId;
        ListEnumerator                          fieldListEnumerator = InventBatchJournalResult::resultMergeFieldList().getEnumerator();
        InventBatchJournalResultAttributeValue  inventBatchJournalResultAttributeValue;
        int                                     i;
        int                                     attributesPerPage = InventBatchJournalAttribute::attributesPerPage();

        while (fieldListEnumerator.moveNext())
        {
            fieldId = fieldListEnumerator.current();
            if (this.(fieldId))
            {
                dictField = new SysDictField(tableNum(InventBatchJournalResult), fieldId);
                this.(fieldId) = nullValueBaseType(dictField.baseType());
            }
        }

        if (#PdsBatchAttribEnabled)
        {
            while select forupdate inventBatchJournalResultAttributeValue
                where inventBatchJournalResultAttributeValue.InventBatchJournalResult == this.RecId
            {
                for (i = 1; i <= attributesPerPage; i++)
                {
                    inventBatchJournalResultAttributeValue.AttributeValue[i] = "";
                }
                inventBatchJournalResultAttributeValue.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeResultAttributeValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Computes the batch attribute values from the source attribute values and stores them in the corresponding result attribute values.
    /// </summary>
    /// <remarks>
    ///     If there are any batch attribute values that cannot be computed, then the resulting attribute value will be blank if there are multiple source attribute
    ///     values that differ; otherwise, the result attribute value is left as is.
    /// </remarks>
    private void computeResultAttributeValues()
    {
        InventBatchJournalSourceAttributeValue  sourceAttributeValue;
        InventBatchJournalResultAttributeValue  resultAttributeValue;
        int                                     attributesPerPage;
        int                                     i;

        InventBatchJournalAttribute             attribute;
        InventBatchJournalAttributeCalculator   attributeCalculator;
        InventBatchJournalSource                source;
        InventDim                               inventDim;
        Map                                     attributeCalculatorMap;

        if (#PdsBatchAttribEnabled)
        {
            attributesPerPage       = InventBatchJournalAttribute::attributesPerPage();
            attributeCalculatorMap  = new Map(Types::String, Types::Class);

            // Walk through all source attribute values. Each attribute value must be considered in order to perform batch attribute calculations. In other words, the
            // computations may be progressive such as in the case of weighted averages.
            while select sourceAttributeValue
                where sourceAttributeValue.InventBatchJournal == this.InventBatchJournal
                join attribute
                    where attribute.InventBatchJournal  == sourceAttributeValue.InventBatchJournal
                        && attribute.AttributePage      == sourceAttributeValue.AttributePage
                join InventQty, cwInventQty
                    from source
                    where source.InventBatchJournal == this.InventBatchJournal
                exists join inventDim
                    where inventDim.InventDimId     == source.InventDimId
                        && inventDim.InventBatchId  == sourceAttributeValue.InventBatchId
            {
                resultAttributeValue = this.readAttributesForUpdate(sourceAttributeValue.AttributePage);
                for (i = 1; i <= attributesPerPage; ++i)
                {
                    // For every valid attribute column ...
                    if (attribute.AttributeId[i])
                    {
                        // ... create calculator for that column
                        if (attributeCalculatorMap.exists(attribute.AttributeId[i]))
                        {
                            attributeCalculator = attributeCalculatorMap.lookup(attribute.AttributeId[i]);
                        }
                        else
                        {
                            attributeCalculator = InventBatchJournalAttributeCalculator::newCalculator(attribute.AttributeId[i]);
                            attributeCalculatorMap.insert(attribute.AttributeId[i], attributeCalculator);
                        }

                        if (attributeCalculator.batchAttributeSupported())
                        {
                            // Only include batch attributes that have an actual value into the computations.
                            if (sourceAttributeValue.AttributeValue[i])
                            {
                                resultAttributeValue.AttributeValue[i] = attributeCalculator.compute(sourceAttributeValue.AttributeValue[i], source);
                            }
                        }
                        else
                        {
                            if (resultAttributeValue.AttributeValue[i] != sourceAttributeValue.AttributeValue[i])
                            {
                                resultAttributeValue.AttributeValue[i] = '';
                            }
                        }
                    }
                }
                resultAttributeValue.write();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyMergeResultFrom</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies data from a batch journal source into a merge result record.
    /// </summary>
    /// <param name="_sourceInventDim">
    ///    The record for the <c>InventDim</c> table with the dimensions to apply to the result record.
    /// </param>
    public void copyMergeResultFrom(InventDim _sourceInventDim)
    {
        InventBatch                             inventBatch;
        InventDim                               inventDim;
        InventBatchJournalSourceAttributeValue  inventBatchJournalSourceAttributeValue;
        InventBatchJournalResultAttributeValue  inventBatchJournalResultAttributeValue;
        int                                     attributesPerPage = InventBatchJournalAttribute::attributesPerPage();
        int                                     i;

        inventBatch = InventBatch::find(_sourceInventDim.InventBatchId, this.inventBatchJournal().ItemId);

        _sourceInventDim.InventBatchId = "";
        inventDim = _sourceInventDim;

        this.initFromInventBatch(inventBatch);

        this.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;

        if (#PdsBatchAttribEnabled)
        {
            while select inventBatchJournalSourceAttributeValue
                where inventBatchJournalSourceAttributeValue.InventBatchJournal == this.InventBatchJournal
                    && inventBatchJournalSourceAttributeValue.InventBatchId     == inventBatch.InventBatchId
            {
                inventBatchJournalResultAttributeValue = this.readAttributesForUpdate(inventBatchJournalSourceAttributeValue.AttributePage);
                for (i = 1; i <= attributesPerPage; i++)
                {
                    inventBatchJournalResultAttributeValue.AttributeValue[i] = inventBatchJournalSourceAttributeValue.AttributeValue[i];
                }
                inventBatchJournalResultAttributeValue.write();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateValueByDateCalculationMethod</Name>
				<Source><![CDATA[
        private date dateValueByDateCalculationMethod(date _mergeBatchDateValue, date _batchDateValue)
    {
        date value;

        switch (this.BatchMergeDateCalculationMethod)
        {
            case InventBatchMergeDateCalculationMethod::Manual:
                value = dateNull();
                break;
            case InventBatchMergeDateCalculationMethod::Earliest:
                value = min(_mergeBatchDateValue ? _mergeBatchDateValue : dateMax(), _batchDateValue ? _batchDateValue : dateMax());
                break;
            case InventBatchMergeDateCalculationMethod::Latest:
                value = max(_mergeBatchDateValue, _batchDateValue);
                break;
        }

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispositionStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the batch disposition status that is associated to the <c>InventBatch</c> record.
    /// </summary>
    /// <returns>
    ///    The disposition status associated with the <c>InventBatch</c> record.
    /// </returns>
    public display PdsBatchDispositionStatus dispositionStatus()
    {
        PdsBatchDispositionStatus status = PdsStatus::NotApplicable;

        if (this.DispositionCode)
        {
            status = this.pdsDispositionMaster().Status;
        }

        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillInventBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the fields in the given inventory batch record.
    /// </summary>
    /// <param name="_inventBatch">
    ///    The record of the <c>InventBatch</c> table to set the fields in.
    /// </param>
    public void fillInventBatch(InventBatch _inventBatch)
    {
        _inventBatch.ExpDate                = this.InventBatchExpDate;
        _inventBatch.ProdDate               = this.InventBatchProdDate;
        _inventBatch.PdsShelfAdviceDate     = this.ShelfAdviceDate;
        _inventBatch.PdsBestBeforeDate      = this.BestBeforeDate;
        _inventBatch.PdsVendBatchId         = this.VendBatchId;
        _inventBatch.PdsVendExpiryDate      = this.VendExpiryDate;
        _inventBatch.PdsVendBatchDate       = this.VendBatchDate;
        _inventBatch.PdsUseVendBatchDate    = this.UseVendBatchDate;
        _inventBatch.PdsUseVendBatchExp     = this.UseVendBatchExp;
        _inventBatch.PdsCountryOfOrigin1    = this.CountryOfOrigin1;
        _inventBatch.PdsCountryOfOrigin2    = this.CountryOfOrigin2;
        _inventBatch.PdsDispositionCode     = this.DispositionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initilizes the fields from the given inventory batch record.
    /// </summary>
    /// <param name="_inventBatch">
    ///    The record of the <c>InventBatch</c> table.
    /// </param>
    public void initFromInventBatch(InventBatch _inventBatch)
    {
        this.InventBatchExpDate     = _inventBatch.ExpDate;
        this.InventBatchProdDate    = _inventBatch.ProdDate;
        this.ShelfAdviceDate        = _inventBatch.PdsShelfAdviceDate;
        this.BestBeforeDate         = _inventBatch.PdsBestBeforeDate;
        this.VendBatchId            = _inventBatch.PdsVendBatchId;
        this.VendExpiryDate         = _inventBatch.PdsVendExpiryDate;
        this.VendBatchDate          = _inventBatch.PdsVendBatchDate;
        this.UseVendBatchDate       = _inventBatch.PdsUseVendBatchDate;
        this.UseVendBatchExp        = _inventBatch.PdsUseVendBatchExp;
        this.CountryOfOrigin1       = _inventBatch.PdsCountryOfOrigin1;
        this.CountryOfOrigin2       = _inventBatch.PdsCountryOfOrigin2;
        this.DispositionCode        = _inventBatch.PdsDispositionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds inventory dimensions referenced by the current record.
    /// </summary>
    /// <returns>
    /// Inventory dimensions referenced by the current record.
    /// </returns>
    public InventDim inventDim()
    {
        return InventDim::find(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimResultFieldValidate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates input for inventory dimenion fields related to this buffer for the <c>InventBatchJournalResult</c> table.
    /// </summary>
    /// <param name="_inventDim">
    ///    The record for the <c>InventDim</c> table.
    /// </param>
    /// <param name="_inventDimFieldId">
    ///    The ID of the field in <paramref name="_inventDim"/> to validate.
    /// </param>
    /// <returns>
    ///    true if the field is valid; otherwise, false.
    /// </returns>
    public boolean inventDimResultFieldValidate(InventDim _inventDim, FieldId _inventDimFieldId)
    {
        InventBatch inventBatch;
        boolean     ret = true;

        switch (_inventDimFieldId)
        {
            case fieldNum(InventDim, InventBatchId):
                if (_inventDim.InventBatchId)
                {
                    inventBatch = InventBatch::find(_inventDim.InventBatchId, this.inventBatchJournal().ItemId);

                    if (!inventBatch)
                    {
                        ret = checkFailed(strFmt("@SYS54778", _inventDim.InventBatchId, this.inventBatchJournal().ItemId));
                    }

                    if (ret && inventBatch.hasAnyInventTrans())
                    {
                        ret = checkFailed(strFmt("@SYS4001874", _inventDim.InventBatchId));
                    }
                }
                break;

            case fieldNum(InventDim, InventProfileId_RU):
                if (_inventDim.InventProfileId_RU
                    && _inventDim.inventProfile_RU().InventProfileType == InventProfileType_RU::Bailee)
                {
                    ret = checkFailed("@SYS4001448");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the inventory unit ID for display purposes.
    /// </summary>
    /// <returns>
    ///    The inventory unit ID.
    /// </returns>
    public display UnitOfMeasureSymbol inventUnitId()
    {
        return this.inventBatchJournal().inventUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isShelfLifeField</Name>
				<Source><![CDATA[
        private boolean isShelfLifeField(FieldId _batchJournalResultFieldId)
    {
        boolean isShelfLifeField;

        switch (_batchJournalResultFieldId)
        {
            case fieldNum(InventBatchJournalResult, BestBeforeDate):
                isShelfLifeField = true;
                break;
            case fieldNum(InventBatchJournalResult, InventBatchExpDate):
                isShelfLifeField = true;
                break;
            case fieldNum(InventBatchJournalResult, InventBatchProdDate):
                isShelfLifeField = true;
                break;
            case fieldNum(InventBatchJournalResult, ShelfAdviceDate):
                isShelfLifeField = true;
                break;
        }

        return isShelfLifeField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the catch weight unit ID for display purposes.
    /// </summary>
    /// <returns>
    ///    The catch weight unit ID.
    /// </returns>
    public display PdsCWUnitId pdsCWUnitId()
    {
        return this.inventBatchJournal().pdsCWUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>readAttributesForUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reads a record from the <c>InventBatchJournalResultAttributeValue</c> table related to this result for a given page in preparation for an update operation.
    /// </summary>
    /// <param name="_page">
    ///    The attribute page number.
    /// </param>
    /// <returns>
    ///    A record of the <c>InventBatchJournalResultAttributeValue</c> table that can be inserted or updated.
    /// </returns>
    private InventBatchJournalResultAttributeValue readAttributesForUpdate(InventBatchJournalAttributePage _page)
    {
        InventBatchJournalResultAttributeValue inventBatchJournalResultAttributeValue;

        inventBatchJournalResultAttributeValue = InventBatchJournalResultAttributeValue::find(this.RecId, _page, true);
        if (!inventBatchJournalResultAttributeValue.RecId)
        {
            inventBatchJournalResultAttributeValue.InventBatchJournalResult = this.RecId;
            inventBatchJournalResultAttributeValue.AttributePage            = _page;
        }

        return inventBatchJournalResultAttributeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setResultField</Name>
				<Source><![CDATA[
        private anytype setResultField(FieldId _batchJournalResultFieldId, anytype _batchValue)
    {
        anytype value;

        if (!this.isShelfLifeField(_batchJournalResultFieldId))
        {
            value = nullValueBaseType(new SysDictField(this.TableId, _batchJournalResultFieldId).baseType());
        }
        else
        {
            value = this.dateValueByDateCalculationMethod(this.(_batchJournalResultFieldId), _batchValue);
        }

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summarizeMergeResultFrom</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Summarizes a result record from a given inventory batch source record by combining the values together using a simple
    ///    algorithm.
    /// </summary>
    /// <param name="_sourceInventDim">
    ///    The record for the <c>InventDim</c> table with the dimensions to apply to the result record.
    /// </param>
    /// <remarks>
    ///    This provides the basic algorithm result calcuation rule for merging which is if the existing result
    ///    field value is the same as in the batch record then keep the value, otherwise set the field
    ///    to blank (or null as appropriate for the field type).
    /// </remarks>
    public void summarizeMergeResultFrom(InventDim _sourceInventDim)
    {
        InventBatch     inventBatch;
        FieldId         fieldId;
        FieldId         batchFieldId;
        ListEnumerator  fieldListEnumerator = InventBatchJournalResult::resultMergeFieldList().getEnumerator();

        InventDim       inventDim;
        ListEnumerator  dimFieldEnumerator;

        int             attributesPerPage = InventBatchJournalAttribute::attributesPerPage();

        inventBatch = InventBatch::find(_sourceInventDim.InventBatchId, this.inventBatchJournal().ItemId);

        while (fieldListEnumerator.moveNext())
        {
            fieldId = fieldListEnumerator.current();
            if (this.(fieldId)
                || this.isShelfLifeField(fieldId))
            {
                batchFieldId = InventBatchJournalResult::lineFieldIdToBatchFieldId(fieldId);
                if (batchFieldId)
                {
                    if (this.(fieldId) != inventBatch.(batchFieldId))
                    {
                        this.(fieldId) = this.setResultField(fieldId, inventBatch.(batchFieldId));
                    }
                }
            }
        }

        // Special rules for the UseVendor* fields
        if (!this.VendBatchDate)
        {
            this.UseVendBatchDate = NoYes::No;
        }

        if (!this.VendExpiryDate)
        {
            this.UseVendBatchExp = NoYes::No;
        }

        // Handle InventDim fields
        if (!this.InventDimId)
        {
            _sourceInventDim.InventBatchId = "";
            inventDim = _sourceInventDim;
        }
        else
        {
            inventDim          = this.inventDim();
            dimFieldEnumerator = InventDim::dimFieldListEnumerator();
            while (dimFieldEnumerator.moveNext())
            {
                fieldId = dimFieldEnumerator.current();
                if (fieldId != fieldNum(InventDim, InventBatchId)
                    && inventDim.(fieldId)
                    && inventDim.(fieldId) != _sourceInventDim.(fieldId))
                {
                    inventDim.clearField(fieldId);
                }
            }
        }

        this.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;
        this.computeResultAttributeValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndUpdateResultDateFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates if the specified result field is valid and possibly updates other fields depending on user responses.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    ///    The ID of the field to check.
    /// </param>
    /// <returns>
    ///    true if the field value is valid; otherwise, false.
    /// </returns>
    private boolean validateAndUpdateResultDateFields(FieldId _fieldIdToCheck)
    {
        PdsResetShelfDateValid  pdsResetShelfDateValid = PdsResetShelfDateValid::newInventBatchJournalResult(this);
        boolean                 ok                     = true;

        pdsResetShelfDateValid.parmCheckExpiryAfterUpdates(true);

        switch (_fieldIdToCheck)
        {
            case fieldNum(InventBatchJournalResult, InventBatchProdDate):
                ok = pdsResetShelfDateValid.validateAndUpdateProdDate(this.InventBatchProdDate);
                if (ok && this.InventBatchProdDate != this.VendBatchDate)
                {
                    this.UseVendBatchDate = NoYes::No;
                }
                break;
            case fieldNum(InventBatchJournalResult, InventBatchExpDate):
                ok = pdsResetShelfDateValid.validateAndUpdateExpiryDate(this.InventBatchExpDate);
                if (ok && this.InventBatchExpDate != this.VendExpiryDate)
                {
                    this.UseVendBatchExp = NoYes::No;
                }
                break;
            case fieldNum(InventBatchJournalResult, BestBeforeDate):
                ok = pdsResetShelfDateValid.validateAndUpdateBestBeforeDate(this.BestBeforeDate);
                break;
            case fieldNum(InventBatchJournalResult, ShelfAdviceDate):
                ok = pdsResetShelfDateValid.validateAndUpdateShelfAdviceDate(this.ShelfAdviceDate);
                break;
            case fieldNum(InventBatchJournalResult, UseVendBatchDate):
                if (this.UseVendBatchDate && this.VendBatchDate != this.InventBatchProdDate)
                {
                    ok = pdsResetShelfDateValid.validateAndUpdateProdDate(this.VendBatchDate);
                }
                break;
            case fieldNum(InventBatchJournalResult, UseVendBatchExp):
                if (this.UseVendBatchExp && this.VendExpiryDate != this.InventBatchExpDate)
                {
                    ok = pdsResetShelfDateValid.validateAndUpdateExpiryDate(this.VendExpiryDate);
                }
                break;
        }

        if (ok)
        {
            this.InventBatchProdDate = pdsResetShelfDateValid.parmProdDate();
            this.InventBatchExpDate  = pdsResetShelfDateValid.parmExpiryDate();
            this.BestBeforeDate      = pdsResetShelfDateValid.parmBestBeforeDate();
            this.ShelfAdviceDate     = pdsResetShelfDateValid.parmShelfAdviceDate();
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean     ret;
        InventBatch inventBatch;
        FieldId     inventBatchFieldId = InventBatchJournalResult::lineFieldIdToBatchFieldId(_fieldIdToCheck);

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            if (inventBatchFieldId)
            {
                this.fillInventBatch(inventBatch);
                ret = inventBatch.validateField(inventBatchFieldId);

                // Change errors for Vendor Expiry Date to warnings only
                if (!ret && inventBatchFieldId == fieldNum(InventBatch, PdsVendExpiryDate))
                {
                    ret = true;
                }
            }

            if (ret && (_fieldIdToCheck == fieldNum(InventBatchJournalResult, InventBatchProdDate)
                || _fieldIdToCheck == fieldNum(InventBatchJournalResult, InventBatchExpDate)
                || _fieldIdToCheck == fieldNum(InventBatchJournalResult, BestBeforeDate)
                || _fieldIdToCheck == fieldNum(InventBatchJournalResult, ShelfAdviceDate)
                || _fieldIdToCheck == fieldNum(InventBatchJournalResult, UseVendBatchDate)
                || _fieldIdToCheck == fieldNum(InventBatchJournalResult, UseVendBatchExp)))
            {
                ret = this.validateAndUpdateResultDateFields(_fieldIdToCheck);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean     ret;
        InventBatch inventBatch;

        ret = super();

        if (ret)
        {
            this.fillInventBatch(inventBatch);
            ret = inventBatch.pdsValidateBestBeforeDate();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if the record for the <c>InventBatchJournalResult</c> table exists.
    /// </summary>
    /// <param name="_journalRefRecId">
    ///    The inventory batch journal record ID to search for.
    /// </param>
    /// <param name="_inventDimId">
    ///    The inventory dimension ID to search for.
    /// </param>
    /// <returns>
    ///    true if the record for the <c>InventBatchJournalResult</c> table exists; otherwise, false.
    /// </returns>
    public static boolean exist(InventBatchJournalRecId _journalRefRecId, InventDimId _inventDimId)
    {
        return _journalRefRecId && _inventDimId
            && (select inventBatchJournalResult
                where inventBatchJournalResult.InventBatchJournal == _journalRefRecId
                    && inventBatchJournalResult.InventDimId       == _inventDimId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if a record for <c>InventBatchJournalResult</c> table exists for the journal.
    /// </summary>
    /// <param name="_journalRefRecId">
    ///    The batch handling journal record ID to search for.
    /// </param>
    /// <returns>
    ///    true if a record for the <c>InventBatchJournalResult</c> table exists for the given journal ID; otherwise, false.
    /// </returns>
    public static boolean existForJournal(InventBatchJournalRecId _journalRefRecId)
    {
        return _journalRefRecId
            && (select inventBatchJournalResult
                where inventBatchJournalResult.InventBatchJournal == _journalRefRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the first matching record for the <c>InventBatchJournalResult</c> table.
    /// </summary>
    /// <param name="_journalRefRecId">
    ///    The inventory batch journal record ID to search for.
    /// </param>
    /// <param name="_inventDimId">
    ///    The inventory dimension ID to search for.
    /// </param>
    /// <param name="_forUpdate">
    ///    Determines if the record should be locked for update; optional.
    /// </param>
    /// <returns>
    ///    The matching record in the <c>InventBatchJournalResult</c> table or an empty buffer if no such
    ///    record is found.
    /// </returns>
    public static InventBatchJournalResult find(InventBatchJournalRecId _journalRefRecId, InventDimId _inventDimId, boolean _forUpdate = false)
    {
        InventBatchJournalResult inventBatchJournalResult;

        if (_journalRefRecId && _inventDimId)
        {
            inventBatchJournalResult.selectForUpdate(_forUpdate);

            select firstonly inventBatchJournalResult
                where inventBatchJournalResult.InventBatchJournal == _journalRefRecId
                    && inventBatchJournalResult.InventDimId       == _inventDimId;
        }

        return inventBatchJournalResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirst</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the first record for the <c>InventBatchJournalResult</c> table for the journal.
    /// </summary>
    /// <param name="_journalRefRecId">
    ///    The batch handling journal record ID to search for.
    /// </param>
    /// <param name="_forUpdate">
    ///    Determines if the record should be locked for update; optional.
    /// </param>
    /// <returns>
    ///    The first record in the <c>InventBatchJournalResult</c> table for the journal or an empty buffer if no such
    ///    record is found.
    /// </returns>
    public static InventBatchJournalResult findFirst(InventBatchJournalRecId _journalRefRecId, boolean _forUpdate = false)
    {
        InventBatchJournalResult inventBatchJournalResult;

        if (_journalRefRecId)
        {
            inventBatchJournalResult.selectForUpdate(_forUpdate);

            select firstonly inventBatchJournalResult
                where inventBatchJournalResult.InventBatchJournal == _journalRefRecId;
        }

        return inventBatchJournalResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineFieldIdToBatchFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the field ID for the corresponding field in the <c>InventBatch</c> table.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field ID in the <c>InventBatchJournalResult</c> table.
    /// </param>
    /// <returns>
    ///    The corresponding field ID in the <c>InventBatch</c> table or 0 (zero) if the field
    ///    does not have a corresponding field in the <c>InventBatch</c> table.
    /// </returns>
    private static FieldId lineFieldIdToBatchFieldId(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(InventBatchJournalResult, InventBatchExpDate):
                return fieldNum(InventBatch, ExpDate);
            case fieldNum(InventBatchJournalResult, InventBatchProdDate):
                return fieldNum(InventBatch, ProdDate);
            case fieldNum(InventBatchJournalResult, ShelfAdviceDate):
                return fieldNum(InventBatch, PdsShelfAdviceDate);
            case fieldNum(InventBatchJournalResult, BestBeforeDate):
                return fieldNum(InventBatch, PdsBestBeforeDate);
            case fieldNum(InventBatchJournalResult, VendBatchId):
                return fieldNum(InventBatch, PdsVendBatchId);
            case fieldNum(InventBatchJournalResult, VendExpiryDate):
                return fieldNum(InventBatch, PdsVendExpiryDate);
            case fieldNum(InventBatchJournalResult, VendBatchDate):
                return fieldNum(InventBatch, PdsVendBatchDate);
            case fieldNum(InventBatchJournalResult, UseVendBatchDate):
                return fieldNum(InventBatch, PdsUseVendBatchDate);
            case fieldNum(InventBatchJournalResult, UseVendBatchExp):
                return fieldNum(InventBatch, PdsUseVendBatchExp);
            case fieldNum(InventBatchJournalResult, CountryOfOrigin1):
                return fieldNum(InventBatch, PdsCountryOfOrigin1);
            case fieldNum(InventBatchJournalResult, CountryOfOrigin2):
                return fieldNum(InventBatch, PdsCountryOfOrigin2);
            case fieldNum(InventBatchJournalResult, DispositionCode):
                return fieldNum(InventBatch, PdsDispositionCode);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resultMergeFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a list of field IDs of the result merge data fields in an <c>InventBatchJournalResult</c> table buffer.
    /// </summary>
    /// <returns>
    ///    A list of field IDs of the result merge data fields.
    /// </returns>
    public static List resultMergeFieldList()
    {
        SysDictTable    dictTable = new SysDictTable(tableNum(InventBatchJournalResult));
        int             fieldCnt;
        int             fieldCntMax;
        FieldId         fieldId;
        List            fieldList = new List(Types::Integer);

        fieldCntMax = dictTable.fieldCntWithoutSys();
        for (fieldCnt = 1; fieldCnt <= fieldCntMax; fieldCnt++)
        {
            fieldId = dictTable.fieldCnt2Id(fieldCnt);

            if (fieldId != fieldNum(InventBatchJournalResult, InventBatchJournal)
                && fieldId != fieldNum(InventBatchJournalResult, InventDimId)
                && fieldId != fieldNum(InventBatchJournalResult, InventQty)
                && fieldId != fieldNum(InventBatchJournalResult, cwInventQty)
                && fieldId != fieldNum(InventBatchJournalResult, BatchMergeDateCalculationMethod))
            {
                fieldList.addEnd(fieldId);
            }
        }

        return fieldList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventBatchJournal</Name>
				<Source><![CDATA[
        public InventBatchJournal InventBatchJournal(InventBatchJournal _relatedTable = null)
        {
            if (prmIsDefault(_relatedTable))
            {
                return this.setLink('InventBatchJournal');
            }
            else
            {
                return this.setLink('InventBatchJournal', _relatedTable);
            }
        }

]]></Source>
			</Method>
			<Method>
				<Name>PdsDispositionMaster</Name>
				<Source><![CDATA[
        public PdsDispositionMaster PdsDispositionMaster(PdsDispositionMaster _relatedTable = null)
        {
            if (prmIsDefault(_relatedTable))
            {
                return this.setLink('PdsDispositionMaster');
            }
            else
            {
                return this.setLink('PdsDispositionMaster', _relatedTable);
            }
        }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS4001870</DeveloperDocumentation>
	<Label>@SYS4001869</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>InventBatchJournal</TitleField1>
	<TitleField2>InventDimId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CWInventQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BatchDates</Name>
			<Label>@PDS1940</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BatchMergeDateCalculationMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventBatchProdDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShelfAdviceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BestBeforeDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventBatchExpDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Disposition</Name>
			<Label>@PRO175</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DispositionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>dispositionStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventBatchJournal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Quantities</Name>
			<Label>@PRO1693</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CWInventQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendorData</Name>
			<Label>@PDS1357</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendBatchDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseVendBatchDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendExpiryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseVendBatchExp</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryOfOrigin1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryOfOrigin2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendBatchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BatchMergeDateCalculationMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventBatchMergeDateCalculationMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>BestBeforeDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBestBeforeDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountryOfOrigin1</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCountryOfOrigin1</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountryOfOrigin2</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCountryOfOrigin2</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CWInventQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DispositionCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsDispositionCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InventBatchExpDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventBatchExpDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InventBatchJournal</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventBatchJournalRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InventBatchProdDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventBatchProdDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ShelfAdviceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsShelfAdviceDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseVendBatchDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsUseVendBatchDate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseVendBatchExp</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsUseVendBatchExp</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>VendBatchDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsVendBatchDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendBatchId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsVendBatchId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>VendExpiryDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsVendExpiryDate</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BatchJournalDimIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>InventBatchJournal</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CountryOfOrigin1</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CountryOfOrigin1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventBatchHandlingLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryOfOrigin1</Name>
					<Field>CountryOfOrigin1</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CountryOfOrigin2</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CountryOfOrigin2</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventBatchHandlingLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryOfOrigin2</Name>
					<Field>CountryOfOrigin2</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventBatchJournal</Name>
			<Cardinality>ZeroMore</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventBatchJournal</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventBatchJournal</Name>
					<Field>InventBatchJournal</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PdsDispositionMaster</Name>
			<Cardinality>ZeroMore</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PdsDispositionMaster</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DispositionCode</Name>
					<Field>DispositionCode</Field>
					<RelatedField>DispositionCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DispositionCodeIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>