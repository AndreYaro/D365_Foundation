<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanWorkCellCapacity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LeanWorkCellCapacity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustPrecision</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adjusts the precision of the value fields by using the configuration of the respectively selected
    ///    units of measure.
    /// </summary>
    private void adjustPrecision()
    {
        // adjust precision for quantity value
        this.AverageThroughputQuantity =
            decRound(this.AverageThroughputQuantity,
                    UnitOfMeasure::unitOfMeasureDecimalPrecision(this.CapacityUnitOfMeasure));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        // make sure the values we store are consistent with the UoM settings
        this.adjustPrecision();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(LeanWorkCellCapacity, CapacityUnitOfMeasure):
                // adjust precision of value fields depending on selected UoMs
                this.adjustPrecision();
                // fall through
            default:
                super(_fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>productionFlowModel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record in the <c>LeanProductionFlowModel</c> table for the current record.
    /// </summary>
    /// <returns>
    ///    A <c>LeanProductionFlowModel</c> table buffer.
    /// </returns>
    public LeanProductionFlowModel productionFlowModel()
    {
        return LeanProductionFlowModel::find(this.ProductionFlowModel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>productionFlowModelType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the model type of the production flow model that is associated with the lean location.
    /// </summary>
    /// <returns>
    ///    The production flow model type
    /// </returns>
    public display LeanProdFlowModelType productionFlowModelType()
    {
        return LeanProductionFlowModel::find(this.ProductionFlowModel).ModelType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        // make sure the values we store are consistent with the UoM settings
        this.adjustPrecision();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean                 result;
        LeanProdFlowModelType   leanProdFlowModelType;

        result = super(_fieldIdToCheck);

        if (result)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(LeanWorkCellCapacity, CapacityUnitOfMeasure):
                    leanProdFlowModelType = this.productionFlowModel().ModelType;
                    result                = leanProdFlowModelType != 0;

                    if (   result
                        && this.CapacityUnitOfMeasure
                        && leanProdFlowModelType == LeanProdFlowModelTypes::Hours)
                    {
                        result = checkFailed("@SYS306917");
                    }
                break;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean                     ret;
        LeanWorkCellCapacity        leanWorkCellCapacity;
        LeanProductionFlowModel     leanProductionFlowModel;
        LeanProductionFlowModel     prodFlowModelModel = LeanProductionFlowModel::find(this.ProductionFlowModel);

        ret = super();

        select leanWorkCellCapacity join ModelType from leanProductionFlowModel
            where leanWorkCellCapacity.ProductionFlowModel  == leanProductionFlowModel.RecId &&
                  leanWorkCellCapacity.WorkCell             == this.WorkCell                 &&
                  leanProductionFlowModel.ModelType         != prodFlowModelModel.ModelType;

        if (leanWorkCellCapacity)
        {
            // Capacity is already expressed using the model type %1. Only production flow models of the same type can be selected.
            ret = ret && checkFailed(strFmt("@SYS133513", leanProductionFlowModel.ModelType));
        }

        if (prodFlowModelModel.ModelType == LeanProdFlowModelTypes::Throughput)
        {
            if (!this.CapacityPeriod)
            {
                // Capacity period must be specifed for model type Throughput
                ret = ret && checkFailed("@SYS132223");
            }

            if (!this.AverageThroughputQuantity)
            {
                // Capacity must be specifed for model type Throughput
                ret = ret && checkFailed("@SYS132224");
            }
        }
        else
        {
            if (this.CapacityPeriod)
            {
                // Capacity period must not be specifed for model type Hours
                ret = ret && checkFailed("@SYS132225");
            }

            if (this.AverageThroughputQuantity)
            {
                // Capacity must not be specifed for model type Hours
                ret = ret && checkFailed("@SYS132226");
            }
        }

        if (!this.ValidToDate ||
             this.ValidToDate == maxDate())
        {
            select firstonly leanWorkCellCapacity
                where leanWorkCellCapacity.WorkCell == this.WorkCell
                   && leanWorkCellCapacity.RecId    != this.RecId
                   && (leanWorkCellCapacity.ValidToDate == maxDate()
                   ||  leanWorkCellCapacity.ValidToDate == dateNull());

            if (leanWorkCellCapacity)
            {
                // Only one capacity period without valid to date is allowed
                ret = ret && checkFailed("@SYS133514");
            }
        }
        else if (this.ValidFromDate > this.ValidToDate)
        {
            // Valid from date must be before valid to date
            ret = ret && checkFailed("@SYS133516");
        }

        if (ret)
        {
            select firstonly RecId from leanWorkCellCapacity
                where leanWorkCellCapacity.RecId     != this.RecId
                   && leanWorkCellCapacity.WorkCell  == this.WorkCell
                   &&  ((leanWorkCellCapacity.ValidFromDate <= this.ValidFromDate
                     &&  (leanWorkCellCapacity.ValidToDate  >= this.ValidFromDate
                     ||   leanWorkCellCapacity.ValidToDate  == dateNull()))
                     || (leanWorkCellCapacity.ValidFromDate <= this.ValidToDate
                     &&  (leanWorkCellCapacity.ValidToDate  >= this.ValidToDate
                     ||   leanWorkCellCapacity.ValidToDate  == dateNull()))
                     || (leanWorkCellCapacity.ValidFromDate >= this.ValidFromDate
                     &&  ((leanWorkCellCapacity.ValidToDate <= this.ValidToDate
                     &&    leanWorkCellCapacity.ValidToDate != dateNull())
                     ||   this.ValidToDate                  == dateNull())));

            if (leanWorkCellCapacity)
            {
                // There is already capacity defined for the period
                ret = checkFailed("@SYS133515");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrkCtrId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the work cell ID.
    /// </summary>
    /// <returns>
    /// A <c>WrkCtrId</c> string value.
    /// </returns>
    public WrkCtrId wrkCtrId()
    {
        WrkCtrResourceGroup     wrkCtrResourceGroup;

        if (this.WorkCell)
        {
            select firstonly WrkCtrId from wrkCtrResourceGroup
                where wrkCtrResourceGroup.RecId == this.WorkCell;
        }

        return wrkCtrResourceGroup.WrkCtrId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>LeanWorkCellCapacity</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        return _recId && (select RecId from leanWorkCellCapacity where leanWorkCellCapacity.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>LeanWorkCellCapacity</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>LeanWorkCellCapacity</c> table; otherwise, an empty record.
    /// </returns>
    public static LeanWorkCellCapacity find(recId _recId, boolean _forupdate = false)
    {
        LeanWorkCellCapacity leanWorkCellCapacity;

        leanWorkCellCapacity.selectForUpdate(_forupdate);

        select leanWorkCellCapacity
            where leanWorkCellCapacity.RecId == _recId;

        return leanWorkCellCapacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActiveForWorkCell</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the active <c>LeanWorkCellCapacity</c> record for a lean location at a specified date and
    ///    time.
    /// </summary>
    /// <param name="_workCellRecId">
    ///    The record ID of the <c>LeanWorkCell</c> record.
    /// </param>
    /// <param name="_date">
    ///    The date in the company time zone to use with the search.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>LeanCellCapacity</c> table; otherwise, an empty record.
    /// </returns>
    public static LeanWorkCellCapacity findActiveForWorkCell(
        WrkCtrResourceGroupRefRecId    _workCellRecId,
        TransDate                      _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),    //company TZ
        boolean                        _forupdate = false)
    {
        LeanWorkCellCapacity leanWorkCellCapacity;

        if (_workCellRecId)
        {
            leanWorkCellCapacity.selectForUpdate(_forupdate);

            select leanWorkCellCapacity
                where leanWorkCellCapacity.WorkCell       == _workCellRecId
                   && leanWorkCellCapacity.ValidFromDate  <= _date
                   && (leanWorkCellCapacity.ValidToDate   >= _date
                   ||  !leanWorkCellCapacity.ValidToDate);
        }

        return leanWorkCellCapacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findForwardForWorkCell</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first available <c>LeanWorkCellCapacity</c> record for a lean location that starts at a
    /// specified date and time.
    /// </summary>
    /// <param name="_workCellRecId">
    /// The record ID of the <c>LeanWorkCell</c> record.
    /// </param>
    /// <param name="_date">
    /// The date in the company time zone that is used in the search.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>LeanCellCapacity</c> table; otherwise, an empty record.
    /// </returns>
    public static LeanWorkCellCapacity findForwardForWorkCell(
        WrkCtrResourceGroupRefRecId    _workCellRecId,
        TransDate                      _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),    //company TZ
        boolean                        _forupdate = false)
    {
        LeanWorkCellCapacity leanWorkCellCapacity;

        if (_workCellRecId)
        {
            leanWorkCellCapacity.selectForUpdate(_forupdate);

            select firstonly leanWorkCellCapacity
                order by ValidFromDate asc
                where leanWorkCellCapacity.WorkCell       == _workCellRecId
                   && (leanWorkCellCapacity.ValidToDate   >= _date
                   ||  !leanWorkCellCapacity.ValidToDate);
        }

        return leanWorkCellCapacity;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<DeveloperDocumentation>@SYS325883</DeveloperDocumentation>
	<FormRef>WrkCtrResourceGroup</FormRef>
	<Label>@SYS152600</Label>
	<SingularLabel>@SYS132227</SingularLabel>
	<TableGroup>Group</TableGroup>
	<TitleField1>ValidFromDate</TitleField1>
	<TitleField2>ValidToDate</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>MasterPlanning</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>LeanWorkCellValidFromIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductionFlowModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkCell</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CapacityPeriod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductionFlowModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkCell</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CapacityPeriod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkCell</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFromDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductionFlowModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>productionFlowModelType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CapacityPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AverageThroughputQuantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CapacityUnitOfMeasure</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AverageThroughputQuantity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeanAverageThroughputQuantity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CapacityPeriod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeanCapacityPeriod</ExtendedDataType>
			<EnumType>LeanCapacityPeriods</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CapacityUnitOfMeasure</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProductionFlowModel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeanProductionFlowModelRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidFromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeanCapacityValidFromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeanCapacityValidToDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkCell</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WrkCtrResourceGroupRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LeanWorkCellValidFromIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkCell</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFromDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>UnitOfMeasureIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CapacityUnitOfMeasure</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProductionFlowModelIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProductionFlowModel</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LeanProductionFlowModel</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LeanProductionFlowModel</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>FlowModel</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CellCapacity</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProductionFlowModel</Name>
					<Field>ProductionFlowModel</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>UnitOfMeasure</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LeanWorkcellCapacity</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CapacityUnitOfMeasure</Name>
					<Field>CapacityUnitOfMeasure</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WrkCtrResourceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WrkCtrResourceGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Cell</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>CellCapacity</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkCell</Name>
					<Field>WorkCell</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>