<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepEntity_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetDepEntity_JP extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>AssetDepEntity_JP</c> table.
    /// </summary>
    /// <param name="_entityGroupRecId">
    /// The record ID of the <c>AssetDepEntityGroup_JP</c> record.
    /// </param>
    /// <param name="_entitySourceRecId">
    /// The record ID of the <c>AssetDepEntitySource_JP</c> record.
    /// </param>
    /// <param name="_entityType">
    /// The type of entity.
    /// </param>
    /// <param name="_entityDate">
    /// The date of the entity.
    /// </param>
    /// <param name="_validTo">
    /// The last date that the entity will be valid.
    /// </param>
    /// <returns>
    /// A record in the <c>AssetDepEntity_JP</c> table.
    /// </returns>
    public static AssetDepEntity_JP create(
        RefRecId                    _entityGroupRecId,
        RefRecId                    _entitySourceRecId,
        AssetDepEntityType_JP       _entityType,
        AssetTransDate              _entityDate,
        ToDate                      _validTo)
    {
        AssetDepEntity_JP   assetDepEntity;

        if (_entityGroupRecId && _entitySourceRecId)
        {
            assetDepEntity.AssetDepEntityGroup_JP   = _entityGroupRecId;
            assetDepEntity.AssetDepEntitySource_JP  = _entitySourceRecId;
            assetDepEntity.EntityType               = _entityType;
            assetDepEntity.EntityDate               = _entityDate;
            assetDepEntity.ValidTo                  = _validTo;
            assetDepEntity.AllowedPostType          = AssetPostType::All;
            assetDepEntity.insert();
        }

        return assetDepEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the specified record exists in the <c>AssetDepEntity_JP</c> table or not.
    /// </summary>
    /// <param name="_entityGroupRecId">
    /// The record ID of the <c>AssetDepEntityGroup_JP</c> record.
    /// </param>
    /// <param name="_entitySourceRecId">
    /// The record ID of the <c>AssetDepEntitySource_JP</c> record.
    /// </param>
    /// <param name="_entityType">
    /// The type of entity.
    /// </param>
    /// <param name="_entityDate">
    /// The date of the entity.
    /// </param>
    /// <returns>
    /// true if exists; otherwise, return fasle.
    /// </returns>
    public static boolean exists(
        RefRecId                    _entityGroupRecId,
        RefRecId                    _entitySourceRecId,
        AssetDepEntityType_JP       _entityType,
        AssetTransDate              _entityDate)
    {
        AssetDepEntity_JP   assetDepEntity;

        if (_entityGroupRecId && _entitySourceRecId)
        {
            select firstonly RecId from assetDepEntity
                where assetDepEntity.AssetDepEntityGroup_JP     == _entityGroupRecId
                    && assetDepEntity.AssetDepEntitySource_JP   == _entitySourceRecId
                    && assetDepEntity.EntityType                == _entityType
                    && assetDepEntity.EntityDate                == _entityDate;
        }

        return (assetDepEntity.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>AssetDepEntity_JP</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>AssetDepEntity_JP</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when it reads the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>AssetDepEntity_JP</c> table; otherwise, an empty record.
    /// </returns>
    public static AssetDepEntity_JP find(
        RefRecId            _recId,
        boolean             _forupdate          = false,
        ConcurrencyModel    _concurrencyModel   = ConcurrencyModel::Auto)
    {
        AssetDepEntity_JP   assetDepEntity;

        if (_recId)
        {
            assetDepEntity.selectForUpdate(_forupdate);
            if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                assetDepEntity.concurrencyModel(_concurrencyModel);
            }

            select firstonly assetDepEntity
                where assetDepEntity.RecId == _recId;
        }

        return assetDepEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByKeys</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>AssetDepEntity_JP</c> table.
    /// </summary>
    /// <param name="_entityGroupRecId">
    /// The record ID of the <c>AssetDepEntityGroup_JP</c> record.
    /// </param>
    /// <param name="_entitySourceRecId">
    /// The record ID of the <c>AssetDepEntitySource_JP</c> record.
    /// </param>
    /// <param name="_entityType">
    /// The type of entity.
    /// </param>
    /// <param name="_entityDate">
    /// The date of the entity.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when it reads the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>AssetDepEntity_JP</c> table; otherwise, an empty record.
    /// </returns>
    public static AssetDepEntity_JP findByKeys(
        RefRecId                    _entityGroupRecId,
        RefRecId                    _entitySourceRecId,
        AssetDepEntityType_JP       _entityType,
        AssetTransDate              _entityDate,
        boolean                     _forupdate              = false,
        ConcurrencyModel            _concurrencyModel       = ConcurrencyModel::Auto)
    {
        AssetDepEntity_JP   assetDepEntity;

        if (_entityGroupRecId)
        {
            assetDepEntity.selectForUpdate(_forupdate);
            if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                assetDepEntity.concurrencyModel(_concurrencyModel);
            }

            select firstonly assetDepEntity
                where assetDepEntity.AssetDepEntityGroup_JP     == _entityGroupRecId
                    && assetDepEntity.AssetDepEntitySource_JP   == _entitySourceRecId
                    && assetDepEntity.EntityType                == _entityType
                    && assetDepEntity.EntityDate                == _entityDate;
        }

        return assetDepEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>AssetDepEntityGroup_JP</Name>
				<Source><![CDATA[
public AssetDepEntityGroup_JP AssetDepEntityGroup_JP(AssetDepEntityGroup_JP _relatedTable = null)
    {
        if (prmIsDefault(_relatedTable))
        {
            return this.setLink('AssetDepEntityGroup_JP');
        }
        else
        {
            return this.setLink('AssetDepEntityGroup_JP', _relatedTable);
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>AssetDepEntitySource_JP</Name>
				<Source><![CDATA[
public AssetDepEntitySource_JP AssetDepEntitySource_JP(AssetDepEntitySource_JP _relatedTable = null)
    {
        if (prmIsDefault(_relatedTable))
        {
            return this.setLink('AssetDepEntitySource_JP');
        }
        else
        {
            return this.setLink('AssetDepEntitySource_JP', _relatedTable);
        }
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<CountryRegionCodes>JP</CountryRegionCodes>
	<DeveloperDocumentation>@SYP4880360</DeveloperDocumentation>
	<TableGroup>Main</TableGroup>
	<Visible>No</Visible>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>FixedAssets</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowedPostType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetPostType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AssetDepEntityGroup_JP</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AssetDepEntitySource_JP</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EntityDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetTransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EntityType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetDepEntityType_JP</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToDate</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>EntityIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AssetDepEntityGroup_JP</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AssetDepEntitySource_JP</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>EntityType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>EntityDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetDepEntityGroup_JP</Name>
			<Cardinality>ZeroMore</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<RelatedTable>AssetDepEntityGroup_JP</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetDepEntityGroup_JP</Name>
					<Field>AssetDepEntityGroup_JP</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetDepEntitySource_JP</Name>
			<Cardinality>ZeroMore</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<RelatedTable>AssetDepEntitySource_JP</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetDepEntitySource_JP</Name>
					<Field>AssetDepEntitySource_JP</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>