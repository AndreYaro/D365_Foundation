<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustTransCashDisc</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustTransCashDisc extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcCashDisc</Name>
				<Source><![CDATA[
        // This method should be static because it does not use the instance for
    // anything. Everything it uses is passed as a parameter.
    public CustTransCashDisc calcCashDisc(
        CompanyId _company,
        CurrencyCode _currencyCode,
        AmountCur _amountCur,
        TransDate _dueDate,
        TransDate _transDate,
        CashDiscCode _cashDiscCode,
        TableId _tableId,
        RecId _recId,
        boolean _manual = false,
        AmountCur _manualAmount = 0,
        Date _manualDate = _transDate,
        DiscPct _cashDiscPercent = 0)
    {
        CashDisc cashDisc;
        CustTransCashDisc custTransCashDisc;
        TransDate firstDiscDate = dateNull();
        boolean manual = _manual;

        ttsbegin;

        delete_from custTransCashDisc
            where custTransCashDisc.RefRecId == _recId
                && custTransCashDisc.RefTableId == _tableId;

        // cashdisc records.
        if (TaxParameters::find().CashDiscOnInvoice)
        {
            // cashDisc is uninitialized here and the result is that _transDate is returned by the CashDisc.discDate method
            custTransCashDisc = CustTransCashDisc::find(_tableId,
                                                        _recId,
                                                        cashDisc.discDate(_transDate),
                                                        true);

            custTransCashDisc.CashDiscDue = CashDiscDue::CashDisc;
            custTransCashDisc.RefTableId = _tableId;
            custTransCashDisc.RefRecId = _recId;
            custTransCashDisc.CashDiscdate = cashDisc.discDate(_transDate);

            if (_cashDiscPercent != 0)
            {
                custTransCashDisc.CashDiscPercent = _cashDiscPercent;
            }
            else
            {
                custTransCashDisc.CashDiscPercent = CashDisc::findByCompany(_company, _cashDiscCode).Percent;
            }

            if (manual)
            {
                custTransCashDisc.CashDiscAmount = _manualAmount;

                if (_manualDate &&
                    custTransCashDisc.CashDiscdate != _manualDate &&
                    firstDiscDate == dateNull())
                {
                    custTransCashDisc.CashDiscdate = _manualDate;
                }

                custTransCashDisc.Manual = true;
                manual = false;
            }
            else
            {
                if (_cashDiscPercent)
                {
                    custTransCashDisc.CashDiscAmount = cashDisc.discAmountOnInvoice(_currencyCode, _amountCur, _cashDiscPercent);
                }
                else
                {
                    custTransCashDisc.CashDiscAmount = cashDisc.discAmount(_currencyCode, _amountCur);
                }
            }

            custTransCashDisc.write();

            if (firstDiscDate == dateNull())
            {
                firstDiscDate = custTransCashDisc.CashDiscdate;
            }
        }
        else
        {
            cashDisc = CashDisc::findByCompany(_company, _cashDiscCode);
            while (cashDisc != null)
            {
                custTransCashDisc = CustTransCashDisc::find(_tableId,
                                                            _recId,
                                                            cashDisc.discDate(_transDate),
                                                            true);

                custTransCashDisc.CashDiscDue = CashDiscDue::CashDisc;
                custTransCashDisc.RefTableId = _tableId;
                custTransCashDisc.RefRecId = _recId;
                custTransCashDisc.CashDiscdate = cashDisc.discDate(_transDate);
                custTransCashDisc.CashDiscCode = cashDisc.CashDiscCode;

                if (manual)
                {
                    custTransCashDisc.CashDiscAmount = _manualAmount;

                    if (_manualDate &&
                        custTransCashDisc.CashDiscdate != _manualDate &&
                        firstDiscDate == dateNull())
                    {
                        custTransCashDisc.CashDiscdate = _manualDate;
                    }

                    custTransCashDisc.Manual = true;
                    manual = false;
                }
                else
                {
                    if (_cashDiscPercent)
                    {
                        custTransCashDisc.CashDiscAmount = cashDisc.discAmountOnInvoice(_currencyCode, _amountCur, _cashDiscPercent);
                    }
                    else
                    {
                        custTransCashDisc.CashDiscAmount = cashDisc.discAmount(_currencyCode, _amountCur);
                    }
                }

                custTransCashDisc.write();

                if (firstDiscDate == dateNull())
                {
                    firstDiscDate = custTransCashDisc.CashDiscdate;
                }

                cashDisc = CashDisc::findByCompany(_company, cashDisc.CashDiscCodeNext);
            }
        }

        // duedate record
        custTransCashDisc = CustTransCashDisc::findDue(_tableId, _recId, true);

        custTransCashDisc.CashDiscDue = CashDiscDue::Due;
        custTransCashDisc.RefTableId = _tableId;
        custTransCashDisc.RefRecId = _recId;
        custTransCashDisc.CashDiscdate = _dueDate;
        custTransCashDisc.CashDiscAmount = 0;

        custTransCashDisc.write();
        ttscommit;

        return CustTransCashDisc::find(_tableId, _recId, firstDiscDate ? firstDiscDate : cashDisc.discDate(_transDate), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.CustVendTransCashDisc::update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(TableId _refTableId, RecId _refRecId, TransDate _transDate)
    {
        boolean ret = true;

        if (!CustTransCashDisc::exist(_refTableId, _refRecId, _transDate))
        {
            ret = checkFailed(strfmt(CustTransCashDisc::txtNotExist(), _refTableId, _refRecId, date2StrUsr(_transDate, DateFlags::FormatAll)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCashDisc</Name>
				<Source><![CDATA[
    public static void copyCashDisc(
        TableId _fromTableId,
        RecId _fromRecId,
        TableId _toTableId,
        RecId _toRecId)
    {
        CustTransCashDisc custTransCashDiscFieldList;
        CustTransCashDisc copyCustTransCashDisc;

        insert_recordset copyCustTransCashDisc(
            RefTableId,
            RefRecId,
            CashDiscAmount,
            CashDiscdate,
            CashDiscDue,
            CashDiscCode,
            Manual)
            select _toTableId, _toRecId, CashDiscAmount, CashDiscdate, CashDiscDue, CashDiscCode, Manual
                from custTransCashDiscFieldList
                where custTransCashDiscFieldList.RefTableId == _fromTableId
                    && custTransCashDiscFieldList.RefRecId == _fromRecId;

    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(TableId _refTableId, RecId _refRecId, TransDate _transDate)
    {
        return (
            select firstonly RecId
                from custTransCashDisc
                where custTransCashDisc.RefTableId == _refTableId
                    && custTransCashDisc.RefRecId == _refRecId
                    && custTransCashDisc.CashDiscdate >= _transDate
                    && custTransCashDisc.CashDiscDue == CashDiscDue::CashDisc)
            .RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static CustTransCashDisc find(
        TableId _refTableId,
        RecId _refRecId,
        TransDate _transDate,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustTransCashDisc custTransCashDisc;

        custTransCashDisc.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custTransCashDisc.concurrencyModel(_concurrencyModel);
        }

        select firstonly custTransCashDisc
            where custTransCashDisc.RefTableId == _refTableId
                && custTransCashDisc.RefRecId == _refRecId
                && custTransCashDisc.CashDiscdate >= _transDate
                && custTransCashDisc.CashDiscDue == CashDiscDue::CashDisc;

        return custTransCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByUseCashDisc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>CustTransCashDisc</c> record for the specified table and record ID fields.
    /// </summary>
    /// <param name="_refTableId">
    ///    The reference table ID of the <c>CustTransCashDisc</c> record to find.
    /// </param>
    /// <param name="_refRecId">
    ///    The reference record ID of the <c>CustTransCashDisc</c> record to find.
    /// </param>
    /// <param name="_useCashDisc">
    ///    The cash discount rule used to determine the cash discount record.
    /// </param>
    /// <param name="_cashDiscDate">
    ///    The date used to determine the cash discount record.
    /// </param>
    /// <param name="_discGraceDays">
    ///    The number of grace days used to determine the cash discount record; optional.
    /// </param>
    /// <returns>
    ///    The <c>CustTransCashDisc</c> record found for the open transaction record.
    /// </returns>
    /// <remarks>
    ///    This method finds the first discount record with a date greater than or equal to the date used to
    ///    determine the discount if the <paramref name="_useCashDisc" /> parameter is set to Normal or
    ///    Always. If no record is found and the <paramref name="_useCashDisc" /> parameter is set to Always,
    ///    this method finds the last discount record by date.
    /// </remarks>
    public static CustTransCashDisc findByUseCashDisc(
        TableId _refTableId,
        RefRecId _refRecId,
        UseCashDisc _useCashDisc,
        TransDate _cashDiscDate,
        DiscGraceDays _discGraceDays = 0)
    {
        CustTransCashDisc foundCustTransCashDisc;

        if (_useCashDisc == UseCashDisc::Normal || _useCashDisc == UseCashDisc::Always)
        {
            // Find applicable discount for date to estimate discount
            foundCustTransCashDisc = CustTransCashDisc::findCashDisc(_refTableId, _refRecId, _cashDiscDate, _discGraceDays, false);

            if (foundCustTransCashDisc.RecId == 0 && _useCashDisc == UseCashDisc::Always)
            {
                // No discount was found for discount date, if Always, get last applicable discount
                select firstonly foundCustTransCashDisc
                    order by foundCustTransCashDisc.CashDiscdate desc
                    where foundCustTransCashDisc.RefTableId == _refTableId
                        && foundCustTransCashDisc.RefRecId == _refRecId
                        && foundCustTransCashDisc.CashDiscDue == CashDiscDue::CashDisc;
            }
        }

        return foundCustTransCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCashDisc</Name>
				<Source><![CDATA[
    public static CustTransCashDisc findCashDisc(
        TableId _tableId,
        RecId _recId,
        TransDate _transDate = dateNull(),
        DiscGraceDays _graceDays = 0,
        boolean _forUpdate = false)
    {
        CustTransCashDisc custTransCashDisc;
        if (_tableId && _recId)
        {
            custTransCashDisc.selectForUpdate(_forUpdate);

            select firstonly custTransCashDisc
                where custTransCashDisc.RefTableId == _tableId
                    && custTransCashDisc.RefRecId == _recId
                    && custTransCashDisc.CashDiscdate >= (_transDate - _graceDays)
                    && custTransCashDisc.CashDiscDue == CashDiscDue::CashDisc;
        }

        return custTransCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCashDiscCrossCompany</Name>
				<Source><![CDATA[
    internal static CustTransCashDisc findCashDiscCrossCompany(
        TableId _tableId,
        RecId _recId,
        TransDate _transDate = dateNull(),
        DiscGraceDays _graceDays = 0,
        boolean _forUpdate = false)
    {
        CustTransCashDisc custTransCashDisc;
        if (_tableId && _recId)
        {
            custTransCashDisc.selectForUpdate(_forUpdate);

            select firstonly crosscompany custTransCashDisc
                where custTransCashDisc.RefTableId == _tableId
                    && custTransCashDisc.RefRecId == _recId
                    && custTransCashDisc.CashDiscdate >= (_transDate - _graceDays)
                    && custTransCashDisc.CashDiscDue == CashDiscDue::CashDisc;
        }

        return custTransCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDue</Name>
				<Source><![CDATA[
    public static CustTransCashDisc findDue(
        TableId _refTableId,
        RecId _refRecId,
        boolean _forUpdate)
    {
        CustTransCashDisc custTransCashDisc;
        if (_refTableId && _refRecId)
        {
            custTransCashDisc.selectForUpdate(_forUpdate);

            select firstonly custTransCashDisc
                where custTransCashDisc.RefTableId == _refTableId
                    && custTransCashDisc.RefRecId == _refRecId
                    && custTransCashDisc.CashDiscDue == CashDiscDue::Due;
        }

        return custTransCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCashDiscountDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the cash discount date of of the due date cash discount associated with a given CustTransOpen record.
    /// </summary>
    /// <param name = "_custTransOpen">The CustTransOpen record.</param>
    public static void updateCashDiscountDueDate(CustTransOpen _custTransOpen)
    {
        CustTransCashDisc custTransCashDisc = CustTransCashDisc::findDue(_custTransOpen.TableId, _custTransOpen.RecId, true);

        if (custTransCashDisc)
        {
            custTransCashDisc.CashDiscDate = _custTransOpen.DueDate;
            custTransCashDisc.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLargestCashDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>CustTransCashDisc</c> record with the largest applicable discount.
    /// </summary>
    /// <param name="_refTableId">
    /// The reference table ID of the <c>CustTransCashDisc</c> record to find.
    /// </param>
    /// <param name="_refRecId">
    /// The reference record ID of the <c>CustTransCashDisc</c> record to find.
    /// </param>
    /// <returns>
    /// The <c>CustTransCashDisc</c> record found for the open transaction record.
    /// </returns>
    public static CustTransCashDisc findLargestCashDisc(
        TableId _refTableId,
        RefRecId _refRecId)
    {
        CustTransCashDisc foundCustTransCashDisc;

        select firstonly foundCustTransCashDisc
            order by foundCustTransCashDisc.CashDiscAmount desc
            where foundCustTransCashDisc.RefTableId == _refTableId
                && foundCustTransCashDisc.RefRecId == _refRecId
                && foundCustTransCashDisc.CashDiscDue == CashDiscDue::CashDisc;

        // Handle case where this is a credit note in that case amount in descending order
        if (foundCustTransCashDisc.CashDiscAmount < 0)
        {
            select firstonly foundCustTransCashDisc
                order by foundCustTransCashDisc.CashDiscAmount
                where foundCustTransCashDisc.RefTableId == _refTableId
                    && foundCustTransCashDisc.RefRecId == _refRecId
                    && foundCustTransCashDisc.CashDiscDue == CashDiscDue::CashDisc;
        }

        return foundCustTransCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastCashDisc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the last applicable discount in the <c>CustTransCashDisc</c> record.
    /// </summary>
    /// <param name="_refTableId">
    ///    The reference table ID of the <c>CustTransCashDisc</c> record to find.
    /// </param>
    /// <param name="_refRecId">
    ///    The reference record ID of the <c>CustTransCashDisc</c> record to find.
    /// </param>
    /// <returns>
    ///    The <c>CustTransCashDisc</c> record found for the open transaction record.
    /// </returns>
    public static CustTransCashDisc findLastCashDisc(
        TableId _refTableId,
        RefRecId _refRecId)
    {
        CustTransCashDisc foundCustTransCashDisc;

        select firstonly foundCustTransCashDisc
            order by foundCustTransCashDisc.CashDiscdate desc
            where foundCustTransCashDisc.RefTableId == _refTableId
                && foundCustTransCashDisc.RefRecId == _refRecId
                && foundCustTransCashDisc.CashDiscDue == CashDiscDue::CashDisc;

        return foundCustTransCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRef</Name>
				<Source><![CDATA[
    public static CustTransCashDisc findRef(
        TableId _refTableId,
        RecId _refRecId,
        boolean _forUpdate = false)
    {
        CustTransCashDisc custTransCashDisc;
        if (_refTableId && _refRecId)
        {
            custTransCashDisc.selectForUpdate(_forUpdate);

            select firstonly custTransCashDisc
                where custTransCashDisc.RefTableId == _refTableId
                    && custTransCashDisc.RefRecId == _refRecId
                    && custTransCashDisc.CashDiscDue == CashDiscDue::CashDisc;
        }

        return custTransCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveCashDisc</Name>
				<Source><![CDATA[
    public static void moveCashDisc(
        TableId _fromTableId,
        RecId _fromRecId,
        TableId _toTableId,
        RecId _toRecId)
    {
        CustTransCashDisc custTransCashDisc;

        update_recordset custTransCashDisc
            setting RefTableId = _toTableId,
                    RefRecId = _toRecId
            where custTransCashDisc.RefTableId == _fromTableId
                && custTransCashDisc.RefRecId == _fromRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102197";
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        if (CFMParameters::isPaymentRequestsEnabled()
            && tablenum(CustTransOpen) == this.RefTableId
            && this.CashDiscDue != CashDiscDue::Due)
        {
            CFMPaymentRequestTable::setOutdatedBySource(CFMPaymentRequestSourceType::CustInvoice, this.RefRecId);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();
        if (CFMParameters::isPaymentRequestsEnabled()
            && tablenum(CustTransOpen) == this.RefTableId
            && this.CashDiscDue != CashDiscDue::Due)
        {
            CFMPaymentRequestTable::setOutdatedBySource(CFMPaymentRequestSourceType::CustInvoice, this.RefRecId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS125130</DeveloperDocumentation>
	<Label>@SYS11810</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>CashDiscDue</TitleField1>
	<TitleField2>CashDiscdate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecIdDateIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>RecIdDateIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashDiscdate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscDue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Manual</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashDiscCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscPercent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CashDiscount</Name>
			<Label>@SYS4376</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashDiscdate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscDue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Manual</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS15217</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CashDiscAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCashDiscAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CashDiscCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CashDiscCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CashDiscdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCashDiscDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CashDiscDue</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CashDiscDue</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CashDiscPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>ES</CountryRegionCodes>
			<ExtendedDataType>DiscPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Manual</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS23968</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RecIdDateIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CashDiscdate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RefRecIdRefTableIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CustVendTransCashDisc</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CashDiscDate</MapField>
					<MapFieldTo>CashDiscdate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Manual</MapField>
					<MapFieldTo>Manual</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscDue</MapField>
					<MapFieldTo>CashDiscDue</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RefTableId</MapField>
					<MapFieldTo>RefTableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RefRecId</MapField>
					<MapFieldTo>RefRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscAmount</MapField>
					<MapFieldTo>CashDiscAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscCode</MapField>
					<MapFieldTo>CashDiscCode</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CashDisc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CashDisc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CashDiscCode</Name>
					<SourceEDT>CashDiscCode</SourceEDT>
					<Field>CashDiscCode</Field>
					<RelatedField>CashDiscCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125131</EntityRelationshipRole>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceJour</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustTransCashDisc</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustSettlement</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125132</EntityRelationshipRole>
			<RelatedTable>CustSettlement</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustSettlement</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustTransCashDisc</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTransOpen</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125133</EntityRelationshipRole>
			<RelatedTable>CustTransOpen</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTransOpen</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CustTransCashDisc</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>