<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOMConfigRoute</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BOMConfigRoute extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>configGroup</Name>
				<Source><![CDATA[
        public ConfigGroup configGroup()
    {
        return ConfigGroup::find(this.ConfigGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>configGroupName</Name>
				<Source><![CDATA[
    public display ConfigGroupName configGroupName()
    {
        return this.configGroup().Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveDown</Name>
				<Source><![CDATA[
        public BOMConfigRoute moveDown()
    {
        BOMConfigRoute          after;
        BOMConfigRoute          cur;
        LineNum                 num;

        ttsbegin;

        select forupdate after
            order by LineNum
            where after.bomId       == this.bomId             &&
                  after.LineNum      > this.LineNum;

        if (after && this && after.LineNum > this.LineNum)
        {
            cur                 = BOMConfigRoute::findRecId(this.RecId,true);

            num                 = this.LineNum;
            cur.LineNum         = after.LineNum;

            if (this.ConfigGroupId == after.ConfigGroupId)
            {
                after.LineNum   = num + (after.LineNum - num) / 2;
            }
            else
            {
                after.LineNum   = num;
            }

            after.update();
            cur.update();
        }

        ttscommit;

        return cur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveUp</Name>
				<Source><![CDATA[
        public BOMConfigRoute moveUp()
    {
        BOMConfigRoute          before;
        BOMConfigRoute          save;
        LineNum                 num;

        ttsbegin;

        select forupdate before
            order by LineNum desc
            where before.bomId      == this.bomId           &&
                  before.LineNum    <  this.LineNum;

        if (before && this && before.LineNum < this.LineNum)
        {
            num             = this.LineNum;
            this.LineNum    = before.LineNum;

            if (this.ConfigGroupId == before.ConfigGroupId)
            {
                before.LineNum  = before.LineNum + (num - before.LineNum) / 2;
            }
            else
            {
                before.LineNum  = num;
            }
            before.update();
            this.update();
            save = this.data();
        }

        ttscommit;

        return save;
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
        public ConfigGroupName name()
    {
        return this.Name
            ? this.Name
            : this.configGroupName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
        public static boolean checkExist(
        BOMId               _bomNum,
        ConfigGroupId       _groupId)
    {
        if (_bomNum && _groupId && ! BOMConfigRoute::exist(_bomNum,_groupId))
        {
            return checkFailed(strfmt(BOMConfigRoute::txtNotExist(),_bomNum,_groupId));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
        public static boolean exist(
        BOMId               _bomNum,
        ConfigGroupId       _groupId)
    {
        return (select bomConfigRoute
                    index hint BOMConfigGrpIdx
                    where bomConfigRoute.bomId              == _bomNum     &&
                          bomConfigRoute.ConfigGroupId      == _groupId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that a record with the specified record ID exists in the database.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID to check.
    /// </param>
    /// <returns>
    ///    true if a record exists with the specified record ID; otherwise, false.
    /// </returns>
    public static boolean existRecId(recId _recId)
    {
        return _recId &&
               (select firstonly RecId from bomConfigRoute
                    where bomConfigRoute.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
        public static BOMConfigRoute find(
        BOMId               _bomNum,
        ConfigGroupId       _groupId,
        boolean             _forUpdate = false)
    {
        BOMConfigRoute          configRoute;

        if (!_bomNum || !_groupId)
        {
            return configRoute;
        }

        configRoute.selectForUpdate(_forUpdate);

        select configRoute
            index hint BOMConfigGrpIdx
            where configRoute.bomId             == _bomNum     &&
                  configRoute.ConfigGroupId     == _groupId;

        return configRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
        public static BOMConfigRoute findRecId(
        recId               _recId,
        boolean             _forUpdate = false)
    {
        BOMConfigRoute          configRoute;

        if (_recId)
        {
            configRoute.selectForUpdate(_forUpdate);

            select configRoute
                index hint RecId
                where configRoute.RecId == _recId;
        }

        return configRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "@SYS24840";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Config</ConfigurationKey>
	<DeveloperDocumentation>@SYS124093</DeveloperDocumentation>
	<FormRef>BOMTable</FormRef>
	<Label>@SYS24764</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>BOMId</TitleField1>
	<TitleField2>ConfigGroupId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>BOMConfigGrpIdx</ClusteredIndex>
	<Modules>ProductInformationManagement</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>BOMConfigGrpIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfigGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfigGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfigGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOMId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConfigGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfigGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfigGroupName</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BOMIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BOMId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BOMConfigGrpIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BOMId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ConfigGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOMTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOMTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BOMId</Name>
					<Field>BOMId</Field>
					<RelatedField>BOMId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ConfigGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ConfigGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ConfigGroupId</Name>
					<Field>ConfigGroupId</Field>
					<RelatedField>ConfigGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>