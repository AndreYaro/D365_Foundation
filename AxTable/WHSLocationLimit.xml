<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLocationLimit</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSLocationLimit extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        WHSLocationLimitAccessor::construct().clearCache();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        WHSLocationLimitAccessor::construct().clearCache();

        this.setWarehouseSelection();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        WHSLocationLimitAccessor::construct().clearCache();

        this.setWarehouseSelection();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(WHSLocationLimit, InventLocationId):
                if (this.InventLocationId && this.WarehouseGroupAll == WhsWarehouseGroupAll::Warehouse)
                {
                    InventLocation warehouse = InventLocation::find(this.InventLocationId);

                    if (warehouse)
                    {
                        ret = ret && warehouse.checkIsWHSEnabled();
                    }
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean         ret;

        ret = super();

        if (ret)
        {
            if (this.ItemId && this.PackSizeCateogryId)
            {
                ret = checkFailed("@WAX344");
            }

            if (this.wmsLocationId && this.LocProfileId)
            {
                ret = checkFailed("@WAX345");
            }
            else if (this.wmsLocationId && this.WarehouseGroupAll == WhsWarehouseGroupAll::Warehouse)
            {
                if (!WMSLocation::find(this.wmsLocationId, this.InventLocationId))
                {
                    ret = checkFailed("@WAX346");
                }
            }
        }

        return ret && this.validateWarehouseGroupAll();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWarehouseGroupAll</Name>
				<Source><![CDATA[
    private boolean validateWarehouseGroupAll()
    {
        switch (this.WarehouseGroupAll)
        {
            case WhsWarehouseGroupAll::Warehouse:
                if (!this.InventLocationId)
                {
                    return checkFailed("@WAX:LocationLimitMissingWarehouse");
                }
                break;

            case WhsWarehouseGroupAll::Group:
                if (!this.WarehouseGroupId)
                {
                    return checkFailed("@WAX:LocationLimitMissingWarehouseGroup");
                }
                break;
                
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///      Determines whether the specified record in the WHSLocationLimit exists..
    /// </summary>
    /// <param name="_recId">
    ///     The RecId of the WHSLocationLimit record.
    /// </param>
    /// <returns>
    ///     true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId   _recId)
    {
        return _recId &&
            (select firstonly RecId from whsLocationLimit
                where whSlocationLimit.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the WHSLocationLimit.
    /// </summary>
    /// <param name="_recId">
    ///     The recId of the WHSLocationLimit record.
    /// </param>
    /// <param name="_forupdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     A record in the WHSLocationLimit table; otherwise, an empty record.
    /// </returns>
    public static WHSLocationLimit find(RecId       _recId,
                                        boolean     _forupdate = false)
    {
        WHSLocationLimit    locationLimit;

        if (_recId)
        {
            locationLimit.selectForUpdate(_forupdate);

            select firstonly locationLimit
                where locationLimit.RecId == _recId;
        }

        return locationLimit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find the location stock limit.
    /// </summary>
    /// <param name="_inventLocationId">
    ///    The inventory location ID.
    /// </param>
    /// <param name="_wmsLocationId">
    ///    The warehouse location ID.
    /// </param>
    /// <param name="_itemId">
    ///    The item ID.
    /// </param>
    /// <param name="_unitId">
    ///    The unit ID.
    /// </param>
    /// <param name="_considerNotFoundAsUnlimited">
    ///    A Boolean value that indicates if the fact that no limit record was found must be considered as 'unlimited'.
    /// </param>
    /// <param name="_inventDimId">
    ///    The variant InventDimId.
    /// </param>
    /// <param name="_containerTypeCode">
    ///     The container type.
    /// </param>
    /// <returns>
    ///    A container that holds the limit quantity and unit ID.
    /// </returns>
    public static container retrieveQty(
        InventLocationId        _inventLocationId,
        WMSLocationId           _wmsLocationId,
        ItemId                  _itemId,
        UnitOfMeasureSymbol     _unitId,
        boolean                 _considerNotFoundAsUnlimited,
        InventDimId             _inventDimId = '',
        WHSContainerTypeCode    _containerTypeCode = '')
    {
        WHSLocationLimitAccessor accessor = WHSLocationLimitAccessor::construct();
        InventDim                inventDim, productInventDim;
        InventDimId              productInventDimId;

        if (_inventDimId != '')
        {
            inventDim = InventDim::find(_inventDimId);

            if (inventDim.anyProductDimensionSpecified())
            {
                productInventDim.initFromInventDim(inventDim, InventDim::dimProductDimensionEnabledFieldList());
                productInventDimId = InventDim::findOrCreate(productInventDim).inventDimId;
            }
            else
            {
                productInventDimId = '';
            }
        }

        return accessor.retrieveQty(_inventLocationId, _wmsLocationId, _itemId, _unitId, _considerNotFoundAsUnlimited, productInventDimId, _containerTypeCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveQuantityAndUnitLimitForLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the quantity and the unit of measure of the stocking limit for a location.
    /// </summary>
    /// <param name="_inventLocationId">
    /// Warehouse id.
    /// </param>
    /// <param name="_wmsLocationId">
    /// Location id.
    /// </param>
    /// <param name="_considerNotFoundAsUnlimited">
    /// A Boolean value that indicates if the fact that no limit record was found must be considered as 'unlimited'.
    /// </param>
    /// <returns>
    /// A container that holds the limit quantity and unit ID.
    /// </returns>
    public static container retrieveQuantityAndUnitLimitForLocation(
        InventLocationId _inventLocationId,
        WMSLocationId    _wmsLocationId,
        boolean          _considerNotFoundAsUnlimited)
    {
        return WHSLocationLimit::retrieveQty(_inventLocationId, _wmsLocationId, '', '', _considerNotFoundAsUnlimited);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveQtyByLocation</Name>
				<Source><![CDATA[
    /// <summary>
	/// Finds limited quantity on a location.
	/// </summary>
	/// <param name="_inventLocationId">
	/// Warehouse id.
	/// </param>
	/// <param name="_wmsLocationId">
	/// Location id.
	/// </param>
	/// <param name="_considerNotFoundAsUnlimited">
	/// A Boolean value that indicates if the fact that no limit record was found must be considered as 'unlimited'.
	/// </param>
	/// <returns>
	/// A container that holds the limit quantity and unit ID.
	/// </returns>
    [SysObsolete('Method is obsoleted. Callers should redirect their calls to the retrieveLimitByLocation method. Please file an extensibility request if other access is required.', false, 2\3\2023)]
    public static container retrieveQtyByLocation(
        InventLocationId _inventLocationId,
        WMSLocationId    _wmsLocationId,
        boolean          _considerNotFoundAsUnlimited)
    {
        WHSLocationLimit    locLimit;
        WHSLocProfileId     locProfile;
        Qty                 qty    = 0;
        UnitOfMeasureSymbol unitId = '';

        select firstonly locLimit
            order by RecId
            where locLimit.InventLocationId      == _inventLocationId
               && locLimit.wmsLocationId         == _wmsLocationId
               && locLimit.PackSizeCateogryId    == '';

        if (!locLimit)
        {
            locProfile = WMSLocation::find(_wmsLocationId, _inventLocationId).LocProfileId;

            select firstonly locLimit
                order by RecId
                where locLimit.LocProfileId          == locProfile
                    && locLimit.InventLocationId     == _inventLocationId 
                    && locLimit.PackSizeCateogryId   == '';

            if (!locLimit)
            {
                select firstonly Qty,UnitId,AllowUnlimitedQty from locLimit
                order by RecId
                    where locLimit.InventLocationId == _inventLocationId
                        && locLimit.PackSizeCateogryId == '';
            }
        }

        if (locLimit)
        {
            qty    = locLimit.AllowUnlimitedQty ? realMax() : locLimit.Qty;
            unitId = locLimit.UnitId;
        }
        else
        {
            qty    = _considerNotFoundAsUnlimited ? realMax() : 0;
            unitId = '';
        }

        return [qty,unitId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if location stocking limit exists by warehouse.
    /// </summary>
    /// <param name = "_warehouseId">The warehouse Id.</param>
    /// <returns>true if <c>WHSLocationLimit</c> record exists; otherwise, false.</returns>
    [Hookable(false)]
    internal static boolean existForWarehouse(InventLocationId _warehouseId)
    {
        return _warehouseId && 
            (WHSLocationLimit::existsForSpecificWarehouseOrAll(_warehouseId) 
            || WHSLocationLimit::existsForWarehouseGroup(_warehouseId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForSpecificWarehouseOrAll</Name>
				<Source><![CDATA[
    private static boolean existsForSpecificWarehouseOrAll(InventLocationId _warehouseId)
    {
        WHSLocationLimit locationLimit;

        select firstonly RecId from locationLimit
            where locationLimit.InventLocationId == _warehouseId
                || locationLimit.WarehouseGroupAll == WhsWarehouseGroupAll::All;

        return locationLimit.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForWarehouseGroup</Name>
				<Source><![CDATA[
    private static boolean existsForWarehouseGroup(InventLocationId _warehouseId)
    {
        WHSLocationLimit locationLimit;
        WhsWarehouseGroupLink warehouseGroupLink;

        select firstonly RecId from locationLimit
            where locationLimit.WarehouseGroupAll == WhsWarehouseGroupAll::Group
            exists join warehouseGroupLink
                where warehouseGroupLink.WarehouseGroupId == locationLimit.WarehouseGroupId
                    && warehouseGroupLink.InventLocationId == _warehouseId;

        return locationLimit.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWarehouseSelection</Name>
				<Source><![CDATA[
    private void setWarehouseSelection()
    {
        switch (this.WarehouseGroupAll)
        {
            case WhsWarehouseGroupAll::All:
                this.InventLocationId = '';
                this.WMSLocationId = '';
                this.WarehouseGroupId = '';
                break;

            case WhsWarehouseGroupAll::Group:
                this.InventLocationId = '';
                this.WMSLocationId = '';
                break;

            case WhsWarehouseGroupAll::Warehouse:
                this.WarehouseGroupId = '';
                break;    
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(WHSLocationLimit, WarehouseGroupAll):
                this.setWarehouseSelection();
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@SYP4980035</DeveloperDocumentation>
	<FormRef>WHSLocationLimit</FormRef>
	<Label>@SYP4980044</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>InventLocationId</TitleField1>
	<TitleField2>WMSLocationId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>InventWMSItemUnitIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowUnlimitedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackSizeCateogryId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowUnlimitedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackSizeCateogryId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowUnlimitedQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAllowUnlimitedQty</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LocProfileId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLocProfileId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PackSizeCateogryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPackSizeCateogryId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLocationLimitQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WMSLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WarehouseGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WhsWarehouseGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WarehouseGroupAll</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WhsWarehouseGroupAll</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventWMSProfItemCategoryIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>InventLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WMSLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LocProfileId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PackSizeCateogryId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>UnitId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WarehouseGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WarehouseGroupAll</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventWMSItemUnitIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WMSLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>UnitId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventProfItemUnitIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LocProfileId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>UnitId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventWMSCategoryUnitIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WMSLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>UnitId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PackSizeCateogryId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventProfCategoryUnitIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LocProfileId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>UnitId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PackSizeCateogryId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WarehouseGroupId</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WarehouseGroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WarehouseGroupAll</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WarehouseGroupAll</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<SourceEDT>InventLocationId</SourceEDT>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitId</Name>
					<Field>UnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLocationProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSLocationProfile</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LocProfileId</Name>
					<SourceEDT>WHSLocProfileId</SourceEDT>
					<Field>LocProfileId</Field>
					<RelatedField>LocProfileId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSPackSizeCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSPackSizeCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PackSizeCateogryId</Name>
					<SourceEDT>WHSPackSizeCateogryId</SourceEDT>
					<Field>PackSizeCateogryId</Field>
					<RelatedField>PackSizeCateogryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WMSLocationId</Name>
					<Field>WMSLocationId</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WarehouseGroupId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WhsWarehouseGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WarehouseGroupId</Name>
					<Field>WarehouseGroupId</Field>
					<RelatedField>WarehouseGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>