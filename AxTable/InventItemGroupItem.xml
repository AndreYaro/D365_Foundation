<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemGroupItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventItemGroupItem extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the associated item.
    /// </summary>
    /// <returns>
    /// An item.
    /// </returns>
    public InventTable inventTable()
    {
        InventTable inventTable;

        if (this.ItemId && this.ItemDataAreaId)
        {
            select firstonly crosscompany inventTable
                where inventTable.ItemId        == this.ItemId
                   && inventTable.DataAreaId    == this.ItemDataAreaId;
        }

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an item group for an item.
    /// </summary>
    /// <returns>
    /// An item group.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The specified item has no item group assigned to it.
    /// </exception>
    public InventItemGroup itemGroup()
    {
        InventItemGroup inventItemGroup;

        if (this.ItemGroupId == '')
        {
            throw error(strFmt("@SYS313291", fieldPName(InventItemGroupItem, ItemGroupId)));
        }

        select firstonly crosscompany inventItemGroup
            where inventItemGroup.ItemGroupId   == this.ItemGroupId
               && inventItemGroup.DataAreaId    == this.ItemGroupDataAreaId;

        // It is possible that the record has not been found because of the behavior of crosscompany queries with regard to
        // restricted user rights in some companies. In this case we will try to query the table without crosscompany
        // keyword but within the desired company context.
        if (inventItemGroup.RecId == 0)
        {
            changecompany (xDataArea::findNonVirtualCompany(this.ItemGroupDataAreaId))
            {
                inventItemGroup = null;

                select firstonly inventItemGroup
                    where inventItemGroup.ItemGroupId == this.ItemGroupId;
            }
        }

        return inventItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
        public void update()
    {
        ItemGroupId     itemGroup_Orig  = this.orig().ItemGroupId;
        ForecastSales   forecastSales;
        ForecastPurch   forecastPurch;

        super();

        if (itemGroup_Orig != this.ItemGroupId)
        {
        //Execute only when not editing template - otherwise real records will get updated due to changes in a product template
            if (!SysRecordTemplate::isTemplateEditFormRecord(this))
            {
                changecompany(
                              this.inventTable().company()
                              )
                {
                    update_recordset forecastSales
                        setting ItemGroupId = this.ItemGroupId
                        where forecastSales.ItemId        == this.ItemId
                           && forecastSales.ItemGroupId   == itemGroup_Orig
                           && forecastSales.ExpandId      == 0;

                    update_recordset forecastPurch
                        setting ItemGroupId = this.ItemGroupId
                        where forecastPurch.ItemId      == this.ItemId
                           && forecastPurch.ItemGroupId == itemGroup_Orig
                           && forecastPurch.ExpandId    == 0;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValueItemGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the change of item group on the released product.
    /// </summary>
    /// <returns>
    /// true if the item group change is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If inventory transactions exist, the item group change is not necessary because of potential
    /// reconciliation issues.The user may still allow the item group to be changed.
    /// </remarks>
    public boolean validateFieldValueItemGroupId()
    {
        boolean ok = true;

        if (!SysRecordTemplate::isTemplateEditFormRecord(this))
        {
            changecompany (this.inventTable().company())
            {
                boolean existTransactions = this.existTransactions() || this.existTransactionsCrossCompany();
                if (existTransactions
                 && Box::yesNoOnce("@SYS6998", strFmt("@SYS343104", this.ItemId), DialogButton::No, funcName()) != DialogButton::Yes)
                {
                    ok = false;
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTransactions</Name>
				<Source><![CDATA[
    private boolean existTransactions()
    {
        InventTrans inventTrans;
        
        select firstonly RecId from inventTrans
            where inventTrans.ItemId == this.ItemId;
        
        return inventTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTransactionsCrossCompany</Name>
				<Source><![CDATA[
    private boolean existTransactionsCrossCompany()
    {
        if (InventTableDataSharingFeature::isEnabled())
        {
            InventTable inventTable = this.inventTable();
            SysDataSharingPolicy policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(curExt(), tableId2name(inventTable.TableId));
            if (policy.RecId && policy.IsEnabled)
            {
                Query       query = SysDataSharingCrossCompanyValidatorQueryBuilder::buildQuery(inventTable, policy.RecId);
                QueryRun    queryRun = new QueryRun(query);
        
                while (queryRun.Next())
                {
                    InventTable companyInventTable = queryRun.get(inventTable.TableId);
                    DataAreaId company = companyInventTable.DataAreaId;

                    if (companyInventTable && company && company != curExt())
                    {
                        changecompany(company)
                        {
                            InventItemGroupItem inventItemGroupItem = InventItemGroupItem::findByItemIdLegalEntity(companyInventTable.ItemId, company);
                            if (inventItemGroupItem.RecId)
                            {
                                buf2Buf(this, inventItemGroupItem);
                                inventItemGroupItem.ItemDataAreaId = company;
                                inventItemGroupItem.ItemGroupDataAreaId = company;

                                if (inventItemGroupItem.existTransactions())
                                {
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByItemIdLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an <c>InventItemGroupItem</c> record.
    /// </summary>
    /// <param name="_itemId">
    /// An item ID.
    /// </param>
    /// <param name="_itemDataAreaId">
    /// A company ID.
    /// </param>
    /// <param name="_forUpdate">
    ///    A value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// An <c>InventItemGroupItem</c> record.
    /// </returns>
    public static InventItemGroupItem findByItemIdLegalEntity(ItemId _itemId, DataAreaId _itemDataAreaId = curExt2dataareaid(tableNum(InventTable)), boolean _forUpdate = false)
    {
        InventItemGroupItem inventItemGroupItem;

        inventItemGroupItem.selectForUpdate(_forUpdate);

        select firstonly inventItemGroupItem
            where inventItemGroupItem.ItemId           == _itemId
               && inventItemGroupItem.ItemDataAreaId   == _itemDataAreaId;

        return inventItemGroupItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemGroupByItemIdLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an item group for an item.
    /// </summary>
    /// <param name="_itemId">
    /// An item ID.
    /// </param>
    /// <param name="_itemDataAreaId">
    /// A company ID.
    /// </param>
    /// <returns>
    /// An item group.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The specified item has no item group assigned to it.
    /// </exception>
    public static InventItemGroup itemGroupByItemIdLegalEntity(ItemId _itemId, DataAreaId _itemDataAreaId = curExt2dataareaid(tableNum(InventTable)))
    {
        InventItemGroup inventItemGroup;

        if (_itemId)
        {
            inventItemGroup = InventItemGroupItem::findByItemIdLegalEntity(_itemId, _itemDataAreaId).itemGroup();
        }
        return inventItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an item group ID for an item.
    /// </summary>
    /// <param name="_itemId">
    ///    An item ID.
    /// </param>
    /// <param name="_itemDataAreaId">
    ///    A company ID for an item.
    /// </param>
    /// <returns>
    ///    An item group ID.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The specified item has no item group assigned.
    /// </exception>
    public static ItemGroupId itemGroupId(ItemId _itemId, DataAreaId _itemDataAreaId)
    {
        InventItemGroupItem inventItemGroupItem;

        if (_itemId)
        {
            select firstonly ItemGroupId from inventItemGroupItem
                where   inventItemGroupItem.ItemId          == _itemId
                    &&  inventItemGroupItem.ItemDataAreaId  == _itemDataAreaId;

            if (inventItemGroupItem.ItemGroupId == '')
            {
                throw error(strFmt("@SYS313291", fieldPName(InventItemGroupItem, ItemGroupId)));
            }
        }

        return inventItemGroupItem.ItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateItemGroupForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns an item group to an item.
    /// </summary>
    /// <param name="_itemId">
    /// An item ID.
    /// </param>
    /// <param name="_itemDataAreaId">
    /// An item company ID.
    /// </param>
    /// <param name="_itemGroupId">
    /// An item group ID.
    /// </param>
    /// <param name="_itemGroupDataAreaId">
    /// An item group company ID.
    /// </param>
    public static void updateItemGroupForItem(
        ItemId      _itemId,
        DataAreaId  _itemDataAreaId,
        ItemGroupId _itemGroupId,
        DataAreaId  _itemGroupDataAreaId)
    {
        InventItemGroupItem itemGroupItem;

        ttsbegin;
        itemGroupItem   = InventItemGroupItem::findByItemIdLegalEntity(_itemId, _itemDataAreaId, true);

        if (!itemGroupItem.RecId)
        {
            itemGroupItem.ItemId            = _itemId;
            itemGroupItem.ItemDataAreaId    = _itemDataAreaId;
        }
        itemGroupItem.ItemGroupId           = _itemGroupId;
        itemGroupItem.ItemGroupDataAreaId   = _itemGroupDataAreaId;
        itemGroupItem.write();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS313293</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<FormRef>EcoResProductDetailsExtended</FormRef>
	<Label>@SYS322102</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemDataAreaId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ItemIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<ReplacementKey>ItemIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemGroupDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting</Name>
			<Label>@SYS5943</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS343731</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemGroupDataAreaId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<Label>@SYS343733</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemDataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemGroupIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemGroupDataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemDataAreaIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemGroupId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventItemGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventItemGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventItemGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventItemGroup_InventItemGroupItem</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemGroupDataAreaId</Name>
					<Field>ItemGroupDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemGroupId</Name>
					<Field>ItemGroupId</Field>
					<RelatedField>ItemGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventTable</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>InventTable_InventItemGroupItem</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemDataAreaId</Name>
					<Field>ItemDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>