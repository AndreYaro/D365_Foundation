<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCOrderlineTypeSelectionCriteria</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PCOrderlineTypeSelectionCriteria extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified record is in the <c>PCOrderlineTypeSelectionCriteria</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (PCOrderlineTypeSelectionCriteria::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PCOrderlineTypeSelectionCriteria</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PCOrderlineTypeSelectionCriteria</c> table; otherwise, an empty record.
    /// </returns>
    public static PCOrderlineTypeSelectionCriteria find(RefRecId _recId, boolean _forupdate = false)
    {
        PCOrderlineTypeSelectionCriteria record;

        if (!_recId)
        {
            return record;
        }

        record.selectForUpdate(_forupdate);

        select firstonly record
            where record.RecId == _recId;

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PCOrderlineTypeSelectionCriteria</c> table by name.
    /// </summary>
    /// <param name="_name">
    /// The name of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PCOrderlineTypeSelectionCriteria</c> table; otherwise, an empty record.
    /// </returns>
    public static PCOrderlineTypeSelectionCriteria findByName(Name _name, boolean _forupdate = false)
    {
        PCOrderlineTypeSelectionCriteria record;

        if (!_name)
        {
            return record;
        }

        record.selectForUpdate(_forupdate);

        select firstonly record
            where record.Name == _name;

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the default order types exists and creates them if they don't.
    /// </summary>
    public static void initializeData()
    {
        PCOrderlineTypeSelectionCriteria    selectionCriteria;
        Query                               query;
        SysQueryRun                         queryRun;

        select firstOnly RecId from selectionCriteria;

        if (selectionCriteria.RecId)
        {
            return;
        }

        // create predefined query for sales order line customers
        query = new Query(queryStr(PCPriceModelSalesOrderLineCustomer));

        selectionCriteria.clear();
        selectionCriteria.Name = query.title();
        selectionCriteria.OrderlineType = tableNum(SalesLine);

        queryRun = new SysQueryRun(query);
        selectionCriteria.Query = queryRun.pack();
        selectionCriteria.insert();

        // create a predefined query for sales quotation prospects
        query = new Query(queryStr(PCPriceModelQuotationProspect));

        selectionCriteria.clear();
        selectionCriteria.Name = query.title();
        selectionCriteria.OrderlineType = tableNum(SalesQuotationLine);

        queryRun = new SysQueryRun(query);
        selectionCriteria.Query = queryRun.pack();
        selectionCriteria.insert();

        // create a predefined query for sales quotation customers
        query = new Query(queryStr(PCPriceModelQuotationCustomer));

        selectionCriteria.clear();
        selectionCriteria.Name = query.title();
        selectionCriteria.OrderlineType = tableNum(SalesQuotationLine);

        queryRun = new SysQueryRun(query);
        selectionCriteria.Query = queryRun.pack();
        selectionCriteria.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PC</ConfigurationKey>
	<DeveloperDocumentation>@SYS4001963</DeveloperDocumentation>
	<Label>@SYS4001978</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Name</TitleField1>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>Name</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderlineType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderlineType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@SYS4001937</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>OrderlineType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Label>@SYS4001951</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>Query</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PackedQueryRun</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Name</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>