<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanGeneratedForecast</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqDemPlanGeneratedForecast extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the current buffer from an <c>ReqDemPlanCreateForecastDataContract</c> object.
    /// </summary>
    /// <param name="_dataContract">
    ///     A contract object to initialize from.
    /// </param>
    public void initFromContract(ReqDemPlanCreateForecastDataContract _dataContract)
    {
        this.LogType                     = ReqDemPlanSessionLogType::GenerationLog;
        this.Title                       = _dataContract.parmTitle();
        this.Comment                     = _dataContract.parmComment();
        this.DateGranularity             = _dataContract.parmDateGranularity();
        this.FilterQuery                 = _dataContract.getFilterQuery().pack();
        this.ForecastHorizon             = _dataContract.parmForecastHorizon();
        this.FreezingHorizon             = _dataContract.parmFreezingHorizon();
        this.HistoricalEnd               = _dataContract.parmHistoricalEnd();
        this.HistoricalStart             = _dataContract.parmHistoricalStart();
        this.ForecastStartDate           = _dataContract.parmForecastStartDate();
        this.GeneratedByUser             = curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLogger</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the current buffer from an object implementing the <c>ReqDemPlanTaskLoggerInterface</c> interface.
    /// </summary>
    /// <param name="_logger">
    ///     A logger object to initialize from.
    /// </param>
    public void initFromLogger(ReqDemPlanTaskLoggerInterface _logger)
    {
        this.TaskCollection = _logger.taskCollectionRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>ReqDemPlanGeneratedForecast</c> table.
    /// </summary>
    /// <param name="_recId">
    ///     The ID of the record.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>ReqDemPlanGeneratedForecast</c> table; otherwise, an empty record.
    /// </returns>
    public static ReqDemPlanGeneratedForecast find(RecId _recId, boolean _forUpdate = false)
    {
        ReqDemPlanGeneratedForecast forecast;

        forecast.selectForUpdate(_forUpdate);

        select forUpdate forecast
            where forecast.RecId == _recId;

        return forecast;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLatest</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the latest generated forecast.
    /// </summary>
    /// <returns>
    ///     A <c>ReqDemPlanGeneratedForecast</c> record.
    /// </returns>
    public static ReqDemPlanGeneratedForecast findLatest()
    {
        ReqDemPlanGeneratedForecast generatedForecast;

        select firstOnly generatedForecast order by CreatedDateTime desc;

        return generatedForecast;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaskCollection</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>ReqDemPlanGeneratedForecast</c> table.
    /// </summary>
    /// <param name="_taskCollection">
    ///     The record ID of the <c>ReqDemPlanTaskCollection</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>ReqDemPlanGeneratedForecast</c> table; otherwise, an empty record.
    /// </returns>
    public static ReqDemPlanGeneratedForecast findTaskCollection(
        ReqDemPlanTaskCollectionRecId   _taskCollection,
        boolean                         _forUpdate = false)
    {
        ReqDemPlanGeneratedForecast result;

        if (_taskCollection)
        {
            result.selectForUpdate(_forUpdate);

            select firstonly result
                where result.TaskCollection == _taskCollection;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getForecastEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the end date of the generated forecast.
    /// </summary>
    /// <returns>
    ///     A date indicating the end of the forecast.
    /// </returns>
    public date getForecastEndDate()
    {
        ReqDemPlanGeneratedForecast generatedForecast;
        var dateConverter = ReqDemPlanDateConverter::construct();

        var startKey = dateConverter.dateToDateKey(this.ForecastStartDate, this.DateGranularity);
        var endKey = startKey + this.ForecastHorizon;
        var endDate = dateConverter.dateKeyToDate(endKey, this.DateGranularity);

        return ReqDemPlanDateConverter::getPeriodEndDate(endDate - 1, this.dateGranularity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFrozenBucketsCountAfterDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates how many date buckets are frozen after given date.
    /// </summary>
    /// <param name = "_fromDate">A date from which frozen bucket count should be calculated.</param>
    /// <returns>Frozen date buckets count.</returns>
    public int getFrozenBucketsCountAfterDate(date _fromDate)
    {
        var     dateConverter               = ReqDemPlanDateConverter::construct();
        var     granularity                 = this.DateGranularity;
        date    firstNotFrozenBucketDate    = dateConverter.addPeriods(this.ForecastStartDate, granularity, this.FreezingHorizon);

        if (_fromDate == firstNotFrozenBucketDate)
        {
            // Skip date conversion, as it is sql heavy operation
            return 0;
        }

        //From date might not be start date of any date bucket, so it needs to be adjusted
        _fromDate = ReqDemPlanDateConverter::getAdjustedDateDimensionEntry(_fromDate, granularity).Date;

        int result = dateConverter.dateToDateKey(firstNotFrozenBucketDate, granularity) - dateConverter.dateToDateKey(_fromDate, granularity);
        return result > 0 ? result : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || ReqEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBatchTask</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>ReqDemPlanGeneratedForecast</c> table.
    /// </summary>
    /// <param name="_batchTaskRecId">
    ///     The record ID of the batch task to find.
    /// </param>
    /// <returns>
    ///     A record in the <c>ReqDemPlanGeneratedForecast</c> table; otherwise, an empty record.
    /// </returns>
    internal static ReqDemPlanGeneratedForecast findByBatchTask(RecId _batchTaskRecId)
    {
        ReqDemPlanGeneratedForecast reqDemPlanGeneratedForecast;

        select firstonly reqDemPlanGeneratedForecast
            order by CreatedDateTime desc
            where reqDemPlanGeneratedForecast.BatchTask == _batchTaskRecId;

        return reqDemPlanGeneratedForecast;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the stage of the generate forecast.
    /// </summary>
    /// <param name="_forecastRecId">
    ///     The ID of the record.
    /// </param>
    /// <param name="_stage">
    /// The stage to change to.
    /// </param>
    internal static void setStage(ReqDemPlanGeneratedForecastRecId _forecastRecId, ReqDemPlanForecastCreateProcessStage _stage)
    {
        try
        {
            ReqDemPlanGeneratedForecast reqDemPlanGeneratedForecast;

            ttsbegin;

            reqDemPlanGeneratedForecast = ReqDemPlanGeneratedForecast::find(_forecastRecId, true);

            if (reqDemPlanGeneratedForecast)
            {
                reqDemPlanGeneratedForecast.Stage = _stage;
                reqDemPlanGeneratedForecast.update();
            }

            ttscommit;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ReqDemandPlanning</ConfigurationKey>
	<DeveloperDocumentation>@DMP1158</DeveloperDocumentation>
	<Label>@DMP1157</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>Title</TitleField1>
	<TitleField2>ForecastStartDate</TitleField2>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>MasterPlanning</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DateGranularity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForecastHorizon</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForecastStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HistoricalStart</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HistoricalEnd</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaskCollection</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DateGranularity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForecastHorizon</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForecastStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HistoricalStart</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HistoricalEnd</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaskCollection</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ForecastParameters</Name>
			<Label>@DMP1159</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DateGranularity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForecastHorizon</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FreezingHorizon</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HistoricalStart</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HistoricalEnd</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForecastStartDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@DMP1121</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Title</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@DMP1160</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Comment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GeneratedByUser</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Comment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqDemPlanForecastComment</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DateGranularity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ReqDemPlanDateGranularity</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>FilterQuery</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqDemPlanSerializedQuery</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ForecastHorizon</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqDemPlanForecastHorizon</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ForecastStartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqDemPlanForecastStart</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FreezingHorizon</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqDemPlanFreezingHorizon</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GeneratedByUser</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Label>@DMP1408</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>HistoricalEnd</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqDemPlanHistoricalHorizonEnd</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>HistoricalStart</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqDemPlanHistoricalHorizonStart</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LogType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>ReqDemPlanSessionLogType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaskCollection</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqDemPlanTaskCollectionRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Title</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqDemPlanForecastTitle</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Stage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>ReqDemPlanForecastCreateProcessStage</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BatchTask</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaskCollection</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>TaskCollection</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>ReqDemPlanTaskCollectionLog</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>ReqDemPlanTaskCollectionLog</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaskCollection</Name>
					<Field>TaskCollection</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UserInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UserInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>GeneratedByUser</Name>
					<Field>GeneratedByUser</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>