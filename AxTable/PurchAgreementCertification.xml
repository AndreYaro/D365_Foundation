<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAgreementCertification</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchAgreementCertification extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayVendName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of the vendor account for the current purchase agreement header record.
    /// </summary>
    /// <param name="_purchAgreementCertification">
    /// An instance of <c>PurchAgreementCertification</c> table record.
    /// </param>
    /// <returns>
    /// A string that contains the name of the Vendor.
    /// </returns>
    public display VendName displayVendName(PurchAgreementCertification   _purchAgreementCertification)
    {
        VendTable       vendTable;
        DirPartyTable   dirPartyTable;

        if (this.VendTable)
        {
            select firstonly Party from vendTable
                where vendTable.AccountNum == _purchAgreementCertification.VendTable
                join Name from dirPartyTable
                    where dirPartyTable.RecId == vendTable.Party;
        }

        return dirPartyTable.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVendorRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the role of vendor.
    /// </summary>
    /// <param name="_purchAgreementCertification">
    /// An instance of <c>PurchAgreementCertification</c> table.
    /// </param>
    /// <returns>
    /// A string that contains the role of the Vendor.
    /// </returns>
    public display VendorRole displayVendorRole(PurchAgreementCertification   _purchAgreementCertification)
    {
        PurchAgreementSubcontractor purchAgreementSubcontractor;
        VendorRole                  vendorRole;

        select firstonly RecId from purchAgreementSubcontractor
            where purchAgreementSubcontractor.SubcontractorID == _purchAgreementCertification.VendTable &&
            purchAgreementSubcontractor.PurchAgreementHeader == _purchAgreementCertification.PurchAgreementHeader;

        if (purchAgreementSubcontractor.RecId == 0)
        {
            vendorRole = "@SPS2327";
        }
        else
        {
            vendorRole = "@SYS22167";
        }

        return vendorRole;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVendSubcontractor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the the vendor is also a subcontractor or not.
    /// </summary>
    /// <param name="_purchAgreementCertification">
    /// An instance of <c>PurchAgreementCertification</c> table.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public display NoYes displayVendSubcontractor(PurchAgreementCertification   _purchAgreementCertification)
    {
        PurchAgreementSubcontractor     purchAgreementSubcontractor;
        boolean                         isVendSubcontractor;

        isVendSubcontractor = (select purchAgreementSubcontractor
                                    where purchAgreementSubcontractor.SubcontractorID == _purchAgreementCertification.VendTable &&
                                    purchAgreementSubcontractor.PurchAgreementHeader == _purchAgreementCertification.PurchAgreementHeader).RecId;

        return isVendSubcontractor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record occurs in the <c>PurchAgreementCertification</c> table.
    /// </summary>
    /// <param name="_purchAgreementCertificationRecId">
    /// The unique ID of the record to find.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(recId  _purchAgreementCertificationRecId)
    {
        boolean found = true;

        if (!PurchAgreementCertification::exist(_purchAgreementCertificationRecId))
        {
            found = checkFailed(strFmt(PurchAgreementCertification::txtNotExist(), _purchAgreementCertificationRecId));
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>PurchAgreementCertification</c> table exists.
    /// </summary>
    /// <param name="_purchAgreementCertificationRecId">
    /// The RecId of the <c>PurchAgreementCertification</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId  _purchAgreementCertificationRecId)
    {
        boolean found;

        found = (select firstonly RecId from purchAgreementCertification
                    where purchAgreementCertification.RecId == _purchAgreementCertificationRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PurchAgreementCertification</c> table.
    /// </summary>
    /// <param name="_purchAgreementCertificationRecId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A <c>PurchAgreementCertification</c> table buffer.
    /// </returns>
    public static PurchAgreementCertification find(recId                _purchAgreementCertificationRecId,
                                                    boolean             _forUpdate = false,
                                                    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        PurchAgreementCertification  purchAgreementCertification;

        purchAgreementCertification.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            purchAgreementCertification.concurrencyModel(_concurrencyModel);
        }

        select firstonly purchAgreementCertification
        where purchAgreementCertification.RecId == _purchAgreementCertificationRecId;

        return purchAgreementCertification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters the Vendor lookup on <c>PurchAgreementCertification</c> table.
    /// </summary>
    /// <param name="_ctrl">
    /// The instance of <c>FormStringControl</c> class.
    /// </param>
    /// <param name="_purchaseAgreementHeaderVendor">
    /// The vendor account number of purchase agreement record.
    /// </param>
    /// <param name="_purchAgreementRecId">
    /// The Purchase agreement header record Id.
    /// </param>
    public static void lookupVendor(FormStringControl _ctrl,
                                            AccountNum  _purchaseAgreementHeaderVendor,
                                            recId _purchAgreementRecId)
    {
        SysTableLookup       sysTableLookup = SysTableLookup::newParameters(tableNum(PurchAgreementSubcontractor), _ctrl, true);
        Query                query = new Query();
        QueryBuildDataSource qbdsPurchAgreementSubcontractor;
        QueryBuildDataSource qbdsVendTable;

        query.queryType(QueryType::Union);

        qbdsPurchAgreementSubcontractor = query.addDataSource(tableNum(PurchAgreementSubcontractor));
        qbdsPurchAgreementSubcontractor.fields().clearFieldList();
        qbdsPurchAgreementSubcontractor.fields().addField(fieldNum(PurchAgreementSubcontractor, SubcontractorID));

        qbdsPurchAgreementSubcontractor.addRange(fieldNum(PurchAgreementSubcontractor, PurchAgreementHeader)).value(SysQuery::value(_purchAgreementRecId));

        qbdsVendTable = query.addDataSource(tableNum(VendTable));
        qbdsVendTable.fields().clearFieldList();
        qbdsVendTable.fields().addField(fieldNum(VendTable, AccountNum));

        qbdsVendTable.addRange(fieldNum(VendTable, AccountNum)).value(_purchaseAgreementHeaderVendor);

        qbdsVendTable.addSelectionField(fieldNum(VendTable, AccountNum));
        qbdsVendTable.unionType(UnionType::UnionAll);

        sysTableLookup.addLookupfield(fieldNum(PurchAgreementSubcontractor, SubcontractorID), true);
        sysTableLookup.addLookupMethod(tableMethodStr(PurchAgreementSubcontractor, displaySubContractorName));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PublicSector</ConfigurationKey>
	<DeveloperDocumentation>@SPS1354</DeveloperDocumentation>
	<Label>@SPS1356</Label>
	<TitleField1>VendTable</TitleField1>
	<TitleField2>VendCertification</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>UniqueIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendCertification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendCertification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchAgreementHeader</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CertificationType</Name>
			<Label>@SYS184339</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendCertification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchAgreementHeader</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchAgreementHeader</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendCertification</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SPS1357</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendTable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchAgreementSubcontractorAccountNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PurchAgreementHeaderIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchAgreementHeader</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VendCertificationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VendCertification</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VendTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VendTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>UniqueIdx</Name>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VendTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendCertification</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PurchAgreementHeader</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchAgreementHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchAgreementHeader</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PurchAgreementHeader</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchAgreementCertification</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchAgreementHeader</Name>
					<Field>PurchAgreementHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendCertification</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendCertification</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendCertification</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchAgreementCertification</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendCertification</Name>
					<Field>VendCertification</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchAgreementCertification</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendTable</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendTable</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>