<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjJournalStatusLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjJournalStatusLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    void delete()
    {
        ProjJournalStatusLine   journalStatus;

        ttsbegin;
        super();

        if (this.StatusNext)
        {
            journalStatus   = ProjJournalStatusLine::findNext(this.StatusNameId,this.Status, true);
            if (journalStatus)
            {
                journalStatus.StatusBefore    = '';
                journalStatus.update();
            }

            journalStatus   = ProjJournalStatusLine::findPrev(this.StatusNameId,this.Status, true);
            if (journalStatus)
            {
                journalStatus.StatusNext    = '';
                journalStatus.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void insert()
    {
        ProjJournalStatusLine   statusLineNext;

        ttsbegin;
        super();

        statusLineNext   = ProjJournalStatusLine::find(this.StatusNameId,this.StatusNext, true);

        if (statusLineNext)
        {
            statusLineNext.StatusBefore  = this.Status;
            statusLineNext.update(false);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    void update(boolean _updateNext  = true)
    {
        ProjJournalStatusLine   statusLineNext;
        ProjJournalStatus       statusNextOld   = this.orig().StatusNext;

        ttsbegin;

        super();

        if (_updateNext && (this.StatusNext != statusNextOld))
        {
            statusLineNext   = ProjJournalStatusLine::find(this.StatusNameId,this.StatusNext, true);

            if (statusLineNext)
            {
                statusLineNext.StatusBefore  = this.Status;
                statusLineNext.update(false);
            }

            statusLineNext   = ProjJournalStatusLine::find(this.StatusNameId,statusNextOld, true);

            if (statusLineNext)
            {
                statusLineNext.StatusBefore  = '';
                statusLineNext.update(false);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if ((select projJournalTable
                where projJournalTable.StatusNameId    == this.StatusNameId  &&
                      projJournalTable.Status          == this.Status        &&
                      ! projJournalTable.Posted).RecId)
        {
            return checkFailed("@SYS54735");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean validateField(fieldId p1)
    {
        boolean                 ret;
        ProjJournalStatusLine   statusNext = null;
        Map                     nextRecId   = new Map(Types::Int64,Types::Integer);

        ret = super(p1);

        if (p1  == fieldnum(ProjJournalStatusLine, StatusNext))
        {
            if (this.StatusNext)
            {
                if (!ProjJournalStatusLine::find(this.StatusNameId, this.StatusNext))
                {
                    return checkFailed(strfmt("@SYS14514", this.StatusNext));
                }

                nextRecId.insert(this.RecId,1);
                statusNext              = ProjJournalStatusLine::find(this.StatusNameId, this.StatusNext);

                while (statusNext)
                {
                    nextRecId.insert(statusNext.RecId,1);

                    statusNext  = ProjJournalStatusLine::find(statusNext.StatusNameId, statusNext.StatusNext);
                    if (statusNext && nextRecId.exists(statusNext.RecId))
                    {
                        return checkFailed("@SYS23080");
                    }
                }

                if (ProjJournalStatusLine::findPrev(this.StatusNameId, this.StatusNext))
                {
                    return checkFailed("@SYS23080");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(ProjJournalStatusNameId    statusNameId,
                         ProjJournalStatus          status   = '')
    {
        return statusNameId && (select projJournalStatusLine
                                      where projJournalStatusLine.StatusNameId == statusNameId &&
                                           (projJournalStatusLine.Status       == status        ||
                                            ! status)
                                ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ProjJournalStatusLine find(ProjJournalStatusNameId   _statusNameId,
                                             ProjJournalStatus         _status,
                                             boolean                   _forUpdate = false)
    {
        ProjJournalStatusLine  projJournalStatusLine = null;

        projJournalStatusLine.selectForUpdate(_forUpdate);

        if (_statusNameId && _status)
        {
            select projJournalStatusLine
                where projJournalStatusLine.StatusNameId == _statusNameId    &&
                      projJournalStatusLine.Status       == _status;
        }

        return projJournalStatusLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNext</Name>
				<Source><![CDATA[
    static ProjJournalStatusLine findNext(ProjJournalStatusNameId   statusNameId,
                                          ProjJournalStatus         status      = '',
                                          boolean                   _forUpdate  = false)
    {
        ProjJournalStatusLine  projJournalStatusLine = null;

        projJournalStatusLine.selectForUpdate(_forUpdate);

        if (statusNameId)
        {
            select projJournalStatusLine
                where projJournalStatusLine.StatusNameId == statusNameId    &&
                      projJournalStatusLine.StatusBefore == status;
        }

        return projJournalStatusLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPrev</Name>
				<Source><![CDATA[
    static ProjJournalStatusLine findPrev(ProjJournalStatusNameId   statusNameId,
                                          ProjJournalStatus         status      = '',
                                          boolean                   _forUpdate  = false)

    {
        ProjJournalStatusLine  projJournalStatusLine = null;

        projJournalStatusLine.selectForUpdate(_forUpdate);

        if (statusNameId)
        {
            select projJournalStatusLine
                where projJournalStatusLine.StatusNameId == statusNameId    &&
                      projJournalStatusLine.StatusNext   == status;
        }

        return projJournalStatusLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupJournalStatus</Name>
				<Source><![CDATA[
    public static void lookupJournalStatus(FormStringControl        _ctrl,
                                                  ProjJournalStatusNameId  _statusNameId,
                                                  ProjJournalStatus        _status)

    {
        Args        args = new Args();
        Object      formRun;

        args.name(formstr(ProjJournalStatusLineLookUp));
        args.caller(_ctrl);

        formRun = classfactory.formRunClass(args);
        formRun.statusNameId(_statusNameId);
        formRun.status(_status);
        formRun.init();

        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusNxt</Name>
				<Source><![CDATA[
    public static ProjJournalStatus statusNxt(ProjJournalStatusNameId  statusNameId, ProjJournalStatus status   = '')
    {
        ProjJournalStatusLine journalStatusLine;
        ProjJournalStatus     nextStatus;

        journalStatusLine = ProjJournalStatusLine::findNext(statusNameId);

        if (status)
        {
            if (journalStatusLine.StatusNext == '')
            {
                nextStatus = journalStatusLine.Status;
            }
            else
            {
                nextStatus = ProjJournalStatusLine::find(statusNameId, status).StatusNext;
            }
        }
        else
        {
            nextStatus = journalStatusLine.Status;
        }
        return nextStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusPrev</Name>
				<Source><![CDATA[
    public static ProjJournalStatus statusPrev(ProjJournalStatusNameId statusNameId, ProjJournalStatus status)
    {
        return ProjJournalStatusLine::find(statusNameId, status).StatusBefore;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUserAccessByApprovalParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the user access setup done in approval parameters</summary>
    /// <param name = "_edit">Boolean value that indicates whether the current user can create or edit the journal </param>
    /// <param name = "_check">Boolean value that indicates whether a journal can be checked</param>
    /// <param name = "_post">Boolean value that indicates whether a journal can be posted</param>
    /// <returns>
    /// Boolean value indicating whether the current user can edit, check or post the journal
    /// </returns>
    public static boolean checkUserAccessByApprovalParameters(ProjJournalAllowEdit _edit, ProjJournalCheck _check, ProjJournalPostingReady _post)
    {
        boolean ret = false;

        Query query = new query();

        QueryBuildDataSource qbds = query.addDataSource(tableNum(ProjJournalStatusLine));

        if (_post)
        {
            qbds.addRange(fieldNum(ProjJournalStatusLine, PostingReady)).value(enum2Str(_post));
        }
        if (_check)
        {
            qbds.addRange(fieldNum(ProjJournalStatusLine, Check)).value(enum2Str(_check));
        }
        if (_edit)
        {
            qbds.addRange(fieldNum(ProjJournalStatusLine, AllowEdit)).value(enum2Str(_edit));
        }

        ProjJournalTableParameters insertParameters = ProjJournalTableParameters::current();

        if (insertParameters && insertParameters.statusNameId() != '')
        {
            qbds.addRange(fieldNum(ProjJournalStatusLine, StatusNameId)).value(insertParameters.statusNameId());
        }

        QueryRun queryrun = new QueryRun(query);

        while (queryrun.next())
        {
            ProjJournalStatusLine projJournalStatusLine = queryrun.get(tableNum(ProjJournalStatusLine));

            boolean userExists = UserInfoHelp::userInUserGroup(curUserId(), projJournalStatusLine.GroupIdStatus);

            if (userExists)
            {
                ret = true;
                break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124919</DeveloperDocumentation>
	<FormRef>ProjJournalStatusTable</FormRef>
	<Label>@SYS60752</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>StatusNameId</TitleField1>
	<TitleField2>Status</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>NameStatusIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>NameStatusIdx</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatusNameId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupIdStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingReady</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowEdit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Check</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingReady</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Check</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowEdit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatusNameId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupIdStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS25587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StatusNext</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatusBefore</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowEdit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjJournalAllowEdit</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Check</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjJournalCheck</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GroupIdStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UserGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PostingReady</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjJournalPostingReady</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjJournalStatus</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StatusBefore</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjJournalStatus</ExtendedDataType>
			<Label>@SYS16148</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StatusNameId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjJournalStatusNameId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StatusNext</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjJournalStatus</ExtendedDataType>
			<Label>@SYS6441</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameStatusIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>StatusNameId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>NameStatusNextIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>StatusNameId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StatusNext</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>NameStatusBeforeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>StatusNameId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StatusBefore</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjJournalStatusTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjJournalStatusTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjJournalStatusTable</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ProjJournalStatusLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StatusNameId</Name>
					<SourceEDT>ProjJournalStatusNameId</SourceEDT>
					<Field>StatusNameId</Field>
					<RelatedField>StatusNameId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UserGroupInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>UserGroupInfo</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>UserGroupInfo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjJournalStatusLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>GroupIdStatus</Name>
					<SourceEDT>UserGroupId</SourceEDT>
					<Field>GroupIdStatus</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>UserIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>