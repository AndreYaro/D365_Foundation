<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocumentParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Text.RegularExpressions;
using Microsoft.Dynamics.ApplicationPlatform.Environment;

public class BusinessDocumentParameters extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets default parameter values.
    /// </summary>
    public void initValue()
    {
        BusinessDocumentApiConfigurationProvider configProvider = BusinessDocumentApiConfigurationProvider::construct();
        
        super();

        this.BusinessDocServiceEndpoint = 'https://businessdocumentsubmission.operations365.dynamics.com/';
        this.ClientId = configProvider.getAXClientId();
        this.TenantId = configProvider.getCurrentTenant();
        this.ServiceAppId = configProvider.getServiceAppId();
        this.SubscriptionId = configProvider.getEnvironmentId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInvoicingServiceParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes from a given <c>ERInvoicingServiceParameters</c> table record.
    /// </summary>
    /// <param name = "_invoicingServiceParameters">A <c>ERInvoicingServiceParameters</c> table record.</param>
    internal void initFromInvoicingServiceParameters(ERInvoicingServiceParameters _invoicingServiceParameters)
    {
        this.BusinessDocServiceEndpoint = _invoicingServiceParameters.ServiceEndpointURL;
        this.SubscriptionId = _invoicingServiceParameters.ServiceEnvironment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serviceCanonicalEndpoint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the business document submission service endpoint in the canonical form. I.e. without trailing slash or api suffix.
    /// </summary>
    /// <remarks>
    /// If the user specified https://businessdocumentsubmission.operations365.dynamics.com or https://businessdocumentsubmission.operations365.dynamics.com/api
    /// as the endpoint then the method will return https://businessdocumentsubmission.operations365.dynamics.com
    /// </remarks>
    /// <returns>The business document submission service endpoint in the canonical form. </returns>
    public str serviceCanonicalEndpoint()
    {
        System.String endpoint = this.BusinessDocServiceEndpoint;
        endpoint = endpoint.Trim();
        var match = Regex::Match(endpoint, '(?<endpoint>.*)(?<api>/api)?/?', 
            RegexOptions::RightToLeft | 
            RegexOptions::IgnoreCase | 
            RegexOptions::Compiled);
        endpoint = match.Groups.get_Item('endpoint').Value;
        return endpoint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>BusinessDocumentParameters</c> table.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>BusinessDocumentParameters</c> table; otherwise, an empty record.
    /// </returns>
    public static BusinessDocumentParameters find(boolean _forUpdate = false)
    {
        BusinessDocumentParameters parameter;

        if (_forUpdate)
        {
            parameter.selectForUpdate(_forUpdate);
        }

        select firstonly parameter
            where parameter.Key == 0;

        if (!parameter && !parameter.isTmp())
        {
            Company::createParameter(parameter);
        }

        return parameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record exists in the <c>BusinessDocumentParameters</c> table.
    /// </summary>
    /// <returns>A Boolean value that indicates whether a record exists in the <c>BusinessDocumentParameters</c> table.</returns>
    public static boolean exist()
    {
        return (select firstonly RecId from businessDocumentParameters
            where businessDocumentParameters.Key == 0).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the mandatory fields current record before it is written to the database.
    /// </summary>
    /// <returns>
    ///    true if the fields are filled otherwise, false
    /// </returns>
    public boolean validateWrite()
    {
        boolean ret = super();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isServiceProcessingEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record can be processed by Invoicing service.
    /// </summary>
    /// <param name = "_record">
    /// The <c>Common</c> record.
    /// </param>
    /// <param name = "_eInvoicingFeaturesForService">
    /// The feature reference.
    /// </param>
    /// <returns>
    /// true if the record can be processed; otherwise, false.
    /// </returns>
    public static boolean isServiceProcessingEnabled(Common _record, EInvoicingFeaturesForService _eInvoicingFeaturesForService)
    {
        #ISOCountryRegionCodes
        boolean ret;

        if (BusinessDocumentParameters::isFeatureEnabled([_eInvoicingFeaturesForService]))
        {
            switch (SysCountryRegionCode::countryInfo(curExt()))
            {
                case #isoMX:
                    ret = BusinessDocumentParameters::isServiceProcessingEnabled_MX(_record, _eInvoicingFeaturesForService);
                    break;
                default:
                    ret = true;
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isServiceProcessingEnabled_MX</Name>
				<Source><![CDATA[
    private static boolean isServiceProcessingEnabled_MX(Common _record, EInvoicingFeaturesForService _eInvoicingFeaturesForService)
    {
        boolean ret;

        switch (_eInvoicingFeaturesForService)
        {
            case EInvoicingFeaturesForService::MX00010:
            case EInvoicingFeaturesForService::MX00016:
                if (_record.tableId == tableNum(EInvoiceJour_MX))
                {
                    EInvoiceJour_MX einvoiceJour = _record;
                    ret = einvoiceJour.CFDIDocType == CFDIDocType_MX::Invoice;
                }
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnabledFeaturesSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>Set</c> with enabled features.
    /// </summary>
    /// <returns>
    /// <c>Set</c> with enabled features.
    /// </returns>
    public Set getEnabledFeaturesSet()
    {
        Set ret;
        
        if (this.EnabledFeatures)
        {
            ret = Set::create(this.EnabledFeatures);
            if (!ret || ret.typeId() != Types::Container)
            {
                ret = new Set(Types::Container);
            }
        }
        else
        {
            ret = new Set(Types::Container);
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEnabledFeatures</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates set with enabled features.
    /// </summary>
    /// <param name = "_eInvoicingFeaturesForServiceTmp">
    /// The <c>EInvoicingFeaturesForServiceTmp</c> record.
    /// </param>
    public void updateEnabledFeatures(EInvoicingFeaturesForServiceTmp _eInvoicingFeaturesForServiceTmp) 
    {
        Set enabledFeaturesSet = this.getEnabledFeaturesSet();
        
        if (_eInvoicingFeaturesForServiceTmp.Enabled == NoYes::Yes)
        {
            enabledFeaturesSet.add([
                _eInvoicingFeaturesForServiceTmp.CountryRegionISOCode,
				_eInvoicingFeaturesForServiceTmp.Feature]);
        }
        else
        {
            enabledFeaturesSet.remove([
                _eInvoicingFeaturesForServiceTmp.CountryRegionISOCode,
				_eInvoicingFeaturesForServiceTmp.Feature]);
        }

        this.EnabledFeatures = enabledFeaturesSet.pack();

        GlobalizationInstrumentationHelper::featureActionEvent(
            GlobalizationConstants::FeatureReferenceSRV00001,
            strFmt(ERForInvoicingInstrumentationConstants::FeatureEnabled,
                _eInvoicingFeaturesForServiceTmp.Feature,
                _eInvoicingFeaturesForServiceTmp.Enabled),
            funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFeatureEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if features are enabled.
    /// </summary>
    /// <param name = "_eInvoicingFeaturesCon">
    /// The <c>container</c> with list of features.
    /// </param>
    /// <returns>
    /// true if one of the featutres is enabled; otherwise, false.
    /// </returns>
    public static boolean isFeatureEnabled(container _eInvoicingFeaturesCon)
    {
        boolean ret;

        if (FeatureStateProvider::isFeatureEnabled(ElectronicInvoicingServiceIntegrationFeature::instance()))
        {
            Set enabledFeaturesSet = BusinessDocumentParameters::find().getEnabledFeaturesSet();
            LogisticsAddressCountryRegionISOCode countryISOCode = SysCountryRegionCode::countryInfo(curExt());

            for (int i = 1; i <= conlen(_eInvoicingFeaturesCon); i++)
            {
                EInvoicingFeaturesForService feature = conPeek(_eInvoicingFeaturesCon, i);

                if (enabledFeaturesSet.in([countryISOCode, feature]))
                {
                    ret = true;
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnyFeatureForCountryEnabled</Name>
				<Source><![CDATA[
	/// <summary>
    /// The method checks if any e-invoice feature for the country is enabled. 
    /// </summary>
    /// <returns><c>True</c> if any e-invoice feature for the country is enabled.</returns>
    internal static boolean isAnyFeatureForCountryEnabled()
    {
        boolean ret;

        if (FeatureStateProvider::isFeatureEnabled(ElectronicInvoicingServiceIntegrationFeature::instance()))
        {
            Set enabledFeaturesSet = BusinessDocumentParameters::find().getEnabledFeaturesSet();
            LogisticsAddressCountryRegionISOCode countryISOCode = SysCountryRegionCode::countryInfo(curExt());
            container featuresForCountry = EInvoicingFeaturesForServiceTmp::getFeaturesForCountry(countryISOCode); 
            container globalFeatures = EInvoicingFeaturesForServiceTmp::getFeaturesForCountry('');

            if (featuresForCountry)
            {
                ret = BusinessDocumentParameters::isFeatureEnabled(featuresForCountry);
            }
            else if (globalFeatures)
            {
                for (int i = 1; i <= conLen(globalFeatures); i++)
                {
                    EInvoicingFeaturesForService feature = conPeek(globalFeatures, i);

                    if (enabledFeaturesSet.in(['', feature]))
                    {
                        ret = true;
                        break;
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@BusinessDocumentSubmissionService:BusDocParametersDevDoc</DeveloperDocumentation>
	<Label>@BusinessDocumentSubmissionService:BusDocParameters</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Parameter</TableGroup>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>Key</ClusteredIndex>
	<Modules>NotApplicable</Modules>
	<PrimaryIndex>Key</PrimaryIndex>
	<ReplacementKey>Key</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Key</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SubmissionService</Name>
			<Label>@BusinessDocumentSubmissionService:SubmissionService</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BusinessDocServiceEndpoint</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceAppId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubscriptionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BusinessDocServiceEndpoint</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>URL</ExtendedDataType>
			<HelpText>@BusinessDocumentSubmissionService:BusDocServiceEndpoint</HelpText>
			<Label>@BusinessDocumentSubmissionService:SubmissionSrvEndpoint</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>KeyVaultCertificateRef</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KeyVaultCertificateRef</ExtendedDataType>
			<Label>@SYS32306</Label>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CertificateSubject</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>DigitalCertificateSubject</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Key</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ParametersKey</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServiceAppId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>String255</ExtendedDataType>
			<HelpText>@BusinessDocumentSubmissionService:BusDocServAppId</HelpText>
			<Label>@BusinessDocumentSubmissionService:SubmissionServAppId</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ClientId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>String255</ExtendedDataType>
			<HelpText>@BusinessDocumentSubmissionService:ClientAppId</HelpText>
			<Label>@BusinessDocumentSubmissionService:ClientId</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TenantId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>String255</ExtendedDataType>
			<HelpText>@BusinessDocumentSubmissionService:ClientAppTenantID</HelpText>
			<Label>@BusinessDocumentSubmissionService:TenantId</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SubscriptionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>String255</ExtendedDataType>
			<HelpText>@BusinessDocumentSubmissionService:ClientSubscriptionID</HelpText>
			<Label>@BusinessDocumentSubmissionService:SubscriptionID</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>EnabledFeatures</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@BusinessDocumentSubmissionService:EnabledFeatures</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LegalEntityIdVariableName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BusinessDocumentResponseState</ExtendedDataType>
			<Label>@BusinessDocumentSubmissionService:LegalEntityIdVariableName</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendInvoiceVariableName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BusinessDocumentResponseState</ExtendedDataType>
			<Label>@BusinessDocumentSubmissionService:VendInvoiceVariableName</Label>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Key</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Key</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>KeyVaultCertificateTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>KeyVaultCertificateTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>KeyVaultCertificateRef</Name>
					<Field>KeyVaultCertificateRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>