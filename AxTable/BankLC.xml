<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLC</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class BankLC extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>countBankLCLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Counts the number of <c>BankLCLine</c> records of this Letter of Credit.
    /// </summary>
    /// <returns>
    /// The number of <c>BankLCLine</c> records
    /// </returns>
    public BankLCNumberOfShipmentLines countBankLCLines()
    {
        BankLCLine bankLCLineLocal;

        select count(LineNum) from bankLCLineLocal
            where bankLCLineLocal.BankLC == this.RecId;

        return bankLCLineLocal.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBankLCAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays the total amount of the letter of credit.
    /// </summary>
    /// <returns>
    ///    The total amount of the letter of credit.
    /// </returns>
    display BankLCAmountCur displayBankLCAmount()
    {
        return this.getBankLCAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBankLCBalanceAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays the balance amount of the letter of credit.
    /// </summary>
    /// <returns>
    ///    The balance amount of the letter of credit.
    /// </returns>
    public display BankLCBalanceAmountCur displayBankLCBalanceAmountCur()
    {
        return this.getBalanceAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRequiredUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the letter of credit has to be updated.
    /// </summary>
    /// <returns>
    ///    true if the letter of credit must be updated; otherwise, false.
    /// </returns>
    public display BankLCRequireUpdate displayRequiredUpdate()
    {
        return (this.RecId == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBalanceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the balance amount of the letter of credit.
    /// </summary>
    /// <returns>
    ///    The balance amount of this letter of credit.
    /// </returns>
    public BankLCBalanceAmountCur getBalanceAmount()
    {
        return this.getBankLCAmount() - this.getTotalSettledShipmentAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the bank document type of the letter of credit.
    /// </summary>
    /// <returns>
    ///    The bank document type of the letter of credit.
    /// </returns>
    /// <remarks>
    ///    This method must be implemented by a subtable.
    /// </remarks>
    public BankDocumentType getBankDocumentType()
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankLCAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the total amount of the letter of credit.
    /// </summary>
    /// <returns>
    ///    The amount of the letter of credit.
    /// </returns>
    /// <remarks>
    ///    This method must be implemented by a subtable.
    /// </remarks>
    public BankLCAmountCur getBankLCAmount()
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankLCInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>BankLCInfo</c> record of the letter of credit.
    /// </summary>
    /// <returns>
    ///    The <c>BankLCInfo</c> record of this letter of credit.
    /// </returns>
    public BankLCInfo getBankLCInfo()
    {
        return BankLCInfo::findByBankLC(this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>CurrencyCode</c> value of the letter of credit.
    /// </summary>
    /// <returns>
    ///    The currency code.
    /// </returns>
    /// <remarks>
    ///    This method must be implemented by a subtable.
    /// </remarks>
    public CurrencyCode getCurrencyCode()
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalOrderAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the amount of the order that is related to this letter of credit.
    /// </summary>
    /// <returns>
    ///    The amount of the order that is related to this letter of credit.
    /// </returns>
    /// <remarks>
    ///    This method must be implemented by a subtable.
    /// </remarks>
    public BankLCAmountCur getTotalOrderAmount()
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalSettledShipmentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the total settled amount of this letter of credit.
    /// </summary>
    /// <returns>
    ///    The total settled amount.
    /// </returns>
    public BankLCShipmentAmountCur getTotalSettledShipmentAmount()
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalShipmentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the total shipment amount of this letter of credit.
    /// </summary>
    /// <returns>
    ///    The total shipment amount.
    /// </returns>
    public BankLCShipmentAmountCur getTotalShipmentAmount()
    {
        BankLCLine bankLCLineLocal;

        select sum(ShipmentAmountCur) from bankLCLineLocal
            where bankLCLineLocal.BankLC == this.RecId;

        return bankLCLineLocal.ShipmentAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalShipmentAmountBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the total unsettled shipment amount of this letter of credit.
    /// </summary>
    /// <returns>
    ///    The total unsettled shipment amount.
    /// </returns>
    public BankLCShipmentAmountCur getTotalShipmentAmountBalance()
    {
        return CurrencyExchangeHelper::curAmount2CurAmount(
            this.getTotalShipmentAmount() - this.getTotalSettledShipmentAmount(),
            this.getCurrencyCode(),
            this.getBankDocumentFacilityAgreement().displayCurrencyCode());
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the letter of credit has line.
    /// </summary>
    /// <returns>
    /// true if the letter of credit has line; otherwise, false.
    /// </returns>
    public boolean hasLine()
    {
        return (select firstOnly RecId from BankLCLine
            where BankLCLine.BankLC == this.RecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTransInvolved</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether any <c>BankLCLine</c> records of this letter of credit are updated with a packing
    ///    slip, invoice, or payment.
    /// </summary>
    /// <returns>
    ///    true if any shipment lines of this letter of credit are updated with a packing slip, invoice, or
    ///    payment; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method must be implemented by a subtable.
    /// </remarks>
    public boolean hasTransInvolved()
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
        public void initValue()
    {
        super();
        this.Version = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a placeholder <c>BankLCInfo</c> record for this <c>BankLC</c> record.
    /// </summary>
    public void insert()
    {
        BankLCInfo newBankLCInfo;

        super();

        newBankLCInfo.clear();
        newBankLCInfo.BankLC = this.RecId;
        newBankLCInfo.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConfirmed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the letter of credit is confirmed.This method is required to be implemented by
    /// sub table.
    /// </summary>
    /// <returns>
    /// true if the letter of credit is confirmed; otherwise, false
    /// </returns>
    public boolean isConfirmed()
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeleteAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the letter of credit may be deleted.
    /// </summary>
    /// <returns>
    ///    true if it may be deleted; otherwise, false.
    /// </returns>
    public boolean isDeleteAllowed()
    {
        return !this.hasTransInvolved();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSettlementAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the letter of credit can do the settlement.
    /// </summary>
    /// <returns>
    /// true if the shipment lines can be settled; otherwise, false.
    /// </returns>
    public boolean isSettlementAllowed()
    {
        return this.isConfirmed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerCov</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the ledger coverage for orders that are based on this letter of credit information.
    /// </summary>
    /// <param name="_ledgerCoverage">
    /// The <c>LedgerCoverage</c> instance that is used to store the coverage records.
    /// </param>
    /// <remarks>
    /// The method should be implemented by subtables.
    /// </remarks>
    public void updateLedgerCov(LedgerCoverage _ledgerCoverage)
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
        public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (!this.isDeleteAllowed())
            {
                // The open transactions of the Letter of Credit are existed.
                // The Letter of Credit could not be deleted.
                ret = checkFailed("@SYS316255");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
        public boolean validateFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            switch (_fieldName)
            {
                case fieldstr(BankLC, BankLCNumber) :
                    if (this.BankLCNumber
                        && this.BankLCNumber != this.orig().BankLCNumber)
                    {
                        if (BankLC::existBankLCNumber(this.BankLCNumber))
                        {
                            // The Letter of Credit number is already used.
                            ret = checkFailed("@SYS316191");
                        }
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (!this.ExpiryDateTime)
            {
                // Date of expiry
                ret = checkFailed(strfmt("@SYS84378", "@SYS316303"));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBankLCNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the record in the <c>BankLC</c> table specified by a <c>BankLCNumber</c> value
    ///    exists.
    /// </summary>
    /// <param name="_bankLCNumber">
    ///    The value of the <c>BankLCNumber</c> field of the <c>BankLC</c> record to find.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existBankLCNumber(BankLCNumber _bankLCNumber)
    {
        BankLC bankLC;

        if (_bankLCNumber)
        {
            select firstonly RecId from bankLC
                where bankLC.BankLCNumber == _bankLCNumber;

            if (bankLC && bankLC.RecId != 0)
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified <c>BankLC</c> record.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>BankLC</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>BankLC</c> table if found; otherwise, an empty record.
    /// </returns>
    public static BankLC find(
        BankLCRefRecId _recId,
        boolean        _forUpdate = false)
    {
        BankLC bankLC;

        if (_recId)
        {
            bankLC.selectForUpdate(_forUpdate);

            select firstonly bankLC
                where bankLC.RecId == _recId;
        }

        return bankLC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBankLCNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>BankLC</c> record specified by a <c>BankLCNumber</c> value.
    /// </summary>
    /// <param name="_bankLCNumber">
    ///    The value of the <c>BankLCNumber</c> field of the <c>BankLC</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>BankLC</c> table if found; otherwise, an empty record.
    /// </returns>
    public static BankLC findByBankLCNumber(
        BankLCNumber _bankLCNumber,
        boolean      _forUpdate = false)
    {
        BankLC bankLC;

        if (_bankLCNumber)
        {
            bankLC.selectForUpdate(_forUpdate);

            select firstonly bankLC
                where bankLC.BankLCNumber == _bankLCNumber;
        }

        return bankLC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankDocumentFacilityAgreement</Name>
				<Source><![CDATA[
    public BankDocumentFacilityAgreement getBankDocumentFacilityAgreement()
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BankDocument</ConfigurationKey>
	<DeveloperDocumentation>@SYS316177</DeveloperDocumentation>
	<FormRef>BankLCImport</FormRef>
	<Label>@SYS316286</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>BankLCNumber</TitleField1>
	<TitleField2>Version</TitleField2>
	<Abstract>Yes</Abstract>
	<CacheLookup>NotInTTS</CacheLookup>
	<InstanceRelationType>InstanceRelationType</InstanceRelationType>
	<Modules>Bank</Modules>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>BankLCInfo</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>BankLCInfo</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>BankLCLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>BankLCLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankLCNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentaryCreditType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentaryCreditNature</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToleranceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TolerancePercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlaceOfExpiry</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Version</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankLCNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS19924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankLCNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpiryDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlaceOfExpiry</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentaryCreditNature</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentaryCreditType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TolerancePercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToleranceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InstanceRelationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IssueDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Version</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToleranceAmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LookupIdentification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankLCNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankLCNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankLCNumber</ExtendedDataType>
			<HelpText>@CashManagement:BankLCNumber_HelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DocumentaryCreditNature</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankLCDocumentaryCreditNature</ExtendedDataType>
			<EnumType>BankLCDocumentaryCreditNatureType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DocumentaryCreditType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankLCDocumentaryCredit</ExtendedDataType>
			<EnumType>BankLCDocumentaryCreditType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ExpiryDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
			<Label>@SYS316303</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InstanceRelationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankLCIRT</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>IssueDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
			<Label>@SYS316076</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PlaceOfExpiry</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankLCPlaceOfExpiry</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ToleranceAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankLCToleranceAmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TolerancePercentage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankLCTolerancePercentage</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ToleranceType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankLCTolerance</ExtendedDataType>
			<EnumType>BankLCToleranceType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Version</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankLCHistoryVersion</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BankLCNumberIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BankLCNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>