<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjCDSContractLineImport</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjCDSContractLineImport extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findByTransactionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProjCDSContractLineImport</c> table.
    /// </summary>
    /// <param name="_transactionId">
    /// A Transaction ID.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>ProjCDSContractLineImport</c> table.
    /// </returns>
    public static ProjCDSContractLineImport findByTransactionId(
        Guid                _transactionId,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        ProjCDSContractLineImport projCDSContractLineImport;

        projCDSContractLineImport.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            projCDSContractLineImport.concurrencyModel(_concurrencyModel);
        }

        select firstonly projCDSContractLineImport
            where projCDSContractLineImport.TransactionId == _transactionId;

        return projCDSContractLineImport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        PSAContractLineItems contractLines;
        boolean isValid;

        if (this.isContractLineImportTypeNotTAndM())
        {
            // Default number sequence
            contractLines.ContractLineNum = PSAContractLineItems::getNewContractLineNum();

            // copy values form this table to PSAContractLines
            contractLines.LineType = this.Type;
            contractLines.LineDesc = this.Description;
            contractLines.ProjInvoiceProjId = this.ContractId;

            // default other fields in PSAContractLines
            contractLines.SalesTaxGroup = PSAContractLineItems::getDefaultSalesTaxGroup(this.Type, this.ContractId);

            isValid = contractLines.validateWrite();
        }

        // insert into PSAContractLines
        if (isValid || this.Type == PSAContractLineType::TAndM)
        {
            // Validate Project.ProjType
            if (this.validateProjectType(this.ProjectId, this.Type))
            {
                boolean isValidWrite;

                // Update ProjTable
                ProjTable projTable = ProjTable::find(this.ProjectId, true);
                this.setProjectType(projTable, this.Type);
                isValidWrite = projTable.validateWrite();

                // Update ProjInvoiceTable
                ProjInvoiceTable projInvoiceTable = ProjInvoiceTable::find(this.ContractId, true);
                this.setInvoiceFrequency(projInvoiceTable, this.ForecastInvoiceFrequency);
                isValidWrite = isValidWrite && projInvoiceTable.validateWrite();

                if (isValidWrite)
                {
                    ttsbegin;

                    projTable.write();
                    projInvoiceTable.write();

                    ProjCDSContractLineImport::findOrCreateEstimateProject(projTable, this.Type);

                    if (this.isContractLineImportTypeNotTAndM())
                    {
                        contractLines.write();

                        // Write Id from new PSAContractLines record to ProjContractLineImport
                        this.PSAContractLineItems = contractLines.ContractLineNum;
                    }

                    super();

                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        PSAContractLineItems contractLines;
        boolean errorsFound;

        select firstonly forupdate contractLines
             where contractLines.ContractLineNum == this.PSAContractLineItems;

        if (contractLines)
        {
            // Copy changed value(s) from import table to PSAContractLineItems
            contractLines.LineDesc = this.Description;

            if (!contractLines.validateWrite())
            {
                errorsFound = true;
            }

            // Update ProjInvoiceTable
            ProjInvoiceTable projInvoiceTable = ProjInvoiceTable::find(this.ContractId, true);
            this.setInvoiceFrequency(projInvoiceTable, this.ForecastInvoiceFrequency);

            if (!projInvoiceTable.validateWrite())
            {
                errorsFound = true;
            }

            if (!errorsFound)
            {
                ttsbegin;

                contractLines.write();
                projInvoiceTable.write();
                super();

                ttscommit;
            }
        }
        else
        {
            if (this.isContractLineImportTypeNotTAndM())
            {
                SysDictTable table = new SysDictTable(contractLines.TableId);
                infolog.add(Exception::Error, strFmt("@Proj:OperationInvalidFKNotFound", table.label()));
            }
            else
            {
                ProjInvoiceTable projInvoiceTable = ProjInvoiceTable::find(this.ContractId, true);
                this.setInvoiceFrequency(projInvoiceTable, this.ForecastInvoiceFrequency);
                projInvoiceTable.write();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();

        if (ret)
        {
            ret = ret && this.isProjectValid();
            ret = ret && this.isContractValid();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectValid</Name>
				<Source><![CDATA[
    private boolean isProjectValid()
    {
        boolean ret = true;

        if (this.ProjectId)
        {
            ret = ProjTable::checkExist(this.ProjectId);
        }
        else
        {
            return checkFailed("@SYS53238");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isContractValid</Name>
				<Source><![CDATA[
    private boolean isContractValid()
    {
        boolean ret = true;

        if (!ProjInvoiceTable::exist(this.ContractId))
        {
            ret = checkFailed(strFmt("@SYS58850", this.ContractId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjectType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ProjTable.ProjType if necessary
    /// </summary>
    private void setProjectType(ProjTable _projTable, PSAContractLineType _lineType)
    {
        ProjType newProjType = this.determineProjType(_lineType);

        if (_projTable.Type != newProjType)
        {
            _projTable.Type = newProjType;
            _projTable.ProjGroupId  = Project::getDefaultGroupId(newProjType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjectType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes sure that a change to the project type is valid
    /// </summary>
    /// <returns>true on success; false otherwise</returns>
    private boolean validateProjectType(ProjId _projId, PSAContractLineType _lineType)
    {
        boolean ret = true;
        ProjType newProjType = this.determineProjType(_lineType);

        ProjTable projTable = ProjTable::find(_projId);
        if (projTable.Type != newProjType)
        {
            if (ProjTable::hasPostedTransactions(projTable.ProjId) || (ProjTable::hasUnPostedTransactions(projTable.ProjId)))
            {
                ret = false;
                infolog.add(Exception::Error, "@Proj:ProjectTypeCannotBeChangedDueToPostedTrans");
            }
            else
            {
                projTable.Type = newProjType;
                projTable.ProjGroupId  = Project::getDefaultGroupId(newProjType);

                ret = projTable.validateWrite();
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceFrequency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ProjInvoiceTable.ProjForecastInvoiceFrequency if necessary into the table buffer
    /// </summary>
    private void setInvoiceFrequency(ProjInvoiceTable _projInvoiceTable, ProjForecastInvoiceFrequency _invoiceFrequency)
    {
        if (_projInvoiceTable.ForecastInvoiceFrequency != _invoiceFrequency)
        {
            _projInvoiceTable.ForecastInvoiceFrequency = _invoiceFrequency;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineProjType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the project type based on the line type.
    /// </summary>
    /// <param name = "_lineType">
    ///     Type of line.
    /// </param>
    /// <returns>
    ///     The project type based on the line type.
    /// </returns>
    protected ProjType determineProjType(PSAContractLineType _lineType)
    {
        ProjType ret;

        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            ret = ProjType::None;
        }
        else
        {
            switch (_lineType)
            {
                case PSAContractLineType::LumpSum:
                    ret = ProjType::FixedPrice;
                    break;
                case PSAContractLineType::TAndM:
                    ret = ProjType::TimeMaterial;
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateEstimateProject</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Create the estimate project if its not exist in the <c>ProjWIPTable</c> table.
    /// </summary>
    /// <param name = "_projTable">
    ///     The <c>ProjTable</c> record.
    /// </param>
    /// <param name = "_lineType">
    ///     The contract line type.
    /// </param>
    /// <returns>
    ///     The new buffer which has the new data if the project is not present in the <c>ProjWIPTable</c> table.
    /// </returns>
    private static ProjWIPTable findOrCreateEstimateProject(ProjTable _projTable, PSAContractLineType _lineType)
    {
        ProjWIPTable projWIPTableLocal;
        select projWIPTableLocal where projWIPTableLocal.ProjId == _projTable.ProjId;
        if (!projWIPTableLocal)
        {
            if (ProjCDSContractLineImport::isProjectForEstimate(_projTable.Type) || _lineType == PSAContractLineType::LumpSum)
            {
                ProjCompletePrincip completePrinciple;
                ProjControlId controlId;
                ProjPeriodId periodId;

                if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
                {
                    ProjRevenueProfile revProfile = ProjRevRecHelper::getRevProfile(_projTable, ProjContractBillingMethod::FixedPrice);
                    completePrinciple = revProfile.CompletePrinciple;
                    controlId = revProfile.CostTemplate;
                    periodId = revProfile.PeriodId;
                }
                else
                {
                    ProjGroup projGroup = ProjGroup::find(_projTable.ProjGroupId);
                    completePrinciple = projGroup.CompletePrincip;
                    controlId = projGroup.ControlId;
                    periodId = projGroup.PeriodId;
                }
                if (completePrinciple != ProjCompletePrincip::NoWIP)
                {
                    projWIPTableLocal.ProjId = _projTable.ProjId;
                    projWIPTableLocal.Description = _projTable.Name;
                    projWIPTableLocal.ControlId = controlId;
                    projWIPTableLocal.PeriodId = periodId;
                    projWIPTableLocal.insert();
                }
            }
        }

        return projWIPTableLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectForEstimate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the project type for creating the estimate project.
    /// </summary>
    /// <param name = "projTypeLoc">
    ///     An instance of <c>ProjType</c>.
    /// </param>
    /// <returns>
    ///     true if the project type is either investment or fixed price; otherwise, false.
    /// </returns>
    protected static boolean isProjectForEstimate(ProjType projTypeLoc)
    {
        return projTypeLoc == ProjType::Investment || projTypeLoc == ProjType::FixedPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByContractAndProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find record using the combination of ContractId and ProjectId
    /// </summary>
    public static ProjCDSContractLineImport findByContractAndProject(ProjInvoiceProjId _contractId, ProjId _projId, boolean _forupdate = false)
    {
        ProjCDSContractLineImport projCDSContractLineImport;

        projCDSContractLineImport.selectForUpdate(_forUpdate);

        select firstonly projCDSContractLineImport
             where projCDSContractLineImport.ContractId == _contractId &&
                projCDSContractLineImport.ProjectId == _projId;

        return projCDSContractLineImport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isContractLineImportTypeNotTAndM</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if a <c>ProjCDSContractLineImport</c> record does not have a contract line type of Fee.
    /// </summary>
    /// <returns>
    ///     true if the contract line type is not Fee; otherwise, false.
    /// </returns>
    protected boolean isContractLineImportTypeNotTAndM()
    {
        return this.Type != PSAContractLineType::TAndM;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<TitleField1>ContractId</TitleField1>
	<TitleField2>ContractLine</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<Modules>ProjectManagementAndAccounting</Modules>
	<ReplacementKey>ContractIdContractLineIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContractId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContractLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContractId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>ProjInvoiceProjId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ContractLine</Name>
			<AllowEdit>No</AllowEdit>
			<Label>@Proj:ContractLine</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Type</Name>
			<Mandatory>Yes</Mandatory>
			<EnumType>PSAContractLineType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjectId</Name>
			<ExtendedDataType>ProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAContractLineItems</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>PSAContractLineNum</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>TransactionId</Name>
			<AllowEdit>No</AllowEdit>
			<Label>@SYS38940</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ForecastInvoiceFrequency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjForecastInvoiceFrequency</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ContractIdContractLineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ContractId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ContractLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransactionIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TransactionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ContractIdProjectId</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ContractId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjectId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>