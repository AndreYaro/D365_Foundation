<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxCollectLimit</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxCollectLimit extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkInterval</Name>
				<Source><![CDATA[
    boolean checkInterval()
    {
        TaxCollectLimit         taxCollectLimit;
        TaxDateRangeValidator   taxDateRangeValidator = TaxDateRangeValidator::construct();

        while select TaxFromDate, TaxToDate from taxCollectLimit
            where taxCollectLimit.TaxCode == this.TaxCode
                && taxCollectLimit.RecId != this.RecId
        {
            taxDateRangeValidator.addDateRange(taxCollectLimit.TaxFromDate, taxCollectLimit.TaxToDate);
        }

        if (!taxDateRangeValidator.validate(this.TaxFromDate, this.TaxToDate))
            return false;

        if (this.TaxMax
            && this.TaxMin > this.TaxMax)
            return checkFailed("@Tax:MinGreaterThanMax");

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
            ret = this.checkInterval();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(TaxCode _taxCode )
    {
        boolean ret = true;

        if (!TaxCollectLimit::exist(_taxCode))
        {
            ret = checkFailed(strfmt(TaxCollectLimit::txtNotExist(), _taxCode));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customsTaxLimits_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the customer tax limits.
    /// </summary>
    /// <param name="_taxCode">
    /// The tax code is used to find record.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date is used to find record.
    /// </param>
    /// <param name="_direction">
    /// The direction is used to get the exchange rate.
    /// </param>
    /// <returns>
    /// A container with the tax limits.
    /// </returns>
    public static container customsTaxLimits_IN(
        TaxCode      _taxCode,
        TransDate    _transDate,
        Direction_IN _direction)
    {
        TaxCollectLimit        taxCollectLimit;
        TaxAmount              taxAmountMin;
        TaxAmount              taxAmountMax;
        CurrencyCode           currencyCode;
        CustomsExchangeRate_IN exchRate;
        #DEFINE.ExchangeRateMultiplier(100)

        currencyCode = TaxTable::find(_taxCode).TaxCurrencyCode;
        taxCollectLimit = TaxCollectLimit::find(_taxCode, _transDate);

        exchRate = TaxExchangeRateHelper::getCustomsExchangeRate_IN(
                                                    currencyCode,
                                                    _direction,
                                                    _transDate);

        taxAmountMin = taxCollectLimit.TaxMin * (exchRate / #ExchangeRateMultiplier);

        taxAmountMax = taxCollectLimit.TaxMax * (exchRate / #ExchangeRateMultiplier);

        return [taxAmountMin, taxAmountMax];
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(TaxCode _taxCode )
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     taxCollectLimit
                where
                     taxCollectLimit.TaxCode == _taxCode).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static TaxCollectLimit find(
        TaxCode             _taxCode,
        TaxValidDate        _date,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxCollectLimit taxCollectLimit;

        taxCollectLimit.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxCollectLimit.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            taxCollectLimit
            where (taxCollectLimit.TaxCode   == _taxCode) &&
                    ((taxCollectLimit.TaxFromDate  <= _date) || !taxCollectLimit.TaxFromDate) &&
                    ((taxCollectLimit.TaxToDate    >= _date) || !taxCollectLimit.TaxToDate);

        return taxCollectLimit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxMax</Name>
				<Source><![CDATA[
    static TaxAmount taxMax(TaxCode         _taxCode,
                            TransDate       _date,
                            boolean         _rounding = true)
    {
        TaxTable            taxTable;
        TaxCollectLimit     taxCollectLimit;
        TaxBase             currencyAmount;

        if (_taxCode)
        {
            taxCollectLimit  = TaxCollectLimit::find(_taxCode, _date);
            if (taxCollectLimit)
            {
                taxTable  = TaxTable::find(_taxCode);

                if (taxTable.TaxCurrencyCode && (taxTable.TaxCurrencyCode != CompanyInfoHelper::standardCurrency()))
                {
                     currencyAmount= CurrencyExchangeHelper::mstAmount(taxCollectLimit.TaxMax, taxTable.TaxCurrencyCode, _date, UnknownNoYes::Unknown, 0, 0, _rounding);
                }
                else
                    currencyAmount= taxCollectLimit.TaxMax;
            }
        }

        return currencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxMin</Name>
				<Source><![CDATA[
    static TaxAmount taxMin(TaxCode         _taxCode,
                            TransDate       _date,
                            boolean         _rounding = true)
    {
        TaxTable            taxTable;
        TaxCollectLimit     taxCollectLimit;
        TaxBase             currencyAmount;

        if (_taxCode)
        {
            taxCollectLimit  = TaxCollectLimit::find(_taxCode, _date);
            if (taxCollectLimit)
            {
                taxTable  = TaxTable::find(_taxCode);

                if (taxTable.TaxCurrencyCode && (taxTable.TaxCurrencyCode != CompanyInfoHelper::standardCurrency()))
                {
                     currencyAmount= CurrencyExchangeHelper::mstAmount(taxCollectLimit.TaxMin, taxTable.TaxCurrencyCode, _date, UnknownNoYes::Unknown, 0, 0, _rounding);
                }
                else
                    currencyAmount= taxCollectLimit.TaxMin;
            }
        }

        return currencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static TxtNotExist txtNotExist()
    {
        return "@SYS27724";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<DeveloperDocumentation>@SYS126028</DeveloperDocumentation>
	<FormRef>TaxCollectLimit</FormRef>
	<Label>@SYS22813</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>TaxCode</TitleField1>
	<TitleField2>TaxMin</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>TaxCodeIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>TaxCodeIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxFromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxMax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxMin</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AmountLimit</Name>
			<Label>@SYS27719</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxMin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxMax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SYS40</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxFromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TaxFromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxValidDate</ExtendedDataType>
			<Label>@SYS5209</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxMax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountMax</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxMin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountMin</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TaxToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxValidDate</ExtendedDataType>
			<Label>@SYS14656</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxCodeIdx</Name>
			<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxCode</Name>
					<SourceEDT>TaxCode</SourceEDT>
					<Field>TaxCode</Field>
					<RelatedField>TaxCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>