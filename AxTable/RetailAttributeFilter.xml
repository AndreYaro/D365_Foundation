<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailAttributeFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailAttributeFilter extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(RetailAttributeFilter, DisplayTemplate):
                if (this.DisplayTemplate != RetailAttributeFilterDisplayTemplate::Range)
                {
                    this.ThresholdValue = '';
                }
                break;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>ThresholdValueInCurrentCulture</Name>
				<Source><![CDATA[
    public edit RetailAttributeFilterThresholdValue ThresholdValueInCurrentCulture(boolean _set, RetailAttributeFilterThresholdValue _value)
    {
        System.Int32 integer;
        System.Decimal decimal;
        System.Globalization.CultureInfo currentCultureInfo;
        System.Globalization.CultureInfo invariantCultureInfo;
        System.Globalization.NumberStyles numberStyles;

        RetailAttributeFilterThresholdValue thresholdValue;
        AttributeDataType attributeDataType;

        int intNumberStyles;
        int intNumberStyles1;
        int intNumberStyles2;

        str numberValue;
        str numberSeparator = ';';
        boolean success;

        List numberValues;
        ListEnumerator numberValuesEnumerator;

        try
        {
            currentCultureInfo = System.Globalization.CultureInfo::get_CurrentCulture();
            invariantCultureInfo = System.Globalization.CultureInfo::get_InvariantCulture();

            numberStyles = System.Globalization.NumberStyles::Integer;
            intNumberStyles1 = System.Convert::ToInt32(numberStyles);
            intNumberStyles2 = System.Convert::ToInt32(System.Globalization.NumberStyles::AllowThousands);
            intNumberStyles = intNumberStyles1 | intNumberStyles2;
            numberStyles = System.Enum::ToObject(numberStyles.GetType(), intNumberStyles);

            if (_set)
            {
                numberValues = strSplit(_value, numberSeparator);
                numberValuesEnumerator = numberValues.getEnumerator();

                attributeDataType = EcoResAttribute::find(this.Attribute).getActualDataType();

                while (numberValuesEnumerator.moveNext())
                {
                    numberValue = numberValuesEnumerator.current();
                    if (numberValue)
                    {
                        if (thresholdValue != '')
                        {
                            thresholdValue += numberSeparator;
                        }

                        switch (attributeDataType)
                        {
                            case AttributeDataType::Currency:
                            case AttributeDataType::Decimal:
                                success = System.Decimal::TryParse(numberValue, System.Globalization.NumberStyles::Number, currentCultureInfo, byRef decimal);
                                if (success)
                                {
                                    thresholdValue += decimal.ToString(invariantCultureInfo);
                                }
                                break;
                            case AttributeDataType::Integer:
                                success = System.Int32::TryParse(numberValue, numberStyles, currentCultureInfo, byRef integer);
                                if (success)
                                {
                                    thresholdValue += integer.ToString(invariantCultureInfo);
                                }
                                break;
                            default:
                                break;
                        }

                        if (!success)
                        {
                            throw error("@SYP4910033");
                        }
                    }
                }

                this.ThresholdValue = thresholdValue;
            }
            else
            {
                numberValues = strSplit(this.ThresholdValue, numberSeparator);
                numberValuesEnumerator = numberValues.getEnumerator();

                while (numberValuesEnumerator.moveNext())
                {
                    if (thresholdValue != '')
                    {
                        thresholdValue += numberSeparator;
                    }

                    numberValue = numberValuesEnumerator.current();
                    if (numberValue)
                    {
                        decimal = System.Decimal::Parse(numberValue, invariantCultureInfo);
                        thresholdValue += decimal.ToString(currentCultureInfo);
                    }
                }
            }
        }
        catch(Exception::CLRError)
        {
            throw error(AifUtil::getClrErrorMessage());
        }

        return thresholdValue;
    }
]]></Source>
			</Method>
			<Method>
				<Name>validateDisplayOption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for display option selection whether it is valid.
    /// </summary>
    /// <returns>
    /// True, if it is valid; false.
    /// </returns>
    public boolean validateDisplayOption()
    {
        boolean valid;
        AttributeDataType attributeType = EcoResAttribute::find(this.Attribute).getActualDataType();

        if (this.DisplayOption == RetailAttributeFilterDisplayOption::SingleSelect)
        {
             valid = (attributeType == AttributeDataType::TrueFalse ||
                attributeType == AttributeDataType::Currency ||
                attributeType == AttributeDataType::Decimal ||
                attributeType == AttributeDataType::Integer ||
                attributeType == AttributeDataType::Text);
        }
        else
        {
            valid = (attributeType == AttributeDataType::Currency ||
                attributeType == AttributeDataType::Decimal ||
                attributeType == AttributeDataType::Integer ||
                attributeType == AttributeDataType::Text);
        }

        if (!valid)
        {
            valid = checkFailed(strFmt("@SYP4910031", this.DisplayOption, attributeType));
        }

        return valid;
    }
]]></Source>
			</Method>
			<Method>
				<Name>validateDisplayTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for display template selection whether it is valid.
    /// </summary>
    /// <returns>
    /// True, if it is valid; false.
    /// </returns>
    public boolean validateDisplayTemplate()
    {
        boolean valid;
        AttributeDataType attributeType = EcoResAttribute::find(this.Attribute).getActualDataType();

        if (this.DisplayTemplate == RetailAttributeFilterDisplayTemplate::Slider
            || this.DisplayTemplate == RetailAttributeFilterDisplayTemplate::SliderWithBars)
        {
            valid = (attributeType == AttributeDataType::Currency ||
                    attributeType == AttributeDataType::Decimal ||
                    attributeType == AttributeDataType::Integer);
        }
        else if (this.DisplayTemplate == RetailAttributeFilterDisplayTemplate::Range)
        {
            valid = (attributeType == AttributeDataType::Currency ||
                attributeType == AttributeDataType::Decimal ||
                attributeType == AttributeDataType::Integer);
        }
        else if (this.DisplayTemplate == RetailAttributeFilterDisplayTemplate::List)
        {
            valid = true;
        }

        if (!valid)
        {
            valid = checkFailed(strFmt("@SYP4910032", this.DisplayTemplate, attributeType));
        }

        return valid;
    }
]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(RetailAttributeFilter, DisplayOption):
                    ret = this.validateDisplayOption();
                    break;

                case fieldNum(RetailAttributeFilter, DisplayTemplate):
                    ret = this.validateDisplayTemplate();
                    break;

                case fieldNum(RetailAttributeFilter, ThresholdValue):
                    ret = this.validateThresholdValue();
                    break;
            }
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>validateThresholdValue</Name>
				<Source><![CDATA[
    public boolean validateThresholdValue()
    {
        ListEnumerator li;
        real currentValue, oldValue;
        str currentItem;
        boolean currentValueValid;
        List list = strSplit(this.ThresholdValue, ';');

        li = list.getEnumerator();

        while (li.moveNext())
        {
            currentItem = li.current();
            currentValueValid = str2numOK(currentItem);

            if (currentValueValid)
            {
                currentValue = str2num(currentItem);

                if (oldValue > currentValue)
                {
                    return checkFailed("@SYP4910033");
                }

                oldValue = currentValue;
            }
            else
            {
                return checkFailed("@SYP4910033");
            }
        }

        return true;
    }
]]></Source>
			</Method>
			<Method>
				<Name>createAttributeFilter</Name>
				<Source><![CDATA[
    public static void createAttributeFilter(
        RefRecId _attribute,
        RetailAttributeFilterDisplayOption _displayOption = RetailAttributeFilterDisplayOption::SingleSelect,
        RetailAttributeFilterDisplayTemplate _displayTemplate = RetailAttributeFilterDisplayTemplate::List,
        str _thresholdValue = '')
    {
        RetailAttributeFilter filter;

        select firstOnly filter
            where filter.Attribute == _attribute;

        if (!filter)
        {
            filter.Attribute = _attribute;
            filter.DisplayOption = _displayOption;
            filter.DisplayTemplate = _displayTemplate;
            filter.ThresholdValue = _thresholdValue;
            filter.insert();
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>findByAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find the specified record in the <c>RetailAttributeFilter</c> table.
    /// </summary>
    /// <param name="_attributeRecId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>RetailAttributeFilter</c> table; otherwise, an empty buffer.
    /// </returns>
    public static RetailAttributeFilter findByAttribute(RefRecId _attributeRecId, boolean _forupdate = false)
    {
        RetailAttributeFilter record;

        if (!_attributeRecId)
        {
            return record;
        }

        record.selectForUpdate(_forupdate);

        select firstonly record
            where record.Attribute == _attributeRecId;

        return record;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@SYP4910022</DeveloperDocumentation>
	<Label>@SYP4910021</Label>
	<TitleField1>Attribute</TitleField1>
	<TitleField2>DisplayOption</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>Merchandising</Modules>
	<ReplacementKey>AttributeIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DisplayOption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisplayTemplate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SortOption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SortDirection</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Attribute</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Attribute</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS14437</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Attribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisplayOption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisplayTemplate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SortDirection</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SortOption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ThresholdValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Display_</Name>
			<Label>@SYS118442</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DisplayOption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisplayTemplate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ThresholdValueInCurrentCulture</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SortOption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SortDirection</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Attribute</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DisplayOption</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailAttributeFilterDisplayOption</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DisplayTemplate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailAttributeFilterDisplayTemplate</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SortDirection</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYP4910034</Label>
			<EnumType>AscendingDescending</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SortOption</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailAttributeFilterSortOption</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ThresholdValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailAttributeFilterThresholdValue</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AttributeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Attribute</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResAttribute</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>EcoResAttribute</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Attribute</Name>
					<Field>Attribute</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>