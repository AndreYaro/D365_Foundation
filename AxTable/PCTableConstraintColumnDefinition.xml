<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCTableConstraintColumnDefinition</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class PCTableConstraintColumnDefinition extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDataType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data type of the table constraint column.
    /// </summary>
    /// <returns>
    ///    An <c>AttributeDataType</c> value.
    /// </returns>
    public AttributeDataType getDataType()
    {
        EcoResAttributeType    domain;

        select firstonly DataType from domain
            where domain.RecId == this.AttributeType;

        return domain.DataType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether a value in a field is valid.
    /// </summary>
    /// <param name="_fieldName">
    /// A string that contains the field name.
    /// </param>
    /// <param name="_arrayIndex">
    /// An integer that contains the array index, applies only if the field has array elements.
    /// </param>
    /// <returns>
    /// true if the specified field contains a valid value; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        EcoResAttributeType    attributeType;

        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(PCTableConstraintColumnDefinition, AttributeType):
                attributeType = EcoResAttributeType::find(this.AttributeType);

                if (!((attributeType.DataType == AttributeDataType::Integer && (attributeType.hasBounds() || attributeType.IsEnumeration))
                    || (attributeType.DataType == AttributeDataType::TrueFalse)
                    || (attributeType.DataType == AttributeDataType::Text && attributeType.IsEnumeration)))
                {
                    ret = checkFailed("@SYS4000183");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>attributeLookupWithTypeFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a lookup for the selection of attributes of the specified component.
    /// </summary>
    /// <param name="_caller">
    ///    The <c>FormControl</c> that will receive the chosen value from the lookup.
    /// </param>
    /// <param name="_component">
    ///    The component that owns the attributes.
    /// </param>
    /// <param name="_dataType">
    ///    The data type with which to filter the lookup.
    /// </param>
    /// <param name="_doLookup">
    ///    A Boolean balue that indicates whether to perform the lookup.
    /// </param>
    /// <returns>
    ///    A <c>SysTableLookup</c> object that represents the value lookup.
    /// </returns>
    public static SysTableLookup attributeLookupWithTypeFilter(
        FormControl _caller,
        PCClass _component,
        AttributeDataType _dataType,
        boolean _doLookup = true)
    {
        SysTableLookup  lookup;
        Query           query;
        QueryBuildDataSource dataSourcePrime;
        QueryBuildDataSource dataSource;
        QueryBuildDataSource dataSourceDomain;

        query       = new Query();
        dataSourcePrime = query.addDataSource(tableNum(EcoResAttribute), tableStr(EcoResAttribute));
        dataSource  = dataSourcePrime.addDataSource(tableNum(EcoResCategoryAttribute), tableStr(EcoResCategoryAttribute));
        dataSource.joinMode(JoinMode::InnerJoin);
        dataSource.addLink(fieldNum(EcoResAttribute, RecId), fieldNum(EcoResCategoryAttribute, Attribute), tableStr(EcoResAttribute));
        dataSource.addRange(fieldNum(EcoResCategoryAttribute, Category)).value(queryValue(_component.RecId));

        // add filter based on data type
        dataSourceDomain = dataSourcePrime.addDataSource(tableNum(EcoResAttributeType));
        dataSourceDomain.joinMode(JoinMode::InnerJoin);
        dataSourceDomain.addLink(fieldNum(EcoResAttribute, AttributeType), fieldNum(EcoResAttributeType, RecId), tableStr(EcoResAttribute));
        dataSourceDomain.addRange(fieldNum(EcoResAttributeType, DataType)).value(queryValue(_dataType));

        lookup = SysTableLookup::newParameters(tableNum(EcoResAttribute), _caller);
        lookup.parmQuery(query);
        lookup.addLookupfield(fieldNum(EcoResAttribute, Name));

        if (_doLookup)
        {
            lookup.performFormLookup();
        }

        return lookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>attributeTypeLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a lookup for the selection of domains by name.
    /// </summary>
    /// <param name="_caller">
    ///    The form control that will receive the chosen value from the lookup.
    /// </param>
    /// <param name="_doLookup">
    ///    A Boolean value that indicates whether to perform the lookup.
    /// </param>
    /// <returns>
    ///    A <c>SysTableLookup</c> object that represents the value lookup.
    /// </returns>
    public static SysTableLookup attributeTypeLookup(FormControl _caller, boolean _doLookup = true)
    {
        return PCModelingLibrary::attributeTypeLookup(_caller, _doLookup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a record of the <c>PCTableConstraintColumnDefinition</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if a record with the provided ID exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (PCTableConstraintColumnDefinition::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existAttributeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any column exists with the given attribute type.
    /// </summary>
    /// <param name="_attributeType">
    /// The attribute type record ID.
    /// </param>
    /// <returns>
    /// true if any column exists with the given attribute type; otherwise, false.
    /// </returns>
    public static boolean existAttributeType(EcoResAttributeTypeRecId _attributeType)
    {
        return (select firstOnly RecId from PCTableConstraintColumnDefinition where PCTableConstraintColumnDefinition.AttributeType == _attributeType).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PCTableConstraintColumnDefinition</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether a record should be selected for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCTableConstraintColumnDefinition</c> table; otherwise, an empty buffer.
    /// </returns>
    public static PCTableConstraintColumnDefinition find(RefRecId _recId, boolean _forupdate = false)
    {
        PCTableConstraintColumnDefinition record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByNameAndDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>PCTableConstraintColumnDefinition</c> table.
    /// </summary>
    /// <param name="_columnName">
    /// The name of the column.
    /// </param>
    /// <param name="_tableConstraintDefinition">
    /// The table constraint definition in which to look for the column.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether a record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PCTableConstraintColumnDefinition</c> table; otherwise, an empty record.
    /// </returns>
    public static PCTableConstraintColumnDefinition findByNameAndDefinition(PCTableConstraintColumnName _columnName, RefRecId _tableConstraintDefinition, boolean _forupdate = false)
    {
        PCTableConstraintColumnDefinition record;

        if (_columnName == '' || !_tableConstraintDefinition)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record
            where record.TableConstraintDefinition  == _tableConstraintDefinition
                && record.Name                      == _columnName;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the associated attribute type.
    /// </summary>
    /// <returns>The associated attribute type.</returns>
    public EcoResAttributeType getAttributeType()
    {
        return EcoResAttributeType::find(this.AttributeType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PC</ConfigurationKey>
	<DeveloperDocumentation>@SYS324579</DeveloperDocumentation>
	<Label>@SYS191263</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Name</TitleField1>
	<Abstract>Yes</Abstract>
	<CacheLookup>Found</CacheLookup>
	<InstanceRelationType>InstanceRelationType</InstanceRelationType>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>NameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InstanceRelationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableConstraintDefinition</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableConstraintDefinition</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS26467</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InstanceRelationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableConstraintDefinition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Name</Name>
			<Label>@SYS7399</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AttributeType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS309133</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InstanceRelationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RelationType</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PCTableConstraintColumnName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TableConstraintDefinition</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS191151</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TableConstraintDefinition</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>EcoResAttributeTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TableConstraintDefinition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AttributeType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AttributeType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResAttributeType</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DomainSpecified</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TableConstraintColumnDefinition</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AttributeType</Name>
					<Field>AttributeType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TableConstraintDefinition</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PCTableConstraintDefinition</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TableConstraintDef</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ColumnOf</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableConstraintDefinition</Name>
					<Field>TableConstraintDefinition</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>