<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendRequestCompany</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendRequestCompany extends VendRequest
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the enterprise portal toolbar action menus that are used to modify and view the
    ///    vendor request should be enabled.
    /// </summary>
    /// <returns>
    ///    true if the vendor request can be edited by the user; otherwise, false.
    /// </returns>
    public boolean allowEdit()
    {
        boolean ret = super();

        if (ret && this.VendRequestCompanyType == VendRequestCompanyType::NewVendorCompanyRequest)
        {
            switch (this.VendRequestCompanyStatus)
            {
                case VendRequestCompanyStatus::Draft:
                case VendRequestCompanyStatus::RequestCancelled:
                    ret = true;
                    break;
                default:
                    ret = false;
                    break;
            }
        }
        else if (ret && this.VendRequestCompanyType == VendRequestCompanyType::NewVendorCompanyProfile)
        {
            switch (this.VendRequestCompanyStatus)
            {
                case VendRequestCompanyStatus::ProfileDrafted:
                case VendRequestCompanyStatus::VendorInvited:
                case VendRequestCompanyStatus::VendorChangeRequested:
                    ret = true;
                    break;
                default:
                    ret = false;
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>approvalMenuItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a string value that represents the approval form for the vendor request.
    /// </summary>
    /// <returns>
    /// The approval form menu item.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public menuItemNameDisplay approvalMenuItem()
    {
        menuItemNameDisplay ret;

        if (this.VendRequestCompanyType == VendRequestCompanyType::NewVendorCompanyProfile)
        {
            ret = menuitemDisplayStr(VendRequestNVAForm);
        }
        else if (this.VendRequestCompanyType == VendRequestCompanyType::NewVendorCompanyRequest)
        {
            ret = menuitemDisplayStr(VendRequestNVJForm);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddVendors</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value that indicates whether adding a vendor to company accounts is available for the vendor
    ///    request.
    /// </summary>
    /// <returns>
    ///    true if a cross company vendor can be added; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean canAddVendors()
    {
        return this.VendRequestCompanyType == VendRequestCompanyType::NewVendorCompanyProfile &&
            this.VendRequestCompanyStatus == VendRequestCompanyStatus::VendorApproved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canChangeVendPartyName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the name of the party for a vendor for a vendor request can be modified.
    /// </summary>
    /// <returns>
    ///    true if the name of the vendor can be changed; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    During a vendor onboarding request or vendor extension request the party name can be changed.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean canChangeVendPartyName()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the workflow approval can be submitted by the user.
    /// </summary>
    /// <param name="_workflowType">
    ///   The name of the workflow template.
    /// </param>
    /// <returns>
    ///    true if the workflow can be submitted by the user; otherwise, false.
    /// </returns>
    public boolean canSubmitToWorkflow(str _workflowType = "")
    {
        boolean ret;

        ret = super(_workflowType);

        if (ret &&_workflowType == workFlowTypeStr(VendRequestNVJTemplate))
        {
            switch (this.VendRequestCompanyStatus)
            {
                case VendRequestCompanyStatus::Draft:
                case VendRequestCompanyStatus::RequestCancelled:
                    ret = true;
                    break;
                default:
                    ret = false;
                    break;
            }
        }
        else if (ret && _workflowType == workFlowTypeStr(VendRequestNVATemplate))
        {
            switch (this.VendRequestCompanyStatus)
            {
                case VendRequestCompanyStatus::ProfileDrafted:
                    ret = true;
                    break;
                default:
                    ret = false;
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configuration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the vendor request configuration profile.
    /// </summary>
    /// <returns>
    /// The vendor request configuration.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public VendRequestProfile configuration()
    {
        VendFieldMetadataGroupType  configurationType;
        VendRequestProfile          configurationProfile;

        if (this.VendRequestCompanyType == VendRequestCompanyType::NewVendorCompanyRequest)
        {
            if (this.IsExtension)
            {
                configurationType = VendFieldMetadataGroupType::VendRequestExtensionJustification;
            }
            else
            {
                configurationType = VendFieldMetadataGroupType::VendRequestNewVendorJustification;
            }

            configurationProfile = VendRequestProfileHelper::findByDataArea(configurationType);
        }
        else
        {
            if (this.IsExtension)
            {
                configurationType = VendFieldMetadataGroupType::VendRequestExtensionProfile;
            }
            else
            {
                configurationType = VendFieldMetadataGroupType::VendRequestProfile;
            }

            configurationProfile = VendRequestProfileHelper::findVendRequestProfile(
                configurationType,
                DirParty::primaryPostalAddress(this.VendParty).CountryRegionId);
        }

        return configurationProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEmployeeQuestionnaires</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the questionnaires that an employee will respond to for a vendor request.
    /// </summary>
    /// <remarks>
    /// These questionnaires are determined by the related <c>VendRequestProfile</c> table configuration
    /// instead of the category-based questionnaires that the vendor will respond to when they complete
    /// their prospective vendor registration profile.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void createEmployeeQuestionnaires()
    {
        VendFieldMetadataGroupType      type;
        VendRequestProfile              vendRequestProfile;
        VendRequestProfileQuestionnaire profileQuestionnaire;
        VendQuestionnaire               vendQuestionnaire;
        UnitofWork                      unitofWork = new UnitofWork();

        type = this.IsExtension ? VendFieldMetadataGroupType::VendRequestExtensionJustification : VendFieldMetadataGroupType::VendRequestNewVendorJustification;

        vendRequestProfile = VendRequestProfileHelper::findByDataArea(type);

        while select  QuestionnaireDef from profileQuestionnaire
        where   profileQuestionnaire.VendRequestProfile == vendRequestProfile.RecId
                && profileQuestionnaire.Company == curext()
        {
            vendQuestionnaire.clear();
            vendQuestionnaire.VendorRequest = this.RecId;
            vendQuestionnaire.QuestionnaireDataArea = curext();
            vendQuestionnaire.QuestionnaireDefinition = profileQuestionnaire.QuestionnaireDef;
            unitofWork.insertonSaveChanges(vendQuestionnaire);
        }

        unitofWork.saveChanges();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ttsbegin;
        super();
        DirPartyRelationship::removeLegalEntityRelationship(this.VendParty, DirSystemRelationshipType::ProspectiveVendInLE);
        DirPartyRelationship::removeLegalEntityRelationship(this.VendParty, DirSystemRelationshipType::ProspectiveContInLE);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the <c>VendRequestCompany</c> table.
    /// </summary>
    /// <remarks>
    /// When a record is inserted in the<c>VendRequestCompany</c> table, the questionnaires that an
    /// employee will respond to are created at the same time.
    /// </remarks>
    public void insert()
    {
        ttsbegin;

        super();

        DirPartyRelationship::createLegalEntityRelationship(this.VendParty, this.DataAreaId, DirSystemRelationshipType::ProspectiveVendInLE);
        DirPartyRelationship::createLegalEntityRelationship(this.ContactParty, this.DataAreaId, DirSystemRelationshipType::ProspectiveContInLE);
        this.createEmployeeQuestionnaires();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requestStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the document status of the vendor request record regardless of the instance entity type.
    /// </summary>
    /// <returns>
    /// The text value of the document request status.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display VendRequestDocumentStatusText requestStatus()
    {
        return enum2str(this.VendRequestCompanyStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>requestTypeName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays the classification type of the vendor request, regardless of the subtype of the
    ///    <c>VendRequest</c> table.
    /// </summary>
    /// <returns>
    ///    A <c>CompanyExtension</c> value if the vendor request is an extension; otherwise, a <c>Company</c>
    ///    value.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display VendRequestInstanceEntityType requestTypeName()
    {
        VendRequestInstanceEntityType ret;

        if (this.IsExtension == NoYes::Yes)
        {
            ret = VendRequestInstanceEntityType::CompanyExtension;
        }
        else
        {
            ret = VendRequestInstanceEntityType::Company;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPendingReview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the status of the vendor request to pending reviewed.
    /// </summary>
    public void setPendingReview()
    {
        super();

        this.VendRequestCompanyStatus = VendRequestCompanyStatus::VendorPendingReview;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReviewed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the status of the vendor request to reviewed.
    /// </summary>
    public void setReviewed()
    {
        super();

        this.VendRequestCompanyStatus = VendRequestCompanyStatus::VendorReviewed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowCancel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates request status when workflow is canceled. This method is called from a
    ///    <c>VendRequestWorkflowCancelManager</c> object.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void workflowCancel()
    {
        ttsbegin;
        this.VendRequestCompanyStatus = VendRequestCompanyStatus::RequestRejected;
        this.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRequestCategories</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds categories to a vendor request.
    /// </summary>
    /// <param name="_vendRequestRecId">
    ///    The vendor request record ID for which to add categories.
    /// </param>
    /// <param name="_categories">
    ///    A container with record IDs of the <c>EcoResCategory</c> records to be added.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void addRequestCategories(VendRequestRecId _vendRequestRecId, container _categories)
    {
        UnitofWork unitofWork;
        VendRequestCategory vendRequestCategoryCheck;
        int i;
        int categoryCount;
        recId categoryId;

        unitofWork = new UnitofWork();

        categoryCount = conLen(_categories);

        for (i=1; i <= categoryCount; i++)
        {
            categoryId = conPeek(_categories, i);

            if  (!VendRequestCategory::exist(_vendRequestRecId, categoryId))
            {
                vendRequestCategoryCheck.initValue();
                vendRequestCategoryCheck.Category = categoryId;
                vendRequestCategoryCheck.VendRequest = _vendRequestRecId;
                unitofWork.insertonSaveChanges(vendRequestCategoryCheck);
            }
        }

        unitofWork.saveChanges();
    }

]]></Source>
			</Method>
			<Method>
				<Name>associatePartyToLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Associates the location of primary postal address of the vendor party to the contact party.
    /// </summary>
    /// <param name="vendorPartyId">
    ///   The record ID of the vendor party.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void associatePartyToLocation(RecId vendorPartyId)
    {
        DirParty                    contactForParty;
        DirParty                    contactParty;
        DirPartyLocation            partyLocation;
        LogisticsLocationEntity     locationEntity;
        RecId                       primaryContactForPrimaryPostalAddress;
        boolean                     createPrimaryPostalAddress;
        DirPartyRelationship        contactRelationship;
        DirRelationshipTypeTable    typeTable;
        #dirParty

        typeTable = DirRelationshipTypeTable::findBySystemType(DirSystemRelationshipType::ProspectiveVendorContact);

        contactForParty = DirParty::constructFromPartyRecId(vendorPartyId);
        select ChildParty, ParentParty, RelationshipTypeId from contactRelationship where
            contactRelationship.ParentParty == contactForParty.getPartyRecId() &&
            contactRelationship.RelationshipTypeId == typeTable.RelationshipTypeId;

        contactParty = DirParty::constructFromPartyRecId(contactRelationship.ChildParty);

        //check if the party already has a primary postal address
        locationEntity = contactParty.getPrimaryPostalAddressLocation();
        if (!locationEntity)
        {
            createPrimaryPostalAddress = true;
        }

        if (locationEntity || contactForParty.getPartyRecId() == contactParty.getPartyRecId())
        {
            return;
        }

        locationEntity = contactForParty.getPrimaryPostalAddressLocation();
        if (locationEntity)
        {
            primaryContactForPrimaryPostalAddress = locationEntity.parmLocationRecId();
            partyLocation = DirPartyLocation::findPrimaryPartyLocation(contactForParty.getPartyRecId(), true);
        }

        if (primaryContactForPrimaryPostalAddress)
        {
            DirPartyLocationContract partyLocationContract = DirPartyLocationContract::constructForPartyLocation(contactParty.getPartyRecId(), primaryContactForPrimaryPostalAddress);
            partyLocationContract.parmIsPostalAddress(true);
            partyLocationContract.parmIsPrimary(createPrimaryPostalAddress);
            partyLocationContract.parmIsPrivate(false);
            partyLocationContract.parmRoleIds(conPeek(partyLocation.locationRoles(), #ROLEID));
            partyLocationContract.parmReplaceRoles(false);
            partyLocationContract.parmValidFrom(DateTimeUtil::getSystemDateTime());
            partyLocationContract.parmValidTo(DateTimeUtil::maxValue());
            partyLocationContract.parmIsLocationOwner(false);

            DirParty::createOrUpdateLocation(partyLocationContract);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEmployeeQuestionnaireStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a response has been sent for all of the questionnaires for a new vendor
    /// justification request.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>VendRequest</c> record to check.
    /// </param>
    /// <returns>
    /// true if all of the questionnaires have a response; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean checkEmployeeQuestionnaireStatus(recId _recId)
    {
        VendQuestionnaire questionnaire;
        KMCollection      questionnaireDefinition;
        boolean           ret = true;

        // Find all unanswered questionnaire related to the vendor request that the employee will responsed to.
        // Questionnaires related to the vendor have a value for the vendor party field.
        while   select   RecId from questionnaire
                join Description from questionnaireDefinition
                where questionnaire.VendorRequest == _recId
                && questionnaire.VendorParty == 0
                && questionnaire.QuestionnaireResponse == ''
                && questionnaire.QuestionnaireDefinition == questionnaireDefinition.KmCollectionId
                && questionnaire.QuestionnaireDataArea == curext()
        {
            // Complete '%1' questionnaire.
            ret = checkFailed(strFmt("@SYS329984", questionnaireDefinition.Description));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createContactPerson</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new record in the <c>DirPerson</c> table for an unsolicited vendor profile.
    /// </summary>
    /// <param name="_vendRequestSignup">
    /// A <c>VendRequestSignUp</c> record that represents the unsolicited vendor profile.
    /// </param>
    /// <returns>
    /// The record ID of a record in the <c>DirPerson</c> table.
    /// </returns>
private static RefRecId createContactPerson(VendRequestSignup _vendRequestSignup)
    {
        #define.firstNamePart(1)
        #define.secondNamePart(2)
        #define.thirdNamePart(3)

        DirPerson                               dirPerson;
        DirPersonName                           dirPersonName;
        container                               contactName;

        ttsbegin;

        //Creating contact person party records
        dirPerson.clear();
        dirPerson.initValue();
        dirPerson.Name                                  = _vendRequestSignup.ContactName;
        dirPerson.insert();

        contactName = DirPerson::splitNameParts(_vendRequestSignup.ContactName);

        dirPersonName.clear();
        dirPersonName.FirstName                         = conPeek(contactName, #firstNamePart);
        dirPersonName.MiddleName                        = conPeek(contactName, #secondNamePart);
        dirPersonName.LastName                          = conPeek(contactName, #thirdNamePart);
        dirPersonName.Person                            = dirPerson.RecId;
        dirPersonName.ValidFrom                         = DateTimeUtil::utcNow();
        dirPersonName.ValidTo                           = DateTimeUtil::maxValue();
        dirPersonName.insert();

        VendRequestCompany::createContactAddress(_vendRequestSignup, dirPerson);

        ttscommit;

        return dirPerson.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromUnsolicited</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new vendor request from an unsolicited vendor profile.
    /// </summary>
    /// <param name="_vendRequestSignup">
    /// A <c>VendRequestSignUp</c> record that represents the unsolicited vendor profile.
    /// </param>
    /// <returns>
    /// The record ID of the <c>VendRequest</c> record that was created from the unsolicited vendor profile.
    /// </returns>
    public static VendRequestCompanyRecId createFromUnsolicited(
        VendRequestSignup _vendRequestSignup)
    {
        VendRequestBusinessJustification      vendRequestBusinessJustification;
        VendRequestProspectiveProfileRecId    vendRequestProspectiveProfileRecId;
        VendRequestCompanyRecId               vendRequestCompanyRecId;
        VendRequestVendPartyRecId             vendRequestVendorPartyRecId;
        VendRequestContactPartyRecId          vendRequestContactPartyRecId;

        if (!_vendRequestSignup.RecId == 0)
        {
            ttsbegin;

            // create parties for vendor request
            vendRequestVendorPartyRecId     = VendRequestCompany::createOrganization(_vendRequestSignup);
            vendRequestContactPartyRecId    = VendRequestCompany::createContactPerson(_vendRequestSignup);

            if (DirOrganization::find(vendRequestVendorPartyRecId) &&
                DirPerson::find(vendRequestContactPartyRecId))
            {
                vendRequestBusinessJustification.clear();
                vendRequestBusinessJustification.insert();

                // create prospective vendor records.
                vendRequestProspectiveProfileRecId = VendRequestProspectiveProfile::createProspectiveProfileFromUnsolicited(_vendRequestSignup);

                // create vendor company records.
                vendRequestCompanyRecId = VendRequestCompany::createVendRequestCompanyFromUnsolicited(vendRequestVendorPartyRecId, vendRequestBusinessJustification.RecId, vendRequestProspectiveProfileRecId, vendRequestContactPartyRecId, _vendRequestSignup.RecId);

                // creating electronic address records.
                VendRequestCompany::createVendElectronicAddress(vendRequestVendorPartyRecId, vendRequestContactPartyRecId, _vendRequestSignup);

                // add Procurement Categories
                vendRequestCategory::createVendRequestCategoryFromRecId(_vendRequestSignup.RecId, vendRequestCompanyRecId);
            }

            ttscommit;
        }

        return vendRequestCompanyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrganization</Name>
				<Source><![CDATA[
    private static RefRecId createOrganization(VendRequestSignup _vendRequestSignup)
    {
        DirOrganization                         dirOrganization;
        LogisticsLocation                       logisticsLocationForVendor;
        LogisticsPostalAddress                  logisticsPostalAddressForVendor;

        ttsbegin;

        //Creating prospective vendor party records
        dirOrganization.clear();
        dirOrganization.Name                            = _vendRequestSignup.Name;
        dirOrganization.insert();

        //Creating vendor address records
        logisticsLocationForVendor = LogisticsLocation::create(_vendRequestSignup.Name);

        DirPartyLocationContract partyLocationContract = DirPartyLocationContract::constructForPartyLocation(dirOrganization.RecId, logisticsLocationForVendor.RecId);
        partyLocationContract.parmIsPostalAddress(true);
        partyLocationContract.parmIsPrimary(true);
        partyLocationContract.parmIsPrivate(false);
        partyLocationContract.parmRoleIds([LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Business).RecId]);

        DirParty::createOrUpdateLocation(partyLocationContract);

        logisticsPostalAddressForVendor.clear();
        logisticsPostalAddressForVendor.City             = _vendRequestSignup.City;
        logisticsPostalAddressForVendor.CountryRegionId  = _vendRequestSignup.CountryRegionId;
        logisticsPostalAddressForVendor.Street           = _vendRequestSignup.Street;
        logisticsPostalAddressForVendor.State            = _vendRequestSignup.State;
        logisticsPostalAddressForVendor.ZipCode          = _vendRequestSignup.ZipCode;
        logisticsPostalAddressForVendor.Address          = _vendRequestSignup.Address;
        logisticsPostalAddressForVendor.Location         = logisticsLocationForVendor.RecId;
        logisticsPostalAddressForVendor.ValidFrom        = DateTimeUtil::utcNow();
        logisticsPostalAddressForVendor.ValidTo          = DateTimeUtil::maxValue();
        logisticsPostalAddressForVendor.insert();

        ttscommit;

        return dirOrganization.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendElectronicAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new records in <c>LogisticsElectronicAddress</c> from an unsolicited vendor profile.
    /// </summary>
    /// <param name="_vendRequestVendorPartyRecId">
    /// The record ID of <c>DirOrganization</c> table.
    /// </param>
    /// <param name="_vendRequestContactPartyRecId">
    /// The record ID of <c>DirPerson</c> table.
    /// </param>
    /// <param name="_vendRequestSignup">
    /// The record ID of the <c>VendRequest</c> record that was created from the unsolicited vendor profile
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static void createVendElectronicAddress(
        VendRequestVendPartyRecId       _vendRequestVendorPartyRecId,
        VendRequestContactPartyRecId    _vendRequestContactPartyRecId,
        VendRequestSignup               _vendRequestSignup)
    {
        if (_vendRequestSignup.Email)
        {
            LogisticsElectronicAddress::createElectronicAddressFromUnsolicited(_vendRequestVendorPartyRecId, LogisticsElectronicAddressMethodType::Email, _vendRequestSignup.Email, NoYes::Yes);
        }

        if (_vendRequestSignup.Telefax)
        {
            LogisticsElectronicAddress::createElectronicAddressFromUnsolicited(_vendRequestVendorPartyRecId, LogisticsElectronicAddressMethodType::Fax, _vendRequestSignup.Telefax,NoYes::No);
        }

        if (_vendRequestSignup.Phone)
        {
            LogisticsElectronicAddress::createElectronicAddressFromUnsolicited(_vendRequestVendorPartyRecId, LogisticsElectronicAddressMethodType::Phone, _vendRequestSignup.Phone, NoYes::No);
        }

        if (_vendRequestSignup.ContactEmail)
        {
            LogisticsElectronicAddress::createElectronicAddressFromUnsolicited(_vendRequestContactPartyRecId, LogisticsElectronicAddressMethodType::Email, _vendRequestSignup.ContactEmail, NoYes::Yes);
        }

        if (_vendRequestSignup.ContactTelefax)
        {
            LogisticsElectronicAddress::createElectronicAddressFromUnsolicited(_vendRequestContactPartyRecId, LogisticsElectronicAddressMethodType::Fax, _vendRequestSignup.ContactTelefax, NoYes::No);
        }

        if (_vendRequestSignup.ContactPhone)
        {
            LogisticsElectronicAddress::createElectronicAddressFromUnsolicited(_vendRequestContactPartyRecId, LogisticsElectronicAddressMethodType::Phone, _vendRequestSignup.ContactPhone, NoYes::No);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendRequestCompanyFromUnsolicited</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new record in <c>VendRequestCompany</c> from an unsolicited vendor profile.
    /// </summary>
    /// <param name="_vendRequestVendorPartyRecId">
    /// The record ID of <c>DirOrganization</c> table.
    /// </param>
    /// <param name="_vendRequestBusinessJustificationRecId">
    /// The record ID of <c>VendRequestBusinessJustification</c> table.
    /// </param>
    /// <param name="_vendRequestProspectiveProfileRecId">
    /// The record ID of <c>VendRequestProspectiveProfile</c> table.
    /// </param>
    /// <param name="_vendRequestContactPartyRecId">
    /// The record ID of <c>DirPerson</c> table.
    /// </param>
    /// <param name="_vendRequestSignupRecId">
    /// The record ID of <c>VendRequestSignUp</c> table.
    /// </param>
    /// <returns>
    /// The record ID of <c>VendRequestCompany</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static VendRequestCompanyRecId createVendRequestCompanyFromUnsolicited(
        VendRequestVendPartyRecId           _vendRequestVendorPartyRecId,
        BusinessJustificationRefRecId       _vendRequestBusinessJustificationRecId,
        VendRequestProspectiveProfileRecId  _vendRequestProspectiveProfileRecId,
        VendRequestContactPartyRecId        _vendRequestContactPartyRecId,
        VendRequestSignupRecId              _vendRequestSignupRecId)
    {
        VendRequestCompany  vendRequestCompany;
        NumberSeq           vendRequestNumberSeq;

        vendRequestNumberSeq                        = NumberSeq::newGetNum(VendRequestManagementParameters::numRefVendRequestNumber(), true, true);
        vendRequestCompany.VendRequestNumber        = vendRequestNumberSeq.num();
        vendRequestCompany.VendParty                = _vendRequestVendorPartyRecId;
        vendRequestCompany.BusinessJustification    = _vendRequestBusinessJustificationRecId;
        vendRequestCompany.ProspectiveProfile       = _vendRequestProspectiveProfileRecId;
        vendRequestCompany.VendRequestCompanyStatus = VendRequestCompanyStatus::Draft;
        vendRequestCompany.VendRequestCompanyType   = VendRequestCompanyType::NewVendorCompanyRequest;
        vendRequestCompany.ContactParty             = _vendRequestContactPartyRecId;
        vendRequestCompany.SignUp                   = _vendRequestSignupRecId;

        vendRequestCompany.insert();

        return vendRequestCompany.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a record with the given record ID
    /// </summary>
    /// <param name="recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether the record found is updatable.
    /// </param>
    /// <returns>
    ///    The record found.
    /// </returns>
    static VendRequestCompany findRecId( recId       recId,
                                    boolean     _forUpdate = false )
    {
        VendRequestCompany vendRequestCompany;

        vendRequestCompany.selectForUpdate(_forUpdate);

        select vendRequestCompany
            where vendRequestCompany.RecId == recId;

        return vendRequestCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkflowState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the document and workflow states of the new vendor request item.
    /// </summary>
    /// <param name="_vendRequestRecId">
    /// The record ID of the Vendor Request item to update.
    /// </param>
    /// <param name="_nextDocumentStatus">
    /// The vendor request document status of the Vendor Request item.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void setWorkflowState(recId _vendRequestRecId, VendRequestCompanyStatus _nextDocumentStatus)
    {
        VendRequestWorkflowState    nextWorflowState;
        VendRequestCompany          vendRequestCompany;
        UserRequestManager          userRequestManager;
        VendRequestUserRequest      vendRequestUserRequest;

        vendRequestCompany = VendRequestCompany::findRecId(_vendRequestRecId, true);

        ttsbegin;

        switch (_nextDocumentStatus)
        {
            case VendRequestCompanyStatus::RequestSubmitted:
                nextWorflowState = VendRequestWorkflowState::Submitted;
                break;
            case VendRequestCompanyStatus::RequestApproved:
                nextWorflowState = VendRequestWorkflowState::Approved;
                break;
            case VendRequestCompanyStatus::RequestPendingApproval:
                nextWorflowState = VendRequestWorkflowState::PendingApproval;
                break;
            case VendRequestCompanyStatus::RequestPendingComplete:
                userRequestManager = VendRequestUserRequestManager::construct();
                userRequestManager.submitUserRequest(vendRequestCompany);

                nextWorflowState = VendRequestWorkflowState::PendingCompletion;
                break;
            case VendRequestCompanyStatus::RequestComplete:
                nextWorflowState = VendRequestWorkflowState::Complete;
                break;
            case VendRequestCompanyStatus::RequestRejected:
                nextWorflowState = VendRequestWorkflowState::NotSubmitted;
                break;
            case VendRequestCompanyStatus::RequestCancelled:
                nextWorflowState = VendRequestWorkflowState::NotSubmitted;
                break;
            case VendRequestCompanyStatus::VendorInvited:
                break;
            case VendRequestCompanyStatus::ProfileDrafted:
                nextWorflowState = VendRequestWorkflowState::NotSubmitted;
                break;
            case VendRequestCompanyStatus::ProfileSubmitted:
                nextWorflowState = VendRequestWorkflowState::Submitted;
                break;
            case VendRequestCompanyStatus::VendorPendingApproval:
                nextWorflowState = VendRequestWorkflowState::PendingApproval;
                break;
            case VendRequestCompanyStatus::VendorChangeRequested:
                nextWorflowState = VendRequestWorkflowState::NotSubmitted;
                break;
            case VendRequestCompanyStatus::VendorRejected:
                nextWorflowState = VendRequestWorkflowState::WorkflowComplete;
                // If vendor has online access and user request exists, need to inactivate the user
                select firstonly RecId, User, VendorRequest from vendRequestUserRequest
                        where vendRequestUserRequest.VendorRequest == vendRequestCompany.RecId;

                if (vendRequestCompany.NoOnlineAccess == NoYes::No && vendRequestUserRequest.RecId)
                {
                    userRequestManager = VendRequestUserRequestManager::construct();
                    userRequestManager.inactiveUser(vendRequestUserRequest);
                }
                break;
            case VendRequestCompanyStatus::VendorApproved:
                nextWorflowState = VendRequestWorkflowState::Approved;
                VendRequestCompanyWorkflowManager::convertProspectToVendor(vendRequestCompany);
                break;
        }

        if (_nextDocumentStatus == VendRequestCompanyStatus::RequestCancelled &&
            vendRequestCompany.VendRequestCompanyStatus == VendRequestCompanyStatus::RequestRejected)
        {
            _nextDocumentStatus = VendRequestCompanyStatus::RequestRejected;
        }
        vendRequestCompany.VendRequestCompanyStatus = _nextDocumentStatus;
        vendRequestCompany.VendRequestWorkflowState = nextWorflowState;
        vendRequestCompany.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRequestCompanyType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the request company type of the vendor request record.
    /// </summary>
    /// <param name="_vendRequestRecId">
    /// The record ID of the Vendor Request item to update.
    /// </param>
    /// <param name="_requestCompanyType">
    /// The vendor request document status of the Vendor Request item.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void updateRequestCompanyType(recId _vendRequestRecId, VendRequestCompanyType _requestCompanyType)
    {
        VendRequestCompany  vendRequestCompany;

        ttsbegin;

        vendRequestCompany = VendRequestCompany::findRecId(_vendRequestRecId, true);
        vendRequestCompany.VendRequestCompanyType = _requestCompanyType;

        vendRequestCompany.update();

        VendRequest::updateRequestQuestionnaires(vendRequestCompany);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createContactAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new record in the <c>LogisticsPostalAddress</c> table for the existing vendor associated to an unsolicited vendor profile.
    /// </summary>
    /// <param name="_vendRequestSignup">
    /// A <c>VendRequestSignUp</c> record that represents the unsolicited vendor profile.
    /// </param>
    /// <param name="_dirPerson">
    /// A <c>DirPerson</c> record associated with vendor.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void createContactAddress(
        VendRequestSignup _vendRequestSignup,
        DirPerson         _dirPerson)
    {
        LogisticsLocation      logisticsLocationForContact;
        LogisticsPostalAddress logisticsPostalAddressForContact;

        ttsBegin;

        //Creating contact person address records
        logisticsLocationForContact = LogisticsLocation::create(_vendRequestSignup.ContactName);

        DirPartyLocationContract partyLocationContract = DirPartyLocationContract::constructForPartyLocation(_dirPerson.RecId, logisticsLocationForContact.RecId);
        partyLocationContract.parmIsPostalAddress(true);
        partyLocationContract.parmIsPrimary(true);
        partyLocationContract.parmIsPrivate(false);
        partyLocationContract.parmRoleIds([LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Other).RecId]);

        DirParty::createOrUpdateLocation(partyLocationContract);

        logisticsPostalAddressForContact.clear();
        logisticsPostalAddressForContact.City             = _vendRequestSignup.ContactCity;
        logisticsPostalAddressForContact.CountryRegionId  = _vendRequestSignup.ContactCountryRegion;
        logisticsPostalAddressForContact.Street           = _vendRequestSignup.ContactStreet;
        logisticsPostalAddressForContact.State            = _vendRequestSignup.ContactState;
        logisticsPostalAddressForContact.ZipCode          = _vendRequestSignup.ContactZipCode;
        logisticsPostalAddressForContact.Address          = _vendRequestSignup.ContactAddress;
        logisticsPostalAddressForContact.Location  = logisticsLocationForContact.RecId;
        logisticsPostalAddressForContact.ValidFrom = DateTimeUtil::utcNow();
        logisticsPostalAddressForContact.ValidTo   = DateTimeUtil::maxValue();
        logisticsPostalAddressForContact.insert();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createContactForExistingVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new record in the <c>ContactPerson</c> table for the existing vendor associated to an unsolicited vendor profile.
    /// </summary>
    /// <param name="_vendRequestSignup">
    /// A <c>VendRequestSignUp</c> record that represents the unsolicited vendor profile.
    /// </param>
    /// <returns>
    /// The <c>ContactPerson</c> record created for the existing vendor.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ContactPerson createContactForExistingVendor(VendRequestSignup _vendRequestSignup)
    {
        ContactPerson   contactPerson;
        DirPersonRecId  dirPersonRecId;

        ttsBegin;

        dirPersonRecId = VendRequestCompany::createContactPerson(_vendRequestSignup);

        if (_vendRequestSignup.ContactEmail)
        {
            LogisticsElectronicAddress::createElectronicAddressFromUnsolicited(dirPersonRecId, LogisticsElectronicAddressMethodType::Email, _vendRequestSignup.ContactEmail, NoYes::Yes);
        }

        if (_vendRequestSignup.ContactTelefax)
        {
            LogisticsElectronicAddress::createElectronicAddressFromUnsolicited(dirPersonRecId, LogisticsElectronicAddressMethodType::Fax, _vendRequestSignup.ContactTelefax, NoYes::No);
        }

        if (_vendRequestSignup.ContactPhone)
        {
            LogisticsElectronicAddress::createElectronicAddressFromUnsolicited(dirPersonRecId, LogisticsElectronicAddressMethodType::Phone, _vendRequestSignup.ContactPhone, NoYes::No);
        }

        changeCompany(CompanyInfo::findRecId(_vendRequestSignup.CompanyInfo).DataArea)
        {
            contactPerson.ContactForParty = VendTable::findRecId(_vendRequestSignup.VendTable).Party;
            contactPerson.Party = dirPersonRecId;
            contactPerson.insert();
        }

        ttsCommit;

        return contactPerson;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS322068</DeveloperDocumentation>
	<Label>@SYS130365</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>RecId</TitleField1>
	<TitleField2>VendRequestCompanyStatus</TitleField2>
	<Extends>VendRequest</Extends>
	<Modules>Obsolete</Modules>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendRequestCompanyStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendRequestCompanyType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CompanyContact</Name>
			<Label>@SYS130387</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ContactPersonInformation</Name>
			<Label>@SYS130389</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EPNVATaxInformation</Name>
			<Label>@SYS133957</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Request</Name>
			<Label>@SYS130390</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendRequestCompanyStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Requestor</Name>
			<Label>@SYS130492</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>UnsolicitedVendor</Name>
			<Label>@SYS317008</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ValidationIndicators</Name>
			<Label>@SYS135198</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendorInformation</Name>
			<Label>@SYS137195</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendorOnlineCapablities</Name>
			<Label>@SYS301617</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NoOnlineAccess</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendorRequestCompany</Name>
			<Label>@SYS130366</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendRequestCompanyStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendRequestCompanyType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendRequestSignUp</Name>
			<Label>@SYS327224</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SignUp</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsExtension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NoOnlineAccess</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendRequestNoOnlineAccess</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SignUp</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS327224</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VendRequestCompanyStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>VendRequestCompanyStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VendRequestCompanyType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS130374</Label>
			<EnumType>VendRequestCompanyType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VendRequestSignUpIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SignUp</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PK_VendRequest_VendRequestCompany</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>VendRequest</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendRequestParent</RelatedTableRole>
			<RelationshipType>Specialization</RelationshipType>
			<Role>VendRequestChild</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendRequestSignUp</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendRequestSignup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SignUp</Name>
					<Field>SignUp</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>