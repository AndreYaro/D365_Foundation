<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatalogProduct</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CatalogProduct extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkProductExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if a product is already in the catalog.
    /// </summary>
    /// <param name="_catalogId">
    /// The cataog to check in.
    /// </param>
    /// <param name="_productId">
    /// The id of the product to check for.
    /// </param>
    /// <returns>
    /// True if the product is in the catalog.
    /// </returns>
    /// <remarks>
    /// This checks for distinct product and product masters.
    /// </remarks>
    public static boolean checkProductExists(CatalogRefRecId _catalogId, EcoResProductRecId _productId)
    {
        boolean ret;
        CatalogProduct catalogProduct;

        select firstonly catalogProduct
        where catalogProduct.Catalog == _catalogId &&
              catalogProduct.Product == _productId;

        if (catalogProduct)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clean</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the record having the given catalog ID.
    /// </summary>
    /// <param name="_catalogRecId">
    /// Value of <c>CatalogRefRecId</c>.
    /// </param>
    public static void clean(CatalogRefRecId _catalogRecId)
    {
        CatalogProduct                              catalogProduct;
        RetailCatalogProductRelationExclusion       catalogProductRelationExclusion;
        CatalogProductCategory                      catalogProductCategory;

        ttsBegin;

        // delete from RetailCatalogProdInternalOrgInstanceVal and it's related tables
        RetailCatalogProdInternalOrgInstanceVal::clean(_catalogRecId);

        // delete from table RetailCatalogProductRelationExclusion
        catalogProductRelationExclusion.skipDeleteActions(true);
        catalogProductRelationExclusion.skipDeleteMethod(true);
        catalogProductRelationExclusion.skipDatabaseLog(true);
        catalogProductRelationExclusion.skipDataMethods(true);
        catalogProductRelationExclusion.skipEvents(true);

        delete_from catalogProductRelationExclusion
            exists join catalogProduct
            where catalogProductRelationExclusion.CatalogProduct == catalogProduct.RecId
            && catalogProduct.Catalog == _catalogRecId;

        // delete from table CatalogProductCategory
        catalogProductCategory.skipDeleteActions(true);
        catalogProductCategory.skipDeleteMethod(true);
        catalogProductCategory.skipDatabaseLog(true);
        catalogProductCategory.skipDataMethods(true);
        catalogProductCategory.skipEvents(true);

        delete_from catalogProductCategory
            exists join catalogProduct
            where catalogProductCategory.CatalogProduct == catalogProduct.RecId
            && catalogProduct.Catalog == _catalogRecId;

        // delete from table CatalogProductInstanceValue
        CatalogProductInstanceValue::clean(_catalogRecId);

        // delete from table CatalogProduct
        catalogProduct.skipDeleteActions(true);
        catalogProduct.skipDeleteMethod(true);
        catalogProduct.skipDatabaseLog(true);
        catalogProduct.skipDataMethods(true);
        catalogProduct.skipEvents(true);

        delete_from catalogProduct
            where catalogProduct.Catalog == _catalogRecId;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyProductLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a copy of the product lines from the source catalog to the specified target catalog.
    /// </summary>
    /// <param name="_sourceCatalogId">
    /// The RecId of the source catalog.
    /// </param>
    /// <param name="_targetCatalogId">
    /// The RecId of the target catalog.
    /// </param>
    public static void copyProductLines(
        CatalogRefRecId _sourceCatalogId,
        CatalogRefRecId _targetCatalogId)
    {
        CatalogProduct sourceProduct, targetProduct;
        CatalogProductCategory catalogProductCategorySource, catalogProductCategoryTarget;
        CatalogProductInstanceValue sourceCatalogProductInstanceValue, targetCatalogProductInstanceValue;
        RetailCatalogProdInternalOrgInstanceVal sourceCatalogProdInternalOrgInstanceVal, targetCatalogProdInternalOrgInstanceVal;
        EcoResTextValue sourceTextValue, targetTextValue;
        EcoResBooleanValue sourceBooleanValue, targetBooleanValue;
        EcoResDateTimeValue sourceDateTimeValue, targetDateTimeValue;
        EcoResCurrencyValue sourceCurrencyValue, targetCurrencyValue;
        EcoResFloatValue sourceFloatValue, targetFloatValue;
        EcoResIntValue sourceIntValue, targetIntValue;
        EcoResAttributeValue sourceAttributeValue, targetAttributeValue;
        EcoResTextValueTranslation targetTranslation, sourceTranslation;
        int64 lastTransactionId;
        RetailCatalogProductRelationExclusion sourceRelationExclusion, targetRelationExclusion;

        ttsbegin;

        targetProduct.skipDatabaseLog(true);
        targetProduct.skipEvents(true);

        insert_recordset targetProduct (Product, UseHierarchy, Catalog)
            select Product, UseHierarchy, _targetCatalogId from sourceProduct
                where sourceProduct.Catalog == _sourceCatalogId;

        catalogProductCategoryTarget.skipDatabaseLog(true);
        catalogProductCategoryTarget.skipEvents(true);
        catalogProductCategoryTarget.skipDataMethods(true);

        insert_recordset catalogProductCategoryTarget (CatalogProduct, Category, CategoryHierarchy, IncludeExcludeType)
            select RecId from targetProduct
                where targetProduct.Catalog == _targetCatalogId
            join sourceProduct
                where sourceProduct.Catalog == _sourceCatalogId
                    && sourceProduct.Product == targetProduct.Product
            join Category, CategoryHierarchy, IncludeExcludeType from catalogProductCategorySource
                where catalogProductCategorySource.CatalogProduct == sourceProduct.RecId;

        targetRelationExclusion.skipDatabaseLog(true);
        targetRelationExclusion.skipEvents(true);
        targetRelationExclusion.skipDataMethods(true);

        insert_recordset targetRelationExclusion (CatalogProduct, ProductRelation)
            select RecId from targetProduct
                where targetProduct.Catalog == _targetCatalogId
            join sourceProduct
                where sourceProduct.Catalog == _sourceCatalogId
                    && sourceProduct.Product == targetProduct.Product
            join ProductRelation from sourceRelationExclusion
                where sourceRelationExclusion.CatalogProduct == sourceProduct.RecId;

        targetCatalogProductInstanceValue.skipDatabaseLog(true);
        targetCatalogProductInstanceValue.skipEvents(true);

        insert_recordset targetCatalogProductInstanceValue (CatalogProduct)
            select RecId from targetProduct
                where targetProduct.Catalog == _targetCatalogId
            join sourceProduct
                where sourceProduct.Catalog == _sourceCatalogId
                    && sourceProduct.Product == targetProduct.Product
            join sourceCatalogProductInstanceValue
                where sourceCatalogProductInstanceValue.CatalogProduct == sourceProduct.RecId;

        targetCatalogProdInternalOrgInstanceVal.skipDatabaseLog(true);
        targetCatalogProdInternalOrgInstanceVal.skipEvents(true);
        targetCatalogProdInternalOrgInstanceVal.skipDataMethods(true);

        insert_recordset targetCatalogProdInternalOrgInstanceVal (CatalogProd, InternalOrganization)
            select RecId from targetProduct
                where targetProduct.Catalog == _targetCatalogId
            join sourceProduct
                where sourceProduct.Catalog == _sourceCatalogId
                    && sourceProduct.Product == targetProduct.Product
            join InternalOrganization from sourceCatalogProdInternalOrgInstanceVal
                where sourceCatalogProdInternalOrgInstanceVal.CatalogProd == sourceProduct.RecId;

        targetAttributeValue.skipDatabaseLog(true);
        targetAttributeValue.skipEvents(true);

        #RetailCopyCatalogProductAttribute(targetTextValue, sourceTextValue, TextValue)
        #RetailCopyCatalogProductAttribute(targetBooleanValue, sourceBooleanValue, BooleanValue)
        #RetailCopyCatalogProductAttribute(targetDateTimeValue, sourceDateTimeValue, DateTimeValue)

        #RetailCopyCatalogProductDblAttribute(targetCurrencyValue, sourceCurrencyValue, CurrencyValue, CurrencyCode)
        #RetailCopyCatalogProductDblAttribute(targetFloatValue, sourceFloatValue, FloatValue, FloatUnitOfMeasure)
        #RetailCopyCatalogProductDblAttribute(targetIntValue, sourceIntValue, IntValue, IntUnitOfMeasure)

        targetTranslation.skipDatabaseLog(true);
        targetTranslation.skipEvents(true);

        insert_recordset targetTranslation (TextValueTable, Language, TextValue)
            select RecId from targetTextValue
                where targetTextValue.createdTransactionId == lastTransactionId
            join Language, TextValue from sourceTranslation
                where sourceTranslation.TextValueTable == targetTextValue.Origin;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCatalogProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// create a new catelog product.
    /// </summary>
    /// <param name="_catalogRecId">
    /// The cataog rec id.
    /// </param>
    /// <param name="_productRecId">
    /// The product rec id.
    /// </param>
    /// <param name="_useHierarchy">
    /// whether to use hierarchy to figure out product category in the catalog.
    /// </param>
    /// <returns>
    /// The created CatalogProduct.
    /// </returns>
    public static CatalogProduct createCatalogProduct(CatalogRefRecId _catalogRecId, EcoResProductRecId _productRecId, NoYes _useHierarchy)
    {
        CatalogProduct catalogProduct;

        catalogProduct.clear();
        catalogProduct.initValue();
        catalogProduct.Catalog    = _catalogRecId;
        catalogProduct.Product    = _productRecId;
        catalogProduct.UseHierarchy = _useHierarchy;
        catalogProduct.insert();

        return catalogProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a record for the given RefRecID.
    /// </summary>
    /// <param name="_catalogProductId">
    /// Reference RecID fro the record.
    /// </param>
    /// <param name="_forUpdate">
    /// Boolean value true if updateion required; else false.
    /// </param>
    /// <returns>
    /// Record of type <c>CatalogProduct</c> table.
    /// </returns>
    public static CatalogProduct find(RefRecId _catalogProductId, boolean _forUpdate = false)
    {
        CatalogProduct catalogProduct;

        catalogProduct.selectForUpdate(_forUpdate);

        select firstonly catalogProduct
            where catalogProduct.RecId == _catalogProductId;

        return catalogProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to find the catalog product from based on catalog ID and product ID.
    /// </summary>
    /// <param name="_catalogId">
    /// The cataog reference recID.
    /// </param>
    /// <param name="_productId">
    /// The product recID.
    /// </param>
    /// <param name="_forUpdate">
    ///  Boolean value true if updateion required; else false.
    /// </param>
    /// <returns>
    /// Record of type <c>CatalogProduct</c> table.
    /// </returns>
    public static CatalogProduct findByProduct(CatalogRefRecId _catalogId, EcoResProductRecId _productId, boolean _forUpdate = false)
    {
        CatalogProduct catalogProduct;

        catalogProduct.selectForUpdate(_forUpdate);

        select firstonly catalogProduct
        where catalogProduct.Catalog == _catalogId &&
              catalogProduct.Product == _productId;

        return catalogProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryProductsByCatalog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a query that can be used to get all the products from a catalog.
    /// </summary>
    /// <param name="_catalogId">
    /// The id of catalog.
    /// </param>
    /// <returns>
    /// A query filtered by catalog.
    /// </returns>
    public static Query queryProductsByCatalog(CatalogRefRecId _catalogId)
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(CatalogProduct));

        qbds.addRange(fieldNum(CatalogProduct, Catalog))
                .value(queryValue(_catalogId));

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET15003</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@RET6066</Label>
	<TitleField1>Catalog</TitleField1>
	<TitleField2>Product</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Merchandising</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Catalog</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Catalog</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Product</Name>
			<Label>@SYS133852</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DisplayOrder</Name>
			<Label>@Retail:RetailDisplayOrder</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DisplayOrder</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Catalog</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CatalogRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Product</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseHierarchy</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DisplayOrder</Name>
			<ExtendedDataType>RetailCatalogProductDisplayOrder</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RetailCatalogProductIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Catalog</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Product</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DisplayOrderIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Catalog</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DisplayOrder</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Product</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Catalog</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>Catalog</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Catalog</Name>
					<Field>Catalog</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResProduct</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>EcoResProduct</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Product</Name>
					<Field>Product</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>