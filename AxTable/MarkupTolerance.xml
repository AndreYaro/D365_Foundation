<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupTolerance</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MarkupTolerance extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>markupCodeTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the miscellaneous charges code description.
    /// </summary>
    /// <returns>
    /// The miscellaneous charges code description.
    /// </returns>
    public TransTxt markupCodeTxt()
    {
        TransTxt transTxt;
        MarkupTable markupTable;

        if (this.ModuleType && this.MarkupCode)
        {
            select firstonly Txt from markupTable
            index hint ModuleCodeIdx
            where markupTable.ModuleType == this.ModuleType
            && markupTable.MarkupCode == this.MarkupCode;

            if (markupTable.RecId)
            {
                transTxt = markupTable.Txt;
            }
        }

        return transTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a markup tolerance with the specified markup code and module type exists.
    /// </summary>
    /// <param name="_module">
    /// Module type to check.
    /// </param>
    /// <param name="_markupCode">
    /// Markup code to check.
    /// </param>
    /// <returns>
    /// true if the markup tolerance exists; otherwise false.
    /// </returns>
    /// <remarks>
    /// The <c>ModuleInventCustVend</c> enum was replaced with a more specific enum for markup functionality, use the <c>MarkupModuleType</c> enum.
    /// </remarks>
    public static boolean exist(MarkupModuleType _module, MarkupCode _markupCode)
    {
        if (_markupCode)
        {
            return (select firstonly RecId from markupTolerance
                        index hint MarkupCodeModuleTypeIdx
                        where markupTolerance.ModuleType == _module &&
                              markupTolerance.MarkupCode == _markupCode
                   ).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a markup tolerance with the specified module type exists.
    /// </summary>
    /// <param name="_module">
    /// Module type to check.
    /// </param>
    /// <returns>
    /// true if the markup tolerance exists; otherwise false.
    /// </returns>
    /// <remarks>
    /// The <c>ModuleInventCustVend</c> enum was replaced with a more specific enum for markup functionality, use the <c>MarkupModuleType</c> enum.
    /// </remarks>
    public static boolean existModuleType(MarkupModuleType _module)
    {
        return (select firstonly RecId from markupTolerance
                    where markupTolerance.ModuleType == _module
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a unique MarkupTolerance record by MarkupCode and MarkupType
    /// </summary>
    /// <param name = "_markupModule">MarkupType field value to search for</param>
    /// <param name = "_markupCode">MarkupCode field value to search for</param>
    /// <param name = "_forUpdate">Whether or not to select the record for update</param>
    /// <returns>MarkupTolerance record if found, otherwise an empty MarkupTolerance buffer</returns>
    public static MarkupTolerance find(MarkupModule _markupModule, MarkupCode _markupCode, boolean _forUpdate = false)
    {
        MarkupTolerance markupTolerance;

        if (_markupCode)
        {
            markupTolerance.selectForUpdate(_forUpdate);

            select firstonly markupTolerance
                index hint MarkupCodeModuleTypeIdx
                where markupTolerance.ModuleType == _markupModule &&
                      markupTolerance.MarkupCode == _markupCode;
        }

        return markupTolerance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a unique MarkupTolerance record by the record's RecId
    /// </summary>
    /// <param name = "_recId">RecId of the record to search for</param>
    /// <param name = "_update">Whether or not to select the record for update</param>
    /// <returns>MarkupTolerance record if found, otherwise an empty MarkupTolerance buffer</returns>
    public static MarkupTolerance findRecId(RecId _recId, boolean _update = false)
    {
        MarkupTolerance markupTolerance;

        if (_recId)
        {
            markupTolerance.selectForUpdate(_update);

            select firstonly markupTolerance
                where markupTolerance.RecId == _recId;
        }

        return markupTolerance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Markup</ConfigurationKey>
	<DeveloperDocumentation>@SYS129683</DeveloperDocumentation>
	<FormRef>MarkupTolerance_Vend</FormRef>
	<Label>@SYS129682</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>ModuleType</TitleField1>
	<TitleField2>MarkupCode</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>AccountsPayable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>MarkupCodeModuleTypeIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TolerancePercentage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MarkupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MarkupTolerances</Name>
			<Label>@SYS129698</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TolerancePercentage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MarkupCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ModuleType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupModule</ExtendedDataType>
			<EnumType>MarkupModuleType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TolerancePercentage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupVariancePercent</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>MarkupCodeModuleTypeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>MarkupCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ModuleType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>MarkupTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>MarkupTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MarkupCode</Name>
					<Field>MarkupCode</Field>
					<RelatedField>MarkupCode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ModuleType</Name>
					<Field>ModuleType</Field>
					<RelatedField>ModuleType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>