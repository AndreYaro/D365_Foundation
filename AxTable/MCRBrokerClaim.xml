<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRBrokerClaim</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MCRBrokerClaim extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayJournalNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the journal number of the related <c>LedgerJournalTrans</c> record.
    /// </summary>
    /// <returns>
    /// The journal number of the related <c>LedgerJournalTrans</c> record.
    /// </returns>
    public display LedgerJournalId displayJournalNum()
    {
        LedgerJournalTrans ledgerJournalTrans;

        if (this.ljTransClaimRecID)
        {
            select firstonly JournalNum from ledgerJournalTrans
                where ledgerJournalTrans.RecId == this.ljTransClaimRecID;
        }
        return ledgerJournalTrans.JournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
        public boolean validateDelete()
    {
        //Never delete claims.
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>MCRBrokerClaim</c> record using the passed ledger gournal transaction record ID.
    /// </summary>
    /// <param name="_ledgerJournalTransRecID">
    /// The RecID of the related <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <param name="_update">
    /// A <c>boolean</c> used to determine whether or not a record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// The <c>MCRBrokerClaim</c> record found.
    /// </returns>
    public static MCRBrokerClaim find(LedgerJournalTransRefRecId   _ledgerJournalTransRecID,
                                      boolean                      _update = false)
    {
        MCRBrokerClaim    mcrBrokerClaim;

        if (_ledgerJournalTransRecID)
        {
            mcrBrokerClaim.selectForUpdate(_update);
            select firstonly mcrBrokerClaim
                where mcrBrokerClaim.ljTransClaimRecID == _ledgerJournalTransRecID;
        }
        return mcrBrokerClaim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the balance amount from the invoice.
    /// </summary>
    /// <returns>
    /// The balance amount.
    /// </returns>
    public display AmountCur balanceAmount()
    {
        return  this.vendInvoiceJour().vendTrans().remainAmountCur();
    }
]]></Source>
			</Method>
			<Method>
				<Name>dueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the due date from the related <c>VendInvoiceJour</c> record.
    /// </summary>
    /// <returns>
    /// The due date from the related <c>VendInvoiceJour</c> record.
    /// </returns>
    public display DueDate dueDate()
    {
        return this.vendInvoiceJour().DueDate;
    }
]]></Source>
			</Method>
			<Method>
				<Name>generateClaimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new unique number from the approved broker claims number sequence for the <c>ClaimId</c> field.
    /// </summary>
    /// <param name="_makeDecisionLater">
    /// true if the number is committed later; optional.
    /// </param>
    /// <returns>
    /// The unique number for the <c>ClaimId</c> field.
    /// </returns>
    private MCRBrokerClaimId generateClaimId(boolean _makeDecisionLater = true)
    {
        MCRBrokerClaimId brokerClaimId;
        NumberSeq       numberSeq;

        numberSeq = NumberSeq::newGetNum(VendParameters::numRefMCRBrokerClaimId(),
                                         _makeDecisionLater);

        brokerClaimId = numberSeq.num();

        return brokerClaimId;
    }
]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.ClaimId = this.generateClaimId();
        super();
    }
]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the invoice amount from the related <c>VendInvoiceJour</c> record.
    /// </summary>
    /// <returns>
    /// The invoice amount from the related <c>VendInvoiceJour</c> record.
    /// </returns>
    public display AmountCur invoiceAmount()
    {
        return this.vendInvoiceJour().InvoiceAmount;
    }
]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the invoice date from the related <c>VendInvoiceTrans</c> record.
    /// </summary>
    /// <returns>
    /// The invoice date from the related <c>VendInvoiceTrans</c> record.
    /// </returns>
    public display TransDate invoiceDate()
    {
        return this.vendInvoiceJour().InvoiceDate;
    }
]]></Source>
			</Method>
			<Method>
				<Name>invoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the invoice number from the related <c>VendInvoiceTrans</c> record.
    /// </summary>
    /// <param name="_mcrBrokerClaim">
    /// The <c>MCRBrokerClaim</c> record for which the invoice id needs to be found.
    /// </param>
    /// <returns>
    /// The invoice number from the related <c>VendInvoiceTrans</c> record.
    /// </returns>
    public display VendInvoiceId invoiceId(MCRBrokerClaim _mcrBrokerClaim)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        if (_mcrBrokerClaim.VendInvoiceInfoTableTableRefId)
        {
            // If Invoice is in pending state
            vendInvoiceInfoTable = VendInvoiceInfoTable::find(_mcrBrokerClaim.VendInvoiceInfoTableParmId,
                _mcrBrokerClaim.VendInvoiceInfoTableTableRefId);

            if (vendInvoiceInfoTable)
            {
                return vendInvoiceInfoTable.Num;
            }
            else
            {
                // If Invoice was manually posted
                select firstonly vendInvoiceInfoTable
                    where vendInvoiceInfoTable.TableRefId == _mcrBrokerClaim.VendInvoiceInfoTableTableRefId;

                if (vendInvoiceInfoTable)
                {
                    return vendInvoiceInfoTable.Num;
                }
            }
        }

        return '';
    }
]]></Source>
			</Method>
			<Method>
				<Name>paidByCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays if the current records is related to a vendor invoice and if the invoice was paid by a check.
    /// </summary>
    /// <returns>
    /// true if the vendor invoice linked to the current record was paid by a check; otherwise, false.
    /// </returns>
    public display boolean paidByCheck()
    {
        VendTrans           vendTransLocal;
        boolean             paidByCheck = false;
        BankChequePaymTrans bankChequePaymTrans;

        if (this.VendInvoiceInfoTableTableRefId)
        {
            vendTransLocal = this.vendInvoiceJour().vendTrans();

            if (vendTransLocal)
            {
                select firstonly RecId from bankChequePaymTrans
                    where bankChequePaymTrans.InvoiceCompany      == vendTransLocal.dataAreaId
                    &&    bankChequePaymTrans.RecipientType       == 0
                    &&    bankChequePaymTrans.InvoiceTransDate    == vendTransLocal.TransDate
                    &&    bankChequePaymTrans.InvoiceVoucher      == vendTransLocal.Voucher;

                paidByCheck = bankChequePaymTrans.RecId != 0;
            }
        }

        return paidByCheck;
    }
]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceJour</Name>
				<Source><![CDATA[
    public VendInvoiceJour vendInvoiceJour()
    {
        VendInvoiceJour         vendInvoiceJour;
        VendInvoiceInfoTable    vendInvoiceInfoTable;

        select firstOnly vendInvoiceJour
                    exists join vendInvoiceInfoTable
                        where vendInvoiceInfoTable.TableRefId      == this.VendInvoiceInfoTableTableRefId
                           && vendInvoiceJour.SourceDocumentHeader == vendInvoiceInfoTable.SourceDocumentHeader
                           && vendInvoiceJour.SourceDocumentLine   == vendInvoiceInfoTable.SourceDocumentLine;

        return vendInvoiceJour;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TradeBroker</ConfigurationKey>
	<DeveloperDocumentation>@MCR34397</DeveloperDocumentation>
	<Label>@MCR34397</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>WriteOffCode</TitleField1>
	<TitleField2>WriteOffLedgerDimension</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedTransactionId>Yes</ModifiedTransactionId>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WriteOffCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ClaimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BrokerAccrualRecID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LJTransClaimRecID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WriteOffCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WriteOffLedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountMST</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BrokerAccrualRecID</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>MCRBrokerAccrualRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LJTransClaimRecID</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LedgerJournalTransRefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WriteOffCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRBrokerClaimWriteOffCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WriteOffLedgerDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ClaimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRBrokerClaimId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendInvoiceInfoTableParmId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ParmId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendInvoiceInfoTableTableRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeLineRefId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Key</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LJTransClaimRecID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>BrokerAccrual</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MCRBrokerAccrual</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>MCRBrokerAccrual</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MCRBrokerClaim</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BrokerAccrualRecID</Name>
					<Field>BrokerAccrualRecID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BrokerWriteOffReason</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>MCRBrokerWriteOffReason</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WriteOffCode</Name>
					<Field>WriteOffCode</Field>
					<RelatedField>ReasonCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttributeValueCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WriteOffLedgerDimension</Name>
					<Field>WriteOffLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerJournalTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MCRBrokerClaim</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LJTransClaimRecID</Name>
					<Field>LJTransClaimRecID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>NumberSequenceTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>NumberSequenceTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ClaimId</Name>
					<Field>ClaimId</Field>
					<RelatedField>NumberSequence</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceInfoTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceInfoTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceInfoTableTableRefId</Name>
					<Field>VendInvoiceInfoTableTableRefId</Field>
					<RelatedField>TableRefId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceInfoTableParmId</Name>
					<Field>VendInvoiceInfoTableParmId</Field>
					<RelatedField>ParmId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>