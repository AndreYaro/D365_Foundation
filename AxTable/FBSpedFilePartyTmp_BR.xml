<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSpedFilePartyTmp_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class FBSpedFilePartyTmp_BR extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>code</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the unique identificator of the party to be used in obligations such as SPED files.
    /// </summary>
    /// <returns>
    ///     a string representing the unique identication of the party.
    /// </returns>
    public str 60 code()
    {
        return int2str(this.PartyType) + '_' + this.AccountNum + (this.CNPJ ? '_' + this.CNPJ : this.CPF ? '_' + this.CPF : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromCustVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts a record in the <c>FBSpedTileParty_BR</c> temporary table represented by the current table buffer instance.
    /// </summary>
    /// <param name="_custVendTable">
    ///     <c>CustVendTable</c> table buffer representing the customer or vendor table where the third party comes from.
    /// </param>
    public void insertFromCustVendTable(CustVendTable _custVendTable, FiscalEstablishmentId_BR _fiscalEstablishmentId, 
		FBThirdPartyType_BR _partyType)
    {
        this.clear();

        this.PartyType                 = _partyType;
        this.FiscalEstablishmentRecId  = FiscalEstablishment_BR::findById(_fiscalEstablishmentId).RecId;
        this.AccountNum                = _custVendTable.AccountNum;
        this.Name                      = _custVendTable.name();
        this.LogisticsPostalAddress    = DirParty::postalAddress(_custVendTable.Party, LogisticsLocationRoleType::Business).RecId;
        this.IENum                     = _custVendTable.CustVendIE_BR;
        this.CNPJ                      = FBSpedFilePartyTmp_BR::getTaxIdentificationAsCNPJ(_custVendTable.CustVendCNPJCPF_BR);
        this.CPF                       = FBSpedFilePartyTmp_BR::getTaxIdentificationAsCPF(_custVendTable.CustVendCNPJCPF_BR);

        this.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFiscalEstablishment</Name>
				<Source><![CDATA[
    internal void insertFiscalEstablishment(FiscalEstablishmentRecId_BR _fiscalEstablishmentRecId)
    {
        FiscalEstablishment_BR fiscalEstablishment = FiscalEstablishment_BR::find(_fiscalEstablishmentRecId);

        this.clear();
        this.FiscalEstablishmentRecId = _fiscalEstablishmentRecId;
        this.PartyType = FBThirdPartyType_BR::FiscalEstablishment;
        this.AccountNum = fiscalEstablishment.FiscalEstablishmentId;
        this.Name = fiscalEstablishment.Name;
        this.IENum = fiscalEstablishment.IENum_BR;
        this.LogisticsPostalAddress = fiscalEstablishment.postalAddress().RecId;
        this.Phone = fiscalEstablishment.phone();
        this.CNPJ = FBSpedFilePartyTmp_BR::getTaxIdentificationAsCNPJ(fiscalEstablishment.CNPJCPFNum_BR);
        this.CPF = FBSpedFilePartyTmp_BR::getTaxIdentificationAsCPF(fiscalEstablishment.CNPJCPFNum_BR);
        this.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromExternalFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts a record in the <c>FBSpedTileParty_BR</c> temporary table represented by the current table buffer instance.
    /// </summary>
    /// <param name="_fiscalEstablishmentRecId">
    ///     A record ID of the <c>FiscalEstablishment_BR</c> table representing the fiscal establishment from which the fiscal document comes from.
    /// </param>
    /// <param name="_externalFiscalDocument">
    ///     <c>ExternalFiscalDocument_BR</c> table buffer representing the external fiscal document where the third party comes from.
    /// </param>
    public void insertFromExternalFiscalDocument(FiscalEstablishmentRecId_BR _fiscalEstablishmentRecId, ExternalFiscalDocument_BR _externalFiscalDocument)
    {
        CustTable               custTable;
        VendTable               vendTable;
        FiscalEstablishment_BR  localFiscalEstablishment;

        this.clear();
        this.FiscalEstablishmentRecId   = _fiscalEstablishmentRecId;
        this.PartyType                  = FBUtil_BR::custVendType2ThirdPartyType(_externalFiscalDocument.FiscalDocumentAccountType);
        this.AccountNum                 = _externalFiscalDocument.FiscalDocumentAccountNum;

        switch (_externalFiscalDocument.FiscalDocumentAccountType)
        {
            case CustVendType_BR::Customer:
                custTable = CustTable::find(_externalFiscalDocument.FiscalDocumentAccountNum);
                this.Name                      = custTable.name();
                this.IENum                     = custTable.IENum_BR;
                this.LogisticsPostalAddress    = custTable.postalAddress().RecId;
                this.Phone                     = custTable.phone();
                this.CNPJ                      = FBSpedFilePartyTmp_BR::getTaxIdentificationAsCNPJ(custTable.CNPJCPFNum_BR);
                this.CPF                       = FBSpedFilePartyTmp_BR::getTaxIdentificationAsCPF(custTable.CNPJCPFNum_BR);
                break;

            case CustVendType_BR::Vendor:
                vendTable = VendTable::find(_externalFiscalDocument.FiscalDocumentAccountNum);
                this.Name                      = vendTable.name();
                this.IENum                     = vendTable.IENum_BR;
                this.LogisticsPostalAddress    = vendTable.postalAddress().RecId;
                this.Phone                     = vendTable.phone();
                this.CNPJ                      = FBSpedFilePartyTmp_BR::getTaxIdentificationAsCNPJ(vendTable.CNPJCPFNum_BR);
                this.CPF                       = FBSpedFilePartyTmp_BR::getTaxIdentificationAsCPF(vendTable.CNPJCPFNum_BR);
                break;

            case CustVendType_BR::FiscalEstablishment:
                localFiscalEstablishment = FiscalEstablishment_BR::findById(_externalFiscalDocument.FiscalDocumentAccountNum);
                this.Name                      = localFiscalEstablishment.Name;
                this.IENum                     = localFiscalEstablishment.IENum_BR;
                this.LogisticsPostalAddress    = localFiscalEstablishment.postalAddress().RecId;
                this.Phone                     = localFiscalEstablishment.phone();
                this.CNPJ                      = FBSpedFilePartyTmp_BR::getTaxIdentificationAsCNPJ(localFiscalEstablishment.CNPJCPFNum_BR);
                this.CPF                       = FBSpedFilePartyTmp_BR::getTaxIdentificationAsCPF(localFiscalEstablishment.CNPJCPFNum_BR);
                break;
        }

        this.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts a record in the <c>FBSpedTileParty_BR</c> temporary table represented by the current table buffer instance.
    /// </summary>
    /// <param name="_fiscalDocument">
    ///     <c>FiscalDocument_BR</c> table buffer representing the fiscal document where the third party comes from.
    /// </param>
    public void insertFromFiscalDocument(FiscalDocument_BR _fiscalDocument)
    {
        this.clear();
        this.FiscalEstablishmentRecId  = FiscalEstablishment_BR::findById(_fiscalDocument.FiscalEstablishment).RecId;
        this.PartyType                 = FBUtil_BR::custVendType2ThirdPartyType(_fiscalDocument.FiscalDocumentAccountType);
        this.AccountNum                = _fiscalDocument.FiscalDocumentAccountNum;
        this.Name                      = _fiscalDocument.ThirdPartyName;
        this.IENum                     = _fiscalDocument.ThirdPartyIE;
        this.LogisticsPostalAddress    = _fiscalDocument.ThirdPartyPostalAddress;
        this.Phone                     = _fiscalDocument.ThirdPartyPhone;
        this.Suframa                   = FBSpedFilePartyTmp_BR::getSuframaNumberForThirdParty(_fiscalDocument.FiscalDocumentAccountType, _fiscalDocument.FiscalDocumentAccountNum);
        this.CNPJ                      = FBSpedFilePartyTmp_BR::getTaxIdentificationAsCNPJ(_fiscalDocument.ThirdPartyCNPJCPF);
        this.CPF                       = FBSpedFilePartyTmp_BR::getTaxIdentificationAsCPF(_fiscalDocument.ThirdPartyCNPJCPF);

        this.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromNonFiscalOperation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts a record in the <c>FBSpedTilePartyTmp_BR</c> temporary table represented by the current table buffer instance.
    /// </summary>
    /// <param name="_fbNonFiscalOperation">
    ///     <c>FBNonFiscalOperation_BR</c> table buffer representing the non fiscal operation where the third party comes from.
    /// </param>
    public void insertFromNonFiscalOperation(FBNonFiscalOperation_BR _fbNonFiscalOperation)
    {
        CustTable               custTable;
        VendTable               vendTable;

        this.clear();
        this.FiscalEstablishmentRecId   = _fbNonFiscalOperation.FiscalEstablishment_BR;

        if (_fbNonFiscalOperation.AccountType == LedgerJournalACType::Cust)
        {
            this.PartyType              =  FBThirdPartyType_BR::Customer;
        }
        else if (_fbNonFiscalOperation.AccountType == LedgerJournalACType::Vend)
        {
            this.PartyType              =  FBThirdPartyType_BR::Vendor;
        }

        switch (_fbNonFiscalOperation.AccountType)
        {
            case LedgerJournalACType::Cust:
                custTable = CustTable::find(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_fbNonFiscalOperation.LedgerDimension));
                this.AccountNum                = custTable.AccountNum;
                this.Name                      = custTable.name();
                this.IENum                     = custTable.IENum_BR;
                this.LogisticsPostalAddress    = custTable.postalAddress().RecId;
                this.Phone                     = custTable.phone();
                this.CNPJ                      = FBSpedFilePartyTmp_BR::getTaxIdentificationAsCNPJ(custTable.CNPJCPFNum_BR);
                this.CPF                       = FBSpedFilePartyTmp_BR::getTaxIdentificationAsCPF(custTable.CNPJCPFNum_BR);
                break;

            case LedgerJournalACType::Vend:
                vendTable = VendTable::find(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_fbNonFiscalOperation.LedgerDimension));
                this.AccountNum                = vendTable.AccountNum;
                this.Name                      = vendTable.name();
                this.IENum                     = vendTable.IENum_BR;
                this.LogisticsPostalAddress    = vendTable.postalAddress().RecId;
                this.Phone                     = vendTable.phone();
                this.CNPJ                      = FBSpedFilePartyTmp_BR::getTaxIdentificationAsCNPJ(vendTable.CNPJCPFNum_BR);
                this.CPF                       = FBSpedFilePartyTmp_BR::getTaxIdentificationAsCPF(vendTable.CNPJCPFNum_BR);
                break;
        }

        this.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromSalesCarrierRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts a record in the <c>FBSpedTileParty_BR</c> temporary table represented by the current table buffer instance.
    /// </summary>
    /// <param name="_fiscalEstablishmentRecId">
    ///     A record ID of the <c>FiscalEstablishment_BR</c> table representing the fiscal establishment from which the fiscal document comes from.
    /// </param>
    /// <param name="_salesCarrierRecId">
    ///     A record ID of the <c>SalesCarrier</c> table representing the sales carrier used in the fiscal document.
    /// </param>
    /// <param name="_logisticsPostalAddressRecId">
    ///     A record ID of the <c>LogisticsPostalAddress</c> table representing the sales carrier postal address.
    /// </param>
    public void insertFromSalesCarrierRecId(FiscalEstablishmentRecId_BR _fiscalEstablishmentRecId,
                                            RefRecId                    _salesCarrierRecId,
                                            LogisticsPostalAddressRecId _logisticsPostalAddressRecId)
    {
        SalesCarrier            salesCarrier;
        VendTable               vendTable;

        select salesCarrier where salesCarrier.RecId == _salesCarrierRecId;

        vendTable = VendTable::find(salesCarrier.VendAccount_BR);

        this.clear();
        this.FiscalEstablishmentRecId  = _fiscalEstablishmentRecId;
        this.PartyType                 = FBThirdPartyType_BR::SalesCarrier;
        this.AccountNum                = salesCarrier.VendAccount_BR;
        this.Name                      = salesCarrier.CarrierName;
        this.IENum                     = salesCarrier.IENum_BR;
        this.LogisticsPostalAddress    = _logisticsPostalAddressRecId;
        this.Phone                     = vendTable.phone();
        this.Suframa                   = '';
        this.CNPJ                      = FBSpedFilePartyTmp_BR::getTaxIdentificationAsCNPJ(salesCarrier.CNPJCPFNum_BR);
        this.CPF                       = FBSpedFilePartyTmp_BR::getTaxIdentificationAsCPF(salesCarrier.CNPJCPFNum_BR);

        this.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts a record in the <c>FBSpedTileParty_BR</c> temporary table represented by the current table buffer instance.
    /// </summary>
    /// <param name="_fiscalEstablishmentRecId">
    ///     A record ID of the <c>FiscalEstablishment_BR</c> table representing the fiscal establishment from which the fiscal document comes from.
    /// </param>
    /// <param name="_inventBalance">
    ///     <c>FBInventBalance_BR</c> table buffer representing the invent balance where the third party comes from.
    /// </param>
    public void insertInventBalance(FiscalEstablishmentRecId_BR _fiscalEstablishmentRecId, FBInventBalance_BR _inventBalance)
    {
        CustTable               custTable;
        VendTable               vendTable;

        this.clear();
        this.FiscalEstablishmentRecId   = _fiscalEstablishmentRecId;
        this.PartyType                  = FBUtil_BR::custVendType2ThirdPartyType(_inventBalance.CustVendType);
        this.AccountNum                 = _inventBalance.CustVendAccount;

        switch (_inventBalance.CustVendType)
        {
            case CustVendType_BR::Customer:
                custTable = CustTable::find(_inventBalance.CustVendAccount);
                this.Name                      = custTable.name();
                this.IENum                     = custTable.IENum_BR;
                this.LogisticsPostalAddress    = custTable.postalAddress().RecId;
                this.Phone                     = custTable.phone();
                this.CNPJ                      = FBSpedFilePartyTmp_BR::getTaxIdentificationAsCNPJ(custTable.CNPJCPFNum_BR);
                this.CPF                       = FBSpedFilePartyTmp_BR::getTaxIdentificationAsCPF(custTable.CNPJCPFNum_BR);
                break;

            case CustVendType_BR::Vendor:
                vendTable = VendTable::find(_inventBalance.CustVendAccount);
                this.Name                      = vendTable.name();
                this.IENum                     = vendTable.IENum_BR;
                this.LogisticsPostalAddress    = vendTable.postalAddress().RecId;
                this.Phone                     = vendTable.phone();
                this.CNPJ                      = FBSpedFilePartyTmp_BR::getTaxIdentificationAsCNPJ(vendTable.CNPJCPFNum_BR);
                this.CPF                       = FBSpedFilePartyTmp_BR::getTaxIdentificationAsCPF(vendTable.CNPJCPFNum_BR);
                break;
        }

        this.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForAccountTypeAndNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether the specified record in the <c>FBSpedFilePartyTmp_BR</c> temporary table exists.
    /// </summary>
    /// <param name="_spedFileParty">
    ///     The instance of table buffer <c>FBSpedFilePartyTmp_BR</c> where data should be searched for.
    /// </param>
    /// <param name="_fiscalEstablishmentRecId">
    ///     A record ID of the <c>FiscalEstablishment_BR</c> table representing the fiscal establishment from which the fiscal document comes from.
    /// </param>
    /// <param name="_thirdPartyType">
    ///     A <c>FBThirdPartyType_BR</c> representing the type of third party to be searched for in the temporary table.
    /// </param>
    /// <param name="_accountNumber">
    ///     A <c>FiscalDocumentAccountNumber_BR</c> representing the account number to be searched for in the temporary table.
    /// </param>
    /// <returns>
    ///     true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existsForAccountTypeAndNum(FBSpedFilePartyTmp_BR          _spedFileParty,
                                                     FiscalEstablishmentRecId_BR    _fiscalEstablishmentRecId,
                                                     FBThirdPartyType_BR            _thirdPartyType,
                                                     FiscalDocumentAccountNumber_BR _accountNumber)
    {
        select firstOnly _spedFileParty
            where _spedFileParty.FiscalEstablishmentRecId == _fiscalEstablishmentRecId
                && _spedFileParty.PartyType == _thirdPartyType
                && _spedFileParty.AccountNum == _accountNumber;

        return _spedFileParty.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForSalesCarrier</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether the specified record in the <c>FBSpedFilePartyTmp_BR</c> temporary table exists.
    /// </summary>
    /// <param name="_spedFileParty">
    ///     The instance of table buffer <c>FBSpedFilePartyTmp_BR</c> where data should be searched for.
    /// </param>
    /// <param name="_fiscalEstablishmentRecId">
    ///     A record ID of the <c>FiscalEstablishment_BR</c> table representing the fiscal establishment from which the fiscal document comes from.
    /// </param>
    /// <param name="_salesCarrierRecId">
    ///     A Record ID in <c>SalesCarrier</c> table representing the sales carrier be searched for in the temporary table.
    /// </param>
    /// <returns>
    ///     true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existsForSalesCarrier(FBSpedFilePartyTmp_BR       _spedFileParty,
                                                FiscalEstablishmentRecId_BR _fiscalEstablishmentRecId,
                                                RefRecId                    _salesCarrierRecId)
    {
        SalesCarrier    salesCarrier;
        VendTable       vendTable;

        select firstOnly VendAccount_BR
            from salesCarrier
            where salesCarrier.RecId == _salesCarrierRecId;

        vendTable = VendTable::find(salesCarrier.VendAccount_BR);

        select firstOnly _spedFileParty
            where _spedFileParty.FiscalEstablishmentRecId == _fiscalEstablishmentRecId
                && _spedFileParty.PartyType == FBThirdPartyType_BR::SalesCarrier
                && _spedFileParty.AccountNum == vendTable.AccountNum;

        return _spedFileParty.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSuframaNumberForThirdParty</Name>
				<Source><![CDATA[
    private static CustSuframaNumber_BR getSuframaNumberForThirdParty(CustVendType_BR _accountType, FiscalDocumentAccountNumber_BR _accountNum)
    {
        if (_accountType == CustVendType_BR::Customer)
        {
            return CustTable::find(_accountNum).SuframaNumber_BR;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxIdentificationAsCNPJ</Name>
				<Source><![CDATA[
    private static CNPJNum_BR getTaxIdentificationAsCNPJ(CNPJCPFNum_BR _cnpjCpf)
    {
        if (FBUtil_BR::isCNPJ(_cnpjCpf))
        {
            return strKeep(_cnpjCpf, '0123456789');
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxIdentificationAsCPF</Name>
				<Source><![CDATA[
    private static CPFNum_BR getTaxIdentificationAsCPF(CNPJCPFNum_BR _cnpjCpf)
    {
        if (FBUtil_BR::isCNPJ(_cnpjCpf))
        {
            return '';
        }

        return strKeep(_cnpjCpf, '0123456789');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>BR</CountryRegionCodes>
	<DeveloperDocumentation>@sys4082457</DeveloperDocumentation>
	<Label>@sys4082456</Label>
	<TableType>TempDB</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FiscalDocumentAccountNumber_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CNPJ</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CNPJCPFNum_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CPF</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CNPJCPFNum_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FiscalEstablishmentRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FiscalEstablishmentRecId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IENum</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>IENum_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LogisticsPostalAddress</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FiscalDocumentPartyName_BR</ExtendedDataType>
			<Label>@SYS34979</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PartyType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>FBThirdPartyType_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Phone</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Phone</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Suframa</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustSuframaNumber_BR</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AccountTypeAndNum</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PartyType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FiscalEstablishmentRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>