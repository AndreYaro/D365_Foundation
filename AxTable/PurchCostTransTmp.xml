<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCostTransTmp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchCostTransTmp extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>costPriceSum</Name>
				<Source><![CDATA[
    display CostPriceQtyTotal costPriceSum()
    {
        return this.CostAmount + this.CostMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillVendInvoiceTrans</Name>
				<Source><![CDATA[
        static PurchCostTransTmp fillVendInvoiceTrans (RefRecId  _vendInvoiceTrans)
    {
        PurchCostTransTmp       purchCostTransTmpHeader;
        PurchCostTransTmp       purchCostTransTmp;
        VendInvoiceTrans        vendInvoiceTrans = VendInvoiceTrans::findRecId(_vendInvoiceTrans);
        InventTable             inventTable = InventTable::find(vendInvoiceTrans.ItemId);
        ProdIndirectTrans       prodIndirectTrans;
        VendInvoiceJour         vendInvoiceJour = vendInvoiceTrans.vendInvoiceJour();
        InventTrans             inventTrans;

        delete_from purchCostTransTmp;

        purchCostTransTmpHeader.setTmpData(purchCostTransTmp);

        // The header line
        purchCostTransTmp.clear();

        purchCostTransTmpHeader.VendInvoiceTrans = vendInvoiceTrans.RecId;
        purchCostTransTmpHeader.Resource = vendInvoiceTrans.ItemId;
        purchCostTransTmpHeader.CalcType = ItemCalcType::Purchase;
        purchCostTransTmpHeader.CostGroupId = inventTable.CostGroupId;
        purchCostTransTmpHeader.Date = vendInvoiceTrans.InvoiceDate;
        purchCostTransTmpHeader.InventDimId = vendInvoiceTrans.InventDimId;
        purchCostTransTmpHeader.Qty = vendInvoiceTrans.Qty;
        purchCostTransTmpHeader.CostMarkup = vendInvoiceTrans.PurchMarkup;
        purchCostTransTmpHeader.PurchId = vendInvoiceTrans.PurchID;

        while select *
        from inventTrans
        where inventTrans.InventTransOrigin == InventTransOrigin::findByInventTransId(vendInvoiceTrans.InventTransId).RecId
           && inventTrans.Voucher == vendInvoiceJour.CostLedgerVoucher
           && inventTrans.DateFinancial == vendInvoiceJour.InvoiceDate
        {
            purchCostTransTmpHeader.CostAmount += inventTrans.costAmountFinancialVoucher();
        }

        purchCostTransTmpHeader.insert();

        // The overhead lines
        while select Code, Type, CostGroupId, DateCalc, Amount
            from prodIndirectTrans
            where prodIndirectTrans.VoucherCalc == vendInvoiceJour.CostLedgerVoucher
               && prodIndirectTrans.DateCalc    == vendInvoiceJour.InvoiceDate
               && prodIndirectTrans.TransRefType == ProdTransRefType::InventTransId
               && prodIndirectTrans.TransRefId == vendInvoiceTrans.InventTransId
        {
            purchCostTransTmp.clear();

            purchCostTransTmp.VendInvoiceTrans = vendInvoiceTrans.RecId;
            purchCostTransTmp.Resource = prodIndirectTrans.Code;

            switch (prodIndirectTrans.Type)
            {
                case CostSheetNodeType::CalculationPurchUnitBased:
                    purchCostTransTmp.CalcType = ItemCalcType::IndirectPurchUnitBased;
                    break;
                case CostSheetNodeType::CalculationSurcharge:
                    purchCostTransTmp.CalcType = ItemCalcType::IndirectSurcharge;
                    break;
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }

            purchCostTransTmp.CostGroupId = prodIndirectTrans.CostGroupId;
            purchCostTransTmp.Date = prodIndirectTrans.DateCalc;

            purchCostTransTmp.Qty = vendInvoiceTrans.Qty;
            purchCostTransTmp.CostAmount = prodIndirectTrans.Amount;
            purchCostTransTmp.CostMarkup = 0;
            purchCostTransTmp.PurchId = vendInvoiceTrans.PurchID;

            purchCostTransTmp.insert();

            purchCostTransTmpHeader.CostAmount -= purchCostTransTmp.CostAmount;
        }

        purchCostTransTmpHeader.update();

        return purchCostTransTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillVendPackingSlipTrans</Name>
				<Source><![CDATA[
        static PurchCostTransTmp fillVendPackingSlipTrans (VendPackingSlipTransRecId  _vendPackingSlipTrans)
    {
        VendPackingSlipTrans        vendPackingSlipTrans        = VendPackingSlipTrans::findRecId(_vendPackingSlipTrans);
        VendPackingSlipJour         vendPackingSlipJour         = vendPackingSlipTrans.vendPackingslipJour();
        VendPackingSlipVersion      vendPackingSlipVersion;
        PurchCostTransTmp           purchCostTransTmpHeader;
        PurchCostTransTmp           purchCostTransTmp;
        InventTable                 inventTable = InventTable::find(vendPackingSlipTrans.ItemId);
        ProdIndirectTrans           prodIndirectTrans;
        InventTrans                 inventTrans;

        delete_from purchCostTransTmp;

        purchCostTransTmpHeader.setTmpData(purchCostTransTmp);
        // The header line
        purchCostTransTmp.clear();

        purchCostTransTmpHeader.VendPackingSlipTrans = vendPackingSlipTrans.RecId;
        purchCostTransTmpHeader.Resource = vendPackingSlipTrans.ItemId;
        purchCostTransTmpHeader.CalcType = ItemCalcType::Purchase;
        purchCostTransTmpHeader.CostGroupId = inventTable.CostGroupId;
        purchCostTransTmpHeader.Date = vendPackingSlipTrans.DeliveryDate;
        purchCostTransTmpHeader.InventDimId = vendPackingSlipTrans.InventDimId;
        purchCostTransTmpHeader.Qty = vendPackingSlipTrans.Qty;

        purchCostTransTmpHeader.CostMarkup = 0;
        purchCostTransTmpHeader.PurchId = vendPackingSlipJour.PurchId;

        while select *
        from inventTrans
        where inventTrans.InventTransOrigin == InventTransOrigin::findByInventTransId(vendPackingSlipTrans.InventTransId).RecId
        exists join vendPackingSlipVersion
        where vendPackingSlipVersion.VendPackingSlipJour    == vendPackingSlipJour.RecId
           && vendPackingSlipVersion.CostLedgerVoucher      == inventTrans.VoucherPhysical
           && vendPackingSlipVersion.AccountingDate         == inventTrans.DatePhysical
        {
            purchCostTransTmpHeader.CostAmount += inventTrans.costAmountPhysicalAsPerDate(inventTrans.DatePhysical);
        }

        purchCostTransTmpHeader.insert();

        // The overhead lines
        while select Code, Type, CostGroupId, DateEstimation, sum(Amount)
            from prodIndirectTrans
            group by Code, Type, CostGroupId, DateEstimation
            where prodIndirectTrans.TransRefId == vendPackingSlipTrans.InventTransId
            exists join vendPackingSlipVersion
            where vendPackingSlipVersion.VendPackingSlipJour    == vendPackingSlipJour.RecId
               && vendPackingSlipVersion.CostLedgerVoucher      == prodIndirectTrans.VoucherEstimation
               && vendPackingSlipVersion.AccountingDate         == prodIndirectTrans.DateEstimation
        {
            purchCostTransTmp.clear();

            purchCostTransTmp.VendPackingSlipTrans = vendPackingSlipTrans.RecId;
            purchCostTransTmp.Resource = prodIndirectTrans.Code;

            switch (prodIndirectTrans.Type)
            {
                case CostSheetNodeType::CalculationPurchUnitBased:
                    purchCostTransTmp.CalcType = ItemCalcType::IndirectPurchUnitBased;
                    break;
                case CostSheetNodeType::CalculationSurcharge:
                    purchCostTransTmp.CalcType = ItemCalcType::IndirectSurcharge;
                    break;
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }

            purchCostTransTmp.CostGroupId = prodIndirectTrans.CostGroupId;
            purchCostTransTmp.Date = prodIndirectTrans.DateEstimation;

            purchCostTransTmp.Qty = vendPackingSlipTrans.Qty;
            purchCostTransTmp.CostAmount = prodIndirectTrans.Amount;
            purchCostTransTmp.CostMarkup = 0;
            purchCostTransTmp.PurchId = vendPackingSlipJour.PurchId;

            purchCostTransTmp.insert();

            purchCostTransTmpHeader.CostAmount -= purchCostTransTmp.CostAmount;
        }

        purchCostTransTmpHeader.update();

        return purchCostTransTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@SYS304443</Label>
	<TitleField1>PurchId</TitleField1>
	<TitleField2>Resource</TitleField2>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Costing</Name>
			<Label>@SYS12539</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>costPriceSum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS19924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Date</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>costPriceSum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS35894</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalcType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostMarkup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalcType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>ItemCalcType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostAmount</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CostGroupId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CostGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostMarkup</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BOMCalcCostMarkup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>Date</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PurchId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ProductQuantity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Resource</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BOMCalcResource</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendInvoiceTrans</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendPackingSlipTrans</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOMCostGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOMCostGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CostGroupId</Name>
					<Field>CostGroupId</Field>
					<RelatedField>CostGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CostGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CalcType</Name>
					<Field>CalcType</Field>
					<ValueStr>ItemCalcType::Purchase</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchId</Name>
					<Field>PurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>