<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatDistinctProductReference</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CatDistinctProductReference extends CatProductReference
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// This will return the <c>InventTable</c> that the line indirectly may refer to
    /// </summary>
    /// <param name="_dataAreaId">
    /// The data area identifier.
    /// </param>
    /// <param name='_update'>
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record of the <c>InventTable</c> table if found; otherwise, an empty buffer.
    /// </returns>
    InventTable inventTable(dataAreaId _dataAreaId, boolean _update = false)
    {
        InventTable  inventTable;
        InventDimCombination inventDimCombination;

        // changeCompany is better than "select crossCompany"
        // becuase Security framework could automatically infer and give the permissions based on Role/Permission/Duty,
        // while "select crossCompany" requires custom CodePermission to make it work.
        if (_dataAreaId && CompanyInfo::findDataArea(_dataAreaId))
        {
            changeCompany(_dataAreaId)
            {
                inventTable.selectForUpdate(_update);

                // Find using a distinct product variant
                select firstonly inventTable
                    join ItemId from inventDimCombination
                    where inventDimCombination.DistinctProductVariant == this.DistinctProduct
                       && inventDimCombination.ItemId == inventTable.ItemId;

                if (inventTable.RecId == 0)
                {
                    //If it is not a distinct product variant it will be a distinct product.
                    select firstonly inventTable
                        where inventTable.Product == this.DistinctProduct;
                }
            }
        }

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productImageURL</Name>
				<Source><![CDATA[
    display URL productImageURL()
    {
        #AOT
        #Define.EPIMAGEPATH('/_layouts/ep/images/')
        #Define.EPDEFAULTIMAGE('CatNoImageAvailable48x48')

        EcoResProductImage image;
        Filename       filename;

        select firstonly image
            where image.RefRecord       == this.DistinctProduct
            &&    image.DefaultImage    == true;

        if (image)
        {
            filename = strfmt(
                'image_%1_%2_%3.%4',
                tablenum(EcoResProductImage),
                fieldnum(EcoResProductImage, ThumbnailSize),
                image.RecId,
                CatDisplayHelper::imageType(image)
            );
        }
        else
        {
            filename = SysResource::getImagePath(resourcestr(#EPDEFAULTIMAGE), false);
        }
        return #EPIMAGEPATH+filename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCartLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// This will do cart line validation specific to the <c>CatDistinctProductReference</c>
    /// </summary>
    /// <param name="_catCartLine">
    /// The <c>CatCartLine</c> that should be validated
    /// </param>
    /// <param name="_dataAreaId">
    /// The data area identifier.
    /// </param>
    /// <param name="_useCheckFailed">
    /// If true any validation error will result in a checkFailed call.
    /// </param>
    /// <returns>
    /// true if the record is valid, otherwise false.
    /// </returns>
    public CatCartLineInvalidityReason validateCartLine(CatCartLine _catCartLine, DataAreaId _dataAreaId, boolean _useCheckFailed = true)
    {
        CatCartLineInvalidityReason invalidityReason = CatCartLineInvalidityReason::IsValid;
        InventTable             inventTable;
        InventItemPurchSetup    inventItemPurchSetup;
        str                     errorMsg;

        invalidityReason = super(_catCartLine, _dataAreaId, _useCheckFailed);

        //Check if the product exists in this company
        if (invalidityReason == CatCartLineInvalidityReason::IsValid)
        {
            inventTable = this.inventTable(_dataAreaId);
            if (!inventTable)
            {
                invalidityReason = CatCartLineInvalidityReason::ProductNotReleased;
                if (_useCheckFailed)
                {
                    checkFailed("@SYS301566");
                }
            }
        }

        //Check if the item is stopped
        if (invalidityReason == CatCartLineInvalidityReason::IsValid)
        {
            inventItemPurchSetup = CatDisplayHelper::getInventItemPurchSetup(CompanyInfo::findDataArea(_dataAreaId).RecId, inventTable.ItemId);
            if (inventItemPurchSetup.Stopped == NoYes::Yes)
            {
                invalidityReason = CatCartLineInvalidityReason::ProductStoppedForProcurement;
                if (_useCheckFailed)
                {
                    checkFailed(strfmt("@SYS13295", inventTable.ItemId, _dataAreaId));
                }
            }
        }
        //check the quantities
        if (invalidityReason == CatCartLineInvalidityReason::IsValid)
        {
            if (inventTable)
            {
                [invalidityReason, errorMsg] = CatDistinctProductReference::validatePricingSetup(inventTable, _catCartLine, _dataAreaId);
                if (invalidityReason != CatCartLineInvalidityReason::IsValid)
                {
                    if (_useCheckFailed)
                    {
                        checkFailed(errorMsg);
                    }
                }
            }
        }
        return invalidityReason;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCartQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the cart that is specific to the <c>CatDistinctProductReference</c> table.
    /// </summary>
    /// <param name="_catCartLine">
    /// The <c>CatCartLine</c> record to validate.
    /// </param>
    /// <param name="_dataAreaId">
    /// The data area identifier.
    /// </param>
    /// <param name="_useCheckFailed">
    /// A Boolean value that specifies whether any validation error will cause a call to the
    /// <c>checkFailed</c> method.
    /// </param>
    /// <returns>
    /// true if the record is valid; otherwise, false.
    /// </returns>
    public boolean validateCartQuantity(CatCartLine _catCartLine, DataAreaId _dataAreaId, boolean _useCheckFailed = true)
    {
        CatCartLineInvalidityReason quantityInvalidityReason = CatCartLineInvalidityReason::IsValid;
        boolean                 ret;
        InventTable             inventTable;
        InventItemPurchSetup    inventItemPurchSetup;
        str                     errorMsg;

        void roundQuantity()
        {
            if (_catCartLine.UnitOfMeasure)
            {
                _catCartLine.Quantity = CatDisplayHelper::roundDecimalByUnitOfMeasureRecId(_catCartLine.UnitOfMeasure, _catCartLine.Quantity);
            }
        }

        ret = super(_catCartLine, _dataAreaId, _useCheckFailed);

        //Check if the product exists in this company
        if (ret)
        {
            inventTable = this.inventTable(_dataAreaId);
            if (!inventTable)
            {
                ret = _useCheckFailed && checkFailed("@SYS301566");
            }
        }

        //Check if the item is stopped
        if (ret)
        {
            inventItemPurchSetup = CatDisplayHelper::getInventItemPurchSetup(CompanyInfo::findDataArea(_dataAreaId).RecId, inventTable.ItemId);
            if (inventItemPurchSetup.Stopped == NoYes::Yes)
            {
                ret = _useCheckFailed && checkFailed(strfmt("@SYS13295", inventTable.ItemId, _dataAreaId));
            }
        }
        //check the quantities
        if (ret)
        {
            if (inventTable)
            {
                // must do rounding *before* validation - rounding will update the value to be checked (_catCartLine.Quantity)
                // note: we cannot move the rounding code inside validatePricingSetup because
                // - validatePricingSetup is called by both validateCartLine and validateCartQuantity
                // - validateCartQuantity is called by CatCartLine.validateWrite - that's when we *do* want rounding to occur
                // - validateCartLine     is called by CatCart.updateIsValidProduct (which is called whenever the CatCart control/page is loaded)
                //                          -- that's when we do *not* want rounding to occur
                roundQuantity();
                [quantityInvalidityReason, errorMsg] = CatDistinctProductReference::validatePricingSetup(inventTable, _catCartLine, _dataAreaId);
                if (quantityInvalidityReason != CatCartLineInvalidityReason::IsValid)
                {
                    ret = _useCheckFailed && checkFailed(errorMsg);
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified record exists in the <c>CatDistinctProductReference</c> table; if not,
    ///    an error message is displayed.
    /// </summary>
    /// <param name="_refRecId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RefRecId _refRecId)
    {
        if (_refRecId && CatDistinctProductReference::exist(_refRecId))
        {
            return true;
        }

        return checkFailed(strfmt("@SYS94719", _refRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record that matches the given <c>_RefRecId</c> of type <c>RefRecId</c> exists.
    /// </summary>
    /// <param  name='_refRecId'>
    /// An instance of the <c>RefRecId</c> data type.
    /// </param>
    /// <returns>
    /// <c>true</c> if the record was found; otherwise, <c>false</c>.
    /// </returns>
    static boolean exist(RefRecId _refRecId)
    {
        return _refRecId && (select firstonly RecId from catDistinctProductReference
                                    where catDistinctProductReference.RecId == _refRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CatDistinctProductReference</c> table.
    /// </summary>
    /// <param name="_refRecId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>CatDistinctProductReference</c> table; otherwise, an empty record.
    /// </returns>
    static CatDistinctProductReference find(RefRecId _refRecId, boolean _forUpdate = false)
    {
        CatDistinctProductReference catDistinctProductReference;

        if (_refRecId)
        {
            catDistinctProductReference.selectForUpdate(_forUpdate);
            select catDistinctProductReference where catDistinctProductReference.RecId == _refRecId;
        }
        return catDistinctProductReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePricingSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the quantity in the given line against the given item.
    /// </summary>
    /// <param name="_inventTable">
    /// The item procurement quantity setup against which to validate.
    /// </param>
    /// <param name="_catCartLine">
    /// The line in which the quantity will be validated.
    /// </param>
    /// <param name="_dataAreaId">
    /// The data area identifier.
    /// </param>
    /// <returns>
    /// A container that contains the <c>CatCartLineInvalidityReason</c> reason code that indicates whether
    /// the quantity is valid and a detailed message when the quantity is invalid.
    /// </returns>
    /// <remarks>
    /// The given item should match the given line.
    /// </remarks>
    public static container validatePricingSetup(InventTable _inventTable, CatCartLine _catCartLine, DataAreaId _dataAreaId)
    {
        CatCartLineInvalidityReason invalidityReason = CatCartLineInvalidityReason::IsValid;
        Qty                     maxOrderQty         ;
        Qty                     minOrderQty         ;
        Qty                     multipleOrderQty    ;
        str                     errorMsg                 = '';
        CatProcurementCache     procurementCache    = CatProcurementCache::getCache();
        InventItemPurchSetup    itemPurchSetup      = CatDisplayHelper::getInventItemPurchSetup(CompanyInfo::findDataArea(_dataAreaId).RecId, _inventTable.ItemId, false);

        // 0.0 "conveniently" meant "unbound by this" - in case InventItemPurchSetup==null, it means unbound:
        if (itemPurchSetup)
        {
            maxOrderQty         = itemPurchSetup.HighestQty ;
            minOrderQty         = itemPurchSetup.LowestQty  ;
            multipleOrderQty    = itemPurchSetup.MultipleQty;
        }
        else
        {
            maxOrderQty         = 0.0;
            minOrderQty         = 0.0;
            multipleOrderQty    = 0.0;
        }

        // Return error message if quantity is
        // - not positive
        // - not between minimum and maximum quantity allowed
        // - or if the quantity is not in the multiples of 'multiple of' quantity.
        if (   _catCartLine.Quantity <= 0 )
        {
            invalidityReason = CatCartLineInvalidityReason::QuantityNotPositive;
        }
        else if (
            !procurementCache.IgnoreMinimumOrderQuantitySetup
            && minOrderQty != 0
            && _catCartLine.Quantity < minOrderQty
        )
        {
            invalidityReason = CatCartLineInvalidityReason::QuantityLessThanMin;
        }
        else if (
            !procurementCache.IgnoreMaximumOrderQuantitySetup
            && maxOrderQty != 0
            && _catCartLine.Quantity > maxOrderQty
        )
        {
            invalidityReason = CatCartLineInvalidityReason::QuantityGreaterThanMax;
        }
        else if (
                (!procurementCache.IgnoreMultipleOrderQuantitySetup)
            &&  (multipleOrderQty != 0)
            // Note: X++ MOD only works properly for integers even though it accepts floats
            //  Hence we use .NET's modulus operator - after converting X++ real to .NET Decimal.
            &&  (CatDisplayHelper::moduloForReal(_catCartLine.Quantity, multipleOrderQty) != 0)
        )
        {
            invalidityReason = CatCartLineInvalidityReason::QuantityNotMultipleOf;
        }

        if (invalidityReason != CatCartLineInvalidityReason::IsValid)
        {
            errorMsg = strfmt("@SYS319584", _catCartLine.Quantity, minOrderQty, maxOrderQty, multipleOrderQty);
        }

        return [invalidityReason, errorMsg];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ProcCatalog</ConfigurationKey>
	<DeveloperDocumentation>@SYS324158</DeveloperDocumentation>
	<Label>@SYS300238</Label>
	<SingularLabel>@SYS300238</SingularLabel>
	<TableGroup>Main</TableGroup>
	<TitleField1>DistinctProduct</TitleField1>
	<Extends>CatProductReference</Extends>
	<Modules>ProcurementAndSourcing</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DistinctProduct</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DistinctProduct</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DistinctProduct</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>EcoResDistinctProductIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DistinctProduct</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CatProductReference1_4653</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CatProductReference</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CatProductReference</RelatedTableRole>
			<RelationshipType>Specialization</RelationshipType>
			<Role>CatProductReference_CatDistinctProductReference</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResDistinctProduct</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResDistinctProduct</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResDistinctProduct</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResDistinctProduct_CatDistinctProductReference</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DistinctProduct</Name>
					<Field>DistinctProduct</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>