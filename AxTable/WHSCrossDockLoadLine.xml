<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCrossDockLoadLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSCrossDockLoadLine extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateProcessedCrossDockQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates processed cross dock quantity for a load line.
    /// </summary>
    /// <param name = "_loadLineRecId">The load line record ID.</param>
    /// <returns>The cross dock quantity that has been processed.</returns>
    [Hookable(false)]
    internal static InventHandlingQty calculateProcessedCrossDockQuantity(WHSLoadLineRefRecId _loadLineRecId)
    {
        WHSCrossDockLoadLine crossDockLoadLine;

        select sum(InventHandlingQty), sum(InventHandlingQtyRemain) from crossDockLoadLine
            where crossDockLoadLine.LoadLineRecId == _loadLineRecId;

        return crossDockLoadLine.InventHandlingQty - crossDockLoadLine.InventHandlingQtyRemain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuantityForCrossDockLoadLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reduces cross dock load line quantity or deletes it if necessary.
    /// </summary>
    /// <param name = "_loadLineRecId">The referenced load line.</param>
    /// <param name = "_inventTransOriginIdSupply">The supply ID for the cross dock.</param>
    /// <param name = "_inventQty">The quantity to reduce by.</param>
    [Hookable(false)]
    internal static void updateQuantityForCrossDockLoadLine(
        WHSLoadLineRefRecId			_loadLineRecId,
        InventTransOriginIdMarked	_inventTransOriginIdSupply,
        InventHandlingQty			_inventQty)
    {
        WHSCrossDockLoadLine crossDockLoadLine;

        select firstOnly forUpdate crossDockLoadLine
            where crossDockLoadLine.LoadLineRecId               == _loadLineRecId
            &&    crossDockLoadLine.InventTransOriginIdSupply   == _inventTransOriginIdSupply;
    
        if (crossDockLoadLine.InventHandlingQty > _inventQty)
        {
            crossDockLoadLine.InventHandlingQty -= _inventQty;
            crossDockLoadLine.InventQtyMarked = crossDockLoadLine.calculateInventQtyMarked(-_inventQty);
            
            crossDockLoadLine.update();
        }
        else
        {
            crossDockLoadLine.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCrossDockTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the cross dock load line is still valid passed on the cross dock template.
    /// </summary>
    /// <returns>
    /// True if valid, otherwise; false.
    /// </returns>
    [Hookable(false)]
    internal boolean validateCrossDockTemplate()
    {
        #TimeConstants

        WHSCrossDockTemplate crossDockTemplate = WHSCrossDockTemplate::find(this.CrossDockTemplateId);

        WHSLoadLine loadLine;

        select firstOnly loadLine
            where loadLine.RecId == this.LoadLineRecId;

        InventTransOrigin supplyInventTransOrigin = InventTransOrigin::find(this.InventTransOriginIdSupply);

        TransDateTime   windowMin = WHSCrossDocking::calculateShipDateTime(loadLine);
        boolean         valid = true;

        if (windowMin == UtcDateTimeNull())
        {
            valid = false;
        }

        TransDateTime inboundDateTime =  DateTimeUtil::utcNow();

        if (valid)
        {
            valid = crossDockTemplate.validateMinMaxTimeWindow(windowMin, windowMin, inboundDateTime);
        }
        
        // If template doesn't have Fefo days specified also skip check.
        if (valid
            && crossDockTemplate.DemandReleasePolicy == WHSCrossDockDemandReleasePolicy::BeforeSupplyReceipt
            && crossDockTemplate.FEFODaysRange
            && loadLine.inventTable().whsBatchActive())
        {
            InventDim supplyInventDim = supplyInventTransOrigin.itemInventDim();

            valid = WHSCrossDockLoadLine::validateFEFOBatch(crossDockTemplate, supplyInventDim, loadLine.ItemId);
        }

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFEFOBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates supply batch for the cross dock template.
    /// </summary>
    /// <param name="_crossDockTemplate">
    /// The parameter of type <c>WHSCrossDockTemplate</c>.
    /// </param>
    /// <param name = "_supplyInventDim">Supply dimensions.</param>
    /// <param name = "_itemId">The item ID.</param>
    /// <returns>true if the supply dimension batch is valid for cross dock tempalte; otherwise, false</returns>
    [Hookable(false)]
    internal static final boolean validateFEFOBatch(
        WHSCrossDockTemplate	_crossDockTemplate,
        InventDim				_supplyInventDim,
        ItemId					_itemId)
    {
        InventBatch supplyBatch = InventBatch::find(_supplyInventDim.inventBatchId, _itemId);

        if (!supplyBatch
            || !_crossDockTemplate.FEFODaysRange)
        {
            return true;
        }

        InventBatch     oldestBatch;
        InventSum       inventSum;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            // Select oldest batch in the warehouse for the item
            select minOf(expDate) from oldestBatch
                where oldestBatch.itemId            == _itemId
                &&    oldestBatch.expDate           != DateTimeUtil::date(DateTimeUtil::minValue())
            exists join inventSum
                where inventSum.InventBatchId       == oldestBatch.inventBatchId
                &&    inventSum.InventLocationId    == _supplyInventDim.InventLocationId
                &&    inventSum.ItemId              == _itemId
                &&    inventSum.PhysicalInvent       > 0
                &&    inventSum.ClosedQty           == NoYes::No;
        }
        else
        {
            InventDim       tmpInventDim;

            // Select oldest batch in the warehouse for the item
            select minOf(expDate) from oldestBatch
            exists join tmpInventDim
                where tmpInventDim.inventBatchId    == oldestBatch.inventBatchId
                &&    tmpInventDim.InventLocationId == _supplyInventDim.InventLocationId
                &&    oldestBatch.itemId            == _itemId
                &&    oldestBatch.expDate           != DateTimeUtil::date(DateTimeUtil::minValue())
            exists join inventSum
                where inventSum.InventDimId     == tmpInventDim.inventDimId
                &&    inventSum.ItemId          == _itemId
                &&    inventSum.PhysicalInvent   > 0
                &&    inventSum.ClosedQty       == NoYes::No;
        }

        boolean ret;

        // No batch in inventory to compare
        if (!oldestBatch)
        {
            ret = true;
        }
        else
        {
            TimeOfDay     noTime;
            TransDateTime supplyBatchExp = DateTimeUtil::newDateTime(supplyBatch.expDate, noTime);
            TransDateTime oldestBatchExp = DateTimeUtil::newDateTime(oldestBatch.expDate, noTime);

            // Get the latest date that would be a valid supply batch exp date
            TransDateTime validSupplyBatchDate = DateTimeUtil::addDays(oldestBatchExp, _crossDockTemplate.FEFODaysRange);

            // If supply batch exp date is before or equal to the valid date then the batch is valid.
            if (supplyBatchExp <= validSupplyBatchDate)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePlannedCrossDockNotStarted</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean validatePlannedCrossDockNotStarted(boolean _showInfo)
    {
        boolean ret = true;

        if (this.InventHandlingQtyRemain < this.InventHandlingQty)
        {
            if (_showInfo)
            {
                ret = checkFailed("@WAX:CrossDockLoadLineDeleteFailMessage");
            }
            else
            {
                ret = false;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateLoadLineWhenModifyCrossDockLoadLine</Name>
				<Source><![CDATA[
    private boolean mustUpdateLoadLineWhenModifyCrossDockLoadLine()
    {
        var skipLoadLineUpdateWhenModifyCrossDockLoadLine = WHSSkipLoadLineUpdateWhenModifyCrossDockLoadLineContext::current();

        return !skipLoadLineUpdateWhenModifyCrossDockLoadLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        
        if (this.mustUpdateLoadLineWhenModifyCrossDockLoadLine())
        {
            WHSLoadLine loadLine = WHSLoadLine::findbyRecId(this.LoadLineRecId, true);
    
            if (loadLine.RecId != 0)
            {
                loadLine.CrossDockQuantity -= this.InventHandlingQty;
                loadLine.update();
            }
        }

        super();

        
        this.unmarkPlannedCrossDockQty(-this.InventQtyMarked, WHSLoadLine::findbyRecId(this.LoadLineRecId));

    }

]]></Source>
			</Method>
			<Method>
				<Name>unmarkPlannedCrossDockQty</Name>
				<Source><![CDATA[
    public void unmarkPlannedCrossDockQty(InventQty _unmarkQty, WHSLoadLine _whsLoadLine = null)
    {
        if (_unmarkQty < 0)
        {
            WHSLoadLine whsLoadLine = _whsLoadLine ? _whsLoadLine : whsLoadLine::findbyRecId(this.LoadLineRecId);

            if (whsLoadLine)
            {
                InventTransOriginId origRecIdDemand = InventTransOrigin::findByInventTransId(this.InventTransIdDemand).RecId;
                InventTransOriginId origRecIdSupply = this.InventTransOriginIdSupply;
            
                TmpInventTransMark transMark;
                Map mapUpdated;

                Integer transSign = whsLoadLine.orderLineInventMovement().transSign();
                InventTransOriginId markCollectionTransOriginId = origRecIdDemand;

                InventTransMarkCollection collection = TmpInventTransMark::markingCollection(InventTransOrigin::find(markCollectionTransOriginId), whsLoadLine.inventDim(), transSign);
                collection.insertCollectionToTmpTable(transMark);
 
                select firstOnly transMark
                where transMark.InventTransOrigin == origRecIdSupply;

                if (!transMark)
                {
                    return;
                }

                transMark.qtyMarkNow = _unmarkQty;
                transMark.QtyRemain -= sign(transMark.QtyRemain) * _unmarkQty;
                transMark.update();

                mapUpdated = new Map(Types::Int64, Types::Record);

                while select transMark
                {
                    mapUpdated.insert(transMark.RecId, transMark);
                }
            
                TmpInventTransMark::updateTmpMark(origRecIdDemand, whsLoadLine.inventDim(), transSign, mapUpdated.pack());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        super();
    
        WHSLoadLine loadLine = WHSLoadLine::findbyRecId(this.LoadLineRecId, true);
    
        if (loadLine.RecId != 0)
        {
            loadLine.CrossDockQuantity += this.InventHandlingQty;
            loadLine.update();
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        WHSCrossDockLoadLine origCrossDockLoadLine = this.orig();

        super();

        if (this.mustUpdateLoadLineWhenModifyCrossDockLoadLine())
        {                        
            WHSLoadLine loadLine = WHSLoadLine::findbyRecId(this.LoadLineRecId, true);
    
            if (loadLine.RecId != 0)
            {
                loadLine.CrossDockQuantity += this.InventHandlingQty - origCrossDockLoadLine.InventHandlingQty;
                loadLine.update();
            }
        }    

        
        this.unmarkPlannedCrossDockQty(this.InventQtyMarked - origCrossDockLoadLine.InventQtyMarked);
        
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        if (this.InventHandlingQtyRemain < this.InventHandlingQty)
        {
            ret = checkFailed("@WAX:StartedCrossDockDeleteError");
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelPlannedCrossDocking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels planned cross docking.
    /// </summary>
    /// <param name = "_crossDockLoadLineRecId">The <c>WHSCrossDockLoadLineRecId</c> of the <c>WHSCrossDockLoadLine</c> to cancel.</param>
    /// <returns>true if the planned cross dock was cancelled; otherwise, false.</returns>
    [Hookable(false)]
    public static boolean cancelPlannedCrossDocking(WHSCrossDockLoadLineRecId _crossDockLoadLineRecId)
    {
        WHSCrossDockLoadLine    crossDockLoadLine;
        boolean                 ret;
    
        ttsbegin;
    
        select firstOnly forUpdate crossDockLoadLine
            where crossDockLoadLine.RecId == _crossDockLoadLineRecId;
    
        // Delete the crossDockLoadLine
        if (crossDockLoadLine.validatePlannedCrossDockNotStarted(false))
        {
            WHSLoadLine::reduceCrossDockEvaluatedQuantity(crossDockLoadLine.LoadLineRecId, crossDockLoadLine.InventHandlingQtyRemain);
                
            crossDockLoadLine.delete();
    
            ret = true;
        }
        else if (crossDockLoadLine.InventHandlingQtyRemain)
        {
            WHSLoadLine::reduceCrossDockEvaluatedQuantity(crossDockLoadLine.LoadLineRecId, crossDockLoadLine.InventHandlingQtyRemain);
                
            crossDockLoadLine.InventHandlingQty -= crossDockLoadLine.InventHandlingQtyRemain;
            crossDockLoadLine.InventHandlingQtyRemain = 0;
            crossDockLoadLine.InventQtyMarked = crossDockLoadLine.calculateInventQtyMarked(-crossDockLoadLine.InventHandlingQtyRemain);
                
            crossDockLoadLine.update();
    
            ret = true;
        }
    
        ttscommit;
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOrCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update or create a <c>WHSCrossDockLoadLine</c> record.
    /// </summary>
    /// <param name = "_crossDockLoadLine">The <c>WHSCrossDockLoadLine</c> record to either udpate or create.</param>
    /// <returns>The updated, or created, <c>WHSCrossDockLoadLine</c> record.</returns>
    [Hookable(false)]
    internal static WHSCrossDockLoadLine updateOrCreate(WHSCrossDockLoadLine _crossDockLoadLine)
    {
        ttsbegin;
    
        WHSCrossDockLoadLine  crossDockLoadLine;

        select firstOnly forUpdate crossDockLoadLine
            where crossDockLoadLine.LoadLineRecId               == _crossDockLoadLine.LoadLineRecId
            &&    crossDockLoadLine.InventTransIdDemand         == _crossDockLoadLine.InventTransIdDemand
            &&    crossDockLoadLine.InventTransOriginIdSupply   == _crossDockLoadLine.InventTransOriginIdSupply;
    
        if (crossDockLoadLine.RecId)
        {
            crossDockLoadLine.InventHandlingQty         += _crossDockLoadLine.InventHandlingQty;
            crossDockLoadLine.InventHandlingQtyRemain   += _crossDockLoadLine.InventHandlingQtyRemain;
            crossDockLoadLine.InventQtyMarked           += _crossDockLoadLine.InventQtyMarked;
    
            crossDockLoadLine.update();
        }
        else
        {
            _crossDockLoadLine.insert();
           
            crossDockLoadLine = _crossDockLoadLine;
        }

        ttscommit;
    
        return crossDockLoadLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateRemainingQtyPlannedForCrossDock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the remaining qty planned for cross dock of a cross dock marked transaction.
    /// </summary>
    /// <param name = "_demandInventTransId">
    /// The demands inventTrans Id.
    /// </param>
    /// <param name = "_inventTransOriginIdSupply">
    /// The InventTransOriginId supply for the demand.
    /// </param>
    /// <param name = "_inventDimCriteria">
    /// The inventDim criteria.
    /// </param>
    /// <returns>
    /// The remaining quantity in the inventory unit that is planned for cross docking.
    /// </returns>
    [Hookable(false)]
    internal static InventHandlingQty calculateRemainingQtyPlannedForCrossDock(
        InventTransId               _demandInventTransId,
        InventTransOriginIdMarked   _inventTransOriginIdSupply,
        InventDim                   _inventDimCriteria)
    {
        WHSCrossDockLoadLine    sumCrossDockLoadLine;
        WHSLoadLine             loadLine;
        InventDim               joinInventDim;
        InventDimParm           inventDimParm;

        inventDimParm.initFromInventDim(_inventDimCriteria);

        select sum(InventHandlingQtyRemain) from sumCrossDockLoadLine
            where sumCrossDockLoadLine.InventTransIdDemand         == _demandInventTransId
            &&    sumCrossDockLoadLine.InventTransOriginIdSupply   == _inventTransOriginIdSupply
                join InventDimId from loadLine
                    where loadLine.RecId == sumCrossDockLoadLine.LoadLineRecId
                    #InventDimExistsJoin(loadLine.InventDimId, joinInventDim, _inventDimCriteria, inventDimParm);

        return sumCrossDockLoadLine.InventHandlingQtyRemain;
           
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reduceCrossDockLoadLineQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reduces the InventHandlingQty and the InventHandlingQtyRemain for the current cross dock load line.
    /// </summary>
    /// <param name="_inventQtyToReduce">
    /// The invent quantity that has to be reduced.
    /// </param>  
    [Hookable(false)]
    internal void reduceCrossDockLoadLineQuantity(InventHandlingQty _inventQtyToReduce)
    {
        ttsbegin;

        using (WHSSkipLoadLineUpdateWhenModifyCrossDockLoadLineContext context = WHSSkipLoadLineUpdateWhenModifyCrossDockLoadLineContext::construct())
        {
            if (this.InventHandlingQty > _inventQtyToReduce)
            {
                this.InventHandlingQty          -= _inventQtyToReduce;
                this.InventHandlingQtyRemain    -= _inventQtyToReduce;  
   
                this.InventQtyMarked = this.calculateInventQtyMarked(-_inventQtyToReduce);                

                this.update();          
            }
            else
            {            
                this.delete();         
            }   
        }
     
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForSupplyInventTransOriginId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean existsForSupplyInventTransOriginId(InventTransOriginId _inventTransOriginId)
    {
        return _inventTransOriginId &&
            (select firstonly RecId from whsCrossDockLoadLine
                where whsCrossDockLoadLine.InventTransOriginIdSupply == _inventTransOriginId).RecId != 0;

    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateInventQtyMarked</Name>
				<Source><![CDATA[
    public InventQty calculateInventQtyMarked(InventQty _updateQty)
    {
        return this.InventQtyMarked + _updateQty < 0 ? 0 : this.InventQtyMarked + _updateQty;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:CrossDockLoadLineDocumentation</DeveloperDocumentation>
	<Label>@WAX:CrossDockLoadLine</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>LoadLineRecId</TitleField1>
	<TitleField2>InventTransIdDemand</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>LoadLineRecIdInventRefTransIdIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>LoadLineRecIdInventRefTransIdIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventHandlingQtyRemain</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadLineRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransIdDemand</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransOriginIdSupply</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventHandlingQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LoadLineRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransIdDemand</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransOriginIdSupply</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventHandlingQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventHandlingQtyRemain</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CrossDockTemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventQtyMarked</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LoadLineRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadLineRefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransIdDemand</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>OII</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InventTransOriginIdSupply</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransOriginIdMarked</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventHandlingQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventHandlingQty</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventHandlingQtyRemain</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventHandlingQtyRemain</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CrossDockTemplateId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCrossDockTemplateId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventQtyMarked</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQtyMarked</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LoadLineRecIdInventRefTransIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LoadLineRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransOriginIdSupply</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CrossDockTemplateIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CrossDockTemplateId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventTransIdDemandSupplyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransIdDemand</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransOriginIdSupply</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventTransOriginIdSupplyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransOriginIdSupply</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransOriginIdSupply</Name>
					<Field>InventTransOriginIdSupply</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLoadLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSLoadLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LoadLineRecId</Name>
					<Field>LoadLineRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSCrossDockTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSCrossDockTemplate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CrossDockTemplateId</Name>
					<Field>CrossDockTemplateId</Field>
					<RelatedField>CrossDockTemplateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransIdDemand</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransIdDemand</Name>
					<Field>InventTransIdDemand</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>