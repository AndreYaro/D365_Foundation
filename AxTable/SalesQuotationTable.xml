<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesQuotationTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>agreementHeaderExt_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the record ID of the <c>AgreementHeaderExt_RU</c> that is attached to the current sales quotation.
    /// </summary>
    /// <returns>
    ///     Always returns zero.
    /// </returns>
    public AgreementHeaderExtRecId_RU agreementHeaderExt_RU()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canQuotationBeCanceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>SalesQuotationTable</c> can be canceled.
    /// </summary>
    /// <returns>true if the quotation can be canceled; otherwise, false.</returns>
    [Hookable(false)]
    public boolean canQuotationBeCanceled()
    {
        return SalesQuotationTableType::construct(this).canQuotationBeCanceled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canQuotationBePosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>SalesQuotationTable</c> can be posted.
    /// </summary>
    /// <returns>true if the quotation can be posted; otherwise, false.</returns>
    [Hookable(false)]
    public boolean canQuotationBePosted()
    {
        return SalesQuotationTableType::construct(this).canQuotationBePosted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canQuotationBeSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>SalesQuotationTable</c> can be selected.
    /// </summary>
    /// <returns>true if the quotation can be selected; otherwise, false.</returns>
    [Hookable(false)]
    public boolean canQuotationBeSelected()
    {
        return SalesQuotationTableType::construct(this).canQuotationBeSelected();
    }

]]></Source>
			</Method>
			<Method>
				<Name>busRelName</Name>
				<Source><![CDATA[
    public display smmBusRelName busRelName()
    {
        return smmBusRelTable::find(this.BusRelAccount).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>busRelTypeId</Name>
				<Source><![CDATA[
    public display smmBusRelTypeId busRelTypeId()
    {
        return smmBusRelTable::find(this.BusRelAccount).BusRelTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    // <remarks>
    // This method exists for extensibility purposes.
    // </remarks>
    public boolean canSubmitToWorkflow(str _workflowType = '')
    {
        return super(_workflowType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAccount</Name>
				<Source><![CDATA[
    boolean  checkAccount()
    {
        CustVendorBlocked   blockLevel;

        if (this.BusRelAccount)
        {
            if (!smmBusRelTable::find(this.BusRelAccount).canCreateSalesQuotation()
                && !(this.IsIntegration == TradeIntegrationType::Dynamics365Sales
                    && smmBusRelTablePersonUpdateReferencesFlight::instance().isEnabled()
                    && this.isIntegrationOwnerDynamics365Sales()
                    && this.QuotationStatus == SalesQuotationStatus::Confirmed
                    && this.QuotationStatus != this.orig().QuotationStatus))
            {
                // Business relation must not be a customer or vendor.
                return checkFailed("@SYS111419");
            }
        }
        if (this.CustAccount)
        {
            blockLevel          = CustTable::blocked(this.CustAccount);
        }
        switch (blockLevel)
        {
            case CustVendorBlocked::All:
                return checkFailed(strFmt("@SYS18389", this.CustAccount, enum2str(blockLevel)));
            case CustVendorBlocked::Invoice:
                warning(strFmt("@SYS18389", this.CustAccount, enum2str(blockLevel)));
                break;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkContactPerson</Name>
				<Source><![CDATA[
    boolean checkContactPerson()
    {
        ContactPerson   contactPerson;

        if (this.ContactPersonId)
        {
            contactPerson = ContactPerson::find(this.ContactPersonId);
            if (this.party() != contactPerson.ContactForParty)
            {
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCurrencyCode</Name>
				<Source><![CDATA[
    void  checkCurrencyCode()
    {
        if (this)
        {
            if (this.CurrencyCode != this.orig().CurrencyCode &&
                SalesQuotationLine::existDifferentCurrency(this.QuotationId,this.CurrencyCode))
            {
                warning("@SYS15290");

                this.CurrencyCode = this.orig().CurrencyCode;
            }

            if (this.CurrencyCode != this.orig().CurrencyCode &&
                MarkupTrans::existDifferentCurrency(this.TableId, this.RecId, this.CurrencyCode))
            {
                warning("@SYS24528");

                this.CurrencyCode = this.orig().CurrencyCode;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDelete</Name>
				<Source><![CDATA[
    boolean checkDelete()
    {
        return this.type().checkDelete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the various updates are allowed for the quotation.
    /// </summary>
    /// <param name = "_packedSalesQuotationTableCheckIfUpdateContract">
    ///     Specifies which of the update allowance values for the quotation to get; optional.
    /// </param>
    /// <returns>
    ///    A packed <c>SalesQuotationTableCanBeUpdatedContract</c> class with the values of whether the quotation can be updated to a given type.
    /// </returns>
    container checkIfUpdate(container _packedSalesQuotationTableCheckIfUpdateContract = conNull())
    {
        return this.type().checkIfUpdate(_packedSalesQuotationTableCheckIfUpdateContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvoiceAccount</Name>
				<Source><![CDATA[
    boolean checkInvoiceAccount()
    {
        CustVendorBlocked   blockLevel = CustTable::blocked(this.InvoiceAccount);

        switch (blockLevel)
        {
            case CustVendorBlocked::All:
                return checkFailed(strFmt("@SYS79283", this.InvoiceAccount, enum2str(blockLevel)));
            case CustVendorBlocked::Invoice:
                warning(strFmt("@SYS79283", this.InvoiceAccount, enum2str(blockLevel)));
                break;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdate</Name>
				<Source><![CDATA[
    boolean  checkUpdate(boolean  useWarning = true)
    {
        return this.type().checkUpdate(useWarning);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAddressReference</Name>
				<Source><![CDATA[
    public void clearAddressReference()
    {
        this.AddressRefRecId    = 0;
        this.AddressRefTableId  = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactPerson</Name>
				<Source><![CDATA[
    ContactPerson contactPerson(boolean _forUpdate = false)
    {
        return ContactPerson::find(this.ContactPersonId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactPersonName</Name>
				<Source><![CDATA[
    display ContactPersonName contactPersonName()
    {
        return ContactPerson::name(this.ContactPersonId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUpdateLineOnCurrencyCodeConversion</Name>
				<Source><![CDATA[
    protected void doUpdateLineOnCurrencyCodeConversion(SalesQuotationLine _salesQuotationLine) 
    { 
        _salesQuotationLine.doUpdate(); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCurrencyCode</Name>
				<Source><![CDATA[
    void convertCurrencyCode(
        CurrencyCode            _currencyCode,
        TradeCurencyConversion  _tradeCurencyConversion = TradeCurencyConversion::ExchRate,
        ProjId                  _projId = '')
    {
        SalesQuotationLine      salesQuotationLine;
        MarkupTrans             markupTrans;
        ProjId                  projId;
        ttsbegin;

        while select forupdate salesQuotationLine
            where salesQuotationLine.QuotationId == this.QuotationId
        {
            projId  = _projId == '' ? salesQuotationLine.salesQuotationTable().ProjIdRef : _projId;

            salesQuotationLine.convertCurrencyCode(_currencyCode, _tradeCurencyConversion, projId);
            this.doUpdateLineOnCurrencyCodeConversion(salesQuotationLine);
        }

        while select forupdate markupTrans
            index hint TableRecIdIdx
            where markupTrans.TransTableId  == this.TableId &&
                  markupTrans.TransRecId    == this.RecId   &&
                 !markupTrans.IsDeleted
        {
            markupTrans.convertCurrencyCode(_currencyCode);
            markupTrans.doUpdate();
        }

        CustPaymSched::deleteCustPaymSched(this.TableId, this.RecId);

        if (this.FixedExchRate || this.ReportingCurrencyFixedExchRate)
        {
            info(strFmt("@SYS84568", this.QuotationId));
        }

        this.FixedExchRate = 0;
        this.ReportingCurrencyFixedExchRate = 0;
        this.CurrencyCode = _currencyCode;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToLine</Name>
				<Source><![CDATA[
    public void copyAddressToLine(DialogButton             _copyAddress,
                                  SalesQuotationTable      _salesQuotationTable)
    {
        SalesQuotationLine      salesQuotationLine;

        if (_copyAddress == DialogButton::Cancel)
        {
            return;
        }

        ttsbegin;

        boolean isKittingEnabled = FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance());

        while select forupdate salesQuotationLine
            where salesQuotationLine.QuotationId == this.QuotationId &&
                (_copyAddress                == DialogButton::YesToAll ||
                 salesQuotationLine.DeliveryPostalAddress == _salesQuotationTable.orig().DeliveryPostalAddress)
        {
            if(this.mustCopyAddressToLine(salesQuotationLine))
            {
                if (isKittingEnabled && this.kittingSkipUpdateLine(salesQuotationLine))
                {
                    continue;
                }

                salesQuotationLine.setAddressFromSalesQuotationTable(this);

                if (BrazilParameters::isEnabled())
                {
                    salesQuotationLine.setTaxGroupAndTaxItemGroupFields_BR();
                }

                if (#PdsMRCEnabled)
                {
                    if (!salesQuotationLine.validateWrite())
                    {
                        throw error("@SYS4000967");
                    }
                }

                salesQuotationLine.write();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCopyAddressToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the address must be copied to the sales quotation line.
    /// </summary>
    /// <param name = "_salesQuotationLine">The <c>SalesQuotationLine</c> record to which the address is copied.</param>
    /// <returns>true if the address is to be copied to the sales quotation line; otherwise, false.</returns>
    /// <remarks>
    /// The method is meant as an extension point to change the decision whether a sales order confirmation line must be created.
    /// </remarks>
    protected boolean mustCopyAddressToLine(SalesQuotationLine _salesQuotationLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was previously instantiated by using the current buffer;
    /// optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>
    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this,
                                                                      this.companyInfo().RecId
                                                                      )
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDate</Name>
				<Source><![CDATA[
    display CreationDate  createDate()
    {
        return DateTimeUtil::date(this.CreatedDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTrans_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if the invoice will create inventory transactions based on <c>SalesPurchOperationTye_BR</c> configuration.
    /// </summary>
    /// <returns>
    /// Returns true is operation type is not set on <c>salesQuotationTable</c> or the operation type is configured to inventory transactions.
    /// </returns>
    public boolean createInventTrans_BR()
    {
        return BrazilParameters::isEnabled() == false
            || this.SalesPurchOperationType_BR == false
            || SalesPurchOperationType_BR::find(this.SalesPurchOperationType_BR).CreateInventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAutoCharges</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void calculateAutoCharges()
    {
        this.createMarkupTrans(true);

        if (MarkupTrans::existAutoChargesTransaction(this.TableId, this.RecId))
        {
            info("@SCM:MarkupCalculateAutoChargesActionSuccess");
        }
        else
        {
            info("@SCM:MarkupCalculateAutoChargesActionNotFound");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMarkupTrans</Name>
				<Source><![CDATA[
    void  createMarkupTrans(
        boolean _deleteExistingMarkupTrans = true
    )
    {
        if (this.markupAllowed())
        {
            Markup::parmInventDimParameters(this.defaultInventDim());

            Markup::insertMarkupTrans(HeadingLine::Heading,
                                      MarkupModuleType::Cust,
                                      this,
                                      this.CustAccount,
                                      this.MarkupGroup,
                                      this.CurrencyCode,
                                      this.LanguageId,
                                      '',
                                      this.MarkupGroup
                                     ,false
                                     ,_deleteExistingMarkupTrans
                                     ,this.DlvMode
                                     ,DlvMode::find(this.DlvMode).MarkupGroup
                                      );
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventDim</Name>
				<Source><![CDATA[
    private InventDim defaultInventDim()
    {
        InventDim inventDim;

        inventDim.InventSiteId = this.InventSiteId;
        inventDim.InventLocationId = this.InventLocationId;

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customerName</Name>
				<Source><![CDATA[
    display CustName customerName()
    {
        return this.custTable_CustAccount().name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTable_CustAccount</Name>
				<Source><![CDATA[
    CustTable custTable_CustAccount(boolean _forUpdate = false)
    {
        return CustTable::find(this.CustAccount, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTable_InvoiceAccount</Name>
				<Source><![CDATA[
    CustTable  custTable_InvoiceAccount(boolean  _forUpdate = false)
    {
        return CustTable::find(this.InvoiceAccount, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        #ISOCountryRegionCodes

        // <GTE>
        ITaxableDocument                    taxableDocument;
        // </GTE>

        SalesQuotationInstrumentationActivities salesQuotationActivities = SalesQuotationTable::instrumentationLogger().salesQuotationActivities();
        
        using (var activityContext = salesQuotationActivities.delete(this))
        {
            SalesQuotationTableType salesQuotationTableType = this.type();

            salesQuotationTableType.deleting();

            // Delete the primary activities attached
            smmActivityParentLink::deletePrimaryActivities(this,smmActivityParentType::Quotation);

            smmQuotationAlternativeQuotations smmQuotationAlternativeQuotations;

            // Does the deleted quotation exists as a quotation with alternative quotations linked to it
            if (smmQuotationAlternativeQuotations::exist(this.QuotationId))
            {
                smmQuotationAlternativeQuotations = smmQuotationAlternativeQuotations::find(this.QuotationId);
                delete_from smmQuotationAlternativeQuotations
                    index QuotationIdx
                    where smmQuotationAlternativeQuotations.QuotationId == this.QuotationId;
            }
            // Does the deleted quotation exists as a linked alternative quotation
            else if (smmQuotationAlternativeQuotations::existLinked(this.QuotationId))
            {
                smmQuotationAlternativeQuotations = smmQuotationAlternativeQuotations::findLinkedQuotation(this.QuotationId);
                delete_from smmQuotationAlternativeQuotations
                    index QuotationIdx
                    where smmQuotationAlternativeQuotations.LinkedQuotationId == this.QuotationId;
            }

            SalesQuotationLine              salesQuotationLine;
            SalesQuotationDeliverySchedule  salesQuotationDeliverySchedule;

            // first delete order lines with multiple deliveries not to recalculate them when deleting the delivery lines.
            while select forupdate salesQuotationLine
                where salesQuotationLine.QuotationId == this.QuotationId
                join salesQuotationDeliverySchedule
                    where salesQuotationDeliverySchedule.OrderLine == salesQuotationLine.InventTransId
            {
                if (salesQuotationLine.validateDelete())
                {
                    salesQuotationLine.delete();
                }
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                Hierarchy::deleteHierarchy(tableNum(SalesQuotationTable), this.RecId);
            }

            if (TaxIntegrationUtils::isTransitDocumentEnabled())
            {
                this.TransitDocumentTransactionMap_IN::deleteTransitDocumentsForHeader();
            }

            salesQuotationActivities.logSalesQuotation(activityContext, this);
            
            super();

            // Write to CRM transaction log
            smmTransLog::initTrans(this, smmLogAction::delete);

            salesQuotationTableType.deleted();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddress</Name>
				<Source><![CDATA[
    LogisticsPostalAddress deliveryAddress()
    {
        return LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddressing</Name>
				<Source><![CDATA[
    display LogisticsAddressing deliveryAddressing()
    {
        return this.deliveryAddress().Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryLocation</Name>
				<Source><![CDATA[
    public LogisticsLocationRecId deliveryLocation()
    {
        return LogisticsPostalAddress::getLocation(this.DeliveryPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryTransDateTime</Name>
				<Source><![CDATA[
    TransDateTime deliveryTransDateTime()
    {
        return DateTimeUtil::newDateTime(this.ShippingDateRequested,0,DateTimeUtil::getCompanyTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>dlvDate</Name>
				<Source><![CDATA[
    SalesShippingDate dlvDate(SalesShippingDate blankDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        if (this.ShippingDateRequested)
        {
            return this.ShippingDateRequested;
        }

        return blankDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editContactPersonName</Name>
				<Source><![CDATA[
    edit ContactPersonName  editContactPersonName(boolean _set, ContactPersonName _name)
    {
        ContactPersonName   name = _name;
        ContactPerson       contactPerson;
        ContactPersonId     contactPersonId;

        if (_set)
        {
            if (name)
            {
                contactPersonId = this.ContactPersonId;
				contactPerson = ContactPerson::find(_name);				
                this.ContactPersonId = contactPerson.ContactPersonId;
                if (this.ContactPersonId)
                {
                    name = contactPerson.personName();
                }
                else
                {
                    DirPartyTable       partyTable;
                    CustTable           custTable;

                    select firstonly ContactPersonId from contactPerson
                        join TableId from custTable
                         where custTable.AccountNum == this.CustAccount
                            && contactPerson.ContactForParty ==  custTable.Party
                        join Name from partyTable
                            where partyTable.RecId == contactPerson.Party
                               && partyTable.Name  like name;

                    if (contactPerson.ContactPersonId)
                    {
                        this.ContactPersonId=contactPerson.ContactPersonId;
                        name=partyTable.Name;
                    }
                }
                if (contactPersonId != this.ContactPersonId)
                {
                    if (this.checkContactPerson())
                    {
                        this.initFromContactInfo();
                        if (FormDataUtil::getFormDataSource(this))
                        {
                            FormDataUtil::getFormDataSource(this).refresh();
                        }
                    }
                    else
                    {
                        this.ContactPersonId = contactPersonId;
                    }
                }
            }
            else
            {
                this.ContactPersonId='';
            }
        }
        else
        {
            name = this.contactPersonName();
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDataSourceFields_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// enables the CustFinalUser_BR field based on the custTable_InvoiceAccount
    /// </summary>
    public void enableDataSourceFields_BR()
    {
        FormDataObject  formDataObject;

        if (FormDataUtil::isFormDataSource(this))
        {
            formDataObject = FormDataUtil::getFormDataSource(this).object(fieldNum(SalesQuotationTable, CustFinalUser_BR));
            formDataObject.allowEdit(!this.custTable_InvoiceAccount().Suframa_BR);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>euroTriangulation</Name>
				<Source><![CDATA[
    EUROTriangulation euroTriangulation(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        if (this.SettleVoucher == SettlementType::SelectedTransact && SalesParameters::find().UseSettleExchRate)
        {
            if (this.settleExchRate())
            {
                return NoYes::No;
            }
        }

        if (this.FixedExchRate)
        {
            return NoYes::No;
        }

        return Currency::triangulation(this.CurrencyCode, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    CustExchRate exchRate(date      _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                          boolean   _throwOnError = false)
    {
        CustExchRate    exchRate = 0;

        if (this.SettleVoucher == SettlementType::SelectedTransact && SalesParameters::find().UseSettleExchRate)
        {
            exchRate = this.settleExchRate(_throwOnError);
        }

        if (!exchRate)
        {
            if (this.FixedExchRate)
            {
                exchRate = this.FixedExchRate;
            }
            else
            {
                exchRate = ExchangeRateHelper::exchRate(this.CurrencyCode, _date);
            }
        }

        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        ExchRate exchRateSecondary;

        if (this.SettleVoucher == SettlementType::SelectedTransact &&
            SalesParameters::find().UseSettleExchRate &&
            (SpecTrans::getSpecTransCount(this.company(), this.TableId, this.RecId) > 0))
        {
            exchRateSecondary = 0;
        }
        else if (this.FixedExchRate)
        {
            exchRateSecondary = 0;
        }
        else
        {
            exchRateSecondary = ExchangeRateHelper::exchRateSecond(this.CurrencyCode, _date);
        }

        return exchRateSecondary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existingJournals</Name>
				<Source><![CDATA[
    container existingJournals()
    {
        return[this.lastQuotation(),
               this.lastConfirm()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedEuroTriangulation</Name>
				<Source><![CDATA[
    UnknownNoYes fixedEuroTriangulation()
    {
        if (this.SettleVoucher == SettlementType::SelectedTransact && SalesParameters::find().UseSettleExchRate)
        {
            if (this.settleExchRate())
            {
                return UnknownNoYes::No;
            }
        }

        if (this.FixedExchRate)
        {
            return UnknownNoYes::No;
        }

        return UnknownNoYes::Unknown;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedExchRate</Name>
				<Source><![CDATA[
    CustExchRate fixedExchRate(boolean throwOnError = false)
    {
        ExchRate exchRate = 0;

        if (this.SettleVoucher == SettlementType::SelectedTransact && SalesParameters::find().UseSettleExchRate)
        {
            exchRate = this.settleExchRate(throwOnError);
        }

        if (!exchRate)
        {
            exchRate = this.FixedExchRate;
        }

        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyFixedExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the reporting currency fixed exchange rate.
    /// </summary>
    /// <returns>The reporting currency fixed exchange rate.</returns>
    internal CustExchRate reportingCurrencyFixedExchRate()
    {
        return this.ReportingCurrencyFixedExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedExchRateSecondary</Name>
				<Source><![CDATA[
    ExchrateSecondary fixedExchRateSecondary()
    {
        //  Should always return zero
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryEntityRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the delivery entity record based on the postal address.
    /// </summary>
    /// <returns>
    /// A <c>CustTable</c> record or a <c>smmBusRelTable</c> record.
    /// </returns>
    public Common getDeliveryEntityRecord()
    {
        return this.TradePostalAddress::getDeliveryEntityRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinalDiscPriceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the date for which the total discount should be calculated according to the price date
    /// type setting.
    /// </summary>
    /// <returns>
    /// The date for which the total discount has to be calculated.
    /// </returns>
    /// <remarks>
    /// The price date type can be set up to use today, the requested shipping date, or the requested
    /// receipt date as the price date.
    /// </remarks>
    PriceDate getFinalDiscPriceDate()
    {
        SalesParameters salesParameters = SalesParameters::find();

        // When <c>SalesQuotationTable</c> is from a retail sales order and the retail parameter
        // UseSessionDateForCalculatingPricesAndDiscounts is active, set price date to user preferred time zone
        // disregarding PriceDateType parameter.
        if (this.retailSalesQuotationUseSessionDate())
        {
            return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        switch (salesParameters.PriceDateType)
        {
            case SalesPriceDateType::ShippingDateRequested:
                return (select minof(ShippingDateRequested) from salesQuotationLine
                    where salesQuotationLine.QuotationId == this.QuotationId).ShippingDateRequested;

            case SalesPriceDateType::ReceiptDateRequested:
                return (select minof(ReceiptDateRequested) from salesQuotationLine
                    where salesQuotationLine.QuotationId == this.QuotationId).ReceiptDateRequested;

            default:
                return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initExpiryDateFromQuotDate</Name>
				<Source><![CDATA[
    public void initExpiryDateFromQuotDate()
    {
        Days    days;

        days = SalesParameters::find().QuotationNumOfDaysExpiryDate;

        if (this.CreatedDateTime)
        {
            this.QuotationExpiryDate    = DateTimeUtil::date(this.CreatedDateTime) + days;
        }
        else
        {
            this.QuotationExpiryDate    = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) + days;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFollowUpDateFromExpiryDate</Name>
				<Source><![CDATA[
    public void initFollowUpDateFromExpiryDate()
    {
        TransDate   createdDate;

        this.QuotationFollowUpDate = this.QuotationExpiryDate - SalesParameters::find().QuotationNumOfDaysFollowUpDate;

        if (dayOfWk(this.QuotationFollowUpDate) == 7)
        {
            this.QuotationFollowUpDate = this.QuotationFollowUpDate - 2;
        }

        if (dayOfWk(this.QuotationFollowUpDate) == 6)
        {
            this.QuotationFollowUpDate = this.QuotationFollowUpDate - 1;
        }

        createdDate = this.CreatedDateTime ? DateTimeUtil::date(this.CreatedDateTime) : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (this.QuotationFollowUpDate < createdDate)
        {
            this.QuotationFollowUpDate = createdDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBusinessRelationTable</Name>
				<Source><![CDATA[
    public void initFromBusinessRelationTable()
    {
        smmBusRelTable                  smmBusRelTable;
        LogisticsLocation               location;

        if (!this.BusRelAccount)
        {
            return;
        }

        smmBusRelTable = smmBusRelTable::find(this.BusRelAccount);

        this.QuotationName              = smmBusRelTable.name();
        this.DeliveryName               = this.QuotationName;

        location = LogisticsLocationDefault::findSimpleDefault(smmBusRelTable,
            LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery));
        if (location)
        {
            this.setLocation(location.RecId);
            this.AddressRefTableId = smmBusRelTable.TableId;
            this.AddressRefRecId = smmBusRelTable.RecId;
        }

        this.TaxGroup = TaxSales::custTaxGroup(smmBusRelTable.DlvTerm, smmBusRelTable.TaxGroup, location.RecId);

        // Fields which must be cleared when changing to prospect (no customer)
        this.ContactPersonId    = '';
        this.InvoiceAccount     = '';

        this.url                        = smmBusRelTable.url();
        this.Email                      = smmBusRelTable.email();

        this.DlvMode                    = smmBusRelTable.DlvMode;
        this.DlvTerm                    = smmBusRelTable.DlvTerm;

        this.InclTax                    = (this.QuotationType == QuotationType::Sales) ? smmBusRelTable.InclTax : false;
        this.FreightZone                = smmBusRelTable.FreightZone;

        this.LanguageId                 = DirPartyTable::findRec(smmBusRelTable.Party).LanguageId;
        this.CurrencyCode               = smmBusRelTable.Currency;

        this.initializeDefaultDimension(smmBusRelTable.DefaultDimension);

        this.PostingProfile             = CustParameters::find().PostingProfile;
        this.TemplateGroupId            = '';
        this.TemplateName               = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromContactInfo</Name>
				<Source><![CDATA[
    void initFromContactInfo()
    {
        ContactPerson contactPerson = this.contactPerson();

        if (this.ContactPersonId && contactPerson.email())
        {
            this.Email = contactPerson.email();
        }
        else
        {
            this.Email = this.custTable_CustAccount().email();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustQuotationConfirmJour</Name>
				<Source><![CDATA[
    public void initFromCustQuotationConfirmJour(CustQuotationConfirmJour _custQuotationConfirmJour)
    {
        this.DlvTerm                = _custQuotationConfirmJour.DlvTerm;
        this.DlvMode                = _custQuotationConfirmJour.DlvMode;
        this.LanguageId             = _custQuotationConfirmJour.LanguageId;
        this.Payment                = _custQuotationConfirmJour.Payment;
        this.CashDisc               = _custQuotationConfirmJour.CashDiscCode;
        this.CurrencyCode           = _custQuotationConfirmJour.CurrencyCode;
        this.DefaultDimension       = this.copyDimension(_custQuotationConfirmJour.DefaultDimension);
        this.InclTax                = _custQuotationConfirmJour.InclTax;

        if (TaxParameters::find().CashDiscOnInvoice)
        {
            this.CashDiscPercent = CashDisc::find(this.CashDisc).Percent;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustQuotationJour</Name>
				<Source><![CDATA[
    public void initFromCustQuotationJour(CustQuotationJour _custQuotationJour)
    {
        this.DlvTerm                = _custQuotationJour.DlvTerm;
        this.DlvMode                = _custQuotationJour.DlvMode;
        this.LanguageId             = _custQuotationJour.LanguageId;
        this.Payment                = _custQuotationJour.Payment;
        this.CashDisc               = _custQuotationJour.CashDiscCode;
        this.CurrencyCode           = _custQuotationJour.CurrencyCode;
        this.DefaultDimension       = this.copyDimension(_custQuotationJour.DefaultDimension);
        this.InclTax                = (this.QuotationType == QuotationType::Sales) ? _custQuotationJour.InclTax : false;

        if (TaxParameters::find().CashDiscOnInvoice)
        {
            this.CashDiscPercent = CashDisc::find(this.CashDisc).Percent;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the default dimension for the purchase order line record.
    /// </summary>
    /// <param name = "_defaultDimension">
    /// The <c>DimensionDefault</c> value that will be set.
    /// </param>
    [Replaceable]
    protected void initializeDefaultDimension(DimensionDefault _defaultDimension)
    {
        this.DefaultDimension = this.copyDimension(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>PurchTable</c> record from a <c>CustTable</c> record.
    /// </summary>
    /// <param name="mandatoryFieldsOnly">
    /// A Boolean value that indicates whether to only initiate mandatory fields from the customer record;
    /// optional.
    /// </param>
    public void initFromCustTable(boolean mandatoryFieldsOnly = false)
    {
        CustTable               custTable   = this.custTable_CustAccount();
        DirPartyTable           partyTable  = this.partyTable_CustAccount();
        CustTable               custTable_InvoiceAccount;
        LogisticsLocation       location;
        LogisticsLocationEntity locationEntity;
        QuotationIdBase quotationId = this.QuotationId;

        MCRSalesQuotationTable  mcrSalesQuotationTable;
        MCRCustTable            mcrCustTable;
        // Init mandatory fields
        location =  LogisticsLocationDefault::findSimpleDefault(custTable,
            LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery));
        locationEntity = LogisticsLocationEntity::constructFromLocationRecId(location.RecId);
        this.DeliveryPostalAddress      = locationEntity.getPostalAddress().RecId;
        this.AddressRefRecId            = custTable.RecId;
        this.AddressRefTableId          = custTable.TableId;
        this.setDeliveryName();

        if (mandatoryFieldsOnly)
        {
            // Only mandatory fields, so end init.
            return;
        }

        this.CustAccount                = custTable.AccountNum;
        this.QuotationName              = partyTable.Name;

        this.InclTax                    = (this.QuotationType == QuotationType::Sales) ? custTable.InclTax : false;
        this.PriceGroupId               = custTable.PriceGroup;
        this.LineDisc                   = custTable.LineDisc;
        this.MultiLineDisc              = custTable.MultiLineDisc;
        this.EndDisc                    = custTable.EndDisc;
        this.MarkupGroup                = custTable.MarkupGroup;
        this.url                        = custTable.url();
        this.Email                      = custTable.email();
        this.FreightZone                = custTable.FreightZone;
        this.SalesGroup                 = custTable.SalesGroup;
        this.CommissionGroup            = custTable.CommissionGroup;
        this.setInventSiteId(custTable.InventSiteId);
        this.InventLocationId           = custTable.InventLocation;

        this.LanguageId                 = DirPartyTable::findRec(custTable.Party).LanguageId;

        this.CurrencyCode               = custTable.Currency;
        this.InvoiceAccount             = custTable.InvoiceAccount  ? custTable.InvoiceAccount
                                                                    : custTable.AccountNum;
        custTable_InvoiceAccount        = this.custTable_InvoiceAccount();

        if (EnableDefaultingOfFiscalDataFromInvoiceAccountFeature::isEnabled()
            || !SalesQuotationTableDefaultFiscalDataFromInvoiceAccountFlight::instance().isEnabled())
        {
            this.EnterpriseNumber = custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID);
            custTable.copyPrimaryRegistrationNumberToVATMap(this);
        }
        else
        {
            this.EnterpriseNumber = custTable_InvoiceAccount.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID);
            custTable_InvoiceAccount.copyPrimaryRegistrationNumberToVATMap(this);
        }

        this.NumberSequenceGroup        = custTable_InvoiceAccount.NumberSequenceGroup;

        this.initializeDefaultDimension(custTable.DefaultDimension);
        this.DlvTerm                    = custTable.DlvTerm;
        this.DlvMode                    = custTable.DlvMode;
        IntrastatTransport transport    = DlvMode::find(custTable.DlvMode).Transport;
        if (transport)
        {
            this.Transport              = transport;
        }
        this.DlvReason                  = custTable.DlvReason;

        LogisticsLocationSelectForm_QuoteTable::construct(this).copyShipCarrierInfo(location);

        this.setTaxGroup(TaxSales::custTaxGroup(this.DlvTerm, custTable.TaxGroup, this.deliveryLocation()));
        this.OverrideSalesTax = custTable.OverrideSalesTax;

        this.Payment                    = custTable.PaymTermId;
        this.PaymMode                   = custTable.PaymMode;
        this.PaymSpec                   = custTable.PaymSpec;
        this.PostingProfile             = CustParameters::find().PostingProfile;
        this.CashDisc                   = custTable.CashDisc;

        if (this.CashDisc)
        {
            this.CashDiscPercent        = CashDisc::find(this.CashDisc).Percent;
        }

        this.ContactPersonId            = custTable.ContactPersonId;
        this.initFromContactInfo();

        this.setListCode();

        this.SalesPoolId                = SalesParameters::find().SalesPoolId;
        if (custTable.SalesPoolId)
        {
            this.SalesPoolId            = custTable.SalesPoolId;
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            mcrCustTable = custTable.mcrCustTable();
            if (this.RecId
                || mcrCustTable.soAllocPriority != MCRSOAllocPriority::AllocationPriority10)
            {
                mcrSalesQuotationTable = this.mcrSalesQuotationTable();
                if (mcrSalesQuotationTable.soAllocPriority != mcrCustTable.soAllocPriority)
                {
                    mcrSalesQuotationTable.soAllocPriority = mcrCustTable.soAllocPriority;
                    this.mcrPackMCRSalesQuotationTable(mcrSalesQuotationTable);
                }
            }
        }
        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.CustFinalUser_BR          = custTable.CustFinalUser_BR;
            this.InterestCode_BR           = custTable.InterestCode_BR;
            this.FineCode_BR               = custTable.FineCode_BR;
        }
        // </GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustTransferTaxDefaultsFromInvoiceAcc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines to transfer default tax from invoice account.
    /// </summary>
    /// <returns>
    /// true, if transfer default tax from invoice account; otherwise, false.
    /// </returns>
    protected boolean mustTransferTaxDefaultsFromInvoiceAcc()
    {
        #ISOCountryRegionCodes
        boolean includeTaxDefaults;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES])
            || EnableDefaultingOfFiscalDataFromInvoiceAccountFeature::isEnabled())
        {
            switch (CustParameters::find().UseFiscalInvoiceAccount)
            {
                case UseFiscalInvoiceAccount::Always:
                    includeTaxDefaults = true;
                    break;
                case UseFiscalInvoiceAccount::Ask:
                    if (Box::yesNo("@SYS112098"+'\n\n'+ this.InvoiceAccount+'\n\n'+ CustTable::promptAddress(this.InvoiceAccount, LogisticsLocationRoleType::Delivery),DialogButton::Yes)==DialogButton::Yes)
                    {
                        includeTaxDefaults = true;
                    }
                    break;
                case UseFiscalInvoiceAccount::Never:
                    break;
            }
        }
        return includeTaxDefaults;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTableMandatoryFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method copies the delivery address specific logic from SalesQuotationTable.initFromCustTable
    /// </summary>
    internal void initFromCustTableMandatoryFields()
    {
        CustTable custTable = CustTable::find(this.CustAccount);

        LogisticsLocation location = LogisticsLocationDefault::findSimpleDefault(custTable, LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery));
        LogisticsLocationEntity locationEntity = LogisticsLocationEntity::constructFromLocationRecId(location.RecId);

        this.DeliveryPostalAddress = locationEntity.getPostalAddress().RecId;
        this.AddressRefRecId = custTable.RecId;
        this.AddressRefTableId = custTable.TableId;

        this.setDeliveryName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetailSaleQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>SalesQuotationTable</c> record is a Retail sales quotation record
    /// </summary>
    /// <returns>
    /// true if the <c>SalesQuotationTable</c> record is a Retail sales quotation record; otherwise, false.
    /// </returns>
    public display NoYes isRetailSaleQuotation()
    {
        return this.retailSalesQuotationTable().RetailOrder == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailSalesQuotationUseSessionDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether this <c>SalesQuotationTable</c> is from a retail sale is and the UseSessionDateForCalculatingPricesAndDiscounts
    /// Retail parameter is active.
    /// </summary>
    /// <returns>
    /// true when <c>SalesQuotationTable</c> is from a retail sale is and the UseSessionDateForCalculatingPricesAndDiscount
    /// Retail parameter is active, false otherwise.
    /// </returns>
    public boolean retailSalesQuotationUseSessionDate()
    {
        return this.isRetailSaleQuotation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesQuotationTable</Name>
				<Source><![CDATA[
    public void initFromSalesQuotationTable(SalesQuotationTable      _salesQuotationTable)
    {
        MCRSalesQuotationTable      mcrSalesQuotationTable;
        MCRSalesQuotationTable      mcrSalesQuotationTable_Param;

        this.LanguageId             = _salesQuotationTable.LanguageId;
        this.Payment                = _salesQuotationTable.Payment;
        this.PaymMode               = _salesQuotationTable.PaymMode;
        this.PaymSpec               = _salesQuotationTable.PaymSpec;
        this.NumberSequenceGroup    = _salesQuotationTable.NumberSequenceGroup;
        this.CashDisc               = _salesQuotationTable.CashDisc;
        this.DiscPercent            = _salesQuotationTable.DiscPercent;
        this.CurrencyCode           = _salesQuotationTable.CurrencyCode;
        this.DlvTerm                = _salesQuotationTable.DlvTerm;
        this.DlvMode                = _salesQuotationTable.DlvMode;
        this.DlvReason              = _salesQuotationTable.DlvReason;
        this.initializeDefaultDimension(_salesQuotationTable.DefaultDimension);
        this.TaxGroup               = _salesQuotationTable.TaxGroup;
        this.InclTax                = (this.QuotationType == QuotationType::Sales) ? _salesQuotationTable.InclTax : false;
        this.Transport              = _salesQuotationTable.Transport;
        this.Port                   = _salesQuotationTable.Port;
        this.StatProcId             = _salesQuotationTable.StatProcId;
        this.QuotationCategory      = _salesQuotationTable.QuotationCategory;

        this.CampaignId             = _salesQuotationTable.CampaignId;
        this.CallListID             = _salesQuotationTable.CallListID;
        this.DocuTitle              = _salesQuotationTable.DocuTitle;
        this.DocuIntro              = _salesQuotationTable.DocuIntro;
        this.DocuConclusion         = _salesQuotationTable.DocuConclusion;

        this.DeliveryName               = _salesQuotationTable.DeliveryName;
        this.DeliveryPostalAddress      = _salesQuotationTable.DeliveryPostalAddress;
        this.AddressRefRecId            = _salesQuotationTable.AddressRefRecId;
        this.AddressRefTableId          = _salesQuotationTable.AddressRefTableId;

        if (TaxParameters::find().CashDiscOnInvoice)
        {
            this.CashDiscPercent = CashDisc::find(this.CashDisc).Percent;
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            mcrSalesQuotationTable           = this.mcrSalesQuotationTable();
            mcrSalesQuotationTable_Param     = _salesQuotationTable.mcrSalesQuotationTable();
            mcrSalesQuotationTable.SourceId  = mcrSalesQuotationTable_Param.SourceId;
            this.mcrPackMCRSalesQuotationTable(mcrSalesQuotationTable);
        }
        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.SalesPurchOperationType_BR = _salesQuotationTable.SalesPurchOperationType_BR;
            this.CustFinalUser_BR           = _salesQuotationTable.CustFinalUser_BR;
            this.FineCode_BR                = _salesQuotationTable.FineCode_BR;
            this.InterestCode_BR            = _salesQuotationTable.InterestCode_BR;
        }
        // </GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesQuotationTemplate</Name>
				<Source><![CDATA[
    void initFromSalesQuotationTemplate(SalesQuotationTable      _salesQuotationTable,
                                        smmBusRelAccount         _busRelAccount,
                                        CustAccount              _custAccount)
    {
        this.initValue();

        if (_busRelAccount)
        {
            this.BusRelAccount = _busRelAccount;
            this.initFromBusinessRelationTable();
        }
        else
        if (_custAccount)
        {
            this.CustAccount = _custAccount;
            this.initFromCustTable();
        }

        this.QuotationCategory  = _salesQuotationTable.QuotationCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSmmCampaignSelection</Name>
				<Source><![CDATA[
    void initFromSmmCampaignSelection(smmCampaignSelection smmCampaignSelection)
    {
        MCRSalesQuotationTable  mcrSalesQuotationTable;
        this.CampaignId        = smmCampaignSelection.CampaignId;
        this.ContactPersonId   = smmCampaignSelection.ContactPersonId;
        this.BusRelAccount     = smmCampaignSelection.busRelAccount();

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            mcrSalesQuotationTable = this.mcrSalesQuotationTable();
            // Set source code from campaign on the quote.
            mcrSalesQuotationTable.SourceId = smmCampaignTable::find(smmCampaignSelection.CampaignId).mcrSourceID;
            this.mcrPackMCRSalesQuotationTable(mcrSalesQuotationTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSmmOpportunityTable</Name>
				<Source><![CDATA[
    public void initFromSmmOpportunityTable(smmOpportunityTable _smmOpportunityTable)
    {
        this.OpportunityId          = _smmOpportunityTable.OpportunityId;
        this.WorkerSalesResponsible = _smmOpportunityTable.OwnerWorker;
        this.DeliveryName           = _smmOpportunityTable.Subject;
        this.QuotationName          = _smmOpportunityTable.Subject;

        if (_smmOpportunityTable.SourceRefTableId == tableNum(smmCampaignTable) && _smmOpportunityTable.SourceRefRecId)
        {
            smmCampaignTable smmCampaignTable = smmCampaignTable::findRec(_smmOpportunityTable.SourceRefRecId);

            this.CampaignId = smmCampaignTable.CampaignId;
            this.CallListID = smmCampaignTable.TMCallListID;
        }

        // BusRelAccount/CustAccount are needed for Sales Quotation to post
        this.CustAccount = CustTable::findByPartyRecId(_smmOpportunityTable.Party).AccountNum;
        if (this.CustAccount)
        {
            this.initFromCustTable();
        }
        else
        {
            this.BusRelAccount = smmBusRelTable::findByParty(_smmOpportunityTable.Party).BusRelAccount;
            if (this.BusRelAccount)
            {
                this.initFromBusinessRelationTable();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSmmTMCallListTable</Name>
				<Source><![CDATA[
    void initFromSmmTMCallListTable(smmTMCallListTable smmTMCallListTable)
    {
        this.CallListID         = smmTMCallListTable.CallListId;
        this.CampaignId         = smmTMCallListTable.smmCampaignId();
        this.ContactPersonId    = smmTMCallListTable.ContactPersonId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoiceAccount</Name>
				<Source><![CDATA[
    public void initInvoiceAccount()
    {
        CustTable   custTable;

        custTable = this.custTable_InvoiceAccount();

        this.NumberSequenceGroup    = custTable.NumberSequenceGroup;
        this.Payment                = custTable.PaymTermId;
        this.PaymMode               = custTable.PaymMode;
        this.PaymSpec               = custTable.PaymSpec;

        this.CashDisc               = custTable.CashDisc;

        if (TaxParameters::find().CashDiscOnInvoice)
        {
            this.CashDiscPercent = CashDisc::find(this.CashDisc).Percent;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjQuotationFromProject</Name>
				<Source><![CDATA[
    void initProjQuotationFromProject(ProjId _fromProjId = this.ProjIdRef)
    {
        // Init header
        this.ProjIdRef = _fromProjId;
        this.type().initFromProjTable(this.projTable());
        this.PriceGroupId = ProjTable::findPriceGroup(this.ProjIdRef);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void  initValue()
    {
        SalesQuotationTableType salesQuotationTableType;

        super();

        salesQuotationTableType = this.type();
        salesQuotationTableType.initValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert(boolean _skipMarkup = false)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        SalesQuotationInstrumentationActivities salesQuotationActivities = SalesQuotationTable::instrumentationLogger().salesQuotationActivities();
        
        using (var activityContext = salesQuotationActivities.insert(this))
        {
            SalesQuotationTableType salesQuotationTableType = this.type();

            salesQuotationTableType.inserting();

            MCRChannelUser mcrChannelUserlocal = MCRChannelUser::find();

            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
            {
                this.SysExtensionSerializerMap::postInsert();
                // updating the table with the channelID.
                if(mcrChannelUserlocal)
                {
                    this.RetailChannelTable   = mcrChannelUserlocal.Channel;
                }
            }

            this.setRetailChannel();

            salesQuotationActivities.logSalesQuotation(activityContext, this);

            super();

            this.mcrSetRetailChannel();

            this.setRetailSalesQuotationAffiliation();

            this.SysExtensionSerializerMap::postInsert();

            if (!(_skipMarkup || this.skipMarkup()))
            {
                this.createMarkupTrans(false);
            }

            salesQuotationTableType.inserted();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmount</Name>
				<Source><![CDATA[
    display AmountCur invoiceAmount()
    {
        SalesQuotationTotals salesQuotationTotals;

        salesQuotationTotals = SalesQuotationTotals::construct(this);
        return salesQuotationTotals.totalAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBankDocumentCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a <c>BankDocument</c> has been created for this order.
    /// </summary>
    /// <returns>
    /// true if it is created; otherwise, false.
    /// </returns>
    public boolean isBankDocumentCreated()
    {
        boolean ret = false;

        if (this.isMarkedForBankLG())
        {
            if (this.BankLGDocumentMap::isLinkedToGuarantee())
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMarkedForBankLG</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the quotation is marked for Letter of Guarantee.
    /// </summary>
    /// <returns>
    /// true if the quotation order is marked for Letter of Guarantee; otherwise, false.
    /// </returns>
    public boolean isMarkedForBankLG()
    {
        return this.BankDocumentType == BankLGDocumentType::LetterOfGuarantee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTemplate</Name>
				<Source><![CDATA[
    public boolean isTemplate()
    {
        return (this.TemplateGroupId && this.TemplateName) ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWBSEditable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the WBS for this Project is editable
    /// </summary>
    /// <returns>
    /// True, if the WBS is editable; false otherwise.
    /// </returns>
    public boolean isWBSEditable()
    {
        SalesQuotationStatus status = this.QuotationStatus;

        return (status == SalesQuotationStatus::Created ||
                status == SalesQuotationStatus::Revised ||
                status == SalesQuotationStatus::Modified);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastConfirm</Name>
				<Source><![CDATA[
    display QuotationIdBase lastConfirm()
    {
        return this.type().lastConfirm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastConfirmationDate</Name>
				<Source><![CDATA[
    display TransDate lastConfirmationDate()
    {
        return (select maxof(QuotationDate) from custQuotationConfirmSalesLink
                    where custQuotationConfirmSalesLink.OrigQuotationId == this.QuotationId).QuotationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastQuotation</Name>
				<Source><![CDATA[
    display QuotationIdBase lastQuotation()
    {
        return this.type().lastQuotation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table ID of the table that considered the line table in the current header or line
    /// relationship.
    /// </summary>
    /// <returns>
    /// ID of the <c>PurchLine</c> table.
    /// </returns>
    public RefTableId lineMapping()
    {
        return tableNum(SalesQuotationLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAllowed</Name>
				<Source><![CDATA[
    public boolean markupAllowed()
    {
        return this.type().markupAllowed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayBankDocumentTypeBeAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the bank document type can be set to specified type.
    /// </summary>
    /// <param name="_bankDocumentType">
    /// The bank document type to validate; optional.
    /// </param>
    /// <returns>
    /// true if it is allowed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method does not check whether the current bank document type can be modified.
    /// </remarks>
    public boolean mayBankDocumentTypeBeAllowed(BankLGDocumentType _bankDocumentType = this.BankDocumentType)
    {
        boolean ret = true;

        switch (_bankDocumentType)
        {
            case BankLGDocumentType::LetterOfGuarantee:
                // It is not allowed to create LG on project quotation if
                // the related project's bank document type is set to LG.
                if (this.QuotationType  == QuotationType::Project
                    && this.ProjIdRef   != ''
                    && ProjTable::find(this.ProjIdRef).isMarkedForBankLG())
                {
                    ret = false;
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayCancelledBeUpdated</Name>
				<Source><![CDATA[
    boolean mayCancelledBeUpdated(boolean _includeCreated = false)
    {
        return this.type().mayCancelledBeUpdated(_includeCreated );
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayConfirmationBeUpdated</Name>
				<Source><![CDATA[
    boolean mayConfirmationBeUpdated()
    {
        return this.type().mayConfirmationBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayLostBeUpdated</Name>
				<Source><![CDATA[
    boolean mayLostBeUpdated()
    {
        return this.type().mayLostBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayQuotationBeUpdated</Name>
				<Source><![CDATA[
    boolean mayQuotationBeUpdated()
    {
        return this.type().mayQuotationBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayPhone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the phone contact information for the customer of the sales quotation.
    /// </summary>
    /// <returns>
    /// The phone contact information for the customer of the sales quotation.
    /// </returns>
    public display LogisticsElectronicAddressLocator mcrDisplayPhone()
    {
        LogisticsLocation           logisticsLocation;
        LogisticsElectronicAddress  logisticsElectronicAddress;

        select firstonly RecId, ParentLocation from logisticsLocation
            where logisticsLocation.ParentLocation == this.deliveryAddress().Location
            join Locator, Location, Type from logisticsElectronicAddress
            where logisticsElectronicAddress.Location == logisticsLocation.RecId
                && logisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Phone;

        return logisticsElectronicAddress.Locator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrPackMCRSalesQuotationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the <c>MCRSalesQuotationTable</c> as an extension into the <c>SalesQuotationTable</c>.
    /// </summary>
    /// <param name="_mcrSalesQuotationTable">
    /// The <c>MCRSalesQuotationTable</c> record to be packed as an extension.
    /// </param>
    public void mcrPackMCRSalesQuotationTable(MCRSalesQuotationTable _mcrSalesQuotationTable)
    {
        MCRSalesQuotationTable  mcrSalesQuotationTable = _mcrSalesQuotationTable;
        mcrSalesQuotationTable.SalesQuotationTable = this.RecId;

        this.SysExtensionSerializerMap::packExtensionTable(mcrSalesQuotationTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSalesQuotationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>SalesQuotationTable</c> record associated with the <c>MCRSalesQuotationTable</c>.
    /// </summary>
    /// <returns>
    /// The <c>SalesQuotationTable</c> record associated with the <c>MCRSalesQuotationTable</c>.
    /// </returns>
    public MCRSalesQuotationTable mcrSalesQuotationTable()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(MCRSalesQuotationTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateRelatedRetailSalesQuotationTable</Name>
				<Source><![CDATA[
    protected boolean mustCreateRelatedRetailSalesQuotationTable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSetRetailChannel</Name>
				<Source><![CDATA[
    private void mcrSetRetailChannel()
    {
        MCRChannelUser mcrChannelUser = MCRChannelUser::find();

        if (mcrChannelUser || this.mustCreateRelatedRetailSalesQuotationTable())
        {
            RetailSalesQuotationTable retailSalesQuotationTable = this.retailSalesQuotationTable();
            if (!retailSalesQuotationTable.RetailChannel)
            {
                this.initRetailSalesQuotationTableFromRetailChannel(retailSalesQuotationTable, mcrChannelUser);
                this.packRetailSalesQuotationTable(retailSalesQuotationTable);
            }

            RetailChannelTable retailChannelTable = RetailChannelTable::findByRecId(mcrChannelUser.Channel);

            if (!this.InventLocationId)
            {
                // Default warehouse on call centre should be used as a fallback warehouse for call centre sales orders when none provided.
                this.InventLocationId = retailChannelTable.inventLocation;
            }

            if (!this.InventSiteId)
            {
                // Fallback to call center channel warehouse site in case none is defined.
                this.InventSiteId = InventLocation::findInLegalEntity(retailChannelTable.inventLocation, retailChannelTable.inventLocationDataAreaId).InventSiteId;

                this.modifiedField(fieldNum(SalesQuotationTable, InventSiteId));
            }

            this.doUpdate();
        }

        // Handling the scenario where the quotation is coming from CRM and has retail channel set.
        OMOperatingUnitEntity oMOperatingUnitEntity;
        boolean isCrmQuote = false;

        if (this.OperatingUnitPartyNumber)
        {
            isCrmQuote = true;
            select firstonly PartyNumber from oMOperatingUnitEntity
                    where oMOperatingUnitEntity.PartyNumber == this.OperatingUnitPartyNumber;
        }

        if (isCrmQuote)
        {
            RetailSalesQuotationTable retailSalesQuotationTable = this.retailSalesQuotationTable();
            RetailChannelTable retailChannelTable = RetailChannelTable::findByOperatingUnitId(oMOperatingUnitEntity.RecId);
            retailSalesQuotationTable.RetailChannel = retailChannelTable.RecId;
            retailSalesQuotationTable.OMInternalOrganization = retailChannelTable.OMOperatingUnitID;
            this.packRetailSalesQuotationTable(retailSalesQuotationTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was initialized with the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SalesPurchModifiedTableExtension::newNonRecursive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldFromQuotationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults other fields depending on the modified field and quotation type.
    /// </summary>
    /// <returns> true if defaulting for the quotation type is handled; otherwise, false.</returns>
    protected boolean modifiedFieldFromQuotationType(FieldId _fieldId, boolean _userInput)
    {
        switch (this.QuotationType)
        {
            case QuotationType::Sales:
                this.modifiedField_Sales(_fieldId, _userInput);
                return true;

            case QuotationType::Project:
                this.modifiedField_Project(_fieldId);
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId, boolean _userInput = true)
    {
        // !Important! Whenever you add a modified field handler for a new field you need to make sure to add it to the SalesQuotationTableType.defaultingFields method
        MCRSalesQuotationTable  mcrSalesQuotationTable;

        super(_fieldId);

        boolean fieldIsModified = this.modifiedFieldFromQuotationType(_fieldId, _userInput);
        if (!fieldIsModified)
        {
            this.modifiedField_Sales(_fieldId, _userInput);
        }

        switch (_fieldId)
        {
            case fieldNum(SalesQuotationTable, ReceiptDateRequested):
                if (this.ShippingDateRequested > this.ReceiptDateRequested)
                {
                    this.ShippingDateRequested = this.ReceiptDateRequested;
                }
                break;

            case fieldNum(SalesQuotationTable, ShippingDateRequested):
                if (this.ShippingDateRequested > this.ReceiptDateRequested)
                {
                    this.ReceiptDateRequested = this.ShippingDateRequested;
                }
                break;

            case fieldNum(SalesQuotationTable, BusRelAccount):
                this.CustAccount = '';
                this.InvoiceAccount = '';
                this.initFromBusinessRelationTable();
                this.transferBusRelAccount();
                this.OpportunityId = '';
                break;

            case fieldNum(SalesQuotationTable, InventSiteId):
                this.InventStorageDimMap::modifiedField(fieldNum(InventStorageDimMap, InventSiteID));
                if (!this.RecId)
                {
                    SalesCalcAvailableDlvDates::initDateFieldsOrderEntryDeadline(this);
                }
                this.modifiedInventSiteFromParent();
                this.setListCode();
                break;
            case fieldNum(SalesQuotationTable, InventLocationId):
                this.InventStorageDimMap::modifiedField(fieldNum(InventStorageDimMap, InventLocationID));
                this.setListCode();
                break;

            case fieldNum(SalesQuotationTable, CustAccount):
                this.BusRelAccount = '';
                this.transferCustAccount(_userInput);
                this.OpportunityId = '';

                if (!this.InventSiteId)
                {
                    RetailChannelTable retailChannelTable = RetailChannelTable::findByRecId(this.RetailChannelTable);
                    if (retailChannelTable)
                    {
                        // Default warehouse on call centre should be used as a fallback warehouse for call centre sales quotation when none provided.
                        this.InventLocationId = retailChannelTable.inventLocation;
                        // Fallback to call center channel warehouse site in case none is defined.
                        this.InventSiteId = InventLocation::findInLegalEntity(retailChannelTable.inventLocation, retailChannelTable.inventLocationDataAreaId).InventSiteId;
                    }
                }
                break;

            case fieldNum(SalesQuotationTable, CashDisc) :
                if (TaxParameters::find().CashDiscOnInvoice)
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceES00021, funcName());
                    this.CashDiscPercent = CashDisc::find(this.CashDisc).Percent;
                }
                break;

            case fieldNum(SalesQuotationTable, DeliveryPostalAddress):
                LogisticsLocationSelectForm_QuoteTable::construct(this).copyAddressToCaller(this.getDeliveryEntityRecord(),this.DeliveryPostalAddress);
                break;

            case fieldNum(SalesQuotationTable, DlvTerm):
                this.setTaxGroup(TaxSales::custTaxGroup(this.DlvTerm, this.TaxGroup, this.deliveryLocation()));
                break;

            case fieldNum(SalesQuotationTable, DlvMode):
                this.Transport = dlvMode::find(this.DlvMode).Transport;
                break;

            case fieldNum(SalesQuotationTable, InvoiceAccount):
                this.setListCode();
                break;
            // load the corresponding source code for the modified campaign id
            case fieldNum(SalesQuotationTable, CampaignId):
                if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
                {
                    mcrSalesQuotationTable = this.mcrSalesQuotationTable();
                    if (this.CampaignId)
                    {
                        mcrSalesQuotationTable.SourceId = smmCampaignTable::find(this.CampaignId).mcrSourceID;
                    }
                    else
                    {
                        mcrSalesQuotationTable.SourceId = '';
                    }
                    this.mcrPackMCRSalesQuotationTable(mcrSalesQuotationTable);
                }
                break;

            case fieldNum(SalesQuotationTable, SalesPurchOperationType_BR):
                if (BrazilParameters::isEnabled())
                {
                    this.PostingProfile = SalesPurchOperationType_BR::find(this.SalesPurchOperationType_BR).CustPostingProfile;
                }
                break;
        }
        this.modifiedFieldDDC(_fieldId, _userInput);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField_Project</Name>
				<Source><![CDATA[
    public void modifiedField_Project(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(SalesQuotationTable, BusRelAccount):
                if (this.mustClearProjectInformation())
                {
                    this.ProjIdRef = "";
                    this.ProjInvoiceProjId = "";
                }
                break;

            case fieldNum(SalesQuotationTable, CustAccount):
                if (this.mustClearProjectInformation())
                {
                    this.ProjIdRef = "";
                    this.ProjInvoiceProjId = "";
                }
                break;

            case fieldNum(SalesQuotationTable, ContactPersonId):
                this.initFromContactInfo();
                break;

            case fieldNum(SalesQuotationTable, ProjIdRef):
                var customerDimension = this.DefaultDimension;
                this.initProjQuotationFromProject(this.ProjIdRef);

                if (ProjSalesQuotationInitializationV2Flight::instance().isEnabled())
                {
                    if (this.DefaultDimension == 0)
                    {
                        this.DefaultDimension = customerDimension;
                    }
                }
                break;

            case fieldNum(SalesQuotationTable, ProjInvoiceProjId):
                this.ProjIdRef = '';
                break;
            case fieldNum(SalesQuotationTable, psaEstProjStartDate):
            case fieldNum(SalesQuotationTable, psaEstProjEndDate):
            case fieldNum(SalesQuotationTable, psaSchedCalendarId):
                if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                {
                    if (this.psaEstProjStartDate && this.psaEstProjEndDate)
                    {
                        this.psaEstdProjDuration = WorkCalendarCalculator::calcDuration(this.psaEstProjStartDate, this.psaEstProjEndDate, this.psaSchedCalendarId);
                    }
                    else
                    {
                        this.psaEstdProjDuration = 0;
                    }
                }
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustClearProjectInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the project related information must be cleared.
    /// </summary>
    /// <returns>
    /// true if the project related fields must be cleared; otherwise, false.
    /// </returns>
    protected boolean mustClearProjectInformation()
    {
        return this.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRetailChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the channel id for sales quotation header if it is created by a call center user.
    /// </summary>
    private void setRetailChannel()
    {
        MCRChannelUser mcrChannelUser = MCRChannelUser::find();

        if (mcrChannelUser)
        {
            this.RetailChannelTable = mcrChannelUser.Channel;
            
            if (SalesQuotationInitDefaultDimensionFromRetailChannelToggle::instance().isEnabled())
            {
                this.DefaultDimension = this.mergeDimension(RetailChannelTable::findByRecId(this.RetailChannelTable).DefaultDimension);
            }
            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRetailSalesQuotationAffiliation</Name>
				<Source><![CDATA[
    private void setRetailSalesQuotationAffiliation()
    {
        if (RetailParameters::isRetailEnabledAndInUse() && this.QuotationId)
        {
            RetailSalesQuotationAffiliation retailSalesQuotationAffiliation;
            RetailCustAffiliation retailCustAffiliation;
            QuotationId quotationId = this.QuotationId;

            if (RetailSalesQuotationAffiliation::findByQuotationId(quotationId))
            {
                delete_from retailSalesQuotationAffiliation
                    where retailSalesQuotationAffiliation.QuotationId == quotationId;
            }

            insert_recordset retailSalesQuotationAffiliation (quotationId, Affiliation)
            select quotationId, RetailAffiliationId from retailCustAffiliation
                where retailCustAffiliation.CustAccountNum == this.CustAccount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField_Sales</Name>
				<Source><![CDATA[
    public void modifiedField_Sales(FieldId _fieldId, boolean _userInput=true)
    {
        switch (_fieldId)
        {
            case fieldNum(SalesQuotationTable, ContactPersonId):
                this.initFromContactInfo();
                break;

            case fieldNum(SalesQuotationTable, Payment):
                break;

            case fieldNum(SalesQuotationTable, PaymMode):
                this.paymModeModified();
                break;

            case fieldNum(SalesQuotationTable, InvoiceAccount):
                this.transferInvoiceAccount(_userInput);
                break;

            case fieldNum(SalesQuotationTable, ProjIdRef):
                if (this.QuotationType == QuotationType::Project)
                {
                    this.initProjQuotationFromProject();
                }
                break;

            case fieldNum(SalesQuotationTable, ProjInvoiceProjId):
                break;

            case fieldNum(SalesQuotationTable, DiscPercent):
                this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, _fieldId);
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldDDC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the modified field event for delivery date control fields.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID for the modified field.
    /// </param>
    /// <param name="_uiEnabled">
    /// Controls whether UI interactions with the user are allowed; optional
    /// </param>
    void modifiedFieldDDC(FieldId _fieldId, boolean _uiEnabled = true) //Enhanced Delivery Date Control
    {
        Object                      obj;
        SalesCalcAvailableDlvDates  calcAvailableDlvDates;
        container                   c;

        if (this.checkDeliveryDateControlEnabled() && !this.shouldSkipCheckDeliveryDateControl())
        {
            calcAvailableDlvDates = SalesCalcAvailableDlvDates::newCommonSalesDlvDateType(this,_fieldId);

            switch (_fieldId)
            {
                case fieldNum(SalesQuotationTable, DeliveryPostalAddress): //fall through
                case fieldNum(SalesQuotationTable, DlvMode):                 //fall through
                case fieldNum(SalesQuotationTable, InventLocationId):
                    if (!this.RecId)
                    {
                        calcAvailableDlvDates = SalesCalcAvailableDlvDates::modifiedFieldOrderEntryDeadLine(this,_fieldId);
                    }
                    break;

                case fieldNum(SalesQuotationTable, DeliveryDateControlType):
                    if (this.RecId)
                    {
                        calcAvailableDlvDates.modifiedField(this, _uiEnabled);
                    }
                    else
                    {
                        calcAvailableDlvDates = SalesCalcAvailableDlvDates::modifiedFieldOrderEntryDeadLine(this,_fieldId);
                    }
                    break;

                case fieldNum(SalesQuotationTable, ReceiptDateRequested):
                    calcAvailableDlvDates.modifiedField(this);

                    if (this.ShippingDateRequested > this.ReceiptDateRequested)
                    {
                        this.ShippingDateRequested = this.ReceiptDateRequested;
                    }
                    break;

                case fieldNum(SalesQuotationTable, ShippingDateRequested):
                    calcAvailableDlvDates.modifiedField(this, _uiEnabled);

                    if (this.ShippingDateRequested > this.ReceiptDateRequested)
                    {
                        this.ReceiptDateRequested = this.ShippingDateRequested;
                    }
                    break;

                default:
            }
            if (!_uiEnabled && calcAvailableDlvDates.parmErrorText())
            {
                throw error(calcAvailableDlvDates.parmErrorText());
            }
        }

        if (FormDataUtil::isFormDataSource(this) && FormDataUtil::getFormDataSource(this).formRun() && FormDataUtil::getFormDataSource(this).formRun().name() == formStr(SalesCreateOrder))
        {
            obj = FormDataUtil::getFormDataSource(this).formRun();

            if (calcAvailableDlvDates && calcAvailableDlvDates.parmCancelModifiedField())
            {
                if (formHasMethod(obj,identifierStr(getInitialValuesDeliveryDate)))
                {
                    c = obj.getInitialValuesDeliveryDate();
                    if (c)
                    {
                        this.ShippingDateRequested   = conPeek(c, 2);
                        this.ReceiptDateRequested    = conPeek(c, 4);
                        this.DeliveryDateControlType     = conPeek(c, 5);
                    }
                }
                else
                {
                    this.(_fieldId) = this.orig().(_fieldId);
                }
            }
            else
            {
                if (formHasMethod(obj,identifierStr(setInitialValuesDeliveryDate)))
                {
                    obj.setInitialValuesDeliveryDate();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDeliveryDateControlEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check that if the delivery date control is enabled.
    /// </summary>
    /// <returns>
    /// true if the delivery date control is enabled; otherwise, false.
    /// </returns>
    protected boolean checkDeliveryDateControlEnabled()
    {
        return this.DeliveryDateControlType != SalesDeliveryDateControlType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipCheckDeliveryDateControl</Name>
				<Source><![CDATA[
    public boolean shouldSkipCheckDeliveryDateControl()
    {
        return this.isSalesQuotationRevisionCreation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesQuotationRevisionCreation</Name>
				<Source><![CDATA[
    private boolean isSalesQuotationRevisionCreation()
    {
        return this.isNewRecord()
            && this.IsIntegration == TradeIntegrationType::Dynamics365Sales
            && this.SalesQuotationIntegrationCreationType == SalesQuotationIntegrationCreationType::Revision
            && SalesQuotationSkipDeliveryDateControlWhenRevisedInD365Flight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedInventSiteFromParent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies default values on the current or parent record because the <c>InventSiteId</c> field is modified.
    /// </summary>
    /// <param name="_parent">
    ///    The parent record buffer that is joined to the <c>SalesQuotationTable</c> record buffer; optional.
    /// </param>
    public void modifiedInventSiteFromParent(Common _parent = this)
    {
        this.InventStorageDimMap::modifiedInventSiteFromParent(_parent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleType</Name>
				<Source><![CDATA[
    ModuleInventPurchSales moduleType()
    {
        return ModuleInventPurchSales::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packMCRSalesQuotationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the <c>MCRSalesQuotationTable</c> as an extension into the <c>SalesQuotationTable</c>.
    /// </summary>
    /// <param name="_mcrSalesQuotationTable">
    /// The <c>MCRSalesQuotationTable</c> record to be packed as an extension.
    /// </param>
    public void packMCRSalesQuotationTable(MCRSalesQuotationTable _mcrSalesQuotationTable)
    {
        _mcrSalesQuotationTable.SalesQuotationTable = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_mcrSalesQuotationTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packRetailSalesQuotationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the <c>RetailSalesQuotationTable</c> as an extension into the <c>SalesQuotationTable</c>.
    /// </summary>
    /// <param name="_retailSalesQuotationTable">
    /// The <c>RetailSalesQuotationTable</c> record to be packed as an extension.
    /// </param>
    public void packRetailSalesQuotationTable(RetailSalesQuotationTable _retailSalesQuotationTable)
    {
        _retailSalesQuotationTable.SalesQuotationTable = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_retailSalesQuotationTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>party</Name>
				<Source><![CDATA[
    DirPartyRecId party()
    {
        if (this.BusRelAccount)
        {
            return smmBusRelTable::find(this.BusRelAccount).Party;
        }
        return CustTable::find(this.CustAccount).Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyTable_CustAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>DirPartyTable</c> record for the <c>custAccount</c> value.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// The <c>DirPartyTable</c> record.
    /// </returns>
    public DirPartyTable partyTable_CustAccount(boolean _forUpdate = false)
    {
        DirPartyTable   partyTable;
        CustTable       custTable;

        if (this.CustAccount)
        {
            if (_forUpdate)
            {
                partyTable.selectForUpdate(_forUpdate);
            }

            select firstonly TableId from custTable
                where custTable.AccountNum == this.CustAccount
                join partyTable
                    where partyTable.RecId == custTable.Party;
        }
        return partyTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payer</Name>
				<Source><![CDATA[
    CustTable payer(boolean  _forUpdate = false)
    {
        return this.custTable_InvoiceAccount(_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymDayId</Name>
				<Source><![CDATA[
    CustPaymDayId paymDayId()
    {
        CustPaymDayId    paymDayId;

        paymDayId = this.custTable_InvoiceAccount().PaymDayId;

        if (!paymDayId)
        {
            paymDayId = this.payment().PaymDayId;
        }

        return paymDayId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payment</Name>
				<Source><![CDATA[
    PaymTerm payment(boolean _update = false)
    {
        return PaymTerm::find(this.Payment, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymModeModified</Name>
				<Source><![CDATA[
    void paymModeModified()
    {
        this.PaymModeMap::modifiedPaymMode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewPaneTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the title on top of the preview pane.
    /// </summary>
    /// <returns>
    /// The title field of the preview pane.
    /// </returns>
    public display Caption previewPaneTitle()
    {
        return this.QuotationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDiscChangePolicyExistOnLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a line record that is related to the current record has a price discount policy.
    /// </summary>
    /// <returns>
    /// true if a line with a price discount policy exists; otherwise, false.
    /// </returns>
    public boolean priceDiscChangePolicyExistOnLine()
    {
        SalesQuotationLine salesQuotationLine;

        select firstonly RecId from salesQuotationLine
            where salesQuotationLine.QuotationId == this.QuotationId
               && (salesQuotationLine.SystemEntryChangePolicy
               || salesQuotationLine.ManualEntryChangepolicy);

        return salesQuotationLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDiscChangePolicyUpdateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the fields that have a price discount policy on a set of purchase line records that are
    /// related to the current <c>SalesQuotationTable</c> record.
    /// </summary>
    /// <param name="_priceDiscChangePoliciesTmp">
    /// A buffer of the temporary <c>PriceDiscChangePoliciesTmp</c> table.
    /// </param>
    public void priceDiscChangePolicyUpdateLine(PriceDiscChangePoliciesTmp  _priceDiscChangePoliciesTmp)
    {
        SalesQuotationLine salesQuotationLine;

        salesQuotationLine.skipDataMethods();
        update_recordset salesQuotationLine
        setting ManualEntryChangepolicy = _priceDiscChangePoliciesTmp.ManualEntryChangepolicy,
                SystemEntryChangePolicy = _priceDiscChangePoliciesTmp.SystemEntryChangePolicy,
                SystemEntrySource       = _priceDiscChangePoliciesTmp.SystemEntrySource
        join _priceDiscChangePoliciesTmp
            where _priceDiscChangePoliciesTmp.RefRecId == salesQuotationLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projName</Name>
				<Source><![CDATA[
    display ProjName projName()
    {
        return ProjTable::find(this.ProjIdRef).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTable</Name>
				<Source><![CDATA[
    ProjTable projTable()
    {
        return ProjTable::find(this.ProjIdRef);
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaCheckExistABS</Name>
				<Source><![CDATA[
    public boolean psaCheckExistABS()
    {
        HierarchyLinkTable hierarchyLinkTable;
        HierarchyTreeTable hierarchyTreeTable;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            select firstonly RecId, HierarchyId, ParentElementNumber from hierarchyTreeTable
                exists join HierarchyId, RefRecId, RefTableId from hierarchyLinkTable
                    where hierarchyTreeTable.HierarchyId == hierarchyLinkTable.HierarchyId &&
                          hierarchyLinkTable.RefTableId == tableNum(SalesQuotationTable) &&
                          hierarchyLinkTable.RefRecId == this.RecId &&
                          hierarchyTreeTable.ParentElementNumber;
        }

        return hierarchyTreeTable ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistWBSEstimates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if any work breakdown structure (WBS) estimates exist for any task including the root.
    /// </summary>
    /// <returns>
    /// true if any estimates exist for any task in this quotation's WBS; otherwise, false.
    /// </returns>
    public boolean checkExistWBSEstimates()
    {
        PSAActivityEstimates psaActivityEstimates;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            HierarchyLinkTable   hierarchyLinkTable;

            select firstonly RecId from psaActivityEstimates
                exists join HierarchyId from hierarchyLinkTable
                    where psaActivityEstimates.ProjPlanHierarchyId == hierarchyLinkTable.HierarchyId &&
                          hierarchyLinkTable.RefTableId == tableNum(SalesQuotationTable) &&
                          hierarchyLinkTable.RefRecId == this.RecId;
        }

        return psaActivityEstimates ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaResetTemplate</Name>
				<Source><![CDATA[
    // Description    : reset the values of fields from the Template group
    // Parameters     : none
    // Return value   : void

    public void psaResetTemplate()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            this.TemplateGroupId = "";
            this.TemplateName    = "";
            this.TemplateActive  = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLinePolicies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the price discount policies on any lines that are related to the current record.
    /// </summary>
    public void resetLinePolicies()
    {
        SalesQuotationLine salesQuotationLine;

        update_recordset salesQuotationLine
            setting SystemEntrySource       = PriceDiscSystemSource::None,
                    SystemEntryChangePolicy = 0,
                    ManualEntryChangepolicy = 0
        where salesQuotationLine.QuotationId == this.QuotationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailSalesQuotationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks Retail extension table from <c>PackedExtensions</c> field
    /// </summary>
    /// <param name="_packNewExtensionTable">
    /// A Boolean value that indicates whether to pack new extension table record; optional.
    /// </param>
    /// <returns>
    /// The unpacked <c>RetailSalesQuotationTable</c> record
    /// </returns>
    public RetailSalesQuotationTable retailSalesQuotationTable(boolean _packNewExtensionTable = true)
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(RetailSalesQuotationTable), _packNewExtensionTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesOrderDocumentStatus</Name>
				<Source><![CDATA[
    display DocumentStatus  salesOrderDocumentStatus()
    {
        if (this.SalesIdRef)
        {
            return SalesTable::find(this.SalesIdRef).DocumentStatus;
        }
        else
        {
            return DocumentStatus::None;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTable_ItemReq</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the sales order record that is associated with the referenced project record.
    /// </summary>
    /// <param name="_update">
    ///    A Boolean value that determines whether the sales order record should be selected for update; optional.
    /// </param>
    /// <returns>
    ///    The sales order record.
    /// </returns>
    public SalesTable salesTable_ItemReq(boolean _update = false)
    {
        SalesTable  salesTable;

        if (this.ProjIdRef && this.CustAccount)
        {
            salesTable.selectForUpdate(_update);

            if (ProjItemRequirementMultipleFundingSourcesFeatureHelper::isFeatureEnabled())
            {
                ProjTable projTable = ProjTable::find(this.ProjIdRef);
                
                select firstonly salesTable
                    where salesTable.ProjId == this.ProjIdRef &&
                          salesTable.FundingSource == projTable.getProjectDefaultInvoiceAccount(false) &&
                          (salesTable.SalesStatus == SalesStatus::None 
                            || salesTable.SalesStatus == SalesStatus::Backorder) &&
                          salesTable.CustAccount == this.CustAccount &&
                          salesTable.InvoiceAccount == this.InvoiceAccount &&
                          salesTable.CurrencyCode == this.CurrencyCode &&
                          salesTable.SalesType == SalesType::ItemReq;
            }
            else
            {
                select firstonly salesTable
                    where salesTable.ProjId         == this.ProjIdRef      &&
                          salesTable.CustAccount    == this.CustAccount    &&
                          salesTable.InvoiceAccount == this.InvoiceAccount &&
                          salesTable.CurrencyCode   == this.CurrencyCode   &&
                          salesTable.SalesType      == SalesType::ItemReq;
            }
        }

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the delivery name field based on the specified logistic location.
    /// </summary>
    /// <param name="_skipDeliveryRoleCheck">
    ///     A flag indicating whether to skip the check for determining the delivery role; optional.
    /// </param>
    public void setDeliveryName(boolean _skipDeliveryRoleCheck = false)
    {
        this.TradePostalAddress::setDeliveryName(_skipDeliveryRoleCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventSiteId</Name>
				<Source><![CDATA[
    public void setInventSiteId(InventSiteId _inventSiteId)
    {
        this.InventSiteId = _inventSiteId;
        this.modifiedInventSiteFromParent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setListCode</Name>
				<Source><![CDATA[
    void setListCode()
    {
        LogisticsPostalAddress legalPostalAddress = IntrastatParametersHelper::getDefaultLogisticsAddress(this.InventLocationId, this.InventSiteId);
        this.Listcode = EUSalesList::resolveListCodeByCountryState(this.deliveryAddress(), legalPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLocation</Name>
				<Source><![CDATA[
    void  setLocation(LogisticsLocationRecId _location)
    {
        LogisticsLocationEntity location = LogisticsLocationEntity::constructFromLocationRecId(_location);

        this.DeliveryPostalAddress = location.getPostalAddress().RecId;

        if (location)
        {
            this.setDeliveryName();
            this.Email                      = location.getEmail();
            this.url                        = location.getURL();
            this.AddressRefRecId            = location.parmLocationRecId();
            this.AddressRefTableId          = tableNum(LogisticsLocation);
        }
        this.setListCode();
        this.setTaxGroup(TaxSales::custTaxGroup(this.DlvTerm, this.TaxGroup, _location));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDiscChangePolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the price disc change policy.
    /// </summary>
    /// <param name="_policySource">
    /// An outcome of the <c>PriceDiscSystemSource</c> enumeration that indicates the source of the policy.
    /// </param>
    /// <param name="_fieldId">
    /// The ID of the field in question.
    /// </param>
    void setPriceDiscChangePolicy(PriceDiscSystemSource _policySource, RefFieldId _fieldId = 0)
    {
        this.PriceDiscResultFields::createPriceDiscChangePolicy(ModuleSalesPurch::Sales, _policySource, _fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDiscChangePolicyMultiLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>setPriceDiscChangePolicy</c> method with the fixed price discount change parameters
    /// for the multiline discount fields.
    /// </summary>
    public void setPriceDiscChangePolicyMultiLine()
    {
        this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, fieldNum(SalesQuotationTable, MultiLineDisc));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQuotationId</Name>
				<Source><![CDATA[
    void setQuotationId(boolean _makeDecisionLater = false)
    {
        QuotationIdBase     newQuotationId;
        NumberSeq           num;

        num             = NumberSeq::newGetNum(SalesParameters::numRefSalesQuotationId());

        num.parmMakeDecisionLater(_makeDecisionLater);
        newQuotationId  = num.num();

        if (SalesQuotationTable::exist(newQuotationId))
        {
            num.abort();
            // Number sequence error when picking quotation number
            checkFailed("@SYS84528");

            // Quotation number '%1' is already in use.
            checkFailed(strFmt("@SYS84529", newQuotationId));

            // Creation has been aborted.
            throw error("@SYS23020");
        }

        this.QuotationId = newQuotationId;

        num.used();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxGroup</Name>
				<Source><![CDATA[
    void setTaxGroup(TaxGroup   _taxGroup)
    {
        SalesQuotationTableType     salesQuotationTableType;

        salesQuotationTableType = this.type();
        salesQuotationTableType.setTaxGroup(_taxGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleExchRate</Name>
				<Source><![CDATA[
    CustExchRate settleExchRate(boolean throwOnError = false)
    {
        QueryRun        queryRun;
        CustTransOpen   custTransOpen;
        CustTrans       custTrans;
        CustExchRate    exchRate = 0;
        CustExchRate    custExchRate;

        if (this.SettleVoucher == SettlementType::SelectedTransact && SalesParameters::find().UseSettleExchRate)
        {
            queryRun = SpecTrans::createQueryRunToRefTable(this.company(), this.TableId, this.RecId, tableNum(CustTransOpen));

            queryRun.allowCrossCompany(true);

            while (queryRun.next())
            {
                if (queryRun.changed(tableNum(CustTransOpen)))
                {
                    custTransOpen = queryRun.get(tableNum(CustTransOpen));
                    if (custTransOpen)
                    {
                        custTrans = custTransOpen.custTrans();
                        custExchRate = round(custTrans.AmountMST * 100 / custTrans.AmountCur, 0.01);
                        if (!exchRate)
                        {
                            exchRate = custExchRate;
                        }
                        else
                        {
                            if (exchRate != custExchRate)
                            {
                                exchRate = 0;
                                if (throwOnError)
                                {
                                    throw error("@SYS59594");
                                }

                                checkFailed("@SYS59594");
                                break;
                            }
                        }
                    }
                }
            }
        }
        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDocHandIcon</Name>
				<Source><![CDATA[
    public display container showDocHandIcon()
    {
        if ((select firstonly docuRef where docuRef.RefCompanyId  == this.DataAreaId && docuRef.RefTableId == this.TableId && docuRef.RefRecId == this.RecId).RecId)
        {
            return ImageReference::constructForSymbol(ImageReferenceSymbol::GenericDoc).pack();
        }
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipMarkup</Name>
				<Source><![CDATA[
    boolean skipMarkup()
    {
        switch (this.QuotationType)
        {
            case QuotationType::Sales             :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmBusRelTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>smmBusRelTable</c> record for the current sales quotation.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///   The <c>smmBusRelTable</c> record.
    /// </returns>
    public smmBusRelTable smmBusRelTable(boolean _forUpdate = false)
    {
        return smmBusRelTable::find(this.BusRelAccount, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmOpportunityTable</Name>
				<Source><![CDATA[
    smmOpportunityTable smmOpportunityTable()
    {
        return smmOpportunityTable::find(this.OpportunityId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxModuleType</Name>
				<Source><![CDATA[
    TaxModuleType taxModuleType()
    {
        return TaxModuleType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeZoneSite</Name>
				<Source><![CDATA[
    display Timezone timeZoneSite()
    {
        return InventSite::timeZoneSite(this.InventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalInvoiceAmount</Name>
				<Source><![CDATA[
    display AmountMST totalInvoiceAmount()
    {
        SalesQuotationLine salesQuotationLine;

        if (this.QuotationType == QuotationType::Project)
        {
            ProjLineProperty projLineProperty;

            select sum(LineAmount), LinePropertyId from salesQuotationLine
                where salesQuotationLine.QuotationId == this.QuotationId
            exists join projLineProperty
                where projLineProperty.LinePropertyId == salesQuotationLine.LinePropertyId 
                      && projLineProperty.ToBeInvoiced == NoYes::Yes;

            return salesQuotationLine.LineAmount;
        }
        else
        {
            return (select sum(LineAmount) from salesQuotationLine
                where salesQuotationLine.QuotationId == this.QuotationId).LineAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalInvoiceAmountMST</Name>
				<Source><![CDATA[
    AmountMST totalInvoiceAmountMST()
    {
        return CurrencyExchangeHelper::amountCur2MST(this.totalInvoiceAmount(), this.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferBusRelAccount</Name>
				<Source><![CDATA[
    void transferBusRelAccount()
    {
        if (this.BusRelAccount)
        {
            SalesCalcAvailableDlvDates::initDateFields(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferCustAccount</Name>
				<Source><![CDATA[
    void  transferCustAccount(boolean _userInput = true)
    {
        boolean initAllFields = true;

        if (this.CustAccount)
        {
            if (_userInput && SalesParameters::find().PromptTransfer &&
                Box::yesNo("@SYS418", DialogButton::Yes) != DialogButton::Yes)
            {
                initAllFields = false;
            }

            this.transferCustAccount_Server(initAllFields);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferCustAccount_Server</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers the information from customer table to a sales quotation.
    /// </summary>
    /// <param name="_initFromCustTable">
    /// Boolean flag which determines whether only mandatory fields should be transfered or all.
    /// </param>
    public void  transferCustAccount_Server(boolean _initFromCustTable)
    {
        if (_initFromCustTable)
        {
            this.initFromCustTable(false);
            if (this.CustAccount != this.InvoiceAccount)
            {
                this.transferInvoiceAccount();
            }
        }
        else
        {
            this.initFromCustTable(true);
        }
        SalesCalcAvailableDlvDates::initDateFieldsOrderEntryDeadline(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferInvoiceAccount</Name>
				<Source><![CDATA[
    void transferInvoiceAccount(boolean _userInput = true)
    {
        if (_userInput && SalesParameters::find().PromptTransfer)
        {
            if (Box::yesNo("@SYS19435"+'\n\n'+this.InvoiceAccount+'\n\n'+CustTable::promptAddress(this.InvoiceAccount, LogisticsLocationRoleType::Delivery),DialogButton::Yes)==DialogButton::Yes)
            {
                this.initInvoiceAccount();
            }
        }
        else
        {
            this.initInvoiceAccount();
        }

        this.transferTaxDefaultsFromInvoiceAcc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferTaxDefaultsFromInvoiceAcc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies tax setup fields from the invoice account.
    /// </summary>
    public void transferTaxDefaultsFromInvoiceAcc()
    {
        if (this.mustTransferTaxDefaultsFromInvoiceAcc())
        {
            this.custTable_InvoiceAccount().copyPrimaryRegistrationNumberToVATMap(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    SalesQuotationTableType type()
    {
        return SalesQuotationTableType::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(boolean _activityHandling = true, boolean _isCalledFromBatch = false)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        SalesQuotationInstrumentationActivities salesQuotationActivities = SalesQuotationTable::instrumentationLogger().salesQuotationActivities();

        using (var activityContext = salesQuotationActivities.update(this))
        {
            SalesQuotationTable salesQuotationTableOrig = this.orig();

            SalesQuotationTableType salesQuotationTableType = this.type();

            salesQuotationTableType.updating();

            if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
            {
                this.SysExtensionSerializerMap::postUpdate();
            }

            this.checkCurrencyCode();

            this.CovStatus = (this.CovStatus == 2 ? 1 : 0);

            // If activity handling
            if (_activityHandling)
            {
                smmActivities smmActivities;

                if (this.isTemplate() && this.QuotationFollowupActivity && !this.ProjIdRef)
                {
                    smmActivities = smmActivities::find(this.QuotationFollowupActivity, true);
                    smmActivities.delete(false);
                    this.QuotationFollowupActivity = '';
                }
                else
                {
                    boolean         advancedPrompt = (smmParametersTable::find().QuotationCreateActivity == smmCreateActivity::AdvancedPrompt);
                    smmActivityId   oldActivityId  = (advancedPrompt) ? salesQuotationTableOrig.QuotationFollowupActivity : this.QuotationFollowupActivity;

                    // Is/Was the activity already attached to the quotation
                    if (oldActivityId)
                    {
                        if (oldActivityId)
                        {
                            smmActivities = smmActivities::find(oldActivityId, true);
                        }
                        if (smmActivities)
                        {
                            // If follow up date is removed or sales responsible is changed - activity is deleted
                            if ((!this.QuotationFollowUpDate || this.WorkerSalesResponsible != salesQuotationTableOrig.WorkerSalesResponsible))
                            {
                                smmActivities.delete(false);

                                // If not advanced prompt
                                if (!advancedPrompt)
                                {
                                    // Clear link on quotation
                                    this.QuotationFollowupActivity = '';
                                }

                                // If quotation has sales representative and follow up date - Create new activity (Except fir advanced prompt)
                                if (this.WorkerSalesResponsible && this.QuotationFollowUpDate
                                    && !advancedPrompt)
                                {
                                    smmActivities                                   = smmActivityCreate::createActivity(this, _isCalledFromBatch);
                                    this.QuotationFollowupActivity   = smmActivities.ActivityNumber;
                                }
                            }
                            // Update activitiy from quotations
                            else if (oldActivityId == this.QuotationFollowupActivity)
                            {
                                // Update fields on the CRM activity
                                smmActivities.updateFromQuotation(this);
                            }
                        }
                    }

                    // Activity needs to be created - If not template , has a sales representative and follow update And follow-up date or sales representative has changed
                    else if (!advancedPrompt && !this.isTemplate()
                            && this.WorkerSalesResponsible && this.QuotationFollowUpDate
                            && (this.WorkerSalesResponsible != salesQuotationTableOrig.WorkerSalesResponsible
                               || this.QuotationFollowUpDate != salesQuotationTableOrig.QuotationFollowUpDate))
                    {
                        smmActivities                                   = smmActivityCreate::createActivity(this, _isCalledFromBatch);
                        this.QuotationFollowupActivity   = smmActivities.ActivityNumber;
                    }
                }
            }

            // erase all (soft) commitments when status is changed to rejected
            if (this.QuotationStatus == SalesQuotationStatus::Cancelled)
            {
                ResReservationFacade::releaseSoftCommitmentsForQuotation(this.QuotationId);
            }

            salesQuotationActivities.logSalesQuotation(activityContext, this);
            
            super();

            this.updateSalesQuotationLinesOnUpdateSalesQuotationTable(salesQuotationTableOrig);

            if ((this.CustAccount != salesQuotationTableOrig.CustAccount && salesQuotationTableOrig.CustAccount)  ||
                this.MarkupGroup != salesQuotationTableOrig.MarkupGroup ||
                this.DlvMode     != salesQuotationTableOrig.DlvMode)
            {
                this.createMarkupTrans(true);
            }

            RetailConfigurationParameters config = RetailConfigurationParameters::findByName('SalesQuotationAffiliationAlignWithCustomerAffiliation');
            if (config && config.Value == 'true')
            {
                this.setRetailSalesQuotationAffiliation();
            }

            if (BrazilParameters::isEnabled())
            {
                if (this.SalesPurchOperationType_BR != salesQuotationTableOrig.SalesPurchOperationType_BR)
                {
                    this.updateLineFieldsBasedOnHeaderChanges_BR();
                }
            }

            smmTransLog::initTrans(this, smmLogAction::update);

            this.updateQuotationStatusCDSMessageQueue(salesQuotationTableOrig);

            salesQuotationTableType.updated(salesQuotationTableOrig);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuotationStatusCDSMessageQueue</Name>
				<Source><![CDATA[
    private void updateQuotationStatusCDSMessageQueue(SalesQuotationTable _salesQuotationTableOrig)
    {
        if (this.IsIntegration == TradeIntegrationType::Dynamics365Sales
            && (this.QuotationStatus == SalesQuotationStatus::Sent || this.QuotationStatus == SalesQuotationStatus::Confirmed)
            && this.QuotationStatus != _salesQuotationTableOrig.QuotationStatus
            && this.isIntegrationOwnerDynamics365Sales())
        {
            switch (this.QuotationStatus)
            {
                case SalesQuotationStatus::Sent:
                    TradeCDSMessageQueue::processSendQuotation(this);
                    break;

                case SalesQuotationStatus::Confirmed:
                    smmBusRelTable prospect = smmBusRelTable::find(this.BusRelAccount);

                    if (prospect)
                    {
                        prospect.convert2CustomerFromQuotation(this, _salesQuotationTableOrig);
                    }

                    TradeCDSMessageQueue::processConfirmQuotation(this);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesQuotationLinesOnUpdateSalesQuotationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the quotation lines corresponding to the quotation table.
    /// </summary>
    /// <param name = "_salesQuotationTableOrig">The original header corresponding to the quotation lines.</param>
    protected void updateSalesQuotationLinesOnUpdateSalesQuotationTable(SalesQuotationTable _salesQuotationTableOrig)
    {
        boolean isUpdateRequiredBrazil = this.mustUpdateSalesQuotationLinesOnUpdateSalesQuotationTable_BR(_salesQuotationTableOrig);
        boolean isUpdateRequired = this.mustUpdateSalesQuotationLinesOnUpdateSalesQuotationTable(_salesQuotationTableOrig);

        if (isUpdateRequired || isUpdateRequiredBrazil)
        {
            SalesQuotationLine salesQuotationLine;

            Query query = new Query();
            QueryBuildDataSource salesQuotationLineQBDS = query.addDataSource(tableNum(SalesQuotationLine));
            salesQuotationLineQBDS.addRange(fieldNum(SalesQuotationLine, QuotationId)).value(this.QuotationId);
            salesQuotationLineQBDS.addSortIndex(indexNum(SalesQuotationLine, QuotationLineIdx));
            salesQuotationLineQBDS.indexIsHint(true);
            salesQuotationLineQBDS.update(true);
            if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
            {
                salesQuotationLineQBDS.addOrderByField(fieldNum(SalesQuotationLine, LineNum), SortOrder::Descending);
            }

            if (this.QuotationStatus == SalesQuotationStatus::Sent)
            {
                CustQuotationSalesLink custQuotationSalesLink;

                select firstonly QuotationId from custQuotationSalesLink
                    order by QuotationDate desc, QuotationId desc
                    where custQuotationSalesLink.OrigQuotationId == this.QuotationId;

                QueryBuildDataSource custQuotationSalesLinkQBDS = salesQuotationLineQBDS.addDataSource(tableNum(CustQuotationSalesLink));
                custQuotationSalesLinkQBDS.addOrderByField(fieldNum(CustQuotationSalesLink, QuotationDate), SortOrder::Descending);
                custQuotationSalesLinkQBDS.addOrderByField(fieldNum(CustQuotationSalesLink, QuotationId), SortOrder::Descending);
                custQuotationSalesLinkQBDS.addRange(fieldNum(CustQuotationSalesLink, OrigQuotationId)).value(this.QuotationId);
                custQuotationSalesLinkQBDS.addRange(fieldNum(CustQuotationSalesLink, QuotationId)).value(custQuotationSalesLink.QuotationId);

                QueryBuildDataSource custQuotationTransQBDS = custQuotationSalesLinkQBDS.addDataSource(tableNum(CustQuotationTrans));
                custQuotationTransQBDS.joinMode(JoinMode::ExistsJoin);
                custQuotationTransQBDS.addLink(fieldNum(CustQuotationSalesLink, QuotationId), fieldNum(CustQuotationTrans, QuotationId), custQuotationSalesLinkQBDS.name());
                custQuotationTransQBDS.addLink(fieldNum(CustQuotationSalesLink, QuotationDate), fieldNum(CustQuotationTrans, QuotationDate), custQuotationSalesLinkQBDS.name());
                custQuotationTransQBDS.addLink(fieldNum(CustQuotationSalesLink, SalesId), fieldNum(CustQuotationTrans, SalesId), custQuotationSalesLinkQBDS.name());
                custQuotationTransQBDS.addLink(fieldNum(SalesQuotationLine, InventTransId), fieldNum(CustQuotationTrans, InventTransId), salesQuotationLineQBDS.name());
            }

            if (this.QuotationStatus == SalesQuotationStatus::Confirmed)
            {
                QueryBuildDataSource custQuotationConfirmTransQBDS = salesQuotationLineQBDS.addDataSource(tableNum(CustQuotationConfirmTrans));
                custQuotationConfirmTransQBDS.joinMode(JoinMode::ExistsJoin);
                custQuotationConfirmTransQBDS.addLink(fieldNum(SalesQuotationLine, QuotationId), fieldNum(CustQuotationConfirmTrans, OrigQuotationId), salesQuotationLineQBDS.name());
                custQuotationConfirmTransQBDS.addLink(fieldNum(SalesQuotationLine, InventTransId), fieldNum(CustQuotationConfirmTrans, InventTransId), salesQuotationLineQBDS.name());
            }

            QueryRun queryRun = new QueryRun(query);

            boolean isKittingEnabled = FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance());

            while (queryRun.next())
            {
                salesQuotationLine = queryRun.get(tableNum(SalesQuotationLine));

                if (!this.mustSalesQuotationLineBeUpdated(salesQuotationLine) || 
                    (isKittingEnabled && this.kittingSkipUpdateLine(salesQuotationLine)))
                {
                    continue;
                }

                this.initializeSalesQuotationLineOnUpdateSalesQuotationTable(salesQuotationLine);

                salesQuotationLine.update();

                if (BrazilParameters::isEnabled())
                {
                    salesQuotationLine.deleteInventTrans_BR();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesQuotationLineOnUpdateSalesQuotationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the quotation line when updating the quotation table record.
    /// </summary>
    /// <param name = "_salesQuotationLine">The quotation line.</param>
    protected void initializeSalesQuotationLineOnUpdateSalesQuotationTable(SalesQuotationLine _salesQuotationLine)
    {
        _salesQuotationLine.CustAccount      = this.CustAccount;
        _salesQuotationLine.QuotationType    = this.QuotationType;
        _salesQuotationLine.QuotationStatus  = this.QuotationStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateSalesQuotationLinesOnUpdateSalesQuotationTable_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the quotation lines must be updated.
    /// </summary>
    /// <param name = "_salesQuotationTableOrig">The original header corresponding to the quotation lines.</param>
    /// <returns>true if the quotation lines must be updated; false, otherwise.</returns>
    protected boolean mustUpdateSalesQuotationLinesOnUpdateSalesQuotationTable_BR(SalesQuotationTable _salesQuotationTableOrig)
    {
        return (_salesQuotationTableOrig.SalesPurchOperationType_BR != this.SalesPurchOperationType_BR
                && !this.createInventTrans_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateSalesQuotationLinesOnUpdateSalesQuotationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the quotation lines must be updated.
    /// </summary>
    /// <param name = "_salesQuotationTableOrig">The original header corresponding to the quotation lines.</param>
    /// <returns>true if the quotation lines must be updated; false, otherwise.</returns>
    protected boolean mustUpdateSalesQuotationLinesOnUpdateSalesQuotationTable(SalesQuotationTable _salesQuotationTableOrig)
    {
        return (_salesQuotationTableOrig.CustAccount     != this.CustAccount     ||
                _salesQuotationTableOrig.QuotationType   != this.QuotationType   ||
                _salesQuotationTableOrig.QuotationStatus != this.QuotationStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSalesQuotationLinesToBeUpdatedQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for the quotation lines to be updated during the header update.
    /// </summary>
    /// <returns>A <c>Query</c> object.</returns>
    protected Query buildSalesQuotationLinesToBeUpdatedQuery()
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(SalesQuotationLine));
        qbds.addRange(fieldNum(SalesQuotationLine, QuotationId)).value(this.QuotationId);
        qbds.addSortIndex(indexNum(SalesQuotationLine, QuotationLineIdx));
        qbds.indexIsHint(true);
        qbds.update(true);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSalesQuotationLineBeUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the quotation line should be updated during the update of the header.
    /// </summary>
    /// <param name = "_salesQuotationLine">A quotation line.</param>
    /// <returns>true if the quotation line should be updated; otherwise, false.</returns>
    protected boolean mustSalesQuotationLineBeUpdated(SalesQuotationLine _salesQuotationLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFinalDisc</Name>
				<Source><![CDATA[
    public void  updateFinalDisc()
    {
        SalesQuotationLine  salesQuotationLine;
        boolean             processDisc = true;

        // Do not calculate final discounts if they've been overridden.
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            if (this.mcrSalesQuotationTable().PriceOverride)
            {
                processDisc = false;
            }
        }

        if (processDisc)
        {
            if (this.PriceDiscHeading::updateFinalDiscount(salesQuotationLine))
            {
                //This will trigger the creditlimit calculation when salesTable.validateWrite is called
                this.Touched = NoYes::Yes;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromAdvPromptActivity</Name>
				<Source><![CDATA[
    /* Call this before update for handling advanced prompt case.
       It should not be inside ttsbegin and ttscommit. */
    void updateFromAdvPromptActivity(SalesQuotationTable _orig = this.orig())
    {
        smmActivities       smmActivities;

        // If advanced prompt
        if (!this.isTemplate() && smmParametersTable::find().QuotationCreateActivity == smmCreateActivity::AdvancedPrompt)
        {
            // If responsible was changed or there was no activity attached earlier
            if ( (this.WorkerSalesResponsible != _orig.WorkerSalesResponsible) || (!_orig.QuotationFollowupActivity))
            {
                // If quotation has sales representative and follow up date - Create new activity
                if (this.WorkerSalesResponsible && this.QuotationFollowUpDate)
                {
                    smmActivities                   = smmActivityCreate::createActivity(this);
                    this.QuotationFollowupActivity  = smmActivities.ActivityNumber;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineFieldsBasedOnHeaderChanges_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// It is responsible for updating the SalesQuotatinLine when fiscal information
    /// on header is changed
    /// </summary>
    public void updateLineFieldsBasedOnHeaderChanges_BR()
    {
        SalesQuotationLine  salesQuotationLine;
        CFOPValidation_BR   cfopValidation;

        ttsbegin;

        while select forupdate salesQuotationLine
                where salesQuotationLine.QuotationId == this.QuotationId
        {
            cfopValidation       = CFOPValidation_BR::construct(salesQuotationLine);
            salesQuotationLine.cfopTable_BR    = cfopValidation.getDefaultCFOP();

            if (salesQuotationLine.cfopTable_BR != salesQuotationLine.orig().cfopTable_BR)
            {
                salesQuotationLine.setTaxGroupAndTaxItemGroupFields_BR();
                salesQuotationLine.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMultiLineDisc</Name>
				<Source><![CDATA[
    public boolean updateMultiLineDisc()
    {
        SalesQuotationLine salesQuotationLine;
        boolean   ret;

        if (this.PriceDiscHeading::updateMultiLineDiscount(salesQuotationLine))
        {
            ret = true;

            // This will trigger the creditlimit calculation when validateWrite is called
            this.Touched = NoYes::Yes;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesQuotationLineDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes <c>SalesQuotationLine</c> table deletion related updates to the <c>SalesQuotationTable</c>
    /// table.
    /// </summary>
    public void updateSalesQuotationLineDelete()
    {
        SalesQuotationTableType  salesQuotationTableType;

        salesQuotationTableType = this.type();
        salesQuotationTableType.updateSalesQuotationLineDelete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    boolean  validateDelete()
    {
        boolean            ok = true;
        SalesQuotationTableType     salesQuotationTableType;

        ok = super();

        if (ok)
        {
            salesQuotationTableType = this.type();
            ok = salesQuotationTableType.validateDelete();
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean validateField(FieldId  fieldId)
    {
        boolean                 ok = true;
        SalesQuotationTableType salesQuotationTableType;
        CustTable               custTable;
        MCRSalesQuotationTable  mcrSalesQuotationTable;

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            // A user may not turn on a price override via the checkbox,
            // they may only turn off the price override via the checkbox.
            if (fieldId == fieldNum(MCRSalesQuotationTable, PriceOverride))
            {
                mcrSalesQuotationTable = this.mcrSalesQuotationTable();
                ok = ! mcrSalesQuotationTable.PriceOverride;
            }
            // Warn that they are invoicing a merged customer.
            else if (fieldId == fieldNum(SalesQuotationTable, InvoiceAccount))
            {
                custTable = CustTable::find(this.InvoiceAccount);
                if (custTable.mcrMergedParent)
                {
                    warning(strFmt("@MCR12337",this.InvoiceAccount,custTable.mcrMergedParent));
                    ok = false;
                }
            }
            // Warn that they are invoicing a merged customer.
            else if (fieldId == fieldNum(SalesQuotationTable, CustAccount))
            {
                custTable = CustTable::find(this.CustAccount);
                if (custTable.mcrMergedParent)
                {
                    warning(strFmt("@MCR12337",this.CustAccount,custTable.mcrMergedParent));
                    ok = false;
                }
            }
        }

        ok = super(fieldId) && ok;

        if (ok)
        {
            salesQuotationTableType = this.type();
            ok = salesQuotationTableType.validateField(fieldId);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean     ret; 
        ProjTable   projTable;

        MCROrderParameters      mcrOrderParameters;
        MCRsmmBusRelTable       mcRsmmBusRelTable;
        MCRSalesQuotationTable  mcrSalesQuotationTable;
        smmCampaignTable        campaignTable;
        ret = super();

        if ( ret )
        {
            // Code exists in type classes, so need to call type validateWrite.
            ret = this.type().validateWrite()
                && this.validateIntegration();
        }

        if (this.TemplateName && !this.TemplateGroupId)
        {
            // Group ID must be filled in.
            ret = checkFailed("@SYS91601");
        }

        if (this.TemplateGroupId && !this.TemplateName)
        {
            // Template name must be filled in.
            ret = checkFailed("@SYS91602");
        }

        if (! this.isTemplate())
        {
            if (this.BusRelAccount == '' && this.CustAccount == '')
            {
                // A business relation or customer account must be specified.
                ret = checkFailed("@SYS84566");
            }
            else if (this.BusRelAccount && this.CustAccount)
            {
                // Either business relation or customer account should be filled in.
                ret = checkFailed("@SYS108839");
            }
            else if (this.CustAccount && !this.InvoiceAccount)
            {
                ret = checkFailed(strFmt("@SYS26332",fieldPName(SalesQuotationTable,InvoiceAccount)));
            }
        }

        if (this.ProjIdRef)
        {
            projTable = ProjTable::find(this.ProjIdRef);

            if (ret && projTable && this.validateProjectTypeByProject(projTable))
            {
                ret = checkFailed("@SYS98421");
            }

            if (ret && projTable.Status == ProjStatus::Completed)
            {
                ret = checkFailed("@SYS98422");
            }

            List fundingSources = ProjFundingSource::getFundingSourcesByContract(projTable.ProjInvoiceProjId);
            Enumerator enumerator = fundingsources.getEnumerator();
            boolean custAccountMatches = this.validateCustAccountOnRelatedProject(projTable);

            // Checks if sales quotation cust account matches any of the cust accounts associated to the contract of the
            // the project if it does not match project cust account.
            while (!custAccountMatches && enumerator.moveNext())
            {
                RecId projFundingSourceRecId = enumerator.current();
                CustAccount contractCustAccount = ProjFundingSource::find(projFundingSourceRecId).CustAccount;
                if (this.CustAccount == contractCustAccount)
                {
                    custAccountMatches = true;
                }
            }

            if (ret && !custAccountMatches)
            {
                ret = checkFailed("@SYS98449");
            }

            if (ret && !projTable.status().checkRule(ProjStatusRule::CreateQuotation))
            {
                ret = checkFailed(strFmt("@SYS53010", projTable.Status, projTable.ProjId));
            }
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            mcRsmmBusRelTable = MCRsmmBusRelTable::findAccount(this.BusRelAccount);
            if (ret && !mcRsmmBusRelTable.IsListDeleted)
            {
                mcrSalesQuotationTable = this.mcrSalesQuotationTable();
                // Check for sourceId if parameters set to mandatory.
                mcrOrderParameters = MCROrderParameters::find();

                if (mcrOrderParameters.mcrSourceCodeRequired && mcrSalesQuotationTable.SourceId == "")
                {
                    ret = checkFailed("@MCR12004");
                }
            }

            // Don't allow merged business relation to have new quotes created.
            if (this.RecId == 0 && mcRsmmBusRelTable.MergedParent)
            {
                ret = checkFailed(strFmt("@MCR25704", this.BusRelAccount,
                                                      mcRsmmBusRelTable.MergedParent) );
            }
            // Don't allow deleted BR to have new quotes created.
            else if (this.RecId == 0 && mcRsmmBusRelTable.IsListDeleted)
            {
                ret = checkFailed("@MCR26122");
            }

            // Don't allow user to create a Quote for a parent campaign.
            if (this.CampaignId)
            {
                select firstonly RecId from campaignTable
                    where campaignTable.CampaignParentId == this.CampaignId;

                if (campaignTable.RecId)
                {
                    ret = checkFailed("@MCR26162");
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustAccountOnRelatedProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the customer account on related project.
    /// </summary>
    /// <param name = "_projTable">
    /// Project record buffer to be validated.
    /// </param>
    /// <returns>
    /// true if the customer account is valid on the project; otherwise, false.
    /// </returns>
    protected boolean validateCustAccountOnRelatedProject(ProjTable _projTable)
    {
        return _projTable.CustAccount == this.CustAccount || !this.CustAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeCreateQuotation</Name>
				<Source><![CDATA[
    void writeCreateQuotation()
    {
        smmActivities               smmActivities;
        SalesQuotationTable         salesQuotationCRM;
        smmOpportunityTable         smmOpportunityTable;
        smmActivityParentLinkTable  smmActivityParentLinkTable;

        ttsbegin;

        if (!this.RecId)
        {
            this.insert();
        }

        ttscommit;

        // Create CRM activity
        if (!this.QuotationFollowupActivity && this.QuotationExpiryDate)
        {
            // WorkerSalesResponsible is not a required field for Project quotation
            if (this.QuotationType == QuotationType::Project || this.WorkerSalesResponsible)
            {
                smmActivities = smmActivityCreate::createActivity(this);
                this.QuotationFollowupActivity = smmActivities.ActivityNumber;
            }
        }

        // Create opportunity
        if (smmLicense::crm())
        {
            if (!this.OpportunityId)
            {
                smmOpportunityTable = smmCreateEntity::createOpportunityFromQuotation(this);
            }
            else // Existing opportunity has been selected
            {
                smmOpportunityTable = smmOpportunityTable::find(this.OpportunityId);

                if (smmActivities)
                {
                    // Attach the activity created to the current stage since activity is not saved yet during the insert of parent link
                    smmActivityParentLinkTable = smmActivityParentLinkTable::findParentLink(smmActivities.ActivityNumber, smmActivityParentType::Opportunity);
                    smmProcessInstance::insertActivityToStage(smmActivityParentLinkTable);
                }
            }
        }

        if (smmActivities || smmOpportunityTable)
        {
            ttsbegin;

            salesQuotationCRM = SalesQuotationTable::find(this.QuotationId, true);

            this.updateSalesQuotationTableCRM(salesQuotationCRM, smmActivities, smmOpportunityTable);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesQuotationTableCRM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the sales quotation table record's CRM related fields.
    /// </summary>
    /// <param name = "_salesQuotationCRM">
    /// A sales quotation table buffer record to be updated.
    /// </param>
    /// <param name = "_smmActivities">
    /// A <c>smmActivities</c> table buffer record.
    /// </param>
    /// <param name = "_smmOpportunityTable">
    /// A <c>smmOpportunityTable</c> table buffer record.
    /// </param>
    protected void updateSalesQuotationTableCRM(SalesQuotationTable _salesQuotationCRM, smmActivities _smmActivities, smmOpportunityTable _smmOpportunityTable)
    {
        if (_smmActivities)
        {
            _salesQuotationCRM.QuotationFollowupActivity = _smmActivities.ActivityNumber;
        }

        if (_smmOpportunityTable)
        {
            _salesQuotationCRM.OpportunityId = _smmOpportunityTable.OpportunityId;
        }

        _salesQuotationCRM.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateTransferedItemReqStatus</Name>
				<Source><![CDATA[
    public static SalesQuotationTable checkUpdateTransferedItemReqStatus(QuotationIdBase   _quotationId)
    {
        SalesQuotationTable     salesQuotationTable;
        SalesQuotationLine      salesQuotationLine;

        if (_quotationId)
        {
            select firstonly RecId
                from salesQuotationLine
                index hint QuotationLineIdx
                where salesQuotationLine.QuotationId          == _quotationId
                    && salesQuotationLine.Transferred2ItemReq == NoYes::No;

            if (!(salesQuotationLine.RecId != 0))
            {
                ttsbegin;

                salesQuotationTable = SalesQuotationTable::find(_quotationId, true);
                salesQuotationTable.TransferredToItemReq = NoYes::Yes;
                salesQuotationTable.update(false);

                ttscommit;
            }
        }

        return salesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateTransferedStatus</Name>
				<Source><![CDATA[
    public static SalesQuotationTable checkUpdateTransferedStatus(QuotationIdBase   _quotationId)
    {
        SalesQuotationTable     salesQuotationTable;
        SalesQuotationLine      salesQuotationLine;

        if (_quotationId)
        {
            select firstonly RecId
                from  salesQuotationLine
                index hint QuotationLineIdx
                where salesQuotationLine.QuotationId          == _quotationId
                   && salesQuotationLine.Transferred2Forecast == NoYes::No;

            if (!(salesQuotationLine.RecId != 0))
            {
                ttsbegin;

                salesQuotationTable = SalesQuotationTable::find(_quotationId, true);
                salesQuotationTable.TransferredToForecast = NoYes::Yes;
                salesQuotationTable.update(false);

                ttscommit;
            }
        }

        return salesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(QuotationIdBase    quotationId)
    {
        if (!quotationId)
        {
            return false;
        }

        return (select firstonly RecId from salesQuotationTable
                    index hint QuotationIdx
                    where salesQuotationTable.QuotationId == quotationId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existProject_BusRelAccount</Name>
				<Source><![CDATA[
    static boolean existProject_BusRelAccount(smmBusRelAccount _busRelAccount)
    {
        return ((select firstonly RecId
                 from salesQuotationTable
                 where salesQuotationTable.BusRelAccount == _busRelAccount
                 && salesQuotationTable.QuotationType == QuotationType::Project).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existProject_custAccount</Name>
				<Source><![CDATA[
    static boolean existProject_custAccount(CustAccount _custAccount)
    {
        return ((   select firstonly salesQuotationTable
                    where salesQuotationTable.CustAccount == _custAccount
                    && salesQuotationTable.QuotationType == QuotationType::Project).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSales_BusRelAccount</Name>
				<Source><![CDATA[
    static boolean existSales_BusRelAccount(smmBusRelAccount _busRelAccount)
    {
        return ((select  firstonly RecId
                 from    salesQuotationTable
                 where   salesQuotationTable.BusRelAccount == _busRelAccount
                 &&      salesQuotationTable.QuotationType == QuotationType::Sales).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSales_custAccount</Name>
				<Source><![CDATA[
    static boolean existSales_custAccount(CustAccount _custAccount)
    {
        return ((select  firstonly RecId
                 from    salesQuotationTable
                 where   salesQuotationTable.CustAccount == _custAccount
                 &&      salesQuotationTable.QuotationType == QuotationType::Sales).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTemplate</Name>
				<Source><![CDATA[
    public static boolean existTemplate(QuotationType                    _quotationType,
                                        SalesQuotationTemplateGroupId    _groupId,
                                        QuotationTemplateName            _templateName)
    {
        if (!(_groupId && _templateName))
        {
            return false;
        }

        return (select firstonly RecId from salesQuotationTable
                    index hint QuotationTemplateIdx
                    where salesQuotationTable.QuotationType   == _quotationType &&
                          salesQuotationTable.TemplateGroupId == _groupId      &&
                          salesQuotationTable.TemplateName    == _templateName).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static SalesQuotationTable find(QuotationIdBase  _quotationId,
                                           boolean          _forupdate = false)
    {
        SalesQuotationTable     salesQuotationTable;

        if (_quotationId)
        {
            salesQuotationTable.selectForUpdate(_forupdate);
            salesQuotationTable.selectLocked(_forupdate);

            select firstonly salesQuotationTable
                index hint QuotationIdx
                where salesQuotationTable.QuotationId == _quotationId;
        }

        return salesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBankLG</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record that links to the specified <c>BankLGGuarantee</c> record.
    /// </summary>
    /// <param name="_bankLGRefRecId">
    /// The record ID of the related <c>BankLGGuarantee</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>SalesQuotationTable</c> table; otherwise, an empty record.
    /// </returns>
    public static SalesQuotationTable findByBankLG(
        BankLGRefRecId   _bankLGRefRecId,
        boolean          _forUpdate = false)
    {
        SalesQuotationTable             salesQuotationTable;
        BankLGGuaranteeSalesQuotation   bankLGGuaranteeSalesQuotation;

        salesQuotationTable.selectForUpdate(_forUpdate);

        if (_bankLGRefRecId)
        {
            select firstonly salesQuotationTable
                exists join bankLGGuaranteeSalesQuotation
                where bankLGGuaranteeSalesQuotation.SalesQuotation  == salesQuotationTable.QuotationId
                    && bankLGGuaranteeSalesQuotation.Guarantee      == _bankLGRefRecId;
        }

        return salesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProjId</Name>
				<Source><![CDATA[
    public static SalesQuotationTable findProjId(ProjId     _projId,
                                              boolean   _forupdate = false)
    {
        SalesQuotationTable     salesQuotationTable;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && _projId)
        {
            salesQuotationTable.selectForUpdate(_forupdate);

            select firstonly salesQuotationTable
                where salesQuotationTable.ProjIdRef == _projId;
        }

        return salesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsProjectQuotationForOpportunity</Name>
				<Source><![CDATA[
    public static boolean existsProjectQuotationForOpportunity(smmOpportunityId _opportunityId)
    {
        boolean projectQuotationExists;

        if (!_opportunityId)
        {
            projectQuotationExists = false;
        }
        else
        {
            SalesQuotationTable salesQuotationTable;

            select firstonly RecId from salesQuotationTable
                where salesQuotationTable.OpportunityId == _opportunityId
                    && salesQuotationTable.QuotationType == QuotationType::Project;

            projectQuotationExists = salesQuotationTable.RecId != 0;
        }

        return projectQuotationExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsSalesQuotationForOpportunity</Name>
				<Source><![CDATA[
    public static boolean existsSalesQuotationForOpportunity(smmOpportunityId _opportunityId)
    {
        boolean salesQuotationExists;

        if (!_opportunityId)
        {
            salesQuotationExists = false;
        }
        else
        {
            SalesQuotationTable salesQuotationTable;

            select firstonly RecId from salesQuotationTable
                where salesQuotationTable.OpportunityId == _opportunityId
                    && salesQuotationTable.QuotationType == QuotationType::Sales;

            salesQuotationExists = salesQuotationTable.RecId != 0;
        }

        return salesQuotationExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRec</Name>
				<Source><![CDATA[
    public static SalesQuotationTable findRec(RecId     _recId,
                                              boolean   _forupdate = false)
    {
        SalesQuotationTable     salesQuotationTable;

        if (_recId)
        {
            salesQuotationTable.selectForUpdate(_forupdate);

            select firstonly salesQuotationTable
                where salesQuotationTable.RecId == _recId;
        }

        return salesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTemplate</Name>
				<Source><![CDATA[
    public static SalesQuotationTable findTemplate(QuotationType                    _quotationType,
                                                   SalesQuotationTemplateGroupId    _groupId,
                                                   QuotationTemplateName            _templateName,
                                                   boolean                          _forupdate      = false)
    {
        SalesQuotationTable     salesQuotationTable;

        if (_groupId && _templateName)
        {
            salesQuotationTable.selectForUpdate(_forupdate);
            salesQuotationTable.selectLocked(_forupdate);

            select firstonly salesQuotationTable
                index hint QuotationTemplateIdx
                where salesQuotationTable.QuotationType     == _quotationType &&
                      salesQuotationTable.TemplateGroupId   == _groupId       &&
                      salesQuotationTable.TemplateName      == _templateName;
        }

        return salesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTemplateActive</Name>
				<Source><![CDATA[
    public static boolean isTemplateActive(QuotationType                    _quotationType,
                                           SalesQuotationTemplateGroupId    _groupId,
                                           QuotationTemplateName            _templateName = '')
    {
        if (!_groupId)
        {
            return false;
        }

        return (select firstonly RecId from salesQuotationTable
                    where salesQuotationTable.QuotationType   == _quotationType &&
                          salesQuotationTable.TemplateGroupId == _groupId      &&
                          (_templateName == '' || salesQuotationTable.TemplateName == _templateName) &&
                          salesQuotationTable.TemplateActive  == NoYes::Yes).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBusRelAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates a lookup for the business relation account field.
    /// </summary>
    /// <param name="_formControl">
    ///    The form control that the lookup should work on.
    /// </param>
    static void lookupBusRelAccount(FormStringControl _formControl)
    {
        // Business relations of type vendor & customer are filtered out.

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(smmBusRelTable), _formControl);

        sysTableLookup.addLookupfield(fieldNum(smmBusRelTable, BusRelAccount),true);
        sysTableLookup.addLookupfield(fieldNum(smmBusRelTable, Party));
        sysTableLookup.addLookupfield(fieldNum(smmBusRelTable, BusRelTypeId));
        sysTableLookup.addLookupfield(fieldNum(smmBusRelTable, MainContactWorker));

        sysTableLookup.parmQuery(SalesQuotationTable::lookupBusRelAccountQuery());
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBusRelAccountQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a query for the <c>SMMBusRelTable</c> that only returns business relation accounts of type
    ///    prospect.
    /// </summary>
    /// <returns>
    ///    A query for business relation accounts.
    /// </returns>
    static Query lookupBusRelAccountQuery()
    {
        QueryBuildDataSource            queryBuildDataSource;
        Query                           query = new Query();
        QueryBuildRange                 queryBuildRange;

        queryBuildDataSource = query.addDataSource(tableNum(smmBusRelTable));
        queryBuildDataSource.addSortField(fieldNum(smmBusRelTable, BusRelAccount));
        queryBuildDataSource = queryBuildDataSource.addDataSource(tableNum(smmBusRelTypeGroup));
        queryBuildDataSource.relations(true);

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(smmBusRelTypeGroup, TableType));
        queryBuildRange.value(queryValue(smmBusRelTypeSourceTable::Relation));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupOpportunityId</Name>
				<Source><![CDATA[
    static void lookupOpportunityId(FormStringControl _callerControl, smmOpportunityId _opportunityId, DirPartyRecId _party)
    {
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource;
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(smmOpportunityTable), _callerControl);

        sysTableLookup.addLookupfield(fieldNum(smmOpportunityTable, OpportunityId),true);
        sysTableLookup.addLookupfield(fieldNum(smmOpportunityTable, Subject));

        queryBuildDataSource = query.addDataSource(tableNum(smmOpportunityTable));
        queryBuildDataSource.addRange(fieldNum(smmOpportunityTable, Status)).value(SysQuery::valueNot(smmOpportunityStatus::Won));
        queryBuildDataSource = queryBuildDataSource.addDataSource(tableNum(DirPartyTable));
        queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
        queryBuildDataSource.fetchMode(QueryFetchMode::One2One);
        queryBuildDataSource.addLink(fieldNum(smmOpportunityTable, Party), fieldNum(DirPartyTable, RecId));
        queryBuildDataSource.addRange(fieldNum(DirPartyTable, RecId)).value(queryValue(_party));

        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTemplateGroupId</Name>
				<Source><![CDATA[
    public static void lookupTemplateGroupId(FormStringControl  _lookupCtrl)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    qbDataSource;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            sysTableLookup      = SysTableLookup::newParameters(tableNum(SalesQuotationTemplateGroup), _lookupCtrl);
            query               = new Query();
            qbDataSource        = query.addDataSource(tableNum(SalesQuotationTemplateGroup));

            sysTableLookup.addLookupfield(fieldNum(SalesQuotationTemplateGroup, TemplateGroupId));
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTemplateName</Name>
				<Source><![CDATA[
    static void lookupTemplateName(FormStringControl                _lookupCtrl,
                                   QuotationType                    _quotationType,
                                   SalesQuotationTemplateGroupId    _templateGroupId)
    {
        if (! _templateGroupId)
        {
            throw error("@SYS84525");
        }

        Query query = SalesQuotationTable::salesQuotationTableQuery(_quotationType, _templateGroupId);

        SysTableLookup sysTableLookup = SalesQuotationTable::initSalesQuotationTableSysTableLookup(_lookupCtrl, query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQuotationTableQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>SalesQuotationTable</c> query.
    /// </summary>
    /// <param name="_quotationType">
    /// The quotation type.
    /// </param>
    /// <param name="_templateGroupId">
    /// The sales quotation template group id.
    /// </param>
    /// <returns>
    /// The created <c>SalesQuotationTable</c> query.
    /// </returns>
    protected static Query salesQuotationTableQuery(QuotationType _quotationType, SalesQuotationTemplateGroupId _templateGroupId)
    {
        Query                   query               = new Query();
        QueryBuildDataSource    qbDataSource        = query.addDataSource(tableNum(SalesQuotationTable));
        QueryBuildRange         qbRangeActive       = qbDataSource.addRange(fieldNum(SalesQuotationTable, TemplateActive));
        QueryBuildRange         qbRangeType         = qbDataSource.addRange(fieldNum(SalesQuotationTable, QuotationType));
        QueryBuildRange         qbRangeGroupId      = qbDataSource.addRange(fieldNum(SalesQuotationTable, TemplateGroupId));

        qbRangeActive.value(queryValue(enum2str(NoYes::Yes)));
        qbRangeType.value(queryValue(enum2str(_quotationType)));
        qbRangeGroupId.value(queryValue(_templateGroupId));
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesQuotationTableSysTableLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an <c>SysTableLookup</c> instance for <c>SalesQuotationTable</c>.
    /// </summary>
    /// <param name="_lookupCtrl">
    /// The lookup string.
    /// </param>
    /// <param name="_salesQuotationTableQuery">
    /// The <c>SalesQuotationTable</c> query.
    /// </param>
    /// <returns>
    /// <c>SysTableLookup</c> instance.
    /// </returns>
    protected static SysTableLookup initSalesQuotationTableSysTableLookup(FormStringControl _lookupCtrl, Query _salesQuotationTableQuery)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(SalesQuotationTable), _lookupCtrl);
        sysTableLookup.addLookupfield(fieldNum(SalesQuotationTable, TemplateName));
        sysTableLookup.parmQuery(_salesQuotationTableQuery);
        return sysTableLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrFindBySalesID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record associated with the passed <c>salesID</c>
    /// if one does not exist, a blank record is returned.
    /// </summary>
    /// <param name="_salesId">
    /// The <c>salesID</c> value to search for in the <c>SalesQuotationTable</c> table.
    /// </param>
    /// <param name="_forupdate">
    /// If true the <c>SalesQuotationTable</c> record is selected for update;
    /// otherwise, the <c>SalesQuotationTable</c> record is not selected for update; optional.
    /// </param>
    /// <returns>
    /// The <c>SalesQuotationTable</c> record that was found.
    /// </returns>
    public static SalesQuotationTable mcrFindBySalesID(SalesId  _salesId, boolean  _forupdate = false)
    {
        SalesQuotationTable     salesQuotationTable;

        if (_salesId)
        {
            salesQuotationTable.selectForUpdate(_forupdate);
            salesQuotationTable.selectLocked(_forupdate);

            select firstonly salesQuotationTable
                index hint QuotationIdx
                where salesQuotationTable.SalesIdRef == _salesId;
        }

        return salesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrJumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Passes a record and a string to the <c>SalesTable</c> menufunction.
    /// </summary>
    /// <param name="_record">
    /// The record with which to initialize the <c>SalesTable</c> menufunction.
    /// </param>
    /// <param name="_parm">
    /// The string paramter to pass to the <c>SalesTable</c> menufunction.
    /// </param>
    /// <param name="_caller">
    /// The calling object; optional.
    /// </param>
    /// <returns>
    /// The return value from running the <c>SalesTable</c> menufunction.
    /// </returns>
    public static str mcrJumpRef(Common _record, str _parm, Object _caller = null)
    {
        Args            args;
        FormRun         formRun;
        str             rv;
        args = new Args();
        args.parmEnum(NoYes::Yes);
        args.record(_record);
        args.parm(_parm);
        args.caller(_caller);
        formRun = new MenuFunction(menuitemDisplayStr(SalesQuotationTableForNew), MenuItemType::Display).create(args);
        formRun.run();
        formRun.wait();

        rv = args.parm();
        return rv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptConvertCurrencyCode</Name>
				<Source><![CDATA[
    static container promptConvertCurrencyCode(SalesQuotationTable   _salesQuotationTable)
    {
        DialogButton            dialogButton;

        if (!isConfigurationkeyEnabled(configurationKeyNum(PriceDisc)))
        {
            dialogButton = Box::okCancel("@SYS84562", DialogButton::Ok);
            if (dialogButton == DialogButton::Ok)
            {
                return [NoYes::Yes, TradeCurencyConversion::ExchRate];
            }

            return [NoYes::No, TradeCurencyConversion::ExchRate];
        }
        return TradeCurrencyConversionPrompt::newFromParm(_salesQuotationTable,
                                                          _salesQuotationTable.QuotationId,
                                                          _salesQuotationTable.priceDiscChangePolicyExistOnLine()
                                                          ).promptConvertCurrencyCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptCopyDeliveryAddress</Name>
				<Source><![CDATA[
    static DialogButton  promptCopyDeliveryAddress()
    {
        return Box::yesYesAllNoCancel("@SYS84560", DialogButton::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocuRefOnInsert</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(DocuRefExtension), delegatestr(DocuRefExtension, OnInsert))]
    static void DocuRefOnInsert(DocuRef _docuRef, RecId _interCompanyFromRecId)
    {
        if (_docuRef.RefTableId == tablenum(SalesQuotationTable))
        {
            changecompany(_docuRef.RefCompanyId)
            {
                SalesQuotationTable salesQuotationTable = SalesQuotationTable::findRec(_docuRef.RefRecId);

                _docuRef.Party              = salesQuotationTable.party();
                _docuRef.ContactPersonId    = salesQuotationTable.ContactPersonId;
                _docuRef.Author             = DirPersonUser::current().PersonParty;
                _docuRef.ActualCompanyId    = curext();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByActivityRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the quotation record using the specified activity record id
    /// </summary>
    /// <param name = "_activity">Activity record identifier</param>
    /// <param name = "_forUpdate">Determines when the quotation record will be returned for update</param>
    /// <returns>SalesQuotationTable record</returns>
    public static SalesQuotationTable findByActivityRecId(ActivityRecId _activity, boolean _forUpdate = false)
    {
        SalesQuotationTable quote;
        HierarchyLinkTable hierarchy;
        HierarchyTreeTable hierarchyTree;

        quote.selectForUpdate(_forUpdate);

        select quote
            join hierarchy
                where hierarchy.RefRecId == quote.RecId
                && hierarchy.RefTableId == quote.TableId
            join hierarchyTree
                where hierarchyTree.HierarchyId == hierarchy.HierarchyId
                && hierarchyTree.ParentElementNumber == ''
                && hierarchyTree.RefRecId == _activity;

        return quote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailChannelName</Name>
				<Source><![CDATA[
    /// <summary>
    /// For retrieving original channel name for the sales quotation.
    /// </summary>
    /// <returns>
    /// Channel name for the current salesQuotationtable record.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display RetailStoreName getRetailChannelName()
    {
        RetailChannelView    retailChannelView;
        RetailChannelTable   retailChannelTable;
        RetailStoreTable     retailStoreTable;
        RetailStoreName      storeName;

        if (this.RetailChannelTable)
        {
            retailChannelTable = RetailChannelTable::findByRecId(this.RetailChannelTable);

            if (retailChannelTable.ChannelType == RetailChannelType::RetailStore)
            {
                retailStoreTable = RetailStoreTable::findRecId(retailChannelTable.RecId);
                storeName = retailStoreTable.StoreNumber;
            }
            else
            {
                select Name from  retailChannelView
                where retailChannelView.Recid1 == this.RetailChannelTable;

                storeName = retailChannelView.Name;
            }
        }
        else if (this.SalesIdRef)
        {
            storeName = SalesTable::find(this.SalesIdRef, false).getRetailChannelName();
        }

        return storeName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCheckIfAnyNonApprovedLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if any line is not approved
    /// </summary>
    /// <returns>
    /// True if any line not approved, else false
    /// </returns>
    public boolean mcrCheckIfAnyNonApprovedLine()
    {
        SalesQuotationLine          salesQuotationLine;
        MCRSalesQuotationLine       mcrSalesQuotationLine;

        select firstonly RecId from mcrSalesQuotationLine
            join RecId from salesQuotationLine
                where mcrSalesQuotationLine.SalesQuotationLine == salesQuotationLine.RecId
                   && salesQuotationLine.QuotationId == this.QuotationId
                   && mcrSalesQuotationLine.RetailPriceOverrideWorkflowState != RetailPriceOverrideWorkflowState::None
                   && mcrSalesQuotationLine.RetailPriceOverrideWorkflowState != RetailPriceOverrideWorkflowState::Approved;

        if (mcrSalesQuotationLine)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchTableInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SalesPurchTableInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// The <c>SalesPurchTableInterface</c> object.
    /// </returns>
    public SalesPurchTableInterface salesPurchTableInterface()
    {
        return this.salesPurchTable::salesPurchTableInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editFixedExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets Fixed exchange rate field.
    /// </summary>
    /// <param name="_set"> Boolean indicating if the field is being set.</param>
    /// <param name="_exchRate">The new value of Fixed exchange rate field <paramref name="_set" /> is true.</param>
    /// <returns>
    /// The value of Fixed exchange rate field.
    /// </returns>
    public edit SalesFixedExchRate editFixedExchRate(boolean _set, SalesFixedExchRate _exchRate)
    {
        ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), this.CurrencyCode);

        if (_set)
        {
            this.FixedExchRate = exchangeRateHelper.prepareExchangeRateForStorage(_exchRate);
        }
        else
        {
            _exchRate = exchangeRateHelper.displayStoredExchangeRate(this.FixedExchRate);
        }

        return _exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingSkipUpdateLine_delegate</Name>
				<Source><![CDATA[
    delegate void kittingSkipUpdateLine_delegate(SalesQuotationLine _salesQuotationLine, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingSkipUpdateLine</Name>
				<Source><![CDATA[
    private boolean kittingSkipUpdateLine(SalesQuotationLine _salesQuotationLine)
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        this.kittingSkipUpdateLine_delegate(_salesQuotationLine, resultValue);
        return resultValue.hasResult() && resultValue.booleanResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimensionsAfterConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merges the default dimensions of the SQ header and lines from new customer, converted from the prospect
    /// </summary>
    /// <returns>The new default dimension.</returns>
    public DimensionDefault mergeDimensionsAfterConversion()
    {
        // Get the default dimension from the new customer
        DimensionDefault origSQDefaultDimension = this.defaultDimension;

        ttsbegin;
        this.selectForUpdate(true);
        this.initFromCustTable();
        this.defaultDimension = this.mergeDimension(origSQDefaultDimension, this.defaultDimension, DimensionMerge::newFromTable(this, this.companyInfo().RecId));
        this.update();

        SalesQuotationLine salesQuotationLine;

        while select forupdate salesQuotationLine where salesQuotationLine.quotationId == this.QuotationId
        {
            salesQuotationLine.defaultDimension = this.mergeDimension(salesQuotationLine.defaultDimension, this.defaultDimension, DimensionMerge::newFromTable(this, this.companyInfo().RecId));
            salesQuotationLine.doUpdate();
        }

        ttscommit;
        
        return this.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjectTypeByProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the project type.
    /// </summary>
    /// <param name = "_projTable">
    /// An instance of <c>ProjTable</c> which holds the value.
    /// </param>
    /// <returns>
    /// True if the project type is not timeMaterial and Fixed price; otherwise, false.
    /// </returns>
    public boolean validateProjectTypeByProject(ProjTable _projTable)
    {
        return (_projTable.Type != ProjType::TimeMaterial && _projTable.Type != ProjType::FixedPrice && !(ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled() && _projTable.ProjInvoiceProjId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIntegrationOwnerDynamics365Sales</Name>
				<Source><![CDATA[
    internal boolean isIntegrationOwnerDynamics365Sales(SalesQuotationOwnershipType _quotationOwnership = this.QuotationOwnership)
    {
        return ((this.QuotationHeaderCreationMethod == SalesQuotationCreationMethod::Dynamics365Sales && _quotationOwnership == SalesQuotationOwnershipType::BasedOnOrigin)
            || _quotationOwnership == SalesQuotationOwnershipType::Dynamics365Sales)
                && SalesParameters::find().IsD365SalesQuotationLifecycleEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesQuotationLinesDynamics365Sales</Name>
				<Source><![CDATA[
    internal void updateSalesQuotationLinesDynamics365Sales(SalesQuotationStatus _fromQuotationStatus)
    {
        if (this.isIntegrationOwnerDynamics365Sales())
        {
            SalesQuotationTable origSalesQuotationTable = this.data();

            origSalesQuotationTable.QuotationStatus = _fromQuotationStatus;

            this.updateSalesQuotationLinesOnUpdateSalesQuotationTable(origSalesQuotationTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIntegration</Name>
				<Source><![CDATA[
    internal boolean validateIntegration()
    {
        if (this.QuotationStatus != SalesQuotationStatus::Created
            && this.isIntegrationOwnerDynamics365Sales()
            && this.IsIntegration != TradeIntegrationType::Dynamics365Sales
            && SalesQuotationTableIntegrationValidationFlight::instance().isEnabled())
        {
            return checkFailed(strFmt("@SalesAndMarketing:SalesQuotationUpdateCreationMethodDynamics365Error", this.QuotationId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuotationOwnership</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean updateQuotationOwnership(SalesQuotationOwnershipType _newOwnershipType)
    {
        if (!SalesParameters::find().IsD365SalesQuotationLifecycleEnabled)
        {
            return false;
        }

        boolean ret;

        ttsbegin;

        this.reread();

        if (this && this.QuotationOwnership != _newOwnershipType
            && this.canUpdateQuotationOwnership(true))
        {
            SalesQuotationOwnershipChangeLog::logChange(this.QuotationId, this.QuotationOwnership, _newOwnershipType);

            this.selectForUpdate(true);
            this.QuotationOwnership = _newOwnershipType;
            this.update();

            ret = true;
        }

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateQuotationOwnership</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean canUpdateQuotationOwnership(boolean _throwOnError = false)
    {
        boolean ret = true;

        if (!SalesParameters::find().IsD365SalesQuotationLifecycleEnabled)
        {
            return false;
        }

        if (this.QuotationStatus != SalesQuotationStatus::Created
            && this.QuotationStatus != SalesQuotationStatus::Sent)
        {
            if (_throwOnError)
            {
                throw error(strFmt("@SalesAndMarketing:SalesQuotationOwnershipChangeNotAllowed", this.QuotationStatus));
            }
            ret = false;
        }

        if (this.QuotationStatus == SalesQuotationStatus::Sent
            && !CustQuotationJour::existOrigQuotationId(this.QuotationId)
            && SalesQuotationLine::exist(this.QuotationId))
        {
            if (_throwOnError)
            {
                throw error(strFmt("@SalesAndMarketing:SalesQuotationOwnershipChangeNotAllowedInSent", this.QuotationStatus));
            }
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private static SalesInstrumentationLogger instrumentationLogger()
    {
        return SalesInstrumentationLogger::createLogger(tableStr(SalesQuotationTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRetailSalesQuotationTableFromRetailChannel</Name>
				<Source><![CDATA[
    protected void initRetailSalesQuotationTableFromRetailChannel(
        RetailSalesQuotationTable _retailSalesQuotationTable,
        MCRChannelUser _mcrChannelUser)
    {
        RetailChannelTable retailChannelTable = RetailChannelTable::findByRecId(_mcrChannelUser.Channel);

        _retailSalesQuotationTable.RetailChannel = _mcrChannelUser.Channel;
        _retailSalesQuotationTable.OMInternalOrganization = retailChannelTable.OMOperatingUnitId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>QuotationBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124575</DeveloperDocumentation>
	<FormRef>SalesQuotationJumpRef</FormRef>
	<Label>@SYS114606</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>QuotationId</TitleField1>
	<TitleField2>QuotationName</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>QuotationIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>QuotationIdx</PrimaryIndex>
	<ReplacementKey>QuotationIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>MCRSalesQuotationTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MCRSalesQuotationTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>MarkupTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MarkupTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PrintMgmtDocInstance</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PrintMgmtDocInstance</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>SalesQuotationLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SalesQuotationLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>SalesQuotationPriceSimTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SalesQuotationPriceSimTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>smmActivityParentLinkTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>smmActivityParentLinkTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>smmQuotationAlternativeQuotations</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>smmQuotationAlternativeQuotations</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TaxWorkRegulation</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TaxWorkRegulation</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QuotationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConfirmDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>salesOrderDocumentStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationExpiryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QuotationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressLookup</Name>
			<Label>@SYS88672</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QuotationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BusRelAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressReference</Name>
			<Label>@SYS88679</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AddressRefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkerSalesTaker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerSalesResponsible</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesOriginId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Competitor</Name>
			<Label>@SYS79821</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ContactInfo</Name>
			<Label>@SYS21663</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>URL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Email</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CurrencyShow</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editFixedExchRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustomerBusRelInfo</Name>
			<Label>@SYS84549</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BusRelAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Email</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>URL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustomerPayment</Name>
			<Label>@SYS23013</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymSpec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettleVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CovStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportingCurrencyFixedExchRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustomerReference</Name>
			<Label>@SYS81755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustPurchaseOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerRef</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Delivery</Name>
			<Label>@SYS4508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReceiptDateRequested</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShippingDateRequested</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryDateControlType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTerm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvReason</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExportReason</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeliveryAddress</Name>
			<Label>@SYS7924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeliveryInfo</Name>
			<Label>@SYS78577</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Port</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transport</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeliverySummary</Name>
			<Label>@SYS22058</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimensions</Name>
			<Label>@SYS80374</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DiscountMiscCharges</Name>
			<Label>@SYS22031</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PriceGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DocumentInfo</Name>
			<Label>@SYS22604</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocuIntro</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocuConclusion</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Documents</Name>
			<Label>@SYS80611</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocuTitle</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EPProjectMiniPage</Name>
			<Label>@SYS108232</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QuotationName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerSalesResponsible</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editContactPersonName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationExpiryDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EPSalesMiniPage</Name>
			<Label>@SYS108232</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QuotationName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerSalesResponsible</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editContactPersonName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationExpiryDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalInformation_BR</Name>
			<Label>@GLS56</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesPurchOperationType_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustFinalUser_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Forecast</Name>
			<Label>@SYS13699</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ModelId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ForeignTrade</Name>
			<Label>@SYS27650</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Port</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatProcId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Listcode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountyOrigDest</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>HeaderToLineUpdate</Name>
			<Label>@SYS62436</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideSalesTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Port</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatProcId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiptDateRequested</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShippingDateRequested</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTerm</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QuotationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Integration</Name>
			<Label>@SYS4004738</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemInfo</Name>
			<Label>@SYS84548</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LedgerInfo</Name>
			<Label>@SYS84550</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MCRAll</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QuotationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationExpiryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigQuotationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfirmDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTerm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPoolId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CommissionGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InclTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Payment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSpec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Listcode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FreightSlipType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FreightZone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BusRelAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiptDateRequested</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Email</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>URL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryDateControlType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReasonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesIdRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjIdRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CallListID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocuIntro</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocuConclusion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocuTitle</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustPurchaseOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesOriginId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationFollowUpDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationFollowupActivity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Touched</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressRefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Port</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatProcId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettleVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CovStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedDueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Estimate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TemplateGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TemplateName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TemplateActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransferredToForecast</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShippingDateRequested</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemTagging</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExportReason</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvReason</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EnterpriseNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CaseTagging</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PalletTagging</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OpportunityId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransferredToItemReq</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SystemEntrySource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SystemEntryChangePolicy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ManualEntryChangepolicy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountyOrigDest</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerSalesTaker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankDocumentType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportingCurrencyFixedExchRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MCRReservation</Name>
			<Label>@SYS7669</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Payment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankDocumentType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FineCode_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestCode_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSADescription</Name>
			<Label>@SYS25589</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PSAInternalDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAExternalDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSAEstimatedDate</Name>
			<Label>@SYS22322</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PSASchedCalendarId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAEstProjStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAEstProjEndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAEstdProjDuration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSASchedIgnoreCalendar</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSAGroup</Name>
			<Label>@PSA43</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PSAWizardNotOk</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Quotation</Name>
			<Label>@SYS5864</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>createdDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BusRelAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>QuotationStatus</Name>
			<Label>@SYS2945</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QuotationStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>salesOrderDocumentStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationExpiryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationFollowUpDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReferencesSales</Name>
			<Label>@SYS14018</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesIdRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CallListID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OpportunityId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Sales</Name>
			<Label>@SYS54441</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkerSalesResponsible</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPoolId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CommissionGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesInfo</Name>
			<Label>@SYS81539</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Estimate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedDueDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EnterpriseNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InclTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideSalesTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SMAAgreement</Name>
			<Label>@SYS79078</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Statistics</Name>
			<Label>@SYS22702</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StatProcId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationFollowupActivity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Summary</Name>
			<Label>@SYS80378</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReasonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfirmDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Template</Name>
			<Label>@SYS71551</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TemplateGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TemplateName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TemplateActive</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransferredToProject</Name>
			<Label>@SYS84561</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjIdRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransferredToForecast</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransferredToItemReq</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transport</Name>
			<Label>@SYS3843</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Listcode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FreightSlipType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FreightZone</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>UpgradeHistory</Name>
			<Label>@SYS97801</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrigQuotationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WebCategoryBrowsing</Name>
			<Label>@SYS74258</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QuotationStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkflowPreview</Name>
			<Label>@PSA11546</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QuotationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationExpiryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAEstProjStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAEstProjEndDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VATNum</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VATNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNumRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNumTableType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>QuotationCreation</Name>
			<Label>@SalesAndMarketing:SalesQuotationTable_QuotationCreationGroup</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QuotationHeaderCreationMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationOwnership</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LineDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustLineDiscCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>QuotationId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>QuotationIdBase</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AddressRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AddressRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AddressRefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AddressRefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BankDocumentType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BankLGDocumentType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BusRelAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmBusRelAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CallListID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmTMCallListID</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CampaignId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CaseTagging</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RFIDCaseTagging</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CashDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCashDiscCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CashDiscPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>ES</CountryRegionCodes>
			<ExtendedDataType>DiscPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CommissionGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CommissCustomerGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ConfirmDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS84593</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPersonId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ContactPersonId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountyOrigDest</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AddressCountyOrigDest</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CovStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CovStatus</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CustFinalUser_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendFinalUser_BR</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomerRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustRef</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustPurchaseOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPurchaseOrder</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DeliveryDateControlType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SalesDeliveryDateControlType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsDeliveryName</ExtendedDataType>
			<GroupPrompt>@SYS7399</GroupPrompt>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DiscPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesEndDiscPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>QuotationDlvModeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvReason</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DlvReasonId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvTerm</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DlvTermId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocuConclusion</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmQuotationDocuConclusionText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocuIntro</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmQuotationDocuIntroText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocuTitle</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmQuotationDocuTitle</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Email</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Email</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EndDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustEndDiscCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EnterpriseNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxEnterpriseNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Estimate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesEstimateGross</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExportReason</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesExportReason</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FineCode_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>CustFineCode_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FixedDueDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesFixedDueDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FixedExchRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesFixedExchRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReportingCurrencyFixedExchRate</Name>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FreightSlipType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustFreightSlipType</ExtendedDataType>
			<EnumType>FreightSlipType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FreightZone</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustFreightZoneId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InclTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InclTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InterestCode_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>CustInterestCode_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesInventLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustInvoiceAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ItemTagging</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RFIDItemTagging</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LanguageId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Listcode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ListcodeId</ExtendedDataType>
			<FeatureClass>EUSalesListToggle</FeatureClass>
			<EnumType>Listcode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ManualEntryChangepolicy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceDiscPolicyManual</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MarkupGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustMarkupGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ModelId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ForecastModelId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MultiLineDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustMultiLineDiscCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NumberSequenceGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NumberSequenceGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OpportunityId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmOpportunityId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigQuotationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>QuotationIdBase</ExtendedDataType>
			<Label>@SYS97766</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PalletTagging</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RFIDPalletTagging</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Payment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPaymTermId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS828</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPaymMode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymSpec</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymSpec</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Port</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatPortId</ExtendedDataType>
			<FeatureClass>IntrastatPortToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPostingProfile</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PriceGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPriceGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjIdRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjInvoiceProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjInvoiceProjId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PSAEstdProjDuration</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>RealBase</ExtendedDataType>
			<Label>@PSA10114</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PSAEstProjEndDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>EndDate</ExtendedDataType>
			<Label>@PSA11098</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PSAEstProjStartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>StartDate</ExtendedDataType>
			<Label>@PSA11099</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAExternalDescription</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>Notes</ExtendedDataType>
			<Label>@SYS54822</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAInternalDescription</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>Notes</ExtendedDataType>
			<Label>@PSA11097</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSASchedCalendarId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>CalendarId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PSASchedIgnoreCalendar</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>PSAIgnoreCalendar</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PSAWizardNotOk</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@PSA10637</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>QuotationCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesQuotationTypeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>QuotationExpiryDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>QuotationExpiryDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>QuotationFollowupActivity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmQuotationFollowupActivity</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>QuotationFollowUpDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmQuotationFollowUpDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>QuotationName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>QuotationName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>QuotationStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SalesQuotationStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>QuotationType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>QuotationType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReasonId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmQuotationReasonId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReceiptDateRequested</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesReceiptDateRequested</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RetailChannelTable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailChannelRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CommissSalesGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesIdRef</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesOriginId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesOriginId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesPoolId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesPoolId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS84547</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesPurchOperationType_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesPurchOperationTypeRecId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesUnitId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmSalesUnitId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServiceId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAAgreementId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SettleVoucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesSettlementType</ExtendedDataType>
			<EnumType>SettlementType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ShippingDateRequested</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesShippingDateRequested</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StatProcId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatProcId</ExtendedDataType>
			<FeatureClass>IntrastatProcToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SystemEntryChangePolicy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceDiscPolicySystem</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SystemEntrySource</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>PriceDiscSystemSource</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TemplateActive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>QuotationTemplateActive</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TemplateGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesQuotationTemplateGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TemplateName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>QuotationTemplateName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Touched</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeTouched</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransactionCodeId</ExtendedDataType>
			<FeatureClass>IntrastatTransactionCodeToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransferredToForecast</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesQuotationTransferred</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransferredToItemReq</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesQuotationTransferredItemReq</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Transport</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransport</ExtendedDataType>
			<FeatureClass>IntrastatTransportToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>URL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>URL</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VATNum</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VATNumJournal</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerSalesResponsible</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WorkerSalesResponsible</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerSalesTaker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SalesTaker</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OperatingUnitPartyNumber</Name>
			<ExtendedDataType>DirPartyNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VATNumRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VATNumTableType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<Visible>No</Visible>
			<EnumType>TaxExemptNumberSourceType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideSalesTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntegrationOverrideSalesTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>QuotationHeaderCreationMethod</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<FeatureClass>SalesQuotationD365SalesFeature</FeatureClass>
			<EnumType>SalesQuotationCreationMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>QuotationOwnership</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<FeatureClass>SalesQuotationD365SalesFeature</FeatureClass>
			<EnumType>SalesQuotationOwnershipType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsRevision</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesQuotationIsRevision</ExtendedDataType>
			<FeatureClass>SalesQuotationD365SalesFeature</FeatureClass>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsIntegration</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>TradeIntegrationType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SalesQuotationIntegrationCreationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>SalesQuotationIntegrationCreationType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>QuotationIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>QuotationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StatusIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>QuotationStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>QuotationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>QuotationTemplateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>QuotationType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TemplateGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TemplateName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjStatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjIdRef</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>QuotationStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WorkerSalesResponsibleIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkerSalesResponsible</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustBusAccountsIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BusRelAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>createdDateTime</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SalesPurchOperationType_BRIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesPurchOperationType_BR</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DeliveryPostalAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>BankLGDocumentMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BankDocumentType</MapField>
					<MapFieldTo>BankDocumentType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentId</MapField>
					<MapFieldTo>QuotationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
					<MapFieldTo>BusRelAccount</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>CurrencyCodeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>InventStorageDimMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
					<MapFieldTo>InventLocationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
					<MapFieldTo>InventSiteId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PaymModeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PaymMode</MapField>
					<MapFieldTo>PaymMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymSpec</MapField>
					<MapFieldTo>PaymSpec</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PriceDiscHeading</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccountNum</MapField>
					<MapFieldTo>CustAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AgreementPartnerCode_RU</MapField>
					<MapFieldTo>CustAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Currency</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DiscPercent</MapField>
					<MapFieldTo>DiscPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndDisc</MapField>
					<MapFieldTo>EndDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLineDisc</MapField>
					<MapFieldTo>MultiLineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceGroup</MapField>
					<MapFieldTo>PriceGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>QuotationId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PriceDiscResultFields</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DiscPercent</MapField>
					<MapFieldTo>DiscPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ManualEntryChangePolicy</MapField>
					<MapFieldTo>ManualEntryChangepolicy</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLineDiscCode</MapField>
					<MapFieldTo>MultiLineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnDisc</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnPercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RecieptDeliveryDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>QuotationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateConfirmed</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateRequested</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SystemEntryChangePolicy</MapField>
					<MapFieldTo>SystemEntryChangePolicy</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SystemEntrySource</MapField>
					<MapFieldTo>SystemEntrySource</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesDeliveryDateControlMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ATPApplyDemandTimeFence</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPApplySupplyTimeFence</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPBackwardDemandTimeFence</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPBackwardSupplyTimeFence</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPInclPlannedOrders</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPTimeFence</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustAccount</MapField>
					<MapFieldTo>CustAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryDateControlType</MapField>
					<MapFieldTo>DeliveryDateControlType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DlvMode</MapField>
					<MapFieldTo>DlvMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
					<MapFieldTo>InventLocationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
					<MapFieldTo>InventSiteId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Location</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReceiptDateConfirmed</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReceiptDateRequested</MapField>
					<MapFieldTo>ReceiptDateRequested</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierAccountCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierDlvType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierID</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateConfirmed</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateRequested</MapField>
					<MapFieldTo>ShippingDateRequested</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SkipUpdate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchTable</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CashDisc</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscPercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsTarget_JP</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustVendGroup_CZ</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension_CZ</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DiscPercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InclTax</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LanguageId_CZ</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceGroup_CZ</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymentSched_CZ</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Payment_CZ</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymMode_CZ</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymSpec_CZ</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>QuotationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATNum_CZ</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TradePostalAddress</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DeliveryName</MapField>
					<MapFieldTo>DeliveryName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TransitDocumentTransactionMap_IN</MappingTable>
			<Connections />
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>RetailOrderHeaderMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustAccount</MapField>
					<MapFieldTo>CustAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustomerRef</MapField>
					<MapFieldTo>CustomerRef</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustomerRequisition</MapField>
					<MapFieldTo>CustPurchaseOrder</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DlvMode</MapField>
					<MapFieldTo>DlvMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Email</MapField>
					<MapFieldTo>Email</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Id</MapField>
					<MapFieldTo>QuotationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InclTax</MapField>
					<MapFieldTo>InclTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
					<MapFieldTo>InventLocationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
					<MapFieldTo>InventSiteId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LanguageId</MapField>
					<MapFieldTo>LanguageId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceGroup</MapField>
					<MapFieldTo>NumberSequenceGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReceiptDateRequested</MapField>
					<MapFieldTo>ReceiptDateRequested</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RetailChannelTable</MapField>
					<MapFieldTo>RetailChannelTable</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesGroup</MapField>
					<MapFieldTo>SalesGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateRequested</MapField>
					<MapFieldTo>ShippingDateRequested</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WorkerSalesResponsible</MapField>
					<MapFieldTo>WorkerSalesResponsible</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WorkerSalesTaker</MapField>
					<MapFieldTo>WorkerSalesTaker</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalTable</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InclTax</MapField>
					<MapFieldTo>InclTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Posted</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ListCode</MapField>
					<MapFieldTo>ListCode</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TaxExemptVATNumMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>VATNum</MapField>
					<MapFieldTo>VATNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATNumRecId</MapField>
					<MapFieldTo>VATNumRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATNumTableType</MapField>
					<MapFieldTo>VATNumTableType</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CashDisc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CashDisc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CashDisc</Name>
					<Field>CashDisc</Field>
					<RelatedField>CashDiscCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CommissionCustomerGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CommissionCustomerGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CommissionGroup</Name>
					<Field>CommissionGroup</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CommissionSalesGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CommissionSalesGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesGroup</Name>
					<Field>SalesGroup</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Common</Name>
			<RelatedTable>Common</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AddressRefRecId</Name>
					<Field>AddressRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AddressRefTableId</Name>
					<Field>AddressRefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ContactPerson</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ContactPerson</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContactPersonId</Name>
					<Field>ContactPersonId</Field>
					<RelatedField>ContactPersonId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ContactPersonId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CountyOrigDest</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCounty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CountyOrigDest</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountyOrigDest</Name>
					<Field>CountyOrigDest</Field>
					<RelatedField>CountyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustFineCode_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustFineSetup_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FineCode_BR</Name>
					<Field>FineCode_BR</Field>
					<RelatedField>FineCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>FineCode</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInterestCode_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustInterestSetup_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InterestCode_BR</Name>
					<Field>InterestCode_BR</Field>
					<RelatedField>InterestCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InterestCode</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustLedger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile</Name>
					<Field>PostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PostingIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustLineDiscountGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PriceDiscGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustLineDiscountGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LineDisc</Name>
					<SourceEDT>CustLineDiscCode</SourceEDT>
					<Field>LineDisc</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<SourceEDT>CustLineDiscCode</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>PriceGroupType::LineDiscGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<SourceEDT>CustLineDiscCode</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Cust</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustMarkupGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MarkupGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustMarkupGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MarkupGroup</Name>
					<Field>MarkupGroup</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<RelatedField>Module</RelatedField>
					<ValueStr>MarkupModuleType::Cust</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustMultiLineDiscountGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PriceDiscGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustMultiLineDiscountGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MultiLineDisc</Name>
					<SourceEDT>CustMultiLineDiscCode</SourceEDT>
					<Field>MultiLineDisc</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<SourceEDT>CustMultiLineDiscCode</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>PriceGroupType::MultiLineDiscGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<SourceEDT>CustMultiLineDiscCode</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Cust</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustPaymModeSpec</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustPaymModeSpec</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymMode</Name>
					<Field>PaymMode</Field>
					<RelatedField>PaymMode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymSpec</Name>
					<Field>PaymSpec</Field>
					<RelatedField>Specification</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PaymSpecIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustPaymModeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustPaymModeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymMode</Name>
					<Field>PaymMode</Field>
					<RelatedField>PaymMode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PaymModeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustPriceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PriceDiscGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustPriceGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PriceGroupId</Name>
					<SourceEDT>CustPriceGroup</SourceEDT>
					<Field>PriceGroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<SourceEDT>CustPriceGroup</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>PriceGroupType::PriceGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<SourceEDT>CustPriceGroup</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Cust</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTotalDiscountGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PriceDiscGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTotalDiscountGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EndDisc</Name>
					<SourceEDT>CustEndDiscCode</SourceEDT>
					<Field>EndDisc</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<SourceEDT>CustEndDiscCode</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>PriceGroupType::EndDiscGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<SourceEDT>CustEndDiscCode</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Cust</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_SalesQuotationTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DeliveryPostalAddress_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsPostalAddress</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsPostalAddress_SalesQuotationTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DlvMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvMode</Name>
					<Field>DlvMode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvReason</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DlvReason</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvReason</Name>
					<Field>DlvReason</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DlvTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvTerm</Name>
					<Field>DlvTerm</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ForecastModel</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ForecastModel</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ModelId</Name>
					<Field>ModelId</Field>
					<RelatedField>ModelId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatPort</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatPort</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Port</Name>
					<Field>Port</Field>
					<RelatedField>PortId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PortIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatStatProc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatStatProc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StatProcId</Name>
					<Field>StatProcId</Field>
					<RelatedField>StatProcId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatProcIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransactionCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatTransactionCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransactionCode</Name>
					<Field>TransactionCode</Field>
					<RelatedField>TransactionCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransportMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatTransportMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Transport</Name>
					<Field>Transport</Field>
					<RelatedField>TransPortCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransPortCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteId</Name>
					<Field>InventSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SiteIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InvoiceCustomer</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InvoiceCustomer</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceAccount</Name>
					<SourceEDT>CustInvoiceAccount</SourceEDT>
					<Field>InvoiceAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LanguageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LanguageTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LanguageId</Name>
					<Field>LanguageId</Field>
					<RelatedField>LanguageId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>LabelFile_Extern</Name>
					<RelatedField>LabelFile</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Key</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NumberSequenceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>NumberSequenceGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NumberSequenceGroup</Name>
					<Field>NumberSequenceGroup</Field>
					<RelatedField>numberSequenceGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>groupId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OrderCustomer</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OrderCustomer</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OriginSalesQuotationTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>SalesQuotationTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigQuotationId</Name>
					<SourceEDT>QuotationIdBase</SourceEDT>
					<Field>OrigQuotationId</Field>
					<RelatedField>QuotationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>QuotationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PaymTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Payment</Name>
					<Field>Payment</Field>
					<RelatedField>PaymTermId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TermIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PriceDiscChangePolicyRecId1</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PriceDiscChangePolicy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PriceDiscChangePolicy</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PriceDiscChangePolicy_SalesQuotationTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SystemEntryChangePolicy</Name>
					<Field>SystemEntryChangePolicy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PriceDiscChangePolicyRecId2</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PriceDiscChangePolicy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PriceDiscChangePolicy_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PriceDiscChangePolicy_1_SalesQuotationTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ManualEntryChangepolicy</Name>
					<Field>ManualEntryChangepolicy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjInvoiceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjInvoiceProjId</Name>
					<Field>ProjInvoiceProjId</Field>
					<RelatedField>ProjInvoiceProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjInvoiceIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjIdRef</Name>
					<Field>ProjIdRef</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesOriginId</Name>
					<Field>SalesOriginId</Field>
					<RelatedField>OriginId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesOriginIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesPool</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesPool</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesPoolId</Name>
					<Field>SalesPoolId</Field>
					<RelatedField>SalesPoolId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesPoolIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesPurchOperationType_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesPurchOperationType_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesPurchOperationType_BR</Name>
					<Field>SalesPurchOperationType_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesQuotationTemplateGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesQuotationTemplateGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TemplateGroupId</Name>
					<Field>TemplateGroupId</Field>
					<RelatedField>TemplateGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesQuotationTypeGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesQuotationTypeGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>QuotationCategory</Name>
					<Field>QuotationCategory</Field>
					<RelatedField>TypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesIdRef</Name>
					<Field>SalesIdRef</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SMAAgreementTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SMAAgreementTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ServiceId</Name>
					<Field>ServiceId</Field>
					<RelatedField>AgreementId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AgreementIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>QuotationFollowupActivity</Name>
					<Field>QuotationFollowupActivity</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmBusRelTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>smmBusRelTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BusRelAccount</Name>
					<Field>BusRelAccount</Field>
					<RelatedField>BusRelAccount</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmCampaignTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>smmCampaignTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CampaignId</Name>
					<Field>CampaignId</Field>
					<RelatedField>CampaignId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CampaignIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>smmOpportunityTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>smmOpportunityTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OpportunityId</Name>
					<Field>OpportunityId</Field>
					<RelatedField>OpportunityId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmQuotationReasonGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>smmQuotationReasonGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonId</Name>
					<Field>ReasonId</Field>
					<RelatedField>ReasonId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ReasonIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmSalesUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>smmSalesUnit</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesUnitId</Name>
					<Field>SalesUnitId</Field>
					<RelatedField>SalesUnitId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesUnitIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmTMCallListGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>smmTMCallListGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CallListID</Name>
					<Field>CallListID</Field>
					<RelatedField>CallListID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CallListdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkCalendarTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WorkCalendarTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSASchedCalendarId</Name>
					<SourceEDT>CalendarId</SourceEDT>
					<Field>PSASchedCalendarId</Field>
					<RelatedField>CalendarId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CalendarIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkerSalesResponsible_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesResponsible</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesResponsible_SalesQuotationTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerSalesResponsible</Name>
					<Field>WorkerSalesResponsible</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkerSalesTaker_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesTaker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesTaker_SalesQuotationTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerSalesTaker</Name>
					<Field>WorkerSalesTaker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailChannelTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailChannelTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailChannelTable</Name>
					<Field>RetailChannelTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsPostalAddressBaseEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddressBaseEntity</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>AddressRecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>